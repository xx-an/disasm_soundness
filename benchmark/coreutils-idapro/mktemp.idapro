LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 47C008982095CA1640BFDD546493E4788433DED3B61DB25A20D5CC68E41AC93B
LOAD:0000000000000000 ; Input MD5    : E53AB79E5DA0415B65C3123F6C6D66DF
LOAD:0000000000000000 ; Input CRC32  : 0E1061E9
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/mktemp
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'mktemp.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'filenamecat.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'tempname.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'randint.c'
LOAD:0000000000000000 ; Source File : 'randread.c'
LOAD:0000000000000000 ; Source File : 'rand-isaac.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 32F68h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 8B10h                ; Size in file image
LOAD:00000000000000D8                 dq 8B10h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 9A70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 209A70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 610h                 ; Size in file image
LOAD:0000000000000110                 dq 7D0h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9BD8h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209BD8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 78A0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 78A0h                ; Physical address
LOAD:00000000000001B0                 dq 324h                 ; Size in file image
LOAD:00000000000001B8                 dq 324h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 9A70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 209A70h              ; Physical address
LOAD:0000000000000220                 dq 590h                 ; Size in file image
LOAD:0000000000000228                 dq 590h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 92h, 0F0h, 4Ch, 0DBh, 0AAh, 0D6h, 0B9h, 79h, 93h, 38h ; Desc
LOAD:0000000000000284                 db 46h, 47h, 0CDh, 4Dh, 7Dh, 54h, 6Ah, 51h, 8Dh, 4Eh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 44h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 44h, 45h, 4Ah
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_A00, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_A00, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_A00, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aRemove - offset byte_A00, 12h, 0, 0, \ ; "remove"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_A00, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_A00, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_A00, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_A00, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aReadChk - offset byte_A00, 12h, 0, 0, \ ; "__read_chk"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aMkdir - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "mkdir"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aPuts - offset byte_A00, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aFcntl - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000418                            0>
LOAD:0000000000000430                 Elf64_Sym <offset aGetpid - offset byte_A00, 12h, 0, 0, \ ; "getpid"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aFreadUnlocked - offset byte_A00, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_A00, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aFclose - offset byte_A00, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aBindtextdomain - offset byte_A00, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aDcgettext - offset byte_A00, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_A00, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrlen - offset byte_A00, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aLxstat - offset byte_A00, 12h, 0, 0, \ ; "__lxstat"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStackChkFail - offset byte_A00, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aGetuid - offset byte_A00, 12h, 0, 0, \ ; "getuid"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGetoptLong - offset byte_A00, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMbrtowc - offset byte_A00, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aStrrchr - offset byte_A00, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aLseek - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000580                            0>
LOAD:0000000000000598                 Elf64_Sym <offset aGettimeofday - offset byte_A00, 12h, 0, 0, \ ; "gettimeofday"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aAssertFail - offset byte_A00, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemset - offset byte_A00, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFclose+1 - offset byte_A00, 12h, 0, 0, \ ; "close"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aStrspn - offset byte_A00, 12h, 0, 0, \ ; "strspn"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aLibcStartMain - offset byte_A00, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aMemcmp - offset byte_A00, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFputsUnlocked - offset byte_A00, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aCalloc - offset byte_A00, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFputcUnlocked - offset byte_A00, 12h, 0, 0, \ ; "fputc_unlocked"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aGmonStart - offset byte_A00, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aMemcpy - offset byte_A00, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFileno - offset byte_A00, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aGetgid - offset byte_A00, 12h, 0, 0, \ ; "getgid"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMalloc - offset byte_A00, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFflush - offset byte_A00, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aNlLanginfo - offset byte_A00, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFreading - offset byte_A00, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aRealloc - offset byte_A00, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFdopen - offset byte_A00, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aSetlocale - offset byte_A00, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aPrintfChk - offset byte_A00, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aSetvbuf - offset byte_A00, 12h, 0, 0, \ ; "setvbuf"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMempcpy - offset byte_A00, 12h, 0, 0, \ ; "mempcpy"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aError - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000007D8                            0>
LOAD:00000000000007F0                 Elf64_Sym <offset aExplicitBzeroC - offset byte_A00, 12h, 0, 0, \ ; "__explicit_bzero_chk"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFdopen+2 - offset byte_A00, 12h, 0, 0, \ ; "open"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aFseeko - offset byte_A00, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aFopen - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000838                            0>
LOAD:0000000000000850                 Elf64_Sym <offset aCxaAtexit - offset byte_A00, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aGetppid - offset byte_A00, 12h, 0, 0, \ ; "getppid"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aExit+1 - offset byte_A00, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aFwrite - offset byte_A00, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFprintfChk - offset byte_A00, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aItmRegistertmc - offset byte_A00, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aMbsinit - offset byte_A00, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aIswprint - offset byte_A00, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aCxaFinalize - offset byte_A00, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aCtypeBLoc - offset byte_A00, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aStdout - offset byte_A00, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000940                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000958                 Elf64_Sym <offset aProgname - offset byte_A00, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000958                            offset __bss_start, 8>
LOAD:0000000000000970                 Elf64_Sym <offset aProgramInvocat - offset byte_A00, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000970                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000988                 Elf64_Sym <offset aPrognameFull - offset byte_A00, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000988                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000009A0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_A00, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000009A0                            offset __bss_start, 8>
LOAD:00000000000009B8                 Elf64_Sym <offset aStderr - offset byte_A00, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000009B8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000009D0                 Elf64_Sym <offset aOptind - offset byte_A00, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000009D0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009E8                 Elf64_Sym <offset aOptarg - offset byte_A00, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000009E8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00 ; ELF String Table
LOAD:0000000000000A00 byte_A00        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A00                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000A01 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000DE8↓o
LOAD:0000000000000A0B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000A12 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A1F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A29 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A31 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000A37 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A3F aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000A46 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A4E aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000A58 aFputcUnlocked  db 'fputc_unlocked',0   ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A67 aError          db 'error',0            ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000A6D aReadChk        db '__read_chk',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A78 aPuts           db 'puts',0             ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A7D aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000A8E aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000A97 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000AA0 aMkdir          db 'mkdir',0            ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000AA6 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000AAE aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000AB4 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000AB4                                         ; LOAD:0000000000000880↑o
LOAD:0000000000000ABA aGetpid         db 'getpid',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000AC1 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000AC8 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000AC8                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000AE0 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000AEE aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000AEE                                         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B05 aGetppid        db 'getppid',0          ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B0D aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000B14 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000B1B aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000B2A aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B31 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000B42 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000B49 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000B51 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000B5F aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000B66 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B6C aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000B73 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000B73                                         ; LOAD:00000000000005E0↑o
LOAD:0000000000000B7A aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B81 aRemove         db 'remove',0           ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000B88 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B90 aGetgid         db 'getgid',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000B97 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000BA3 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000BB1 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000BB8 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000BBF aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000BCA aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000BD1 aGetuid         db 'getuid',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000BD8 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000BE4 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000BEB aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000BF2 aGettimeofday   db 'gettimeofday',0     ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000BFF aExplicitBzeroC db '__explicit_bzero_chk',0
LOAD:0000000000000BFF                                         ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000C14 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000C1F aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000C1F                                         ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000C3D aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000C3D                                         ; LOAD:0000000000000808↑o
LOAD:0000000000000C44 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000C53 aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C5B aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000C61 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000C61                                         ; LOAD:0000000000000460↑o
LOAD:0000000000000C70 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C70                                         ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C82 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C89 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000C98 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000C9D aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000CA8 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000CB8 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000CC5 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000DF8↓o
LOAD:0000000000000CCF aGlibc225       db 'GLIBC_2.25',0       ; DATA XREF: LOAD:0000000000000E08↓o
LOAD:0000000000000CDA aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000E18↓o
LOAD:0000000000000CE6 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000E28↓o
LOAD:0000000000000CF1 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000E38↓o
LOAD:0000000000000CFB aGlibc225_0     db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000E48↓o
LOAD:0000000000000D07 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000D07                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000D23 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000D32 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000D32                                         ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000D4C ; ELF GNU Symbol Version Table
LOAD:0000000000000D4C                 dw 0
LOAD:0000000000000D4E                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D52                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; remove@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D5A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D5C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D60                 dw 3                    ; __read_chk@@GLIBC_2.4
LOAD:0000000000000D62                 dw 2                    ; mkdir@@GLIBC_2.2.5
LOAD:0000000000000D64                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000D66                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000D68                 dw 2                    ; getpid@@GLIBC_2.2.5
LOAD:0000000000000D6A                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D6C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D6E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D70                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D74                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D7C                 dw 2                    ; getuid@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D82                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D84                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D86                 dw 2                    ; gettimeofday@@GLIBC_2.2.5
LOAD:0000000000000D88                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000D8A                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D8C                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000D8E                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000D90                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D92                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D94                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D96                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D98                 dw 2                    ; fputc_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D9C                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D9E                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000DA0                 dw 2                    ; getgid@@GLIBC_2.2.5
LOAD:0000000000000DA2                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000DA4                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000DA6                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000DA8                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000DAA                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000DAC                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000DAE                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000DB0                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000DB2                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:0000000000000DB4                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000000DB6                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000DB8                 dw 6                    ; __explicit_bzero_chk@@GLIBC_2.25
LOAD:0000000000000DBA                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000DBC                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000DBE                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000DC0                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000DC2                 dw 2                    ; getppid@@GLIBC_2.2.5
LOAD:0000000000000DC4                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000DC6                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000DC8                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000DCA                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000DCC                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000DCE                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000DD0                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000DD2                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000DD4                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000DD6                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000DD8                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000DDA                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000DDC                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000DDE                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000DE0                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000DE2                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000DE4                 dw 0
LOAD:0000000000000DE6                 dw 0
LOAD:0000000000000DE8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000DE8                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_A00, 10h, 0> ; "libc.so.6"
LOAD:0000000000000DF8                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_A00, \ ; "GLIBC_2.3"
LOAD:0000000000000DF8                                10h>
LOAD:0000000000000E08                 Elf64_Vernaux <6969185h, 0, 6, offset aGlibc225 - offset byte_A00, \ ; "GLIBC_2.25"
LOAD:0000000000000E08                                10h>
LOAD:0000000000000E18                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_A00, \ ; "GLIBC_2.3.4"
LOAD:0000000000000E18                                10h>
LOAD:0000000000000E28                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_A00, \ ; "GLIBC_2.14"
LOAD:0000000000000E28                                10h>
LOAD:0000000000000E38                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_A00, \ ; "GLIBC_2.4"
LOAD:0000000000000E38                                10h>
LOAD:0000000000000E48                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225_0 - offset byte_A00, \ ; "GLIBC_2.2.5"
LOAD:0000000000000E48                                0>
LOAD:0000000000000E58 ; ELF RELA Relocation Table
LOAD:0000000000000E58                 Elf64_Rela <209A70h, 8, 2330h> ; R_X86_64_RELATIVE +2330h
LOAD:0000000000000E70                 Elf64_Rela <209A78h, 8, 22F0h> ; R_X86_64_RELATIVE +22F0h
LOAD:0000000000000E88                 Elf64_Rela <209A80h, 8, 675Bh> ; R_X86_64_RELATIVE +675Bh
LOAD:0000000000000EA0                 Elf64_Rela <209AA0h, 8, 6765h> ; R_X86_64_RELATIVE +6765h
LOAD:0000000000000EB8                 Elf64_Rela <209AC0h, 8, 676Bh> ; R_X86_64_RELATIVE +676Bh
LOAD:0000000000000ED0                 Elf64_Rela <209AE0h, 8, 6773h> ; R_X86_64_RELATIVE +6773h
LOAD:0000000000000EE8                 Elf64_Rela <209B00h, 8, 677Ah> ; R_X86_64_RELATIVE +677Ah
LOAD:0000000000000F00                 Elf64_Rela <209B20h, 8, 6781h> ; R_X86_64_RELATIVE +6781h
LOAD:0000000000000F18                 Elf64_Rela <209B40h, 8, 6786h> ; R_X86_64_RELATIVE +6786h
LOAD:0000000000000F30                 Elf64_Rela <209B80h, 8, 6F79h> ; R_X86_64_RELATIVE +6F79h
LOAD:0000000000000F48                 Elf64_Rela <209B88h, 8, 6F81h> ; R_X86_64_RELATIVE +6F81h
LOAD:0000000000000F60                 Elf64_Rela <209B90h, 8, 6F87h> ; R_X86_64_RELATIVE +6F87h
LOAD:0000000000000F78                 Elf64_Rela <209B98h, 8, 6F94h> ; R_X86_64_RELATIVE +6F94h
LOAD:0000000000000F90                 Elf64_Rela <209BA0h, 8, 6FA1h> ; R_X86_64_RELATIVE +6FA1h
LOAD:0000000000000FA8                 Elf64_Rela <209BA8h, 8, 6FB5h> ; R_X86_64_RELATIVE +6FB5h
LOAD:0000000000000FC0                 Elf64_Rela <209BB0h, 8, 6FB7h> ; R_X86_64_RELATIVE +6FB7h
LOAD:0000000000000FD8                 Elf64_Rela <209BB8h, 8, 6F9Ah> ; R_X86_64_RELATIVE +6F9Ah
LOAD:0000000000000FF0                 Elf64_Rela <209BC0h, 8, 66F3h> ; R_X86_64_RELATIVE +66F3h
LOAD:0000000000001008                 Elf64_Rela <209BC8h, 8, 6FBFh> ; R_X86_64_RELATIVE +6FBFh
LOAD:0000000000001020                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000001038                 Elf64_Rela <20A010h, 8, 6F0Eh> ; R_X86_64_RELATIVE +6F0Eh
LOAD:0000000000001050                 Elf64_Rela <20A060h, 8, 20A070h> ; R_X86_64_RELATIVE +20A070h
LOAD:0000000000001068                 Elf64_Rela <20A078h, 8, 20A100h> ; R_X86_64_RELATIVE +20A100h
LOAD:0000000000001080                 Elf64_Rela <209FD0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001098                 Elf64_Rela <209FD8h, 2200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000010B0                 Elf64_Rela <209FE0h, 2700000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000010C8                 Elf64_Rela <209FE8h, 3F00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000010E0                 Elf64_Rela <209FF0h, 4200000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000010F8                 Elf64_Rela <20A080h, 4500000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001110                 Elf64_Rela <20A088h, 4400000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001128                 Elf64_Rela <20A090h, 4A00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001140                 Elf64_Rela <20A098h, 4B00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001158                 Elf64_Rela <20A0A0h, 4700000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001170                 Elf64_Rela <20A0C0h, 4900000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001188 ; ELF JMPREL Relocation Table
LOAD:0000000000001188                 Elf64_Rela <209DE0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000011A0                 Elf64_Rela <209DE8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000011B8                 Elf64_Rela <209DF0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000011D0                 Elf64_Rela <209DF8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000011E8                 Elf64_Rela <209E00h, 500000007h, 0> ; R_X86_64_JUMP_SLOT remove
LOAD:0000000000001200                 Elf64_Rela <209E08h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001218                 Elf64_Rela <209E10h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001230                 Elf64_Rela <209E18h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001248                 Elf64_Rela <209E20h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __read_chk
LOAD:0000000000001260                 Elf64_Rela <209E28h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT mkdir
LOAD:0000000000001278                 Elf64_Rela <209E30h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000001290                 Elf64_Rela <209E38h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:00000000000012A8                 Elf64_Rela <209E40h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT getpid
LOAD:00000000000012C0                 Elf64_Rela <209E48h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:00000000000012D8                 Elf64_Rela <209E50h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000012F0                 Elf64_Rela <209E58h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001308                 Elf64_Rela <209E60h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001320                 Elf64_Rela <209E68h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001338                 Elf64_Rela <209E70h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001350                 Elf64_Rela <209E78h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001368                 Elf64_Rela <209E80h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000001380                 Elf64_Rela <209E88h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001398                 Elf64_Rela <209E90h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT getuid
LOAD:00000000000013B0                 Elf64_Rela <209E98h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000013C8                 Elf64_Rela <209EA0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000013E0                 Elf64_Rela <209EA8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000013F8                 Elf64_Rela <209EB0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001410                 Elf64_Rela <209EB8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT gettimeofday
LOAD:0000000000001428                 Elf64_Rela <209EC0h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001440                 Elf64_Rela <209EC8h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001458                 Elf64_Rela <209ED0h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001470                 Elf64_Rela <209ED8h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001488                 Elf64_Rela <209EE0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000014A0                 Elf64_Rela <209EE8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000014B8                 Elf64_Rela <209EF0h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000014D0                 Elf64_Rela <209EF8h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fputc_unlocked
LOAD:00000000000014E8                 Elf64_Rela <209F00h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001500                 Elf64_Rela <209F08h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001518                 Elf64_Rela <209F10h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT getgid
LOAD:0000000000001530                 Elf64_Rela <209F18h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001548                 Elf64_Rela <209F20h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001560                 Elf64_Rela <209F28h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001578                 Elf64_Rela <209F30h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001590                 Elf64_Rela <209F38h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000015A8                 Elf64_Rela <209F40h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:00000000000015C0                 Elf64_Rela <209F48h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000015D8                 Elf64_Rela <209F50h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000015F0                 Elf64_Rela <209F58h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001608                 Elf64_Rela <209F60h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000001620                 Elf64_Rela <209F68h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001638                 Elf64_Rela <209F70h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __explicit_bzero_chk
LOAD:0000000000001650                 Elf64_Rela <209F78h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001668                 Elf64_Rela <209F80h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001680                 Elf64_Rela <209F88h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001698                 Elf64_Rela <209F90h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000016B0                 Elf64_Rela <209F98h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT getppid
LOAD:00000000000016C8                 Elf64_Rela <209FA0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000016E0                 Elf64_Rela <209FA8h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000016F8                 Elf64_Rela <209FB0h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001710                 Elf64_Rela <209FB8h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001728                 Elf64_Rela <209FC0h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001740                 Elf64_Rela <209FC8h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001740 LOAD            ends
LOAD:0000000000001740
.init:0000000000001758 ; ===========================================================================
.init:0000000000001758
.init:0000000000001758 ; Segment type: Pure code
.init:0000000000001758 ; Segment permissions: Read/Execute
.init:0000000000001758 _init           segment dword public 'CODE' use64
.init:0000000000001758                 assume cs:_init
.init:0000000000001758                 ;org 1758h
.init:0000000000001758                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001758
.init:0000000000001758 ; =============== S U B R O U T I N E =======================================
.init:0000000000001758
.init:0000000000001758
.init:0000000000001758                 public _init_proc
.init:0000000000001758 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001758                 sub     rsp, 8          ; _init
.init:000000000000175C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001763                 test    rax, rax
.init:0000000000001766                 jz      short loc_176A
.init:0000000000001768                 call    rax ; __gmon_start__
.init:000000000000176A
.init:000000000000176A loc_176A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000176A                 add     rsp, 8
.init:000000000000176E                 retn
.init:000000000000176E _init_proc      endp
.init:000000000000176E
.init:000000000000176E _init           ends
.init:000000000000176E
LOAD:000000000000176F ; ===========================================================================
LOAD:000000000000176F
LOAD:000000000000176F ; Segment type: Pure code
LOAD:000000000000176F ; Segment permissions: Read/Execute
LOAD:000000000000176F LOAD            segment byte public 'CODE' use64
LOAD:000000000000176F                 assume cs:LOAD
LOAD:000000000000176F                 ;org 176Fh
LOAD:000000000000176F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000176F                 align 10h
LOAD:000000000000176F LOAD            ends
LOAD:000000000000176F
.plt:0000000000001770 ; ===========================================================================
.plt:0000000000001770
.plt:0000000000001770 ; Segment type: Pure code
.plt:0000000000001770 ; Segment permissions: Read/Execute
.plt:0000000000001770 _plt            segment para public 'CODE' use64
.plt:0000000000001770                 assume cs:_plt
.plt:0000000000001770                 ;org 1770h
.plt:0000000000001770                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770
.plt:0000000000001770 sub_1770        proc near               ; CODE XREF: .plt:000000000000178B↓j
.plt:0000000000001770                                         ; .plt:000000000000179B↓j ...
.plt:0000000000001770 ; __unwind {
.plt:0000000000001770                 push    cs:qword_209DD0
.plt:0000000000001776                 jmp     cs:qword_209DD8
.plt:0000000000001776 sub_1770        endp
.plt:0000000000001776
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:000000000000177C                 align 20h
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; char *getenv(const char *name)
.plt:0000000000001780 _getenv         proc near               ; CODE XREF: main+3BF↓p
.plt:0000000000001780                                         ; main+55E↓p
.plt:0000000000001780                 jmp     cs:getenv_ptr
.plt:0000000000001780 _getenv         endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    0
.plt:000000000000178B                 jmp     sub_1770
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; void free(void *ptr)
.plt:0000000000001790 _free           proc near               ; CODE XREF: main+2EE↓p
.plt:0000000000001790                                         ; quotearg_n_options+115↓p ...
.plt:0000000000001790                 jmp     cs:free_ptr
.plt:0000000000001790 _free           endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    1
.plt:000000000000179B                 jmp     sub_1770
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: noreturn thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; void __noreturn abort(void)
.plt:00000000000017A0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000017A0                                         ; quotearg_buffer_restyled:def_2CD1↓p ...
.plt:00000000000017A0                 jmp     cs:abort_ptr
.plt:00000000000017A0 _abort          endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    2
.plt:00000000000017AB                 jmp     sub_1770
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; int *__errno_location(void)
.plt:00000000000017B0 ___errno_location proc near             ; CODE XREF: main+48E↓p
.plt:00000000000017B0                                         ; main+504↓p ...
.plt:00000000000017B0                 jmp     cs:__errno_location_ptr
.plt:00000000000017B0 ___errno_location endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    3
.plt:00000000000017BB                 jmp     sub_1770
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; int remove(const char *filename)
.plt:00000000000017C0 _remove         proc near               ; CODE XREF: main+498↓p
.plt:00000000000017C0                 jmp     cs:remove_ptr
.plt:00000000000017C0 _remove         endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    4
.plt:00000000000017CB                 jmp     sub_1770
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000017D0 _strncmp        proc near               ; CODE XREF: usage+2CC↓p
.plt:00000000000017D0                                         ; usage+38D↓p
.plt:00000000000017D0                 jmp     cs:strncmp_ptr
.plt:00000000000017D0 _strncmp        endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    5
.plt:00000000000017DB                 jmp     sub_1770
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: noreturn thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; void __noreturn _exit(int status)
.plt:00000000000017E0 __exit          proc near               ; CODE XREF: maybe_close_stdout+32↓p
.plt:00000000000017E0                                         ; close_stdout+88↓p
.plt:00000000000017E0                 jmp     cs:_exit_ptr
.plt:00000000000017E0 __exit          endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    6
.plt:00000000000017EB                 jmp     sub_1770
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; size_t __fpending(FILE *fp)
.plt:00000000000017F0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000017F0                 jmp     cs:__fpending_ptr
.plt:00000000000017F0 ___fpending     endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    7
.plt:00000000000017FB                 jmp     sub_1770
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ___read_chk     proc near               ; CODE XREF: randread_new+118↓p
.plt:0000000000001800                 jmp     cs:__read_chk_ptr
.plt:0000000000001800 ___read_chk     endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    8
.plt:000000000000180B                 jmp     sub_1770
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; int mkdir(const char *path, __mode_t mode)
.plt:0000000000001810 _mkdir          proc near               ; CODE XREF: try_dir+5↓j
.plt:0000000000001810                 jmp     cs:mkdir_ptr
.plt:0000000000001810 _mkdir          endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    9
.plt:000000000000181B                 jmp     sub_1770
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; int puts(const char *s)
.plt:0000000000001820 _puts           proc near               ; CODE XREF: main+403↓p
.plt:0000000000001820                                         ; main+46C↓p ...
.plt:0000000000001820                 jmp     cs:puts_ptr
.plt:0000000000001820 _puts           endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    0Ah
.plt:000000000000182B                 jmp     sub_1770
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001830 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001830                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001830                 jmp     cs:fcntl_ptr
.plt:0000000000001830 _fcntl          endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    0Bh
.plt:000000000000183B                 jmp     sub_1770
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; __pid_t getpid(void)
.plt:0000000000001840 _getpid         proc near               ; CODE XREF: randread_new+197↓p
.plt:0000000000001840                                         ; randread_new+2C2↓p
.plt:0000000000001840                 jmp     cs:getpid_ptr
.plt:0000000000001840 _getpid         endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    0Ch
.plt:000000000000184B                 jmp     sub_1770
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001850 _fread_unlocked proc near               ; CODE XREF: randread+61↓p
.plt:0000000000001850                 jmp     cs:fread_unlocked_ptr
.plt:0000000000001850 _fread_unlocked endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    0Dh
.plt:000000000000185B                 jmp     sub_1770
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; char *textdomain(const char *domainname)
.plt:0000000000001860 _textdomain     proc near               ; CODE XREF: main+52↓p
.plt:0000000000001860                 jmp     cs:textdomain_ptr
.plt:0000000000001860 _textdomain     endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    0Eh
.plt:000000000000186B                 jmp     sub_1770
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; int fclose(FILE *stream)
.plt:0000000000001870 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001870                                         ; rpl_fclose+6B↓j
.plt:0000000000001870                 jmp     cs:fclose_ptr
.plt:0000000000001870 _fclose         endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    0Fh
.plt:000000000000187B                 jmp     sub_1770
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001880 _bindtextdomain proc near               ; CODE XREF: main+46↓p
.plt:0000000000001880                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001880 _bindtextdomain endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    10h
.plt:000000000000188B                 jmp     sub_1770
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001890 _dcgettext      proc near               ; CODE XREF: main+39F↓p
.plt:0000000000001890                                         ; main+4BB↓p ...
.plt:0000000000001890                 jmp     cs:dcgettext_ptr
.plt:0000000000001890 _dcgettext      endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    11h
.plt:000000000000189B                 jmp     sub_1770
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000018A0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000018A0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000018A0 ___ctype_get_mb_cur_max endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    12h
.plt:00000000000018AB                 jmp     sub_1770
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; size_t strlen(const char *s)
.plt:00000000000018B0 _strlen         proc near               ; CODE XREF: base_len+4↓p
.plt:00000000000018B0                                         ; mfile_name_concat+33↓p ...
.plt:00000000000018B0                 jmp     cs:strlen_ptr
.plt:00000000000018B0 _strlen         endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    13h
.plt:00000000000018BB                 jmp     sub_1770
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000018C0 ___lxstat       proc near               ; CODE XREF: try_nocreate+26↓p
.plt:00000000000018C0                 jmp     cs:__lxstat_ptr
.plt:00000000000018C0 ___lxstat       endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    14h
.plt:00000000000018CB                 jmp     sub_1770
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: noreturn thunk
.plt:00000000000018D0
.plt:00000000000018D0 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_3E33↓p
.plt:00000000000018D0                                         ; quotearg_n_style:loc_4459↓p ...
.plt:00000000000018D0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000018D0 ___stack_chk_fail endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    15h
.plt:00000000000018DB                 jmp     sub_1770
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; __uid_t getuid(void)
.plt:00000000000018E0 _getuid         proc near               ; CODE XREF: randread_new+1C4↓p
.plt:00000000000018E0                 jmp     cs:getuid_ptr
.plt:00000000000018E0 _getuid         endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    16h
.plt:00000000000018EB                 jmp     sub_1770
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000018F0 _getopt_long    proc near               ; CODE XREF: main+96↓p
.plt:00000000000018F0                 jmp     cs:getopt_long_ptr
.plt:00000000000018F0 _getopt_long    endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    17h
.plt:00000000000018FB                 jmp     sub_1770
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001900 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001900                 jmp     cs:mbrtowc_ptr
.plt:0000000000001900 _mbrtowc        endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    18h
.plt:000000000000190B                 jmp     sub_1770
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; char *strrchr(const char *s, int c)
.plt:0000000000001910 _strrchr        proc near               ; CODE XREF: main+5DE↓p
.plt:0000000000001910                                         ; set_program_name+E↓p
.plt:0000000000001910                 jmp     cs:strrchr_ptr
.plt:0000000000001910 _strrchr        endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    19h
.plt:000000000000191B                 jmp     sub_1770
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001920 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001920                                         ; rpl_fseeko+3B↓p
.plt:0000000000001920                 jmp     cs:lseek_ptr
.plt:0000000000001920 _lseek          endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    1Ah
.plt:000000000000192B                 jmp     sub_1770
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
.plt:0000000000001930 _gettimeofday   proc near               ; CODE XREF: randread_new+188↓p
.plt:0000000000001930                                         ; randread_new+278↓p
.plt:0000000000001930                 jmp     cs:gettimeofday_ptr
.plt:0000000000001930 _gettimeofday   endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    1Bh
.plt:000000000000193B                 jmp     sub_1770
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: noreturn thunk
.plt:0000000000001940
.plt:0000000000001940 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001940 ___assert_fail  proc near               ; CODE XREF: gen_tempname_len+30↓p
.plt:0000000000001940                 jmp     cs:__assert_fail_ptr
.plt:0000000000001940 ___assert_fail  endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    1Ch
.plt:000000000000194B                 jmp     sub_1770
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001950 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001950                                         ; xzalloc+12↓j
.plt:0000000000001950                 jmp     cs:memset_ptr
.plt:0000000000001950 _memset         endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    1Dh
.plt:000000000000195B                 jmp     sub_1770
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; int close(int fd)
.plt:0000000000001960 _close          proc near               ; CODE XREF: main+4D5↓p
.plt:0000000000001960                                         ; randread_new+123↓p ...
.plt:0000000000001960                 jmp     cs:close_ptr
.plt:0000000000001960 _close          endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    1Eh
.plt:000000000000196B                 jmp     sub_1770
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000001970 _strspn         proc near               ; CODE XREF: try_tempname_len+68↓p
.plt:0000000000001970                 jmp     cs:strspn_ptr
.plt:0000000000001970 _strspn         endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    1Fh
.plt:000000000000197B                 jmp     sub_1770
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001980 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001980                 jmp     cs:memcmp_ptr
.plt:0000000000001980 _memcmp         endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    20h ; ' '
.plt:000000000000198B                 jmp     sub_1770
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001990 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001990                                         ; usage+C2↓p ...
.plt:0000000000001990                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001990 _fputs_unlocked endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    21h ; '!'
.plt:000000000000199B                 jmp     sub_1770
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000019A0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000019A0                 jmp     cs:calloc_ptr
.plt:00000000000019A0 _calloc         endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    22h ; '"'
.plt:00000000000019AB                 jmp     sub_1770
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int fputc_unlocked(int c, FILE *stream)
.plt:00000000000019B0 _fputc_unlocked proc near               ; CODE XREF: usage+D3↓p
.plt:00000000000019B0                 jmp     cs:fputc_unlocked_ptr
.plt:00000000000019B0 _fputc_unlocked endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    23h ; '#'
.plt:00000000000019BB                 jmp     sub_1770
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000019C0 _memcpy         proc near               ; CODE XREF: main+218↓p
.plt:00000000000019C0                                         ; main+234↓p ...
.plt:00000000000019C0                 jmp     cs:memcpy_ptr
.plt:00000000000019C0 _memcpy         endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    24h ; '$'
.plt:00000000000019CB                 jmp     sub_1770
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; int fileno(FILE *stream)
.plt:00000000000019D0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000019D0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000019D0                 jmp     cs:fileno_ptr
.plt:00000000000019D0 _fileno         endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    25h ; '%'
.plt:00000000000019DB                 jmp     sub_1770
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; __gid_t getgid(void)
.plt:00000000000019E0 _getgid         proc near               ; CODE XREF: randread_new+1FC↓p
.plt:00000000000019E0                 jmp     cs:getgid_ptr
.plt:00000000000019E0 _getgid         endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    26h ; '&'
.plt:00000000000019EB                 jmp     sub_1770
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; void *malloc(size_t size)
.plt:00000000000019F0 _malloc         proc near               ; CODE XREF: mfile_name_concat+97↓p
.plt:00000000000019F0                                         ; xmalloc+4↓p
.plt:00000000000019F0                 jmp     cs:malloc_ptr
.plt:00000000000019F0 _malloc         endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    27h ; '''
.plt:00000000000019FB                 jmp     sub_1770
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int fflush(FILE *stream)
.plt:0000000000001A00 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001A00                                         ; rpl_fflush+3B↓j
.plt:0000000000001A00                 jmp     cs:fflush_ptr
.plt:0000000000001A00 _fflush         endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    28h ; '('
.plt:0000000000001A0B                 jmp     sub_1770
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; char *nl_langinfo(nl_item item)
.plt:0000000000001A10 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001A10                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001A10 _nl_langinfo    endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    29h ; ')'
.plt:0000000000001A1B                 jmp     sub_1770
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int __freading(FILE *fp)
.plt:0000000000001A20 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001A20                                         ; rpl_fflush+9↓p
.plt:0000000000001A20                 jmp     cs:__freading_ptr
.plt:0000000000001A20 ___freading     endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    2Ah ; '*'
.plt:0000000000001A2B                 jmp     sub_1770
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001A30 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001A30                 jmp     cs:realloc_ptr
.plt:0000000000001A30 _realloc        endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    2Bh ; '+'
.plt:0000000000001A3B                 jmp     sub_1770
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000001A40 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000001A40                 jmp     cs:fdopen_ptr
.plt:0000000000001A40 _fdopen         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    2Ch ; ','
.plt:0000000000001A4B                 jmp     sub_1770
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; char *setlocale(int category, const char *locale)
.plt:0000000000001A50 _setlocale      proc near               ; CODE XREF: main+33↓p
.plt:0000000000001A50                                         ; usage+2B3↓p ...
.plt:0000000000001A50                 jmp     cs:setlocale_ptr
.plt:0000000000001A50 _setlocale      endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    2Dh ; '-'
.plt:0000000000001A5B                 jmp     sub_1770
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001A60                                         ; usage+2A7↓p ...
.plt:0000000000001A60                 jmp     cs:__printf_chk_ptr
.plt:0000000000001A60 ___printf_chk   endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    2Eh ; '.'
.plt:0000000000001A6B                 jmp     sub_1770
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000001A70 _setvbuf        proc near               ; CODE XREF: randread_new+82↓p
.plt:0000000000001A70                 jmp     cs:setvbuf_ptr
.plt:0000000000001A70 _setvbuf        endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    2Fh ; '/'
.plt:0000000000001A7B                 jmp     sub_1770
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000001A80 _mempcpy        proc near               ; CODE XREF: mfile_name_concat+AD↓p
.plt:0000000000001A80                                         ; mfile_name_concat+CE↓p
.plt:0000000000001A80                 jmp     cs:mempcpy_ptr
.plt:0000000000001A80 _mempcpy        endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    30h ; '0'
.plt:0000000000001A8B                 jmp     sub_1770
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001A90 _error          proc near               ; CODE XREF: main+3B3↓p
.plt:0000000000001A90                                         ; main+4C9↓p ...
.plt:0000000000001A90                 jmp     cs:error_ptr
.plt:0000000000001A90 _error          endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    31h ; '1'
.plt:0000000000001A9B                 jmp     sub_1770
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ___explicit_bzero_chk proc near         ; CODE XREF: randint_free+10↓p
.plt:0000000000001AA0                                         ; randint_all_free+32↓p ...
.plt:0000000000001AA0                 jmp     cs:__explicit_bzero_chk_ptr
.plt:0000000000001AA0 ___explicit_bzero_chk endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    32h ; '2'
.plt:0000000000001AAB                 jmp     sub_1770
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; int open(const char *file, int oflag, ...)
.plt:0000000000001AB0 _open           proc near               ; CODE XREF: try_file+11↓j
.plt:0000000000001AB0                                         ; randread_new+EA↓p
.plt:0000000000001AB0                 jmp     cs:open_ptr
.plt:0000000000001AB0 _open           endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    33h ; '3'
.plt:0000000000001ABB                 jmp     sub_1770
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001AC0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_543A↓j
.plt:0000000000001AC0                 jmp     cs:fseeko_ptr
.plt:0000000000001AC0 _fseeko         endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    34h ; '4'
.plt:0000000000001ACB                 jmp     sub_1770
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001AD0 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000001AD0                 jmp     cs:fopen_ptr
.plt:0000000000001AD0 _fopen          endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    35h ; '5'
.plt:0000000000001ADB                 jmp     sub_1770
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001AE0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001AE0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001AE0 ___cxa_atexit   endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    36h ; '6'
.plt:0000000000001AEB                 jmp     sub_1770
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; __pid_t getppid(void)
.plt:0000000000001AF0 _getppid        proc near               ; CODE XREF: randread_new+1A3↓p
.plt:0000000000001AF0                                         ; randread_new+2F7↓p
.plt:0000000000001AF0                 jmp     cs:getppid_ptr
.plt:0000000000001AF0 _getppid        endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    37h ; '7'
.plt:0000000000001AFB                 jmp     sub_1770
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: noreturn thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; void __noreturn exit(int status)
.plt:0000000000001B00 _exit           proc near               ; CODE XREF: main+18F↓p
.plt:0000000000001B00                                         ; usage+58↓p
.plt:0000000000001B00                 jmp     cs:exit_ptr
.plt:0000000000001B00 _exit           endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    38h ; '8'
.plt:0000000000001B0B                 jmp     sub_1770
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001B10 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001B10                 jmp     cs:fwrite_ptr
.plt:0000000000001B10 _fwrite         endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    39h ; '9'
.plt:0000000000001B1B                 jmp     sub_1770
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001B20                                         ; version_etc_arn+37↓p ...
.plt:0000000000001B20                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001B20 ___fprintf_chk  endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    3Ah ; ':'
.plt:0000000000001B2B                 jmp     sub_1770
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001B30 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001B30                 jmp     cs:mbsinit_ptr
.plt:0000000000001B30 _mbsinit        endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    3Bh ; ';'
.plt:0000000000001B3B                 jmp     sub_1770
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; int iswprint(wint_t wc)
.plt:0000000000001B40 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001B40                 jmp     cs:iswprint_ptr
.plt:0000000000001B40 _iswprint       endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    3Ch ; '<'
.plt:0000000000001B4B                 jmp     sub_1770
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001B50 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001B50                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001B50 ___ctype_b_loc  endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    3Dh ; '='
.plt:0000000000001B5B                 jmp     sub_1770
.plt:0000000000001B5B ; } // starts at 1770
.plt:0000000000001B5B _plt            ends
.plt:0000000000001B5B
.plt.got:0000000000001B60 ; ===========================================================================
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; Segment type: Pure code
.plt.got:0000000000001B60 ; Segment permissions: Read/Execute
.plt.got:0000000000001B60 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001B60                 assume cs:_plt_got
.plt.got:0000000000001B60                 ;org 1B60h
.plt.got:0000000000001B60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; Attributes: thunk
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001B60 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001B60 ; __unwind {
.plt.got:0000000000001B60                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001B60 __cxa_finalize  endp
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; ---------------------------------------------------------------------------
.plt.got:0000000000001B66                 align 8
.plt.got:0000000000001B66 ; } // starts at 1B60
.plt.got:0000000000001B66 _plt_got        ends
.plt.got:0000000000001B66
LOAD:0000000000001B68 ; ===========================================================================
LOAD:0000000000001B68
LOAD:0000000000001B68 ; Segment type: Pure code
LOAD:0000000000001B68 ; Segment permissions: Read/Execute
LOAD:0000000000001B68 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001B68                 assume cs:LOAD
LOAD:0000000000001B68                 ;org 1B68h
LOAD:0000000000001B68                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001B68                 align 10h
LOAD:0000000000001B68 LOAD            ends
LOAD:0000000000001B68
.text:0000000000001B70 ; ===========================================================================
.text:0000000000001B70
.text:0000000000001B70 ; Segment type: Pure code
.text:0000000000001B70 ; Segment permissions: Read/Execute
.text:0000000000001B70 _text           segment para public 'CODE' use64
.text:0000000000001B70                 assume cs:_text
.text:0000000000001B70                 ;org 1B70h
.text:0000000000001B70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001B70
.text:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B70
.text:0000000000001B70
.text:0000000000001B70 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001B70                 public main
.text:0000000000001B70 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001B70
.text:0000000000001B70 var_60          = qword ptr -60h
.text:0000000000001B70 var_52          = byte ptr -52h
.text:0000000000001B70 var_51          = byte ptr -51h
.text:0000000000001B70 n               = qword ptr -50h
.text:0000000000001B70 var_48          = qword ptr -48h
.text:0000000000001B70 src             = qword ptr -40h
.text:0000000000001B70
.text:0000000000001B70 ; __unwind {
.text:0000000000001B70                 push    r15
.text:0000000000001B72                 push    r14
.text:0000000000001B74                 xor     r15d, r15d
.text:0000000000001B77                 push    r13
.text:0000000000001B79                 push    r12
.text:0000000000001B7B                 xor     r14d, r14d
.text:0000000000001B7E                 push    rbp
.text:0000000000001B7F                 push    rbx
.text:0000000000001B80                 mov     ebp, edi
.text:0000000000001B82                 mov     rbx, rsi
.text:0000000000001B85                 xor     r12d, r12d
.text:0000000000001B88                 xor     r13d, r13d
.text:0000000000001B8B                 sub     rsp, 38h
.text:0000000000001B8F                 mov     rdi, [rsi]
.text:0000000000001B92                 call    set_program_name
.text:0000000000001B97                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001B9E                 mov     edi, 6          ; category
.text:0000000000001BA3                 call    _setlocale
.text:0000000000001BA8                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001BAF                 lea     rdi, domainname ; "coreutils"
.text:0000000000001BB6                 call    _bindtextdomain
.text:0000000000001BBB                 lea     rdi, domainname ; "coreutils"
.text:0000000000001BC2                 call    _textdomain
.text:0000000000001BC7                 lea     rdi, maybe_close_stdout
.text:0000000000001BCE                 call    atexit
.text:0000000000001BD3                 mov     [rsp+68h+var_52], 0
.text:0000000000001BD8                 mov     [rsp+68h+var_51], 0
.text:0000000000001BDD                 mov     [rsp+68h+var_60], 0
.text:0000000000001BE6                 db      2Eh
.text:0000000000001BE6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001BF0
.text:0000000000001BF0 loc_1BF0:                               ; CODE XREF: main+CB↓j
.text:0000000000001BF0                                         ; main+F1↓j ...
.text:0000000000001BF0                 lea     rcx, longopts   ; longopts
.text:0000000000001BF7                 lea     rdx, shortopts  ; "dp:qtuV"
.text:0000000000001BFE                 xor     r8d, r8d        ; longind
.text:0000000000001C01                 mov     rsi, rbx        ; argv
.text:0000000000001C04                 mov     edi, ebp        ; argc
.text:0000000000001C06                 call    _getopt_long
.text:0000000000001C0B                 cmp     eax, 0FFFFFFFFh
.text:0000000000001C0E                 jz      loc_1D04
.text:0000000000001C14                 cmp     eax, 70h ; 'p'
.text:0000000000001C17                 jz      short loc_1C68
.text:0000000000001C19                 jle     short loc_1C40
.text:0000000000001C1B                 cmp     eax, 74h ; 't'
.text:0000000000001C1E                 jz      short loc_1C98
.text:0000000000001C20                 jle     short loc_1C80
.text:0000000000001C22                 cmp     eax, 75h ; 'u'
.text:0000000000001C25                 jz      loc_1CB0
.text:0000000000001C2B                 add     eax, 0FFFFFF80h
.text:0000000000001C2E                 jnz     loc_20BD
.text:0000000000001C34                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:0000000000001C3B                 jmp     short loc_1BF0
.text:0000000000001C3B ; ---------------------------------------------------------------------------
.text:0000000000001C3D                 align 20h
.text:0000000000001C40
.text:0000000000001C40 loc_1C40:                               ; CODE XREF: main+A9↑j
.text:0000000000001C40                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001C45                 jz      loc_218C
.text:0000000000001C4B                 jle     short loc_1CBB
.text:0000000000001C4D                 cmp     eax, 56h ; 'V'
.text:0000000000001C50                 jz      short loc_1CC6
.text:0000000000001C52                 cmp     eax, 64h ; 'd'
.text:0000000000001C55                 jnz     loc_20BD
.text:0000000000001C5B                 mov     r14d, 1
.text:0000000000001C61                 jmp     short loc_1BF0
.text:0000000000001C61 ; ---------------------------------------------------------------------------
.text:0000000000001C63                 align 8
.text:0000000000001C68
.text:0000000000001C68 loc_1C68:                               ; CODE XREF: main+A7↑j
.text:0000000000001C68                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001C6F                 mov     r12d, 1
.text:0000000000001C75                 mov     [rsp+68h+var_60], rax
.text:0000000000001C7A                 jmp     loc_1BF0
.text:0000000000001C7A ; ---------------------------------------------------------------------------
.text:0000000000001C7F                 align 20h
.text:0000000000001C80
.text:0000000000001C80 loc_1C80:                               ; CODE XREF: main+B0↑j
.text:0000000000001C80                 cmp     eax, 71h ; 'q'
.text:0000000000001C83                 jnz     loc_20BD
.text:0000000000001C89                 mov     [rsp+68h+var_51], 1
.text:0000000000001C8E                 jmp     loc_1BF0
.text:0000000000001C8E ; ---------------------------------------------------------------------------
.text:0000000000001C93                 align 8
.text:0000000000001C98
.text:0000000000001C98 loc_1C98:                               ; CODE XREF: main+AE↑j
.text:0000000000001C98                 mov     [rsp+68h+var_52], 1
.text:0000000000001C9D                 mov     r12d, 1
.text:0000000000001CA3                 jmp     loc_1BF0
.text:0000000000001CA3 ; ---------------------------------------------------------------------------
.text:0000000000001CA8                 align 10h
.text:0000000000001CB0
.text:0000000000001CB0 loc_1CB0:                               ; CODE XREF: main+B5↑j
.text:0000000000001CB0                 mov     r15d, 1
.text:0000000000001CB6                 jmp     loc_1BF0
.text:0000000000001CBB ; ---------------------------------------------------------------------------
.text:0000000000001CBB
.text:0000000000001CBB loc_1CBB:                               ; CODE XREF: main+DB↑j
.text:0000000000001CBB                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001CC0                 jnz     loc_20BD
.text:0000000000001CC6
.text:0000000000001CC6 loc_1CC6:                               ; CODE XREF: main+E0↑j
.text:0000000000001CC6                 sub     rsp, 8
.text:0000000000001CCA                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001CD1                 mov     rcx, cs:Version
.text:0000000000001CD8                 push    0
.text:0000000000001CDA                 lea     r9, aEricBlake  ; "Eric Blake"
.text:0000000000001CE1                 lea     r8, aJimMeyering ; "Jim Meyering"
.text:0000000000001CE8                 lea     rdx, unk_66A1
.text:0000000000001CEF                 lea     rsi, aMktemp    ; "mktemp"
.text:0000000000001CF6                 xor     eax, eax
.text:0000000000001CF8                 call    version_etc
.text:0000000000001CFD                 xor     edi, edi        ; status
.text:0000000000001CFF                 call    _exit
.text:0000000000001D04 ; ---------------------------------------------------------------------------
.text:0000000000001D04
.text:0000000000001D04 loc_1D04:                               ; CODE XREF: main+9E↑j
.text:0000000000001D04                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001D0B                 sub     ebp, eax
.text:0000000000001D0D                 cmp     ebp, 1
.text:0000000000001D10                 ja      loc_209C
.text:0000000000001D16                 test    ebp, ebp
.text:0000000000001D18                 jnz     loc_1EBF
.text:0000000000001D1E                 test    r13, r13
.text:0000000000001D21                 mov     r12d, 1
.text:0000000000001D27                 lea     rsi, aTmpXxxxxxxxxx ; "tmp.XXXXXXXXXX"
.text:0000000000001D2E                 jz      loc_213B
.text:0000000000001D34                 lea     rsi, aTmpXxxxxxxxxx ; "tmp.XXXXXXXXXX"
.text:0000000000001D3B                 mov     [rsp+68h+n], 0Eh
.text:0000000000001D44                 mov     r12d, 1
.text:0000000000001D4A
.text:0000000000001D4A loc_1D4A:                               ; CODE XREF: main+380↓j
.text:0000000000001D4A                 mov     [rsp+68h+src], rsi
.text:0000000000001D4F                 xor     eax, eax
.text:0000000000001D51                 mov     rdi, r13
.text:0000000000001D54                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001D58                 repne scasb
.text:0000000000001D5A                 mov     rax, [rsp+68h+n]
.text:0000000000001D5F                 mov     rdx, rcx
.text:0000000000001D62                 not     rdx
.text:0000000000001D65                 lea     rbp, [rdx-1]
.text:0000000000001D69                 mov     [rsp+68h+var_48], rdx
.text:0000000000001D6E                 lea     rdi, [rax+rbp+1]
.text:0000000000001D73                 call    xmalloc
.text:0000000000001D78                 mov     rdx, [rsp+68h+n] ; n
.text:0000000000001D7D                 mov     rsi, [rsp+68h+src] ; src
.text:0000000000001D82                 mov     rdi, rax        ; dest
.text:0000000000001D85                 mov     rbx, rax
.text:0000000000001D88                 call    _memcpy
.text:0000000000001D8D                 mov     rax, [rsp+68h+n]
.text:0000000000001D92                 mov     rcx, [rsp+68h+var_48]
.text:0000000000001D97                 mov     rsi, r13        ; src
.text:0000000000001D9A                 lea     r8, [rbx+rax]
.text:0000000000001D9E                 mov     rdx, rcx        ; n
.text:0000000000001DA1                 mov     rdi, r8         ; dest
.text:0000000000001DA4                 call    _memcpy
.text:0000000000001DA9                 mov     r8, rax
.text:0000000000001DAC
.text:0000000000001DAC loc_1DAC:                               ; CODE XREF: main+601↓j
.text:0000000000001DAC                 test    rbp, rbp
.text:0000000000001DAF                 jz      short loc_1DCC
.text:0000000000001DB1                 mov     rdi, r8
.text:0000000000001DB4                 mov     [rsp+68h+n], r8
.text:0000000000001DB9                 call    last_component
.text:0000000000001DBE                 mov     r8, [rsp+68h+n]
.text:0000000000001DC3                 cmp     rax, r8
.text:0000000000001DC6                 jnz     loc_21F7
.text:0000000000001DCC
.text:0000000000001DCC loc_1DCC:                               ; CODE XREF: main+23F↑j
.text:0000000000001DCC                 mov     rax, r8
.text:0000000000001DCF                 sub     rax, rbx
.text:0000000000001DD2                 jz      loc_21C5
.text:0000000000001DD8                 cmp     byte ptr [r8-1], 58h ; 'X'
.text:0000000000001DDD                 jnz     loc_21C5
.text:0000000000001DE3                 lea     rax, [rbx+rax-2]
.text:0000000000001DE8                 lea     rdx, [rbx-1]
.text:0000000000001DEC                 xor     r13d, r13d
.text:0000000000001DEF                 jmp     short loc_1E02
.text:0000000000001DEF ; ---------------------------------------------------------------------------
.text:0000000000001DF1                 align 8
.text:0000000000001DF8
.text:0000000000001DF8 loc_1DF8:                               ; CODE XREF: main+299↓j
.text:0000000000001DF8                 sub     rax, 1
.text:0000000000001DFC                 cmp     byte ptr [rax+1], 58h ; 'X'
.text:0000000000001E00                 jnz     short loc_1E0B
.text:0000000000001E02
.text:0000000000001E02 loc_1E02:                               ; CODE XREF: main+27F↑j
.text:0000000000001E02                 add     r13, 1
.text:0000000000001E06                 cmp     rdx, rax
.text:0000000000001E09                 jnz     short loc_1DF8
.text:0000000000001E0B
.text:0000000000001E0B loc_1E0B:                               ; CODE XREF: main+290↑j
.text:0000000000001E0B                 cmp     r13, 2
.text:0000000000001E0F                 jbe     loc_21C5
.text:0000000000001E15                 test    r12b, r12b
.text:0000000000001E18                 jz      short loc_1E63
.text:0000000000001E1A                 cmp     [rsp+68h+var_52], 0
.text:0000000000001E1F                 jnz     loc_20C7
.text:0000000000001E25                 mov     rax, [rsp+68h+var_60]
.text:0000000000001E2A                 test    rax, rax
.text:0000000000001E2D                 jz      loc_1F28
.text:0000000000001E33                 cmp     byte ptr [rax], 0
.text:0000000000001E36                 mov     r12, rax
.text:0000000000001E39                 jz      loc_1F28
.text:0000000000001E3F
.text:0000000000001E3F loc_1E3F:                               ; CODE XREF: main+3CF↓j
.text:0000000000001E3F                                         ; main+3DC↓j
.text:0000000000001E3F                 cmp     byte ptr [rbx], 2Fh ; '/'
.text:0000000000001E42                 jz      loc_2193
.text:0000000000001E48
.text:0000000000001E48 loc_1E48:                               ; CODE XREF: main+593↓j
.text:0000000000001E48                 mov     rsi, rbx
.text:0000000000001E4B                 mov     rdi, r12
.text:0000000000001E4E                 xor     edx, edx
.text:0000000000001E50                 call    file_name_concat
.text:0000000000001E55                 mov     r12, rax
.text:0000000000001E58                 mov     rdi, rbx        ; ptr
.text:0000000000001E5B                 mov     rbx, r12
.text:0000000000001E5E                 call    _free
.text:0000000000001E63
.text:0000000000001E63 loc_1E63:                               ; CODE XREF: main+2A8↑j
.text:0000000000001E63                 mov     rdi, rbx        ; src
.text:0000000000001E66                 call    xstrdup
.text:0000000000001E6B                 test    r14b, r14b
.text:0000000000001E6E                 mov     r12, rax
.text:0000000000001E71                 jz      loc_1F51
.text:0000000000001E77                 test    r15b, r15b
.text:0000000000001E7A                 jz      loc_1FBD
.text:0000000000001E80                 xor     edx, edx
.text:0000000000001E82                 mov     esi, ebp
.text:0000000000001E84                 mov     r8, r13
.text:0000000000001E87                 mov     ecx, 2
.text:0000000000001E8C                 mov     rdi, rax
.text:0000000000001E8F                 call    gen_tempname_len
.text:0000000000001E94                 test    eax, eax
.text:0000000000001E96                 mov     ebp, eax
.text:0000000000001E98                 jz      loc_208F
.text:0000000000001E9E
.text:0000000000001E9E loc_1E9E:                               ; CODE XREF: main+463↓j
.text:0000000000001E9E                 cmp     [rsp+68h+var_51], 0
.text:0000000000001EA3                 jz      loc_2053
.text:0000000000001EA9
.text:0000000000001EA9 loc_1EA9:                               ; CODE XREF: main+42B↓j
.text:0000000000001EA9                                         ; main+4A2↓j ...
.text:0000000000001EA9                 mov     ebp, 1
.text:0000000000001EAE
.text:0000000000001EAE loc_1EAE:                               ; CODE XREF: main+408↓j
.text:0000000000001EAE                                         ; main+488↓j ...
.text:0000000000001EAE                 add     rsp, 38h
.text:0000000000001EB2                 mov     eax, ebp
.text:0000000000001EB4                 pop     rbx
.text:0000000000001EB5                 pop     rbp
.text:0000000000001EB6                 pop     r12
.text:0000000000001EB8                 pop     r13
.text:0000000000001EBA                 pop     r14
.text:0000000000001EBC                 pop     r15
.text:0000000000001EBE                 retn
.text:0000000000001EBF ; ---------------------------------------------------------------------------
.text:0000000000001EBF
.text:0000000000001EBF loc_1EBF:                               ; CODE XREF: main+1A8↑j
.text:0000000000001EBF                 test    r13, r13
.text:0000000000001EC2                 mov     rsi, [rbx+rax*8]
.text:0000000000001EC6                 jz      loc_213B
.text:0000000000001ECC                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001ED0                 xor     eax, eax
.text:0000000000001ED2                 mov     rdi, rsi
.text:0000000000001ED5                 repne scasb
.text:0000000000001ED7                 mov     rdx, rcx
.text:0000000000001EDA                 not     rdx
.text:0000000000001EDD                 mov     rcx, rdx
.text:0000000000001EE0                 sub     rcx, 1
.text:0000000000001EE4                 mov     [rsp+68h+n], rcx
.text:0000000000001EE9                 jz      short loc_1EF6
.text:0000000000001EEB                 cmp     byte ptr [rsi+rcx-1], 58h ; 'X'
.text:0000000000001EF0                 jz      loc_1D4A
.text:0000000000001EF6
.text:0000000000001EF6 loc_1EF6:                               ; CODE XREF: main+379↑j
.text:0000000000001EF6                 mov     rdi, rsi
.text:0000000000001EF9                 call    quote
.text:0000000000001EFE                 lea     rsi, msgid      ; "with --suffix, template %s must end in "...
.text:0000000000001F05                 mov     rbx, rax
.text:0000000000001F08                 mov     edx, 5          ; category
.text:0000000000001F0D                 xor     edi, edi        ; domainname
.text:0000000000001F0F                 call    _dcgettext
.text:0000000000001F14                 mov     rcx, rbx
.text:0000000000001F17                 mov     rdx, rax        ; format
.text:0000000000001F1A                 xor     esi, esi        ; errnum
.text:0000000000001F1C                 mov     edi, 1          ; status
.text:0000000000001F21                 xor     eax, eax
.text:0000000000001F23                 call    _error
.text:0000000000001F28
.text:0000000000001F28 loc_1F28:                               ; CODE XREF: main+2BD↑j
.text:0000000000001F28                                         ; main+2C9↑j
.text:0000000000001F28                 lea     rdi, name       ; "TMPDIR"
.text:0000000000001F2F                 call    _getenv
.text:0000000000001F34                 test    rax, rax
.text:0000000000001F37                 mov     r12, rax
.text:0000000000001F3A                 jz      short loc_1F45
.text:0000000000001F3C                 cmp     byte ptr [rax], 0
.text:0000000000001F3F                 jnz     loc_1E3F
.text:0000000000001F45
.text:0000000000001F45 loc_1F45:                               ; CODE XREF: main+3CA↑j
.text:0000000000001F45                 lea     r12, aTmp       ; "/tmp"
.text:0000000000001F4C                 jmp     loc_1E3F
.text:0000000000001F51 ; ---------------------------------------------------------------------------
.text:0000000000001F51
.text:0000000000001F51 loc_1F51:                               ; CODE XREF: main+301↑j
.text:0000000000001F51                 test    r15b, r15b
.text:0000000000001F54                 jz      short loc_1F7D
.text:0000000000001F56                 xor     edx, edx
.text:0000000000001F58                 mov     r8, r13
.text:0000000000001F5B                 mov     ecx, 2
.text:0000000000001F60                 mov     esi, ebp
.text:0000000000001F62                 mov     rdi, rax
.text:0000000000001F65                 call    gen_tempname_len
.text:0000000000001F6A                 test    eax, eax
.text:0000000000001F6C                 js      short loc_1F96
.text:0000000000001F6E                 mov     rdi, r12        ; s
.text:0000000000001F71                 xor     ebp, ebp
.text:0000000000001F73                 call    _puts
.text:0000000000001F78                 jmp     loc_1EAE
.text:0000000000001F7D ; ---------------------------------------------------------------------------
.text:0000000000001F7D
.text:0000000000001F7D loc_1F7D:                               ; CODE XREF: main+3E4↑j
.text:0000000000001F7D                 xor     ecx, ecx
.text:0000000000001F7F                 xor     edx, edx
.text:0000000000001F81                 mov     r8, r13
.text:0000000000001F84                 mov     esi, ebp
.text:0000000000001F86                 mov     rdi, rax
.text:0000000000001F89                 call    gen_tempname_len
.text:0000000000001F8E                 test    eax, eax
.text:0000000000001F90                 jns     loc_2043
.text:0000000000001F96
.text:0000000000001F96 loc_1F96:                               ; CODE XREF: main+3FC↑j
.text:0000000000001F96                                         ; main+4DE↓j
.text:0000000000001F96                 cmp     [rsp+68h+var_51], 0
.text:0000000000001F9B                 jnz     loc_1EA9
.text:0000000000001FA1                 mov     rdi, rbx
.text:0000000000001FA4                 call    quote
.text:0000000000001FA9                 mov     edx, 5
.text:0000000000001FAE                 mov     rbp, rax
.text:0000000000001FB1                 lea     rsi, aFailedToCreate ; "failed to create file via template %s"
.text:0000000000001FB8                 jmp     loc_206A
.text:0000000000001FBD ; ---------------------------------------------------------------------------
.text:0000000000001FBD
.text:0000000000001FBD loc_1FBD:                               ; CODE XREF: main+30A↑j
.text:0000000000001FBD                 xor     edx, edx
.text:0000000000001FBF                 mov     r8, r13
.text:0000000000001FC2                 mov     ecx, 1
.text:0000000000001FC7                 mov     esi, ebp
.text:0000000000001FC9                 mov     rdi, rax
.text:0000000000001FCC                 call    gen_tempname_len
.text:0000000000001FD1                 test    eax, eax
.text:0000000000001FD3                 jnz     loc_1E9E
.text:0000000000001FD9
.text:0000000000001FD9 loc_1FD9:                               ; CODE XREF: main+4DC↓j
.text:0000000000001FD9                 mov     rdi, r12        ; s
.text:0000000000001FDC                 call    _puts
.text:0000000000001FE1                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001FE8                 mov     cs:stdout_closed, 1
.text:0000000000001FEF                 call    close_stream
.text:0000000000001FF4                 test    eax, eax
.text:0000000000001FF6                 mov     ebp, eax
.text:0000000000001FF8                 jz      loc_1EAE
.text:0000000000001FFE                 call    ___errno_location
.text:0000000000002003                 mov     rdi, r12        ; filename
.text:0000000000002006                 mov     ebx, [rax]
.text:0000000000002008                 call    _remove
.text:000000000000200D                 cmp     [rsp+68h+var_51], 0
.text:0000000000002012                 jnz     loc_1EA9
.text:0000000000002018                 lea     rsi, aWriteError ; "write error"
.text:000000000000201F                 mov     edx, 5          ; category
.text:0000000000002024                 xor     edi, edi        ; domainname
.text:0000000000002026                 mov     ebp, 1
.text:000000000000202B                 call    _dcgettext
.text:0000000000002030                 mov     esi, ebx        ; errnum
.text:0000000000002032                 mov     rdx, rax        ; format
.text:0000000000002035                 xor     edi, edi        ; status
.text:0000000000002037                 xor     eax, eax
.text:0000000000002039                 call    _error
.text:000000000000203E                 jmp     loc_1EAE
.text:0000000000002043 ; ---------------------------------------------------------------------------
.text:0000000000002043
.text:0000000000002043 loc_2043:                               ; CODE XREF: main+420↑j
.text:0000000000002043                 mov     edi, eax        ; fd
.text:0000000000002045                 call    _close
.text:000000000000204A                 test    eax, eax
.text:000000000000204C                 jz      short loc_1FD9
.text:000000000000204E                 jmp     loc_1F96
.text:0000000000002053 ; ---------------------------------------------------------------------------
.text:0000000000002053
.text:0000000000002053 loc_2053:                               ; CODE XREF: main+333↑j
.text:0000000000002053                 mov     rdi, rbx
.text:0000000000002056                 call    quote
.text:000000000000205B                 lea     rsi, aFailedToCreate_0 ; "failed to create directory via template"...
.text:0000000000002062                 mov     rbp, rax
.text:0000000000002065                 mov     edx, 5          ; category
.text:000000000000206A
.text:000000000000206A loc_206A:                               ; CODE XREF: main+448↑j
.text:000000000000206A                 xor     edi, edi        ; domainname
.text:000000000000206C                 call    _dcgettext
.text:0000000000002071                 mov     rbx, rax
.text:0000000000002074                 call    ___errno_location
.text:0000000000002079                 mov     esi, [rax]      ; errnum
.text:000000000000207B                 mov     rcx, rbp
.text:000000000000207E                 mov     rdx, rbx        ; format
.text:0000000000002081                 xor     edi, edi        ; status
.text:0000000000002083                 xor     eax, eax
.text:0000000000002085                 call    _error
.text:000000000000208A                 jmp     loc_1EA9
.text:000000000000208F ; ---------------------------------------------------------------------------
.text:000000000000208F
.text:000000000000208F loc_208F:                               ; CODE XREF: main+328↑j
.text:000000000000208F                 mov     rdi, r12        ; s
.text:0000000000002092                 call    _puts
.text:0000000000002097                 jmp     loc_1EAE
.text:000000000000209C ; ---------------------------------------------------------------------------
.text:000000000000209C
.text:000000000000209C loc_209C:                               ; CODE XREF: main+1A0↑j
.text:000000000000209C                 lea     rsi, aTooManyTemplat ; "too many templates"
.text:00000000000020A3                 mov     edx, 5          ; category
.text:00000000000020A8                 xor     edi, edi        ; domainname
.text:00000000000020AA                 call    _dcgettext
.text:00000000000020AF                 xor     esi, esi        ; errnum
.text:00000000000020B1                 mov     rdx, rax        ; format
.text:00000000000020B4                 xor     edi, edi        ; status
.text:00000000000020B6                 xor     eax, eax
.text:00000000000020B8                 call    _error
.text:00000000000020BD
.text:00000000000020BD loc_20BD:                               ; CODE XREF: main+BE↑j
.text:00000000000020BD                                         ; main+E5↑j ...
.text:00000000000020BD                 mov     edi, 1          ; status
.text:00000000000020C2                 call    usage
.text:00000000000020C7 ; ---------------------------------------------------------------------------
.text:00000000000020C7
.text:00000000000020C7 loc_20C7:                               ; CODE XREF: main+2AF↑j
.text:00000000000020C7                 lea     rdi, name       ; "TMPDIR"
.text:00000000000020CE                 call    _getenv
.text:00000000000020D3                 test    rax, rax
.text:00000000000020D6                 mov     r12, rax
.text:00000000000020D9                 jz      short loc_20E0
.text:00000000000020DB                 cmp     byte ptr [rax], 0
.text:00000000000020DE                 jnz     short loc_20F8
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: main+569↑j
.text:00000000000020E0                 mov     rax, [rsp+68h+var_60]
.text:00000000000020E5                 lea     r12, aTmp       ; "/tmp"
.text:00000000000020EC                 test    rax, rax
.text:00000000000020EF                 jz      short loc_20F8
.text:00000000000020F1                 cmp     byte ptr [rax], 0
.text:00000000000020F4                 cmovnz  r12, rax
.text:00000000000020F8
.text:00000000000020F8 loc_20F8:                               ; CODE XREF: main+56E↑j
.text:00000000000020F8                                         ; main+57F↑j
.text:00000000000020F8                 mov     rdi, rbx
.text:00000000000020FB                 call    last_component
.text:0000000000002100                 cmp     rax, rbx
.text:0000000000002103                 jz      loc_1E48
.text:0000000000002109                 mov     rdi, rbx
.text:000000000000210C                 call    quote
.text:0000000000002111                 lea     rsi, aInvalidTemplat ; "invalid template, %s, contains director"...
.text:0000000000002118                 mov     rbx, rax
.text:000000000000211B                 mov     edx, 5          ; category
.text:0000000000002120                 xor     edi, edi        ; domainname
.text:0000000000002122                 call    _dcgettext
.text:0000000000002127                 mov     rcx, rbx
.text:000000000000212A                 mov     rdx, rax        ; format
.text:000000000000212D                 xor     esi, esi        ; errnum
.text:000000000000212F                 mov     edi, 1          ; status
.text:0000000000002134                 xor     eax, eax
.text:0000000000002136                 call    _error
.text:000000000000213B
.text:000000000000213B loc_213B:                               ; CODE XREF: main+1BE↑j
.text:000000000000213B                                         ; main+356↑j
.text:000000000000213B                 mov     rdi, rsi        ; src
.text:000000000000213E                 call    xstrdup
.text:0000000000002143                 mov     esi, 58h ; 'X'  ; c
.text:0000000000002148                 mov     rdi, rax        ; s
.text:000000000000214B                 mov     rbx, rax
.text:000000000000214E                 call    _strrchr
.text:0000000000002153                 test    rax, rax
.text:0000000000002156                 lea     r8, [rax+1]
.text:000000000000215A                 jz      short loc_2176
.text:000000000000215C
.text:000000000000215C loc_215C:                               ; CODE XREF: main+61A↓j
.text:000000000000215C                 xor     eax, eax
.text:000000000000215E                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002162                 mov     rdi, r8
.text:0000000000002165                 repne scasb
.text:0000000000002167                 mov     rax, rcx
.text:000000000000216A                 not     rax
.text:000000000000216D                 lea     rbp, [rax-1]
.text:0000000000002171                 jmp     loc_1DAC
.text:0000000000002176 ; ---------------------------------------------------------------------------
.text:0000000000002176
.text:0000000000002176 loc_2176:                               ; CODE XREF: main+5EA↑j
.text:0000000000002176                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000217A                 mov     rdi, rbx
.text:000000000000217D                 repne scasb
.text:000000000000217F                 mov     rax, rcx
.text:0000000000002182                 not     rax
.text:0000000000002185                 lea     r8, [rbx+rax-1]
.text:000000000000218A                 jmp     short loc_215C
.text:000000000000218C ; ---------------------------------------------------------------------------
.text:000000000000218C
.text:000000000000218C loc_218C:                               ; CODE XREF: main+D5↑j
.text:000000000000218C                 xor     edi, edi        ; status
.text:000000000000218E                 call    usage
.text:0000000000002193 ; ---------------------------------------------------------------------------
.text:0000000000002193
.text:0000000000002193 loc_2193:                               ; CODE XREF: main+2D2↑j
.text:0000000000002193                 mov     rdi, rbx
.text:0000000000002196                 call    quote
.text:000000000000219B                 lea     rsi, aInvalidTemplat_0 ; "invalid template, %s; with --tmpdir, it"...
.text:00000000000021A2                 mov     rbx, rax
.text:00000000000021A5                 mov     edx, 5          ; category
.text:00000000000021AA                 xor     edi, edi        ; domainname
.text:00000000000021AC                 call    _dcgettext
.text:00000000000021B1                 mov     rcx, rbx
.text:00000000000021B4                 mov     rdx, rax        ; format
.text:00000000000021B7                 xor     esi, esi        ; errnum
.text:00000000000021B9                 mov     edi, 1          ; status
.text:00000000000021BE                 xor     eax, eax
.text:00000000000021C0                 call    _error
.text:00000000000021C5
.text:00000000000021C5 loc_21C5:                               ; CODE XREF: main+262↑j
.text:00000000000021C5                                         ; main+26D↑j ...
.text:00000000000021C5                 mov     rdi, rbx
.text:00000000000021C8                 call    quote
.text:00000000000021CD                 lea     rsi, aTooFewXSInTemp ; "too few X's in template %s"
.text:00000000000021D4                 mov     rbx, rax
.text:00000000000021D7                 mov     edx, 5          ; category
.text:00000000000021DC                 xor     edi, edi        ; domainname
.text:00000000000021DE                 call    _dcgettext
.text:00000000000021E3                 mov     rcx, rbx
.text:00000000000021E6                 mov     rdx, rax        ; format
.text:00000000000021E9                 xor     esi, esi        ; errnum
.text:00000000000021EB                 mov     edi, 1          ; status
.text:00000000000021F0                 xor     eax, eax
.text:00000000000021F2                 call    _error
.text:00000000000021F7
.text:00000000000021F7 loc_21F7:                               ; CODE XREF: main+256↑j
.text:00000000000021F7                 mov     rdi, r8
.text:00000000000021FA                 call    quote
.text:00000000000021FF                 lea     rsi, aInvalidSuffixS ; "invalid suffix %s, contains directory s"...
.text:0000000000002206                 mov     rbx, rax
.text:0000000000002209                 mov     edx, 5          ; category
.text:000000000000220E                 xor     edi, edi        ; domainname
.text:0000000000002210                 call    _dcgettext
.text:0000000000002215                 mov     rcx, rbx
.text:0000000000002218                 mov     rdx, rax        ; format
.text:000000000000221B                 xor     esi, esi        ; errnum
.text:000000000000221D                 mov     edi, 1          ; status
.text:0000000000002222                 xor     eax, eax
.text:0000000000002224                 call    _error
.text:0000000000002224 ; } // starts at 1B70
.text:0000000000002229                 nop     dword ptr [rax+00000000h]
.text:0000000000002229 main            endp ; sp-analysis failed
.text:0000000000002229
.text:0000000000002230
.text:0000000000002230 ; =============== S U B R O U T I N E =======================================
.text:0000000000002230
.text:0000000000002230 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002230
.text:0000000000002230 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002230                 public start
.text:0000000000002230 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002230 ; __unwind {
.text:0000000000002230                 xor     ebp, ebp
.text:0000000000002232                 mov     r9, rdx         ; rtld_fini
.text:0000000000002235                 pop     rsi             ; argc
.text:0000000000002236                 mov     rdx, rsp        ; ubp_av
.text:0000000000002239                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000223D                 push    rax
.text:000000000000223E                 push    rsp             ; stack_end
.text:000000000000223F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002246                 lea     rcx, __libc_csu_init ; init
.text:000000000000224D                 lea     rdi, main       ; main
.text:0000000000002254                 call    cs:__libc_start_main_ptr
.text:000000000000225A                 hlt
.text:000000000000225A ; } // starts at 2230
.text:000000000000225A start           endp
.text:000000000000225A
.text:000000000000225A ; ---------------------------------------------------------------------------
.text:000000000000225B                 align 20h
.text:0000000000002260
.text:0000000000002260 ; =============== S U B R O U T I N E =======================================
.text:0000000000002260
.text:0000000000002260 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002260
.text:0000000000002260 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2313↓p
.text:0000000000002260                 lea     rdi, __bss_start
.text:0000000000002267                 push    rbp
.text:0000000000002268                 lea     rax, __bss_start
.text:000000000000226F                 cmp     rax, rdi
.text:0000000000002272                 mov     rbp, rsp
.text:0000000000002275                 jz      short loc_2290
.text:0000000000002277                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000227E                 test    rax, rax
.text:0000000000002281                 jz      short loc_2290
.text:0000000000002283                 pop     rbp
.text:0000000000002284                 jmp     rax
.text:0000000000002284 ; ---------------------------------------------------------------------------
.text:0000000000002286                 align 10h
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002290                                         ; deregister_tm_clones+21↑j
.text:0000000000002290                 pop     rbp
.text:0000000000002291                 retn
.text:0000000000002291 deregister_tm_clones endp
.text:0000000000002291
.text:0000000000002291 ; ---------------------------------------------------------------------------
.text:0000000000002292                 align 20h
.text:00000000000022A0
.text:00000000000022A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022A0
.text:00000000000022A0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000022A0
.text:00000000000022A0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000022A0                 lea     rdi, __bss_start
.text:00000000000022A7                 lea     rsi, __bss_start
.text:00000000000022AE                 push    rbp
.text:00000000000022AF                 sub     rsi, rdi
.text:00000000000022B2                 mov     rbp, rsp
.text:00000000000022B5                 sar     rsi, 3
.text:00000000000022B9                 mov     rax, rsi
.text:00000000000022BC                 shr     rax, 3Fh
.text:00000000000022C0                 add     rsi, rax
.text:00000000000022C3                 sar     rsi, 1
.text:00000000000022C6                 jz      short loc_22E0
.text:00000000000022C8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000022CF                 test    rax, rax
.text:00000000000022D2                 jz      short loc_22E0
.text:00000000000022D4                 pop     rbp
.text:00000000000022D5                 jmp     rax
.text:00000000000022D5 ; ---------------------------------------------------------------------------
.text:00000000000022D7                 align 20h
.text:00000000000022E0
.text:00000000000022E0 loc_22E0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000022E0                                         ; register_tm_clones+32↑j
.text:00000000000022E0                 pop     rbp
.text:00000000000022E1                 retn
.text:00000000000022E1 register_tm_clones endp
.text:00000000000022E1
.text:00000000000022E1 ; ---------------------------------------------------------------------------
.text:00000000000022E2                 align 10h
.text:00000000000022F0
.text:00000000000022F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022F0
.text:00000000000022F0 ; Attributes: info_from_lumina
.text:00000000000022F0
.text:00000000000022F0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000022F0                 cmp     cs:completed_7697, 0
.text:00000000000022F7                 jnz     short locret_2328
.text:00000000000022F9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002301                 push    rbp
.text:0000000000002302                 mov     rbp, rsp
.text:0000000000002305                 jz      short loc_2313
.text:0000000000002307                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000230E                 call    __cxa_finalize
.text:0000000000002313
.text:0000000000002313 loc_2313:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002313                 call    deregister_tm_clones
.text:0000000000002318                 mov     cs:completed_7697, 1
.text:000000000000231F                 pop     rbp
.text:0000000000002320                 retn
.text:0000000000002320 ; ---------------------------------------------------------------------------
.text:0000000000002321                 align 8
.text:0000000000002328
.text:0000000000002328 locret_2328:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002328                 rep retn
.text:0000000000002328 __do_global_dtors_aux endp
.text:0000000000002328
.text:0000000000002328 ; ---------------------------------------------------------------------------
.text:000000000000232A                 align 10h
.text:0000000000002330
.text:0000000000002330 ; =============== S U B R O U T I N E =======================================
.text:0000000000002330
.text:0000000000002330 ; Attributes: bp-based frame
.text:0000000000002330
.text:0000000000002330 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002330                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002330                 push    rbp
.text:0000000000002331                 mov     rbp, rsp
.text:0000000000002334                 pop     rbp
.text:0000000000002335                 jmp     register_tm_clones
.text:0000000000002335 frame_dummy     endp
.text:0000000000002335
.text:0000000000002335 ; ---------------------------------------------------------------------------
.text:000000000000233A                 align 20h
.text:0000000000002340
.text:0000000000002340 ; =============== S U B R O U T I N E =======================================
.text:0000000000002340
.text:0000000000002340
.text:0000000000002340 maybe_close_stdout proc near            ; DATA XREF: main+57↑o
.text:0000000000002340 ; __unwind {
.text:0000000000002340                 cmp     cs:stdout_closed, 0
.text:0000000000002347                 jz      short loc_2368
.text:0000000000002349                 sub     rsp, 8
.text:000000000000234D                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002354                 call    close_stream
.text:0000000000002359                 test    eax, eax
.text:000000000000235B                 jnz     short loc_236D
.text:000000000000235D                 add     rsp, 8
.text:0000000000002361                 retn
.text:0000000000002361 ; ---------------------------------------------------------------------------
.text:0000000000002362                 align 8
.text:0000000000002368
.text:0000000000002368 loc_2368:                               ; CODE XREF: maybe_close_stdout+7↑j
.text:0000000000002368                 jmp     close_stdout
.text:000000000000236D ; ---------------------------------------------------------------------------
.text:000000000000236D
.text:000000000000236D loc_236D:                               ; CODE XREF: maybe_close_stdout+1B↑j
.text:000000000000236D                 mov     edi, 1          ; status
.text:0000000000002372                 call    __exit
.text:0000000000002372 ; } // starts at 2340
.text:0000000000002372 maybe_close_stdout endp
.text:0000000000002372
.text:0000000000002372 ; ---------------------------------------------------------------------------
.text:0000000000002377                 align 20h
.text:0000000000002380
.text:0000000000002380 ; =============== S U B R O U T I N E =======================================
.text:0000000000002380
.text:0000000000002380 ; Attributes: noreturn
.text:0000000000002380
.text:0000000000002380 ; void __fastcall __noreturn usage(int status)
.text:0000000000002380                 public usage
.text:0000000000002380 usage           proc near               ; CODE XREF: main+552↑p
.text:0000000000002380                                         ; main+61E↑p
.text:0000000000002380
.text:0000000000002380 var_A8          = qword ptr -0A8h
.text:0000000000002380 var_A0          = qword ptr -0A0h
.text:0000000000002380 var_98          = qword ptr -98h
.text:0000000000002380 var_90          = qword ptr -90h
.text:0000000000002380 var_88          = qword ptr -88h
.text:0000000000002380 var_80          = qword ptr -80h
.text:0000000000002380 var_78          = qword ptr -78h
.text:0000000000002380 var_70          = qword ptr -70h
.text:0000000000002380 var_68          = qword ptr -68h
.text:0000000000002380 var_60          = qword ptr -60h
.text:0000000000002380 var_58          = qword ptr -58h
.text:0000000000002380 var_50          = qword ptr -50h
.text:0000000000002380 var_48          = qword ptr -48h
.text:0000000000002380 var_40          = qword ptr -40h
.text:0000000000002380 var_30          = qword ptr -30h
.text:0000000000002380
.text:0000000000002380 ; __unwind {
.text:0000000000002380                 push    r13
.text:0000000000002382                 push    r12
.text:0000000000002384                 mov     edx, 5          ; category
.text:0000000000002389                 push    rbp
.text:000000000000238A                 push    rbx
.text:000000000000238B                 mov     ebp, edi
.text:000000000000238D                 sub     rsp, 88h
.text:0000000000002394                 mov     rbx, cs:program_name
.text:000000000000239B                 mov     rax, fs:28h
.text:00000000000023A4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000023A9                 xor     eax, eax
.text:00000000000023AB                 test    edi, edi
.text:00000000000023AD                 jz      short loc_23DD
.text:00000000000023AF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000023B6                 xor     edi, edi        ; domainname
.text:00000000000023B8                 call    _dcgettext
.text:00000000000023BD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000023C4                 mov     rdx, rax
.text:00000000000023C7                 mov     rcx, rbx
.text:00000000000023CA                 mov     esi, 1
.text:00000000000023CF                 xor     eax, eax
.text:00000000000023D1                 call    ___fprintf_chk
.text:00000000000023D6
.text:00000000000023D6 loc_23D6:                               ; CODE XREF: usage+346↓j
.text:00000000000023D6                 mov     edi, ebp        ; status
.text:00000000000023D8                 call    _exit
.text:00000000000023DD ; ---------------------------------------------------------------------------
.text:00000000000023DD
.text:00000000000023DD loc_23DD:                               ; CODE XREF: usage+2D↑j
.text:00000000000023DD                 lea     rsi, aUsageSOptionTe ; "Usage: %s [OPTION]... [TEMPLATE]\n"
.text:00000000000023E4                 xor     edi, edi        ; domainname
.text:00000000000023E6                 call    _dcgettext
.text:00000000000023EB                 mov     rdx, rbx
.text:00000000000023EE                 mov     rsi, rax
.text:00000000000023F1                 mov     edi, 1
.text:00000000000023F6                 xor     eax, eax
.text:00000000000023F8                 call    ___printf_chk
.text:00000000000023FD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002404                 lea     rsi, aCreateATempora ; "Create a temporary file or directory, s"...
.text:000000000000240B                 mov     edx, 5          ; category
.text:0000000000002410                 xor     edi, edi        ; domainname
.text:0000000000002412                 call    _dcgettext
.text:0000000000002417                 mov     rsi, rbx        ; stream
.text:000000000000241A                 mov     rdi, rax        ; s
.text:000000000000241D                 call    _fputs_unlocked
.text:0000000000002422                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002429                 lea     rsi, aFilesAreCreate ; "Files are created u+rw, and directories"...
.text:0000000000002430                 mov     edx, 5          ; category
.text:0000000000002435                 xor     edi, edi        ; domainname
.text:0000000000002437                 call    _dcgettext
.text:000000000000243C                 mov     rsi, rbx        ; stream
.text:000000000000243F                 mov     rdi, rax        ; s
.text:0000000000002442                 call    _fputs_unlocked
.text:0000000000002447                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000244E                 mov     edi, 0Ah        ; c
.text:0000000000002453                 call    _fputc_unlocked
.text:0000000000002458                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000245F                 lea     rsi, aDDirectoryCrea ; "  -d, --directory     create a director"...
.text:0000000000002466                 mov     edx, 5          ; category
.text:000000000000246B                 xor     edi, edi        ; domainname
.text:000000000000246D                 call    _dcgettext
.text:0000000000002472                 mov     rsi, rbx        ; stream
.text:0000000000002475                 mov     rdi, rax        ; s
.text:0000000000002478                 call    _fputs_unlocked
.text:000000000000247D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002484                 lea     rsi, aSuffixSuffAppe ; "      --suffix=SUFF   append SUFF to TE"...
.text:000000000000248B                 mov     edx, 5          ; category
.text:0000000000002490                 xor     edi, edi        ; domainname
.text:0000000000002492                 call    _dcgettext
.text:0000000000002497                 mov     rsi, rbx        ; stream
.text:000000000000249A                 mov     rdi, rax        ; s
.text:000000000000249D                 call    _fputs_unlocked
.text:00000000000024A2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024A9                 lea     rsi, aPDirTmpdirDirI ; "  -p DIR, --tmpdir[=DIR]  interpret TEM"...
.text:00000000000024B0                 mov     edx, 5          ; category
.text:00000000000024B5                 xor     edi, edi        ; domainname
.text:00000000000024B7                 call    _dcgettext
.text:00000000000024BC                 mov     rsi, rbx        ; stream
.text:00000000000024BF                 mov     rdi, rax        ; s
.text:00000000000024C2                 call    _fputs_unlocked
.text:00000000000024C7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024CE                 lea     rsi, aTInterpretTemp ; "  -t                  interpret TEMPLAT"...
.text:00000000000024D5                 mov     edx, 5          ; category
.text:00000000000024DA                 xor     edi, edi        ; domainname
.text:00000000000024DC                 call    _dcgettext
.text:00000000000024E1                 mov     rsi, rbx        ; stream
.text:00000000000024E4                 mov     rdi, rax        ; s
.text:00000000000024E7                 call    _fputs_unlocked
.text:00000000000024EC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024F3                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000024FA                 mov     edx, 5          ; category
.text:00000000000024FF                 xor     edi, edi        ; domainname
.text:0000000000002501                 call    _dcgettext
.text:0000000000002506                 mov     rsi, rbx        ; stream
.text:0000000000002509                 mov     rdi, rax        ; s
.text:000000000000250C                 call    _fputs_unlocked
.text:0000000000002511                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002518                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:000000000000251F                 mov     edx, 5          ; category
.text:0000000000002524                 xor     edi, edi        ; domainname
.text:0000000000002526                 call    _dcgettext
.text:000000000000252B                 mov     rsi, rbx        ; stream
.text:000000000000252E                 mov     rdi, rax        ; s
.text:0000000000002531                 lea     rbx, aMktemp    ; "mktemp"
.text:0000000000002538                 call    _fputs_unlocked
.text:000000000000253D                 lea     rax, asc_662B   ; "["
.text:0000000000002544                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000254B                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002554                 mov     [rsp+0A8h+var_40], 0
.text:000000000000255D                 mov     rdx, rsp
.text:0000000000002560                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002564                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000256B                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002570                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002577                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000257C                 lea     rax, domainname ; "coreutils"
.text:0000000000002583                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002588                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000258F                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002594                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000259B                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000025A0                 mov     [rsp+0A8h+var_90], rax
.text:00000000000025A5                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000025AC                 mov     [rsp+0A8h+var_88], rax
.text:00000000000025B1                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000025B8                 mov     [rsp+0A8h+var_80], rax
.text:00000000000025BD                 mov     [rsp+0A8h+var_70], rax
.text:00000000000025C2                 mov     [rsp+0A8h+var_60], rax
.text:00000000000025C7                 mov     [rsp+0A8h+var_50], rax
.text:00000000000025CC                 nop     dword ptr [rax+00h]
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: usage+26D↓j
.text:00000000000025D0                 add     rdx, 10h
.text:00000000000025D4                 mov     rdi, [rdx]
.text:00000000000025D7                 test    rdi, rdi
.text:00000000000025DA                 jz      short loc_25EF
.text:00000000000025DC                 mov     ecx, 7
.text:00000000000025E1                 mov     rsi, rbx
.text:00000000000025E4                 repe cmpsb
.text:00000000000025E6                 setnbe  al
.text:00000000000025E9                 sbb     al, 0
.text:00000000000025EB                 test    al, al
.text:00000000000025ED                 jnz     short loc_25D0
.text:00000000000025EF
.text:00000000000025EF loc_25EF:                               ; CODE XREF: usage+25A↑j
.text:00000000000025EF                 mov     r12, [rdx+8]
.text:00000000000025F3                 xor     edi, edi        ; domainname
.text:00000000000025F5                 mov     edx, 5          ; category
.text:00000000000025FA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002601                 test    r12, r12
.text:0000000000002604                 jz      loc_26CB
.text:000000000000260A                 call    _dcgettext
.text:000000000000260F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002616                 lea     rdx, unk_66A1
.text:000000000000261D                 mov     rsi, rax
.text:0000000000002620                 mov     edi, 1
.text:0000000000002625                 xor     eax, eax
.text:0000000000002627                 call    ___printf_chk
.text:000000000000262C                 xor     esi, esi        ; locale
.text:000000000000262E                 mov     edi, 5          ; category
.text:0000000000002633                 call    _setlocale
.text:0000000000002638                 test    rax, rax
.text:000000000000263B                 jz      short loc_2659
.text:000000000000263D                 lea     rsi, s2         ; "en_"
.text:0000000000002644                 mov     edx, 3          ; n
.text:0000000000002649                 mov     rdi, rax        ; s1
.text:000000000000264C                 call    _strncmp
.text:0000000000002651                 test    eax, eax
.text:0000000000002653                 jnz     loc_2760
.text:0000000000002659
.text:0000000000002659 loc_2659:                               ; CODE XREF: usage+2BB↑j
.text:0000000000002659                                         ; usage+405↓j
.text:0000000000002659                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002660                 xor     edi, edi        ; domainname
.text:0000000000002662                 mov     edx, 5          ; category
.text:0000000000002667                 call    _dcgettext
.text:000000000000266C                 lea     rcx, aMktemp    ; "mktemp"
.text:0000000000002673                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000267A                 mov     rsi, rax
.text:000000000000267D                 mov     edi, 1
.text:0000000000002682                 xor     eax, eax
.text:0000000000002684                 call    ___printf_chk
.text:0000000000002689                 cmp     r12, rbx
.text:000000000000268C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002693                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000269A                 cmovz   rbx, rcx
.text:000000000000269E
.text:000000000000269E loc_269E:                               ; CODE XREF: usage+3D4↓j
.text:000000000000269E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000026A5                 xor     edi, edi        ; domainname
.text:00000000000026A7                 mov     edx, 5          ; category
.text:00000000000026AC                 call    _dcgettext
.text:00000000000026B1                 mov     rcx, rbx
.text:00000000000026B4                 mov     rsi, rax
.text:00000000000026B7                 mov     rdx, r12
.text:00000000000026BA                 mov     edi, 1
.text:00000000000026BF                 xor     eax, eax
.text:00000000000026C1                 call    ___printf_chk
.text:00000000000026C6                 jmp     loc_23D6
.text:00000000000026CB ; ---------------------------------------------------------------------------
.text:00000000000026CB
.text:00000000000026CB loc_26CB:                               ; CODE XREF: usage+284↑j
.text:00000000000026CB                 call    _dcgettext
.text:00000000000026D0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000026D7                 lea     rdx, unk_66A1
.text:00000000000026DE                 mov     rsi, rax
.text:00000000000026E1                 mov     edi, 1
.text:00000000000026E6                 xor     eax, eax
.text:00000000000026E8                 call    ___printf_chk
.text:00000000000026ED                 xor     esi, esi        ; locale
.text:00000000000026EF                 mov     edi, 5          ; category
.text:00000000000026F4                 call    _setlocale
.text:00000000000026F9                 test    rax, rax
.text:00000000000026FC                 jz      short loc_2716
.text:00000000000026FE                 lea     rsi, s2         ; "en_"
.text:0000000000002705                 mov     edx, 3          ; n
.text:000000000000270A                 mov     rdi, rax        ; s1
.text:000000000000270D                 call    _strncmp
.text:0000000000002712                 test    eax, eax
.text:0000000000002714                 jnz     short loc_2759
.text:0000000000002716
.text:0000000000002716 loc_2716:                               ; CODE XREF: usage+37C↑j
.text:0000000000002716                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000271D                 mov     edx, 5          ; category
.text:0000000000002722                 xor     edi, edi        ; domainname
.text:0000000000002724                 lea     r12, aMktemp    ; "mktemp"
.text:000000000000272B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002732                 call    _dcgettext
.text:0000000000002737                 lea     rcx, aMktemp    ; "mktemp"
.text:000000000000273E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002745                 mov     rsi, rax
.text:0000000000002748                 mov     edi, 1
.text:000000000000274D                 xor     eax, eax
.text:000000000000274F                 call    ___printf_chk
.text:0000000000002754                 jmp     loc_269E
.text:0000000000002759 ; ---------------------------------------------------------------------------
.text:0000000000002759
.text:0000000000002759 loc_2759:                               ; CODE XREF: usage+394↑j
.text:0000000000002759                 lea     r12, aMktemp    ; "mktemp"
.text:0000000000002760
.text:0000000000002760 loc_2760:                               ; CODE XREF: usage+2D3↑j
.text:0000000000002760                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002767                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000276E                 xor     edi, edi        ; domainname
.text:0000000000002770                 mov     edx, 5          ; category
.text:0000000000002775                 call    _dcgettext
.text:000000000000277A                 mov     rsi, r13        ; stream
.text:000000000000277D                 mov     rdi, rax        ; s
.text:0000000000002780                 call    _fputs_unlocked
.text:0000000000002785                 jmp     loc_2659
.text:0000000000002785 ; } // starts at 2380
.text:0000000000002785 usage           endp
.text:0000000000002785
.text:0000000000002785 ; ---------------------------------------------------------------------------
.text:000000000000278A                 align 10h
.text:0000000000002790
.text:0000000000002790 ; =============== S U B R O U T I N E =======================================
.text:0000000000002790
.text:0000000000002790 ; Attributes: info_from_lumina
.text:0000000000002790
.text:0000000000002790 ; int __fastcall close_stream(FILE *stream)
.text:0000000000002790                 public close_stream
.text:0000000000002790 close_stream    proc near               ; CODE XREF: main+47F↑p
.text:0000000000002790                                         ; maybe_close_stdout+14↑p ...
.text:0000000000002790 ; __unwind {
.text:0000000000002790                 push    r12
.text:0000000000002792                 push    rbp
.text:0000000000002793                 mov     rbp, rdi
.text:0000000000002796                 push    rbx
.text:0000000000002797                 call    ___fpending
.text:000000000000279C                 mov     ebx, [rbp+0]
.text:000000000000279F                 mov     rdi, rbp        ; stream
.text:00000000000027A2                 mov     r12, rax
.text:00000000000027A5                 call    rpl_fclose
.text:00000000000027AA                 and     ebx, 20h
.text:00000000000027AD                 test    ebx, ebx
.text:00000000000027AF                 jnz     short loc_27C8
.text:00000000000027B1                 test    eax, eax
.text:00000000000027B3                 jz      short loc_27BF
.text:00000000000027B5                 test    r12, r12
.text:00000000000027B8                 mov     eax, 0FFFFFFFFh
.text:00000000000027BD                 jz      short loc_27F8
.text:00000000000027BF
.text:00000000000027BF loc_27BF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000027BF                 pop     rbx
.text:00000000000027C0                 pop     rbp
.text:00000000000027C1                 pop     r12
.text:00000000000027C3                 retn
.text:00000000000027C3 ; ---------------------------------------------------------------------------
.text:00000000000027C4                 align 8
.text:00000000000027C8
.text:00000000000027C8 loc_27C8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000027C8                 test    eax, eax
.text:00000000000027CA                 jnz     short loc_27E8
.text:00000000000027CC                 call    ___errno_location
.text:00000000000027D1                 mov     dword ptr [rax], 0
.text:00000000000027D7                 mov     eax, 0FFFFFFFFh
.text:00000000000027DC                 pop     rbx
.text:00000000000027DD                 pop     rbp
.text:00000000000027DE                 pop     r12
.text:00000000000027E0                 retn
.text:00000000000027E0 ; ---------------------------------------------------------------------------
.text:00000000000027E1                 align 8
.text:00000000000027E8
.text:00000000000027E8 loc_27E8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000027E8                 pop     rbx
.text:00000000000027E9                 mov     eax, 0FFFFFFFFh
.text:00000000000027EE                 pop     rbp
.text:00000000000027EF                 pop     r12
.text:00000000000027F1                 retn
.text:00000000000027F1 ; ---------------------------------------------------------------------------
.text:00000000000027F2                 align 8
.text:00000000000027F8
.text:00000000000027F8 loc_27F8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000027F8                 call    ___errno_location
.text:00000000000027FD                 cmp     dword ptr [rax], 9
.text:0000000000002800                 pop     rbx
.text:0000000000002801                 pop     rbp
.text:0000000000002802                 pop     r12
.text:0000000000002804                 setnz   al
.text:0000000000002807                 movzx   eax, al
.text:000000000000280A                 neg     eax
.text:000000000000280C                 retn
.text:000000000000280C ; } // starts at 2790
.text:000000000000280C close_stream    endp
.text:000000000000280C
.text:000000000000280C ; ---------------------------------------------------------------------------
.text:000000000000280D                 align 10h
.text:0000000000002810
.text:0000000000002810 ; =============== S U B R O U T I N E =======================================
.text:0000000000002810
.text:0000000000002810
.text:0000000000002810                 public close_stdout_set_file_name
.text:0000000000002810 close_stdout_set_file_name proc near
.text:0000000000002810 ; __unwind {
.text:0000000000002810                 mov     cs:file_name, rdi
.text:0000000000002817                 retn
.text:0000000000002817 ; } // starts at 2810
.text:0000000000002817 close_stdout_set_file_name endp
.text:0000000000002817
.text:0000000000002817 ; ---------------------------------------------------------------------------
.text:0000000000002818                 align 20h
.text:0000000000002820
.text:0000000000002820 ; =============== S U B R O U T I N E =======================================
.text:0000000000002820
.text:0000000000002820
.text:0000000000002820                 public close_stdout_set_ignore_EPIPE
.text:0000000000002820 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002820 ; __unwind {
.text:0000000000002820                 mov     cs:ignore_EPIPE, dil
.text:0000000000002827                 retn
.text:0000000000002827 ; } // starts at 2820
.text:0000000000002827 close_stdout_set_ignore_EPIPE endp
.text:0000000000002827
.text:0000000000002827 ; ---------------------------------------------------------------------------
.text:0000000000002828                 align 10h
.text:0000000000002830
.text:0000000000002830 ; =============== S U B R O U T I N E =======================================
.text:0000000000002830
.text:0000000000002830 ; Attributes: info_from_lumina
.text:0000000000002830
.text:0000000000002830 ; void __cdecl close_stdout()
.text:0000000000002830                 public close_stdout
.text:0000000000002830 close_stdout    proc near               ; CODE XREF: maybe_close_stdout:loc_2368↑j
.text:0000000000002830 ; __unwind {
.text:0000000000002830                 push    rbp
.text:0000000000002831                 push    rbx
.text:0000000000002832                 sub     rsp, 8
.text:0000000000002836                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000283D                 call    close_stream
.text:0000000000002842                 test    eax, eax
.text:0000000000002844                 jz      short loc_285C
.text:0000000000002846                 call    ___errno_location
.text:000000000000284B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002852                 mov     rbx, rax
.text:0000000000002855                 jz      short loc_2873
.text:0000000000002857                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000285A                 jnz     short loc_2873
.text:000000000000285C
.text:000000000000285C loc_285C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000285C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002863                 call    close_stream
.text:0000000000002868                 test    eax, eax
.text:000000000000286A                 jnz     short loc_28B2
.text:000000000000286C                 add     rsp, 8
.text:0000000000002870                 pop     rbx
.text:0000000000002871                 pop     rbp
.text:0000000000002872                 retn
.text:0000000000002873 ; ---------------------------------------------------------------------------
.text:0000000000002873
.text:0000000000002873 loc_2873:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002873                                         ; close_stdout+2A↑j
.text:0000000000002873                 lea     rsi, aWriteError ; "write error"
.text:000000000000287A                 xor     edi, edi        ; domainname
.text:000000000000287C                 mov     edx, 5          ; category
.text:0000000000002881                 call    _dcgettext
.text:0000000000002886                 mov     rdi, cs:file_name
.text:000000000000288D                 mov     rbp, rax
.text:0000000000002890                 test    rdi, rdi
.text:0000000000002893                 jz      short loc_28BD
.text:0000000000002895                 call    quotearg_colon
.text:000000000000289A                 mov     esi, [rbx]      ; errnum
.text:000000000000289C                 lea     rdx, format     ; "%s: %s"
.text:00000000000028A3                 mov     rcx, rax
.text:00000000000028A6                 mov     r8, rbp
.text:00000000000028A9                 xor     edi, edi        ; status
.text:00000000000028AB                 xor     eax, eax
.text:00000000000028AD                 call    _error
.text:00000000000028B2
.text:00000000000028B2 loc_28B2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000028B2                                         ; close_stdout+A2↓j
.text:00000000000028B2                 mov     edi, cs:exit_failure ; status
.text:00000000000028B8                 call    __exit
.text:00000000000028BD ; ---------------------------------------------------------------------------
.text:00000000000028BD
.text:00000000000028BD loc_28BD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000028BD                 mov     esi, [rbx]      ; errnum
.text:00000000000028BF                 lea     rdx, format+4   ; format
.text:00000000000028C6                 mov     rcx, rax
.text:00000000000028C9                 xor     edi, edi        ; status
.text:00000000000028CB                 xor     eax, eax
.text:00000000000028CD                 call    _error
.text:00000000000028D2                 jmp     short loc_28B2
.text:00000000000028D2 ; } // starts at 2830
.text:00000000000028D2 close_stdout    endp
.text:00000000000028D2
.text:00000000000028D2 ; ---------------------------------------------------------------------------
.text:00000000000028D4                 align 20h
.text:00000000000028E0
.text:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028E0
.text:00000000000028E0 ; Attributes: info_from_lumina
.text:00000000000028E0
.text:00000000000028E0 ; char *__fastcall last_component(const char *name)
.text:00000000000028E0                 public last_component
.text:00000000000028E0 last_component  proc near               ; CODE XREF: main+249↑p
.text:00000000000028E0                                         ; main+58B↑p ...
.text:00000000000028E0 ; __unwind {
.text:00000000000028E0                 movzx   edx, byte ptr [rdi]
.text:00000000000028E3                 mov     rax, rdi
.text:00000000000028E6                 cmp     dl, 2Fh ; '/'
.text:00000000000028E9                 jnz     short loc_28FC
.text:00000000000028EB                 nop     dword ptr [rax+rax+00h]
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: last_component+1A↓j
.text:00000000000028F0                 add     rax, 1
.text:00000000000028F4                 movzx   edx, byte ptr [rax]
.text:00000000000028F7                 cmp     dl, 2Fh ; '/'
.text:00000000000028FA                 jz      short loc_28F0
.text:00000000000028FC
.text:00000000000028FC loc_28FC:                               ; CODE XREF: last_component+9↑j
.text:00000000000028FC                 test    dl, dl
.text:00000000000028FE                 jz      short locret_293A
.text:0000000000002900                 mov     rcx, rax
.text:0000000000002903                 xor     esi, esi
.text:0000000000002905                 jmp     short loc_2925
.text:0000000000002905 ; ---------------------------------------------------------------------------
.text:0000000000002907                 align 10h
.text:0000000000002910
.text:0000000000002910 loc_2910:                               ; CODE XREF: last_component+48↓j
.text:0000000000002910                 test    sil, sil
.text:0000000000002913                 jz      short loc_291A
.text:0000000000002915                 mov     rax, rcx
.text:0000000000002918                 xor     esi, esi
.text:000000000000291A
.text:000000000000291A loc_291A:                               ; CODE XREF: last_component+33↑j
.text:000000000000291A                 add     rcx, 1
.text:000000000000291E                 movzx   edx, byte ptr [rcx]
.text:0000000000002921                 test    dl, dl
.text:0000000000002923                 jz      short locret_293A
.text:0000000000002925
.text:0000000000002925 loc_2925:                               ; CODE XREF: last_component+25↑j
.text:0000000000002925                                         ; last_component+58↓j
.text:0000000000002925                 cmp     dl, 2Fh ; '/'
.text:0000000000002928                 jnz     short loc_2910
.text:000000000000292A                 add     rcx, 1
.text:000000000000292E                 movzx   edx, byte ptr [rcx]
.text:0000000000002931                 mov     esi, 1
.text:0000000000002936                 test    dl, dl
.text:0000000000002938                 jnz     short loc_2925
.text:000000000000293A
.text:000000000000293A locret_293A:                            ; CODE XREF: last_component+1E↑j
.text:000000000000293A                                         ; last_component+43↑j
.text:000000000000293A                 rep retn
.text:000000000000293A ; } // starts at 28E0
.text:000000000000293A last_component  endp
.text:000000000000293A
.text:000000000000293A ; ---------------------------------------------------------------------------
.text:000000000000293C                 align 20h
.text:0000000000002940
.text:0000000000002940 ; =============== S U B R O U T I N E =======================================
.text:0000000000002940
.text:0000000000002940 ; Attributes: info_from_lumina
.text:0000000000002940
.text:0000000000002940 ; size_t __fastcall base_len(const char *name)
.text:0000000000002940                 public base_len
.text:0000000000002940 base_len        proc near               ; CODE XREF: mfile_name_concat+22↓p
.text:0000000000002940 ; __unwind {
.text:0000000000002940                 push    rbx
.text:0000000000002941                 mov     rbx, rdi
.text:0000000000002944                 call    _strlen
.text:0000000000002949                 cmp     rax, 1
.text:000000000000294D                 jbe     short loc_295A
.text:000000000000294F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000002954                 lea     rdx, [rax-1]
.text:0000000000002958                 jz      short loc_2968
.text:000000000000295A
.text:000000000000295A loc_295A:                               ; CODE XREF: base_len+D↑j
.text:000000000000295A                 pop     rbx
.text:000000000000295B                 retn
.text:000000000000295B ; ---------------------------------------------------------------------------
.text:000000000000295C                 align 20h
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: base_len+37↓j
.text:0000000000002960                 mov     rdx, rax
.text:0000000000002963                 nop     dword ptr [rax+rax+00h]
.text:0000000000002968
.text:0000000000002968 loc_2968:                               ; CODE XREF: base_len+18↑j
.text:0000000000002968                 cmp     rdx, 1
.text:000000000000296C                 jz      short loc_2980
.text:000000000000296E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000002973                 lea     rax, [rdx-1]
.text:0000000000002977                 jz      short loc_2960
.text:0000000000002979                 mov     rax, rdx
.text:000000000000297C                 pop     rbx
.text:000000000000297D                 retn
.text:000000000000297D ; ---------------------------------------------------------------------------
.text:000000000000297E                 align 20h
.text:0000000000002980
.text:0000000000002980 loc_2980:                               ; CODE XREF: base_len+2C↑j
.text:0000000000002980                 mov     eax, 1
.text:0000000000002985                 pop     rbx
.text:0000000000002986                 retn
.text:0000000000002986 ; } // starts at 2940
.text:0000000000002986 base_len        endp
.text:0000000000002986
.text:0000000000002986 ; ---------------------------------------------------------------------------
.text:0000000000002987                 align 10h
.text:0000000000002990
.text:0000000000002990 ; =============== S U B R O U T I N E =======================================
.text:0000000000002990
.text:0000000000002990
.text:0000000000002990                 public file_name_concat
.text:0000000000002990 file_name_concat proc near              ; CODE XREF: main+2E0↑p
.text:0000000000002990 ; __unwind {
.text:0000000000002990                 sub     rsp, 8
.text:0000000000002994                 call    mfile_name_concat
.text:0000000000002999                 test    rax, rax
.text:000000000000299C                 jz      short loc_29A3
.text:000000000000299E                 add     rsp, 8
.text:00000000000029A2                 retn
.text:00000000000029A3 ; ---------------------------------------------------------------------------
.text:00000000000029A3
.text:00000000000029A3 loc_29A3:                               ; CODE XREF: file_name_concat+C↑j
.text:00000000000029A3                 call    xalloc_die
.text:00000000000029A3 ; } // starts at 2990
.text:00000000000029A3 file_name_concat endp
.text:00000000000029A3
.text:00000000000029A3 ; ---------------------------------------------------------------------------
.text:00000000000029A8                 align 10h
.text:00000000000029B0
.text:00000000000029B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029B0
.text:00000000000029B0
.text:00000000000029B0 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:00000000000029B0                 public mfile_name_concat
.text:00000000000029B0 mfile_name_concat proc near             ; CODE XREF: file_name_concat+4↑p
.text:00000000000029B0
.text:00000000000029B0 var_48          = qword ptr -48h
.text:00000000000029B0 var_39          = byte ptr -39h
.text:00000000000029B0
.text:00000000000029B0 ; __unwind {
.text:00000000000029B0                 push    r15
.text:00000000000029B2                 push    r14
.text:00000000000029B4                 mov     r15, rdx
.text:00000000000029B7                 push    r13
.text:00000000000029B9                 push    r12
.text:00000000000029BB                 mov     r12, rdi
.text:00000000000029BE                 push    rbp
.text:00000000000029BF                 push    rbx
.text:00000000000029C0                 mov     rbp, rsi
.text:00000000000029C3                 sub     rsp, 18h
.text:00000000000029C7                 call    last_component
.text:00000000000029CC                 mov     rbx, rax
.text:00000000000029CF                 mov     rdi, rax
.text:00000000000029D2                 call    base_len
.text:00000000000029D7                 sub     rbx, r12
.text:00000000000029DA                 mov     r13, rax
.text:00000000000029DD                 mov     rdi, rbp        ; s
.text:00000000000029E0                 add     rbx, rax
.text:00000000000029E3                 call    _strlen
.text:00000000000029E8                 test    r13, r13
.text:00000000000029EB                 mov     r14, rax
.text:00000000000029EE                 jz      short loc_2A20
.text:00000000000029F0                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:00000000000029F6                 jz      loc_2AA0
.text:00000000000029FC                 xor     eax, eax
.text:00000000000029FE                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000002A02                 mov     edx, 0
.text:0000000000002A07                 setnz   al
.text:0000000000002A0A                 mov     [rsp+48h+var_48], rax
.text:0000000000002A0E                 mov     eax, 2Fh ; '/'
.text:0000000000002A13                 cmovz   eax, edx
.text:0000000000002A16                 mov     [rsp+48h+var_39], al
.text:0000000000002A1A                 jmp     short loc_2A3E
.text:0000000000002A1A ; ---------------------------------------------------------------------------
.text:0000000000002A1C                 align 20h
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:0000000000002A20                 xor     eax, eax
.text:0000000000002A22                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000002A26                 mov     edx, 0
.text:0000000000002A2B                 setz    al
.text:0000000000002A2E                 mov     [rsp+48h+var_48], rax
.text:0000000000002A32                 mov     eax, 2Eh ; '.'
.text:0000000000002A37                 cmovnz  eax, edx
.text:0000000000002A3A                 mov     [rsp+48h+var_39], al
.text:0000000000002A3E
.text:0000000000002A3E loc_2A3E:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:0000000000002A3E                                         ; mfile_name_concat+FD↓j
.text:0000000000002A3E                 lea     rdi, [rbx+r14+1]
.text:0000000000002A43                 add     rdi, [rsp+48h+var_48] ; size
.text:0000000000002A47                 call    _malloc
.text:0000000000002A4C                 test    rax, rax
.text:0000000000002A4F                 mov     r13, rax
.text:0000000000002A52                 jz      short loc_2A86
.text:0000000000002A54                 mov     rdi, rax        ; dest
.text:0000000000002A57                 mov     rdx, rbx        ; n
.text:0000000000002A5A                 mov     rsi, r12        ; src
.text:0000000000002A5D                 call    _mempcpy
.text:0000000000002A62                 movzx   ecx, [rsp+48h+var_39]
.text:0000000000002A67                 mov     rdi, [rsp+48h+var_48]
.text:0000000000002A6B                 add     rdi, rax        ; dest
.text:0000000000002A6E                 test    r15, r15
.text:0000000000002A71                 mov     [rax], cl
.text:0000000000002A73                 jz      short loc_2A78
.text:0000000000002A75                 mov     [r15], rdi
.text:0000000000002A78
.text:0000000000002A78 loc_2A78:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:0000000000002A78                 mov     rdx, r14        ; n
.text:0000000000002A7B                 mov     rsi, rbp        ; src
.text:0000000000002A7E                 call    _mempcpy
.text:0000000000002A83                 mov     byte ptr [rax], 0
.text:0000000000002A86
.text:0000000000002A86 loc_2A86:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:0000000000002A86                 add     rsp, 18h
.text:0000000000002A8A                 mov     rax, r13
.text:0000000000002A8D                 pop     rbx
.text:0000000000002A8E                 pop     rbp
.text:0000000000002A8F                 pop     r12
.text:0000000000002A91                 pop     r13
.text:0000000000002A93                 pop     r14
.text:0000000000002A95                 pop     r15
.text:0000000000002A97                 retn
.text:0000000000002A97 ; ---------------------------------------------------------------------------
.text:0000000000002A98                 align 20h
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: mfile_name_concat+46↑j
.text:0000000000002AA0                 mov     [rsp+48h+var_48], 0
.text:0000000000002AA8                 mov     [rsp+48h+var_39], 0
.text:0000000000002AAD                 jmp     short loc_2A3E
.text:0000000000002AAD ; } // starts at 29B0
.text:0000000000002AAD mfile_name_concat endp
.text:0000000000002AAD
.text:0000000000002AAD ; ---------------------------------------------------------------------------
.text:0000000000002AAF                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AB0
.text:0000000000002AB0
.text:0000000000002AB0                 public set_program_name
.text:0000000000002AB0 set_program_name proc near              ; CODE XREF: main+22↑p
.text:0000000000002AB0 ; __unwind {
.text:0000000000002AB0                 test    rdi, rdi
.text:0000000000002AB3                 push    rbx
.text:0000000000002AB4                 jz      short loc_2B2D
.text:0000000000002AB6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002ABB                 mov     rbx, rdi
.text:0000000000002ABE                 call    _strrchr
.text:0000000000002AC3                 test    rax, rax
.text:0000000000002AC6                 jz      short loc_2B1D
.text:0000000000002AC8                 lea     r8, [rax+1]
.text:0000000000002ACC                 mov     rdx, r8
.text:0000000000002ACF                 sub     rdx, rbx
.text:0000000000002AD2                 cmp     rdx, 6
.text:0000000000002AD6                 jle     short loc_2B1D
.text:0000000000002AD8                 lea     rsi, [rax-6]
.text:0000000000002ADC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002AE3                 mov     ecx, 7
.text:0000000000002AE8                 repe cmpsb
.text:0000000000002AEA                 setnbe  dl
.text:0000000000002AED                 sbb     dl, 0
.text:0000000000002AF0                 test    dl, dl
.text:0000000000002AF2                 jnz     short loc_2B1D
.text:0000000000002AF4                 lea     rdi, aLt        ; "lt-"
.text:0000000000002AFB                 mov     ecx, 3
.text:0000000000002B00                 mov     rsi, r8
.text:0000000000002B03                 mov     rbx, r8
.text:0000000000002B06                 repe cmpsb
.text:0000000000002B08                 setnbe  dl
.text:0000000000002B0B                 sbb     dl, 0
.text:0000000000002B0E                 test    dl, dl
.text:0000000000002B10                 jnz     short loc_2B1D
.text:0000000000002B12                 lea     rbx, [rax+4]
.text:0000000000002B16                 mov     cs:__bss_start, rbx
.text:0000000000002B1D
.text:0000000000002B1D loc_2B1D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002B1D                                         ; set_program_name+26↑j ...
.text:0000000000002B1D                 mov     cs:program_name, rbx
.text:0000000000002B24                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002B2B                 pop     rbx
.text:0000000000002B2C                 retn
.text:0000000000002B2D ; ---------------------------------------------------------------------------
.text:0000000000002B2D
.text:0000000000002B2D loc_2B2D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002B2D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002B34                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002B3B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002B40                 mov     esi, 1          ; size
.text:0000000000002B45                 call    _fwrite
.text:0000000000002B4A                 call    _abort
.text:0000000000002B4A ; } // starts at 2AB0
.text:0000000000002B4A set_program_name endp
.text:0000000000002B4A
.text:0000000000002B4A ; ---------------------------------------------------------------------------
.text:0000000000002B4F                 align 10h
.text:0000000000002B50
.text:0000000000002B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B50
.text:0000000000002B50 ; Attributes: info_from_lumina
.text:0000000000002B50
.text:0000000000002B50 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002B50 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002B50                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002B50 ; __unwind {
.text:0000000000002B50                 push    rbp
.text:0000000000002B51                 push    rbx
.text:0000000000002B52                 mov     rbp, rdi
.text:0000000000002B55                 mov     ebx, esi
.text:0000000000002B57                 sub     rsp, 8
.text:0000000000002B5B                 call    locale_charset
.text:0000000000002B60                 movzx   edx, byte ptr [rax]
.text:0000000000002B63                 and     edx, 0FFFFFFDFh
.text:0000000000002B66                 cmp     dl, 55h ; 'U'
.text:0000000000002B69                 jz      short loc_2BE0
.text:0000000000002B6B                 cmp     dl, 47h ; 'G'
.text:0000000000002B6E                 jz      short loc_2B90
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002B70                                         ; gettext_quote+50↓j ...
.text:0000000000002B70                 lea     rax, unk_6F73
.text:0000000000002B77                 lea     rdx, asc_6F75   ; "'"
.text:0000000000002B7E                 cmp     ebx, 9
.text:0000000000002B81                 cmovnz  rax, rdx
.text:0000000000002B85                 add     rsp, 8
.text:0000000000002B89                 pop     rbx
.text:0000000000002B8A                 pop     rbp
.text:0000000000002B8B                 retn
.text:0000000000002B8B ; ---------------------------------------------------------------------------
.text:0000000000002B8C                 align 10h
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002B90                 movzx   edx, byte ptr [rax+1]
.text:0000000000002B94                 and     edx, 0FFFFFFDFh
.text:0000000000002B97                 cmp     dl, 42h ; 'B'
.text:0000000000002B9A                 jnz     short loc_2B70
.text:0000000000002B9C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002BA0                 jnz     short loc_2B70
.text:0000000000002BA2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002BA6                 jnz     short loc_2B70
.text:0000000000002BA8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002BAC                 jnz     short loc_2B70
.text:0000000000002BAE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002BB2                 jnz     short loc_2B70
.text:0000000000002BB4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002BB8                 jnz     short loc_2B70
.text:0000000000002BBA                 cmp     byte ptr [rax+7], 0
.text:0000000000002BBE                 jnz     short loc_2B70
.text:0000000000002BC0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002BC4                 lea     rax, unk_6F6C
.text:0000000000002BCB                 lea     rdx, unk_6F70
.text:0000000000002BD2                 cmovnz  rax, rdx
.text:0000000000002BD6                 add     rsp, 8
.text:0000000000002BDA                 pop     rbx
.text:0000000000002BDB                 pop     rbp
.text:0000000000002BDC                 retn
.text:0000000000002BDC ; ---------------------------------------------------------------------------
.text:0000000000002BDD                 align 20h
.text:0000000000002BE0
.text:0000000000002BE0 loc_2BE0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002BE0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002BE4                 and     edx, 0FFFFFFDFh
.text:0000000000002BE7                 cmp     dl, 54h ; 'T'
.text:0000000000002BEA                 jnz     short loc_2B70
.text:0000000000002BEC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002BF0                 and     edx, 0FFFFFFDFh
.text:0000000000002BF3                 cmp     dl, 46h ; 'F'
.text:0000000000002BF6                 jnz     loc_2B70
.text:0000000000002BFC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002C00                 jnz     loc_2B70
.text:0000000000002C06                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002C0A                 jnz     loc_2B70
.text:0000000000002C10                 cmp     byte ptr [rax+5], 0
.text:0000000000002C14                 jnz     loc_2B70
.text:0000000000002C1A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002C1E                 lea     rax, unk_6F64
.text:0000000000002C25                 lea     rdx, unk_6F68
.text:0000000000002C2C                 cmovnz  rax, rdx
.text:0000000000002C30                 add     rsp, 8
.text:0000000000002C34                 pop     rbx
.text:0000000000002C35                 pop     rbp
.text:0000000000002C36                 retn
.text:0000000000002C36 ; } // starts at 2B50
.text:0000000000002C36 gettext_quote   endp
.text:0000000000002C36
.text:0000000000002C36 ; ---------------------------------------------------------------------------
.text:0000000000002C37                 align 20h
.text:0000000000002C40
.text:0000000000002C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C40
.text:0000000000002C40 ; Attributes: info_from_lumina
.text:0000000000002C40
.text:0000000000002C40 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002C40 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002C40                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002C40
.text:0000000000002C40 var_E0          = dword ptr -0E0h
.text:0000000000002C40 var_DB          = byte ptr -0DBh
.text:0000000000002C40 var_DA          = byte ptr -0DAh
.text:0000000000002C40 var_D9          = byte ptr -0D9h
.text:0000000000002C40 s               = qword ptr -0D8h
.text:0000000000002C40 n               = qword ptr -0D0h
.text:0000000000002C40 var_C8          = qword ptr -0C8h
.text:0000000000002C40 ps              = qword ptr -0C0h
.text:0000000000002C40 var_B8          = qword ptr -0B8h
.text:0000000000002C40 var_B0          = qword ptr -0B0h
.text:0000000000002C40 var_A8          = qword ptr -0A8h
.text:0000000000002C40 s2              = qword ptr -0A0h
.text:0000000000002C40 var_98          = qword ptr -98h
.text:0000000000002C40 var_90          = qword ptr -90h
.text:0000000000002C40 var_88          = qword ptr -88h
.text:0000000000002C40 var_80          = qword ptr -80h
.text:0000000000002C40 var_78          = qword ptr -78h
.text:0000000000002C40 var_70          = dword ptr -70h
.text:0000000000002C40 var_6C          = byte ptr -6Ch
.text:0000000000002C40 var_6B          = byte ptr -6Bh
.text:0000000000002C40 var_6A          = byte ptr -6Ah
.text:0000000000002C40 var_69          = byte ptr -69h
.text:0000000000002C40 var_68          = qword ptr -68h
.text:0000000000002C40 var_60          = qword ptr -60h
.text:0000000000002C40 wc              = dword ptr -4Ch
.text:0000000000002C40 var_48          = qword ptr -48h
.text:0000000000002C40 var_40          = qword ptr -40h
.text:0000000000002C40 arg_0           = qword ptr  8
.text:0000000000002C40 arg_8           = qword ptr  10h
.text:0000000000002C40 arg_10          = qword ptr  18h
.text:0000000000002C40
.text:0000000000002C40 ; __unwind {
.text:0000000000002C40                 push    r15
.text:0000000000002C42                 push    r14
.text:0000000000002C44                 mov     r15d, r8d
.text:0000000000002C47                 push    r13
.text:0000000000002C49                 push    r12
.text:0000000000002C4B                 mov     r14, rdi
.text:0000000000002C4E                 push    rbp
.text:0000000000002C4F                 push    rbx
.text:0000000000002C50                 mov     ebx, r9d
.text:0000000000002C53                 mov     r13, rsi
.text:0000000000002C56                 mov     rbp, rcx
.text:0000000000002C59                 and     ebx, 2
.text:0000000000002C5C                 sub     rsp, 0B8h
.text:0000000000002C63                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002C6B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002C70                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002C75                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002C7A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002C7F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002C87                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002C8C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002C94                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002C99                 mov     rax, fs:28h
.text:0000000000002CA2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002CAA                 xor     eax, eax
.text:0000000000002CAC                 call    ___ctype_get_mb_cur_max
.text:0000000000002CB1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002CB5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002CBA                 ja      def_2CD1        ; jumptable 00000000000121F1 default case
.text:0000000000002CC0                 lea     rcx, jpt_2CD1
.text:0000000000002CC7                 mov     edx, r15d
.text:0000000000002CCA                 movsxd  rax, ds:(jpt_2CD1 - 6FE0h)[rcx+rdx*4]
.text:0000000000002CCE                 add     rax, rcx
.text:0000000000002CD1                 jmp     rax             ; switch jump
.text:0000000000002CD3 ; ---------------------------------------------------------------------------
.text:0000000000002CD3
.text:0000000000002CD3 loc_2CD3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CD3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002CD3                                         ; DATA XREF: ...
.text:0000000000002CD3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002CD8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CDD                 xor     r12d, r12d
.text:0000000000002CE0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CE9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002CEE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002CF3
.text:0000000000002CF3 loc_2CF3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002CF3                 lea     rax, asc_6F75   ; "'"
.text:0000000000002CFA                 mov     [rsp+0E8h+n], 1
.text:0000000000002D03                 xor     r15d, r15d
.text:0000000000002D06                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D0E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002D13
.text:0000000000002D13 loc_2D13:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002D13                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002D13                 xor     r11d, r11d
.text:0000000000002D16                 mov     rax, rbp
.text:0000000000002D19                 mov     r8d, r12d
.text:0000000000002D1C                 mov     rbp, r11
.text:0000000000002D1F                 mov     r11, rax
.text:0000000000002D22                 nop     word ptr [rax+rax+00h]
.text:0000000000002D28
.text:0000000000002D28 loc_2D28:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002D28                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002D28                 cmp     r11, rbp
.text:0000000000002D2B                 setnz   r12b
.text:0000000000002D2F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D33                 jnz     short loc_2D42
.text:0000000000002D35                 mov     rax, [rsp+0E8h+s]
.text:0000000000002D3A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002D3E                 setnz   r12b
.text:0000000000002D42
.text:0000000000002D42 loc_2D42:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002D42                 test    r12b, r12b
.text:0000000000002D45                 jz      loc_33A0
.text:0000000000002D4B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D50                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002D55                 lea     r9, [rdi+rbp]
.text:0000000000002D59                 setnz   al
.text:0000000000002D5C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002D60                 mov     r10d, eax
.text:0000000000002D63                 jz      loc_2E10
.text:0000000000002D69                 mov     rax, [rsp+0E8h+n]
.text:0000000000002D6E                 test    rax, rax
.text:0000000000002D71                 jz      loc_31A0
.text:0000000000002D77                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D7B                 lea     rbx, [rbp+rax+0]
.text:0000000000002D80                 jnz     short loc_2DB0
.text:0000000000002D82                 cmp     rax, 1
.text:0000000000002D86                 jbe     short loc_2DB0
.text:0000000000002D88                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002D8D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002D92                 mov     [rsp+0E8h+ps], r9
.text:0000000000002D97                 call    _strlen
.text:0000000000002D9C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002DA2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002DA8                 mov     r11, rax
.text:0000000000002DAB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002DB0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002DB0                 cmp     rbx, r11
.text:0000000000002DB3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002DB8                 ja      loc_3370
.text:0000000000002DBE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002DC3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002DC8                 mov     rdi, r9         ; s1
.text:0000000000002DCB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002DD0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002DD5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002DDA                 call    _memcmp
.text:0000000000002DDF                 test    eax, eax
.text:0000000000002DE1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002DE6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002DEC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002DF1                 jnz     loc_3370
.text:0000000000002DF7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DFC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002E02                 jnz     loc_3D85
.text:0000000000002E08                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002E10                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002E10                 movzx   ebx, byte ptr [r9]
.text:0000000000002E14                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002E17                 ja      def_2E2E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002E1D                 lea     rcx, jpt_2E2E
.text:0000000000002E24                 movzx   edx, bl
.text:0000000000002E27                 movsxd  rax, ds:(jpt_2E2E - 700Ch)[rcx+rdx*4]
.text:0000000000002E2B                 add     rax, rcx
.text:0000000000002E2E                 jmp     rax             ; switch jump
.text:0000000000002E30 ; ---------------------------------------------------------------------------
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002E30                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000002E30                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002E33
.text:0000000000002E33 loc_2E33:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E33                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000002E33                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002E37                 setnz   al
.text:0000000000002E3A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E3E                 jnz     short loc_2E4C
.text:0000000000002E40                 mov     rax, [rsp+0E8h+s]
.text:0000000000002E45                 cmp     byte ptr [rax+1], 0
.text:0000000000002E49                 setnz   al
.text:0000000000002E4C
.text:0000000000002E4C loc_2E4C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002E4C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E51                 setz    dl
.text:0000000000002E54                 test    al, al
.text:0000000000002E56                 jz      loc_30A8
.text:0000000000002E5C
.text:0000000000002E5C loc_2E5C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002E5C                 xor     r12d, r12d
.text:0000000000002E5F                 xor     eax, eax
.text:0000000000002E61                 nop     dword ptr [rax+00000000h]
.text:0000000000002E68
.text:0000000000002E68 loc_2E68:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002E68                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002E68                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002E6D                 jnz     loc_2F82
.text:0000000000002E73                 test    dl, dl
.text:0000000000002E75                 jnz     loc_2F82
.text:0000000000002E7B
.text:0000000000002E7B loc_2E7B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002E7B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002E80                 test    rsi, rsi
.text:0000000000002E83                 jz      short loc_2E99
.text:0000000000002E85                 mov     edx, ebx
.text:0000000000002E87                 shr     dl, 5
.text:0000000000002E8A                 movzx   edx, dl
.text:0000000000002E8D                 mov     edx, [rsi+rdx*4]
.text:0000000000002E90                 bt      edx, ebx
.text:0000000000002E93                 jb      loc_2FE3
.text:0000000000002E99
.text:0000000000002E99 loc_2E99:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002E99                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002E99                 test    r10b, r10b
.text:0000000000002E9C                 jnz     loc_2FE3
.text:0000000000002EA2                 xor     eax, 1
.text:0000000000002EA5                 add     rbp, 1
.text:0000000000002EA9                 and     eax, r8d
.text:0000000000002EAC
.text:0000000000002EAC loc_2EAC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002EAC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002EAC                 test    al, al
.text:0000000000002EAE                 jz      short loc_2ED0
.text:0000000000002EB0                 cmp     r13, r15
.text:0000000000002EB3                 jbe     short loc_2EBA
.text:0000000000002EB5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002EBA
.text:0000000000002EBA loc_2EBA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002EBA                 lea     rax, [r15+1]
.text:0000000000002EBE                 cmp     r13, rax
.text:0000000000002EC1                 jbe     short loc_2EC9
.text:0000000000002EC3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002EC9
.text:0000000000002EC9 loc_2EC9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002EC9                 add     r15, 2
.text:0000000000002ECD                 xor     r8d, r8d
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002ED0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002ED0                 cmp     r15, r13
.text:0000000000002ED3                 jnb     short loc_2ED9
.text:0000000000002ED5                 mov     [r14+r15], bl
.text:0000000000002ED9
.text:0000000000002ED9 loc_2ED9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002ED9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002EDE                 add     r15, 1
.text:0000000000002EE2                 mov     eax, 0
.text:0000000000002EE7                 test    r12b, r12b
.text:0000000000002EEA                 cmovz   edi, eax
.text:0000000000002EED                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002EF2                 jmp     loc_2D28
.text:0000000000002EF2 ; ---------------------------------------------------------------------------
.text:0000000000002EF7                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002F00                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000002F00                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002F03
.text:0000000000002F03 loc_2F03:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F03                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000002F03                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002F07                 cmp     eax, 2
.text:0000000000002F0A                 jz      loc_34C8
.text:0000000000002F10                 cmp     eax, 5
.text:0000000000002F13                 jz      loc_3488
.text:0000000000002F19                 cmp     eax, 2
.text:0000000000002F1C                 mov     ebx, 3Fh ; '?'
.text:0000000000002F21                 setz    dl
.text:0000000000002F24                 xor     r12d, r12d
.text:0000000000002F27                 xor     eax, eax
.text:0000000000002F29                 jmp     loc_2E68
.text:0000000000002F29 ; ---------------------------------------------------------------------------
.text:0000000000002F2E                 align 10h
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002F30                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000002F30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002F33
.text:0000000000002F33 loc_2F33:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F33                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000002F33                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002F38                 jz      loc_3440
.text:0000000000002F3E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002F43                 xor     edx, edx
.text:0000000000002F45                 xor     eax, eax
.text:0000000000002F47                 mov     ebx, 27h ; '''
.text:0000000000002F4C                 jmp     loc_2E68
.text:0000000000002F4C ; ---------------------------------------------------------------------------
.text:0000000000002F51                 align 8
.text:0000000000002F58
.text:0000000000002F58 loc_2F58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F58                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000002F58                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002F5D                 mov     ebx, 74h ; 't'
.text:0000000000002F62
.text:0000000000002F62 loc_2F62:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002F62                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002F62                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F67                 setz    al
.text:0000000000002F6A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002F6E                 jnz     loc_30BE
.text:0000000000002F74
.text:0000000000002F74 loc_2F74:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002F74                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002F74                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002F79                 jnz     short loc_2FE0
.text:0000000000002F7B
.text:0000000000002F7B loc_2F7B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002F7B                 mov     ebx, edx
.text:0000000000002F7D                 xor     r12d, r12d
.text:0000000000002F80                 xor     eax, eax
.text:0000000000002F82
.text:0000000000002F82 loc_2F82:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002F82                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002F82                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F87                 jnz     loc_2E7B
.text:0000000000002F8D                 jmp     loc_2E99
.text:0000000000002F8D ; ---------------------------------------------------------------------------
.text:0000000000002F92                 align 8
.text:0000000000002F98
.text:0000000000002F98 loc_2F98:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F98                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000002F98                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002F9D                 mov     ebx, 62h ; 'b'
.text:0000000000002FA2                 jmp     short loc_2F74
.text:0000000000002FA2 ; ---------------------------------------------------------------------------
.text:0000000000002FA4                 align 8
.text:0000000000002FA8
.text:0000000000002FA8 loc_2FA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002FA8                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000002FA8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002FAD                 jz      loc_3380
.text:0000000000002FB3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002FB8                 jz      loc_31D0
.text:0000000000002FBE
.text:0000000000002FBE loc_2FBE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002FBE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FC3                 jz      loc_31D0
.text:0000000000002FC9                 cmp     [rsp+0E8h+n], 0
.text:0000000000002FCF                 jnz     loc_338B
.text:0000000000002FD5                 mov     ebx, 5Ch ; '\'
.text:0000000000002FDA                 nop     word ptr [rax+rax+00h]
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002FE0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002FE0                 xor     r12d, r12d
.text:0000000000002FE3
.text:0000000000002FE3 loc_2FE3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002FE3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002FE3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FE8                 setz    dl
.text:0000000000002FEB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FF0                 mov     eax, edx
.text:0000000000002FF2                 jnz     loc_3848
.text:0000000000002FF8                 mov     eax, r8d
.text:0000000000002FFB                 xor     eax, 1
.text:0000000000002FFE                 and     al, dl
.text:0000000000003000                 jz      short loc_3031
.text:0000000000003002                 cmp     r13, r15
.text:0000000000003005                 jbe     short loc_300C
.text:0000000000003007                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000300C
.text:000000000000300C loc_300C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000300C                 lea     rdx, [r15+1]
.text:0000000000003010                 cmp     r13, rdx
.text:0000000000003013                 jbe     short loc_301B
.text:0000000000003015                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000301B
.text:000000000000301B loc_301B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000301B                 lea     rdx, [r15+2]
.text:000000000000301F                 cmp     r13, rdx
.text:0000000000003022                 jbe     short loc_302A
.text:0000000000003024                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000302A
.text:000000000000302A loc_302A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000302A                 add     r15, 3
.text:000000000000302E                 mov     r8d, eax
.text:0000000000003031
.text:0000000000003031 loc_3031:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003031                 cmp     r13, r15
.text:0000000000003034                 jbe     short loc_303B
.text:0000000000003036                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000303B
.text:000000000000303B loc_303B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000303B                 add     r15, 1
.text:000000000000303F                 add     rbp, 1
.text:0000000000003043                 jmp     loc_2ED0
.text:0000000000003043 ; ---------------------------------------------------------------------------
.text:0000000000003048                 align 10h
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003050                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000003050                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003055                 jnz     loc_3223
.text:000000000000305B                 xor     edx, edx
.text:000000000000305D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003062                 jz      loc_2F7B
.text:0000000000003068                 add     rbp, 1
.text:000000000000306C                 jmp     loc_2D28
.text:000000000000306C ; ---------------------------------------------------------------------------
.text:0000000000003071                 align 8
.text:0000000000003078
.text:0000000000003078 loc_3078:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003078                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000003078                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000307D                 setz    dl
.text:0000000000003080                 xor     eax, eax
.text:0000000000003082                 jmp     loc_2E68
.text:0000000000003082 ; ---------------------------------------------------------------------------
.text:0000000000003087                 align 10h
.text:0000000000003090
.text:0000000000003090 loc_3090:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003090                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000003090                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003095                 mov     ebx, 61h ; 'a'
.text:000000000000309A                 jmp     loc_2F74
.text:000000000000309A ; ---------------------------------------------------------------------------
.text:000000000000309F                 align 20h
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030A0                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:00000000000030A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000030A5                 setz    dl
.text:00000000000030A8
.text:00000000000030A8 loc_30A8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000030A8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000030A8                 test    rbp, rbp
.text:00000000000030AB                 jnz     loc_2E5C
.text:00000000000030B1
.text:00000000000030B1 loc_30B1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000030B1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000030B1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000030B6                 and     al, dl
.text:00000000000030B8                 jz      loc_2E68
.text:00000000000030BE
.text:00000000000030BE loc_30BE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000030BE                 mov     rbp, r11
.text:00000000000030C1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000030C9                 jmp     loc_37C9
.text:00000000000030C9 ; ---------------------------------------------------------------------------
.text:00000000000030CE                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030D0                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:00000000000030D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000030D5                 setz    dl
.text:00000000000030D8                 xor     r12d, r12d
.text:00000000000030DB                 jmp     short loc_30B1
.text:00000000000030DB ; ---------------------------------------------------------------------------
.text:00000000000030DD                 align 20h
.text:00000000000030E0
.text:00000000000030E0 loc_30E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030E0                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:00000000000030E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000030E5                 mov     ebx, 20h ; ' '
.text:00000000000030EA                 setz    dl
.text:00000000000030ED                 jmp     short loc_30B1
.text:00000000000030ED ; ---------------------------------------------------------------------------
.text:00000000000030EF                 align 10h
.text:00000000000030F0
.text:00000000000030F0 loc_30F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030F0                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:00000000000030F0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000030F5                 mov     ebx, 72h ; 'r'
.text:00000000000030FA                 jmp     loc_2F62
.text:00000000000030FA ; ---------------------------------------------------------------------------
.text:00000000000030FF                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003100                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000003100                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003105                 mov     ebx, 66h ; 'f'
.text:000000000000310A                 jmp     loc_2F74
.text:000000000000310A ; ---------------------------------------------------------------------------
.text:000000000000310F                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003110                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000003110                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003115                 mov     ebx, 76h ; 'v'
.text:000000000000311A                 jmp     loc_2F74
.text:000000000000311A ; ---------------------------------------------------------------------------
.text:000000000000311F                 align 20h
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003120                                         ; DATA XREF: .rodata:jpt_2E2E↓o
.text:0000000000003120                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003125                 mov     ebx, 6Eh ; 'n'
.text:000000000000312A                 jmp     loc_2F62
.text:000000000000312A ; ---------------------------------------------------------------------------
.text:000000000000312F                 align 10h
.text:0000000000003130
.text:0000000000003130 def_31BA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003130                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003130                                         ; DATA XREF: ...
.text:0000000000003130                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003133                 nop     dword ptr [rax+rax+00h]
.text:0000000000003138
.text:0000000000003138 def_2E2E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003138                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003138                                         ; DATA XREF: ...
.text:0000000000003138                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000313E                 jnz     loc_34E8
.text:0000000000003144                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003149                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000314E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003153                 call    ___ctype_b_loc
.text:0000000000003158                 mov     rcx, [rax]
.text:000000000000315B                 movzx   edx, bl
.text:000000000000315E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003164                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000316A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000316F                 mov     edi, 1
.text:0000000000003174                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003178                 and     ax, 4000h
.text:000000000000317C                 setnz   r12b
.text:0000000000003180                 setz    al
.text:0000000000003183                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003187
.text:0000000000003187 loc_3187:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003187                 test    al, al
.text:0000000000003189                 jnz     loc_3B21
.text:000000000000318F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003194                 setz    dl
.text:0000000000003197                 jmp     loc_2E68
.text:0000000000003197 ; ---------------------------------------------------------------------------
.text:000000000000319C                 align 20h
.text:00000000000031A0
.text:00000000000031A0 loc_31A0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000031A0                 movzx   ebx, byte ptr [r9]
.text:00000000000031A4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000031A7                 ja      short def_31BA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000031A9                 lea     rcx, jpt_31BA
.text:00000000000031B0                 movzx   edx, bl
.text:00000000000031B3                 movsxd  rax, ds:(jpt_31BA - 7208h)[rcx+rdx*4]
.text:00000000000031B7                 add     rax, rcx
.text:00000000000031BA                 jmp     rax             ; switch jump
.text:00000000000031BA ; ---------------------------------------------------------------------------
.text:00000000000031BC                 align 20h
.text:00000000000031C0
.text:00000000000031C0 loc_31C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031C0                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:00000000000031C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000031C3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000031C8                 jnz     loc_2FBE
.text:00000000000031CE                 xchg    ax, ax
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000031D0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000031D0                 mov     edx, 5Ch ; '\'
.text:00000000000031D5                 mov     ebx, 5Ch ; '\'
.text:00000000000031DA                 jmp     loc_2F74
.text:00000000000031DA ; ---------------------------------------------------------------------------
.text:00000000000031DF                 align 20h
.text:00000000000031E0
.text:00000000000031E0 loc_31E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031E0                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:00000000000031E0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000031E5                 xor     r10d, r10d
.text:00000000000031E8                 mov     ebx, 66h ; 'f'
.text:00000000000031ED                 jmp     loc_2F74
.text:00000000000031ED ; ---------------------------------------------------------------------------
.text:00000000000031F2                 align 8
.text:00000000000031F8
.text:00000000000031F8 loc_31F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031F8                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:00000000000031F8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000031FD                 xor     r10d, r10d
.text:0000000000003200                 mov     ebx, 6Eh ; 'n'
.text:0000000000003205                 jmp     loc_2F62
.text:0000000000003205 ; ---------------------------------------------------------------------------
.text:000000000000320A                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003210                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000003210                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003215                 jmp     loc_2FE0
.text:0000000000003215 ; ---------------------------------------------------------------------------
.text:000000000000321A                 align 20h
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003220                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000003220                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003223
.text:0000000000003223 loc_3223:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003223                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003228                 setz    dl
.text:000000000000322B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003230                 jnz     loc_3DCA
.text:0000000000003236                 mov     eax, r8d
.text:0000000000003239                 mov     rcx, r15
.text:000000000000323C                 xor     eax, 1
.text:000000000000323F                 and     al, dl
.text:0000000000003241                 jz      short loc_3270
.text:0000000000003243                 cmp     r13, r15
.text:0000000000003246                 jbe     short loc_324D
.text:0000000000003248                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000324D
.text:000000000000324D loc_324D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000324D                 lea     rcx, [r15+1]
.text:0000000000003251                 cmp     r13, rcx
.text:0000000000003254                 jbe     short loc_325C
.text:0000000000003256                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000325C
.text:000000000000325C loc_325C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000325C                 lea     rcx, [r15+2]
.text:0000000000003260                 cmp     r13, rcx
.text:0000000000003263                 ja      loc_3899
.text:0000000000003269
.text:0000000000003269 loc_3269:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003269                 lea     rcx, [r15+3]
.text:000000000000326D                 mov     r8d, eax
.text:0000000000003270
.text:0000000000003270 loc_3270:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003270                 cmp     r13, rcx
.text:0000000000003273                 jbe     short loc_327A
.text:0000000000003275                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000327A
.text:000000000000327A loc_327A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000327A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000327F                 lea     r15, [rcx+1]
.text:0000000000003283                 jz      loc_3889
.text:0000000000003289                 lea     rax, [rbp+1]
.text:000000000000328D                 cmp     rax, r11
.text:0000000000003290                 jnb     short loc_32AB
.text:0000000000003292                 mov     rax, [rsp+0E8h+s]
.text:0000000000003297                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000329C                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000032A0                 sub     eax, 30h ; '0'
.text:00000000000032A3                 cmp     al, 9
.text:00000000000032A5                 jbe     loc_3AD9
.text:00000000000032AB
.text:00000000000032AB loc_32AB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000032AB                 mov     eax, r12d
.text:00000000000032AE                 mov     ebx, 30h ; '0'
.text:00000000000032B3                 xor     r12d, r12d
.text:00000000000032B6                 jmp     loc_2E68
.text:00000000000032B6 ; ---------------------------------------------------------------------------
.text:00000000000032BB                 align 20h
.text:00000000000032C0
.text:00000000000032C0 loc_32C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032C0                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:00000000000032C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000032C5                 mov     r12d, r10d
.text:00000000000032C8                 setz    dl
.text:00000000000032CB                 xor     r10d, r10d
.text:00000000000032CE                 xor     eax, eax
.text:00000000000032D0                 jmp     loc_2E68
.text:00000000000032D0 ; ---------------------------------------------------------------------------
.text:00000000000032D5                 align 8
.text:00000000000032D8
.text:00000000000032D8 loc_32D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032D8                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:00000000000032D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000032DD                 setz    dl
.text:00000000000032E0                 xor     r10d, r10d
.text:00000000000032E3                 jmp     loc_30A8
.text:00000000000032E3 ; ---------------------------------------------------------------------------
.text:00000000000032E8                 align 10h
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032F0                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:00000000000032F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000032F5                 setz    dl
.text:00000000000032F8                 xor     r10d, r10d
.text:00000000000032FB                 xor     r12d, r12d
.text:00000000000032FE                 jmp     loc_30B1
.text:00000000000032FE ; ---------------------------------------------------------------------------
.text:0000000000003303                 align 8
.text:0000000000003308
.text:0000000000003308 loc_3308:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003308                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000003308                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000330D                 mov     r12d, r10d
.text:0000000000003310                 mov     ebx, 20h ; ' '
.text:0000000000003315                 setz    dl
.text:0000000000003318                 xor     r10d, r10d
.text:000000000000331B                 jmp     loc_30B1
.text:0000000000003320 ; ---------------------------------------------------------------------------
.text:0000000000003320
.text:0000000000003320 loc_3320:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003320                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000003320                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003325                 xor     r10d, r10d
.text:0000000000003328                 mov     ebx, 72h ; 'r'
.text:000000000000332D                 jmp     loc_2F62
.text:000000000000332D ; ---------------------------------------------------------------------------
.text:0000000000003332                 align 8
.text:0000000000003338
.text:0000000000003338 loc_3338:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003338                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000003338                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000333D                 jmp     loc_2FE0
.text:000000000000333D ; ---------------------------------------------------------------------------
.text:0000000000003342                 align 8
.text:0000000000003348
.text:0000000000003348 loc_3348:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003348                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000003348                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000334D                 xor     r10d, r10d
.text:0000000000003350                 mov     ebx, 74h ; 't'
.text:0000000000003355                 jmp     loc_2F62
.text:0000000000003355 ; ---------------------------------------------------------------------------
.text:000000000000335A                 align 20h
.text:0000000000003360
.text:0000000000003360 loc_3360:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003360                                         ; DATA XREF: .rodata:jpt_31BA↓o
.text:0000000000003360                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003365                 jmp     loc_2FE0
.text:0000000000003365 ; ---------------------------------------------------------------------------
.text:000000000000336A                 align 10h
.text:0000000000003370
.text:0000000000003370 loc_3370:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003370                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003370                 xor     r10d, r10d
.text:0000000000003373                 jmp     loc_2E10
.text:0000000000003373 ; ---------------------------------------------------------------------------
.text:0000000000003378                 align 20h
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003380                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003385                 jnz     loc_3CF0
.text:000000000000338B
.text:000000000000338B loc_338B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000338B                 add     rbp, 1
.text:000000000000338F                 mov     eax, r8d
.text:0000000000003392                 xor     r12d, r12d
.text:0000000000003395                 mov     ebx, 5Ch ; '\'
.text:000000000000339A                 jmp     loc_2EAC
.text:000000000000339A ; ---------------------------------------------------------------------------
.text:000000000000339F                 align 20h
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000033A0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000033A5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000033AA                 mov     r12d, r8d
.text:00000000000033AD                 mov     rbp, r11
.text:00000000000033B0                 setz    dl
.text:00000000000033B3                 mov     eax, ebx
.text:00000000000033B5                 test    r15, r15
.text:00000000000033B8                 setz    cl
.text:00000000000033BB                 and     eax, edx
.text:00000000000033BD                 and     al, cl
.text:00000000000033BF                 jnz     loc_3E26
.text:00000000000033C5                 mov     eax, ebx
.text:00000000000033C7                 xor     eax, 1
.text:00000000000033CA                 and     dl, al
.text:00000000000033CC                 jz      loc_3D3C
.text:00000000000033D2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000033D7                 jz      loc_3D3A
.text:00000000000033DD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000033E2                 jnz     loc_3DDD
.text:00000000000033E8                 test    r13, r13
.text:00000000000033EB                 setz    al
.text:00000000000033EE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000033F4                 setnz   dl
.text:00000000000033F7                 and     al, dl
.text:00000000000033F9                 jz      loc_3E1C
.text:00000000000033FF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003404
.text:0000000000003404 loc_3404:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003404                 lea     rbx, asc_6F75   ; "'"
.text:000000000000340B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000340F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003417                 mov     r15d, 1
.text:000000000000341D                 mov     [rsp+0E8h+n], 1
.text:0000000000003426                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000342B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003430                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003434                 jmp     loc_2D13
.text:0000000000003434 ; ---------------------------------------------------------------------------
.text:0000000000003439                 align 20h
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003440                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003445                 jnz     loc_3CF0
.text:000000000000344B                 test    r13, r13
.text:000000000000344E                 jz      loc_3850
.text:0000000000003454                 xor     edx, edx
.text:0000000000003456                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000345C                 jnz     loc_3850
.text:0000000000003462
.text:0000000000003462 loc_3462:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003462                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003462                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003467                 add     r15, 3
.text:000000000000346B                 xor     eax, eax
.text:000000000000346D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003472                 xor     r8d, r8d
.text:0000000000003475                 mov     r13, rdx
.text:0000000000003478                 mov     ebx, 27h ; '''
.text:000000000000347D                 jmp     loc_2E99
.text:000000000000347D ; ---------------------------------------------------------------------------
.text:0000000000003482                 align 8
.text:0000000000003488
.text:0000000000003488 loc_3488:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003488                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000348D                 jz      short loc_34B0
.text:000000000000348F                 lea     rcx, [rbp+2]
.text:0000000000003493                 cmp     rcx, r11
.text:0000000000003496                 jnb     short loc_34B0
.text:0000000000003498                 mov     rax, [rsp+0E8h+s]
.text:000000000000349D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000034A2                 jz      loc_3C32
.text:00000000000034A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000034B0
.text:00000000000034B0 loc_34B0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000034B0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000034B0                 xor     edx, edx
.text:00000000000034B2                 xor     r12d, r12d
.text:00000000000034B5                 xor     eax, eax
.text:00000000000034B7                 mov     ebx, 3Fh ; '?'
.text:00000000000034BC                 jmp     loc_2E68
.text:00000000000034BC ; ---------------------------------------------------------------------------
.text:00000000000034C1                 align 8
.text:00000000000034C8
.text:00000000000034C8 loc_34C8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000034C8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034CD                 jnz     loc_3CF0
.text:00000000000034D3                 xor     r12d, r12d
.text:00000000000034D6                 xor     eax, eax
.text:00000000000034D8                 mov     ebx, 3Fh ; '?'
.text:00000000000034DD                 jmp     loc_2E99
.text:00000000000034DD ; ---------------------------------------------------------------------------
.text:00000000000034E2                 align 8
.text:00000000000034E8
.text:00000000000034E8 loc_34E8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000034E8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000034F0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000034F4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003500                 mov     [rsp+0E8h+ps], rax
.text:0000000000003505                 jnz     short loc_3534
.text:0000000000003507                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000350C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003511                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003516                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000351B                 call    _strlen
.text:0000000000003520                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003526                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000352C                 mov     r11, rax
.text:000000000000352F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003534
.text:0000000000003534 loc_3534:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003534                 lea     rax, [rsp+0E8h+wc]
.text:000000000000353C                 xor     ecx, ecx
.text:000000000000353E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003542                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003547                 mov     rbx, rcx
.text:000000000000354A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003552                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003557                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000355C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003564                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003569                 mov     [rsp+0E8h+var_78], r13
.text:000000000000356E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003573
.text:0000000000003573 loc_3573:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003573                 mov     rax, [rsp+0E8h+s]
.text:0000000000003578                 lea     r14, [rbp+rbx+0]
.text:000000000000357D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003582                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003587                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000358C                 lea     r13, [rax+r14]
.text:0000000000003590                 sub     rdx, r14
.text:0000000000003593                 mov     rsi, r13
.text:0000000000003596                 call    rpl_mbrtowc
.text:000000000000359B                 test    rax, rax
.text:000000000000359E                 mov     r15, rax
.text:00000000000035A1                 jz      short loc_35F1
.text:00000000000035A3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000035A7                 jz      loc_3BC5
.text:00000000000035AD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000035B1                 jz      loc_3B51
.text:00000000000035B7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000035BC                 setz    al
.text:00000000000035BF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000035C3                 jnz     loc_3760
.text:00000000000035C9
.text:00000000000035C9 loc_35C9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000035C9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000035C9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000035D0                 call    _iswprint
.text:00000000000035D5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000035DA                 test    eax, eax
.text:00000000000035DC                 mov     eax, 0
.text:00000000000035E1                 cmovz   r12d, eax
.text:00000000000035E5                 add     rbx, r15
.text:00000000000035E8                 call    _mbsinit
.text:00000000000035ED                 test    eax, eax
.text:00000000000035EF                 jz      short loc_3573
.text:00000000000035F1
.text:00000000000035F1 loc_35F1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000035F1                 mov     edx, r12d
.text:00000000000035F4                 mov     rdi, rbx
.text:00000000000035F7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000035FD                 xor     edx, 1
.text:0000000000003600                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003605                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000360B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000360F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003617                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000361C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003621                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003626
.text:0000000000003626 loc_3626:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003626                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003626                 cmp     rdi, 1
.text:000000000000362A                 jbe     loc_3C2B
.text:0000000000003630
.text:0000000000003630 loc_3630:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003630                 mov     rcx, rdi
.text:0000000000003633                 xor     esi, esi
.text:0000000000003635                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000363B                 add     rcx, rbp
.text:000000000000363E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003643                 jmp     loc_36FE
.text:0000000000003643 ; ---------------------------------------------------------------------------
.text:0000000000003648                 align 10h
.text:0000000000003650
.text:0000000000003650 loc_3650:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003650                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003655                 setz    al
.text:0000000000003658                 test    r9b, r9b
.text:000000000000365B                 jnz     loc_3B10
.text:0000000000003661                 mov     esi, r8d
.text:0000000000003664                 xor     esi, 1
.text:0000000000003667                 and     al, sil
.text:000000000000366A                 jz      short loc_369B
.text:000000000000366C                 cmp     r13, r15
.text:000000000000366F                 jbe     short loc_3676
.text:0000000000003671                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003676
.text:0000000000003676 loc_3676:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003676                 lea     rsi, [r15+1]
.text:000000000000367A                 cmp     r13, rsi
.text:000000000000367D                 jbe     short loc_3685
.text:000000000000367F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003685
.text:0000000000003685 loc_3685:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003685                 lea     rsi, [r15+2]
.text:0000000000003689                 cmp     r13, rsi
.text:000000000000368C                 jbe     short loc_3694
.text:000000000000368E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003694
.text:0000000000003694 loc_3694:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003694                 add     r15, 3
.text:0000000000003698                 mov     r8d, eax
.text:000000000000369B
.text:000000000000369B loc_369B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000369B                 cmp     r13, r15
.text:000000000000369E                 jbe     short loc_36A5
.text:00000000000036A0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000036A5
.text:00000000000036A5 loc_36A5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000036A5                 lea     rax, [r15+1]
.text:00000000000036A9                 cmp     r13, rax
.text:00000000000036AC                 jbe     short loc_36BB
.text:00000000000036AE                 mov     eax, ebx
.text:00000000000036B0                 shr     al, 6
.text:00000000000036B3                 add     eax, 30h ; '0'
.text:00000000000036B6                 mov     [r14+r15+1], al
.text:00000000000036BB
.text:00000000000036BB loc_36BB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000036BB                 lea     rax, [r15+2]
.text:00000000000036BF                 cmp     r13, rax
.text:00000000000036C2                 jbe     short loc_36D4
.text:00000000000036C4                 mov     eax, ebx
.text:00000000000036C6                 shr     al, 3
.text:00000000000036C9                 and     eax, 7
.text:00000000000036CC                 add     eax, 30h ; '0'
.text:00000000000036CF                 mov     [r14+r15+2], al
.text:00000000000036D4
.text:00000000000036D4 loc_36D4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000036D4                 and     ebx, 7
.text:00000000000036D7                 add     rbp, 1
.text:00000000000036DB                 add     r15, 3
.text:00000000000036DF                 add     ebx, 30h ; '0'
.text:00000000000036E2                 cmp     rbp, rcx
.text:00000000000036E5                 jnb     loc_2ED0
.text:00000000000036EB                 mov     esi, edx
.text:00000000000036ED
.text:00000000000036ED loc_36ED:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000036ED                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000036ED                 cmp     r13, r15
.text:00000000000036F0                 jbe     short loc_36F6
.text:00000000000036F2                 mov     [r14+r15], bl
.text:00000000000036F6
.text:00000000000036F6 loc_36F6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000036F6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000036FA                 add     r15, 1
.text:00000000000036FE
.text:00000000000036FE loc_36FE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000036FE                 test    dl, dl
.text:0000000000003700                 jnz     loc_3650
.text:0000000000003706                 mov     eax, esi
.text:0000000000003708                 xor     eax, 1
.text:000000000000370B                 and     eax, r8d
.text:000000000000370E                 test    r10b, r10b
.text:0000000000003711                 jz      short loc_3721
.text:0000000000003713                 cmp     r13, r15
.text:0000000000003716                 jbe     short loc_371D
.text:0000000000003718                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000371D
.text:000000000000371D loc_371D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000371D                 add     r15, 1
.text:0000000000003721
.text:0000000000003721 loc_3721:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003721                 add     rbp, 1
.text:0000000000003725                 cmp     rbp, rcx
.text:0000000000003728                 jnb     loc_2EAC
.text:000000000000372E                 test    al, al
.text:0000000000003730                 jz      loc_3B2E
.text:0000000000003736                 cmp     r13, r15
.text:0000000000003739                 jbe     short loc_3740
.text:000000000000373B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003740
.text:0000000000003740 loc_3740:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003740                 lea     rax, [r15+1]
.text:0000000000003744                 cmp     r13, rax
.text:0000000000003747                 jbe     short loc_374F
.text:0000000000003749                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000374F
.text:000000000000374F loc_374F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000374F                 add     r15, 2
.text:0000000000003753                 xor     r10d, r10d
.text:0000000000003756                 xor     r8d, r8d
.text:0000000000003759                 jmp     short loc_36ED
.text:0000000000003759 ; ---------------------------------------------------------------------------
.text:000000000000375B                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003760                 cmp     r15, 1
.text:0000000000003764                 jz      loc_35C9
.text:000000000000376A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000376F                 lea     rcx, [rdi+r15]
.text:0000000000003773                 lea     rdx, [rdi+r14+1]
.text:0000000000003778                 lea     r8, [rcx+r14]
.text:000000000000377C                 jmp     short loc_378D
.text:000000000000377C ; ---------------------------------------------------------------------------
.text:000000000000377E                 align 20h
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003780                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003780                 add     rdx, 1
.text:0000000000003784                 cmp     r8, rdx
.text:0000000000003787                 jz      loc_35C9
.text:000000000000378D
.text:000000000000378D loc_378D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000378D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003790                 sub     ecx, 5Bh ; '['
.text:0000000000003793                 cmp     cl, 21h ; '!'
.text:0000000000003796                 ja      short loc_3780
.text:0000000000003798                 mov     esi, 1
.text:000000000000379D                 shl     rsi, cl
.text:00000000000037A0                 mov     rcx, rsi
.text:00000000000037A3                 mov     rsi, 20000002Bh
.text:00000000000037AD                 test    rcx, rsi
.text:00000000000037B0                 jz      short loc_3780
.text:00000000000037B2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000037B7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037BC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000037C1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000037C9
.text:00000000000037C9 loc_37C9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000037C9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000037C9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000037CE                 jz      short loc_37E0
.text:00000000000037D0                 test    al, al
.text:00000000000037D2                 mov     eax, 4
.text:00000000000037D7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000037DC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000037E0
.text:00000000000037E0 loc_37E0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000037E0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000037E0                 sub     rsp, 8
.text:00000000000037E4                 mov     rcx, rbp
.text:00000000000037E7                 mov     rsi, r13
.text:00000000000037EA                 push    [rsp+0F0h+var_88]
.text:00000000000037EE                 push    [rsp+0F8h+var_80]
.text:00000000000037F2                 mov     rdi, r14
.text:00000000000037F5                 push    0
.text:00000000000037F7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000037FF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003804                 mov     rdx, [rsp+108h+s]
.text:0000000000003809                 and     r9d, 0FFFFFFFDh
.text:000000000000380D                 call    quotearg_buffer_restyled
.text:0000000000003812                 add     rsp, 20h
.text:0000000000003816                 mov     r15, rax
.text:0000000000003819
.text:0000000000003819 loc_3819:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003819                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003819                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003821                 xor     rbx, fs:28h
.text:000000000000382A                 mov     rax, r15
.text:000000000000382D                 jnz     loc_3E33
.text:0000000000003833                 add     rsp, 0B8h
.text:000000000000383A                 pop     rbx
.text:000000000000383B                 pop     rbp
.text:000000000000383C                 pop     r12
.text:000000000000383E                 pop     r13
.text:0000000000003840                 pop     r14
.text:0000000000003842                 pop     r15
.text:0000000000003844                 retn
.text:0000000000003844 ; ---------------------------------------------------------------------------
.text:0000000000003845                 align 8
.text:0000000000003848
.text:0000000000003848 loc_3848:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003848                 mov     rbp, r11
.text:000000000000384B                 jmp     loc_37C9
.text:0000000000003850 ; ---------------------------------------------------------------------------
.text:0000000000003850
.text:0000000000003850 loc_3850:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003850                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003850                 cmp     r13, r15
.text:0000000000003853                 jbe     short loc_385A
.text:0000000000003855                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000385A
.text:000000000000385A loc_385A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000385A                 lea     rax, [r15+1]
.text:000000000000385E                 cmp     r13, rax
.text:0000000000003861                 jbe     short loc_3869
.text:0000000000003863                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003869
.text:0000000000003869 loc_3869:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003869                 lea     rax, [r15+2]
.text:000000000000386D                 cmp     r13, rax
.text:0000000000003870                 jbe     loc_3E62
.text:0000000000003876                 mov     rdx, r13
.text:0000000000003879                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000387F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003884                 jmp     loc_3462
.text:0000000000003889 ; ---------------------------------------------------------------------------
.text:0000000000003889
.text:0000000000003889 loc_3889:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003889                 mov     eax, r12d
.text:000000000000388C                 mov     ebx, 30h ; '0'
.text:0000000000003891                 xor     r12d, r12d
.text:0000000000003894                 jmp     loc_2E99
.text:0000000000003899 ; ---------------------------------------------------------------------------
.text:0000000000003899
.text:0000000000003899 loc_3899:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003899                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000389F                 jmp     loc_3269
.text:00000000000038A4 ; ---------------------------------------------------------------------------
.text:00000000000038A4
.text:00000000000038A4 loc_38A4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000038A4                                         ; DATA XREF: .rodata:jpt_2CD1↓o
.text:00000000000038A4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000038A6                 jnz     loc_2CD3        ; jumptable 00000000000121F1 case 1
.text:00000000000038AC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000038B1
.text:00000000000038B1 loc_38B1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000038B1                 test    r13, r13
.text:00000000000038B4                 jnz     loc_3E4A
.text:00000000000038BA                 lea     rax, asc_6F75   ; "'"
.text:00000000000038C1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038CA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038CF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038D4                 xor     r12d, r12d
.text:00000000000038D7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000038DC                 mov     [rsp+0E8h+n], 1
.text:00000000000038E5                 mov     [rsp+0E8h+s2], rax
.text:00000000000038EA                 mov     r15d, 1
.text:00000000000038F0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000038F8                 jmp     loc_2D13
.text:00000000000038F8 ; ---------------------------------------------------------------------------
.text:00000000000038FD                 align 20h
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003900                                         ; DATA XREF: .rodata:jpt_2CD1↓o
.text:0000000000003900                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003902                 jnz     loc_3CFD
.text:0000000000003908                 test    r13, r13
.text:000000000000390B                 jz      loc_3B36
.text:0000000000003911                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003915                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000391A                 xor     r12d, r12d
.text:000000000000391D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003922                 mov     [rsp+0E8h+var_98], 0
.text:000000000000392B
.text:000000000000392B loc_392B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000392B                 lea     rax, unk_6F73
.text:0000000000003932                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003937                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000393C                 mov     [rsp+0E8h+n], 1
.text:0000000000003945                 mov     r15d, 1
.text:000000000000394B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003950                 jmp     loc_2D13
.text:0000000000003955 ; ---------------------------------------------------------------------------
.text:0000000000003955
.text:0000000000003955 loc_3955:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003955                                         ; DATA XREF: .rodata:jpt_2CD1↓o
.text:0000000000003955                 lea     rax, unk_6F73   ; jumptable 00000000000121F1 case 6
.text:000000000000395C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003961                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003966                 xor     r12d, r12d
.text:0000000000003969                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003972                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003977                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000397C                 mov     [rsp+0E8h+n], 1
.text:0000000000003985                 xor     r15d, r15d
.text:0000000000003988                 mov     [rsp+0E8h+s2], rax
.text:000000000000398D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003995                 jmp     loc_2D13
.text:000000000000399A ; ---------------------------------------------------------------------------
.text:000000000000399A
.text:000000000000399A loc_399A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000399A                                         ; DATA XREF: .rodata:jpt_2CD1↓o
.text:000000000000399A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000399F                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000039A4                 xor     r12d, r12d
.text:00000000000039A7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000039B0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000039B5                 xor     r15d, r15d
.text:00000000000039B8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000039BD                 mov     [rsp+0E8h+n], 0
.text:00000000000039C6                 mov     [rsp+0E8h+s2], 0
.text:00000000000039CF                 jmp     loc_2D13
.text:00000000000039D4 ; ---------------------------------------------------------------------------
.text:00000000000039D4
.text:00000000000039D4 loc_39D4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000039D4                                         ; DATA XREF: .rodata:jpt_2CD1↓o
.text:00000000000039D4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000039D9                 jz      short loc_3A31
.text:00000000000039DB                 lea     rsi, asc_6F77   ; "`"
.text:00000000000039E2                 xor     edi, edi        ; domainname
.text:00000000000039E4                 mov     edx, 5          ; category
.text:00000000000039E9                 call    _dcgettext
.text:00000000000039EE                 mov     rcx, rax
.text:00000000000039F1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000039F6                 lea     rax, asc_6F77   ; "`"
.text:00000000000039FD                 cmp     rcx, rax
.text:0000000000003A00                 jz      loc_3D9E
.text:0000000000003A06
.text:0000000000003A06 loc_3A06:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003A06                 lea     rsi, asc_6F75   ; "'"
.text:0000000000003A0D                 xor     edi, edi        ; domainname
.text:0000000000003A0F                 mov     edx, 5          ; category
.text:0000000000003A14                 call    _dcgettext
.text:0000000000003A19                 mov     rcx, rax
.text:0000000000003A1C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003A21                 lea     rax, asc_6F75   ; "'"
.text:0000000000003A28                 cmp     rcx, rax
.text:0000000000003A2B                 jz      loc_3DB4
.text:0000000000003A31
.text:0000000000003A31 loc_3A31:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003A31                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003A31                 xor     r15d, r15d
.text:0000000000003A34                 test    ebx, ebx
.text:0000000000003A36                 jz      loc_3BFD
.text:0000000000003A3C
.text:0000000000003A3C loc_3A3C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003A3C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003A3C                 test    ebx, ebx
.text:0000000000003A3E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003A43                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003A48                 xor     r12d, r12d
.text:0000000000003A4B                 mov     rdi, rbx        ; s
.text:0000000000003A4E                 call    _strlen
.text:0000000000003A53                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003A58                 mov     [rsp+0E8h+n], rax
.text:0000000000003A5D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A62                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A67                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A70                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003A75                 jmp     loc_2D13
.text:0000000000003A7A ; ---------------------------------------------------------------------------
.text:0000000000003A7A
.text:0000000000003A7A loc_3A7A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A7A                                         ; DATA XREF: .rodata:jpt_2CD1↓o
.text:0000000000003A7A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003A7F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A84                 xor     r12d, r12d
.text:0000000000003A87                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A90                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003A95                 xor     r15d, r15d
.text:0000000000003A98                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003A9D                 mov     [rsp+0E8h+n], 0
.text:0000000000003AA6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003AAF                 jmp     loc_2D13
.text:0000000000003AB4 ; ---------------------------------------------------------------------------
.text:0000000000003AB4
.text:0000000000003AB4 loc_3AB4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003AB4                                         ; DATA XREF: .rodata:jpt_2CD1↓o
.text:0000000000003AB4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003AB9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003ABE                 xor     r12d, r12d
.text:0000000000003AC1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003ACA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003ACF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003AD4                 jmp     loc_2CF3
.text:0000000000003AD9 ; ---------------------------------------------------------------------------
.text:0000000000003AD9
.text:0000000000003AD9 loc_3AD9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003AD9                 cmp     r13, r15
.text:0000000000003ADC                 jbe     short loc_3AE3
.text:0000000000003ADE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003AE3
.text:0000000000003AE3 loc_3AE3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003AE3                 lea     rax, [rcx+2]
.text:0000000000003AE7                 cmp     r13, rax
.text:0000000000003AEA                 jbe     short loc_3AF2
.text:0000000000003AEC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003AF2
.text:0000000000003AF2 loc_3AF2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003AF2                 mov     eax, r12d
.text:0000000000003AF5                 lea     r15, [rcx+3]
.text:0000000000003AF9                 xor     r12d, r12d
.text:0000000000003AFC                 mov     ebx, 30h ; '0'
.text:0000000000003B01                 jmp     loc_2E68
.text:0000000000003B01 ; ---------------------------------------------------------------------------
.text:0000000000003B06                 align 10h
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003B10                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B15                 mov     rbp, r11
.text:0000000000003B18                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003B1C                 jmp     loc_37C9
.text:0000000000003B21 ; ---------------------------------------------------------------------------
.text:0000000000003B21
.text:0000000000003B21 loc_3B21:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003B21                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003B26                 xor     r12d, r12d
.text:0000000000003B29                 jmp     loc_3630
.text:0000000000003B2E ; ---------------------------------------------------------------------------
.text:0000000000003B2E
.text:0000000000003B2E loc_3B2E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003B2E                 xor     r10d, r10d
.text:0000000000003B31                 jmp     loc_36ED
.text:0000000000003B36 ; ---------------------------------------------------------------------------
.text:0000000000003B36
.text:0000000000003B36 loc_3B36:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003B36                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B3F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B44                 xor     r12d, r12d
.text:0000000000003B47                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B4C                 jmp     loc_392B
.text:0000000000003B51 ; ---------------------------------------------------------------------------
.text:0000000000003B51
.text:0000000000003B51 loc_3B51:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003B51                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003B56                 mov     rsi, r14
.text:0000000000003B59                 mov     rcx, r13
.text:0000000000003B5C                 mov     rax, rbx
.text:0000000000003B5F                 mov     rdi, rbx
.text:0000000000003B62                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003B68                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003B6D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003B75                 cmp     rsi, r11
.text:0000000000003B78                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003B7E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003B86                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003B8B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003B90                 jnb     short loc_3BB8
.text:0000000000003B92                 cmp     byte ptr [rcx], 0
.text:0000000000003B95                 jnz     short loc_3BA7
.text:0000000000003B97                 jmp     short loc_3BB8
.text:0000000000003B97 ; ---------------------------------------------------------------------------
.text:0000000000003B99                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003BA0                 cmp     byte ptr [r9+rax], 0
.text:0000000000003BA5                 jz      short loc_3BB5
.text:0000000000003BA7
.text:0000000000003BA7 loc_3BA7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003BA7                 add     rax, 1
.text:0000000000003BAB                 lea     rdx, [rbp+rax+0]
.text:0000000000003BB0                 cmp     r11, rdx
.text:0000000000003BB3                 ja      short loc_3BA0
.text:0000000000003BB5
.text:0000000000003BB5 loc_3BB5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003BB5                 mov     rdi, rax
.text:0000000000003BB8
.text:0000000000003BB8 loc_3BB8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003BB8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003BB8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003BBD                 xor     r12d, r12d
.text:0000000000003BC0                 jmp     loc_3626
.text:0000000000003BC5 ; ---------------------------------------------------------------------------
.text:0000000000003BC5
.text:0000000000003BC5 loc_3BC5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003BC5                 mov     rdi, rbx
.text:0000000000003BC8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003BCE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003BD3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003BD9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003BE1                 xor     r12d, r12d
.text:0000000000003BE4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003BE9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003BEE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003BF3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003BF8                 jmp     loc_3626
.text:0000000000003BFD ; ---------------------------------------------------------------------------
.text:0000000000003BFD
.text:0000000000003BFD loc_3BFD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003BFD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003C02                 movzx   eax, byte ptr [rdx]
.text:0000000000003C05                 test    al, al
.text:0000000000003C07                 jz      loc_3A3C
.text:0000000000003C0D                 nop     dword ptr [rax]
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003C10                 cmp     r13, r15
.text:0000000000003C13                 jbe     short loc_3C19
.text:0000000000003C15                 mov     [r14+r15], al
.text:0000000000003C19
.text:0000000000003C19 loc_3C19:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003C19                 add     r15, 1
.text:0000000000003C1D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003C22                 test    al, al
.text:0000000000003C24                 jnz     short loc_3C10
.text:0000000000003C26                 jmp     loc_3A3C
.text:0000000000003C2B ; ---------------------------------------------------------------------------
.text:0000000000003C2B
.text:0000000000003C2B loc_3C2B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003C2B                 mov     eax, edx
.text:0000000000003C2D                 jmp     loc_3187
.text:0000000000003C32 ; ---------------------------------------------------------------------------
.text:0000000000003C32
.text:0000000000003C32 loc_3C32:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003C32                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003C36                 cmp     bl, 3Eh ; '>'
.text:0000000000003C39                 ja      loc_34B0
.text:0000000000003C3F                 mov     rax, 7000A38200000000h
.text:0000000000003C49                 bt      rax, rbx
.text:0000000000003C4D                 jnb     loc_34B0
.text:0000000000003C53                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C58                 jnz     loc_3E42
.text:0000000000003C5E                 cmp     r13, r15
.text:0000000000003C61                 jbe     short loc_3C68
.text:0000000000003C63                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003C68
.text:0000000000003C68 loc_3C68:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003C68                 lea     rax, [r15+1]
.text:0000000000003C6C                 cmp     r13, rax
.text:0000000000003C6F                 jbe     short loc_3C77
.text:0000000000003C71                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003C77
.text:0000000000003C77 loc_3C77:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003C77                 lea     rax, [r15+2]
.text:0000000000003C7B                 cmp     r13, rax
.text:0000000000003C7E                 jbe     short loc_3C86
.text:0000000000003C80                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003C86
.text:0000000000003C86 loc_3C86:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003C86                 lea     rax, [r15+3]
.text:0000000000003C8A                 cmp     r13, rax
.text:0000000000003C8D                 jbe     short loc_3C95
.text:0000000000003C8F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003C95
.text:0000000000003C95 loc_3C95:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003C95                 add     r15, 4
.text:0000000000003C99                 xor     edx, edx
.text:0000000000003C9B                 xor     r12d, r12d
.text:0000000000003C9E                 xor     eax, eax
.text:0000000000003CA0                 mov     rbp, rcx
.text:0000000000003CA3                 jmp     loc_2E68
.text:0000000000003CA8 ; ---------------------------------------------------------------------------
.text:0000000000003CA8
.text:0000000000003CA8 loc_3CA8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003CA8                                         ; DATA XREF: .rodata:jpt_2CD1↓o
.text:0000000000003CA8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003CAA                 jz      loc_3E38
.text:0000000000003CB0                 lea     rax, asc_6F75   ; "'"
.text:0000000000003CB7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003CBC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CC1                 xor     r12d, r12d
.text:0000000000003CC4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CCD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003CD2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003CD7                 mov     [rsp+0E8h+n], 1
.text:0000000000003CE0                 xor     r15d, r15d
.text:0000000000003CE3                 mov     [rsp+0E8h+s2], rax
.text:0000000000003CE8                 jmp     loc_2D13
.text:0000000000003CE8 ; ---------------------------------------------------------------------------
.text:0000000000003CED                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 loc_3CF0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003CF0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003CF0                 mov     rbp, r11
.text:0000000000003CF3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003CF8                 jmp     loc_37C9
.text:0000000000003CFD ; ---------------------------------------------------------------------------
.text:0000000000003CFD
.text:0000000000003CFD loc_3CFD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003CFD                 lea     rax, unk_6F73
.text:0000000000003D04                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003D09                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D0E                 xor     r12d, r12d
.text:0000000000003D11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D1A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003D1F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003D24                 mov     [rsp+0E8h+n], 1
.text:0000000000003D2D                 xor     r15d, r15d
.text:0000000000003D30                 mov     [rsp+0E8h+s2], rax
.text:0000000000003D35                 jmp     loc_2D13
.text:0000000000003D3A ; ---------------------------------------------------------------------------
.text:0000000000003D3A
.text:0000000000003D3A loc_3D3A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003D3A                 mov     eax, edx
.text:0000000000003D3C
.text:0000000000003D3C loc_3D3C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003D3C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003D3C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003D41                 test    rbx, rbx
.text:0000000000003D44                 jz      short loc_3D72
.text:0000000000003D46                 test    al, al
.text:0000000000003D48                 jz      short loc_3D72
.text:0000000000003D4A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003D4D                 mov     rax, rbx
.text:0000000000003D50                 test    cl, cl
.text:0000000000003D52                 jz      short loc_3D72
.text:0000000000003D54                 mov     rdx, r15
.text:0000000000003D57                 sub     rax, r15
.text:0000000000003D5A
.text:0000000000003D5A loc_3D5A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003D5A                 cmp     r13, rdx
.text:0000000000003D5D                 jbe     short loc_3D63
.text:0000000000003D5F                 mov     [r14+rdx], cl
.text:0000000000003D63
.text:0000000000003D63 loc_3D63:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003D63                 add     rdx, 1
.text:0000000000003D67                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003D6B                 test    cl, cl
.text:0000000000003D6D                 jnz     short loc_3D5A
.text:0000000000003D6F                 mov     r15, rdx
.text:0000000000003D72
.text:0000000000003D72 loc_3D72:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003D72                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003D72                 cmp     r13, r15
.text:0000000000003D75                 jbe     loc_3819
.text:0000000000003D7B                 mov     byte ptr [r14+r15], 0
.text:0000000000003D80                 jmp     loc_3819
.text:0000000000003D85 ; ---------------------------------------------------------------------------
.text:0000000000003D85
.text:0000000000003D85 loc_3D85:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003D85                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D8A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003D8F                 mov     rbp, r11
.text:0000000000003D92                 setz    al
.text:0000000000003D95                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003D99                 jmp     loc_37C9
.text:0000000000003D9E ; ---------------------------------------------------------------------------
.text:0000000000003D9E
.text:0000000000003D9E loc_3D9E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003D9E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003DA2                 mov     rdi, rcx
.text:0000000000003DA5                 call    gettext_quote
.text:0000000000003DAA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003DAF                 jmp     loc_3A06
.text:0000000000003DB4 ; ---------------------------------------------------------------------------
.text:0000000000003DB4
.text:0000000000003DB4 loc_3DB4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003DB4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003DB8                 mov     rdi, rcx
.text:0000000000003DBB                 call    gettext_quote
.text:0000000000003DC0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003DC5                 jmp     loc_3A31
.text:0000000000003DCA ; ---------------------------------------------------------------------------
.text:0000000000003DCA
.text:0000000000003DCA loc_3DCA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003DCA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003DCF                 mov     rbp, r11
.text:0000000000003DD2                 mov     eax, edx
.text:0000000000003DD4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003DD8                 jmp     loc_37C9
.text:0000000000003DDD ; ---------------------------------------------------------------------------
.text:0000000000003DDD
.text:0000000000003DDD loc_3DDD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003DDD                 sub     rsp, 8
.text:0000000000003DE1                 mov     r8d, 5
.text:0000000000003DE7                 mov     rcx, r11
.text:0000000000003DEA                 push    [rsp+0F0h+var_88]
.text:0000000000003DEE                 push    [rsp+0F8h+var_80]
.text:0000000000003DF2                 mov     rdi, r14
.text:0000000000003DF5                 push    [rsp+100h+var_C8]
.text:0000000000003DF9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003E01                 mov     rdx, [rsp+108h+s]
.text:0000000000003E06                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003E0B                 call    quotearg_buffer_restyled
.text:0000000000003E10                 add     rsp, 20h
.text:0000000000003E14                 mov     r15, rax
.text:0000000000003E17                 jmp     loc_3819
.text:0000000000003E1C ; ---------------------------------------------------------------------------
.text:0000000000003E1C
.text:0000000000003E1C loc_3E1C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003E1C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003E21                 jmp     loc_3D3C
.text:0000000000003E26 ; ---------------------------------------------------------------------------
.text:0000000000003E26
.text:0000000000003E26 loc_3E26:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003E26                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E2E                 jmp     loc_37C9
.text:0000000000003E33 ; ---------------------------------------------------------------------------
.text:0000000000003E33
.text:0000000000003E33 loc_3E33:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003E33                 call    ___stack_chk_fail
.text:0000000000003E38 ; ---------------------------------------------------------------------------
.text:0000000000003E38
.text:0000000000003E38 loc_3E38:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003E38                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003E3D                 jmp     loc_38B1
.text:0000000000003E42 ; ---------------------------------------------------------------------------
.text:0000000000003E42
.text:0000000000003E42 loc_3E42:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003E42                 mov     rbp, r11
.text:0000000000003E45                 jmp     loc_37E0
.text:0000000000003E4A ; ---------------------------------------------------------------------------
.text:0000000000003E4A
.text:0000000000003E4A loc_3E4A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003E4A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E4F                 xor     eax, eax
.text:0000000000003E51                 xor     r12d, r12d
.text:0000000000003E54                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E5D                 jmp     loc_3404
.text:0000000000003E62 ; ---------------------------------------------------------------------------
.text:0000000000003E62
.text:0000000000003E62 loc_3E62:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003E62                 mov     rdx, r13
.text:0000000000003E65                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003E6A                 jmp     loc_3462
.text:0000000000003E6F ; ---------------------------------------------------------------------------
.text:0000000000003E6F
.text:0000000000003E6F def_2CD1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003E6F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003E6F ; } // starts at 2C40
.text:0000000000003E6F quotearg_buffer_restyled endp
.text:0000000000003E6F
.text:0000000000003E6F ; ---------------------------------------------------------------------------
.text:0000000000003E74                 align 20h
.text:0000000000003E80
.text:0000000000003E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E80
.text:0000000000003E80
.text:0000000000003E80 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003E80                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003E80
.text:0000000000003E80 var_50          = qword ptr -50h
.text:0000000000003E80 var_48          = qword ptr -48h
.text:0000000000003E80 var_40          = dword ptr -40h
.text:0000000000003E80 var_3C          = dword ptr -3Ch
.text:0000000000003E80
.text:0000000000003E80 ; __unwind {
.text:0000000000003E80                 push    r15
.text:0000000000003E82                 push    r14
.text:0000000000003E84                 movsxd  r15, edi
.text:0000000000003E87                 push    r13
.text:0000000000003E89                 push    r12
.text:0000000000003E8B                 mov     r14, rdx
.text:0000000000003E8E                 push    rbp
.text:0000000000003E8F                 push    rbx
.text:0000000000003E90                 mov     rbp, rcx
.text:0000000000003E93                 sub     rsp, 28h
.text:0000000000003E97                 mov     [rsp+58h+var_50], rsi
.text:0000000000003E9C                 call    ___errno_location
.text:0000000000003EA1                 mov     r13, rax
.text:0000000000003EA4                 mov     eax, [rax]
.text:0000000000003EA6                 test    r15d, r15d
.text:0000000000003EA9                 mov     rbx, cs:slotvec
.text:0000000000003EB0                 mov     [rsp+58h+var_40], eax
.text:0000000000003EB4                 js      loc_4021
.text:0000000000003EBA                 cmp     cs:nslots, r15d
.text:0000000000003EC1                 jg      short loc_3F25
.text:0000000000003EC3                 cmp     r15d, 7FFFFFFFh
.text:0000000000003ECA                 jz      loc_4026
.text:0000000000003ED0                 lea     r12d, [r15+1]
.text:0000000000003ED4                 lea     rax, slotvec0
.text:0000000000003EDB                 movsxd  rsi, r12d
.text:0000000000003EDE                 shl     rsi, 4
.text:0000000000003EE2                 cmp     rbx, rax
.text:0000000000003EE5                 jz      loc_4000
.text:0000000000003EEB                 mov     rdi, rbx
.text:0000000000003EEE                 call    xrealloc
.text:0000000000003EF3                 mov     rbx, rax
.text:0000000000003EF6                 mov     cs:slotvec, rax
.text:0000000000003EFD
.text:0000000000003EFD loc_3EFD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003EFD                 movsxd  rdi, cs:nslots
.text:0000000000003F04                 mov     edx, r12d
.text:0000000000003F07                 xor     esi, esi        ; c
.text:0000000000003F09                 sub     edx, edi
.text:0000000000003F0B                 shl     rdi, 4
.text:0000000000003F0F                 movsxd  rdx, edx
.text:0000000000003F12                 add     rdi, rbx        ; s
.text:0000000000003F15                 shl     rdx, 4          ; n
.text:0000000000003F19                 call    _memset
.text:0000000000003F1E                 mov     cs:nslots, r12d
.text:0000000000003F25
.text:0000000000003F25 loc_3F25:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003F25                 mov     eax, [rbp+4]
.text:0000000000003F28                 shl     r15, 4
.text:0000000000003F2C                 sub     rsp, 8
.text:0000000000003F30                 add     rbx, r15
.text:0000000000003F33                 lea     r15, [rbp+8]
.text:0000000000003F37                 mov     r8d, [rbp+0]
.text:0000000000003F3B                 mov     r11, [rbx]
.text:0000000000003F3E                 mov     r12, [rbx+8]
.text:0000000000003F42                 mov     rcx, r14
.text:0000000000003F45                 or      eax, 1
.text:0000000000003F48                 mov     [rsp+60h+var_3C], eax
.text:0000000000003F4C                 push    qword ptr [rbp+30h]
.text:0000000000003F4F                 mov     r9d, eax
.text:0000000000003F52                 push    qword ptr [rbp+28h]
.text:0000000000003F55                 push    r15
.text:0000000000003F57                 mov     rsi, r11
.text:0000000000003F5A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003F5F                 mov     rdi, r12
.text:0000000000003F62                 mov     [rsp+78h+var_48], r11
.text:0000000000003F67                 call    quotearg_buffer_restyled
.text:0000000000003F6C                 add     rsp, 20h
.text:0000000000003F70                 mov     r11, [rsp+58h+var_48]
.text:0000000000003F75                 cmp     r11, rax
.text:0000000000003F78                 ja      short loc_3FE1
.text:0000000000003F7A                 lea     rsi, [rax+1]
.text:0000000000003F7E                 lea     rax, slot0
.text:0000000000003F85                 cmp     r12, rax
.text:0000000000003F88                 mov     [rbx], rsi
.text:0000000000003F8B                 jz      short loc_3F9F
.text:0000000000003F8D                 mov     rdi, r12        ; ptr
.text:0000000000003F90                 mov     [rsp+58h+var_48], rsi
.text:0000000000003F95                 call    _free
.text:0000000000003F9A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003F9F
.text:0000000000003F9F loc_3F9F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003F9F                 mov     rdi, rsi
.text:0000000000003FA2                 mov     [rsp+58h+var_48], rsi
.text:0000000000003FA7                 call    xmalloc
.text:0000000000003FAC                 sub     rsp, 8
.text:0000000000003FB0                 mov     [rbx+8], rax
.text:0000000000003FB4                 mov     r8d, [rbp+0]
.text:0000000000003FB8                 push    qword ptr [rbp+30h]
.text:0000000000003FBB                 push    qword ptr [rbp+28h]
.text:0000000000003FBE                 mov     rcx, r14
.text:0000000000003FC1                 push    r15
.text:0000000000003FC3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003FC8                 mov     rdi, rax
.text:0000000000003FCB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003FD0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003FD5                 mov     r12, rax
.text:0000000000003FD8                 call    quotearg_buffer_restyled
.text:0000000000003FDD                 add     rsp, 20h
.text:0000000000003FE1
.text:0000000000003FE1 loc_3FE1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003FE1                 mov     eax, [rsp+58h+var_40]
.text:0000000000003FE5                 mov     [r13+0], eax
.text:0000000000003FE9                 add     rsp, 28h
.text:0000000000003FED                 mov     rax, r12
.text:0000000000003FF0                 pop     rbx
.text:0000000000003FF1                 pop     rbp
.text:0000000000003FF2                 pop     r12
.text:0000000000003FF4                 pop     r13
.text:0000000000003FF6                 pop     r14
.text:0000000000003FF8                 pop     r15
.text:0000000000003FFA                 retn
.text:0000000000003FFA ; ---------------------------------------------------------------------------
.text:0000000000003FFB                 align 20h
.text:0000000000004000
.text:0000000000004000 loc_4000:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004000                 xor     edi, edi
.text:0000000000004002                 call    xrealloc
.text:0000000000004007                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000400F                 mov     rbx, rax
.text:0000000000004012                 mov     cs:slotvec, rax
.text:0000000000004019                 movups  xmmword ptr [rax], xmm0
.text:000000000000401C                 jmp     loc_3EFD
.text:0000000000004021 ; ---------------------------------------------------------------------------
.text:0000000000004021
.text:0000000000004021 loc_4021:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004021                 call    _abort
.text:0000000000004026 ; ---------------------------------------------------------------------------
.text:0000000000004026
.text:0000000000004026 loc_4026:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004026                 call    xalloc_die
.text:0000000000004026 ; } // starts at 3E80
.text:0000000000004026 quotearg_n_options endp
.text:0000000000004026
.text:0000000000004026 ; ---------------------------------------------------------------------------
.text:000000000000402B                 align 10h
.text:0000000000004030
.text:0000000000004030 ; =============== S U B R O U T I N E =======================================
.text:0000000000004030
.text:0000000000004030 ; Attributes: info_from_lumina
.text:0000000000004030
.text:0000000000004030 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004030                 public clone_quoting_options
.text:0000000000004030 clone_quoting_options proc near
.text:0000000000004030 ; __unwind {
.text:0000000000004030                 push    r12
.text:0000000000004032                 push    rbp
.text:0000000000004033                 push    rbx
.text:0000000000004034                 mov     rbx, rdi
.text:0000000000004037                 call    ___errno_location
.text:000000000000403C                 mov     r12d, [rax]
.text:000000000000403F                 mov     rbp, rax
.text:0000000000004042                 lea     rax, default_quoting_options
.text:0000000000004049                 test    rbx, rbx
.text:000000000000404C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004051                 cmovz   rbx, rax
.text:0000000000004055                 mov     rdi, rbx        ; src
.text:0000000000004058                 call    xmemdup
.text:000000000000405D                 mov     [rbp+0], r12d
.text:0000000000004061                 pop     rbx
.text:0000000000004062                 pop     rbp
.text:0000000000004063                 pop     r12
.text:0000000000004065                 retn
.text:0000000000004065 ; } // starts at 4030
.text:0000000000004065 clone_quoting_options endp
.text:0000000000004065
.text:0000000000004065 ; ---------------------------------------------------------------------------
.text:0000000000004066                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070
.text:0000000000004070                 public get_quoting_style
.text:0000000000004070 get_quoting_style proc near
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 lea     rax, default_quoting_options
.text:0000000000004077                 test    rdi, rdi
.text:000000000000407A                 cmovz   rdi, rax
.text:000000000000407E                 mov     eax, [rdi]
.text:0000000000004080                 retn
.text:0000000000004080 ; } // starts at 4070
.text:0000000000004080 get_quoting_style endp
.text:0000000000004080
.text:0000000000004080 ; ---------------------------------------------------------------------------
.text:0000000000004081                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090
.text:0000000000004090                 public set_quoting_style
.text:0000000000004090 set_quoting_style proc near
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 lea     rax, default_quoting_options
.text:0000000000004097                 test    rdi, rdi
.text:000000000000409A                 cmovz   rdi, rax
.text:000000000000409E                 mov     [rdi], esi
.text:00000000000040A0                 retn
.text:00000000000040A0 ; } // starts at 4090
.text:00000000000040A0 set_quoting_style endp
.text:00000000000040A0
.text:00000000000040A0 ; ---------------------------------------------------------------------------
.text:00000000000040A1                 align 10h
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0 ; Attributes: info_from_lumina
.text:00000000000040B0
.text:00000000000040B0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000040B0                 public set_char_quoting
.text:00000000000040B0 set_char_quoting proc near
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 lea     rax, default_quoting_options
.text:00000000000040B7                 test    rdi, rdi
.text:00000000000040BA                 mov     ecx, esi
.text:00000000000040BC                 cmovz   rdi, rax
.text:00000000000040C0                 mov     eax, esi
.text:00000000000040C2                 and     ecx, 1Fh
.text:00000000000040C5                 shr     al, 5
.text:00000000000040C8                 movzx   eax, al
.text:00000000000040CB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000040D0                 mov     esi, [rdi]
.text:00000000000040D2                 mov     eax, esi
.text:00000000000040D4                 shr     eax, cl
.text:00000000000040D6                 xor     edx, eax
.text:00000000000040D8                 and     eax, 1
.text:00000000000040DB                 and     edx, 1
.text:00000000000040DE                 shl     edx, cl
.text:00000000000040E0                 xor     edx, esi
.text:00000000000040E2                 mov     [rdi], edx
.text:00000000000040E4                 retn
.text:00000000000040E4 ; } // starts at 40B0
.text:00000000000040E4 set_char_quoting endp
.text:00000000000040E4
.text:00000000000040E4 ; ---------------------------------------------------------------------------
.text:00000000000040E5                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0
.text:00000000000040F0                 public set_quoting_flags
.text:00000000000040F0 set_quoting_flags proc near
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 lea     rax, default_quoting_options
.text:00000000000040F7                 test    rdi, rdi
.text:00000000000040FA                 cmovz   rdi, rax
.text:00000000000040FE                 mov     eax, [rdi+4]
.text:0000000000004101                 mov     [rdi+4], esi
.text:0000000000004104                 retn
.text:0000000000004104 ; } // starts at 40F0
.text:0000000000004104 set_quoting_flags endp
.text:0000000000004104
.text:0000000000004104 ; ---------------------------------------------------------------------------
.text:0000000000004105                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110 ; Attributes: info_from_lumina
.text:0000000000004110
.text:0000000000004110 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004110                 public set_custom_quoting
.text:0000000000004110 set_custom_quoting proc near
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 lea     rax, default_quoting_options
.text:0000000000004117                 test    rdi, rdi
.text:000000000000411A                 cmovz   rdi, rax
.text:000000000000411E                 test    rsi, rsi
.text:0000000000004121                 mov     dword ptr [rdi], 0Ah
.text:0000000000004127                 jz      short loc_4137
.text:0000000000004129                 test    rdx, rdx
.text:000000000000412C                 jz      short loc_4137
.text:000000000000412E                 mov     [rdi+28h], rsi
.text:0000000000004132                 mov     [rdi+30h], rdx
.text:0000000000004136                 retn
.text:0000000000004137 ; ---------------------------------------------------------------------------
.text:0000000000004137
.text:0000000000004137 loc_4137:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004137                                         ; set_custom_quoting+1C↑j
.text:0000000000004137                 sub     rsp, 8
.text:000000000000413B                 call    _abort
.text:000000000000413B ; } // starts at 4110
.text:000000000000413B set_custom_quoting endp
.text:000000000000413B
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140 ; Attributes: info_from_lumina
.text:0000000000004140
.text:0000000000004140 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004140                 public quotearg_buffer
.text:0000000000004140 quotearg_buffer proc near
.text:0000000000004140
.text:0000000000004140 var_40          = qword ptr -40h
.text:0000000000004140
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 push    r15
.text:0000000000004142                 push    r14
.text:0000000000004144                 lea     rax, default_quoting_options
.text:000000000000414B                 push    r13
.text:000000000000414D                 push    r12
.text:000000000000414F                 mov     r13, rdi
.text:0000000000004152                 push    rbp
.text:0000000000004153                 push    rbx
.text:0000000000004154                 mov     rbx, r8
.text:0000000000004157                 mov     r14, rsi
.text:000000000000415A                 mov     r15, rdx
.text:000000000000415D                 sub     rsp, 18h
.text:0000000000004161                 test    r8, r8
.text:0000000000004164                 cmovz   rbx, rax
.text:0000000000004168                 mov     [rsp+48h+var_40], rcx
.text:000000000000416D                 call    ___errno_location
.text:0000000000004172                 mov     r12d, [rax]
.text:0000000000004175                 mov     rbp, rax
.text:0000000000004178                 lea     rax, [rbx+8]
.text:000000000000417C                 sub     rsp, 8
.text:0000000000004180                 mov     r9d, [rbx+4]
.text:0000000000004184                 push    qword ptr [rbx+30h]
.text:0000000000004187                 mov     r8d, [rbx]
.text:000000000000418A                 push    qword ptr [rbx+28h]
.text:000000000000418D                 mov     rdx, r15
.text:0000000000004190                 push    rax
.text:0000000000004191                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004196                 mov     rsi, r14
.text:0000000000004199                 mov     rdi, r13
.text:000000000000419C                 call    quotearg_buffer_restyled
.text:00000000000041A1                 mov     [rbp+0], r12d
.text:00000000000041A5                 add     rsp, 38h
.text:00000000000041A9                 pop     rbx
.text:00000000000041AA                 pop     rbp
.text:00000000000041AB                 pop     r12
.text:00000000000041AD                 pop     r13
.text:00000000000041AF                 pop     r14
.text:00000000000041B1                 pop     r15
.text:00000000000041B3                 retn
.text:00000000000041B3 ; } // starts at 4140
.text:00000000000041B3 quotearg_buffer endp
.text:00000000000041B3
.text:00000000000041B3 ; ---------------------------------------------------------------------------
.text:00000000000041B4                 align 20h
.text:00000000000041C0
.text:00000000000041C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041C0
.text:00000000000041C0 ; Attributes: info_from_lumina
.text:00000000000041C0
.text:00000000000041C0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000041C0                 public quotearg_alloc_mem
.text:00000000000041C0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000041C0
.text:00000000000041C0 var_5C          = dword ptr -5Ch
.text:00000000000041C0 var_58          = qword ptr -58h
.text:00000000000041C0 var_50          = qword ptr -50h
.text:00000000000041C0 var_48          = qword ptr -48h
.text:00000000000041C0 var_40          = qword ptr -40h
.text:00000000000041C0
.text:00000000000041C0 ; __unwind {
.text:00000000000041C0                 push    r15
.text:00000000000041C2                 push    r14
.text:00000000000041C4                 lea     rax, default_quoting_options
.text:00000000000041CB                 push    r13
.text:00000000000041CD                 push    r12
.text:00000000000041CF                 mov     r12, rdx
.text:00000000000041D2                 push    rbp
.text:00000000000041D3                 push    rbx
.text:00000000000041D4                 mov     rbx, rcx
.text:00000000000041D7                 mov     r14, rdi
.text:00000000000041DA                 mov     r15, rsi
.text:00000000000041DD                 sub     rsp, 38h
.text:00000000000041E1                 test    rcx, rcx
.text:00000000000041E4                 cmovz   rbx, rax
.text:00000000000041E8                 xor     ebp, ebp
.text:00000000000041EA                 call    ___errno_location
.text:00000000000041EF                 test    r12, r12
.text:00000000000041F2                 mov     r13, rax
.text:00000000000041F5                 mov     eax, [rax]
.text:00000000000041F7                 setz    bpl
.text:00000000000041FB                 or      ebp, [rbx+4]
.text:00000000000041FE                 lea     r10, [rbx+8]
.text:0000000000004202                 sub     rsp, 8
.text:0000000000004206                 mov     r8d, [rbx]
.text:0000000000004209                 mov     rcx, r15
.text:000000000000420C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004210                 push    qword ptr [rbx+30h]
.text:0000000000004213                 mov     rdx, r14
.text:0000000000004216                 push    qword ptr [rbx+28h]
.text:0000000000004219                 push    r10
.text:000000000000421B                 xor     esi, esi
.text:000000000000421D                 mov     r9d, ebp
.text:0000000000004220                 xor     edi, edi
.text:0000000000004222                 mov     [rsp+88h+var_48], r10
.text:0000000000004227                 call    quotearg_buffer_restyled
.text:000000000000422C                 lea     rsi, [rax+1]
.text:0000000000004230                 mov     [rsp+88h+var_40], rax
.text:0000000000004235                 add     rsp, 20h
.text:0000000000004239                 mov     rdi, rsi
.text:000000000000423C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004241                 call    xmalloc
.text:0000000000004246                 mov     [rsp+68h+var_58], rax
.text:000000000000424B                 sub     rsp, 8
.text:000000000000424F                 push    qword ptr [rbx+30h]
.text:0000000000004252                 push    qword ptr [rbx+28h]
.text:0000000000004255                 mov     r10, [rsp+80h+var_48]
.text:000000000000425A                 mov     r9d, ebp
.text:000000000000425D                 mov     r8d, [rbx]
.text:0000000000004260                 mov     rcx, r15
.text:0000000000004263                 mov     rdx, r14
.text:0000000000004266                 mov     rdi, rax
.text:0000000000004269                 push    r10
.text:000000000000426B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004270                 call    quotearg_buffer_restyled
.text:0000000000004275                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004279                 add     rsp, 20h
.text:000000000000427D                 test    r12, r12
.text:0000000000004280                 mov     [r13+0], eax
.text:0000000000004284                 jz      short loc_428F
.text:0000000000004286                 mov     r11, [rsp+68h+var_40]
.text:000000000000428B                 mov     [r12], r11
.text:000000000000428F
.text:000000000000428F loc_428F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000428F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004294                 add     rsp, 38h
.text:0000000000004298                 pop     rbx
.text:0000000000004299                 pop     rbp
.text:000000000000429A                 pop     r12
.text:000000000000429C                 pop     r13
.text:000000000000429E                 pop     r14
.text:00000000000042A0                 pop     r15
.text:00000000000042A2                 retn
.text:00000000000042A2 ; } // starts at 41C0
.text:00000000000042A2 quotearg_alloc_mem endp
.text:00000000000042A2
.text:00000000000042A2 ; ---------------------------------------------------------------------------
.text:00000000000042A3                 align 10h
.text:00000000000042B0
.text:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042B0
.text:00000000000042B0
.text:00000000000042B0                 public quotearg_alloc
.text:00000000000042B0 quotearg_alloc  proc near
.text:00000000000042B0 ; __unwind {
.text:00000000000042B0                 mov     rcx, rdx
.text:00000000000042B3                 xor     edx, edx
.text:00000000000042B5                 jmp     quotearg_alloc_mem
.text:00000000000042B5 ; } // starts at 42B0
.text:00000000000042B5 quotearg_alloc  endp
.text:00000000000042B5
.text:00000000000042B5 ; ---------------------------------------------------------------------------
.text:00000000000042BA                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0 ; Attributes: info_from_lumina
.text:00000000000042C0
.text:00000000000042C0 ; void __cdecl quotearg_free()
.text:00000000000042C0                 public quotearg_free
.text:00000000000042C0 quotearg_free   proc near
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 mov     eax, cs:nslots
.text:00000000000042C6                 push    r12
.text:00000000000042C8                 mov     r12, cs:slotvec
.text:00000000000042CF                 push    rbp
.text:00000000000042D0                 push    rbx
.text:00000000000042D1                 cmp     eax, 1
.text:00000000000042D4                 jle     short loc_4301
.text:00000000000042D6                 sub     eax, 2
.text:00000000000042D9                 lea     rbx, [r12+18h]
.text:00000000000042DE                 shl     rax, 4
.text:00000000000042E2                 lea     rbp, [r12+rax+28h]
.text:00000000000042E7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000042F0
.text:00000000000042F0 loc_42F0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000042F0                 mov     rdi, [rbx]      ; ptr
.text:00000000000042F3                 add     rbx, 10h
.text:00000000000042F7                 call    _free
.text:00000000000042FC                 cmp     rbx, rbp
.text:00000000000042FF                 jnz     short loc_42F0
.text:0000000000004301
.text:0000000000004301 loc_4301:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004301                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004306                 lea     rbx, slot0
.text:000000000000430D                 cmp     rdi, rbx
.text:0000000000004310                 jz      short loc_4329
.text:0000000000004312                 call    _free
.text:0000000000004317                 mov     cs:slotvec0, 100h
.text:0000000000004322                 mov     cs:off_20A078, rbx
.text:0000000000004329
.text:0000000000004329 loc_4329:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004329                 lea     rbx, slotvec0
.text:0000000000004330                 cmp     r12, rbx
.text:0000000000004333                 jz      short loc_4344
.text:0000000000004335                 mov     rdi, r12        ; ptr
.text:0000000000004338                 call    _free
.text:000000000000433D                 mov     cs:slotvec, rbx
.text:0000000000004344
.text:0000000000004344 loc_4344:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004344                 pop     rbx
.text:0000000000004345                 mov     cs:nslots, 1
.text:000000000000434F                 pop     rbp
.text:0000000000004350                 pop     r12
.text:0000000000004352                 retn
.text:0000000000004352 ; } // starts at 42C0
.text:0000000000004352 quotearg_free   endp
.text:0000000000004352
.text:0000000000004352 ; ---------------------------------------------------------------------------
.text:0000000000004353                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360                 public quotearg_n
.text:0000000000004360 quotearg_n      proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 lea     rcx, default_quoting_options
.text:0000000000004367                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000436E                 jmp     quotearg_n_options
.text:000000000000436E ; } // starts at 4360
.text:000000000000436E quotearg_n      endp
.text:000000000000436E
.text:000000000000436E ; ---------------------------------------------------------------------------
.text:0000000000004373                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380
.text:0000000000004380                 public quotearg_n_mem
.text:0000000000004380 quotearg_n_mem  proc near
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 lea     rcx, default_quoting_options
.text:0000000000004387                 jmp     quotearg_n_options
.text:0000000000004387 ; } // starts at 4380
.text:0000000000004387 quotearg_n_mem  endp
.text:0000000000004387
.text:0000000000004387 ; ---------------------------------------------------------------------------
.text:000000000000438C                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public quotearg
.text:0000000000004390 quotearg        proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 lea     rcx, default_quoting_options
.text:0000000000004397                 mov     rsi, rdi
.text:000000000000439A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043A1                 xor     edi, edi
.text:00000000000043A3                 jmp     quotearg_n_options
.text:00000000000043A3 ; } // starts at 4390
.text:00000000000043A3 quotearg        endp
.text:00000000000043A3
.text:00000000000043A3 ; ---------------------------------------------------------------------------
.text:00000000000043A8                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0
.text:00000000000043B0                 public quotearg_mem
.text:00000000000043B0 quotearg_mem    proc near
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 lea     rcx, default_quoting_options
.text:00000000000043B7                 mov     rdx, rsi
.text:00000000000043BA                 mov     rsi, rdi
.text:00000000000043BD                 xor     edi, edi
.text:00000000000043BF                 jmp     quotearg_n_options
.text:00000000000043BF ; } // starts at 43B0
.text:00000000000043BF quotearg_mem    endp
.text:00000000000043BF
.text:00000000000043BF ; ---------------------------------------------------------------------------
.text:00000000000043C4                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0 ; Attributes: info_from_lumina
.text:00000000000043D0
.text:00000000000043D0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000043D0                 public quotearg_n_style
.text:00000000000043D0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000043D0
.text:00000000000043D0 var_48          = dword ptr -48h
.text:00000000000043D0 var_44          = qword ptr -44h
.text:00000000000043D0 var_3C          = qword ptr -3Ch
.text:00000000000043D0 var_34          = qword ptr -34h
.text:00000000000043D0 var_2C          = qword ptr -2Ch
.text:00000000000043D0 var_24          = qword ptr -24h
.text:00000000000043D0 var_1C          = qword ptr -1Ch
.text:00000000000043D0 var_14          = dword ptr -14h
.text:00000000000043D0 var_10          = qword ptr -10h
.text:00000000000043D0
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 sub     rsp, 48h
.text:00000000000043D4                 mov     rax, rdx
.text:00000000000043D7                 mov     rdx, fs:28h
.text:00000000000043E0                 mov     [rsp+48h+var_10], rdx
.text:00000000000043E5                 xor     edx, edx
.text:00000000000043E7                 cmp     esi, 0Ah
.text:00000000000043EA                 jz      short loc_4454
.text:00000000000043EC                 mov     [rsp+48h+var_48], esi
.text:00000000000043EF                 mov     rcx, rsp
.text:00000000000043F2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043F9                 mov     rsi, rax
.text:00000000000043FC                 mov     [rsp+48h+var_44], 0
.text:0000000000004405                 mov     [rsp+48h+var_3C], 0
.text:000000000000440E                 mov     [rsp+48h+var_34], 0
.text:0000000000004417                 mov     [rsp+48h+var_2C], 0
.text:0000000000004420                 mov     [rsp+48h+var_24], 0
.text:0000000000004429                 mov     [rsp+48h+var_1C], 0
.text:0000000000004432                 mov     [rsp+48h+var_14], 0
.text:000000000000443A                 call    quotearg_n_options
.text:000000000000443F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004444                 xor     rcx, fs:28h
.text:000000000000444D                 jnz     short loc_4459
.text:000000000000444F                 add     rsp, 48h
.text:0000000000004453                 retn
.text:0000000000004454 ; ---------------------------------------------------------------------------
.text:0000000000004454
.text:0000000000004454 loc_4454:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004454                 call    _abort
.text:0000000000004459 ; ---------------------------------------------------------------------------
.text:0000000000004459
.text:0000000000004459 loc_4459:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004459                 call    ___stack_chk_fail
.text:0000000000004459 ; } // starts at 43D0
.text:0000000000004459 quotearg_n_style endp
.text:0000000000004459
.text:0000000000004459 ; ---------------------------------------------------------------------------
.text:000000000000445E                 align 20h
.text:0000000000004460
.text:0000000000004460 ; =============== S U B R O U T I N E =======================================
.text:0000000000004460
.text:0000000000004460 ; Attributes: info_from_lumina
.text:0000000000004460
.text:0000000000004460 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004460                 public quotearg_n_style_mem
.text:0000000000004460 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004460
.text:0000000000004460 var_48          = dword ptr -48h
.text:0000000000004460 var_44          = qword ptr -44h
.text:0000000000004460 var_3C          = qword ptr -3Ch
.text:0000000000004460 var_34          = qword ptr -34h
.text:0000000000004460 var_2C          = qword ptr -2Ch
.text:0000000000004460 var_24          = qword ptr -24h
.text:0000000000004460 var_1C          = qword ptr -1Ch
.text:0000000000004460 var_14          = dword ptr -14h
.text:0000000000004460 var_10          = qword ptr -10h
.text:0000000000004460
.text:0000000000004460 ; __unwind {
.text:0000000000004460                 sub     rsp, 48h
.text:0000000000004464                 mov     rax, rdx
.text:0000000000004467                 mov     rdx, rcx
.text:000000000000446A                 mov     rcx, fs:28h
.text:0000000000004473                 mov     [rsp+48h+var_10], rcx
.text:0000000000004478                 xor     ecx, ecx
.text:000000000000447A                 cmp     esi, 0Ah
.text:000000000000447D                 jz      short loc_44E0
.text:000000000000447F                 mov     [rsp+48h+var_48], esi
.text:0000000000004482                 mov     rcx, rsp
.text:0000000000004485                 mov     rsi, rax
.text:0000000000004488                 mov     [rsp+48h+var_44], 0
.text:0000000000004491                 mov     [rsp+48h+var_3C], 0
.text:000000000000449A                 mov     [rsp+48h+var_34], 0
.text:00000000000044A3                 mov     [rsp+48h+var_2C], 0
.text:00000000000044AC                 mov     [rsp+48h+var_24], 0
.text:00000000000044B5                 mov     [rsp+48h+var_1C], 0
.text:00000000000044BE                 mov     [rsp+48h+var_14], 0
.text:00000000000044C6                 call    quotearg_n_options
.text:00000000000044CB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000044D0                 xor     rdx, fs:28h
.text:00000000000044D9                 jnz     short loc_44E5
.text:00000000000044DB                 add     rsp, 48h
.text:00000000000044DF                 retn
.text:00000000000044E0 ; ---------------------------------------------------------------------------
.text:00000000000044E0
.text:00000000000044E0 loc_44E0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000044E0                 call    _abort
.text:00000000000044E5 ; ---------------------------------------------------------------------------
.text:00000000000044E5
.text:00000000000044E5 loc_44E5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000044E5                 call    ___stack_chk_fail
.text:00000000000044E5 ; } // starts at 4460
.text:00000000000044E5 quotearg_n_style_mem endp
.text:00000000000044E5
.text:00000000000044E5 ; ---------------------------------------------------------------------------
.text:00000000000044EA                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0
.text:00000000000044F0                 public quotearg_style
.text:00000000000044F0 quotearg_style  proc near
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 mov     rdx, rsi
.text:00000000000044F3                 mov     esi, edi
.text:00000000000044F5                 xor     edi, edi
.text:00000000000044F7                 jmp     quotearg_n_style
.text:00000000000044F7 ; } // starts at 44F0
.text:00000000000044F7 quotearg_style  endp
.text:00000000000044F7
.text:00000000000044F7 ; ---------------------------------------------------------------------------
.text:00000000000044FC                 align 20h
.text:0000000000004500
.text:0000000000004500 ; =============== S U B R O U T I N E =======================================
.text:0000000000004500
.text:0000000000004500
.text:0000000000004500                 public quotearg_style_mem
.text:0000000000004500 quotearg_style_mem proc near
.text:0000000000004500 ; __unwind {
.text:0000000000004500                 mov     rcx, rdx
.text:0000000000004503                 mov     rdx, rsi
.text:0000000000004506                 mov     esi, edi
.text:0000000000004508                 xor     edi, edi
.text:000000000000450A                 jmp     quotearg_n_style_mem
.text:000000000000450A ; } // starts at 4500
.text:000000000000450A quotearg_style_mem endp
.text:000000000000450A
.text:000000000000450A ; ---------------------------------------------------------------------------
.text:000000000000450F                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004510                 public quotearg_char_mem
.text:0000000000004510 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004510                                         ; quotearg_colon+C↓j ...
.text:0000000000004510
.text:0000000000004510 var_48          = xmmword ptr -48h
.text:0000000000004510 var_38          = xmmword ptr -38h
.text:0000000000004510 var_28          = xmmword ptr -28h
.text:0000000000004510 var_18          = qword ptr -18h
.text:0000000000004510 var_10          = qword ptr -10h
.text:0000000000004510
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 sub     rsp, 48h
.text:0000000000004514                 mov     ecx, edx
.text:0000000000004516                 mov     rax, fs:28h
.text:000000000000451F                 mov     [rsp+48h+var_10], rax
.text:0000000000004524                 xor     eax, eax
.text:0000000000004526                 mov     rax, cs:qword_20A230
.text:000000000000452D                 mov     r8, rsp
.text:0000000000004530                 and     ecx, 1Fh
.text:0000000000004533                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000453B                 mov     [rsp+48h+var_18], rax
.text:0000000000004540                 mov     eax, edx
.text:0000000000004542                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004546                 shr     al, 5
.text:0000000000004549                 movzx   eax, al
.text:000000000000454C                 lea     r9, [r8+rax*4+8]
.text:0000000000004551                 movdqa  xmm0, cs:xmmword_20A210
.text:0000000000004559                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000455E                 movdqa  xmm0, cs:xmmword_20A220
.text:0000000000004566                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000456B                 mov     edx, [r9]
.text:000000000000456E                 mov     eax, edx
.text:0000000000004570                 shr     eax, cl
.text:0000000000004572                 not     eax
.text:0000000000004574                 and     eax, 1
.text:0000000000004577                 shl     eax, cl
.text:0000000000004579                 mov     rcx, r8
.text:000000000000457C                 xor     eax, edx
.text:000000000000457E                 mov     rdx, rsi
.text:0000000000004581                 mov     rsi, rdi
.text:0000000000004584                 mov     [r9], eax
.text:0000000000004587                 xor     edi, edi
.text:0000000000004589                 call    quotearg_n_options
.text:000000000000458E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004593                 xor     rsi, fs:28h
.text:000000000000459C                 jnz     short loc_45A3
.text:000000000000459E                 add     rsp, 48h
.text:00000000000045A2                 retn
.text:00000000000045A3 ; ---------------------------------------------------------------------------
.text:00000000000045A3
.text:00000000000045A3 loc_45A3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000045A3                 call    ___stack_chk_fail
.text:00000000000045A3 ; } // starts at 4510
.text:00000000000045A3 quotearg_char_mem endp
.text:00000000000045A3
.text:00000000000045A3 ; ---------------------------------------------------------------------------
.text:00000000000045A8                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0
.text:00000000000045B0                 public quotearg_char
.text:00000000000045B0 quotearg_char   proc near
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 movsx   edx, sil
.text:00000000000045B4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000045BB                 jmp     quotearg_char_mem
.text:00000000000045BB ; } // starts at 45B0
.text:00000000000045BB quotearg_char   endp
.text:00000000000045BB
.text:00000000000045C0
.text:00000000000045C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045C0
.text:00000000000045C0
.text:00000000000045C0                 public quotearg_colon
.text:00000000000045C0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000045C0 ; __unwind {
.text:00000000000045C0                 mov     edx, 3Ah ; ':'
.text:00000000000045C5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000045CC                 jmp     quotearg_char_mem
.text:00000000000045CC ; } // starts at 45C0
.text:00000000000045CC quotearg_colon  endp
.text:00000000000045CC
.text:00000000000045CC ; ---------------------------------------------------------------------------
.text:00000000000045D1                 align 20h
.text:00000000000045E0
.text:00000000000045E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045E0
.text:00000000000045E0
.text:00000000000045E0                 public quotearg_colon_mem
.text:00000000000045E0 quotearg_colon_mem proc near
.text:00000000000045E0 ; __unwind {
.text:00000000000045E0                 mov     edx, 3Ah ; ':'
.text:00000000000045E5                 jmp     quotearg_char_mem
.text:00000000000045E5 ; } // starts at 45E0
.text:00000000000045E5 quotearg_colon_mem endp
.text:00000000000045E5
.text:00000000000045E5 ; ---------------------------------------------------------------------------
.text:00000000000045EA                 align 10h
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0 ; Attributes: info_from_lumina
.text:00000000000045F0
.text:00000000000045F0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000045F0                 public quotearg_n_style_colon
.text:00000000000045F0 quotearg_n_style_colon proc near
.text:00000000000045F0
.text:00000000000045F0 var_48          = dword ptr -48h
.text:00000000000045F0 var_44          = qword ptr -44h
.text:00000000000045F0 var_3C          = qword ptr -3Ch
.text:00000000000045F0 var_34          = qword ptr -34h
.text:00000000000045F0 var_2C          = qword ptr -2Ch
.text:00000000000045F0 var_24          = qword ptr -24h
.text:00000000000045F0 var_1C          = qword ptr -1Ch
.text:00000000000045F0 var_14          = dword ptr -14h
.text:00000000000045F0 var_10          = qword ptr -10h
.text:00000000000045F0
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 sub     rsp, 48h
.text:00000000000045F4                 mov     rax, rdx
.text:00000000000045F7                 mov     rdx, fs:28h
.text:0000000000004600                 mov     [rsp+48h+var_10], rdx
.text:0000000000004605                 xor     edx, edx
.text:0000000000004607                 cmp     esi, 0Ah
.text:000000000000460A                 jz      short loc_4674
.text:000000000000460C                 mov     [rsp+48h+var_48], esi
.text:000000000000460F                 mov     rcx, rsp
.text:0000000000004612                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004619                 mov     rsi, rax
.text:000000000000461C                 mov     [rsp+48h+var_44], 0
.text:0000000000004625                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000462E                 mov     [rsp+48h+var_34], 0
.text:0000000000004637                 mov     [rsp+48h+var_2C], 0
.text:0000000000004640                 mov     [rsp+48h+var_24], 0
.text:0000000000004649                 mov     [rsp+48h+var_1C], 0
.text:0000000000004652                 mov     [rsp+48h+var_14], 0
.text:000000000000465A                 call    quotearg_n_options
.text:000000000000465F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004664                 xor     rcx, fs:28h
.text:000000000000466D                 jnz     short loc_4679
.text:000000000000466F                 add     rsp, 48h
.text:0000000000004673                 retn
.text:0000000000004674 ; ---------------------------------------------------------------------------
.text:0000000000004674
.text:0000000000004674 loc_4674:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004674                 call    _abort
.text:0000000000004679 ; ---------------------------------------------------------------------------
.text:0000000000004679
.text:0000000000004679 loc_4679:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004679                 call    ___stack_chk_fail
.text:0000000000004679 ; } // starts at 45F0
.text:0000000000004679 quotearg_n_style_colon endp
.text:0000000000004679
.text:0000000000004679 ; ---------------------------------------------------------------------------
.text:000000000000467E                 align 20h
.text:0000000000004680
.text:0000000000004680 ; =============== S U B R O U T I N E =======================================
.text:0000000000004680
.text:0000000000004680 ; Attributes: info_from_lumina
.text:0000000000004680
.text:0000000000004680 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004680                 public quotearg_n_custom_mem
.text:0000000000004680 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004680                                         ; quotearg_custom+12↓j ...
.text:0000000000004680
.text:0000000000004680 var_48          = xmmword ptr -48h
.text:0000000000004680 var_38          = xmmword ptr -38h
.text:0000000000004680 var_28          = xmmword ptr -28h
.text:0000000000004680 var_18          = qword ptr -18h
.text:0000000000004680 var_10          = qword ptr -10h
.text:0000000000004680
.text:0000000000004680 ; __unwind {
.text:0000000000004680                 sub     rsp, 48h
.text:0000000000004684                 mov     r9, rcx
.text:0000000000004687                 mov     rcx, cs:qword_20A230
.text:000000000000468E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004696                 mov     rax, fs:28h
.text:000000000000469F                 mov     [rsp+48h+var_10], rax
.text:00000000000046A4                 xor     eax, eax
.text:00000000000046A6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000046AA                 test    rsi, rsi
.text:00000000000046AD                 mov     [rsp+48h+var_18], rcx
.text:00000000000046B2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000046B9                 movdqa  xmm0, cs:xmmword_20A210
.text:00000000000046C1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000046C6                 movdqa  xmm0, cs:xmmword_20A220
.text:00000000000046CE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000046D3                 jz      short loc_4707
.text:00000000000046D5                 test    rdx, rdx
.text:00000000000046D8                 jz      short loc_4707
.text:00000000000046DA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000046DF                 mov     [rsp+48h+var_18], rdx
.text:00000000000046E4                 mov     rcx, rsp
.text:00000000000046E7                 mov     rdx, r8
.text:00000000000046EA                 mov     rsi, r9
.text:00000000000046ED                 call    quotearg_n_options
.text:00000000000046F2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000046F7                 xor     rdi, fs:28h
.text:0000000000004700                 jnz     short loc_470C
.text:0000000000004702                 add     rsp, 48h
.text:0000000000004706                 retn
.text:0000000000004707 ; ---------------------------------------------------------------------------
.text:0000000000004707
.text:0000000000004707 loc_4707:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004707                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004707                 call    _abort
.text:000000000000470C ; ---------------------------------------------------------------------------
.text:000000000000470C
.text:000000000000470C loc_470C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000470C                 call    ___stack_chk_fail
.text:000000000000470C ; } // starts at 4680
.text:000000000000470C quotearg_n_custom_mem endp
.text:000000000000470C
.text:000000000000470C ; ---------------------------------------------------------------------------
.text:0000000000004711                 align 20h
.text:0000000000004720
.text:0000000000004720 ; =============== S U B R O U T I N E =======================================
.text:0000000000004720
.text:0000000000004720
.text:0000000000004720                 public quotearg_n_custom
.text:0000000000004720 quotearg_n_custom proc near
.text:0000000000004720 ; __unwind {
.text:0000000000004720                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004727                 jmp     quotearg_n_custom_mem
.text:0000000000004727 ; } // starts at 4720
.text:0000000000004727 quotearg_n_custom endp
.text:0000000000004727
.text:0000000000004727 ; ---------------------------------------------------------------------------
.text:000000000000472C                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730
.text:0000000000004730                 public quotearg_custom
.text:0000000000004730 quotearg_custom proc near
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 mov     rcx, rdx
.text:0000000000004733                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000473A                 mov     rdx, rsi
.text:000000000000473D                 mov     rsi, rdi
.text:0000000000004740                 xor     edi, edi
.text:0000000000004742                 jmp     quotearg_n_custom_mem
.text:0000000000004742 ; } // starts at 4730
.text:0000000000004742 quotearg_custom endp
.text:0000000000004742
.text:0000000000004742 ; ---------------------------------------------------------------------------
.text:0000000000004747                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750
.text:0000000000004750                 public quotearg_custom_mem
.text:0000000000004750 quotearg_custom_mem proc near
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 mov     r8, rcx
.text:0000000000004753                 mov     rcx, rdx
.text:0000000000004756                 mov     rdx, rsi
.text:0000000000004759                 mov     rsi, rdi
.text:000000000000475C                 xor     edi, edi
.text:000000000000475E                 jmp     quotearg_n_custom_mem
.text:000000000000475E ; } // starts at 4750
.text:000000000000475E quotearg_custom_mem endp
.text:000000000000475E
.text:000000000000475E ; ---------------------------------------------------------------------------
.text:0000000000004763                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770
.text:0000000000004770                 public quote_n_mem
.text:0000000000004770 quote_n_mem     proc near
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 lea     rcx, quote_quoting_options
.text:0000000000004777                 jmp     quotearg_n_options
.text:0000000000004777 ; } // starts at 4770
.text:0000000000004777 quote_n_mem     endp
.text:0000000000004777
.text:0000000000004777 ; ---------------------------------------------------------------------------
.text:000000000000477C                 align 20h
.text:0000000000004780
.text:0000000000004780 ; =============== S U B R O U T I N E =======================================
.text:0000000000004780
.text:0000000000004780
.text:0000000000004780                 public quote_mem
.text:0000000000004780 quote_mem       proc near
.text:0000000000004780 ; __unwind {
.text:0000000000004780                 lea     rcx, quote_quoting_options
.text:0000000000004787                 mov     rdx, rsi
.text:000000000000478A                 mov     rsi, rdi
.text:000000000000478D                 xor     edi, edi
.text:000000000000478F                 jmp     quotearg_n_options
.text:000000000000478F ; } // starts at 4780
.text:000000000000478F quote_mem       endp
.text:000000000000478F
.text:000000000000478F ; ---------------------------------------------------------------------------
.text:0000000000004794                 align 20h
.text:00000000000047A0
.text:00000000000047A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047A0
.text:00000000000047A0
.text:00000000000047A0                 public quote_n
.text:00000000000047A0 quote_n         proc near
.text:00000000000047A0 ; __unwind {
.text:00000000000047A0                 lea     rcx, quote_quoting_options
.text:00000000000047A7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000047AE                 jmp     quotearg_n_options
.text:00000000000047AE ; } // starts at 47A0
.text:00000000000047AE quote_n         endp
.text:00000000000047AE
.text:00000000000047AE ; ---------------------------------------------------------------------------
.text:00000000000047B3                 align 20h
.text:00000000000047C0
.text:00000000000047C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047C0
.text:00000000000047C0
.text:00000000000047C0                 public quote
.text:00000000000047C0 quote           proc near               ; CODE XREF: main+389↑p
.text:00000000000047C0                                         ; main+434↑p ...
.text:00000000000047C0 ; __unwind {
.text:00000000000047C0                 lea     rcx, quote_quoting_options
.text:00000000000047C7                 mov     rsi, rdi
.text:00000000000047CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000047D1                 xor     edi, edi
.text:00000000000047D3                 jmp     quotearg_n_options
.text:00000000000047D3 ; } // starts at 47C0
.text:00000000000047D3 quote           endp
.text:00000000000047D3
.text:00000000000047D3 ; ---------------------------------------------------------------------------
.text:00000000000047D8                 align 20h
.text:00000000000047E0
.text:00000000000047E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047E0
.text:00000000000047E0
.text:00000000000047E0 ; __int64 __fastcall try_nocreate(char *filename)
.text:00000000000047E0 try_nocreate    proc near               ; DATA XREF: gen_tempname_len+3D↓o
.text:00000000000047E0
.text:00000000000047E0 var_10          = qword ptr -10h
.text:00000000000047E0
.text:00000000000047E0 ; __unwind {
.text:00000000000047E0                 push    rbx
.text:00000000000047E1                 mov     rsi, rdi        ; filename
.text:00000000000047E4                 mov     edi, 1          ; ver
.text:00000000000047E9                 sub     rsp, 0A0h
.text:00000000000047F0                 mov     rdx, rsp        ; stat_buf
.text:00000000000047F3                 mov     rax, fs:28h
.text:00000000000047FC                 mov     [rsp+0A8h+var_10], rax
.text:0000000000004804                 xor     eax, eax
.text:0000000000004806                 call    ___lxstat
.text:000000000000480B                 mov     ebx, eax
.text:000000000000480D                 call    ___errno_location
.text:0000000000004812                 test    ebx, ebx
.text:0000000000004814                 jz      short loc_4830
.text:0000000000004816                 mov     edx, [rax]
.text:0000000000004818                 cmp     edx, 4Bh ; 'K'
.text:000000000000481B                 jz      short loc_4830
.text:000000000000481D                 xor     eax, eax
.text:000000000000481F                 cmp     edx, 2
.text:0000000000004822                 setnz   al
.text:0000000000004825                 neg     eax
.text:0000000000004827                 jmp     short loc_483B
.text:0000000000004827 ; ---------------------------------------------------------------------------
.text:0000000000004829                 align 10h
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: try_nocreate+34↑j
.text:0000000000004830                                         ; try_nocreate+3B↑j
.text:0000000000004830                 mov     dword ptr [rax], 11h
.text:0000000000004836                 mov     eax, 0FFFFFFFFh
.text:000000000000483B
.text:000000000000483B loc_483B:                               ; CODE XREF: try_nocreate+47↑j
.text:000000000000483B                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000004843                 xor     rcx, fs:28h
.text:000000000000484C                 jnz     short loc_4857
.text:000000000000484E                 add     rsp, 0A0h
.text:0000000000004855                 pop     rbx
.text:0000000000004856                 retn
.text:0000000000004857 ; ---------------------------------------------------------------------------
.text:0000000000004857
.text:0000000000004857 loc_4857:                               ; CODE XREF: try_nocreate+6C↑j
.text:0000000000004857                 call    ___stack_chk_fail
.text:0000000000004857 ; } // starts at 47E0
.text:0000000000004857 try_nocreate    endp
.text:0000000000004857
.text:0000000000004857 ; ---------------------------------------------------------------------------
.text:000000000000485C                 align 20h
.text:0000000000004860
.text:0000000000004860 ; =============== S U B R O U T I N E =======================================
.text:0000000000004860
.text:0000000000004860
.text:0000000000004860 try_dir         proc near               ; DATA XREF: gen_tempname_len+75↓o
.text:0000000000004860 ; __unwind {
.text:0000000000004860                 mov     esi, 1C0h       ; mode
.text:0000000000004865                 jmp     _mkdir
.text:0000000000004865 ; } // starts at 4860
.text:0000000000004865 try_dir         endp
.text:0000000000004865
.text:0000000000004865 ; ---------------------------------------------------------------------------
.text:000000000000486A                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870
.text:0000000000004870 try_file        proc near               ; DATA XREF: gen_tempname_len+55↓o
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 mov     esi, [rsi]
.text:0000000000004872                 mov     edx, 180h
.text:0000000000004877                 xor     eax, eax
.text:0000000000004879                 and     sil, 3Ch
.text:000000000000487D                 or      sil, 0C2h       ; oflag
.text:0000000000004881                 jmp     _open
.text:0000000000004881 ; } // starts at 4870
.text:0000000000004881 try_file        endp
.text:0000000000004881
.text:0000000000004881 ; ---------------------------------------------------------------------------
.text:0000000000004886                 align 10h
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890
.text:0000000000004890 ; __int64 __fastcall try_tempname_len(char *s)
.text:0000000000004890                 public try_tempname_len
.text:0000000000004890 try_tempname_len proc near              ; CODE XREF: gen_tempname_len+44↓p
.text:0000000000004890                                         ; gen_tempname_len+5C↓p ...
.text:0000000000004890
.text:0000000000004890 var_68          = qword ptr -68h
.text:0000000000004890 var_60          = qword ptr -60h
.text:0000000000004890 var_58          = qword ptr -58h
.text:0000000000004890 var_50          = qword ptr -50h
.text:0000000000004890 var_48          = qword ptr -48h
.text:0000000000004890 var_3C          = dword ptr -3Ch
.text:0000000000004890
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 push    r15
.text:0000000000004892                 push    r14
.text:0000000000004894                 mov     r15, rdi
.text:0000000000004897                 push    r13
.text:0000000000004899                 push    r12
.text:000000000000489B                 mov     r14, r8
.text:000000000000489E                 push    rbp
.text:000000000000489F                 push    rbx
.text:00000000000048A0                 mov     ebp, esi
.text:00000000000048A2                 sub     rsp, 38h
.text:00000000000048A6                 mov     [rsp+68h+var_50], rdx
.text:00000000000048AB                 mov     [rsp+68h+var_68], rdi
.text:00000000000048AF                 mov     [rsp+68h+var_48], rcx
.text:00000000000048B4                 call    ___errno_location
.text:00000000000048B9                 mov     [rsp+68h+var_60], rax
.text:00000000000048BE                 mov     eax, [rax]
.text:00000000000048C0                 mov     rdi, r15        ; s
.text:00000000000048C3                 mov     [rsp+68h+var_3C], eax
.text:00000000000048C7                 call    _strlen
.text:00000000000048CC                 movsxd  rsi, ebp
.text:00000000000048CF                 lea     rdx, [rsi+r14]
.text:00000000000048D3                 cmp     rdx, rax
.text:00000000000048D6                 ja      loc_49EB
.text:00000000000048DC                 sub     rax, r14
.text:00000000000048DF                 mov     rbx, rax
.text:00000000000048E2                 sub     rbx, rsi
.text:00000000000048E5                 lea     rsi, aPosix+4   ; accept
.text:00000000000048EC                 lea     rax, [r15+rbx]
.text:00000000000048F0                 mov     rdi, rax        ; s
.text:00000000000048F3                 mov     [rsp+68h+var_58], rax
.text:00000000000048F8                 call    _strspn
.text:00000000000048FD                 cmp     r14, rax
.text:0000000000004900                 ja      loc_49EB
.text:0000000000004906                 xor     edi, edi
.text:0000000000004908                 mov     rsi, r14
.text:000000000000490B                 call    randint_all_new
.text:0000000000004910                 test    rax, rax
.text:0000000000004913                 mov     rbp, rax
.text:0000000000004916                 jz      loc_49FD
.text:000000000000491C                 mov     rax, [rsp+68h+var_68]
.text:0000000000004920                 lea     r12, letters    ; "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM"...
.text:0000000000004927                 mov     r13d, 3A2F8h
.text:000000000000492D                 add     rax, r14
.text:0000000000004930                 add     rbx, rax
.text:0000000000004933                 nop     dword ptr [rax+rax+00h]
.text:0000000000004938
.text:0000000000004938 loc_4938:                               ; CODE XREF: try_tempname_len+FD↓j
.text:0000000000004938                 test    r14, r14
.text:000000000000493B                 mov     r15, [rsp+68h+var_58]
.text:0000000000004940                 jz      short loc_4967
.text:0000000000004942                 nop     word ptr [rax+rax+00h]
.text:0000000000004948
.text:0000000000004948 loc_4948:                               ; CODE XREF: try_tempname_len+D5↓j
.text:0000000000004948                 mov     esi, 3Dh ; '='
.text:000000000000494D                 mov     rdi, rbp
.text:0000000000004950                 add     r15, 1
.text:0000000000004954                 call    randint_genmax
.text:0000000000004959                 movzx   eax, byte ptr [r12+rax]
.text:000000000000495E                 mov     [r15-1], al
.text:0000000000004962                 cmp     r15, rbx
.text:0000000000004965                 jnz     short loc_4948
.text:0000000000004967
.text:0000000000004967 loc_4967:                               ; CODE XREF: try_tempname_len+B0↑j
.text:0000000000004967                 mov     rsi, [rsp+68h+var_50]
.text:000000000000496C                 mov     rdi, [rsp+68h+var_68]
.text:0000000000004970                 mov     rax, [rsp+68h+var_48]
.text:0000000000004975                 call    rax
.text:0000000000004977                 test    eax, eax
.text:0000000000004979                 mov     edx, eax
.text:000000000000497B                 jns     short loc_49A9
.text:000000000000497D                 mov     rax, [rsp+68h+var_60]
.text:0000000000004982                 mov     ecx, [rax]
.text:0000000000004984                 cmp     ecx, 11h
.text:0000000000004987                 jnz     short loc_49E4
.text:0000000000004989                 sub     r13d, 1
.text:000000000000498D                 jnz     short loc_4938
.text:000000000000498F                 mov     rdi, rbp        ; ptr
.text:0000000000004992                 call    randint_all_free
.text:0000000000004997                 mov     rax, [rsp+68h+var_60]
.text:000000000000499C                 mov     edx, 0FFFFFFFFh
.text:00000000000049A1                 mov     dword ptr [rax], 11h
.text:00000000000049A7                 jmp     short loc_49D3
.text:00000000000049A9 ; ---------------------------------------------------------------------------
.text:00000000000049A9
.text:00000000000049A9 loc_49A9:                               ; CODE XREF: try_tempname_len+EB↑j
.text:00000000000049A9                 mov     rcx, [rsp+68h+var_60]
.text:00000000000049AE                 mov     eax, [rsp+68h+var_3C]
.text:00000000000049B2                 mov     [rcx], eax
.text:00000000000049B4                 mov     ecx, eax
.text:00000000000049B6
.text:00000000000049B6 loc_49B6:                               ; CODE XREF: try_tempname_len+159↓j
.text:00000000000049B6                 mov     rdi, rbp        ; ptr
.text:00000000000049B9                 mov     dword ptr [rsp+68h+var_58], edx
.text:00000000000049BD                 mov     dword ptr [rsp+68h+var_68], ecx
.text:00000000000049C0                 call    randint_all_free
.text:00000000000049C5                 mov     rax, [rsp+68h+var_60]
.text:00000000000049CA                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:00000000000049CD                 mov     edx, dword ptr [rsp+68h+var_58]
.text:00000000000049D1                 mov     [rax], ecx
.text:00000000000049D3
.text:00000000000049D3 loc_49D3:                               ; CODE XREF: try_tempname_len+117↑j
.text:00000000000049D3                                         ; try_tempname_len+16B↓j ...
.text:00000000000049D3                 add     rsp, 38h
.text:00000000000049D7                 mov     eax, edx
.text:00000000000049D9                 pop     rbx
.text:00000000000049DA                 pop     rbp
.text:00000000000049DB                 pop     r12
.text:00000000000049DD                 pop     r13
.text:00000000000049DF                 pop     r14
.text:00000000000049E1                 pop     r15
.text:00000000000049E3                 retn
.text:00000000000049E4 ; ---------------------------------------------------------------------------
.text:00000000000049E4
.text:00000000000049E4 loc_49E4:                               ; CODE XREF: try_tempname_len+F7↑j
.text:00000000000049E4                 mov     edx, 0FFFFFFFFh
.text:00000000000049E9                 jmp     short loc_49B6
.text:00000000000049EB ; ---------------------------------------------------------------------------
.text:00000000000049EB
.text:00000000000049EB loc_49EB:                               ; CODE XREF: try_tempname_len+46↑j
.text:00000000000049EB                                         ; try_tempname_len+70↑j
.text:00000000000049EB                 mov     rax, [rsp+68h+var_60]
.text:00000000000049F0                 mov     edx, 0FFFFFFFFh
.text:00000000000049F5                 mov     dword ptr [rax], 16h
.text:00000000000049FB                 jmp     short loc_49D3
.text:00000000000049FD ; ---------------------------------------------------------------------------
.text:00000000000049FD
.text:00000000000049FD loc_49FD:                               ; CODE XREF: try_tempname_len+86↑j
.text:00000000000049FD                 mov     edx, 0FFFFFFFFh
.text:0000000000004A02                 jmp     short loc_49D3
.text:0000000000004A02 ; } // starts at 4890
.text:0000000000004A02 try_tempname_len endp
.text:0000000000004A02
.text:0000000000004A02 ; ---------------------------------------------------------------------------
.text:0000000000004A04                 align 10h
.text:0000000000004A10
.text:0000000000004A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A10
.text:0000000000004A10
.text:0000000000004A10                 public gen_tempname_len
.text:0000000000004A10 gen_tempname_len proc near              ; CODE XREF: main+31F↑p
.text:0000000000004A10                                         ; main+3F5↑p ...
.text:0000000000004A10
.text:0000000000004A10 var_C           = dword ptr -0Ch
.text:0000000000004A10
.text:0000000000004A10 ; __unwind {
.text:0000000000004A10                 sub     rsp, 18h
.text:0000000000004A14                 cmp     ecx, 1
.text:0000000000004A17                 mov     [rsp+18h+var_C], edx
.text:0000000000004A1B                 jz      short loc_4A80
.text:0000000000004A1D                 cmp     ecx, 2
.text:0000000000004A20                 jz      short loc_4A48
.text:0000000000004A22                 test    ecx, ecx
.text:0000000000004A24                 jz      short loc_4A60
.text:0000000000004A26                 lea     rcx, __PRETTY_FUNCTION___5642 ; "gen_tempname_len"
.text:0000000000004A2D                 lea     rsi, file       ; "../coreutils-8.31/lib/tempname.c"
.text:0000000000004A34                 lea     rdi, s          ; "! \"invalid KIND in __gen_tempname\""
.text:0000000000004A3B                 mov     edx, 147h       ; line
.text:0000000000004A40                 call    ___assert_fail
.text:0000000000004A40 ; ---------------------------------------------------------------------------
.text:0000000000004A45                 align 8
.text:0000000000004A48
.text:0000000000004A48 loc_4A48:                               ; CODE XREF: gen_tempname_len+10↑j
.text:0000000000004A48                 lea     rdx, [rsp+18h+var_C]
.text:0000000000004A4D                 lea     rcx, try_nocreate
.text:0000000000004A54                 call    try_tempname_len
.text:0000000000004A59                 add     rsp, 18h
.text:0000000000004A5D                 retn
.text:0000000000004A5D ; ---------------------------------------------------------------------------
.text:0000000000004A5E                 align 20h
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: gen_tempname_len+14↑j
.text:0000000000004A60                 lea     rdx, [rsp+18h+var_C]
.text:0000000000004A65                 lea     rcx, try_file
.text:0000000000004A6C                 call    try_tempname_len
.text:0000000000004A71                 add     rsp, 18h
.text:0000000000004A75                 retn
.text:0000000000004A75 ; ---------------------------------------------------------------------------
.text:0000000000004A76                 align 20h
.text:0000000000004A80
.text:0000000000004A80 loc_4A80:                               ; CODE XREF: gen_tempname_len+B↑j
.text:0000000000004A80                 lea     rdx, [rsp+18h+var_C]
.text:0000000000004A85                 lea     rcx, try_dir
.text:0000000000004A8C                 call    try_tempname_len
.text:0000000000004A91                 add     rsp, 18h
.text:0000000000004A95                 retn
.text:0000000000004A95 ; } // starts at 4A10
.text:0000000000004A95 gen_tempname_len endp
.text:0000000000004A95
.text:0000000000004A95 ; ---------------------------------------------------------------------------
.text:0000000000004A96                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AA0
.text:0000000000004AA0
.text:0000000000004AA0                 public gen_tempname
.text:0000000000004AA0 gen_tempname    proc near
.text:0000000000004AA0 ; __unwind {
.text:0000000000004AA0                 mov     r8d, 6
.text:0000000000004AA6                 jmp     gen_tempname_len
.text:0000000000004AA6 ; } // starts at 4AA0
.text:0000000000004AA6 gen_tempname    endp
.text:0000000000004AA6
.text:0000000000004AA6 ; ---------------------------------------------------------------------------
.text:0000000000004AAB                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0
.text:0000000000004AB0                 public try_tempname
.text:0000000000004AB0 try_tempname    proc near
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 mov     r8d, 6
.text:0000000000004AB6                 jmp     try_tempname_len
.text:0000000000004AB6 ; } // starts at 4AB0
.text:0000000000004AB6 try_tempname    endp
.text:0000000000004AB6
.text:0000000000004AB6 ; ---------------------------------------------------------------------------
.text:0000000000004ABB                 align 20h
.text:0000000000004AC0
.text:0000000000004AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AC0
.text:0000000000004AC0
.text:0000000000004AC0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004AC0                 public version_etc_arn
.text:0000000000004AC0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4EFB↓j
.text:0000000000004AC0                                         ; version_etc_va:loc_4F4B↓p ...
.text:0000000000004AC0
.text:0000000000004AC0 var_58          = qword ptr -58h
.text:0000000000004AC0 var_50          = qword ptr -50h
.text:0000000000004AC0 var_48          = qword ptr -48h
.text:0000000000004AC0 var_40          = qword ptr -40h
.text:0000000000004AC0
.text:0000000000004AC0 ; __unwind {
.text:0000000000004AC0                 push    r15
.text:0000000000004AC2                 push    r14
.text:0000000000004AC4                 push    r13
.text:0000000000004AC6                 push    r12
.text:0000000000004AC8                 mov     r12, r9
.text:0000000000004ACB                 push    rbp
.text:0000000000004ACC                 push    rbx
.text:0000000000004ACD                 mov     rbp, rdi
.text:0000000000004AD0                 mov     rbx, r8
.text:0000000000004AD3                 sub     rsp, 28h
.text:0000000000004AD7                 test    rsi, rsi
.text:0000000000004ADA                 jz      loc_4BF8
.text:0000000000004AE0                 mov     r8, rdx
.text:0000000000004AE3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004AEA                 mov     r9, rcx
.text:0000000000004AED                 xor     eax, eax
.text:0000000000004AEF                 mov     rcx, rsi
.text:0000000000004AF2                 mov     esi, 1
.text:0000000000004AF7                 call    ___fprintf_chk
.text:0000000000004AFC
.text:0000000000004AFC loc_4AFC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004AFC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004B03                 xor     edi, edi        ; domainname
.text:0000000000004B05                 mov     edx, 5          ; category
.text:0000000000004B0A                 call    _dcgettext
.text:0000000000004B0F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004B16                 mov     rcx, rax
.text:0000000000004B19                 mov     r8d, 7E3h
.text:0000000000004B1F                 mov     esi, 1
.text:0000000000004B24                 mov     rdi, rbp
.text:0000000000004B27                 xor     eax, eax
.text:0000000000004B29                 call    ___fprintf_chk
.text:0000000000004B2E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004B35                 xor     edi, edi        ; domainname
.text:0000000000004B37                 mov     edx, 5          ; category
.text:0000000000004B3C                 call    _dcgettext
.text:0000000000004B41                 mov     rsi, rbp        ; stream
.text:0000000000004B44                 mov     rdi, rax        ; s
.text:0000000000004B47                 call    _fputs_unlocked
.text:0000000000004B4C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004B50                 ja      def_4B64        ; jumptable 0000000000004B64 default case
.text:0000000000004B56                 lea     rdx, jpt_4B64
.text:0000000000004B5D                 movsxd  rax, ds:(jpt_4B64 - 77F8h)[rdx+r12*4]
.text:0000000000004B61                 add     rax, rdx
.text:0000000000004B64                 jmp     rax             ; switch jump
.text:0000000000004B64 ; ---------------------------------------------------------------------------
.text:0000000000004B66                 align 10h
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B70                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004B70                 mov     r9, [rbx+38h]   ; jumptable 0000000000004B64 case 8
.text:0000000000004B74                 mov     rax, [rbx+10h]
.text:0000000000004B78                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004B7F                 mov     r8, [rbx+8]
.text:0000000000004B83                 mov     edx, 5          ; category
.text:0000000000004B88                 xor     edi, edi        ; domainname
.text:0000000000004B8A                 mov     r13, [rbx+30h]
.text:0000000000004B8E                 mov     r12, [rbx+28h]
.text:0000000000004B92                 mov     [rsp+58h+var_48], r9
.text:0000000000004B97                 mov     r15, [rbx+20h]
.text:0000000000004B9B                 mov     r14, [rbx+18h]
.text:0000000000004B9F                 mov     [rsp+58h+var_58], rax
.text:0000000000004BA3                 mov     [rsp+58h+var_50], r8
.text:0000000000004BA8                 mov     rbx, [rbx]
.text:0000000000004BAB                 call    _dcgettext
.text:0000000000004BB0                 sub     rsp, 8
.text:0000000000004BB4
.text:0000000000004BB4 loc_4BB4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004BB4                 mov     r9, [rsp+60h+var_48]
.text:0000000000004BB9                 mov     rdx, rax
.text:0000000000004BBC                 mov     rcx, rbx
.text:0000000000004BBF                 mov     esi, 1
.text:0000000000004BC4                 mov     rdi, rbp
.text:0000000000004BC7                 xor     eax, eax
.text:0000000000004BC9                 push    r9
.text:0000000000004BCB                 push    r13
.text:0000000000004BCD                 push    r12
.text:0000000000004BCF                 push    r15
.text:0000000000004BD1                 push    r14
.text:0000000000004BD3                 mov     r9, [rsp+88h+var_58]
.text:0000000000004BD8                 mov     r8, [rsp+88h+var_50]
.text:0000000000004BDD                 call    ___fprintf_chk
.text:0000000000004BE2                 add     rsp, 30h
.text:0000000000004BE6
.text:0000000000004BE6 loc_4BE6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004BE6                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004BE6                 add     rsp, 28h        ; jumptable 0000000000004B64 case 0
.text:0000000000004BEA                 pop     rbx
.text:0000000000004BEB                 pop     rbp
.text:0000000000004BEC                 pop     r12
.text:0000000000004BEE                 pop     r13
.text:0000000000004BF0                 pop     r14
.text:0000000000004BF2                 pop     r15
.text:0000000000004BF4                 retn
.text:0000000000004BF4 ; ---------------------------------------------------------------------------
.text:0000000000004BF5                 align 8
.text:0000000000004BF8
.text:0000000000004BF8 loc_4BF8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004BF8                 mov     r8, rcx
.text:0000000000004BFB                 mov     rcx, rdx
.text:0000000000004BFE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004C05                 mov     esi, 1
.text:0000000000004C0A                 xor     eax, eax
.text:0000000000004C0C                 call    ___fprintf_chk
.text:0000000000004C11                 jmp     loc_4AFC
.text:0000000000004C11 ; ---------------------------------------------------------------------------
.text:0000000000004C16                 align 20h
.text:0000000000004C20
.text:0000000000004C20 loc_4C20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C20                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004C20                 mov     r10, [rbx+40h]  ; jumptable 0000000000004B64 case 9
.text:0000000000004C24                 mov     r9, [rbx+38h]
.text:0000000000004C28                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004C2F                 mov     rax, [rbx+10h]
.text:0000000000004C33                 mov     r8, [rbx+8]
.text:0000000000004C37                 mov     edx, 5          ; category
.text:0000000000004C3C                 mov     r13, [rbx+30h]
.text:0000000000004C40                 mov     r12, [rbx+28h]
.text:0000000000004C44                 mov     r15, [rbx+20h]
.text:0000000000004C48                 mov     r14, [rbx+18h]
.text:0000000000004C4C                 mov     rbx, [rbx]
.text:0000000000004C4F                 mov     [rsp+58h+var_40], r10
.text:0000000000004C54                 mov     [rsp+58h+var_48], r9
.text:0000000000004C59                 mov     [rsp+58h+var_58], rax
.text:0000000000004C5D                 mov     [rsp+58h+var_50], r8
.text:0000000000004C62
.text:0000000000004C62 loc_4C62:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004C62                 xor     edi, edi        ; domainname
.text:0000000000004C64                 call    _dcgettext
.text:0000000000004C69                 mov     r10, [rsp+58h+var_40]
.text:0000000000004C6E                 push    r10
.text:0000000000004C70                 jmp     loc_4BB4
.text:0000000000004C70 ; ---------------------------------------------------------------------------
.text:0000000000004C75                 align 8
.text:0000000000004C78
.text:0000000000004C78 loc_4C78:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C78                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004C78                 mov     rbx, [rbx]      ; jumptable 0000000000004B64 case 1
.text:0000000000004C7B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004C82                 mov     edx, 5          ; category
.text:0000000000004C87                 xor     edi, edi        ; domainname
.text:0000000000004C89                 call    _dcgettext
.text:0000000000004C8E                 add     rsp, 28h
.text:0000000000004C92                 mov     rcx, rbx
.text:0000000000004C95                 mov     rdi, rbp
.text:0000000000004C98                 pop     rbx
.text:0000000000004C99                 pop     rbp
.text:0000000000004C9A                 pop     r12
.text:0000000000004C9C                 pop     r13
.text:0000000000004C9E                 pop     r14
.text:0000000000004CA0                 pop     r15
.text:0000000000004CA2                 mov     rdx, rax
.text:0000000000004CA5                 mov     esi, 1
.text:0000000000004CAA                 xor     eax, eax
.text:0000000000004CAC                 jmp     ___fprintf_chk
.text:0000000000004CAC ; ---------------------------------------------------------------------------
.text:0000000000004CB1                 align 8
.text:0000000000004CB8
.text:0000000000004CB8 loc_4CB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004CB8                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004CB8                 mov     r12, [rbx+8]    ; jumptable 0000000000004B64 case 2
.text:0000000000004CBC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004CC3                 mov     rbx, [rbx]
.text:0000000000004CC6                 mov     edx, 5          ; category
.text:0000000000004CCB                 xor     edi, edi        ; domainname
.text:0000000000004CCD                 call    _dcgettext
.text:0000000000004CD2                 add     rsp, 28h
.text:0000000000004CD6                 mov     r8, r12
.text:0000000000004CD9                 mov     rcx, rbx
.text:0000000000004CDC                 mov     rdi, rbp
.text:0000000000004CDF                 mov     rdx, rax
.text:0000000000004CE2                 mov     esi, 1
.text:0000000000004CE7                 pop     rbx
.text:0000000000004CE8                 pop     rbp
.text:0000000000004CE9                 pop     r12
.text:0000000000004CEB                 pop     r13
.text:0000000000004CED                 pop     r14
.text:0000000000004CEF                 pop     r15
.text:0000000000004CF1                 xor     eax, eax
.text:0000000000004CF3                 jmp     ___fprintf_chk
.text:0000000000004CF3 ; ---------------------------------------------------------------------------
.text:0000000000004CF8                 align 20h
.text:0000000000004D00
.text:0000000000004D00 loc_4D00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D00                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004D00                 mov     r13, [rbx+10h]  ; jumptable 0000000000004B64 case 3
.text:0000000000004D04                 mov     r12, [rbx+8]
.text:0000000000004D08                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004D0F                 mov     rbx, [rbx]
.text:0000000000004D12                 mov     edx, 5          ; category
.text:0000000000004D17                 xor     edi, edi        ; domainname
.text:0000000000004D19                 call    _dcgettext
.text:0000000000004D1E                 add     rsp, 28h
.text:0000000000004D22                 mov     r9, r13
.text:0000000000004D25                 mov     r8, r12
.text:0000000000004D28                 mov     rcx, rbx
.text:0000000000004D2B                 mov     rdi, rbp
.text:0000000000004D2E                 mov     rdx, rax
.text:0000000000004D31                 pop     rbx
.text:0000000000004D32                 pop     rbp
.text:0000000000004D33                 pop     r12
.text:0000000000004D35                 pop     r13
.text:0000000000004D37                 pop     r14
.text:0000000000004D39                 pop     r15
.text:0000000000004D3B                 mov     esi, 1
.text:0000000000004D40                 xor     eax, eax
.text:0000000000004D42                 jmp     ___fprintf_chk
.text:0000000000004D42 ; ---------------------------------------------------------------------------
.text:0000000000004D47                 align 10h
.text:0000000000004D50
.text:0000000000004D50 loc_4D50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D50                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004D50                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004B64 case 4
.text:0000000000004D57                 mov     edx, 5          ; category
.text:0000000000004D5C                 xor     edi, edi        ; domainname
.text:0000000000004D5E                 mov     r14, [rbx+18h]
.text:0000000000004D62                 mov     r13, [rbx+10h]
.text:0000000000004D66                 mov     r12, [rbx+8]
.text:0000000000004D6A                 mov     rbx, [rbx]
.text:0000000000004D6D                 call    _dcgettext
.text:0000000000004D72                 sub     rsp, 8
.text:0000000000004D76
.text:0000000000004D76 loc_4D76:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004D76                 push    r14
.text:0000000000004D78                 mov     rdx, rax
.text:0000000000004D7B                 mov     r9, r13
.text:0000000000004D7E                 mov     r8, r12
.text:0000000000004D81                 mov     rcx, rbx
.text:0000000000004D84                 mov     rdi, rbp
.text:0000000000004D87                 mov     esi, 1
.text:0000000000004D8C                 xor     eax, eax
.text:0000000000004D8E                 call    ___fprintf_chk
.text:0000000000004D93                 pop     rax
.text:0000000000004D94                 pop     rdx
.text:0000000000004D95                 add     rsp, 28h
.text:0000000000004D99                 pop     rbx
.text:0000000000004D9A                 pop     rbp
.text:0000000000004D9B                 pop     r12
.text:0000000000004D9D                 pop     r13
.text:0000000000004D9F                 pop     r14
.text:0000000000004DA1                 pop     r15
.text:0000000000004DA3                 retn
.text:0000000000004DA3 ; ---------------------------------------------------------------------------
.text:0000000000004DA4                 align 8
.text:0000000000004DA8
.text:0000000000004DA8 loc_4DA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004DA8                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004DA8                 mov     r15, [rbx+20h]  ; jumptable 0000000000004B64 case 5
.text:0000000000004DAC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004DB3                 mov     edx, 5          ; category
.text:0000000000004DB8                 xor     edi, edi        ; domainname
.text:0000000000004DBA                 mov     r14, [rbx+18h]
.text:0000000000004DBE                 mov     r13, [rbx+10h]
.text:0000000000004DC2                 mov     r12, [rbx+8]
.text:0000000000004DC6                 mov     rbx, [rbx]
.text:0000000000004DC9                 call    _dcgettext
.text:0000000000004DCE                 push    r15
.text:0000000000004DD0                 jmp     short loc_4D76
.text:0000000000004DD0 ; ---------------------------------------------------------------------------
.text:0000000000004DD2                 align 8
.text:0000000000004DD8
.text:0000000000004DD8 loc_4DD8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004DD8                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004DD8                 mov     r8, [rbx+8]     ; jumptable 0000000000004B64 case 6
.text:0000000000004DDC                 mov     r12, [rbx+28h]
.text:0000000000004DE0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004DE7                 mov     r15, [rbx+20h]
.text:0000000000004DEB                 mov     r14, [rbx+18h]
.text:0000000000004DEF                 mov     edx, 5          ; category
.text:0000000000004DF4                 mov     r13, [rbx+10h]
.text:0000000000004DF8                 xor     edi, edi        ; domainname
.text:0000000000004DFA                 mov     rbx, [rbx]
.text:0000000000004DFD                 mov     [rsp+58h+var_58], r8
.text:0000000000004E01                 call    _dcgettext
.text:0000000000004E06                 sub     rsp, 8
.text:0000000000004E0A                 mov     r9, r13
.text:0000000000004E0D                 push    r12
.text:0000000000004E0F                 push    r15
.text:0000000000004E11                 push    r14
.text:0000000000004E13
.text:0000000000004E13 loc_4E13:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004E13                 mov     r8, [rsp+78h+var_58]
.text:0000000000004E18                 mov     rcx, rbx
.text:0000000000004E1B                 mov     rdx, rax
.text:0000000000004E1E                 mov     rdi, rbp
.text:0000000000004E21                 mov     esi, 1
.text:0000000000004E26                 xor     eax, eax
.text:0000000000004E28                 call    ___fprintf_chk
.text:0000000000004E2D                 add     rsp, 20h
.text:0000000000004E31                 add     rsp, 28h
.text:0000000000004E35                 pop     rbx
.text:0000000000004E36                 pop     rbp
.text:0000000000004E37                 pop     r12
.text:0000000000004E39                 pop     r13
.text:0000000000004E3B                 pop     r14
.text:0000000000004E3D                 pop     r15
.text:0000000000004E3F                 retn
.text:0000000000004E40 ; ---------------------------------------------------------------------------
.text:0000000000004E40
.text:0000000000004E40 loc_4E40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E40                                         ; DATA XREF: .rodata:jpt_4B64↓o
.text:0000000000004E40                 mov     r9, [rbx+10h]   ; jumptable 0000000000004B64 case 7
.text:0000000000004E44                 mov     r13, [rbx+30h]
.text:0000000000004E48                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004E4F                 mov     r12, [rbx+28h]
.text:0000000000004E53                 mov     r15, [rbx+20h]
.text:0000000000004E57                 mov     edx, 5          ; category
.text:0000000000004E5C                 mov     r14, [rbx+18h]
.text:0000000000004E60                 mov     r8, [rbx+8]
.text:0000000000004E64                 xor     edi, edi        ; domainname
.text:0000000000004E66                 mov     [rsp+58h+var_50], r9
.text:0000000000004E6B                 mov     rbx, [rbx]
.text:0000000000004E6E                 mov     [rsp+58h+var_58], r8
.text:0000000000004E72                 call    _dcgettext
.text:0000000000004E77                 push    r13
.text:0000000000004E79                 push    r12
.text:0000000000004E7B                 push    r15
.text:0000000000004E7D                 push    r14
.text:0000000000004E7F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004E84                 jmp     short loc_4E13
.text:0000000000004E84 ; ---------------------------------------------------------------------------
.text:0000000000004E86                 align 10h
.text:0000000000004E90
.text:0000000000004E90 def_4B64:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004E90                 mov     r10, [rbx+40h]  ; jumptable 0000000000004B64 default case
.text:0000000000004E94                 mov     r9, [rbx+38h]
.text:0000000000004E98                 mov     edx, 5
.text:0000000000004E9D                 mov     rax, [rbx+10h]
.text:0000000000004EA1                 mov     r8, [rbx+8]
.text:0000000000004EA5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004EAC                 mov     r13, [rbx+30h]
.text:0000000000004EB0                 mov     r12, [rbx+28h]
.text:0000000000004EB4                 mov     r15, [rbx+20h]
.text:0000000000004EB8                 mov     r14, [rbx+18h]
.text:0000000000004EBC                 mov     [rsp+58h+var_40], r10
.text:0000000000004EC1                 mov     [rsp+58h+var_48], r9
.text:0000000000004EC6                 mov     [rsp+58h+var_58], rax
.text:0000000000004ECA                 mov     [rsp+58h+var_50], r8
.text:0000000000004ECF                 mov     rbx, [rbx]
.text:0000000000004ED2                 jmp     loc_4C62
.text:0000000000004ED2 ; } // starts at 4AC0
.text:0000000000004ED2 version_etc_arn endp
.text:0000000000004ED2
.text:0000000000004ED2 ; ---------------------------------------------------------------------------
.text:0000000000004ED7                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EE0
.text:0000000000004EE0 ; Attributes: info_from_lumina
.text:0000000000004EE0
.text:0000000000004EE0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004EE0                 public version_etc_ar
.text:0000000000004EE0 version_etc_ar  proc near
.text:0000000000004EE0 ; __unwind {
.text:0000000000004EE0                 xor     r9d, r9d
.text:0000000000004EE3                 cmp     qword ptr [r8], 0
.text:0000000000004EE7                 jz      short loc_4EFB
.text:0000000000004EE9                 nop     dword ptr [rax+00000000h]
.text:0000000000004EF0
.text:0000000000004EF0 loc_4EF0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004EF0                 add     r9, 1
.text:0000000000004EF4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004EF9                 jnz     short loc_4EF0
.text:0000000000004EFB
.text:0000000000004EFB loc_4EFB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004EFB                 jmp     version_etc_arn
.text:0000000000004EFB ; } // starts at 4EE0
.text:0000000000004EFB version_etc_ar  endp
.text:0000000000004EFB
.text:0000000000004F00
.text:0000000000004F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F00
.text:0000000000004F00 ; Attributes: info_from_lumina
.text:0000000000004F00
.text:0000000000004F00 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004F00                 public version_etc_va
.text:0000000000004F00 version_etc_va  proc near
.text:0000000000004F00
.text:0000000000004F00 authtab         = qword ptr -68h
.text:0000000000004F00 var_10          = qword ptr -10h
.text:0000000000004F00
.text:0000000000004F00 ; __unwind {
.text:0000000000004F00                 sub     rsp, 68h
.text:0000000000004F04                 mov     r10, r8
.text:0000000000004F07                 xor     r9d, r9d
.text:0000000000004F0A                 mov     rax, fs:28h
.text:0000000000004F13                 mov     [rsp+68h+var_10], rax
.text:0000000000004F18                 xor     eax, eax
.text:0000000000004F1A                 mov     r8, rsp
.text:0000000000004F1D                 nop     dword ptr [rax]
.text:0000000000004F20
.text:0000000000004F20 loc_4F20:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004F20                 mov     eax, [r10]
.text:0000000000004F23                 cmp     eax, 2Fh ; '/'
.text:0000000000004F26                 ja      short loc_4F6A
.text:0000000000004F28                 mov     r11d, eax
.text:0000000000004F2B                 add     r11, [r10+10h]
.text:0000000000004F2F                 add     eax, 8
.text:0000000000004F32                 mov     [r10], eax
.text:0000000000004F35
.text:0000000000004F35 loc_4F35:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004F35                 mov     rax, [r11]
.text:0000000000004F38                 test    rax, rax
.text:0000000000004F3B                 mov     [r8+r9*8], rax
.text:0000000000004F3F                 jz      short loc_4F4B
.text:0000000000004F41                 add     r9, 1
.text:0000000000004F45                 cmp     r9, 0Ah
.text:0000000000004F49                 jnz     short loc_4F20
.text:0000000000004F4B
.text:0000000000004F4B loc_4F4B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004F4B                 call    version_etc_arn
.text:0000000000004F50                 mov     rax, [rsp+68h+var_10]
.text:0000000000004F55                 xor     rax, fs:28h
.text:0000000000004F5E                 jnz     short loc_4F65
.text:0000000000004F60                 add     rsp, 68h
.text:0000000000004F64                 retn
.text:0000000000004F65 ; ---------------------------------------------------------------------------
.text:0000000000004F65
.text:0000000000004F65 loc_4F65:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004F65                 call    ___stack_chk_fail
.text:0000000000004F6A ; ---------------------------------------------------------------------------
.text:0000000000004F6A
.text:0000000000004F6A loc_4F6A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004F6A                 mov     r11, [r10+8]
.text:0000000000004F6E                 lea     rax, [r11+8]
.text:0000000000004F72                 mov     [r10+8], rax
.text:0000000000004F76                 jmp     short loc_4F35
.text:0000000000004F76 ; } // starts at 4F00
.text:0000000000004F76 version_etc_va  endp
.text:0000000000004F76
.text:0000000000004F76 ; ---------------------------------------------------------------------------
.text:0000000000004F78                 align 20h
.text:0000000000004F80
.text:0000000000004F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F80
.text:0000000000004F80 ; Attributes: info_from_lumina
.text:0000000000004F80
.text:0000000000004F80 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004F80                 public version_etc
.text:0000000000004F80 version_etc     proc near               ; CODE XREF: main+188↑p
.text:0000000000004F80
.text:0000000000004F80 var_C0          = dword ptr -0C0h
.text:0000000000004F80 var_B8          = qword ptr -0B8h
.text:0000000000004F80 var_B0          = qword ptr -0B0h
.text:0000000000004F80 var_A8          = byte ptr -0A8h
.text:0000000000004F80 var_50          = qword ptr -50h
.text:0000000000004F80 var_48          = byte ptr -48h
.text:0000000000004F80 var_28          = qword ptr -28h
.text:0000000000004F80 var_20          = qword ptr -20h
.text:0000000000004F80 arg_0           = byte ptr  8
.text:0000000000004F80
.text:0000000000004F80 ; __unwind {
.text:0000000000004F80                 push    rbp
.text:0000000000004F81                 push    rbx
.text:0000000000004F82                 mov     r10d, 20h ; ' '
.text:0000000000004F88                 xor     r11d, r11d
.text:0000000000004F8B                 sub     rsp, 0B8h
.text:0000000000004F92                 mov     rax, fs:28h
.text:0000000000004F9B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004FA0                 xor     eax, eax
.text:0000000000004FA2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004FAA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004FB2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004FBA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004FBF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004FC7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004FCF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004FD4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004FDC                 xor     r9d, r9d
.text:0000000000004FDF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004FE4                 mov     rbp, rax
.text:0000000000004FE7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004FF0
.text:0000000000004FF0 loc_4FF0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004FF0                 cmp     r10d, 2Fh ; '/'
.text:0000000000004FF4                 ja      short loc_504C
.text:0000000000004FF6                 mov     eax, r10d
.text:0000000000004FF9                 mov     r11d, 1
.text:0000000000004FFF                 add     r10d, 8
.text:0000000000005003                 add     rax, rbp
.text:0000000000005006
.text:0000000000005006 loc_5006:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005006                 mov     rax, [rax]
.text:0000000000005009                 test    rax, rax
.text:000000000000500C                 mov     [r8+r9*8], rax
.text:0000000000005010                 jz      short loc_501C
.text:0000000000005012                 add     r9, 1
.text:0000000000005016                 cmp     r9, 0Ah
.text:000000000000501A                 jnz     short loc_4FF0
.text:000000000000501C
.text:000000000000501C loc_501C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000501C                 test    r11b, r11b
.text:000000000000501F                 jnz     short loc_5045
.text:0000000000005021
.text:0000000000005021 loc_5021:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005021                 call    version_etc_arn
.text:0000000000005026                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000502B                 xor     rax, fs:28h
.text:0000000000005034                 jnz     short loc_5040
.text:0000000000005036                 add     rsp, 0B8h
.text:000000000000503D                 pop     rbx
.text:000000000000503E                 pop     rbp
.text:000000000000503F                 retn
.text:0000000000005040 ; ---------------------------------------------------------------------------
.text:0000000000005040
.text:0000000000005040 loc_5040:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005040                 call    ___stack_chk_fail
.text:0000000000005045 ; ---------------------------------------------------------------------------
.text:0000000000005045
.text:0000000000005045 loc_5045:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005045                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000504A                 jmp     short loc_5021
.text:000000000000504C ; ---------------------------------------------------------------------------
.text:000000000000504C
.text:000000000000504C loc_504C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000504C                 mov     rax, rbx
.text:000000000000504F                 add     rbx, 8
.text:0000000000005053                 jmp     short loc_5006
.text:0000000000005053 ; } // starts at 4F80
.text:0000000000005053 version_etc     endp
.text:0000000000005053
.text:0000000000005053 ; ---------------------------------------------------------------------------
.text:0000000000005055                 align 20h
.text:0000000000005060
.text:0000000000005060 ; =============== S U B R O U T I N E =======================================
.text:0000000000005060
.text:0000000000005060 ; Attributes: info_from_lumina
.text:0000000000005060
.text:0000000000005060 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005060                 public emit_bug_reporting_address
.text:0000000000005060 emit_bug_reporting_address proc near
.text:0000000000005060 ; __unwind {
.text:0000000000005060                 push    rbx
.text:0000000000005061                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005068                 mov     edx, 5          ; category
.text:000000000000506D                 xor     edi, edi        ; domainname
.text:000000000000506F                 call    _dcgettext
.text:0000000000005074                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000507B                 mov     rsi, rax
.text:000000000000507E                 mov     edi, 1
.text:0000000000005083                 xor     eax, eax
.text:0000000000005085                 call    ___printf_chk
.text:000000000000508A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005091                 mov     edx, 5          ; category
.text:0000000000005096                 xor     edi, edi        ; domainname
.text:0000000000005098                 call    _dcgettext
.text:000000000000509D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000050A4                 lea     rdx, unk_66A1
.text:00000000000050AB                 mov     rsi, rax
.text:00000000000050AE                 mov     edi, 1
.text:00000000000050B3                 xor     eax, eax
.text:00000000000050B5                 call    ___printf_chk
.text:00000000000050BA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000050C1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000050C8                 xor     edi, edi        ; domainname
.text:00000000000050CA                 mov     edx, 5          ; category
.text:00000000000050CF                 call    _dcgettext
.text:00000000000050D4                 mov     rsi, rbx        ; stream
.text:00000000000050D7                 mov     rdi, rax        ; s
.text:00000000000050DA                 pop     rbx
.text:00000000000050DB                 jmp     _fputs_unlocked
.text:00000000000050DB ; } // starts at 5060
.text:00000000000050DB emit_bug_reporting_address endp
.text:00000000000050DB
.text:00000000000050E0
.text:00000000000050E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050E0
.text:00000000000050E0
.text:00000000000050E0                 public xmalloc
.text:00000000000050E0 xmalloc         proc near               ; CODE XREF: main+203↑p
.text:00000000000050E0                                         ; quotearg_n_options+127↑p ...
.text:00000000000050E0 ; __unwind {
.text:00000000000050E0                 push    rbx
.text:00000000000050E1                 mov     rbx, rdi
.text:00000000000050E4                 call    _malloc
.text:00000000000050E9                 test    rax, rax
.text:00000000000050EC                 jnz     short loc_50F3
.text:00000000000050EE                 test    rbx, rbx
.text:00000000000050F1                 jnz     short loc_50F5
.text:00000000000050F3
.text:00000000000050F3 loc_50F3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000050F3                 pop     rbx
.text:00000000000050F4                 retn
.text:00000000000050F5 ; ---------------------------------------------------------------------------
.text:00000000000050F5
.text:00000000000050F5 loc_50F5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000050F5                 call    xalloc_die
.text:00000000000050F5 ; } // starts at 50E0
.text:00000000000050F5 xmalloc         endp
.text:00000000000050F5
.text:00000000000050F5 ; ---------------------------------------------------------------------------
.text:00000000000050FA                 align 20h
.text:0000000000005100
.text:0000000000005100 ; =============== S U B R O U T I N E =======================================
.text:0000000000005100
.text:0000000000005100 ; Attributes: info_from_lumina
.text:0000000000005100
.text:0000000000005100 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005100                 public xnmalloc
.text:0000000000005100 xnmalloc        proc near
.text:0000000000005100 ; __unwind {
.text:0000000000005100                 mov     rax, rdi
.text:0000000000005103                 mul     rsi
.text:0000000000005106                 mov     rdi, rax
.text:0000000000005109                 seto    al
.text:000000000000510C                 test    rdi, rdi
.text:000000000000510F                 js      short loc_511B
.text:0000000000005111                 movzx   eax, al
.text:0000000000005114                 test    rax, rax
.text:0000000000005117                 jnz     short loc_511B
.text:0000000000005119                 jmp     short xmalloc
.text:000000000000511B ; ---------------------------------------------------------------------------
.text:000000000000511B
.text:000000000000511B loc_511B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000511B                                         ; xnmalloc+17↑j
.text:000000000000511B                 sub     rsp, 8
.text:000000000000511F                 call    xalloc_die
.text:000000000000511F ; } // starts at 5100
.text:000000000000511F xnmalloc        endp
.text:000000000000511F
.text:000000000000511F ; ---------------------------------------------------------------------------
.text:0000000000005124                 align 10h
.text:0000000000005130
.text:0000000000005130 ; =============== S U B R O U T I N E =======================================
.text:0000000000005130
.text:0000000000005130
.text:0000000000005130                 public xcharalloc
.text:0000000000005130 xcharalloc      proc near
.text:0000000000005130 ; __unwind {
.text:0000000000005130                 jmp     short xmalloc
.text:0000000000005130 ; } // starts at 5130
.text:0000000000005130 xcharalloc      endp
.text:0000000000005130
.text:0000000000005130 ; ---------------------------------------------------------------------------
.text:0000000000005132                 align 20h
.text:0000000000005140
.text:0000000000005140 ; =============== S U B R O U T I N E =======================================
.text:0000000000005140
.text:0000000000005140 ; Attributes: info_from_lumina
.text:0000000000005140
.text:0000000000005140 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005140                 public xrealloc
.text:0000000000005140 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005140                                         ; quotearg_n_options+182↑p ...
.text:0000000000005140 ; __unwind {
.text:0000000000005140                 test    rsi, rsi
.text:0000000000005143                 push    rbx
.text:0000000000005144                 mov     rbx, rsi
.text:0000000000005147                 jnz     short loc_514E
.text:0000000000005149                 test    rdi, rdi
.text:000000000000514C                 jnz     short loc_5168
.text:000000000000514E
.text:000000000000514E loc_514E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000514E                 mov     rsi, rbx        ; size
.text:0000000000005151                 call    _realloc
.text:0000000000005156                 test    rax, rax
.text:0000000000005159                 jnz     short loc_5160
.text:000000000000515B                 test    rbx, rbx
.text:000000000000515E                 jnz     short loc_5171
.text:0000000000005160
.text:0000000000005160 loc_5160:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005160                 pop     rbx
.text:0000000000005161                 retn
.text:0000000000005161 ; ---------------------------------------------------------------------------
.text:0000000000005162                 align 8
.text:0000000000005168
.text:0000000000005168 loc_5168:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005168                 call    _free
.text:000000000000516D                 xor     eax, eax
.text:000000000000516F                 pop     rbx
.text:0000000000005170                 retn
.text:0000000000005171 ; ---------------------------------------------------------------------------
.text:0000000000005171
.text:0000000000005171 loc_5171:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005171                 call    xalloc_die
.text:0000000000005171 ; } // starts at 5140
.text:0000000000005171 xrealloc        endp
.text:0000000000005171
.text:0000000000005171 ; ---------------------------------------------------------------------------
.text:0000000000005176                 align 20h
.text:0000000000005180
.text:0000000000005180 ; =============== S U B R O U T I N E =======================================
.text:0000000000005180
.text:0000000000005180 ; Attributes: info_from_lumina
.text:0000000000005180
.text:0000000000005180 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005180                 public xnrealloc
.text:0000000000005180 xnrealloc       proc near
.text:0000000000005180 ; __unwind {
.text:0000000000005180                 mov     rax, rsi
.text:0000000000005183                 mul     rdx
.text:0000000000005186                 mov     rsi, rax
.text:0000000000005189                 seto    al
.text:000000000000518C                 test    rsi, rsi
.text:000000000000518F                 js      short loc_519B
.text:0000000000005191                 movzx   eax, al
.text:0000000000005194                 test    rax, rax
.text:0000000000005197                 jnz     short loc_519B
.text:0000000000005199                 jmp     short xrealloc
.text:000000000000519B ; ---------------------------------------------------------------------------
.text:000000000000519B
.text:000000000000519B loc_519B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000519B                                         ; xnrealloc+17↑j
.text:000000000000519B                 sub     rsp, 8
.text:000000000000519F                 call    xalloc_die
.text:000000000000519F ; } // starts at 5180
.text:000000000000519F xnrealloc       endp
.text:000000000000519F
.text:000000000000519F ; ---------------------------------------------------------------------------
.text:00000000000051A4                 align 10h
.text:00000000000051B0
.text:00000000000051B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051B0
.text:00000000000051B0 ; Attributes: info_from_lumina
.text:00000000000051B0
.text:00000000000051B0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000051B0                 public x2nrealloc
.text:00000000000051B0 x2nrealloc      proc near
.text:00000000000051B0 ; __unwind {
.text:00000000000051B0                 test    rdi, rdi
.text:00000000000051B3                 mov     r9, rdx
.text:00000000000051B6                 mov     rcx, [rsi]
.text:00000000000051B9                 jz      short loc_51F0
.text:00000000000051BB                 xor     edx, edx
.text:00000000000051BD                 mov     rax, 5555555555555554h
.text:00000000000051C7                 div     r9
.text:00000000000051CA                 cmp     rax, rcx
.text:00000000000051CD                 jbe     short loc_520B
.text:00000000000051CF                 mov     rax, rcx
.text:00000000000051D2                 shr     rax, 1
.text:00000000000051D5                 lea     rcx, [rax+rcx+1]
.text:00000000000051DA
.text:00000000000051DA loc_51DA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000051DA                 mov     [rsi], rcx
.text:00000000000051DD                 imul    rcx, r9
.text:00000000000051E1                 mov     rsi, rcx
.text:00000000000051E4                 jmp     xrealloc
.text:00000000000051E4 ; ---------------------------------------------------------------------------
.text:00000000000051E9                 align 10h
.text:00000000000051F0
.text:00000000000051F0 loc_51F0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000051F0                 test    rcx, rcx
.text:00000000000051F3                 jz      short loc_5218
.text:00000000000051F5
.text:00000000000051F5 loc_51F5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000051F5                 mov     rax, rcx
.text:00000000000051F8                 mul     r9
.text:00000000000051FB                 seto    dl
.text:00000000000051FE                 test    rax, rax
.text:0000000000005201                 movzx   edx, dl
.text:0000000000005204                 js      short loc_520B
.text:0000000000005206                 test    rdx, rdx
.text:0000000000005209                 jz      short loc_51DA
.text:000000000000520B
.text:000000000000520B loc_520B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000520B                                         ; x2nrealloc+54↑j
.text:000000000000520B                 sub     rsp, 8
.text:000000000000520F                 call    xalloc_die
.text:000000000000520F ; ---------------------------------------------------------------------------
.text:0000000000005214                 align 8
.text:0000000000005218
.text:0000000000005218 loc_5218:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005218                 xor     edx, edx
.text:000000000000521A                 mov     eax, 80h
.text:000000000000521F                 xor     r8d, r8d
.text:0000000000005222                 div     r9
.text:0000000000005225                 test    rax, rax
.text:0000000000005228                 setz    r8b
.text:000000000000522C                 lea     rcx, [r8+rax]
.text:0000000000005230                 jmp     short loc_51F5
.text:0000000000005230 ; } // starts at 51B0
.text:0000000000005230 x2nrealloc      endp
.text:0000000000005230
.text:0000000000005230 ; ---------------------------------------------------------------------------
.text:0000000000005232                 align 20h
.text:0000000000005240
.text:0000000000005240 ; =============== S U B R O U T I N E =======================================
.text:0000000000005240
.text:0000000000005240 ; Attributes: info_from_lumina
.text:0000000000005240
.text:0000000000005240 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005240                 public x2realloc
.text:0000000000005240 x2realloc       proc near
.text:0000000000005240 ; __unwind {
.text:0000000000005240                 test    rdi, rdi
.text:0000000000005243                 mov     rax, [rsi]
.text:0000000000005246                 jz      short loc_5270
.text:0000000000005248                 mov     rdx, 5555555555555553h
.text:0000000000005252                 cmp     rax, rdx
.text:0000000000005255                 ja      short loc_5281
.text:0000000000005257                 mov     rdx, rax
.text:000000000000525A                 shr     rdx, 1
.text:000000000000525D                 lea     rax, [rdx+rax+1]
.text:0000000000005262
.text:0000000000005262 loc_5262:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005262                 mov     [rsi], rax
.text:0000000000005265                 mov     rsi, rax
.text:0000000000005268                 jmp     xrealloc
.text:0000000000005268 ; ---------------------------------------------------------------------------
.text:000000000000526D                 align 10h
.text:0000000000005270
.text:0000000000005270 loc_5270:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005270                 test    rax, rax
.text:0000000000005273                 mov     edx, 80h
.text:0000000000005278                 cmovz   rax, rdx
.text:000000000000527C                 test    rax, rax
.text:000000000000527F                 jns     short loc_5262
.text:0000000000005281
.text:0000000000005281 loc_5281:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005281                 sub     rsp, 8
.text:0000000000005285                 call    xalloc_die
.text:0000000000005285 ; } // starts at 5240
.text:0000000000005285 x2realloc       endp
.text:0000000000005285
.text:0000000000005285 ; ---------------------------------------------------------------------------
.text:000000000000528A                 align 10h
.text:0000000000005290
.text:0000000000005290 ; =============== S U B R O U T I N E =======================================
.text:0000000000005290
.text:0000000000005290
.text:0000000000005290 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005290                 public xzalloc
.text:0000000000005290 xzalloc         proc near
.text:0000000000005290 ; __unwind {
.text:0000000000005290                 push    rbx
.text:0000000000005291                 mov     rbx, rdi
.text:0000000000005294                 call    xmalloc
.text:0000000000005299                 mov     rdx, rbx        ; n
.text:000000000000529C                 xor     esi, esi        ; c
.text:000000000000529E                 mov     rdi, rax        ; s
.text:00000000000052A1                 pop     rbx
.text:00000000000052A2                 jmp     _memset
.text:00000000000052A2 ; } // starts at 5290
.text:00000000000052A2 xzalloc         endp
.text:00000000000052A2
.text:00000000000052A2 ; ---------------------------------------------------------------------------
.text:00000000000052A7                 align 10h
.text:00000000000052B0
.text:00000000000052B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052B0
.text:00000000000052B0 ; Attributes: info_from_lumina
.text:00000000000052B0
.text:00000000000052B0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000052B0                 public xcalloc
.text:00000000000052B0 xcalloc         proc near
.text:00000000000052B0 ; __unwind {
.text:00000000000052B0                 mov     rax, rdi
.text:00000000000052B3                 sub     rsp, 8
.text:00000000000052B7                 mul     rsi
.text:00000000000052BA                 seto    dl
.text:00000000000052BD                 test    rax, rax
.text:00000000000052C0                 js      short loc_52D9
.text:00000000000052C2                 movzx   edx, dl
.text:00000000000052C5                 test    rdx, rdx
.text:00000000000052C8                 jnz     short loc_52D9
.text:00000000000052CA                 call    _calloc
.text:00000000000052CF                 test    rax, rax
.text:00000000000052D2                 jz      short loc_52D9
.text:00000000000052D4                 add     rsp, 8
.text:00000000000052D8                 retn
.text:00000000000052D9 ; ---------------------------------------------------------------------------
.text:00000000000052D9
.text:00000000000052D9 loc_52D9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000052D9                                         ; xcalloc+18↑j ...
.text:00000000000052D9                 call    xalloc_die
.text:00000000000052D9 ; } // starts at 52B0
.text:00000000000052D9 xcalloc         endp
.text:00000000000052D9
.text:00000000000052D9 ; ---------------------------------------------------------------------------
.text:00000000000052DE                 align 20h
.text:00000000000052E0
.text:00000000000052E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052E0
.text:00000000000052E0 ; Attributes: info_from_lumina
.text:00000000000052E0
.text:00000000000052E0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000052E0                 public xmemdup
.text:00000000000052E0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000052E0                                         ; xstrdup+11↓j
.text:00000000000052E0 ; __unwind {
.text:00000000000052E0                 push    rbp
.text:00000000000052E1                 push    rbx
.text:00000000000052E2                 mov     rbp, rdi
.text:00000000000052E5                 mov     rdi, rsi
.text:00000000000052E8                 mov     rbx, rsi
.text:00000000000052EB                 sub     rsp, 8
.text:00000000000052EF                 call    xmalloc
.text:00000000000052F4                 add     rsp, 8
.text:00000000000052F8                 mov     rdx, rbx        ; n
.text:00000000000052FB                 mov     rsi, rbp        ; src
.text:00000000000052FE                 pop     rbx
.text:00000000000052FF                 pop     rbp
.text:0000000000005300                 mov     rdi, rax        ; dest
.text:0000000000005303                 jmp     _memcpy
.text:0000000000005303 ; } // starts at 52E0
.text:0000000000005303 xmemdup         endp
.text:0000000000005303
.text:0000000000005303 ; ---------------------------------------------------------------------------
.text:0000000000005308                 align 10h
.text:0000000000005310
.text:0000000000005310 ; =============== S U B R O U T I N E =======================================
.text:0000000000005310
.text:0000000000005310
.text:0000000000005310 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005310                 public xstrdup
.text:0000000000005310 xstrdup         proc near               ; CODE XREF: main+2F6↑p
.text:0000000000005310                                         ; main+5CE↑p
.text:0000000000005310 ; __unwind {
.text:0000000000005310                 push    rbx
.text:0000000000005311                 mov     rbx, rdi
.text:0000000000005314                 call    _strlen
.text:0000000000005319                 mov     rdi, rbx        ; src
.text:000000000000531C                 lea     rsi, [rax+1]    ; n
.text:0000000000005320                 pop     rbx
.text:0000000000005321                 jmp     short xmemdup
.text:0000000000005321 ; } // starts at 5310
.text:0000000000005321 xstrdup         endp
.text:0000000000005321
.text:0000000000005321 ; ---------------------------------------------------------------------------
.text:0000000000005323                 align 10h
.text:0000000000005330
.text:0000000000005330 ; =============== S U B R O U T I N E =======================================
.text:0000000000005330
.text:0000000000005330 ; Attributes: noreturn info_from_lumina
.text:0000000000005330
.text:0000000000005330 ; void __cdecl xalloc_die()
.text:0000000000005330                 public xalloc_die
.text:0000000000005330 xalloc_die      proc near               ; CODE XREF: file_name_concat:loc_29A3↑p
.text:0000000000005330                                         ; quotearg_n_options:loc_4026↑p ...
.text:0000000000005330 ; __unwind {
.text:0000000000005330                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005337                 sub     rsp, 8
.text:000000000000533B                 mov     edx, 5          ; category
.text:0000000000005340                 xor     edi, edi        ; domainname
.text:0000000000005342                 call    _dcgettext
.text:0000000000005347                 mov     edi, cs:exit_failure ; status
.text:000000000000534D                 lea     rdx, format+4   ; format
.text:0000000000005354                 mov     rcx, rax
.text:0000000000005357                 xor     esi, esi        ; errnum
.text:0000000000005359                 xor     eax, eax
.text:000000000000535B                 call    _error
.text:0000000000005360                 call    _abort
.text:0000000000005360 ; } // starts at 5330
.text:0000000000005360 xalloc_die      endp
.text:0000000000005360
.text:0000000000005360 ; ---------------------------------------------------------------------------
.text:0000000000005365                 align 10h
.text:0000000000005370
.text:0000000000005370 ; =============== S U B R O U T I N E =======================================
.text:0000000000005370
.text:0000000000005370 ; Attributes: info_from_lumina
.text:0000000000005370
.text:0000000000005370 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005370                 public rpl_fclose
.text:0000000000005370 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000005370                                         ; randread_free+33↓j ...
.text:0000000000005370 ; __unwind {
.text:0000000000005370                 push    r12
.text:0000000000005372                 push    rbp
.text:0000000000005373                 push    rbx
.text:0000000000005374                 mov     rbx, rdi
.text:0000000000005377                 call    _fileno
.text:000000000000537C                 test    eax, eax
.text:000000000000537E                 mov     rdi, rbx        ; fp
.text:0000000000005381                 js      short loc_53D7
.text:0000000000005383                 call    ___freading
.text:0000000000005388                 test    eax, eax
.text:000000000000538A                 jnz     short loc_53B8
.text:000000000000538C
.text:000000000000538C loc_538C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000538C                 mov     rdi, rbx        ; stream
.text:000000000000538F                 call    rpl_fflush
.text:0000000000005394                 test    eax, eax
.text:0000000000005396                 jz      short loc_53D4
.text:0000000000005398                 call    ___errno_location
.text:000000000000539D                 mov     r12d, [rax]
.text:00000000000053A0                 mov     rdi, rbx        ; stream
.text:00000000000053A3                 mov     rbp, rax
.text:00000000000053A6                 call    _fclose
.text:00000000000053AB                 test    r12d, r12d
.text:00000000000053AE                 jnz     short loc_53E0
.text:00000000000053B0
.text:00000000000053B0 loc_53B0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000053B0                 pop     rbx
.text:00000000000053B1                 pop     rbp
.text:00000000000053B2                 pop     r12
.text:00000000000053B4                 retn
.text:00000000000053B4 ; ---------------------------------------------------------------------------
.text:00000000000053B5                 align 8
.text:00000000000053B8
.text:00000000000053B8 loc_53B8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000053B8                 mov     rdi, rbx        ; stream
.text:00000000000053BB                 call    _fileno
.text:00000000000053C0                 xor     esi, esi        ; offset
.text:00000000000053C2                 mov     edx, 1          ; whence
.text:00000000000053C7                 mov     edi, eax        ; fd
.text:00000000000053C9                 call    _lseek
.text:00000000000053CE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000053D2                 jnz     short loc_538C
.text:00000000000053D4
.text:00000000000053D4 loc_53D4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000053D4                 mov     rdi, rbx        ; stream
.text:00000000000053D7
.text:00000000000053D7 loc_53D7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000053D7                 pop     rbx
.text:00000000000053D8                 pop     rbp
.text:00000000000053D9                 pop     r12
.text:00000000000053DB                 jmp     _fclose
.text:00000000000053E0 ; ---------------------------------------------------------------------------
.text:00000000000053E0
.text:00000000000053E0 loc_53E0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000053E0                 mov     [rbp+0], r12d
.text:00000000000053E4                 mov     eax, 0FFFFFFFFh
.text:00000000000053E9                 jmp     short loc_53B0
.text:00000000000053E9 ; } // starts at 5370
.text:00000000000053E9 rpl_fclose      endp
.text:00000000000053E9
.text:00000000000053E9 ; ---------------------------------------------------------------------------
.text:00000000000053EB                 align 10h
.text:00000000000053F0
.text:00000000000053F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053F0
.text:00000000000053F0 ; Attributes: info_from_lumina
.text:00000000000053F0
.text:00000000000053F0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000053F0                 public rpl_fflush
.text:00000000000053F0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000053F0 ; __unwind {
.text:00000000000053F0                 test    rdi, rdi
.text:00000000000053F3                 push    rbx
.text:00000000000053F4                 mov     rbx, rdi
.text:00000000000053F7                 jz      short loc_540A
.text:00000000000053F9                 call    ___freading
.text:00000000000053FE                 test    eax, eax
.text:0000000000005400                 jz      short loc_540A
.text:0000000000005402                 test    dword ptr [rbx], 100h
.text:0000000000005408                 jnz     short loc_5418
.text:000000000000540A
.text:000000000000540A loc_540A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000540A                                         ; rpl_fflush+10↑j
.text:000000000000540A                 mov     rdi, rbx        ; stream
.text:000000000000540D                 pop     rbx
.text:000000000000540E                 jmp     _fflush
.text:000000000000540E ; ---------------------------------------------------------------------------
.text:0000000000005413                 align 8
.text:0000000000005418
.text:0000000000005418 loc_5418:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005418                 mov     rdi, rbx
.text:000000000000541B                 mov     edx, 1
.text:0000000000005420                 xor     esi, esi
.text:0000000000005422                 call    rpl_fseeko
.text:0000000000005427                 mov     rdi, rbx        ; stream
.text:000000000000542A                 pop     rbx
.text:000000000000542B                 jmp     _fflush
.text:000000000000542B ; } // starts at 53F0
.text:000000000000542B rpl_fflush      endp
.text:000000000000542B
.text:0000000000005430
.text:0000000000005430 ; =============== S U B R O U T I N E =======================================
.text:0000000000005430
.text:0000000000005430 ; Attributes: info_from_lumina
.text:0000000000005430
.text:0000000000005430 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005430                 public rpl_fseeko
.text:0000000000005430 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005430 ; __unwind {
.text:0000000000005430                 mov     rax, [rdi+8]
.text:0000000000005434                 cmp     [rdi+10h], rax
.text:0000000000005438                 jz      short loc_5440
.text:000000000000543A
.text:000000000000543A loc_543A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000543A                                         ; rpl_fseeko+1F↓j
.text:000000000000543A                 jmp     _fseeko
.text:000000000000543A ; ---------------------------------------------------------------------------
.text:000000000000543F                 align 20h
.text:0000000000005440
.text:0000000000005440 loc_5440:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005440                 mov     rax, [rdi+20h]
.text:0000000000005444                 cmp     [rdi+28h], rax
.text:0000000000005448                 jnz     short loc_543A
.text:000000000000544A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000544F                 jnz     short loc_543A
.text:0000000000005451                 push    r12
.text:0000000000005453                 push    rbp
.text:0000000000005454                 mov     r12d, edx
.text:0000000000005457                 push    rbx
.text:0000000000005458                 mov     rbp, rsi
.text:000000000000545B                 mov     rbx, rdi
.text:000000000000545E                 call    _fileno
.text:0000000000005463                 mov     edx, r12d       ; whence
.text:0000000000005466                 mov     rsi, rbp        ; offset
.text:0000000000005469                 mov     edi, eax        ; fd
.text:000000000000546B                 call    _lseek
.text:0000000000005470                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005474                 jz      short loc_5482
.text:0000000000005476                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005479                 mov     [rbx+90h], rax
.text:0000000000005480                 xor     eax, eax
.text:0000000000005482
.text:0000000000005482 loc_5482:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005482                 pop     rbx
.text:0000000000005483                 pop     rbp
.text:0000000000005484                 pop     r12
.text:0000000000005486                 retn
.text:0000000000005486 ; } // starts at 5430
.text:0000000000005486 rpl_fseeko      endp
.text:0000000000005486
.text:0000000000005486 ; ---------------------------------------------------------------------------
.text:0000000000005487                 align 10h
.text:0000000000005490
.text:0000000000005490 ; =============== S U B R O U T I N E =======================================
.text:0000000000005490
.text:0000000000005490 ; Attributes: info_from_lumina
.text:0000000000005490
.text:0000000000005490 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005490                 public rpl_mbrtowc
.text:0000000000005490 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005490
.text:0000000000005490 pwc             = dword ptr -34h
.text:0000000000005490 var_30          = qword ptr -30h
.text:0000000000005490
.text:0000000000005490 ; __unwind {
.text:0000000000005490                 push    r13
.text:0000000000005492                 push    r12
.text:0000000000005494                 mov     r13, rsi
.text:0000000000005497                 push    rbp
.text:0000000000005498                 push    rbx
.text:0000000000005499                 mov     rbx, rdi
.text:000000000000549C                 mov     r12, rdx
.text:000000000000549F                 sub     rsp, 18h
.text:00000000000054A3                 mov     rax, fs:28h
.text:00000000000054AC                 mov     [rsp+38h+var_30], rax
.text:00000000000054B1                 xor     eax, eax
.text:00000000000054B3                 lea     rax, [rsp+38h+pwc]
.text:00000000000054B8                 test    rdi, rdi
.text:00000000000054BB                 cmovz   rbx, rax
.text:00000000000054BF                 mov     rdi, rbx        ; pwc
.text:00000000000054C2                 call    _mbrtowc
.text:00000000000054C7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000054CB                 mov     rbp, rax
.text:00000000000054CE                 jbe     short loc_54F0
.text:00000000000054D0                 test    r12, r12
.text:00000000000054D3                 jz      short loc_54F0
.text:00000000000054D5                 xor     edi, edi
.text:00000000000054D7                 call    hard_locale
.text:00000000000054DC                 test    al, al
.text:00000000000054DE                 jnz     short loc_54F0
.text:00000000000054E0                 movzx   eax, byte ptr [r13+0]
.text:00000000000054E5                 mov     ebp, 1
.text:00000000000054EA                 mov     [rbx], eax
.text:00000000000054EC                 nop     dword ptr [rax+00h]
.text:00000000000054F0
.text:00000000000054F0 loc_54F0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000054F0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000054F0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000054F5                 xor     rdx, fs:28h
.text:00000000000054FE                 mov     rax, rbp
.text:0000000000005501                 jnz     short loc_550E
.text:0000000000005503                 add     rsp, 18h
.text:0000000000005507                 pop     rbx
.text:0000000000005508                 pop     rbp
.text:0000000000005509                 pop     r12
.text:000000000000550B                 pop     r13
.text:000000000000550D                 retn
.text:000000000000550E ; ---------------------------------------------------------------------------
.text:000000000000550E
.text:000000000000550E loc_550E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000550E                 call    ___stack_chk_fail
.text:000000000000550E ; } // starts at 5490
.text:000000000000550E rpl_mbrtowc     endp
.text:000000000000550E
.text:000000000000550E ; ---------------------------------------------------------------------------
.text:0000000000005513                 align 20h
.text:0000000000005520
.text:0000000000005520 ; =============== S U B R O U T I N E =======================================
.text:0000000000005520
.text:0000000000005520
.text:0000000000005520                 public hard_locale
.text:0000000000005520 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005520 ; __unwind {
.text:0000000000005520                 sub     rsp, 8
.text:0000000000005524                 xor     esi, esi        ; locale
.text:0000000000005526                 call    _setlocale
.text:000000000000552B                 mov     rdx, rax
.text:000000000000552E                 mov     eax, 1
.text:0000000000005533                 test    rdx, rdx
.text:0000000000005536                 jz      short loc_5555
.text:0000000000005538                 lea     rdi, aC         ; "C"
.text:000000000000553F                 mov     ecx, 2
.text:0000000000005544                 mov     rsi, rdx
.text:0000000000005547                 repe cmpsb
.text:0000000000005549                 setnbe  cl
.text:000000000000554C                 sbb     cl, 0
.text:000000000000554F                 xor     eax, eax
.text:0000000000005551                 test    cl, cl
.text:0000000000005553                 jnz     short loc_5560
.text:0000000000005555
.text:0000000000005555 loc_5555:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005555                 add     rsp, 8
.text:0000000000005559                 retn
.text:0000000000005559 ; ---------------------------------------------------------------------------
.text:000000000000555A                 align 20h
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005560                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005567                 mov     ecx, 6
.text:000000000000556C                 mov     rsi, rdx
.text:000000000000556F                 repe cmpsb
.text:0000000000005571                 setnbe  al
.text:0000000000005574                 sbb     al, 0
.text:0000000000005576                 test    al, al
.text:0000000000005578                 setnz   al
.text:000000000000557B                 add     rsp, 8
.text:000000000000557F                 retn
.text:000000000000557F ; } // starts at 5520
.text:000000000000557F hard_locale     endp
.text:000000000000557F
.text:0000000000005580
.text:0000000000005580 ; =============== S U B R O U T I N E =======================================
.text:0000000000005580
.text:0000000000005580
.text:0000000000005580                 public locale_charset
.text:0000000000005580 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005580 ; __unwind {
.text:0000000000005580                 sub     rsp, 8
.text:0000000000005584                 mov     edi, 0Eh        ; item
.text:0000000000005589                 call    _nl_langinfo
.text:000000000000558E                 test    rax, rax
.text:0000000000005591                 jz      short loc_55B0
.text:0000000000005593                 cmp     byte ptr [rax], 0
.text:0000000000005596                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000559D                 cmovz   rax, rdx
.text:00000000000055A1                 add     rsp, 8
.text:00000000000055A5                 retn
.text:00000000000055A5 ; ---------------------------------------------------------------------------
.text:00000000000055A6                 align 10h
.text:00000000000055B0
.text:00000000000055B0 loc_55B0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000055B0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000055B7                 add     rsp, 8
.text:00000000000055BB                 retn
.text:00000000000055BB ; } // starts at 5580
.text:00000000000055BB locale_charset  endp
.text:00000000000055BB
.text:00000000000055BB ; ---------------------------------------------------------------------------
.text:00000000000055BC                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0
.text:00000000000055C0                 public randint_new
.text:00000000000055C0 randint_new     proc near
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 push    rbx
.text:00000000000055C1                 mov     rbx, rdi
.text:00000000000055C4                 mov     edi, 18h
.text:00000000000055C9                 call    xmalloc
.text:00000000000055CE                 mov     [rax], rbx
.text:00000000000055D1                 mov     qword ptr [rax+10h], 0
.text:00000000000055D9                 mov     qword ptr [rax+8], 0
.text:00000000000055E1                 pop     rbx
.text:00000000000055E2                 retn
.text:00000000000055E2 ; } // starts at 55C0
.text:00000000000055E2 randint_new     endp
.text:00000000000055E2
.text:00000000000055E2 ; ---------------------------------------------------------------------------
.text:00000000000055E3                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0
.text:00000000000055F0                 public randint_all_new
.text:00000000000055F0 randint_all_new proc near               ; CODE XREF: try_tempname_len+7B↑p
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 push    rbx
.text:00000000000055F1                 call    randread_new
.text:00000000000055F6                 test    rax, rax
.text:00000000000055F9                 jz      short loc_5620
.text:00000000000055FB                 mov     rbx, rax
.text:00000000000055FE                 mov     edi, 18h
.text:0000000000005603                 call    xmalloc
.text:0000000000005608                 mov     [rax], rbx
.text:000000000000560B                 mov     qword ptr [rax+10h], 0
.text:0000000000005613                 mov     qword ptr [rax+8], 0
.text:000000000000561B                 pop     rbx
.text:000000000000561C                 retn
.text:000000000000561C ; ---------------------------------------------------------------------------
.text:000000000000561D                 align 20h
.text:0000000000005620
.text:0000000000005620 loc_5620:                               ; CODE XREF: randint_all_new+9↑j
.text:0000000000005620                 xor     eax, eax
.text:0000000000005622                 pop     rbx
.text:0000000000005623                 retn
.text:0000000000005623 ; } // starts at 55F0
.text:0000000000005623 randint_all_new endp
.text:0000000000005623
.text:0000000000005623 ; ---------------------------------------------------------------------------
.text:0000000000005624                 align 10h
.text:0000000000005630
.text:0000000000005630 ; =============== S U B R O U T I N E =======================================
.text:0000000000005630
.text:0000000000005630
.text:0000000000005630                 public randint_get_source
.text:0000000000005630 randint_get_source proc near
.text:0000000000005630 ; __unwind {
.text:0000000000005630                 mov     rax, [rdi]
.text:0000000000005633                 retn
.text:0000000000005633 ; } // starts at 5630
.text:0000000000005633 randint_get_source endp
.text:0000000000005633
.text:0000000000005633 ; ---------------------------------------------------------------------------
.text:0000000000005634                 align 20h
.text:0000000000005640
.text:0000000000005640 ; =============== S U B R O U T I N E =======================================
.text:0000000000005640
.text:0000000000005640
.text:0000000000005640                 public randint_genmax
.text:0000000000005640 randint_genmax  proc near               ; CODE XREF: try_tempname_len+C4↑p
.text:0000000000005640
.text:0000000000005640 var_50          = qword ptr -50h
.text:0000000000005640 var_48          = byte ptr -48h
.text:0000000000005640 var_40          = qword ptr -40h
.text:0000000000005640
.text:0000000000005640 ; __unwind {
.text:0000000000005640                 push    r15
.text:0000000000005642                 push    r14
.text:0000000000005644                 lea     r15, [rsi+1]
.text:0000000000005648                 push    r13
.text:000000000000564A                 push    r12
.text:000000000000564C                 mov     r13, rdi
.text:000000000000564F                 push    rbp
.text:0000000000005650                 push    rbx
.text:0000000000005651                 mov     r14, rsi
.text:0000000000005654                 sub     rsp, 28h
.text:0000000000005658                 mov     rbp, [rdi+8]
.text:000000000000565C                 mov     rbx, [rdi+10h]
.text:0000000000005660                 mov     rax, fs:28h
.text:0000000000005669                 mov     [rsp+58h+var_40], rax
.text:000000000000566E                 xor     eax, eax
.text:0000000000005670                 mov     rax, [rdi]
.text:0000000000005673                 lea     r12, [rsp+58h+var_48]
.text:0000000000005678                 mov     [rsp+58h+var_50], rax
.text:000000000000567D                 jmp     short loc_56B5
.text:000000000000567D ; ---------------------------------------------------------------------------
.text:000000000000567F                 align 20h
.text:0000000000005680
.text:0000000000005680 loc_5680:                               ; CODE XREF: randint_genmax+78↓j
.text:0000000000005680                 cmp     rbx, r14
.text:0000000000005683                 jz      loc_570F
.text:0000000000005689
.text:0000000000005689 loc_5689:                               ; CODE XREF: randint_genmax+C9↓j
.text:0000000000005689                 mov     rax, rbx
.text:000000000000568C                 xor     edx, edx
.text:000000000000568E                 sub     rax, r14
.text:0000000000005691                 div     r15
.text:0000000000005694                 sub     rbx, rdx
.text:0000000000005697                 mov     rdi, rdx
.text:000000000000569A                 mov     rsi, rax
.text:000000000000569D                 xor     edx, edx
.text:000000000000569F                 mov     rax, rbp
.text:00000000000056A2                 div     r15
.text:00000000000056A5                 cmp     rbp, rbx
.text:00000000000056A8                 jbe     loc_5748
.text:00000000000056AE                 lea     rbx, [rdi-1]
.text:00000000000056B2                 mov     rbp, rdx
.text:00000000000056B5
.text:00000000000056B5 loc_56B5:                               ; CODE XREF: randint_genmax+3D↑j
.text:00000000000056B5                 cmp     rbx, r14
.text:00000000000056B8                 jnb     short loc_5680
.text:00000000000056BA                 mov     rax, rbx
.text:00000000000056BD                 xor     edx, edx
.text:00000000000056BF                 nop
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: randint_genmax+91↓j
.text:00000000000056C0                 shl     rax, 8
.text:00000000000056C4                 add     rdx, 1
.text:00000000000056C8                 add     rax, 0FFh
.text:00000000000056CE                 cmp     r14, rax
.text:00000000000056D1                 ja      short loc_56C0
.text:00000000000056D3                 mov     rdi, [rsp+58h+var_50]
.text:00000000000056D8                 mov     rsi, r12
.text:00000000000056DB                 call    randread
.text:00000000000056E0                 mov     rax, r12
.text:00000000000056E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000056E8
.text:00000000000056E8 loc_56E8:                               ; CODE XREF: randint_genmax+C4↓j
.text:00000000000056E8                 movzx   edx, byte ptr [rax]
.text:00000000000056EB                 shl     rbx, 8
.text:00000000000056EF                 shl     rbp, 8
.text:00000000000056F3                 add     rbx, 0FFh
.text:00000000000056FA                 add     rax, 1
.text:00000000000056FE                 add     rbp, rdx
.text:0000000000005701                 cmp     r14, rbx
.text:0000000000005704                 ja      short loc_56E8
.text:0000000000005706                 cmp     rbx, r14
.text:0000000000005709                 jnz     loc_5689
.text:000000000000570F
.text:000000000000570F loc_570F:                               ; CODE XREF: randint_genmax+43↑j
.text:000000000000570F                 mov     qword ptr [r13+10h], 0
.text:0000000000005717                 mov     qword ptr [r13+8], 0
.text:000000000000571F
.text:000000000000571F loc_571F:                               ; CODE XREF: randint_genmax+113↓j
.text:000000000000571F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000005724                 xor     rcx, fs:28h
.text:000000000000572D                 mov     rax, rbp
.text:0000000000005730                 jnz     short loc_5755
.text:0000000000005732                 add     rsp, 28h
.text:0000000000005736                 pop     rbx
.text:0000000000005737                 pop     rbp
.text:0000000000005738                 pop     r12
.text:000000000000573A                 pop     r13
.text:000000000000573C                 pop     r14
.text:000000000000573E                 pop     r15
.text:0000000000005740                 retn
.text:0000000000005740 ; ---------------------------------------------------------------------------
.text:0000000000005741                 align 8
.text:0000000000005748
.text:0000000000005748 loc_5748:                               ; CODE XREF: randint_genmax+68↑j
.text:0000000000005748                 mov     [r13+8], rax
.text:000000000000574C                 mov     [r13+10h], rsi
.text:0000000000005750                 mov     rbp, rdx
.text:0000000000005753                 jmp     short loc_571F
.text:0000000000005755 ; ---------------------------------------------------------------------------
.text:0000000000005755
.text:0000000000005755 loc_5755:                               ; CODE XREF: randint_genmax+F0↑j
.text:0000000000005755                 call    ___stack_chk_fail
.text:0000000000005755 ; } // starts at 5640
.text:0000000000005755 randint_genmax  endp
.text:0000000000005755
.text:0000000000005755 ; ---------------------------------------------------------------------------
.text:000000000000575A                 align 20h
.text:0000000000005760
.text:0000000000005760 ; =============== S U B R O U T I N E =======================================
.text:0000000000005760
.text:0000000000005760
.text:0000000000005760 ; __int64 __fastcall randint_free(void *ptr)
.text:0000000000005760                 public randint_free
.text:0000000000005760 randint_free    proc near
.text:0000000000005760 ; __unwind {
.text:0000000000005760                 push    rbx
.text:0000000000005761                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005768                 mov     rbx, rdi
.text:000000000000576B                 mov     esi, 18h
.text:0000000000005770                 call    ___explicit_bzero_chk
.text:0000000000005775                 mov     rdi, rbx        ; ptr
.text:0000000000005778                 pop     rbx
.text:0000000000005779                 jmp     _free
.text:0000000000005779 ; } // starts at 5760
.text:0000000000005779 randint_free    endp
.text:0000000000005779
.text:0000000000005779 ; ---------------------------------------------------------------------------
.text:000000000000577E                 align 20h
.text:0000000000005780
.text:0000000000005780 ; =============== S U B R O U T I N E =======================================
.text:0000000000005780
.text:0000000000005780
.text:0000000000005780 ; __int64 __fastcall randint_all_free(void *ptr)
.text:0000000000005780                 public randint_all_free
.text:0000000000005780 randint_all_free proc near              ; CODE XREF: try_tempname_len+102↑p
.text:0000000000005780                                         ; try_tempname_len+130↑p
.text:0000000000005780 ; __unwind {
.text:0000000000005780                 push    r13
.text:0000000000005782                 push    r12
.text:0000000000005784                 push    rbp
.text:0000000000005785                 push    rbx
.text:0000000000005786                 mov     rbx, rdi
.text:0000000000005789                 sub     rsp, 8
.text:000000000000578D                 mov     rdi, [rdi]      ; ptr
.text:0000000000005790                 call    randread_free
.text:0000000000005795                 mov     r12d, eax
.text:0000000000005798                 call    ___errno_location
.text:000000000000579D                 mov     r13d, [rax]
.text:00000000000057A0                 mov     rdi, rbx
.text:00000000000057A3                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000057AA                 mov     esi, 18h
.text:00000000000057AF                 mov     rbp, rax
.text:00000000000057B2                 call    ___explicit_bzero_chk
.text:00000000000057B7                 mov     rdi, rbx        ; ptr
.text:00000000000057BA                 call    _free
.text:00000000000057BF                 mov     [rbp+0], r13d
.text:00000000000057C3                 add     rsp, 8
.text:00000000000057C7                 mov     eax, r12d
.text:00000000000057CA                 pop     rbx
.text:00000000000057CB                 pop     rbp
.text:00000000000057CC                 pop     r12
.text:00000000000057CE                 pop     r13
.text:00000000000057D0                 retn
.text:00000000000057D0 ; } // starts at 5780
.text:00000000000057D0 randint_all_free endp
.text:00000000000057D0
.text:00000000000057D0 ; ---------------------------------------------------------------------------
.text:00000000000057D1                 align 20h
.text:00000000000057E0
.text:00000000000057E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057E0
.text:00000000000057E0 ; Attributes: noreturn
.text:00000000000057E0
.text:00000000000057E0 randread_error  proc near               ; DATA XREF: randread_new+5A↓o
.text:00000000000057E0                                         ; randread_new+C4↓o ...
.text:00000000000057E0 ; __unwind {
.text:00000000000057E0                 push    rbp
.text:00000000000057E1                 push    rbx
.text:00000000000057E2                 sub     rsp, 8
.text:00000000000057E6                 test    rdi, rdi
.text:00000000000057E9                 jz      short loc_5828
.text:00000000000057EB                 call    quote
.text:00000000000057F0                 mov     rbp, rax
.text:00000000000057F3                 call    ___errno_location
.text:00000000000057F8                 cmp     dword ptr [rax], 0
.text:00000000000057FB                 mov     rbx, rax
.text:00000000000057FE                 mov     edx, 5          ; category
.text:0000000000005803                 jz      short loc_582D
.text:0000000000005805                 lea     rsi, aSReadError ; "%s: read error"
.text:000000000000580C                 xor     edi, edi        ; domainname
.text:000000000000580E                 call    _dcgettext
.text:0000000000005813
.text:0000000000005813 loc_5813:                               ; CODE XREF: randread_error+5B↓j
.text:0000000000005813                 mov     edi, cs:exit_failure ; status
.text:0000000000005819                 mov     esi, [rbx]      ; errnum
.text:000000000000581B                 mov     rdx, rax        ; format
.text:000000000000581E                 mov     rcx, rbp
.text:0000000000005821                 xor     eax, eax
.text:0000000000005823                 call    _error
.text:0000000000005828
.text:0000000000005828 loc_5828:                               ; CODE XREF: randread_error+9↑j
.text:0000000000005828                 call    _abort
.text:000000000000582D ; ---------------------------------------------------------------------------
.text:000000000000582D
.text:000000000000582D loc_582D:                               ; CODE XREF: randread_error+23↑j
.text:000000000000582D                 lea     rsi, aSEndOfFile ; "%s: end of file"
.text:0000000000005834                 xor     edi, edi        ; domainname
.text:0000000000005836                 call    _dcgettext
.text:000000000000583B                 jmp     short loc_5813
.text:000000000000583B ; } // starts at 57E0
.text:000000000000583B randread_error  endp
.text:000000000000583B
.text:000000000000583B ; ---------------------------------------------------------------------------
.text:000000000000583D                 align 20h
.text:0000000000005840
.text:0000000000005840 ; =============== S U B R O U T I N E =======================================
.text:0000000000005840
.text:0000000000005840
.text:0000000000005840                 public randread_new
.text:0000000000005840 randread_new    proc near               ; CODE XREF: randint_all_new+1↑p
.text:0000000000005840
.text:0000000000005840 var_68          = qword ptr -68h
.text:0000000000005840 var_60          = qword ptr -60h
.text:0000000000005840 tv              = timeval ptr -58h
.text:0000000000005840 var_40          = qword ptr -40h
.text:0000000000005840
.text:0000000000005840 ; __unwind {
.text:0000000000005840                 push    r15
.text:0000000000005842                 push    r14
.text:0000000000005844                 push    r13
.text:0000000000005846                 push    r12
.text:0000000000005848                 push    rbp
.text:0000000000005849                 push    rbx
.text:000000000000584A                 sub     rsp, 38h
.text:000000000000584E                 mov     rax, fs:28h
.text:0000000000005857                 mov     [rsp+68h+var_40], rax
.text:000000000000585C                 xor     eax, eax
.text:000000000000585E                 test    rsi, rsi
.text:0000000000005861                 jz      loc_5988
.text:0000000000005867                 test    rdi, rdi
.text:000000000000586A                 mov     r12, rdi
.text:000000000000586D                 mov     rbp, rsi
.text:0000000000005870                 jz      short loc_58F0
.text:0000000000005872                 lea     rsi, aRb        ; "rb"
.text:0000000000005879                 call    fopen_safer
.text:000000000000587E                 test    rax, rax
.text:0000000000005881                 mov     r13, rax
.text:0000000000005884                 jz      loc_5A88
.text:000000000000588A                 mov     edi, 1038h
.text:000000000000588F                 call    xmalloc
.text:0000000000005894                 mov     rbx, rax
.text:0000000000005897                 mov     [rax], r13
.text:000000000000589A                 lea     rax, randread_error
.text:00000000000058A1                 cmp     rbp, 1000h
.text:00000000000058A8                 mov     ecx, 1000h
.text:00000000000058AD                 lea     rsi, [rbx+18h]  ; buf
.text:00000000000058B1                 cmovbe  rcx, rbp        ; n
.text:00000000000058B5                 mov     [rbx+8], rax
.text:00000000000058B9                 mov     [rbx+10h], r12
.text:00000000000058BD                 xor     edx, edx        ; modes
.text:00000000000058BF                 mov     rdi, r13        ; stream
.text:00000000000058C2                 call    _setvbuf
.text:00000000000058C7
.text:00000000000058C7 loc_58C7:                               ; CODE XREF: randread_new+13D↓j
.text:00000000000058C7                                         ; randread_new+16F↓j ...
.text:00000000000058C7                 mov     rdx, [rsp+68h+var_40]
.text:00000000000058CC                 xor     rdx, fs:28h
.text:00000000000058D5                 mov     rax, rbx
.text:00000000000058D8                 jnz     loc_5A8F
.text:00000000000058DE                 add     rsp, 38h
.text:00000000000058E2                 pop     rbx
.text:00000000000058E3                 pop     rbp
.text:00000000000058E4                 pop     r12
.text:00000000000058E6                 pop     r13
.text:00000000000058E8                 pop     r14
.text:00000000000058EA                 pop     r15
.text:00000000000058EC                 retn
.text:00000000000058EC ; ---------------------------------------------------------------------------
.text:00000000000058ED                 align 10h
.text:00000000000058F0
.text:00000000000058F0 loc_58F0:                               ; CODE XREF: randread_new+30↑j
.text:00000000000058F0                 mov     edi, 1038h
.text:00000000000058F5                 call    xmalloc
.text:00000000000058FA                 mov     rbx, rax
.text:00000000000058FD                 mov     qword ptr [rax], 0
.text:0000000000005904                 lea     rax, randread_error
.text:000000000000590B                 lea     rdi, aDevUrandom ; "/dev/urandom"
.text:0000000000005912                 xor     esi, esi        ; oflag
.text:0000000000005914                 mov     qword ptr [rbx+10h], 0
.text:000000000000591C                 mov     [rbx+8], rax
.text:0000000000005920                 mov     qword ptr [rbx+18h], 0
.text:0000000000005928                 xor     eax, eax
.text:000000000000592A                 call    _open
.text:000000000000592F                 test    eax, eax
.text:0000000000005931                 lea     r13, [rbx+20h]
.text:0000000000005935                 mov     r15d, eax
.text:0000000000005938                 js      short loc_59B8
.text:000000000000593A                 cmp     rbp, 800h
.text:0000000000005941                 mov     rdx, rbp
.text:0000000000005944                 mov     r14d, 800h
.text:000000000000594A                 cmova   rdx, r14
.text:000000000000594E                 mov     ecx, 1018h
.text:0000000000005953                 mov     rsi, r13
.text:0000000000005956                 mov     edi, eax
.text:0000000000005958                 call    ___read_chk
.text:000000000000595D                 mov     edi, r15d       ; fd
.text:0000000000005960                 mov     rbp, rax
.text:0000000000005963                 call    _close
.text:0000000000005968                 cmp     rbp, 7FFh
.text:000000000000596F                 jle     loc_5A94
.text:0000000000005975
.text:0000000000005975 loc_5975:                               ; CODE XREF: randread_new+1F6↓j
.text:0000000000005975                                         ; randread_new+223↓j ...
.text:0000000000005975                 mov     rdi, r13
.text:0000000000005978                 call    isaac_seed
.text:000000000000597D                 jmp     loc_58C7
.text:000000000000597D ; ---------------------------------------------------------------------------
.text:0000000000005982                 align 8
.text:0000000000005988
.text:0000000000005988 loc_5988:                               ; CODE XREF: randread_new+21↑j
.text:0000000000005988                 mov     edi, 1038h
.text:000000000000598D                 call    xmalloc
.text:0000000000005992                 mov     rbx, rax
.text:0000000000005995                 mov     qword ptr [rax], 0
.text:000000000000599C                 lea     rax, randread_error
.text:00000000000059A3                 mov     qword ptr [rbx+10h], 0
.text:00000000000059AB                 mov     [rbx+8], rax
.text:00000000000059AF                 jmp     loc_58C7
.text:00000000000059AF ; ---------------------------------------------------------------------------
.text:00000000000059B4                 align 8
.text:00000000000059B8
.text:00000000000059B8 loc_59B8:                               ; CODE XREF: randread_new+F8↑j
.text:00000000000059B8                 lea     r12, [rsp+68h+tv]
.text:00000000000059BD                 xor     esi, esi        ; tz
.text:00000000000059BF                 mov     r14d, 18h
.text:00000000000059C5                 mov     rdi, r12        ; tv
.text:00000000000059C8                 call    _gettimeofday
.text:00000000000059CD                 movdqa  xmm0, xmmword ptr [rsp+68h+tv.tv_sec]
.text:00000000000059D3                 movups  xmmword ptr [rbx+20h], xmm0
.text:00000000000059D7                 call    _getpid
.text:00000000000059DC                 mov     [rbx+30h], eax
.text:00000000000059DF                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000059E3                 call    _getppid
.text:00000000000059E8                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000059EC                 mov     [rbx+34h], eax
.text:00000000000059EF
.text:00000000000059EF loc_59EF:                               ; CODE XREF: randread_new+324↓j
.text:00000000000059EF                 mov     ebp, 800h
.text:00000000000059F4                 mov     eax, 4
.text:00000000000059F9                 sub     rbp, r14
.text:00000000000059FC                 cmp     rbp, 4
.text:0000000000005A00                 cmova   rbp, rax
.text:0000000000005A04                 call    _getuid
.text:0000000000005A09                 test    ebp, ebp
.text:0000000000005A0B                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005A0F                 lea     rcx, [r13+r14+0]
.text:0000000000005A14                 mov     esi, ebp
.text:0000000000005A16                 jz      short loc_5A2C
.text:0000000000005A18                 xor     eax, eax
.text:0000000000005A1A
.text:0000000000005A1A loc_5A1A:                               ; CODE XREF: randread_new+1EA↓j
.text:0000000000005A1A                 mov     edx, eax
.text:0000000000005A1C                 add     eax, 1
.text:0000000000005A1F                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000005A24                 cmp     eax, esi
.text:0000000000005A26                 mov     [rcx+rdx], dil
.text:0000000000005A2A                 jb      short loc_5A1A
.text:0000000000005A2C
.text:0000000000005A2C loc_5A2C:                               ; CODE XREF: randread_new+1D6↑j
.text:0000000000005A2C                 add     rbp, r14
.text:0000000000005A2F                 cmp     rbp, 7FFh
.text:0000000000005A36                 ja      loc_5975
.text:0000000000005A3C                 call    _getgid
.text:0000000000005A41                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005A45                 mov     eax, 800h
.text:0000000000005A4A                 mov     edx, 4
.text:0000000000005A4F                 sub     rax, rbp
.text:0000000000005A52                 lea     rcx, [r13+rbp+0]
.text:0000000000005A57                 cmp     rax, 4
.text:0000000000005A5B                 cmova   rax, rdx
.text:0000000000005A5F                 test    eax, eax
.text:0000000000005A61                 mov     esi, eax
.text:0000000000005A63                 jz      loc_5975
.text:0000000000005A69                 xor     eax, eax
.text:0000000000005A6B
.text:0000000000005A6B loc_5A6B:                               ; CODE XREF: randread_new+23B↓j
.text:0000000000005A6B                 mov     edx, eax
.text:0000000000005A6D                 add     eax, 1
.text:0000000000005A70                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000005A75                 cmp     eax, esi
.text:0000000000005A77                 mov     [rcx+rdx], dil
.text:0000000000005A7B                 jb      short loc_5A6B
.text:0000000000005A7D                 jmp     loc_5975
.text:0000000000005A7D ; ---------------------------------------------------------------------------
.text:0000000000005A82                 align 8
.text:0000000000005A88
.text:0000000000005A88 loc_5A88:                               ; CODE XREF: randread_new+44↑j
.text:0000000000005A88                 xor     ebx, ebx
.text:0000000000005A8A                 jmp     loc_58C7
.text:0000000000005A8F ; ---------------------------------------------------------------------------
.text:0000000000005A8F
.text:0000000000005A8F loc_5A8F:                               ; CODE XREF: randread_new+98↑j
.text:0000000000005A8F                 call    ___stack_chk_fail
.text:0000000000005A94 ; ---------------------------------------------------------------------------
.text:0000000000005A94
.text:0000000000005A94 loc_5A94:                               ; CODE XREF: randread_new+12F↑j
.text:0000000000005A94                 test    rbp, rbp
.text:0000000000005A97                 mov     r15, r14
.text:0000000000005A9A                 mov     eax, 10h
.text:0000000000005A9F                 cmovs   rbp, r12
.text:0000000000005AA3                 lea     r12, [rsp+68h+tv]
.text:0000000000005AA8                 sub     r15, rbp
.text:0000000000005AAB                 cmp     r15, 10h
.text:0000000000005AAF                 mov     rdi, r12        ; tv
.text:0000000000005AB2                 cmova   r15, rax
.text:0000000000005AB6                 xor     esi, esi        ; tz
.text:0000000000005AB8                 call    _gettimeofday
.text:0000000000005ABD                 lea     rax, [r13+rbp+0]
.text:0000000000005AC2                 add     rbp, r15
.text:0000000000005AC5                 mov     ecx, r15d
.text:0000000000005AC8                 cmp     rbp, 7FFh
.text:0000000000005ACF                 mov     rsi, r12
.text:0000000000005AD2                 mov     rdi, rax
.text:0000000000005AD5                 rep movsb
.text:0000000000005AD7                 ja      loc_5975
.text:0000000000005ADD                 mov     r15, r14
.text:0000000000005AE0                 mov     r8d, 4
.text:0000000000005AE6                 sub     r15, rbp
.text:0000000000005AE9                 mov     [rsp+68h+var_60], r8
.text:0000000000005AEE                 cmp     r15, 4
.text:0000000000005AF2                 cmova   r15, r8
.text:0000000000005AF6                 lea     rdx, [rbp+r15+0]
.text:0000000000005AFB                 add     rbp, r13
.text:0000000000005AFE                 mov     [rsp+68h+var_68], rdx
.text:0000000000005B02                 call    _getpid
.text:0000000000005B07                 mov     rdx, [rsp+68h+var_68]
.text:0000000000005B0B                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005B0F                 mov     ecx, r15d
.text:0000000000005B12                 mov     rdi, rbp
.text:0000000000005B15                 mov     rsi, r12
.text:0000000000005B18                 mov     r8, [rsp+68h+var_60]
.text:0000000000005B1D                 rep movsb
.text:0000000000005B1F                 cmp     rdx, 7FFh
.text:0000000000005B26                 jg      loc_5975
.text:0000000000005B2C                 sub     r14, rdx
.text:0000000000005B2F                 cmp     r14, 4
.text:0000000000005B33                 cmova   r14, r8
.text:0000000000005B37                 call    _getppid
.text:0000000000005B3C                 mov     rdx, [rsp+68h+var_68]
.text:0000000000005B40                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000005B44                 mov     ecx, r14d
.text:0000000000005B47                 mov     rsi, r12
.text:0000000000005B4A                 lea     rax, [r13+rdx+0]
.text:0000000000005B4F                 add     r14, rdx
.text:0000000000005B52                 cmp     r14, 7FFh
.text:0000000000005B59                 mov     rdi, rax
.text:0000000000005B5C                 rep movsb
.text:0000000000005B5E                 ja      loc_5975
.text:0000000000005B64                 jmp     loc_59EF
.text:0000000000005B64 ; } // starts at 5840
.text:0000000000005B64 randread_new    endp
.text:0000000000005B64
.text:0000000000005B64 ; ---------------------------------------------------------------------------
.text:0000000000005B69                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70
.text:0000000000005B70                 public randread_set_handler
.text:0000000000005B70 randread_set_handler proc near
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 mov     [rdi+8], rsi
.text:0000000000005B74                 retn
.text:0000000000005B74 ; } // starts at 5B70
.text:0000000000005B74 randread_set_handler endp
.text:0000000000005B74
.text:0000000000005B74 ; ---------------------------------------------------------------------------
.text:0000000000005B75                 align 20h
.text:0000000000005B80
.text:0000000000005B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B80
.text:0000000000005B80
.text:0000000000005B80                 public randread_set_handler_arg
.text:0000000000005B80 randread_set_handler_arg proc near
.text:0000000000005B80 ; __unwind {
.text:0000000000005B80                 mov     [rdi+10h], rsi
.text:0000000000005B84                 retn
.text:0000000000005B84 ; } // starts at 5B80
.text:0000000000005B84 randread_set_handler_arg endp
.text:0000000000005B84
.text:0000000000005B84 ; ---------------------------------------------------------------------------
.text:0000000000005B85                 align 10h
.text:0000000000005B90
.text:0000000000005B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B90
.text:0000000000005B90
.text:0000000000005B90                 public randread
.text:0000000000005B90 randread        proc near               ; CODE XREF: randint_genmax+9B↑p
.text:0000000000005B90
.text:0000000000005B90 src             = qword ptr -40h
.text:0000000000005B90
.text:0000000000005B90 ; __unwind {
.text:0000000000005B90                 push    r15
.text:0000000000005B92                 push    r14
.text:0000000000005B94                 push    r13
.text:0000000000005B96                 push    r12
.text:0000000000005B98                 mov     r12, rdi
.text:0000000000005B9B                 push    rbp
.text:0000000000005B9C                 push    rbx
.text:0000000000005B9D                 mov     rbp, rdx
.text:0000000000005BA0                 mov     rbx, rsi
.text:0000000000005BA3                 sub     rsp, 18h
.text:0000000000005BA7                 mov     rcx, [rdi]
.text:0000000000005BAA                 test    rcx, rcx
.text:0000000000005BAD                 mov     [rsp+48h+src], rcx
.text:0000000000005BB2                 jz      short loc_5C18
.text:0000000000005BB4                 call    ___errno_location
.text:0000000000005BB9                 mov     rcx, [rsp+48h+src]
.text:0000000000005BBE                 mov     r13, rax
.text:0000000000005BC1                 jmp     short loc_5BE6
.text:0000000000005BC1 ; ---------------------------------------------------------------------------
.text:0000000000005BC3                 align 8
.text:0000000000005BC8
.text:0000000000005BC8 loc_5BC8:                               ; CODE XREF: randread+70↓j
.text:0000000000005BC8                 mov     rax, [r12]
.text:0000000000005BCC                 mov     rdi, [r12+10h]
.text:0000000000005BD1                 mov     eax, [rax]
.text:0000000000005BD3                 and     eax, 20h
.text:0000000000005BD6                 cmovnz  eax, edx
.text:0000000000005BD9                 mov     [r13+0], eax
.text:0000000000005BDD                 call    qword ptr [r12+8]
.text:0000000000005BE2                 mov     rcx, [r12]      ; stream
.text:0000000000005BE6
.text:0000000000005BE6 loc_5BE6:                               ; CODE XREF: randread+31↑j
.text:0000000000005BE6                 mov     rdx, rbp        ; n
.text:0000000000005BE9                 mov     rdi, rbx        ; ptr
.text:0000000000005BEC                 mov     esi, 1          ; size
.text:0000000000005BF1                 call    _fread_unlocked
.text:0000000000005BF6                 add     rbx, rax
.text:0000000000005BF9                 sub     rbp, rax
.text:0000000000005BFC                 mov     edx, [r13+0]
.text:0000000000005C00                 jnz     short loc_5BC8
.text:0000000000005C02
.text:0000000000005C02 loc_5C02:                               ; CODE XREF: randread+16E↓j
.text:0000000000005C02                 add     rsp, 18h
.text:0000000000005C06                 pop     rbx
.text:0000000000005C07                 pop     rbp
.text:0000000000005C08                 pop     r12
.text:0000000000005C0A                 pop     r13
.text:0000000000005C0C                 pop     r14
.text:0000000000005C0E                 pop     r15
.text:0000000000005C10                 retn
.text:0000000000005C10 ; ---------------------------------------------------------------------------
.text:0000000000005C11                 align 8
.text:0000000000005C18
.text:0000000000005C18 loc_5C18:                               ; CODE XREF: randread+22↑j
.text:0000000000005C18                 mov     r14, [rdi+18h]
.text:0000000000005C1C                 lea     rax, [rdi+838h]
.text:0000000000005C23                 lea     r13, [rdi+20h]
.text:0000000000005C27                 mov     [rsp+48h+src], rax
.text:0000000000005C2C                 cmp     rdx, r14
.text:0000000000005C2F                 jbe     loc_5D12
.text:0000000000005C35
.text:0000000000005C35 loc_5C35:                               ; CODE XREF: randread+14A↓j
.text:0000000000005C35                 mov     esi, 800h
.text:0000000000005C3A                 mov     rdi, rbx        ; dest
.text:0000000000005C3D                 mov     rdx, r14        ; n
.text:0000000000005C40                 sub     rsi, r14
.text:0000000000005C43                 add     rsi, [rsp+48h+src] ; src
.text:0000000000005C48                 add     rbx, r14
.text:0000000000005C4B                 sub     rbp, r14
.text:0000000000005C4E                 call    _memcpy
.text:0000000000005C53                 test    bl, 7
.text:0000000000005C56                 jnz     short loc_5CC0
.text:0000000000005C58                 cmp     rbp, 7FFh
.text:0000000000005C5F                 jbe     loc_5D03
.text:0000000000005C65                 lea     r15, [rbp-800h]
.text:0000000000005C6C                 mov     r14, r15
.text:0000000000005C6F                 and     r14d, 7FFh
.text:0000000000005C76                 jmp     short loc_5C8C
.text:0000000000005C76 ; ---------------------------------------------------------------------------
.text:0000000000005C78                 align 20h
.text:0000000000005C80
.text:0000000000005C80 loc_5C80:                               ; CODE XREF: randread+114↓j
.text:0000000000005C80                 cmp     r15, r14
.text:0000000000005C83                 jz      short loc_5CC0
.text:0000000000005C85                 sub     r15, 800h
.text:0000000000005C8C
.text:0000000000005C8C loc_5C8C:                               ; CODE XREF: randread+E6↑j
.text:0000000000005C8C                 mov     rsi, rbx
.text:0000000000005C8F                 mov     rdi, r13
.text:0000000000005C92                 add     rbx, 800h
.text:0000000000005C99                 call    isaac_refill
.text:0000000000005C9E                 test    r15, r15
.text:0000000000005CA1                 mov     rbp, r15
.text:0000000000005CA4                 jnz     short loc_5C80
.text:0000000000005CA6                 mov     qword ptr [r12+18h], 0
.text:0000000000005CAF                 add     rsp, 18h
.text:0000000000005CB3                 pop     rbx
.text:0000000000005CB4                 pop     rbp
.text:0000000000005CB5                 pop     r12
.text:0000000000005CB7                 pop     r13
.text:0000000000005CB9                 pop     r14
.text:0000000000005CBB                 pop     r15
.text:0000000000005CBD                 retn
.text:0000000000005CBD ; ---------------------------------------------------------------------------
.text:0000000000005CBE                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 loc_5CC0:                               ; CODE XREF: randread+C6↑j
.text:0000000000005CC0                                         ; randread+F3↑j
.text:0000000000005CC0                 mov     rsi, [rsp+48h+src]
.text:0000000000005CC5                 mov     rdi, r13
.text:0000000000005CC8                 mov     r14d, 800h
.text:0000000000005CCE                 call    isaac_refill
.text:0000000000005CD3                 cmp     rbp, 800h
.text:0000000000005CDA                 ja      loc_5C35
.text:0000000000005CE0
.text:0000000000005CE0 loc_5CE0:                               ; CODE XREF: randread+180↓j
.text:0000000000005CE0                 mov     r14d, 800h
.text:0000000000005CE6
.text:0000000000005CE6 loc_5CE6:                               ; CODE XREF: randread+194↓j
.text:0000000000005CE6                 mov     rsi, [rsp+48h+src] ; src
.text:0000000000005CEB                 mov     rdx, rbp        ; n
.text:0000000000005CEE                 mov     rdi, rbx        ; dest
.text:0000000000005CF1                 sub     r14, rbp
.text:0000000000005CF4                 call    _memcpy
.text:0000000000005CF9                 mov     [r12+18h], r14
.text:0000000000005CFE                 jmp     loc_5C02
.text:0000000000005D03 ; ---------------------------------------------------------------------------
.text:0000000000005D03
.text:0000000000005D03 loc_5D03:                               ; CODE XREF: randread+CF↑j
.text:0000000000005D03                 mov     rsi, [rsp+48h+src]
.text:0000000000005D08                 mov     rdi, r13
.text:0000000000005D0B                 call    isaac_refill
.text:0000000000005D10                 jmp     short loc_5CE0
.text:0000000000005D12 ; ---------------------------------------------------------------------------
.text:0000000000005D12
.text:0000000000005D12 loc_5D12:                               ; CODE XREF: randread+9F↑j
.text:0000000000005D12                 mov     r15, rax
.text:0000000000005D15                 sub     r15, r14
.text:0000000000005D18                 lea     rax, [r15+800h]
.text:0000000000005D1F                 mov     [rsp+48h+src], rax
.text:0000000000005D24                 jmp     short loc_5CE6
.text:0000000000005D24 ; } // starts at 5B90
.text:0000000000005D24 randread        endp
.text:0000000000005D24
.text:0000000000005D24 ; ---------------------------------------------------------------------------
.text:0000000000005D26                 align 10h
.text:0000000000005D30
.text:0000000000005D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D30
.text:0000000000005D30
.text:0000000000005D30 ; __int64 __fastcall randread_free(void *ptr)
.text:0000000000005D30                 public randread_free
.text:0000000000005D30 randread_free   proc near               ; CODE XREF: randint_all_free+10↑p
.text:0000000000005D30 ; __unwind {
.text:0000000000005D30                 push    rbp
.text:0000000000005D31                 push    rbx
.text:0000000000005D32                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D39                 mov     rbx, rdi
.text:0000000000005D3C                 mov     esi, 1038h
.text:0000000000005D41                 sub     rsp, 8
.text:0000000000005D45                 mov     rbp, [rdi]
.text:0000000000005D48                 call    ___explicit_bzero_chk
.text:0000000000005D4D                 mov     rdi, rbx        ; ptr
.text:0000000000005D50                 call    _free
.text:0000000000005D55                 test    rbp, rbp
.text:0000000000005D58                 jz      short loc_5D70
.text:0000000000005D5A                 add     rsp, 8
.text:0000000000005D5E                 mov     rdi, rbp        ; stream
.text:0000000000005D61                 pop     rbx
.text:0000000000005D62                 pop     rbp
.text:0000000000005D63                 jmp     rpl_fclose
.text:0000000000005D63 ; ---------------------------------------------------------------------------
.text:0000000000005D68                 align 10h
.text:0000000000005D70
.text:0000000000005D70 loc_5D70:                               ; CODE XREF: randread_free+28↑j
.text:0000000000005D70                 add     rsp, 8
.text:0000000000005D74                 xor     eax, eax
.text:0000000000005D76                 pop     rbx
.text:0000000000005D77                 pop     rbp
.text:0000000000005D78                 retn
.text:0000000000005D78 ; } // starts at 5D30
.text:0000000000005D78 randread_free   endp
.text:0000000000005D78
.text:0000000000005D78 ; ---------------------------------------------------------------------------
.text:0000000000005D79                 align 20h
.text:0000000000005D80
.text:0000000000005D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D80
.text:0000000000005D80
.text:0000000000005D80                 public isaac_refill
.text:0000000000005D80 isaac_refill    proc near               ; CODE XREF: randread+109↑p
.text:0000000000005D80                                         ; randread+13E↑p ...
.text:0000000000005D80 ; __unwind {
.text:0000000000005D80                 mov     rax, [rdi+810h]
.text:0000000000005D87                 mov     rdx, [rdi+800h]
.text:0000000000005D8E                 lea     r9, [rdi+400h]
.text:0000000000005D95                 lea     rcx, [rax+1]
.text:0000000000005D99                 mov     rax, rdi
.text:0000000000005D9C                 mov     [rdi+810h], rcx
.text:0000000000005DA3                 add     rcx, [rdi+808h]
.text:0000000000005DAA                 nop     word ptr [rax+rax+00h]
.text:0000000000005DB0
.text:0000000000005DB0 loc_5DB0:                               ; CODE XREF: isaac_refill+149↓j
.text:0000000000005DB0                 mov     r8, rdx
.text:0000000000005DB3                 shl     r8, 15h
.text:0000000000005DB7                 xor     rdx, r8
.text:0000000000005DBA                 mov     r8, [rax]
.text:0000000000005DBD                 not     rdx
.text:0000000000005DC0                 add     rdx, [rax+400h]
.text:0000000000005DC7                 mov     r10, r8
.text:0000000000005DCA                 and     r10d, 7F8h
.text:0000000000005DD1                 mov     r11, [rdi+r10]
.text:0000000000005DD5                 mov     r10, rdx
.text:0000000000005DD8                 shr     r10, 5
.text:0000000000005DDC                 add     r11, rdx
.text:0000000000005DDF                 xor     rdx, r10
.text:0000000000005DE2                 add     rcx, r11
.text:0000000000005DE5                 mov     [rax], rcx
.text:0000000000005DE8                 shr     rcx, 8
.text:0000000000005DEC                 and     ecx, 7F8h
.text:0000000000005DF2                 mov     r11, [rdi+rcx]
.text:0000000000005DF6                 add     r11, r8
.text:0000000000005DF9                 mov     [rsi], r11
.text:0000000000005DFC                 add     rdx, [rax+408h]
.text:0000000000005E03                 mov     rcx, [rax+8]
.text:0000000000005E07                 mov     r10, rdx
.text:0000000000005E0A                 mov     rdx, rcx
.text:0000000000005E0D                 and     edx, 7F8h
.text:0000000000005E13                 mov     r8, [rdi+rdx]
.text:0000000000005E17                 mov     rdx, r10
.text:0000000000005E1A                 shl     rdx, 0Ch
.text:0000000000005E1E                 xor     rdx, r10
.text:0000000000005E21                 add     r8, r10
.text:0000000000005E24                 add     r8, r11
.text:0000000000005E27                 mov     [rax+8], r8
.text:0000000000005E2B                 shr     r8, 8
.text:0000000000005E2F                 and     r8d, 7F8h
.text:0000000000005E36                 add     rcx, [rdi+r8]
.text:0000000000005E3A                 mov     [rsi+8], rcx
.text:0000000000005E3E                 mov     r8, [rax+10h]
.text:0000000000005E42                 mov     r11, rcx
.text:0000000000005E45                 add     rdx, [rax+410h]
.text:0000000000005E4C                 mov     rcx, r8
.text:0000000000005E4F                 and     ecx, 7F8h
.text:0000000000005E55                 mov     r10, [rdi+rcx]
.text:0000000000005E59                 add     r10, rdx
.text:0000000000005E5C                 mov     rcx, r10
.text:0000000000005E5F                 add     rcx, r11
.text:0000000000005E62                 mov     [rax+10h], rcx
.text:0000000000005E66                 shr     rcx, 8
.text:0000000000005E6A                 and     ecx, 7F8h
.text:0000000000005E70                 mov     r10, [rdi+rcx]
.text:0000000000005E74                 mov     rcx, rdx
.text:0000000000005E77                 shr     rcx, 21h
.text:0000000000005E7B                 xor     rdx, rcx
.text:0000000000005E7E                 add     r10, r8
.text:0000000000005E81                 mov     [rsi+10h], r10
.text:0000000000005E85                 mov     rcx, [rax+18h]
.text:0000000000005E89                 add     rdx, [rax+418h]
.text:0000000000005E90                 mov     r8, rcx
.text:0000000000005E93                 and     r8d, 7F8h
.text:0000000000005E9A                 mov     r11, [rdi+r8]
.text:0000000000005E9E                 add     r11, rdx
.text:0000000000005EA1                 mov     r8, r11
.text:0000000000005EA4                 add     r8, r10
.text:0000000000005EA7                 add     rax, 20h ; ' '
.text:0000000000005EAB                 add     rsi, 20h ; ' '
.text:0000000000005EAF                 mov     [rax-8], r8
.text:0000000000005EB3                 shr     r8, 8
.text:0000000000005EB7                 and     r8d, 7F8h
.text:0000000000005EBE                 add     rcx, [rdi+r8]
.text:0000000000005EC2                 mov     [rsi-8], rcx
.text:0000000000005EC6                 cmp     rax, r9
.text:0000000000005EC9                 jb      loc_5DB0
.text:0000000000005ECF                 lea     r9, [rdi+800h]
.text:0000000000005ED6                 db      2Eh
.text:0000000000005ED6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005EE0
.text:0000000000005EE0 loc_5EE0:                               ; CODE XREF: isaac_refill+279↓j
.text:0000000000005EE0                 mov     r8, rdx
.text:0000000000005EE3                 shl     r8, 15h
.text:0000000000005EE7                 xor     rdx, r8
.text:0000000000005EEA                 mov     r8, [rax]
.text:0000000000005EED                 not     rdx
.text:0000000000005EF0                 add     rdx, [rax-400h]
.text:0000000000005EF7                 mov     r10, r8
.text:0000000000005EFA                 and     r10d, 7F8h
.text:0000000000005F01                 mov     r11, [rdi+r10]
.text:0000000000005F05                 mov     r10, rdx
.text:0000000000005F08                 shr     r10, 5
.text:0000000000005F0C                 add     r11, rdx
.text:0000000000005F0F                 xor     rdx, r10
.text:0000000000005F12                 add     rcx, r11
.text:0000000000005F15                 mov     [rax], rcx
.text:0000000000005F18                 shr     rcx, 8
.text:0000000000005F1C                 and     ecx, 7F8h
.text:0000000000005F22                 mov     r11, [rdi+rcx]
.text:0000000000005F26                 add     r11, r8
.text:0000000000005F29                 mov     [rsi], r11
.text:0000000000005F2C                 add     rdx, [rax-3F8h]
.text:0000000000005F33                 mov     rcx, [rax+8]
.text:0000000000005F37                 mov     r10, rdx
.text:0000000000005F3A                 mov     rdx, rcx
.text:0000000000005F3D                 and     edx, 7F8h
.text:0000000000005F43                 mov     r8, [rdi+rdx]
.text:0000000000005F47                 mov     rdx, r10
.text:0000000000005F4A                 shl     rdx, 0Ch
.text:0000000000005F4E                 xor     rdx, r10
.text:0000000000005F51                 add     r8, r10
.text:0000000000005F54                 add     r8, r11
.text:0000000000005F57                 mov     [rax+8], r8
.text:0000000000005F5B                 shr     r8, 8
.text:0000000000005F5F                 and     r8d, 7F8h
.text:0000000000005F66                 add     rcx, [rdi+r8]
.text:0000000000005F6A                 mov     [rsi+8], rcx
.text:0000000000005F6E                 mov     r8, [rax+10h]
.text:0000000000005F72                 mov     r11, rcx
.text:0000000000005F75                 add     rdx, [rax-3F0h]
.text:0000000000005F7C                 mov     rcx, r8
.text:0000000000005F7F                 and     ecx, 7F8h
.text:0000000000005F85                 mov     r10, [rdi+rcx]
.text:0000000000005F89                 add     r10, rdx
.text:0000000000005F8C                 mov     rcx, r10
.text:0000000000005F8F                 add     rcx, r11
.text:0000000000005F92                 mov     [rax+10h], rcx
.text:0000000000005F96                 shr     rcx, 8
.text:0000000000005F9A                 and     ecx, 7F8h
.text:0000000000005FA0                 mov     r10, [rdi+rcx]
.text:0000000000005FA4                 mov     rcx, rdx
.text:0000000000005FA7                 shr     rcx, 21h
.text:0000000000005FAB                 xor     rdx, rcx
.text:0000000000005FAE                 add     r10, r8
.text:0000000000005FB1                 mov     [rsi+10h], r10
.text:0000000000005FB5                 mov     rcx, [rax+18h]
.text:0000000000005FB9                 add     rdx, [rax-3E8h]
.text:0000000000005FC0                 mov     r8, rcx
.text:0000000000005FC3                 and     r8d, 7F8h
.text:0000000000005FCA                 mov     r11, [rdi+r8]
.text:0000000000005FCE                 add     r11, rdx
.text:0000000000005FD1                 mov     r8, r11
.text:0000000000005FD4                 add     r8, r10
.text:0000000000005FD7                 add     rax, 20h ; ' '
.text:0000000000005FDB                 add     rsi, 20h ; ' '
.text:0000000000005FDF                 mov     [rax-8], r8
.text:0000000000005FE3                 shr     r8, 8
.text:0000000000005FE7                 and     r8d, 7F8h
.text:0000000000005FEE                 add     rcx, [rdi+r8]
.text:0000000000005FF2                 mov     [rsi-8], rcx
.text:0000000000005FF6                 cmp     rax, r9
.text:0000000000005FF9                 jb      loc_5EE0
.text:0000000000005FFF                 mov     [rdi+800h], rdx
.text:0000000000006006                 mov     [rdi+808h], rcx
.text:000000000000600D                 retn
.text:000000000000600D ; } // starts at 5D80
.text:000000000000600D isaac_refill    endp
.text:000000000000600D
.text:000000000000600D ; ---------------------------------------------------------------------------
.text:000000000000600E                 align 10h
.text:0000000000006010
.text:0000000000006010 ; =============== S U B R O U T I N E =======================================
.text:0000000000006010
.text:0000000000006010
.text:0000000000006010                 public isaac_seed
.text:0000000000006010 isaac_seed      proc near               ; CODE XREF: randread_new+138↑p
.text:0000000000006010 ; __unwind {
.text:0000000000006010                 push    r13
.text:0000000000006012                 push    r12
.text:0000000000006014                 lea     r12, [rdi+800h]
.text:000000000000601B                 push    rbp
.text:000000000000601C                 mov     rdx, rdi
.text:000000000000601F                 push    rbx
.text:0000000000006020                 mov     rax, rdi
.text:0000000000006023                 mov     rcx, 98F5704F6C44C0ABh
.text:000000000000602D                 mov     r10, 0AE985BF2CBFC89EDh
.text:0000000000006037                 mov     rbp, 48FE4A0FA5A09315h
.text:0000000000006041                 mov     rsi, 82F053DB8355E0CEh
.text:000000000000604B                 mov     r8, 0B29B2E824A595524h
.text:0000000000006055                 mov     rbx, 8C0EA5053D4712A0h
.text:000000000000605F                 mov     r11, 0B9F8B322C73AC862h
.text:0000000000006069                 mov     r9, 647C4677A2884B7Ch
.text:0000000000006073                 nop     dword ptr [rax+rax+00h]
.text:0000000000006078
.text:0000000000006078 loc_6078:                               ; CODE XREF: isaac_seed+13A↓j
.text:0000000000006078                 add     rsi, [rax+20h]
.text:000000000000607C                 add     rcx, [rax+38h]
.text:0000000000006080                 mov     r13, [rax]
.text:0000000000006083                 add     rbp, [rax+28h]
.text:0000000000006087                 add     r10, [rax+30h]
.text:000000000000608B                 sub     r13, rsi
.text:000000000000608E                 add     r9, r13
.text:0000000000006091                 mov     r13, rcx
.text:0000000000006094                 shr     r13, 9
.text:0000000000006098                 add     rcx, r9
.text:000000000000609B                 xor     rbp, r13
.text:000000000000609E                 mov     r13, [rax+8]
.text:00000000000060A2                 sub     r13, rbp
.text:00000000000060A5                 add     r11, r13
.text:00000000000060A8                 mov     r13, r9
.text:00000000000060AB                 shl     r13, 9
.text:00000000000060AF                 add     r9, r11
.text:00000000000060B2                 xor     r10, r13
.text:00000000000060B5                 mov     r13, [rax+10h]
.text:00000000000060B9                 sub     r13, r10
.text:00000000000060BC                 add     rbx, r13
.text:00000000000060BF                 mov     r13, r11
.text:00000000000060C2                 shr     r13, 17h
.text:00000000000060C6                 add     r11, rbx
.text:00000000000060C9                 xor     rcx, r13
.text:00000000000060CC                 mov     r13, [rax+18h]
.text:00000000000060D0                 sub     r13, rcx
.text:00000000000060D3                 add     r8, r13
.text:00000000000060D6                 mov     r13, rbx
.text:00000000000060D9                 shl     r13, 0Fh
.text:00000000000060DD                 add     rbx, r8
.text:00000000000060E0                 xor     r9, r13
.text:00000000000060E3                 mov     r13, r8
.text:00000000000060E6                 sub     rsi, r9
.text:00000000000060E9                 shr     r13, 0Eh
.text:00000000000060ED                 mov     [rax], r9
.text:00000000000060F0                 xor     r11, r13
.text:00000000000060F3                 mov     r13, rsi
.text:00000000000060F6                 add     r8, rsi
.text:00000000000060F9                 sub     rbp, r11
.text:00000000000060FC                 shl     r13, 14h
.text:0000000000006100                 mov     [rax+8], r11
.text:0000000000006104                 xor     rbx, r13
.text:0000000000006107                 lea     r13, [rsi+rbp]
.text:000000000000610B                 mov     rsi, rbp
.text:000000000000610E                 sub     r10, rbx
.text:0000000000006111                 shr     rsi, 11h
.text:0000000000006115                 mov     [rax+10h], rbx
.text:0000000000006119                 xor     r8, rsi
.text:000000000000611C                 mov     rsi, r10
.text:000000000000611F                 add     rbp, r10
.text:0000000000006122                 sub     rcx, r8
.text:0000000000006125                 shl     rsi, 0Eh
.text:0000000000006129                 mov     [rax+18h], r8
.text:000000000000612D                 xor     rsi, r13
.text:0000000000006130                 add     r10, rcx
.text:0000000000006133                 mov     [rax+28h], rbp
.text:0000000000006137                 mov     [rax+20h], rsi
.text:000000000000613B                 mov     [rax+30h], r10
.text:000000000000613F                 add     rax, 40h ; '@'
.text:0000000000006143                 mov     [rax-8], rcx
.text:0000000000006147                 cmp     r12, rax
.text:000000000000614A                 jnz     loc_6078
.text:0000000000006150
.text:0000000000006150 loc_6150:                               ; CODE XREF: isaac_seed+212↓j
.text:0000000000006150                 add     rsi, [rdx+20h]
.text:0000000000006154                 add     rcx, [rdx+38h]
.text:0000000000006158                 mov     r12, [rdx]
.text:000000000000615B                 add     rbp, [rdx+28h]
.text:000000000000615F                 add     r10, [rdx+30h]
.text:0000000000006163                 sub     r12, rsi
.text:0000000000006166                 add     r9, r12
.text:0000000000006169                 mov     r12, rcx
.text:000000000000616C                 shr     r12, 9
.text:0000000000006170                 add     rcx, r9
.text:0000000000006173                 xor     rbp, r12
.text:0000000000006176                 mov     r12, [rdx+8]
.text:000000000000617A                 sub     r12, rbp
.text:000000000000617D                 add     r11, r12
.text:0000000000006180                 mov     r12, r9
.text:0000000000006183                 shl     r12, 9
.text:0000000000006187                 add     r9, r11
.text:000000000000618A                 xor     r10, r12
.text:000000000000618D                 mov     r12, [rdx+10h]
.text:0000000000006191                 sub     r12, r10
.text:0000000000006194                 add     rbx, r12
.text:0000000000006197                 mov     r12, r11
.text:000000000000619A                 shr     r12, 17h
.text:000000000000619E                 add     r11, rbx
.text:00000000000061A1                 xor     rcx, r12
.text:00000000000061A4                 mov     r12, [rdx+18h]
.text:00000000000061A8                 sub     r12, rcx
.text:00000000000061AB                 add     r8, r12
.text:00000000000061AE                 mov     r12, rbx
.text:00000000000061B1                 shl     r12, 0Fh
.text:00000000000061B5                 add     rbx, r8
.text:00000000000061B8                 xor     r9, r12
.text:00000000000061BB                 mov     r12, r8
.text:00000000000061BE                 sub     rsi, r9
.text:00000000000061C1                 shr     r12, 0Eh
.text:00000000000061C5                 mov     [rdx], r9
.text:00000000000061C8                 xor     r11, r12
.text:00000000000061CB                 mov     r12, rsi
.text:00000000000061CE                 add     r8, rsi
.text:00000000000061D1                 sub     rbp, r11
.text:00000000000061D4                 shl     r12, 14h
.text:00000000000061D8                 mov     [rdx+8], r11
.text:00000000000061DC                 xor     rbx, r12
.text:00000000000061DF                 lea     r12, [rsi+rbp]
.text:00000000000061E3                 mov     rsi, rbp
.text:00000000000061E6                 sub     r10, rbx
.text:00000000000061E9                 shr     rsi, 11h
.text:00000000000061ED                 mov     [rdx+10h], rbx
.text:00000000000061F1                 xor     r8, rsi
.text:00000000000061F4                 mov     rsi, r10
.text:00000000000061F7                 add     rbp, r10
.text:00000000000061FA                 sub     rcx, r8
.text:00000000000061FD                 shl     rsi, 0Eh
.text:0000000000006201                 mov     [rdx+18h], r8
.text:0000000000006205                 xor     rsi, r12
.text:0000000000006208                 add     r10, rcx
.text:000000000000620B                 mov     [rdx+28h], rbp
.text:000000000000620F                 mov     [rdx+20h], rsi
.text:0000000000006213                 mov     [rdx+30h], r10
.text:0000000000006217                 add     rdx, 40h ; '@'
.text:000000000000621B                 mov     [rdx-8], rcx
.text:000000000000621F                 cmp     rax, rdx
.text:0000000000006222                 jnz     loc_6150
.text:0000000000006228                 pop     rbx
.text:0000000000006229                 mov     qword ptr [rdi+810h], 0
.text:0000000000006234                 mov     qword ptr [rdi+808h], 0
.text:000000000000623F                 pop     rbp
.text:0000000000006240                 mov     qword ptr [rdi+800h], 0
.text:000000000000624B                 pop     r12
.text:000000000000624D                 pop     r13
.text:000000000000624F                 retn
.text:000000000000624F ; } // starts at 6010
.text:000000000000624F isaac_seed      endp
.text:000000000000624F
.text:0000000000006250
.text:0000000000006250 ; =============== S U B R O U T I N E =======================================
.text:0000000000006250
.text:0000000000006250
.text:0000000000006250                 public fopen_safer
.text:0000000000006250 fopen_safer     proc near               ; CODE XREF: randread_new+39↑p
.text:0000000000006250 ; __unwind {
.text:0000000000006250                 push    r12
.text:0000000000006252                 push    rbp
.text:0000000000006253                 mov     rbp, rsi
.text:0000000000006256                 push    rbx
.text:0000000000006257                 call    _fopen
.text:000000000000625C                 test    rax, rax
.text:000000000000625F                 mov     rbx, rax
.text:0000000000006262                 jz      short loc_6271
.text:0000000000006264                 mov     rdi, rax        ; stream
.text:0000000000006267                 call    _fileno
.text:000000000000626C                 cmp     eax, 2
.text:000000000000626F                 jbe     short loc_6280
.text:0000000000006271
.text:0000000000006271 loc_6271:                               ; CODE XREF: fopen_safer+12↑j
.text:0000000000006271                                         ; fopen_safer+5B↓j ...
.text:0000000000006271                 mov     rax, rbx
.text:0000000000006274                 pop     rbx
.text:0000000000006275                 pop     rbp
.text:0000000000006276                 pop     r12
.text:0000000000006278                 retn
.text:0000000000006278 ; ---------------------------------------------------------------------------
.text:0000000000006279                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: fopen_safer+1F↑j
.text:0000000000006280                 mov     edi, eax
.text:0000000000006282                 call    dup_safer
.text:0000000000006287                 test    eax, eax
.text:0000000000006289                 mov     r12d, eax
.text:000000000000628C                 js      short loc_62C8
.text:000000000000628E                 mov     rdi, rbx        ; stream
.text:0000000000006291                 call    rpl_fclose
.text:0000000000006296                 test    eax, eax
.text:0000000000006298                 jnz     short loc_62AD
.text:000000000000629A                 mov     rsi, rbp        ; modes
.text:000000000000629D                 mov     edi, r12d       ; fd
.text:00000000000062A0                 call    _fdopen
.text:00000000000062A5                 test    rax, rax
.text:00000000000062A8                 mov     rbx, rax
.text:00000000000062AB                 jnz     short loc_6271
.text:00000000000062AD
.text:00000000000062AD loc_62AD:                               ; CODE XREF: fopen_safer+48↑j
.text:00000000000062AD                 call    ___errno_location
.text:00000000000062B2                 mov     ebp, [rax]
.text:00000000000062B4                 mov     rbx, rax
.text:00000000000062B7                 mov     edi, r12d       ; fd
.text:00000000000062BA                 call    _close
.text:00000000000062BF                 mov     [rbx], ebp
.text:00000000000062C1                 xor     ebx, ebx
.text:00000000000062C3                 jmp     short loc_6271
.text:00000000000062C3 ; ---------------------------------------------------------------------------
.text:00000000000062C5                 align 8
.text:00000000000062C8
.text:00000000000062C8 loc_62C8:                               ; CODE XREF: fopen_safer+3C↑j
.text:00000000000062C8                 call    ___errno_location
.text:00000000000062CD                 mov     r12d, [rax]
.text:00000000000062D0                 mov     rbp, rax
.text:00000000000062D3                 mov     rdi, rbx        ; stream
.text:00000000000062D6                 call    rpl_fclose
.text:00000000000062DB                 xor     ebx, ebx
.text:00000000000062DD                 mov     [rbp+0], r12d
.text:00000000000062E1                 jmp     short loc_6271
.text:00000000000062E1 ; } // starts at 6250
.text:00000000000062E1 fopen_safer     endp
.text:00000000000062E1
.text:00000000000062E1 ; ---------------------------------------------------------------------------
.text:00000000000062E3                 align 10h
.text:00000000000062F0
.text:00000000000062F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062F0
.text:00000000000062F0
.text:00000000000062F0                 public dup_safer
.text:00000000000062F0 dup_safer       proc near               ; CODE XREF: fopen_safer+32↑p
.text:00000000000062F0 ; __unwind {
.text:00000000000062F0                 mov     edx, 3
.text:00000000000062F5                 xor     esi, esi
.text:00000000000062F7                 xor     eax, eax
.text:00000000000062F9                 jmp     rpl_fcntl
.text:00000000000062F9 ; } // starts at 62F0
.text:00000000000062F9 dup_safer       endp
.text:00000000000062F9
.text:00000000000062F9 ; ---------------------------------------------------------------------------
.text:00000000000062FE                 align 20h
.text:0000000000006300
.text:0000000000006300 ; =============== S U B R O U T I N E =======================================
.text:0000000000006300
.text:0000000000006300
.text:0000000000006300 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000006300                 public rpl_fcntl
.text:0000000000006300 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:0000000000006300
.text:0000000000006300 var_68          = dword ptr -68h
.text:0000000000006300 var_60          = qword ptr -60h
.text:0000000000006300 var_58          = qword ptr -58h
.text:0000000000006300 var_50          = qword ptr -50h
.text:0000000000006300 var_48          = byte ptr -48h
.text:0000000000006300 var_38          = qword ptr -38h
.text:0000000000006300 var_30          = qword ptr -30h
.text:0000000000006300 var_28          = qword ptr -28h
.text:0000000000006300 var_20          = qword ptr -20h
.text:0000000000006300 arg_0           = byte ptr  8
.text:0000000000006300
.text:0000000000006300 ; __unwind {
.text:0000000000006300                 push    r12
.text:0000000000006302                 push    rbp
.text:0000000000006303                 mov     ebp, edi
.text:0000000000006305                 push    rbx
.text:0000000000006306                 sub     rsp, 50h
.text:000000000000630A                 mov     rax, fs:28h
.text:0000000000006313                 mov     [rsp+68h+var_50], rax
.text:0000000000006318                 xor     eax, eax
.text:000000000000631A                 lea     rax, [rsp+68h+arg_0]
.text:000000000000631F                 test    esi, esi
.text:0000000000006321                 mov     [rsp+68h+var_38], rdx
.text:0000000000006326                 mov     [rsp+68h+var_30], rcx
.text:000000000000632B                 mov     [rsp+68h+var_28], r8
.text:0000000000006330                 mov     [rsp+68h+var_60], rax
.text:0000000000006335                 lea     rax, [rsp+68h+var_48]
.text:000000000000633A                 mov     [rsp+68h+var_20], r9
.text:000000000000633F                 mov     [rsp+68h+var_68], 10h
.text:0000000000006346                 mov     [rsp+68h+var_58], rax
.text:000000000000634B                 jz      loc_6552
.text:0000000000006351                 cmp     esi, 406h
.text:0000000000006357                 jnz     short loc_63A0
.text:0000000000006359                 mov     rax, [rsp+68h+var_58]
.text:000000000000635E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000006365                 mov     [rsp+68h+var_68], 18h
.text:000000000000636C                 mov     r12d, [rax+10h]
.text:0000000000006370                 mov     edx, r12d
.text:0000000000006373                 js      loc_64A3
.text:0000000000006379                 xor     eax, eax
.text:000000000000637B                 mov     esi, 406h       ; cmd
.text:0000000000006380                 call    _fcntl
.text:0000000000006385                 test    eax, eax
.text:0000000000006387                 mov     ebx, eax
.text:0000000000006389                 js      loc_6518
.text:000000000000638F
.text:000000000000638F loc_638F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000638F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000006399                 jmp     short loc_63E0
.text:0000000000006399 ; ---------------------------------------------------------------------------
.text:000000000000639B                 align 20h
.text:00000000000063A0
.text:00000000000063A0 loc_63A0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:00000000000063A0                 cmp     esi, 0Bh
.text:00000000000063A3                 jz      short loc_63D0
.text:00000000000063A5                 jg      short loc_6400
.text:00000000000063A7                 cmp     esi, 4
.text:00000000000063AA                 jz      loc_6480
.text:00000000000063B0                 jg      loc_6470
.text:00000000000063B6                 cmp     esi, 2
.text:00000000000063B9                 jz      loc_6480
.text:00000000000063BF                 jg      short loc_63D0
.text:00000000000063C1                 cmp     esi, 1
.text:00000000000063C4                 jnz     short loc_6428
.text:00000000000063C6                 db      2Eh
.text:00000000000063C6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000063D0
.text:00000000000063D0 loc_63D0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:00000000000063D0                                         ; rpl_fcntl+BF↑j ...
.text:00000000000063D0                 mov     edi, ebp        ; fd
.text:00000000000063D2                 xor     eax, eax
.text:00000000000063D4                 call    _fcntl
.text:00000000000063D9                 mov     ebx, eax
.text:00000000000063DB                 nop     dword ptr [rax+rax+00h]
.text:00000000000063E0
.text:00000000000063E0 loc_63E0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:00000000000063E0                                         ; rpl_fcntl+147↓j ...
.text:00000000000063E0                 mov     rcx, [rsp+68h+var_50]
.text:00000000000063E5                 xor     rcx, fs:28h
.text:00000000000063EE                 mov     eax, ebx
.text:00000000000063F0                 jnz     loc_654D
.text:00000000000063F6                 add     rsp, 50h
.text:00000000000063FA                 pop     rbx
.text:00000000000063FB                 pop     rbp
.text:00000000000063FC                 pop     r12
.text:00000000000063FE                 retn
.text:00000000000063FE ; ---------------------------------------------------------------------------
.text:00000000000063FF                 align 20h
.text:0000000000006400
.text:0000000000006400 loc_6400:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000006400                 cmp     esi, 407h
.text:0000000000006406                 jg      short loc_6450
.text:0000000000006408                 cmp     esi, 406h
.text:000000000000640E                 jge     short loc_6480
.text:0000000000006410                 cmp     esi, 401h
.text:0000000000006416                 jz      short loc_63D0
.text:0000000000006418                 cmp     esi, 402h
.text:000000000000641E                 jz      short loc_6480
.text:0000000000006420                 cmp     esi, 400h
.text:0000000000006426                 jz      short loc_6480
.text:0000000000006428
.text:0000000000006428 loc_6428:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000006428                                         ; rpl_fcntl+164↓j ...
.text:0000000000006428                 mov     eax, [rsp+68h+var_68]
.text:000000000000642B                 cmp     eax, 2Fh ; '/'
.text:000000000000642E                 ja      loc_656A
.text:0000000000006434                 add     rax, [rsp+68h+var_58]
.text:0000000000006439
.text:0000000000006439 loc_6439:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000006439                 mov     rdx, [rax]
.text:000000000000643C                 mov     edi, ebp        ; fd
.text:000000000000643E                 xor     eax, eax
.text:0000000000006440                 call    _fcntl
.text:0000000000006445                 mov     ebx, eax
.text:0000000000006447                 jmp     short loc_63E0
.text:0000000000006447 ; ---------------------------------------------------------------------------
.text:0000000000006449                 align 10h
.text:0000000000006450
.text:0000000000006450 loc_6450:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000006450                 cmp     esi, 409h
.text:0000000000006456                 jz      short loc_6480
.text:0000000000006458                 jl      loc_63D0
.text:000000000000645E                 cmp     esi, 40Ah
.text:0000000000006464                 jnz     short loc_6428
.text:0000000000006466                 jmp     loc_63D0
.text:0000000000006466 ; ---------------------------------------------------------------------------
.text:000000000000646B                 align 10h
.text:0000000000006470
.text:0000000000006470 loc_6470:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000006470                 cmp     esi, 9
.text:0000000000006473                 jz      loc_63D0
.text:0000000000006479                 jg      short loc_6480
.text:000000000000647B                 cmp     esi, 8
.text:000000000000647E                 jnz     short loc_6428
.text:0000000000006480
.text:0000000000006480 loc_6480:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000006480                                         ; rpl_fcntl+B9↑j ...
.text:0000000000006480                 mov     eax, [rsp+68h+var_68]
.text:0000000000006483                 cmp     eax, 2Fh ; '/'
.text:0000000000006486                 ja      loc_6574
.text:000000000000648C                 add     rax, [rsp+68h+var_58]
.text:0000000000006491
.text:0000000000006491 loc_6491:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000006491                 mov     edx, [rax]
.text:0000000000006493                 mov     edi, ebp        ; fd
.text:0000000000006495                 xor     eax, eax
.text:0000000000006497                 call    _fcntl
.text:000000000000649C                 mov     ebx, eax
.text:000000000000649E                 jmp     loc_63E0
.text:00000000000064A3 ; ---------------------------------------------------------------------------
.text:00000000000064A3
.text:00000000000064A3 loc_64A3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:00000000000064A3                 xor     esi, esi        ; cmd
.text:00000000000064A5                 xor     eax, eax
.text:00000000000064A7                 call    _fcntl
.text:00000000000064AC                 test    eax, eax
.text:00000000000064AE                 mov     ebx, eax
.text:00000000000064B0                 js      loc_63E0
.text:00000000000064B6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:00000000000064BD                 jnz     loc_63E0
.text:00000000000064C3
.text:00000000000064C3 loc_64C3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:00000000000064C3                 xor     eax, eax
.text:00000000000064C5                 mov     esi, 1          ; cmd
.text:00000000000064CA                 mov     edi, ebx        ; fd
.text:00000000000064CC                 call    _fcntl
.text:00000000000064D1                 test    eax, eax
.text:00000000000064D3                 js      short loc_64F1
.text:00000000000064D5                 or      eax, 1
.text:00000000000064D8                 mov     esi, 2          ; cmd
.text:00000000000064DD                 mov     edi, ebx        ; fd
.text:00000000000064DF                 mov     edx, eax
.text:00000000000064E1                 xor     eax, eax
.text:00000000000064E3                 call    _fcntl
.text:00000000000064E8                 cmp     eax, 0FFFFFFFFh
.text:00000000000064EB                 jnz     loc_63E0
.text:00000000000064F1
.text:00000000000064F1 loc_64F1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:00000000000064F1                 call    ___errno_location
.text:00000000000064F6                 mov     r12d, [rax]
.text:00000000000064F9                 mov     rbp, rax
.text:00000000000064FC                 mov     edi, ebx        ; fd
.text:00000000000064FE                 call    _close
.text:0000000000006503                 mov     ebx, 0FFFFFFFFh
.text:0000000000006508                 mov     [rbp+0], r12d
.text:000000000000650C                 jmp     loc_63E0
.text:000000000000650C ; ---------------------------------------------------------------------------
.text:0000000000006511                 align 8
.text:0000000000006518
.text:0000000000006518 loc_6518:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000006518                 call    ___errno_location
.text:000000000000651D                 cmp     dword ptr [rax], 16h
.text:0000000000006520                 jnz     loc_638F
.text:0000000000006526                 xor     esi, esi        ; cmd
.text:0000000000006528                 xor     eax, eax
.text:000000000000652A                 mov     edx, r12d
.text:000000000000652D                 mov     edi, ebp        ; fd
.text:000000000000652F                 call    _fcntl
.text:0000000000006534                 test    eax, eax
.text:0000000000006536                 mov     ebx, eax
.text:0000000000006538                 js      loc_63E0
.text:000000000000653E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000006548                 jmp     loc_64C3
.text:000000000000654D ; ---------------------------------------------------------------------------
.text:000000000000654D
.text:000000000000654D loc_654D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000654D                 call    ___stack_chk_fail
.text:0000000000006552 ; ---------------------------------------------------------------------------
.text:0000000000006552
.text:0000000000006552 loc_6552:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000006552                 mov     rax, [rsp+68h+var_58]
.text:0000000000006557                 xor     esi, esi        ; cmd
.text:0000000000006559                 mov     edx, [rax+10h]
.text:000000000000655C                 xor     eax, eax
.text:000000000000655E                 call    _fcntl
.text:0000000000006563                 mov     ebx, eax
.text:0000000000006565                 jmp     loc_63E0
.text:000000000000656A ; ---------------------------------------------------------------------------
.text:000000000000656A
.text:000000000000656A loc_656A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000656A                 mov     rax, [rsp+68h+var_60]
.text:000000000000656F                 jmp     loc_6439
.text:0000000000006574 ; ---------------------------------------------------------------------------
.text:0000000000006574
.text:0000000000006574 loc_6574:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000006574                 mov     rax, [rsp+68h+var_60]
.text:0000000000006579                 jmp     loc_6491
.text:0000000000006579 ; } // starts at 6300
.text:0000000000006579 rpl_fcntl       endp
.text:0000000000006579
.text:0000000000006579 ; ---------------------------------------------------------------------------
.text:000000000000657E                 align 20h
.text:0000000000006580
.text:0000000000006580 ; =============== S U B R O U T I N E =======================================
.text:0000000000006580
.text:0000000000006580 ; Attributes: info_from_lumina
.text:0000000000006580
.text:0000000000006580 ; void _libc_csu_init(void)
.text:0000000000006580                 public __libc_csu_init
.text:0000000000006580 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006580 ; __unwind {
.text:0000000000006580                 push    r15
.text:0000000000006582                 push    r14
.text:0000000000006584                 mov     r15, rdx
.text:0000000000006587                 push    r13
.text:0000000000006589                 push    r12
.text:000000000000658B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006592                 push    rbp
.text:0000000000006593                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000659A                 push    rbx
.text:000000000000659B                 mov     r13d, edi
.text:000000000000659E                 mov     r14, rsi
.text:00000000000065A1                 sub     rbp, r12
.text:00000000000065A4                 sub     rsp, 8
.text:00000000000065A8                 sar     rbp, 3
.text:00000000000065AC                 call    _init_proc
.text:00000000000065B1                 test    rbp, rbp
.text:00000000000065B4                 jz      short loc_65D6
.text:00000000000065B6                 xor     ebx, ebx
.text:00000000000065B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000065C0
.text:00000000000065C0 loc_65C0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000065C0                 mov     rdx, r15
.text:00000000000065C3                 mov     rsi, r14
.text:00000000000065C6                 mov     edi, r13d
.text:00000000000065C9                 call    ds:(__frame_dummy_init_array_entry - 209A70h)[r12+rbx*8]
.text:00000000000065CD                 add     rbx, 1
.text:00000000000065D1                 cmp     rbp, rbx
.text:00000000000065D4                 jnz     short loc_65C0
.text:00000000000065D6
.text:00000000000065D6 loc_65D6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000065D6                 add     rsp, 8
.text:00000000000065DA                 pop     rbx
.text:00000000000065DB                 pop     rbp
.text:00000000000065DC                 pop     r12
.text:00000000000065DE                 pop     r13
.text:00000000000065E0                 pop     r14
.text:00000000000065E2                 pop     r15
.text:00000000000065E4                 retn
.text:00000000000065E4 ; } // starts at 6580
.text:00000000000065E4 __libc_csu_init endp
.text:00000000000065E4
.text:00000000000065E4 ; ---------------------------------------------------------------------------
.text:00000000000065E5                 align 10h
.text:00000000000065F0
.text:00000000000065F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065F0
.text:00000000000065F0
.text:00000000000065F0 ; void _libc_csu_fini(void)
.text:00000000000065F0                 public __libc_csu_fini
.text:00000000000065F0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000065F0 ; __unwind {
.text:00000000000065F0                 rep retn
.text:00000000000065F0 ; } // starts at 65F0
.text:00000000000065F0 __libc_csu_fini endp
.text:00000000000065F0
.text:00000000000065F0 ; ---------------------------------------------------------------------------
.text:00000000000065F2                 align 20h
.text:0000000000006600
.text:0000000000006600 ; =============== S U B R O U T I N E =======================================
.text:0000000000006600
.text:0000000000006600
.text:0000000000006600 atexit          proc near               ; CODE XREF: main+5E↑p
.text:0000000000006600 ; __unwind {
.text:0000000000006600                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006607                 xor     esi, esi        ; obj
.text:0000000000006609                 jmp     ___cxa_atexit
.text:0000000000006609 ; } // starts at 6600
.text:0000000000006609 atexit          endp
.text:0000000000006609
.text:0000000000006609 _text           ends
.text:0000000000006609
LOAD:000000000000660E ; ===========================================================================
LOAD:000000000000660E
LOAD:000000000000660E ; Segment type: Pure code
LOAD:000000000000660E ; Segment permissions: Read/Execute
LOAD:000000000000660E LOAD            segment byte public 'CODE' use64
LOAD:000000000000660E                 assume cs:LOAD
LOAD:000000000000660E                 ;org 660Eh
LOAD:000000000000660E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000660E                 align 10h
LOAD:000000000000660E LOAD            ends
LOAD:000000000000660E
.fini:0000000000006610 ; ===========================================================================
.fini:0000000000006610
.fini:0000000000006610 ; Segment type: Pure code
.fini:0000000000006610 ; Segment permissions: Read/Execute
.fini:0000000000006610 _fini           segment dword public 'CODE' use64
.fini:0000000000006610                 assume cs:_fini
.fini:0000000000006610                 ;org 6610h
.fini:0000000000006610                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006610
.fini:0000000000006610 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006610
.fini:0000000000006610
.fini:0000000000006610                 public _term_proc
.fini:0000000000006610 _term_proc      proc near
.fini:0000000000006610                 sub     rsp, 8          ; _fini
.fini:0000000000006614                 add     rsp, 8
.fini:0000000000006618                 retn
.fini:0000000000006618 _term_proc      endp
.fini:0000000000006618
.fini:0000000000006618 _fini           ends
.fini:0000000000006618
LOAD:0000000000006619 ; ===========================================================================
LOAD:0000000000006619
LOAD:0000000000006619 ; Segment type: Pure code
LOAD:0000000000006619 ; Segment permissions: Read/Execute
LOAD:0000000000006619 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006619                 assume cs:LOAD
LOAD:0000000000006619                 ;org 6619h
LOAD:0000000000006619                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006619                 align 20h
LOAD:0000000000006619 LOAD            ends
LOAD:0000000000006619
.rodata:0000000000006620 ; ===========================================================================
.rodata:0000000000006620
.rodata:0000000000006620 ; Segment type: Pure data
.rodata:0000000000006620 ; Segment permissions: Read
.rodata:0000000000006620 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006620                 assume cs:_rodata
.rodata:0000000000006620                 ;org 6620h
.rodata:0000000000006620                 public _IO_stdin_used
.rodata:0000000000006620 _IO_stdin_used  db    1
.rodata:0000000000006621                 db    0
.rodata:0000000000006622                 db    2
.rodata:0000000000006623                 db    0
.rodata:0000000000006624 aMktemp         db 'mktemp',0           ; DATA XREF: main+17F↑o
.rodata:0000000000006624                                         ; usage+1B1↑o ...
.rodata:000000000000662B asc_662B        db '[',0                ; DATA XREF: usage+1BD↑o
.rodata:000000000000662D aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1E4↑o
.rodata:000000000000663D aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000663D                                         ; DATA XREF: usage+214↑o
.rodata:000000000000663D                                         ; usage+30C↑o ...
.rodata:0000000000006653 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+225↑o
.rodata:000000000000665D aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+231↑o
.rodata:000000000000666C aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1C4↑o
.rodata:0000000000006676 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1F0↑o
.rodata:0000000000006680 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+208↑o
.rodata:000000000000668A ; const char aSOnlineHelpS[]
.rodata:000000000000668A aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+27A↑o
.rodata:000000000000668A                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000066A1 unk_66A1        db  47h ; G             ; DATA XREF: main+178↑o
.rodata:00000000000066A1                                         ; usage+296↑o ...
.rodata:00000000000066A2                 db  4Eh ; N
.rodata:00000000000066A3                 db  55h ; U
.rodata:00000000000066A4                 db  20h
.rodata:00000000000066A5 ; const char domainname[]
.rodata:00000000000066A5 domainname      db 'coreutils',0        ; DATA XREF: main+3F↑o
.rodata:00000000000066A5                                         ; main+4B↑o ...
.rodata:00000000000066AF ; const char s2[]
.rodata:00000000000066AF s2              db 'en_',0              ; DATA XREF: usage+2BD↑o
.rodata:00000000000066AF                                         ; usage+37E↑o
.rodata:00000000000066B3 ; const char aFullDocumentat[]
.rodata:00000000000066B3 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000066B3                                         ; DATA XREF: usage:loc_2659↑o
.rodata:00000000000066B3                                         ; usage:loc_2716↑o
.rodata:00000000000066CE aTmpXxxxxxxxxx  db 'tmp.XXXXXXXXXX',0   ; DATA XREF: main+1B7↑o
.rodata:00000000000066CE                                         ; main+1C4↑o
.rodata:00000000000066DD aTmp            db '/tmp',0             ; DATA XREF: main:loc_1F45↑o
.rodata:00000000000066DD                                         ; main+575↑o
.rodata:00000000000066E2 ; const char dirname[]
.rodata:00000000000066E2 dirname         db '/usr/local/share/locale',0
.rodata:00000000000066E2                                         ; DATA XREF: main+38↑o
.rodata:00000000000066FA aEricBlake      db 'Eric Blake',0       ; DATA XREF: main+16A↑o
.rodata:0000000000006705 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+171↑o
.rodata:0000000000006712 ; const char shortopts[]
.rodata:0000000000006712 shortopts       db 'dp:qtuV',0          ; DATA XREF: main+87↑o
.rodata:000000000000671A ; const char aTooManyTemplat[]
.rodata:000000000000671A aTooManyTemplat db 'too many templates',0
.rodata:000000000000671A                                         ; DATA XREF: main:loc_209C↑o
.rodata:000000000000672D ; const char aTooFewXSInTemp[]
.rodata:000000000000672D aTooFewXSInTemp db 'too few X',27h,'s in template %s',0
.rodata:000000000000672D                                         ; DATA XREF: main+65D↑o
.rodata:0000000000006748 ; const char name[]
.rodata:0000000000006748 name            db 'TMPDIR',0           ; DATA XREF: main:loc_1F28↑o
.rodata:0000000000006748                                         ; main:loc_20C7↑o
.rodata:000000000000674F ; const char aWriteError[]
.rodata:000000000000674F aWriteError     db 'write error',0      ; DATA XREF: main+4A8↑o
.rodata:000000000000674F                                         ; close_stdout:loc_2873↑o
.rodata:000000000000675B aDirectory      db 'directory',0        ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000006765 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:0000000000209AA0↓o
.rodata:000000000000676B aDryRun         db 'dry-run',0          ; DATA XREF: .data.rel.ro:0000000000209AC0↓o
.rodata:0000000000006773 aSuffix         db 'suffix',0           ; DATA XREF: .data.rel.ro:0000000000209AE0↓o
.rodata:000000000000677A aTmpdir         db 'tmpdir',0           ; DATA XREF: .data.rel.ro:0000000000209B00↓o
.rodata:0000000000006781 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:0000000000006786 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209B40↓o
.rodata:000000000000678E                 align 10h
.rodata:0000000000006790 ; const char aTrySHelpForMor[]
.rodata:0000000000006790 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006790                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000067B7                 align 8
.rodata:00000000000067B8 ; const char aUsageSOptionTe[]
.rodata:00000000000067B8 aUsageSOptionTe db 'Usage: %s [OPTION]... [TEMPLATE]',0Ah,0
.rodata:00000000000067B8                                         ; DATA XREF: usage:loc_23DD↑o
.rodata:00000000000067DA                 align 20h
.rodata:00000000000067E0 ; const char aCreateATempora[]
.rodata:00000000000067E0 aCreateATempora db 'Create a temporary file or directory, safely, and print its name.'
.rodata:00000000000067E0                                         ; DATA XREF: usage+84↑o
.rodata:00000000000067E0                 db 0Ah
.rodata:00000000000067E0                 db 'TEMPLATE must contain at least 3 consecutive ',27h,'X',27h,'s in '
.rodata:00000000000067E0                 db 'last component.',0Ah
.rodata:00000000000067E0                 db 'If TEMPLATE is not specified, use tmp.XXXXXXXXXX, and --tmpdir is'
.rodata:00000000000067E0                 db ' implied.',0Ah,0
.rodata:00000000000068B3                 align 8
.rodata:00000000000068B8 ; const char aFilesAreCreate[]
.rodata:00000000000068B8 aFilesAreCreate db 'Files are created u+rw, and directories u+rwx, minus umask restri'
.rodata:00000000000068B8                                         ; DATA XREF: usage+A9↑o
.rodata:00000000000068B8                 db 'ctions.',0Ah,0
.rodata:0000000000006902                 align 8
.rodata:0000000000006908 ; const char aDDirectoryCrea[]
.rodata:0000000000006908 aDDirectoryCrea db '  -d, --directory     create a directory, not a file',0Ah
.rodata:0000000000006908                                         ; DATA XREF: usage+DF↑o
.rodata:0000000000006908                 db '  -u, --dry-run       do not create anything; merely print a name'
.rodata:0000000000006908                 db ' (unsafe)',0Ah
.rodata:0000000000006908                 db '  -q, --quiet         suppress diagnostics about file/dir-creatio'
.rodata:0000000000006908                 db 'n failure',0Ah,0
.rodata:00000000000069D4                 align 8
.rodata:00000000000069D8 ; const char aSuffixSuffAppe[]
.rodata:00000000000069D8 aSuffixSuffAppe db '      --suffix=SUFF   append SUFF to TEMPLATE; SUFF must not cont'
.rodata:00000000000069D8                                         ; DATA XREF: usage+104↑o
.rodata:00000000000069D8                 db 'ain a slash.',0Ah
.rodata:00000000000069D8                 db '                        This option is implied if TEMPLATE does n'
.rodata:00000000000069D8                 db 'ot end in X',0Ah,0
.rodata:0000000000006A74                 align 8
.rodata:0000000000006A78 ; const char aPDirTmpdirDirI[]
.rodata:0000000000006A78 aPDirTmpdirDirI db '  -p DIR, --tmpdir[=DIR]  interpret TEMPLATE relative to DIR; if '
.rodata:0000000000006A78                                         ; DATA XREF: usage+129↑o
.rodata:0000000000006A78                 db 'DIR is not',0Ah
.rodata:0000000000006A78                 db '                        specified, use $TMPDIR if set, else /tmp.'
.rodata:0000000000006A78                 db '  With',0Ah
.rodata:0000000000006A78                 db '                        this option, TEMPLATE must not be an abso'
.rodata:0000000000006A78                 db 'lute name;',0Ah
.rodata:0000000000006A78                 db '                        unlike with -t, TEMPLATE may contain slas'
.rodata:0000000000006A78                 db 'hes, but',0Ah
.rodata:0000000000006A78                 db '                        mktemp creates only the final component',0Ah
.rodata:0000000000006A78                 db 0
.rodata:0000000000006BE3                 align 8
.rodata:0000000000006BE8 ; const char aTInterpretTemp[]
.rodata:0000000000006BE8 aTInterpretTemp db '  -t                  interpret TEMPLATE as a single file name co'
.rodata:0000000000006BE8                                         ; DATA XREF: usage+14E↑o
.rodata:0000000000006BE8                 db 'mponent,',0Ah
.rodata:0000000000006BE8                 db '                        relative to a directory: $TMPDIR, if set;'
.rodata:0000000000006BE8                 db ' else the',0Ah
.rodata:0000000000006BE8                 db '                        directory specified via -p; else /tmp [de'
.rodata:0000000000006BE8                 db 'precated]',0Ah,0
.rodata:0000000000006CC9                 align 10h
.rodata:0000000000006CD0 ; const char aHelpDisplayThi[]
.rodata:0000000000006CD0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006CD0                                         ; DATA XREF: usage+173↑o
.rodata:0000000000006CFD                 align 20h
.rodata:0000000000006D00 ; const char aVersionOutputV[]
.rodata:0000000000006D00 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000006D00                                         ; DATA XREF: usage+198↑o
.rodata:0000000000006D36                 align 8
.rodata:0000000000006D38 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006D38                                         ; DATA XREF: usage+28F↑o
.rodata:0000000000006D38                                         ; usage+2F3↑o ...
.rodata:0000000000006D60 ; const char aReportAnyTrans[]
.rodata:0000000000006D60 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006D60                                         ; DATA XREF: usage+3E7↑o
.rodata:0000000000006D60                 db 'am/>',0Ah,0
.rodata:0000000000006DA7                 align 8
.rodata:0000000000006DA8 ; const char aOrAvailableLoc[]
.rodata:0000000000006DA8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006DA8                                         ; DATA XREF: usage:loc_269E↑o
.rodata:0000000000006DDB                 align 20h
.rodata:0000000000006DE0 ; const char msgid[]
.rodata:0000000000006DE0 msgid           db 'with --suffix, template %s must end in X',0
.rodata:0000000000006DE0                                         ; DATA XREF: main+38E↑o
.rodata:0000000000006E09                 align 10h
.rodata:0000000000006E10 ; const char aInvalidSuffixS[]
.rodata:0000000000006E10 aInvalidSuffixS db 'invalid suffix %s, contains directory separator',0
.rodata:0000000000006E10                                         ; DATA XREF: main+68F↑o
.rodata:0000000000006E40 ; const char aInvalidTemplat[]
.rodata:0000000000006E40 aInvalidTemplat db 'invalid template, %s, contains directory separator',0
.rodata:0000000000006E40                                         ; DATA XREF: main+5A1↑o
.rodata:0000000000006E73                 align 8
.rodata:0000000000006E78 ; const char aInvalidTemplat_0[]
.rodata:0000000000006E78 aInvalidTemplat_0 db 'invalid template, %s; with --tmpdir, it may not be absolute',0
.rodata:0000000000006E78                                         ; DATA XREF: main+62B↑o
.rodata:0000000000006EB4                 align 8
.rodata:0000000000006EB8 ; const char aFailedToCreate_0[]
.rodata:0000000000006EB8 aFailedToCreate_0 db 'failed to create directory via template %s',0
.rodata:0000000000006EB8                                         ; DATA XREF: main+4EB↑o
.rodata:0000000000006EE3                 align 8
.rodata:0000000000006EE8 aFailedToCreate db 'failed to create file via template %s',0
.rodata:0000000000006EE8                                         ; DATA XREF: main+441↑o
.rodata:0000000000006F0E a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000006F13 ; const char format[]
.rodata:0000000000006F13 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000006F13                                         ; close_stdout+8F↑o ...
.rodata:0000000000006F1A                 align 20h
.rodata:0000000000006F20 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000006F20                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000006F58 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000006F60 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000006F64 unk_6F64        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000006F65                 db  80h
.rodata:0000000000006F66                 db  98h
.rodata:0000000000006F67                 db    0
.rodata:0000000000006F68 unk_6F68        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000006F69                 db  80h
.rodata:0000000000006F6A                 db  99h
.rodata:0000000000006F6B                 db    0
.rodata:0000000000006F6C unk_6F6C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000006F6D                 db    7
.rodata:0000000000006F6E                 db  65h ; e
.rodata:0000000000006F6F                 db    0
.rodata:0000000000006F70 unk_6F70        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000006F71                 db 0AFh
.rodata:0000000000006F72                 db    0
.rodata:0000000000006F73 unk_6F73        db  22h ; "             ; DATA XREF: gettext_quote:loc_2B70↑o
.rodata:0000000000006F73                                         ; quotearg_buffer_restyled:loc_392B↑o ...
.rodata:0000000000006F74                 db    0
.rodata:0000000000006F75 ; const char asc_6F75[2]
.rodata:0000000000006F75 asc_6F75        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000006F75                                         ; quotearg_buffer_restyled:loc_2CF3↑o ...
.rodata:0000000000006F77 ; const char asc_6F77[2]
.rodata:0000000000006F77 asc_6F77        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000006F77                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000006F79 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000006F81 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209B88↓o
.rodata:0000000000006F87 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209B90↓o
.rodata:0000000000006F94 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209B98↓o
.rodata:0000000000006F94                                         ; .data.rel.ro:0000000000209BB8↓o
.rodata:0000000000006FA1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000006FA1                                         ; DATA XREF: .data.rel.ro:0000000000209BA0↓o
.rodata:0000000000006FB5 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000209BA8↓o
.rodata:0000000000006FB7 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209BB0↓o
.rodata:0000000000006FBF aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209BC8↓o
.rodata:0000000000006FC7                 align 20h
.rodata:0000000000006FE0 jpt_2CD1        dd offset loc_3A7A - 6FE0h
.rodata:0000000000006FE0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000006FE0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000006FE0                 dd offset loc_2CD3 - 6FE0h ; jump table for switch statement
.rodata:0000000000006FE0                 dd offset loc_3CA8 - 6FE0h
.rodata:0000000000006FE0                 dd offset loc_3AB4 - 6FE0h
.rodata:0000000000006FE0                 dd offset loc_38A4 - 6FE0h
.rodata:0000000000006FE0                 dd offset loc_3900 - 6FE0h
.rodata:0000000000006FE0                 dd offset loc_3955 - 6FE0h
.rodata:0000000000006FE0                 dd offset loc_399A - 6FE0h
.rodata:0000000000006FE0                 dd offset loc_39D4 - 6FE0h
.rodata:0000000000006FE0                 dd offset loc_39D4 - 6FE0h
.rodata:0000000000006FE0                 dd offset loc_39D4 - 6FE0h
.rodata:000000000000700C jpt_2E2E        dd offset loc_3050 - 700Ch, offset def_2E2E - 700Ch, offset def_2E2E - 700Ch
.rodata:000000000000700C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000700C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000700C                 dd offset def_2E2E - 700Ch, offset def_2E2E - 700Ch, offset def_2E2E - 700Ch ; jump table for switch statement
.rodata:000000000000700C                 dd offset def_2E2E - 700Ch, offset loc_3090 - 700Ch, offset loc_2F98 - 700Ch
.rodata:000000000000700C                 dd offset loc_2F58 - 700Ch, offset loc_3120 - 700Ch, offset loc_3110 - 700Ch
.rodata:000000000000700C                 dd offset loc_3100 - 700Ch, offset loc_30F0 - 700Ch, offset def_2E2E - 700Ch
.rodata:000000000000700C                 dd offset def_2E2E - 700Ch, offset def_2E2E - 700Ch, offset def_2E2E - 700Ch
.rodata:000000000000700C                 dd offset def_2E2E - 700Ch, offset def_2E2E - 700Ch, offset def_2E2E - 700Ch
.rodata:000000000000700C                 dd offset def_2E2E - 700Ch, offset def_2E2E - 700Ch, offset def_2E2E - 700Ch
.rodata:000000000000700C                 dd offset def_2E2E - 700Ch, offset def_2E2E - 700Ch, offset def_2E2E - 700Ch
.rodata:000000000000700C                 dd offset def_2E2E - 700Ch, offset def_2E2E - 700Ch, offset def_2E2E - 700Ch
.rodata:000000000000700C                 dd offset def_2E2E - 700Ch, offset def_2E2E - 700Ch, offset loc_30E0 - 700Ch
.rodata:000000000000700C                 dd offset loc_30D0 - 700Ch, offset loc_30D0 - 700Ch, offset loc_30A0 - 700Ch
.rodata:000000000000700C                 dd offset loc_30D0 - 700Ch, offset loc_3078 - 700Ch, offset loc_30D0 - 700Ch
.rodata:000000000000700C                 dd offset loc_2F33 - 700Ch, offset loc_30D0 - 700Ch, offset loc_30D0 - 700Ch
.rodata:000000000000700C                 dd offset loc_30D0 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_30D0 - 700Ch
.rodata:000000000000700C                 dd offset loc_30D0 - 700Ch, offset loc_30D0 - 700Ch, offset loc_30D0 - 700Ch
.rodata:000000000000700C                 dd offset loc_2F03 - 700Ch, offset def_2E2E - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_30D0 - 700Ch, offset loc_2FA8 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_30D0 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_30D0 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_3078 - 700Ch, offset loc_3078 - 700Ch, offset loc_3078 - 700Ch
.rodata:000000000000700C                 dd offset loc_2E33 - 700Ch, offset loc_30D0 - 700Ch, offset loc_2E33 - 700Ch
.rodata:000000000000700C                 dd offset loc_30A0 - 700Ch
.rodata:0000000000007208 jpt_31BA        dd offset loc_3220 - 7208h, offset def_31BA - 7208h, offset def_31BA - 7208h
.rodata:0000000000007208                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007208                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007208                 dd offset def_31BA - 7208h, offset def_31BA - 7208h, offset def_31BA - 7208h ; jump table for switch statement
.rodata:0000000000007208                 dd offset def_31BA - 7208h, offset loc_3210 - 7208h, offset loc_3360 - 7208h
.rodata:0000000000007208                 dd offset loc_3348 - 7208h, offset loc_31F8 - 7208h, offset loc_3338 - 7208h
.rodata:0000000000007208                 dd offset loc_31E0 - 7208h, offset loc_3320 - 7208h, offset def_31BA - 7208h
.rodata:0000000000007208                 dd offset def_31BA - 7208h, offset def_31BA - 7208h, offset def_31BA - 7208h
.rodata:0000000000007208                 dd offset def_31BA - 7208h, offset def_31BA - 7208h, offset def_31BA - 7208h
.rodata:0000000000007208                 dd offset def_31BA - 7208h, offset def_31BA - 7208h, offset def_31BA - 7208h
.rodata:0000000000007208                 dd offset def_31BA - 7208h, offset def_31BA - 7208h, offset def_31BA - 7208h
.rodata:0000000000007208                 dd offset def_31BA - 7208h, offset def_31BA - 7208h, offset def_31BA - 7208h
.rodata:0000000000007208                 dd offset def_31BA - 7208h, offset def_31BA - 7208h, offset loc_3308 - 7208h
.rodata:0000000000007208                 dd offset loc_32F0 - 7208h, offset loc_32F0 - 7208h, offset loc_32D8 - 7208h
.rodata:0000000000007208                 dd offset loc_32F0 - 7208h, offset loc_32C0 - 7208h, offset loc_32F0 - 7208h
.rodata:0000000000007208                 dd offset loc_2F30 - 7208h, offset loc_32F0 - 7208h, offset loc_32F0 - 7208h
.rodata:0000000000007208                 dd offset loc_32F0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32F0 - 7208h
.rodata:0000000000007208                 dd offset loc_32F0 - 7208h, offset loc_32F0 - 7208h, offset loc_32F0 - 7208h
.rodata:0000000000007208                 dd offset loc_2F00 - 7208h, offset def_31BA - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32F0 - 7208h, offset loc_31C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32F0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32F0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_32C0 - 7208h, offset loc_32C0 - 7208h, offset loc_32C0 - 7208h
.rodata:0000000000007208                 dd offset loc_2E30 - 7208h, offset loc_32F0 - 7208h, offset loc_2E30 - 7208h
.rodata:0000000000007208                 dd offset loc_32D8 - 7208h
.rodata:0000000000007404                 align 20h
.rodata:0000000000007420                 public quoting_style_vals
.rodata:0000000000007420 quoting_style_vals db    0
.rodata:0000000000007421                 db    0
.rodata:0000000000007422                 db    0
.rodata:0000000000007423                 db    0
.rodata:0000000000007424                 db    1
.rodata:0000000000007425                 db    0
.rodata:0000000000007426                 db    0
.rodata:0000000000007427                 db    0
.rodata:0000000000007428                 db    2
.rodata:0000000000007429                 db    0
.rodata:000000000000742A                 db    0
.rodata:000000000000742B                 db    0
.rodata:000000000000742C                 db    3
.rodata:000000000000742D                 db    0
.rodata:000000000000742E                 db    0
.rodata:000000000000742F                 db    0
.rodata:0000000000007430                 db    4
.rodata:0000000000007431                 db    0
.rodata:0000000000007432                 db    0
.rodata:0000000000007433                 db    0
.rodata:0000000000007434                 db    5
.rodata:0000000000007435                 db    0
.rodata:0000000000007436                 db    0
.rodata:0000000000007437                 db    0
.rodata:0000000000007438                 db    6
.rodata:0000000000007439                 db    0
.rodata:000000000000743A                 db    0
.rodata:000000000000743B                 db    0
.rodata:000000000000743C                 db    7
.rodata:000000000000743D                 db    0
.rodata:000000000000743E                 db    0
.rodata:000000000000743F                 db    0
.rodata:0000000000007440                 db    8
.rodata:0000000000007441                 db    0
.rodata:0000000000007442                 db    0
.rodata:0000000000007443                 db    0
.rodata:0000000000007444                 db    9
.rodata:0000000000007445                 db    0
.rodata:0000000000007446                 db    0
.rodata:0000000000007447                 db    0
.rodata:0000000000007448 ; const char file[]
.rodata:0000000000007448 file            db '../coreutils-8.31/lib/tempname.c',0
.rodata:0000000000007448                                         ; DATA XREF: gen_tempname_len+1D↑o
.rodata:0000000000007469                 align 10h
.rodata:0000000000007470 ; const char s[]
.rodata:0000000000007470 s               db '! "invalid KIND in __gen_tempname"',0
.rodata:0000000000007470                                         ; DATA XREF: gen_tempname_len+24↑o
.rodata:0000000000007493                 align 20h
.rodata:00000000000074A0 ; const char _PRETTY_FUNCTION___5642[]
.rodata:00000000000074A0 __PRETTY_FUNCTION___5642 db 'gen_tempname_len',0
.rodata:00000000000074A0                                         ; DATA XREF: gen_tempname_len+16↑o
.rodata:00000000000074B1                 align 20h
.rodata:00000000000074C0 letters         db 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.rodata:00000000000074C0                                         ; DATA XREF: try_tempname_len+90↑o
.rodata:00000000000074FF aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000750B aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000007512 ; const char aC_0[]
.rodata:0000000000007512 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4AFC↑o
.rodata:0000000000007516 ; const char aWrittenByS[]
.rodata:0000000000007516 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000007516                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000007526 ; const char aWrittenBySAndS[]
.rodata:0000000000007526 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000007526                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000753D ; const char aWrittenBySSAnd[]
.rodata:000000000000753D aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000753D                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000007559 ; const char aReportBugsToS[]
.rodata:0000000000007559 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000007559                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000756E aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000756E                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000007584 ; const char aSHomePageS[]
.rodata:0000000000007584 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000007584                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000007598 ; const char aLicenseGplv3Gn[]
.rodata:0000000000007598 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000007598                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000007598                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000007598                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000007598                 db '.',0Ah
.rodata:0000000000007598                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000007598                 db 0Ah,0
.rodata:0000000000007664                 align 8
.rodata:0000000000007668 ; const char aWrittenBySSSAn[]
.rodata:0000000000007668 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007668                                         ; DATA XREF: version_etc_arn:loc_4D50↑o
.rodata:0000000000007668                 db 'and %s.',0Ah,0
.rodata:0000000000007688 ; const char aWrittenBySSSSA[]
.rodata:0000000000007688 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007688                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000007688                 db '%s, and %s.',0Ah,0
.rodata:00000000000076AC                 align 10h
.rodata:00000000000076B0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000076B0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000076B0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000076B0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000076D8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000076D8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000076D8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000076D8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000007704                 align 8
.rodata:0000000000007708 ; const char aWrittenBySSSSS[]
.rodata:0000000000007708 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007708                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000007708                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007708                 db 'and %s.',0Ah,0
.rodata:0000000000007738 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000007738 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007738                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000007738                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007738                 db '%s, and %s.',0Ah,0
.rodata:000000000000776C                 align 10h
.rodata:0000000000007770 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007770                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000007770                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007770                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000077AC                 align 10h
.rodata:00000000000077B0 ; const char aGeneralHelpUsi[]
.rodata:00000000000077B0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000077B0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000077B0                 db 0
.rodata:00000000000077F1                 align 8
.rodata:00000000000077F8 jpt_4B64        dd offset loc_4BE6 - 77F8h
.rodata:00000000000077F8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000077F8                                         ; version_etc_arn+9D↑r
.rodata:00000000000077F8                 dd offset loc_4C78 - 77F8h ; jump table for switch statement
.rodata:00000000000077F8                 dd offset loc_4CB8 - 77F8h
.rodata:00000000000077F8                 dd offset loc_4D00 - 77F8h
.rodata:00000000000077F8                 dd offset loc_4D50 - 77F8h
.rodata:00000000000077F8                 dd offset loc_4DA8 - 77F8h
.rodata:00000000000077F8                 dd offset loc_4DD8 - 77F8h
.rodata:00000000000077F8                 dd offset loc_4E40 - 77F8h
.rodata:00000000000077F8                 dd offset loc_4B70 - 77F8h
.rodata:00000000000077F8                 dd offset loc_4C20 - 77F8h
.rodata:0000000000007820                 public version_etc_copyright
.rodata:0000000000007820 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000007820                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000784F ; const char aMemoryExhauste[]
.rodata:000000000000784F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000007860 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000007862 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5560↑o
.rodata:0000000000007862                                         ; try_tempname_len+55↑o
.rodata:0000000000007868 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000007868                                         ; locale_charset:loc_55B0↑o
.rodata:000000000000786E ; const char aSEndOfFile[]
.rodata:000000000000786E aSEndOfFile     db '%s: end of file',0  ; DATA XREF: randread_error:loc_582D↑o
.rodata:000000000000787E ; const char aSReadError[]
.rodata:000000000000787E aSReadError     db '%s: read error',0   ; DATA XREF: randread_error+25↑o
.rodata:000000000000788D ; const char aDevUrandom[]
.rodata:000000000000788D aDevUrandom     db '/dev/urandom',0     ; DATA XREF: randread_new+CB↑o
.rodata:000000000000789A aRb             db 'rb',0               ; DATA XREF: randread_new+32↑o
.rodata:000000000000789A _rodata         ends
.rodata:000000000000789A
LOAD:000000000000789D ; ===========================================================================
LOAD:000000000000789D
LOAD:000000000000789D ; Segment type: Pure code
LOAD:000000000000789D ; Segment permissions: Read/Execute
LOAD:000000000000789D LOAD            segment byte public 'CODE' use64
LOAD:000000000000789D                 assume cs:LOAD
LOAD:000000000000789D                 ;org 789Dh
LOAD:000000000000789D                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000789D                 align 20h
LOAD:000000000000789D LOAD            ends
LOAD:000000000000789D
.eh_frame_hdr:00000000000078A0 ; ===========================================================================
.eh_frame_hdr:00000000000078A0
.eh_frame_hdr:00000000000078A0 ; Segment type: Pure data
.eh_frame_hdr:00000000000078A0 ; Segment permissions: Read
.eh_frame_hdr:00000000000078A0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000078A0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000078A0                 ;org 78A0h
.eh_frame_hdr:00000000000078A0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000078A1                 db  1Bh
.eh_frame_hdr:00000000000078A2                 db    3
.eh_frame_hdr:00000000000078A3                 db  3Bh ; ;
.eh_frame_hdr:00000000000078A4                 db  24h ; $
.eh_frame_hdr:00000000000078A5                 db    3
.eh_frame_hdr:00000000000078A6                 db    0
.eh_frame_hdr:00000000000078A7                 db    0
.eh_frame_hdr:00000000000078A8                 db  63h ; c
.eh_frame_hdr:00000000000078A9                 db    0
.eh_frame_hdr:00000000000078AA                 db    0
.eh_frame_hdr:00000000000078AB                 db    0
.eh_frame_hdr:00000000000078AC                 db 0D0h
.eh_frame_hdr:00000000000078AD                 db  9Eh
.eh_frame_hdr:00000000000078AE                 db 0FFh
.eh_frame_hdr:00000000000078AF                 db 0FFh
.eh_frame_hdr:00000000000078B0                 db  70h ; p
.eh_frame_hdr:00000000000078B1                 db    3
.eh_frame_hdr:00000000000078B2                 db    0
.eh_frame_hdr:00000000000078B3                 db    0
.eh_frame_hdr:00000000000078B4                 db 0C0h
.eh_frame_hdr:00000000000078B5                 db 0A2h
.eh_frame_hdr:00000000000078B6                 db 0FFh
.eh_frame_hdr:00000000000078B7                 db 0FFh
.eh_frame_hdr:00000000000078B8                 db  98h
.eh_frame_hdr:00000000000078B9                 db    3
.eh_frame_hdr:00000000000078BA                 db    0
.eh_frame_hdr:00000000000078BB                 db    0
.eh_frame_hdr:00000000000078BC                 db 0D0h
.eh_frame_hdr:00000000000078BD                 db 0A2h
.eh_frame_hdr:00000000000078BE                 db 0FFh
.eh_frame_hdr:00000000000078BF                 db 0FFh
.eh_frame_hdr:00000000000078C0                 db 0F8h
.eh_frame_hdr:00000000000078C1                 db    3
.eh_frame_hdr:00000000000078C2                 db    0
.eh_frame_hdr:00000000000078C3                 db    0
.eh_frame_hdr:00000000000078C4                 db  90h
.eh_frame_hdr:00000000000078C5                 db 0A9h
.eh_frame_hdr:00000000000078C6                 db 0FFh
.eh_frame_hdr:00000000000078C7                 db 0FFh
.eh_frame_hdr:00000000000078C8                 db  40h ; @
.eh_frame_hdr:00000000000078C9                 db    3
.eh_frame_hdr:00000000000078CA                 db    0
.eh_frame_hdr:00000000000078CB                 db    0
.eh_frame_hdr:00000000000078CC                 db 0A0h
.eh_frame_hdr:00000000000078CD                 db 0AAh
.eh_frame_hdr:00000000000078CE                 db 0FFh
.eh_frame_hdr:00000000000078CF                 db 0FFh
.eh_frame_hdr:00000000000078D0                 db 0B0h
.eh_frame_hdr:00000000000078D1                 db    3
.eh_frame_hdr:00000000000078D2                 db    0
.eh_frame_hdr:00000000000078D3                 db    0
.eh_frame_hdr:00000000000078D4                 db 0E0h
.eh_frame_hdr:00000000000078D5                 db 0AAh
.eh_frame_hdr:00000000000078D6                 db 0FFh
.eh_frame_hdr:00000000000078D7                 db 0FFh
.eh_frame_hdr:00000000000078D8                 db 0CCh
.eh_frame_hdr:00000000000078D9                 db    3
.eh_frame_hdr:00000000000078DA                 db    0
.eh_frame_hdr:00000000000078DB                 db    0
.eh_frame_hdr:00000000000078DC                 db 0F0h
.eh_frame_hdr:00000000000078DD                 db 0AEh
.eh_frame_hdr:00000000000078DE                 db 0FFh
.eh_frame_hdr:00000000000078DF                 db 0FFh
.eh_frame_hdr:00000000000078E0                 db  50h ; P
.eh_frame_hdr:00000000000078E1                 db    4
.eh_frame_hdr:00000000000078E2                 db    0
.eh_frame_hdr:00000000000078E3                 db    0
.eh_frame_hdr:00000000000078E4                 db  70h ; p
.eh_frame_hdr:00000000000078E5                 db 0AFh
.eh_frame_hdr:00000000000078E6                 db 0FFh
.eh_frame_hdr:00000000000078E7                 db 0FFh
.eh_frame_hdr:00000000000078E8                 db 0A0h
.eh_frame_hdr:00000000000078E9                 db    4
.eh_frame_hdr:00000000000078EA                 db    0
.eh_frame_hdr:00000000000078EB                 db    0
.eh_frame_hdr:00000000000078EC                 db  80h
.eh_frame_hdr:00000000000078ED                 db 0AFh
.eh_frame_hdr:00000000000078EE                 db 0FFh
.eh_frame_hdr:00000000000078EF                 db 0FFh
.eh_frame_hdr:00000000000078F0                 db 0B4h
.eh_frame_hdr:00000000000078F1                 db    4
.eh_frame_hdr:00000000000078F2                 db    0
.eh_frame_hdr:00000000000078F3                 db    0
.eh_frame_hdr:00000000000078F4                 db  90h
.eh_frame_hdr:00000000000078F5                 db 0AFh
.eh_frame_hdr:00000000000078F6                 db 0FFh
.eh_frame_hdr:00000000000078F7                 db 0FFh
.eh_frame_hdr:00000000000078F8                 db 0C8h
.eh_frame_hdr:00000000000078F9                 db    4
.eh_frame_hdr:00000000000078FA                 db    0
.eh_frame_hdr:00000000000078FB                 db    0
.eh_frame_hdr:00000000000078FC                 db  40h ; @
.eh_frame_hdr:00000000000078FD                 db 0B0h
.eh_frame_hdr:00000000000078FE                 db 0FFh
.eh_frame_hdr:00000000000078FF                 db 0FFh
.eh_frame_hdr:0000000000007900                 db 0F8h
.eh_frame_hdr:0000000000007901                 db    4
.eh_frame_hdr:0000000000007902                 db    0
.eh_frame_hdr:0000000000007903                 db    0
.eh_frame_hdr:0000000000007904                 db 0A0h
.eh_frame_hdr:0000000000007905                 db 0B0h
.eh_frame_hdr:0000000000007906                 db 0FFh
.eh_frame_hdr:0000000000007907                 db 0FFh
.eh_frame_hdr:0000000000007908                 db  0Ch
.eh_frame_hdr:0000000000007909                 db    5
.eh_frame_hdr:000000000000790A                 db    0
.eh_frame_hdr:000000000000790B                 db    0
.eh_frame_hdr:000000000000790C                 db 0F0h
.eh_frame_hdr:000000000000790D                 db 0B0h
.eh_frame_hdr:000000000000790E                 db 0FFh
.eh_frame_hdr:000000000000790F                 db 0FFh
.eh_frame_hdr:0000000000007910                 db  38h ; 8
.eh_frame_hdr:0000000000007911                 db    5
.eh_frame_hdr:0000000000007912                 db    0
.eh_frame_hdr:0000000000007913                 db    0
.eh_frame_hdr:0000000000007914                 db  10h
.eh_frame_hdr:0000000000007915                 db 0B1h
.eh_frame_hdr:0000000000007916                 db 0FFh
.eh_frame_hdr:0000000000007917                 db 0FFh
.eh_frame_hdr:0000000000007918                 db  58h ; X
.eh_frame_hdr:0000000000007919                 db    5
.eh_frame_hdr:000000000000791A                 db    0
.eh_frame_hdr:000000000000791B                 db    0
.eh_frame_hdr:000000000000791C                 db  10h
.eh_frame_hdr:000000000000791D                 db 0B2h
.eh_frame_hdr:000000000000791E                 db 0FFh
.eh_frame_hdr:000000000000791F                 db 0FFh
.eh_frame_hdr:0000000000007920                 db 0A8h
.eh_frame_hdr:0000000000007921                 db    5
.eh_frame_hdr:0000000000007922                 db    0
.eh_frame_hdr:0000000000007923                 db    0
.eh_frame_hdr:0000000000007924                 db 0B0h
.eh_frame_hdr:0000000000007925                 db 0B2h
.eh_frame_hdr:0000000000007926                 db 0FFh
.eh_frame_hdr:0000000000007927                 db 0FFh
.eh_frame_hdr:0000000000007928                 db 0C8h
.eh_frame_hdr:0000000000007929                 db    5
.eh_frame_hdr:000000000000792A                 db    0
.eh_frame_hdr:000000000000792B                 db    0
.eh_frame_hdr:000000000000792C                 db 0A0h
.eh_frame_hdr:000000000000792D                 db 0B3h
.eh_frame_hdr:000000000000792E                 db 0FFh
.eh_frame_hdr:000000000000792F                 db 0FFh
.eh_frame_hdr:0000000000007930                 db  0Ch
.eh_frame_hdr:0000000000007931                 db    6
.eh_frame_hdr:0000000000007932                 db    0
.eh_frame_hdr:0000000000007933                 db    0
.eh_frame_hdr:0000000000007934                 db 0E0h
.eh_frame_hdr:0000000000007935                 db 0C5h
.eh_frame_hdr:0000000000007936                 db 0FFh
.eh_frame_hdr:0000000000007937                 db 0FFh
.eh_frame_hdr:0000000000007938                 db  84h
.eh_frame_hdr:0000000000007939                 db    6
.eh_frame_hdr:000000000000793A                 db    0
.eh_frame_hdr:000000000000793B                 db    0
.eh_frame_hdr:000000000000793C                 db  90h
.eh_frame_hdr:000000000000793D                 db 0C7h
.eh_frame_hdr:000000000000793E                 db 0FFh
.eh_frame_hdr:000000000000793F                 db 0FFh
.eh_frame_hdr:0000000000007940                 db 0F0h
.eh_frame_hdr:0000000000007941                 db    6
.eh_frame_hdr:0000000000007942                 db    0
.eh_frame_hdr:0000000000007943                 db    0
.eh_frame_hdr:0000000000007944                 db 0D0h
.eh_frame_hdr:0000000000007945                 db 0C7h
.eh_frame_hdr:0000000000007946                 db 0FFh
.eh_frame_hdr:0000000000007947                 db 0FFh
.eh_frame_hdr:0000000000007948                 db  1Ch
.eh_frame_hdr:0000000000007949                 db    7
.eh_frame_hdr:000000000000794A                 db    0
.eh_frame_hdr:000000000000794B                 db    0
.eh_frame_hdr:000000000000794C                 db 0F0h
.eh_frame_hdr:000000000000794D                 db 0C7h
.eh_frame_hdr:000000000000794E                 db 0FFh
.eh_frame_hdr:000000000000794F                 db 0FFh
.eh_frame_hdr:0000000000007950                 db  30h ; 0
.eh_frame_hdr:0000000000007951                 db    7
.eh_frame_hdr:0000000000007952                 db    0
.eh_frame_hdr:0000000000007953                 db    0
.eh_frame_hdr:0000000000007954                 db  10h
.eh_frame_hdr:0000000000007955                 db 0C8h
.eh_frame_hdr:0000000000007956                 db 0FFh
.eh_frame_hdr:0000000000007957                 db 0FFh
.eh_frame_hdr:0000000000007958                 db  44h ; D
.eh_frame_hdr:0000000000007959                 db    7
.eh_frame_hdr:000000000000795A                 db    0
.eh_frame_hdr:000000000000795B                 db    0
.eh_frame_hdr:000000000000795C                 db  50h ; P
.eh_frame_hdr:000000000000795D                 db 0C8h
.eh_frame_hdr:000000000000795E                 db 0FFh
.eh_frame_hdr:000000000000795F                 db 0FFh
.eh_frame_hdr:0000000000007960                 db  58h ; X
.eh_frame_hdr:0000000000007961                 db    7
.eh_frame_hdr:0000000000007962                 db    0
.eh_frame_hdr:0000000000007963                 db    0
.eh_frame_hdr:0000000000007964                 db  70h ; p
.eh_frame_hdr:0000000000007965                 db 0C8h
.eh_frame_hdr:0000000000007966                 db 0FFh
.eh_frame_hdr:0000000000007967                 db 0FFh
.eh_frame_hdr:0000000000007968                 db  6Ch ; l
.eh_frame_hdr:0000000000007969                 db    7
.eh_frame_hdr:000000000000796A                 db    0
.eh_frame_hdr:000000000000796B                 db    0
.eh_frame_hdr:000000000000796C                 db 0A0h
.eh_frame_hdr:000000000000796D                 db 0C8h
.eh_frame_hdr:000000000000796E                 db 0FFh
.eh_frame_hdr:000000000000796F                 db 0FFh
.eh_frame_hdr:0000000000007970                 db  80h
.eh_frame_hdr:0000000000007971                 db    7
.eh_frame_hdr:0000000000007972                 db    0
.eh_frame_hdr:0000000000007973                 db    0
.eh_frame_hdr:0000000000007974                 db  20h
.eh_frame_hdr:0000000000007975                 db 0C9h
.eh_frame_hdr:0000000000007976                 db 0FFh
.eh_frame_hdr:0000000000007977                 db 0FFh
.eh_frame_hdr:0000000000007978                 db 0D4h
.eh_frame_hdr:0000000000007979                 db    7
.eh_frame_hdr:000000000000797A                 db    0
.eh_frame_hdr:000000000000797B                 db    0
.eh_frame_hdr:000000000000797C                 db  10h
.eh_frame_hdr:000000000000797D                 db 0CAh
.eh_frame_hdr:000000000000797E                 db 0FFh
.eh_frame_hdr:000000000000797F                 db 0FFh
.eh_frame_hdr:0000000000007980                 db  40h ; @
.eh_frame_hdr:0000000000007981                 db    8
.eh_frame_hdr:0000000000007982                 db    0
.eh_frame_hdr:0000000000007983                 db    0
.eh_frame_hdr:0000000000007984                 db  20h
.eh_frame_hdr:0000000000007985                 db 0CAh
.eh_frame_hdr:0000000000007986                 db 0FFh
.eh_frame_hdr:0000000000007987                 db 0FFh
.eh_frame_hdr:0000000000007988                 db  54h ; T
.eh_frame_hdr:0000000000007989                 db    8
.eh_frame_hdr:000000000000798A                 db    0
.eh_frame_hdr:000000000000798B                 db    0
.eh_frame_hdr:000000000000798C                 db 0C0h
.eh_frame_hdr:000000000000798D                 db 0CAh
.eh_frame_hdr:000000000000798E                 db 0FFh
.eh_frame_hdr:000000000000798F                 db 0FFh
.eh_frame_hdr:0000000000007990                 db  80h
.eh_frame_hdr:0000000000007991                 db    8
.eh_frame_hdr:0000000000007992                 db    0
.eh_frame_hdr:0000000000007993                 db    0
.eh_frame_hdr:0000000000007994                 db 0E0h
.eh_frame_hdr:0000000000007995                 db 0CAh
.eh_frame_hdr:0000000000007996                 db 0FFh
.eh_frame_hdr:0000000000007997                 db 0FFh
.eh_frame_hdr:0000000000007998                 db  94h
.eh_frame_hdr:0000000000007999                 db    8
.eh_frame_hdr:000000000000799A                 db    0
.eh_frame_hdr:000000000000799B                 db    0
.eh_frame_hdr:000000000000799C                 db 0F0h
.eh_frame_hdr:000000000000799D                 db 0CAh
.eh_frame_hdr:000000000000799E                 db 0FFh
.eh_frame_hdr:000000000000799F                 db 0FFh
.eh_frame_hdr:00000000000079A0                 db 0A8h
.eh_frame_hdr:00000000000079A1                 db    8
.eh_frame_hdr:00000000000079A2                 db    0
.eh_frame_hdr:00000000000079A3                 db    0
.eh_frame_hdr:00000000000079A4                 db  10h
.eh_frame_hdr:00000000000079A5                 db 0CBh
.eh_frame_hdr:00000000000079A6                 db 0FFh
.eh_frame_hdr:00000000000079A7                 db 0FFh
.eh_frame_hdr:00000000000079A8                 db 0BCh
.eh_frame_hdr:00000000000079A9                 db    8
.eh_frame_hdr:00000000000079AA                 db    0
.eh_frame_hdr:00000000000079AB                 db    0
.eh_frame_hdr:00000000000079AC                 db  30h ; 0
.eh_frame_hdr:00000000000079AD                 db 0CBh
.eh_frame_hdr:00000000000079AE                 db 0FFh
.eh_frame_hdr:00000000000079AF                 db 0FFh
.eh_frame_hdr:00000000000079B0                 db 0D0h
.eh_frame_hdr:00000000000079B1                 db    8
.eh_frame_hdr:00000000000079B2                 db    0
.eh_frame_hdr:00000000000079B3                 db    0
.eh_frame_hdr:00000000000079B4                 db 0C0h
.eh_frame_hdr:00000000000079B5                 db 0CBh
.eh_frame_hdr:00000000000079B6                 db 0FFh
.eh_frame_hdr:00000000000079B7                 db 0FFh
.eh_frame_hdr:00000000000079B8                 db 0ECh
.eh_frame_hdr:00000000000079B9                 db    8
.eh_frame_hdr:00000000000079BA                 db    0
.eh_frame_hdr:00000000000079BB                 db    0
.eh_frame_hdr:00000000000079BC                 db  50h ; P
.eh_frame_hdr:00000000000079BD                 db 0CCh
.eh_frame_hdr:00000000000079BE                 db 0FFh
.eh_frame_hdr:00000000000079BF                 db 0FFh
.eh_frame_hdr:00000000000079C0                 db    8
.eh_frame_hdr:00000000000079C1                 db    9
.eh_frame_hdr:00000000000079C2                 db    0
.eh_frame_hdr:00000000000079C3                 db    0
.eh_frame_hdr:00000000000079C4                 db  60h ; `
.eh_frame_hdr:00000000000079C5                 db 0CCh
.eh_frame_hdr:00000000000079C6                 db 0FFh
.eh_frame_hdr:00000000000079C7                 db 0FFh
.eh_frame_hdr:00000000000079C8                 db  1Ch
.eh_frame_hdr:00000000000079C9                 db    9
.eh_frame_hdr:00000000000079CA                 db    0
.eh_frame_hdr:00000000000079CB                 db    0
.eh_frame_hdr:00000000000079CC                 db  70h ; p
.eh_frame_hdr:00000000000079CD                 db 0CCh
.eh_frame_hdr:00000000000079CE                 db 0FFh
.eh_frame_hdr:00000000000079CF                 db 0FFh
.eh_frame_hdr:00000000000079D0                 db  30h ; 0
.eh_frame_hdr:00000000000079D1                 db    9
.eh_frame_hdr:00000000000079D2                 db    0
.eh_frame_hdr:00000000000079D3                 db    0
.eh_frame_hdr:00000000000079D4                 db  10h
.eh_frame_hdr:00000000000079D5                 db 0CDh
.eh_frame_hdr:00000000000079D6                 db 0FFh
.eh_frame_hdr:00000000000079D7                 db 0FFh
.eh_frame_hdr:00000000000079D8                 db  4Ch ; L
.eh_frame_hdr:00000000000079D9                 db    9
.eh_frame_hdr:00000000000079DA                 db    0
.eh_frame_hdr:00000000000079DB                 db    0
.eh_frame_hdr:00000000000079DC                 db  20h
.eh_frame_hdr:00000000000079DD                 db 0CDh
.eh_frame_hdr:00000000000079DE                 db 0FFh
.eh_frame_hdr:00000000000079DF                 db 0FFh
.eh_frame_hdr:00000000000079E0                 db  60h ; `
.eh_frame_hdr:00000000000079E1                 db    9
.eh_frame_hdr:00000000000079E2                 db    0
.eh_frame_hdr:00000000000079E3                 db    0
.eh_frame_hdr:00000000000079E4                 db  40h ; @
.eh_frame_hdr:00000000000079E5                 db 0CDh
.eh_frame_hdr:00000000000079E6                 db 0FFh
.eh_frame_hdr:00000000000079E7                 db 0FFh
.eh_frame_hdr:00000000000079E8                 db  74h ; t
.eh_frame_hdr:00000000000079E9                 db    9
.eh_frame_hdr:00000000000079EA                 db    0
.eh_frame_hdr:00000000000079EB                 db    0
.eh_frame_hdr:00000000000079EC                 db  50h ; P
.eh_frame_hdr:00000000000079ED                 db 0CDh
.eh_frame_hdr:00000000000079EE                 db 0FFh
.eh_frame_hdr:00000000000079EF                 db 0FFh
.eh_frame_hdr:00000000000079F0                 db  88h
.eh_frame_hdr:00000000000079F1                 db    9
.eh_frame_hdr:00000000000079F2                 db    0
.eh_frame_hdr:00000000000079F3                 db    0
.eh_frame_hdr:00000000000079F4                 db 0E0h
.eh_frame_hdr:00000000000079F5                 db 0CDh
.eh_frame_hdr:00000000000079F6                 db 0FFh
.eh_frame_hdr:00000000000079F7                 db 0FFh
.eh_frame_hdr:00000000000079F8                 db 0A4h
.eh_frame_hdr:00000000000079F9                 db    9
.eh_frame_hdr:00000000000079FA                 db    0
.eh_frame_hdr:00000000000079FB                 db    0
.eh_frame_hdr:00000000000079FC                 db  80h
.eh_frame_hdr:00000000000079FD                 db 0CEh
.eh_frame_hdr:00000000000079FE                 db 0FFh
.eh_frame_hdr:00000000000079FF                 db 0FFh
.eh_frame_hdr:0000000000007A00                 db 0C0h
.eh_frame_hdr:0000000000007A01                 db    9
.eh_frame_hdr:0000000000007A02                 db    0
.eh_frame_hdr:0000000000007A03                 db    0
.eh_frame_hdr:0000000000007A04                 db  90h
.eh_frame_hdr:0000000000007A05                 db 0CEh
.eh_frame_hdr:0000000000007A06                 db 0FFh
.eh_frame_hdr:0000000000007A07                 db 0FFh
.eh_frame_hdr:0000000000007A08                 db 0D4h
.eh_frame_hdr:0000000000007A09                 db    9
.eh_frame_hdr:0000000000007A0A                 db    0
.eh_frame_hdr:0000000000007A0B                 db    0
.eh_frame_hdr:0000000000007A0C                 db 0B0h
.eh_frame_hdr:0000000000007A0D                 db 0CEh
.eh_frame_hdr:0000000000007A0E                 db 0FFh
.eh_frame_hdr:0000000000007A0F                 db 0FFh
.eh_frame_hdr:0000000000007A10                 db 0E8h
.eh_frame_hdr:0000000000007A11                 db    9
.eh_frame_hdr:0000000000007A12                 db    0
.eh_frame_hdr:0000000000007A13                 db    0
.eh_frame_hdr:0000000000007A14                 db 0D0h
.eh_frame_hdr:0000000000007A15                 db 0CEh
.eh_frame_hdr:0000000000007A16                 db 0FFh
.eh_frame_hdr:0000000000007A17                 db 0FFh
.eh_frame_hdr:0000000000007A18                 db 0FCh
.eh_frame_hdr:0000000000007A19                 db    9
.eh_frame_hdr:0000000000007A1A                 db    0
.eh_frame_hdr:0000000000007A1B                 db    0
.eh_frame_hdr:0000000000007A1C                 db 0E0h
.eh_frame_hdr:0000000000007A1D                 db 0CEh
.eh_frame_hdr:0000000000007A1E                 db 0FFh
.eh_frame_hdr:0000000000007A1F                 db 0FFh
.eh_frame_hdr:0000000000007A20                 db  10h
.eh_frame_hdr:0000000000007A21                 db  0Ah
.eh_frame_hdr:0000000000007A22                 db    0
.eh_frame_hdr:0000000000007A23                 db    0
.eh_frame_hdr:0000000000007A24                 db    0
.eh_frame_hdr:0000000000007A25                 db 0CFh
.eh_frame_hdr:0000000000007A26                 db 0FFh
.eh_frame_hdr:0000000000007A27                 db 0FFh
.eh_frame_hdr:0000000000007A28                 db  24h ; $
.eh_frame_hdr:0000000000007A29                 db  0Ah
.eh_frame_hdr:0000000000007A2A                 db    0
.eh_frame_hdr:0000000000007A2B                 db    0
.eh_frame_hdr:0000000000007A2C                 db  20h
.eh_frame_hdr:0000000000007A2D                 db 0CFh
.eh_frame_hdr:0000000000007A2E                 db 0FFh
.eh_frame_hdr:0000000000007A2F                 db 0FFh
.eh_frame_hdr:0000000000007A30                 db  38h ; 8
.eh_frame_hdr:0000000000007A31                 db  0Ah
.eh_frame_hdr:0000000000007A32                 db    0
.eh_frame_hdr:0000000000007A33                 db    0
.eh_frame_hdr:0000000000007A34                 db  40h ; @
.eh_frame_hdr:0000000000007A35                 db 0CFh
.eh_frame_hdr:0000000000007A36                 db 0FFh
.eh_frame_hdr:0000000000007A37                 db 0FFh
.eh_frame_hdr:0000000000007A38                 db  50h ; P
.eh_frame_hdr:0000000000007A39                 db  0Ah
.eh_frame_hdr:0000000000007A3A                 db    0
.eh_frame_hdr:0000000000007A3B                 db    0
.eh_frame_hdr:0000000000007A3C                 db 0C0h
.eh_frame_hdr:0000000000007A3D                 db 0CFh
.eh_frame_hdr:0000000000007A3E                 db 0FFh
.eh_frame_hdr:0000000000007A3F                 db 0FFh
.eh_frame_hdr:0000000000007A40                 db  74h ; t
.eh_frame_hdr:0000000000007A41                 db  0Ah
.eh_frame_hdr:0000000000007A42                 db    0
.eh_frame_hdr:0000000000007A43                 db    0
.eh_frame_hdr:0000000000007A44                 db 0D0h
.eh_frame_hdr:0000000000007A45                 db 0CFh
.eh_frame_hdr:0000000000007A46                 db 0FFh
.eh_frame_hdr:0000000000007A47                 db 0FFh
.eh_frame_hdr:0000000000007A48                 db  88h
.eh_frame_hdr:0000000000007A49                 db  0Ah
.eh_frame_hdr:0000000000007A4A                 db    0
.eh_frame_hdr:0000000000007A4B                 db    0
.eh_frame_hdr:0000000000007A4C                 db 0F0h
.eh_frame_hdr:0000000000007A4D                 db 0CFh
.eh_frame_hdr:0000000000007A4E                 db 0FFh
.eh_frame_hdr:0000000000007A4F                 db 0FFh
.eh_frame_hdr:0000000000007A50                 db  9Ch
.eh_frame_hdr:0000000000007A51                 db  0Ah
.eh_frame_hdr:0000000000007A52                 db    0
.eh_frame_hdr:0000000000007A53                 db    0
.eh_frame_hdr:0000000000007A54                 db  70h ; p
.eh_frame_hdr:0000000000007A55                 db 0D1h
.eh_frame_hdr:0000000000007A56                 db 0FFh
.eh_frame_hdr:0000000000007A57                 db 0FFh
.eh_frame_hdr:0000000000007A58                 db 0E8h
.eh_frame_hdr:0000000000007A59                 db  0Ah
.eh_frame_hdr:0000000000007A5A                 db    0
.eh_frame_hdr:0000000000007A5B                 db    0
.eh_frame_hdr:0000000000007A5C                 db    0
.eh_frame_hdr:0000000000007A5D                 db 0D2h
.eh_frame_hdr:0000000000007A5E                 db 0FFh
.eh_frame_hdr:0000000000007A5F                 db 0FFh
.eh_frame_hdr:0000000000007A60                 db  0Ch
.eh_frame_hdr:0000000000007A61                 db  0Bh
.eh_frame_hdr:0000000000007A62                 db    0
.eh_frame_hdr:0000000000007A63                 db    0
.eh_frame_hdr:0000000000007A64                 db  10h
.eh_frame_hdr:0000000000007A65                 db 0D2h
.eh_frame_hdr:0000000000007A66                 db 0FFh
.eh_frame_hdr:0000000000007A67                 db 0FFh
.eh_frame_hdr:0000000000007A68                 db  20h
.eh_frame_hdr:0000000000007A69                 db  0Bh
.eh_frame_hdr:0000000000007A6A                 db    0
.eh_frame_hdr:0000000000007A6B                 db    0
.eh_frame_hdr:0000000000007A6C                 db  20h
.eh_frame_hdr:0000000000007A6D                 db 0D2h
.eh_frame_hdr:0000000000007A6E                 db 0FFh
.eh_frame_hdr:0000000000007A6F                 db 0FFh
.eh_frame_hdr:0000000000007A70                 db  38h ; 8
.eh_frame_hdr:0000000000007A71                 db  0Bh
.eh_frame_hdr:0000000000007A72                 db    0
.eh_frame_hdr:0000000000007A73                 db    0
.eh_frame_hdr:0000000000007A74                 db  40h ; @
.eh_frame_hdr:0000000000007A75                 db 0D6h
.eh_frame_hdr:0000000000007A76                 db 0FFh
.eh_frame_hdr:0000000000007A77                 db 0FFh
.eh_frame_hdr:0000000000007A78                 db  4Ch ; L
.eh_frame_hdr:0000000000007A79                 db  0Ch
.eh_frame_hdr:0000000000007A7A                 db    0
.eh_frame_hdr:0000000000007A7B                 db    0
.eh_frame_hdr:0000000000007A7C                 db  60h ; `
.eh_frame_hdr:0000000000007A7D                 db 0D6h
.eh_frame_hdr:0000000000007A7E                 db 0FFh
.eh_frame_hdr:0000000000007A7F                 db 0FFh
.eh_frame_hdr:0000000000007A80                 db  60h ; `
.eh_frame_hdr:0000000000007A81                 db  0Ch
.eh_frame_hdr:0000000000007A82                 db    0
.eh_frame_hdr:0000000000007A83                 db    0
.eh_frame_hdr:0000000000007A84                 db 0E0h
.eh_frame_hdr:0000000000007A85                 db 0D6h
.eh_frame_hdr:0000000000007A86                 db 0FFh
.eh_frame_hdr:0000000000007A87                 db 0FFh
.eh_frame_hdr:0000000000007A88                 db  7Ch ; |
.eh_frame_hdr:0000000000007A89                 db  0Ch
.eh_frame_hdr:0000000000007A8A                 db    0
.eh_frame_hdr:0000000000007A8B                 db    0
.eh_frame_hdr:0000000000007A8C                 db 0C0h
.eh_frame_hdr:0000000000007A8D                 db 0D7h
.eh_frame_hdr:0000000000007A8E                 db 0FFh
.eh_frame_hdr:0000000000007A8F                 db 0FFh
.eh_frame_hdr:0000000000007A90                 db 0A8h
.eh_frame_hdr:0000000000007A91                 db  0Ch
.eh_frame_hdr:0000000000007A92                 db    0
.eh_frame_hdr:0000000000007A93                 db    0
.eh_frame_hdr:0000000000007A94                 db  40h ; @
.eh_frame_hdr:0000000000007A95                 db 0D8h
.eh_frame_hdr:0000000000007A96                 db 0FFh
.eh_frame_hdr:0000000000007A97                 db 0FFh
.eh_frame_hdr:0000000000007A98                 db 0C8h
.eh_frame_hdr:0000000000007A99                 db  0Ch
.eh_frame_hdr:0000000000007A9A                 db    0
.eh_frame_hdr:0000000000007A9B                 db    0
.eh_frame_hdr:0000000000007A9C                 db  60h ; `
.eh_frame_hdr:0000000000007A9D                 db 0D8h
.eh_frame_hdr:0000000000007A9E                 db 0FFh
.eh_frame_hdr:0000000000007A9F                 db 0FFh
.eh_frame_hdr:0000000000007AA0                 db 0E4h
.eh_frame_hdr:0000000000007AA1                 db  0Ch
.eh_frame_hdr:0000000000007AA2                 db    0
.eh_frame_hdr:0000000000007AA3                 db    0
.eh_frame_hdr:0000000000007AA4                 db  90h
.eh_frame_hdr:0000000000007AA5                 db 0D8h
.eh_frame_hdr:0000000000007AA6                 db 0FFh
.eh_frame_hdr:0000000000007AA7                 db 0FFh
.eh_frame_hdr:0000000000007AA8                 db 0F8h
.eh_frame_hdr:0000000000007AA9                 db  0Ch
.eh_frame_hdr:0000000000007AAA                 db    0
.eh_frame_hdr:0000000000007AAB                 db    0
.eh_frame_hdr:0000000000007AAC                 db 0A0h
.eh_frame_hdr:0000000000007AAD                 db 0D8h
.eh_frame_hdr:0000000000007AAE                 db 0FFh
.eh_frame_hdr:0000000000007AAF                 db 0FFh
.eh_frame_hdr:0000000000007AB0                 db  0Ch
.eh_frame_hdr:0000000000007AB1                 db  0Dh
.eh_frame_hdr:0000000000007AB2                 db    0
.eh_frame_hdr:0000000000007AB3                 db    0
.eh_frame_hdr:0000000000007AB4                 db 0E0h
.eh_frame_hdr:0000000000007AB5                 db 0D8h
.eh_frame_hdr:0000000000007AB6                 db 0FFh
.eh_frame_hdr:0000000000007AB7                 db 0FFh
.eh_frame_hdr:0000000000007AB8                 db  30h ; 0
.eh_frame_hdr:0000000000007AB9                 db  0Dh
.eh_frame_hdr:0000000000007ABA                 db    0
.eh_frame_hdr:0000000000007ABB                 db    0
.eh_frame_hdr:0000000000007ABC                 db  10h
.eh_frame_hdr:0000000000007ABD                 db 0D9h
.eh_frame_hdr:0000000000007ABE                 db 0FFh
.eh_frame_hdr:0000000000007ABF                 db 0FFh
.eh_frame_hdr:0000000000007AC0                 db  44h ; D
.eh_frame_hdr:0000000000007AC1                 db  0Dh
.eh_frame_hdr:0000000000007AC2                 db    0
.eh_frame_hdr:0000000000007AC3                 db    0
.eh_frame_hdr:0000000000007AC4                 db 0A0h
.eh_frame_hdr:0000000000007AC5                 db 0D9h
.eh_frame_hdr:0000000000007AC6                 db 0FFh
.eh_frame_hdr:0000000000007AC7                 db 0FFh
.eh_frame_hdr:0000000000007AC8                 db  5Ch ; \
.eh_frame_hdr:0000000000007AC9                 db  0Dh
.eh_frame_hdr:0000000000007ACA                 db    0
.eh_frame_hdr:0000000000007ACB                 db    0
.eh_frame_hdr:0000000000007ACC                 db 0F0h
.eh_frame_hdr:0000000000007ACD                 db 0D9h
.eh_frame_hdr:0000000000007ACE                 db 0FFh
.eh_frame_hdr:0000000000007ACF                 db 0FFh
.eh_frame_hdr:0000000000007AD0                 db  74h ; t
.eh_frame_hdr:0000000000007AD1                 db  0Dh
.eh_frame_hdr:0000000000007AD2                 db    0
.eh_frame_hdr:0000000000007AD3                 db    0
.eh_frame_hdr:0000000000007AD4                 db  10h
.eh_frame_hdr:0000000000007AD5                 db 0DAh
.eh_frame_hdr:0000000000007AD6                 db 0FFh
.eh_frame_hdr:0000000000007AD7                 db 0FFh
.eh_frame_hdr:0000000000007AD8                 db  90h
.eh_frame_hdr:0000000000007AD9                 db  0Dh
.eh_frame_hdr:0000000000007ADA                 db    0
.eh_frame_hdr:0000000000007ADB                 db    0
.eh_frame_hdr:0000000000007ADC                 db  40h ; @
.eh_frame_hdr:0000000000007ADD                 db 0DAh
.eh_frame_hdr:0000000000007ADE                 db 0FFh
.eh_frame_hdr:0000000000007ADF                 db 0FFh
.eh_frame_hdr:0000000000007AE0                 db 0ACh
.eh_frame_hdr:0000000000007AE1                 db  0Dh
.eh_frame_hdr:0000000000007AE2                 db    0
.eh_frame_hdr:0000000000007AE3                 db    0
.eh_frame_hdr:0000000000007AE4                 db  70h ; p
.eh_frame_hdr:0000000000007AE5                 db 0DAh
.eh_frame_hdr:0000000000007AE6                 db 0FFh
.eh_frame_hdr:0000000000007AE7                 db 0FFh
.eh_frame_hdr:0000000000007AE8                 db 0D4h
.eh_frame_hdr:0000000000007AE9                 db  0Dh
.eh_frame_hdr:0000000000007AEA                 db    0
.eh_frame_hdr:0000000000007AEB                 db    0
.eh_frame_hdr:0000000000007AEC                 db  90h
.eh_frame_hdr:0000000000007AED                 db 0DAh
.eh_frame_hdr:0000000000007AEE                 db 0FFh
.eh_frame_hdr:0000000000007AEF                 db 0FFh
.eh_frame_hdr:0000000000007AF0                 db 0F0h
.eh_frame_hdr:0000000000007AF1                 db  0Dh
.eh_frame_hdr:0000000000007AF2                 db    0
.eh_frame_hdr:0000000000007AF3                 db    0
.eh_frame_hdr:0000000000007AF4                 db 0D0h
.eh_frame_hdr:0000000000007AF5                 db 0DAh
.eh_frame_hdr:0000000000007AF6                 db 0FFh
.eh_frame_hdr:0000000000007AF7                 db 0FFh
.eh_frame_hdr:0000000000007AF8                 db    8
.eh_frame_hdr:0000000000007AF9                 db  0Eh
.eh_frame_hdr:0000000000007AFA                 db    0
.eh_frame_hdr:0000000000007AFB                 db    0
.eh_frame_hdr:0000000000007AFC                 db  50h ; P
.eh_frame_hdr:0000000000007AFD                 db 0DBh
.eh_frame_hdr:0000000000007AFE                 db 0FFh
.eh_frame_hdr:0000000000007AFF                 db 0FFh
.eh_frame_hdr:0000000000007B00                 db  40h ; @
.eh_frame_hdr:0000000000007B01                 db  0Eh
.eh_frame_hdr:0000000000007B02                 db    0
.eh_frame_hdr:0000000000007B03                 db    0
.eh_frame_hdr:0000000000007B04                 db  90h
.eh_frame_hdr:0000000000007B05                 db 0DBh
.eh_frame_hdr:0000000000007B06                 db 0FFh
.eh_frame_hdr:0000000000007B07                 db 0FFh
.eh_frame_hdr:0000000000007B08                 db  60h ; `
.eh_frame_hdr:0000000000007B09                 db  0Eh
.eh_frame_hdr:0000000000007B0A                 db    0
.eh_frame_hdr:0000000000007B0B                 db    0
.eh_frame_hdr:0000000000007B0C                 db 0F0h
.eh_frame_hdr:0000000000007B0D                 db 0DBh
.eh_frame_hdr:0000000000007B0E                 db 0FFh
.eh_frame_hdr:0000000000007B0F                 db 0FFh
.eh_frame_hdr:0000000000007B10                 db  90h
.eh_frame_hdr:0000000000007B11                 db  0Eh
.eh_frame_hdr:0000000000007B12                 db    0
.eh_frame_hdr:0000000000007B13                 db    0
.eh_frame_hdr:0000000000007B14                 db  80h
.eh_frame_hdr:0000000000007B15                 db 0DCh
.eh_frame_hdr:0000000000007B16                 db 0FFh
.eh_frame_hdr:0000000000007B17                 db 0FFh
.eh_frame_hdr:0000000000007B18                 db 0D0h
.eh_frame_hdr:0000000000007B19                 db  0Eh
.eh_frame_hdr:0000000000007B1A                 db    0
.eh_frame_hdr:0000000000007B1B                 db    0
.eh_frame_hdr:0000000000007B1C                 db 0E0h
.eh_frame_hdr:0000000000007B1D                 db 0DCh
.eh_frame_hdr:0000000000007B1E                 db 0FFh
.eh_frame_hdr:0000000000007B1F                 db 0FFh
.eh_frame_hdr:0000000000007B20                 db 0F0h
.eh_frame_hdr:0000000000007B21                 db  0Eh
.eh_frame_hdr:0000000000007B22                 db    0
.eh_frame_hdr:0000000000007B23                 db    0
.eh_frame_hdr:0000000000007B24                 db  20h
.eh_frame_hdr:0000000000007B25                 db 0DDh
.eh_frame_hdr:0000000000007B26                 db 0FFh
.eh_frame_hdr:0000000000007B27                 db 0FFh
.eh_frame_hdr:0000000000007B28                 db  10h
.eh_frame_hdr:0000000000007B29                 db  0Fh
.eh_frame_hdr:0000000000007B2A                 db    0
.eh_frame_hdr:0000000000007B2B                 db    0
.eh_frame_hdr:0000000000007B2C                 db  50h ; P
.eh_frame_hdr:0000000000007B2D                 db 0DDh
.eh_frame_hdr:0000000000007B2E                 db 0FFh
.eh_frame_hdr:0000000000007B2F                 db 0FFh
.eh_frame_hdr:0000000000007B30                 db  2Ch ; ,
.eh_frame_hdr:0000000000007B31                 db  0Fh
.eh_frame_hdr:0000000000007B32                 db    0
.eh_frame_hdr:0000000000007B33                 db    0
.eh_frame_hdr:0000000000007B34                 db  90h
.eh_frame_hdr:0000000000007B35                 db 0DDh
.eh_frame_hdr:0000000000007B36                 db 0FFh
.eh_frame_hdr:0000000000007B37                 db 0FFh
.eh_frame_hdr:0000000000007B38                 db  4Ch ; L
.eh_frame_hdr:0000000000007B39                 db  0Fh
.eh_frame_hdr:0000000000007B3A                 db    0
.eh_frame_hdr:0000000000007B3B                 db    0
.eh_frame_hdr:0000000000007B3C                 db 0A0h
.eh_frame_hdr:0000000000007B3D                 db 0DDh
.eh_frame_hdr:0000000000007B3E                 db 0FFh
.eh_frame_hdr:0000000000007B3F                 db 0FFh
.eh_frame_hdr:0000000000007B40                 db  60h ; `
.eh_frame_hdr:0000000000007B41                 db  0Fh
.eh_frame_hdr:0000000000007B42                 db    0
.eh_frame_hdr:0000000000007B43                 db    0
.eh_frame_hdr:0000000000007B44                 db 0C0h
.eh_frame_hdr:0000000000007B45                 db 0DEh
.eh_frame_hdr:0000000000007B46                 db 0FFh
.eh_frame_hdr:0000000000007B47                 db 0FFh
.eh_frame_hdr:0000000000007B48                 db 0ACh
.eh_frame_hdr:0000000000007B49                 db  0Fh
.eh_frame_hdr:0000000000007B4A                 db    0
.eh_frame_hdr:0000000000007B4B                 db    0
.eh_frame_hdr:0000000000007B4C                 db 0E0h
.eh_frame_hdr:0000000000007B4D                 db 0DEh
.eh_frame_hdr:0000000000007B4E                 db 0FFh
.eh_frame_hdr:0000000000007B4F                 db 0FFh
.eh_frame_hdr:0000000000007B50                 db 0C8h
.eh_frame_hdr:0000000000007B51                 db  0Fh
.eh_frame_hdr:0000000000007B52                 db    0
.eh_frame_hdr:0000000000007B53                 db    0
.eh_frame_hdr:0000000000007B54                 db  40h ; @
.eh_frame_hdr:0000000000007B55                 db 0DFh
.eh_frame_hdr:0000000000007B56                 db 0FFh
.eh_frame_hdr:0000000000007B57                 db 0FFh
.eh_frame_hdr:0000000000007B58                 db    0
.eh_frame_hdr:0000000000007B59                 db  10h
.eh_frame_hdr:0000000000007B5A                 db    0
.eh_frame_hdr:0000000000007B5B                 db    0
.eh_frame_hdr:0000000000007B5C                 db 0A0h
.eh_frame_hdr:0000000000007B5D                 db 0DFh
.eh_frame_hdr:0000000000007B5E                 db 0FFh
.eh_frame_hdr:0000000000007B5F                 db 0FFh
.eh_frame_hdr:0000000000007B60                 db  20h
.eh_frame_hdr:0000000000007B61                 db  10h
.eh_frame_hdr:0000000000007B62                 db    0
.eh_frame_hdr:0000000000007B63                 db    0
.eh_frame_hdr:0000000000007B64                 db 0D0h
.eh_frame_hdr:0000000000007B65                 db 0E2h
.eh_frame_hdr:0000000000007B66                 db 0FFh
.eh_frame_hdr:0000000000007B67                 db 0FFh
.eh_frame_hdr:0000000000007B68                 db  6Ch ; l
.eh_frame_hdr:0000000000007B69                 db  10h
.eh_frame_hdr:0000000000007B6A                 db    0
.eh_frame_hdr:0000000000007B6B                 db    0
.eh_frame_hdr:0000000000007B6C                 db 0E0h
.eh_frame_hdr:0000000000007B6D                 db 0E2h
.eh_frame_hdr:0000000000007B6E                 db 0FFh
.eh_frame_hdr:0000000000007B6F                 db 0FFh
.eh_frame_hdr:0000000000007B70                 db  80h
.eh_frame_hdr:0000000000007B71                 db  10h
.eh_frame_hdr:0000000000007B72                 db    0
.eh_frame_hdr:0000000000007B73                 db    0
.eh_frame_hdr:0000000000007B74                 db 0F0h
.eh_frame_hdr:0000000000007B75                 db 0E2h
.eh_frame_hdr:0000000000007B76                 db 0FFh
.eh_frame_hdr:0000000000007B77                 db 0FFh
.eh_frame_hdr:0000000000007B78                 db  94h
.eh_frame_hdr:0000000000007B79                 db  10h
.eh_frame_hdr:0000000000007B7A                 db    0
.eh_frame_hdr:0000000000007B7B                 db    0
.eh_frame_hdr:0000000000007B7C                 db  90h
.eh_frame_hdr:0000000000007B7D                 db 0E4h
.eh_frame_hdr:0000000000007B7E                 db 0FFh
.eh_frame_hdr:0000000000007B7F                 db 0FFh
.eh_frame_hdr:0000000000007B80                 db 0F8h
.eh_frame_hdr:0000000000007B81                 db  10h
.eh_frame_hdr:0000000000007B82                 db    0
.eh_frame_hdr:0000000000007B83                 db    0
.eh_frame_hdr:0000000000007B84                 db 0E0h
.eh_frame_hdr:0000000000007B85                 db 0E4h
.eh_frame_hdr:0000000000007B86                 db 0FFh
.eh_frame_hdr:0000000000007B87                 db 0FFh
.eh_frame_hdr:0000000000007B88                 db  30h ; 0
.eh_frame_hdr:0000000000007B89                 db  11h
.eh_frame_hdr:0000000000007B8A                 db    0
.eh_frame_hdr:0000000000007B8B                 db    0
.eh_frame_hdr:0000000000007B8C                 db  70h ; p
.eh_frame_hdr:0000000000007B8D                 db 0E7h
.eh_frame_hdr:0000000000007B8E                 db 0FFh
.eh_frame_hdr:0000000000007B8F                 db 0FFh
.eh_frame_hdr:0000000000007B90                 db  44h ; D
.eh_frame_hdr:0000000000007B91                 db  11h
.eh_frame_hdr:0000000000007B92                 db    0
.eh_frame_hdr:0000000000007B93                 db    0
.eh_frame_hdr:0000000000007B94                 db 0B0h
.eh_frame_hdr:0000000000007B95                 db 0E9h
.eh_frame_hdr:0000000000007B96                 db 0FFh
.eh_frame_hdr:0000000000007B97                 db 0FFh
.eh_frame_hdr:0000000000007B98                 db  78h ; x
.eh_frame_hdr:0000000000007B99                 db  11h
.eh_frame_hdr:0000000000007B9A                 db    0
.eh_frame_hdr:0000000000007B9B                 db    0
.eh_frame_hdr:0000000000007B9C                 db  50h ; P
.eh_frame_hdr:0000000000007B9D                 db 0EAh
.eh_frame_hdr:0000000000007B9E                 db 0FFh
.eh_frame_hdr:0000000000007B9F                 db 0FFh
.eh_frame_hdr:0000000000007BA0                 db 0A8h
.eh_frame_hdr:0000000000007BA1                 db  11h
.eh_frame_hdr:0000000000007BA2                 db    0
.eh_frame_hdr:0000000000007BA3                 db    0
.eh_frame_hdr:0000000000007BA4                 db  60h ; `
.eh_frame_hdr:0000000000007BA5                 db 0EAh
.eh_frame_hdr:0000000000007BA6                 db 0FFh
.eh_frame_hdr:0000000000007BA7                 db 0FFh
.eh_frame_hdr:0000000000007BA8                 db 0C0h
.eh_frame_hdr:0000000000007BA9                 db  11h
.eh_frame_hdr:0000000000007BAA                 db    0
.eh_frame_hdr:0000000000007BAB                 db    0
.eh_frame_hdr:0000000000007BAC                 db 0E0h
.eh_frame_hdr:0000000000007BAD                 db 0ECh
.eh_frame_hdr:0000000000007BAE                 db 0FFh
.eh_frame_hdr:0000000000007BAF                 db 0FFh
.eh_frame_hdr:0000000000007BB0                 db 0F8h
.eh_frame_hdr:0000000000007BB1                 db  11h
.eh_frame_hdr:0000000000007BB2                 db    0
.eh_frame_hdr:0000000000007BB3                 db    0
.eh_frame_hdr:0000000000007BB4                 db  50h ; P
.eh_frame_hdr:0000000000007BB5                 db 0EDh
.eh_frame_hdr:0000000000007BB6                 db 0FFh
.eh_frame_hdr:0000000000007BB7                 db 0FFh
.eh_frame_hdr:0000000000007BB8                 db  40h ; @
.eh_frame_hdr:0000000000007BB9                 db  12h
.eh_frame_hdr:0000000000007BBA                 db    0
.eh_frame_hdr:0000000000007BBB                 db    0
.eh_frame_hdr:0000000000007BBC                 db  60h ; `
.eh_frame_hdr:0000000000007BBD                 db 0EDh
.eh_frame_hdr:0000000000007BBE                 db 0FFh
.eh_frame_hdr:0000000000007BBF                 db 0FFh
.eh_frame_hdr:0000000000007BC0                 db  58h ; X
.eh_frame_hdr:0000000000007BC1                 db  12h
.eh_frame_hdr:0000000000007BC2                 db    0
.eh_frame_hdr:0000000000007BC3                 db    0
.eh_frame_hdr:0000000000007BC3 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000007BC3
LOAD:0000000000007BC4 ; ===========================================================================
LOAD:0000000000007BC4
LOAD:0000000000007BC4 ; Segment type: Pure code
LOAD:0000000000007BC4 ; Segment permissions: Read/Execute
LOAD:0000000000007BC4 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007BC4                 assume cs:LOAD
LOAD:0000000000007BC4                 ;org 7BC4h
LOAD:0000000000007BC4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007BC4                 align 8
LOAD:0000000000007BC4 LOAD            ends
LOAD:0000000000007BC4
.eh_frame:0000000000007BC8 ; ===========================================================================
.eh_frame:0000000000007BC8
.eh_frame:0000000000007BC8 ; Segment type: Pure data
.eh_frame:0000000000007BC8 ; Segment permissions: Read
.eh_frame:0000000000007BC8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007BC8                 assume cs:_eh_frame
.eh_frame:0000000000007BC8                 ;org 7BC8h
.eh_frame:0000000000007BC8                 db  14h
.eh_frame:0000000000007BC9                 db    0
.eh_frame:0000000000007BCA                 db    0
.eh_frame:0000000000007BCB                 db    0
.eh_frame:0000000000007BCC                 db    0
.eh_frame:0000000000007BCD                 db    0
.eh_frame:0000000000007BCE                 db    0
.eh_frame:0000000000007BCF                 db    0
.eh_frame:0000000000007BD0                 db    1
.eh_frame:0000000000007BD1                 db  7Ah ; z
.eh_frame:0000000000007BD2                 db  52h ; R
.eh_frame:0000000000007BD3                 db    0
.eh_frame:0000000000007BD4                 db    1
.eh_frame:0000000000007BD5                 db  78h ; x
.eh_frame:0000000000007BD6                 db  10h
.eh_frame:0000000000007BD7                 db    1
.eh_frame:0000000000007BD8                 db  1Bh
.eh_frame:0000000000007BD9                 db  0Ch
.eh_frame:0000000000007BDA                 db    7
.eh_frame:0000000000007BDB                 db    8
.eh_frame:0000000000007BDC                 db  90h
.eh_frame:0000000000007BDD                 db    1
.eh_frame:0000000000007BDE                 db    7
.eh_frame:0000000000007BDF                 db  10h
.eh_frame:0000000000007BE0                 db  14h
.eh_frame:0000000000007BE1                 db    0
.eh_frame:0000000000007BE2                 db    0
.eh_frame:0000000000007BE3                 db    0
.eh_frame:0000000000007BE4                 db  1Ch
.eh_frame:0000000000007BE5                 db    0
.eh_frame:0000000000007BE6                 db    0
.eh_frame:0000000000007BE7                 db    0
.eh_frame:0000000000007BE8                 db  48h ; H
.eh_frame:0000000000007BE9                 db 0A6h
.eh_frame:0000000000007BEA                 db 0FFh
.eh_frame:0000000000007BEB                 db 0FFh
.eh_frame:0000000000007BEC                 db  2Bh ; +
.eh_frame:0000000000007BED                 db    0
.eh_frame:0000000000007BEE                 db    0
.eh_frame:0000000000007BEF                 db    0
.eh_frame:0000000000007BF0                 db    0
.eh_frame:0000000000007BF1                 db    0
.eh_frame:0000000000007BF2                 db    0
.eh_frame:0000000000007BF3                 db    0
.eh_frame:0000000000007BF4                 db    0
.eh_frame:0000000000007BF5                 db    0
.eh_frame:0000000000007BF6                 db    0
.eh_frame:0000000000007BF7                 db    0
.eh_frame:0000000000007BF8                 db  14h
.eh_frame:0000000000007BF9                 db    0
.eh_frame:0000000000007BFA                 db    0
.eh_frame:0000000000007BFB                 db    0
.eh_frame:0000000000007BFC                 db    0
.eh_frame:0000000000007BFD                 db    0
.eh_frame:0000000000007BFE                 db    0
.eh_frame:0000000000007BFF                 db    0
.eh_frame:0000000000007C00                 db    1
.eh_frame:0000000000007C01                 db  7Ah ; z
.eh_frame:0000000000007C02                 db  52h ; R
.eh_frame:0000000000007C03                 db    0
.eh_frame:0000000000007C04                 db    1
.eh_frame:0000000000007C05                 db  78h ; x
.eh_frame:0000000000007C06                 db  10h
.eh_frame:0000000000007C07                 db    1
.eh_frame:0000000000007C08                 db  1Bh
.eh_frame:0000000000007C09                 db  0Ch
.eh_frame:0000000000007C0A                 db    7
.eh_frame:0000000000007C0B                 db    8
.eh_frame:0000000000007C0C                 db  90h
.eh_frame:0000000000007C0D                 db    1
.eh_frame:0000000000007C0E                 db    0
.eh_frame:0000000000007C0F                 db    0
.eh_frame:0000000000007C10                 db  24h ; $
.eh_frame:0000000000007C11                 db    0
.eh_frame:0000000000007C12                 db    0
.eh_frame:0000000000007C13                 db    0
.eh_frame:0000000000007C14                 db  1Ch
.eh_frame:0000000000007C15                 db    0
.eh_frame:0000000000007C16                 db    0
.eh_frame:0000000000007C17                 db    0
.eh_frame:0000000000007C18                 db  58h ; X
.eh_frame:0000000000007C19                 db  9Bh
.eh_frame:0000000000007C1A                 db 0FFh
.eh_frame:0000000000007C1B                 db 0FFh
.eh_frame:0000000000007C1C                 db 0F0h
.eh_frame:0000000000007C1D                 db    3
.eh_frame:0000000000007C1E                 db    0
.eh_frame:0000000000007C1F                 db    0
.eh_frame:0000000000007C20                 db    0
.eh_frame:0000000000007C21                 db  0Eh
.eh_frame:0000000000007C22                 db  10h
.eh_frame:0000000000007C23                 db  46h ; F
.eh_frame:0000000000007C24                 db  0Eh
.eh_frame:0000000000007C25                 db  18h
.eh_frame:0000000000007C26                 db  4Ah ; J
.eh_frame:0000000000007C27                 db  0Fh
.eh_frame:0000000000007C28                 db  0Bh
.eh_frame:0000000000007C29                 db  77h ; w
.eh_frame:0000000000007C2A                 db    8
.eh_frame:0000000000007C2B                 db  80h
.eh_frame:0000000000007C2C                 db    0
.eh_frame:0000000000007C2D                 db  3Fh ; ?
.eh_frame:0000000000007C2E                 db  1Ah
.eh_frame:0000000000007C2F                 db  3Bh ; ;
.eh_frame:0000000000007C30                 db  2Ah ; *
.eh_frame:0000000000007C31                 db  33h ; 3
.eh_frame:0000000000007C32                 db  24h ; $
.eh_frame:0000000000007C33                 db  22h ; "
.eh_frame:0000000000007C34                 db    0
.eh_frame:0000000000007C35                 db    0
.eh_frame:0000000000007C36                 db    0
.eh_frame:0000000000007C37                 db    0
.eh_frame:0000000000007C38                 db  14h
.eh_frame:0000000000007C39                 db    0
.eh_frame:0000000000007C3A                 db    0
.eh_frame:0000000000007C3B                 db    0
.eh_frame:0000000000007C3C                 db  44h ; D
.eh_frame:0000000000007C3D                 db    0
.eh_frame:0000000000007C3E                 db    0
.eh_frame:0000000000007C3F                 db    0
.eh_frame:0000000000007C40                 db  20h
.eh_frame:0000000000007C41                 db  9Fh
.eh_frame:0000000000007C42                 db 0FFh
.eh_frame:0000000000007C43                 db 0FFh
.eh_frame:0000000000007C44                 db    8
.eh_frame:0000000000007C45                 db    0
.eh_frame:0000000000007C46                 db    0
.eh_frame:0000000000007C47                 db    0
.eh_frame:0000000000007C48                 db    0
.eh_frame:0000000000007C49                 db    0
.eh_frame:0000000000007C4A                 db    0
.eh_frame:0000000000007C4B                 db    0
.eh_frame:0000000000007C4C                 db    0
.eh_frame:0000000000007C4D                 db    0
.eh_frame:0000000000007C4E                 db    0
.eh_frame:0000000000007C4F                 db    0
.eh_frame:0000000000007C50                 db  18h
.eh_frame:0000000000007C51                 db    0
.eh_frame:0000000000007C52                 db    0
.eh_frame:0000000000007C53                 db    0
.eh_frame:0000000000007C54                 db  5Ch ; \
.eh_frame:0000000000007C55                 db    0
.eh_frame:0000000000007C56                 db    0
.eh_frame:0000000000007C57                 db    0
.eh_frame:0000000000007C58                 db 0E8h
.eh_frame:0000000000007C59                 db 0A6h
.eh_frame:0000000000007C5A                 db 0FFh
.eh_frame:0000000000007C5B                 db 0FFh
.eh_frame:0000000000007C5C                 db  37h ; 7
.eh_frame:0000000000007C5D                 db    0
.eh_frame:0000000000007C5E                 db    0
.eh_frame:0000000000007C5F                 db    0
.eh_frame:0000000000007C60                 db    0
.eh_frame:0000000000007C61                 db  4Dh ; M
.eh_frame:0000000000007C62                 db  0Eh
.eh_frame:0000000000007C63                 db  10h
.eh_frame:0000000000007C64                 db  54h ; T
.eh_frame:0000000000007C65                 db  0Eh
.eh_frame:0000000000007C66                 db    8
.eh_frame:0000000000007C67                 db  4Ch ; L
.eh_frame:0000000000007C68                 db  0Eh
.eh_frame:0000000000007C69                 db  10h
.eh_frame:0000000000007C6A                 db    0
.eh_frame:0000000000007C6B                 db    0
.eh_frame:0000000000007C6C                 db  28h ; (
.eh_frame:0000000000007C6D                 db    0
.eh_frame:0000000000007C6E                 db    0
.eh_frame:0000000000007C6F                 db    0
.eh_frame:0000000000007C70                 db  78h ; x
.eh_frame:0000000000007C71                 db    0
.eh_frame:0000000000007C72                 db    0
.eh_frame:0000000000007C73                 db    0
.eh_frame:0000000000007C74                 db  0Ch
.eh_frame:0000000000007C75                 db 0A7h
.eh_frame:0000000000007C76                 db 0FFh
.eh_frame:0000000000007C77                 db 0FFh
.eh_frame:0000000000007C78                 db  0Ah
.eh_frame:0000000000007C79                 db    4
.eh_frame:0000000000007C7A                 db    0
.eh_frame:0000000000007C7B                 db    0
.eh_frame:0000000000007C7C                 db    0
.eh_frame:0000000000007C7D                 db  42h ; B
.eh_frame:0000000000007C7E                 db  0Eh
.eh_frame:0000000000007C7F                 db  10h
.eh_frame:0000000000007C80                 db  8Dh
.eh_frame:0000000000007C81                 db    2
.eh_frame:0000000000007C82                 db  42h ; B
.eh_frame:0000000000007C83                 db  0Eh
.eh_frame:0000000000007C84                 db  18h
.eh_frame:0000000000007C85                 db  8Ch
.eh_frame:0000000000007C86                 db    3
.eh_frame:0000000000007C87                 db  46h ; F
.eh_frame:0000000000007C88                 db  0Eh
.eh_frame:0000000000007C89                 db  20h
.eh_frame:0000000000007C8A                 db  86h
.eh_frame:0000000000007C8B                 db    4
.eh_frame:0000000000007C8C                 db  41h ; A
.eh_frame:0000000000007C8D                 db  0Eh
.eh_frame:0000000000007C8E                 db  28h ; (
.eh_frame:0000000000007C8F                 db  83h
.eh_frame:0000000000007C90                 db    5
.eh_frame:0000000000007C91                 db  49h ; I
.eh_frame:0000000000007C92                 db  0Eh
.eh_frame:0000000000007C93                 db 0B0h
.eh_frame:0000000000007C94                 db    1
.eh_frame:0000000000007C95                 db    0
.eh_frame:0000000000007C96                 db    0
.eh_frame:0000000000007C97                 db    0
.eh_frame:0000000000007C98                 db  54h ; T
.eh_frame:0000000000007C99                 db    0
.eh_frame:0000000000007C9A                 db    0
.eh_frame:0000000000007C9B                 db    0
.eh_frame:0000000000007C9C                 db 0A4h
.eh_frame:0000000000007C9D                 db    0
.eh_frame:0000000000007C9E                 db    0
.eh_frame:0000000000007C9F                 db    0
.eh_frame:0000000000007CA0                 db 0D0h
.eh_frame:0000000000007CA1                 db  9Eh
.eh_frame:0000000000007CA2                 db 0FFh
.eh_frame:0000000000007CA3                 db 0FFh
.eh_frame:0000000000007CA4                 db 0B9h
.eh_frame:0000000000007CA5                 db    6
.eh_frame:0000000000007CA6                 db    0
.eh_frame:0000000000007CA7                 db    0
.eh_frame:0000000000007CA8                 db    0
.eh_frame:0000000000007CA9                 db  42h ; B
.eh_frame:0000000000007CAA                 db  0Eh
.eh_frame:0000000000007CAB                 db  10h
.eh_frame:0000000000007CAC                 db  8Fh
.eh_frame:0000000000007CAD                 db    2
.eh_frame:0000000000007CAE                 db  42h ; B
.eh_frame:0000000000007CAF                 db  0Eh
.eh_frame:0000000000007CB0                 db  18h
.eh_frame:0000000000007CB1                 db  8Eh
.eh_frame:0000000000007CB2                 db    3
.eh_frame:0000000000007CB3                 db  45h ; E
.eh_frame:0000000000007CB4                 db  0Eh
.eh_frame:0000000000007CB5                 db  20h
.eh_frame:0000000000007CB6                 db  8Dh
.eh_frame:0000000000007CB7                 db    4
.eh_frame:0000000000007CB8                 db  42h ; B
.eh_frame:0000000000007CB9                 db  0Eh
.eh_frame:0000000000007CBA                 db  28h ; (
.eh_frame:0000000000007CBB                 db  8Ch
.eh_frame:0000000000007CBC                 db    5
.eh_frame:0000000000007CBD                 db  44h ; D
.eh_frame:0000000000007CBE                 db  0Eh
.eh_frame:0000000000007CBF                 db  30h ; 0
.eh_frame:0000000000007CC0                 db  86h
.eh_frame:0000000000007CC1                 db    6
.eh_frame:0000000000007CC2                 db  41h ; A
.eh_frame:0000000000007CC3                 db  0Eh
.eh_frame:0000000000007CC4                 db  38h ; 8
.eh_frame:0000000000007CC5                 db  83h
.eh_frame:0000000000007CC6                 db    7
.eh_frame:0000000000007CC7                 db  4Fh ; O
.eh_frame:0000000000007CC8                 db  0Eh
.eh_frame:0000000000007CC9                 db  70h ; p
.eh_frame:0000000000007CCA                 db    3
.eh_frame:0000000000007CCB                 db  3Bh ; ;
.eh_frame:0000000000007CCC                 db    1
.eh_frame:0000000000007CCD                 db  0Ah
.eh_frame:0000000000007CCE                 db  0Eh
.eh_frame:0000000000007CCF                 db  78h ; x
.eh_frame:0000000000007CD0                 db  50h ; P
.eh_frame:0000000000007CD1                 db  0Eh
.eh_frame:0000000000007CD2                 db  80h
.eh_frame:0000000000007CD3                 db    1
.eh_frame:0000000000007CD4                 db  6Ah ; j
.eh_frame:0000000000007CD5                 db  0Bh
.eh_frame:0000000000007CD6                 db    3
.eh_frame:0000000000007CD7                 db 0AEh
.eh_frame:0000000000007CD8                 db    1
.eh_frame:0000000000007CD9                 db  0Ah
.eh_frame:0000000000007CDA                 db  0Eh
.eh_frame:0000000000007CDB                 db  38h ; 8
.eh_frame:0000000000007CDC                 db  43h ; C
.eh_frame:0000000000007CDD                 db  0Eh
.eh_frame:0000000000007CDE                 db  30h ; 0
.eh_frame:0000000000007CDF                 db  41h ; A
.eh_frame:0000000000007CE0                 db  0Eh
.eh_frame:0000000000007CE1                 db  28h ; (
.eh_frame:0000000000007CE2                 db  42h ; B
.eh_frame:0000000000007CE3                 db  0Eh
.eh_frame:0000000000007CE4                 db  20h
.eh_frame:0000000000007CE5                 db  42h ; B
.eh_frame:0000000000007CE6                 db  0Eh
.eh_frame:0000000000007CE7                 db  18h
.eh_frame:0000000000007CE8                 db  42h ; B
.eh_frame:0000000000007CE9                 db  0Eh
.eh_frame:0000000000007CEA                 db  10h
.eh_frame:0000000000007CEB                 db  42h ; B
.eh_frame:0000000000007CEC                 db  0Eh
.eh_frame:0000000000007CED                 db    8
.eh_frame:0000000000007CEE                 db  41h ; A
.eh_frame:0000000000007CEF                 db  0Bh
.eh_frame:0000000000007CF0                 db  4Ch ; L
.eh_frame:0000000000007CF1                 db    0
.eh_frame:0000000000007CF2                 db    0
.eh_frame:0000000000007CF3                 db    0
.eh_frame:0000000000007CF4                 db 0FCh
.eh_frame:0000000000007CF5                 db    0
.eh_frame:0000000000007CF6                 db    0
.eh_frame:0000000000007CF7                 db    0
.eh_frame:0000000000007CF8                 db  98h
.eh_frame:0000000000007CF9                 db 0AAh
.eh_frame:0000000000007CFA                 db 0FFh
.eh_frame:0000000000007CFB                 db 0FFh
.eh_frame:0000000000007CFC                 db  7Dh ; }
.eh_frame:0000000000007CFD                 db    0
.eh_frame:0000000000007CFE                 db    0
.eh_frame:0000000000007CFF                 db    0
.eh_frame:0000000000007D00                 db    0
.eh_frame:0000000000007D01                 db  42h ; B
.eh_frame:0000000000007D02                 db  0Eh
.eh_frame:0000000000007D03                 db  10h
.eh_frame:0000000000007D04                 db  8Ch
.eh_frame:0000000000007D05                 db    2
.eh_frame:0000000000007D06                 db  41h ; A
.eh_frame:0000000000007D07                 db  0Eh
.eh_frame:0000000000007D08                 db  18h
.eh_frame:0000000000007D09                 db  86h
.eh_frame:0000000000007D0A                 db    3
.eh_frame:0000000000007D0B                 db  44h ; D
.eh_frame:0000000000007D0C                 db  0Eh
.eh_frame:0000000000007D0D                 db  20h
.eh_frame:0000000000007D0E                 db  83h
.eh_frame:0000000000007D0F                 db    4
.eh_frame:0000000000007D10                 db  69h ; i
.eh_frame:0000000000007D11                 db  0Ah
.eh_frame:0000000000007D12                 db  0Eh
.eh_frame:0000000000007D13                 db  18h
.eh_frame:0000000000007D14                 db  41h ; A
.eh_frame:0000000000007D15                 db  0Eh
.eh_frame:0000000000007D16                 db  10h
.eh_frame:0000000000007D17                 db  42h ; B
.eh_frame:0000000000007D18                 db  0Eh
.eh_frame:0000000000007D19                 db    8
.eh_frame:0000000000007D1A                 db  45h ; E
.eh_frame:0000000000007D1B                 db  0Bh
.eh_frame:0000000000007D1C                 db  55h ; U
.eh_frame:0000000000007D1D                 db  0Ah
.eh_frame:0000000000007D1E                 db  0Eh
.eh_frame:0000000000007D1F                 db  18h
.eh_frame:0000000000007D20                 db  41h ; A
.eh_frame:0000000000007D21                 db  0Eh
.eh_frame:0000000000007D22                 db  10h
.eh_frame:0000000000007D23                 db  42h ; B
.eh_frame:0000000000007D24                 db  0Eh
.eh_frame:0000000000007D25                 db    8
.eh_frame:0000000000007D26                 db  48h ; H
.eh_frame:0000000000007D27                 db  0Bh
.eh_frame:0000000000007D28                 db  41h ; A
.eh_frame:0000000000007D29                 db  0Ah
.eh_frame:0000000000007D2A                 db  0Eh
.eh_frame:0000000000007D2B                 db  18h
.eh_frame:0000000000007D2C                 db  46h ; F
.eh_frame:0000000000007D2D                 db  0Eh
.eh_frame:0000000000007D2E                 db  10h
.eh_frame:0000000000007D2F                 db  42h ; B
.eh_frame:0000000000007D30                 db  0Eh
.eh_frame:0000000000007D31                 db    8
.eh_frame:0000000000007D32                 db  47h ; G
.eh_frame:0000000000007D33                 db  0Bh
.eh_frame:0000000000007D34                 db  49h ; I
.eh_frame:0000000000007D35                 db  0Eh
.eh_frame:0000000000007D36                 db  18h
.eh_frame:0000000000007D37                 db  41h ; A
.eh_frame:0000000000007D38                 db  0Eh
.eh_frame:0000000000007D39                 db  10h
.eh_frame:0000000000007D3A                 db  42h ; B
.eh_frame:0000000000007D3B                 db  0Eh
.eh_frame:0000000000007D3C                 db    8
.eh_frame:0000000000007D3D                 db    0
.eh_frame:0000000000007D3E                 db    0
.eh_frame:0000000000007D3F                 db    0
.eh_frame:0000000000007D40                 db  10h
.eh_frame:0000000000007D41                 db    0
.eh_frame:0000000000007D42                 db    0
.eh_frame:0000000000007D43                 db    0
.eh_frame:0000000000007D44                 db  4Ch ; L
.eh_frame:0000000000007D45                 db    1
.eh_frame:0000000000007D46                 db    0
.eh_frame:0000000000007D47                 db    0
.eh_frame:0000000000007D48                 db 0C8h
.eh_frame:0000000000007D49                 db 0AAh
.eh_frame:0000000000007D4A                 db 0FFh
.eh_frame:0000000000007D4B                 db 0FFh
.eh_frame:0000000000007D4C                 db    8
.eh_frame:0000000000007D4D                 db    0
.eh_frame:0000000000007D4E                 db    0
.eh_frame:0000000000007D4F                 db    0
.eh_frame:0000000000007D50                 db    0
.eh_frame:0000000000007D51                 db    0
.eh_frame:0000000000007D52                 db    0
.eh_frame:0000000000007D53                 db    0
.eh_frame:0000000000007D54                 db  10h
.eh_frame:0000000000007D55                 db    0
.eh_frame:0000000000007D56                 db    0
.eh_frame:0000000000007D57                 db    0
.eh_frame:0000000000007D58                 db  60h ; `
.eh_frame:0000000000007D59                 db    1
.eh_frame:0000000000007D5A                 db    0
.eh_frame:0000000000007D5B                 db    0
.eh_frame:0000000000007D5C                 db 0C4h
.eh_frame:0000000000007D5D                 db 0AAh
.eh_frame:0000000000007D5E                 db 0FFh
.eh_frame:0000000000007D5F                 db 0FFh
.eh_frame:0000000000007D60                 db    8
.eh_frame:0000000000007D61                 db    0
.eh_frame:0000000000007D62                 db    0
.eh_frame:0000000000007D63                 db    0
.eh_frame:0000000000007D64                 db    0
.eh_frame:0000000000007D65                 db    0
.eh_frame:0000000000007D66                 db    0
.eh_frame:0000000000007D67                 db    0
.eh_frame:0000000000007D68                 db  2Ch ; ,
.eh_frame:0000000000007D69                 db    0
.eh_frame:0000000000007D6A                 db    0
.eh_frame:0000000000007D6B                 db    0
.eh_frame:0000000000007D6C                 db  74h ; t
.eh_frame:0000000000007D6D                 db    1
.eh_frame:0000000000007D6E                 db    0
.eh_frame:0000000000007D6F                 db    0
.eh_frame:0000000000007D70                 db 0C0h
.eh_frame:0000000000007D71                 db 0AAh
.eh_frame:0000000000007D72                 db 0FFh
.eh_frame:0000000000007D73                 db 0FFh
.eh_frame:0000000000007D74                 db 0A4h
.eh_frame:0000000000007D75                 db    0
.eh_frame:0000000000007D76                 db    0
.eh_frame:0000000000007D77                 db    0
.eh_frame:0000000000007D78                 db    0
.eh_frame:0000000000007D79                 db  41h ; A
.eh_frame:0000000000007D7A                 db  0Eh
.eh_frame:0000000000007D7B                 db  10h
.eh_frame:0000000000007D7C                 db  86h
.eh_frame:0000000000007D7D                 db    2
.eh_frame:0000000000007D7E                 db  41h ; A
.eh_frame:0000000000007D7F                 db  0Eh
.eh_frame:0000000000007D80                 db  18h
.eh_frame:0000000000007D81                 db  83h
.eh_frame:0000000000007D82                 db    3
.eh_frame:0000000000007D83                 db  44h ; D
.eh_frame:0000000000007D84                 db  0Eh
.eh_frame:0000000000007D85                 db  20h
.eh_frame:0000000000007D86                 db  7Ah ; z
.eh_frame:0000000000007D87                 db  0Ah
.eh_frame:0000000000007D88                 db  0Eh
.eh_frame:0000000000007D89                 db  18h
.eh_frame:0000000000007D8A                 db  41h ; A
.eh_frame:0000000000007D8B                 db  0Eh
.eh_frame:0000000000007D8C                 db  10h
.eh_frame:0000000000007D8D                 db  41h ; A
.eh_frame:0000000000007D8E                 db  0Eh
.eh_frame:0000000000007D8F                 db    8
.eh_frame:0000000000007D90                 db  41h ; A
.eh_frame:0000000000007D91                 db  0Bh
.eh_frame:0000000000007D92                 db    0
.eh_frame:0000000000007D93                 db    0
.eh_frame:0000000000007D94                 db    0
.eh_frame:0000000000007D95                 db    0
.eh_frame:0000000000007D96                 db    0
.eh_frame:0000000000007D97                 db    0
.eh_frame:0000000000007D98                 db  10h
.eh_frame:0000000000007D99                 db    0
.eh_frame:0000000000007D9A                 db    0
.eh_frame:0000000000007D9B                 db    0
.eh_frame:0000000000007D9C                 db 0A4h
.eh_frame:0000000000007D9D                 db    1
.eh_frame:0000000000007D9E                 db    0
.eh_frame:0000000000007D9F                 db    0
.eh_frame:0000000000007DA0                 db  40h ; @
.eh_frame:0000000000007DA1                 db 0ABh
.eh_frame:0000000000007DA2                 db 0FFh
.eh_frame:0000000000007DA3                 db 0FFh
.eh_frame:0000000000007DA4                 db  5Ch ; \
.eh_frame:0000000000007DA5                 db    0
.eh_frame:0000000000007DA6                 db    0
.eh_frame:0000000000007DA7                 db    0
.eh_frame:0000000000007DA8                 db    0
.eh_frame:0000000000007DA9                 db    0
.eh_frame:0000000000007DAA                 db    0
.eh_frame:0000000000007DAB                 db    0
.eh_frame:0000000000007DAC                 db  28h ; (
.eh_frame:0000000000007DAD                 db    0
.eh_frame:0000000000007DAE                 db    0
.eh_frame:0000000000007DAF                 db    0
.eh_frame:0000000000007DB0                 db 0B8h
.eh_frame:0000000000007DB1                 db    1
.eh_frame:0000000000007DB2                 db    0
.eh_frame:0000000000007DB3                 db    0
.eh_frame:0000000000007DB4                 db  8Ch
.eh_frame:0000000000007DB5                 db 0ABh
.eh_frame:0000000000007DB6                 db 0FFh
.eh_frame:0000000000007DB7                 db 0FFh
.eh_frame:0000000000007DB8                 db  47h ; G
.eh_frame:0000000000007DB9                 db    0
.eh_frame:0000000000007DBA                 db    0
.eh_frame:0000000000007DBB                 db    0
.eh_frame:0000000000007DBC                 db    0
.eh_frame:0000000000007DBD                 db  41h ; A
.eh_frame:0000000000007DBE                 db  0Eh
.eh_frame:0000000000007DBF                 db  10h
.eh_frame:0000000000007DC0                 db  83h
.eh_frame:0000000000007DC1                 db    2
.eh_frame:0000000000007DC2                 db  5Ah ; Z
.eh_frame:0000000000007DC3                 db  0Ah
.eh_frame:0000000000007DC4                 db  0Eh
.eh_frame:0000000000007DC5                 db    8
.eh_frame:0000000000007DC6                 db  45h ; E
.eh_frame:0000000000007DC7                 db  0Bh
.eh_frame:0000000000007DC8                 db  5Dh ; ]
.eh_frame:0000000000007DC9                 db  0Ah
.eh_frame:0000000000007DCA                 db  0Eh
.eh_frame:0000000000007DCB                 db    8
.eh_frame:0000000000007DCC                 db  43h ; C
.eh_frame:0000000000007DCD                 db  0Bh
.eh_frame:0000000000007DCE                 db  46h ; F
.eh_frame:0000000000007DCF                 db  0Eh
.eh_frame:0000000000007DD0                 db    8
.eh_frame:0000000000007DD1                 db    0
.eh_frame:0000000000007DD2                 db    0
.eh_frame:0000000000007DD3                 db    0
.eh_frame:0000000000007DD4                 db    0
.eh_frame:0000000000007DD5                 db    0
.eh_frame:0000000000007DD6                 db    0
.eh_frame:0000000000007DD7                 db    0
.eh_frame:0000000000007DD8                 db  1Ch
.eh_frame:0000000000007DD9                 db    0
.eh_frame:0000000000007DDA                 db    0
.eh_frame:0000000000007DDB                 db    0
.eh_frame:0000000000007DDC                 db 0E4h
.eh_frame:0000000000007DDD                 db    1
.eh_frame:0000000000007DDE                 db    0
.eh_frame:0000000000007DDF                 db    0
.eh_frame:0000000000007DE0                 db 0B0h
.eh_frame:0000000000007DE1                 db 0ABh
.eh_frame:0000000000007DE2                 db 0FFh
.eh_frame:0000000000007DE3                 db 0FFh
.eh_frame:0000000000007DE4                 db  18h
.eh_frame:0000000000007DE5                 db    0
.eh_frame:0000000000007DE6                 db    0
.eh_frame:0000000000007DE7                 db    0
.eh_frame:0000000000007DE8                 db    0
.eh_frame:0000000000007DE9                 db  44h ; D
.eh_frame:0000000000007DEA                 db  0Eh
.eh_frame:0000000000007DEB                 db  10h
.eh_frame:0000000000007DEC                 db  4Eh ; N
.eh_frame:0000000000007DED                 db  0Ah
.eh_frame:0000000000007DEE                 db  0Eh
.eh_frame:0000000000007DEF                 db    8
.eh_frame:0000000000007DF0                 db  41h ; A
.eh_frame:0000000000007DF1                 db  0Bh
.eh_frame:0000000000007DF2                 db    0
.eh_frame:0000000000007DF3                 db    0
.eh_frame:0000000000007DF4                 db    0
.eh_frame:0000000000007DF5                 db    0
.eh_frame:0000000000007DF6                 db    0
.eh_frame:0000000000007DF7                 db    0
.eh_frame:0000000000007DF8                 db  4Ch ; L
.eh_frame:0000000000007DF9                 db    0
.eh_frame:0000000000007DFA                 db    0
.eh_frame:0000000000007DFB                 db    0
.eh_frame:0000000000007DFC                 db    4
.eh_frame:0000000000007DFD                 db    2
.eh_frame:0000000000007DFE                 db    0
.eh_frame:0000000000007DFF                 db    0
.eh_frame:0000000000007E00                 db 0B0h
.eh_frame:0000000000007E01                 db 0ABh
.eh_frame:0000000000007E02                 db 0FFh
.eh_frame:0000000000007E03                 db 0FFh
.eh_frame:0000000000007E04                 db 0FFh
.eh_frame:0000000000007E05                 db    0
.eh_frame:0000000000007E06                 db    0
.eh_frame:0000000000007E07                 db    0
.eh_frame:0000000000007E08                 db    0
.eh_frame:0000000000007E09                 db  42h ; B
.eh_frame:0000000000007E0A                 db  0Eh
.eh_frame:0000000000007E0B                 db  10h
.eh_frame:0000000000007E0C                 db  8Fh
.eh_frame:0000000000007E0D                 db    2
.eh_frame:0000000000007E0E                 db  42h ; B
.eh_frame:0000000000007E0F                 db  0Eh
.eh_frame:0000000000007E10                 db  18h
.eh_frame:0000000000007E11                 db  8Eh
.eh_frame:0000000000007E12                 db    3
.eh_frame:0000000000007E13                 db  45h ; E
.eh_frame:0000000000007E14                 db  0Eh
.eh_frame:0000000000007E15                 db  20h
.eh_frame:0000000000007E16                 db  8Dh
.eh_frame:0000000000007E17                 db    4
.eh_frame:0000000000007E18                 db  42h ; B
.eh_frame:0000000000007E19                 db  0Eh
.eh_frame:0000000000007E1A                 db  28h ; (
.eh_frame:0000000000007E1B                 db  8Ch
.eh_frame:0000000000007E1C                 db    5
.eh_frame:0000000000007E1D                 db  44h ; D
.eh_frame:0000000000007E1E                 db  0Eh
.eh_frame:0000000000007E1F                 db  30h ; 0
.eh_frame:0000000000007E20                 db  86h
.eh_frame:0000000000007E21                 db    6
.eh_frame:0000000000007E22                 db  41h ; A
.eh_frame:0000000000007E23                 db  0Eh
.eh_frame:0000000000007E24                 db  38h ; 8
.eh_frame:0000000000007E25                 db  83h
.eh_frame:0000000000007E26                 db    7
.eh_frame:0000000000007E27                 db  47h ; G
.eh_frame:0000000000007E28                 db  0Eh
.eh_frame:0000000000007E29                 db  50h ; P
.eh_frame:0000000000007E2A                 db    2
.eh_frame:0000000000007E2B                 db 0C3h
.eh_frame:0000000000007E2C                 db  0Ah
.eh_frame:0000000000007E2D                 db  0Eh
.eh_frame:0000000000007E2E                 db  38h ; 8
.eh_frame:0000000000007E2F                 db  44h ; D
.eh_frame:0000000000007E30                 db  0Eh
.eh_frame:0000000000007E31                 db  30h ; 0
.eh_frame:0000000000007E32                 db  41h ; A
.eh_frame:0000000000007E33                 db  0Eh
.eh_frame:0000000000007E34                 db  28h ; (
.eh_frame:0000000000007E35                 db  42h ; B
.eh_frame:0000000000007E36                 db  0Eh
.eh_frame:0000000000007E37                 db  20h
.eh_frame:0000000000007E38                 db  42h ; B
.eh_frame:0000000000007E39                 db  0Eh
.eh_frame:0000000000007E3A                 db  18h
.eh_frame:0000000000007E3B                 db  42h ; B
.eh_frame:0000000000007E3C                 db  0Eh
.eh_frame:0000000000007E3D                 db  10h
.eh_frame:0000000000007E3E                 db  42h ; B
.eh_frame:0000000000007E3F                 db  0Eh
.eh_frame:0000000000007E40                 db    8
.eh_frame:0000000000007E41                 db  49h ; I
.eh_frame:0000000000007E42                 db  0Bh
.eh_frame:0000000000007E43                 db    0
.eh_frame:0000000000007E44                 db    0
.eh_frame:0000000000007E45                 db    0
.eh_frame:0000000000007E46                 db    0
.eh_frame:0000000000007E47                 db    0
.eh_frame:0000000000007E48                 db  1Ch
.eh_frame:0000000000007E49                 db    0
.eh_frame:0000000000007E4A                 db    0
.eh_frame:0000000000007E4B                 db    0
.eh_frame:0000000000007E4C                 db  54h ; T
.eh_frame:0000000000007E4D                 db    2
.eh_frame:0000000000007E4E                 db    0
.eh_frame:0000000000007E4F                 db    0
.eh_frame:0000000000007E50                 db  60h ; `
.eh_frame:0000000000007E51                 db 0ACh
.eh_frame:0000000000007E52                 db 0FFh
.eh_frame:0000000000007E53                 db 0FFh
.eh_frame:0000000000007E54                 db  9Fh
.eh_frame:0000000000007E55                 db    0
.eh_frame:0000000000007E56                 db    0
.eh_frame:0000000000007E57                 db    0
.eh_frame:0000000000007E58                 db    0
.eh_frame:0000000000007E59                 db  44h ; D
.eh_frame:0000000000007E5A                 db  0Eh
.eh_frame:0000000000007E5B                 db  10h
.eh_frame:0000000000007E5C                 db  83h
.eh_frame:0000000000007E5D                 db    2
.eh_frame:0000000000007E5E                 db    2
.eh_frame:0000000000007E5F                 db  78h ; x
.eh_frame:0000000000007E60                 db  0Ah
.eh_frame:0000000000007E61                 db  0Eh
.eh_frame:0000000000007E62                 db    8
.eh_frame:0000000000007E63                 db  41h ; A
.eh_frame:0000000000007E64                 db  0Bh
.eh_frame:0000000000007E65                 db    0
.eh_frame:0000000000007E66                 db    0
.eh_frame:0000000000007E67                 db    0
.eh_frame:0000000000007E68                 db  40h ; @
.eh_frame:0000000000007E69                 db    0
.eh_frame:0000000000007E6A                 db    0
.eh_frame:0000000000007E6B                 db    0
.eh_frame:0000000000007E6C                 db  74h ; t
.eh_frame:0000000000007E6D                 db    2
.eh_frame:0000000000007E6E                 db    0
.eh_frame:0000000000007E6F                 db    0
.eh_frame:0000000000007E70                 db 0E0h
.eh_frame:0000000000007E71                 db 0ACh
.eh_frame:0000000000007E72                 db 0FFh
.eh_frame:0000000000007E73                 db 0FFh
.eh_frame:0000000000007E74                 db 0E7h
.eh_frame:0000000000007E75                 db    0
.eh_frame:0000000000007E76                 db    0
.eh_frame:0000000000007E77                 db    0
.eh_frame:0000000000007E78                 db    0
.eh_frame:0000000000007E79                 db  41h ; A
.eh_frame:0000000000007E7A                 db  0Eh
.eh_frame:0000000000007E7B                 db  10h
.eh_frame:0000000000007E7C                 db  86h
.eh_frame:0000000000007E7D                 db    2
.eh_frame:0000000000007E7E                 db  41h ; A
.eh_frame:0000000000007E7F                 db  0Eh
.eh_frame:0000000000007E80                 db  18h
.eh_frame:0000000000007E81                 db  83h
.eh_frame:0000000000007E82                 db    3
.eh_frame:0000000000007E83                 db  49h ; I
.eh_frame:0000000000007E84                 db  0Eh
.eh_frame:0000000000007E85                 db  20h
.eh_frame:0000000000007E86                 db  6Eh ; n
.eh_frame:0000000000007E87                 db  0Ah
.eh_frame:0000000000007E88                 db  0Eh
.eh_frame:0000000000007E89                 db  18h
.eh_frame:0000000000007E8A                 db  41h ; A
.eh_frame:0000000000007E8B                 db  0Eh
.eh_frame:0000000000007E8C                 db  10h
.eh_frame:0000000000007E8D                 db  41h ; A
.eh_frame:0000000000007E8E                 db  0Eh
.eh_frame:0000000000007E8F                 db    8
.eh_frame:0000000000007E90                 db  45h ; E
.eh_frame:0000000000007E91                 db  0Bh
.eh_frame:0000000000007E92                 db    2
.eh_frame:0000000000007E93                 db  4Ah ; J
.eh_frame:0000000000007E94                 db  0Ah
.eh_frame:0000000000007E95                 db  0Eh
.eh_frame:0000000000007E96                 db  18h
.eh_frame:0000000000007E97                 db  41h ; A
.eh_frame:0000000000007E98                 db  0Eh
.eh_frame:0000000000007E99                 db  10h
.eh_frame:0000000000007E9A                 db  41h ; A
.eh_frame:0000000000007E9B                 db  0Eh
.eh_frame:0000000000007E9C                 db    8
.eh_frame:0000000000007E9D                 db  44h ; D
.eh_frame:0000000000007E9E                 db  0Bh
.eh_frame:0000000000007E9F                 db    2
.eh_frame:0000000000007EA0                 db  54h ; T
.eh_frame:0000000000007EA1                 db  0Eh
.eh_frame:0000000000007EA2                 db  18h
.eh_frame:0000000000007EA3                 db  41h ; A
.eh_frame:0000000000007EA4                 db  0Eh
.eh_frame:0000000000007EA5                 db  10h
.eh_frame:0000000000007EA6                 db  41h ; A
.eh_frame:0000000000007EA7                 db  0Eh
.eh_frame:0000000000007EA8                 db    8
.eh_frame:0000000000007EA9                 db    0
.eh_frame:0000000000007EAA                 db    0
.eh_frame:0000000000007EAB                 db    0
.eh_frame:0000000000007EAC                 db  74h ; t
.eh_frame:0000000000007EAD                 db    0
.eh_frame:0000000000007EAE                 db    0
.eh_frame:0000000000007EAF                 db    0
.eh_frame:0000000000007EB0                 db 0B8h
.eh_frame:0000000000007EB1                 db    2
.eh_frame:0000000000007EB2                 db    0
.eh_frame:0000000000007EB3                 db    0
.eh_frame:0000000000007EB4                 db  8Ch
.eh_frame:0000000000007EB5                 db 0ADh
.eh_frame:0000000000007EB6                 db 0FFh
.eh_frame:0000000000007EB7                 db 0FFh
.eh_frame:0000000000007EB8                 db  34h ; 4
.eh_frame:0000000000007EB9                 db  12h
.eh_frame:0000000000007EBA                 db    0
.eh_frame:0000000000007EBB                 db    0
.eh_frame:0000000000007EBC                 db    0
.eh_frame:0000000000007EBD                 db  42h ; B
.eh_frame:0000000000007EBE                 db  0Eh
.eh_frame:0000000000007EBF                 db  10h
.eh_frame:0000000000007EC0                 db  8Fh
.eh_frame:0000000000007EC1                 db    2
.eh_frame:0000000000007EC2                 db  42h ; B
.eh_frame:0000000000007EC3                 db  0Eh
.eh_frame:0000000000007EC4                 db  18h
.eh_frame:0000000000007EC5                 db  8Eh
.eh_frame:0000000000007EC6                 db    3
.eh_frame:0000000000007EC7                 db  45h ; E
.eh_frame:0000000000007EC8                 db  0Eh
.eh_frame:0000000000007EC9                 db  20h
.eh_frame:0000000000007ECA                 db  8Dh
.eh_frame:0000000000007ECB                 db    4
.eh_frame:0000000000007ECC                 db  42h ; B
.eh_frame:0000000000007ECD                 db  0Eh
.eh_frame:0000000000007ECE                 db  28h ; (
.eh_frame:0000000000007ECF                 db  8Ch
.eh_frame:0000000000007ED0                 db    5
.eh_frame:0000000000007ED1                 db  44h ; D
.eh_frame:0000000000007ED2                 db  0Eh
.eh_frame:0000000000007ED3                 db  30h ; 0
.eh_frame:0000000000007ED4                 db  86h
.eh_frame:0000000000007ED5                 db    6
.eh_frame:0000000000007ED6                 db  41h ; A
.eh_frame:0000000000007ED7                 db  0Eh
.eh_frame:0000000000007ED8                 db  38h ; 8
.eh_frame:0000000000007ED9                 db  83h
.eh_frame:0000000000007EDA                 db    7
.eh_frame:0000000000007EDB                 db  53h ; S
.eh_frame:0000000000007EDC                 db  0Eh
.eh_frame:0000000000007EDD                 db 0F0h
.eh_frame:0000000000007EDE                 db    1
.eh_frame:0000000000007EDF                 db    3
.eh_frame:0000000000007EE0                 db  81h
.eh_frame:0000000000007EE1                 db  0Bh
.eh_frame:0000000000007EE2                 db  0Eh
.eh_frame:0000000000007EE3                 db 0F8h
.eh_frame:0000000000007EE4                 db    1
.eh_frame:0000000000007EE5                 db  4Ah ; J
.eh_frame:0000000000007EE6                 db  0Eh
.eh_frame:0000000000007EE7                 db  80h
.eh_frame:0000000000007EE8                 db    2
.eh_frame:0000000000007EE9                 db  44h ; D
.eh_frame:0000000000007EEA                 db  0Eh
.eh_frame:0000000000007EEB                 db  88h
.eh_frame:0000000000007EEC                 db    2
.eh_frame:0000000000007EED                 db  45h ; E
.eh_frame:0000000000007EEE                 db  0Eh
.eh_frame:0000000000007EEF                 db  90h
.eh_frame:0000000000007EF0                 db    2
.eh_frame:0000000000007EF1                 db  5Fh ; _
.eh_frame:0000000000007EF2                 db  0Eh
.eh_frame:0000000000007EF3                 db 0F0h
.eh_frame:0000000000007EF4                 db    1
.eh_frame:0000000000007EF5                 db  64h ; d
.eh_frame:0000000000007EF6                 db  0Ah
.eh_frame:0000000000007EF7                 db  0Eh
.eh_frame:0000000000007EF8                 db  38h ; 8
.eh_frame:0000000000007EF9                 db  41h ; A
.eh_frame:0000000000007EFA                 db  0Eh
.eh_frame:0000000000007EFB                 db  30h ; 0
.eh_frame:0000000000007EFC                 db  41h ; A
.eh_frame:0000000000007EFD                 db  0Eh
.eh_frame:0000000000007EFE                 db  28h ; (
.eh_frame:0000000000007EFF                 db  42h ; B
.eh_frame:0000000000007F00                 db  0Eh
.eh_frame:0000000000007F01                 db  20h
.eh_frame:0000000000007F02                 db  42h ; B
.eh_frame:0000000000007F03                 db  0Eh
.eh_frame:0000000000007F04                 db  18h
.eh_frame:0000000000007F05                 db  42h ; B
.eh_frame:0000000000007F06                 db  0Eh
.eh_frame:0000000000007F07                 db  10h
.eh_frame:0000000000007F08                 db  42h ; B
.eh_frame:0000000000007F09                 db  0Eh
.eh_frame:0000000000007F0A                 db    8
.eh_frame:0000000000007F0B                 db  44h ; D
.eh_frame:0000000000007F0C                 db  0Bh
.eh_frame:0000000000007F0D                 db    3
.eh_frame:0000000000007F0E                 db  99h
.eh_frame:0000000000007F0F                 db    5
.eh_frame:0000000000007F10                 db  0Eh
.eh_frame:0000000000007F11                 db 0F8h
.eh_frame:0000000000007F12                 db    1
.eh_frame:0000000000007F13                 db  4Dh ; M
.eh_frame:0000000000007F14                 db  0Eh
.eh_frame:0000000000007F15                 db  80h
.eh_frame:0000000000007F16                 db    2
.eh_frame:0000000000007F17                 db  44h ; D
.eh_frame:0000000000007F18                 db  0Eh
.eh_frame:0000000000007F19                 db  88h
.eh_frame:0000000000007F1A                 db    2
.eh_frame:0000000000007F1B                 db  47h ; G
.eh_frame:0000000000007F1C                 db  0Eh
.eh_frame:0000000000007F1D                 db  90h
.eh_frame:0000000000007F1E                 db    2
.eh_frame:0000000000007F1F                 db  5Bh ; [
.eh_frame:0000000000007F20                 db  0Eh
.eh_frame:0000000000007F21                 db 0F0h
.eh_frame:0000000000007F22                 db    1
.eh_frame:0000000000007F23                 db    0
.eh_frame:0000000000007F24                 db  68h ; h
.eh_frame:0000000000007F25                 db    0
.eh_frame:0000000000007F26                 db    0
.eh_frame:0000000000007F27                 db    0
.eh_frame:0000000000007F28                 db  30h ; 0
.eh_frame:0000000000007F29                 db    3
.eh_frame:0000000000007F2A                 db    0
.eh_frame:0000000000007F2B                 db    0
.eh_frame:0000000000007F2C                 db  54h ; T
.eh_frame:0000000000007F2D                 db 0BFh
.eh_frame:0000000000007F2E                 db 0FFh
.eh_frame:0000000000007F2F                 db 0FFh
.eh_frame:0000000000007F30                 db 0ABh
.eh_frame:0000000000007F31                 db    1
.eh_frame:0000000000007F32                 db    0
.eh_frame:0000000000007F33                 db    0
.eh_frame:0000000000007F34                 db    0
.eh_frame:0000000000007F35                 db  42h ; B
.eh_frame:0000000000007F36                 db  0Eh
.eh_frame:0000000000007F37                 db  10h
.eh_frame:0000000000007F38                 db  8Fh
.eh_frame:0000000000007F39                 db    2
.eh_frame:0000000000007F3A                 db  42h ; B
.eh_frame:0000000000007F3B                 db  0Eh
.eh_frame:0000000000007F3C                 db  18h
.eh_frame:0000000000007F3D                 db  8Eh
.eh_frame:0000000000007F3E                 db    3
.eh_frame:0000000000007F3F                 db  45h ; E
.eh_frame:0000000000007F40                 db  0Eh
.eh_frame:0000000000007F41                 db  20h
.eh_frame:0000000000007F42                 db  8Dh
.eh_frame:0000000000007F43                 db    4
.eh_frame:0000000000007F44                 db  42h ; B
.eh_frame:0000000000007F45                 db  0Eh
.eh_frame:0000000000007F46                 db  28h ; (
.eh_frame:0000000000007F47                 db  8Ch
.eh_frame:0000000000007F48                 db    5
.eh_frame:0000000000007F49                 db  44h ; D
.eh_frame:0000000000007F4A                 db  0Eh
.eh_frame:0000000000007F4B                 db  30h ; 0
.eh_frame:0000000000007F4C                 db  86h
.eh_frame:0000000000007F4D                 db    6
.eh_frame:0000000000007F4E                 db  41h ; A
.eh_frame:0000000000007F4F                 db  0Eh
.eh_frame:0000000000007F50                 db  38h ; 8
.eh_frame:0000000000007F51                 db  83h
.eh_frame:0000000000007F52                 db    7
.eh_frame:0000000000007F53                 db  47h ; G
.eh_frame:0000000000007F54                 db  0Eh
.eh_frame:0000000000007F55                 db  60h ; `
.eh_frame:0000000000007F56                 db    2
.eh_frame:0000000000007F57                 db  99h
.eh_frame:0000000000007F58                 db  0Eh
.eh_frame:0000000000007F59                 db  68h ; h
.eh_frame:0000000000007F5A                 db  5Fh ; _
.eh_frame:0000000000007F5B                 db  0Eh
.eh_frame:0000000000007F5C                 db  70h ; p
.eh_frame:0000000000007F5D                 db  46h ; F
.eh_frame:0000000000007F5E                 db  0Eh
.eh_frame:0000000000007F5F                 db  78h ; x
.eh_frame:0000000000007F60                 db  42h ; B
.eh_frame:0000000000007F61                 db  0Eh
.eh_frame:0000000000007F62                 db  80h
.eh_frame:0000000000007F63                 db    1
.eh_frame:0000000000007F64                 db  59h ; Y
.eh_frame:0000000000007F65                 db  0Eh
.eh_frame:0000000000007F66                 db  60h ; `
.eh_frame:0000000000007F67                 db    2
.eh_frame:0000000000007F68                 db  40h ; @
.eh_frame:0000000000007F69                 db  0Eh
.eh_frame:0000000000007F6A                 db  68h ; h
.eh_frame:0000000000007F6B                 db  4Bh ; K
.eh_frame:0000000000007F6C                 db  0Eh
.eh_frame:0000000000007F6D                 db  70h ; p
.eh_frame:0000000000007F6E                 db  43h ; C
.eh_frame:0000000000007F6F                 db  0Eh
.eh_frame:0000000000007F70                 db  78h ; x
.eh_frame:0000000000007F71                 db  45h ; E
.eh_frame:0000000000007F72                 db  0Eh
.eh_frame:0000000000007F73                 db  80h
.eh_frame:0000000000007F74                 db    1
.eh_frame:0000000000007F75                 db  5Eh ; ^
.eh_frame:0000000000007F76                 db  0Eh
.eh_frame:0000000000007F77                 db  60h ; `
.eh_frame:0000000000007F78                 db  4Ch ; L
.eh_frame:0000000000007F79                 db  0Ah
.eh_frame:0000000000007F7A                 db  0Eh
.eh_frame:0000000000007F7B                 db  38h ; 8
.eh_frame:0000000000007F7C                 db  44h ; D
.eh_frame:0000000000007F7D                 db  0Eh
.eh_frame:0000000000007F7E                 db  30h ; 0
.eh_frame:0000000000007F7F                 db  41h ; A
.eh_frame:0000000000007F80                 db  0Eh
.eh_frame:0000000000007F81                 db  28h ; (
.eh_frame:0000000000007F82                 db  42h ; B
.eh_frame:0000000000007F83                 db  0Eh
.eh_frame:0000000000007F84                 db  20h
.eh_frame:0000000000007F85                 db  42h ; B
.eh_frame:0000000000007F86                 db  0Eh
.eh_frame:0000000000007F87                 db  18h
.eh_frame:0000000000007F88                 db  42h ; B
.eh_frame:0000000000007F89                 db  0Eh
.eh_frame:0000000000007F8A                 db  10h
.eh_frame:0000000000007F8B                 db  42h ; B
.eh_frame:0000000000007F8C                 db  0Eh
.eh_frame:0000000000007F8D                 db    8
.eh_frame:0000000000007F8E                 db  46h ; F
.eh_frame:0000000000007F8F                 db  0Bh
.eh_frame:0000000000007F90                 db  28h ; (
.eh_frame:0000000000007F91                 db    0
.eh_frame:0000000000007F92                 db    0
.eh_frame:0000000000007F93                 db    0
.eh_frame:0000000000007F94                 db  9Ch
.eh_frame:0000000000007F95                 db    3
.eh_frame:0000000000007F96                 db    0
.eh_frame:0000000000007F97                 db    0
.eh_frame:0000000000007F98                 db  98h
.eh_frame:0000000000007F99                 db 0C0h
.eh_frame:0000000000007F9A                 db 0FFh
.eh_frame:0000000000007F9B                 db 0FFh
.eh_frame:0000000000007F9C                 db  36h ; 6
.eh_frame:0000000000007F9D                 db    0
.eh_frame:0000000000007F9E                 db    0
.eh_frame:0000000000007F9F                 db    0
.eh_frame:0000000000007FA0                 db    0
.eh_frame:0000000000007FA1                 db  42h ; B
.eh_frame:0000000000007FA2                 db  0Eh
.eh_frame:0000000000007FA3                 db  10h
.eh_frame:0000000000007FA4                 db  8Ch
.eh_frame:0000000000007FA5                 db    2
.eh_frame:0000000000007FA6                 db  41h ; A
.eh_frame:0000000000007FA7                 db  0Eh
.eh_frame:0000000000007FA8                 db  18h
.eh_frame:0000000000007FA9                 db  86h
.eh_frame:0000000000007FAA                 db    3
.eh_frame:0000000000007FAB                 db  41h ; A
.eh_frame:0000000000007FAC                 db  0Eh
.eh_frame:0000000000007FAD                 db  20h
.eh_frame:0000000000007FAE                 db  83h
.eh_frame:0000000000007FAF                 db    4
.eh_frame:0000000000007FB0                 db  6Eh ; n
.eh_frame:0000000000007FB1                 db  0Eh
.eh_frame:0000000000007FB2                 db  18h
.eh_frame:0000000000007FB3                 db  41h ; A
.eh_frame:0000000000007FB4                 db  0Eh
.eh_frame:0000000000007FB5                 db  10h
.eh_frame:0000000000007FB6                 db  42h ; B
.eh_frame:0000000000007FB7                 db  0Eh
.eh_frame:0000000000007FB8                 db    8
.eh_frame:0000000000007FB9                 db    0
.eh_frame:0000000000007FBA                 db    0
.eh_frame:0000000000007FBB                 db    0
.eh_frame:0000000000007FBC                 db  10h
.eh_frame:0000000000007FBD                 db    0
.eh_frame:0000000000007FBE                 db    0
.eh_frame:0000000000007FBF                 db    0
.eh_frame:0000000000007FC0                 db 0C8h
.eh_frame:0000000000007FC1                 db    3
.eh_frame:0000000000007FC2                 db    0
.eh_frame:0000000000007FC3                 db    0
.eh_frame:0000000000007FC4                 db 0ACh
.eh_frame:0000000000007FC5                 db 0C0h
.eh_frame:0000000000007FC6                 db 0FFh
.eh_frame:0000000000007FC7                 db 0FFh
.eh_frame:0000000000007FC8                 db  11h
.eh_frame:0000000000007FC9                 db    0
.eh_frame:0000000000007FCA                 db    0
.eh_frame:0000000000007FCB                 db    0
.eh_frame:0000000000007FCC                 db    0
.eh_frame:0000000000007FCD                 db    0
.eh_frame:0000000000007FCE                 db    0
.eh_frame:0000000000007FCF                 db    0
.eh_frame:0000000000007FD0                 db  10h
.eh_frame:0000000000007FD1                 db    0
.eh_frame:0000000000007FD2                 db    0
.eh_frame:0000000000007FD3                 db    0
.eh_frame:0000000000007FD4                 db 0DCh
.eh_frame:0000000000007FD5                 db    3
.eh_frame:0000000000007FD6                 db    0
.eh_frame:0000000000007FD7                 db    0
.eh_frame:0000000000007FD8                 db 0B8h
.eh_frame:0000000000007FD9                 db 0C0h
.eh_frame:0000000000007FDA                 db 0FFh
.eh_frame:0000000000007FDB                 db 0FFh
.eh_frame:0000000000007FDC                 db  11h
.eh_frame:0000000000007FDD                 db    0
.eh_frame:0000000000007FDE                 db    0
.eh_frame:0000000000007FDF                 db    0
.eh_frame:0000000000007FE0                 db    0
.eh_frame:0000000000007FE1                 db    0
.eh_frame:0000000000007FE2                 db    0
.eh_frame:0000000000007FE3                 db    0
.eh_frame:0000000000007FE4                 db  10h
.eh_frame:0000000000007FE5                 db    0
.eh_frame:0000000000007FE6                 db    0
.eh_frame:0000000000007FE7                 db    0
.eh_frame:0000000000007FE8                 db 0F0h
.eh_frame:0000000000007FE9                 db    3
.eh_frame:0000000000007FEA                 db    0
.eh_frame:0000000000007FEB                 db    0
.eh_frame:0000000000007FEC                 db 0C4h
.eh_frame:0000000000007FED                 db 0C0h
.eh_frame:0000000000007FEE                 db 0FFh
.eh_frame:0000000000007FEF                 db 0FFh
.eh_frame:0000000000007FF0                 db  35h ; 5
.eh_frame:0000000000007FF1                 db    0
.eh_frame:0000000000007FF2                 db    0
.eh_frame:0000000000007FF3                 db    0
.eh_frame:0000000000007FF4                 db    0
.eh_frame:0000000000007FF5                 db    0
.eh_frame:0000000000007FF6                 db    0
.eh_frame:0000000000007FF7                 db    0
.eh_frame:0000000000007FF8                 db  10h
.eh_frame:0000000000007FF9                 db    0
.eh_frame:0000000000007FFA                 db    0
.eh_frame:0000000000007FFB                 db    0
.eh_frame:0000000000007FFC                 db    4
.eh_frame:0000000000007FFD                 db    4
.eh_frame:0000000000007FFE                 db    0
.eh_frame:0000000000007FFF                 db    0
.eh_frame:0000000000008000                 db 0F0h
.eh_frame:0000000000008001                 db 0C0h
.eh_frame:0000000000008002                 db 0FFh
.eh_frame:0000000000008003                 db 0FFh
.eh_frame:0000000000008004                 db  15h
.eh_frame:0000000000008005                 db    0
.eh_frame:0000000000008006                 db    0
.eh_frame:0000000000008007                 db    0
.eh_frame:0000000000008008                 db    0
.eh_frame:0000000000008009                 db    0
.eh_frame:000000000000800A                 db    0
.eh_frame:000000000000800B                 db    0
.eh_frame:000000000000800C                 db  10h
.eh_frame:000000000000800D                 db    0
.eh_frame:000000000000800E                 db    0
.eh_frame:000000000000800F                 db    0
.eh_frame:0000000000008010                 db  18h
.eh_frame:0000000000008011                 db    4
.eh_frame:0000000000008012                 db    0
.eh_frame:0000000000008013                 db    0
.eh_frame:0000000000008014                 db 0FCh
.eh_frame:0000000000008015                 db 0C0h
.eh_frame:0000000000008016                 db 0FFh
.eh_frame:0000000000008017                 db 0FFh
.eh_frame:0000000000008018                 db  30h ; 0
.eh_frame:0000000000008019                 db    0
.eh_frame:000000000000801A                 db    0
.eh_frame:000000000000801B                 db    0
.eh_frame:000000000000801C                 db    0
.eh_frame:000000000000801D                 db  6Bh ; k
.eh_frame:000000000000801E                 db  0Eh
.eh_frame:000000000000801F                 db  10h
.eh_frame:0000000000008020                 db  50h ; P
.eh_frame:0000000000008021                 db    0
.eh_frame:0000000000008022                 db    0
.eh_frame:0000000000008023                 db    0
.eh_frame:0000000000008024                 db  2Ch ; ,
.eh_frame:0000000000008025                 db    4
.eh_frame:0000000000008026                 db    0
.eh_frame:0000000000008027                 db    0
.eh_frame:0000000000008028                 db  18h
.eh_frame:0000000000008029                 db 0C1h
.eh_frame:000000000000802A                 db 0FFh
.eh_frame:000000000000802B                 db 0FFh
.eh_frame:000000000000802C                 db  74h ; t
.eh_frame:000000000000802D                 db    0
.eh_frame:000000000000802E                 db    0
.eh_frame:000000000000802F                 db    0
.eh_frame:0000000000008030                 db    0
.eh_frame:0000000000008031                 db  42h ; B
.eh_frame:0000000000008032                 db  0Eh
.eh_frame:0000000000008033                 db  10h
.eh_frame:0000000000008034                 db  8Fh
.eh_frame:0000000000008035                 db    2
.eh_frame:0000000000008036                 db  42h ; B
.eh_frame:0000000000008037                 db  0Eh
.eh_frame:0000000000008038                 db  18h
.eh_frame:0000000000008039                 db  8Eh
.eh_frame:000000000000803A                 db    3
.eh_frame:000000000000803B                 db  49h ; I
.eh_frame:000000000000803C                 db  0Eh
.eh_frame:000000000000803D                 db  20h
.eh_frame:000000000000803E                 db  8Dh
.eh_frame:000000000000803F                 db    4
.eh_frame:0000000000008040                 db  42h ; B
.eh_frame:0000000000008041                 db  0Eh
.eh_frame:0000000000008042                 db  28h ; (
.eh_frame:0000000000008043                 db  8Ch
.eh_frame:0000000000008044                 db    5
.eh_frame:0000000000008045                 db  44h ; D
.eh_frame:0000000000008046                 db  0Eh
.eh_frame:0000000000008047                 db  30h ; 0
.eh_frame:0000000000008048                 db  86h
.eh_frame:0000000000008049                 db    6
.eh_frame:000000000000804A                 db  41h ; A
.eh_frame:000000000000804B                 db  0Eh
.eh_frame:000000000000804C                 db  38h ; 8
.eh_frame:000000000000804D                 db  83h
.eh_frame:000000000000804E                 db    7
.eh_frame:000000000000804F                 db  4Dh ; M
.eh_frame:0000000000008050                 db  0Eh
.eh_frame:0000000000008051                 db  50h ; P
.eh_frame:0000000000008052                 db  5Fh ; _
.eh_frame:0000000000008053                 db  0Eh
.eh_frame:0000000000008054                 db  58h ; X
.eh_frame:0000000000008055                 db  47h ; G
.eh_frame:0000000000008056                 db  0Eh
.eh_frame:0000000000008057                 db  60h ; `
.eh_frame:0000000000008058                 db  46h ; F
.eh_frame:0000000000008059                 db  0Eh
.eh_frame:000000000000805A                 db  68h ; h
.eh_frame:000000000000805B                 db  44h ; D
.eh_frame:000000000000805C                 db  0Eh
.eh_frame:000000000000805D                 db  70h ; p
.eh_frame:000000000000805E                 db  58h ; X
.eh_frame:000000000000805F                 db  0Eh
.eh_frame:0000000000008060                 db  38h ; 8
.eh_frame:0000000000008061                 db  41h ; A
.eh_frame:0000000000008062                 db  0Eh
.eh_frame:0000000000008063                 db  30h ; 0
.eh_frame:0000000000008064                 db  41h ; A
.eh_frame:0000000000008065                 db  0Eh
.eh_frame:0000000000008066                 db  28h ; (
.eh_frame:0000000000008067                 db  42h ; B
.eh_frame:0000000000008068                 db  0Eh
.eh_frame:0000000000008069                 db  20h
.eh_frame:000000000000806A                 db  42h ; B
.eh_frame:000000000000806B                 db  0Eh
.eh_frame:000000000000806C                 db  18h
.eh_frame:000000000000806D                 db  42h ; B
.eh_frame:000000000000806E                 db  0Eh
.eh_frame:000000000000806F                 db  10h
.eh_frame:0000000000008070                 db  42h ; B
.eh_frame:0000000000008071                 db  0Eh
.eh_frame:0000000000008072                 db    8
.eh_frame:0000000000008073                 db    0
.eh_frame:0000000000008074                 db  68h ; h
.eh_frame:0000000000008075                 db    0
.eh_frame:0000000000008076                 db    0
.eh_frame:0000000000008077                 db    0
.eh_frame:0000000000008078                 db  80h
.eh_frame:0000000000008079                 db    4
.eh_frame:000000000000807A                 db    0
.eh_frame:000000000000807B                 db    0
.eh_frame:000000000000807C                 db  44h ; D
.eh_frame:000000000000807D                 db 0C1h
.eh_frame:000000000000807E                 db 0FFh
.eh_frame:000000000000807F                 db 0FFh
.eh_frame:0000000000008080                 db 0E3h
.eh_frame:0000000000008081                 db    0
.eh_frame:0000000000008082                 db    0
.eh_frame:0000000000008083                 db    0
.eh_frame:0000000000008084                 db    0
.eh_frame:0000000000008085                 db  42h ; B
.eh_frame:0000000000008086                 db  0Eh
.eh_frame:0000000000008087                 db  10h
.eh_frame:0000000000008088                 db  8Fh
.eh_frame:0000000000008089                 db    2
.eh_frame:000000000000808A                 db  42h ; B
.eh_frame:000000000000808B                 db  0Eh
.eh_frame:000000000000808C                 db  18h
.eh_frame:000000000000808D                 db  8Eh
.eh_frame:000000000000808E                 db    3
.eh_frame:000000000000808F                 db  49h ; I
.eh_frame:0000000000008090                 db  0Eh
.eh_frame:0000000000008091                 db  20h
.eh_frame:0000000000008092                 db  8Dh
.eh_frame:0000000000008093                 db    4
.eh_frame:0000000000008094                 db  42h ; B
.eh_frame:0000000000008095                 db  0Eh
.eh_frame:0000000000008096                 db  28h ; (
.eh_frame:0000000000008097                 db  8Ch
.eh_frame:0000000000008098                 db    5
.eh_frame:0000000000008099                 db  44h ; D
.eh_frame:000000000000809A                 db  0Eh
.eh_frame:000000000000809B                 db  30h ; 0
.eh_frame:000000000000809C                 db  86h
.eh_frame:000000000000809D                 db    6
.eh_frame:000000000000809E                 db  41h ; A
.eh_frame:000000000000809F                 db  0Eh
.eh_frame:00000000000080A0                 db  38h ; 8
.eh_frame:00000000000080A1                 db  83h
.eh_frame:00000000000080A2                 db    7
.eh_frame:00000000000080A3                 db  4Dh ; M
.eh_frame:00000000000080A4                 db  0Eh
.eh_frame:00000000000080A5                 db  70h ; p
.eh_frame:00000000000080A6                 db  65h ; e
.eh_frame:00000000000080A7                 db  0Eh
.eh_frame:00000000000080A8                 db  78h ; x
.eh_frame:00000000000080A9                 db  4Dh ; M
.eh_frame:00000000000080AA                 db  0Eh
.eh_frame:00000000000080AB                 db  80h
.eh_frame:00000000000080AC                 db    1
.eh_frame:00000000000080AD                 db  46h ; F
.eh_frame:00000000000080AE                 db  0Eh
.eh_frame:00000000000080AF                 db  88h
.eh_frame:00000000000080B0                 db    1
.eh_frame:00000000000080B1                 db  42h ; B
.eh_frame:00000000000080B2                 db  0Eh
.eh_frame:00000000000080B3                 db  90h
.eh_frame:00000000000080B4                 db    1
.eh_frame:00000000000080B5                 db  5Eh ; ^
.eh_frame:00000000000080B6                 db  0Eh
.eh_frame:00000000000080B7                 db  70h ; p
.eh_frame:00000000000080B8                 db  56h ; V
.eh_frame:00000000000080B9                 db  0Eh
.eh_frame:00000000000080BA                 db  78h ; x
.eh_frame:00000000000080BB                 db  43h ; C
.eh_frame:00000000000080BC                 db  0Eh
.eh_frame:00000000000080BD                 db  80h
.eh_frame:00000000000080BE                 db    1
.eh_frame:00000000000080BF                 db  43h ; C
.eh_frame:00000000000080C0                 db  0Eh
.eh_frame:00000000000080C1                 db  88h
.eh_frame:00000000000080C2                 db    1
.eh_frame:00000000000080C3                 db  56h ; V
.eh_frame:00000000000080C4                 db  0Eh
.eh_frame:00000000000080C5                 db  90h
.eh_frame:00000000000080C6                 db    1
.eh_frame:00000000000080C7                 db  52h ; R
.eh_frame:00000000000080C8                 db  0Eh
.eh_frame:00000000000080C9                 db  70h ; p
.eh_frame:00000000000080CA                 db  5Bh ; [
.eh_frame:00000000000080CB                 db  0Eh
.eh_frame:00000000000080CC                 db  38h ; 8
.eh_frame:00000000000080CD                 db  41h ; A
.eh_frame:00000000000080CE                 db  0Eh
.eh_frame:00000000000080CF                 db  30h ; 0
.eh_frame:00000000000080D0                 db  41h ; A
.eh_frame:00000000000080D1                 db  0Eh
.eh_frame:00000000000080D2                 db  28h ; (
.eh_frame:00000000000080D3                 db  42h ; B
.eh_frame:00000000000080D4                 db  0Eh
.eh_frame:00000000000080D5                 db  20h
.eh_frame:00000000000080D6                 db  42h ; B
.eh_frame:00000000000080D7                 db  0Eh
.eh_frame:00000000000080D8                 db  18h
.eh_frame:00000000000080D9                 db  42h ; B
.eh_frame:00000000000080DA                 db  0Eh
.eh_frame:00000000000080DB                 db  10h
.eh_frame:00000000000080DC                 db  42h ; B
.eh_frame:00000000000080DD                 db  0Eh
.eh_frame:00000000000080DE                 db    8
.eh_frame:00000000000080DF                 db    0
.eh_frame:00000000000080E0                 db  10h
.eh_frame:00000000000080E1                 db    0
.eh_frame:00000000000080E2                 db    0
.eh_frame:00000000000080E3                 db    0
.eh_frame:00000000000080E4                 db 0ECh
.eh_frame:00000000000080E5                 db    4
.eh_frame:00000000000080E6                 db    0
.eh_frame:00000000000080E7                 db    0
.eh_frame:00000000000080E8                 db 0C8h
.eh_frame:00000000000080E9                 db 0C1h
.eh_frame:00000000000080EA                 db 0FFh
.eh_frame:00000000000080EB                 db 0FFh
.eh_frame:00000000000080EC                 db  0Ah
.eh_frame:00000000000080ED                 db    0
.eh_frame:00000000000080EE                 db    0
.eh_frame:00000000000080EF                 db    0
.eh_frame:00000000000080F0                 db    0
.eh_frame:00000000000080F1                 db    0
.eh_frame:00000000000080F2                 db    0
.eh_frame:00000000000080F3                 db    0
.eh_frame:00000000000080F4                 db  28h ; (
.eh_frame:00000000000080F5                 db    0
.eh_frame:00000000000080F6                 db    0
.eh_frame:00000000000080F7                 db    0
.eh_frame:00000000000080F8                 db    0
.eh_frame:00000000000080F9                 db    5
.eh_frame:00000000000080FA                 db    0
.eh_frame:00000000000080FB                 db    0
.eh_frame:00000000000080FC                 db 0C4h
.eh_frame:00000000000080FD                 db 0C1h
.eh_frame:00000000000080FE                 db 0FFh
.eh_frame:00000000000080FF                 db 0FFh
.eh_frame:0000000000008100                 db  93h
.eh_frame:0000000000008101                 db    0
.eh_frame:0000000000008102                 db    0
.eh_frame:0000000000008103                 db    0
.eh_frame:0000000000008104                 db    0
.eh_frame:0000000000008105                 db  48h ; H
.eh_frame:0000000000008106                 db  0Eh
.eh_frame:0000000000008107                 db  10h
.eh_frame:0000000000008108                 db  8Ch
.eh_frame:0000000000008109                 db    2
.eh_frame:000000000000810A                 db  48h ; H
.eh_frame:000000000000810B                 db  0Eh
.eh_frame:000000000000810C                 db  18h
.eh_frame:000000000000810D                 db  86h
.eh_frame:000000000000810E                 db    3
.eh_frame:000000000000810F                 db  41h ; A
.eh_frame:0000000000008110                 db  0Eh
.eh_frame:0000000000008111                 db  20h
.eh_frame:0000000000008112                 db  83h
.eh_frame:0000000000008113                 db    4
.eh_frame:0000000000008114                 db    2
.eh_frame:0000000000008115                 db  74h ; t
.eh_frame:0000000000008116                 db  0Eh
.eh_frame:0000000000008117                 db  18h
.eh_frame:0000000000008118                 db  4Bh ; K
.eh_frame:0000000000008119                 db  0Eh
.eh_frame:000000000000811A                 db  10h
.eh_frame:000000000000811B                 db  42h ; B
.eh_frame:000000000000811C                 db  0Eh
.eh_frame:000000000000811D                 db    8
.eh_frame:000000000000811E                 db    0
.eh_frame:000000000000811F                 db    0
.eh_frame:0000000000008120                 db  10h
.eh_frame:0000000000008121                 db    0
.eh_frame:0000000000008122                 db    0
.eh_frame:0000000000008123                 db    0
.eh_frame:0000000000008124                 db  2Ch ; ,
.eh_frame:0000000000008125                 db    5
.eh_frame:0000000000008126                 db    0
.eh_frame:0000000000008127                 db    0
.eh_frame:0000000000008128                 db  38h ; 8
.eh_frame:0000000000008129                 db 0C2h
.eh_frame:000000000000812A                 db 0FFh
.eh_frame:000000000000812B                 db 0FFh
.eh_frame:000000000000812C                 db  13h
.eh_frame:000000000000812D                 db    0
.eh_frame:000000000000812E                 db    0
.eh_frame:000000000000812F                 db    0
.eh_frame:0000000000008130                 db    0
.eh_frame:0000000000008131                 db    0
.eh_frame:0000000000008132                 db    0
.eh_frame:0000000000008133                 db    0
.eh_frame:0000000000008134                 db  10h
.eh_frame:0000000000008135                 db    0
.eh_frame:0000000000008136                 db    0
.eh_frame:0000000000008137                 db    0
.eh_frame:0000000000008138                 db  40h ; @
.eh_frame:0000000000008139                 db    5
.eh_frame:000000000000813A                 db    0
.eh_frame:000000000000813B                 db    0
.eh_frame:000000000000813C                 db  44h ; D
.eh_frame:000000000000813D                 db 0C2h
.eh_frame:000000000000813E                 db 0FFh
.eh_frame:000000000000813F                 db 0FFh
.eh_frame:0000000000008140                 db  0Ch
.eh_frame:0000000000008141                 db    0
.eh_frame:0000000000008142                 db    0
.eh_frame:0000000000008143                 db    0
.eh_frame:0000000000008144                 db    0
.eh_frame:0000000000008145                 db    0
.eh_frame:0000000000008146                 db    0
.eh_frame:0000000000008147                 db    0
.eh_frame:0000000000008148                 db  10h
.eh_frame:0000000000008149                 db    0
.eh_frame:000000000000814A                 db    0
.eh_frame:000000000000814B                 db    0
.eh_frame:000000000000814C                 db  54h ; T
.eh_frame:000000000000814D                 db    5
.eh_frame:000000000000814E                 db    0
.eh_frame:000000000000814F                 db    0
.eh_frame:0000000000008150                 db  40h ; @
.eh_frame:0000000000008151                 db 0C2h
.eh_frame:0000000000008152                 db 0FFh
.eh_frame:0000000000008153                 db 0FFh
.eh_frame:0000000000008154                 db  18h
.eh_frame:0000000000008155                 db    0
.eh_frame:0000000000008156                 db    0
.eh_frame:0000000000008157                 db    0
.eh_frame:0000000000008158                 db    0
.eh_frame:0000000000008159                 db    0
.eh_frame:000000000000815A                 db    0
.eh_frame:000000000000815B                 db    0
.eh_frame:000000000000815C                 db  10h
.eh_frame:000000000000815D                 db    0
.eh_frame:000000000000815E                 db    0
.eh_frame:000000000000815F                 db    0
.eh_frame:0000000000008160                 db  68h ; h
.eh_frame:0000000000008161                 db    5
.eh_frame:0000000000008162                 db    0
.eh_frame:0000000000008163                 db    0
.eh_frame:0000000000008164                 db  4Ch ; L
.eh_frame:0000000000008165                 db 0C2h
.eh_frame:0000000000008166                 db 0FFh
.eh_frame:0000000000008167                 db 0FFh
.eh_frame:0000000000008168                 db  14h
.eh_frame:0000000000008169                 db    0
.eh_frame:000000000000816A                 db    0
.eh_frame:000000000000816B                 db    0
.eh_frame:000000000000816C                 db    0
.eh_frame:000000000000816D                 db    0
.eh_frame:000000000000816E                 db    0
.eh_frame:000000000000816F                 db    0
.eh_frame:0000000000008170                 db  18h
.eh_frame:0000000000008171                 db    0
.eh_frame:0000000000008172                 db    0
.eh_frame:0000000000008173                 db    0
.eh_frame:0000000000008174                 db  7Ch ; |
.eh_frame:0000000000008175                 db    5
.eh_frame:0000000000008176                 db    0
.eh_frame:0000000000008177                 db    0
.eh_frame:0000000000008178                 db  58h ; X
.eh_frame:0000000000008179                 db 0C2h
.eh_frame:000000000000817A                 db 0FFh
.eh_frame:000000000000817B                 db 0FFh
.eh_frame:000000000000817C                 db  8Eh
.eh_frame:000000000000817D                 db    0
.eh_frame:000000000000817E                 db    0
.eh_frame:000000000000817F                 db    0
.eh_frame:0000000000008180                 db    0
.eh_frame:0000000000008181                 db  44h ; D
.eh_frame:0000000000008182                 db  0Eh
.eh_frame:0000000000008183                 db  50h ; P
.eh_frame:0000000000008184                 db    2
.eh_frame:0000000000008185                 db  7Fh ; 
.eh_frame:0000000000008186                 db  0Ah
.eh_frame:0000000000008187                 db  0Eh
.eh_frame:0000000000008188                 db    8
.eh_frame:0000000000008189                 db  41h ; A
.eh_frame:000000000000818A                 db  0Bh
.eh_frame:000000000000818B                 db    0
.eh_frame:000000000000818C                 db  18h
.eh_frame:000000000000818D                 db    0
.eh_frame:000000000000818E                 db    0
.eh_frame:000000000000818F                 db    0
.eh_frame:0000000000008190                 db  98h
.eh_frame:0000000000008191                 db    5
.eh_frame:0000000000008192                 db    0
.eh_frame:0000000000008193                 db    0
.eh_frame:0000000000008194                 db 0CCh
.eh_frame:0000000000008195                 db 0C2h
.eh_frame:0000000000008196                 db 0FFh
.eh_frame:0000000000008197                 db 0FFh
.eh_frame:0000000000008198                 db  8Ah
.eh_frame:0000000000008199                 db    0
.eh_frame:000000000000819A                 db    0
.eh_frame:000000000000819B                 db    0
.eh_frame:000000000000819C                 db    0
.eh_frame:000000000000819D                 db  44h ; D
.eh_frame:000000000000819E                 db  0Eh
.eh_frame:000000000000819F                 db  50h ; P
.eh_frame:00000000000081A0                 db    2
.eh_frame:00000000000081A1                 db  7Bh ; {
.eh_frame:00000000000081A2                 db  0Ah
.eh_frame:00000000000081A3                 db  0Eh
.eh_frame:00000000000081A4                 db    8
.eh_frame:00000000000081A5                 db  41h ; A
.eh_frame:00000000000081A6                 db  0Bh
.eh_frame:00000000000081A7                 db    0
.eh_frame:00000000000081A8                 db  10h
.eh_frame:00000000000081A9                 db    0
.eh_frame:00000000000081AA                 db    0
.eh_frame:00000000000081AB                 db    0
.eh_frame:00000000000081AC                 db 0B4h
.eh_frame:00000000000081AD                 db    5
.eh_frame:00000000000081AE                 db    0
.eh_frame:00000000000081AF                 db    0
.eh_frame:00000000000081B0                 db  40h ; @
.eh_frame:00000000000081B1                 db 0C3h
.eh_frame:00000000000081B2                 db 0FFh
.eh_frame:00000000000081B3                 db 0FFh
.eh_frame:00000000000081B4                 db  0Ch
.eh_frame:00000000000081B5                 db    0
.eh_frame:00000000000081B6                 db    0
.eh_frame:00000000000081B7                 db    0
.eh_frame:00000000000081B8                 db    0
.eh_frame:00000000000081B9                 db    0
.eh_frame:00000000000081BA                 db    0
.eh_frame:00000000000081BB                 db    0
.eh_frame:00000000000081BC                 db  10h
.eh_frame:00000000000081BD                 db    0
.eh_frame:00000000000081BE                 db    0
.eh_frame:00000000000081BF                 db    0
.eh_frame:00000000000081C0                 db 0C8h
.eh_frame:00000000000081C1                 db    5
.eh_frame:00000000000081C2                 db    0
.eh_frame:00000000000081C3                 db    0
.eh_frame:00000000000081C4                 db  3Ch ; <
.eh_frame:00000000000081C5                 db 0C3h
.eh_frame:00000000000081C6                 db 0FFh
.eh_frame:00000000000081C7                 db 0FFh
.eh_frame:00000000000081C8                 db  0Fh
.eh_frame:00000000000081C9                 db    0
.eh_frame:00000000000081CA                 db    0
.eh_frame:00000000000081CB                 db    0
.eh_frame:00000000000081CC                 db    0
.eh_frame:00000000000081CD                 db    0
.eh_frame:00000000000081CE                 db    0
.eh_frame:00000000000081CF                 db    0
.eh_frame:00000000000081D0                 db  18h
.eh_frame:00000000000081D1                 db    0
.eh_frame:00000000000081D2                 db    0
.eh_frame:00000000000081D3                 db    0
.eh_frame:00000000000081D4                 db 0DCh
.eh_frame:00000000000081D5                 db    5
.eh_frame:00000000000081D6                 db    0
.eh_frame:00000000000081D7                 db    0
.eh_frame:00000000000081D8                 db  38h ; 8
.eh_frame:00000000000081D9                 db 0C3h
.eh_frame:00000000000081DA                 db 0FFh
.eh_frame:00000000000081DB                 db 0FFh
.eh_frame:00000000000081DC                 db  98h
.eh_frame:00000000000081DD                 db    0
.eh_frame:00000000000081DE                 db    0
.eh_frame:00000000000081DF                 db    0
.eh_frame:00000000000081E0                 db    0
.eh_frame:00000000000081E1                 db  44h ; D
.eh_frame:00000000000081E2                 db  0Eh
.eh_frame:00000000000081E3                 db  50h ; P
.eh_frame:00000000000081E4                 db    2
.eh_frame:00000000000081E5                 db  8Eh
.eh_frame:00000000000081E6                 db  0Ah
.eh_frame:00000000000081E7                 db  0Eh
.eh_frame:00000000000081E8                 db    8
.eh_frame:00000000000081E9                 db  41h ; A
.eh_frame:00000000000081EA                 db  0Bh
.eh_frame:00000000000081EB                 db    0
.eh_frame:00000000000081EC                 db  10h
.eh_frame:00000000000081ED                 db    0
.eh_frame:00000000000081EE                 db    0
.eh_frame:00000000000081EF                 db    0
.eh_frame:00000000000081F0                 db 0F8h
.eh_frame:00000000000081F1                 db    5
.eh_frame:00000000000081F2                 db    0
.eh_frame:00000000000081F3                 db    0
.eh_frame:00000000000081F4                 db 0BCh
.eh_frame:00000000000081F5                 db 0C3h
.eh_frame:00000000000081F6                 db 0FFh
.eh_frame:00000000000081F7                 db 0FFh
.eh_frame:00000000000081F8                 db  10h
.eh_frame:00000000000081F9                 db    0
.eh_frame:00000000000081FA                 db    0
.eh_frame:00000000000081FB                 db    0
.eh_frame:00000000000081FC                 db    0
.eh_frame:00000000000081FD                 db    0
.eh_frame:00000000000081FE                 db    0
.eh_frame:00000000000081FF                 db    0
.eh_frame:0000000000008200                 db  10h
.eh_frame:0000000000008201                 db    0
.eh_frame:0000000000008202                 db    0
.eh_frame:0000000000008203                 db    0
.eh_frame:0000000000008204                 db  0Ch
.eh_frame:0000000000008205                 db    6
.eh_frame:0000000000008206                 db    0
.eh_frame:0000000000008207                 db    0
.eh_frame:0000000000008208                 db 0B8h
.eh_frame:0000000000008209                 db 0C3h
.eh_frame:000000000000820A                 db 0FFh
.eh_frame:000000000000820B                 db 0FFh
.eh_frame:000000000000820C                 db  11h
.eh_frame:000000000000820D                 db    0
.eh_frame:000000000000820E                 db    0
.eh_frame:000000000000820F                 db    0
.eh_frame:0000000000008210                 db    0
.eh_frame:0000000000008211                 db    0
.eh_frame:0000000000008212                 db    0
.eh_frame:0000000000008213                 db    0
.eh_frame:0000000000008214                 db  10h
.eh_frame:0000000000008215                 db    0
.eh_frame:0000000000008216                 db    0
.eh_frame:0000000000008217                 db    0
.eh_frame:0000000000008218                 db  20h
.eh_frame:0000000000008219                 db    6
.eh_frame:000000000000821A                 db    0
.eh_frame:000000000000821B                 db    0
.eh_frame:000000000000821C                 db 0C4h
.eh_frame:000000000000821D                 db 0C3h
.eh_frame:000000000000821E                 db 0FFh
.eh_frame:000000000000821F                 db 0FFh
.eh_frame:0000000000008220                 db  0Ah
.eh_frame:0000000000008221                 db    0
.eh_frame:0000000000008222                 db    0
.eh_frame:0000000000008223                 db    0
.eh_frame:0000000000008224                 db    0
.eh_frame:0000000000008225                 db    0
.eh_frame:0000000000008226                 db    0
.eh_frame:0000000000008227                 db    0
.eh_frame:0000000000008228                 db  18h
.eh_frame:0000000000008229                 db    0
.eh_frame:000000000000822A                 db    0
.eh_frame:000000000000822B                 db    0
.eh_frame:000000000000822C                 db  34h ; 4
.eh_frame:000000000000822D                 db    6
.eh_frame:000000000000822E                 db    0
.eh_frame:000000000000822F                 db    0
.eh_frame:0000000000008230                 db 0C0h
.eh_frame:0000000000008231                 db 0C3h
.eh_frame:0000000000008232                 db 0FFh
.eh_frame:0000000000008233                 db 0FFh
.eh_frame:0000000000008234                 db  8Eh
.eh_frame:0000000000008235                 db    0
.eh_frame:0000000000008236                 db    0
.eh_frame:0000000000008237                 db    0
.eh_frame:0000000000008238                 db    0
.eh_frame:0000000000008239                 db  44h ; D
.eh_frame:000000000000823A                 db  0Eh
.eh_frame:000000000000823B                 db  50h ; P
.eh_frame:000000000000823C                 db    2
.eh_frame:000000000000823D                 db  7Fh ; 
.eh_frame:000000000000823E                 db  0Ah
.eh_frame:000000000000823F                 db  0Eh
.eh_frame:0000000000008240                 db    8
.eh_frame:0000000000008241                 db  41h ; A
.eh_frame:0000000000008242                 db  0Bh
.eh_frame:0000000000008243                 db    0
.eh_frame:0000000000008244                 db  18h
.eh_frame:0000000000008245                 db    0
.eh_frame:0000000000008246                 db    0
.eh_frame:0000000000008247                 db    0
.eh_frame:0000000000008248                 db  50h ; P
.eh_frame:0000000000008249                 db    6
.eh_frame:000000000000824A                 db    0
.eh_frame:000000000000824B                 db    0
.eh_frame:000000000000824C                 db  34h ; 4
.eh_frame:000000000000824D                 db 0C4h
.eh_frame:000000000000824E                 db 0FFh
.eh_frame:000000000000824F                 db 0FFh
.eh_frame:0000000000008250                 db  91h
.eh_frame:0000000000008251                 db    0
.eh_frame:0000000000008252                 db    0
.eh_frame:0000000000008253                 db    0
.eh_frame:0000000000008254                 db    0
.eh_frame:0000000000008255                 db  44h ; D
.eh_frame:0000000000008256                 db  0Eh
.eh_frame:0000000000008257                 db  50h ; P
.eh_frame:0000000000008258                 db    2
.eh_frame:0000000000008259                 db  82h
.eh_frame:000000000000825A                 db  0Ah
.eh_frame:000000000000825B                 db  0Eh
.eh_frame:000000000000825C                 db    8
.eh_frame:000000000000825D                 db  41h ; A
.eh_frame:000000000000825E                 db  0Bh
.eh_frame:000000000000825F                 db    0
.eh_frame:0000000000008260                 db  10h
.eh_frame:0000000000008261                 db    0
.eh_frame:0000000000008262                 db    0
.eh_frame:0000000000008263                 db    0
.eh_frame:0000000000008264                 db  6Ch ; l
.eh_frame:0000000000008265                 db    6
.eh_frame:0000000000008266                 db    0
.eh_frame:0000000000008267                 db    0
.eh_frame:0000000000008268                 db 0B8h
.eh_frame:0000000000008269                 db 0C4h
.eh_frame:000000000000826A                 db 0FFh
.eh_frame:000000000000826B                 db 0FFh
.eh_frame:000000000000826C                 db  0Ch
.eh_frame:000000000000826D                 db    0
.eh_frame:000000000000826E                 db    0
.eh_frame:000000000000826F                 db    0
.eh_frame:0000000000008270                 db    0
.eh_frame:0000000000008271                 db    0
.eh_frame:0000000000008272                 db    0
.eh_frame:0000000000008273                 db    0
.eh_frame:0000000000008274                 db  10h
.eh_frame:0000000000008275                 db    0
.eh_frame:0000000000008276                 db    0
.eh_frame:0000000000008277                 db    0
.eh_frame:0000000000008278                 db  80h
.eh_frame:0000000000008279                 db    6
.eh_frame:000000000000827A                 db    0
.eh_frame:000000000000827B                 db    0
.eh_frame:000000000000827C                 db 0B4h
.eh_frame:000000000000827D                 db 0C4h
.eh_frame:000000000000827E                 db 0FFh
.eh_frame:000000000000827F                 db 0FFh
.eh_frame:0000000000008280                 db  17h
.eh_frame:0000000000008281                 db    0
.eh_frame:0000000000008282                 db    0
.eh_frame:0000000000008283                 db    0
.eh_frame:0000000000008284                 db    0
.eh_frame:0000000000008285                 db    0
.eh_frame:0000000000008286                 db    0
.eh_frame:0000000000008287                 db    0
.eh_frame:0000000000008288                 db  10h
.eh_frame:0000000000008289                 db    0
.eh_frame:000000000000828A                 db    0
.eh_frame:000000000000828B                 db    0
.eh_frame:000000000000828C                 db  94h
.eh_frame:000000000000828D                 db    6
.eh_frame:000000000000828E                 db    0
.eh_frame:000000000000828F                 db    0
.eh_frame:0000000000008290                 db 0C0h
.eh_frame:0000000000008291                 db 0C4h
.eh_frame:0000000000008292                 db 0FFh
.eh_frame:0000000000008293                 db 0FFh
.eh_frame:0000000000008294                 db  13h
.eh_frame:0000000000008295                 db    0
.eh_frame:0000000000008296                 db    0
.eh_frame:0000000000008297                 db    0
.eh_frame:0000000000008298                 db    0
.eh_frame:0000000000008299                 db    0
.eh_frame:000000000000829A                 db    0
.eh_frame:000000000000829B                 db    0
.eh_frame:000000000000829C                 db  10h
.eh_frame:000000000000829D                 db    0
.eh_frame:000000000000829E                 db    0
.eh_frame:000000000000829F                 db    0
.eh_frame:00000000000082A0                 db 0A8h
.eh_frame:00000000000082A1                 db    6
.eh_frame:00000000000082A2                 db    0
.eh_frame:00000000000082A3                 db    0
.eh_frame:00000000000082A4                 db 0CCh
.eh_frame:00000000000082A5                 db 0C4h
.eh_frame:00000000000082A6                 db 0FFh
.eh_frame:00000000000082A7                 db 0FFh
.eh_frame:00000000000082A8                 db  0Ch
.eh_frame:00000000000082A9                 db    0
.eh_frame:00000000000082AA                 db    0
.eh_frame:00000000000082AB                 db    0
.eh_frame:00000000000082AC                 db    0
.eh_frame:00000000000082AD                 db    0
.eh_frame:00000000000082AE                 db    0
.eh_frame:00000000000082AF                 db    0
.eh_frame:00000000000082B0                 db  10h
.eh_frame:00000000000082B1                 db    0
.eh_frame:00000000000082B2                 db    0
.eh_frame:00000000000082B3                 db    0
.eh_frame:00000000000082B4                 db 0BCh
.eh_frame:00000000000082B5                 db    6
.eh_frame:00000000000082B6                 db    0
.eh_frame:00000000000082B7                 db    0
.eh_frame:00000000000082B8                 db 0C8h
.eh_frame:00000000000082B9                 db 0C4h
.eh_frame:00000000000082BA                 db 0FFh
.eh_frame:00000000000082BB                 db 0FFh
.eh_frame:00000000000082BC                 db  14h
.eh_frame:00000000000082BD                 db    0
.eh_frame:00000000000082BE                 db    0
.eh_frame:00000000000082BF                 db    0
.eh_frame:00000000000082C0                 db    0
.eh_frame:00000000000082C1                 db    0
.eh_frame:00000000000082C2                 db    0
.eh_frame:00000000000082C3                 db    0
.eh_frame:00000000000082C4                 db  10h
.eh_frame:00000000000082C5                 db    0
.eh_frame:00000000000082C6                 db    0
.eh_frame:00000000000082C7                 db    0
.eh_frame:00000000000082C8                 db 0D0h
.eh_frame:00000000000082C9                 db    6
.eh_frame:00000000000082CA                 db    0
.eh_frame:00000000000082CB                 db    0
.eh_frame:00000000000082CC                 db 0D4h
.eh_frame:00000000000082CD                 db 0C4h
.eh_frame:00000000000082CE                 db 0FFh
.eh_frame:00000000000082CF                 db 0FFh
.eh_frame:00000000000082D0                 db  13h
.eh_frame:00000000000082D1                 db    0
.eh_frame:00000000000082D2                 db    0
.eh_frame:00000000000082D3                 db    0
.eh_frame:00000000000082D4                 db    0
.eh_frame:00000000000082D5                 db    0
.eh_frame:00000000000082D6                 db    0
.eh_frame:00000000000082D7                 db    0
.eh_frame:00000000000082D8                 db  14h
.eh_frame:00000000000082D9                 db    0
.eh_frame:00000000000082DA                 db    0
.eh_frame:00000000000082DB                 db    0
.eh_frame:00000000000082DC                 db 0E4h
.eh_frame:00000000000082DD                 db    6
.eh_frame:00000000000082DE                 db    0
.eh_frame:00000000000082DF                 db    0
.eh_frame:00000000000082E0                 db 0E0h
.eh_frame:00000000000082E1                 db 0C4h
.eh_frame:00000000000082E2                 db 0FFh
.eh_frame:00000000000082E3                 db 0FFh
.eh_frame:00000000000082E4                 db  18h
.eh_frame:00000000000082E5                 db    0
.eh_frame:00000000000082E6                 db    0
.eh_frame:00000000000082E7                 db    0
.eh_frame:00000000000082E8                 db    0
.eh_frame:00000000000082E9                 db    0
.eh_frame:00000000000082EA                 db    0
.eh_frame:00000000000082EB                 db    0
.eh_frame:00000000000082EC                 db    0
.eh_frame:00000000000082ED                 db    0
.eh_frame:00000000000082EE                 db    0
.eh_frame:00000000000082EF                 db    0
.eh_frame:00000000000082F0                 db  20h
.eh_frame:00000000000082F1                 db    0
.eh_frame:00000000000082F2                 db    0
.eh_frame:00000000000082F3                 db    0
.eh_frame:00000000000082F4                 db 0FCh
.eh_frame:00000000000082F5                 db    6
.eh_frame:00000000000082F6                 db    0
.eh_frame:00000000000082F7                 db    0
.eh_frame:00000000000082F8                 db 0E8h
.eh_frame:00000000000082F9                 db 0C4h
.eh_frame:00000000000082FA                 db 0FFh
.eh_frame:00000000000082FB                 db 0FFh
.eh_frame:00000000000082FC                 db  7Ch ; |
.eh_frame:00000000000082FD                 db    0
.eh_frame:00000000000082FE                 db    0
.eh_frame:00000000000082FF                 db    0
.eh_frame:0000000000008300                 db    0
.eh_frame:0000000000008301                 db  41h ; A
.eh_frame:0000000000008302                 db  0Eh
.eh_frame:0000000000008303                 db  10h
.eh_frame:0000000000008304                 db  83h
.eh_frame:0000000000008305                 db    2
.eh_frame:0000000000008306                 db  4Fh ; O
.eh_frame:0000000000008307                 db  0Eh
.eh_frame:0000000000008308                 db 0B0h
.eh_frame:0000000000008309                 db    1
.eh_frame:000000000000830A                 db    2
.eh_frame:000000000000830B                 db  65h ; e
.eh_frame:000000000000830C                 db  0Ah
.eh_frame:000000000000830D                 db  0Eh
.eh_frame:000000000000830E                 db  10h
.eh_frame:000000000000830F                 db  41h ; A
.eh_frame:0000000000008310                 db  0Eh
.eh_frame:0000000000008311                 db    8
.eh_frame:0000000000008312                 db  41h ; A
.eh_frame:0000000000008313                 db  0Bh
.eh_frame:0000000000008314                 db  10h
.eh_frame:0000000000008315                 db    0
.eh_frame:0000000000008316                 db    0
.eh_frame:0000000000008317                 db    0
.eh_frame:0000000000008318                 db  20h
.eh_frame:0000000000008319                 db    7
.eh_frame:000000000000831A                 db    0
.eh_frame:000000000000831B                 db    0
.eh_frame:000000000000831C                 db  44h ; D
.eh_frame:000000000000831D                 db 0C5h
.eh_frame:000000000000831E                 db 0FFh
.eh_frame:000000000000831F                 db 0FFh
.eh_frame:0000000000008320                 db  0Ah
.eh_frame:0000000000008321                 db    0
.eh_frame:0000000000008322                 db    0
.eh_frame:0000000000008323                 db    0
.eh_frame:0000000000008324                 db    0
.eh_frame:0000000000008325                 db    0
.eh_frame:0000000000008326                 db    0
.eh_frame:0000000000008327                 db    0
.eh_frame:0000000000008328                 db  10h
.eh_frame:0000000000008329                 db    0
.eh_frame:000000000000832A                 db    0
.eh_frame:000000000000832B                 db    0
.eh_frame:000000000000832C                 db  34h ; 4
.eh_frame:000000000000832D                 db    7
.eh_frame:000000000000832E                 db    0
.eh_frame:000000000000832F                 db    0
.eh_frame:0000000000008330                 db  40h ; @
.eh_frame:0000000000008331                 db 0C5h
.eh_frame:0000000000008332                 db 0FFh
.eh_frame:0000000000008333                 db 0FFh
.eh_frame:0000000000008334                 db  16h
.eh_frame:0000000000008335                 db    0
.eh_frame:0000000000008336                 db    0
.eh_frame:0000000000008337                 db    0
.eh_frame:0000000000008338                 db    0
.eh_frame:0000000000008339                 db    0
.eh_frame:000000000000833A                 db    0
.eh_frame:000000000000833B                 db    0
.eh_frame:000000000000833C                 db  48h ; H
.eh_frame:000000000000833D                 db    0
.eh_frame:000000000000833E                 db    0
.eh_frame:000000000000833F                 db    0
.eh_frame:0000000000008340                 db  48h ; H
.eh_frame:0000000000008341                 db    7
.eh_frame:0000000000008342                 db    0
.eh_frame:0000000000008343                 db    0
.eh_frame:0000000000008344                 db  4Ch ; L
.eh_frame:0000000000008345                 db 0C5h
.eh_frame:0000000000008346                 db 0FFh
.eh_frame:0000000000008347                 db 0FFh
.eh_frame:0000000000008348                 db  74h ; t
.eh_frame:0000000000008349                 db    1
.eh_frame:000000000000834A                 db    0
.eh_frame:000000000000834B                 db    0
.eh_frame:000000000000834C                 db    0
.eh_frame:000000000000834D                 db  42h ; B
.eh_frame:000000000000834E                 db  0Eh
.eh_frame:000000000000834F                 db  10h
.eh_frame:0000000000008350                 db  8Fh
.eh_frame:0000000000008351                 db    2
.eh_frame:0000000000008352                 db  42h ; B
.eh_frame:0000000000008353                 db  0Eh
.eh_frame:0000000000008354                 db  18h
.eh_frame:0000000000008355                 db  8Eh
.eh_frame:0000000000008356                 db    3
.eh_frame:0000000000008357                 db  45h ; E
.eh_frame:0000000000008358                 db  0Eh
.eh_frame:0000000000008359                 db  20h
.eh_frame:000000000000835A                 db  8Dh
.eh_frame:000000000000835B                 db    4
.eh_frame:000000000000835C                 db  42h ; B
.eh_frame:000000000000835D                 db  0Eh
.eh_frame:000000000000835E                 db  28h ; (
.eh_frame:000000000000835F                 db  8Ch
.eh_frame:0000000000008360                 db    5
.eh_frame:0000000000008361                 db  44h ; D
.eh_frame:0000000000008362                 db  0Eh
.eh_frame:0000000000008363                 db  30h ; 0
.eh_frame:0000000000008364                 db  86h
.eh_frame:0000000000008365                 db    6
.eh_frame:0000000000008366                 db  41h ; A
.eh_frame:0000000000008367                 db  0Eh
.eh_frame:0000000000008368                 db  38h ; 8
.eh_frame:0000000000008369                 db  83h
.eh_frame:000000000000836A                 db    7
.eh_frame:000000000000836B                 db  46h ; F
.eh_frame:000000000000836C                 db  0Eh
.eh_frame:000000000000836D                 db  70h ; p
.eh_frame:000000000000836E                 db    3
.eh_frame:000000000000836F                 db  31h ; 1
.eh_frame:0000000000008370                 db    1
.eh_frame:0000000000008371                 db  0Ah
.eh_frame:0000000000008372                 db  0Eh
.eh_frame:0000000000008373                 db  38h ; 8
.eh_frame:0000000000008374                 db  43h ; C
.eh_frame:0000000000008375                 db  0Eh
.eh_frame:0000000000008376                 db  30h ; 0
.eh_frame:0000000000008377                 db  41h ; A
.eh_frame:0000000000008378                 db  0Eh
.eh_frame:0000000000008379                 db  28h ; (
.eh_frame:000000000000837A                 db  42h ; B
.eh_frame:000000000000837B                 db  0Eh
.eh_frame:000000000000837C                 db  20h
.eh_frame:000000000000837D                 db  42h ; B
.eh_frame:000000000000837E                 db  0Eh
.eh_frame:000000000000837F                 db  18h
.eh_frame:0000000000008380                 db  42h ; B
.eh_frame:0000000000008381                 db  0Eh
.eh_frame:0000000000008382                 db  10h
.eh_frame:0000000000008383                 db  42h ; B
.eh_frame:0000000000008384                 db  0Eh
.eh_frame:0000000000008385                 db    8
.eh_frame:0000000000008386                 db  41h ; A
.eh_frame:0000000000008387                 db  0Bh
.eh_frame:0000000000008388                 db  20h
.eh_frame:0000000000008389                 db    0
.eh_frame:000000000000838A                 db    0
.eh_frame:000000000000838B                 db    0
.eh_frame:000000000000838C                 db  94h
.eh_frame:000000000000838D                 db    7
.eh_frame:000000000000838E                 db    0
.eh_frame:000000000000838F                 db    0
.eh_frame:0000000000008390                 db  80h
.eh_frame:0000000000008391                 db 0C6h
.eh_frame:0000000000008392                 db 0FFh
.eh_frame:0000000000008393                 db 0FFh
.eh_frame:0000000000008394                 db  86h
.eh_frame:0000000000008395                 db    0
.eh_frame:0000000000008396                 db    0
.eh_frame:0000000000008397                 db    0
.eh_frame:0000000000008398                 db    0
.eh_frame:0000000000008399                 db  44h ; D
.eh_frame:000000000000839A                 db  0Eh
.eh_frame:000000000000839B                 db  20h
.eh_frame:000000000000839C                 db    2
.eh_frame:000000000000839D                 db  49h ; I
.eh_frame:000000000000839E                 db  0Ah
.eh_frame:000000000000839F                 db  0Eh
.eh_frame:00000000000083A0                 db    8
.eh_frame:00000000000083A1                 db  43h ; C
.eh_frame:00000000000083A2                 db  0Bh
.eh_frame:00000000000083A3                 db  55h ; U
.eh_frame:00000000000083A4                 db  0Ah
.eh_frame:00000000000083A5                 db  0Eh
.eh_frame:00000000000083A6                 db    8
.eh_frame:00000000000083A7                 db  4Bh ; K
.eh_frame:00000000000083A8                 db  0Bh
.eh_frame:00000000000083A9                 db  55h ; U
.eh_frame:00000000000083AA                 db  0Eh
.eh_frame:00000000000083AB                 db    8
.eh_frame:00000000000083AC                 db  10h
.eh_frame:00000000000083AD                 db    0
.eh_frame:00000000000083AE                 db    0
.eh_frame:00000000000083AF                 db    0
.eh_frame:00000000000083B0                 db 0B8h
.eh_frame:00000000000083B1                 db    7
.eh_frame:00000000000083B2                 db    0
.eh_frame:00000000000083B3                 db    0
.eh_frame:00000000000083B4                 db 0ECh
.eh_frame:00000000000083B5                 db 0C6h
.eh_frame:00000000000083B6                 db 0FFh
.eh_frame:00000000000083B7                 db 0FFh
.eh_frame:00000000000083B8                 db  0Bh
.eh_frame:00000000000083B9                 db    0
.eh_frame:00000000000083BA                 db    0
.eh_frame:00000000000083BB                 db    0
.eh_frame:00000000000083BC                 db    0
.eh_frame:00000000000083BD                 db    0
.eh_frame:00000000000083BE                 db    0
.eh_frame:00000000000083BF                 db    0
.eh_frame:00000000000083C0                 db  14h
.eh_frame:00000000000083C1                 db    0
.eh_frame:00000000000083C2                 db    0
.eh_frame:00000000000083C3                 db    0
.eh_frame:00000000000083C4                 db 0CCh
.eh_frame:00000000000083C5                 db    7
.eh_frame:00000000000083C6                 db    0
.eh_frame:00000000000083C7                 db    0
.eh_frame:00000000000083C8                 db 0E8h
.eh_frame:00000000000083C9                 db 0C6h
.eh_frame:00000000000083CA                 db 0FFh
.eh_frame:00000000000083CB                 db 0FFh
.eh_frame:00000000000083CC                 db  0Bh
.eh_frame:00000000000083CD                 db    0
.eh_frame:00000000000083CE                 db    0
.eh_frame:00000000000083CF                 db    0
.eh_frame:00000000000083D0                 db    0
.eh_frame:00000000000083D1                 db    0
.eh_frame:00000000000083D2                 db    0
.eh_frame:00000000000083D3                 db    0
.eh_frame:00000000000083D4                 db    0
.eh_frame:00000000000083D5                 db    0
.eh_frame:00000000000083D6                 db    0
.eh_frame:00000000000083D7                 db    0
.eh_frame:00000000000083D8                 db  10h
.eh_frame:00000000000083D9                 db    1
.eh_frame:00000000000083DA                 db    0
.eh_frame:00000000000083DB                 db    0
.eh_frame:00000000000083DC                 db 0E4h
.eh_frame:00000000000083DD                 db    7
.eh_frame:00000000000083DE                 db    0
.eh_frame:00000000000083DF                 db    0
.eh_frame:00000000000083E0                 db 0E0h
.eh_frame:00000000000083E1                 db 0C6h
.eh_frame:00000000000083E2                 db 0FFh
.eh_frame:00000000000083E3                 db 0FFh
.eh_frame:00000000000083E4                 db  17h
.eh_frame:00000000000083E5                 db    4
.eh_frame:00000000000083E6                 db    0
.eh_frame:00000000000083E7                 db    0
.eh_frame:00000000000083E8                 db    0
.eh_frame:00000000000083E9                 db  42h ; B
.eh_frame:00000000000083EA                 db  0Eh
.eh_frame:00000000000083EB                 db  10h
.eh_frame:00000000000083EC                 db  8Fh
.eh_frame:00000000000083ED                 db    2
.eh_frame:00000000000083EE                 db  42h ; B
.eh_frame:00000000000083EF                 db  0Eh
.eh_frame:00000000000083F0                 db  18h
.eh_frame:00000000000083F1                 db  8Eh
.eh_frame:00000000000083F2                 db    3
.eh_frame:00000000000083F3                 db  42h ; B
.eh_frame:00000000000083F4                 db  0Eh
.eh_frame:00000000000083F5                 db  20h
.eh_frame:00000000000083F6                 db  8Dh
.eh_frame:00000000000083F7                 db    4
.eh_frame:00000000000083F8                 db  42h ; B
.eh_frame:00000000000083F9                 db  0Eh
.eh_frame:00000000000083FA                 db  28h ; (
.eh_frame:00000000000083FB                 db  8Ch
.eh_frame:00000000000083FC                 db    5
.eh_frame:00000000000083FD                 db  44h ; D
.eh_frame:00000000000083FE                 db  0Eh
.eh_frame:00000000000083FF                 db  30h ; 0
.eh_frame:0000000000008400                 db  86h
.eh_frame:0000000000008401                 db    6
.eh_frame:0000000000008402                 db  41h ; A
.eh_frame:0000000000008403                 db  0Eh
.eh_frame:0000000000008404                 db  38h ; 8
.eh_frame:0000000000008405                 db  83h
.eh_frame:0000000000008406                 db    7
.eh_frame:0000000000008407                 db  4Ah ; J
.eh_frame:0000000000008408                 db  0Eh
.eh_frame:0000000000008409                 db  60h ; `
.eh_frame:000000000000840A                 db    2
.eh_frame:000000000000840B                 db 0DDh
.eh_frame:000000000000840C                 db  0Eh
.eh_frame:000000000000840D                 db  68h ; h
.eh_frame:000000000000840E                 db  57h ; W
.eh_frame:000000000000840F                 db  0Eh
.eh_frame:0000000000008410                 db  70h ; p
.eh_frame:0000000000008411                 db  42h ; B
.eh_frame:0000000000008412                 db  0Eh
.eh_frame:0000000000008413                 db  78h ; x
.eh_frame:0000000000008414                 db  42h ; B
.eh_frame:0000000000008415                 db  0Eh
.eh_frame:0000000000008416                 db  80h
.eh_frame:0000000000008417                 db    1
.eh_frame:0000000000008418                 db  42h ; B
.eh_frame:0000000000008419                 db  0Eh
.eh_frame:000000000000841A                 db  88h
.eh_frame:000000000000841B                 db    1
.eh_frame:000000000000841C                 db  42h ; B
.eh_frame:000000000000841D                 db  0Eh
.eh_frame:000000000000841E                 db  90h
.eh_frame:000000000000841F                 db    1
.eh_frame:0000000000008420                 db  53h ; S
.eh_frame:0000000000008421                 db  0Eh
.eh_frame:0000000000008422                 db  60h ; `
.eh_frame:0000000000008423                 db  44h ; D
.eh_frame:0000000000008424                 db  0Ah
.eh_frame:0000000000008425                 db  0Eh
.eh_frame:0000000000008426                 db  38h ; 8
.eh_frame:0000000000008427                 db  41h ; A
.eh_frame:0000000000008428                 db  0Eh
.eh_frame:0000000000008429                 db  30h ; 0
.eh_frame:000000000000842A                 db  41h ; A
.eh_frame:000000000000842B                 db  0Eh
.eh_frame:000000000000842C                 db  28h ; (
.eh_frame:000000000000842D                 db  42h ; B
.eh_frame:000000000000842E                 db  0Eh
.eh_frame:000000000000842F                 db  20h
.eh_frame:0000000000008430                 db  42h ; B
.eh_frame:0000000000008431                 db  0Eh
.eh_frame:0000000000008432                 db  18h
.eh_frame:0000000000008433                 db  42h ; B
.eh_frame:0000000000008434                 db  0Eh
.eh_frame:0000000000008435                 db  10h
.eh_frame:0000000000008436                 db  42h ; B
.eh_frame:0000000000008437                 db  0Eh
.eh_frame:0000000000008438                 db    8
.eh_frame:0000000000008439                 db  44h ; D
.eh_frame:000000000000843A                 db  0Bh
.eh_frame:000000000000843B                 db    2
.eh_frame:000000000000843C                 db  78h ; x
.eh_frame:000000000000843D                 db  0Ah
.eh_frame:000000000000843E                 db  0Eh
.eh_frame:000000000000843F                 db  68h ; h
.eh_frame:0000000000008440                 db  48h ; H
.eh_frame:0000000000008441                 db  0Bh
.eh_frame:0000000000008442                 db  5Ah ; Z
.eh_frame:0000000000008443                 db  0Ah
.eh_frame:0000000000008444                 db  0Eh
.eh_frame:0000000000008445                 db  38h ; 8
.eh_frame:0000000000008446                 db  47h ; G
.eh_frame:0000000000008447                 db  0Eh
.eh_frame:0000000000008448                 db  30h ; 0
.eh_frame:0000000000008449                 db  41h ; A
.eh_frame:000000000000844A                 db  0Eh
.eh_frame:000000000000844B                 db  28h ; (
.eh_frame:000000000000844C                 db  42h ; B
.eh_frame:000000000000844D                 db  0Eh
.eh_frame:000000000000844E                 db  20h
.eh_frame:000000000000844F                 db  42h ; B
.eh_frame:0000000000008450                 db  0Eh
.eh_frame:0000000000008451                 db  18h
.eh_frame:0000000000008452                 db  42h ; B
.eh_frame:0000000000008453                 db  0Eh
.eh_frame:0000000000008454                 db  10h
.eh_frame:0000000000008455                 db  42h ; B
.eh_frame:0000000000008456                 db  0Eh
.eh_frame:0000000000008457                 db    8
.eh_frame:0000000000008458                 db  56h ; V
.eh_frame:0000000000008459                 db  0Bh
.eh_frame:000000000000845A                 db  5Eh ; ^
.eh_frame:000000000000845B                 db  0Ah
.eh_frame:000000000000845C                 db  0Eh
.eh_frame:000000000000845D                 db  38h ; 8
.eh_frame:000000000000845E                 db  52h ; R
.eh_frame:000000000000845F                 db  0Eh
.eh_frame:0000000000008460                 db  30h ; 0
.eh_frame:0000000000008461                 db  41h ; A
.eh_frame:0000000000008462                 db  0Eh
.eh_frame:0000000000008463                 db  28h ; (
.eh_frame:0000000000008464                 db  42h ; B
.eh_frame:0000000000008465                 db  0Eh
.eh_frame:0000000000008466                 db  20h
.eh_frame:0000000000008467                 db  42h ; B
.eh_frame:0000000000008468                 db  0Eh
.eh_frame:0000000000008469                 db  18h
.eh_frame:000000000000846A                 db  42h ; B
.eh_frame:000000000000846B                 db  0Eh
.eh_frame:000000000000846C                 db  10h
.eh_frame:000000000000846D                 db  42h ; B
.eh_frame:000000000000846E                 db  0Eh
.eh_frame:000000000000846F                 db    8
.eh_frame:0000000000008470                 db  4Fh ; O
.eh_frame:0000000000008471                 db  0Bh
.eh_frame:0000000000008472                 db  62h ; b
.eh_frame:0000000000008473                 db  0Ah
.eh_frame:0000000000008474                 db  0Eh
.eh_frame:0000000000008475                 db  38h ; 8
.eh_frame:0000000000008476                 db  50h ; P
.eh_frame:0000000000008477                 db  0Eh
.eh_frame:0000000000008478                 db  30h ; 0
.eh_frame:0000000000008479                 db  41h ; A
.eh_frame:000000000000847A                 db  0Eh
.eh_frame:000000000000847B                 db  28h ; (
.eh_frame:000000000000847C                 db  42h ; B
.eh_frame:000000000000847D                 db  0Eh
.eh_frame:000000000000847E                 db  20h
.eh_frame:000000000000847F                 db  42h ; B
.eh_frame:0000000000008480                 db  0Eh
.eh_frame:0000000000008481                 db  18h
.eh_frame:0000000000008482                 db  42h ; B
.eh_frame:0000000000008483                 db  0Eh
.eh_frame:0000000000008484                 db  10h
.eh_frame:0000000000008485                 db  42h ; B
.eh_frame:0000000000008486                 db  0Eh
.eh_frame:0000000000008487                 db    8
.eh_frame:0000000000008488                 db  55h ; U
.eh_frame:0000000000008489                 db  0Bh
.eh_frame:000000000000848A                 db  66h ; f
.eh_frame:000000000000848B                 db  0Eh
.eh_frame:000000000000848C                 db  68h ; h
.eh_frame:000000000000848D                 db  42h ; B
.eh_frame:000000000000848E                 db  0Eh
.eh_frame:000000000000848F                 db  70h ; p
.eh_frame:0000000000008490                 db  5Ch ; \
.eh_frame:0000000000008491                 db  0Eh
.eh_frame:0000000000008492                 db  68h ; h
.eh_frame:0000000000008493                 db  41h ; A
.eh_frame:0000000000008494                 db  0Eh
.eh_frame:0000000000008495                 db  60h ; `
.eh_frame:0000000000008496                 db  44h ; D
.eh_frame:0000000000008497                 db  0Ah
.eh_frame:0000000000008498                 db  0Eh
.eh_frame:0000000000008499                 db  38h ; 8
.eh_frame:000000000000849A                 db  41h ; A
.eh_frame:000000000000849B                 db  0Eh
.eh_frame:000000000000849C                 db  30h ; 0
.eh_frame:000000000000849D                 db  41h ; A
.eh_frame:000000000000849E                 db  0Eh
.eh_frame:000000000000849F                 db  28h ; (
.eh_frame:00000000000084A0                 db  42h ; B
.eh_frame:00000000000084A1                 db  0Eh
.eh_frame:00000000000084A2                 db  20h
.eh_frame:00000000000084A3                 db  42h ; B
.eh_frame:00000000000084A4                 db  0Eh
.eh_frame:00000000000084A5                 db  18h
.eh_frame:00000000000084A6                 db  42h ; B
.eh_frame:00000000000084A7                 db  0Eh
.eh_frame:00000000000084A8                 db  10h
.eh_frame:00000000000084A9                 db  42h ; B
.eh_frame:00000000000084AA                 db  0Eh
.eh_frame:00000000000084AB                 db    8
.eh_frame:00000000000084AC                 db  45h ; E
.eh_frame:00000000000084AD                 db  0Bh
.eh_frame:00000000000084AE                 db  68h ; h
.eh_frame:00000000000084AF                 db  0Ah
.eh_frame:00000000000084B0                 db  0Eh
.eh_frame:00000000000084B1                 db  68h ; h
.eh_frame:00000000000084B2                 db  48h ; H
.eh_frame:00000000000084B3                 db  0Bh
.eh_frame:00000000000084B4                 db  72h ; r
.eh_frame:00000000000084B5                 db  0Eh
.eh_frame:00000000000084B6                 db  68h ; h
.eh_frame:00000000000084B7                 db  45h ; E
.eh_frame:00000000000084B8                 db  0Eh
.eh_frame:00000000000084B9                 db  70h ; p
.eh_frame:00000000000084BA                 db  42h ; B
.eh_frame:00000000000084BB                 db  0Eh
.eh_frame:00000000000084BC                 db  78h ; x
.eh_frame:00000000000084BD                 db  42h ; B
.eh_frame:00000000000084BE                 db  0Eh
.eh_frame:00000000000084BF                 db  80h
.eh_frame:00000000000084C0                 db    1
.eh_frame:00000000000084C1                 db  5Eh ; ^
.eh_frame:00000000000084C2                 db  0Eh
.eh_frame:00000000000084C3                 db  60h ; `
.eh_frame:00000000000084C4                 db  44h ; D
.eh_frame:00000000000084C5                 db  0Ah
.eh_frame:00000000000084C6                 db  0Eh
.eh_frame:00000000000084C7                 db  38h ; 8
.eh_frame:00000000000084C8                 db  41h ; A
.eh_frame:00000000000084C9                 db  0Eh
.eh_frame:00000000000084CA                 db  30h ; 0
.eh_frame:00000000000084CB                 db  41h ; A
.eh_frame:00000000000084CC                 db  0Eh
.eh_frame:00000000000084CD                 db  28h ; (
.eh_frame:00000000000084CE                 db  42h ; B
.eh_frame:00000000000084CF                 db  0Eh
.eh_frame:00000000000084D0                 db  20h
.eh_frame:00000000000084D1                 db  42h ; B
.eh_frame:00000000000084D2                 db  0Eh
.eh_frame:00000000000084D3                 db  18h
.eh_frame:00000000000084D4                 db  42h ; B
.eh_frame:00000000000084D5                 db  0Eh
.eh_frame:00000000000084D6                 db  10h
.eh_frame:00000000000084D7                 db  42h ; B
.eh_frame:00000000000084D8                 db  0Eh
.eh_frame:00000000000084D9                 db    8
.eh_frame:00000000000084DA                 db  41h ; A
.eh_frame:00000000000084DB                 db  0Bh
.eh_frame:00000000000084DC                 db  79h ; y
.eh_frame:00000000000084DD                 db  0Ah
.eh_frame:00000000000084DE                 db  0Eh
.eh_frame:00000000000084DF                 db  68h ; h
.eh_frame:00000000000084E0                 db  42h ; B
.eh_frame:00000000000084E1                 db  0Eh
.eh_frame:00000000000084E2                 db  70h ; p
.eh_frame:00000000000084E3                 db  42h ; B
.eh_frame:00000000000084E4                 db  0Eh
.eh_frame:00000000000084E5                 db  78h ; x
.eh_frame:00000000000084E6                 db  42h ; B
.eh_frame:00000000000084E7                 db  0Eh
.eh_frame:00000000000084E8                 db  80h
.eh_frame:00000000000084E9                 db    1
.eh_frame:00000000000084EA                 db  51h ; Q
.eh_frame:00000000000084EB                 db  0Bh
.eh_frame:00000000000084EC                 db  10h
.eh_frame:00000000000084ED                 db    0
.eh_frame:00000000000084EE                 db    0
.eh_frame:00000000000084EF                 db    0
.eh_frame:00000000000084F0                 db 0F8h
.eh_frame:00000000000084F1                 db    8
.eh_frame:00000000000084F2                 db    0
.eh_frame:00000000000084F3                 db    0
.eh_frame:00000000000084F4                 db 0ECh
.eh_frame:00000000000084F5                 db 0C9h
.eh_frame:00000000000084F6                 db 0FFh
.eh_frame:00000000000084F7                 db 0FFh
.eh_frame:00000000000084F8                 db  20h
.eh_frame:00000000000084F9                 db    0
.eh_frame:00000000000084FA                 db    0
.eh_frame:00000000000084FB                 db    0
.eh_frame:00000000000084FC                 db    0
.eh_frame:00000000000084FD                 db    0
.eh_frame:00000000000084FE                 db    0
.eh_frame:00000000000084FF                 db    0
.eh_frame:0000000000008500                 db  18h
.eh_frame:0000000000008501                 db    0
.eh_frame:0000000000008502                 db    0
.eh_frame:0000000000008503                 db    0
.eh_frame:0000000000008504                 db  0Ch
.eh_frame:0000000000008505                 db    9
.eh_frame:0000000000008506                 db    0
.eh_frame:0000000000008507                 db    0
.eh_frame:0000000000008508                 db 0F8h
.eh_frame:0000000000008509                 db 0C9h
.eh_frame:000000000000850A                 db 0FFh
.eh_frame:000000000000850B                 db 0FFh
.eh_frame:000000000000850C                 db  78h ; x
.eh_frame:000000000000850D                 db    0
.eh_frame:000000000000850E                 db    0
.eh_frame:000000000000850F                 db    0
.eh_frame:0000000000008510                 db    0
.eh_frame:0000000000008511                 db  44h ; D
.eh_frame:0000000000008512                 db  0Eh
.eh_frame:0000000000008513                 db  70h ; p
.eh_frame:0000000000008514                 db    2
.eh_frame:0000000000008515                 db  60h ; `
.eh_frame:0000000000008516                 db  0Ah
.eh_frame:0000000000008517                 db  0Eh
.eh_frame:0000000000008518                 db    8
.eh_frame:0000000000008519                 db  41h ; A
.eh_frame:000000000000851A                 db  0Bh
.eh_frame:000000000000851B                 db    0
.eh_frame:000000000000851C                 db  28h ; (
.eh_frame:000000000000851D                 db    0
.eh_frame:000000000000851E                 db    0
.eh_frame:000000000000851F                 db    0
.eh_frame:0000000000008520                 db  28h ; (
.eh_frame:0000000000008521                 db    9
.eh_frame:0000000000008522                 db    0
.eh_frame:0000000000008523                 db    0
.eh_frame:0000000000008524                 db  5Ch ; \
.eh_frame:0000000000008525                 db 0CAh
.eh_frame:0000000000008526                 db 0FFh
.eh_frame:0000000000008527                 db 0FFh
.eh_frame:0000000000008528                 db 0D5h
.eh_frame:0000000000008529                 db    0
.eh_frame:000000000000852A                 db    0
.eh_frame:000000000000852B                 db    0
.eh_frame:000000000000852C                 db    0
.eh_frame:000000000000852D                 db  41h ; A
.eh_frame:000000000000852E                 db  0Eh
.eh_frame:000000000000852F                 db  10h
.eh_frame:0000000000008530                 db  86h
.eh_frame:0000000000008531                 db    2
.eh_frame:0000000000008532                 db  41h ; A
.eh_frame:0000000000008533                 db  0Eh
.eh_frame:0000000000008534                 db  18h
.eh_frame:0000000000008535                 db  83h
.eh_frame:0000000000008536                 db    3
.eh_frame:0000000000008537                 db  50h ; P
.eh_frame:0000000000008538                 db  0Eh
.eh_frame:0000000000008539                 db 0D0h
.eh_frame:000000000000853A                 db    1
.eh_frame:000000000000853B                 db    2
.eh_frame:000000000000853C                 db 0ABh
.eh_frame:000000000000853D                 db  0Ah
.eh_frame:000000000000853E                 db  0Eh
.eh_frame:000000000000853F                 db  18h
.eh_frame:0000000000008540                 db  41h ; A
.eh_frame:0000000000008541                 db  0Eh
.eh_frame:0000000000008542                 db  10h
.eh_frame:0000000000008543                 db  41h ; A
.eh_frame:0000000000008544                 db  0Eh
.eh_frame:0000000000008545                 db    8
.eh_frame:0000000000008546                 db  41h ; A
.eh_frame:0000000000008547                 db  0Bh
.eh_frame:0000000000008548                 db  1Ch
.eh_frame:0000000000008549                 db    0
.eh_frame:000000000000854A                 db    0
.eh_frame:000000000000854B                 db    0
.eh_frame:000000000000854C                 db  54h ; T
.eh_frame:000000000000854D                 db    9
.eh_frame:000000000000854E                 db    0
.eh_frame:000000000000854F                 db    0
.eh_frame:0000000000008550                 db  10h
.eh_frame:0000000000008551                 db 0CBh
.eh_frame:0000000000008552                 db 0FFh
.eh_frame:0000000000008553                 db 0FFh
.eh_frame:0000000000008554                 db  80h
.eh_frame:0000000000008555                 db    0
.eh_frame:0000000000008556                 db    0
.eh_frame:0000000000008557                 db    0
.eh_frame:0000000000008558                 db    0
.eh_frame:0000000000008559                 db  41h ; A
.eh_frame:000000000000855A                 db  0Eh
.eh_frame:000000000000855B                 db  10h
.eh_frame:000000000000855C                 db  83h
.eh_frame:000000000000855D                 db    2
.eh_frame:000000000000855E                 db    2
.eh_frame:000000000000855F                 db  7Ah ; z
.eh_frame:0000000000008560                 db  0Eh
.eh_frame:0000000000008561                 db    8
.eh_frame:0000000000008562                 db    0
.eh_frame:0000000000008563                 db    0
.eh_frame:0000000000008564                 db    0
.eh_frame:0000000000008565                 db    0
.eh_frame:0000000000008566                 db    0
.eh_frame:0000000000008567                 db    0
.eh_frame:0000000000008568                 db  18h
.eh_frame:0000000000008569                 db    0
.eh_frame:000000000000856A                 db    0
.eh_frame:000000000000856B                 db    0
.eh_frame:000000000000856C                 db  74h ; t
.eh_frame:000000000000856D                 db    9
.eh_frame:000000000000856E                 db    0
.eh_frame:000000000000856F                 db    0
.eh_frame:0000000000008570                 db  70h ; p
.eh_frame:0000000000008571                 db 0CBh
.eh_frame:0000000000008572                 db 0FFh
.eh_frame:0000000000008573                 db 0FFh
.eh_frame:0000000000008574                 db  1Ah
.eh_frame:0000000000008575                 db    0
.eh_frame:0000000000008576                 db    0
.eh_frame:0000000000008577                 db    0
.eh_frame:0000000000008578                 db    0
.eh_frame:0000000000008579                 db  41h ; A
.eh_frame:000000000000857A                 db  0Eh
.eh_frame:000000000000857B                 db  10h
.eh_frame:000000000000857C                 db  83h
.eh_frame:000000000000857D                 db    2
.eh_frame:000000000000857E                 db  53h ; S
.eh_frame:000000000000857F                 db  0Ah
.eh_frame:0000000000008580                 db  0Eh
.eh_frame:0000000000008581                 db    8
.eh_frame:0000000000008582                 db  41h ; A
.eh_frame:0000000000008583                 db  0Bh
.eh_frame:0000000000008584                 db  10h
.eh_frame:0000000000008585                 db    0
.eh_frame:0000000000008586                 db    0
.eh_frame:0000000000008587                 db    0
.eh_frame:0000000000008588                 db  90h
.eh_frame:0000000000008589                 db    9
.eh_frame:000000000000858A                 db    0
.eh_frame:000000000000858B                 db    0
.eh_frame:000000000000858C                 db  74h ; t
.eh_frame:000000000000858D                 db 0CBh
.eh_frame:000000000000858E                 db 0FFh
.eh_frame:000000000000858F                 db 0FFh
.eh_frame:0000000000008590                 db  24h ; $
.eh_frame:0000000000008591                 db    0
.eh_frame:0000000000008592                 db    0
.eh_frame:0000000000008593                 db    0
.eh_frame:0000000000008594                 db    0
.eh_frame:0000000000008595                 db  5Fh ; _
.eh_frame:0000000000008596                 db  0Eh
.eh_frame:0000000000008597                 db  10h
.eh_frame:0000000000008598                 db  10h
.eh_frame:0000000000008599                 db    0
.eh_frame:000000000000859A                 db    0
.eh_frame:000000000000859B                 db    0
.eh_frame:000000000000859C                 db 0A4h
.eh_frame:000000000000859D                 db    9
.eh_frame:000000000000859E                 db    0
.eh_frame:000000000000859F                 db    0
.eh_frame:00000000000085A0                 db  90h
.eh_frame:00000000000085A1                 db 0CBh
.eh_frame:00000000000085A2                 db 0FFh
.eh_frame:00000000000085A3                 db 0FFh
.eh_frame:00000000000085A4                 db    2
.eh_frame:00000000000085A5                 db    0
.eh_frame:00000000000085A6                 db    0
.eh_frame:00000000000085A7                 db    0
.eh_frame:00000000000085A8                 db    0
.eh_frame:00000000000085A9                 db    0
.eh_frame:00000000000085AA                 db    0
.eh_frame:00000000000085AB                 db    0
.eh_frame:00000000000085AC                 db  20h
.eh_frame:00000000000085AD                 db    0
.eh_frame:00000000000085AE                 db    0
.eh_frame:00000000000085AF                 db    0
.eh_frame:00000000000085B0                 db 0B8h
.eh_frame:00000000000085B1                 db    9
.eh_frame:00000000000085B2                 db    0
.eh_frame:00000000000085B3                 db    0
.eh_frame:00000000000085B4                 db  8Ch
.eh_frame:00000000000085B5                 db 0CBh
.eh_frame:00000000000085B6                 db 0FFh
.eh_frame:00000000000085B7                 db 0FFh
.eh_frame:00000000000085B8                 db  36h ; 6
.eh_frame:00000000000085B9                 db    0
.eh_frame:00000000000085BA                 db    0
.eh_frame:00000000000085BB                 db    0
.eh_frame:00000000000085BC                 db    0
.eh_frame:00000000000085BD                 db  44h ; D
.eh_frame:00000000000085BE                 db  0Eh
.eh_frame:00000000000085BF                 db  10h
.eh_frame:00000000000085C0                 db  83h
.eh_frame:00000000000085C1                 db    2
.eh_frame:00000000000085C2                 db  5Dh ; ]
.eh_frame:00000000000085C3                 db  0Ah
.eh_frame:00000000000085C4                 db  0Eh
.eh_frame:00000000000085C5                 db    8
.eh_frame:00000000000085C6                 db  47h ; G
.eh_frame:00000000000085C7                 db  0Bh
.eh_frame:00000000000085C8                 db  48h ; H
.eh_frame:00000000000085C9                 db  0Ah
.eh_frame:00000000000085CA                 db  0Eh
.eh_frame:00000000000085CB                 db    8
.eh_frame:00000000000085CC                 db  41h ; A
.eh_frame:00000000000085CD                 db  0Bh
.eh_frame:00000000000085CE                 db    0
.eh_frame:00000000000085CF                 db    0
.eh_frame:00000000000085D0                 db  10h
.eh_frame:00000000000085D1                 db    0
.eh_frame:00000000000085D2                 db    0
.eh_frame:00000000000085D3                 db    0
.eh_frame:00000000000085D4                 db 0DCh
.eh_frame:00000000000085D5                 db    9
.eh_frame:00000000000085D6                 db    0
.eh_frame:00000000000085D7                 db    0
.eh_frame:00000000000085D8                 db 0A8h
.eh_frame:00000000000085D9                 db 0CBh
.eh_frame:00000000000085DA                 db 0FFh
.eh_frame:00000000000085DB                 db 0FFh
.eh_frame:00000000000085DC                 db  24h ; $
.eh_frame:00000000000085DD                 db    0
.eh_frame:00000000000085DE                 db    0
.eh_frame:00000000000085DF                 db    0
.eh_frame:00000000000085E0                 db    0
.eh_frame:00000000000085E1                 db  5Fh ; _
.eh_frame:00000000000085E2                 db  0Eh
.eh_frame:00000000000085E3                 db  10h
.eh_frame:00000000000085E4                 db  14h
.eh_frame:00000000000085E5                 db    0
.eh_frame:00000000000085E6                 db    0
.eh_frame:00000000000085E7                 db    0
.eh_frame:00000000000085E8                 db 0F0h
.eh_frame:00000000000085E9                 db    9
.eh_frame:00000000000085EA                 db    0
.eh_frame:00000000000085EB                 db    0
.eh_frame:00000000000085EC                 db 0C4h
.eh_frame:00000000000085ED                 db 0CBh
.eh_frame:00000000000085EE                 db 0FFh
.eh_frame:00000000000085EF                 db 0FFh
.eh_frame:00000000000085F0                 db  82h
.eh_frame:00000000000085F1                 db    0
.eh_frame:00000000000085F2                 db    0
.eh_frame:00000000000085F3                 db    0
.eh_frame:00000000000085F4                 db    0
.eh_frame:00000000000085F5                 db    2
.eh_frame:00000000000085F6                 db  5Fh ; _
.eh_frame:00000000000085F7                 db  0Eh
.eh_frame:00000000000085F8                 db  10h
.eh_frame:00000000000085F9                 db  49h ; I
.eh_frame:00000000000085FA                 db  0Eh
.eh_frame:00000000000085FB                 db    8
.eh_frame:00000000000085FC                 db  14h
.eh_frame:00000000000085FD                 db    0
.eh_frame:00000000000085FE                 db    0
.eh_frame:00000000000085FF                 db    0
.eh_frame:0000000000008600                 db    8
.eh_frame:0000000000008601                 db  0Ah
.eh_frame:0000000000008602                 db    0
.eh_frame:0000000000008603                 db    0
.eh_frame:0000000000008604                 db  3Ch ; <
.eh_frame:0000000000008605                 db 0CCh
.eh_frame:0000000000008606                 db 0FFh
.eh_frame:0000000000008607                 db 0FFh
.eh_frame:0000000000008608                 db  4Ah ; J
.eh_frame:0000000000008609                 db    0
.eh_frame:000000000000860A                 db    0
.eh_frame:000000000000860B                 db    0
.eh_frame:000000000000860C                 db    0
.eh_frame:000000000000860D                 db    2
.eh_frame:000000000000860E                 db  45h ; E
.eh_frame:000000000000860F                 db  0Eh
.eh_frame:0000000000008610                 db  10h
.eh_frame:0000000000008611                 db    0
.eh_frame:0000000000008612                 db    0
.eh_frame:0000000000008613                 db    0
.eh_frame:0000000000008614                 db  18h
.eh_frame:0000000000008615                 db    0
.eh_frame:0000000000008616                 db    0
.eh_frame:0000000000008617                 db    0
.eh_frame:0000000000008618                 db  20h
.eh_frame:0000000000008619                 db  0Ah
.eh_frame:000000000000861A                 db    0
.eh_frame:000000000000861B                 db    0
.eh_frame:000000000000861C                 db  74h ; t
.eh_frame:000000000000861D                 db 0CCh
.eh_frame:000000000000861E                 db 0FFh
.eh_frame:000000000000861F                 db 0FFh
.eh_frame:0000000000008620                 db  17h
.eh_frame:0000000000008621                 db    0
.eh_frame:0000000000008622                 db    0
.eh_frame:0000000000008623                 db    0
.eh_frame:0000000000008624                 db    0
.eh_frame:0000000000008625                 db  41h ; A
.eh_frame:0000000000008626                 db  0Eh
.eh_frame:0000000000008627                 db  10h
.eh_frame:0000000000008628                 db  83h
.eh_frame:0000000000008629                 db    2
.eh_frame:000000000000862A                 db  51h ; Q
.eh_frame:000000000000862B                 db  0Eh
.eh_frame:000000000000862C                 db    8
.eh_frame:000000000000862D                 db    0
.eh_frame:000000000000862E                 db    0
.eh_frame:000000000000862F                 db    0
.eh_frame:0000000000008630                 db  18h
.eh_frame:0000000000008631                 db    0
.eh_frame:0000000000008632                 db    0
.eh_frame:0000000000008633                 db    0
.eh_frame:0000000000008634                 db  3Ch ; <
.eh_frame:0000000000008635                 db  0Ah
.eh_frame:0000000000008636                 db    0
.eh_frame:0000000000008637                 db    0
.eh_frame:0000000000008638                 db  78h ; x
.eh_frame:0000000000008639                 db 0CCh
.eh_frame:000000000000863A                 db 0FFh
.eh_frame:000000000000863B                 db 0FFh
.eh_frame:000000000000863C                 db  2Eh ; .
.eh_frame:000000000000863D                 db    0
.eh_frame:000000000000863E                 db    0
.eh_frame:000000000000863F                 db    0
.eh_frame:0000000000008640                 db    0
.eh_frame:0000000000008641                 db  47h ; G
.eh_frame:0000000000008642                 db  0Eh
.eh_frame:0000000000008643                 db  10h
.eh_frame:0000000000008644                 db  61h ; a
.eh_frame:0000000000008645                 db  0Ah
.eh_frame:0000000000008646                 db  0Eh
.eh_frame:0000000000008647                 db    8
.eh_frame:0000000000008648                 db  41h ; A
.eh_frame:0000000000008649                 db  0Bh
.eh_frame:000000000000864A                 db    0
.eh_frame:000000000000864B                 db    0
.eh_frame:000000000000864C                 db  24h ; $
.eh_frame:000000000000864D                 db    0
.eh_frame:000000000000864E                 db    0
.eh_frame:000000000000864F                 db    0
.eh_frame:0000000000008650                 db  58h ; X
.eh_frame:0000000000008651                 db  0Ah
.eh_frame:0000000000008652                 db    0
.eh_frame:0000000000008653                 db    0
.eh_frame:0000000000008654                 db  8Ch
.eh_frame:0000000000008655                 db 0CCh
.eh_frame:0000000000008656                 db 0FFh
.eh_frame:0000000000008657                 db 0FFh
.eh_frame:0000000000008658                 db  28h ; (
.eh_frame:0000000000008659                 db    0
.eh_frame:000000000000865A                 db    0
.eh_frame:000000000000865B                 db    0
.eh_frame:000000000000865C                 db    0
.eh_frame:000000000000865D                 db  41h ; A
.eh_frame:000000000000865E                 db  0Eh
.eh_frame:000000000000865F                 db  10h
.eh_frame:0000000000008660                 db  86h
.eh_frame:0000000000008661                 db    2
.eh_frame:0000000000008662                 db  41h ; A
.eh_frame:0000000000008663                 db  0Eh
.eh_frame:0000000000008664                 db  18h
.eh_frame:0000000000008665                 db  83h
.eh_frame:0000000000008666                 db    3
.eh_frame:0000000000008667                 db  4Dh ; M
.eh_frame:0000000000008668                 db  0Eh
.eh_frame:0000000000008669                 db  20h
.eh_frame:000000000000866A                 db  49h ; I
.eh_frame:000000000000866B                 db  0Eh
.eh_frame:000000000000866C                 db  18h
.eh_frame:000000000000866D                 db  47h ; G
.eh_frame:000000000000866E                 db  0Eh
.eh_frame:000000000000866F                 db  10h
.eh_frame:0000000000008670                 db  41h ; A
.eh_frame:0000000000008671                 db  0Eh
.eh_frame:0000000000008672                 db    8
.eh_frame:0000000000008673                 db    0
.eh_frame:0000000000008674                 db  18h
.eh_frame:0000000000008675                 db    0
.eh_frame:0000000000008676                 db    0
.eh_frame:0000000000008677                 db    0
.eh_frame:0000000000008678                 db  80h
.eh_frame:0000000000008679                 db  0Ah
.eh_frame:000000000000867A                 db    0
.eh_frame:000000000000867B                 db    0
.eh_frame:000000000000867C                 db  94h
.eh_frame:000000000000867D                 db 0CCh
.eh_frame:000000000000867E                 db 0FFh
.eh_frame:000000000000867F                 db 0FFh
.eh_frame:0000000000008680                 db  13h
.eh_frame:0000000000008681                 db    0
.eh_frame:0000000000008682                 db    0
.eh_frame:0000000000008683                 db    0
.eh_frame:0000000000008684                 db    0
.eh_frame:0000000000008685                 db  41h ; A
.eh_frame:0000000000008686                 db  0Eh
.eh_frame:0000000000008687                 db  10h
.eh_frame:0000000000008688                 db  83h
.eh_frame:0000000000008689                 db    2
.eh_frame:000000000000868A                 db  50h ; P
.eh_frame:000000000000868B                 db  0Eh
.eh_frame:000000000000868C                 db    8
.eh_frame:000000000000868D                 db    0
.eh_frame:000000000000868E                 db    0
.eh_frame:000000000000868F                 db    0
.eh_frame:0000000000008690                 db  14h
.eh_frame:0000000000008691                 db    0
.eh_frame:0000000000008692                 db    0
.eh_frame:0000000000008693                 db    0
.eh_frame:0000000000008694                 db  9Ch
.eh_frame:0000000000008695                 db  0Ah
.eh_frame:0000000000008696                 db    0
.eh_frame:0000000000008697                 db    0
.eh_frame:0000000000008698                 db  98h
.eh_frame:0000000000008699                 db 0CCh
.eh_frame:000000000000869A                 db 0FFh
.eh_frame:000000000000869B                 db 0FFh
.eh_frame:000000000000869C                 db  35h ; 5
.eh_frame:000000000000869D                 db    0
.eh_frame:000000000000869E                 db    0
.eh_frame:000000000000869F                 db    0
.eh_frame:00000000000086A0                 db    0
.eh_frame:00000000000086A1                 db  4Bh ; K
.eh_frame:00000000000086A2                 db  0Eh
.eh_frame:00000000000086A3                 db  10h
.eh_frame:00000000000086A4                 db    0
.eh_frame:00000000000086A5                 db    0
.eh_frame:00000000000086A6                 db    0
.eh_frame:00000000000086A7                 db    0
.eh_frame:00000000000086A8                 db  34h ; 4
.eh_frame:00000000000086A9                 db    0
.eh_frame:00000000000086AA                 db    0
.eh_frame:00000000000086AB                 db    0
.eh_frame:00000000000086AC                 db 0B4h
.eh_frame:00000000000086AD                 db  0Ah
.eh_frame:00000000000086AE                 db    0
.eh_frame:00000000000086AF                 db    0
.eh_frame:00000000000086B0                 db 0C0h
.eh_frame:00000000000086B1                 db 0CCh
.eh_frame:00000000000086B2                 db 0FFh
.eh_frame:00000000000086B3                 db 0FFh
.eh_frame:00000000000086B4                 db  7Bh ; {
.eh_frame:00000000000086B5                 db    0
.eh_frame:00000000000086B6                 db    0
.eh_frame:00000000000086B7                 db    0
.eh_frame:00000000000086B8                 db    0
.eh_frame:00000000000086B9                 db  42h ; B
.eh_frame:00000000000086BA                 db  0Eh
.eh_frame:00000000000086BB                 db  10h
.eh_frame:00000000000086BC                 db  8Ch
.eh_frame:00000000000086BD                 db    2
.eh_frame:00000000000086BE                 db  41h ; A
.eh_frame:00000000000086BF                 db  0Eh
.eh_frame:00000000000086C0                 db  18h
.eh_frame:00000000000086C1                 db  86h
.eh_frame:00000000000086C2                 db    3
.eh_frame:00000000000086C3                 db  41h ; A
.eh_frame:00000000000086C4                 db  0Eh
.eh_frame:00000000000086C5                 db  20h
.eh_frame:00000000000086C6                 db  83h
.eh_frame:00000000000086C7                 db    4
.eh_frame:00000000000086C8                 db  7Dh ; }
.eh_frame:00000000000086C9                 db  0Ah
.eh_frame:00000000000086CA                 db  0Eh
.eh_frame:00000000000086CB                 db  18h
.eh_frame:00000000000086CC                 db  41h ; A
.eh_frame:00000000000086CD                 db  0Eh
.eh_frame:00000000000086CE                 db  10h
.eh_frame:00000000000086CF                 db  42h ; B
.eh_frame:00000000000086D0                 db  0Eh
.eh_frame:00000000000086D1                 db    8
.eh_frame:00000000000086D2                 db  44h ; D
.eh_frame:00000000000086D3                 db  0Bh
.eh_frame:00000000000086D4                 db  60h ; `
.eh_frame:00000000000086D5                 db  0Ah
.eh_frame:00000000000086D6                 db  0Eh
.eh_frame:00000000000086D7                 db  18h
.eh_frame:00000000000086D8                 db  41h ; A
.eh_frame:00000000000086D9                 db  0Eh
.eh_frame:00000000000086DA                 db  10h
.eh_frame:00000000000086DB                 db  42h ; B
.eh_frame:00000000000086DC                 db  0Eh
.eh_frame:00000000000086DD                 db    8
.eh_frame:00000000000086DE                 db  45h ; E
.eh_frame:00000000000086DF                 db  0Bh
.eh_frame:00000000000086E0                 db  1Ch
.eh_frame:00000000000086E1                 db    0
.eh_frame:00000000000086E2                 db    0
.eh_frame:00000000000086E3                 db    0
.eh_frame:00000000000086E4                 db 0ECh
.eh_frame:00000000000086E5                 db  0Ah
.eh_frame:00000000000086E6                 db    0
.eh_frame:00000000000086E7                 db    0
.eh_frame:00000000000086E8                 db    8
.eh_frame:00000000000086E9                 db 0CDh
.eh_frame:00000000000086EA                 db 0FFh
.eh_frame:00000000000086EB                 db 0FFh
.eh_frame:00000000000086EC                 db  40h ; @
.eh_frame:00000000000086ED                 db    0
.eh_frame:00000000000086EE                 db    0
.eh_frame:00000000000086EF                 db    0
.eh_frame:00000000000086F0                 db    0
.eh_frame:00000000000086F1                 db  44h ; D
.eh_frame:00000000000086F2                 db  0Eh
.eh_frame:00000000000086F3                 db  10h
.eh_frame:00000000000086F4                 db  83h
.eh_frame:00000000000086F5                 db    2
.eh_frame:00000000000086F6                 db  5Ah ; Z
.eh_frame:00000000000086F7                 db  0Ah
.eh_frame:00000000000086F8                 db  0Eh
.eh_frame:00000000000086F9                 db    8
.eh_frame:00000000000086FA                 db  4Ah ; J
.eh_frame:00000000000086FB                 db  0Bh
.eh_frame:00000000000086FC                 db  53h ; S
.eh_frame:00000000000086FD                 db  0Eh
.eh_frame:00000000000086FE                 db    8
.eh_frame:00000000000086FF                 db    0
.eh_frame:0000000000008700                 db  2Ch ; ,
.eh_frame:0000000000008701                 db    0
.eh_frame:0000000000008702                 db    0
.eh_frame:0000000000008703                 db    0
.eh_frame:0000000000008704                 db  0Ch
.eh_frame:0000000000008705                 db  0Bh
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db  28h ; (
.eh_frame:0000000000008709                 db 0CDh
.eh_frame:000000000000870A                 db 0FFh
.eh_frame:000000000000870B                 db 0FFh
.eh_frame:000000000000870C                 db  57h ; W
.eh_frame:000000000000870D                 db    0
.eh_frame:000000000000870E                 db    0
.eh_frame:000000000000870F                 db    0
.eh_frame:0000000000008710                 db    0
.eh_frame:0000000000008711                 db  63h ; c
.eh_frame:0000000000008712                 db  0Eh
.eh_frame:0000000000008713                 db  10h
.eh_frame:0000000000008714                 db  8Ch
.eh_frame:0000000000008715                 db    2
.eh_frame:0000000000008716                 db  41h ; A
.eh_frame:0000000000008717                 db  0Eh
.eh_frame:0000000000008718                 db  18h
.eh_frame:0000000000008719                 db  86h
.eh_frame:000000000000871A                 db    3
.eh_frame:000000000000871B                 db  44h ; D
.eh_frame:000000000000871C                 db  0Eh
.eh_frame:000000000000871D                 db  20h
.eh_frame:000000000000871E                 db  83h
.eh_frame:000000000000871F                 db    4
.eh_frame:0000000000008720                 db  6Bh ; k
.eh_frame:0000000000008721                 db  0Eh
.eh_frame:0000000000008722                 db  18h
.eh_frame:0000000000008723                 db  41h ; A
.eh_frame:0000000000008724                 db  0Eh
.eh_frame:0000000000008725                 db  10h
.eh_frame:0000000000008726                 db  42h ; B
.eh_frame:0000000000008727                 db  0Eh
.eh_frame:0000000000008728                 db    8
.eh_frame:0000000000008729                 db    0
.eh_frame:000000000000872A                 db    0
.eh_frame:000000000000872B                 db    0
.eh_frame:000000000000872C                 db    0
.eh_frame:000000000000872D                 db    0
.eh_frame:000000000000872E                 db    0
.eh_frame:000000000000872F                 db    0
.eh_frame:0000000000008730                 db  3Ch ; <
.eh_frame:0000000000008731                 db    0
.eh_frame:0000000000008732                 db    0
.eh_frame:0000000000008733                 db    0
.eh_frame:0000000000008734                 db  3Ch ; <
.eh_frame:0000000000008735                 db  0Bh
.eh_frame:0000000000008736                 db    0
.eh_frame:0000000000008737                 db    0
.eh_frame:0000000000008738                 db  58h ; X
.eh_frame:0000000000008739                 db 0CDh
.eh_frame:000000000000873A                 db 0FFh
.eh_frame:000000000000873B                 db 0FFh
.eh_frame:000000000000873C                 db  83h
.eh_frame:000000000000873D                 db    0
.eh_frame:000000000000873E                 db    0
.eh_frame:000000000000873F                 db    0
.eh_frame:0000000000008740                 db    0
.eh_frame:0000000000008741                 db  42h ; B
.eh_frame:0000000000008742                 db  0Eh
.eh_frame:0000000000008743                 db  10h
.eh_frame:0000000000008744                 db  8Dh
.eh_frame:0000000000008745                 db    2
.eh_frame:0000000000008746                 db  42h ; B
.eh_frame:0000000000008747                 db  0Eh
.eh_frame:0000000000008748                 db  18h
.eh_frame:0000000000008749                 db  8Ch
.eh_frame:000000000000874A                 db    3
.eh_frame:000000000000874B                 db  44h ; D
.eh_frame:000000000000874C                 db  0Eh
.eh_frame:000000000000874D                 db  20h
.eh_frame:000000000000874E                 db  86h
.eh_frame:000000000000874F                 db    4
.eh_frame:0000000000008750                 db  41h ; A
.eh_frame:0000000000008751                 db  0Eh
.eh_frame:0000000000008752                 db  28h ; (
.eh_frame:0000000000008753                 db  83h
.eh_frame:0000000000008754                 db    5
.eh_frame:0000000000008755                 db  4Ah ; J
.eh_frame:0000000000008756                 db  0Eh
.eh_frame:0000000000008757                 db  40h ; @
.eh_frame:0000000000008758                 db    2
.eh_frame:0000000000008759                 db  64h ; d
.eh_frame:000000000000875A                 db  0Ah
.eh_frame:000000000000875B                 db  0Eh
.eh_frame:000000000000875C                 db  28h ; (
.eh_frame:000000000000875D                 db  41h ; A
.eh_frame:000000000000875E                 db  0Eh
.eh_frame:000000000000875F                 db  20h
.eh_frame:0000000000008760                 db  41h ; A
.eh_frame:0000000000008761                 db  0Eh
.eh_frame:0000000000008762                 db  18h
.eh_frame:0000000000008763                 db  42h ; B
.eh_frame:0000000000008764                 db  0Eh
.eh_frame:0000000000008765                 db  10h
.eh_frame:0000000000008766                 db  42h ; B
.eh_frame:0000000000008767                 db  0Eh
.eh_frame:0000000000008768                 db    8
.eh_frame:0000000000008769                 db  41h ; A
.eh_frame:000000000000876A                 db  0Bh
.eh_frame:000000000000876B                 db    0
.eh_frame:000000000000876C                 db    0
.eh_frame:000000000000876D                 db    0
.eh_frame:000000000000876E                 db    0
.eh_frame:000000000000876F                 db    0
.eh_frame:0000000000008770                 db  1Ch
.eh_frame:0000000000008771                 db    0
.eh_frame:0000000000008772                 db    0
.eh_frame:0000000000008773                 db    0
.eh_frame:0000000000008774                 db  7Ch ; |
.eh_frame:0000000000008775                 db  0Bh
.eh_frame:0000000000008776                 db    0
.eh_frame:0000000000008777                 db    0
.eh_frame:0000000000008778                 db 0A8h
.eh_frame:0000000000008779                 db 0CDh
.eh_frame:000000000000877A                 db 0FFh
.eh_frame:000000000000877B                 db 0FFh
.eh_frame:000000000000877C                 db  60h ; `
.eh_frame:000000000000877D                 db    0
.eh_frame:000000000000877E                 db    0
.eh_frame:000000000000877F                 db    0
.eh_frame:0000000000008780                 db    0
.eh_frame:0000000000008781                 db  44h ; D
.eh_frame:0000000000008782                 db  0Eh
.eh_frame:0000000000008783                 db  10h
.eh_frame:0000000000008784                 db  75h ; u
.eh_frame:0000000000008785                 db  0Ah
.eh_frame:0000000000008786                 db  0Eh
.eh_frame:0000000000008787                 db    8
.eh_frame:0000000000008788                 db  47h ; G
.eh_frame:0000000000008789                 db  0Bh
.eh_frame:000000000000878A                 db  5Fh ; _
.eh_frame:000000000000878B                 db  0Eh
.eh_frame:000000000000878C                 db    8
.eh_frame:000000000000878D                 db    0
.eh_frame:000000000000878E                 db    0
.eh_frame:000000000000878F                 db    0
.eh_frame:0000000000008790                 db  1Ch
.eh_frame:0000000000008791                 db    0
.eh_frame:0000000000008792                 db    0
.eh_frame:0000000000008793                 db    0
.eh_frame:0000000000008794                 db  9Ch
.eh_frame:0000000000008795                 db  0Bh
.eh_frame:0000000000008796                 db    0
.eh_frame:0000000000008797                 db    0
.eh_frame:0000000000008798                 db 0E8h
.eh_frame:0000000000008799                 db 0CDh
.eh_frame:000000000000879A                 db 0FFh
.eh_frame:000000000000879B                 db 0FFh
.eh_frame:000000000000879C                 db  3Ch ; <
.eh_frame:000000000000879D                 db    0
.eh_frame:000000000000879E                 db    0
.eh_frame:000000000000879F                 db    0
.eh_frame:00000000000087A0                 db    0
.eh_frame:00000000000087A1                 db  44h ; D
.eh_frame:00000000000087A2                 db  0Eh
.eh_frame:00000000000087A3                 db  10h
.eh_frame:00000000000087A4                 db  61h ; a
.eh_frame:00000000000087A5                 db  0Ah
.eh_frame:00000000000087A6                 db  0Eh
.eh_frame:00000000000087A7                 db    8
.eh_frame:00000000000087A8                 db  4Bh ; K
.eh_frame:00000000000087A9                 db  0Bh
.eh_frame:00000000000087AA                 db  4Bh ; K
.eh_frame:00000000000087AB                 db  0Eh
.eh_frame:00000000000087AC                 db    8
.eh_frame:00000000000087AD                 db    0
.eh_frame:00000000000087AE                 db    0
.eh_frame:00000000000087AF                 db    0
.eh_frame:00000000000087B0                 db  18h
.eh_frame:00000000000087B1                 db    0
.eh_frame:00000000000087B2                 db    0
.eh_frame:00000000000087B3                 db    0
.eh_frame:00000000000087B4                 db 0BCh
.eh_frame:00000000000087B5                 db  0Bh
.eh_frame:00000000000087B6                 db    0
.eh_frame:00000000000087B7                 db    0
.eh_frame:00000000000087B8                 db    8
.eh_frame:00000000000087B9                 db 0CEh
.eh_frame:00000000000087BA                 db 0FFh
.eh_frame:00000000000087BB                 db 0FFh
.eh_frame:00000000000087BC                 db  23h ; #
.eh_frame:00000000000087BD                 db    0
.eh_frame:00000000000087BE                 db    0
.eh_frame:00000000000087BF                 db    0
.eh_frame:00000000000087C0                 db    0
.eh_frame:00000000000087C1                 db  41h ; A
.eh_frame:00000000000087C2                 db  0Eh
.eh_frame:00000000000087C3                 db  10h
.eh_frame:00000000000087C4                 db  83h
.eh_frame:00000000000087C5                 db    2
.eh_frame:00000000000087C6                 db  61h ; a
.eh_frame:00000000000087C7                 db  0Eh
.eh_frame:00000000000087C8                 db    8
.eh_frame:00000000000087C9                 db    0
.eh_frame:00000000000087CA                 db    0
.eh_frame:00000000000087CB                 db    0
.eh_frame:00000000000087CC                 db  1Ch
.eh_frame:00000000000087CD                 db    0
.eh_frame:00000000000087CE                 db    0
.eh_frame:00000000000087CF                 db    0
.eh_frame:00000000000087D0                 db 0D8h
.eh_frame:00000000000087D1                 db  0Bh
.eh_frame:00000000000087D2                 db    0
.eh_frame:00000000000087D3                 db    0
.eh_frame:00000000000087D4                 db  1Ch
.eh_frame:00000000000087D5                 db 0CEh
.eh_frame:00000000000087D6                 db 0FFh
.eh_frame:00000000000087D7                 db 0FFh
.eh_frame:00000000000087D8                 db  34h ; 4
.eh_frame:00000000000087D9                 db    0
.eh_frame:00000000000087DA                 db    0
.eh_frame:00000000000087DB                 db    0
.eh_frame:00000000000087DC                 db    0
.eh_frame:00000000000087DD                 db  41h ; A
.eh_frame:00000000000087DE                 db  0Eh
.eh_frame:00000000000087DF                 db  10h
.eh_frame:00000000000087E0                 db  83h
.eh_frame:00000000000087E1                 db    2
.eh_frame:00000000000087E2                 db  6Bh ; k
.eh_frame:00000000000087E3                 db  0Ah
.eh_frame:00000000000087E4                 db  0Eh
.eh_frame:00000000000087E5                 db    8
.eh_frame:00000000000087E6                 db  44h ; D
.eh_frame:00000000000087E7                 db  0Bh
.eh_frame:00000000000087E8                 db  43h ; C
.eh_frame:00000000000087E9                 db  0Eh
.eh_frame:00000000000087EA                 db    8
.eh_frame:00000000000087EB                 db    0
.eh_frame:00000000000087EC                 db  10h
.eh_frame:00000000000087ED                 db    0
.eh_frame:00000000000087EE                 db    0
.eh_frame:00000000000087EF                 db    0
.eh_frame:00000000000087F0                 db 0F8h
.eh_frame:00000000000087F1                 db  0Bh
.eh_frame:00000000000087F2                 db    0
.eh_frame:00000000000087F3                 db    0
.eh_frame:00000000000087F4                 db  3Ch ; <
.eh_frame:00000000000087F5                 db 0CEh
.eh_frame:00000000000087F6                 db 0FFh
.eh_frame:00000000000087F7                 db 0FFh
.eh_frame:00000000000087F8                 db    4
.eh_frame:00000000000087F9                 db    0
.eh_frame:00000000000087FA                 db    0
.eh_frame:00000000000087FB                 db    0
.eh_frame:00000000000087FC                 db    0
.eh_frame:00000000000087FD                 db    0
.eh_frame:00000000000087FE                 db    0
.eh_frame:00000000000087FF                 db    0
.eh_frame:0000000000008800                 db  48h ; H
.eh_frame:0000000000008801                 db    0
.eh_frame:0000000000008802                 db    0
.eh_frame:0000000000008803                 db    0
.eh_frame:0000000000008804                 db  0Ch
.eh_frame:0000000000008805                 db  0Ch
.eh_frame:0000000000008806                 db    0
.eh_frame:0000000000008807                 db    0
.eh_frame:0000000000008808                 db  38h ; 8
.eh_frame:0000000000008809                 db 0CEh
.eh_frame:000000000000880A                 db 0FFh
.eh_frame:000000000000880B                 db 0FFh
.eh_frame:000000000000880C                 db  1Ah
.eh_frame:000000000000880D                 db    1
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db    0
.eh_frame:0000000000008811                 db  42h ; B
.eh_frame:0000000000008812                 db  0Eh
.eh_frame:0000000000008813                 db  10h
.eh_frame:0000000000008814                 db  8Fh
.eh_frame:0000000000008815                 db    2
.eh_frame:0000000000008816                 db  42h ; B
.eh_frame:0000000000008817                 db  0Eh
.eh_frame:0000000000008818                 db  18h
.eh_frame:0000000000008819                 db  8Eh
.eh_frame:000000000000881A                 db    3
.eh_frame:000000000000881B                 db  46h ; F
.eh_frame:000000000000881C                 db  0Eh
.eh_frame:000000000000881D                 db  20h
.eh_frame:000000000000881E                 db  8Dh
.eh_frame:000000000000881F                 db    4
.eh_frame:0000000000008820                 db  42h ; B
.eh_frame:0000000000008821                 db  0Eh
.eh_frame:0000000000008822                 db  28h ; (
.eh_frame:0000000000008823                 db  8Ch
.eh_frame:0000000000008824                 db    5
.eh_frame:0000000000008825                 db  44h ; D
.eh_frame:0000000000008826                 db  0Eh
.eh_frame:0000000000008827                 db  30h ; 0
.eh_frame:0000000000008828                 db  86h
.eh_frame:0000000000008829                 db    6
.eh_frame:000000000000882A                 db  41h ; A
.eh_frame:000000000000882B                 db  0Eh
.eh_frame:000000000000882C                 db  38h ; 8
.eh_frame:000000000000882D                 db  83h
.eh_frame:000000000000882E                 db    7
.eh_frame:000000000000882F                 db  47h ; G
.eh_frame:0000000000008830                 db  0Eh
.eh_frame:0000000000008831                 db  60h ; `
.eh_frame:0000000000008832                 db    2
.eh_frame:0000000000008833                 db 0DEh
.eh_frame:0000000000008834                 db  0Ah
.eh_frame:0000000000008835                 db  0Eh
.eh_frame:0000000000008836                 db  38h ; 8
.eh_frame:0000000000008837                 db  41h ; A
.eh_frame:0000000000008838                 db  0Eh
.eh_frame:0000000000008839                 db  30h ; 0
.eh_frame:000000000000883A                 db  41h ; A
.eh_frame:000000000000883B                 db  0Eh
.eh_frame:000000000000883C                 db  28h ; (
.eh_frame:000000000000883D                 db  42h ; B
.eh_frame:000000000000883E                 db  0Eh
.eh_frame:000000000000883F                 db  20h
.eh_frame:0000000000008840                 db  42h ; B
.eh_frame:0000000000008841                 db  0Eh
.eh_frame:0000000000008842                 db  18h
.eh_frame:0000000000008843                 db  42h ; B
.eh_frame:0000000000008844                 db  0Eh
.eh_frame:0000000000008845                 db  10h
.eh_frame:0000000000008846                 db  42h ; B
.eh_frame:0000000000008847                 db  0Eh
.eh_frame:0000000000008848                 db    8
.eh_frame:0000000000008849                 db  48h ; H
.eh_frame:000000000000884A                 db  0Bh
.eh_frame:000000000000884B                 db    0
.eh_frame:000000000000884C                 db  18h
.eh_frame:000000000000884D                 db    0
.eh_frame:000000000000884E                 db    0
.eh_frame:000000000000884F                 db    0
.eh_frame:0000000000008850                 db  58h ; X
.eh_frame:0000000000008851                 db  0Ch
.eh_frame:0000000000008852                 db    0
.eh_frame:0000000000008853                 db    0
.eh_frame:0000000000008854                 db  0Ch
.eh_frame:0000000000008855                 db 0CFh
.eh_frame:0000000000008856                 db 0FFh
.eh_frame:0000000000008857                 db 0FFh
.eh_frame:0000000000008858                 db  1Eh
.eh_frame:0000000000008859                 db    0
.eh_frame:000000000000885A                 db    0
.eh_frame:000000000000885B                 db    0
.eh_frame:000000000000885C                 db    0
.eh_frame:000000000000885D                 db  41h ; A
.eh_frame:000000000000885E                 db  0Eh
.eh_frame:000000000000885F                 db  10h
.eh_frame:0000000000008860                 db  83h
.eh_frame:0000000000008861                 db    2
.eh_frame:0000000000008862                 db  58h ; X
.eh_frame:0000000000008863                 db  0Eh
.eh_frame:0000000000008864                 db    8
.eh_frame:0000000000008865                 db    0
.eh_frame:0000000000008866                 db    0
.eh_frame:0000000000008867                 db    0
.eh_frame:0000000000008868                 db  34h ; 4
.eh_frame:0000000000008869                 db    0
.eh_frame:000000000000886A                 db    0
.eh_frame:000000000000886B                 db    0
.eh_frame:000000000000886C                 db  74h ; t
.eh_frame:000000000000886D                 db  0Ch
.eh_frame:000000000000886E                 db    0
.eh_frame:000000000000886F                 db    0
.eh_frame:0000000000008870                 db  10h
.eh_frame:0000000000008871                 db 0CFh
.eh_frame:0000000000008872                 db 0FFh
.eh_frame:0000000000008873                 db 0FFh
.eh_frame:0000000000008874                 db  51h ; Q
.eh_frame:0000000000008875                 db    0
.eh_frame:0000000000008876                 db    0
.eh_frame:0000000000008877                 db    0
.eh_frame:0000000000008878                 db    0
.eh_frame:0000000000008879                 db  42h ; B
.eh_frame:000000000000887A                 db  0Eh
.eh_frame:000000000000887B                 db  10h
.eh_frame:000000000000887C                 db  8Dh
.eh_frame:000000000000887D                 db    2
.eh_frame:000000000000887E                 db  42h ; B
.eh_frame:000000000000887F                 db  0Eh
.eh_frame:0000000000008880                 db  18h
.eh_frame:0000000000008881                 db  8Ch
.eh_frame:0000000000008882                 db    3
.eh_frame:0000000000008883                 db  41h ; A
.eh_frame:0000000000008884                 db  0Eh
.eh_frame:0000000000008885                 db  20h
.eh_frame:0000000000008886                 db  86h
.eh_frame:0000000000008887                 db    4
.eh_frame:0000000000008888                 db  41h ; A
.eh_frame:0000000000008889                 db  0Eh
.eh_frame:000000000000888A                 db  28h ; (
.eh_frame:000000000000888B                 db  83h
.eh_frame:000000000000888C                 db    5
.eh_frame:000000000000888D                 db  47h ; G
.eh_frame:000000000000888E                 db  0Eh
.eh_frame:000000000000888F                 db  30h ; 0
.eh_frame:0000000000008890                 db  7Ah ; z
.eh_frame:0000000000008891                 db  0Eh
.eh_frame:0000000000008892                 db  28h ; (
.eh_frame:0000000000008893                 db  44h ; D
.eh_frame:0000000000008894                 db  0Eh
.eh_frame:0000000000008895                 db  20h
.eh_frame:0000000000008896                 db  41h ; A
.eh_frame:0000000000008897                 db  0Eh
.eh_frame:0000000000008898                 db  18h
.eh_frame:0000000000008899                 db  42h ; B
.eh_frame:000000000000889A                 db  0Eh
.eh_frame:000000000000889B                 db  10h
.eh_frame:000000000000889C                 db  42h ; B
.eh_frame:000000000000889D                 db  0Eh
.eh_frame:000000000000889E                 db    8
.eh_frame:000000000000889F                 db    0
.eh_frame:00000000000088A0                 db  1Ch
.eh_frame:00000000000088A1                 db    0
.eh_frame:00000000000088A2                 db    0
.eh_frame:00000000000088A3                 db    0
.eh_frame:00000000000088A4                 db 0ACh
.eh_frame:00000000000088A5                 db  0Ch
.eh_frame:00000000000088A6                 db    0
.eh_frame:00000000000088A7                 db    0
.eh_frame:00000000000088A8                 db  38h ; 8
.eh_frame:00000000000088A9                 db 0CFh
.eh_frame:00000000000088AA                 db 0FFh
.eh_frame:00000000000088AB                 db 0FFh
.eh_frame:00000000000088AC                 db  5Dh ; ]
.eh_frame:00000000000088AD                 db    0
.eh_frame:00000000000088AE                 db    0
.eh_frame:00000000000088AF                 db    0
.eh_frame:00000000000088B0                 db    0
.eh_frame:00000000000088B1                 db  41h ; A
.eh_frame:00000000000088B2                 db  0Eh
.eh_frame:00000000000088B3                 db  10h
.eh_frame:00000000000088B4                 db  86h
.eh_frame:00000000000088B5                 db    2
.eh_frame:00000000000088B6                 db  41h ; A
.eh_frame:00000000000088B7                 db  0Eh
.eh_frame:00000000000088B8                 db  18h
.eh_frame:00000000000088B9                 db  83h
.eh_frame:00000000000088BA                 db    3
.eh_frame:00000000000088BB                 db  44h ; D
.eh_frame:00000000000088BC                 db  0Eh
.eh_frame:00000000000088BD                 db  20h
.eh_frame:00000000000088BE                 db    0
.eh_frame:00000000000088BF                 db    0
.eh_frame:00000000000088C0                 db  48h ; H
.eh_frame:00000000000088C1                 db    0
.eh_frame:00000000000088C2                 db    0
.eh_frame:00000000000088C3                 db    0
.eh_frame:00000000000088C4                 db 0CCh
.eh_frame:00000000000088C5                 db  0Ch
.eh_frame:00000000000088C6                 db    0
.eh_frame:00000000000088C7                 db    0
.eh_frame:00000000000088C8                 db  78h ; x
.eh_frame:00000000000088C9                 db 0CFh
.eh_frame:00000000000088CA                 db 0FFh
.eh_frame:00000000000088CB                 db 0FFh
.eh_frame:00000000000088CC                 db  29h ; )
.eh_frame:00000000000088CD                 db    3
.eh_frame:00000000000088CE                 db    0
.eh_frame:00000000000088CF                 db    0
.eh_frame:00000000000088D0                 db    0
.eh_frame:00000000000088D1                 db  42h ; B
.eh_frame:00000000000088D2                 db  0Eh
.eh_frame:00000000000088D3                 db  10h
.eh_frame:00000000000088D4                 db  8Fh
.eh_frame:00000000000088D5                 db    2
.eh_frame:00000000000088D6                 db  42h ; B
.eh_frame:00000000000088D7                 db  0Eh
.eh_frame:00000000000088D8                 db  18h
.eh_frame:00000000000088D9                 db  8Eh
.eh_frame:00000000000088DA                 db    3
.eh_frame:00000000000088DB                 db  42h ; B
.eh_frame:00000000000088DC                 db  0Eh
.eh_frame:00000000000088DD                 db  20h
.eh_frame:00000000000088DE                 db  8Dh
.eh_frame:00000000000088DF                 db    4
.eh_frame:00000000000088E0                 db  42h ; B
.eh_frame:00000000000088E1                 db  0Eh
.eh_frame:00000000000088E2                 db  28h ; (
.eh_frame:00000000000088E3                 db  8Ch
.eh_frame:00000000000088E4                 db    5
.eh_frame:00000000000088E5                 db  41h ; A
.eh_frame:00000000000088E6                 db  0Eh
.eh_frame:00000000000088E7                 db  30h ; 0
.eh_frame:00000000000088E8                 db  86h
.eh_frame:00000000000088E9                 db    6
.eh_frame:00000000000088EA                 db  41h ; A
.eh_frame:00000000000088EB                 db  0Eh
.eh_frame:00000000000088EC                 db  38h ; 8
.eh_frame:00000000000088ED                 db  83h
.eh_frame:00000000000088EE                 db    7
.eh_frame:00000000000088EF                 db  44h ; D
.eh_frame:00000000000088F0                 db  0Eh
.eh_frame:00000000000088F1                 db  70h ; p
.eh_frame:00000000000088F2                 db    2
.eh_frame:00000000000088F3                 db  94h
.eh_frame:00000000000088F4                 db  0Ah
.eh_frame:00000000000088F5                 db  0Eh
.eh_frame:00000000000088F6                 db  38h ; 8
.eh_frame:00000000000088F7                 db  41h ; A
.eh_frame:00000000000088F8                 db  0Eh
.eh_frame:00000000000088F9                 db  30h ; 0
.eh_frame:00000000000088FA                 db  41h ; A
.eh_frame:00000000000088FB                 db  0Eh
.eh_frame:00000000000088FC                 db  28h ; (
.eh_frame:00000000000088FD                 db  42h ; B
.eh_frame:00000000000088FE                 db  0Eh
.eh_frame:00000000000088FF                 db  20h
.eh_frame:0000000000008900                 db  42h ; B
.eh_frame:0000000000008901                 db  0Eh
.eh_frame:0000000000008902                 db  18h
.eh_frame:0000000000008903                 db  42h ; B
.eh_frame:0000000000008904                 db  0Eh
.eh_frame:0000000000008905                 db  10h
.eh_frame:0000000000008906                 db  42h ; B
.eh_frame:0000000000008907                 db  0Eh
.eh_frame:0000000000008908                 db    8
.eh_frame:0000000000008909                 db  44h ; D
.eh_frame:000000000000890A                 db  0Bh
.eh_frame:000000000000890B                 db    0
.eh_frame:000000000000890C                 db  10h
.eh_frame:000000000000890D                 db    0
.eh_frame:000000000000890E                 db    0
.eh_frame:000000000000890F                 db    0
.eh_frame:0000000000008910                 db  18h
.eh_frame:0000000000008911                 db  0Dh
.eh_frame:0000000000008912                 db    0
.eh_frame:0000000000008913                 db    0
.eh_frame:0000000000008914                 db  5Ch ; \
.eh_frame:0000000000008915                 db 0D2h
.eh_frame:0000000000008916                 db 0FFh
.eh_frame:0000000000008917                 db 0FFh
.eh_frame:0000000000008918                 db    5
.eh_frame:0000000000008919                 db    0
.eh_frame:000000000000891A                 db    0
.eh_frame:000000000000891B                 db    0
.eh_frame:000000000000891C                 db    0
.eh_frame:000000000000891D                 db    0
.eh_frame:000000000000891E                 db    0
.eh_frame:000000000000891F                 db    0
.eh_frame:0000000000008920                 db  10h
.eh_frame:0000000000008921                 db    0
.eh_frame:0000000000008922                 db    0
.eh_frame:0000000000008923                 db    0
.eh_frame:0000000000008924                 db  2Ch ; ,
.eh_frame:0000000000008925                 db  0Dh
.eh_frame:0000000000008926                 db    0
.eh_frame:0000000000008927                 db    0
.eh_frame:0000000000008928                 db  58h ; X
.eh_frame:0000000000008929                 db 0D2h
.eh_frame:000000000000892A                 db 0FFh
.eh_frame:000000000000892B                 db 0FFh
.eh_frame:000000000000892C                 db    5
.eh_frame:000000000000892D                 db    0
.eh_frame:000000000000892E                 db    0
.eh_frame:000000000000892F                 db    0
.eh_frame:0000000000008930                 db    0
.eh_frame:0000000000008931                 db    0
.eh_frame:0000000000008932                 db    0
.eh_frame:0000000000008933                 db    0
.eh_frame:0000000000008934                 db  60h ; `
.eh_frame:0000000000008935                 db    0
.eh_frame:0000000000008936                 db    0
.eh_frame:0000000000008937                 db    0
.eh_frame:0000000000008938                 db  40h ; @
.eh_frame:0000000000008939                 db  0Dh
.eh_frame:000000000000893A                 db    0
.eh_frame:000000000000893B                 db    0
.eh_frame:000000000000893C                 db  54h ; T
.eh_frame:000000000000893D                 db 0D2h
.eh_frame:000000000000893E                 db 0FFh
.eh_frame:000000000000893F                 db 0FFh
.eh_frame:0000000000008940                 db  96h
.eh_frame:0000000000008941                 db    1
.eh_frame:0000000000008942                 db    0
.eh_frame:0000000000008943                 db    0
.eh_frame:0000000000008944                 db    0
.eh_frame:0000000000008945                 db  42h ; B
.eh_frame:0000000000008946                 db  0Eh
.eh_frame:0000000000008947                 db  10h
.eh_frame:0000000000008948                 db  8Fh
.eh_frame:0000000000008949                 db    2
.eh_frame:000000000000894A                 db  42h ; B
.eh_frame:000000000000894B                 db  0Eh
.eh_frame:000000000000894C                 db  18h
.eh_frame:000000000000894D                 db  8Eh
.eh_frame:000000000000894E                 db    3
.eh_frame:000000000000894F                 db  42h ; B
.eh_frame:0000000000008950                 db  0Eh
.eh_frame:0000000000008951                 db  20h
.eh_frame:0000000000008952                 db  8Dh
.eh_frame:0000000000008953                 db    4
.eh_frame:0000000000008954                 db  42h ; B
.eh_frame:0000000000008955                 db  0Eh
.eh_frame:0000000000008956                 db  28h ; (
.eh_frame:0000000000008957                 db  8Ch
.eh_frame:0000000000008958                 db    5
.eh_frame:0000000000008959                 db  44h ; D
.eh_frame:000000000000895A                 db  0Eh
.eh_frame:000000000000895B                 db  30h ; 0
.eh_frame:000000000000895C                 db  86h
.eh_frame:000000000000895D                 db    6
.eh_frame:000000000000895E                 db  41h ; A
.eh_frame:000000000000895F                 db  0Eh
.eh_frame:0000000000008960                 db  38h ; 8
.eh_frame:0000000000008961                 db  83h
.eh_frame:0000000000008962                 db    7
.eh_frame:0000000000008963                 db  4Ah ; J
.eh_frame:0000000000008964                 db  0Eh
.eh_frame:0000000000008965                 db  50h ; P
.eh_frame:0000000000008966                 db    2
.eh_frame:0000000000008967                 db  5Fh ; _
.eh_frame:0000000000008968                 db  0Ah
.eh_frame:0000000000008969                 db  0Eh
.eh_frame:000000000000896A                 db  38h ; 8
.eh_frame:000000000000896B                 db  41h ; A
.eh_frame:000000000000896C                 db  0Eh
.eh_frame:000000000000896D                 db  30h ; 0
.eh_frame:000000000000896E                 db  41h ; A
.eh_frame:000000000000896F                 db  0Eh
.eh_frame:0000000000008970                 db  28h ; (
.eh_frame:0000000000008971                 db  42h ; B
.eh_frame:0000000000008972                 db  0Eh
.eh_frame:0000000000008973                 db  20h
.eh_frame:0000000000008974                 db  42h ; B
.eh_frame:0000000000008975                 db  0Eh
.eh_frame:0000000000008976                 db  18h
.eh_frame:0000000000008977                 db  42h ; B
.eh_frame:0000000000008978                 db  0Eh
.eh_frame:0000000000008979                 db  10h
.eh_frame:000000000000897A                 db  42h ; B
.eh_frame:000000000000897B                 db  0Eh
.eh_frame:000000000000897C                 db    8
.eh_frame:000000000000897D                 db  48h ; H
.eh_frame:000000000000897E                 db  0Bh
.eh_frame:000000000000897F                 db    2
.eh_frame:0000000000008980                 db  9Bh
.eh_frame:0000000000008981                 db  0Ah
.eh_frame:0000000000008982                 db  0Eh
.eh_frame:0000000000008983                 db  38h ; 8
.eh_frame:0000000000008984                 db  41h ; A
.eh_frame:0000000000008985                 db  0Eh
.eh_frame:0000000000008986                 db  30h ; 0
.eh_frame:0000000000008987                 db  41h ; A
.eh_frame:0000000000008988                 db  0Eh
.eh_frame:0000000000008989                 db  28h ; (
.eh_frame:000000000000898A                 db  42h ; B
.eh_frame:000000000000898B                 db  0Eh
.eh_frame:000000000000898C                 db  20h
.eh_frame:000000000000898D                 db  42h ; B
.eh_frame:000000000000898E                 db  0Eh
.eh_frame:000000000000898F                 db  18h
.eh_frame:0000000000008990                 db  42h ; B
.eh_frame:0000000000008991                 db  0Eh
.eh_frame:0000000000008992                 db  10h
.eh_frame:0000000000008993                 db  42h ; B
.eh_frame:0000000000008994                 db  0Eh
.eh_frame:0000000000008995                 db    8
.eh_frame:0000000000008996                 db  43h ; C
.eh_frame:0000000000008997                 db  0Bh
.eh_frame:0000000000008998                 db  34h ; 4
.eh_frame:0000000000008999                 db    0
.eh_frame:000000000000899A                 db    0
.eh_frame:000000000000899B                 db    0
.eh_frame:000000000000899C                 db 0A4h
.eh_frame:000000000000899D                 db  0Dh
.eh_frame:000000000000899E                 db    0
.eh_frame:000000000000899F                 db    0
.eh_frame:00000000000089A0                 db  90h
.eh_frame:00000000000089A1                 db 0D3h
.eh_frame:00000000000089A2                 db 0FFh
.eh_frame:00000000000089A3                 db 0FFh
.eh_frame:00000000000089A4                 db  49h ; I
.eh_frame:00000000000089A5                 db    0
.eh_frame:00000000000089A6                 db    0
.eh_frame:00000000000089A7                 db    0
.eh_frame:00000000000089A8                 db    0
.eh_frame:00000000000089A9                 db  41h ; A
.eh_frame:00000000000089AA                 db  0Eh
.eh_frame:00000000000089AB                 db  10h
.eh_frame:00000000000089AC                 db  86h
.eh_frame:00000000000089AD                 db    2
.eh_frame:00000000000089AE                 db  41h ; A
.eh_frame:00000000000089AF                 db  0Eh
.eh_frame:00000000000089B0                 db  18h
.eh_frame:00000000000089B1                 db  83h
.eh_frame:00000000000089B2                 db    3
.eh_frame:00000000000089B3                 db  53h ; S
.eh_frame:00000000000089B4                 db  0Eh
.eh_frame:00000000000089B5                 db  20h
.eh_frame:00000000000089B6                 db  59h ; Y
.eh_frame:00000000000089B7                 db  0Ah
.eh_frame:00000000000089B8                 db  0Eh
.eh_frame:00000000000089B9                 db  18h
.eh_frame:00000000000089BA                 db  44h ; D
.eh_frame:00000000000089BB                 db  0Eh
.eh_frame:00000000000089BC                 db  10h
.eh_frame:00000000000089BD                 db  41h ; A
.eh_frame:00000000000089BE                 db  0Eh
.eh_frame:00000000000089BF                 db    8
.eh_frame:00000000000089C0                 db  4Dh ; M
.eh_frame:00000000000089C1                 db  0Bh
.eh_frame:00000000000089C2                 db  44h ; D
.eh_frame:00000000000089C3                 db  0Eh
.eh_frame:00000000000089C4                 db  18h
.eh_frame:00000000000089C5                 db  43h ; C
.eh_frame:00000000000089C6                 db  0Eh
.eh_frame:00000000000089C7                 db  10h
.eh_frame:00000000000089C8                 db  41h ; A
.eh_frame:00000000000089C9                 db  0Eh
.eh_frame:00000000000089CA                 db    8
.eh_frame:00000000000089CB                 db    0
.eh_frame:00000000000089CC                 db    0
.eh_frame:00000000000089CD                 db    0
.eh_frame:00000000000089CE                 db    0
.eh_frame:00000000000089CF                 db    0
.eh_frame:00000000000089D0                 db  10h
.eh_frame:00000000000089D1                 db    0
.eh_frame:00000000000089D2                 db    0
.eh_frame:00000000000089D3                 db    0
.eh_frame:00000000000089D4                 db 0DCh
.eh_frame:00000000000089D5                 db  0Dh
.eh_frame:00000000000089D6                 db    0
.eh_frame:00000000000089D7                 db    0
.eh_frame:00000000000089D8                 db 0A8h
.eh_frame:00000000000089D9                 db 0D3h
.eh_frame:00000000000089DA                 db 0FFh
.eh_frame:00000000000089DB                 db 0FFh
.eh_frame:00000000000089DC                 db  8Eh
.eh_frame:00000000000089DD                 db    2
.eh_frame:00000000000089DE                 db    0
.eh_frame:00000000000089DF                 db    0
.eh_frame:00000000000089E0                 db    0
.eh_frame:00000000000089E1                 db    0
.eh_frame:00000000000089E2                 db    0
.eh_frame:00000000000089E3                 db    0
.eh_frame:00000000000089E4                 db  30h ; 0
.eh_frame:00000000000089E5                 db    0
.eh_frame:00000000000089E6                 db    0
.eh_frame:00000000000089E7                 db    0
.eh_frame:00000000000089E8                 db 0F0h
.eh_frame:00000000000089E9                 db  0Dh
.eh_frame:00000000000089EA                 db    0
.eh_frame:00000000000089EB                 db    0
.eh_frame:00000000000089EC                 db  24h ; $
.eh_frame:00000000000089ED                 db 0D6h
.eh_frame:00000000000089EE                 db 0FFh
.eh_frame:00000000000089EF                 db 0FFh
.eh_frame:00000000000089F0                 db  40h ; @
.eh_frame:00000000000089F1                 db    2
.eh_frame:00000000000089F2                 db    0
.eh_frame:00000000000089F3                 db    0
.eh_frame:00000000000089F4                 db    0
.eh_frame:00000000000089F5                 db  42h ; B
.eh_frame:00000000000089F6                 db  0Eh
.eh_frame:00000000000089F7                 db  10h
.eh_frame:00000000000089F8                 db  8Dh
.eh_frame:00000000000089F9                 db    2
.eh_frame:00000000000089FA                 db  42h ; B
.eh_frame:00000000000089FB                 db  0Eh
.eh_frame:00000000000089FC                 db  18h
.eh_frame:00000000000089FD                 db  8Ch
.eh_frame:00000000000089FE                 db    3
.eh_frame:00000000000089FF                 db  48h ; H
.eh_frame:0000000000008A00                 db  0Eh
.eh_frame:0000000000008A01                 db  20h
.eh_frame:0000000000008A02                 db  86h
.eh_frame:0000000000008A03                 db    4
.eh_frame:0000000000008A04                 db  44h ; D
.eh_frame:0000000000008A05                 db  0Eh
.eh_frame:0000000000008A06                 db  28h ; (
.eh_frame:0000000000008A07                 db  83h
.eh_frame:0000000000008A08                 db    5
.eh_frame:0000000000008A09                 db    3
.eh_frame:0000000000008A0A                 db    9
.eh_frame:0000000000008A0B                 db    2
.eh_frame:0000000000008A0C                 db  0Eh
.eh_frame:0000000000008A0D                 db  20h
.eh_frame:0000000000008A0E                 db  57h ; W
.eh_frame:0000000000008A0F                 db  0Eh
.eh_frame:0000000000008A10                 db  18h
.eh_frame:0000000000008A11                 db  4Dh ; M
.eh_frame:0000000000008A12                 db  0Eh
.eh_frame:0000000000008A13                 db  10h
.eh_frame:0000000000008A14                 db  42h ; B
.eh_frame:0000000000008A15                 db  0Eh
.eh_frame:0000000000008A16                 db    8
.eh_frame:0000000000008A17                 db    0
.eh_frame:0000000000008A18                 db  2Ch ; ,
.eh_frame:0000000000008A19                 db    0
.eh_frame:0000000000008A1A                 db    0
.eh_frame:0000000000008A1B                 db    0
.eh_frame:0000000000008A1C                 db  24h ; $
.eh_frame:0000000000008A1D                 db  0Eh
.eh_frame:0000000000008A1E                 db    0
.eh_frame:0000000000008A1F                 db    0
.eh_frame:0000000000008A20                 db  30h ; 0
.eh_frame:0000000000008A21                 db 0D8h
.eh_frame:0000000000008A22                 db 0FFh
.eh_frame:0000000000008A23                 db 0FFh
.eh_frame:0000000000008A24                 db  93h
.eh_frame:0000000000008A25                 db    0
.eh_frame:0000000000008A26                 db    0
.eh_frame:0000000000008A27                 db    0
.eh_frame:0000000000008A28                 db    0
.eh_frame:0000000000008A29                 db  42h ; B
.eh_frame:0000000000008A2A                 db  0Eh
.eh_frame:0000000000008A2B                 db  10h
.eh_frame:0000000000008A2C                 db  8Ch
.eh_frame:0000000000008A2D                 db    2
.eh_frame:0000000000008A2E                 db  41h ; A
.eh_frame:0000000000008A2F                 db  0Eh
.eh_frame:0000000000008A30                 db  18h
.eh_frame:0000000000008A31                 db  86h
.eh_frame:0000000000008A32                 db    3
.eh_frame:0000000000008A33                 db  44h ; D
.eh_frame:0000000000008A34                 db  0Eh
.eh_frame:0000000000008A35                 db  20h
.eh_frame:0000000000008A36                 db  83h
.eh_frame:0000000000008A37                 db    4
.eh_frame:0000000000008A38                 db  5Eh ; ^
.eh_frame:0000000000008A39                 db  0Ah
.eh_frame:0000000000008A3A                 db  0Eh
.eh_frame:0000000000008A3B                 db  18h
.eh_frame:0000000000008A3C                 db  41h ; A
.eh_frame:0000000000008A3D                 db  0Eh
.eh_frame:0000000000008A3E                 db  10h
.eh_frame:0000000000008A3F                 db  42h ; B
.eh_frame:0000000000008A40                 db  0Eh
.eh_frame:0000000000008A41                 db    8
.eh_frame:0000000000008A42                 db  48h ; H
.eh_frame:0000000000008A43                 db  0Bh
.eh_frame:0000000000008A44                 db    0
.eh_frame:0000000000008A45                 db    0
.eh_frame:0000000000008A46                 db    0
.eh_frame:0000000000008A47                 db    0
.eh_frame:0000000000008A48                 db  14h
.eh_frame:0000000000008A49                 db    0
.eh_frame:0000000000008A4A                 db    0
.eh_frame:0000000000008A4B                 db    0
.eh_frame:0000000000008A4C                 db  54h ; T
.eh_frame:0000000000008A4D                 db  0Eh
.eh_frame:0000000000008A4E                 db    0
.eh_frame:0000000000008A4F                 db    0
.eh_frame:0000000000008A50                 db 0A0h
.eh_frame:0000000000008A51                 db 0D8h
.eh_frame:0000000000008A52                 db 0FFh
.eh_frame:0000000000008A53                 db 0FFh
.eh_frame:0000000000008A54                 db  0Eh
.eh_frame:0000000000008A55                 db    0
.eh_frame:0000000000008A56                 db    0
.eh_frame:0000000000008A57                 db    0
.eh_frame:0000000000008A58                 db    0
.eh_frame:0000000000008A59                 db    0
.eh_frame:0000000000008A5A                 db    0
.eh_frame:0000000000008A5B                 db    0
.eh_frame:0000000000008A5C                 db    0
.eh_frame:0000000000008A5D                 db    0
.eh_frame:0000000000008A5E                 db    0
.eh_frame:0000000000008A5F                 db    0
.eh_frame:0000000000008A60                 db  34h ; 4
.eh_frame:0000000000008A61                 db    0
.eh_frame:0000000000008A62                 db    0
.eh_frame:0000000000008A63                 db    0
.eh_frame:0000000000008A64                 db  6Ch ; l
.eh_frame:0000000000008A65                 db  0Eh
.eh_frame:0000000000008A66                 db    0
.eh_frame:0000000000008A67                 db    0
.eh_frame:0000000000008A68                 db  98h
.eh_frame:0000000000008A69                 db 0D8h
.eh_frame:0000000000008A6A                 db 0FFh
.eh_frame:0000000000008A6B                 db 0FFh
.eh_frame:0000000000008A6C                 db  7Eh ; ~
.eh_frame:0000000000008A6D                 db    2
.eh_frame:0000000000008A6E                 db    0
.eh_frame:0000000000008A6F                 db    0
.eh_frame:0000000000008A70                 db    0
.eh_frame:0000000000008A71                 db  42h ; B
.eh_frame:0000000000008A72                 db  0Eh
.eh_frame:0000000000008A73                 db  10h
.eh_frame:0000000000008A74                 db  8Ch
.eh_frame:0000000000008A75                 db    2
.eh_frame:0000000000008A76                 db  41h ; A
.eh_frame:0000000000008A77                 db  0Eh
.eh_frame:0000000000008A78                 db  18h
.eh_frame:0000000000008A79                 db  86h
.eh_frame:0000000000008A7A                 db    3
.eh_frame:0000000000008A7B                 db  43h ; C
.eh_frame:0000000000008A7C                 db  0Eh
.eh_frame:0000000000008A7D                 db  20h
.eh_frame:0000000000008A7E                 db  83h
.eh_frame:0000000000008A7F                 db    4
.eh_frame:0000000000008A80                 db  44h ; D
.eh_frame:0000000000008A81                 db  0Eh
.eh_frame:0000000000008A82                 db  70h ; p
.eh_frame:0000000000008A83                 db    2
.eh_frame:0000000000008A84                 db 0F0h
.eh_frame:0000000000008A85                 db  0Ah
.eh_frame:0000000000008A86                 db  0Eh
.eh_frame:0000000000008A87                 db  20h
.eh_frame:0000000000008A88                 db  41h ; A
.eh_frame:0000000000008A89                 db  0Eh
.eh_frame:0000000000008A8A                 db  18h
.eh_frame:0000000000008A8B                 db  41h ; A
.eh_frame:0000000000008A8C                 db  0Eh
.eh_frame:0000000000008A8D                 db  10h
.eh_frame:0000000000008A8E                 db  42h ; B
.eh_frame:0000000000008A8F                 db  0Eh
.eh_frame:0000000000008A90                 db    8
.eh_frame:0000000000008A91                 db  42h ; B
.eh_frame:0000000000008A92                 db  0Bh
.eh_frame:0000000000008A93                 db    0
.eh_frame:0000000000008A94                 db    0
.eh_frame:0000000000008A95                 db    0
.eh_frame:0000000000008A96                 db    0
.eh_frame:0000000000008A97                 db    0
.eh_frame:0000000000008A98                 db  44h ; D
.eh_frame:0000000000008A99                 db    0
.eh_frame:0000000000008A9A                 db    0
.eh_frame:0000000000008A9B                 db    0
.eh_frame:0000000000008A9C                 db 0A4h
.eh_frame:0000000000008A9D                 db  0Eh
.eh_frame:0000000000008A9E                 db    0
.eh_frame:0000000000008A9F                 db    0
.eh_frame:0000000000008AA0                 db 0E0h
.eh_frame:0000000000008AA1                 db 0DAh
.eh_frame:0000000000008AA2                 db 0FFh
.eh_frame:0000000000008AA3                 db 0FFh
.eh_frame:0000000000008AA4                 db  65h ; e
.eh_frame:0000000000008AA5                 db    0
.eh_frame:0000000000008AA6                 db    0
.eh_frame:0000000000008AA7                 db    0
.eh_frame:0000000000008AA8                 db    0
.eh_frame:0000000000008AA9                 db  42h ; B
.eh_frame:0000000000008AAA                 db  0Eh
.eh_frame:0000000000008AAB                 db  10h
.eh_frame:0000000000008AAC                 db  8Fh
.eh_frame:0000000000008AAD                 db    2
.eh_frame:0000000000008AAE                 db  42h ; B
.eh_frame:0000000000008AAF                 db  0Eh
.eh_frame:0000000000008AB0                 db  18h
.eh_frame:0000000000008AB1                 db  8Eh
.eh_frame:0000000000008AB2                 db    3
.eh_frame:0000000000008AB3                 db  45h ; E
.eh_frame:0000000000008AB4                 db  0Eh
.eh_frame:0000000000008AB5                 db  20h
.eh_frame:0000000000008AB6                 db  8Dh
.eh_frame:0000000000008AB7                 db    4
.eh_frame:0000000000008AB8                 db  42h ; B
.eh_frame:0000000000008AB9                 db  0Eh
.eh_frame:0000000000008ABA                 db  28h ; (
.eh_frame:0000000000008ABB                 db  8Ch
.eh_frame:0000000000008ABC                 db    5
.eh_frame:0000000000008ABD                 db  48h ; H
.eh_frame:0000000000008ABE                 db  0Eh
.eh_frame:0000000000008ABF                 db  30h ; 0
.eh_frame:0000000000008AC0                 db  86h
.eh_frame:0000000000008AC1                 db    6
.eh_frame:0000000000008AC2                 db  48h ; H
.eh_frame:0000000000008AC3                 db  0Eh
.eh_frame:0000000000008AC4                 db  38h ; 8
.eh_frame:0000000000008AC5                 db  83h
.eh_frame:0000000000008AC6                 db    7
.eh_frame:0000000000008AC7                 db  4Dh ; M
.eh_frame:0000000000008AC8                 db  0Eh
.eh_frame:0000000000008AC9                 db  40h ; @
.eh_frame:0000000000008ACA                 db  72h ; r
.eh_frame:0000000000008ACB                 db  0Eh
.eh_frame:0000000000008ACC                 db  38h ; 8
.eh_frame:0000000000008ACD                 db  41h ; A
.eh_frame:0000000000008ACE                 db  0Eh
.eh_frame:0000000000008ACF                 db  30h ; 0
.eh_frame:0000000000008AD0                 db  41h ; A
.eh_frame:0000000000008AD1                 db  0Eh
.eh_frame:0000000000008AD2                 db  28h ; (
.eh_frame:0000000000008AD3                 db  42h ; B
.eh_frame:0000000000008AD4                 db  0Eh
.eh_frame:0000000000008AD5                 db  20h
.eh_frame:0000000000008AD6                 db  42h ; B
.eh_frame:0000000000008AD7                 db  0Eh
.eh_frame:0000000000008AD8                 db  18h
.eh_frame:0000000000008AD9                 db  42h ; B
.eh_frame:0000000000008ADA                 db  0Eh
.eh_frame:0000000000008ADB                 db  10h
.eh_frame:0000000000008ADC                 db  42h ; B
.eh_frame:0000000000008ADD                 db  0Eh
.eh_frame:0000000000008ADE                 db    8
.eh_frame:0000000000008ADF                 db    0
.eh_frame:0000000000008AE0                 db  14h
.eh_frame:0000000000008AE1                 db    0
.eh_frame:0000000000008AE2                 db    0
.eh_frame:0000000000008AE3                 db    0
.eh_frame:0000000000008AE4                 db 0ECh
.eh_frame:0000000000008AE5                 db  0Eh
.eh_frame:0000000000008AE6                 db    0
.eh_frame:0000000000008AE7                 db    0
.eh_frame:0000000000008AE8                 db    8
.eh_frame:0000000000008AE9                 db 0DBh
.eh_frame:0000000000008AEA                 db 0FFh
.eh_frame:0000000000008AEB                 db 0FFh
.eh_frame:0000000000008AEC                 db    2
.eh_frame:0000000000008AED                 db    0
.eh_frame:0000000000008AEE                 db    0
.eh_frame:0000000000008AEF                 db    0
.eh_frame:0000000000008AF0                 db    0
.eh_frame:0000000000008AF1                 db    0
.eh_frame:0000000000008AF2                 db    0
.eh_frame:0000000000008AF3                 db    0
.eh_frame:0000000000008AF4                 db    0
.eh_frame:0000000000008AF5                 db    0
.eh_frame:0000000000008AF6                 db    0
.eh_frame:0000000000008AF7                 db    0
.eh_frame:0000000000008AF8                 db  10h
.eh_frame:0000000000008AF9                 db    0
.eh_frame:0000000000008AFA                 db    0
.eh_frame:0000000000008AFB                 db    0
.eh_frame:0000000000008AFC                 db    4
.eh_frame:0000000000008AFD                 db  0Fh
.eh_frame:0000000000008AFE                 db    0
.eh_frame:0000000000008AFF                 db    0
.eh_frame:0000000000008B00                 db    0
.eh_frame:0000000000008B01                 db 0DBh
.eh_frame:0000000000008B02                 db 0FFh
.eh_frame:0000000000008B03                 db 0FFh
.eh_frame:0000000000008B04                 db  0Eh
.eh_frame:0000000000008B05                 db    0
.eh_frame:0000000000008B06                 db    0
.eh_frame:0000000000008B07                 db    0
.eh_frame:0000000000008B08                 db    0
.eh_frame:0000000000008B09                 db    0
.eh_frame:0000000000008B0A                 db    0
.eh_frame:0000000000008B0B                 db    0
.eh_frame:0000000000008B0C __FRAME_END__   db    0
.eh_frame:0000000000008B0D                 db    0
.eh_frame:0000000000008B0E                 db    0
.eh_frame:0000000000008B0F                 db    0
.eh_frame:0000000000008B0F _eh_frame       ends
.eh_frame:0000000000008B0F
.init_array:0000000000209A70 ; ELF Initialization Function Table
.init_array:0000000000209A70 ; ===========================================================================
.init_array:0000000000209A70
.init_array:0000000000209A70 ; Segment type: Pure data
.init_array:0000000000209A70 ; Segment permissions: Read/Write
.init_array:0000000000209A70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000209A70                 assume cs:_init_array
.init_array:0000000000209A70                 ;org 209A70h
.init_array:0000000000209A70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000209A70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000209A70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000209A70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000209A70
.fini_array:0000000000209A78 ; ELF Termination Function Table
.fini_array:0000000000209A78 ; ===========================================================================
.fini_array:0000000000209A78
.fini_array:0000000000209A78 ; Segment type: Pure data
.fini_array:0000000000209A78 ; Segment permissions: Read/Write
.fini_array:0000000000209A78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000209A78                 assume cs:_fini_array
.fini_array:0000000000209A78                 ;org 209A78h
.fini_array:0000000000209A78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000209A78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000209A78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000209A78
.data.rel.ro:0000000000209A80 ; ===========================================================================
.data.rel.ro:0000000000209A80
.data.rel.ro:0000000000209A80 ; Segment type: Pure data
.data.rel.ro:0000000000209A80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000209A80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000209A80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000209A80                 ;org 209A80h
.data.rel.ro:0000000000209A80 ; struct option longopts
.data.rel.ro:0000000000209A80 longopts        dq offset aDirectory    ; name
.data.rel.ro:0000000000209A80                                         ; DATA XREF: main:loc_1BF0↑o
.data.rel.ro:0000000000209A80                 dd 0                    ; has_arg ; "directory"
.data.rel.ro:0000000000209A80                 db 4 dup(0)
.data.rel.ro:0000000000209A80                 dq 0                    ; flag
.data.rel.ro:0000000000209A80                 dd 64h                  ; val
.data.rel.ro:0000000000209A80                 db 4 dup(0)
.data.rel.ro:0000000000209AA0                 dq offset aQuiet        ; "quiet"
.data.rel.ro:0000000000209AA8                 db    0
.data.rel.ro:0000000000209AA9                 db    0
.data.rel.ro:0000000000209AAA                 db    0
.data.rel.ro:0000000000209AAB                 db    0
.data.rel.ro:0000000000209AAC                 db    0
.data.rel.ro:0000000000209AAD                 db    0
.data.rel.ro:0000000000209AAE                 db    0
.data.rel.ro:0000000000209AAF                 db    0
.data.rel.ro:0000000000209AB0                 db    0
.data.rel.ro:0000000000209AB1                 db    0
.data.rel.ro:0000000000209AB2                 db    0
.data.rel.ro:0000000000209AB3                 db    0
.data.rel.ro:0000000000209AB4                 db    0
.data.rel.ro:0000000000209AB5                 db    0
.data.rel.ro:0000000000209AB6                 db    0
.data.rel.ro:0000000000209AB7                 db    0
.data.rel.ro:0000000000209AB8                 db  71h ; q
.data.rel.ro:0000000000209AB9                 db    0
.data.rel.ro:0000000000209ABA                 db    0
.data.rel.ro:0000000000209ABB                 db    0
.data.rel.ro:0000000000209ABC                 db    0
.data.rel.ro:0000000000209ABD                 db    0
.data.rel.ro:0000000000209ABE                 db    0
.data.rel.ro:0000000000209ABF                 db    0
.data.rel.ro:0000000000209AC0                 dq offset aDryRun       ; "dry-run"
.data.rel.ro:0000000000209AC8                 db    0
.data.rel.ro:0000000000209AC9                 db    0
.data.rel.ro:0000000000209ACA                 db    0
.data.rel.ro:0000000000209ACB                 db    0
.data.rel.ro:0000000000209ACC                 db    0
.data.rel.ro:0000000000209ACD                 db    0
.data.rel.ro:0000000000209ACE                 db    0
.data.rel.ro:0000000000209ACF                 db    0
.data.rel.ro:0000000000209AD0                 db    0
.data.rel.ro:0000000000209AD1                 db    0
.data.rel.ro:0000000000209AD2                 db    0
.data.rel.ro:0000000000209AD3                 db    0
.data.rel.ro:0000000000209AD4                 db    0
.data.rel.ro:0000000000209AD5                 db    0
.data.rel.ro:0000000000209AD6                 db    0
.data.rel.ro:0000000000209AD7                 db    0
.data.rel.ro:0000000000209AD8                 db  75h ; u
.data.rel.ro:0000000000209AD9                 db    0
.data.rel.ro:0000000000209ADA                 db    0
.data.rel.ro:0000000000209ADB                 db    0
.data.rel.ro:0000000000209ADC                 db    0
.data.rel.ro:0000000000209ADD                 db    0
.data.rel.ro:0000000000209ADE                 db    0
.data.rel.ro:0000000000209ADF                 db    0
.data.rel.ro:0000000000209AE0                 dq offset aSuffix       ; "suffix"
.data.rel.ro:0000000000209AE8                 db    1
.data.rel.ro:0000000000209AE9                 db    0
.data.rel.ro:0000000000209AEA                 db    0
.data.rel.ro:0000000000209AEB                 db    0
.data.rel.ro:0000000000209AEC                 db    0
.data.rel.ro:0000000000209AED                 db    0
.data.rel.ro:0000000000209AEE                 db    0
.data.rel.ro:0000000000209AEF                 db    0
.data.rel.ro:0000000000209AF0                 db    0
.data.rel.ro:0000000000209AF1                 db    0
.data.rel.ro:0000000000209AF2                 db    0
.data.rel.ro:0000000000209AF3                 db    0
.data.rel.ro:0000000000209AF4                 db    0
.data.rel.ro:0000000000209AF5                 db    0
.data.rel.ro:0000000000209AF6                 db    0
.data.rel.ro:0000000000209AF7                 db    0
.data.rel.ro:0000000000209AF8                 db  80h
.data.rel.ro:0000000000209AF9                 db    0
.data.rel.ro:0000000000209AFA                 db    0
.data.rel.ro:0000000000209AFB                 db    0
.data.rel.ro:0000000000209AFC                 db    0
.data.rel.ro:0000000000209AFD                 db    0
.data.rel.ro:0000000000209AFE                 db    0
.data.rel.ro:0000000000209AFF                 db    0
.data.rel.ro:0000000000209B00                 dq offset aTmpdir       ; "tmpdir"
.data.rel.ro:0000000000209B08                 db    2
.data.rel.ro:0000000000209B09                 db    0
.data.rel.ro:0000000000209B0A                 db    0
.data.rel.ro:0000000000209B0B                 db    0
.data.rel.ro:0000000000209B0C                 db    0
.data.rel.ro:0000000000209B0D                 db    0
.data.rel.ro:0000000000209B0E                 db    0
.data.rel.ro:0000000000209B0F                 db    0
.data.rel.ro:0000000000209B10                 db    0
.data.rel.ro:0000000000209B11                 db    0
.data.rel.ro:0000000000209B12                 db    0
.data.rel.ro:0000000000209B13                 db    0
.data.rel.ro:0000000000209B14                 db    0
.data.rel.ro:0000000000209B15                 db    0
.data.rel.ro:0000000000209B16                 db    0
.data.rel.ro:0000000000209B17                 db    0
.data.rel.ro:0000000000209B18                 db  70h ; p
.data.rel.ro:0000000000209B19                 db    0
.data.rel.ro:0000000000209B1A                 db    0
.data.rel.ro:0000000000209B1B                 db    0
.data.rel.ro:0000000000209B1C                 db    0
.data.rel.ro:0000000000209B1D                 db    0
.data.rel.ro:0000000000209B1E                 db    0
.data.rel.ro:0000000000209B1F                 db    0
.data.rel.ro:0000000000209B20                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  7Eh ; ~
.data.rel.ro:0000000000209B39                 db 0FFh
.data.rel.ro:0000000000209B3A                 db 0FFh
.data.rel.ro:0000000000209B3B                 db 0FFh
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db  7Dh ; }
.data.rel.ro:0000000000209B59                 db 0FFh
.data.rel.ro:0000000000209B5A                 db 0FFh
.data.rel.ro:0000000000209B5B                 db 0FFh
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60                 db    0
.data.rel.ro:0000000000209B61                 db    0
.data.rel.ro:0000000000209B62                 db    0
.data.rel.ro:0000000000209B63                 db    0
.data.rel.ro:0000000000209B64                 db    0
.data.rel.ro:0000000000209B65                 db    0
.data.rel.ro:0000000000209B66                 db    0
.data.rel.ro:0000000000209B67                 db    0
.data.rel.ro:0000000000209B68                 db    0
.data.rel.ro:0000000000209B69                 db    0
.data.rel.ro:0000000000209B6A                 db    0
.data.rel.ro:0000000000209B6B                 db    0
.data.rel.ro:0000000000209B6C                 db    0
.data.rel.ro:0000000000209B6D                 db    0
.data.rel.ro:0000000000209B6E                 db    0
.data.rel.ro:0000000000209B6F                 db    0
.data.rel.ro:0000000000209B70                 db    0
.data.rel.ro:0000000000209B71                 db    0
.data.rel.ro:0000000000209B72                 db    0
.data.rel.ro:0000000000209B73                 db    0
.data.rel.ro:0000000000209B74                 db    0
.data.rel.ro:0000000000209B75                 db    0
.data.rel.ro:0000000000209B76                 db    0
.data.rel.ro:0000000000209B77                 db    0
.data.rel.ro:0000000000209B78                 db    0
.data.rel.ro:0000000000209B79                 db    0
.data.rel.ro:0000000000209B7A                 db    0
.data.rel.ro:0000000000209B7B                 db    0
.data.rel.ro:0000000000209B7C                 db    0
.data.rel.ro:0000000000209B7D                 db    0
.data.rel.ro:0000000000209B7E                 db    0
.data.rel.ro:0000000000209B7F                 db    0
.data.rel.ro:0000000000209B80                 public quoting_style_args
.data.rel.ro:0000000000209B80 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209B88                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209B90                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209B98                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209BA0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209BA8                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000209BB0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209BB8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209BC0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209BC8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209BD0                 db    0
.data.rel.ro:0000000000209BD1                 db    0
.data.rel.ro:0000000000209BD2                 db    0
.data.rel.ro:0000000000209BD3                 db    0
.data.rel.ro:0000000000209BD4                 db    0
.data.rel.ro:0000000000209BD5                 db    0
.data.rel.ro:0000000000209BD6                 db    0
.data.rel.ro:0000000000209BD7                 db    0
.data.rel.ro:0000000000209BD7 _data_rel_ro    ends
.data.rel.ro:0000000000209BD7
LOAD:0000000000209BD8 ; ELF Dynamic Information
LOAD:0000000000209BD8 ; ===========================================================================
LOAD:0000000000209BD8
LOAD:0000000000209BD8 ; Segment type: Pure data
LOAD:0000000000209BD8 ; Segment permissions: Read/Write
LOAD:0000000000209BD8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209BD8                 assume cs:LOAD
LOAD:0000000000209BD8                 ;org 209BD8h
LOAD:0000000000209BD8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209BD8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209BD8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209BE8                 Elf64_Dyn <0Ch, 1758h>  ; DT_INIT
LOAD:0000000000209BF8                 Elf64_Dyn <0Dh, 6610h>  ; DT_FINI
LOAD:0000000000209C08                 Elf64_Dyn <19h, 209A70h> ; DT_INIT_ARRAY
LOAD:0000000000209C18                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C28                 Elf64_Dyn <1Ah, 209A78h> ; DT_FINI_ARRAY
LOAD:0000000000209C38                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209C48                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209C58                 Elf64_Dyn <5, 0A00h>    ; DT_STRTAB
LOAD:0000000000209C68                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000209C78                 Elf64_Dyn <0Ah, 34Ch>   ; DT_STRSZ
LOAD:0000000000209C88                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209C98                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209CA8                 Elf64_Dyn <3, 209DC8h>  ; DT_PLTGOT
LOAD:0000000000209CB8                 Elf64_Dyn <2, 5D0h>     ; DT_PLTRELSZ
LOAD:0000000000209CC8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209CD8                 Elf64_Dyn <17h, 1188h>  ; DT_JMPREL
LOAD:0000000000209CE8                 Elf64_Dyn <7, 0E58h>    ; DT_RELA
LOAD:0000000000209CF8                 Elf64_Dyn <8, 330h>     ; DT_RELASZ
LOAD:0000000000209D08                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209D18                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D28                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D38                 Elf64_Dyn <6FFFFFFEh, 0DE8h> ; DT_VERNEED
LOAD:0000000000209D48                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209D58                 Elf64_Dyn <6FFFFFF0h, 0D4Ch> ; DT_VERSYM
LOAD:0000000000209D68                 Elf64_Dyn <6FFFFFF9h, 17h> ; DT_RELACOUNT
LOAD:0000000000209D78                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209D88                 db    0
LOAD:0000000000209D89                 db    0
LOAD:0000000000209D8A                 db    0
LOAD:0000000000209D8B                 db    0
LOAD:0000000000209D8C                 db    0
LOAD:0000000000209D8D                 db    0
LOAD:0000000000209D8E                 db    0
LOAD:0000000000209D8F                 db    0
LOAD:0000000000209D90                 db    0
LOAD:0000000000209D91                 db    0
LOAD:0000000000209D92                 db    0
LOAD:0000000000209D93                 db    0
LOAD:0000000000209D94                 db    0
LOAD:0000000000209D95                 db    0
LOAD:0000000000209D96                 db    0
LOAD:0000000000209D97                 db    0
LOAD:0000000000209D98                 db    0
LOAD:0000000000209D99                 db    0
LOAD:0000000000209D9A                 db    0
LOAD:0000000000209D9B                 db    0
LOAD:0000000000209D9C                 db    0
LOAD:0000000000209D9D                 db    0
LOAD:0000000000209D9E                 db    0
LOAD:0000000000209D9F                 db    0
LOAD:0000000000209DA0                 db    0
LOAD:0000000000209DA1                 db    0
LOAD:0000000000209DA2                 db    0
LOAD:0000000000209DA3                 db    0
LOAD:0000000000209DA4                 db    0
LOAD:0000000000209DA5                 db    0
LOAD:0000000000209DA6                 db    0
LOAD:0000000000209DA7                 db    0
LOAD:0000000000209DA8                 db    0
LOAD:0000000000209DA9                 db    0
LOAD:0000000000209DAA                 db    0
LOAD:0000000000209DAB                 db    0
LOAD:0000000000209DAC                 db    0
LOAD:0000000000209DAD                 db    0
LOAD:0000000000209DAE                 db    0
LOAD:0000000000209DAF                 db    0
LOAD:0000000000209DB0                 db    0
LOAD:0000000000209DB1                 db    0
LOAD:0000000000209DB2                 db    0
LOAD:0000000000209DB3                 db    0
LOAD:0000000000209DB4                 db    0
LOAD:0000000000209DB5                 db    0
LOAD:0000000000209DB6                 db    0
LOAD:0000000000209DB7                 db    0
LOAD:0000000000209DB8                 db    0
LOAD:0000000000209DB9                 db    0
LOAD:0000000000209DBA                 db    0
LOAD:0000000000209DBB                 db    0
LOAD:0000000000209DBC                 db    0
LOAD:0000000000209DBD                 db    0
LOAD:0000000000209DBE                 db    0
LOAD:0000000000209DBF                 db    0
LOAD:0000000000209DC0                 db    0
LOAD:0000000000209DC1                 db    0
LOAD:0000000000209DC2                 db    0
LOAD:0000000000209DC3                 db    0
LOAD:0000000000209DC4                 db    0
LOAD:0000000000209DC5                 db    0
LOAD:0000000000209DC6                 db    0
LOAD:0000000000209DC7                 db    0
LOAD:0000000000209DC7 LOAD            ends
LOAD:0000000000209DC7
.got:0000000000209DC8 ; ===========================================================================
.got:0000000000209DC8
.got:0000000000209DC8 ; Segment type: Pure data
.got:0000000000209DC8 ; Segment permissions: Read/Write
.got:0000000000209DC8 _got            segment qword public 'DATA' use64
.got:0000000000209DC8                 assume cs:_got
.got:0000000000209DC8                 ;org 209DC8h
.got:0000000000209DC8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209DD0 qword_209DD0    dq 0                    ; DATA XREF: sub_1770↑r
.got:0000000000209DD8 qword_209DD8    dq 0                    ; DATA XREF: sub_1770+6↑r
.got:0000000000209DE0 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000209DE8 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000209DF0 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209DF8 __errno_location_ptr dq offset __errno_location
.got:0000000000209DF8                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209E00 remove_ptr      dq offset remove        ; DATA XREF: _remove↑r
.got:0000000000209E08 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E10 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E18 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E20 __read_chk_ptr  dq offset __read_chk    ; DATA XREF: ___read_chk↑r
.got:0000000000209E28 mkdir_ptr       dq offset mkdir         ; DATA XREF: _mkdir↑r
.got:0000000000209E30 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000209E38 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000209E40 getpid_ptr      dq offset getpid        ; DATA XREF: _getpid↑r
.got:0000000000209E48 fread_unlocked_ptr dq offset fread_unlocked
.got:0000000000209E48                                         ; DATA XREF: _fread_unlocked↑r
.got:0000000000209E50 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E58 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E60 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E60                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E68 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E70 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E70                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209E78 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209E80 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000209E88 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209E88                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209E90 getuid_ptr      dq offset getuid        ; DATA XREF: _getuid↑r
.got:0000000000209E98 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209EA0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209EA8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209EB0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209EB8 gettimeofday_ptr dq offset gettimeofday ; DATA XREF: _gettimeofday↑r
.got:0000000000209EC0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000209EC0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000209EC8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209ED0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000209ED8 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000209EE0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209EE8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209EE8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209EF0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209EF8 fputc_unlocked_ptr dq offset fputc_unlocked
.got:0000000000209EF8                                         ; DATA XREF: _fputc_unlocked↑r
.got:0000000000209F00 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209F08 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F10 getgid_ptr      dq offset getgid        ; DATA XREF: _getgid↑r
.got:0000000000209F18 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000209F20 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F28 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F30 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F38 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F40 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:0000000000209F48 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F50 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F58 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:0000000000209F60 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:0000000000209F68 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F70 __explicit_bzero_chk_ptr dq offset __explicit_bzero_chk
.got:0000000000209F70                                         ; DATA XREF: ___explicit_bzero_chk↑r
.got:0000000000209F78 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000209F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F88 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000209F90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209F98 getppid_ptr     dq offset getppid       ; DATA XREF: _getppid↑r
.got:0000000000209FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FD8                                         ; DATA XREF: start+24↑r
.got:0000000000209FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FF0 _got            ends
.got:0000000000209FF0
LOAD:0000000000209FF8 ; ===========================================================================
LOAD:0000000000209FF8
LOAD:0000000000209FF8 ; Segment type: Pure data
LOAD:0000000000209FF8 ; Segment permissions: Read/Write
LOAD:0000000000209FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209FF8                 assume cs:LOAD
LOAD:0000000000209FF8                 ;org 209FF8h
LOAD:0000000000209FF8                 align 20h
LOAD:0000000000209FF8 LOAD            ends
LOAD:0000000000209FF8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010                 public Version
.data:000000000020A010 Version         dq offset a831          ; DATA XREF: main+161↑r
.data:000000000020A010                                         ; "8.31"
.data:000000000020A018                 public exit_failure
.data:000000000020A018 ; int exit_failure
.data:000000000020A018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_28B2↑r
.data:000000000020A018                                         ; xalloc_die+17↑r ...
.data:000000000020A01C                 align 20h
.data:000000000020A020                 public quote_quoting_options
.data:000000000020A020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A020                                         ; quote_mem↑o ...
.data:000000000020A021                 db    0
.data:000000000020A022                 db    0
.data:000000000020A023                 db    0
.data:000000000020A024                 db    0
.data:000000000020A025                 db    0
.data:000000000020A026                 db    0
.data:000000000020A027                 db    0
.data:000000000020A028                 db    0
.data:000000000020A029                 db    0
.data:000000000020A02A                 db    0
.data:000000000020A02B                 db    0
.data:000000000020A02C                 db    0
.data:000000000020A02D                 db    0
.data:000000000020A02E                 db    0
.data:000000000020A02F                 db    0
.data:000000000020A030                 db    0
.data:000000000020A031                 db    0
.data:000000000020A032                 db    0
.data:000000000020A033                 db    0
.data:000000000020A034                 db    0
.data:000000000020A035                 db    0
.data:000000000020A036                 db    0
.data:000000000020A037                 db    0
.data:000000000020A038                 db    0
.data:000000000020A039                 db    0
.data:000000000020A03A                 db    0
.data:000000000020A03B                 db    0
.data:000000000020A03C                 db    0
.data:000000000020A03D                 db    0
.data:000000000020A03E                 db    0
.data:000000000020A03F                 db    0
.data:000000000020A040                 db    0
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A058                                         ; quotearg_n_options:loc_3EFD↑r ...
.data:000000000020A05C                 align 20h
.data:000000000020A060 ; void *slotvec
.data:000000000020A060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A060                                         ; quotearg_n_options+76↑w ...
.data:000000000020A068                 align 10h
.data:000000000020A070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A070                                         ; quotearg_n_options+187↑r ...
.data:000000000020A078 off_20A078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A078 _data           ends
.data:000000000020A078
.bss:000000000020A080 ; ===========================================================================
.bss:000000000020A080
.bss:000000000020A080 ; Segment type: Uninitialized
.bss:000000000020A080 ; Segment permissions: Read/Write
.bss:000000000020A080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A080                 assume cs:_bss
.bss:000000000020A080                 ;org 20A080h
.bss:000000000020A080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A080                 public __bss_start ; weak
.bss:000000000020A080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000958↑o
.bss:000000000020A080                                         ; LOAD:00000000000009A0↑o ...
.bss:000000000020A080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020A080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020A080                                         ; _edata
.bss:000000000020A080                                         ; Copy of shared data
.bss:000000000020A088                 public stdout@@GLIBC_2_2_5
.bss:000000000020A088 ; FILE *stdout
.bss:000000000020A088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000940↑o
.bss:000000000020A088                                         ; main+15A↑r ...
.bss:000000000020A088                                         ; Alternative name is 'stdout'
.bss:000000000020A088                                         ; Copy of shared data
.bss:000000000020A090                 public optind@@GLIBC_2_2_5
.bss:000000000020A090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000009D0↑o
.bss:000000000020A090                                         ; main:loc_1D04↑r
.bss:000000000020A090                                         ; Alternative name is 'optind'
.bss:000000000020A090                                         ; Copy of shared data
.bss:000000000020A094                 align 8
.bss:000000000020A098                 public optarg@@GLIBC_2_2_5
.bss:000000000020A098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009E8↑o
.bss:000000000020A098                                         ; main+C4↑r ...
.bss:000000000020A098                                         ; Alternative name is 'optarg'
.bss:000000000020A098                                         ; Copy of shared data
.bss:000000000020A0A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A0A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A0A0                                         ; DATA XREF: LOAD:0000000000000970↑o
.bss:000000000020A0A0                                         ; LOAD:0000000000000988↑o ...
.bss:000000000020A0A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A8                 align 20h
.bss:000000000020A0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0C0 ; FILE *stderr
.bss:000000000020A0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009B8↑o
.bss:000000000020A0C0                                         ; maybe_close_stdout+D↑r ...
.bss:000000000020A0C0                                         ; Alternative name is 'stderr'
.bss:000000000020A0C0                                         ; Copy of shared data
.bss:000000000020A0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0C9 stdout_closed   db ?                    ; DATA XREF: main+478↑w
.bss:000000000020A0C9                                         ; maybe_close_stdout↑r
.bss:000000000020A0CA                 align 10h
.bss:000000000020A0D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A0D0                                         ; close_stdout+1B↑r
.bss:000000000020A0D1                 align 8
.bss:000000000020A0D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A0D8                                         ; close_stdout+56↑r
.bss:000000000020A0E0                 public program_name
.bss:000000000020A0E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A0E0                                         ; set_program_name:loc_2B1D↑w
.bss:000000000020A0E8                 align 20h
.bss:000000000020A100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A100                                         ; quotearg_free+46↑o ...
.bss:000000000020A101                 db    ? ;
.bss:000000000020A102                 db    ? ;
.bss:000000000020A103                 db    ? ;
.bss:000000000020A104                 db    ? ;
.bss:000000000020A105                 db    ? ;
.bss:000000000020A106                 db    ? ;
.bss:000000000020A107                 db    ? ;
.bss:000000000020A108                 db    ? ;
.bss:000000000020A109                 db    ? ;
.bss:000000000020A10A                 db    ? ;
.bss:000000000020A10B                 db    ? ;
.bss:000000000020A10C                 db    ? ;
.bss:000000000020A10D                 db    ? ;
.bss:000000000020A10E                 db    ? ;
.bss:000000000020A10F                 db    ? ;
.bss:000000000020A110                 db    ? ;
.bss:000000000020A111                 db    ? ;
.bss:000000000020A112                 db    ? ;
.bss:000000000020A113                 db    ? ;
.bss:000000000020A114                 db    ? ;
.bss:000000000020A115                 db    ? ;
.bss:000000000020A116                 db    ? ;
.bss:000000000020A117                 db    ? ;
.bss:000000000020A118                 db    ? ;
.bss:000000000020A119                 db    ? ;
.bss:000000000020A11A                 db    ? ;
.bss:000000000020A11B                 db    ? ;
.bss:000000000020A11C                 db    ? ;
.bss:000000000020A11D                 db    ? ;
.bss:000000000020A11E                 db    ? ;
.bss:000000000020A11F                 db    ? ;
.bss:000000000020A120                 db    ? ;
.bss:000000000020A121                 db    ? ;
.bss:000000000020A122                 db    ? ;
.bss:000000000020A123                 db    ? ;
.bss:000000000020A124                 db    ? ;
.bss:000000000020A125                 db    ? ;
.bss:000000000020A126                 db    ? ;
.bss:000000000020A127                 db    ? ;
.bss:000000000020A128                 db    ? ;
.bss:000000000020A129                 db    ? ;
.bss:000000000020A12A                 db    ? ;
.bss:000000000020A12B                 db    ? ;
.bss:000000000020A12C                 db    ? ;
.bss:000000000020A12D                 db    ? ;
.bss:000000000020A12E                 db    ? ;
.bss:000000000020A12F                 db    ? ;
.bss:000000000020A130                 db    ? ;
.bss:000000000020A131                 db    ? ;
.bss:000000000020A132                 db    ? ;
.bss:000000000020A133                 db    ? ;
.bss:000000000020A134                 db    ? ;
.bss:000000000020A135                 db    ? ;
.bss:000000000020A136                 db    ? ;
.bss:000000000020A137                 db    ? ;
.bss:000000000020A138                 db    ? ;
.bss:000000000020A139                 db    ? ;
.bss:000000000020A13A                 db    ? ;
.bss:000000000020A13B                 db    ? ;
.bss:000000000020A13C                 db    ? ;
.bss:000000000020A13D                 db    ? ;
.bss:000000000020A13E                 db    ? ;
.bss:000000000020A13F                 db    ? ;
.bss:000000000020A140                 db    ? ;
.bss:000000000020A141                 db    ? ;
.bss:000000000020A142                 db    ? ;
.bss:000000000020A143                 db    ? ;
.bss:000000000020A144                 db    ? ;
.bss:000000000020A145                 db    ? ;
.bss:000000000020A146                 db    ? ;
.bss:000000000020A147                 db    ? ;
.bss:000000000020A148                 db    ? ;
.bss:000000000020A149                 db    ? ;
.bss:000000000020A14A                 db    ? ;
.bss:000000000020A14B                 db    ? ;
.bss:000000000020A14C                 db    ? ;
.bss:000000000020A14D                 db    ? ;
.bss:000000000020A14E                 db    ? ;
.bss:000000000020A14F                 db    ? ;
.bss:000000000020A150                 db    ? ;
.bss:000000000020A151                 db    ? ;
.bss:000000000020A152                 db    ? ;
.bss:000000000020A153                 db    ? ;
.bss:000000000020A154                 db    ? ;
.bss:000000000020A155                 db    ? ;
.bss:000000000020A156                 db    ? ;
.bss:000000000020A157                 db    ? ;
.bss:000000000020A158                 db    ? ;
.bss:000000000020A159                 db    ? ;
.bss:000000000020A15A                 db    ? ;
.bss:000000000020A15B                 db    ? ;
.bss:000000000020A15C                 db    ? ;
.bss:000000000020A15D                 db    ? ;
.bss:000000000020A15E                 db    ? ;
.bss:000000000020A15F                 db    ? ;
.bss:000000000020A160                 db    ? ;
.bss:000000000020A161                 db    ? ;
.bss:000000000020A162                 db    ? ;
.bss:000000000020A163                 db    ? ;
.bss:000000000020A164                 db    ? ;
.bss:000000000020A165                 db    ? ;
.bss:000000000020A166                 db    ? ;
.bss:000000000020A167                 db    ? ;
.bss:000000000020A168                 db    ? ;
.bss:000000000020A169                 db    ? ;
.bss:000000000020A16A                 db    ? ;
.bss:000000000020A16B                 db    ? ;
.bss:000000000020A16C                 db    ? ;
.bss:000000000020A16D                 db    ? ;
.bss:000000000020A16E                 db    ? ;
.bss:000000000020A16F                 db    ? ;
.bss:000000000020A170                 db    ? ;
.bss:000000000020A171                 db    ? ;
.bss:000000000020A172                 db    ? ;
.bss:000000000020A173                 db    ? ;
.bss:000000000020A174                 db    ? ;
.bss:000000000020A175                 db    ? ;
.bss:000000000020A176                 db    ? ;
.bss:000000000020A177                 db    ? ;
.bss:000000000020A178                 db    ? ;
.bss:000000000020A179                 db    ? ;
.bss:000000000020A17A                 db    ? ;
.bss:000000000020A17B                 db    ? ;
.bss:000000000020A17C                 db    ? ;
.bss:000000000020A17D                 db    ? ;
.bss:000000000020A17E                 db    ? ;
.bss:000000000020A17F                 db    ? ;
.bss:000000000020A180                 db    ? ;
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0                 db    ? ;
.bss:000000000020A1E1                 db    ? ;
.bss:000000000020A1E2                 db    ? ;
.bss:000000000020A1E3                 db    ? ;
.bss:000000000020A1E4                 db    ? ;
.bss:000000000020A1E5                 db    ? ;
.bss:000000000020A1E6                 db    ? ;
.bss:000000000020A1E7                 db    ? ;
.bss:000000000020A1E8                 db    ? ;
.bss:000000000020A1E9                 db    ? ;
.bss:000000000020A1EA                 db    ? ;
.bss:000000000020A1EB                 db    ? ;
.bss:000000000020A1EC                 db    ? ;
.bss:000000000020A1ED                 db    ? ;
.bss:000000000020A1EE                 db    ? ;
.bss:000000000020A1EF                 db    ? ;
.bss:000000000020A1F0                 db    ? ;
.bss:000000000020A1F1                 db    ? ;
.bss:000000000020A1F2                 db    ? ;
.bss:000000000020A1F3                 db    ? ;
.bss:000000000020A1F4                 db    ? ;
.bss:000000000020A1F5                 db    ? ;
.bss:000000000020A1F6                 db    ? ;
.bss:000000000020A1F7                 db    ? ;
.bss:000000000020A1F8                 db    ? ;
.bss:000000000020A1F9                 db    ? ;
.bss:000000000020A1FA                 db    ? ;
.bss:000000000020A1FB                 db    ? ;
.bss:000000000020A1FC                 db    ? ;
.bss:000000000020A1FD                 db    ? ;
.bss:000000000020A1FE                 db    ? ;
.bss:000000000020A1FF                 db    ? ;
.bss:000000000020A200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A200                                         ; get_quoting_style↑o ...
.bss:000000000020A210 xmmword_20A210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A210                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A220 xmmword_20A220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A220                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A230 qword_20A230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A230                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A238 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020A238                                         ; rpl_fcntl:loc_638F↑w ...
.bss:000000000020A23C                 align 20h
.bss:000000000020A23C _bss            ends
.bss:000000000020A23C
.prgend:000000000020A240 ; ===========================================================================
.prgend:000000000020A240
.prgend:000000000020A240 ; Segment type: Zero-length
.prgend:000000000020A240 _prgend         segment byte public '' use64
.prgend:000000000020A240 _end            label byte
.prgend:000000000020A240 _prgend         ends
.prgend:000000000020A240
extern:000000000020A248 ; ===========================================================================
extern:000000000020A248
extern:000000000020A248 ; Segment type: Externs
extern:000000000020A248 ; extern
extern:000000000020A248 ; char *getenv(const char *name)
extern:000000000020A248                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020A248                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020A250 ; void free(void *ptr)
extern:000000000020A250                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020A250                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A258 ; void __noreturn abort(void)
extern:000000000020A258                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A258                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A260 ; int *_errno_location(void)
extern:000000000020A260                 extrn __errno_location:near
extern:000000000020A260                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A260                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A268 ; int remove(const char *filename)
extern:000000000020A268                 extrn remove:near       ; CODE XREF: _remove↑j
extern:000000000020A268                                         ; DATA XREF: .got:remove_ptr↑o
extern:000000000020A270 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A270                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A270                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A278 ; void __noreturn exit(int status)
extern:000000000020A278                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A278                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A280 ; size_t _fpending(FILE *fp)
extern:000000000020A280                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A280                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A288                 extrn __read_chk:near   ; CODE XREF: ___read_chk↑j
extern:000000000020A288                                         ; DATA XREF: .got:__read_chk_ptr↑o
extern:000000000020A290 ; int mkdir(const char *path, __mode_t mode)
extern:000000000020A290                 extrn mkdir:near        ; CODE XREF: _mkdir↑j
extern:000000000020A290                                         ; DATA XREF: .got:mkdir_ptr↑o
extern:000000000020A298 ; int puts(const char *s)
extern:000000000020A298                 extrn puts:near         ; CODE XREF: _puts↑j
extern:000000000020A298                                         ; DATA XREF: .got:puts_ptr↑o
extern:000000000020A2A0 ; int fcntl(int fd, int cmd, ...)
extern:000000000020A2A0                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020A2A0                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020A2A8 ; __pid_t getpid(void)
extern:000000000020A2A8                 extrn getpid:near       ; CODE XREF: _getpid↑j
extern:000000000020A2A8                                         ; DATA XREF: .got:getpid_ptr↑o
extern:000000000020A2B0 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020A2B0                 extrn fread_unlocked:near
extern:000000000020A2B0                                         ; CODE XREF: _fread_unlocked↑j
extern:000000000020A2B0                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:000000000020A2B8 ; char *textdomain(const char *domainname)
extern:000000000020A2B8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A2B8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A2C0 ; int fclose(FILE *stream)
extern:000000000020A2C0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A2C8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A2C8                 extrn bindtextdomain:near
extern:000000000020A2C8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A2D0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A2D0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A2D8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A2D8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A2D8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A2E0 ; size_t strlen(const char *s)
extern:000000000020A2E0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A2E0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A2E8 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020A2E8                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020A2F0                 extrn __stack_chk_fail:near
extern:000000000020A2F0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A2F8 ; __uid_t getuid(void)
extern:000000000020A2F8                 extrn getuid:near       ; CODE XREF: _getuid↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:getuid_ptr↑o
extern:000000000020A300 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A300                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A300                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A308 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A308                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A308                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A310 ; char *strrchr(const char *s, int c)
extern:000000000020A310                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A310                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A318 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A318                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A318                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A320 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
extern:000000000020A320                 extrn gettimeofday:near ; CODE XREF: _gettimeofday↑j
extern:000000000020A320                                         ; DATA XREF: .got:gettimeofday_ptr↑o
extern:000000000020A328 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020A328                 extrn __assert_fail:near
extern:000000000020A328                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020A328                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020A330 ; void *memset(void *s, int c, size_t n)
extern:000000000020A330                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A330                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A338 ; int close(int fd)
extern:000000000020A338                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020A338                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020A340 ; size_t strspn(const char *s, const char *accept)
extern:000000000020A340                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000020A340                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000020A348 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A348                 extrn __libc_start_main:near
extern:000000000020A348                                         ; CODE XREF: start+24↑p
extern:000000000020A348                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A350 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A350                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A350                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A358 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A358                 extrn fputs_unlocked:near
extern:000000000020A358                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A358                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A360 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A360                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A360                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A368 ; int fputc_unlocked(int c, FILE *stream)
extern:000000000020A368                 extrn fputc_unlocked:near
extern:000000000020A368                                         ; CODE XREF: _fputc_unlocked↑j
extern:000000000020A368                                         ; DATA XREF: .got:fputc_unlocked_ptr↑o
extern:000000000020A370 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A370                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A370                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A378 ; int fileno(FILE *stream)
extern:000000000020A378                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A378                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A380 ; __gid_t getgid(void)
extern:000000000020A380                 extrn getgid:near       ; CODE XREF: _getgid↑j
extern:000000000020A380                                         ; DATA XREF: .got:getgid_ptr↑o
extern:000000000020A388 ; void *malloc(size_t size)
extern:000000000020A388                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020A388                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A390 ; int fflush(FILE *stream)
extern:000000000020A390                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A390                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A398 ; char *nl_langinfo(nl_item item)
extern:000000000020A398                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A398                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A3A0 ; int _freading(FILE *fp)
extern:000000000020A3A0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A3A8 ; void *realloc(void *ptr, size_t size)
extern:000000000020A3A8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A3B0 ; FILE *fdopen(int fd, const char *modes)
extern:000000000020A3B0                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000020A3B0                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000020A3B8 ; char *setlocale(int category, const char *locale)
extern:000000000020A3B8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A3B8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A3C0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A3C0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A3C8 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:000000000020A3C8                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:000000000020A3C8                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:000000000020A3D0 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000020A3D0                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000020A3D0                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000020A3D8 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A3D8                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A3D8                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A3E0                 extrn __explicit_bzero_chk:near
extern:000000000020A3E0                                         ; CODE XREF: ___explicit_bzero_chk↑j
extern:000000000020A3E0                                         ; DATA XREF: .got:__explicit_bzero_chk_ptr↑o
extern:000000000020A3E8 ; int open(const char *file, int oflag, ...)
extern:000000000020A3E8                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020A3E8                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020A3F0 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A3F0                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A3F0                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A3F8 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000020A3F8                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000020A3F8                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000020A400 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A400                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A400                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A408 ; __pid_t getppid(void)
extern:000000000020A408                 extrn getppid:near      ; CODE XREF: _getppid↑j
extern:000000000020A408                                         ; DATA XREF: .got:getppid_ptr↑o
extern:000000000020A410 ; void __noreturn exit(int status)
extern:000000000020A410                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A410                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A418 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A418                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A418                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A420                 extrn __fprintf_chk:near
extern:000000000020A420                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A420                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A428 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A428                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A428                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A430 ; int iswprint(wint_t wc)
extern:000000000020A430                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A430                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A438 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A438                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A438                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A438                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A440 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A440                 extrn __ctype_b_loc:near
extern:000000000020A440                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A440                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A448                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A448                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A450                 extrn __gmon_start__:near ; weak
extern:000000000020A450                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A450                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A458                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A458                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A458
extern:000000000020A458
extern:000000000020A458                 end start
