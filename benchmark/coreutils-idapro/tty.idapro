LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 28E85E1DAB1610581CAF1DCAD619A3DBEAEFBA337A6BE5B3C404D18EB50A473A
LOAD:0000000000000000 ; Input MD5    : F6FF56702B7C9481608A262D261683D2
LOAD:0000000000000000 ; Input CRC32  : E5BECC40
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/tty
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'tty.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 218A0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 5D78h                ; Size in file image
LOAD:00000000000000D8                 dq 5D78h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 510h                 ; Size in file image
LOAD:0000000000000110                 dq 6A8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 50B0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 50B0h                ; Physical address
LOAD:00000000000001B0                 dq 23Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 23Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B70h              ; Physical address
LOAD:0000000000000220                 dq 490h                 ; Size in file image
LOAD:0000000000000228                 dq 490h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 2Ch, 0BFh, 0D7h, 0F8h, 0F5h, 43h, 30h, 71h, 0C6h, 0D6h ; Desc
LOAD:0000000000000284                 db 1Bh, 36h, 0Ah, 8Fh, 81h, 44h, 6, 60h, 0B9h, 0F4h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 30h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 30h, 31h, 36h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aFree - offset byte_800, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F0                            0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_800, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_800, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aStrncmp - offset byte_800, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aItmDeregistert - offset byte_800, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aExit - offset byte_800, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000368                            0>
LOAD:0000000000000380                 Elf64_Sym <offset aFpending - offset byte_800, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aPuts - offset byte_800, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:0000000000000398                            0>
LOAD:00000000000003B0                 Elf64_Sym <offset aIsatty - offset byte_800, 12h, 0, 0, \ ; "isatty"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_800, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aFclose - offset byte_800, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aBindtextdomain - offset byte_800, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aDcgettext - offset byte_800, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_800, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aStrlen - offset byte_800, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aStackChkFail - offset byte_800, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aGetoptLong - offset byte_800, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aMbrtowc - offset byte_800, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aStrrchr - offset byte_800, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aLseek - offset byte_800, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004B8                            0>
LOAD:00000000000004D0                 Elf64_Sym <offset aMemset - offset byte_800, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aLibcStartMain - offset byte_800, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aMemcmp - offset byte_800, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aFputsUnlocked - offset byte_800, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aCalloc - offset byte_800, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aGmonStart - offset byte_800, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aMemcpy - offset byte_800, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aFileno - offset byte_800, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aMalloc - offset byte_800, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aFflush - offset byte_800, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aNlLanginfo - offset byte_800, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aFreading - offset byte_800, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aTtyname - offset byte_800, 12h, 0, 0, \ ; "ttyname"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aRealloc - offset byte_800, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aSetlocale - offset byte_800, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aPrintfChk - offset byte_800, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aError - offset byte_800, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000650                            0>
LOAD:0000000000000668                 Elf64_Sym <offset aFseeko - offset byte_800, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aCxaAtexit - offset byte_800, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aExit+1 - offset byte_800, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aFwrite - offset byte_800, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aFprintfChk - offset byte_800, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aItmRegistertmc - offset byte_800, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aMbsinit - offset byte_800, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aIswprint - offset byte_800, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aCxaFinalize - offset byte_800, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aCtypeBLoc - offset byte_800, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aStdout - offset byte_800, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000758                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000770                 Elf64_Sym <offset aProgname - offset byte_800, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000770                            offset __bss_start, 8>
LOAD:0000000000000788                 Elf64_Sym <offset aProgramInvocat - offset byte_800, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000788                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007A0                 Elf64_Sym <offset aPrognameFull - offset byte_800, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007A0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007B8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_800, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007B8                            offset __bss_start, 8>
LOAD:00000000000007D0                 Elf64_Sym <offset aStderr - offset byte_800, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007D0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007E8                 Elf64_Sym <offset aOptind - offset byte_800, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000007E8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000800 ; ELF String Table
LOAD:0000000000000800 byte_800        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000800                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000801 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B00↓o
LOAD:000000000000080B aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000812 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000638↑o
LOAD:000000000000081F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000829 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000831 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000338↑o
LOAD:0000000000000839 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000840 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:0000000000000848 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000852 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000858 aPuts           db 'puts',0             ; DATA XREF: LOAD:0000000000000398↑o
LOAD:000000000000085D aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000458↑o
LOAD:000000000000086E aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000877 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000608↑o
LOAD:000000000000087F aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000885 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000885                                         ; LOAD:0000000000000698↑o
LOAD:000000000000088B aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000088B                                         ; DATA XREF: LOAD:0000000000000788↑o
LOAD:00000000000008A3 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000008A3                                         ; DATA XREF: LOAD:0000000000000428↑o
LOAD:00000000000008BA aIsatty         db 'isatty',0           ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:00000000000008C1 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:00000000000008C8 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000440↑o
LOAD:00000000000008CF aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:00000000000008D6 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:00000000000008E7 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000500↑o
LOAD:00000000000008EE aTtyname        db 'ttyname',0          ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:00000000000008F6 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000904 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000758↑o
LOAD:000000000000090B aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000911 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000918 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:000000000000091F aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000926 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:000000000000092E aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:000000000000093A aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000948 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000953 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:000000000000095A aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000470↑o
LOAD:0000000000000966 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000578↑o
LOAD:000000000000096D aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000974 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000380↑o
LOAD:000000000000097F aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:000000000000097F                                         ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:000000000000099D aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000728↑o
LOAD:00000000000009AC aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:00000000000009AC                                         ; LOAD:00000000000003C8↑o
LOAD:00000000000009BB aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000009BB                                         ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:00000000000009CD aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000009D4 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000518↑o
LOAD:00000000000009E3 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000009E8 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000770↑o
LOAD:00000000000009F3 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000A03 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000680↑o
LOAD:0000000000000A10 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B10↓o
LOAD:0000000000000A1A aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B20↓o
LOAD:0000000000000A26 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B30↓o
LOAD:0000000000000A31 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B40↓o
LOAD:0000000000000A3B aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B50↓o
LOAD:0000000000000A47 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A47                                         ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000A63 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A72 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A72                                         ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A8C ; ELF GNU Symbol Version Table
LOAD:0000000000000A8C                 dw 0
LOAD:0000000000000A8E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A90                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A92                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A94                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000A96                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000A98                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000A9A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000A9C                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000AA2                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000AA4                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000AA6                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000AA8                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000AAA                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000AAC                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000AAE                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000AB0                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000AB2                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AC2                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AC4                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000ACA                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000ACC                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 2                    ; ttyname@@GLIBC_2.2.5
LOAD:0000000000000AD0                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000AD2                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000AD6                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000AE2                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000AE4                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000AE6                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000AE8                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000AEA                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000AEC                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000AEE                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000AF0                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000AF2                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000AF4                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000AF6                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000AF8                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000AFA                 dw 0
LOAD:0000000000000AFC                 dw 0
LOAD:0000000000000AFE                 dw 0
LOAD:0000000000000B00 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B00                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_800, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B10                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_800, \ ; "GLIBC_2.3"
LOAD:0000000000000B10                                10h>
LOAD:0000000000000B20                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_800, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B20                                10h>
LOAD:0000000000000B30                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_800, \ ; "GLIBC_2.14"
LOAD:0000000000000B30                                10h>
LOAD:0000000000000B40                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_800, \ ; "GLIBC_2.4"
LOAD:0000000000000B40                                10h>
LOAD:0000000000000B50                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_800, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B60 ; ELF RELA Relocation Table
LOAD:0000000000000B60                 Elf64_Rela <206B70h, 8, 1790h> ; R_X86_64_RELATIVE +1790h
LOAD:0000000000000B78                 Elf64_Rela <206B78h, 8, 1750h> ; R_X86_64_RELATIVE +1750h
LOAD:0000000000000B90                 Elf64_Rela <206B80h, 8, 4621h> ; R_X86_64_RELATIVE +4621h
LOAD:0000000000000BA8                 Elf64_Rela <206BA0h, 8, 4628h> ; R_X86_64_RELATIVE +4628h
LOAD:0000000000000BC0                 Elf64_Rela <206BC0h, 8, 462Eh> ; R_X86_64_RELATIVE +462Eh
LOAD:0000000000000BD8                 Elf64_Rela <206BE0h, 8, 4633h> ; R_X86_64_RELATIVE +4633h
LOAD:0000000000000BF0                 Elf64_Rela <206C20h, 8, 4871h> ; R_X86_64_RELATIVE +4871h
LOAD:0000000000000C08                 Elf64_Rela <206C28h, 8, 4879h> ; R_X86_64_RELATIVE +4879h
LOAD:0000000000000C20                 Elf64_Rela <206C30h, 8, 487Fh> ; R_X86_64_RELATIVE +487Fh
LOAD:0000000000000C38                 Elf64_Rela <206C38h, 8, 488Ch> ; R_X86_64_RELATIVE +488Ch
LOAD:0000000000000C50                 Elf64_Rela <206C40h, 8, 4899h> ; R_X86_64_RELATIVE +4899h
LOAD:0000000000000C68                 Elf64_Rela <206C48h, 8, 48ADh> ; R_X86_64_RELATIVE +48ADh
LOAD:0000000000000C80                 Elf64_Rela <206C50h, 8, 48AFh> ; R_X86_64_RELATIVE +48AFh
LOAD:0000000000000C98                 Elf64_Rela <206C58h, 8, 4892h> ; R_X86_64_RELATIVE +4892h
LOAD:0000000000000CB0                 Elf64_Rela <206C60h, 8, 45EFh> ; R_X86_64_RELATIVE +45EFh
LOAD:0000000000000CC8                 Elf64_Rela <206C68h, 8, 48B7h> ; R_X86_64_RELATIVE +48B7h
LOAD:0000000000000CE0                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000CF8                 Elf64_Rela <207010h, 8, 47FBh> ; R_X86_64_RELATIVE +47FBh
LOAD:0000000000000D10                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D28                 Elf64_Rela <207078h, 8, 2070E0h> ; R_X86_64_RELATIVE +2070E0h
LOAD:0000000000000D40                 Elf64_Rela <206FD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D58                 Elf64_Rela <206FD8h, 1600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D70                 Elf64_Rela <206FE0h, 1A00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D88                 Elf64_Rela <206FE8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DA0                 Elf64_Rela <206FF0h, 2E00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000DB8                 Elf64_Rela <207080h, 3100000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000DD0                 Elf64_Rela <207088h, 3000000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000DE8                 Elf64_Rela <207090h, 3600000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E00                 Elf64_Rela <207098h, 3300000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E18                 Elf64_Rela <2070A0h, 3500000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E30 ; ELF JMPREL Relocation Table
LOAD:0000000000000E30                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E48                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E60                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000E78                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000E90                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000EA8                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000EC0                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000000ED8                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:0000000000000EF0                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F08                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F20                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F38                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F50                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F68                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F80                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000F98                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000FB0                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000FC8                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000FE0                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000000FF8                 Elf64_Rela <206F18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001010                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001028                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001040                 Elf64_Rela <206F30h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001058                 Elf64_Rela <206F38h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001070                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001088                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000010A0                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000010B8                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000010D0                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000010E8                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT ttyname
LOAD:0000000000001100                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001118                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001130                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001148                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001160                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001178                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001190                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000011A8                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000011C0                 Elf64_Rela <206FB0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000011D8                 Elf64_Rela <206FB8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000011F0                 Elf64_Rela <206FC0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001208                 Elf64_Rela <206FC8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001208 LOAD            ends
LOAD:0000000000001208
.init:0000000000001220 ; ===========================================================================
.init:0000000000001220
.init:0000000000001220 ; Segment type: Pure code
.init:0000000000001220 ; Segment permissions: Read/Execute
.init:0000000000001220 _init           segment dword public 'CODE' use64
.init:0000000000001220                 assume cs:_init
.init:0000000000001220                 ;org 1220h
.init:0000000000001220                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001220
.init:0000000000001220 ; =============== S U B R O U T I N E =======================================
.init:0000000000001220
.init:0000000000001220
.init:0000000000001220                 public _init_proc
.init:0000000000001220 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001220                 sub     rsp, 8          ; _init
.init:0000000000001224                 mov     rax, cs:__gmon_start___ptr
.init:000000000000122B                 test    rax, rax
.init:000000000000122E                 jz      short loc_1232
.init:0000000000001230                 call    rax ; __gmon_start__
.init:0000000000001232
.init:0000000000001232 loc_1232:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001232                 add     rsp, 8
.init:0000000000001236                 retn
.init:0000000000001236 _init_proc      endp
.init:0000000000001236
.init:0000000000001236 _init           ends
.init:0000000000001236
LOAD:0000000000001237 ; ===========================================================================
LOAD:0000000000001237
LOAD:0000000000001237 ; Segment type: Pure code
LOAD:0000000000001237 ; Segment permissions: Read/Execute
LOAD:0000000000001237 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001237                 assume cs:LOAD
LOAD:0000000000001237                 ;org 1237h
LOAD:0000000000001237                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001237                 align 20h
LOAD:0000000000001237 LOAD            ends
LOAD:0000000000001237
.plt:0000000000001240 ; ===========================================================================
.plt:0000000000001240
.plt:0000000000001240 ; Segment type: Pure code
.plt:0000000000001240 ; Segment permissions: Read/Execute
.plt:0000000000001240 _plt            segment para public 'CODE' use64
.plt:0000000000001240                 assume cs:_plt
.plt:0000000000001240                 ;org 1240h
.plt:0000000000001240                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240
.plt:0000000000001240 sub_1240        proc near               ; CODE XREF: .plt:000000000000125B↓j
.plt:0000000000001240                                         ; .plt:000000000000126B↓j ...
.plt:0000000000001240 ; __unwind {
.plt:0000000000001240                 push    cs:qword_206E70
.plt:0000000000001246                 jmp     cs:qword_206E78
.plt:0000000000001246 sub_1240        endp
.plt:0000000000001246
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:000000000000124C                 align 10h
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: thunk
.plt:0000000000001250
.plt:0000000000001250 ; void free(void *ptr)
.plt:0000000000001250 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001250                                         ; quotearg_free+37↓p ...
.plt:0000000000001250                 jmp     cs:free_ptr
.plt:0000000000001250 _free           endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    0
.plt:000000000000125B                 jmp     sub_1240
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: noreturn thunk
.plt:0000000000001260
.plt:0000000000001260 ; void __noreturn abort(void)
.plt:0000000000001260 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001260                                         ; quotearg_buffer_restyled:def_1DE1↓p ...
.plt:0000000000001260                 jmp     cs:abort_ptr
.plt:0000000000001260 _abort          endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    1
.plt:000000000000126B                 jmp     sub_1240
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; int *__errno_location(void)
.plt:0000000000001270 ___errno_location proc near             ; CODE XREF: main+F7↓p
.plt:0000000000001270                                         ; close_stdout+16↓p ...
.plt:0000000000001270                 jmp     cs:__errno_location_ptr
.plt:0000000000001270 ___errno_location endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    2
.plt:000000000000127B                 jmp     sub_1240
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: thunk
.plt:0000000000001280
.plt:0000000000001280 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001280 _strncmp        proc near               ; CODE XREF: usage+204↓p
.plt:0000000000001280                                         ; usage+2C5↓p
.plt:0000000000001280                 jmp     cs:strncmp_ptr
.plt:0000000000001280 _strncmp        endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    3
.plt:000000000000128B                 jmp     sub_1240
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: noreturn thunk
.plt:0000000000001290
.plt:0000000000001290 ; void __noreturn _exit(int status)
.plt:0000000000001290 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001290                 jmp     cs:_exit_ptr
.plt:0000000000001290 __exit          endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    4
.plt:000000000000129B                 jmp     sub_1240
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; size_t __fpending(FILE *fp)
.plt:00000000000012A0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000012A0                 jmp     cs:__fpending_ptr
.plt:00000000000012A0 ___fpending     endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    5
.plt:00000000000012AB                 jmp     sub_1240
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; int puts(const char *s)
.plt:00000000000012B0 _puts           proc near               ; CODE XREF: main+11C↓p
.plt:00000000000012B0                 jmp     cs:puts_ptr
.plt:00000000000012B0 _puts           endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    6
.plt:00000000000012BB                 jmp     sub_1240
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; int isatty(int fd)
.plt:00000000000012C0 _isatty         proc near               ; CODE XREF: main+12A↓p
.plt:00000000000012C0                 jmp     cs:isatty_ptr
.plt:00000000000012C0 _isatty         endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    7
.plt:00000000000012CB                 jmp     sub_1240
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; char *textdomain(const char *domainname)
.plt:00000000000012D0 _textdomain     proc near               ; CODE XREF: main+43↓p
.plt:00000000000012D0                 jmp     cs:textdomain_ptr
.plt:00000000000012D0 _textdomain     endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    8
.plt:00000000000012DB                 jmp     sub_1240
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; int fclose(FILE *stream)
.plt:00000000000012E0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000012E0                                         ; rpl_fclose+6B↓j
.plt:00000000000012E0                 jmp     cs:fclose_ptr
.plt:00000000000012E0 _fclose         endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    9
.plt:00000000000012EB                 jmp     sub_1240
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000012F0 _bindtextdomain proc near               ; CODE XREF: main+37↓p
.plt:00000000000012F0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000012F0 _bindtextdomain endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    0Ah
.plt:00000000000012FB                 jmp     sub_1240
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001300 _dcgettext      proc near               ; CODE XREF: main+149↓p
.plt:0000000000001300                                         ; main+171↓p ...
.plt:0000000000001300                 jmp     cs:dcgettext_ptr
.plt:0000000000001300 _dcgettext      endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    0Bh
.plt:000000000000130B                 jmp     sub_1240
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001310 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001310                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001310 ___ctype_get_mb_cur_max endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    0Ch
.plt:000000000000131B                 jmp     sub_1240
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; size_t strlen(const char *s)
.plt:0000000000001320 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001320                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001320                 jmp     cs:strlen_ptr
.plt:0000000000001320 _strlen         endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    0Dh
.plt:000000000000132B                 jmp     sub_1240
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: noreturn thunk
.plt:0000000000001330
.plt:0000000000001330 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_2F43↓p
.plt:0000000000001330                                         ; quotearg_n_style:loc_3569↓p ...
.plt:0000000000001330                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001330 ___stack_chk_fail endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    0Eh
.plt:000000000000133B                 jmp     sub_1240
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001340 _getopt_long    proc near               ; CODE XREF: main+77↓p
.plt:0000000000001340                 jmp     cs:getopt_long_ptr
.plt:0000000000001340 _getopt_long    endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    0Fh
.plt:000000000000134B                 jmp     sub_1240
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001350 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001350                 jmp     cs:mbrtowc_ptr
.plt:0000000000001350 _mbrtowc        endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    10h
.plt:000000000000135B                 jmp     sub_1240
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; char *strrchr(const char *s, int c)
.plt:0000000000001360 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001360                 jmp     cs:strrchr_ptr
.plt:0000000000001360 _strrchr        endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    11h
.plt:000000000000136B                 jmp     sub_1240
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001370 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001370                                         ; rpl_fseeko+3B↓p
.plt:0000000000001370                 jmp     cs:lseek_ptr
.plt:0000000000001370 _lseek          endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    12h
.plt:000000000000137B                 jmp     sub_1240
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001380 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001380                                         ; xzalloc+12↓j
.plt:0000000000001380                 jmp     cs:memset_ptr
.plt:0000000000001380 _memset         endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    13h
.plt:000000000000138B                 jmp     sub_1240
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001390 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001390                 jmp     cs:memcmp_ptr
.plt:0000000000001390 _memcmp         endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    14h
.plt:000000000000139B                 jmp     sub_1240
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000013A0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000013A0                                         ; usage+C2↓p ...
.plt:00000000000013A0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000013A0 _fputs_unlocked endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    15h
.plt:00000000000013AB                 jmp     sub_1240
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000013B0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000013B0                 jmp     cs:calloc_ptr
.plt:00000000000013B0 _calloc         endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    16h
.plt:00000000000013BB                 jmp     sub_1240
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000013C0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000013C0                 jmp     cs:memcpy_ptr
.plt:00000000000013C0 _memcpy         endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    17h
.plt:00000000000013CB                 jmp     sub_1240
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; int fileno(FILE *stream)
.plt:00000000000013D0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000013D0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000013D0                 jmp     cs:fileno_ptr
.plt:00000000000013D0 _fileno         endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    18h
.plt:00000000000013DB                 jmp     sub_1240
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; void *malloc(size_t size)
.plt:00000000000013E0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000013E0                 jmp     cs:malloc_ptr
.plt:00000000000013E0 _malloc         endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    19h
.plt:00000000000013EB                 jmp     sub_1240
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int fflush(FILE *stream)
.plt:00000000000013F0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000013F0                                         ; rpl_fflush+3B↓j
.plt:00000000000013F0                 jmp     cs:fflush_ptr
.plt:00000000000013F0 _fflush         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    1Ah
.plt:00000000000013FB                 jmp     sub_1240
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; char *nl_langinfo(nl_item item)
.plt:0000000000001400 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001400                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001400 _nl_langinfo    endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    1Bh
.plt:000000000000140B                 jmp     sub_1240
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int __freading(FILE *fp)
.plt:0000000000001410 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001410                                         ; rpl_fflush+9↓p
.plt:0000000000001410                 jmp     cs:__freading_ptr
.plt:0000000000001410 ___freading     endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    1Ch
.plt:000000000000141B                 jmp     sub_1240
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; char *ttyname(int fd)
.plt:0000000000001420 _ttyname        proc near               ; CODE XREF: main+10D↓p
.plt:0000000000001420                 jmp     cs:ttyname_ptr
.plt:0000000000001420 _ttyname        endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    1Dh
.plt:000000000000142B                 jmp     sub_1240
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001430 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001430                 jmp     cs:realloc_ptr
.plt:0000000000001430 _realloc        endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    1Eh
.plt:000000000000143B                 jmp     sub_1240
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; char *setlocale(int category, const char *locale)
.plt:0000000000001440 _setlocale      proc near               ; CODE XREF: main+24↓p
.plt:0000000000001440                                         ; usage+1EB↓p ...
.plt:0000000000001440                 jmp     cs:setlocale_ptr
.plt:0000000000001440 _setlocale      endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    1Fh
.plt:000000000000144B                 jmp     sub_1240
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001450                                         ; usage+1DF↓p ...
.plt:0000000000001450                 jmp     cs:__printf_chk_ptr
.plt:0000000000001450 ___printf_chk   endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    20h ; ' '
.plt:000000000000145B                 jmp     sub_1240
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001460 _error          proc near               ; CODE XREF: main+182↓p
.plt:0000000000001460                                         ; close_stdout+7D↓p ...
.plt:0000000000001460                 jmp     cs:error_ptr
.plt:0000000000001460 _error          endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    21h ; '!'
.plt:000000000000146B                 jmp     sub_1240
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001470 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_441A↓j
.plt:0000000000001470                 jmp     cs:fseeko_ptr
.plt:0000000000001470 _fseeko         endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    22h ; '"'
.plt:000000000000147B                 jmp     sub_1240
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001480 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001480                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001480 ___cxa_atexit   endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    23h ; '#'
.plt:000000000000148B                 jmp     sub_1240
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: noreturn thunk
.plt:0000000000001490
.plt:0000000000001490 ; void __noreturn exit(int status)
.plt:0000000000001490 _exit           proc near               ; CODE XREF: main+D7↓p
.plt:0000000000001490                                         ; usage+58↓p
.plt:0000000000001490                 jmp     cs:exit_ptr
.plt:0000000000001490 _exit           endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    24h ; '$'
.plt:000000000000149B                 jmp     sub_1240
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000014A0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000014A0                 jmp     cs:fwrite_ptr
.plt:00000000000014A0 _fwrite         endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    25h ; '%'
.plt:00000000000014AB                 jmp     sub_1240
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000014B0                                         ; version_etc_arn+37↓p ...
.plt:00000000000014B0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000014B0 ___fprintf_chk  endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    26h ; '&'
.plt:00000000000014BB                 jmp     sub_1240
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000014C0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000014C0                 jmp     cs:mbsinit_ptr
.plt:00000000000014C0 _mbsinit        endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    27h ; '''
.plt:00000000000014CB                 jmp     sub_1240
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int iswprint(wint_t wc)
.plt:00000000000014D0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000014D0                 jmp     cs:iswprint_ptr
.plt:00000000000014D0 _iswprint       endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    28h ; '('
.plt:00000000000014DB                 jmp     sub_1240
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000014E0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000014E0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000014E0 ___ctype_b_loc  endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    29h ; ')'
.plt:00000000000014EB                 jmp     sub_1240
.plt:00000000000014EB ; } // starts at 1240
.plt:00000000000014EB _plt            ends
.plt:00000000000014EB
.plt.got:00000000000014F0 ; ===========================================================================
.plt.got:00000000000014F0
.plt.got:00000000000014F0 ; Segment type: Pure code
.plt.got:00000000000014F0 ; Segment permissions: Read/Execute
.plt.got:00000000000014F0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000014F0                 assume cs:_plt_got
.plt.got:00000000000014F0                 ;org 14F0h
.plt.got:00000000000014F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000014F0
.plt.got:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000014F0
.plt.got:00000000000014F0 ; Attributes: thunk
.plt.got:00000000000014F0
.plt.got:00000000000014F0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000014F0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000014F0 ; __unwind {
.plt.got:00000000000014F0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000014F0 __cxa_finalize  endp
.plt.got:00000000000014F0
.plt.got:00000000000014F0 ; ---------------------------------------------------------------------------
.plt.got:00000000000014F6                 align 8
.plt.got:00000000000014F6 ; } // starts at 14F0
.plt.got:00000000000014F6 _plt_got        ends
.plt.got:00000000000014F6
LOAD:00000000000014F8 ; ===========================================================================
LOAD:00000000000014F8
LOAD:00000000000014F8 ; Segment type: Pure code
LOAD:00000000000014F8 ; Segment permissions: Read/Execute
LOAD:00000000000014F8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000014F8                 assume cs:LOAD
LOAD:00000000000014F8                 ;org 14F8h
LOAD:00000000000014F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000014F8                 align 20h
LOAD:00000000000014F8 LOAD            ends
LOAD:00000000000014F8
.text:0000000000001500 ; ===========================================================================
.text:0000000000001500
.text:0000000000001500 ; Segment type: Pure code
.text:0000000000001500 ; Segment permissions: Read/Execute
.text:0000000000001500 _text           segment para public 'CODE' use64
.text:0000000000001500                 assume cs:_text
.text:0000000000001500                 ;org 1500h
.text:0000000000001500                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001500
.text:0000000000001500 ; =============== S U B R O U T I N E =======================================
.text:0000000000001500
.text:0000000000001500
.text:0000000000001500 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001500                 public main
.text:0000000000001500 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001500 ; __unwind {
.text:0000000000001500                 push    r12
.text:0000000000001502                 push    rbp
.text:0000000000001503                 mov     ebp, edi
.text:0000000000001505                 push    rbx
.text:0000000000001506                 mov     rdi, [rsi]
.text:0000000000001509                 mov     rbx, rsi
.text:000000000000150C                 lea     r12, longopts
.text:0000000000001513                 call    set_program_name
.text:0000000000001518                 lea     rsi, aUsageSOption+16h ; locale
.text:000000000000151F                 mov     edi, 6          ; category
.text:0000000000001524                 call    _setlocale
.text:0000000000001529                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001530                 lea     rdi, domainname ; "coreutils"
.text:0000000000001537                 call    _bindtextdomain
.text:000000000000153C                 lea     rdi, domainname ; "coreutils"
.text:0000000000001543                 call    _textdomain
.text:0000000000001548                 lea     rdi, close_stdout
.text:000000000000154F                 mov     cs:exit_failure, 3
.text:0000000000001559                 call    atexit
.text:000000000000155E                 mov     cs:silent, 0
.text:0000000000001565
.text:0000000000001565 loc_1565:                               ; CODE XREF: main+E7↓j
.text:0000000000001565                 lea     rdx, format+5   ; shortopts
.text:000000000000156C                 xor     r8d, r8d        ; longind
.text:000000000000156F                 mov     rcx, r12        ; longopts
.text:0000000000001572                 mov     rsi, rbx        ; argv
.text:0000000000001575                 mov     edi, ebp        ; argc
.text:0000000000001577                 call    _getopt_long
.text:000000000000157C                 cmp     eax, 0FFFFFFFFh
.text:000000000000157F                 jz      short loc_15EC
.text:0000000000001581                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001586                 jz      loc_1650
.text:000000000000158C                 cmp     eax, 73h ; 's'
.text:000000000000158F                 jz      short loc_15E0
.text:0000000000001591                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001596                 jz      short loc_15A8
.text:0000000000001598
.text:0000000000001598 loc_1598:                               ; CODE XREF: main+187↓j
.text:0000000000001598                 mov     edi, 2          ; status
.text:000000000000159D                 call    usage
.text:000000000000159D ; ---------------------------------------------------------------------------
.text:00000000000015A2                 align 8
.text:00000000000015A8
.text:00000000000015A8 loc_15A8:                               ; CODE XREF: main+96↑j
.text:00000000000015A8                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000015AF                 mov     rcx, cs:Version
.text:00000000000015B6                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:00000000000015BD                 lea     rdx, unk_45B1
.text:00000000000015C4                 lea     rsi, msgid+6    ; "tty"
.text:00000000000015CB                 xor     r9d, r9d
.text:00000000000015CE                 xor     eax, eax
.text:00000000000015D0                 call    version_etc
.text:00000000000015D5                 xor     edi, edi        ; status
.text:00000000000015D7                 call    _exit
.text:00000000000015D7 ; ---------------------------------------------------------------------------
.text:00000000000015DC                 align 20h
.text:00000000000015E0
.text:00000000000015E0 loc_15E0:                               ; CODE XREF: main+8F↑j
.text:00000000000015E0                 mov     cs:silent, 1
.text:00000000000015E7                 jmp     loc_1565
.text:00000000000015EC ; ---------------------------------------------------------------------------
.text:00000000000015EC
.text:00000000000015EC loc_15EC:                               ; CODE XREF: main+7F↑j
.text:00000000000015EC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000015F3                 cmp     eax, ebp
.text:00000000000015F5                 jl      short loc_1657
.text:00000000000015F7                 call    ___errno_location
.text:00000000000015FC                 xor     edi, edi        ; fd
.text:00000000000015FE                 cmp     cs:silent, 0
.text:0000000000001605                 mov     dword ptr [rax], 2
.text:000000000000160B                 jnz     short loc_1628
.text:000000000000160D                 call    _ttyname
.text:0000000000001612                 xor     ebx, ebx
.text:0000000000001614                 test    rax, rax
.text:0000000000001617                 jz      short loc_1636
.text:0000000000001619
.text:0000000000001619 loc_1619:                               ; CODE XREF: main+14E↓j
.text:0000000000001619                 mov     rdi, rax        ; s
.text:000000000000161C                 call    _puts
.text:0000000000001621
.text:0000000000001621 loc_1621:                               ; CODE XREF: main+134↓j
.text:0000000000001621                 mov     eax, ebx
.text:0000000000001623                 pop     rbx
.text:0000000000001624                 pop     rbp
.text:0000000000001625                 pop     r12
.text:0000000000001627                 retn
.text:0000000000001628 ; ---------------------------------------------------------------------------
.text:0000000000001628
.text:0000000000001628 loc_1628:                               ; CODE XREF: main+10B↑j
.text:0000000000001628                 xor     ebx, ebx
.text:000000000000162A                 call    _isatty
.text:000000000000162F                 test    eax, eax
.text:0000000000001631                 setz    bl
.text:0000000000001634                 jmp     short loc_1621
.text:0000000000001636 ; ---------------------------------------------------------------------------
.text:0000000000001636
.text:0000000000001636 loc_1636:                               ; CODE XREF: main+117↑j
.text:0000000000001636                 lea     rsi, msgid      ; "not a tty"
.text:000000000000163D                 mov     edx, 5          ; category
.text:0000000000001642                 xor     edi, edi        ; domainname
.text:0000000000001644                 mov     ebx, 1
.text:0000000000001649                 call    _dcgettext
.text:000000000000164E                 jmp     short loc_1619
.text:0000000000001650 ; ---------------------------------------------------------------------------
.text:0000000000001650
.text:0000000000001650 loc_1650:                               ; CODE XREF: main+86↑j
.text:0000000000001650                 xor     edi, edi        ; status
.text:0000000000001652                 call    usage
.text:0000000000001657 ; ---------------------------------------------------------------------------
.text:0000000000001657
.text:0000000000001657 loc_1657:                               ; CODE XREF: main+F5↑j
.text:0000000000001657                 mov     rdi, [rbx+rax*8]
.text:000000000000165B                 call    quote
.text:0000000000001660                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000001667                 mov     rbx, rax
.text:000000000000166A                 xor     edi, edi        ; domainname
.text:000000000000166C                 mov     edx, 5          ; category
.text:0000000000001671                 call    _dcgettext
.text:0000000000001676                 mov     rcx, rbx
.text:0000000000001679                 mov     rdx, rax        ; format
.text:000000000000167C                 xor     esi, esi        ; errnum
.text:000000000000167E                 xor     edi, edi        ; status
.text:0000000000001680                 xor     eax, eax
.text:0000000000001682                 call    _error
.text:0000000000001687                 jmp     loc_1598
.text:0000000000001687 ; } // starts at 1500
.text:0000000000001687 main            endp
.text:0000000000001687
.text:0000000000001687 ; ---------------------------------------------------------------------------
.text:000000000000168C                 align 10h
.text:0000000000001690
.text:0000000000001690 ; =============== S U B R O U T I N E =======================================
.text:0000000000001690
.text:0000000000001690 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001690
.text:0000000000001690 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001690                 public start
.text:0000000000001690 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001690 ; __unwind {
.text:0000000000001690                 xor     ebp, ebp
.text:0000000000001692                 mov     r9, rdx         ; rtld_fini
.text:0000000000001695                 pop     rsi             ; argc
.text:0000000000001696                 mov     rdx, rsp        ; ubp_av
.text:0000000000001699                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000169D                 push    rax
.text:000000000000169E                 push    rsp             ; stack_end
.text:000000000000169F                 lea     r8, __libc_csu_fini ; fini
.text:00000000000016A6                 lea     rcx, __libc_csu_init ; init
.text:00000000000016AD                 lea     rdi, main       ; main
.text:00000000000016B4                 call    cs:__libc_start_main_ptr
.text:00000000000016BA                 hlt
.text:00000000000016BA ; } // starts at 1690
.text:00000000000016BA start           endp
.text:00000000000016BA
.text:00000000000016BA ; ---------------------------------------------------------------------------
.text:00000000000016BB                 align 20h
.text:00000000000016C0
.text:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016C0
.text:00000000000016C0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000016C0
.text:00000000000016C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1773↓p
.text:00000000000016C0                 lea     rdi, __bss_start
.text:00000000000016C7                 push    rbp
.text:00000000000016C8                 lea     rax, __bss_start
.text:00000000000016CF                 cmp     rax, rdi
.text:00000000000016D2                 mov     rbp, rsp
.text:00000000000016D5                 jz      short loc_16F0
.text:00000000000016D7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000016DE                 test    rax, rax
.text:00000000000016E1                 jz      short loc_16F0
.text:00000000000016E3                 pop     rbp
.text:00000000000016E4                 jmp     rax
.text:00000000000016E4 ; ---------------------------------------------------------------------------
.text:00000000000016E6                 align 10h
.text:00000000000016F0
.text:00000000000016F0 loc_16F0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000016F0                                         ; deregister_tm_clones+21↑j
.text:00000000000016F0                 pop     rbp
.text:00000000000016F1                 retn
.text:00000000000016F1 deregister_tm_clones endp
.text:00000000000016F1
.text:00000000000016F1 ; ---------------------------------------------------------------------------
.text:00000000000016F2                 align 20h
.text:0000000000001700
.text:0000000000001700 ; =============== S U B R O U T I N E =======================================
.text:0000000000001700
.text:0000000000001700 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001700
.text:0000000000001700 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001700                 lea     rdi, __bss_start
.text:0000000000001707                 lea     rsi, __bss_start
.text:000000000000170E                 push    rbp
.text:000000000000170F                 sub     rsi, rdi
.text:0000000000001712                 mov     rbp, rsp
.text:0000000000001715                 sar     rsi, 3
.text:0000000000001719                 mov     rax, rsi
.text:000000000000171C                 shr     rax, 3Fh
.text:0000000000001720                 add     rsi, rax
.text:0000000000001723                 sar     rsi, 1
.text:0000000000001726                 jz      short loc_1740
.text:0000000000001728                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000172F                 test    rax, rax
.text:0000000000001732                 jz      short loc_1740
.text:0000000000001734                 pop     rbp
.text:0000000000001735                 jmp     rax
.text:0000000000001735 ; ---------------------------------------------------------------------------
.text:0000000000001737                 align 20h
.text:0000000000001740
.text:0000000000001740 loc_1740:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001740                                         ; register_tm_clones+32↑j
.text:0000000000001740                 pop     rbp
.text:0000000000001741                 retn
.text:0000000000001741 register_tm_clones endp
.text:0000000000001741
.text:0000000000001741 ; ---------------------------------------------------------------------------
.text:0000000000001742                 align 10h
.text:0000000000001750
.text:0000000000001750 ; =============== S U B R O U T I N E =======================================
.text:0000000000001750
.text:0000000000001750 ; Attributes: info_from_lumina
.text:0000000000001750
.text:0000000000001750 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001750                 cmp     cs:completed_7697, 0
.text:0000000000001757                 jnz     short locret_1788
.text:0000000000001759                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001761                 push    rbp
.text:0000000000001762                 mov     rbp, rsp
.text:0000000000001765                 jz      short loc_1773
.text:0000000000001767                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000176E                 call    __cxa_finalize
.text:0000000000001773
.text:0000000000001773 loc_1773:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001773                 call    deregister_tm_clones
.text:0000000000001778                 mov     cs:completed_7697, 1
.text:000000000000177F                 pop     rbp
.text:0000000000001780                 retn
.text:0000000000001780 ; ---------------------------------------------------------------------------
.text:0000000000001781                 align 8
.text:0000000000001788
.text:0000000000001788 locret_1788:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001788                 rep retn
.text:0000000000001788 __do_global_dtors_aux endp
.text:0000000000001788
.text:0000000000001788 ; ---------------------------------------------------------------------------
.text:000000000000178A                 align 10h
.text:0000000000001790
.text:0000000000001790 ; =============== S U B R O U T I N E =======================================
.text:0000000000001790
.text:0000000000001790 ; Attributes: bp-based frame
.text:0000000000001790
.text:0000000000001790 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001790                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001790                 push    rbp
.text:0000000000001791                 mov     rbp, rsp
.text:0000000000001794                 pop     rbp
.text:0000000000001795                 jmp     register_tm_clones
.text:0000000000001795 frame_dummy     endp
.text:0000000000001795
.text:0000000000001795 ; ---------------------------------------------------------------------------
.text:000000000000179A                 align 20h
.text:00000000000017A0
.text:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017A0
.text:00000000000017A0 ; Attributes: noreturn
.text:00000000000017A0
.text:00000000000017A0 ; void __fastcall __noreturn usage(int status)
.text:00000000000017A0                 public usage
.text:00000000000017A0 usage           proc near               ; CODE XREF: main+9D↑p
.text:00000000000017A0                                         ; main+152↑p
.text:00000000000017A0
.text:00000000000017A0 var_A8          = qword ptr -0A8h
.text:00000000000017A0 var_A0          = qword ptr -0A0h
.text:00000000000017A0 var_98          = qword ptr -98h
.text:00000000000017A0 var_90          = qword ptr -90h
.text:00000000000017A0 var_88          = qword ptr -88h
.text:00000000000017A0 var_80          = qword ptr -80h
.text:00000000000017A0 var_78          = qword ptr -78h
.text:00000000000017A0 var_70          = qword ptr -70h
.text:00000000000017A0 var_68          = qword ptr -68h
.text:00000000000017A0 var_60          = qword ptr -60h
.text:00000000000017A0 var_58          = qword ptr -58h
.text:00000000000017A0 var_50          = qword ptr -50h
.text:00000000000017A0 var_48          = qword ptr -48h
.text:00000000000017A0 var_40          = qword ptr -40h
.text:00000000000017A0 var_30          = qword ptr -30h
.text:00000000000017A0
.text:00000000000017A0 ; __unwind {
.text:00000000000017A0                 push    r13
.text:00000000000017A2                 push    r12
.text:00000000000017A4                 mov     edx, 5          ; category
.text:00000000000017A9                 push    rbp
.text:00000000000017AA                 push    rbx
.text:00000000000017AB                 mov     ebp, edi
.text:00000000000017AD                 sub     rsp, 88h
.text:00000000000017B4                 mov     rbx, cs:program_name
.text:00000000000017BB                 mov     rax, fs:28h
.text:00000000000017C4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000017C9                 xor     eax, eax
.text:00000000000017CB                 test    edi, edi
.text:00000000000017CD                 jz      short loc_17FD
.text:00000000000017CF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000017D6                 xor     edi, edi        ; domainname
.text:00000000000017D8                 call    _dcgettext
.text:00000000000017DD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000017E4                 mov     rdx, rax
.text:00000000000017E7                 mov     rcx, rbx
.text:00000000000017EA                 mov     esi, 1
.text:00000000000017EF                 xor     eax, eax
.text:00000000000017F1                 call    ___fprintf_chk
.text:00000000000017F6
.text:00000000000017F6 loc_17F6:                               ; CODE XREF: usage+27E↓j
.text:00000000000017F6                 mov     edi, ebp        ; status
.text:00000000000017F8                 call    _exit
.text:00000000000017FD ; ---------------------------------------------------------------------------
.text:00000000000017FD
.text:00000000000017FD loc_17FD:                               ; CODE XREF: usage+2D↑j
.text:00000000000017FD                 lea     rsi, aUsageSOption ; "Usage: %s [OPTION]...\n"
.text:0000000000001804                 xor     edi, edi        ; domainname
.text:0000000000001806                 call    _dcgettext
.text:000000000000180B                 mov     rdx, rbx
.text:000000000000180E                 mov     rsi, rax
.text:0000000000001811                 mov     edi, 1
.text:0000000000001816                 xor     eax, eax
.text:0000000000001818                 call    ___printf_chk
.text:000000000000181D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001824                 lea     rsi, aPrintTheFileNa ; "Print the file name of the terminal con"...
.text:000000000000182B                 mov     edx, 5          ; category
.text:0000000000001830                 xor     edi, edi        ; domainname
.text:0000000000001832                 call    _dcgettext
.text:0000000000001837                 mov     rsi, rbx        ; stream
.text:000000000000183A                 mov     rdi, rax        ; s
.text:000000000000183D                 call    _fputs_unlocked
.text:0000000000001842                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001849                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001850                 mov     edx, 5          ; category
.text:0000000000001855                 xor     edi, edi        ; domainname
.text:0000000000001857                 call    _dcgettext
.text:000000000000185C                 mov     rsi, rbx        ; stream
.text:000000000000185F                 mov     rdi, rax        ; s
.text:0000000000001862                 call    _fputs_unlocked
.text:0000000000001867                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000186E                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001875                 mov     edx, 5          ; category
.text:000000000000187A                 xor     edi, edi        ; domainname
.text:000000000000187C                 call    _dcgettext
.text:0000000000001881                 mov     rsi, rbx        ; stream
.text:0000000000001884                 mov     rdi, rax        ; s
.text:0000000000001887                 lea     rbx, msgid+6    ; "tty"
.text:000000000000188E                 call    _fputs_unlocked
.text:0000000000001893                 lea     rax, asc_453B   ; "["
.text:000000000000189A                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000018A1                 mov     [rsp+0A8h+var_48], 0
.text:00000000000018AA                 mov     [rsp+0A8h+var_40], 0
.text:00000000000018B3                 mov     rdx, rsp
.text:00000000000018B6                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000018BA                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000018C1                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000018C6                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000018CD                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000018D2                 lea     rax, domainname ; "coreutils"
.text:00000000000018D9                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000018DE                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000018E5                 mov     [rsp+0A8h+var_98], rax
.text:00000000000018EA                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000018F1                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000018F6                 mov     [rsp+0A8h+var_90], rax
.text:00000000000018FB                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001902                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001907                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000190E                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001913                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001918                 mov     [rsp+0A8h+var_60], rax
.text:000000000000191D                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001922                 nop     word ptr [rax+rax+00h]
.text:0000000000001928
.text:0000000000001928 loc_1928:                               ; CODE XREF: usage+1A5↓j
.text:0000000000001928                 add     rdx, 10h
.text:000000000000192C                 mov     rdi, [rdx]
.text:000000000000192F                 test    rdi, rdi
.text:0000000000001932                 jz      short loc_1947
.text:0000000000001934                 mov     ecx, 4
.text:0000000000001939                 mov     rsi, rbx
.text:000000000000193C                 repe cmpsb
.text:000000000000193E                 setnbe  al
.text:0000000000001941                 sbb     al, 0
.text:0000000000001943                 test    al, al
.text:0000000000001945                 jnz     short loc_1928
.text:0000000000001947
.text:0000000000001947 loc_1947:                               ; CODE XREF: usage+192↑j
.text:0000000000001947                 mov     r12, [rdx+8]
.text:000000000000194B                 xor     edi, edi        ; domainname
.text:000000000000194D                 mov     edx, 5          ; category
.text:0000000000001952                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001959                 test    r12, r12
.text:000000000000195C                 jz      loc_1A23
.text:0000000000001962                 call    _dcgettext
.text:0000000000001967                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000196E                 lea     rdx, unk_45B1
.text:0000000000001975                 mov     rsi, rax
.text:0000000000001978                 mov     edi, 1
.text:000000000000197D                 xor     eax, eax
.text:000000000000197F                 call    ___printf_chk
.text:0000000000001984                 xor     esi, esi        ; locale
.text:0000000000001986                 mov     edi, 5          ; category
.text:000000000000198B                 call    _setlocale
.text:0000000000001990                 test    rax, rax
.text:0000000000001993                 jz      short loc_19B1
.text:0000000000001995                 lea     rsi, s2         ; "en_"
.text:000000000000199C                 mov     edx, 3          ; n
.text:00000000000019A1                 mov     rdi, rax        ; s1
.text:00000000000019A4                 call    _strncmp
.text:00000000000019A9                 test    eax, eax
.text:00000000000019AB                 jnz     loc_1AB8
.text:00000000000019B1
.text:00000000000019B1 loc_19B1:                               ; CODE XREF: usage+1F3↑j
.text:00000000000019B1                                         ; usage+33D↓j
.text:00000000000019B1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000019B8                 xor     edi, edi        ; domainname
.text:00000000000019BA                 mov     edx, 5          ; category
.text:00000000000019BF                 call    _dcgettext
.text:00000000000019C4                 lea     rcx, msgid+6    ; "tty"
.text:00000000000019CB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000019D2                 mov     rsi, rax
.text:00000000000019D5                 mov     edi, 1
.text:00000000000019DA                 xor     eax, eax
.text:00000000000019DC                 call    ___printf_chk
.text:00000000000019E1                 cmp     r12, rbx
.text:00000000000019E4                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000019EB                 lea     rbx, aUsageSOption+16h ; ""
.text:00000000000019F2                 cmovz   rbx, rcx
.text:00000000000019F6
.text:00000000000019F6 loc_19F6:                               ; CODE XREF: usage+30C↓j
.text:00000000000019F6                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000019FD                 xor     edi, edi        ; domainname
.text:00000000000019FF                 mov     edx, 5          ; category
.text:0000000000001A04                 call    _dcgettext
.text:0000000000001A09                 mov     rcx, rbx
.text:0000000000001A0C                 mov     rsi, rax
.text:0000000000001A0F                 mov     rdx, r12
.text:0000000000001A12                 mov     edi, 1
.text:0000000000001A17                 xor     eax, eax
.text:0000000000001A19                 call    ___printf_chk
.text:0000000000001A1E                 jmp     loc_17F6
.text:0000000000001A23 ; ---------------------------------------------------------------------------
.text:0000000000001A23
.text:0000000000001A23 loc_1A23:                               ; CODE XREF: usage+1BC↑j
.text:0000000000001A23                 call    _dcgettext
.text:0000000000001A28                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001A2F                 lea     rdx, unk_45B1
.text:0000000000001A36                 mov     rsi, rax
.text:0000000000001A39                 mov     edi, 1
.text:0000000000001A3E                 xor     eax, eax
.text:0000000000001A40                 call    ___printf_chk
.text:0000000000001A45                 xor     esi, esi        ; locale
.text:0000000000001A47                 mov     edi, 5          ; category
.text:0000000000001A4C                 call    _setlocale
.text:0000000000001A51                 test    rax, rax
.text:0000000000001A54                 jz      short loc_1A6E
.text:0000000000001A56                 lea     rsi, s2         ; "en_"
.text:0000000000001A5D                 mov     edx, 3          ; n
.text:0000000000001A62                 mov     rdi, rax        ; s1
.text:0000000000001A65                 call    _strncmp
.text:0000000000001A6A                 test    eax, eax
.text:0000000000001A6C                 jnz     short loc_1AB1
.text:0000000000001A6E
.text:0000000000001A6E loc_1A6E:                               ; CODE XREF: usage+2B4↑j
.text:0000000000001A6E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001A75                 mov     edx, 5          ; category
.text:0000000000001A7A                 xor     edi, edi        ; domainname
.text:0000000000001A7C                 lea     r12, msgid+6    ; "tty"
.text:0000000000001A83                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001A8A                 call    _dcgettext
.text:0000000000001A8F                 lea     rcx, msgid+6    ; "tty"
.text:0000000000001A96                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001A9D                 mov     rsi, rax
.text:0000000000001AA0                 mov     edi, 1
.text:0000000000001AA5                 xor     eax, eax
.text:0000000000001AA7                 call    ___printf_chk
.text:0000000000001AAC                 jmp     loc_19F6
.text:0000000000001AB1 ; ---------------------------------------------------------------------------
.text:0000000000001AB1
.text:0000000000001AB1 loc_1AB1:                               ; CODE XREF: usage+2CC↑j
.text:0000000000001AB1                 lea     r12, msgid+6    ; "tty"
.text:0000000000001AB8
.text:0000000000001AB8 loc_1AB8:                               ; CODE XREF: usage+20B↑j
.text:0000000000001AB8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001ABF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001AC6                 xor     edi, edi        ; domainname
.text:0000000000001AC8                 mov     edx, 5          ; category
.text:0000000000001ACD                 call    _dcgettext
.text:0000000000001AD2                 mov     rsi, r13        ; stream
.text:0000000000001AD5                 mov     rdi, rax        ; s
.text:0000000000001AD8                 call    _fputs_unlocked
.text:0000000000001ADD                 jmp     loc_19B1
.text:0000000000001ADD ; } // starts at 17A0
.text:0000000000001ADD usage           endp
.text:0000000000001ADD
.text:0000000000001ADD ; ---------------------------------------------------------------------------
.text:0000000000001AE2                 align 10h
.text:0000000000001AF0
.text:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AF0
.text:0000000000001AF0
.text:0000000000001AF0                 public close_stdout_set_file_name
.text:0000000000001AF0 close_stdout_set_file_name proc near
.text:0000000000001AF0 ; __unwind {
.text:0000000000001AF0                 mov     cs:file_name, rdi
.text:0000000000001AF7                 retn
.text:0000000000001AF7 ; } // starts at 1AF0
.text:0000000000001AF7 close_stdout_set_file_name endp
.text:0000000000001AF7
.text:0000000000001AF7 ; ---------------------------------------------------------------------------
.text:0000000000001AF8                 align 20h
.text:0000000000001B00
.text:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B00
.text:0000000000001B00
.text:0000000000001B00                 public close_stdout_set_ignore_EPIPE
.text:0000000000001B00 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001B00 ; __unwind {
.text:0000000000001B00                 mov     cs:ignore_EPIPE, dil
.text:0000000000001B07                 retn
.text:0000000000001B07 ; } // starts at 1B00
.text:0000000000001B07 close_stdout_set_ignore_EPIPE endp
.text:0000000000001B07
.text:0000000000001B07 ; ---------------------------------------------------------------------------
.text:0000000000001B08                 align 10h
.text:0000000000001B10
.text:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B10
.text:0000000000001B10 ; Attributes: info_from_lumina
.text:0000000000001B10
.text:0000000000001B10 ; void __cdecl close_stdout()
.text:0000000000001B10                 public close_stdout
.text:0000000000001B10 close_stdout    proc near               ; DATA XREF: main+48↑o
.text:0000000000001B10 ; __unwind {
.text:0000000000001B10                 push    rbp
.text:0000000000001B11                 push    rbx
.text:0000000000001B12                 sub     rsp, 8
.text:0000000000001B16                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001B1D                 call    close_stream
.text:0000000000001B22                 test    eax, eax
.text:0000000000001B24                 jz      short loc_1B3C
.text:0000000000001B26                 call    ___errno_location
.text:0000000000001B2B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001B32                 mov     rbx, rax
.text:0000000000001B35                 jz      short loc_1B53
.text:0000000000001B37                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001B3A                 jnz     short loc_1B53
.text:0000000000001B3C
.text:0000000000001B3C loc_1B3C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001B3C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001B43                 call    close_stream
.text:0000000000001B48                 test    eax, eax
.text:0000000000001B4A                 jnz     short loc_1B92
.text:0000000000001B4C                 add     rsp, 8
.text:0000000000001B50                 pop     rbx
.text:0000000000001B51                 pop     rbp
.text:0000000000001B52                 retn
.text:0000000000001B53 ; ---------------------------------------------------------------------------
.text:0000000000001B53
.text:0000000000001B53 loc_1B53:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001B53                                         ; close_stdout+2A↑j
.text:0000000000001B53                 lea     rsi, aWriteError ; "write error"
.text:0000000000001B5A                 xor     edi, edi        ; domainname
.text:0000000000001B5C                 mov     edx, 5          ; category
.text:0000000000001B61                 call    _dcgettext
.text:0000000000001B66                 mov     rdi, cs:file_name
.text:0000000000001B6D                 mov     rbp, rax
.text:0000000000001B70                 test    rdi, rdi
.text:0000000000001B73                 jz      short loc_1B9D
.text:0000000000001B75                 call    quotearg_colon
.text:0000000000001B7A                 mov     esi, [rbx]      ; errnum
.text:0000000000001B7C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001B83                 mov     rcx, rax
.text:0000000000001B86                 mov     r8, rbp
.text:0000000000001B89                 xor     edi, edi        ; status
.text:0000000000001B8B                 xor     eax, eax
.text:0000000000001B8D                 call    _error
.text:0000000000001B92
.text:0000000000001B92 loc_1B92:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001B92                                         ; close_stdout+A2↓j
.text:0000000000001B92                 mov     edi, cs:exit_failure ; status
.text:0000000000001B98                 call    __exit
.text:0000000000001B9D ; ---------------------------------------------------------------------------
.text:0000000000001B9D
.text:0000000000001B9D loc_1B9D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001B9D                 mov     esi, [rbx]      ; errnum
.text:0000000000001B9F                 lea     rdx, format+4   ; format
.text:0000000000001BA6                 mov     rcx, rax
.text:0000000000001BA9                 xor     edi, edi        ; status
.text:0000000000001BAB                 xor     eax, eax
.text:0000000000001BAD                 call    _error
.text:0000000000001BB2                 jmp     short loc_1B92
.text:0000000000001BB2 ; } // starts at 1B10
.text:0000000000001BB2 close_stdout    endp
.text:0000000000001BB2
.text:0000000000001BB2 ; ---------------------------------------------------------------------------
.text:0000000000001BB4                 align 20h
.text:0000000000001BC0
.text:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BC0
.text:0000000000001BC0
.text:0000000000001BC0                 public set_program_name
.text:0000000000001BC0 set_program_name proc near              ; CODE XREF: main+13↑p
.text:0000000000001BC0 ; __unwind {
.text:0000000000001BC0                 test    rdi, rdi
.text:0000000000001BC3                 push    rbx
.text:0000000000001BC4                 jz      short loc_1C3D
.text:0000000000001BC6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001BCB                 mov     rbx, rdi
.text:0000000000001BCE                 call    _strrchr
.text:0000000000001BD3                 test    rax, rax
.text:0000000000001BD6                 jz      short loc_1C2D
.text:0000000000001BD8                 lea     r8, [rax+1]
.text:0000000000001BDC                 mov     rdx, r8
.text:0000000000001BDF                 sub     rdx, rbx
.text:0000000000001BE2                 cmp     rdx, 6
.text:0000000000001BE6                 jle     short loc_1C2D
.text:0000000000001BE8                 lea     rsi, [rax-6]
.text:0000000000001BEC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001BF3                 mov     ecx, 7
.text:0000000000001BF8                 repe cmpsb
.text:0000000000001BFA                 setnbe  dl
.text:0000000000001BFD                 sbb     dl, 0
.text:0000000000001C00                 test    dl, dl
.text:0000000000001C02                 jnz     short loc_1C2D
.text:0000000000001C04                 lea     rdi, aLt        ; "lt-"
.text:0000000000001C0B                 mov     ecx, 3
.text:0000000000001C10                 mov     rsi, r8
.text:0000000000001C13                 mov     rbx, r8
.text:0000000000001C16                 repe cmpsb
.text:0000000000001C18                 setnbe  dl
.text:0000000000001C1B                 sbb     dl, 0
.text:0000000000001C1E                 test    dl, dl
.text:0000000000001C20                 jnz     short loc_1C2D
.text:0000000000001C22                 lea     rbx, [rax+4]
.text:0000000000001C26                 mov     cs:__bss_start, rbx
.text:0000000000001C2D
.text:0000000000001C2D loc_1C2D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001C2D                                         ; set_program_name+26↑j ...
.text:0000000000001C2D                 mov     cs:program_name, rbx
.text:0000000000001C34                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001C3B                 pop     rbx
.text:0000000000001C3C                 retn
.text:0000000000001C3D ; ---------------------------------------------------------------------------
.text:0000000000001C3D
.text:0000000000001C3D loc_1C3D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001C3D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001C44                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001C4B                 mov     edx, 37h ; '7'  ; n
.text:0000000000001C50                 mov     esi, 1          ; size
.text:0000000000001C55                 call    _fwrite
.text:0000000000001C5A                 call    _abort
.text:0000000000001C5A ; } // starts at 1BC0
.text:0000000000001C5A set_program_name endp
.text:0000000000001C5A
.text:0000000000001C5A ; ---------------------------------------------------------------------------
.text:0000000000001C5F                 align 20h
.text:0000000000001C60
.text:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C60
.text:0000000000001C60 ; Attributes: info_from_lumina
.text:0000000000001C60
.text:0000000000001C60 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001C60 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001C60                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001C60 ; __unwind {
.text:0000000000001C60                 push    rbp
.text:0000000000001C61                 push    rbx
.text:0000000000001C62                 mov     rbp, rdi
.text:0000000000001C65                 mov     ebx, esi
.text:0000000000001C67                 sub     rsp, 8
.text:0000000000001C6B                 call    locale_charset
.text:0000000000001C70                 movzx   edx, byte ptr [rax]
.text:0000000000001C73                 and     edx, 0FFFFFFDFh
.text:0000000000001C76                 cmp     dl, 55h ; 'U'
.text:0000000000001C79                 jz      short loc_1CF0
.text:0000000000001C7B                 cmp     dl, 47h ; 'G'
.text:0000000000001C7E                 jz      short loc_1CA0
.text:0000000000001C80
.text:0000000000001C80 loc_1C80:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001C80                                         ; gettext_quote+50↓j ...
.text:0000000000001C80                 lea     rax, unk_486B
.text:0000000000001C87                 lea     rdx, asc_486D   ; "'"
.text:0000000000001C8E                 cmp     ebx, 9
.text:0000000000001C91                 cmovnz  rax, rdx
.text:0000000000001C95                 add     rsp, 8
.text:0000000000001C99                 pop     rbx
.text:0000000000001C9A                 pop     rbp
.text:0000000000001C9B                 retn
.text:0000000000001C9B ; ---------------------------------------------------------------------------
.text:0000000000001C9C                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001CA0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001CA4                 and     edx, 0FFFFFFDFh
.text:0000000000001CA7                 cmp     dl, 42h ; 'B'
.text:0000000000001CAA                 jnz     short loc_1C80
.text:0000000000001CAC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001CB0                 jnz     short loc_1C80
.text:0000000000001CB2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001CB6                 jnz     short loc_1C80
.text:0000000000001CB8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001CBC                 jnz     short loc_1C80
.text:0000000000001CBE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001CC2                 jnz     short loc_1C80
.text:0000000000001CC4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001CC8                 jnz     short loc_1C80
.text:0000000000001CCA                 cmp     byte ptr [rax+7], 0
.text:0000000000001CCE                 jnz     short loc_1C80
.text:0000000000001CD0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001CD4                 lea     rax, unk_4864
.text:0000000000001CDB                 lea     rdx, unk_4868
.text:0000000000001CE2                 cmovnz  rax, rdx
.text:0000000000001CE6                 add     rsp, 8
.text:0000000000001CEA                 pop     rbx
.text:0000000000001CEB                 pop     rbp
.text:0000000000001CEC                 retn
.text:0000000000001CEC ; ---------------------------------------------------------------------------
.text:0000000000001CED                 align 10h
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001CF0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001CF4                 and     edx, 0FFFFFFDFh
.text:0000000000001CF7                 cmp     dl, 54h ; 'T'
.text:0000000000001CFA                 jnz     short loc_1C80
.text:0000000000001CFC                 movzx   edx, byte ptr [rax+2]
.text:0000000000001D00                 and     edx, 0FFFFFFDFh
.text:0000000000001D03                 cmp     dl, 46h ; 'F'
.text:0000000000001D06                 jnz     loc_1C80
.text:0000000000001D0C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000001D10                 jnz     loc_1C80
.text:0000000000001D16                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000001D1A                 jnz     loc_1C80
.text:0000000000001D20                 cmp     byte ptr [rax+5], 0
.text:0000000000001D24                 jnz     loc_1C80
.text:0000000000001D2A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001D2E                 lea     rax, unk_485C
.text:0000000000001D35                 lea     rdx, unk_4860
.text:0000000000001D3C                 cmovnz  rax, rdx
.text:0000000000001D40                 add     rsp, 8
.text:0000000000001D44                 pop     rbx
.text:0000000000001D45                 pop     rbp
.text:0000000000001D46                 retn
.text:0000000000001D46 ; } // starts at 1C60
.text:0000000000001D46 gettext_quote   endp
.text:0000000000001D46
.text:0000000000001D46 ; ---------------------------------------------------------------------------
.text:0000000000001D47                 align 10h
.text:0000000000001D50
.text:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D50
.text:0000000000001D50 ; Attributes: info_from_lumina
.text:0000000000001D50
.text:0000000000001D50 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000001D50 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000001D50                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000001D50
.text:0000000000001D50 var_E0          = dword ptr -0E0h
.text:0000000000001D50 var_DB          = byte ptr -0DBh
.text:0000000000001D50 var_DA          = byte ptr -0DAh
.text:0000000000001D50 var_D9          = byte ptr -0D9h
.text:0000000000001D50 s               = qword ptr -0D8h
.text:0000000000001D50 n               = qword ptr -0D0h
.text:0000000000001D50 var_C8          = qword ptr -0C8h
.text:0000000000001D50 ps              = qword ptr -0C0h
.text:0000000000001D50 var_B8          = qword ptr -0B8h
.text:0000000000001D50 var_B0          = qword ptr -0B0h
.text:0000000000001D50 var_A8          = qword ptr -0A8h
.text:0000000000001D50 s2              = qword ptr -0A0h
.text:0000000000001D50 var_98          = qword ptr -98h
.text:0000000000001D50 var_90          = qword ptr -90h
.text:0000000000001D50 var_88          = qword ptr -88h
.text:0000000000001D50 var_80          = qword ptr -80h
.text:0000000000001D50 var_78          = qword ptr -78h
.text:0000000000001D50 var_70          = dword ptr -70h
.text:0000000000001D50 var_6C          = byte ptr -6Ch
.text:0000000000001D50 var_6B          = byte ptr -6Bh
.text:0000000000001D50 var_6A          = byte ptr -6Ah
.text:0000000000001D50 var_69          = byte ptr -69h
.text:0000000000001D50 var_68          = qword ptr -68h
.text:0000000000001D50 var_60          = qword ptr -60h
.text:0000000000001D50 wc              = dword ptr -4Ch
.text:0000000000001D50 var_48          = qword ptr -48h
.text:0000000000001D50 var_40          = qword ptr -40h
.text:0000000000001D50 arg_0           = qword ptr  8
.text:0000000000001D50 arg_8           = qword ptr  10h
.text:0000000000001D50 arg_10          = qword ptr  18h
.text:0000000000001D50
.text:0000000000001D50 ; __unwind {
.text:0000000000001D50                 push    r15
.text:0000000000001D52                 push    r14
.text:0000000000001D54                 mov     r15d, r8d
.text:0000000000001D57                 push    r13
.text:0000000000001D59                 push    r12
.text:0000000000001D5B                 mov     r14, rdi
.text:0000000000001D5E                 push    rbp
.text:0000000000001D5F                 push    rbx
.text:0000000000001D60                 mov     ebx, r9d
.text:0000000000001D63                 mov     r13, rsi
.text:0000000000001D66                 mov     rbp, rcx
.text:0000000000001D69                 and     ebx, 2
.text:0000000000001D6C                 sub     rsp, 0B8h
.text:0000000000001D73                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000001D7B                 mov     [rsp+0E8h+s], rdx
.text:0000000000001D80                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000001D85                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000001D8A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000001D8F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000001D97                 mov     [rsp+0E8h+var_80], rax
.text:0000000000001D9C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000001DA4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000001DA9                 mov     rax, fs:28h
.text:0000000000001DB2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000001DBA                 xor     eax, eax
.text:0000000000001DBC                 call    ___ctype_get_mb_cur_max
.text:0000000000001DC1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000001DC5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000001DCA                 ja      def_1DE1        ; jumptable 00000000000121F1 default case
.text:0000000000001DD0                 lea     rcx, jpt_1DE1
.text:0000000000001DD7                 mov     edx, r15d
.text:0000000000001DDA                 movsxd  rax, ds:(jpt_1DE1 - 48C0h)[rcx+rdx*4]
.text:0000000000001DDE                 add     rax, rcx
.text:0000000000001DE1                 jmp     rax             ; switch jump
.text:0000000000001DE3 ; ---------------------------------------------------------------------------
.text:0000000000001DE3
.text:0000000000001DE3 loc_1DE3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000001DE3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000001DE3                                         ; DATA XREF: ...
.text:0000000000001DE3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000001DE8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000001DED                 xor     r12d, r12d
.text:0000000000001DF0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000001DF9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000001DFE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000001E03
.text:0000000000001E03 loc_1E03:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000001E03                 lea     rax, asc_486D   ; "'"
.text:0000000000001E0A                 mov     [rsp+0E8h+n], 1
.text:0000000000001E13                 xor     r15d, r15d
.text:0000000000001E16                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000001E1E                 mov     [rsp+0E8h+s2], rax
.text:0000000000001E23
.text:0000000000001E23 loc_1E23:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000001E23                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000001E23                 xor     r11d, r11d
.text:0000000000001E26                 mov     rax, rbp
.text:0000000000001E29                 mov     r8d, r12d
.text:0000000000001E2C                 mov     rbp, r11
.text:0000000000001E2F                 mov     r11, rax
.text:0000000000001E32                 nop     word ptr [rax+rax+00h]
.text:0000000000001E38
.text:0000000000001E38 loc_1E38:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000001E38                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000001E38                 cmp     r11, rbp
.text:0000000000001E3B                 setnz   r12b
.text:0000000000001E3F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001E43                 jnz     short loc_1E52
.text:0000000000001E45                 mov     rax, [rsp+0E8h+s]
.text:0000000000001E4A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000001E4E                 setnz   r12b
.text:0000000000001E52
.text:0000000000001E52 loc_1E52:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000001E52                 test    r12b, r12b
.text:0000000000001E55                 jz      loc_24B0
.text:0000000000001E5B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001E60                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000001E65                 lea     r9, [rdi+rbp]
.text:0000000000001E69                 setnz   al
.text:0000000000001E6C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000001E70                 mov     r10d, eax
.text:0000000000001E73                 jz      loc_1F20
.text:0000000000001E79                 mov     rax, [rsp+0E8h+n]
.text:0000000000001E7E                 test    rax, rax
.text:0000000000001E81                 jz      loc_22B0
.text:0000000000001E87                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001E8B                 lea     rbx, [rbp+rax+0]
.text:0000000000001E90                 jnz     short loc_1EC0
.text:0000000000001E92                 cmp     rax, 1
.text:0000000000001E96                 jbe     short loc_1EC0
.text:0000000000001E98                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000001E9D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000001EA2                 mov     [rsp+0E8h+ps], r9
.text:0000000000001EA7                 call    _strlen
.text:0000000000001EAC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000001EB2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000001EB8                 mov     r11, rax
.text:0000000000001EBB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000001EC0
.text:0000000000001EC0 loc_1EC0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000001EC0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000001EC0                 cmp     rbx, r11
.text:0000000000001EC3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000001EC8                 ja      loc_2480
.text:0000000000001ECE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000001ED3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000001ED8                 mov     rdi, r9         ; s1
.text:0000000000001EDB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000001EE0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000001EE5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000001EEA                 call    _memcmp
.text:0000000000001EEF                 test    eax, eax
.text:0000000000001EF1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000001EF6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000001EFC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000001F01                 jnz     loc_2480
.text:0000000000001F07                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000001F0C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000001F12                 jnz     loc_2E95
.text:0000000000001F18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000001F20
.text:0000000000001F20 loc_1F20:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000001F20                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000001F20                 movzx   ebx, byte ptr [r9]
.text:0000000000001F24                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000001F27                 ja      def_1F3E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000001F2D                 lea     rcx, jpt_1F3E
.text:0000000000001F34                 movzx   edx, bl
.text:0000000000001F37                 movsxd  rax, ds:(jpt_1F3E - 48ECh)[rcx+rdx*4]
.text:0000000000001F3B                 add     rax, rcx
.text:0000000000001F3E                 jmp     rax             ; switch jump
.text:0000000000001F40 ; ---------------------------------------------------------------------------
.text:0000000000001F40
.text:0000000000001F40 loc_1F40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000001F40                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000001F40                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000001F43
.text:0000000000001F43 loc_1F43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001F43                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000001F43                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000001F47                 setnz   al
.text:0000000000001F4A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001F4E                 jnz     short loc_1F5C
.text:0000000000001F50                 mov     rax, [rsp+0E8h+s]
.text:0000000000001F55                 cmp     byte ptr [rax+1], 0
.text:0000000000001F59                 setnz   al
.text:0000000000001F5C
.text:0000000000001F5C loc_1F5C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000001F5C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001F61                 setz    dl
.text:0000000000001F64                 test    al, al
.text:0000000000001F66                 jz      loc_21B8
.text:0000000000001F6C
.text:0000000000001F6C loc_1F6C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000001F6C                 xor     r12d, r12d
.text:0000000000001F6F                 xor     eax, eax
.text:0000000000001F71                 nop     dword ptr [rax+00000000h]
.text:0000000000001F78
.text:0000000000001F78 loc_1F78:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000001F78                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000001F78                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000001F7D                 jnz     loc_2092
.text:0000000000001F83                 test    dl, dl
.text:0000000000001F85                 jnz     loc_2092
.text:0000000000001F8B
.text:0000000000001F8B loc_1F8B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000001F8B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000001F90                 test    rsi, rsi
.text:0000000000001F93                 jz      short loc_1FA9
.text:0000000000001F95                 mov     edx, ebx
.text:0000000000001F97                 shr     dl, 5
.text:0000000000001F9A                 movzx   edx, dl
.text:0000000000001F9D                 mov     edx, [rsi+rdx*4]
.text:0000000000001FA0                 bt      edx, ebx
.text:0000000000001FA3                 jb      loc_20F3
.text:0000000000001FA9
.text:0000000000001FA9 loc_1FA9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000001FA9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000001FA9                 test    r10b, r10b
.text:0000000000001FAC                 jnz     loc_20F3
.text:0000000000001FB2                 xor     eax, 1
.text:0000000000001FB5                 add     rbp, 1
.text:0000000000001FB9                 and     eax, r8d
.text:0000000000001FBC
.text:0000000000001FBC loc_1FBC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000001FBC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000001FBC                 test    al, al
.text:0000000000001FBE                 jz      short loc_1FE0
.text:0000000000001FC0                 cmp     r13, r15
.text:0000000000001FC3                 jbe     short loc_1FCA
.text:0000000000001FC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000001FCA
.text:0000000000001FCA loc_1FCA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000001FCA                 lea     rax, [r15+1]
.text:0000000000001FCE                 cmp     r13, rax
.text:0000000000001FD1                 jbe     short loc_1FD9
.text:0000000000001FD3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000001FD9
.text:0000000000001FD9 loc_1FD9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000001FD9                 add     r15, 2
.text:0000000000001FDD                 xor     r8d, r8d
.text:0000000000001FE0
.text:0000000000001FE0 loc_1FE0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000001FE0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000001FE0                 cmp     r15, r13
.text:0000000000001FE3                 jnb     short loc_1FE9
.text:0000000000001FE5                 mov     [r14+r15], bl
.text:0000000000001FE9
.text:0000000000001FE9 loc_1FE9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000001FE9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000001FEE                 add     r15, 1
.text:0000000000001FF2                 mov     eax, 0
.text:0000000000001FF7                 test    r12b, r12b
.text:0000000000001FFA                 cmovz   edi, eax
.text:0000000000001FFD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002002                 jmp     loc_1E38
.text:0000000000002002 ; ---------------------------------------------------------------------------
.text:0000000000002007                 align 10h
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002010                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002010                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002013
.text:0000000000002013 loc_2013:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002013                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000002013                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002017                 cmp     eax, 2
.text:000000000000201A                 jz      loc_25D8
.text:0000000000002020                 cmp     eax, 5
.text:0000000000002023                 jz      loc_2598
.text:0000000000002029                 cmp     eax, 2
.text:000000000000202C                 mov     ebx, 3Fh ; '?'
.text:0000000000002031                 setz    dl
.text:0000000000002034                 xor     r12d, r12d
.text:0000000000002037                 xor     eax, eax
.text:0000000000002039                 jmp     loc_1F78
.text:0000000000002039 ; ---------------------------------------------------------------------------
.text:000000000000203E                 align 20h
.text:0000000000002040
.text:0000000000002040 loc_2040:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002040                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002040                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002043
.text:0000000000002043 loc_2043:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002043                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000002043                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002048                 jz      loc_2550
.text:000000000000204E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002053                 xor     edx, edx
.text:0000000000002055                 xor     eax, eax
.text:0000000000002057                 mov     ebx, 27h ; '''
.text:000000000000205C                 jmp     loc_1F78
.text:000000000000205C ; ---------------------------------------------------------------------------
.text:0000000000002061                 align 8
.text:0000000000002068
.text:0000000000002068 loc_2068:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002068                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000002068                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000206D                 mov     ebx, 74h ; 't'
.text:0000000000002072
.text:0000000000002072 loc_2072:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002072                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002072                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002077                 setz    al
.text:000000000000207A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000207E                 jnz     loc_21CE
.text:0000000000002084
.text:0000000000002084 loc_2084:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002084                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002084                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002089                 jnz     short loc_20F0
.text:000000000000208B
.text:000000000000208B loc_208B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000208B                 mov     ebx, edx
.text:000000000000208D                 xor     r12d, r12d
.text:0000000000002090                 xor     eax, eax
.text:0000000000002092
.text:0000000000002092 loc_2092:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002092                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002092                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002097                 jnz     loc_1F8B
.text:000000000000209D                 jmp     loc_1FA9
.text:000000000000209D ; ---------------------------------------------------------------------------
.text:00000000000020A2                 align 8
.text:00000000000020A8
.text:00000000000020A8 loc_20A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000020A8                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:00000000000020A8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000020AD                 mov     ebx, 62h ; 'b'
.text:00000000000020B2                 jmp     short loc_2084
.text:00000000000020B2 ; ---------------------------------------------------------------------------
.text:00000000000020B4                 align 8
.text:00000000000020B8
.text:00000000000020B8 loc_20B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000020B8                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:00000000000020B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000020BD                 jz      loc_2490
.text:00000000000020C3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000020C8                 jz      loc_22E0
.text:00000000000020CE
.text:00000000000020CE loc_20CE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000020CE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000020D3                 jz      loc_22E0
.text:00000000000020D9                 cmp     [rsp+0E8h+n], 0
.text:00000000000020DF                 jnz     loc_249B
.text:00000000000020E5                 mov     ebx, 5Ch ; '\'
.text:00000000000020EA                 nop     word ptr [rax+rax+00h]
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000020F0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000020F0                 xor     r12d, r12d
.text:00000000000020F3
.text:00000000000020F3 loc_20F3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000020F3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000020F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000020F8                 setz    dl
.text:00000000000020FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002100                 mov     eax, edx
.text:0000000000002102                 jnz     loc_2958
.text:0000000000002108                 mov     eax, r8d
.text:000000000000210B                 xor     eax, 1
.text:000000000000210E                 and     al, dl
.text:0000000000002110                 jz      short loc_2141
.text:0000000000002112                 cmp     r13, r15
.text:0000000000002115                 jbe     short loc_211C
.text:0000000000002117                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000211C
.text:000000000000211C loc_211C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000211C                 lea     rdx, [r15+1]
.text:0000000000002120                 cmp     r13, rdx
.text:0000000000002123                 jbe     short loc_212B
.text:0000000000002125                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000212B
.text:000000000000212B loc_212B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000212B                 lea     rdx, [r15+2]
.text:000000000000212F                 cmp     r13, rdx
.text:0000000000002132                 jbe     short loc_213A
.text:0000000000002134                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000213A
.text:000000000000213A loc_213A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000213A                 add     r15, 3
.text:000000000000213E                 mov     r8d, eax
.text:0000000000002141
.text:0000000000002141 loc_2141:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002141                 cmp     r13, r15
.text:0000000000002144                 jbe     short loc_214B
.text:0000000000002146                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000214B
.text:000000000000214B loc_214B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000214B                 add     r15, 1
.text:000000000000214F                 add     rbp, 1
.text:0000000000002153                 jmp     loc_1FE0
.text:0000000000002153 ; ---------------------------------------------------------------------------
.text:0000000000002158                 align 20h
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002160                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000002160                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002165                 jnz     loc_2333
.text:000000000000216B                 xor     edx, edx
.text:000000000000216D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002172                 jz      loc_208B
.text:0000000000002178                 add     rbp, 1
.text:000000000000217C                 jmp     loc_1E38
.text:000000000000217C ; ---------------------------------------------------------------------------
.text:0000000000002181                 align 8
.text:0000000000002188
.text:0000000000002188 loc_2188:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002188                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000002188                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000218D                 setz    dl
.text:0000000000002190                 xor     eax, eax
.text:0000000000002192                 jmp     loc_1F78
.text:0000000000002192 ; ---------------------------------------------------------------------------
.text:0000000000002197                 align 20h
.text:00000000000021A0
.text:00000000000021A0 loc_21A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021A0                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:00000000000021A0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000021A5                 mov     ebx, 61h ; 'a'
.text:00000000000021AA                 jmp     loc_2084
.text:00000000000021AA ; ---------------------------------------------------------------------------
.text:00000000000021AF                 align 10h
.text:00000000000021B0
.text:00000000000021B0 loc_21B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021B0                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:00000000000021B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000021B5                 setz    dl
.text:00000000000021B8
.text:00000000000021B8 loc_21B8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000021B8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000021B8                 test    rbp, rbp
.text:00000000000021BB                 jnz     loc_1F6C
.text:00000000000021C1
.text:00000000000021C1 loc_21C1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000021C1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000021C1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000021C6                 and     al, dl
.text:00000000000021C8                 jz      loc_1F78
.text:00000000000021CE
.text:00000000000021CE loc_21CE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000021CE                 mov     rbp, r11
.text:00000000000021D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000021D9                 jmp     loc_28D9
.text:00000000000021D9 ; ---------------------------------------------------------------------------
.text:00000000000021DE                 align 20h
.text:00000000000021E0
.text:00000000000021E0 loc_21E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021E0                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:00000000000021E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000021E5                 setz    dl
.text:00000000000021E8                 xor     r12d, r12d
.text:00000000000021EB                 jmp     short loc_21C1
.text:00000000000021EB ; ---------------------------------------------------------------------------
.text:00000000000021ED                 align 10h
.text:00000000000021F0
.text:00000000000021F0 loc_21F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021F0                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:00000000000021F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000021F5                 mov     ebx, 20h ; ' '
.text:00000000000021FA                 setz    dl
.text:00000000000021FD                 jmp     short loc_21C1
.text:00000000000021FD ; ---------------------------------------------------------------------------
.text:00000000000021FF                 align 20h
.text:0000000000002200
.text:0000000000002200 loc_2200:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002200                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000002200                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002205                 mov     ebx, 72h ; 'r'
.text:000000000000220A                 jmp     loc_2072
.text:000000000000220A ; ---------------------------------------------------------------------------
.text:000000000000220F                 align 10h
.text:0000000000002210
.text:0000000000002210 loc_2210:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002210                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000002210                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002215                 mov     ebx, 66h ; 'f'
.text:000000000000221A                 jmp     loc_2084
.text:000000000000221A ; ---------------------------------------------------------------------------
.text:000000000000221F                 align 20h
.text:0000000000002220
.text:0000000000002220 loc_2220:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002220                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000002220                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002225                 mov     ebx, 76h ; 'v'
.text:000000000000222A                 jmp     loc_2084
.text:000000000000222A ; ---------------------------------------------------------------------------
.text:000000000000222F                 align 10h
.text:0000000000002230
.text:0000000000002230 loc_2230:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002230                                         ; DATA XREF: .rodata:jpt_1F3E↓o
.text:0000000000002230                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002235                 mov     ebx, 6Eh ; 'n'
.text:000000000000223A                 jmp     loc_2072
.text:000000000000223A ; ---------------------------------------------------------------------------
.text:000000000000223F                 align 20h
.text:0000000000002240
.text:0000000000002240 def_22CA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002240                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002240                                         ; DATA XREF: ...
.text:0000000000002240                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002243                 nop     dword ptr [rax+rax+00h]
.text:0000000000002248
.text:0000000000002248 def_1F3E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002248                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002248                                         ; DATA XREF: ...
.text:0000000000002248                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000224E                 jnz     loc_25F8
.text:0000000000002254                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002259                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000225E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002263                 call    ___ctype_b_loc
.text:0000000000002268                 mov     rcx, [rax]
.text:000000000000226B                 movzx   edx, bl
.text:000000000000226E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002274                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000227A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000227F                 mov     edi, 1
.text:0000000000002284                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002288                 and     ax, 4000h
.text:000000000000228C                 setnz   r12b
.text:0000000000002290                 setz    al
.text:0000000000002293                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002297
.text:0000000000002297 loc_2297:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002297                 test    al, al
.text:0000000000002299                 jnz     loc_2C31
.text:000000000000229F                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000022A4                 setz    dl
.text:00000000000022A7                 jmp     loc_1F78
.text:00000000000022A7 ; ---------------------------------------------------------------------------
.text:00000000000022AC                 align 10h
.text:00000000000022B0
.text:00000000000022B0 loc_22B0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000022B0                 movzx   ebx, byte ptr [r9]
.text:00000000000022B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000022B7                 ja      short def_22CA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000022B9                 lea     rcx, jpt_22CA
.text:00000000000022C0                 movzx   edx, bl
.text:00000000000022C3                 movsxd  rax, ds:(jpt_22CA - 4AE8h)[rcx+rdx*4]
.text:00000000000022C7                 add     rax, rcx
.text:00000000000022CA                 jmp     rax             ; switch jump
.text:00000000000022CA ; ---------------------------------------------------------------------------
.text:00000000000022CC                 align 10h
.text:00000000000022D0
.text:00000000000022D0 loc_22D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000022D0                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:00000000000022D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000022D3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000022D8                 jnz     loc_20CE
.text:00000000000022DE                 xchg    ax, ax
.text:00000000000022E0
.text:00000000000022E0 loc_22E0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000022E0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000022E0                 mov     edx, 5Ch ; '\'
.text:00000000000022E5                 mov     ebx, 5Ch ; '\'
.text:00000000000022EA                 jmp     loc_2084
.text:00000000000022EA ; ---------------------------------------------------------------------------
.text:00000000000022EF                 align 10h
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000022F0                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:00000000000022F0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000022F5                 xor     r10d, r10d
.text:00000000000022F8                 mov     ebx, 66h ; 'f'
.text:00000000000022FD                 jmp     loc_2084
.text:00000000000022FD ; ---------------------------------------------------------------------------
.text:0000000000002302                 align 8
.text:0000000000002308
.text:0000000000002308 loc_2308:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002308                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002308                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000230D                 xor     r10d, r10d
.text:0000000000002310                 mov     ebx, 6Eh ; 'n'
.text:0000000000002315                 jmp     loc_2072
.text:0000000000002315 ; ---------------------------------------------------------------------------
.text:000000000000231A                 align 20h
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002320                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002320                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002325                 jmp     loc_20F0
.text:0000000000002325 ; ---------------------------------------------------------------------------
.text:000000000000232A                 align 10h
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002330                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002330                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002333
.text:0000000000002333 loc_2333:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002333                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002338                 setz    dl
.text:000000000000233B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002340                 jnz     loc_2EDA
.text:0000000000002346                 mov     eax, r8d
.text:0000000000002349                 mov     rcx, r15
.text:000000000000234C                 xor     eax, 1
.text:000000000000234F                 and     al, dl
.text:0000000000002351                 jz      short loc_2380
.text:0000000000002353                 cmp     r13, r15
.text:0000000000002356                 jbe     short loc_235D
.text:0000000000002358                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000235D
.text:000000000000235D loc_235D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000235D                 lea     rcx, [r15+1]
.text:0000000000002361                 cmp     r13, rcx
.text:0000000000002364                 jbe     short loc_236C
.text:0000000000002366                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000236C
.text:000000000000236C loc_236C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000236C                 lea     rcx, [r15+2]
.text:0000000000002370                 cmp     r13, rcx
.text:0000000000002373                 ja      loc_29A9
.text:0000000000002379
.text:0000000000002379 loc_2379:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002379                 lea     rcx, [r15+3]
.text:000000000000237D                 mov     r8d, eax
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002380                 cmp     r13, rcx
.text:0000000000002383                 jbe     short loc_238A
.text:0000000000002385                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000238A
.text:000000000000238A loc_238A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000238A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000238F                 lea     r15, [rcx+1]
.text:0000000000002393                 jz      loc_2999
.text:0000000000002399                 lea     rax, [rbp+1]
.text:000000000000239D                 cmp     rax, r11
.text:00000000000023A0                 jnb     short loc_23BB
.text:00000000000023A2                 mov     rax, [rsp+0E8h+s]
.text:00000000000023A7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000023AC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000023B0                 sub     eax, 30h ; '0'
.text:00000000000023B3                 cmp     al, 9
.text:00000000000023B5                 jbe     loc_2BE9
.text:00000000000023BB
.text:00000000000023BB loc_23BB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000023BB                 mov     eax, r12d
.text:00000000000023BE                 mov     ebx, 30h ; '0'
.text:00000000000023C3                 xor     r12d, r12d
.text:00000000000023C6                 jmp     loc_1F78
.text:00000000000023C6 ; ---------------------------------------------------------------------------
.text:00000000000023CB                 align 10h
.text:00000000000023D0
.text:00000000000023D0 loc_23D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000023D0                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:00000000000023D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000023D5                 mov     r12d, r10d
.text:00000000000023D8                 setz    dl
.text:00000000000023DB                 xor     r10d, r10d
.text:00000000000023DE                 xor     eax, eax
.text:00000000000023E0                 jmp     loc_1F78
.text:00000000000023E0 ; ---------------------------------------------------------------------------
.text:00000000000023E5                 align 8
.text:00000000000023E8
.text:00000000000023E8 loc_23E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000023E8                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:00000000000023E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000023ED                 setz    dl
.text:00000000000023F0                 xor     r10d, r10d
.text:00000000000023F3                 jmp     loc_21B8
.text:00000000000023F3 ; ---------------------------------------------------------------------------
.text:00000000000023F8                 align 20h
.text:0000000000002400
.text:0000000000002400 loc_2400:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002400                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002400                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002405                 setz    dl
.text:0000000000002408                 xor     r10d, r10d
.text:000000000000240B                 xor     r12d, r12d
.text:000000000000240E                 jmp     loc_21C1
.text:000000000000240E ; ---------------------------------------------------------------------------
.text:0000000000002413                 align 8
.text:0000000000002418
.text:0000000000002418 loc_2418:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002418                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002418                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000241D                 mov     r12d, r10d
.text:0000000000002420                 mov     ebx, 20h ; ' '
.text:0000000000002425                 setz    dl
.text:0000000000002428                 xor     r10d, r10d
.text:000000000000242B                 jmp     loc_21C1
.text:0000000000002430 ; ---------------------------------------------------------------------------
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002430                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002430                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002435                 xor     r10d, r10d
.text:0000000000002438                 mov     ebx, 72h ; 'r'
.text:000000000000243D                 jmp     loc_2072
.text:000000000000243D ; ---------------------------------------------------------------------------
.text:0000000000002442                 align 8
.text:0000000000002448
.text:0000000000002448 loc_2448:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002448                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002448                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000244D                 jmp     loc_20F0
.text:000000000000244D ; ---------------------------------------------------------------------------
.text:0000000000002452                 align 8
.text:0000000000002458
.text:0000000000002458 loc_2458:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002458                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002458                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000245D                 xor     r10d, r10d
.text:0000000000002460                 mov     ebx, 74h ; 't'
.text:0000000000002465                 jmp     loc_2072
.text:0000000000002465 ; ---------------------------------------------------------------------------
.text:000000000000246A                 align 10h
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002470                                         ; DATA XREF: .rodata:jpt_22CA↓o
.text:0000000000002470                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002475                 jmp     loc_20F0
.text:0000000000002475 ; ---------------------------------------------------------------------------
.text:000000000000247A                 align 20h
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002480                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002480                 xor     r10d, r10d
.text:0000000000002483                 jmp     loc_1F20
.text:0000000000002483 ; ---------------------------------------------------------------------------
.text:0000000000002488                 align 10h
.text:0000000000002490
.text:0000000000002490 loc_2490:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002490                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002495                 jnz     loc_2E00
.text:000000000000249B
.text:000000000000249B loc_249B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000249B                 add     rbp, 1
.text:000000000000249F                 mov     eax, r8d
.text:00000000000024A2                 xor     r12d, r12d
.text:00000000000024A5                 mov     ebx, 5Ch ; '\'
.text:00000000000024AA                 jmp     loc_1FBC
.text:00000000000024AA ; ---------------------------------------------------------------------------
.text:00000000000024AF                 align 10h
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000024B0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024B5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000024BA                 mov     r12d, r8d
.text:00000000000024BD                 mov     rbp, r11
.text:00000000000024C0                 setz    dl
.text:00000000000024C3                 mov     eax, ebx
.text:00000000000024C5                 test    r15, r15
.text:00000000000024C8                 setz    cl
.text:00000000000024CB                 and     eax, edx
.text:00000000000024CD                 and     al, cl
.text:00000000000024CF                 jnz     loc_2F36
.text:00000000000024D5                 mov     eax, ebx
.text:00000000000024D7                 xor     eax, 1
.text:00000000000024DA                 and     dl, al
.text:00000000000024DC                 jz      loc_2E4C
.text:00000000000024E2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000024E7                 jz      loc_2E4A
.text:00000000000024ED                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000024F2                 jnz     loc_2EED
.text:00000000000024F8                 test    r13, r13
.text:00000000000024FB                 setz    al
.text:00000000000024FE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002504                 setnz   dl
.text:0000000000002507                 and     al, dl
.text:0000000000002509                 jz      loc_2F2C
.text:000000000000250F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002514
.text:0000000000002514 loc_2514:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002514                 lea     rbx, asc_486D   ; "'"
.text:000000000000251B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000251F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002527                 mov     r15d, 1
.text:000000000000252D                 mov     [rsp+0E8h+n], 1
.text:0000000000002536                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000253B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002540                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002544                 jmp     loc_1E23
.text:0000000000002544 ; ---------------------------------------------------------------------------
.text:0000000000002549                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002550                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002555                 jnz     loc_2E00
.text:000000000000255B                 test    r13, r13
.text:000000000000255E                 jz      loc_2960
.text:0000000000002564                 xor     edx, edx
.text:0000000000002566                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000256C                 jnz     loc_2960
.text:0000000000002572
.text:0000000000002572 loc_2572:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002572                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002572                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002577                 add     r15, 3
.text:000000000000257B                 xor     eax, eax
.text:000000000000257D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002582                 xor     r8d, r8d
.text:0000000000002585                 mov     r13, rdx
.text:0000000000002588                 mov     ebx, 27h ; '''
.text:000000000000258D                 jmp     loc_1FA9
.text:000000000000258D ; ---------------------------------------------------------------------------
.text:0000000000002592                 align 8
.text:0000000000002598
.text:0000000000002598 loc_2598:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002598                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000259D                 jz      short loc_25C0
.text:000000000000259F                 lea     rcx, [rbp+2]
.text:00000000000025A3                 cmp     rcx, r11
.text:00000000000025A6                 jnb     short loc_25C0
.text:00000000000025A8                 mov     rax, [rsp+0E8h+s]
.text:00000000000025AD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000025B2                 jz      loc_2D42
.text:00000000000025B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000025C0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000025C0                 xor     edx, edx
.text:00000000000025C2                 xor     r12d, r12d
.text:00000000000025C5                 xor     eax, eax
.text:00000000000025C7                 mov     ebx, 3Fh ; '?'
.text:00000000000025CC                 jmp     loc_1F78
.text:00000000000025CC ; ---------------------------------------------------------------------------
.text:00000000000025D1                 align 8
.text:00000000000025D8
.text:00000000000025D8 loc_25D8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000025D8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000025DD                 jnz     loc_2E00
.text:00000000000025E3                 xor     r12d, r12d
.text:00000000000025E6                 xor     eax, eax
.text:00000000000025E8                 mov     ebx, 3Fh ; '?'
.text:00000000000025ED                 jmp     loc_1FA9
.text:00000000000025ED ; ---------------------------------------------------------------------------
.text:00000000000025F2                 align 8
.text:00000000000025F8
.text:00000000000025F8 loc_25F8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000025F8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002600                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002604                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002610                 mov     [rsp+0E8h+ps], rax
.text:0000000000002615                 jnz     short loc_2644
.text:0000000000002617                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000261C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002621                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002626                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000262B                 call    _strlen
.text:0000000000002630                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002636                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000263C                 mov     r11, rax
.text:000000000000263F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002644
.text:0000000000002644 loc_2644:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002644                 lea     rax, [rsp+0E8h+wc]
.text:000000000000264C                 xor     ecx, ecx
.text:000000000000264E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002652                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002657                 mov     rbx, rcx
.text:000000000000265A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002662                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002667                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000266C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002674                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002679                 mov     [rsp+0E8h+var_78], r13
.text:000000000000267E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002683
.text:0000000000002683 loc_2683:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002683                 mov     rax, [rsp+0E8h+s]
.text:0000000000002688                 lea     r14, [rbp+rbx+0]
.text:000000000000268D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002692                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002697                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000269C                 lea     r13, [rax+r14]
.text:00000000000026A0                 sub     rdx, r14
.text:00000000000026A3                 mov     rsi, r13
.text:00000000000026A6                 call    rpl_mbrtowc
.text:00000000000026AB                 test    rax, rax
.text:00000000000026AE                 mov     r15, rax
.text:00000000000026B1                 jz      short loc_2701
.text:00000000000026B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000026B7                 jz      loc_2CD5
.text:00000000000026BD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000026C1                 jz      loc_2C61
.text:00000000000026C7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026CC                 setz    al
.text:00000000000026CF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000026D3                 jnz     loc_2870
.text:00000000000026D9
.text:00000000000026D9 loc_26D9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000026D9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000026D9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000026E0                 call    _iswprint
.text:00000000000026E5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000026EA                 test    eax, eax
.text:00000000000026EC                 mov     eax, 0
.text:00000000000026F1                 cmovz   r12d, eax
.text:00000000000026F5                 add     rbx, r15
.text:00000000000026F8                 call    _mbsinit
.text:00000000000026FD                 test    eax, eax
.text:00000000000026FF                 jz      short loc_2683
.text:0000000000002701
.text:0000000000002701 loc_2701:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002701                 mov     edx, r12d
.text:0000000000002704                 mov     rdi, rbx
.text:0000000000002707                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000270D                 xor     edx, 1
.text:0000000000002710                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002715                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000271B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000271F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002727                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000272C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002731                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002736
.text:0000000000002736 loc_2736:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002736                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002736                 cmp     rdi, 1
.text:000000000000273A                 jbe     loc_2D3B
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002740                 mov     rcx, rdi
.text:0000000000002743                 xor     esi, esi
.text:0000000000002745                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000274B                 add     rcx, rbp
.text:000000000000274E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002753                 jmp     loc_280E
.text:0000000000002753 ; ---------------------------------------------------------------------------
.text:0000000000002758                 align 20h
.text:0000000000002760
.text:0000000000002760 loc_2760:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002760                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002765                 setz    al
.text:0000000000002768                 test    r9b, r9b
.text:000000000000276B                 jnz     loc_2C20
.text:0000000000002771                 mov     esi, r8d
.text:0000000000002774                 xor     esi, 1
.text:0000000000002777                 and     al, sil
.text:000000000000277A                 jz      short loc_27AB
.text:000000000000277C                 cmp     r13, r15
.text:000000000000277F                 jbe     short loc_2786
.text:0000000000002781                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002786
.text:0000000000002786 loc_2786:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002786                 lea     rsi, [r15+1]
.text:000000000000278A                 cmp     r13, rsi
.text:000000000000278D                 jbe     short loc_2795
.text:000000000000278F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002795
.text:0000000000002795 loc_2795:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002795                 lea     rsi, [r15+2]
.text:0000000000002799                 cmp     r13, rsi
.text:000000000000279C                 jbe     short loc_27A4
.text:000000000000279E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000027A4
.text:00000000000027A4 loc_27A4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000027A4                 add     r15, 3
.text:00000000000027A8                 mov     r8d, eax
.text:00000000000027AB
.text:00000000000027AB loc_27AB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000027AB                 cmp     r13, r15
.text:00000000000027AE                 jbe     short loc_27B5
.text:00000000000027B0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000027B5
.text:00000000000027B5 loc_27B5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000027B5                 lea     rax, [r15+1]
.text:00000000000027B9                 cmp     r13, rax
.text:00000000000027BC                 jbe     short loc_27CB
.text:00000000000027BE                 mov     eax, ebx
.text:00000000000027C0                 shr     al, 6
.text:00000000000027C3                 add     eax, 30h ; '0'
.text:00000000000027C6                 mov     [r14+r15+1], al
.text:00000000000027CB
.text:00000000000027CB loc_27CB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000027CB                 lea     rax, [r15+2]
.text:00000000000027CF                 cmp     r13, rax
.text:00000000000027D2                 jbe     short loc_27E4
.text:00000000000027D4                 mov     eax, ebx
.text:00000000000027D6                 shr     al, 3
.text:00000000000027D9                 and     eax, 7
.text:00000000000027DC                 add     eax, 30h ; '0'
.text:00000000000027DF                 mov     [r14+r15+2], al
.text:00000000000027E4
.text:00000000000027E4 loc_27E4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000027E4                 and     ebx, 7
.text:00000000000027E7                 add     rbp, 1
.text:00000000000027EB                 add     r15, 3
.text:00000000000027EF                 add     ebx, 30h ; '0'
.text:00000000000027F2                 cmp     rbp, rcx
.text:00000000000027F5                 jnb     loc_1FE0
.text:00000000000027FB                 mov     esi, edx
.text:00000000000027FD
.text:00000000000027FD loc_27FD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000027FD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000027FD                 cmp     r13, r15
.text:0000000000002800                 jbe     short loc_2806
.text:0000000000002802                 mov     [r14+r15], bl
.text:0000000000002806
.text:0000000000002806 loc_2806:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002806                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000280A                 add     r15, 1
.text:000000000000280E
.text:000000000000280E loc_280E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000280E                 test    dl, dl
.text:0000000000002810                 jnz     loc_2760
.text:0000000000002816                 mov     eax, esi
.text:0000000000002818                 xor     eax, 1
.text:000000000000281B                 and     eax, r8d
.text:000000000000281E                 test    r10b, r10b
.text:0000000000002821                 jz      short loc_2831
.text:0000000000002823                 cmp     r13, r15
.text:0000000000002826                 jbe     short loc_282D
.text:0000000000002828                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000282D
.text:000000000000282D loc_282D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000282D                 add     r15, 1
.text:0000000000002831
.text:0000000000002831 loc_2831:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002831                 add     rbp, 1
.text:0000000000002835                 cmp     rbp, rcx
.text:0000000000002838                 jnb     loc_1FBC
.text:000000000000283E                 test    al, al
.text:0000000000002840                 jz      loc_2C3E
.text:0000000000002846                 cmp     r13, r15
.text:0000000000002849                 jbe     short loc_2850
.text:000000000000284B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002850
.text:0000000000002850 loc_2850:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002850                 lea     rax, [r15+1]
.text:0000000000002854                 cmp     r13, rax
.text:0000000000002857                 jbe     short loc_285F
.text:0000000000002859                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000285F
.text:000000000000285F loc_285F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000285F                 add     r15, 2
.text:0000000000002863                 xor     r10d, r10d
.text:0000000000002866                 xor     r8d, r8d
.text:0000000000002869                 jmp     short loc_27FD
.text:0000000000002869 ; ---------------------------------------------------------------------------
.text:000000000000286B                 align 10h
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002870                 cmp     r15, 1
.text:0000000000002874                 jz      loc_26D9
.text:000000000000287A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000287F                 lea     rcx, [rdi+r15]
.text:0000000000002883                 lea     rdx, [rdi+r14+1]
.text:0000000000002888                 lea     r8, [rcx+r14]
.text:000000000000288C                 jmp     short loc_289D
.text:000000000000288C ; ---------------------------------------------------------------------------
.text:000000000000288E                 align 10h
.text:0000000000002890
.text:0000000000002890 loc_2890:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002890                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002890                 add     rdx, 1
.text:0000000000002894                 cmp     r8, rdx
.text:0000000000002897                 jz      loc_26D9
.text:000000000000289D
.text:000000000000289D loc_289D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000289D                 movzx   ecx, byte ptr [rdx]
.text:00000000000028A0                 sub     ecx, 5Bh ; '['
.text:00000000000028A3                 cmp     cl, 21h ; '!'
.text:00000000000028A6                 ja      short loc_2890
.text:00000000000028A8                 mov     esi, 1
.text:00000000000028AD                 shl     rsi, cl
.text:00000000000028B0                 mov     rcx, rsi
.text:00000000000028B3                 mov     rsi, 20000002Bh
.text:00000000000028BD                 test    rcx, rsi
.text:00000000000028C0                 jz      short loc_2890
.text:00000000000028C2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000028C7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000028CC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000028D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000028D9
.text:00000000000028D9 loc_28D9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000028D9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000028D9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000028DE                 jz      short loc_28F0
.text:00000000000028E0                 test    al, al
.text:00000000000028E2                 mov     eax, 4
.text:00000000000028E7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000028EC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000028F0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000028F0                 sub     rsp, 8
.text:00000000000028F4                 mov     rcx, rbp
.text:00000000000028F7                 mov     rsi, r13
.text:00000000000028FA                 push    [rsp+0F0h+var_88]
.text:00000000000028FE                 push    [rsp+0F8h+var_80]
.text:0000000000002902                 mov     rdi, r14
.text:0000000000002905                 push    0
.text:0000000000002907                 mov     r9d, [rsp+108h+var_70]
.text:000000000000290F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002914                 mov     rdx, [rsp+108h+s]
.text:0000000000002919                 and     r9d, 0FFFFFFFDh
.text:000000000000291D                 call    quotearg_buffer_restyled
.text:0000000000002922                 add     rsp, 20h
.text:0000000000002926                 mov     r15, rax
.text:0000000000002929
.text:0000000000002929 loc_2929:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002929                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002929                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002931                 xor     rbx, fs:28h
.text:000000000000293A                 mov     rax, r15
.text:000000000000293D                 jnz     loc_2F43
.text:0000000000002943                 add     rsp, 0B8h
.text:000000000000294A                 pop     rbx
.text:000000000000294B                 pop     rbp
.text:000000000000294C                 pop     r12
.text:000000000000294E                 pop     r13
.text:0000000000002950                 pop     r14
.text:0000000000002952                 pop     r15
.text:0000000000002954                 retn
.text:0000000000002954 ; ---------------------------------------------------------------------------
.text:0000000000002955                 align 8
.text:0000000000002958
.text:0000000000002958 loc_2958:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002958                 mov     rbp, r11
.text:000000000000295B                 jmp     loc_28D9
.text:0000000000002960 ; ---------------------------------------------------------------------------
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002960                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002960                 cmp     r13, r15
.text:0000000000002963                 jbe     short loc_296A
.text:0000000000002965                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000296A
.text:000000000000296A loc_296A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000296A                 lea     rax, [r15+1]
.text:000000000000296E                 cmp     r13, rax
.text:0000000000002971                 jbe     short loc_2979
.text:0000000000002973                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002979
.text:0000000000002979 loc_2979:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002979                 lea     rax, [r15+2]
.text:000000000000297D                 cmp     r13, rax
.text:0000000000002980                 jbe     loc_2F72
.text:0000000000002986                 mov     rdx, r13
.text:0000000000002989                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000298F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002994                 jmp     loc_2572
.text:0000000000002999 ; ---------------------------------------------------------------------------
.text:0000000000002999
.text:0000000000002999 loc_2999:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002999                 mov     eax, r12d
.text:000000000000299C                 mov     ebx, 30h ; '0'
.text:00000000000029A1                 xor     r12d, r12d
.text:00000000000029A4                 jmp     loc_1FA9
.text:00000000000029A9 ; ---------------------------------------------------------------------------
.text:00000000000029A9
.text:00000000000029A9 loc_29A9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000029A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000029AF                 jmp     loc_2379
.text:00000000000029B4 ; ---------------------------------------------------------------------------
.text:00000000000029B4
.text:00000000000029B4 loc_29B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000029B4                                         ; DATA XREF: .rodata:jpt_1DE1↓o
.text:00000000000029B4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000029B6                 jnz     loc_1DE3        ; jumptable 00000000000121F1 case 1
.text:00000000000029BC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000029C1
.text:00000000000029C1 loc_29C1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000029C1                 test    r13, r13
.text:00000000000029C4                 jnz     loc_2F5A
.text:00000000000029CA                 lea     rax, asc_486D   ; "'"
.text:00000000000029D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000029DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000029DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000029E4                 xor     r12d, r12d
.text:00000000000029E7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000029EC                 mov     [rsp+0E8h+n], 1
.text:00000000000029F5                 mov     [rsp+0E8h+s2], rax
.text:00000000000029FA                 mov     r15d, 1
.text:0000000000002A00                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002A08                 jmp     loc_1E23
.text:0000000000002A08 ; ---------------------------------------------------------------------------
.text:0000000000002A0D                 align 10h
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002A10                                         ; DATA XREF: .rodata:jpt_1DE1↓o
.text:0000000000002A10                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002A12                 jnz     loc_2E0D
.text:0000000000002A18                 test    r13, r13
.text:0000000000002A1B                 jz      loc_2C46
.text:0000000000002A21                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002A25                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002A2A                 xor     r12d, r12d
.text:0000000000002A2D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002A32                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002A3B
.text:0000000000002A3B loc_2A3B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002A3B                 lea     rax, unk_486B
.text:0000000000002A42                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002A47                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002A4C                 mov     [rsp+0E8h+n], 1
.text:0000000000002A55                 mov     r15d, 1
.text:0000000000002A5B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002A60                 jmp     loc_1E23
.text:0000000000002A65 ; ---------------------------------------------------------------------------
.text:0000000000002A65
.text:0000000000002A65 loc_2A65:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002A65                                         ; DATA XREF: .rodata:jpt_1DE1↓o
.text:0000000000002A65                 lea     rax, unk_486B   ; jumptable 00000000000121F1 case 6
.text:0000000000002A6C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002A71                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002A76                 xor     r12d, r12d
.text:0000000000002A79                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002A82                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002A87                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002A8C                 mov     [rsp+0E8h+n], 1
.text:0000000000002A95                 xor     r15d, r15d
.text:0000000000002A98                 mov     [rsp+0E8h+s2], rax
.text:0000000000002A9D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002AA5                 jmp     loc_1E23
.text:0000000000002AAA ; ---------------------------------------------------------------------------
.text:0000000000002AAA
.text:0000000000002AAA loc_2AAA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002AAA                                         ; DATA XREF: .rodata:jpt_1DE1↓o
.text:0000000000002AAA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002AAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002AB4                 xor     r12d, r12d
.text:0000000000002AB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002AC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002AC5                 xor     r15d, r15d
.text:0000000000002AC8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002ACD                 mov     [rsp+0E8h+n], 0
.text:0000000000002AD6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002ADF                 jmp     loc_1E23
.text:0000000000002AE4 ; ---------------------------------------------------------------------------
.text:0000000000002AE4
.text:0000000000002AE4 loc_2AE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002AE4                                         ; DATA XREF: .rodata:jpt_1DE1↓o
.text:0000000000002AE4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002AE9                 jz      short loc_2B41
.text:0000000000002AEB                 lea     rsi, asc_486F   ; "`"
.text:0000000000002AF2                 xor     edi, edi        ; domainname
.text:0000000000002AF4                 mov     edx, 5          ; category
.text:0000000000002AF9                 call    _dcgettext
.text:0000000000002AFE                 mov     rcx, rax
.text:0000000000002B01                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002B06                 lea     rax, asc_486F   ; "`"
.text:0000000000002B0D                 cmp     rcx, rax
.text:0000000000002B10                 jz      loc_2EAE
.text:0000000000002B16
.text:0000000000002B16 loc_2B16:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002B16                 lea     rsi, asc_486D   ; "'"
.text:0000000000002B1D                 xor     edi, edi        ; domainname
.text:0000000000002B1F                 mov     edx, 5          ; category
.text:0000000000002B24                 call    _dcgettext
.text:0000000000002B29                 mov     rcx, rax
.text:0000000000002B2C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002B31                 lea     rax, asc_486D   ; "'"
.text:0000000000002B38                 cmp     rcx, rax
.text:0000000000002B3B                 jz      loc_2EC4
.text:0000000000002B41
.text:0000000000002B41 loc_2B41:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002B41                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002B41                 xor     r15d, r15d
.text:0000000000002B44                 test    ebx, ebx
.text:0000000000002B46                 jz      loc_2D0D
.text:0000000000002B4C
.text:0000000000002B4C loc_2B4C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002B4C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002B4C                 test    ebx, ebx
.text:0000000000002B4E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002B53                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002B58                 xor     r12d, r12d
.text:0000000000002B5B                 mov     rdi, rbx        ; s
.text:0000000000002B5E                 call    _strlen
.text:0000000000002B63                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002B68                 mov     [rsp+0E8h+n], rax
.text:0000000000002B6D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002B72                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002B80                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002B85                 jmp     loc_1E23
.text:0000000000002B8A ; ---------------------------------------------------------------------------
.text:0000000000002B8A
.text:0000000000002B8A loc_2B8A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B8A                                         ; DATA XREF: .rodata:jpt_1DE1↓o
.text:0000000000002B8A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002B8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B94                 xor     r12d, r12d
.text:0000000000002B97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002BA0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002BA5                 xor     r15d, r15d
.text:0000000000002BA8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002BAD                 mov     [rsp+0E8h+n], 0
.text:0000000000002BB6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002BBF                 jmp     loc_1E23
.text:0000000000002BC4 ; ---------------------------------------------------------------------------
.text:0000000000002BC4
.text:0000000000002BC4 loc_2BC4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BC4                                         ; DATA XREF: .rodata:jpt_1DE1↓o
.text:0000000000002BC4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002BC9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002BCE                 xor     r12d, r12d
.text:0000000000002BD1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002BDA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002BDF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002BE4                 jmp     loc_1E03
.text:0000000000002BE9 ; ---------------------------------------------------------------------------
.text:0000000000002BE9
.text:0000000000002BE9 loc_2BE9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002BE9                 cmp     r13, r15
.text:0000000000002BEC                 jbe     short loc_2BF3
.text:0000000000002BEE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002BF3
.text:0000000000002BF3 loc_2BF3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002BF3                 lea     rax, [rcx+2]
.text:0000000000002BF7                 cmp     r13, rax
.text:0000000000002BFA                 jbe     short loc_2C02
.text:0000000000002BFC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002C02
.text:0000000000002C02 loc_2C02:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002C02                 mov     eax, r12d
.text:0000000000002C05                 lea     r15, [rcx+3]
.text:0000000000002C09                 xor     r12d, r12d
.text:0000000000002C0C                 mov     ebx, 30h ; '0'
.text:0000000000002C11                 jmp     loc_1F78
.text:0000000000002C11 ; ---------------------------------------------------------------------------
.text:0000000000002C16                 align 20h
.text:0000000000002C20
.text:0000000000002C20 loc_2C20:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002C20                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002C25                 mov     rbp, r11
.text:0000000000002C28                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002C2C                 jmp     loc_28D9
.text:0000000000002C31 ; ---------------------------------------------------------------------------
.text:0000000000002C31
.text:0000000000002C31 loc_2C31:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002C31                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002C36                 xor     r12d, r12d
.text:0000000000002C39                 jmp     loc_2740
.text:0000000000002C3E ; ---------------------------------------------------------------------------
.text:0000000000002C3E
.text:0000000000002C3E loc_2C3E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002C3E                 xor     r10d, r10d
.text:0000000000002C41                 jmp     loc_27FD
.text:0000000000002C46 ; ---------------------------------------------------------------------------
.text:0000000000002C46
.text:0000000000002C46 loc_2C46:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002C46                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C4F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002C54                 xor     r12d, r12d
.text:0000000000002C57                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C5C                 jmp     loc_2A3B
.text:0000000000002C61 ; ---------------------------------------------------------------------------
.text:0000000000002C61
.text:0000000000002C61 loc_2C61:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002C61                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002C66                 mov     rsi, r14
.text:0000000000002C69                 mov     rcx, r13
.text:0000000000002C6C                 mov     rax, rbx
.text:0000000000002C6F                 mov     rdi, rbx
.text:0000000000002C72                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002C78                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002C7D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002C85                 cmp     rsi, r11
.text:0000000000002C88                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002C8E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002C96                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002C9B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002CA0                 jnb     short loc_2CC8
.text:0000000000002CA2                 cmp     byte ptr [rcx], 0
.text:0000000000002CA5                 jnz     short loc_2CB7
.text:0000000000002CA7                 jmp     short loc_2CC8
.text:0000000000002CA7 ; ---------------------------------------------------------------------------
.text:0000000000002CA9                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002CB0                 cmp     byte ptr [r9+rax], 0
.text:0000000000002CB5                 jz      short loc_2CC5
.text:0000000000002CB7
.text:0000000000002CB7 loc_2CB7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002CB7                 add     rax, 1
.text:0000000000002CBB                 lea     rdx, [rbp+rax+0]
.text:0000000000002CC0                 cmp     r11, rdx
.text:0000000000002CC3                 ja      short loc_2CB0
.text:0000000000002CC5
.text:0000000000002CC5 loc_2CC5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002CC5                 mov     rdi, rax
.text:0000000000002CC8
.text:0000000000002CC8 loc_2CC8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002CC8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002CC8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002CCD                 xor     r12d, r12d
.text:0000000000002CD0                 jmp     loc_2736
.text:0000000000002CD5 ; ---------------------------------------------------------------------------
.text:0000000000002CD5
.text:0000000000002CD5 loc_2CD5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002CD5                 mov     rdi, rbx
.text:0000000000002CD8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002CDE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002CE3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002CE9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002CF1                 xor     r12d, r12d
.text:0000000000002CF4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002CF9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002CFE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002D03                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002D08                 jmp     loc_2736
.text:0000000000002D0D ; ---------------------------------------------------------------------------
.text:0000000000002D0D
.text:0000000000002D0D loc_2D0D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000002D0D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000002D12                 movzx   eax, byte ptr [rdx]
.text:0000000000002D15                 test    al, al
.text:0000000000002D17                 jz      loc_2B4C
.text:0000000000002D1D                 nop     dword ptr [rax]
.text:0000000000002D20
.text:0000000000002D20 loc_2D20:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000002D20                 cmp     r13, r15
.text:0000000000002D23                 jbe     short loc_2D29
.text:0000000000002D25                 mov     [r14+r15], al
.text:0000000000002D29
.text:0000000000002D29 loc_2D29:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000002D29                 add     r15, 1
.text:0000000000002D2D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000002D32                 test    al, al
.text:0000000000002D34                 jnz     short loc_2D20
.text:0000000000002D36                 jmp     loc_2B4C
.text:0000000000002D3B ; ---------------------------------------------------------------------------
.text:0000000000002D3B
.text:0000000000002D3B loc_2D3B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000002D3B                 mov     eax, edx
.text:0000000000002D3D                 jmp     loc_2297
.text:0000000000002D42 ; ---------------------------------------------------------------------------
.text:0000000000002D42
.text:0000000000002D42 loc_2D42:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000002D42                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000002D46                 cmp     bl, 3Eh ; '>'
.text:0000000000002D49                 ja      loc_25C0
.text:0000000000002D4F                 mov     rax, 7000A38200000000h
.text:0000000000002D59                 bt      rax, rbx
.text:0000000000002D5D                 jnb     loc_25C0
.text:0000000000002D63                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002D68                 jnz     loc_2F52
.text:0000000000002D6E                 cmp     r13, r15
.text:0000000000002D71                 jbe     short loc_2D78
.text:0000000000002D73                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000002D78
.text:0000000000002D78 loc_2D78:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000002D78                 lea     rax, [r15+1]
.text:0000000000002D7C                 cmp     r13, rax
.text:0000000000002D7F                 jbe     short loc_2D87
.text:0000000000002D81                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000002D87
.text:0000000000002D87 loc_2D87:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000002D87                 lea     rax, [r15+2]
.text:0000000000002D8B                 cmp     r13, rax
.text:0000000000002D8E                 jbe     short loc_2D96
.text:0000000000002D90                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000002D96
.text:0000000000002D96 loc_2D96:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000002D96                 lea     rax, [r15+3]
.text:0000000000002D9A                 cmp     r13, rax
.text:0000000000002D9D                 jbe     short loc_2DA5
.text:0000000000002D9F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000002DA5
.text:0000000000002DA5 loc_2DA5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000002DA5                 add     r15, 4
.text:0000000000002DA9                 xor     edx, edx
.text:0000000000002DAB                 xor     r12d, r12d
.text:0000000000002DAE                 xor     eax, eax
.text:0000000000002DB0                 mov     rbp, rcx
.text:0000000000002DB3                 jmp     loc_1F78
.text:0000000000002DB8 ; ---------------------------------------------------------------------------
.text:0000000000002DB8
.text:0000000000002DB8 loc_2DB8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DB8                                         ; DATA XREF: .rodata:jpt_1DE1↓o
.text:0000000000002DB8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000002DBA                 jz      loc_2F48
.text:0000000000002DC0                 lea     rax, asc_486D   ; "'"
.text:0000000000002DC7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002DCC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DD1                 xor     r12d, r12d
.text:0000000000002DD4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DDD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002DE2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002DE7                 mov     [rsp+0E8h+n], 1
.text:0000000000002DF0                 xor     r15d, r15d
.text:0000000000002DF3                 mov     [rsp+0E8h+s2], rax
.text:0000000000002DF8                 jmp     loc_1E23
.text:0000000000002DF8 ; ---------------------------------------------------------------------------
.text:0000000000002DFD                 align 20h
.text:0000000000002E00
.text:0000000000002E00 loc_2E00:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000002E00                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000002E00                 mov     rbp, r11
.text:0000000000002E03                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002E08                 jmp     loc_28D9
.text:0000000000002E0D ; ---------------------------------------------------------------------------
.text:0000000000002E0D
.text:0000000000002E0D loc_2E0D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000002E0D                 lea     rax, unk_486B
.text:0000000000002E14                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E19                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E1E                 xor     r12d, r12d
.text:0000000000002E21                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E2A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002E2F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E34                 mov     [rsp+0E8h+n], 1
.text:0000000000002E3D                 xor     r15d, r15d
.text:0000000000002E40                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E45                 jmp     loc_1E23
.text:0000000000002E4A ; ---------------------------------------------------------------------------
.text:0000000000002E4A
.text:0000000000002E4A loc_2E4A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000002E4A                 mov     eax, edx
.text:0000000000002E4C
.text:0000000000002E4C loc_2E4C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000002E4C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000002E4C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000002E51                 test    rbx, rbx
.text:0000000000002E54                 jz      short loc_2E82
.text:0000000000002E56                 test    al, al
.text:0000000000002E58                 jz      short loc_2E82
.text:0000000000002E5A                 movzx   ecx, byte ptr [rbx]
.text:0000000000002E5D                 mov     rax, rbx
.text:0000000000002E60                 test    cl, cl
.text:0000000000002E62                 jz      short loc_2E82
.text:0000000000002E64                 mov     rdx, r15
.text:0000000000002E67                 sub     rax, r15
.text:0000000000002E6A
.text:0000000000002E6A loc_2E6A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000002E6A                 cmp     r13, rdx
.text:0000000000002E6D                 jbe     short loc_2E73
.text:0000000000002E6F                 mov     [r14+rdx], cl
.text:0000000000002E73
.text:0000000000002E73 loc_2E73:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000002E73                 add     rdx, 1
.text:0000000000002E77                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000002E7B                 test    cl, cl
.text:0000000000002E7D                 jnz     short loc_2E6A
.text:0000000000002E7F                 mov     r15, rdx
.text:0000000000002E82
.text:0000000000002E82 loc_2E82:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000002E82                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000002E82                 cmp     r13, r15
.text:0000000000002E85                 jbe     loc_2929
.text:0000000000002E8B                 mov     byte ptr [r14+r15], 0
.text:0000000000002E90                 jmp     loc_2929
.text:0000000000002E95 ; ---------------------------------------------------------------------------
.text:0000000000002E95
.text:0000000000002E95 loc_2E95:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000002E95                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E9A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002E9F                 mov     rbp, r11
.text:0000000000002EA2                 setz    al
.text:0000000000002EA5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002EA9                 jmp     loc_28D9
.text:0000000000002EAE ; ---------------------------------------------------------------------------
.text:0000000000002EAE
.text:0000000000002EAE loc_2EAE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000002EAE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000002EB2                 mov     rdi, rcx
.text:0000000000002EB5                 call    gettext_quote
.text:0000000000002EBA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002EBF                 jmp     loc_2B16
.text:0000000000002EC4 ; ---------------------------------------------------------------------------
.text:0000000000002EC4
.text:0000000000002EC4 loc_2EC4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000002EC4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000002EC8                 mov     rdi, rcx
.text:0000000000002ECB                 call    gettext_quote
.text:0000000000002ED0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002ED5                 jmp     loc_2B41
.text:0000000000002EDA ; ---------------------------------------------------------------------------
.text:0000000000002EDA
.text:0000000000002EDA loc_2EDA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000002EDA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002EDF                 mov     rbp, r11
.text:0000000000002EE2                 mov     eax, edx
.text:0000000000002EE4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002EE8                 jmp     loc_28D9
.text:0000000000002EED ; ---------------------------------------------------------------------------
.text:0000000000002EED
.text:0000000000002EED loc_2EED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000002EED                 sub     rsp, 8
.text:0000000000002EF1                 mov     r8d, 5
.text:0000000000002EF7                 mov     rcx, r11
.text:0000000000002EFA                 push    [rsp+0F0h+var_88]
.text:0000000000002EFE                 push    [rsp+0F8h+var_80]
.text:0000000000002F02                 mov     rdi, r14
.text:0000000000002F05                 push    [rsp+100h+var_C8]
.text:0000000000002F09                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002F11                 mov     rdx, [rsp+108h+s]
.text:0000000000002F16                 mov     rsi, [rsp+108h+var_98]
.text:0000000000002F1B                 call    quotearg_buffer_restyled
.text:0000000000002F20                 add     rsp, 20h
.text:0000000000002F24                 mov     r15, rax
.text:0000000000002F27                 jmp     loc_2929
.text:0000000000002F2C ; ---------------------------------------------------------------------------
.text:0000000000002F2C
.text:0000000000002F2C loc_2F2C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000002F2C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000002F31                 jmp     loc_2E4C
.text:0000000000002F36 ; ---------------------------------------------------------------------------
.text:0000000000002F36
.text:0000000000002F36 loc_2F36:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000002F36                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002F3E                 jmp     loc_28D9
.text:0000000000002F43 ; ---------------------------------------------------------------------------
.text:0000000000002F43
.text:0000000000002F43 loc_2F43:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000002F43                 call    ___stack_chk_fail
.text:0000000000002F48 ; ---------------------------------------------------------------------------
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000002F48                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002F4D                 jmp     loc_29C1
.text:0000000000002F52 ; ---------------------------------------------------------------------------
.text:0000000000002F52
.text:0000000000002F52 loc_2F52:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000002F52                 mov     rbp, r11
.text:0000000000002F55                 jmp     loc_28F0
.text:0000000000002F5A ; ---------------------------------------------------------------------------
.text:0000000000002F5A
.text:0000000000002F5A loc_2F5A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000002F5A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F5F                 xor     eax, eax
.text:0000000000002F61                 xor     r12d, r12d
.text:0000000000002F64                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F6D                 jmp     loc_2514
.text:0000000000002F72 ; ---------------------------------------------------------------------------
.text:0000000000002F72
.text:0000000000002F72 loc_2F72:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000002F72                 mov     rdx, r13
.text:0000000000002F75                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002F7A                 jmp     loc_2572
.text:0000000000002F7F ; ---------------------------------------------------------------------------
.text:0000000000002F7F
.text:0000000000002F7F def_1DE1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000002F7F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000002F7F ; } // starts at 1D50
.text:0000000000002F7F quotearg_buffer_restyled endp
.text:0000000000002F7F
.text:0000000000002F7F ; ---------------------------------------------------------------------------
.text:0000000000002F84                 align 10h
.text:0000000000002F90
.text:0000000000002F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F90
.text:0000000000002F90
.text:0000000000002F90 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000002F90                                         ; quotearg_n_mem+7↓j ...
.text:0000000000002F90
.text:0000000000002F90 var_50          = qword ptr -50h
.text:0000000000002F90 var_48          = qword ptr -48h
.text:0000000000002F90 var_40          = dword ptr -40h
.text:0000000000002F90 var_3C          = dword ptr -3Ch
.text:0000000000002F90
.text:0000000000002F90 ; __unwind {
.text:0000000000002F90                 push    r15
.text:0000000000002F92                 push    r14
.text:0000000000002F94                 movsxd  r15, edi
.text:0000000000002F97                 push    r13
.text:0000000000002F99                 push    r12
.text:0000000000002F9B                 mov     r14, rdx
.text:0000000000002F9E                 push    rbp
.text:0000000000002F9F                 push    rbx
.text:0000000000002FA0                 mov     rbp, rcx
.text:0000000000002FA3                 sub     rsp, 28h
.text:0000000000002FA7                 mov     [rsp+58h+var_50], rsi
.text:0000000000002FAC                 call    ___errno_location
.text:0000000000002FB1                 mov     r13, rax
.text:0000000000002FB4                 mov     eax, [rax]
.text:0000000000002FB6                 test    r15d, r15d
.text:0000000000002FB9                 mov     rbx, cs:slotvec
.text:0000000000002FC0                 mov     [rsp+58h+var_40], eax
.text:0000000000002FC4                 js      loc_3131
.text:0000000000002FCA                 cmp     cs:nslots, r15d
.text:0000000000002FD1                 jg      short loc_3035
.text:0000000000002FD3                 cmp     r15d, 7FFFFFFFh
.text:0000000000002FDA                 jz      loc_3136
.text:0000000000002FE0                 lea     r12d, [r15+1]
.text:0000000000002FE4                 lea     rax, slotvec0
.text:0000000000002FEB                 movsxd  rsi, r12d
.text:0000000000002FEE                 shl     rsi, 4
.text:0000000000002FF2                 cmp     rbx, rax
.text:0000000000002FF5                 jz      loc_3110
.text:0000000000002FFB                 mov     rdi, rbx
.text:0000000000002FFE                 call    xrealloc
.text:0000000000003003                 mov     rbx, rax
.text:0000000000003006                 mov     cs:slotvec, rax
.text:000000000000300D
.text:000000000000300D loc_300D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000300D                 movsxd  rdi, cs:nslots
.text:0000000000003014                 mov     edx, r12d
.text:0000000000003017                 xor     esi, esi        ; c
.text:0000000000003019                 sub     edx, edi
.text:000000000000301B                 shl     rdi, 4
.text:000000000000301F                 movsxd  rdx, edx
.text:0000000000003022                 add     rdi, rbx        ; s
.text:0000000000003025                 shl     rdx, 4          ; n
.text:0000000000003029                 call    _memset
.text:000000000000302E                 mov     cs:nslots, r12d
.text:0000000000003035
.text:0000000000003035 loc_3035:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003035                 mov     eax, [rbp+4]
.text:0000000000003038                 shl     r15, 4
.text:000000000000303C                 sub     rsp, 8
.text:0000000000003040                 add     rbx, r15
.text:0000000000003043                 lea     r15, [rbp+8]
.text:0000000000003047                 mov     r8d, [rbp+0]
.text:000000000000304B                 mov     r11, [rbx]
.text:000000000000304E                 mov     r12, [rbx+8]
.text:0000000000003052                 mov     rcx, r14
.text:0000000000003055                 or      eax, 1
.text:0000000000003058                 mov     [rsp+60h+var_3C], eax
.text:000000000000305C                 push    qword ptr [rbp+30h]
.text:000000000000305F                 mov     r9d, eax
.text:0000000000003062                 push    qword ptr [rbp+28h]
.text:0000000000003065                 push    r15
.text:0000000000003067                 mov     rsi, r11
.text:000000000000306A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000306F                 mov     rdi, r12
.text:0000000000003072                 mov     [rsp+78h+var_48], r11
.text:0000000000003077                 call    quotearg_buffer_restyled
.text:000000000000307C                 add     rsp, 20h
.text:0000000000003080                 mov     r11, [rsp+58h+var_48]
.text:0000000000003085                 cmp     r11, rax
.text:0000000000003088                 ja      short loc_30F1
.text:000000000000308A                 lea     rsi, [rax+1]
.text:000000000000308E                 lea     rax, slot0
.text:0000000000003095                 cmp     r12, rax
.text:0000000000003098                 mov     [rbx], rsi
.text:000000000000309B                 jz      short loc_30AF
.text:000000000000309D                 mov     rdi, r12        ; ptr
.text:00000000000030A0                 mov     [rsp+58h+var_48], rsi
.text:00000000000030A5                 call    _free
.text:00000000000030AA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000030AF
.text:00000000000030AF loc_30AF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000030AF                 mov     rdi, rsi
.text:00000000000030B2                 mov     [rsp+58h+var_48], rsi
.text:00000000000030B7                 call    xmalloc
.text:00000000000030BC                 sub     rsp, 8
.text:00000000000030C0                 mov     [rbx+8], rax
.text:00000000000030C4                 mov     r8d, [rbp+0]
.text:00000000000030C8                 push    qword ptr [rbp+30h]
.text:00000000000030CB                 push    qword ptr [rbp+28h]
.text:00000000000030CE                 mov     rcx, r14
.text:00000000000030D1                 push    r15
.text:00000000000030D3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000030D8                 mov     rdi, rax
.text:00000000000030DB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000030E0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000030E5                 mov     r12, rax
.text:00000000000030E8                 call    quotearg_buffer_restyled
.text:00000000000030ED                 add     rsp, 20h
.text:00000000000030F1
.text:00000000000030F1 loc_30F1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000030F1                 mov     eax, [rsp+58h+var_40]
.text:00000000000030F5                 mov     [r13+0], eax
.text:00000000000030F9                 add     rsp, 28h
.text:00000000000030FD                 mov     rax, r12
.text:0000000000003100                 pop     rbx
.text:0000000000003101                 pop     rbp
.text:0000000000003102                 pop     r12
.text:0000000000003104                 pop     r13
.text:0000000000003106                 pop     r14
.text:0000000000003108                 pop     r15
.text:000000000000310A                 retn
.text:000000000000310A ; ---------------------------------------------------------------------------
.text:000000000000310B                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003110                 xor     edi, edi
.text:0000000000003112                 call    xrealloc
.text:0000000000003117                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000311F                 mov     rbx, rax
.text:0000000000003122                 mov     cs:slotvec, rax
.text:0000000000003129                 movups  xmmword ptr [rax], xmm0
.text:000000000000312C                 jmp     loc_300D
.text:0000000000003131 ; ---------------------------------------------------------------------------
.text:0000000000003131
.text:0000000000003131 loc_3131:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003131                 call    _abort
.text:0000000000003136 ; ---------------------------------------------------------------------------
.text:0000000000003136
.text:0000000000003136 loc_3136:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003136                 call    xalloc_die
.text:0000000000003136 ; } // starts at 2F90
.text:0000000000003136 quotearg_n_options endp
.text:0000000000003136
.text:0000000000003136 ; ---------------------------------------------------------------------------
.text:000000000000313B                 align 20h
.text:0000000000003140
.text:0000000000003140 ; =============== S U B R O U T I N E =======================================
.text:0000000000003140
.text:0000000000003140 ; Attributes: info_from_lumina
.text:0000000000003140
.text:0000000000003140 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003140                 public clone_quoting_options
.text:0000000000003140 clone_quoting_options proc near
.text:0000000000003140 ; __unwind {
.text:0000000000003140                 push    r12
.text:0000000000003142                 push    rbp
.text:0000000000003143                 push    rbx
.text:0000000000003144                 mov     rbx, rdi
.text:0000000000003147                 call    ___errno_location
.text:000000000000314C                 mov     r12d, [rax]
.text:000000000000314F                 mov     rbp, rax
.text:0000000000003152                 lea     rax, default_quoting_options
.text:0000000000003159                 test    rbx, rbx
.text:000000000000315C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003161                 cmovz   rbx, rax
.text:0000000000003165                 mov     rdi, rbx        ; src
.text:0000000000003168                 call    xmemdup
.text:000000000000316D                 mov     [rbp+0], r12d
.text:0000000000003171                 pop     rbx
.text:0000000000003172                 pop     rbp
.text:0000000000003173                 pop     r12
.text:0000000000003175                 retn
.text:0000000000003175 ; } // starts at 3140
.text:0000000000003175 clone_quoting_options endp
.text:0000000000003175
.text:0000000000003175 ; ---------------------------------------------------------------------------
.text:0000000000003176                 align 20h
.text:0000000000003180
.text:0000000000003180 ; =============== S U B R O U T I N E =======================================
.text:0000000000003180
.text:0000000000003180
.text:0000000000003180                 public get_quoting_style
.text:0000000000003180 get_quoting_style proc near
.text:0000000000003180 ; __unwind {
.text:0000000000003180                 lea     rax, default_quoting_options
.text:0000000000003187                 test    rdi, rdi
.text:000000000000318A                 cmovz   rdi, rax
.text:000000000000318E                 mov     eax, [rdi]
.text:0000000000003190                 retn
.text:0000000000003190 ; } // starts at 3180
.text:0000000000003190 get_quoting_style endp
.text:0000000000003190
.text:0000000000003190 ; ---------------------------------------------------------------------------
.text:0000000000003191                 align 20h
.text:00000000000031A0
.text:00000000000031A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031A0
.text:00000000000031A0
.text:00000000000031A0                 public set_quoting_style
.text:00000000000031A0 set_quoting_style proc near
.text:00000000000031A0 ; __unwind {
.text:00000000000031A0                 lea     rax, default_quoting_options
.text:00000000000031A7                 test    rdi, rdi
.text:00000000000031AA                 cmovz   rdi, rax
.text:00000000000031AE                 mov     [rdi], esi
.text:00000000000031B0                 retn
.text:00000000000031B0 ; } // starts at 31A0
.text:00000000000031B0 set_quoting_style endp
.text:00000000000031B0
.text:00000000000031B0 ; ---------------------------------------------------------------------------
.text:00000000000031B1                 align 20h
.text:00000000000031C0
.text:00000000000031C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031C0
.text:00000000000031C0 ; Attributes: info_from_lumina
.text:00000000000031C0
.text:00000000000031C0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000031C0                 public set_char_quoting
.text:00000000000031C0 set_char_quoting proc near
.text:00000000000031C0 ; __unwind {
.text:00000000000031C0                 lea     rax, default_quoting_options
.text:00000000000031C7                 test    rdi, rdi
.text:00000000000031CA                 mov     ecx, esi
.text:00000000000031CC                 cmovz   rdi, rax
.text:00000000000031D0                 mov     eax, esi
.text:00000000000031D2                 and     ecx, 1Fh
.text:00000000000031D5                 shr     al, 5
.text:00000000000031D8                 movzx   eax, al
.text:00000000000031DB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000031E0                 mov     esi, [rdi]
.text:00000000000031E2                 mov     eax, esi
.text:00000000000031E4                 shr     eax, cl
.text:00000000000031E6                 xor     edx, eax
.text:00000000000031E8                 and     eax, 1
.text:00000000000031EB                 and     edx, 1
.text:00000000000031EE                 shl     edx, cl
.text:00000000000031F0                 xor     edx, esi
.text:00000000000031F2                 mov     [rdi], edx
.text:00000000000031F4                 retn
.text:00000000000031F4 ; } // starts at 31C0
.text:00000000000031F4 set_char_quoting endp
.text:00000000000031F4
.text:00000000000031F4 ; ---------------------------------------------------------------------------
.text:00000000000031F5                 align 20h
.text:0000000000003200
.text:0000000000003200 ; =============== S U B R O U T I N E =======================================
.text:0000000000003200
.text:0000000000003200
.text:0000000000003200                 public set_quoting_flags
.text:0000000000003200 set_quoting_flags proc near
.text:0000000000003200 ; __unwind {
.text:0000000000003200                 lea     rax, default_quoting_options
.text:0000000000003207                 test    rdi, rdi
.text:000000000000320A                 cmovz   rdi, rax
.text:000000000000320E                 mov     eax, [rdi+4]
.text:0000000000003211                 mov     [rdi+4], esi
.text:0000000000003214                 retn
.text:0000000000003214 ; } // starts at 3200
.text:0000000000003214 set_quoting_flags endp
.text:0000000000003214
.text:0000000000003214 ; ---------------------------------------------------------------------------
.text:0000000000003215                 align 20h
.text:0000000000003220
.text:0000000000003220 ; =============== S U B R O U T I N E =======================================
.text:0000000000003220
.text:0000000000003220 ; Attributes: info_from_lumina
.text:0000000000003220
.text:0000000000003220 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003220                 public set_custom_quoting
.text:0000000000003220 set_custom_quoting proc near
.text:0000000000003220 ; __unwind {
.text:0000000000003220                 lea     rax, default_quoting_options
.text:0000000000003227                 test    rdi, rdi
.text:000000000000322A                 cmovz   rdi, rax
.text:000000000000322E                 test    rsi, rsi
.text:0000000000003231                 mov     dword ptr [rdi], 0Ah
.text:0000000000003237                 jz      short loc_3247
.text:0000000000003239                 test    rdx, rdx
.text:000000000000323C                 jz      short loc_3247
.text:000000000000323E                 mov     [rdi+28h], rsi
.text:0000000000003242                 mov     [rdi+30h], rdx
.text:0000000000003246                 retn
.text:0000000000003247 ; ---------------------------------------------------------------------------
.text:0000000000003247
.text:0000000000003247 loc_3247:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003247                                         ; set_custom_quoting+1C↑j
.text:0000000000003247                 sub     rsp, 8
.text:000000000000324B                 call    _abort
.text:000000000000324B ; } // starts at 3220
.text:000000000000324B set_custom_quoting endp
.text:000000000000324B
.text:0000000000003250
.text:0000000000003250 ; =============== S U B R O U T I N E =======================================
.text:0000000000003250
.text:0000000000003250 ; Attributes: info_from_lumina
.text:0000000000003250
.text:0000000000003250 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003250                 public quotearg_buffer
.text:0000000000003250 quotearg_buffer proc near
.text:0000000000003250
.text:0000000000003250 var_40          = qword ptr -40h
.text:0000000000003250
.text:0000000000003250 ; __unwind {
.text:0000000000003250                 push    r15
.text:0000000000003252                 push    r14
.text:0000000000003254                 lea     rax, default_quoting_options
.text:000000000000325B                 push    r13
.text:000000000000325D                 push    r12
.text:000000000000325F                 mov     r13, rdi
.text:0000000000003262                 push    rbp
.text:0000000000003263                 push    rbx
.text:0000000000003264                 mov     rbx, r8
.text:0000000000003267                 mov     r14, rsi
.text:000000000000326A                 mov     r15, rdx
.text:000000000000326D                 sub     rsp, 18h
.text:0000000000003271                 test    r8, r8
.text:0000000000003274                 cmovz   rbx, rax
.text:0000000000003278                 mov     [rsp+48h+var_40], rcx
.text:000000000000327D                 call    ___errno_location
.text:0000000000003282                 mov     r12d, [rax]
.text:0000000000003285                 mov     rbp, rax
.text:0000000000003288                 lea     rax, [rbx+8]
.text:000000000000328C                 sub     rsp, 8
.text:0000000000003290                 mov     r9d, [rbx+4]
.text:0000000000003294                 push    qword ptr [rbx+30h]
.text:0000000000003297                 mov     r8d, [rbx]
.text:000000000000329A                 push    qword ptr [rbx+28h]
.text:000000000000329D                 mov     rdx, r15
.text:00000000000032A0                 push    rax
.text:00000000000032A1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000032A6                 mov     rsi, r14
.text:00000000000032A9                 mov     rdi, r13
.text:00000000000032AC                 call    quotearg_buffer_restyled
.text:00000000000032B1                 mov     [rbp+0], r12d
.text:00000000000032B5                 add     rsp, 38h
.text:00000000000032B9                 pop     rbx
.text:00000000000032BA                 pop     rbp
.text:00000000000032BB                 pop     r12
.text:00000000000032BD                 pop     r13
.text:00000000000032BF                 pop     r14
.text:00000000000032C1                 pop     r15
.text:00000000000032C3                 retn
.text:00000000000032C3 ; } // starts at 3250
.text:00000000000032C3 quotearg_buffer endp
.text:00000000000032C3
.text:00000000000032C3 ; ---------------------------------------------------------------------------
.text:00000000000032C4                 align 10h
.text:00000000000032D0
.text:00000000000032D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032D0
.text:00000000000032D0 ; Attributes: info_from_lumina
.text:00000000000032D0
.text:00000000000032D0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000032D0                 public quotearg_alloc_mem
.text:00000000000032D0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000032D0
.text:00000000000032D0 var_5C          = dword ptr -5Ch
.text:00000000000032D0 var_58          = qword ptr -58h
.text:00000000000032D0 var_50          = qword ptr -50h
.text:00000000000032D0 var_48          = qword ptr -48h
.text:00000000000032D0 var_40          = qword ptr -40h
.text:00000000000032D0
.text:00000000000032D0 ; __unwind {
.text:00000000000032D0                 push    r15
.text:00000000000032D2                 push    r14
.text:00000000000032D4                 lea     rax, default_quoting_options
.text:00000000000032DB                 push    r13
.text:00000000000032DD                 push    r12
.text:00000000000032DF                 mov     r12, rdx
.text:00000000000032E2                 push    rbp
.text:00000000000032E3                 push    rbx
.text:00000000000032E4                 mov     rbx, rcx
.text:00000000000032E7                 mov     r14, rdi
.text:00000000000032EA                 mov     r15, rsi
.text:00000000000032ED                 sub     rsp, 38h
.text:00000000000032F1                 test    rcx, rcx
.text:00000000000032F4                 cmovz   rbx, rax
.text:00000000000032F8                 xor     ebp, ebp
.text:00000000000032FA                 call    ___errno_location
.text:00000000000032FF                 test    r12, r12
.text:0000000000003302                 mov     r13, rax
.text:0000000000003305                 mov     eax, [rax]
.text:0000000000003307                 setz    bpl
.text:000000000000330B                 or      ebp, [rbx+4]
.text:000000000000330E                 lea     r10, [rbx+8]
.text:0000000000003312                 sub     rsp, 8
.text:0000000000003316                 mov     r8d, [rbx]
.text:0000000000003319                 mov     rcx, r15
.text:000000000000331C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003320                 push    qword ptr [rbx+30h]
.text:0000000000003323                 mov     rdx, r14
.text:0000000000003326                 push    qword ptr [rbx+28h]
.text:0000000000003329                 push    r10
.text:000000000000332B                 xor     esi, esi
.text:000000000000332D                 mov     r9d, ebp
.text:0000000000003330                 xor     edi, edi
.text:0000000000003332                 mov     [rsp+88h+var_48], r10
.text:0000000000003337                 call    quotearg_buffer_restyled
.text:000000000000333C                 lea     rsi, [rax+1]
.text:0000000000003340                 mov     [rsp+88h+var_40], rax
.text:0000000000003345                 add     rsp, 20h
.text:0000000000003349                 mov     rdi, rsi
.text:000000000000334C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003351                 call    xmalloc
.text:0000000000003356                 mov     [rsp+68h+var_58], rax
.text:000000000000335B                 sub     rsp, 8
.text:000000000000335F                 push    qword ptr [rbx+30h]
.text:0000000000003362                 push    qword ptr [rbx+28h]
.text:0000000000003365                 mov     r10, [rsp+80h+var_48]
.text:000000000000336A                 mov     r9d, ebp
.text:000000000000336D                 mov     r8d, [rbx]
.text:0000000000003370                 mov     rcx, r15
.text:0000000000003373                 mov     rdx, r14
.text:0000000000003376                 mov     rdi, rax
.text:0000000000003379                 push    r10
.text:000000000000337B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003380                 call    quotearg_buffer_restyled
.text:0000000000003385                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003389                 add     rsp, 20h
.text:000000000000338D                 test    r12, r12
.text:0000000000003390                 mov     [r13+0], eax
.text:0000000000003394                 jz      short loc_339F
.text:0000000000003396                 mov     r11, [rsp+68h+var_40]
.text:000000000000339B                 mov     [r12], r11
.text:000000000000339F
.text:000000000000339F loc_339F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000339F                 mov     rax, [rsp+68h+var_58]
.text:00000000000033A4                 add     rsp, 38h
.text:00000000000033A8                 pop     rbx
.text:00000000000033A9                 pop     rbp
.text:00000000000033AA                 pop     r12
.text:00000000000033AC                 pop     r13
.text:00000000000033AE                 pop     r14
.text:00000000000033B0                 pop     r15
.text:00000000000033B2                 retn
.text:00000000000033B2 ; } // starts at 32D0
.text:00000000000033B2 quotearg_alloc_mem endp
.text:00000000000033B2
.text:00000000000033B2 ; ---------------------------------------------------------------------------
.text:00000000000033B3                 align 20h
.text:00000000000033C0
.text:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033C0
.text:00000000000033C0
.text:00000000000033C0                 public quotearg_alloc
.text:00000000000033C0 quotearg_alloc  proc near
.text:00000000000033C0 ; __unwind {
.text:00000000000033C0                 mov     rcx, rdx
.text:00000000000033C3                 xor     edx, edx
.text:00000000000033C5                 jmp     quotearg_alloc_mem
.text:00000000000033C5 ; } // starts at 33C0
.text:00000000000033C5 quotearg_alloc  endp
.text:00000000000033C5
.text:00000000000033C5 ; ---------------------------------------------------------------------------
.text:00000000000033CA                 align 10h
.text:00000000000033D0
.text:00000000000033D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033D0
.text:00000000000033D0 ; Attributes: info_from_lumina
.text:00000000000033D0
.text:00000000000033D0 ; void __cdecl quotearg_free()
.text:00000000000033D0                 public quotearg_free
.text:00000000000033D0 quotearg_free   proc near
.text:00000000000033D0 ; __unwind {
.text:00000000000033D0                 mov     eax, cs:nslots
.text:00000000000033D6                 push    r12
.text:00000000000033D8                 mov     r12, cs:slotvec
.text:00000000000033DF                 push    rbp
.text:00000000000033E0                 push    rbx
.text:00000000000033E1                 cmp     eax, 1
.text:00000000000033E4                 jle     short loc_3411
.text:00000000000033E6                 sub     eax, 2
.text:00000000000033E9                 lea     rbx, [r12+18h]
.text:00000000000033EE                 shl     rax, 4
.text:00000000000033F2                 lea     rbp, [r12+rax+28h]
.text:00000000000033F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003400                 mov     rdi, [rbx]      ; ptr
.text:0000000000003403                 add     rbx, 10h
.text:0000000000003407                 call    _free
.text:000000000000340C                 cmp     rbx, rbp
.text:000000000000340F                 jnz     short loc_3400
.text:0000000000003411
.text:0000000000003411 loc_3411:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003411                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003416                 lea     rbx, slot0
.text:000000000000341D                 cmp     rdi, rbx
.text:0000000000003420                 jz      short loc_3439
.text:0000000000003422                 call    _free
.text:0000000000003427                 mov     cs:slotvec0, 100h
.text:0000000000003432                 mov     cs:off_207078, rbx
.text:0000000000003439
.text:0000000000003439 loc_3439:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003439                 lea     rbx, slotvec0
.text:0000000000003440                 cmp     r12, rbx
.text:0000000000003443                 jz      short loc_3454
.text:0000000000003445                 mov     rdi, r12        ; ptr
.text:0000000000003448                 call    _free
.text:000000000000344D                 mov     cs:slotvec, rbx
.text:0000000000003454
.text:0000000000003454 loc_3454:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003454                 pop     rbx
.text:0000000000003455                 mov     cs:nslots, 1
.text:000000000000345F                 pop     rbp
.text:0000000000003460                 pop     r12
.text:0000000000003462                 retn
.text:0000000000003462 ; } // starts at 33D0
.text:0000000000003462 quotearg_free   endp
.text:0000000000003462
.text:0000000000003462 ; ---------------------------------------------------------------------------
.text:0000000000003463                 align 10h
.text:0000000000003470
.text:0000000000003470 ; =============== S U B R O U T I N E =======================================
.text:0000000000003470
.text:0000000000003470
.text:0000000000003470                 public quotearg_n
.text:0000000000003470 quotearg_n      proc near
.text:0000000000003470 ; __unwind {
.text:0000000000003470                 lea     rcx, default_quoting_options
.text:0000000000003477                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000347E                 jmp     quotearg_n_options
.text:000000000000347E ; } // starts at 3470
.text:000000000000347E quotearg_n      endp
.text:000000000000347E
.text:000000000000347E ; ---------------------------------------------------------------------------
.text:0000000000003483                 align 10h
.text:0000000000003490
.text:0000000000003490 ; =============== S U B R O U T I N E =======================================
.text:0000000000003490
.text:0000000000003490
.text:0000000000003490                 public quotearg_n_mem
.text:0000000000003490 quotearg_n_mem  proc near
.text:0000000000003490 ; __unwind {
.text:0000000000003490                 lea     rcx, default_quoting_options
.text:0000000000003497                 jmp     quotearg_n_options
.text:0000000000003497 ; } // starts at 3490
.text:0000000000003497 quotearg_n_mem  endp
.text:0000000000003497
.text:0000000000003497 ; ---------------------------------------------------------------------------
.text:000000000000349C                 align 20h
.text:00000000000034A0
.text:00000000000034A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034A0
.text:00000000000034A0
.text:00000000000034A0                 public quotearg
.text:00000000000034A0 quotearg        proc near
.text:00000000000034A0 ; __unwind {
.text:00000000000034A0                 lea     rcx, default_quoting_options
.text:00000000000034A7                 mov     rsi, rdi
.text:00000000000034AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000034B1                 xor     edi, edi
.text:00000000000034B3                 jmp     quotearg_n_options
.text:00000000000034B3 ; } // starts at 34A0
.text:00000000000034B3 quotearg        endp
.text:00000000000034B3
.text:00000000000034B3 ; ---------------------------------------------------------------------------
.text:00000000000034B8                 align 20h
.text:00000000000034C0
.text:00000000000034C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034C0
.text:00000000000034C0
.text:00000000000034C0                 public quotearg_mem
.text:00000000000034C0 quotearg_mem    proc near
.text:00000000000034C0 ; __unwind {
.text:00000000000034C0                 lea     rcx, default_quoting_options
.text:00000000000034C7                 mov     rdx, rsi
.text:00000000000034CA                 mov     rsi, rdi
.text:00000000000034CD                 xor     edi, edi
.text:00000000000034CF                 jmp     quotearg_n_options
.text:00000000000034CF ; } // starts at 34C0
.text:00000000000034CF quotearg_mem    endp
.text:00000000000034CF
.text:00000000000034CF ; ---------------------------------------------------------------------------
.text:00000000000034D4                 align 20h
.text:00000000000034E0
.text:00000000000034E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034E0
.text:00000000000034E0 ; Attributes: info_from_lumina
.text:00000000000034E0
.text:00000000000034E0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000034E0                 public quotearg_n_style
.text:00000000000034E0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000034E0
.text:00000000000034E0 var_48          = dword ptr -48h
.text:00000000000034E0 var_44          = qword ptr -44h
.text:00000000000034E0 var_3C          = qword ptr -3Ch
.text:00000000000034E0 var_34          = qword ptr -34h
.text:00000000000034E0 var_2C          = qword ptr -2Ch
.text:00000000000034E0 var_24          = qword ptr -24h
.text:00000000000034E0 var_1C          = qword ptr -1Ch
.text:00000000000034E0 var_14          = dword ptr -14h
.text:00000000000034E0 var_10          = qword ptr -10h
.text:00000000000034E0
.text:00000000000034E0 ; __unwind {
.text:00000000000034E0                 sub     rsp, 48h
.text:00000000000034E4                 mov     rax, rdx
.text:00000000000034E7                 mov     rdx, fs:28h
.text:00000000000034F0                 mov     [rsp+48h+var_10], rdx
.text:00000000000034F5                 xor     edx, edx
.text:00000000000034F7                 cmp     esi, 0Ah
.text:00000000000034FA                 jz      short loc_3564
.text:00000000000034FC                 mov     [rsp+48h+var_48], esi
.text:00000000000034FF                 mov     rcx, rsp
.text:0000000000003502                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003509                 mov     rsi, rax
.text:000000000000350C                 mov     [rsp+48h+var_44], 0
.text:0000000000003515                 mov     [rsp+48h+var_3C], 0
.text:000000000000351E                 mov     [rsp+48h+var_34], 0
.text:0000000000003527                 mov     [rsp+48h+var_2C], 0
.text:0000000000003530                 mov     [rsp+48h+var_24], 0
.text:0000000000003539                 mov     [rsp+48h+var_1C], 0
.text:0000000000003542                 mov     [rsp+48h+var_14], 0
.text:000000000000354A                 call    quotearg_n_options
.text:000000000000354F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003554                 xor     rcx, fs:28h
.text:000000000000355D                 jnz     short loc_3569
.text:000000000000355F                 add     rsp, 48h
.text:0000000000003563                 retn
.text:0000000000003564 ; ---------------------------------------------------------------------------
.text:0000000000003564
.text:0000000000003564 loc_3564:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003564                 call    _abort
.text:0000000000003569 ; ---------------------------------------------------------------------------
.text:0000000000003569
.text:0000000000003569 loc_3569:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003569                 call    ___stack_chk_fail
.text:0000000000003569 ; } // starts at 34E0
.text:0000000000003569 quotearg_n_style endp
.text:0000000000003569
.text:0000000000003569 ; ---------------------------------------------------------------------------
.text:000000000000356E                 align 10h
.text:0000000000003570
.text:0000000000003570 ; =============== S U B R O U T I N E =======================================
.text:0000000000003570
.text:0000000000003570 ; Attributes: info_from_lumina
.text:0000000000003570
.text:0000000000003570 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003570                 public quotearg_n_style_mem
.text:0000000000003570 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003570
.text:0000000000003570 var_48          = dword ptr -48h
.text:0000000000003570 var_44          = qword ptr -44h
.text:0000000000003570 var_3C          = qword ptr -3Ch
.text:0000000000003570 var_34          = qword ptr -34h
.text:0000000000003570 var_2C          = qword ptr -2Ch
.text:0000000000003570 var_24          = qword ptr -24h
.text:0000000000003570 var_1C          = qword ptr -1Ch
.text:0000000000003570 var_14          = dword ptr -14h
.text:0000000000003570 var_10          = qword ptr -10h
.text:0000000000003570
.text:0000000000003570 ; __unwind {
.text:0000000000003570                 sub     rsp, 48h
.text:0000000000003574                 mov     rax, rdx
.text:0000000000003577                 mov     rdx, rcx
.text:000000000000357A                 mov     rcx, fs:28h
.text:0000000000003583                 mov     [rsp+48h+var_10], rcx
.text:0000000000003588                 xor     ecx, ecx
.text:000000000000358A                 cmp     esi, 0Ah
.text:000000000000358D                 jz      short loc_35F0
.text:000000000000358F                 mov     [rsp+48h+var_48], esi
.text:0000000000003592                 mov     rcx, rsp
.text:0000000000003595                 mov     rsi, rax
.text:0000000000003598                 mov     [rsp+48h+var_44], 0
.text:00000000000035A1                 mov     [rsp+48h+var_3C], 0
.text:00000000000035AA                 mov     [rsp+48h+var_34], 0
.text:00000000000035B3                 mov     [rsp+48h+var_2C], 0
.text:00000000000035BC                 mov     [rsp+48h+var_24], 0
.text:00000000000035C5                 mov     [rsp+48h+var_1C], 0
.text:00000000000035CE                 mov     [rsp+48h+var_14], 0
.text:00000000000035D6                 call    quotearg_n_options
.text:00000000000035DB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000035E0                 xor     rdx, fs:28h
.text:00000000000035E9                 jnz     short loc_35F5
.text:00000000000035EB                 add     rsp, 48h
.text:00000000000035EF                 retn
.text:00000000000035F0 ; ---------------------------------------------------------------------------
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000035F0                 call    _abort
.text:00000000000035F5 ; ---------------------------------------------------------------------------
.text:00000000000035F5
.text:00000000000035F5 loc_35F5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000035F5                 call    ___stack_chk_fail
.text:00000000000035F5 ; } // starts at 3570
.text:00000000000035F5 quotearg_n_style_mem endp
.text:00000000000035F5
.text:00000000000035F5 ; ---------------------------------------------------------------------------
.text:00000000000035FA                 align 20h
.text:0000000000003600
.text:0000000000003600 ; =============== S U B R O U T I N E =======================================
.text:0000000000003600
.text:0000000000003600
.text:0000000000003600                 public quotearg_style
.text:0000000000003600 quotearg_style  proc near
.text:0000000000003600 ; __unwind {
.text:0000000000003600                 mov     rdx, rsi
.text:0000000000003603                 mov     esi, edi
.text:0000000000003605                 xor     edi, edi
.text:0000000000003607                 jmp     quotearg_n_style
.text:0000000000003607 ; } // starts at 3600
.text:0000000000003607 quotearg_style  endp
.text:0000000000003607
.text:0000000000003607 ; ---------------------------------------------------------------------------
.text:000000000000360C                 align 10h
.text:0000000000003610
.text:0000000000003610 ; =============== S U B R O U T I N E =======================================
.text:0000000000003610
.text:0000000000003610
.text:0000000000003610                 public quotearg_style_mem
.text:0000000000003610 quotearg_style_mem proc near
.text:0000000000003610 ; __unwind {
.text:0000000000003610                 mov     rcx, rdx
.text:0000000000003613                 mov     rdx, rsi
.text:0000000000003616                 mov     esi, edi
.text:0000000000003618                 xor     edi, edi
.text:000000000000361A                 jmp     quotearg_n_style_mem
.text:000000000000361A ; } // starts at 3610
.text:000000000000361A quotearg_style_mem endp
.text:000000000000361A
.text:000000000000361A ; ---------------------------------------------------------------------------
.text:000000000000361F                 align 20h
.text:0000000000003620
.text:0000000000003620 ; =============== S U B R O U T I N E =======================================
.text:0000000000003620
.text:0000000000003620 ; Attributes: info_from_lumina
.text:0000000000003620
.text:0000000000003620 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003620                 public quotearg_char_mem
.text:0000000000003620 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003620                                         ; quotearg_colon+C↓j ...
.text:0000000000003620
.text:0000000000003620 var_48          = xmmword ptr -48h
.text:0000000000003620 var_38          = xmmword ptr -38h
.text:0000000000003620 var_28          = xmmword ptr -28h
.text:0000000000003620 var_18          = qword ptr -18h
.text:0000000000003620 var_10          = qword ptr -10h
.text:0000000000003620
.text:0000000000003620 ; __unwind {
.text:0000000000003620                 sub     rsp, 48h
.text:0000000000003624                 mov     ecx, edx
.text:0000000000003626                 mov     rax, fs:28h
.text:000000000000362F                 mov     [rsp+48h+var_10], rax
.text:0000000000003634                 xor     eax, eax
.text:0000000000003636                 mov     rax, cs:qword_207210
.text:000000000000363D                 mov     r8, rsp
.text:0000000000003640                 and     ecx, 1Fh
.text:0000000000003643                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000364B                 mov     [rsp+48h+var_18], rax
.text:0000000000003650                 mov     eax, edx
.text:0000000000003652                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003656                 shr     al, 5
.text:0000000000003659                 movzx   eax, al
.text:000000000000365C                 lea     r9, [r8+rax*4+8]
.text:0000000000003661                 movdqa  xmm0, cs:xmmword_2071F0
.text:0000000000003669                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000366E                 movdqa  xmm0, cs:xmmword_207200
.text:0000000000003676                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000367B                 mov     edx, [r9]
.text:000000000000367E                 mov     eax, edx
.text:0000000000003680                 shr     eax, cl
.text:0000000000003682                 not     eax
.text:0000000000003684                 and     eax, 1
.text:0000000000003687                 shl     eax, cl
.text:0000000000003689                 mov     rcx, r8
.text:000000000000368C                 xor     eax, edx
.text:000000000000368E                 mov     rdx, rsi
.text:0000000000003691                 mov     rsi, rdi
.text:0000000000003694                 mov     [r9], eax
.text:0000000000003697                 xor     edi, edi
.text:0000000000003699                 call    quotearg_n_options
.text:000000000000369E                 mov     rsi, [rsp+48h+var_10]
.text:00000000000036A3                 xor     rsi, fs:28h
.text:00000000000036AC                 jnz     short loc_36B3
.text:00000000000036AE                 add     rsp, 48h
.text:00000000000036B2                 retn
.text:00000000000036B3 ; ---------------------------------------------------------------------------
.text:00000000000036B3
.text:00000000000036B3 loc_36B3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000036B3                 call    ___stack_chk_fail
.text:00000000000036B3 ; } // starts at 3620
.text:00000000000036B3 quotearg_char_mem endp
.text:00000000000036B3
.text:00000000000036B3 ; ---------------------------------------------------------------------------
.text:00000000000036B8                 align 20h
.text:00000000000036C0
.text:00000000000036C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036C0
.text:00000000000036C0
.text:00000000000036C0                 public quotearg_char
.text:00000000000036C0 quotearg_char   proc near
.text:00000000000036C0 ; __unwind {
.text:00000000000036C0                 movsx   edx, sil
.text:00000000000036C4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000036CB                 jmp     quotearg_char_mem
.text:00000000000036CB ; } // starts at 36C0
.text:00000000000036CB quotearg_char   endp
.text:00000000000036CB
.text:00000000000036D0
.text:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036D0
.text:00000000000036D0
.text:00000000000036D0                 public quotearg_colon
.text:00000000000036D0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000036D0 ; __unwind {
.text:00000000000036D0                 mov     edx, 3Ah ; ':'
.text:00000000000036D5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000036DC                 jmp     quotearg_char_mem
.text:00000000000036DC ; } // starts at 36D0
.text:00000000000036DC quotearg_colon  endp
.text:00000000000036DC
.text:00000000000036DC ; ---------------------------------------------------------------------------
.text:00000000000036E1                 align 10h
.text:00000000000036F0
.text:00000000000036F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036F0
.text:00000000000036F0
.text:00000000000036F0                 public quotearg_colon_mem
.text:00000000000036F0 quotearg_colon_mem proc near
.text:00000000000036F0 ; __unwind {
.text:00000000000036F0                 mov     edx, 3Ah ; ':'
.text:00000000000036F5                 jmp     quotearg_char_mem
.text:00000000000036F5 ; } // starts at 36F0
.text:00000000000036F5 quotearg_colon_mem endp
.text:00000000000036F5
.text:00000000000036F5 ; ---------------------------------------------------------------------------
.text:00000000000036FA                 align 20h
.text:0000000000003700
.text:0000000000003700 ; =============== S U B R O U T I N E =======================================
.text:0000000000003700
.text:0000000000003700 ; Attributes: info_from_lumina
.text:0000000000003700
.text:0000000000003700 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003700                 public quotearg_n_style_colon
.text:0000000000003700 quotearg_n_style_colon proc near
.text:0000000000003700
.text:0000000000003700 var_48          = dword ptr -48h
.text:0000000000003700 var_44          = qword ptr -44h
.text:0000000000003700 var_3C          = qword ptr -3Ch
.text:0000000000003700 var_34          = qword ptr -34h
.text:0000000000003700 var_2C          = qword ptr -2Ch
.text:0000000000003700 var_24          = qword ptr -24h
.text:0000000000003700 var_1C          = qword ptr -1Ch
.text:0000000000003700 var_14          = dword ptr -14h
.text:0000000000003700 var_10          = qword ptr -10h
.text:0000000000003700
.text:0000000000003700 ; __unwind {
.text:0000000000003700                 sub     rsp, 48h
.text:0000000000003704                 mov     rax, rdx
.text:0000000000003707                 mov     rdx, fs:28h
.text:0000000000003710                 mov     [rsp+48h+var_10], rdx
.text:0000000000003715                 xor     edx, edx
.text:0000000000003717                 cmp     esi, 0Ah
.text:000000000000371A                 jz      short loc_3784
.text:000000000000371C                 mov     [rsp+48h+var_48], esi
.text:000000000000371F                 mov     rcx, rsp
.text:0000000000003722                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003729                 mov     rsi, rax
.text:000000000000372C                 mov     [rsp+48h+var_44], 0
.text:0000000000003735                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000373E                 mov     [rsp+48h+var_34], 0
.text:0000000000003747                 mov     [rsp+48h+var_2C], 0
.text:0000000000003750                 mov     [rsp+48h+var_24], 0
.text:0000000000003759                 mov     [rsp+48h+var_1C], 0
.text:0000000000003762                 mov     [rsp+48h+var_14], 0
.text:000000000000376A                 call    quotearg_n_options
.text:000000000000376F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003774                 xor     rcx, fs:28h
.text:000000000000377D                 jnz     short loc_3789
.text:000000000000377F                 add     rsp, 48h
.text:0000000000003783                 retn
.text:0000000000003784 ; ---------------------------------------------------------------------------
.text:0000000000003784
.text:0000000000003784 loc_3784:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003784                 call    _abort
.text:0000000000003789 ; ---------------------------------------------------------------------------
.text:0000000000003789
.text:0000000000003789 loc_3789:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003789                 call    ___stack_chk_fail
.text:0000000000003789 ; } // starts at 3700
.text:0000000000003789 quotearg_n_style_colon endp
.text:0000000000003789
.text:0000000000003789 ; ---------------------------------------------------------------------------
.text:000000000000378E                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790 ; Attributes: info_from_lumina
.text:0000000000003790
.text:0000000000003790 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003790                 public quotearg_n_custom_mem
.text:0000000000003790 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003790                                         ; quotearg_custom+12↓j ...
.text:0000000000003790
.text:0000000000003790 var_48          = xmmword ptr -48h
.text:0000000000003790 var_38          = xmmword ptr -38h
.text:0000000000003790 var_28          = xmmword ptr -28h
.text:0000000000003790 var_18          = qword ptr -18h
.text:0000000000003790 var_10          = qword ptr -10h
.text:0000000000003790
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 sub     rsp, 48h
.text:0000000000003794                 mov     r9, rcx
.text:0000000000003797                 mov     rcx, cs:qword_207210
.text:000000000000379E                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000037A6                 mov     rax, fs:28h
.text:00000000000037AF                 mov     [rsp+48h+var_10], rax
.text:00000000000037B4                 xor     eax, eax
.text:00000000000037B6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000037BA                 test    rsi, rsi
.text:00000000000037BD                 mov     [rsp+48h+var_18], rcx
.text:00000000000037C2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000037C9                 movdqa  xmm0, cs:xmmword_2071F0
.text:00000000000037D1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000037D6                 movdqa  xmm0, cs:xmmword_207200
.text:00000000000037DE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000037E3                 jz      short loc_3817
.text:00000000000037E5                 test    rdx, rdx
.text:00000000000037E8                 jz      short loc_3817
.text:00000000000037EA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000037EF                 mov     [rsp+48h+var_18], rdx
.text:00000000000037F4                 mov     rcx, rsp
.text:00000000000037F7                 mov     rdx, r8
.text:00000000000037FA                 mov     rsi, r9
.text:00000000000037FD                 call    quotearg_n_options
.text:0000000000003802                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003807                 xor     rdi, fs:28h
.text:0000000000003810                 jnz     short loc_381C
.text:0000000000003812                 add     rsp, 48h
.text:0000000000003816                 retn
.text:0000000000003817 ; ---------------------------------------------------------------------------
.text:0000000000003817
.text:0000000000003817 loc_3817:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003817                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003817                 call    _abort
.text:000000000000381C ; ---------------------------------------------------------------------------
.text:000000000000381C
.text:000000000000381C loc_381C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000381C                 call    ___stack_chk_fail
.text:000000000000381C ; } // starts at 3790
.text:000000000000381C quotearg_n_custom_mem endp
.text:000000000000381C
.text:000000000000381C ; ---------------------------------------------------------------------------
.text:0000000000003821                 align 10h
.text:0000000000003830
.text:0000000000003830 ; =============== S U B R O U T I N E =======================================
.text:0000000000003830
.text:0000000000003830
.text:0000000000003830                 public quotearg_n_custom
.text:0000000000003830 quotearg_n_custom proc near
.text:0000000000003830 ; __unwind {
.text:0000000000003830                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003837                 jmp     quotearg_n_custom_mem
.text:0000000000003837 ; } // starts at 3830
.text:0000000000003837 quotearg_n_custom endp
.text:0000000000003837
.text:0000000000003837 ; ---------------------------------------------------------------------------
.text:000000000000383C                 align 20h
.text:0000000000003840
.text:0000000000003840 ; =============== S U B R O U T I N E =======================================
.text:0000000000003840
.text:0000000000003840
.text:0000000000003840                 public quotearg_custom
.text:0000000000003840 quotearg_custom proc near
.text:0000000000003840 ; __unwind {
.text:0000000000003840                 mov     rcx, rdx
.text:0000000000003843                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000384A                 mov     rdx, rsi
.text:000000000000384D                 mov     rsi, rdi
.text:0000000000003850                 xor     edi, edi
.text:0000000000003852                 jmp     quotearg_n_custom_mem
.text:0000000000003852 ; } // starts at 3840
.text:0000000000003852 quotearg_custom endp
.text:0000000000003852
.text:0000000000003852 ; ---------------------------------------------------------------------------
.text:0000000000003857                 align 20h
.text:0000000000003860
.text:0000000000003860 ; =============== S U B R O U T I N E =======================================
.text:0000000000003860
.text:0000000000003860
.text:0000000000003860                 public quotearg_custom_mem
.text:0000000000003860 quotearg_custom_mem proc near
.text:0000000000003860 ; __unwind {
.text:0000000000003860                 mov     r8, rcx
.text:0000000000003863                 mov     rcx, rdx
.text:0000000000003866                 mov     rdx, rsi
.text:0000000000003869                 mov     rsi, rdi
.text:000000000000386C                 xor     edi, edi
.text:000000000000386E                 jmp     quotearg_n_custom_mem
.text:000000000000386E ; } // starts at 3860
.text:000000000000386E quotearg_custom_mem endp
.text:000000000000386E
.text:000000000000386E ; ---------------------------------------------------------------------------
.text:0000000000003873                 align 20h
.text:0000000000003880
.text:0000000000003880 ; =============== S U B R O U T I N E =======================================
.text:0000000000003880
.text:0000000000003880
.text:0000000000003880                 public quote_n_mem
.text:0000000000003880 quote_n_mem     proc near
.text:0000000000003880 ; __unwind {
.text:0000000000003880                 lea     rcx, quote_quoting_options
.text:0000000000003887                 jmp     quotearg_n_options
.text:0000000000003887 ; } // starts at 3880
.text:0000000000003887 quote_n_mem     endp
.text:0000000000003887
.text:0000000000003887 ; ---------------------------------------------------------------------------
.text:000000000000388C                 align 10h
.text:0000000000003890
.text:0000000000003890 ; =============== S U B R O U T I N E =======================================
.text:0000000000003890
.text:0000000000003890
.text:0000000000003890                 public quote_mem
.text:0000000000003890 quote_mem       proc near
.text:0000000000003890 ; __unwind {
.text:0000000000003890                 lea     rcx, quote_quoting_options
.text:0000000000003897                 mov     rdx, rsi
.text:000000000000389A                 mov     rsi, rdi
.text:000000000000389D                 xor     edi, edi
.text:000000000000389F                 jmp     quotearg_n_options
.text:000000000000389F ; } // starts at 3890
.text:000000000000389F quote_mem       endp
.text:000000000000389F
.text:000000000000389F ; ---------------------------------------------------------------------------
.text:00000000000038A4                 align 10h
.text:00000000000038B0
.text:00000000000038B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038B0
.text:00000000000038B0
.text:00000000000038B0                 public quote_n
.text:00000000000038B0 quote_n         proc near
.text:00000000000038B0 ; __unwind {
.text:00000000000038B0                 lea     rcx, quote_quoting_options
.text:00000000000038B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000038BE                 jmp     quotearg_n_options
.text:00000000000038BE ; } // starts at 38B0
.text:00000000000038BE quote_n         endp
.text:00000000000038BE
.text:00000000000038BE ; ---------------------------------------------------------------------------
.text:00000000000038C3                 align 10h
.text:00000000000038D0
.text:00000000000038D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038D0
.text:00000000000038D0
.text:00000000000038D0                 public quote
.text:00000000000038D0 quote           proc near               ; CODE XREF: main+15B↑p
.text:00000000000038D0 ; __unwind {
.text:00000000000038D0                 lea     rcx, quote_quoting_options
.text:00000000000038D7                 mov     rsi, rdi
.text:00000000000038DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000038E1                 xor     edi, edi
.text:00000000000038E3                 jmp     quotearg_n_options
.text:00000000000038E3 ; } // starts at 38D0
.text:00000000000038E3 quote           endp
.text:00000000000038E3
.text:00000000000038E3 ; ---------------------------------------------------------------------------
.text:00000000000038E8                 align 10h
.text:00000000000038F0
.text:00000000000038F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038F0
.text:00000000000038F0
.text:00000000000038F0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000038F0                 public version_etc_arn
.text:00000000000038F0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_3D2B↓j
.text:00000000000038F0                                         ; version_etc_va:loc_3D7B↓p ...
.text:00000000000038F0
.text:00000000000038F0 var_58          = qword ptr -58h
.text:00000000000038F0 var_50          = qword ptr -50h
.text:00000000000038F0 var_48          = qword ptr -48h
.text:00000000000038F0 var_40          = qword ptr -40h
.text:00000000000038F0
.text:00000000000038F0 ; __unwind {
.text:00000000000038F0                 push    r15
.text:00000000000038F2                 push    r14
.text:00000000000038F4                 push    r13
.text:00000000000038F6                 push    r12
.text:00000000000038F8                 mov     r12, r9
.text:00000000000038FB                 push    rbp
.text:00000000000038FC                 push    rbx
.text:00000000000038FD                 mov     rbp, rdi
.text:0000000000003900                 mov     rbx, r8
.text:0000000000003903                 sub     rsp, 28h
.text:0000000000003907                 test    rsi, rsi
.text:000000000000390A                 jz      loc_3A28
.text:0000000000003910                 mov     r8, rdx
.text:0000000000003913                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000391A                 mov     r9, rcx
.text:000000000000391D                 xor     eax, eax
.text:000000000000391F                 mov     rcx, rsi
.text:0000000000003922                 mov     esi, 1
.text:0000000000003927                 call    ___fprintf_chk
.text:000000000000392C
.text:000000000000392C loc_392C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000392C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003933                 xor     edi, edi        ; domainname
.text:0000000000003935                 mov     edx, 5          ; category
.text:000000000000393A                 call    _dcgettext
.text:000000000000393F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003946                 mov     rcx, rax
.text:0000000000003949                 mov     r8d, 7E3h
.text:000000000000394F                 mov     esi, 1
.text:0000000000003954                 mov     rdi, rbp
.text:0000000000003957                 xor     eax, eax
.text:0000000000003959                 call    ___fprintf_chk
.text:000000000000395E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003965                 xor     edi, edi        ; domainname
.text:0000000000003967                 mov     edx, 5          ; category
.text:000000000000396C                 call    _dcgettext
.text:0000000000003971                 mov     rsi, rbp        ; stream
.text:0000000000003974                 mov     rdi, rax        ; s
.text:0000000000003977                 call    _fputs_unlocked
.text:000000000000397C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003980                 ja      def_3994        ; jumptable 0000000000003994 default case
.text:0000000000003986                 lea     rdx, jpt_3994
.text:000000000000398D                 movsxd  rax, ds:(jpt_3994 - 5028h)[rdx+r12*4]
.text:0000000000003991                 add     rax, rdx
.text:0000000000003994                 jmp     rax             ; switch jump
.text:0000000000003994 ; ---------------------------------------------------------------------------
.text:0000000000003996                 align 20h
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000039A0                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:00000000000039A0                 mov     r9, [rbx+38h]   ; jumptable 0000000000003994 case 8
.text:00000000000039A4                 mov     rax, [rbx+10h]
.text:00000000000039A8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000039AF                 mov     r8, [rbx+8]
.text:00000000000039B3                 mov     edx, 5          ; category
.text:00000000000039B8                 xor     edi, edi        ; domainname
.text:00000000000039BA                 mov     r13, [rbx+30h]
.text:00000000000039BE                 mov     r12, [rbx+28h]
.text:00000000000039C2                 mov     [rsp+58h+var_48], r9
.text:00000000000039C7                 mov     r15, [rbx+20h]
.text:00000000000039CB                 mov     r14, [rbx+18h]
.text:00000000000039CF                 mov     [rsp+58h+var_58], rax
.text:00000000000039D3                 mov     [rsp+58h+var_50], r8
.text:00000000000039D8                 mov     rbx, [rbx]
.text:00000000000039DB                 call    _dcgettext
.text:00000000000039E0                 sub     rsp, 8
.text:00000000000039E4
.text:00000000000039E4 loc_39E4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000039E4                 mov     r9, [rsp+60h+var_48]
.text:00000000000039E9                 mov     rdx, rax
.text:00000000000039EC                 mov     rcx, rbx
.text:00000000000039EF                 mov     esi, 1
.text:00000000000039F4                 mov     rdi, rbp
.text:00000000000039F7                 xor     eax, eax
.text:00000000000039F9                 push    r9
.text:00000000000039FB                 push    r13
.text:00000000000039FD                 push    r12
.text:00000000000039FF                 push    r15
.text:0000000000003A01                 push    r14
.text:0000000000003A03                 mov     r9, [rsp+88h+var_58]
.text:0000000000003A08                 mov     r8, [rsp+88h+var_50]
.text:0000000000003A0D                 call    ___fprintf_chk
.text:0000000000003A12                 add     rsp, 30h
.text:0000000000003A16
.text:0000000000003A16 loc_3A16:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003A16                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:0000000000003A16                 add     rsp, 28h        ; jumptable 0000000000003994 case 0
.text:0000000000003A1A                 pop     rbx
.text:0000000000003A1B                 pop     rbp
.text:0000000000003A1C                 pop     r12
.text:0000000000003A1E                 pop     r13
.text:0000000000003A20                 pop     r14
.text:0000000000003A22                 pop     r15
.text:0000000000003A24                 retn
.text:0000000000003A24 ; ---------------------------------------------------------------------------
.text:0000000000003A25                 align 8
.text:0000000000003A28
.text:0000000000003A28 loc_3A28:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003A28                 mov     r8, rcx
.text:0000000000003A2B                 mov     rcx, rdx
.text:0000000000003A2E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003A35                 mov     esi, 1
.text:0000000000003A3A                 xor     eax, eax
.text:0000000000003A3C                 call    ___fprintf_chk
.text:0000000000003A41                 jmp     loc_392C
.text:0000000000003A41 ; ---------------------------------------------------------------------------
.text:0000000000003A46                 align 10h
.text:0000000000003A50
.text:0000000000003A50 loc_3A50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003A50                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:0000000000003A50                 mov     r10, [rbx+40h]  ; jumptable 0000000000003994 case 9
.text:0000000000003A54                 mov     r9, [rbx+38h]
.text:0000000000003A58                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003A5F                 mov     rax, [rbx+10h]
.text:0000000000003A63                 mov     r8, [rbx+8]
.text:0000000000003A67                 mov     edx, 5          ; category
.text:0000000000003A6C                 mov     r13, [rbx+30h]
.text:0000000000003A70                 mov     r12, [rbx+28h]
.text:0000000000003A74                 mov     r15, [rbx+20h]
.text:0000000000003A78                 mov     r14, [rbx+18h]
.text:0000000000003A7C                 mov     rbx, [rbx]
.text:0000000000003A7F                 mov     [rsp+58h+var_40], r10
.text:0000000000003A84                 mov     [rsp+58h+var_48], r9
.text:0000000000003A89                 mov     [rsp+58h+var_58], rax
.text:0000000000003A8D                 mov     [rsp+58h+var_50], r8
.text:0000000000003A92
.text:0000000000003A92 loc_3A92:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003A92                 xor     edi, edi        ; domainname
.text:0000000000003A94                 call    _dcgettext
.text:0000000000003A99                 mov     r10, [rsp+58h+var_40]
.text:0000000000003A9E                 push    r10
.text:0000000000003AA0                 jmp     loc_39E4
.text:0000000000003AA0 ; ---------------------------------------------------------------------------
.text:0000000000003AA5                 align 8
.text:0000000000003AA8
.text:0000000000003AA8 loc_3AA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003AA8                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:0000000000003AA8                 mov     rbx, [rbx]      ; jumptable 0000000000003994 case 1
.text:0000000000003AAB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003AB2                 mov     edx, 5          ; category
.text:0000000000003AB7                 xor     edi, edi        ; domainname
.text:0000000000003AB9                 call    _dcgettext
.text:0000000000003ABE                 add     rsp, 28h
.text:0000000000003AC2                 mov     rcx, rbx
.text:0000000000003AC5                 mov     rdi, rbp
.text:0000000000003AC8                 pop     rbx
.text:0000000000003AC9                 pop     rbp
.text:0000000000003ACA                 pop     r12
.text:0000000000003ACC                 pop     r13
.text:0000000000003ACE                 pop     r14
.text:0000000000003AD0                 pop     r15
.text:0000000000003AD2                 mov     rdx, rax
.text:0000000000003AD5                 mov     esi, 1
.text:0000000000003ADA                 xor     eax, eax
.text:0000000000003ADC                 jmp     ___fprintf_chk
.text:0000000000003ADC ; ---------------------------------------------------------------------------
.text:0000000000003AE1                 align 8
.text:0000000000003AE8
.text:0000000000003AE8 loc_3AE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003AE8                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:0000000000003AE8                 mov     r12, [rbx+8]    ; jumptable 0000000000003994 case 2
.text:0000000000003AEC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003AF3                 mov     rbx, [rbx]
.text:0000000000003AF6                 mov     edx, 5          ; category
.text:0000000000003AFB                 xor     edi, edi        ; domainname
.text:0000000000003AFD                 call    _dcgettext
.text:0000000000003B02                 add     rsp, 28h
.text:0000000000003B06                 mov     r8, r12
.text:0000000000003B09                 mov     rcx, rbx
.text:0000000000003B0C                 mov     rdi, rbp
.text:0000000000003B0F                 mov     rdx, rax
.text:0000000000003B12                 mov     esi, 1
.text:0000000000003B17                 pop     rbx
.text:0000000000003B18                 pop     rbp
.text:0000000000003B19                 pop     r12
.text:0000000000003B1B                 pop     r13
.text:0000000000003B1D                 pop     r14
.text:0000000000003B1F                 pop     r15
.text:0000000000003B21                 xor     eax, eax
.text:0000000000003B23                 jmp     ___fprintf_chk
.text:0000000000003B23 ; ---------------------------------------------------------------------------
.text:0000000000003B28                 align 10h
.text:0000000000003B30
.text:0000000000003B30 loc_3B30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B30                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:0000000000003B30                 mov     r13, [rbx+10h]  ; jumptable 0000000000003994 case 3
.text:0000000000003B34                 mov     r12, [rbx+8]
.text:0000000000003B38                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003B3F                 mov     rbx, [rbx]
.text:0000000000003B42                 mov     edx, 5          ; category
.text:0000000000003B47                 xor     edi, edi        ; domainname
.text:0000000000003B49                 call    _dcgettext
.text:0000000000003B4E                 add     rsp, 28h
.text:0000000000003B52                 mov     r9, r13
.text:0000000000003B55                 mov     r8, r12
.text:0000000000003B58                 mov     rcx, rbx
.text:0000000000003B5B                 mov     rdi, rbp
.text:0000000000003B5E                 mov     rdx, rax
.text:0000000000003B61                 pop     rbx
.text:0000000000003B62                 pop     rbp
.text:0000000000003B63                 pop     r12
.text:0000000000003B65                 pop     r13
.text:0000000000003B67                 pop     r14
.text:0000000000003B69                 pop     r15
.text:0000000000003B6B                 mov     esi, 1
.text:0000000000003B70                 xor     eax, eax
.text:0000000000003B72                 jmp     ___fprintf_chk
.text:0000000000003B72 ; ---------------------------------------------------------------------------
.text:0000000000003B77                 align 20h
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B80                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:0000000000003B80                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003994 case 4
.text:0000000000003B87                 mov     edx, 5          ; category
.text:0000000000003B8C                 xor     edi, edi        ; domainname
.text:0000000000003B8E                 mov     r14, [rbx+18h]
.text:0000000000003B92                 mov     r13, [rbx+10h]
.text:0000000000003B96                 mov     r12, [rbx+8]
.text:0000000000003B9A                 mov     rbx, [rbx]
.text:0000000000003B9D                 call    _dcgettext
.text:0000000000003BA2                 sub     rsp, 8
.text:0000000000003BA6
.text:0000000000003BA6 loc_3BA6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003BA6                 push    r14
.text:0000000000003BA8                 mov     rdx, rax
.text:0000000000003BAB                 mov     r9, r13
.text:0000000000003BAE                 mov     r8, r12
.text:0000000000003BB1                 mov     rcx, rbx
.text:0000000000003BB4                 mov     rdi, rbp
.text:0000000000003BB7                 mov     esi, 1
.text:0000000000003BBC                 xor     eax, eax
.text:0000000000003BBE                 call    ___fprintf_chk
.text:0000000000003BC3                 pop     rax
.text:0000000000003BC4                 pop     rdx
.text:0000000000003BC5                 add     rsp, 28h
.text:0000000000003BC9                 pop     rbx
.text:0000000000003BCA                 pop     rbp
.text:0000000000003BCB                 pop     r12
.text:0000000000003BCD                 pop     r13
.text:0000000000003BCF                 pop     r14
.text:0000000000003BD1                 pop     r15
.text:0000000000003BD3                 retn
.text:0000000000003BD3 ; ---------------------------------------------------------------------------
.text:0000000000003BD4                 align 8
.text:0000000000003BD8
.text:0000000000003BD8 loc_3BD8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BD8                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:0000000000003BD8                 mov     r15, [rbx+20h]  ; jumptable 0000000000003994 case 5
.text:0000000000003BDC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003BE3                 mov     edx, 5          ; category
.text:0000000000003BE8                 xor     edi, edi        ; domainname
.text:0000000000003BEA                 mov     r14, [rbx+18h]
.text:0000000000003BEE                 mov     r13, [rbx+10h]
.text:0000000000003BF2                 mov     r12, [rbx+8]
.text:0000000000003BF6                 mov     rbx, [rbx]
.text:0000000000003BF9                 call    _dcgettext
.text:0000000000003BFE                 push    r15
.text:0000000000003C00                 jmp     short loc_3BA6
.text:0000000000003C00 ; ---------------------------------------------------------------------------
.text:0000000000003C02                 align 8
.text:0000000000003C08
.text:0000000000003C08 loc_3C08:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C08                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:0000000000003C08                 mov     r8, [rbx+8]     ; jumptable 0000000000003994 case 6
.text:0000000000003C0C                 mov     r12, [rbx+28h]
.text:0000000000003C10                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003C17                 mov     r15, [rbx+20h]
.text:0000000000003C1B                 mov     r14, [rbx+18h]
.text:0000000000003C1F                 mov     edx, 5          ; category
.text:0000000000003C24                 mov     r13, [rbx+10h]
.text:0000000000003C28                 xor     edi, edi        ; domainname
.text:0000000000003C2A                 mov     rbx, [rbx]
.text:0000000000003C2D                 mov     [rsp+58h+var_58], r8
.text:0000000000003C31                 call    _dcgettext
.text:0000000000003C36                 sub     rsp, 8
.text:0000000000003C3A                 mov     r9, r13
.text:0000000000003C3D                 push    r12
.text:0000000000003C3F                 push    r15
.text:0000000000003C41                 push    r14
.text:0000000000003C43
.text:0000000000003C43 loc_3C43:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003C43                 mov     r8, [rsp+78h+var_58]
.text:0000000000003C48                 mov     rcx, rbx
.text:0000000000003C4B                 mov     rdx, rax
.text:0000000000003C4E                 mov     rdi, rbp
.text:0000000000003C51                 mov     esi, 1
.text:0000000000003C56                 xor     eax, eax
.text:0000000000003C58                 call    ___fprintf_chk
.text:0000000000003C5D                 add     rsp, 20h
.text:0000000000003C61                 add     rsp, 28h
.text:0000000000003C65                 pop     rbx
.text:0000000000003C66                 pop     rbp
.text:0000000000003C67                 pop     r12
.text:0000000000003C69                 pop     r13
.text:0000000000003C6B                 pop     r14
.text:0000000000003C6D                 pop     r15
.text:0000000000003C6F                 retn
.text:0000000000003C70 ; ---------------------------------------------------------------------------
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C70                                         ; DATA XREF: .rodata:jpt_3994↓o
.text:0000000000003C70                 mov     r9, [rbx+10h]   ; jumptable 0000000000003994 case 7
.text:0000000000003C74                 mov     r13, [rbx+30h]
.text:0000000000003C78                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003C7F                 mov     r12, [rbx+28h]
.text:0000000000003C83                 mov     r15, [rbx+20h]
.text:0000000000003C87                 mov     edx, 5          ; category
.text:0000000000003C8C                 mov     r14, [rbx+18h]
.text:0000000000003C90                 mov     r8, [rbx+8]
.text:0000000000003C94                 xor     edi, edi        ; domainname
.text:0000000000003C96                 mov     [rsp+58h+var_50], r9
.text:0000000000003C9B                 mov     rbx, [rbx]
.text:0000000000003C9E                 mov     [rsp+58h+var_58], r8
.text:0000000000003CA2                 call    _dcgettext
.text:0000000000003CA7                 push    r13
.text:0000000000003CA9                 push    r12
.text:0000000000003CAB                 push    r15
.text:0000000000003CAD                 push    r14
.text:0000000000003CAF                 mov     r9, [rsp+78h+var_50]
.text:0000000000003CB4                 jmp     short loc_3C43
.text:0000000000003CB4 ; ---------------------------------------------------------------------------
.text:0000000000003CB6                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 def_3994:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003CC0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003994 default case
.text:0000000000003CC4                 mov     r9, [rbx+38h]
.text:0000000000003CC8                 mov     edx, 5
.text:0000000000003CCD                 mov     rax, [rbx+10h]
.text:0000000000003CD1                 mov     r8, [rbx+8]
.text:0000000000003CD5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003CDC                 mov     r13, [rbx+30h]
.text:0000000000003CE0                 mov     r12, [rbx+28h]
.text:0000000000003CE4                 mov     r15, [rbx+20h]
.text:0000000000003CE8                 mov     r14, [rbx+18h]
.text:0000000000003CEC                 mov     [rsp+58h+var_40], r10
.text:0000000000003CF1                 mov     [rsp+58h+var_48], r9
.text:0000000000003CF6                 mov     [rsp+58h+var_58], rax
.text:0000000000003CFA                 mov     [rsp+58h+var_50], r8
.text:0000000000003CFF                 mov     rbx, [rbx]
.text:0000000000003D02                 jmp     loc_3A92
.text:0000000000003D02 ; } // starts at 38F0
.text:0000000000003D02 version_etc_arn endp
.text:0000000000003D02
.text:0000000000003D02 ; ---------------------------------------------------------------------------
.text:0000000000003D07                 align 10h
.text:0000000000003D10
.text:0000000000003D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D10
.text:0000000000003D10 ; Attributes: info_from_lumina
.text:0000000000003D10
.text:0000000000003D10 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000003D10                 public version_etc_ar
.text:0000000000003D10 version_etc_ar  proc near
.text:0000000000003D10 ; __unwind {
.text:0000000000003D10                 xor     r9d, r9d
.text:0000000000003D13                 cmp     qword ptr [r8], 0
.text:0000000000003D17                 jz      short loc_3D2B
.text:0000000000003D19                 nop     dword ptr [rax+00000000h]
.text:0000000000003D20
.text:0000000000003D20 loc_3D20:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000003D20                 add     r9, 1
.text:0000000000003D24                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000003D29                 jnz     short loc_3D20
.text:0000000000003D2B
.text:0000000000003D2B loc_3D2B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000003D2B                 jmp     version_etc_arn
.text:0000000000003D2B ; } // starts at 3D10
.text:0000000000003D2B version_etc_ar  endp
.text:0000000000003D2B
.text:0000000000003D30
.text:0000000000003D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D30
.text:0000000000003D30 ; Attributes: info_from_lumina
.text:0000000000003D30
.text:0000000000003D30 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000003D30                 public version_etc_va
.text:0000000000003D30 version_etc_va  proc near
.text:0000000000003D30
.text:0000000000003D30 authtab         = qword ptr -68h
.text:0000000000003D30 var_10          = qword ptr -10h
.text:0000000000003D30
.text:0000000000003D30 ; __unwind {
.text:0000000000003D30                 sub     rsp, 68h
.text:0000000000003D34                 mov     r10, r8
.text:0000000000003D37                 xor     r9d, r9d
.text:0000000000003D3A                 mov     rax, fs:28h
.text:0000000000003D43                 mov     [rsp+68h+var_10], rax
.text:0000000000003D48                 xor     eax, eax
.text:0000000000003D4A                 mov     r8, rsp
.text:0000000000003D4D                 nop     dword ptr [rax]
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000003D50                 mov     eax, [r10]
.text:0000000000003D53                 cmp     eax, 2Fh ; '/'
.text:0000000000003D56                 ja      short loc_3D9A
.text:0000000000003D58                 mov     r11d, eax
.text:0000000000003D5B                 add     r11, [r10+10h]
.text:0000000000003D5F                 add     eax, 8
.text:0000000000003D62                 mov     [r10], eax
.text:0000000000003D65
.text:0000000000003D65 loc_3D65:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000003D65                 mov     rax, [r11]
.text:0000000000003D68                 test    rax, rax
.text:0000000000003D6B                 mov     [r8+r9*8], rax
.text:0000000000003D6F                 jz      short loc_3D7B
.text:0000000000003D71                 add     r9, 1
.text:0000000000003D75                 cmp     r9, 0Ah
.text:0000000000003D79                 jnz     short loc_3D50
.text:0000000000003D7B
.text:0000000000003D7B loc_3D7B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000003D7B                 call    version_etc_arn
.text:0000000000003D80                 mov     rax, [rsp+68h+var_10]
.text:0000000000003D85                 xor     rax, fs:28h
.text:0000000000003D8E                 jnz     short loc_3D95
.text:0000000000003D90                 add     rsp, 68h
.text:0000000000003D94                 retn
.text:0000000000003D95 ; ---------------------------------------------------------------------------
.text:0000000000003D95
.text:0000000000003D95 loc_3D95:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000003D95                 call    ___stack_chk_fail
.text:0000000000003D9A ; ---------------------------------------------------------------------------
.text:0000000000003D9A
.text:0000000000003D9A loc_3D9A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000003D9A                 mov     r11, [r10+8]
.text:0000000000003D9E                 lea     rax, [r11+8]
.text:0000000000003DA2                 mov     [r10+8], rax
.text:0000000000003DA6                 jmp     short loc_3D65
.text:0000000000003DA6 ; } // starts at 3D30
.text:0000000000003DA6 version_etc_va  endp
.text:0000000000003DA6
.text:0000000000003DA6 ; ---------------------------------------------------------------------------
.text:0000000000003DA8                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DB0
.text:0000000000003DB0 ; Attributes: info_from_lumina
.text:0000000000003DB0
.text:0000000000003DB0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000003DB0                 public version_etc
.text:0000000000003DB0 version_etc     proc near               ; CODE XREF: main+D0↑p
.text:0000000000003DB0
.text:0000000000003DB0 var_C0          = dword ptr -0C0h
.text:0000000000003DB0 var_B8          = qword ptr -0B8h
.text:0000000000003DB0 var_B0          = qword ptr -0B0h
.text:0000000000003DB0 var_A8          = byte ptr -0A8h
.text:0000000000003DB0 var_50          = qword ptr -50h
.text:0000000000003DB0 var_48          = byte ptr -48h
.text:0000000000003DB0 var_28          = qword ptr -28h
.text:0000000000003DB0 var_20          = qword ptr -20h
.text:0000000000003DB0 arg_0           = byte ptr  8
.text:0000000000003DB0
.text:0000000000003DB0 ; __unwind {
.text:0000000000003DB0                 push    rbp
.text:0000000000003DB1                 push    rbx
.text:0000000000003DB2                 mov     r10d, 20h ; ' '
.text:0000000000003DB8                 xor     r11d, r11d
.text:0000000000003DBB                 sub     rsp, 0B8h
.text:0000000000003DC2                 mov     rax, fs:28h
.text:0000000000003DCB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000003DD0                 xor     eax, eax
.text:0000000000003DD2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000003DDA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000003DE2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000003DEA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000003DEF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000003DF7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000003DFF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000003E04                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000003E0C                 xor     r9d, r9d
.text:0000000000003E0F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000003E14                 mov     rbp, rax
.text:0000000000003E17                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003E20
.text:0000000000003E20 loc_3E20:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000003E20                 cmp     r10d, 2Fh ; '/'
.text:0000000000003E24                 ja      short loc_3E7C
.text:0000000000003E26                 mov     eax, r10d
.text:0000000000003E29                 mov     r11d, 1
.text:0000000000003E2F                 add     r10d, 8
.text:0000000000003E33                 add     rax, rbp
.text:0000000000003E36
.text:0000000000003E36 loc_3E36:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000003E36                 mov     rax, [rax]
.text:0000000000003E39                 test    rax, rax
.text:0000000000003E3C                 mov     [r8+r9*8], rax
.text:0000000000003E40                 jz      short loc_3E4C
.text:0000000000003E42                 add     r9, 1
.text:0000000000003E46                 cmp     r9, 0Ah
.text:0000000000003E4A                 jnz     short loc_3E20
.text:0000000000003E4C
.text:0000000000003E4C loc_3E4C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000003E4C                 test    r11b, r11b
.text:0000000000003E4F                 jnz     short loc_3E75
.text:0000000000003E51
.text:0000000000003E51 loc_3E51:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000003E51                 call    version_etc_arn
.text:0000000000003E56                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000003E5B                 xor     rax, fs:28h
.text:0000000000003E64                 jnz     short loc_3E70
.text:0000000000003E66                 add     rsp, 0B8h
.text:0000000000003E6D                 pop     rbx
.text:0000000000003E6E                 pop     rbp
.text:0000000000003E6F                 retn
.text:0000000000003E70 ; ---------------------------------------------------------------------------
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000003E70                 call    ___stack_chk_fail
.text:0000000000003E75 ; ---------------------------------------------------------------------------
.text:0000000000003E75
.text:0000000000003E75 loc_3E75:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000003E75                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000003E7A                 jmp     short loc_3E51
.text:0000000000003E7C ; ---------------------------------------------------------------------------
.text:0000000000003E7C
.text:0000000000003E7C loc_3E7C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000003E7C                 mov     rax, rbx
.text:0000000000003E7F                 add     rbx, 8
.text:0000000000003E83                 jmp     short loc_3E36
.text:0000000000003E83 ; } // starts at 3DB0
.text:0000000000003E83 version_etc     endp
.text:0000000000003E83
.text:0000000000003E83 ; ---------------------------------------------------------------------------
.text:0000000000003E85                 align 10h
.text:0000000000003E90
.text:0000000000003E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E90
.text:0000000000003E90 ; Attributes: info_from_lumina
.text:0000000000003E90
.text:0000000000003E90 ; void __cdecl emit_bug_reporting_address()
.text:0000000000003E90                 public emit_bug_reporting_address
.text:0000000000003E90 emit_bug_reporting_address proc near
.text:0000000000003E90 ; __unwind {
.text:0000000000003E90                 push    rbx
.text:0000000000003E91                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000003E98                 mov     edx, 5          ; category
.text:0000000000003E9D                 xor     edi, edi        ; domainname
.text:0000000000003E9F                 call    _dcgettext
.text:0000000000003EA4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000003EAB                 mov     rsi, rax
.text:0000000000003EAE                 mov     edi, 1
.text:0000000000003EB3                 xor     eax, eax
.text:0000000000003EB5                 call    ___printf_chk
.text:0000000000003EBA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000003EC1                 mov     edx, 5          ; category
.text:0000000000003EC6                 xor     edi, edi        ; domainname
.text:0000000000003EC8                 call    _dcgettext
.text:0000000000003ECD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003ED4                 lea     rdx, unk_45B1
.text:0000000000003EDB                 mov     rsi, rax
.text:0000000000003EDE                 mov     edi, 1
.text:0000000000003EE3                 xor     eax, eax
.text:0000000000003EE5                 call    ___printf_chk
.text:0000000000003EEA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003EF1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000003EF8                 xor     edi, edi        ; domainname
.text:0000000000003EFA                 mov     edx, 5          ; category
.text:0000000000003EFF                 call    _dcgettext
.text:0000000000003F04                 mov     rsi, rbx        ; stream
.text:0000000000003F07                 mov     rdi, rax        ; s
.text:0000000000003F0A                 pop     rbx
.text:0000000000003F0B                 jmp     _fputs_unlocked
.text:0000000000003F0B ; } // starts at 3E90
.text:0000000000003F0B emit_bug_reporting_address endp
.text:0000000000003F0B
.text:0000000000003F10
.text:0000000000003F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F10
.text:0000000000003F10
.text:0000000000003F10                 public xmalloc
.text:0000000000003F10 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000003F10                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000003F10 ; __unwind {
.text:0000000000003F10                 push    rbx
.text:0000000000003F11                 mov     rbx, rdi
.text:0000000000003F14                 call    _malloc
.text:0000000000003F19                 test    rax, rax
.text:0000000000003F1C                 jnz     short loc_3F23
.text:0000000000003F1E                 test    rbx, rbx
.text:0000000000003F21                 jnz     short loc_3F25
.text:0000000000003F23
.text:0000000000003F23 loc_3F23:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000003F23                 pop     rbx
.text:0000000000003F24                 retn
.text:0000000000003F25 ; ---------------------------------------------------------------------------
.text:0000000000003F25
.text:0000000000003F25 loc_3F25:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000003F25                 call    xalloc_die
.text:0000000000003F25 ; } // starts at 3F10
.text:0000000000003F25 xmalloc         endp
.text:0000000000003F25
.text:0000000000003F25 ; ---------------------------------------------------------------------------
.text:0000000000003F2A                 align 10h
.text:0000000000003F30
.text:0000000000003F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F30
.text:0000000000003F30 ; Attributes: info_from_lumina
.text:0000000000003F30
.text:0000000000003F30 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000003F30                 public xnmalloc
.text:0000000000003F30 xnmalloc        proc near
.text:0000000000003F30 ; __unwind {
.text:0000000000003F30                 mov     rax, rdi
.text:0000000000003F33                 mul     rsi
.text:0000000000003F36                 mov     rdi, rax
.text:0000000000003F39                 seto    al
.text:0000000000003F3C                 test    rdi, rdi
.text:0000000000003F3F                 js      short loc_3F4B
.text:0000000000003F41                 movzx   eax, al
.text:0000000000003F44                 test    rax, rax
.text:0000000000003F47                 jnz     short loc_3F4B
.text:0000000000003F49                 jmp     short xmalloc
.text:0000000000003F4B ; ---------------------------------------------------------------------------
.text:0000000000003F4B
.text:0000000000003F4B loc_3F4B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000003F4B                                         ; xnmalloc+17↑j
.text:0000000000003F4B                 sub     rsp, 8
.text:0000000000003F4F                 call    xalloc_die
.text:0000000000003F4F ; } // starts at 3F30
.text:0000000000003F4F xnmalloc        endp
.text:0000000000003F4F
.text:0000000000003F4F ; ---------------------------------------------------------------------------
.text:0000000000003F54                 align 20h
.text:0000000000003F60
.text:0000000000003F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F60
.text:0000000000003F60
.text:0000000000003F60                 public xcharalloc
.text:0000000000003F60 xcharalloc      proc near
.text:0000000000003F60 ; __unwind {
.text:0000000000003F60                 jmp     short xmalloc
.text:0000000000003F60 ; } // starts at 3F60
.text:0000000000003F60 xcharalloc      endp
.text:0000000000003F60
.text:0000000000003F60 ; ---------------------------------------------------------------------------
.text:0000000000003F62                 align 10h
.text:0000000000003F70
.text:0000000000003F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F70
.text:0000000000003F70 ; Attributes: info_from_lumina
.text:0000000000003F70
.text:0000000000003F70 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000003F70                 public xrealloc
.text:0000000000003F70 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000003F70                                         ; quotearg_n_options+182↑p ...
.text:0000000000003F70 ; __unwind {
.text:0000000000003F70                 test    rsi, rsi
.text:0000000000003F73                 push    rbx
.text:0000000000003F74                 mov     rbx, rsi
.text:0000000000003F77                 jnz     short loc_3F7E
.text:0000000000003F79                 test    rdi, rdi
.text:0000000000003F7C                 jnz     short loc_3F98
.text:0000000000003F7E
.text:0000000000003F7E loc_3F7E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000003F7E                 mov     rsi, rbx        ; size
.text:0000000000003F81                 call    _realloc
.text:0000000000003F86                 test    rax, rax
.text:0000000000003F89                 jnz     short loc_3F90
.text:0000000000003F8B                 test    rbx, rbx
.text:0000000000003F8E                 jnz     short loc_3FA1
.text:0000000000003F90
.text:0000000000003F90 loc_3F90:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000003F90                 pop     rbx
.text:0000000000003F91                 retn
.text:0000000000003F91 ; ---------------------------------------------------------------------------
.text:0000000000003F92                 align 8
.text:0000000000003F98
.text:0000000000003F98 loc_3F98:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000003F98                 call    _free
.text:0000000000003F9D                 xor     eax, eax
.text:0000000000003F9F                 pop     rbx
.text:0000000000003FA0                 retn
.text:0000000000003FA1 ; ---------------------------------------------------------------------------
.text:0000000000003FA1
.text:0000000000003FA1 loc_3FA1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000003FA1                 call    xalloc_die
.text:0000000000003FA1 ; } // starts at 3F70
.text:0000000000003FA1 xrealloc        endp
.text:0000000000003FA1
.text:0000000000003FA1 ; ---------------------------------------------------------------------------
.text:0000000000003FA6                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FB0
.text:0000000000003FB0 ; Attributes: info_from_lumina
.text:0000000000003FB0
.text:0000000000003FB0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000003FB0                 public xnrealloc
.text:0000000000003FB0 xnrealloc       proc near
.text:0000000000003FB0 ; __unwind {
.text:0000000000003FB0                 mov     rax, rsi
.text:0000000000003FB3                 mul     rdx
.text:0000000000003FB6                 mov     rsi, rax
.text:0000000000003FB9                 seto    al
.text:0000000000003FBC                 test    rsi, rsi
.text:0000000000003FBF                 js      short loc_3FCB
.text:0000000000003FC1                 movzx   eax, al
.text:0000000000003FC4                 test    rax, rax
.text:0000000000003FC7                 jnz     short loc_3FCB
.text:0000000000003FC9                 jmp     short xrealloc
.text:0000000000003FCB ; ---------------------------------------------------------------------------
.text:0000000000003FCB
.text:0000000000003FCB loc_3FCB:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000003FCB                                         ; xnrealloc+17↑j
.text:0000000000003FCB                 sub     rsp, 8
.text:0000000000003FCF                 call    xalloc_die
.text:0000000000003FCF ; } // starts at 3FB0
.text:0000000000003FCF xnrealloc       endp
.text:0000000000003FCF
.text:0000000000003FCF ; ---------------------------------------------------------------------------
.text:0000000000003FD4                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0 ; Attributes: info_from_lumina
.text:0000000000003FE0
.text:0000000000003FE0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000003FE0                 public x2nrealloc
.text:0000000000003FE0 x2nrealloc      proc near
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 test    rdi, rdi
.text:0000000000003FE3                 mov     r9, rdx
.text:0000000000003FE6                 mov     rcx, [rsi]
.text:0000000000003FE9                 jz      short loc_4020
.text:0000000000003FEB                 xor     edx, edx
.text:0000000000003FED                 mov     rax, 5555555555555554h
.text:0000000000003FF7                 div     r9
.text:0000000000003FFA                 cmp     rax, rcx
.text:0000000000003FFD                 jbe     short loc_403B
.text:0000000000003FFF                 mov     rax, rcx
.text:0000000000004002                 shr     rax, 1
.text:0000000000004005                 lea     rcx, [rax+rcx+1]
.text:000000000000400A
.text:000000000000400A loc_400A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000400A                 mov     [rsi], rcx
.text:000000000000400D                 imul    rcx, r9
.text:0000000000004011                 mov     rsi, rcx
.text:0000000000004014                 jmp     xrealloc
.text:0000000000004014 ; ---------------------------------------------------------------------------
.text:0000000000004019                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004020                 test    rcx, rcx
.text:0000000000004023                 jz      short loc_4048
.text:0000000000004025
.text:0000000000004025 loc_4025:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004025                 mov     rax, rcx
.text:0000000000004028                 mul     r9
.text:000000000000402B                 seto    dl
.text:000000000000402E                 test    rax, rax
.text:0000000000004031                 movzx   edx, dl
.text:0000000000004034                 js      short loc_403B
.text:0000000000004036                 test    rdx, rdx
.text:0000000000004039                 jz      short loc_400A
.text:000000000000403B
.text:000000000000403B loc_403B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000403B                                         ; x2nrealloc+54↑j
.text:000000000000403B                 sub     rsp, 8
.text:000000000000403F                 call    xalloc_die
.text:000000000000403F ; ---------------------------------------------------------------------------
.text:0000000000004044                 align 8
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004048                 xor     edx, edx
.text:000000000000404A                 mov     eax, 80h
.text:000000000000404F                 xor     r8d, r8d
.text:0000000000004052                 div     r9
.text:0000000000004055                 test    rax, rax
.text:0000000000004058                 setz    r8b
.text:000000000000405C                 lea     rcx, [r8+rax]
.text:0000000000004060                 jmp     short loc_4025
.text:0000000000004060 ; } // starts at 3FE0
.text:0000000000004060 x2nrealloc      endp
.text:0000000000004060
.text:0000000000004060 ; ---------------------------------------------------------------------------
.text:0000000000004062                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070 ; Attributes: info_from_lumina
.text:0000000000004070
.text:0000000000004070 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004070                 public x2realloc
.text:0000000000004070 x2realloc       proc near
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 test    rdi, rdi
.text:0000000000004073                 mov     rax, [rsi]
.text:0000000000004076                 jz      short loc_40A0
.text:0000000000004078                 mov     rdx, 5555555555555553h
.text:0000000000004082                 cmp     rax, rdx
.text:0000000000004085                 ja      short loc_40B1
.text:0000000000004087                 mov     rdx, rax
.text:000000000000408A                 shr     rdx, 1
.text:000000000000408D                 lea     rax, [rdx+rax+1]
.text:0000000000004092
.text:0000000000004092 loc_4092:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004092                 mov     [rsi], rax
.text:0000000000004095                 mov     rsi, rax
.text:0000000000004098                 jmp     xrealloc
.text:0000000000004098 ; ---------------------------------------------------------------------------
.text:000000000000409D                 align 20h
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000040A0                 test    rax, rax
.text:00000000000040A3                 mov     edx, 80h
.text:00000000000040A8                 cmovz   rax, rdx
.text:00000000000040AC                 test    rax, rax
.text:00000000000040AF                 jns     short loc_4092
.text:00000000000040B1
.text:00000000000040B1 loc_40B1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000040B1                 sub     rsp, 8
.text:00000000000040B5                 call    xalloc_die
.text:00000000000040B5 ; } // starts at 4070
.text:00000000000040B5 x2realloc       endp
.text:00000000000040B5
.text:00000000000040B5 ; ---------------------------------------------------------------------------
.text:00000000000040BA                 align 20h
.text:00000000000040C0
.text:00000000000040C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040C0
.text:00000000000040C0
.text:00000000000040C0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000040C0                 public xzalloc
.text:00000000000040C0 xzalloc         proc near
.text:00000000000040C0 ; __unwind {
.text:00000000000040C0                 push    rbx
.text:00000000000040C1                 mov     rbx, rdi
.text:00000000000040C4                 call    xmalloc
.text:00000000000040C9                 mov     rdx, rbx        ; n
.text:00000000000040CC                 xor     esi, esi        ; c
.text:00000000000040CE                 mov     rdi, rax        ; s
.text:00000000000040D1                 pop     rbx
.text:00000000000040D2                 jmp     _memset
.text:00000000000040D2 ; } // starts at 40C0
.text:00000000000040D2 xzalloc         endp
.text:00000000000040D2
.text:00000000000040D2 ; ---------------------------------------------------------------------------
.text:00000000000040D7                 align 20h
.text:00000000000040E0
.text:00000000000040E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040E0
.text:00000000000040E0 ; Attributes: info_from_lumina
.text:00000000000040E0
.text:00000000000040E0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000040E0                 public xcalloc
.text:00000000000040E0 xcalloc         proc near
.text:00000000000040E0 ; __unwind {
.text:00000000000040E0                 mov     rax, rdi
.text:00000000000040E3                 sub     rsp, 8
.text:00000000000040E7                 mul     rsi
.text:00000000000040EA                 seto    dl
.text:00000000000040ED                 test    rax, rax
.text:00000000000040F0                 js      short loc_4109
.text:00000000000040F2                 movzx   edx, dl
.text:00000000000040F5                 test    rdx, rdx
.text:00000000000040F8                 jnz     short loc_4109
.text:00000000000040FA                 call    _calloc
.text:00000000000040FF                 test    rax, rax
.text:0000000000004102                 jz      short loc_4109
.text:0000000000004104                 add     rsp, 8
.text:0000000000004108                 retn
.text:0000000000004109 ; ---------------------------------------------------------------------------
.text:0000000000004109
.text:0000000000004109 loc_4109:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004109                                         ; xcalloc+18↑j ...
.text:0000000000004109                 call    xalloc_die
.text:0000000000004109 ; } // starts at 40E0
.text:0000000000004109 xcalloc         endp
.text:0000000000004109
.text:0000000000004109 ; ---------------------------------------------------------------------------
.text:000000000000410E                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110 ; Attributes: info_from_lumina
.text:0000000000004110
.text:0000000000004110 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004110                 public xmemdup
.text:0000000000004110 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004110                                         ; xstrdup+11↓j
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 push    rbp
.text:0000000000004111                 push    rbx
.text:0000000000004112                 mov     rbp, rdi
.text:0000000000004115                 mov     rdi, rsi
.text:0000000000004118                 mov     rbx, rsi
.text:000000000000411B                 sub     rsp, 8
.text:000000000000411F                 call    xmalloc
.text:0000000000004124                 add     rsp, 8
.text:0000000000004128                 mov     rdx, rbx        ; n
.text:000000000000412B                 mov     rsi, rbp        ; src
.text:000000000000412E                 pop     rbx
.text:000000000000412F                 pop     rbp
.text:0000000000004130                 mov     rdi, rax        ; dest
.text:0000000000004133                 jmp     _memcpy
.text:0000000000004133 ; } // starts at 4110
.text:0000000000004133 xmemdup         endp
.text:0000000000004133
.text:0000000000004133 ; ---------------------------------------------------------------------------
.text:0000000000004138                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140
.text:0000000000004140 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004140                 public xstrdup
.text:0000000000004140 xstrdup         proc near
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 push    rbx
.text:0000000000004141                 mov     rbx, rdi
.text:0000000000004144                 call    _strlen
.text:0000000000004149                 mov     rdi, rbx        ; src
.text:000000000000414C                 lea     rsi, [rax+1]    ; n
.text:0000000000004150                 pop     rbx
.text:0000000000004151                 jmp     short xmemdup
.text:0000000000004151 ; } // starts at 4140
.text:0000000000004151 xstrdup         endp
.text:0000000000004151
.text:0000000000004151 ; ---------------------------------------------------------------------------
.text:0000000000004153                 align 20h
.text:0000000000004160
.text:0000000000004160 ; =============== S U B R O U T I N E =======================================
.text:0000000000004160
.text:0000000000004160 ; Attributes: noreturn info_from_lumina
.text:0000000000004160
.text:0000000000004160 ; void __cdecl xalloc_die()
.text:0000000000004160                 public xalloc_die
.text:0000000000004160 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3136↑p
.text:0000000000004160                                         ; xmalloc:loc_3F25↑p ...
.text:0000000000004160 ; __unwind {
.text:0000000000004160                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004167                 sub     rsp, 8
.text:000000000000416B                 mov     edx, 5          ; category
.text:0000000000004170                 xor     edi, edi        ; domainname
.text:0000000000004172                 call    _dcgettext
.text:0000000000004177                 mov     edi, cs:exit_failure ; status
.text:000000000000417D                 lea     rdx, format+4   ; format
.text:0000000000004184                 mov     rcx, rax
.text:0000000000004187                 xor     esi, esi        ; errnum
.text:0000000000004189                 xor     eax, eax
.text:000000000000418B                 call    _error
.text:0000000000004190                 call    _abort
.text:0000000000004190 ; } // starts at 4160
.text:0000000000004190 xalloc_die      endp
.text:0000000000004190
.text:0000000000004190 ; ---------------------------------------------------------------------------
.text:0000000000004195                 align 20h
.text:00000000000041A0
.text:00000000000041A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041A0
.text:00000000000041A0 ; Attributes: info_from_lumina
.text:00000000000041A0
.text:00000000000041A0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000041A0                 public rpl_mbrtowc
.text:00000000000041A0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000041A0
.text:00000000000041A0 pwc             = dword ptr -34h
.text:00000000000041A0 var_30          = qword ptr -30h
.text:00000000000041A0
.text:00000000000041A0 ; __unwind {
.text:00000000000041A0                 push    r13
.text:00000000000041A2                 push    r12
.text:00000000000041A4                 mov     r13, rsi
.text:00000000000041A7                 push    rbp
.text:00000000000041A8                 push    rbx
.text:00000000000041A9                 mov     rbx, rdi
.text:00000000000041AC                 mov     r12, rdx
.text:00000000000041AF                 sub     rsp, 18h
.text:00000000000041B3                 mov     rax, fs:28h
.text:00000000000041BC                 mov     [rsp+38h+var_30], rax
.text:00000000000041C1                 xor     eax, eax
.text:00000000000041C3                 lea     rax, [rsp+38h+pwc]
.text:00000000000041C8                 test    rdi, rdi
.text:00000000000041CB                 cmovz   rbx, rax
.text:00000000000041CF                 mov     rdi, rbx        ; pwc
.text:00000000000041D2                 call    _mbrtowc
.text:00000000000041D7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000041DB                 mov     rbp, rax
.text:00000000000041DE                 jbe     short loc_4200
.text:00000000000041E0                 test    r12, r12
.text:00000000000041E3                 jz      short loc_4200
.text:00000000000041E5                 xor     edi, edi
.text:00000000000041E7                 call    hard_locale
.text:00000000000041EC                 test    al, al
.text:00000000000041EE                 jnz     short loc_4200
.text:00000000000041F0                 movzx   eax, byte ptr [r13+0]
.text:00000000000041F5                 mov     ebp, 1
.text:00000000000041FA                 mov     [rbx], eax
.text:00000000000041FC                 nop     dword ptr [rax+00h]
.text:0000000000004200
.text:0000000000004200 loc_4200:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004200                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004200                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004205                 xor     rdx, fs:28h
.text:000000000000420E                 mov     rax, rbp
.text:0000000000004211                 jnz     short loc_421E
.text:0000000000004213                 add     rsp, 18h
.text:0000000000004217                 pop     rbx
.text:0000000000004218                 pop     rbp
.text:0000000000004219                 pop     r12
.text:000000000000421B                 pop     r13
.text:000000000000421D                 retn
.text:000000000000421E ; ---------------------------------------------------------------------------
.text:000000000000421E
.text:000000000000421E loc_421E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000421E                 call    ___stack_chk_fail
.text:000000000000421E ; } // starts at 41A0
.text:000000000000421E rpl_mbrtowc     endp
.text:000000000000421E
.text:000000000000421E ; ---------------------------------------------------------------------------
.text:0000000000004223                 align 10h
.text:0000000000004230
.text:0000000000004230 ; =============== S U B R O U T I N E =======================================
.text:0000000000004230
.text:0000000000004230 ; Attributes: info_from_lumina
.text:0000000000004230
.text:0000000000004230 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004230                 public close_stream
.text:0000000000004230 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004230                                         ; close_stdout+33↑p
.text:0000000000004230 ; __unwind {
.text:0000000000004230                 push    r12
.text:0000000000004232                 push    rbp
.text:0000000000004233                 mov     rbp, rdi
.text:0000000000004236                 push    rbx
.text:0000000000004237                 call    ___fpending
.text:000000000000423C                 mov     ebx, [rbp+0]
.text:000000000000423F                 mov     rdi, rbp        ; stream
.text:0000000000004242                 mov     r12, rax
.text:0000000000004245                 call    rpl_fclose
.text:000000000000424A                 and     ebx, 20h
.text:000000000000424D                 test    ebx, ebx
.text:000000000000424F                 jnz     short loc_4268
.text:0000000000004251                 test    eax, eax
.text:0000000000004253                 jz      short loc_425F
.text:0000000000004255                 test    r12, r12
.text:0000000000004258                 mov     eax, 0FFFFFFFFh
.text:000000000000425D                 jz      short loc_4298
.text:000000000000425F
.text:000000000000425F loc_425F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000425F                 pop     rbx
.text:0000000000004260                 pop     rbp
.text:0000000000004261                 pop     r12
.text:0000000000004263                 retn
.text:0000000000004263 ; ---------------------------------------------------------------------------
.text:0000000000004264                 align 8
.text:0000000000004268
.text:0000000000004268 loc_4268:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004268                 test    eax, eax
.text:000000000000426A                 jnz     short loc_4288
.text:000000000000426C                 call    ___errno_location
.text:0000000000004271                 mov     dword ptr [rax], 0
.text:0000000000004277                 mov     eax, 0FFFFFFFFh
.text:000000000000427C                 pop     rbx
.text:000000000000427D                 pop     rbp
.text:000000000000427E                 pop     r12
.text:0000000000004280                 retn
.text:0000000000004280 ; ---------------------------------------------------------------------------
.text:0000000000004281                 align 8
.text:0000000000004288
.text:0000000000004288 loc_4288:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004288                 pop     rbx
.text:0000000000004289                 mov     eax, 0FFFFFFFFh
.text:000000000000428E                 pop     rbp
.text:000000000000428F                 pop     r12
.text:0000000000004291                 retn
.text:0000000000004291 ; ---------------------------------------------------------------------------
.text:0000000000004292                 align 8
.text:0000000000004298
.text:0000000000004298 loc_4298:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004298                 call    ___errno_location
.text:000000000000429D                 cmp     dword ptr [rax], 9
.text:00000000000042A0                 pop     rbx
.text:00000000000042A1                 pop     rbp
.text:00000000000042A2                 pop     r12
.text:00000000000042A4                 setnz   al
.text:00000000000042A7                 movzx   eax, al
.text:00000000000042AA                 neg     eax
.text:00000000000042AC                 retn
.text:00000000000042AC ; } // starts at 4230
.text:00000000000042AC close_stream    endp
.text:00000000000042AC
.text:00000000000042AC ; ---------------------------------------------------------------------------
.text:00000000000042AD                 align 10h
.text:00000000000042B0
.text:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042B0
.text:00000000000042B0
.text:00000000000042B0                 public hard_locale
.text:00000000000042B0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000042B0 ; __unwind {
.text:00000000000042B0                 sub     rsp, 8
.text:00000000000042B4                 xor     esi, esi        ; locale
.text:00000000000042B6                 call    _setlocale
.text:00000000000042BB                 mov     rdx, rax
.text:00000000000042BE                 mov     eax, 1
.text:00000000000042C3                 test    rdx, rdx
.text:00000000000042C6                 jz      short loc_42E5
.text:00000000000042C8                 lea     rdi, aC         ; "C"
.text:00000000000042CF                 mov     ecx, 2
.text:00000000000042D4                 mov     rsi, rdx
.text:00000000000042D7                 repe cmpsb
.text:00000000000042D9                 setnbe  cl
.text:00000000000042DC                 sbb     cl, 0
.text:00000000000042DF                 xor     eax, eax
.text:00000000000042E1                 test    cl, cl
.text:00000000000042E3                 jnz     short loc_42F0
.text:00000000000042E5
.text:00000000000042E5 loc_42E5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000042E5                 add     rsp, 8
.text:00000000000042E9                 retn
.text:00000000000042E9 ; ---------------------------------------------------------------------------
.text:00000000000042EA                 align 10h
.text:00000000000042F0
.text:00000000000042F0 loc_42F0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000042F0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000042F7                 mov     ecx, 6
.text:00000000000042FC                 mov     rsi, rdx
.text:00000000000042FF                 repe cmpsb
.text:0000000000004301                 setnbe  al
.text:0000000000004304                 sbb     al, 0
.text:0000000000004306                 test    al, al
.text:0000000000004308                 setnz   al
.text:000000000000430B                 add     rsp, 8
.text:000000000000430F                 retn
.text:000000000000430F ; } // starts at 42B0
.text:000000000000430F hard_locale     endp
.text:000000000000430F
.text:0000000000004310
.text:0000000000004310 ; =============== S U B R O U T I N E =======================================
.text:0000000000004310
.text:0000000000004310
.text:0000000000004310                 public locale_charset
.text:0000000000004310 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004310 ; __unwind {
.text:0000000000004310                 sub     rsp, 8
.text:0000000000004314                 mov     edi, 0Eh        ; item
.text:0000000000004319                 call    _nl_langinfo
.text:000000000000431E                 test    rax, rax
.text:0000000000004321                 jz      short loc_4340
.text:0000000000004323                 cmp     byte ptr [rax], 0
.text:0000000000004326                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000432D                 cmovz   rax, rdx
.text:0000000000004331                 add     rsp, 8
.text:0000000000004335                 retn
.text:0000000000004335 ; ---------------------------------------------------------------------------
.text:0000000000004336                 align 20h
.text:0000000000004340
.text:0000000000004340 loc_4340:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004340                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004347                 add     rsp, 8
.text:000000000000434B                 retn
.text:000000000000434B ; } // starts at 4310
.text:000000000000434B locale_charset  endp
.text:000000000000434B
.text:000000000000434B ; ---------------------------------------------------------------------------
.text:000000000000434C                 align 10h
.text:0000000000004350
.text:0000000000004350 ; =============== S U B R O U T I N E =======================================
.text:0000000000004350
.text:0000000000004350 ; Attributes: info_from_lumina
.text:0000000000004350
.text:0000000000004350 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004350                 public rpl_fclose
.text:0000000000004350 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004350 ; __unwind {
.text:0000000000004350                 push    r12
.text:0000000000004352                 push    rbp
.text:0000000000004353                 push    rbx
.text:0000000000004354                 mov     rbx, rdi
.text:0000000000004357                 call    _fileno
.text:000000000000435C                 test    eax, eax
.text:000000000000435E                 mov     rdi, rbx        ; fp
.text:0000000000004361                 js      short loc_43B7
.text:0000000000004363                 call    ___freading
.text:0000000000004368                 test    eax, eax
.text:000000000000436A                 jnz     short loc_4398
.text:000000000000436C
.text:000000000000436C loc_436C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000436C                 mov     rdi, rbx        ; stream
.text:000000000000436F                 call    rpl_fflush
.text:0000000000004374                 test    eax, eax
.text:0000000000004376                 jz      short loc_43B4
.text:0000000000004378                 call    ___errno_location
.text:000000000000437D                 mov     r12d, [rax]
.text:0000000000004380                 mov     rdi, rbx        ; stream
.text:0000000000004383                 mov     rbp, rax
.text:0000000000004386                 call    _fclose
.text:000000000000438B                 test    r12d, r12d
.text:000000000000438E                 jnz     short loc_43C0
.text:0000000000004390
.text:0000000000004390 loc_4390:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004390                 pop     rbx
.text:0000000000004391                 pop     rbp
.text:0000000000004392                 pop     r12
.text:0000000000004394                 retn
.text:0000000000004394 ; ---------------------------------------------------------------------------
.text:0000000000004395                 align 8
.text:0000000000004398
.text:0000000000004398 loc_4398:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004398                 mov     rdi, rbx        ; stream
.text:000000000000439B                 call    _fileno
.text:00000000000043A0                 xor     esi, esi        ; offset
.text:00000000000043A2                 mov     edx, 1          ; whence
.text:00000000000043A7                 mov     edi, eax        ; fd
.text:00000000000043A9                 call    _lseek
.text:00000000000043AE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000043B2                 jnz     short loc_436C
.text:00000000000043B4
.text:00000000000043B4 loc_43B4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000043B4                 mov     rdi, rbx        ; stream
.text:00000000000043B7
.text:00000000000043B7 loc_43B7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000043B7                 pop     rbx
.text:00000000000043B8                 pop     rbp
.text:00000000000043B9                 pop     r12
.text:00000000000043BB                 jmp     _fclose
.text:00000000000043C0 ; ---------------------------------------------------------------------------
.text:00000000000043C0
.text:00000000000043C0 loc_43C0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000043C0                 mov     [rbp+0], r12d
.text:00000000000043C4                 mov     eax, 0FFFFFFFFh
.text:00000000000043C9                 jmp     short loc_4390
.text:00000000000043C9 ; } // starts at 4350
.text:00000000000043C9 rpl_fclose      endp
.text:00000000000043C9
.text:00000000000043C9 ; ---------------------------------------------------------------------------
.text:00000000000043CB                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0 ; Attributes: info_from_lumina
.text:00000000000043D0
.text:00000000000043D0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000043D0                 public rpl_fflush
.text:00000000000043D0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 test    rdi, rdi
.text:00000000000043D3                 push    rbx
.text:00000000000043D4                 mov     rbx, rdi
.text:00000000000043D7                 jz      short loc_43EA
.text:00000000000043D9                 call    ___freading
.text:00000000000043DE                 test    eax, eax
.text:00000000000043E0                 jz      short loc_43EA
.text:00000000000043E2                 test    dword ptr [rbx], 100h
.text:00000000000043E8                 jnz     short loc_43F8
.text:00000000000043EA
.text:00000000000043EA loc_43EA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000043EA                                         ; rpl_fflush+10↑j
.text:00000000000043EA                 mov     rdi, rbx        ; stream
.text:00000000000043ED                 pop     rbx
.text:00000000000043EE                 jmp     _fflush
.text:00000000000043EE ; ---------------------------------------------------------------------------
.text:00000000000043F3                 align 8
.text:00000000000043F8
.text:00000000000043F8 loc_43F8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000043F8                 mov     rdi, rbx
.text:00000000000043FB                 mov     edx, 1
.text:0000000000004400                 xor     esi, esi
.text:0000000000004402                 call    rpl_fseeko
.text:0000000000004407                 mov     rdi, rbx        ; stream
.text:000000000000440A                 pop     rbx
.text:000000000000440B                 jmp     _fflush
.text:000000000000440B ; } // starts at 43D0
.text:000000000000440B rpl_fflush      endp
.text:000000000000440B
.text:0000000000004410
.text:0000000000004410 ; =============== S U B R O U T I N E =======================================
.text:0000000000004410
.text:0000000000004410 ; Attributes: info_from_lumina
.text:0000000000004410
.text:0000000000004410 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004410                 public rpl_fseeko
.text:0000000000004410 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004410 ; __unwind {
.text:0000000000004410                 mov     rax, [rdi+8]
.text:0000000000004414                 cmp     [rdi+10h], rax
.text:0000000000004418                 jz      short loc_4420
.text:000000000000441A
.text:000000000000441A loc_441A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000441A                                         ; rpl_fseeko+1F↓j
.text:000000000000441A                 jmp     _fseeko
.text:000000000000441A ; ---------------------------------------------------------------------------
.text:000000000000441F                 align 20h
.text:0000000000004420
.text:0000000000004420 loc_4420:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004420                 mov     rax, [rdi+20h]
.text:0000000000004424                 cmp     [rdi+28h], rax
.text:0000000000004428                 jnz     short loc_441A
.text:000000000000442A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000442F                 jnz     short loc_441A
.text:0000000000004431                 push    r12
.text:0000000000004433                 push    rbp
.text:0000000000004434                 mov     r12d, edx
.text:0000000000004437                 push    rbx
.text:0000000000004438                 mov     rbp, rsi
.text:000000000000443B                 mov     rbx, rdi
.text:000000000000443E                 call    _fileno
.text:0000000000004443                 mov     edx, r12d       ; whence
.text:0000000000004446                 mov     rsi, rbp        ; offset
.text:0000000000004449                 mov     edi, eax        ; fd
.text:000000000000444B                 call    _lseek
.text:0000000000004450                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004454                 jz      short loc_4462
.text:0000000000004456                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004459                 mov     [rbx+90h], rax
.text:0000000000004460                 xor     eax, eax
.text:0000000000004462
.text:0000000000004462 loc_4462:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004462                 pop     rbx
.text:0000000000004463                 pop     rbp
.text:0000000000004464                 pop     r12
.text:0000000000004466                 retn
.text:0000000000004466 ; } // starts at 4410
.text:0000000000004466 rpl_fseeko      endp
.text:0000000000004466
.text:0000000000004466 ; ---------------------------------------------------------------------------
.text:0000000000004467                 align 10h
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470 ; Attributes: info_from_lumina
.text:0000000000004470
.text:0000000000004470 ; void _libc_csu_init(void)
.text:0000000000004470                 public __libc_csu_init
.text:0000000000004470 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 push    r15
.text:0000000000004472                 push    r14
.text:0000000000004474                 mov     r15, rdx
.text:0000000000004477                 push    r13
.text:0000000000004479                 push    r12
.text:000000000000447B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004482                 push    rbp
.text:0000000000004483                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000448A                 push    rbx
.text:000000000000448B                 mov     r13d, edi
.text:000000000000448E                 mov     r14, rsi
.text:0000000000004491                 sub     rbp, r12
.text:0000000000004494                 sub     rsp, 8
.text:0000000000004498                 sar     rbp, 3
.text:000000000000449C                 call    _init_proc
.text:00000000000044A1                 test    rbp, rbp
.text:00000000000044A4                 jz      short loc_44C6
.text:00000000000044A6                 xor     ebx, ebx
.text:00000000000044A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000044B0                 mov     rdx, r15
.text:00000000000044B3                 mov     rsi, r14
.text:00000000000044B6                 mov     edi, r13d
.text:00000000000044B9                 call    ds:(__frame_dummy_init_array_entry - 206B70h)[r12+rbx*8]
.text:00000000000044BD                 add     rbx, 1
.text:00000000000044C1                 cmp     rbp, rbx
.text:00000000000044C4                 jnz     short loc_44B0
.text:00000000000044C6
.text:00000000000044C6 loc_44C6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000044C6                 add     rsp, 8
.text:00000000000044CA                 pop     rbx
.text:00000000000044CB                 pop     rbp
.text:00000000000044CC                 pop     r12
.text:00000000000044CE                 pop     r13
.text:00000000000044D0                 pop     r14
.text:00000000000044D2                 pop     r15
.text:00000000000044D4                 retn
.text:00000000000044D4 ; } // starts at 4470
.text:00000000000044D4 __libc_csu_init endp
.text:00000000000044D4
.text:00000000000044D4 ; ---------------------------------------------------------------------------
.text:00000000000044D5                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0
.text:00000000000044E0 ; void _libc_csu_fini(void)
.text:00000000000044E0                 public __libc_csu_fini
.text:00000000000044E0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 rep retn
.text:00000000000044E0 ; } // starts at 44E0
.text:00000000000044E0 __libc_csu_fini endp
.text:00000000000044E0
.text:00000000000044E0 ; ---------------------------------------------------------------------------
.text:00000000000044E2                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0
.text:00000000000044F0 atexit          proc near               ; CODE XREF: main+59↑p
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000044F7                 xor     esi, esi        ; obj
.text:00000000000044F9                 jmp     ___cxa_atexit
.text:00000000000044F9 ; } // starts at 44F0
.text:00000000000044F9 atexit          endp
.text:00000000000044F9
.text:00000000000044F9 _text           ends
.text:00000000000044F9
LOAD:00000000000044FE ; ===========================================================================
LOAD:00000000000044FE
LOAD:00000000000044FE ; Segment type: Pure code
LOAD:00000000000044FE ; Segment permissions: Read/Execute
LOAD:00000000000044FE LOAD            segment byte public 'CODE' use64
LOAD:00000000000044FE                 assume cs:LOAD
LOAD:00000000000044FE                 ;org 44FEh
LOAD:00000000000044FE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000044FE                 align 20h
LOAD:00000000000044FE LOAD            ends
LOAD:00000000000044FE
.fini:0000000000004500 ; ===========================================================================
.fini:0000000000004500
.fini:0000000000004500 ; Segment type: Pure code
.fini:0000000000004500 ; Segment permissions: Read/Execute
.fini:0000000000004500 _fini           segment dword public 'CODE' use64
.fini:0000000000004500                 assume cs:_fini
.fini:0000000000004500                 ;org 4500h
.fini:0000000000004500                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004500
.fini:0000000000004500 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004500
.fini:0000000000004500
.fini:0000000000004500                 public _term_proc
.fini:0000000000004500 _term_proc      proc near
.fini:0000000000004500                 sub     rsp, 8          ; _fini
.fini:0000000000004504                 add     rsp, 8
.fini:0000000000004508                 retn
.fini:0000000000004508 _term_proc      endp
.fini:0000000000004508
.fini:0000000000004508 _fini           ends
.fini:0000000000004508
LOAD:0000000000004509 ; ===========================================================================
LOAD:0000000000004509
LOAD:0000000000004509 ; Segment type: Pure code
LOAD:0000000000004509 ; Segment permissions: Read/Execute
LOAD:0000000000004509 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004509                 assume cs:LOAD
LOAD:0000000000004509                 ;org 4509h
LOAD:0000000000004509                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004509                 align 20h
LOAD:0000000000004509 LOAD            ends
LOAD:0000000000004509
.rodata:0000000000004520 ; ===========================================================================
.rodata:0000000000004520
.rodata:0000000000004520 ; Segment type: Pure data
.rodata:0000000000004520 ; Segment permissions: Read
.rodata:0000000000004520 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004520                 assume cs:_rodata
.rodata:0000000000004520                 ;org 4520h
.rodata:0000000000004520                 public _IO_stdin_used
.rodata:0000000000004520 _IO_stdin_used  db    1
.rodata:0000000000004521                 db    0
.rodata:0000000000004522                 db    2
.rodata:0000000000004523                 db    0
.rodata:0000000000004524 ; const char aUsageSOption[]
.rodata:0000000000004524 aUsageSOption   db 'Usage: %s [OPTION]...',0Ah,0
.rodata:0000000000004524                                         ; DATA XREF: usage:loc_17FD↑o
.rodata:000000000000453B asc_453B        db '[',0                ; DATA XREF: usage+F3↑o
.rodata:000000000000453D aTestInvocation db 'test invocation',0  ; DATA XREF: usage+11A↑o
.rodata:000000000000454D aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000454D                                         ; DATA XREF: usage+14A↑o
.rodata:000000000000454D                                         ; usage+244↑o ...
.rodata:0000000000004563 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+15B↑o
.rodata:000000000000456D aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+167↑o
.rodata:000000000000457C aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+FA↑o
.rodata:0000000000004586 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+126↑o
.rodata:0000000000004590 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+13E↑o
.rodata:000000000000459A ; const char aSOnlineHelpS[]
.rodata:000000000000459A aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:000000000000459A                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000045B1 unk_45B1        db  47h ; G             ; DATA XREF: main+BD↑o
.rodata:00000000000045B1                                         ; usage+1CE↑o ...
.rodata:00000000000045B2                 db  4Eh ; N
.rodata:00000000000045B3                 db  55h ; U
.rodata:00000000000045B4                 db  20h
.rodata:00000000000045B5 ; const char domainname[]
.rodata:00000000000045B5 domainname      db 'coreutils',0        ; DATA XREF: main+30↑o
.rodata:00000000000045B5                                         ; main+3C↑o ...
.rodata:00000000000045BF ; const char s2[]
.rodata:00000000000045BF s2              db 'en_',0              ; DATA XREF: usage+1F5↑o
.rodata:00000000000045BF                                         ; usage+2B6↑o
.rodata:00000000000045C3 ; const char aFullDocumentat[]
.rodata:00000000000045C3 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000045C3                                         ; DATA XREF: usage:loc_19B1↑o
.rodata:00000000000045C3                                         ; usage:loc_1A6E↑o
.rodata:00000000000045DE ; const char dirname[]
.rodata:00000000000045DE dirname         db '/usr/local/share/locale',0
.rodata:00000000000045DE                                         ; DATA XREF: main+29↑o
.rodata:00000000000045F6 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+B6↑o
.rodata:0000000000004606 ; const char aExtraOperandS[]
.rodata:0000000000004606 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+160↑o
.rodata:0000000000004617 ; const char msgid[]
.rodata:0000000000004617 msgid           db 'not a tty',0        ; DATA XREF: main:loc_1636↑o
.rodata:0000000000004617                                         ; main+C4↑o ...
.rodata:0000000000004621 aSilent         db 'silent',0           ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000004628 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:0000000000206BA0↓o
.rodata:000000000000462E aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000206BC0↓o
.rodata:0000000000004633 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:000000000000463B                 align 20h
.rodata:0000000000004640 ; const char aTrySHelpForMor[]
.rodata:0000000000004640 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004640                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004667                 align 8
.rodata:0000000000004668 ; const char aPrintTheFileNa[]
.rodata:0000000000004668 aPrintTheFileNa db 'Print the file name of the terminal connected to standard input.',0Ah
.rodata:0000000000004668                                         ; DATA XREF: usage+84↑o
.rodata:0000000000004668                 db 0Ah
.rodata:0000000000004668                 db '  -s, --silent, --quiet   print nothing, only return an exit stat'
.rodata:0000000000004668                 db 'us',0Ah,0
.rodata:00000000000046EF                 align 10h
.rodata:00000000000046F0 ; const char aHelpDisplayThi[]
.rodata:00000000000046F0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000046F0                                         ; DATA XREF: usage+A9↑o
.rodata:000000000000471D                 align 20h
.rodata:0000000000004720 ; const char aVersionOutputV[]
.rodata:0000000000004720 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004720                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000004756                 align 8
.rodata:0000000000004758 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004758                                         ; DATA XREF: usage+1C7↑o
.rodata:0000000000004758                                         ; usage+22B↑o ...
.rodata:0000000000004780 ; const char aReportAnyTrans[]
.rodata:0000000000004780 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004780                                         ; DATA XREF: usage+31F↑o
.rodata:0000000000004780                 db 'am/>',0Ah,0
.rodata:00000000000047C7                 align 8
.rodata:00000000000047C8 ; const char aOrAvailableLoc[]
.rodata:00000000000047C8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000047C8                                         ; DATA XREF: usage:loc_19F6↑o
.rodata:00000000000047FB a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004800 ; const char aWriteError[]
.rodata:0000000000004800 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1B53↑o
.rodata:000000000000480C ; const char format[]
.rodata:000000000000480C format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000480C                                         ; close_stdout+8F↑o ...
.rodata:0000000000004813                 align 8
.rodata:0000000000004818 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004818                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004850 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004858 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000485C unk_485C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000485D                 db  80h
.rodata:000000000000485E                 db  98h
.rodata:000000000000485F                 db    0
.rodata:0000000000004860 unk_4860        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004861                 db  80h
.rodata:0000000000004862                 db  99h
.rodata:0000000000004863                 db    0
.rodata:0000000000004864 unk_4864        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004865                 db    7
.rodata:0000000000004866                 db  65h ; e
.rodata:0000000000004867                 db    0
.rodata:0000000000004868 unk_4868        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004869                 db 0AFh
.rodata:000000000000486A                 db    0
.rodata:000000000000486B unk_486B        db  22h ; "             ; DATA XREF: gettext_quote:loc_1C80↑o
.rodata:000000000000486B                                         ; quotearg_buffer_restyled:loc_2A3B↑o ...
.rodata:000000000000486C                 db    0
.rodata:000000000000486D ; const char asc_486D[2]
.rodata:000000000000486D asc_486D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000486D                                         ; quotearg_buffer_restyled:loc_1E03↑o ...
.rodata:000000000000486F ; const char asc_486F[2]
.rodata:000000000000486F asc_486F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000486F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004871 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004879 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:000000000000487F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:000000000000488C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:000000000000488C                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004899 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004899                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:00000000000048AD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:00000000000048AF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:00000000000048B7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:00000000000048BF                 align 20h
.rodata:00000000000048C0 jpt_1DE1        dd offset loc_2B8A - 48C0h
.rodata:00000000000048C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000048C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000048C0                 dd offset loc_1DE3 - 48C0h ; jump table for switch statement
.rodata:00000000000048C0                 dd offset loc_2DB8 - 48C0h
.rodata:00000000000048C0                 dd offset loc_2BC4 - 48C0h
.rodata:00000000000048C0                 dd offset loc_29B4 - 48C0h
.rodata:00000000000048C0                 dd offset loc_2A10 - 48C0h
.rodata:00000000000048C0                 dd offset loc_2A65 - 48C0h
.rodata:00000000000048C0                 dd offset loc_2AAA - 48C0h
.rodata:00000000000048C0                 dd offset loc_2AE4 - 48C0h
.rodata:00000000000048C0                 dd offset loc_2AE4 - 48C0h
.rodata:00000000000048C0                 dd offset loc_2AE4 - 48C0h
.rodata:00000000000048EC jpt_1F3E        dd offset loc_2160 - 48ECh, offset def_1F3E - 48ECh, offset def_1F3E - 48ECh
.rodata:00000000000048EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000048EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000048EC                 dd offset def_1F3E - 48ECh, offset def_1F3E - 48ECh, offset def_1F3E - 48ECh ; jump table for switch statement
.rodata:00000000000048EC                 dd offset def_1F3E - 48ECh, offset loc_21A0 - 48ECh, offset loc_20A8 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2068 - 48ECh, offset loc_2230 - 48ECh, offset loc_2220 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2210 - 48ECh, offset loc_2200 - 48ECh, offset def_1F3E - 48ECh
.rodata:00000000000048EC                 dd offset def_1F3E - 48ECh, offset def_1F3E - 48ECh, offset def_1F3E - 48ECh
.rodata:00000000000048EC                 dd offset def_1F3E - 48ECh, offset def_1F3E - 48ECh, offset def_1F3E - 48ECh
.rodata:00000000000048EC                 dd offset def_1F3E - 48ECh, offset def_1F3E - 48ECh, offset def_1F3E - 48ECh
.rodata:00000000000048EC                 dd offset def_1F3E - 48ECh, offset def_1F3E - 48ECh, offset def_1F3E - 48ECh
.rodata:00000000000048EC                 dd offset def_1F3E - 48ECh, offset def_1F3E - 48ECh, offset def_1F3E - 48ECh
.rodata:00000000000048EC                 dd offset def_1F3E - 48ECh, offset def_1F3E - 48ECh, offset loc_21F0 - 48ECh
.rodata:00000000000048EC                 dd offset loc_21E0 - 48ECh, offset loc_21E0 - 48ECh, offset loc_21B0 - 48ECh
.rodata:00000000000048EC                 dd offset loc_21E0 - 48ECh, offset loc_2188 - 48ECh, offset loc_21E0 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2043 - 48ECh, offset loc_21E0 - 48ECh, offset loc_21E0 - 48ECh
.rodata:00000000000048EC                 dd offset loc_21E0 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_21E0 - 48ECh
.rodata:00000000000048EC                 dd offset loc_21E0 - 48ECh, offset loc_21E0 - 48ECh, offset loc_21E0 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2013 - 48ECh, offset def_1F3E - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_21E0 - 48ECh, offset loc_20B8 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_21E0 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_21E0 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_2188 - 48ECh, offset loc_2188 - 48ECh, offset loc_2188 - 48ECh
.rodata:00000000000048EC                 dd offset loc_1F43 - 48ECh, offset loc_21E0 - 48ECh, offset loc_1F43 - 48ECh
.rodata:00000000000048EC                 dd offset loc_21B0 - 48ECh
.rodata:0000000000004AE8 jpt_22CA        dd offset loc_2330 - 4AE8h, offset def_22CA - 4AE8h, offset def_22CA - 4AE8h
.rodata:0000000000004AE8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000004AE8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000004AE8                 dd offset def_22CA - 4AE8h, offset def_22CA - 4AE8h, offset def_22CA - 4AE8h ; jump table for switch statement
.rodata:0000000000004AE8                 dd offset def_22CA - 4AE8h, offset loc_2320 - 4AE8h, offset loc_2470 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_2458 - 4AE8h, offset loc_2308 - 4AE8h, offset loc_2448 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_22F0 - 4AE8h, offset loc_2430 - 4AE8h, offset def_22CA - 4AE8h
.rodata:0000000000004AE8                 dd offset def_22CA - 4AE8h, offset def_22CA - 4AE8h, offset def_22CA - 4AE8h
.rodata:0000000000004AE8                 dd offset def_22CA - 4AE8h, offset def_22CA - 4AE8h, offset def_22CA - 4AE8h
.rodata:0000000000004AE8                 dd offset def_22CA - 4AE8h, offset def_22CA - 4AE8h, offset def_22CA - 4AE8h
.rodata:0000000000004AE8                 dd offset def_22CA - 4AE8h, offset def_22CA - 4AE8h, offset def_22CA - 4AE8h
.rodata:0000000000004AE8                 dd offset def_22CA - 4AE8h, offset def_22CA - 4AE8h, offset def_22CA - 4AE8h
.rodata:0000000000004AE8                 dd offset def_22CA - 4AE8h, offset def_22CA - 4AE8h, offset loc_2418 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_2400 - 4AE8h, offset loc_2400 - 4AE8h, offset loc_23E8 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_2400 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_2400 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_2040 - 4AE8h, offset loc_2400 - 4AE8h, offset loc_2400 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_2400 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_2400 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_2400 - 4AE8h, offset loc_2400 - 4AE8h, offset loc_2400 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_2010 - 4AE8h, offset def_22CA - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_2400 - 4AE8h, offset loc_22D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_2400 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_2400 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h, offset loc_23D0 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_1F40 - 4AE8h, offset loc_2400 - 4AE8h, offset loc_1F40 - 4AE8h
.rodata:0000000000004AE8                 dd offset loc_23E8 - 4AE8h
.rodata:0000000000004CE4                 align 20h
.rodata:0000000000004D00                 public quoting_style_vals
.rodata:0000000000004D00 quoting_style_vals db    0
.rodata:0000000000004D01                 db    0
.rodata:0000000000004D02                 db    0
.rodata:0000000000004D03                 db    0
.rodata:0000000000004D04                 db    1
.rodata:0000000000004D05                 db    0
.rodata:0000000000004D06                 db    0
.rodata:0000000000004D07                 db    0
.rodata:0000000000004D08                 db    2
.rodata:0000000000004D09                 db    0
.rodata:0000000000004D0A                 db    0
.rodata:0000000000004D0B                 db    0
.rodata:0000000000004D0C                 db    3
.rodata:0000000000004D0D                 db    0
.rodata:0000000000004D0E                 db    0
.rodata:0000000000004D0F                 db    0
.rodata:0000000000004D10                 db    4
.rodata:0000000000004D11                 db    0
.rodata:0000000000004D12                 db    0
.rodata:0000000000004D13                 db    0
.rodata:0000000000004D14                 db    5
.rodata:0000000000004D15                 db    0
.rodata:0000000000004D16                 db    0
.rodata:0000000000004D17                 db    0
.rodata:0000000000004D18                 db    6
.rodata:0000000000004D19                 db    0
.rodata:0000000000004D1A                 db    0
.rodata:0000000000004D1B                 db    0
.rodata:0000000000004D1C                 db    7
.rodata:0000000000004D1D                 db    0
.rodata:0000000000004D1E                 db    0
.rodata:0000000000004D1F                 db    0
.rodata:0000000000004D20                 db    8
.rodata:0000000000004D21                 db    0
.rodata:0000000000004D22                 db    0
.rodata:0000000000004D23                 db    0
.rodata:0000000000004D24                 db    9
.rodata:0000000000004D25                 db    0
.rodata:0000000000004D26                 db    0
.rodata:0000000000004D27                 db    0
.rodata:0000000000004D28 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000004D34 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000004D3B ; const char aC_0[]
.rodata:0000000000004D3B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_392C↑o
.rodata:0000000000004D3F ; const char aWrittenByS[]
.rodata:0000000000004D3F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000004D3F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000004D4F ; const char aWrittenBySAndS[]
.rodata:0000000000004D4F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000004D4F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000004D66 ; const char aWrittenBySSAnd[]
.rodata:0000000000004D66 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000004D66                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000004D82 ; const char aReportBugsToS[]
.rodata:0000000000004D82 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000004D82                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000004D97 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000004D97                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000004DAD ; const char aSHomePageS[]
.rodata:0000000000004DAD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000004DAD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000004DC1                 align 8
.rodata:0000000000004DC8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000004DC8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000004DC8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000004DC8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000004DC8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000004DC8                 db '.',0Ah
.rodata:0000000000004DC8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000004DC8                 db 0Ah,0
.rodata:0000000000004E94                 align 8
.rodata:0000000000004E98 ; const char aWrittenBySSSAn[]
.rodata:0000000000004E98 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004E98                                         ; DATA XREF: version_etc_arn:loc_3B80↑o
.rodata:0000000000004E98                 db 'and %s.',0Ah,0
.rodata:0000000000004EB8 ; const char aWrittenBySSSSA[]
.rodata:0000000000004EB8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004EB8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000004EB8                 db '%s, and %s.',0Ah,0
.rodata:0000000000004EDC                 align 20h
.rodata:0000000000004EE0 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000004EE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004EE0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000004EE0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000004F08 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000004F08 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004F08                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000004F08                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000004F34                 align 8
.rodata:0000000000004F38 ; const char aWrittenBySSSSS[]
.rodata:0000000000004F38 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004F38                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000004F38                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000004F38                 db 'and %s.',0Ah,0
.rodata:0000000000004F68 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000004F68 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004F68                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000004F68                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000004F68                 db '%s, and %s.',0Ah,0
.rodata:0000000000004F9C                 align 20h
.rodata:0000000000004FA0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004FA0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000004FA0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000004FA0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000004FDC                 align 20h
.rodata:0000000000004FE0 ; const char aGeneralHelpUsi[]
.rodata:0000000000004FE0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000004FE0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000004FE0                 db 0
.rodata:0000000000005021                 align 8
.rodata:0000000000005028 jpt_3994        dd offset loc_3A16 - 5028h
.rodata:0000000000005028                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005028                                         ; version_etc_arn+9D↑r
.rodata:0000000000005028                 dd offset loc_3AA8 - 5028h ; jump table for switch statement
.rodata:0000000000005028                 dd offset loc_3AE8 - 5028h
.rodata:0000000000005028                 dd offset loc_3B30 - 5028h
.rodata:0000000000005028                 dd offset loc_3B80 - 5028h
.rodata:0000000000005028                 dd offset loc_3BD8 - 5028h
.rodata:0000000000005028                 dd offset loc_3C08 - 5028h
.rodata:0000000000005028                 dd offset loc_3C70 - 5028h
.rodata:0000000000005028                 dd offset loc_39A0 - 5028h
.rodata:0000000000005028                 dd offset loc_3A50 - 5028h
.rodata:0000000000005050                 align 20h
.rodata:0000000000005060                 public version_etc_copyright
.rodata:0000000000005060 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005060                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000508F ; const char aMemoryExhauste[]
.rodata:000000000000508F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000050A0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000050A2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_42F0↑o
.rodata:00000000000050A8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000050A8                                         ; locale_charset:loc_4340↑o
.rodata:00000000000050A8 _rodata         ends
.rodata:00000000000050A8
LOAD:00000000000050AE ; ===========================================================================
LOAD:00000000000050AE
LOAD:00000000000050AE ; Segment type: Pure code
LOAD:00000000000050AE ; Segment permissions: Read/Execute
LOAD:00000000000050AE LOAD            segment byte public 'CODE' use64
LOAD:00000000000050AE                 assume cs:LOAD
LOAD:00000000000050AE                 ;org 50AEh
LOAD:00000000000050AE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000050AE                 align 10h
LOAD:00000000000050AE LOAD            ends
LOAD:00000000000050AE
.eh_frame_hdr:00000000000050B0 ; ===========================================================================
.eh_frame_hdr:00000000000050B0
.eh_frame_hdr:00000000000050B0 ; Segment type: Pure data
.eh_frame_hdr:00000000000050B0 ; Segment permissions: Read
.eh_frame_hdr:00000000000050B0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000050B0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000050B0                 ;org 50B0h
.eh_frame_hdr:00000000000050B0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000050B1                 db  1Bh
.eh_frame_hdr:00000000000050B2                 db    3
.eh_frame_hdr:00000000000050B3                 db  3Bh ; ;
.eh_frame_hdr:00000000000050B4                 db  3Ch ; <
.eh_frame_hdr:00000000000050B5                 db    2
.eh_frame_hdr:00000000000050B6                 db    0
.eh_frame_hdr:00000000000050B7                 db    0
.eh_frame_hdr:00000000000050B8                 db  46h ; F
.eh_frame_hdr:00000000000050B9                 db    0
.eh_frame_hdr:00000000000050BA                 db    0
.eh_frame_hdr:00000000000050BB                 db    0
.eh_frame_hdr:00000000000050BC                 db  90h
.eh_frame_hdr:00000000000050BD                 db 0C1h
.eh_frame_hdr:00000000000050BE                 db 0FFh
.eh_frame_hdr:00000000000050BF                 db 0FFh
.eh_frame_hdr:00000000000050C0                 db  88h
.eh_frame_hdr:00000000000050C1                 db    2
.eh_frame_hdr:00000000000050C2                 db    0
.eh_frame_hdr:00000000000050C3                 db    0
.eh_frame_hdr:00000000000050C4                 db  40h ; @
.eh_frame_hdr:00000000000050C5                 db 0C4h
.eh_frame_hdr:00000000000050C6                 db 0FFh
.eh_frame_hdr:00000000000050C7                 db 0FFh
.eh_frame_hdr:00000000000050C8                 db 0B0h
.eh_frame_hdr:00000000000050C9                 db    2
.eh_frame_hdr:00000000000050CA                 db    0
.eh_frame_hdr:00000000000050CB                 db    0
.eh_frame_hdr:00000000000050CC                 db  50h ; P
.eh_frame_hdr:00000000000050CD                 db 0C4h
.eh_frame_hdr:00000000000050CE                 db 0FFh
.eh_frame_hdr:00000000000050CF                 db 0FFh
.eh_frame_hdr:00000000000050D0                 db 0F4h
.eh_frame_hdr:00000000000050D1                 db    2
.eh_frame_hdr:00000000000050D2                 db    0
.eh_frame_hdr:00000000000050D3                 db    0
.eh_frame_hdr:00000000000050D4                 db 0E0h
.eh_frame_hdr:00000000000050D5                 db 0C5h
.eh_frame_hdr:00000000000050D6                 db 0FFh
.eh_frame_hdr:00000000000050D7                 db 0FFh
.eh_frame_hdr:00000000000050D8                 db  58h ; X
.eh_frame_hdr:00000000000050D9                 db    2
.eh_frame_hdr:00000000000050DA                 db    0
.eh_frame_hdr:00000000000050DB                 db    0
.eh_frame_hdr:00000000000050DC                 db 0F0h
.eh_frame_hdr:00000000000050DD                 db 0C6h
.eh_frame_hdr:00000000000050DE                 db 0FFh
.eh_frame_hdr:00000000000050DF                 db 0FFh
.eh_frame_hdr:00000000000050E0                 db 0C8h
.eh_frame_hdr:00000000000050E1                 db    2
.eh_frame_hdr:00000000000050E2                 db    0
.eh_frame_hdr:00000000000050E3                 db    0
.eh_frame_hdr:00000000000050E4                 db  40h ; @
.eh_frame_hdr:00000000000050E5                 db 0CAh
.eh_frame_hdr:00000000000050E6                 db 0FFh
.eh_frame_hdr:00000000000050E7                 db 0FFh
.eh_frame_hdr:00000000000050E8                 db  28h ; (
.eh_frame_hdr:00000000000050E9                 db    3
.eh_frame_hdr:00000000000050EA                 db    0
.eh_frame_hdr:00000000000050EB                 db    0
.eh_frame_hdr:00000000000050EC                 db  50h ; P
.eh_frame_hdr:00000000000050ED                 db 0CAh
.eh_frame_hdr:00000000000050EE                 db 0FFh
.eh_frame_hdr:00000000000050EF                 db 0FFh
.eh_frame_hdr:00000000000050F0                 db  3Ch ; <
.eh_frame_hdr:00000000000050F1                 db    3
.eh_frame_hdr:00000000000050F2                 db    0
.eh_frame_hdr:00000000000050F3                 db    0
.eh_frame_hdr:00000000000050F4                 db  60h ; `
.eh_frame_hdr:00000000000050F5                 db 0CAh
.eh_frame_hdr:00000000000050F6                 db 0FFh
.eh_frame_hdr:00000000000050F7                 db 0FFh
.eh_frame_hdr:00000000000050F8                 db  50h ; P
.eh_frame_hdr:00000000000050F9                 db    3
.eh_frame_hdr:00000000000050FA                 db    0
.eh_frame_hdr:00000000000050FB                 db    0
.eh_frame_hdr:00000000000050FC                 db  10h
.eh_frame_hdr:00000000000050FD                 db 0CBh
.eh_frame_hdr:00000000000050FE                 db 0FFh
.eh_frame_hdr:00000000000050FF                 db 0FFh
.eh_frame_hdr:0000000000005100                 db  80h
.eh_frame_hdr:0000000000005101                 db    3
.eh_frame_hdr:0000000000005102                 db    0
.eh_frame_hdr:0000000000005103                 db    0
.eh_frame_hdr:0000000000005104                 db 0B0h
.eh_frame_hdr:0000000000005105                 db 0CBh
.eh_frame_hdr:0000000000005106                 db 0FFh
.eh_frame_hdr:0000000000005107                 db 0FFh
.eh_frame_hdr:0000000000005108                 db 0A0h
.eh_frame_hdr:0000000000005109                 db    3
.eh_frame_hdr:000000000000510A                 db    0
.eh_frame_hdr:000000000000510B                 db    0
.eh_frame_hdr:000000000000510C                 db 0A0h
.eh_frame_hdr:000000000000510D                 db 0CCh
.eh_frame_hdr:000000000000510E                 db 0FFh
.eh_frame_hdr:000000000000510F                 db 0FFh
.eh_frame_hdr:0000000000005110                 db 0E4h
.eh_frame_hdr:0000000000005111                 db    3
.eh_frame_hdr:0000000000005112                 db    0
.eh_frame_hdr:0000000000005113                 db    0
.eh_frame_hdr:0000000000005114                 db 0E0h
.eh_frame_hdr:0000000000005115                 db 0DEh
.eh_frame_hdr:0000000000005116                 db 0FFh
.eh_frame_hdr:0000000000005117                 db 0FFh
.eh_frame_hdr:0000000000005118                 db  5Ch ; \
.eh_frame_hdr:0000000000005119                 db    4
.eh_frame_hdr:000000000000511A                 db    0
.eh_frame_hdr:000000000000511B                 db    0
.eh_frame_hdr:000000000000511C                 db  90h
.eh_frame_hdr:000000000000511D                 db 0E0h
.eh_frame_hdr:000000000000511E                 db 0FFh
.eh_frame_hdr:000000000000511F                 db 0FFh
.eh_frame_hdr:0000000000005120                 db 0C8h
.eh_frame_hdr:0000000000005121                 db    4
.eh_frame_hdr:0000000000005122                 db    0
.eh_frame_hdr:0000000000005123                 db    0
.eh_frame_hdr:0000000000005124                 db 0D0h
.eh_frame_hdr:0000000000005125                 db 0E0h
.eh_frame_hdr:0000000000005126                 db 0FFh
.eh_frame_hdr:0000000000005127                 db 0FFh
.eh_frame_hdr:0000000000005128                 db 0F4h
.eh_frame_hdr:0000000000005129                 db    4
.eh_frame_hdr:000000000000512A                 db    0
.eh_frame_hdr:000000000000512B                 db    0
.eh_frame_hdr:000000000000512C                 db 0F0h
.eh_frame_hdr:000000000000512D                 db 0E0h
.eh_frame_hdr:000000000000512E                 db 0FFh
.eh_frame_hdr:000000000000512F                 db 0FFh
.eh_frame_hdr:0000000000005130                 db    8
.eh_frame_hdr:0000000000005131                 db    5
.eh_frame_hdr:0000000000005132                 db    0
.eh_frame_hdr:0000000000005133                 db    0
.eh_frame_hdr:0000000000005134                 db  10h
.eh_frame_hdr:0000000000005135                 db 0E1h
.eh_frame_hdr:0000000000005136                 db 0FFh
.eh_frame_hdr:0000000000005137                 db 0FFh
.eh_frame_hdr:0000000000005138                 db  1Ch
.eh_frame_hdr:0000000000005139                 db    5
.eh_frame_hdr:000000000000513A                 db    0
.eh_frame_hdr:000000000000513B                 db    0
.eh_frame_hdr:000000000000513C                 db  50h ; P
.eh_frame_hdr:000000000000513D                 db 0E1h
.eh_frame_hdr:000000000000513E                 db 0FFh
.eh_frame_hdr:000000000000513F                 db 0FFh
.eh_frame_hdr:0000000000005140                 db  30h ; 0
.eh_frame_hdr:0000000000005141                 db    5
.eh_frame_hdr:0000000000005142                 db    0
.eh_frame_hdr:0000000000005143                 db    0
.eh_frame_hdr:0000000000005144                 db  70h ; p
.eh_frame_hdr:0000000000005145                 db 0E1h
.eh_frame_hdr:0000000000005146                 db 0FFh
.eh_frame_hdr:0000000000005147                 db 0FFh
.eh_frame_hdr:0000000000005148                 db  44h ; D
.eh_frame_hdr:0000000000005149                 db    5
.eh_frame_hdr:000000000000514A                 db    0
.eh_frame_hdr:000000000000514B                 db    0
.eh_frame_hdr:000000000000514C                 db 0A0h
.eh_frame_hdr:000000000000514D                 db 0E1h
.eh_frame_hdr:000000000000514E                 db 0FFh
.eh_frame_hdr:000000000000514F                 db 0FFh
.eh_frame_hdr:0000000000005150                 db  58h ; X
.eh_frame_hdr:0000000000005151                 db    5
.eh_frame_hdr:0000000000005152                 db    0
.eh_frame_hdr:0000000000005153                 db    0
.eh_frame_hdr:0000000000005154                 db  20h
.eh_frame_hdr:0000000000005155                 db 0E2h
.eh_frame_hdr:0000000000005156                 db 0FFh
.eh_frame_hdr:0000000000005157                 db 0FFh
.eh_frame_hdr:0000000000005158                 db 0ACh
.eh_frame_hdr:0000000000005159                 db    5
.eh_frame_hdr:000000000000515A                 db    0
.eh_frame_hdr:000000000000515B                 db    0
.eh_frame_hdr:000000000000515C                 db  10h
.eh_frame_hdr:000000000000515D                 db 0E3h
.eh_frame_hdr:000000000000515E                 db 0FFh
.eh_frame_hdr:000000000000515F                 db 0FFh
.eh_frame_hdr:0000000000005160                 db  18h
.eh_frame_hdr:0000000000005161                 db    6
.eh_frame_hdr:0000000000005162                 db    0
.eh_frame_hdr:0000000000005163                 db    0
.eh_frame_hdr:0000000000005164                 db  20h
.eh_frame_hdr:0000000000005165                 db 0E3h
.eh_frame_hdr:0000000000005166                 db 0FFh
.eh_frame_hdr:0000000000005167                 db 0FFh
.eh_frame_hdr:0000000000005168                 db  2Ch ; ,
.eh_frame_hdr:0000000000005169                 db    6
.eh_frame_hdr:000000000000516A                 db    0
.eh_frame_hdr:000000000000516B                 db    0
.eh_frame_hdr:000000000000516C                 db 0C0h
.eh_frame_hdr:000000000000516D                 db 0E3h
.eh_frame_hdr:000000000000516E                 db 0FFh
.eh_frame_hdr:000000000000516F                 db 0FFh
.eh_frame_hdr:0000000000005170                 db  58h ; X
.eh_frame_hdr:0000000000005171                 db    6
.eh_frame_hdr:0000000000005172                 db    0
.eh_frame_hdr:0000000000005173                 db    0
.eh_frame_hdr:0000000000005174                 db 0E0h
.eh_frame_hdr:0000000000005175                 db 0E3h
.eh_frame_hdr:0000000000005176                 db 0FFh
.eh_frame_hdr:0000000000005177                 db 0FFh
.eh_frame_hdr:0000000000005178                 db  6Ch ; l
.eh_frame_hdr:0000000000005179                 db    6
.eh_frame_hdr:000000000000517A                 db    0
.eh_frame_hdr:000000000000517B                 db    0
.eh_frame_hdr:000000000000517C                 db 0F0h
.eh_frame_hdr:000000000000517D                 db 0E3h
.eh_frame_hdr:000000000000517E                 db 0FFh
.eh_frame_hdr:000000000000517F                 db 0FFh
.eh_frame_hdr:0000000000005180                 db  80h
.eh_frame_hdr:0000000000005181                 db    6
.eh_frame_hdr:0000000000005182                 db    0
.eh_frame_hdr:0000000000005183                 db    0
.eh_frame_hdr:0000000000005184                 db  10h
.eh_frame_hdr:0000000000005185                 db 0E4h
.eh_frame_hdr:0000000000005186                 db 0FFh
.eh_frame_hdr:0000000000005187                 db 0FFh
.eh_frame_hdr:0000000000005188                 db  94h
.eh_frame_hdr:0000000000005189                 db    6
.eh_frame_hdr:000000000000518A                 db    0
.eh_frame_hdr:000000000000518B                 db    0
.eh_frame_hdr:000000000000518C                 db  30h ; 0
.eh_frame_hdr:000000000000518D                 db 0E4h
.eh_frame_hdr:000000000000518E                 db 0FFh
.eh_frame_hdr:000000000000518F                 db 0FFh
.eh_frame_hdr:0000000000005190                 db 0A8h
.eh_frame_hdr:0000000000005191                 db    6
.eh_frame_hdr:0000000000005192                 db    0
.eh_frame_hdr:0000000000005193                 db    0
.eh_frame_hdr:0000000000005194                 db 0C0h
.eh_frame_hdr:0000000000005195                 db 0E4h
.eh_frame_hdr:0000000000005196                 db 0FFh
.eh_frame_hdr:0000000000005197                 db 0FFh
.eh_frame_hdr:0000000000005198                 db 0C4h
.eh_frame_hdr:0000000000005199                 db    6
.eh_frame_hdr:000000000000519A                 db    0
.eh_frame_hdr:000000000000519B                 db    0
.eh_frame_hdr:000000000000519C                 db  50h ; P
.eh_frame_hdr:000000000000519D                 db 0E5h
.eh_frame_hdr:000000000000519E                 db 0FFh
.eh_frame_hdr:000000000000519F                 db 0FFh
.eh_frame_hdr:00000000000051A0                 db 0E0h
.eh_frame_hdr:00000000000051A1                 db    6
.eh_frame_hdr:00000000000051A2                 db    0
.eh_frame_hdr:00000000000051A3                 db    0
.eh_frame_hdr:00000000000051A4                 db  60h ; `
.eh_frame_hdr:00000000000051A5                 db 0E5h
.eh_frame_hdr:00000000000051A6                 db 0FFh
.eh_frame_hdr:00000000000051A7                 db 0FFh
.eh_frame_hdr:00000000000051A8                 db 0F4h
.eh_frame_hdr:00000000000051A9                 db    6
.eh_frame_hdr:00000000000051AA                 db    0
.eh_frame_hdr:00000000000051AB                 db    0
.eh_frame_hdr:00000000000051AC                 db  70h ; p
.eh_frame_hdr:00000000000051AD                 db 0E5h
.eh_frame_hdr:00000000000051AE                 db 0FFh
.eh_frame_hdr:00000000000051AF                 db 0FFh
.eh_frame_hdr:00000000000051B0                 db    8
.eh_frame_hdr:00000000000051B1                 db    7
.eh_frame_hdr:00000000000051B2                 db    0
.eh_frame_hdr:00000000000051B3                 db    0
.eh_frame_hdr:00000000000051B4                 db  10h
.eh_frame_hdr:00000000000051B5                 db 0E6h
.eh_frame_hdr:00000000000051B6                 db 0FFh
.eh_frame_hdr:00000000000051B7                 db 0FFh
.eh_frame_hdr:00000000000051B8                 db  24h ; $
.eh_frame_hdr:00000000000051B9                 db    7
.eh_frame_hdr:00000000000051BA                 db    0
.eh_frame_hdr:00000000000051BB                 db    0
.eh_frame_hdr:00000000000051BC                 db  20h
.eh_frame_hdr:00000000000051BD                 db 0E6h
.eh_frame_hdr:00000000000051BE                 db 0FFh
.eh_frame_hdr:00000000000051BF                 db 0FFh
.eh_frame_hdr:00000000000051C0                 db  38h ; 8
.eh_frame_hdr:00000000000051C1                 db    7
.eh_frame_hdr:00000000000051C2                 db    0
.eh_frame_hdr:00000000000051C3                 db    0
.eh_frame_hdr:00000000000051C4                 db  40h ; @
.eh_frame_hdr:00000000000051C5                 db 0E6h
.eh_frame_hdr:00000000000051C6                 db 0FFh
.eh_frame_hdr:00000000000051C7                 db 0FFh
.eh_frame_hdr:00000000000051C8                 db  4Ch ; L
.eh_frame_hdr:00000000000051C9                 db    7
.eh_frame_hdr:00000000000051CA                 db    0
.eh_frame_hdr:00000000000051CB                 db    0
.eh_frame_hdr:00000000000051CC                 db  50h ; P
.eh_frame_hdr:00000000000051CD                 db 0E6h
.eh_frame_hdr:00000000000051CE                 db 0FFh
.eh_frame_hdr:00000000000051CF                 db 0FFh
.eh_frame_hdr:00000000000051D0                 db  60h ; `
.eh_frame_hdr:00000000000051D1                 db    7
.eh_frame_hdr:00000000000051D2                 db    0
.eh_frame_hdr:00000000000051D3                 db    0
.eh_frame_hdr:00000000000051D4                 db 0E0h
.eh_frame_hdr:00000000000051D5                 db 0E6h
.eh_frame_hdr:00000000000051D6                 db 0FFh
.eh_frame_hdr:00000000000051D7                 db 0FFh
.eh_frame_hdr:00000000000051D8                 db  7Ch ; |
.eh_frame_hdr:00000000000051D9                 db    7
.eh_frame_hdr:00000000000051DA                 db    0
.eh_frame_hdr:00000000000051DB                 db    0
.eh_frame_hdr:00000000000051DC                 db  80h
.eh_frame_hdr:00000000000051DD                 db 0E7h
.eh_frame_hdr:00000000000051DE                 db 0FFh
.eh_frame_hdr:00000000000051DF                 db 0FFh
.eh_frame_hdr:00000000000051E0                 db  98h
.eh_frame_hdr:00000000000051E1                 db    7
.eh_frame_hdr:00000000000051E2                 db    0
.eh_frame_hdr:00000000000051E3                 db    0
.eh_frame_hdr:00000000000051E4                 db  90h
.eh_frame_hdr:00000000000051E5                 db 0E7h
.eh_frame_hdr:00000000000051E6                 db 0FFh
.eh_frame_hdr:00000000000051E7                 db 0FFh
.eh_frame_hdr:00000000000051E8                 db 0ACh
.eh_frame_hdr:00000000000051E9                 db    7
.eh_frame_hdr:00000000000051EA                 db    0
.eh_frame_hdr:00000000000051EB                 db    0
.eh_frame_hdr:00000000000051EC                 db 0B0h
.eh_frame_hdr:00000000000051ED                 db 0E7h
.eh_frame_hdr:00000000000051EE                 db 0FFh
.eh_frame_hdr:00000000000051EF                 db 0FFh
.eh_frame_hdr:00000000000051F0                 db 0C0h
.eh_frame_hdr:00000000000051F1                 db    7
.eh_frame_hdr:00000000000051F2                 db    0
.eh_frame_hdr:00000000000051F3                 db    0
.eh_frame_hdr:00000000000051F4                 db 0D0h
.eh_frame_hdr:00000000000051F5                 db 0E7h
.eh_frame_hdr:00000000000051F6                 db 0FFh
.eh_frame_hdr:00000000000051F7                 db 0FFh
.eh_frame_hdr:00000000000051F8                 db 0D4h
.eh_frame_hdr:00000000000051F9                 db    7
.eh_frame_hdr:00000000000051FA                 db    0
.eh_frame_hdr:00000000000051FB                 db    0
.eh_frame_hdr:00000000000051FC                 db 0E0h
.eh_frame_hdr:00000000000051FD                 db 0E7h
.eh_frame_hdr:00000000000051FE                 db 0FFh
.eh_frame_hdr:00000000000051FF                 db 0FFh
.eh_frame_hdr:0000000000005200                 db 0E8h
.eh_frame_hdr:0000000000005201                 db    7
.eh_frame_hdr:0000000000005202                 db    0
.eh_frame_hdr:0000000000005203                 db    0
.eh_frame_hdr:0000000000005204                 db    0
.eh_frame_hdr:0000000000005205                 db 0E8h
.eh_frame_hdr:0000000000005206                 db 0FFh
.eh_frame_hdr:0000000000005207                 db 0FFh
.eh_frame_hdr:0000000000005208                 db 0FCh
.eh_frame_hdr:0000000000005209                 db    7
.eh_frame_hdr:000000000000520A                 db    0
.eh_frame_hdr:000000000000520B                 db    0
.eh_frame_hdr:000000000000520C                 db  20h
.eh_frame_hdr:000000000000520D                 db 0E8h
.eh_frame_hdr:000000000000520E                 db 0FFh
.eh_frame_hdr:000000000000520F                 db 0FFh
.eh_frame_hdr:0000000000005210                 db  10h
.eh_frame_hdr:0000000000005211                 db    8
.eh_frame_hdr:0000000000005212                 db    0
.eh_frame_hdr:0000000000005213                 db    0
.eh_frame_hdr:0000000000005214                 db  40h ; @
.eh_frame_hdr:0000000000005215                 db 0E8h
.eh_frame_hdr:0000000000005216                 db 0FFh
.eh_frame_hdr:0000000000005217                 db 0FFh
.eh_frame_hdr:0000000000005218                 db  28h ; (
.eh_frame_hdr:0000000000005219                 db    8
.eh_frame_hdr:000000000000521A                 db    0
.eh_frame_hdr:000000000000521B                 db    0
.eh_frame_hdr:000000000000521C                 db  60h ; `
.eh_frame_hdr:000000000000521D                 db 0ECh
.eh_frame_hdr:000000000000521E                 db 0FFh
.eh_frame_hdr:000000000000521F                 db 0FFh
.eh_frame_hdr:0000000000005220                 db  3Ch ; <
.eh_frame_hdr:0000000000005221                 db    9
.eh_frame_hdr:0000000000005222                 db    0
.eh_frame_hdr:0000000000005223                 db    0
.eh_frame_hdr:0000000000005224                 db  80h
.eh_frame_hdr:0000000000005225                 db 0ECh
.eh_frame_hdr:0000000000005226                 db 0FFh
.eh_frame_hdr:0000000000005227                 db 0FFh
.eh_frame_hdr:0000000000005228                 db  50h ; P
.eh_frame_hdr:0000000000005229                 db    9
.eh_frame_hdr:000000000000522A                 db    0
.eh_frame_hdr:000000000000522B                 db    0
.eh_frame_hdr:000000000000522C                 db    0
.eh_frame_hdr:000000000000522D                 db 0EDh
.eh_frame_hdr:000000000000522E                 db 0FFh
.eh_frame_hdr:000000000000522F                 db 0FFh
.eh_frame_hdr:0000000000005230                 db  6Ch ; l
.eh_frame_hdr:0000000000005231                 db    9
.eh_frame_hdr:0000000000005232                 db    0
.eh_frame_hdr:0000000000005233                 db    0
.eh_frame_hdr:0000000000005234                 db 0E0h
.eh_frame_hdr:0000000000005235                 db 0EDh
.eh_frame_hdr:0000000000005236                 db 0FFh
.eh_frame_hdr:0000000000005237                 db 0FFh
.eh_frame_hdr:0000000000005238                 db  98h
.eh_frame_hdr:0000000000005239                 db    9
.eh_frame_hdr:000000000000523A                 db    0
.eh_frame_hdr:000000000000523B                 db    0
.eh_frame_hdr:000000000000523C                 db  60h ; `
.eh_frame_hdr:000000000000523D                 db 0EEh
.eh_frame_hdr:000000000000523E                 db 0FFh
.eh_frame_hdr:000000000000523F                 db 0FFh
.eh_frame_hdr:0000000000005240                 db 0B8h
.eh_frame_hdr:0000000000005241                 db    9
.eh_frame_hdr:0000000000005242                 db    0
.eh_frame_hdr:0000000000005243                 db    0
.eh_frame_hdr:0000000000005244                 db  80h
.eh_frame_hdr:0000000000005245                 db 0EEh
.eh_frame_hdr:0000000000005246                 db 0FFh
.eh_frame_hdr:0000000000005247                 db 0FFh
.eh_frame_hdr:0000000000005248                 db 0D4h
.eh_frame_hdr:0000000000005249                 db    9
.eh_frame_hdr:000000000000524A                 db    0
.eh_frame_hdr:000000000000524B                 db    0
.eh_frame_hdr:000000000000524C                 db 0B0h
.eh_frame_hdr:000000000000524D                 db 0EEh
.eh_frame_hdr:000000000000524E                 db 0FFh
.eh_frame_hdr:000000000000524F                 db 0FFh
.eh_frame_hdr:0000000000005250                 db 0E8h
.eh_frame_hdr:0000000000005251                 db    9
.eh_frame_hdr:0000000000005252                 db    0
.eh_frame_hdr:0000000000005253                 db    0
.eh_frame_hdr:0000000000005254                 db 0C0h
.eh_frame_hdr:0000000000005255                 db 0EEh
.eh_frame_hdr:0000000000005256                 db 0FFh
.eh_frame_hdr:0000000000005257                 db 0FFh
.eh_frame_hdr:0000000000005258                 db 0FCh
.eh_frame_hdr:0000000000005259                 db    9
.eh_frame_hdr:000000000000525A                 db    0
.eh_frame_hdr:000000000000525B                 db    0
.eh_frame_hdr:000000000000525C                 db    0
.eh_frame_hdr:000000000000525D                 db 0EFh
.eh_frame_hdr:000000000000525E                 db 0FFh
.eh_frame_hdr:000000000000525F                 db 0FFh
.eh_frame_hdr:0000000000005260                 db  20h
.eh_frame_hdr:0000000000005261                 db  0Ah
.eh_frame_hdr:0000000000005262                 db    0
.eh_frame_hdr:0000000000005263                 db    0
.eh_frame_hdr:0000000000005264                 db  30h ; 0
.eh_frame_hdr:0000000000005265                 db 0EFh
.eh_frame_hdr:0000000000005266                 db 0FFh
.eh_frame_hdr:0000000000005267                 db 0FFh
.eh_frame_hdr:0000000000005268                 db  34h ; 4
.eh_frame_hdr:0000000000005269                 db  0Ah
.eh_frame_hdr:000000000000526A                 db    0
.eh_frame_hdr:000000000000526B                 db    0
.eh_frame_hdr:000000000000526C                 db 0C0h
.eh_frame_hdr:000000000000526D                 db 0EFh
.eh_frame_hdr:000000000000526E                 db 0FFh
.eh_frame_hdr:000000000000526F                 db 0FFh
.eh_frame_hdr:0000000000005270                 db  4Ch ; L
.eh_frame_hdr:0000000000005271                 db  0Ah
.eh_frame_hdr:0000000000005272                 db    0
.eh_frame_hdr:0000000000005273                 db    0
.eh_frame_hdr:0000000000005274                 db  10h
.eh_frame_hdr:0000000000005275                 db 0F0h
.eh_frame_hdr:0000000000005276                 db 0FFh
.eh_frame_hdr:0000000000005277                 db 0FFh
.eh_frame_hdr:0000000000005278                 db  64h ; d
.eh_frame_hdr:0000000000005279                 db  0Ah
.eh_frame_hdr:000000000000527A                 db    0
.eh_frame_hdr:000000000000527B                 db    0
.eh_frame_hdr:000000000000527C                 db  30h ; 0
.eh_frame_hdr:000000000000527D                 db 0F0h
.eh_frame_hdr:000000000000527E                 db 0FFh
.eh_frame_hdr:000000000000527F                 db 0FFh
.eh_frame_hdr:0000000000005280                 db  80h
.eh_frame_hdr:0000000000005281                 db  0Ah
.eh_frame_hdr:0000000000005282                 db    0
.eh_frame_hdr:0000000000005283                 db    0
.eh_frame_hdr:0000000000005284                 db  60h ; `
.eh_frame_hdr:0000000000005285                 db 0F0h
.eh_frame_hdr:0000000000005286                 db 0FFh
.eh_frame_hdr:0000000000005287                 db 0FFh
.eh_frame_hdr:0000000000005288                 db  9Ch
.eh_frame_hdr:0000000000005289                 db  0Ah
.eh_frame_hdr:000000000000528A                 db    0
.eh_frame_hdr:000000000000528B                 db    0
.eh_frame_hdr:000000000000528C                 db  90h
.eh_frame_hdr:000000000000528D                 db 0F0h
.eh_frame_hdr:000000000000528E                 db 0FFh
.eh_frame_hdr:000000000000528F                 db 0FFh
.eh_frame_hdr:0000000000005290                 db 0C4h
.eh_frame_hdr:0000000000005291                 db  0Ah
.eh_frame_hdr:0000000000005292                 db    0
.eh_frame_hdr:0000000000005293                 db    0
.eh_frame_hdr:0000000000005294                 db 0B0h
.eh_frame_hdr:0000000000005295                 db 0F0h
.eh_frame_hdr:0000000000005296                 db 0FFh
.eh_frame_hdr:0000000000005297                 db 0FFh
.eh_frame_hdr:0000000000005298                 db 0E0h
.eh_frame_hdr:0000000000005299                 db  0Ah
.eh_frame_hdr:000000000000529A                 db    0
.eh_frame_hdr:000000000000529B                 db    0
.eh_frame_hdr:000000000000529C                 db 0F0h
.eh_frame_hdr:000000000000529D                 db 0F0h
.eh_frame_hdr:000000000000529E                 db 0FFh
.eh_frame_hdr:000000000000529F                 db 0FFh
.eh_frame_hdr:00000000000052A0                 db 0F8h
.eh_frame_hdr:00000000000052A1                 db  0Ah
.eh_frame_hdr:00000000000052A2                 db    0
.eh_frame_hdr:00000000000052A3                 db    0
.eh_frame_hdr:00000000000052A4                 db  80h
.eh_frame_hdr:00000000000052A5                 db 0F1h
.eh_frame_hdr:00000000000052A6                 db 0FFh
.eh_frame_hdr:00000000000052A7                 db 0FFh
.eh_frame_hdr:00000000000052A8                 db  38h ; 8
.eh_frame_hdr:00000000000052A9                 db  0Bh
.eh_frame_hdr:00000000000052AA                 db    0
.eh_frame_hdr:00000000000052AB                 db    0
.eh_frame_hdr:00000000000052AC                 db    0
.eh_frame_hdr:00000000000052AD                 db 0F2h
.eh_frame_hdr:00000000000052AE                 db 0FFh
.eh_frame_hdr:00000000000052AF                 db 0FFh
.eh_frame_hdr:00000000000052B0                 db  88h
.eh_frame_hdr:00000000000052B1                 db  0Bh
.eh_frame_hdr:00000000000052B2                 db    0
.eh_frame_hdr:00000000000052B3                 db    0
.eh_frame_hdr:00000000000052B4                 db  60h ; `
.eh_frame_hdr:00000000000052B5                 db 0F2h
.eh_frame_hdr:00000000000052B6                 db 0FFh
.eh_frame_hdr:00000000000052B7                 db 0FFh
.eh_frame_hdr:00000000000052B8                 db 0A8h
.eh_frame_hdr:00000000000052B9                 db  0Bh
.eh_frame_hdr:00000000000052BA                 db    0
.eh_frame_hdr:00000000000052BB                 db    0
.eh_frame_hdr:00000000000052BC                 db 0A0h
.eh_frame_hdr:00000000000052BD                 db 0F2h
.eh_frame_hdr:00000000000052BE                 db 0FFh
.eh_frame_hdr:00000000000052BF                 db 0FFh
.eh_frame_hdr:00000000000052C0                 db 0C8h
.eh_frame_hdr:00000000000052C1                 db  0Bh
.eh_frame_hdr:00000000000052C2                 db    0
.eh_frame_hdr:00000000000052C3                 db    0
.eh_frame_hdr:00000000000052C4                 db  20h
.eh_frame_hdr:00000000000052C5                 db 0F3h
.eh_frame_hdr:00000000000052C6                 db 0FFh
.eh_frame_hdr:00000000000052C7                 db 0FFh
.eh_frame_hdr:00000000000052C8                 db    0
.eh_frame_hdr:00000000000052C9                 db  0Ch
.eh_frame_hdr:00000000000052CA                 db    0
.eh_frame_hdr:00000000000052CB                 db    0
.eh_frame_hdr:00000000000052CC                 db  60h ; `
.eh_frame_hdr:00000000000052CD                 db 0F3h
.eh_frame_hdr:00000000000052CE                 db 0FFh
.eh_frame_hdr:00000000000052CF                 db 0FFh
.eh_frame_hdr:00000000000052D0                 db  20h
.eh_frame_hdr:00000000000052D1                 db  0Ch
.eh_frame_hdr:00000000000052D2                 db    0
.eh_frame_hdr:00000000000052D3                 db    0
.eh_frame_hdr:00000000000052D4                 db 0C0h
.eh_frame_hdr:00000000000052D5                 db 0F3h
.eh_frame_hdr:00000000000052D6                 db 0FFh
.eh_frame_hdr:00000000000052D7                 db 0FFh
.eh_frame_hdr:00000000000052D8                 db  50h ; P
.eh_frame_hdr:00000000000052D9                 db  0Ch
.eh_frame_hdr:00000000000052DA                 db    0
.eh_frame_hdr:00000000000052DB                 db    0
.eh_frame_hdr:00000000000052DC                 db  30h ; 0
.eh_frame_hdr:00000000000052DD                 db 0F4h
.eh_frame_hdr:00000000000052DE                 db 0FFh
.eh_frame_hdr:00000000000052DF                 db 0FFh
.eh_frame_hdr:00000000000052E0                 db  98h
.eh_frame_hdr:00000000000052E1                 db  0Ch
.eh_frame_hdr:00000000000052E2                 db    0
.eh_frame_hdr:00000000000052E3                 db    0
.eh_frame_hdr:00000000000052E4                 db  40h ; @
.eh_frame_hdr:00000000000052E5                 db 0F4h
.eh_frame_hdr:00000000000052E6                 db 0FFh
.eh_frame_hdr:00000000000052E7                 db 0FFh
.eh_frame_hdr:00000000000052E8                 db 0B0h
.eh_frame_hdr:00000000000052E9                 db  0Ch
.eh_frame_hdr:00000000000052EA                 db    0
.eh_frame_hdr:00000000000052EB                 db    0
.eh_frame_hdr:00000000000052EB _eh_frame_hdr   ends
.eh_frame_hdr:00000000000052EB
LOAD:00000000000052EC ; ===========================================================================
LOAD:00000000000052EC
LOAD:00000000000052EC ; Segment type: Pure code
LOAD:00000000000052EC ; Segment permissions: Read/Execute
LOAD:00000000000052EC LOAD            segment byte public 'CODE' use64
LOAD:00000000000052EC                 assume cs:LOAD
LOAD:00000000000052EC                 ;org 52ECh
LOAD:00000000000052EC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000052EC                 align 10h
LOAD:00000000000052EC LOAD            ends
LOAD:00000000000052EC
.eh_frame:00000000000052F0 ; ===========================================================================
.eh_frame:00000000000052F0
.eh_frame:00000000000052F0 ; Segment type: Pure data
.eh_frame:00000000000052F0 ; Segment permissions: Read
.eh_frame:00000000000052F0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000052F0                 assume cs:_eh_frame
.eh_frame:00000000000052F0                 ;org 52F0h
.eh_frame:00000000000052F0                 db  14h
.eh_frame:00000000000052F1                 db    0
.eh_frame:00000000000052F2                 db    0
.eh_frame:00000000000052F3                 db    0
.eh_frame:00000000000052F4                 db    0
.eh_frame:00000000000052F5                 db    0
.eh_frame:00000000000052F6                 db    0
.eh_frame:00000000000052F7                 db    0
.eh_frame:00000000000052F8                 db    1
.eh_frame:00000000000052F9                 db  7Ah ; z
.eh_frame:00000000000052FA                 db  52h ; R
.eh_frame:00000000000052FB                 db    0
.eh_frame:00000000000052FC                 db    1
.eh_frame:00000000000052FD                 db  78h ; x
.eh_frame:00000000000052FE                 db  10h
.eh_frame:00000000000052FF                 db    1
.eh_frame:0000000000005300                 db  1Bh
.eh_frame:0000000000005301                 db  0Ch
.eh_frame:0000000000005302                 db    7
.eh_frame:0000000000005303                 db    8
.eh_frame:0000000000005304                 db  90h
.eh_frame:0000000000005305                 db    1
.eh_frame:0000000000005306                 db    7
.eh_frame:0000000000005307                 db  10h
.eh_frame:0000000000005308                 db  14h
.eh_frame:0000000000005309                 db    0
.eh_frame:000000000000530A                 db    0
.eh_frame:000000000000530B                 db    0
.eh_frame:000000000000530C                 db  1Ch
.eh_frame:000000000000530D                 db    0
.eh_frame:000000000000530E                 db    0
.eh_frame:000000000000530F                 db    0
.eh_frame:0000000000005310                 db  80h
.eh_frame:0000000000005311                 db 0C3h
.eh_frame:0000000000005312                 db 0FFh
.eh_frame:0000000000005313                 db 0FFh
.eh_frame:0000000000005314                 db  2Bh ; +
.eh_frame:0000000000005315                 db    0
.eh_frame:0000000000005316                 db    0
.eh_frame:0000000000005317                 db    0
.eh_frame:0000000000005318                 db    0
.eh_frame:0000000000005319                 db    0
.eh_frame:000000000000531A                 db    0
.eh_frame:000000000000531B                 db    0
.eh_frame:000000000000531C                 db    0
.eh_frame:000000000000531D                 db    0
.eh_frame:000000000000531E                 db    0
.eh_frame:000000000000531F                 db    0
.eh_frame:0000000000005320                 db  14h
.eh_frame:0000000000005321                 db    0
.eh_frame:0000000000005322                 db    0
.eh_frame:0000000000005323                 db    0
.eh_frame:0000000000005324                 db    0
.eh_frame:0000000000005325                 db    0
.eh_frame:0000000000005326                 db    0
.eh_frame:0000000000005327                 db    0
.eh_frame:0000000000005328                 db    1
.eh_frame:0000000000005329                 db  7Ah ; z
.eh_frame:000000000000532A                 db  52h ; R
.eh_frame:000000000000532B                 db    0
.eh_frame:000000000000532C                 db    1
.eh_frame:000000000000532D                 db  78h ; x
.eh_frame:000000000000532E                 db  10h
.eh_frame:000000000000532F                 db    1
.eh_frame:0000000000005330                 db  1Bh
.eh_frame:0000000000005331                 db  0Ch
.eh_frame:0000000000005332                 db    7
.eh_frame:0000000000005333                 db    8
.eh_frame:0000000000005334                 db  90h
.eh_frame:0000000000005335                 db    1
.eh_frame:0000000000005336                 db    0
.eh_frame:0000000000005337                 db    0
.eh_frame:0000000000005338                 db  24h ; $
.eh_frame:0000000000005339                 db    0
.eh_frame:000000000000533A                 db    0
.eh_frame:000000000000533B                 db    0
.eh_frame:000000000000533C                 db  1Ch
.eh_frame:000000000000533D                 db    0
.eh_frame:000000000000533E                 db    0
.eh_frame:000000000000533F                 db    0
.eh_frame:0000000000005340                 db    0
.eh_frame:0000000000005341                 db 0BFh
.eh_frame:0000000000005342                 db 0FFh
.eh_frame:0000000000005343                 db 0FFh
.eh_frame:0000000000005344                 db 0B0h
.eh_frame:0000000000005345                 db    2
.eh_frame:0000000000005346                 db    0
.eh_frame:0000000000005347                 db    0
.eh_frame:0000000000005348                 db    0
.eh_frame:0000000000005349                 db  0Eh
.eh_frame:000000000000534A                 db  10h
.eh_frame:000000000000534B                 db  46h ; F
.eh_frame:000000000000534C                 db  0Eh
.eh_frame:000000000000534D                 db  18h
.eh_frame:000000000000534E                 db  4Ah ; J
.eh_frame:000000000000534F                 db  0Fh
.eh_frame:0000000000005350                 db  0Bh
.eh_frame:0000000000005351                 db  77h ; w
.eh_frame:0000000000005352                 db    8
.eh_frame:0000000000005353                 db  80h
.eh_frame:0000000000005354                 db    0
.eh_frame:0000000000005355                 db  3Fh ; ?
.eh_frame:0000000000005356                 db  1Ah
.eh_frame:0000000000005357                 db  3Bh ; ;
.eh_frame:0000000000005358                 db  2Ah ; *
.eh_frame:0000000000005359                 db  33h ; 3
.eh_frame:000000000000535A                 db  24h ; $
.eh_frame:000000000000535B                 db  22h ; "
.eh_frame:000000000000535C                 db    0
.eh_frame:000000000000535D                 db    0
.eh_frame:000000000000535E                 db    0
.eh_frame:000000000000535F                 db    0
.eh_frame:0000000000005360                 db  14h
.eh_frame:0000000000005361                 db    0
.eh_frame:0000000000005362                 db    0
.eh_frame:0000000000005363                 db    0
.eh_frame:0000000000005364                 db  44h ; D
.eh_frame:0000000000005365                 db    0
.eh_frame:0000000000005366                 db    0
.eh_frame:0000000000005367                 db    0
.eh_frame:0000000000005368                 db  88h
.eh_frame:0000000000005369                 db 0C1h
.eh_frame:000000000000536A                 db 0FFh
.eh_frame:000000000000536B                 db 0FFh
.eh_frame:000000000000536C                 db    8
.eh_frame:000000000000536D                 db    0
.eh_frame:000000000000536E                 db    0
.eh_frame:000000000000536F                 db    0
.eh_frame:0000000000005370                 db    0
.eh_frame:0000000000005371                 db    0
.eh_frame:0000000000005372                 db    0
.eh_frame:0000000000005373                 db    0
.eh_frame:0000000000005374                 db    0
.eh_frame:0000000000005375                 db    0
.eh_frame:0000000000005376                 db    0
.eh_frame:0000000000005377                 db    0
.eh_frame:0000000000005378                 db  28h ; (
.eh_frame:0000000000005379                 db    0
.eh_frame:000000000000537A                 db    0
.eh_frame:000000000000537B                 db    0
.eh_frame:000000000000537C                 db  5Ch ; \
.eh_frame:000000000000537D                 db    0
.eh_frame:000000000000537E                 db    0
.eh_frame:000000000000537F                 db    0
.eh_frame:0000000000005380                 db  20h
.eh_frame:0000000000005381                 db 0C4h
.eh_frame:0000000000005382                 db 0FFh
.eh_frame:0000000000005383                 db 0FFh
.eh_frame:0000000000005384                 db  42h ; B
.eh_frame:0000000000005385                 db    3
.eh_frame:0000000000005386                 db    0
.eh_frame:0000000000005387                 db    0
.eh_frame:0000000000005388                 db    0
.eh_frame:0000000000005389                 db  42h ; B
.eh_frame:000000000000538A                 db  0Eh
.eh_frame:000000000000538B                 db  10h
.eh_frame:000000000000538C                 db  8Dh
.eh_frame:000000000000538D                 db    2
.eh_frame:000000000000538E                 db  42h ; B
.eh_frame:000000000000538F                 db  0Eh
.eh_frame:0000000000005390                 db  18h
.eh_frame:0000000000005391                 db  8Ch
.eh_frame:0000000000005392                 db    3
.eh_frame:0000000000005393                 db  46h ; F
.eh_frame:0000000000005394                 db  0Eh
.eh_frame:0000000000005395                 db  20h
.eh_frame:0000000000005396                 db  86h
.eh_frame:0000000000005397                 db    4
.eh_frame:0000000000005398                 db  41h ; A
.eh_frame:0000000000005399                 db  0Eh
.eh_frame:000000000000539A                 db  28h ; (
.eh_frame:000000000000539B                 db  83h
.eh_frame:000000000000539C                 db    5
.eh_frame:000000000000539D                 db  49h ; I
.eh_frame:000000000000539E                 db  0Eh
.eh_frame:000000000000539F                 db 0B0h
.eh_frame:00000000000053A0                 db    1
.eh_frame:00000000000053A1                 db    0
.eh_frame:00000000000053A2                 db    0
.eh_frame:00000000000053A3                 db    0
.eh_frame:00000000000053A4                 db  30h ; 0
.eh_frame:00000000000053A5                 db    0
.eh_frame:00000000000053A6                 db    0
.eh_frame:00000000000053A7                 db    0
.eh_frame:00000000000053A8                 db  88h
.eh_frame:00000000000053A9                 db    0
.eh_frame:00000000000053AA                 db    0
.eh_frame:00000000000053AB                 db    0
.eh_frame:00000000000053AC                 db  54h ; T
.eh_frame:00000000000053AD                 db 0C1h
.eh_frame:00000000000053AE                 db 0FFh
.eh_frame:00000000000053AF                 db 0FFh
.eh_frame:00000000000053B0                 db  8Ch
.eh_frame:00000000000053B1                 db    1
.eh_frame:00000000000053B2                 db    0
.eh_frame:00000000000053B3                 db    0
.eh_frame:00000000000053B4                 db    0
.eh_frame:00000000000053B5                 db  42h ; B
.eh_frame:00000000000053B6                 db  0Eh
.eh_frame:00000000000053B7                 db  10h
.eh_frame:00000000000053B8                 db  8Ch
.eh_frame:00000000000053B9                 db    2
.eh_frame:00000000000053BA                 db  41h ; A
.eh_frame:00000000000053BB                 db  0Eh
.eh_frame:00000000000053BC                 db  18h
.eh_frame:00000000000053BD                 db  86h
.eh_frame:00000000000053BE                 db    3
.eh_frame:00000000000053BF                 db  43h ; C
.eh_frame:00000000000053C0                 db  0Eh
.eh_frame:00000000000053C1                 db  20h
.eh_frame:00000000000053C2                 db  83h
.eh_frame:00000000000053C3                 db    4
.eh_frame:00000000000053C4                 db    3
.eh_frame:00000000000053C5                 db  1Eh
.eh_frame:00000000000053C6                 db    1
.eh_frame:00000000000053C7                 db  0Ah
.eh_frame:00000000000053C8                 db  0Eh
.eh_frame:00000000000053C9                 db  18h
.eh_frame:00000000000053CA                 db  41h ; A
.eh_frame:00000000000053CB                 db  0Eh
.eh_frame:00000000000053CC                 db  10h
.eh_frame:00000000000053CD                 db  42h ; B
.eh_frame:00000000000053CE                 db  0Eh
.eh_frame:00000000000053CF                 db    8
.eh_frame:00000000000053D0                 db  41h ; A
.eh_frame:00000000000053D1                 db  0Bh
.eh_frame:00000000000053D2                 db    0
.eh_frame:00000000000053D3                 db    0
.eh_frame:00000000000053D4                 db    0
.eh_frame:00000000000053D5                 db    0
.eh_frame:00000000000053D6                 db    0
.eh_frame:00000000000053D7                 db    0
.eh_frame:00000000000053D8                 db  10h
.eh_frame:00000000000053D9                 db    0
.eh_frame:00000000000053DA                 db    0
.eh_frame:00000000000053DB                 db    0
.eh_frame:00000000000053DC                 db 0BCh
.eh_frame:00000000000053DD                 db    0
.eh_frame:00000000000053DE                 db    0
.eh_frame:00000000000053DF                 db    0
.eh_frame:00000000000053E0                 db  10h
.eh_frame:00000000000053E1                 db 0C7h
.eh_frame:00000000000053E2                 db 0FFh
.eh_frame:00000000000053E3                 db 0FFh
.eh_frame:00000000000053E4                 db    8
.eh_frame:00000000000053E5                 db    0
.eh_frame:00000000000053E6                 db    0
.eh_frame:00000000000053E7                 db    0
.eh_frame:00000000000053E8                 db    0
.eh_frame:00000000000053E9                 db    0
.eh_frame:00000000000053EA                 db    0
.eh_frame:00000000000053EB                 db    0
.eh_frame:00000000000053EC                 db  10h
.eh_frame:00000000000053ED                 db    0
.eh_frame:00000000000053EE                 db    0
.eh_frame:00000000000053EF                 db    0
.eh_frame:00000000000053F0                 db 0D0h
.eh_frame:00000000000053F1                 db    0
.eh_frame:00000000000053F2                 db    0
.eh_frame:00000000000053F3                 db    0
.eh_frame:00000000000053F4                 db  0Ch
.eh_frame:00000000000053F5                 db 0C7h
.eh_frame:00000000000053F6                 db 0FFh
.eh_frame:00000000000053F7                 db 0FFh
.eh_frame:00000000000053F8                 db    8
.eh_frame:00000000000053F9                 db    0
.eh_frame:00000000000053FA                 db    0
.eh_frame:00000000000053FB                 db    0
.eh_frame:00000000000053FC                 db    0
.eh_frame:00000000000053FD                 db    0
.eh_frame:00000000000053FE                 db    0
.eh_frame:00000000000053FF                 db    0
.eh_frame:0000000000005400                 db  2Ch ; ,
.eh_frame:0000000000005401                 db    0
.eh_frame:0000000000005402                 db    0
.eh_frame:0000000000005403                 db    0
.eh_frame:0000000000005404                 db 0E4h
.eh_frame:0000000000005405                 db    0
.eh_frame:0000000000005406                 db    0
.eh_frame:0000000000005407                 db    0
.eh_frame:0000000000005408                 db    8
.eh_frame:0000000000005409                 db 0C7h
.eh_frame:000000000000540A                 db 0FFh
.eh_frame:000000000000540B                 db 0FFh
.eh_frame:000000000000540C                 db 0A4h
.eh_frame:000000000000540D                 db    0
.eh_frame:000000000000540E                 db    0
.eh_frame:000000000000540F                 db    0
.eh_frame:0000000000005410                 db    0
.eh_frame:0000000000005411                 db  41h ; A
.eh_frame:0000000000005412                 db  0Eh
.eh_frame:0000000000005413                 db  10h
.eh_frame:0000000000005414                 db  86h
.eh_frame:0000000000005415                 db    2
.eh_frame:0000000000005416                 db  41h ; A
.eh_frame:0000000000005417                 db  0Eh
.eh_frame:0000000000005418                 db  18h
.eh_frame:0000000000005419                 db  83h
.eh_frame:000000000000541A                 db    3
.eh_frame:000000000000541B                 db  44h ; D
.eh_frame:000000000000541C                 db  0Eh
.eh_frame:000000000000541D                 db  20h
.eh_frame:000000000000541E                 db  7Ah ; z
.eh_frame:000000000000541F                 db  0Ah
.eh_frame:0000000000005420                 db  0Eh
.eh_frame:0000000000005421                 db  18h
.eh_frame:0000000000005422                 db  41h ; A
.eh_frame:0000000000005423                 db  0Eh
.eh_frame:0000000000005424                 db  10h
.eh_frame:0000000000005425                 db  41h ; A
.eh_frame:0000000000005426                 db  0Eh
.eh_frame:0000000000005427                 db    8
.eh_frame:0000000000005428                 db  41h ; A
.eh_frame:0000000000005429                 db  0Bh
.eh_frame:000000000000542A                 db    0
.eh_frame:000000000000542B                 db    0
.eh_frame:000000000000542C                 db    0
.eh_frame:000000000000542D                 db    0
.eh_frame:000000000000542E                 db    0
.eh_frame:000000000000542F                 db    0
.eh_frame:0000000000005430                 db  1Ch
.eh_frame:0000000000005431                 db    0
.eh_frame:0000000000005432                 db    0
.eh_frame:0000000000005433                 db    0
.eh_frame:0000000000005434                 db  14h
.eh_frame:0000000000005435                 db    1
.eh_frame:0000000000005436                 db    0
.eh_frame:0000000000005437                 db    0
.eh_frame:0000000000005438                 db  88h
.eh_frame:0000000000005439                 db 0C7h
.eh_frame:000000000000543A                 db 0FFh
.eh_frame:000000000000543B                 db 0FFh
.eh_frame:000000000000543C                 db  9Fh
.eh_frame:000000000000543D                 db    0
.eh_frame:000000000000543E                 db    0
.eh_frame:000000000000543F                 db    0
.eh_frame:0000000000005440                 db    0
.eh_frame:0000000000005441                 db  44h ; D
.eh_frame:0000000000005442                 db  0Eh
.eh_frame:0000000000005443                 db  10h
.eh_frame:0000000000005444                 db  83h
.eh_frame:0000000000005445                 db    2
.eh_frame:0000000000005446                 db    2
.eh_frame:0000000000005447                 db  78h ; x
.eh_frame:0000000000005448                 db  0Ah
.eh_frame:0000000000005449                 db  0Eh
.eh_frame:000000000000544A                 db    8
.eh_frame:000000000000544B                 db  41h ; A
.eh_frame:000000000000544C                 db  0Bh
.eh_frame:000000000000544D                 db    0
.eh_frame:000000000000544E                 db    0
.eh_frame:000000000000544F                 db    0
.eh_frame:0000000000005450                 db  40h ; @
.eh_frame:0000000000005451                 db    0
.eh_frame:0000000000005452                 db    0
.eh_frame:0000000000005453                 db    0
.eh_frame:0000000000005454                 db  34h ; 4
.eh_frame:0000000000005455                 db    1
.eh_frame:0000000000005456                 db    0
.eh_frame:0000000000005457                 db    0
.eh_frame:0000000000005458                 db    8
.eh_frame:0000000000005459                 db 0C8h
.eh_frame:000000000000545A                 db 0FFh
.eh_frame:000000000000545B                 db 0FFh
.eh_frame:000000000000545C                 db 0E7h
.eh_frame:000000000000545D                 db    0
.eh_frame:000000000000545E                 db    0
.eh_frame:000000000000545F                 db    0
.eh_frame:0000000000005460                 db    0
.eh_frame:0000000000005461                 db  41h ; A
.eh_frame:0000000000005462                 db  0Eh
.eh_frame:0000000000005463                 db  10h
.eh_frame:0000000000005464                 db  86h
.eh_frame:0000000000005465                 db    2
.eh_frame:0000000000005466                 db  41h ; A
.eh_frame:0000000000005467                 db  0Eh
.eh_frame:0000000000005468                 db  18h
.eh_frame:0000000000005469                 db  83h
.eh_frame:000000000000546A                 db    3
.eh_frame:000000000000546B                 db  49h ; I
.eh_frame:000000000000546C                 db  0Eh
.eh_frame:000000000000546D                 db  20h
.eh_frame:000000000000546E                 db  6Eh ; n
.eh_frame:000000000000546F                 db  0Ah
.eh_frame:0000000000005470                 db  0Eh
.eh_frame:0000000000005471                 db  18h
.eh_frame:0000000000005472                 db  41h ; A
.eh_frame:0000000000005473                 db  0Eh
.eh_frame:0000000000005474                 db  10h
.eh_frame:0000000000005475                 db  41h ; A
.eh_frame:0000000000005476                 db  0Eh
.eh_frame:0000000000005477                 db    8
.eh_frame:0000000000005478                 db  45h ; E
.eh_frame:0000000000005479                 db  0Bh
.eh_frame:000000000000547A                 db    2
.eh_frame:000000000000547B                 db  4Ah ; J
.eh_frame:000000000000547C                 db  0Ah
.eh_frame:000000000000547D                 db  0Eh
.eh_frame:000000000000547E                 db  18h
.eh_frame:000000000000547F                 db  41h ; A
.eh_frame:0000000000005480                 db  0Eh
.eh_frame:0000000000005481                 db  10h
.eh_frame:0000000000005482                 db  41h ; A
.eh_frame:0000000000005483                 db  0Eh
.eh_frame:0000000000005484                 db    8
.eh_frame:0000000000005485                 db  44h ; D
.eh_frame:0000000000005486                 db  0Bh
.eh_frame:0000000000005487                 db    2
.eh_frame:0000000000005488                 db  54h ; T
.eh_frame:0000000000005489                 db  0Eh
.eh_frame:000000000000548A                 db  18h
.eh_frame:000000000000548B                 db  41h ; A
.eh_frame:000000000000548C                 db  0Eh
.eh_frame:000000000000548D                 db  10h
.eh_frame:000000000000548E                 db  41h ; A
.eh_frame:000000000000548F                 db  0Eh
.eh_frame:0000000000005490                 db    8
.eh_frame:0000000000005491                 db    0
.eh_frame:0000000000005492                 db    0
.eh_frame:0000000000005493                 db    0
.eh_frame:0000000000005494                 db  74h ; t
.eh_frame:0000000000005495                 db    0
.eh_frame:0000000000005496                 db    0
.eh_frame:0000000000005497                 db    0
.eh_frame:0000000000005498                 db  78h ; x
.eh_frame:0000000000005499                 db    1
.eh_frame:000000000000549A                 db    0
.eh_frame:000000000000549B                 db    0
.eh_frame:000000000000549C                 db 0B4h
.eh_frame:000000000000549D                 db 0C8h
.eh_frame:000000000000549E                 db 0FFh
.eh_frame:000000000000549F                 db 0FFh
.eh_frame:00000000000054A0                 db  34h ; 4
.eh_frame:00000000000054A1                 db  12h
.eh_frame:00000000000054A2                 db    0
.eh_frame:00000000000054A3                 db    0
.eh_frame:00000000000054A4                 db    0
.eh_frame:00000000000054A5                 db  42h ; B
.eh_frame:00000000000054A6                 db  0Eh
.eh_frame:00000000000054A7                 db  10h
.eh_frame:00000000000054A8                 db  8Fh
.eh_frame:00000000000054A9                 db    2
.eh_frame:00000000000054AA                 db  42h ; B
.eh_frame:00000000000054AB                 db  0Eh
.eh_frame:00000000000054AC                 db  18h
.eh_frame:00000000000054AD                 db  8Eh
.eh_frame:00000000000054AE                 db    3
.eh_frame:00000000000054AF                 db  45h ; E
.eh_frame:00000000000054B0                 db  0Eh
.eh_frame:00000000000054B1                 db  20h
.eh_frame:00000000000054B2                 db  8Dh
.eh_frame:00000000000054B3                 db    4
.eh_frame:00000000000054B4                 db  42h ; B
.eh_frame:00000000000054B5                 db  0Eh
.eh_frame:00000000000054B6                 db  28h ; (
.eh_frame:00000000000054B7                 db  8Ch
.eh_frame:00000000000054B8                 db    5
.eh_frame:00000000000054B9                 db  44h ; D
.eh_frame:00000000000054BA                 db  0Eh
.eh_frame:00000000000054BB                 db  30h ; 0
.eh_frame:00000000000054BC                 db  86h
.eh_frame:00000000000054BD                 db    6
.eh_frame:00000000000054BE                 db  41h ; A
.eh_frame:00000000000054BF                 db  0Eh
.eh_frame:00000000000054C0                 db  38h ; 8
.eh_frame:00000000000054C1                 db  83h
.eh_frame:00000000000054C2                 db    7
.eh_frame:00000000000054C3                 db  53h ; S
.eh_frame:00000000000054C4                 db  0Eh
.eh_frame:00000000000054C5                 db 0F0h
.eh_frame:00000000000054C6                 db    1
.eh_frame:00000000000054C7                 db    3
.eh_frame:00000000000054C8                 db  81h
.eh_frame:00000000000054C9                 db  0Bh
.eh_frame:00000000000054CA                 db  0Eh
.eh_frame:00000000000054CB                 db 0F8h
.eh_frame:00000000000054CC                 db    1
.eh_frame:00000000000054CD                 db  4Ah ; J
.eh_frame:00000000000054CE                 db  0Eh
.eh_frame:00000000000054CF                 db  80h
.eh_frame:00000000000054D0                 db    2
.eh_frame:00000000000054D1                 db  44h ; D
.eh_frame:00000000000054D2                 db  0Eh
.eh_frame:00000000000054D3                 db  88h
.eh_frame:00000000000054D4                 db    2
.eh_frame:00000000000054D5                 db  45h ; E
.eh_frame:00000000000054D6                 db  0Eh
.eh_frame:00000000000054D7                 db  90h
.eh_frame:00000000000054D8                 db    2
.eh_frame:00000000000054D9                 db  5Fh ; _
.eh_frame:00000000000054DA                 db  0Eh
.eh_frame:00000000000054DB                 db 0F0h
.eh_frame:00000000000054DC                 db    1
.eh_frame:00000000000054DD                 db  64h ; d
.eh_frame:00000000000054DE                 db  0Ah
.eh_frame:00000000000054DF                 db  0Eh
.eh_frame:00000000000054E0                 db  38h ; 8
.eh_frame:00000000000054E1                 db  41h ; A
.eh_frame:00000000000054E2                 db  0Eh
.eh_frame:00000000000054E3                 db  30h ; 0
.eh_frame:00000000000054E4                 db  41h ; A
.eh_frame:00000000000054E5                 db  0Eh
.eh_frame:00000000000054E6                 db  28h ; (
.eh_frame:00000000000054E7                 db  42h ; B
.eh_frame:00000000000054E8                 db  0Eh
.eh_frame:00000000000054E9                 db  20h
.eh_frame:00000000000054EA                 db  42h ; B
.eh_frame:00000000000054EB                 db  0Eh
.eh_frame:00000000000054EC                 db  18h
.eh_frame:00000000000054ED                 db  42h ; B
.eh_frame:00000000000054EE                 db  0Eh
.eh_frame:00000000000054EF                 db  10h
.eh_frame:00000000000054F0                 db  42h ; B
.eh_frame:00000000000054F1                 db  0Eh
.eh_frame:00000000000054F2                 db    8
.eh_frame:00000000000054F3                 db  44h ; D
.eh_frame:00000000000054F4                 db  0Bh
.eh_frame:00000000000054F5                 db    3
.eh_frame:00000000000054F6                 db  99h
.eh_frame:00000000000054F7                 db    5
.eh_frame:00000000000054F8                 db  0Eh
.eh_frame:00000000000054F9                 db 0F8h
.eh_frame:00000000000054FA                 db    1
.eh_frame:00000000000054FB                 db  4Dh ; M
.eh_frame:00000000000054FC                 db  0Eh
.eh_frame:00000000000054FD                 db  80h
.eh_frame:00000000000054FE                 db    2
.eh_frame:00000000000054FF                 db  44h ; D
.eh_frame:0000000000005500                 db  0Eh
.eh_frame:0000000000005501                 db  88h
.eh_frame:0000000000005502                 db    2
.eh_frame:0000000000005503                 db  47h ; G
.eh_frame:0000000000005504                 db  0Eh
.eh_frame:0000000000005505                 db  90h
.eh_frame:0000000000005506                 db    2
.eh_frame:0000000000005507                 db  5Bh ; [
.eh_frame:0000000000005508                 db  0Eh
.eh_frame:0000000000005509                 db 0F0h
.eh_frame:000000000000550A                 db    1
.eh_frame:000000000000550B                 db    0
.eh_frame:000000000000550C                 db  68h ; h
.eh_frame:000000000000550D                 db    0
.eh_frame:000000000000550E                 db    0
.eh_frame:000000000000550F                 db    0
.eh_frame:0000000000005510                 db 0F0h
.eh_frame:0000000000005511                 db    1
.eh_frame:0000000000005512                 db    0
.eh_frame:0000000000005513                 db    0
.eh_frame:0000000000005514                 db  7Ch ; |
.eh_frame:0000000000005515                 db 0DAh
.eh_frame:0000000000005516                 db 0FFh
.eh_frame:0000000000005517                 db 0FFh
.eh_frame:0000000000005518                 db 0ABh
.eh_frame:0000000000005519                 db    1
.eh_frame:000000000000551A                 db    0
.eh_frame:000000000000551B                 db    0
.eh_frame:000000000000551C                 db    0
.eh_frame:000000000000551D                 db  42h ; B
.eh_frame:000000000000551E                 db  0Eh
.eh_frame:000000000000551F                 db  10h
.eh_frame:0000000000005520                 db  8Fh
.eh_frame:0000000000005521                 db    2
.eh_frame:0000000000005522                 db  42h ; B
.eh_frame:0000000000005523                 db  0Eh
.eh_frame:0000000000005524                 db  18h
.eh_frame:0000000000005525                 db  8Eh
.eh_frame:0000000000005526                 db    3
.eh_frame:0000000000005527                 db  45h ; E
.eh_frame:0000000000005528                 db  0Eh
.eh_frame:0000000000005529                 db  20h
.eh_frame:000000000000552A                 db  8Dh
.eh_frame:000000000000552B                 db    4
.eh_frame:000000000000552C                 db  42h ; B
.eh_frame:000000000000552D                 db  0Eh
.eh_frame:000000000000552E                 db  28h ; (
.eh_frame:000000000000552F                 db  8Ch
.eh_frame:0000000000005530                 db    5
.eh_frame:0000000000005531                 db  44h ; D
.eh_frame:0000000000005532                 db  0Eh
.eh_frame:0000000000005533                 db  30h ; 0
.eh_frame:0000000000005534                 db  86h
.eh_frame:0000000000005535                 db    6
.eh_frame:0000000000005536                 db  41h ; A
.eh_frame:0000000000005537                 db  0Eh
.eh_frame:0000000000005538                 db  38h ; 8
.eh_frame:0000000000005539                 db  83h
.eh_frame:000000000000553A                 db    7
.eh_frame:000000000000553B                 db  47h ; G
.eh_frame:000000000000553C                 db  0Eh
.eh_frame:000000000000553D                 db  60h ; `
.eh_frame:000000000000553E                 db    2
.eh_frame:000000000000553F                 db  99h
.eh_frame:0000000000005540                 db  0Eh
.eh_frame:0000000000005541                 db  68h ; h
.eh_frame:0000000000005542                 db  5Fh ; _
.eh_frame:0000000000005543                 db  0Eh
.eh_frame:0000000000005544                 db  70h ; p
.eh_frame:0000000000005545                 db  46h ; F
.eh_frame:0000000000005546                 db  0Eh
.eh_frame:0000000000005547                 db  78h ; x
.eh_frame:0000000000005548                 db  42h ; B
.eh_frame:0000000000005549                 db  0Eh
.eh_frame:000000000000554A                 db  80h
.eh_frame:000000000000554B                 db    1
.eh_frame:000000000000554C                 db  59h ; Y
.eh_frame:000000000000554D                 db  0Eh
.eh_frame:000000000000554E                 db  60h ; `
.eh_frame:000000000000554F                 db    2
.eh_frame:0000000000005550                 db  40h ; @
.eh_frame:0000000000005551                 db  0Eh
.eh_frame:0000000000005552                 db  68h ; h
.eh_frame:0000000000005553                 db  4Bh ; K
.eh_frame:0000000000005554                 db  0Eh
.eh_frame:0000000000005555                 db  70h ; p
.eh_frame:0000000000005556                 db  43h ; C
.eh_frame:0000000000005557                 db  0Eh
.eh_frame:0000000000005558                 db  78h ; x
.eh_frame:0000000000005559                 db  45h ; E
.eh_frame:000000000000555A                 db  0Eh
.eh_frame:000000000000555B                 db  80h
.eh_frame:000000000000555C                 db    1
.eh_frame:000000000000555D                 db  5Eh ; ^
.eh_frame:000000000000555E                 db  0Eh
.eh_frame:000000000000555F                 db  60h ; `
.eh_frame:0000000000005560                 db  4Ch ; L
.eh_frame:0000000000005561                 db  0Ah
.eh_frame:0000000000005562                 db  0Eh
.eh_frame:0000000000005563                 db  38h ; 8
.eh_frame:0000000000005564                 db  44h ; D
.eh_frame:0000000000005565                 db  0Eh
.eh_frame:0000000000005566                 db  30h ; 0
.eh_frame:0000000000005567                 db  41h ; A
.eh_frame:0000000000005568                 db  0Eh
.eh_frame:0000000000005569                 db  28h ; (
.eh_frame:000000000000556A                 db  42h ; B
.eh_frame:000000000000556B                 db  0Eh
.eh_frame:000000000000556C                 db  20h
.eh_frame:000000000000556D                 db  42h ; B
.eh_frame:000000000000556E                 db  0Eh
.eh_frame:000000000000556F                 db  18h
.eh_frame:0000000000005570                 db  42h ; B
.eh_frame:0000000000005571                 db  0Eh
.eh_frame:0000000000005572                 db  10h
.eh_frame:0000000000005573                 db  42h ; B
.eh_frame:0000000000005574                 db  0Eh
.eh_frame:0000000000005575                 db    8
.eh_frame:0000000000005576                 db  46h ; F
.eh_frame:0000000000005577                 db  0Bh
.eh_frame:0000000000005578                 db  28h ; (
.eh_frame:0000000000005579                 db    0
.eh_frame:000000000000557A                 db    0
.eh_frame:000000000000557B                 db    0
.eh_frame:000000000000557C                 db  5Ch ; \
.eh_frame:000000000000557D                 db    2
.eh_frame:000000000000557E                 db    0
.eh_frame:000000000000557F                 db    0
.eh_frame:0000000000005580                 db 0C0h
.eh_frame:0000000000005581                 db 0DBh
.eh_frame:0000000000005582                 db 0FFh
.eh_frame:0000000000005583                 db 0FFh
.eh_frame:0000000000005584                 db  36h ; 6
.eh_frame:0000000000005585                 db    0
.eh_frame:0000000000005586                 db    0
.eh_frame:0000000000005587                 db    0
.eh_frame:0000000000005588                 db    0
.eh_frame:0000000000005589                 db  42h ; B
.eh_frame:000000000000558A                 db  0Eh
.eh_frame:000000000000558B                 db  10h
.eh_frame:000000000000558C                 db  8Ch
.eh_frame:000000000000558D                 db    2
.eh_frame:000000000000558E                 db  41h ; A
.eh_frame:000000000000558F                 db  0Eh
.eh_frame:0000000000005590                 db  18h
.eh_frame:0000000000005591                 db  86h
.eh_frame:0000000000005592                 db    3
.eh_frame:0000000000005593                 db  41h ; A
.eh_frame:0000000000005594                 db  0Eh
.eh_frame:0000000000005595                 db  20h
.eh_frame:0000000000005596                 db  83h
.eh_frame:0000000000005597                 db    4
.eh_frame:0000000000005598                 db  6Eh ; n
.eh_frame:0000000000005599                 db  0Eh
.eh_frame:000000000000559A                 db  18h
.eh_frame:000000000000559B                 db  41h ; A
.eh_frame:000000000000559C                 db  0Eh
.eh_frame:000000000000559D                 db  10h
.eh_frame:000000000000559E                 db  42h ; B
.eh_frame:000000000000559F                 db  0Eh
.eh_frame:00000000000055A0                 db    8
.eh_frame:00000000000055A1                 db    0
.eh_frame:00000000000055A2                 db    0
.eh_frame:00000000000055A3                 db    0
.eh_frame:00000000000055A4                 db  10h
.eh_frame:00000000000055A5                 db    0
.eh_frame:00000000000055A6                 db    0
.eh_frame:00000000000055A7                 db    0
.eh_frame:00000000000055A8                 db  88h
.eh_frame:00000000000055A9                 db    2
.eh_frame:00000000000055AA                 db    0
.eh_frame:00000000000055AB                 db    0
.eh_frame:00000000000055AC                 db 0D4h
.eh_frame:00000000000055AD                 db 0DBh
.eh_frame:00000000000055AE                 db 0FFh
.eh_frame:00000000000055AF                 db 0FFh
.eh_frame:00000000000055B0                 db  11h
.eh_frame:00000000000055B1                 db    0
.eh_frame:00000000000055B2                 db    0
.eh_frame:00000000000055B3                 db    0
.eh_frame:00000000000055B4                 db    0
.eh_frame:00000000000055B5                 db    0
.eh_frame:00000000000055B6                 db    0
.eh_frame:00000000000055B7                 db    0
.eh_frame:00000000000055B8                 db  10h
.eh_frame:00000000000055B9                 db    0
.eh_frame:00000000000055BA                 db    0
.eh_frame:00000000000055BB                 db    0
.eh_frame:00000000000055BC                 db  9Ch
.eh_frame:00000000000055BD                 db    2
.eh_frame:00000000000055BE                 db    0
.eh_frame:00000000000055BF                 db    0
.eh_frame:00000000000055C0                 db 0E0h
.eh_frame:00000000000055C1                 db 0DBh
.eh_frame:00000000000055C2                 db 0FFh
.eh_frame:00000000000055C3                 db 0FFh
.eh_frame:00000000000055C4                 db  11h
.eh_frame:00000000000055C5                 db    0
.eh_frame:00000000000055C6                 db    0
.eh_frame:00000000000055C7                 db    0
.eh_frame:00000000000055C8                 db    0
.eh_frame:00000000000055C9                 db    0
.eh_frame:00000000000055CA                 db    0
.eh_frame:00000000000055CB                 db    0
.eh_frame:00000000000055CC                 db  10h
.eh_frame:00000000000055CD                 db    0
.eh_frame:00000000000055CE                 db    0
.eh_frame:00000000000055CF                 db    0
.eh_frame:00000000000055D0                 db 0B0h
.eh_frame:00000000000055D1                 db    2
.eh_frame:00000000000055D2                 db    0
.eh_frame:00000000000055D3                 db    0
.eh_frame:00000000000055D4                 db 0ECh
.eh_frame:00000000000055D5                 db 0DBh
.eh_frame:00000000000055D6                 db 0FFh
.eh_frame:00000000000055D7                 db 0FFh
.eh_frame:00000000000055D8                 db  35h ; 5
.eh_frame:00000000000055D9                 db    0
.eh_frame:00000000000055DA                 db    0
.eh_frame:00000000000055DB                 db    0
.eh_frame:00000000000055DC                 db    0
.eh_frame:00000000000055DD                 db    0
.eh_frame:00000000000055DE                 db    0
.eh_frame:00000000000055DF                 db    0
.eh_frame:00000000000055E0                 db  10h
.eh_frame:00000000000055E1                 db    0
.eh_frame:00000000000055E2                 db    0
.eh_frame:00000000000055E3                 db    0
.eh_frame:00000000000055E4                 db 0C4h
.eh_frame:00000000000055E5                 db    2
.eh_frame:00000000000055E6                 db    0
.eh_frame:00000000000055E7                 db    0
.eh_frame:00000000000055E8                 db  18h
.eh_frame:00000000000055E9                 db 0DCh
.eh_frame:00000000000055EA                 db 0FFh
.eh_frame:00000000000055EB                 db 0FFh
.eh_frame:00000000000055EC                 db  15h
.eh_frame:00000000000055ED                 db    0
.eh_frame:00000000000055EE                 db    0
.eh_frame:00000000000055EF                 db    0
.eh_frame:00000000000055F0                 db    0
.eh_frame:00000000000055F1                 db    0
.eh_frame:00000000000055F2                 db    0
.eh_frame:00000000000055F3                 db    0
.eh_frame:00000000000055F4                 db  10h
.eh_frame:00000000000055F5                 db    0
.eh_frame:00000000000055F6                 db    0
.eh_frame:00000000000055F7                 db    0
.eh_frame:00000000000055F8                 db 0D8h
.eh_frame:00000000000055F9                 db    2
.eh_frame:00000000000055FA                 db    0
.eh_frame:00000000000055FB                 db    0
.eh_frame:00000000000055FC                 db  24h ; $
.eh_frame:00000000000055FD                 db 0DCh
.eh_frame:00000000000055FE                 db 0FFh
.eh_frame:00000000000055FF                 db 0FFh
.eh_frame:0000000000005600                 db  30h ; 0
.eh_frame:0000000000005601                 db    0
.eh_frame:0000000000005602                 db    0
.eh_frame:0000000000005603                 db    0
.eh_frame:0000000000005604                 db    0
.eh_frame:0000000000005605                 db  6Bh ; k
.eh_frame:0000000000005606                 db  0Eh
.eh_frame:0000000000005607                 db  10h
.eh_frame:0000000000005608                 db  50h ; P
.eh_frame:0000000000005609                 db    0
.eh_frame:000000000000560A                 db    0
.eh_frame:000000000000560B                 db    0
.eh_frame:000000000000560C                 db 0ECh
.eh_frame:000000000000560D                 db    2
.eh_frame:000000000000560E                 db    0
.eh_frame:000000000000560F                 db    0
.eh_frame:0000000000005610                 db  40h ; @
.eh_frame:0000000000005611                 db 0DCh
.eh_frame:0000000000005612                 db 0FFh
.eh_frame:0000000000005613                 db 0FFh
.eh_frame:0000000000005614                 db  74h ; t
.eh_frame:0000000000005615                 db    0
.eh_frame:0000000000005616                 db    0
.eh_frame:0000000000005617                 db    0
.eh_frame:0000000000005618                 db    0
.eh_frame:0000000000005619                 db  42h ; B
.eh_frame:000000000000561A                 db  0Eh
.eh_frame:000000000000561B                 db  10h
.eh_frame:000000000000561C                 db  8Fh
.eh_frame:000000000000561D                 db    2
.eh_frame:000000000000561E                 db  42h ; B
.eh_frame:000000000000561F                 db  0Eh
.eh_frame:0000000000005620                 db  18h
.eh_frame:0000000000005621                 db  8Eh
.eh_frame:0000000000005622                 db    3
.eh_frame:0000000000005623                 db  49h ; I
.eh_frame:0000000000005624                 db  0Eh
.eh_frame:0000000000005625                 db  20h
.eh_frame:0000000000005626                 db  8Dh
.eh_frame:0000000000005627                 db    4
.eh_frame:0000000000005628                 db  42h ; B
.eh_frame:0000000000005629                 db  0Eh
.eh_frame:000000000000562A                 db  28h ; (
.eh_frame:000000000000562B                 db  8Ch
.eh_frame:000000000000562C                 db    5
.eh_frame:000000000000562D                 db  44h ; D
.eh_frame:000000000000562E                 db  0Eh
.eh_frame:000000000000562F                 db  30h ; 0
.eh_frame:0000000000005630                 db  86h
.eh_frame:0000000000005631                 db    6
.eh_frame:0000000000005632                 db  41h ; A
.eh_frame:0000000000005633                 db  0Eh
.eh_frame:0000000000005634                 db  38h ; 8
.eh_frame:0000000000005635                 db  83h
.eh_frame:0000000000005636                 db    7
.eh_frame:0000000000005637                 db  4Dh ; M
.eh_frame:0000000000005638                 db  0Eh
.eh_frame:0000000000005639                 db  50h ; P
.eh_frame:000000000000563A                 db  5Fh ; _
.eh_frame:000000000000563B                 db  0Eh
.eh_frame:000000000000563C                 db  58h ; X
.eh_frame:000000000000563D                 db  47h ; G
.eh_frame:000000000000563E                 db  0Eh
.eh_frame:000000000000563F                 db  60h ; `
.eh_frame:0000000000005640                 db  46h ; F
.eh_frame:0000000000005641                 db  0Eh
.eh_frame:0000000000005642                 db  68h ; h
.eh_frame:0000000000005643                 db  44h ; D
.eh_frame:0000000000005644                 db  0Eh
.eh_frame:0000000000005645                 db  70h ; p
.eh_frame:0000000000005646                 db  58h ; X
.eh_frame:0000000000005647                 db  0Eh
.eh_frame:0000000000005648                 db  38h ; 8
.eh_frame:0000000000005649                 db  41h ; A
.eh_frame:000000000000564A                 db  0Eh
.eh_frame:000000000000564B                 db  30h ; 0
.eh_frame:000000000000564C                 db  41h ; A
.eh_frame:000000000000564D                 db  0Eh
.eh_frame:000000000000564E                 db  28h ; (
.eh_frame:000000000000564F                 db  42h ; B
.eh_frame:0000000000005650                 db  0Eh
.eh_frame:0000000000005651                 db  20h
.eh_frame:0000000000005652                 db  42h ; B
.eh_frame:0000000000005653                 db  0Eh
.eh_frame:0000000000005654                 db  18h
.eh_frame:0000000000005655                 db  42h ; B
.eh_frame:0000000000005656                 db  0Eh
.eh_frame:0000000000005657                 db  10h
.eh_frame:0000000000005658                 db  42h ; B
.eh_frame:0000000000005659                 db  0Eh
.eh_frame:000000000000565A                 db    8
.eh_frame:000000000000565B                 db    0
.eh_frame:000000000000565C                 db  68h ; h
.eh_frame:000000000000565D                 db    0
.eh_frame:000000000000565E                 db    0
.eh_frame:000000000000565F                 db    0
.eh_frame:0000000000005660                 db  40h ; @
.eh_frame:0000000000005661                 db    3
.eh_frame:0000000000005662                 db    0
.eh_frame:0000000000005663                 db    0
.eh_frame:0000000000005664                 db  6Ch ; l
.eh_frame:0000000000005665                 db 0DCh
.eh_frame:0000000000005666                 db 0FFh
.eh_frame:0000000000005667                 db 0FFh
.eh_frame:0000000000005668                 db 0E3h
.eh_frame:0000000000005669                 db    0
.eh_frame:000000000000566A                 db    0
.eh_frame:000000000000566B                 db    0
.eh_frame:000000000000566C                 db    0
.eh_frame:000000000000566D                 db  42h ; B
.eh_frame:000000000000566E                 db  0Eh
.eh_frame:000000000000566F                 db  10h
.eh_frame:0000000000005670                 db  8Fh
.eh_frame:0000000000005671                 db    2
.eh_frame:0000000000005672                 db  42h ; B
.eh_frame:0000000000005673                 db  0Eh
.eh_frame:0000000000005674                 db  18h
.eh_frame:0000000000005675                 db  8Eh
.eh_frame:0000000000005676                 db    3
.eh_frame:0000000000005677                 db  49h ; I
.eh_frame:0000000000005678                 db  0Eh
.eh_frame:0000000000005679                 db  20h
.eh_frame:000000000000567A                 db  8Dh
.eh_frame:000000000000567B                 db    4
.eh_frame:000000000000567C                 db  42h ; B
.eh_frame:000000000000567D                 db  0Eh
.eh_frame:000000000000567E                 db  28h ; (
.eh_frame:000000000000567F                 db  8Ch
.eh_frame:0000000000005680                 db    5
.eh_frame:0000000000005681                 db  44h ; D
.eh_frame:0000000000005682                 db  0Eh
.eh_frame:0000000000005683                 db  30h ; 0
.eh_frame:0000000000005684                 db  86h
.eh_frame:0000000000005685                 db    6
.eh_frame:0000000000005686                 db  41h ; A
.eh_frame:0000000000005687                 db  0Eh
.eh_frame:0000000000005688                 db  38h ; 8
.eh_frame:0000000000005689                 db  83h
.eh_frame:000000000000568A                 db    7
.eh_frame:000000000000568B                 db  4Dh ; M
.eh_frame:000000000000568C                 db  0Eh
.eh_frame:000000000000568D                 db  70h ; p
.eh_frame:000000000000568E                 db  65h ; e
.eh_frame:000000000000568F                 db  0Eh
.eh_frame:0000000000005690                 db  78h ; x
.eh_frame:0000000000005691                 db  4Dh ; M
.eh_frame:0000000000005692                 db  0Eh
.eh_frame:0000000000005693                 db  80h
.eh_frame:0000000000005694                 db    1
.eh_frame:0000000000005695                 db  46h ; F
.eh_frame:0000000000005696                 db  0Eh
.eh_frame:0000000000005697                 db  88h
.eh_frame:0000000000005698                 db    1
.eh_frame:0000000000005699                 db  42h ; B
.eh_frame:000000000000569A                 db  0Eh
.eh_frame:000000000000569B                 db  90h
.eh_frame:000000000000569C                 db    1
.eh_frame:000000000000569D                 db  5Eh ; ^
.eh_frame:000000000000569E                 db  0Eh
.eh_frame:000000000000569F                 db  70h ; p
.eh_frame:00000000000056A0                 db  56h ; V
.eh_frame:00000000000056A1                 db  0Eh
.eh_frame:00000000000056A2                 db  78h ; x
.eh_frame:00000000000056A3                 db  43h ; C
.eh_frame:00000000000056A4                 db  0Eh
.eh_frame:00000000000056A5                 db  80h
.eh_frame:00000000000056A6                 db    1
.eh_frame:00000000000056A7                 db  43h ; C
.eh_frame:00000000000056A8                 db  0Eh
.eh_frame:00000000000056A9                 db  88h
.eh_frame:00000000000056AA                 db    1
.eh_frame:00000000000056AB                 db  56h ; V
.eh_frame:00000000000056AC                 db  0Eh
.eh_frame:00000000000056AD                 db  90h
.eh_frame:00000000000056AE                 db    1
.eh_frame:00000000000056AF                 db  52h ; R
.eh_frame:00000000000056B0                 db  0Eh
.eh_frame:00000000000056B1                 db  70h ; p
.eh_frame:00000000000056B2                 db  5Bh ; [
.eh_frame:00000000000056B3                 db  0Eh
.eh_frame:00000000000056B4                 db  38h ; 8
.eh_frame:00000000000056B5                 db  41h ; A
.eh_frame:00000000000056B6                 db  0Eh
.eh_frame:00000000000056B7                 db  30h ; 0
.eh_frame:00000000000056B8                 db  41h ; A
.eh_frame:00000000000056B9                 db  0Eh
.eh_frame:00000000000056BA                 db  28h ; (
.eh_frame:00000000000056BB                 db  42h ; B
.eh_frame:00000000000056BC                 db  0Eh
.eh_frame:00000000000056BD                 db  20h
.eh_frame:00000000000056BE                 db  42h ; B
.eh_frame:00000000000056BF                 db  0Eh
.eh_frame:00000000000056C0                 db  18h
.eh_frame:00000000000056C1                 db  42h ; B
.eh_frame:00000000000056C2                 db  0Eh
.eh_frame:00000000000056C3                 db  10h
.eh_frame:00000000000056C4                 db  42h ; B
.eh_frame:00000000000056C5                 db  0Eh
.eh_frame:00000000000056C6                 db    8
.eh_frame:00000000000056C7                 db    0
.eh_frame:00000000000056C8                 db  10h
.eh_frame:00000000000056C9                 db    0
.eh_frame:00000000000056CA                 db    0
.eh_frame:00000000000056CB                 db    0
.eh_frame:00000000000056CC                 db 0ACh
.eh_frame:00000000000056CD                 db    3
.eh_frame:00000000000056CE                 db    0
.eh_frame:00000000000056CF                 db    0
.eh_frame:00000000000056D0                 db 0F0h
.eh_frame:00000000000056D1                 db 0DCh
.eh_frame:00000000000056D2                 db 0FFh
.eh_frame:00000000000056D3                 db 0FFh
.eh_frame:00000000000056D4                 db  0Ah
.eh_frame:00000000000056D5                 db    0
.eh_frame:00000000000056D6                 db    0
.eh_frame:00000000000056D7                 db    0
.eh_frame:00000000000056D8                 db    0
.eh_frame:00000000000056D9                 db    0
.eh_frame:00000000000056DA                 db    0
.eh_frame:00000000000056DB                 db    0
.eh_frame:00000000000056DC                 db  28h ; (
.eh_frame:00000000000056DD                 db    0
.eh_frame:00000000000056DE                 db    0
.eh_frame:00000000000056DF                 db    0
.eh_frame:00000000000056E0                 db 0C0h
.eh_frame:00000000000056E1                 db    3
.eh_frame:00000000000056E2                 db    0
.eh_frame:00000000000056E3                 db    0
.eh_frame:00000000000056E4                 db 0ECh
.eh_frame:00000000000056E5                 db 0DCh
.eh_frame:00000000000056E6                 db 0FFh
.eh_frame:00000000000056E7                 db 0FFh
.eh_frame:00000000000056E8                 db  93h
.eh_frame:00000000000056E9                 db    0
.eh_frame:00000000000056EA                 db    0
.eh_frame:00000000000056EB                 db    0
.eh_frame:00000000000056EC                 db    0
.eh_frame:00000000000056ED                 db  48h ; H
.eh_frame:00000000000056EE                 db  0Eh
.eh_frame:00000000000056EF                 db  10h
.eh_frame:00000000000056F0                 db  8Ch
.eh_frame:00000000000056F1                 db    2
.eh_frame:00000000000056F2                 db  48h ; H
.eh_frame:00000000000056F3                 db  0Eh
.eh_frame:00000000000056F4                 db  18h
.eh_frame:00000000000056F5                 db  86h
.eh_frame:00000000000056F6                 db    3
.eh_frame:00000000000056F7                 db  41h ; A
.eh_frame:00000000000056F8                 db  0Eh
.eh_frame:00000000000056F9                 db  20h
.eh_frame:00000000000056FA                 db  83h
.eh_frame:00000000000056FB                 db    4
.eh_frame:00000000000056FC                 db    2
.eh_frame:00000000000056FD                 db  74h ; t
.eh_frame:00000000000056FE                 db  0Eh
.eh_frame:00000000000056FF                 db  18h
.eh_frame:0000000000005700                 db  4Bh ; K
.eh_frame:0000000000005701                 db  0Eh
.eh_frame:0000000000005702                 db  10h
.eh_frame:0000000000005703                 db  42h ; B
.eh_frame:0000000000005704                 db  0Eh
.eh_frame:0000000000005705                 db    8
.eh_frame:0000000000005706                 db    0
.eh_frame:0000000000005707                 db    0
.eh_frame:0000000000005708                 db  10h
.eh_frame:0000000000005709                 db    0
.eh_frame:000000000000570A                 db    0
.eh_frame:000000000000570B                 db    0
.eh_frame:000000000000570C                 db 0ECh
.eh_frame:000000000000570D                 db    3
.eh_frame:000000000000570E                 db    0
.eh_frame:000000000000570F                 db    0
.eh_frame:0000000000005710                 db  60h ; `
.eh_frame:0000000000005711                 db 0DDh
.eh_frame:0000000000005712                 db 0FFh
.eh_frame:0000000000005713                 db 0FFh
.eh_frame:0000000000005714                 db  13h
.eh_frame:0000000000005715                 db    0
.eh_frame:0000000000005716                 db    0
.eh_frame:0000000000005717                 db    0
.eh_frame:0000000000005718                 db    0
.eh_frame:0000000000005719                 db    0
.eh_frame:000000000000571A                 db    0
.eh_frame:000000000000571B                 db    0
.eh_frame:000000000000571C                 db  10h
.eh_frame:000000000000571D                 db    0
.eh_frame:000000000000571E                 db    0
.eh_frame:000000000000571F                 db    0
.eh_frame:0000000000005720                 db    0
.eh_frame:0000000000005721                 db    4
.eh_frame:0000000000005722                 db    0
.eh_frame:0000000000005723                 db    0
.eh_frame:0000000000005724                 db  6Ch ; l
.eh_frame:0000000000005725                 db 0DDh
.eh_frame:0000000000005726                 db 0FFh
.eh_frame:0000000000005727                 db 0FFh
.eh_frame:0000000000005728                 db  0Ch
.eh_frame:0000000000005729                 db    0
.eh_frame:000000000000572A                 db    0
.eh_frame:000000000000572B                 db    0
.eh_frame:000000000000572C                 db    0
.eh_frame:000000000000572D                 db    0
.eh_frame:000000000000572E                 db    0
.eh_frame:000000000000572F                 db    0
.eh_frame:0000000000005730                 db  10h
.eh_frame:0000000000005731                 db    0
.eh_frame:0000000000005732                 db    0
.eh_frame:0000000000005733                 db    0
.eh_frame:0000000000005734                 db  14h
.eh_frame:0000000000005735                 db    4
.eh_frame:0000000000005736                 db    0
.eh_frame:0000000000005737                 db    0
.eh_frame:0000000000005738                 db  68h ; h
.eh_frame:0000000000005739                 db 0DDh
.eh_frame:000000000000573A                 db 0FFh
.eh_frame:000000000000573B                 db 0FFh
.eh_frame:000000000000573C                 db  18h
.eh_frame:000000000000573D                 db    0
.eh_frame:000000000000573E                 db    0
.eh_frame:000000000000573F                 db    0
.eh_frame:0000000000005740                 db    0
.eh_frame:0000000000005741                 db    0
.eh_frame:0000000000005742                 db    0
.eh_frame:0000000000005743                 db    0
.eh_frame:0000000000005744                 db  10h
.eh_frame:0000000000005745                 db    0
.eh_frame:0000000000005746                 db    0
.eh_frame:0000000000005747                 db    0
.eh_frame:0000000000005748                 db  28h ; (
.eh_frame:0000000000005749                 db    4
.eh_frame:000000000000574A                 db    0
.eh_frame:000000000000574B                 db    0
.eh_frame:000000000000574C                 db  74h ; t
.eh_frame:000000000000574D                 db 0DDh
.eh_frame:000000000000574E                 db 0FFh
.eh_frame:000000000000574F                 db 0FFh
.eh_frame:0000000000005750                 db  14h
.eh_frame:0000000000005751                 db    0
.eh_frame:0000000000005752                 db    0
.eh_frame:0000000000005753                 db    0
.eh_frame:0000000000005754                 db    0
.eh_frame:0000000000005755                 db    0
.eh_frame:0000000000005756                 db    0
.eh_frame:0000000000005757                 db    0
.eh_frame:0000000000005758                 db  18h
.eh_frame:0000000000005759                 db    0
.eh_frame:000000000000575A                 db    0
.eh_frame:000000000000575B                 db    0
.eh_frame:000000000000575C                 db  3Ch ; <
.eh_frame:000000000000575D                 db    4
.eh_frame:000000000000575E                 db    0
.eh_frame:000000000000575F                 db    0
.eh_frame:0000000000005760                 db  80h
.eh_frame:0000000000005761                 db 0DDh
.eh_frame:0000000000005762                 db 0FFh
.eh_frame:0000000000005763                 db 0FFh
.eh_frame:0000000000005764                 db  8Eh
.eh_frame:0000000000005765                 db    0
.eh_frame:0000000000005766                 db    0
.eh_frame:0000000000005767                 db    0
.eh_frame:0000000000005768                 db    0
.eh_frame:0000000000005769                 db  44h ; D
.eh_frame:000000000000576A                 db  0Eh
.eh_frame:000000000000576B                 db  50h ; P
.eh_frame:000000000000576C                 db    2
.eh_frame:000000000000576D                 db  7Fh ; 
.eh_frame:000000000000576E                 db  0Ah
.eh_frame:000000000000576F                 db  0Eh
.eh_frame:0000000000005770                 db    8
.eh_frame:0000000000005771                 db  41h ; A
.eh_frame:0000000000005772                 db  0Bh
.eh_frame:0000000000005773                 db    0
.eh_frame:0000000000005774                 db  18h
.eh_frame:0000000000005775                 db    0
.eh_frame:0000000000005776                 db    0
.eh_frame:0000000000005777                 db    0
.eh_frame:0000000000005778                 db  58h ; X
.eh_frame:0000000000005779                 db    4
.eh_frame:000000000000577A                 db    0
.eh_frame:000000000000577B                 db    0
.eh_frame:000000000000577C                 db 0F4h
.eh_frame:000000000000577D                 db 0DDh
.eh_frame:000000000000577E                 db 0FFh
.eh_frame:000000000000577F                 db 0FFh
.eh_frame:0000000000005780                 db  8Ah
.eh_frame:0000000000005781                 db    0
.eh_frame:0000000000005782                 db    0
.eh_frame:0000000000005783                 db    0
.eh_frame:0000000000005784                 db    0
.eh_frame:0000000000005785                 db  44h ; D
.eh_frame:0000000000005786                 db  0Eh
.eh_frame:0000000000005787                 db  50h ; P
.eh_frame:0000000000005788                 db    2
.eh_frame:0000000000005789                 db  7Bh ; {
.eh_frame:000000000000578A                 db  0Ah
.eh_frame:000000000000578B                 db  0Eh
.eh_frame:000000000000578C                 db    8
.eh_frame:000000000000578D                 db  41h ; A
.eh_frame:000000000000578E                 db  0Bh
.eh_frame:000000000000578F                 db    0
.eh_frame:0000000000005790                 db  10h
.eh_frame:0000000000005791                 db    0
.eh_frame:0000000000005792                 db    0
.eh_frame:0000000000005793                 db    0
.eh_frame:0000000000005794                 db  74h ; t
.eh_frame:0000000000005795                 db    4
.eh_frame:0000000000005796                 db    0
.eh_frame:0000000000005797                 db    0
.eh_frame:0000000000005798                 db  68h ; h
.eh_frame:0000000000005799                 db 0DEh
.eh_frame:000000000000579A                 db 0FFh
.eh_frame:000000000000579B                 db 0FFh
.eh_frame:000000000000579C                 db  0Ch
.eh_frame:000000000000579D                 db    0
.eh_frame:000000000000579E                 db    0
.eh_frame:000000000000579F                 db    0
.eh_frame:00000000000057A0                 db    0
.eh_frame:00000000000057A1                 db    0
.eh_frame:00000000000057A2                 db    0
.eh_frame:00000000000057A3                 db    0
.eh_frame:00000000000057A4                 db  10h
.eh_frame:00000000000057A5                 db    0
.eh_frame:00000000000057A6                 db    0
.eh_frame:00000000000057A7                 db    0
.eh_frame:00000000000057A8                 db  88h
.eh_frame:00000000000057A9                 db    4
.eh_frame:00000000000057AA                 db    0
.eh_frame:00000000000057AB                 db    0
.eh_frame:00000000000057AC                 db  64h ; d
.eh_frame:00000000000057AD                 db 0DEh
.eh_frame:00000000000057AE                 db 0FFh
.eh_frame:00000000000057AF                 db 0FFh
.eh_frame:00000000000057B0                 db  0Fh
.eh_frame:00000000000057B1                 db    0
.eh_frame:00000000000057B2                 db    0
.eh_frame:00000000000057B3                 db    0
.eh_frame:00000000000057B4                 db    0
.eh_frame:00000000000057B5                 db    0
.eh_frame:00000000000057B6                 db    0
.eh_frame:00000000000057B7                 db    0
.eh_frame:00000000000057B8                 db  18h
.eh_frame:00000000000057B9                 db    0
.eh_frame:00000000000057BA                 db    0
.eh_frame:00000000000057BB                 db    0
.eh_frame:00000000000057BC                 db  9Ch
.eh_frame:00000000000057BD                 db    4
.eh_frame:00000000000057BE                 db    0
.eh_frame:00000000000057BF                 db    0
.eh_frame:00000000000057C0                 db  60h ; `
.eh_frame:00000000000057C1                 db 0DEh
.eh_frame:00000000000057C2                 db 0FFh
.eh_frame:00000000000057C3                 db 0FFh
.eh_frame:00000000000057C4                 db  98h
.eh_frame:00000000000057C5                 db    0
.eh_frame:00000000000057C6                 db    0
.eh_frame:00000000000057C7                 db    0
.eh_frame:00000000000057C8                 db    0
.eh_frame:00000000000057C9                 db  44h ; D
.eh_frame:00000000000057CA                 db  0Eh
.eh_frame:00000000000057CB                 db  50h ; P
.eh_frame:00000000000057CC                 db    2
.eh_frame:00000000000057CD                 db  8Eh
.eh_frame:00000000000057CE                 db  0Ah
.eh_frame:00000000000057CF                 db  0Eh
.eh_frame:00000000000057D0                 db    8
.eh_frame:00000000000057D1                 db  41h ; A
.eh_frame:00000000000057D2                 db  0Bh
.eh_frame:00000000000057D3                 db    0
.eh_frame:00000000000057D4                 db  10h
.eh_frame:00000000000057D5                 db    0
.eh_frame:00000000000057D6                 db    0
.eh_frame:00000000000057D7                 db    0
.eh_frame:00000000000057D8                 db 0B8h
.eh_frame:00000000000057D9                 db    4
.eh_frame:00000000000057DA                 db    0
.eh_frame:00000000000057DB                 db    0
.eh_frame:00000000000057DC                 db 0E4h
.eh_frame:00000000000057DD                 db 0DEh
.eh_frame:00000000000057DE                 db 0FFh
.eh_frame:00000000000057DF                 db 0FFh
.eh_frame:00000000000057E0                 db  10h
.eh_frame:00000000000057E1                 db    0
.eh_frame:00000000000057E2                 db    0
.eh_frame:00000000000057E3                 db    0
.eh_frame:00000000000057E4                 db    0
.eh_frame:00000000000057E5                 db    0
.eh_frame:00000000000057E6                 db    0
.eh_frame:00000000000057E7                 db    0
.eh_frame:00000000000057E8                 db  10h
.eh_frame:00000000000057E9                 db    0
.eh_frame:00000000000057EA                 db    0
.eh_frame:00000000000057EB                 db    0
.eh_frame:00000000000057EC                 db 0CCh
.eh_frame:00000000000057ED                 db    4
.eh_frame:00000000000057EE                 db    0
.eh_frame:00000000000057EF                 db    0
.eh_frame:00000000000057F0                 db 0E0h
.eh_frame:00000000000057F1                 db 0DEh
.eh_frame:00000000000057F2                 db 0FFh
.eh_frame:00000000000057F3                 db 0FFh
.eh_frame:00000000000057F4                 db  11h
.eh_frame:00000000000057F5                 db    0
.eh_frame:00000000000057F6                 db    0
.eh_frame:00000000000057F7                 db    0
.eh_frame:00000000000057F8                 db    0
.eh_frame:00000000000057F9                 db    0
.eh_frame:00000000000057FA                 db    0
.eh_frame:00000000000057FB                 db    0
.eh_frame:00000000000057FC                 db  10h
.eh_frame:00000000000057FD                 db    0
.eh_frame:00000000000057FE                 db    0
.eh_frame:00000000000057FF                 db    0
.eh_frame:0000000000005800                 db 0E0h
.eh_frame:0000000000005801                 db    4
.eh_frame:0000000000005802                 db    0
.eh_frame:0000000000005803                 db    0
.eh_frame:0000000000005804                 db 0ECh
.eh_frame:0000000000005805                 db 0DEh
.eh_frame:0000000000005806                 db 0FFh
.eh_frame:0000000000005807                 db 0FFh
.eh_frame:0000000000005808                 db  0Ah
.eh_frame:0000000000005809                 db    0
.eh_frame:000000000000580A                 db    0
.eh_frame:000000000000580B                 db    0
.eh_frame:000000000000580C                 db    0
.eh_frame:000000000000580D                 db    0
.eh_frame:000000000000580E                 db    0
.eh_frame:000000000000580F                 db    0
.eh_frame:0000000000005810                 db  18h
.eh_frame:0000000000005811                 db    0
.eh_frame:0000000000005812                 db    0
.eh_frame:0000000000005813                 db    0
.eh_frame:0000000000005814                 db 0F4h
.eh_frame:0000000000005815                 db    4
.eh_frame:0000000000005816                 db    0
.eh_frame:0000000000005817                 db    0
.eh_frame:0000000000005818                 db 0E8h
.eh_frame:0000000000005819                 db 0DEh
.eh_frame:000000000000581A                 db 0FFh
.eh_frame:000000000000581B                 db 0FFh
.eh_frame:000000000000581C                 db  8Eh
.eh_frame:000000000000581D                 db    0
.eh_frame:000000000000581E                 db    0
.eh_frame:000000000000581F                 db    0
.eh_frame:0000000000005820                 db    0
.eh_frame:0000000000005821                 db  44h ; D
.eh_frame:0000000000005822                 db  0Eh
.eh_frame:0000000000005823                 db  50h ; P
.eh_frame:0000000000005824                 db    2
.eh_frame:0000000000005825                 db  7Fh ; 
.eh_frame:0000000000005826                 db  0Ah
.eh_frame:0000000000005827                 db  0Eh
.eh_frame:0000000000005828                 db    8
.eh_frame:0000000000005829                 db  41h ; A
.eh_frame:000000000000582A                 db  0Bh
.eh_frame:000000000000582B                 db    0
.eh_frame:000000000000582C                 db  18h
.eh_frame:000000000000582D                 db    0
.eh_frame:000000000000582E                 db    0
.eh_frame:000000000000582F                 db    0
.eh_frame:0000000000005830                 db  10h
.eh_frame:0000000000005831                 db    5
.eh_frame:0000000000005832                 db    0
.eh_frame:0000000000005833                 db    0
.eh_frame:0000000000005834                 db  5Ch ; \
.eh_frame:0000000000005835                 db 0DFh
.eh_frame:0000000000005836                 db 0FFh
.eh_frame:0000000000005837                 db 0FFh
.eh_frame:0000000000005838                 db  91h
.eh_frame:0000000000005839                 db    0
.eh_frame:000000000000583A                 db    0
.eh_frame:000000000000583B                 db    0
.eh_frame:000000000000583C                 db    0
.eh_frame:000000000000583D                 db  44h ; D
.eh_frame:000000000000583E                 db  0Eh
.eh_frame:000000000000583F                 db  50h ; P
.eh_frame:0000000000005840                 db    2
.eh_frame:0000000000005841                 db  82h
.eh_frame:0000000000005842                 db  0Ah
.eh_frame:0000000000005843                 db  0Eh
.eh_frame:0000000000005844                 db    8
.eh_frame:0000000000005845                 db  41h ; A
.eh_frame:0000000000005846                 db  0Bh
.eh_frame:0000000000005847                 db    0
.eh_frame:0000000000005848                 db  10h
.eh_frame:0000000000005849                 db    0
.eh_frame:000000000000584A                 db    0
.eh_frame:000000000000584B                 db    0
.eh_frame:000000000000584C                 db  2Ch ; ,
.eh_frame:000000000000584D                 db    5
.eh_frame:000000000000584E                 db    0
.eh_frame:000000000000584F                 db    0
.eh_frame:0000000000005850                 db 0E0h
.eh_frame:0000000000005851                 db 0DFh
.eh_frame:0000000000005852                 db 0FFh
.eh_frame:0000000000005853                 db 0FFh
.eh_frame:0000000000005854                 db  0Ch
.eh_frame:0000000000005855                 db    0
.eh_frame:0000000000005856                 db    0
.eh_frame:0000000000005857                 db    0
.eh_frame:0000000000005858                 db    0
.eh_frame:0000000000005859                 db    0
.eh_frame:000000000000585A                 db    0
.eh_frame:000000000000585B                 db    0
.eh_frame:000000000000585C                 db  10h
.eh_frame:000000000000585D                 db    0
.eh_frame:000000000000585E                 db    0
.eh_frame:000000000000585F                 db    0
.eh_frame:0000000000005860                 db  40h ; @
.eh_frame:0000000000005861                 db    5
.eh_frame:0000000000005862                 db    0
.eh_frame:0000000000005863                 db    0
.eh_frame:0000000000005864                 db 0DCh
.eh_frame:0000000000005865                 db 0DFh
.eh_frame:0000000000005866                 db 0FFh
.eh_frame:0000000000005867                 db 0FFh
.eh_frame:0000000000005868                 db  17h
.eh_frame:0000000000005869                 db    0
.eh_frame:000000000000586A                 db    0
.eh_frame:000000000000586B                 db    0
.eh_frame:000000000000586C                 db    0
.eh_frame:000000000000586D                 db    0
.eh_frame:000000000000586E                 db    0
.eh_frame:000000000000586F                 db    0
.eh_frame:0000000000005870                 db  10h
.eh_frame:0000000000005871                 db    0
.eh_frame:0000000000005872                 db    0
.eh_frame:0000000000005873                 db    0
.eh_frame:0000000000005874                 db  54h ; T
.eh_frame:0000000000005875                 db    5
.eh_frame:0000000000005876                 db    0
.eh_frame:0000000000005877                 db    0
.eh_frame:0000000000005878                 db 0E8h
.eh_frame:0000000000005879                 db 0DFh
.eh_frame:000000000000587A                 db 0FFh
.eh_frame:000000000000587B                 db 0FFh
.eh_frame:000000000000587C                 db  13h
.eh_frame:000000000000587D                 db    0
.eh_frame:000000000000587E                 db    0
.eh_frame:000000000000587F                 db    0
.eh_frame:0000000000005880                 db    0
.eh_frame:0000000000005881                 db    0
.eh_frame:0000000000005882                 db    0
.eh_frame:0000000000005883                 db    0
.eh_frame:0000000000005884                 db  10h
.eh_frame:0000000000005885                 db    0
.eh_frame:0000000000005886                 db    0
.eh_frame:0000000000005887                 db    0
.eh_frame:0000000000005888                 db  68h ; h
.eh_frame:0000000000005889                 db    5
.eh_frame:000000000000588A                 db    0
.eh_frame:000000000000588B                 db    0
.eh_frame:000000000000588C                 db 0F4h
.eh_frame:000000000000588D                 db 0DFh
.eh_frame:000000000000588E                 db 0FFh
.eh_frame:000000000000588F                 db 0FFh
.eh_frame:0000000000005890                 db  0Ch
.eh_frame:0000000000005891                 db    0
.eh_frame:0000000000005892                 db    0
.eh_frame:0000000000005893                 db    0
.eh_frame:0000000000005894                 db    0
.eh_frame:0000000000005895                 db    0
.eh_frame:0000000000005896                 db    0
.eh_frame:0000000000005897                 db    0
.eh_frame:0000000000005898                 db  10h
.eh_frame:0000000000005899                 db    0
.eh_frame:000000000000589A                 db    0
.eh_frame:000000000000589B                 db    0
.eh_frame:000000000000589C                 db  7Ch ; |
.eh_frame:000000000000589D                 db    5
.eh_frame:000000000000589E                 db    0
.eh_frame:000000000000589F                 db    0
.eh_frame:00000000000058A0                 db 0F0h
.eh_frame:00000000000058A1                 db 0DFh
.eh_frame:00000000000058A2                 db 0FFh
.eh_frame:00000000000058A3                 db 0FFh
.eh_frame:00000000000058A4                 db  14h
.eh_frame:00000000000058A5                 db    0
.eh_frame:00000000000058A6                 db    0
.eh_frame:00000000000058A7                 db    0
.eh_frame:00000000000058A8                 db    0
.eh_frame:00000000000058A9                 db    0
.eh_frame:00000000000058AA                 db    0
.eh_frame:00000000000058AB                 db    0
.eh_frame:00000000000058AC                 db  10h
.eh_frame:00000000000058AD                 db    0
.eh_frame:00000000000058AE                 db    0
.eh_frame:00000000000058AF                 db    0
.eh_frame:00000000000058B0                 db  90h
.eh_frame:00000000000058B1                 db    5
.eh_frame:00000000000058B2                 db    0
.eh_frame:00000000000058B3                 db    0
.eh_frame:00000000000058B4                 db 0FCh
.eh_frame:00000000000058B5                 db 0DFh
.eh_frame:00000000000058B6                 db 0FFh
.eh_frame:00000000000058B7                 db 0FFh
.eh_frame:00000000000058B8                 db  13h
.eh_frame:00000000000058B9                 db    0
.eh_frame:00000000000058BA                 db    0
.eh_frame:00000000000058BB                 db    0
.eh_frame:00000000000058BC                 db    0
.eh_frame:00000000000058BD                 db    0
.eh_frame:00000000000058BE                 db    0
.eh_frame:00000000000058BF                 db    0
.eh_frame:00000000000058C0                 db  14h
.eh_frame:00000000000058C1                 db    0
.eh_frame:00000000000058C2                 db    0
.eh_frame:00000000000058C3                 db    0
.eh_frame:00000000000058C4                 db 0A4h
.eh_frame:00000000000058C5                 db    5
.eh_frame:00000000000058C6                 db    0
.eh_frame:00000000000058C7                 db    0
.eh_frame:00000000000058C8                 db    8
.eh_frame:00000000000058C9                 db 0E0h
.eh_frame:00000000000058CA                 db 0FFh
.eh_frame:00000000000058CB                 db 0FFh
.eh_frame:00000000000058CC                 db  18h
.eh_frame:00000000000058CD                 db    0
.eh_frame:00000000000058CE                 db    0
.eh_frame:00000000000058CF                 db    0
.eh_frame:00000000000058D0                 db    0
.eh_frame:00000000000058D1                 db    0
.eh_frame:00000000000058D2                 db    0
.eh_frame:00000000000058D3                 db    0
.eh_frame:00000000000058D4                 db    0
.eh_frame:00000000000058D5                 db    0
.eh_frame:00000000000058D6                 db    0
.eh_frame:00000000000058D7                 db    0
.eh_frame:00000000000058D8                 db  10h
.eh_frame:00000000000058D9                 db    1
.eh_frame:00000000000058DA                 db    0
.eh_frame:00000000000058DB                 db    0
.eh_frame:00000000000058DC                 db 0BCh
.eh_frame:00000000000058DD                 db    5
.eh_frame:00000000000058DE                 db    0
.eh_frame:00000000000058DF                 db    0
.eh_frame:00000000000058E0                 db  10h
.eh_frame:00000000000058E1                 db 0E0h
.eh_frame:00000000000058E2                 db 0FFh
.eh_frame:00000000000058E3                 db 0FFh
.eh_frame:00000000000058E4                 db  17h
.eh_frame:00000000000058E5                 db    4
.eh_frame:00000000000058E6                 db    0
.eh_frame:00000000000058E7                 db    0
.eh_frame:00000000000058E8                 db    0
.eh_frame:00000000000058E9                 db  42h ; B
.eh_frame:00000000000058EA                 db  0Eh
.eh_frame:00000000000058EB                 db  10h
.eh_frame:00000000000058EC                 db  8Fh
.eh_frame:00000000000058ED                 db    2
.eh_frame:00000000000058EE                 db  42h ; B
.eh_frame:00000000000058EF                 db  0Eh
.eh_frame:00000000000058F0                 db  18h
.eh_frame:00000000000058F1                 db  8Eh
.eh_frame:00000000000058F2                 db    3
.eh_frame:00000000000058F3                 db  42h ; B
.eh_frame:00000000000058F4                 db  0Eh
.eh_frame:00000000000058F5                 db  20h
.eh_frame:00000000000058F6                 db  8Dh
.eh_frame:00000000000058F7                 db    4
.eh_frame:00000000000058F8                 db  42h ; B
.eh_frame:00000000000058F9                 db  0Eh
.eh_frame:00000000000058FA                 db  28h ; (
.eh_frame:00000000000058FB                 db  8Ch
.eh_frame:00000000000058FC                 db    5
.eh_frame:00000000000058FD                 db  44h ; D
.eh_frame:00000000000058FE                 db  0Eh
.eh_frame:00000000000058FF                 db  30h ; 0
.eh_frame:0000000000005900                 db  86h
.eh_frame:0000000000005901                 db    6
.eh_frame:0000000000005902                 db  41h ; A
.eh_frame:0000000000005903                 db  0Eh
.eh_frame:0000000000005904                 db  38h ; 8
.eh_frame:0000000000005905                 db  83h
.eh_frame:0000000000005906                 db    7
.eh_frame:0000000000005907                 db  4Ah ; J
.eh_frame:0000000000005908                 db  0Eh
.eh_frame:0000000000005909                 db  60h ; `
.eh_frame:000000000000590A                 db    2
.eh_frame:000000000000590B                 db 0DDh
.eh_frame:000000000000590C                 db  0Eh
.eh_frame:000000000000590D                 db  68h ; h
.eh_frame:000000000000590E                 db  57h ; W
.eh_frame:000000000000590F                 db  0Eh
.eh_frame:0000000000005910                 db  70h ; p
.eh_frame:0000000000005911                 db  42h ; B
.eh_frame:0000000000005912                 db  0Eh
.eh_frame:0000000000005913                 db  78h ; x
.eh_frame:0000000000005914                 db  42h ; B
.eh_frame:0000000000005915                 db  0Eh
.eh_frame:0000000000005916                 db  80h
.eh_frame:0000000000005917                 db    1
.eh_frame:0000000000005918                 db  42h ; B
.eh_frame:0000000000005919                 db  0Eh
.eh_frame:000000000000591A                 db  88h
.eh_frame:000000000000591B                 db    1
.eh_frame:000000000000591C                 db  42h ; B
.eh_frame:000000000000591D                 db  0Eh
.eh_frame:000000000000591E                 db  90h
.eh_frame:000000000000591F                 db    1
.eh_frame:0000000000005920                 db  53h ; S
.eh_frame:0000000000005921                 db  0Eh
.eh_frame:0000000000005922                 db  60h ; `
.eh_frame:0000000000005923                 db  44h ; D
.eh_frame:0000000000005924                 db  0Ah
.eh_frame:0000000000005925                 db  0Eh
.eh_frame:0000000000005926                 db  38h ; 8
.eh_frame:0000000000005927                 db  41h ; A
.eh_frame:0000000000005928                 db  0Eh
.eh_frame:0000000000005929                 db  30h ; 0
.eh_frame:000000000000592A                 db  41h ; A
.eh_frame:000000000000592B                 db  0Eh
.eh_frame:000000000000592C                 db  28h ; (
.eh_frame:000000000000592D                 db  42h ; B
.eh_frame:000000000000592E                 db  0Eh
.eh_frame:000000000000592F                 db  20h
.eh_frame:0000000000005930                 db  42h ; B
.eh_frame:0000000000005931                 db  0Eh
.eh_frame:0000000000005932                 db  18h
.eh_frame:0000000000005933                 db  42h ; B
.eh_frame:0000000000005934                 db  0Eh
.eh_frame:0000000000005935                 db  10h
.eh_frame:0000000000005936                 db  42h ; B
.eh_frame:0000000000005937                 db  0Eh
.eh_frame:0000000000005938                 db    8
.eh_frame:0000000000005939                 db  44h ; D
.eh_frame:000000000000593A                 db  0Bh
.eh_frame:000000000000593B                 db    2
.eh_frame:000000000000593C                 db  78h ; x
.eh_frame:000000000000593D                 db  0Ah
.eh_frame:000000000000593E                 db  0Eh
.eh_frame:000000000000593F                 db  68h ; h
.eh_frame:0000000000005940                 db  48h ; H
.eh_frame:0000000000005941                 db  0Bh
.eh_frame:0000000000005942                 db  5Ah ; Z
.eh_frame:0000000000005943                 db  0Ah
.eh_frame:0000000000005944                 db  0Eh
.eh_frame:0000000000005945                 db  38h ; 8
.eh_frame:0000000000005946                 db  47h ; G
.eh_frame:0000000000005947                 db  0Eh
.eh_frame:0000000000005948                 db  30h ; 0
.eh_frame:0000000000005949                 db  41h ; A
.eh_frame:000000000000594A                 db  0Eh
.eh_frame:000000000000594B                 db  28h ; (
.eh_frame:000000000000594C                 db  42h ; B
.eh_frame:000000000000594D                 db  0Eh
.eh_frame:000000000000594E                 db  20h
.eh_frame:000000000000594F                 db  42h ; B
.eh_frame:0000000000005950                 db  0Eh
.eh_frame:0000000000005951                 db  18h
.eh_frame:0000000000005952                 db  42h ; B
.eh_frame:0000000000005953                 db  0Eh
.eh_frame:0000000000005954                 db  10h
.eh_frame:0000000000005955                 db  42h ; B
.eh_frame:0000000000005956                 db  0Eh
.eh_frame:0000000000005957                 db    8
.eh_frame:0000000000005958                 db  56h ; V
.eh_frame:0000000000005959                 db  0Bh
.eh_frame:000000000000595A                 db  5Eh ; ^
.eh_frame:000000000000595B                 db  0Ah
.eh_frame:000000000000595C                 db  0Eh
.eh_frame:000000000000595D                 db  38h ; 8
.eh_frame:000000000000595E                 db  52h ; R
.eh_frame:000000000000595F                 db  0Eh
.eh_frame:0000000000005960                 db  30h ; 0
.eh_frame:0000000000005961                 db  41h ; A
.eh_frame:0000000000005962                 db  0Eh
.eh_frame:0000000000005963                 db  28h ; (
.eh_frame:0000000000005964                 db  42h ; B
.eh_frame:0000000000005965                 db  0Eh
.eh_frame:0000000000005966                 db  20h
.eh_frame:0000000000005967                 db  42h ; B
.eh_frame:0000000000005968                 db  0Eh
.eh_frame:0000000000005969                 db  18h
.eh_frame:000000000000596A                 db  42h ; B
.eh_frame:000000000000596B                 db  0Eh
.eh_frame:000000000000596C                 db  10h
.eh_frame:000000000000596D                 db  42h ; B
.eh_frame:000000000000596E                 db  0Eh
.eh_frame:000000000000596F                 db    8
.eh_frame:0000000000005970                 db  4Fh ; O
.eh_frame:0000000000005971                 db  0Bh
.eh_frame:0000000000005972                 db  62h ; b
.eh_frame:0000000000005973                 db  0Ah
.eh_frame:0000000000005974                 db  0Eh
.eh_frame:0000000000005975                 db  38h ; 8
.eh_frame:0000000000005976                 db  50h ; P
.eh_frame:0000000000005977                 db  0Eh
.eh_frame:0000000000005978                 db  30h ; 0
.eh_frame:0000000000005979                 db  41h ; A
.eh_frame:000000000000597A                 db  0Eh
.eh_frame:000000000000597B                 db  28h ; (
.eh_frame:000000000000597C                 db  42h ; B
.eh_frame:000000000000597D                 db  0Eh
.eh_frame:000000000000597E                 db  20h
.eh_frame:000000000000597F                 db  42h ; B
.eh_frame:0000000000005980                 db  0Eh
.eh_frame:0000000000005981                 db  18h
.eh_frame:0000000000005982                 db  42h ; B
.eh_frame:0000000000005983                 db  0Eh
.eh_frame:0000000000005984                 db  10h
.eh_frame:0000000000005985                 db  42h ; B
.eh_frame:0000000000005986                 db  0Eh
.eh_frame:0000000000005987                 db    8
.eh_frame:0000000000005988                 db  55h ; U
.eh_frame:0000000000005989                 db  0Bh
.eh_frame:000000000000598A                 db  66h ; f
.eh_frame:000000000000598B                 db  0Eh
.eh_frame:000000000000598C                 db  68h ; h
.eh_frame:000000000000598D                 db  42h ; B
.eh_frame:000000000000598E                 db  0Eh
.eh_frame:000000000000598F                 db  70h ; p
.eh_frame:0000000000005990                 db  5Ch ; \
.eh_frame:0000000000005991                 db  0Eh
.eh_frame:0000000000005992                 db  68h ; h
.eh_frame:0000000000005993                 db  41h ; A
.eh_frame:0000000000005994                 db  0Eh
.eh_frame:0000000000005995                 db  60h ; `
.eh_frame:0000000000005996                 db  44h ; D
.eh_frame:0000000000005997                 db  0Ah
.eh_frame:0000000000005998                 db  0Eh
.eh_frame:0000000000005999                 db  38h ; 8
.eh_frame:000000000000599A                 db  41h ; A
.eh_frame:000000000000599B                 db  0Eh
.eh_frame:000000000000599C                 db  30h ; 0
.eh_frame:000000000000599D                 db  41h ; A
.eh_frame:000000000000599E                 db  0Eh
.eh_frame:000000000000599F                 db  28h ; (
.eh_frame:00000000000059A0                 db  42h ; B
.eh_frame:00000000000059A1                 db  0Eh
.eh_frame:00000000000059A2                 db  20h
.eh_frame:00000000000059A3                 db  42h ; B
.eh_frame:00000000000059A4                 db  0Eh
.eh_frame:00000000000059A5                 db  18h
.eh_frame:00000000000059A6                 db  42h ; B
.eh_frame:00000000000059A7                 db  0Eh
.eh_frame:00000000000059A8                 db  10h
.eh_frame:00000000000059A9                 db  42h ; B
.eh_frame:00000000000059AA                 db  0Eh
.eh_frame:00000000000059AB                 db    8
.eh_frame:00000000000059AC                 db  45h ; E
.eh_frame:00000000000059AD                 db  0Bh
.eh_frame:00000000000059AE                 db  68h ; h
.eh_frame:00000000000059AF                 db  0Ah
.eh_frame:00000000000059B0                 db  0Eh
.eh_frame:00000000000059B1                 db  68h ; h
.eh_frame:00000000000059B2                 db  48h ; H
.eh_frame:00000000000059B3                 db  0Bh
.eh_frame:00000000000059B4                 db  72h ; r
.eh_frame:00000000000059B5                 db  0Eh
.eh_frame:00000000000059B6                 db  68h ; h
.eh_frame:00000000000059B7                 db  45h ; E
.eh_frame:00000000000059B8                 db  0Eh
.eh_frame:00000000000059B9                 db  70h ; p
.eh_frame:00000000000059BA                 db  42h ; B
.eh_frame:00000000000059BB                 db  0Eh
.eh_frame:00000000000059BC                 db  78h ; x
.eh_frame:00000000000059BD                 db  42h ; B
.eh_frame:00000000000059BE                 db  0Eh
.eh_frame:00000000000059BF                 db  80h
.eh_frame:00000000000059C0                 db    1
.eh_frame:00000000000059C1                 db  5Eh ; ^
.eh_frame:00000000000059C2                 db  0Eh
.eh_frame:00000000000059C3                 db  60h ; `
.eh_frame:00000000000059C4                 db  44h ; D
.eh_frame:00000000000059C5                 db  0Ah
.eh_frame:00000000000059C6                 db  0Eh
.eh_frame:00000000000059C7                 db  38h ; 8
.eh_frame:00000000000059C8                 db  41h ; A
.eh_frame:00000000000059C9                 db  0Eh
.eh_frame:00000000000059CA                 db  30h ; 0
.eh_frame:00000000000059CB                 db  41h ; A
.eh_frame:00000000000059CC                 db  0Eh
.eh_frame:00000000000059CD                 db  28h ; (
.eh_frame:00000000000059CE                 db  42h ; B
.eh_frame:00000000000059CF                 db  0Eh
.eh_frame:00000000000059D0                 db  20h
.eh_frame:00000000000059D1                 db  42h ; B
.eh_frame:00000000000059D2                 db  0Eh
.eh_frame:00000000000059D3                 db  18h
.eh_frame:00000000000059D4                 db  42h ; B
.eh_frame:00000000000059D5                 db  0Eh
.eh_frame:00000000000059D6                 db  10h
.eh_frame:00000000000059D7                 db  42h ; B
.eh_frame:00000000000059D8                 db  0Eh
.eh_frame:00000000000059D9                 db    8
.eh_frame:00000000000059DA                 db  41h ; A
.eh_frame:00000000000059DB                 db  0Bh
.eh_frame:00000000000059DC                 db  79h ; y
.eh_frame:00000000000059DD                 db  0Ah
.eh_frame:00000000000059DE                 db  0Eh
.eh_frame:00000000000059DF                 db  68h ; h
.eh_frame:00000000000059E0                 db  42h ; B
.eh_frame:00000000000059E1                 db  0Eh
.eh_frame:00000000000059E2                 db  70h ; p
.eh_frame:00000000000059E3                 db  42h ; B
.eh_frame:00000000000059E4                 db  0Eh
.eh_frame:00000000000059E5                 db  78h ; x
.eh_frame:00000000000059E6                 db  42h ; B
.eh_frame:00000000000059E7                 db  0Eh
.eh_frame:00000000000059E8                 db  80h
.eh_frame:00000000000059E9                 db    1
.eh_frame:00000000000059EA                 db  51h ; Q
.eh_frame:00000000000059EB                 db  0Bh
.eh_frame:00000000000059EC                 db  10h
.eh_frame:00000000000059ED                 db    0
.eh_frame:00000000000059EE                 db    0
.eh_frame:00000000000059EF                 db    0
.eh_frame:00000000000059F0                 db 0D0h
.eh_frame:00000000000059F1                 db    6
.eh_frame:00000000000059F2                 db    0
.eh_frame:00000000000059F3                 db    0
.eh_frame:00000000000059F4                 db  1Ch
.eh_frame:00000000000059F5                 db 0E3h
.eh_frame:00000000000059F6                 db 0FFh
.eh_frame:00000000000059F7                 db 0FFh
.eh_frame:00000000000059F8                 db  20h
.eh_frame:00000000000059F9                 db    0
.eh_frame:00000000000059FA                 db    0
.eh_frame:00000000000059FB                 db    0
.eh_frame:00000000000059FC                 db    0
.eh_frame:00000000000059FD                 db    0
.eh_frame:00000000000059FE                 db    0
.eh_frame:00000000000059FF                 db    0
.eh_frame:0000000000005A00                 db  18h
.eh_frame:0000000000005A01                 db    0
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db 0E4h
.eh_frame:0000000000005A05                 db    6
.eh_frame:0000000000005A06                 db    0
.eh_frame:0000000000005A07                 db    0
.eh_frame:0000000000005A08                 db  28h ; (
.eh_frame:0000000000005A09                 db 0E3h
.eh_frame:0000000000005A0A                 db 0FFh
.eh_frame:0000000000005A0B                 db 0FFh
.eh_frame:0000000000005A0C                 db  78h ; x
.eh_frame:0000000000005A0D                 db    0
.eh_frame:0000000000005A0E                 db    0
.eh_frame:0000000000005A0F                 db    0
.eh_frame:0000000000005A10                 db    0
.eh_frame:0000000000005A11                 db  44h ; D
.eh_frame:0000000000005A12                 db  0Eh
.eh_frame:0000000000005A13                 db  70h ; p
.eh_frame:0000000000005A14                 db    2
.eh_frame:0000000000005A15                 db  60h ; `
.eh_frame:0000000000005A16                 db  0Ah
.eh_frame:0000000000005A17                 db  0Eh
.eh_frame:0000000000005A18                 db    8
.eh_frame:0000000000005A19                 db  41h ; A
.eh_frame:0000000000005A1A                 db  0Bh
.eh_frame:0000000000005A1B                 db    0
.eh_frame:0000000000005A1C                 db  28h ; (
.eh_frame:0000000000005A1D                 db    0
.eh_frame:0000000000005A1E                 db    0
.eh_frame:0000000000005A1F                 db    0
.eh_frame:0000000000005A20                 db    0
.eh_frame:0000000000005A21                 db    7
.eh_frame:0000000000005A22                 db    0
.eh_frame:0000000000005A23                 db    0
.eh_frame:0000000000005A24                 db  8Ch
.eh_frame:0000000000005A25                 db 0E3h
.eh_frame:0000000000005A26                 db 0FFh
.eh_frame:0000000000005A27                 db 0FFh
.eh_frame:0000000000005A28                 db 0D5h
.eh_frame:0000000000005A29                 db    0
.eh_frame:0000000000005A2A                 db    0
.eh_frame:0000000000005A2B                 db    0
.eh_frame:0000000000005A2C                 db    0
.eh_frame:0000000000005A2D                 db  41h ; A
.eh_frame:0000000000005A2E                 db  0Eh
.eh_frame:0000000000005A2F                 db  10h
.eh_frame:0000000000005A30                 db  86h
.eh_frame:0000000000005A31                 db    2
.eh_frame:0000000000005A32                 db  41h ; A
.eh_frame:0000000000005A33                 db  0Eh
.eh_frame:0000000000005A34                 db  18h
.eh_frame:0000000000005A35                 db  83h
.eh_frame:0000000000005A36                 db    3
.eh_frame:0000000000005A37                 db  50h ; P
.eh_frame:0000000000005A38                 db  0Eh
.eh_frame:0000000000005A39                 db 0D0h
.eh_frame:0000000000005A3A                 db    1
.eh_frame:0000000000005A3B                 db    2
.eh_frame:0000000000005A3C                 db 0ABh
.eh_frame:0000000000005A3D                 db  0Ah
.eh_frame:0000000000005A3E                 db  0Eh
.eh_frame:0000000000005A3F                 db  18h
.eh_frame:0000000000005A40                 db  41h ; A
.eh_frame:0000000000005A41                 db  0Eh
.eh_frame:0000000000005A42                 db  10h
.eh_frame:0000000000005A43                 db  41h ; A
.eh_frame:0000000000005A44                 db  0Eh
.eh_frame:0000000000005A45                 db    8
.eh_frame:0000000000005A46                 db  41h ; A
.eh_frame:0000000000005A47                 db  0Bh
.eh_frame:0000000000005A48                 db  1Ch
.eh_frame:0000000000005A49                 db    0
.eh_frame:0000000000005A4A                 db    0
.eh_frame:0000000000005A4B                 db    0
.eh_frame:0000000000005A4C                 db  2Ch ; ,
.eh_frame:0000000000005A4D                 db    7
.eh_frame:0000000000005A4E                 db    0
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db  40h ; @
.eh_frame:0000000000005A51                 db 0E4h
.eh_frame:0000000000005A52                 db 0FFh
.eh_frame:0000000000005A53                 db 0FFh
.eh_frame:0000000000005A54                 db  80h
.eh_frame:0000000000005A55                 db    0
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db    0
.eh_frame:0000000000005A59                 db  41h ; A
.eh_frame:0000000000005A5A                 db  0Eh
.eh_frame:0000000000005A5B                 db  10h
.eh_frame:0000000000005A5C                 db  83h
.eh_frame:0000000000005A5D                 db    2
.eh_frame:0000000000005A5E                 db    2
.eh_frame:0000000000005A5F                 db  7Ah ; z
.eh_frame:0000000000005A60                 db  0Eh
.eh_frame:0000000000005A61                 db    8
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db    0
.eh_frame:0000000000005A65                 db    0
.eh_frame:0000000000005A66                 db    0
.eh_frame:0000000000005A67                 db    0
.eh_frame:0000000000005A68                 db  18h
.eh_frame:0000000000005A69                 db    0
.eh_frame:0000000000005A6A                 db    0
.eh_frame:0000000000005A6B                 db    0
.eh_frame:0000000000005A6C                 db  4Ch ; L
.eh_frame:0000000000005A6D                 db    7
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db 0A0h
.eh_frame:0000000000005A71                 db 0E4h
.eh_frame:0000000000005A72                 db 0FFh
.eh_frame:0000000000005A73                 db 0FFh
.eh_frame:0000000000005A74                 db  1Ah
.eh_frame:0000000000005A75                 db    0
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db    0
.eh_frame:0000000000005A79                 db  41h ; A
.eh_frame:0000000000005A7A                 db  0Eh
.eh_frame:0000000000005A7B                 db  10h
.eh_frame:0000000000005A7C                 db  83h
.eh_frame:0000000000005A7D                 db    2
.eh_frame:0000000000005A7E                 db  53h ; S
.eh_frame:0000000000005A7F                 db  0Ah
.eh_frame:0000000000005A80                 db  0Eh
.eh_frame:0000000000005A81                 db    8
.eh_frame:0000000000005A82                 db  41h ; A
.eh_frame:0000000000005A83                 db  0Bh
.eh_frame:0000000000005A84                 db  10h
.eh_frame:0000000000005A85                 db    0
.eh_frame:0000000000005A86                 db    0
.eh_frame:0000000000005A87                 db    0
.eh_frame:0000000000005A88                 db  68h ; h
.eh_frame:0000000000005A89                 db    7
.eh_frame:0000000000005A8A                 db    0
.eh_frame:0000000000005A8B                 db    0
.eh_frame:0000000000005A8C                 db 0A4h
.eh_frame:0000000000005A8D                 db 0E4h
.eh_frame:0000000000005A8E                 db 0FFh
.eh_frame:0000000000005A8F                 db 0FFh
.eh_frame:0000000000005A90                 db  24h ; $
.eh_frame:0000000000005A91                 db    0
.eh_frame:0000000000005A92                 db    0
.eh_frame:0000000000005A93                 db    0
.eh_frame:0000000000005A94                 db    0
.eh_frame:0000000000005A95                 db  5Fh ; _
.eh_frame:0000000000005A96                 db  0Eh
.eh_frame:0000000000005A97                 db  10h
.eh_frame:0000000000005A98                 db  10h
.eh_frame:0000000000005A99                 db    0
.eh_frame:0000000000005A9A                 db    0
.eh_frame:0000000000005A9B                 db    0
.eh_frame:0000000000005A9C                 db  7Ch ; |
.eh_frame:0000000000005A9D                 db    7
.eh_frame:0000000000005A9E                 db    0
.eh_frame:0000000000005A9F                 db    0
.eh_frame:0000000000005AA0                 db 0C0h
.eh_frame:0000000000005AA1                 db 0E4h
.eh_frame:0000000000005AA2                 db 0FFh
.eh_frame:0000000000005AA3                 db 0FFh
.eh_frame:0000000000005AA4                 db    2
.eh_frame:0000000000005AA5                 db    0
.eh_frame:0000000000005AA6                 db    0
.eh_frame:0000000000005AA7                 db    0
.eh_frame:0000000000005AA8                 db    0
.eh_frame:0000000000005AA9                 db    0
.eh_frame:0000000000005AAA                 db    0
.eh_frame:0000000000005AAB                 db    0
.eh_frame:0000000000005AAC                 db  20h
.eh_frame:0000000000005AAD                 db    0
.eh_frame:0000000000005AAE                 db    0
.eh_frame:0000000000005AAF                 db    0
.eh_frame:0000000000005AB0                 db  90h
.eh_frame:0000000000005AB1                 db    7
.eh_frame:0000000000005AB2                 db    0
.eh_frame:0000000000005AB3                 db    0
.eh_frame:0000000000005AB4                 db 0BCh
.eh_frame:0000000000005AB5                 db 0E4h
.eh_frame:0000000000005AB6                 db 0FFh
.eh_frame:0000000000005AB7                 db 0FFh
.eh_frame:0000000000005AB8                 db  36h ; 6
.eh_frame:0000000000005AB9                 db    0
.eh_frame:0000000000005ABA                 db    0
.eh_frame:0000000000005ABB                 db    0
.eh_frame:0000000000005ABC                 db    0
.eh_frame:0000000000005ABD                 db  44h ; D
.eh_frame:0000000000005ABE                 db  0Eh
.eh_frame:0000000000005ABF                 db  10h
.eh_frame:0000000000005AC0                 db  83h
.eh_frame:0000000000005AC1                 db    2
.eh_frame:0000000000005AC2                 db  5Dh ; ]
.eh_frame:0000000000005AC3                 db  0Ah
.eh_frame:0000000000005AC4                 db  0Eh
.eh_frame:0000000000005AC5                 db    8
.eh_frame:0000000000005AC6                 db  47h ; G
.eh_frame:0000000000005AC7                 db  0Bh
.eh_frame:0000000000005AC8                 db  48h ; H
.eh_frame:0000000000005AC9                 db  0Ah
.eh_frame:0000000000005ACA                 db  0Eh
.eh_frame:0000000000005ACB                 db    8
.eh_frame:0000000000005ACC                 db  41h ; A
.eh_frame:0000000000005ACD                 db  0Bh
.eh_frame:0000000000005ACE                 db    0
.eh_frame:0000000000005ACF                 db    0
.eh_frame:0000000000005AD0                 db  10h
.eh_frame:0000000000005AD1                 db    0
.eh_frame:0000000000005AD2                 db    0
.eh_frame:0000000000005AD3                 db    0
.eh_frame:0000000000005AD4                 db 0B4h
.eh_frame:0000000000005AD5                 db    7
.eh_frame:0000000000005AD6                 db    0
.eh_frame:0000000000005AD7                 db    0
.eh_frame:0000000000005AD8                 db 0D8h
.eh_frame:0000000000005AD9                 db 0E4h
.eh_frame:0000000000005ADA                 db 0FFh
.eh_frame:0000000000005ADB                 db 0FFh
.eh_frame:0000000000005ADC                 db  24h ; $
.eh_frame:0000000000005ADD                 db    0
.eh_frame:0000000000005ADE                 db    0
.eh_frame:0000000000005ADF                 db    0
.eh_frame:0000000000005AE0                 db    0
.eh_frame:0000000000005AE1                 db  5Fh ; _
.eh_frame:0000000000005AE2                 db  0Eh
.eh_frame:0000000000005AE3                 db  10h
.eh_frame:0000000000005AE4                 db  14h
.eh_frame:0000000000005AE5                 db    0
.eh_frame:0000000000005AE6                 db    0
.eh_frame:0000000000005AE7                 db    0
.eh_frame:0000000000005AE8                 db 0C8h
.eh_frame:0000000000005AE9                 db    7
.eh_frame:0000000000005AEA                 db    0
.eh_frame:0000000000005AEB                 db    0
.eh_frame:0000000000005AEC                 db 0F4h
.eh_frame:0000000000005AED                 db 0E4h
.eh_frame:0000000000005AEE                 db 0FFh
.eh_frame:0000000000005AEF                 db 0FFh
.eh_frame:0000000000005AF0                 db  82h
.eh_frame:0000000000005AF1                 db    0
.eh_frame:0000000000005AF2                 db    0
.eh_frame:0000000000005AF3                 db    0
.eh_frame:0000000000005AF4                 db    0
.eh_frame:0000000000005AF5                 db    2
.eh_frame:0000000000005AF6                 db  5Fh ; _
.eh_frame:0000000000005AF7                 db  0Eh
.eh_frame:0000000000005AF8                 db  10h
.eh_frame:0000000000005AF9                 db  49h ; I
.eh_frame:0000000000005AFA                 db  0Eh
.eh_frame:0000000000005AFB                 db    8
.eh_frame:0000000000005AFC                 db  14h
.eh_frame:0000000000005AFD                 db    0
.eh_frame:0000000000005AFE                 db    0
.eh_frame:0000000000005AFF                 db    0
.eh_frame:0000000000005B00                 db 0E0h
.eh_frame:0000000000005B01                 db    7
.eh_frame:0000000000005B02                 db    0
.eh_frame:0000000000005B03                 db    0
.eh_frame:0000000000005B04                 db  6Ch ; l
.eh_frame:0000000000005B05                 db 0E5h
.eh_frame:0000000000005B06                 db 0FFh
.eh_frame:0000000000005B07                 db 0FFh
.eh_frame:0000000000005B08                 db  4Ah ; J
.eh_frame:0000000000005B09                 db    0
.eh_frame:0000000000005B0A                 db    0
.eh_frame:0000000000005B0B                 db    0
.eh_frame:0000000000005B0C                 db    0
.eh_frame:0000000000005B0D                 db    2
.eh_frame:0000000000005B0E                 db  45h ; E
.eh_frame:0000000000005B0F                 db  0Eh
.eh_frame:0000000000005B10                 db  10h
.eh_frame:0000000000005B11                 db    0
.eh_frame:0000000000005B12                 db    0
.eh_frame:0000000000005B13                 db    0
.eh_frame:0000000000005B14                 db  18h
.eh_frame:0000000000005B15                 db    0
.eh_frame:0000000000005B16                 db    0
.eh_frame:0000000000005B17                 db    0
.eh_frame:0000000000005B18                 db 0F8h
.eh_frame:0000000000005B19                 db    7
.eh_frame:0000000000005B1A                 db    0
.eh_frame:0000000000005B1B                 db    0
.eh_frame:0000000000005B1C                 db 0A4h
.eh_frame:0000000000005B1D                 db 0E5h
.eh_frame:0000000000005B1E                 db 0FFh
.eh_frame:0000000000005B1F                 db 0FFh
.eh_frame:0000000000005B20                 db  17h
.eh_frame:0000000000005B21                 db    0
.eh_frame:0000000000005B22                 db    0
.eh_frame:0000000000005B23                 db    0
.eh_frame:0000000000005B24                 db    0
.eh_frame:0000000000005B25                 db  41h ; A
.eh_frame:0000000000005B26                 db  0Eh
.eh_frame:0000000000005B27                 db  10h
.eh_frame:0000000000005B28                 db  83h
.eh_frame:0000000000005B29                 db    2
.eh_frame:0000000000005B2A                 db  51h ; Q
.eh_frame:0000000000005B2B                 db  0Eh
.eh_frame:0000000000005B2C                 db    8
.eh_frame:0000000000005B2D                 db    0
.eh_frame:0000000000005B2E                 db    0
.eh_frame:0000000000005B2F                 db    0
.eh_frame:0000000000005B30                 db  18h
.eh_frame:0000000000005B31                 db    0
.eh_frame:0000000000005B32                 db    0
.eh_frame:0000000000005B33                 db    0
.eh_frame:0000000000005B34                 db  14h
.eh_frame:0000000000005B35                 db    8
.eh_frame:0000000000005B36                 db    0
.eh_frame:0000000000005B37                 db    0
.eh_frame:0000000000005B38                 db 0A8h
.eh_frame:0000000000005B39                 db 0E5h
.eh_frame:0000000000005B3A                 db 0FFh
.eh_frame:0000000000005B3B                 db 0FFh
.eh_frame:0000000000005B3C                 db  2Eh ; .
.eh_frame:0000000000005B3D                 db    0
.eh_frame:0000000000005B3E                 db    0
.eh_frame:0000000000005B3F                 db    0
.eh_frame:0000000000005B40                 db    0
.eh_frame:0000000000005B41                 db  47h ; G
.eh_frame:0000000000005B42                 db  0Eh
.eh_frame:0000000000005B43                 db  10h
.eh_frame:0000000000005B44                 db  61h ; a
.eh_frame:0000000000005B45                 db  0Ah
.eh_frame:0000000000005B46                 db  0Eh
.eh_frame:0000000000005B47                 db    8
.eh_frame:0000000000005B48                 db  41h ; A
.eh_frame:0000000000005B49                 db  0Bh
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db  24h ; $
.eh_frame:0000000000005B4D                 db    0
.eh_frame:0000000000005B4E                 db    0
.eh_frame:0000000000005B4F                 db    0
.eh_frame:0000000000005B50                 db  30h ; 0
.eh_frame:0000000000005B51                 db    8
.eh_frame:0000000000005B52                 db    0
.eh_frame:0000000000005B53                 db    0
.eh_frame:0000000000005B54                 db 0BCh
.eh_frame:0000000000005B55                 db 0E5h
.eh_frame:0000000000005B56                 db 0FFh
.eh_frame:0000000000005B57                 db 0FFh
.eh_frame:0000000000005B58                 db  28h ; (
.eh_frame:0000000000005B59                 db    0
.eh_frame:0000000000005B5A                 db    0
.eh_frame:0000000000005B5B                 db    0
.eh_frame:0000000000005B5C                 db    0
.eh_frame:0000000000005B5D                 db  41h ; A
.eh_frame:0000000000005B5E                 db  0Eh
.eh_frame:0000000000005B5F                 db  10h
.eh_frame:0000000000005B60                 db  86h
.eh_frame:0000000000005B61                 db    2
.eh_frame:0000000000005B62                 db  41h ; A
.eh_frame:0000000000005B63                 db  0Eh
.eh_frame:0000000000005B64                 db  18h
.eh_frame:0000000000005B65                 db  83h
.eh_frame:0000000000005B66                 db    3
.eh_frame:0000000000005B67                 db  4Dh ; M
.eh_frame:0000000000005B68                 db  0Eh
.eh_frame:0000000000005B69                 db  20h
.eh_frame:0000000000005B6A                 db  49h ; I
.eh_frame:0000000000005B6B                 db  0Eh
.eh_frame:0000000000005B6C                 db  18h
.eh_frame:0000000000005B6D                 db  47h ; G
.eh_frame:0000000000005B6E                 db  0Eh
.eh_frame:0000000000005B6F                 db  10h
.eh_frame:0000000000005B70                 db  41h ; A
.eh_frame:0000000000005B71                 db  0Eh
.eh_frame:0000000000005B72                 db    8
.eh_frame:0000000000005B73                 db    0
.eh_frame:0000000000005B74                 db  18h
.eh_frame:0000000000005B75                 db    0
.eh_frame:0000000000005B76                 db    0
.eh_frame:0000000000005B77                 db    0
.eh_frame:0000000000005B78                 db  58h ; X
.eh_frame:0000000000005B79                 db    8
.eh_frame:0000000000005B7A                 db    0
.eh_frame:0000000000005B7B                 db    0
.eh_frame:0000000000005B7C                 db 0C4h
.eh_frame:0000000000005B7D                 db 0E5h
.eh_frame:0000000000005B7E                 db 0FFh
.eh_frame:0000000000005B7F                 db 0FFh
.eh_frame:0000000000005B80                 db  13h
.eh_frame:0000000000005B81                 db    0
.eh_frame:0000000000005B82                 db    0
.eh_frame:0000000000005B83                 db    0
.eh_frame:0000000000005B84                 db    0
.eh_frame:0000000000005B85                 db  41h ; A
.eh_frame:0000000000005B86                 db  0Eh
.eh_frame:0000000000005B87                 db  10h
.eh_frame:0000000000005B88                 db  83h
.eh_frame:0000000000005B89                 db    2
.eh_frame:0000000000005B8A                 db  50h ; P
.eh_frame:0000000000005B8B                 db  0Eh
.eh_frame:0000000000005B8C                 db    8
.eh_frame:0000000000005B8D                 db    0
.eh_frame:0000000000005B8E                 db    0
.eh_frame:0000000000005B8F                 db    0
.eh_frame:0000000000005B90                 db  14h
.eh_frame:0000000000005B91                 db    0
.eh_frame:0000000000005B92                 db    0
.eh_frame:0000000000005B93                 db    0
.eh_frame:0000000000005B94                 db  74h ; t
.eh_frame:0000000000005B95                 db    8
.eh_frame:0000000000005B96                 db    0
.eh_frame:0000000000005B97                 db    0
.eh_frame:0000000000005B98                 db 0C8h
.eh_frame:0000000000005B99                 db 0E5h
.eh_frame:0000000000005B9A                 db 0FFh
.eh_frame:0000000000005B9B                 db 0FFh
.eh_frame:0000000000005B9C                 db  35h ; 5
.eh_frame:0000000000005B9D                 db    0
.eh_frame:0000000000005B9E                 db    0
.eh_frame:0000000000005B9F                 db    0
.eh_frame:0000000000005BA0                 db    0
.eh_frame:0000000000005BA1                 db  4Bh ; K
.eh_frame:0000000000005BA2                 db  0Eh
.eh_frame:0000000000005BA3                 db  10h
.eh_frame:0000000000005BA4                 db    0
.eh_frame:0000000000005BA5                 db    0
.eh_frame:0000000000005BA6                 db    0
.eh_frame:0000000000005BA7                 db    0
.eh_frame:0000000000005BA8                 db  3Ch ; <
.eh_frame:0000000000005BA9                 db    0
.eh_frame:0000000000005BAA                 db    0
.eh_frame:0000000000005BAB                 db    0
.eh_frame:0000000000005BAC                 db  8Ch
.eh_frame:0000000000005BAD                 db    8
.eh_frame:0000000000005BAE                 db    0
.eh_frame:0000000000005BAF                 db    0
.eh_frame:0000000000005BB0                 db 0F0h
.eh_frame:0000000000005BB1                 db 0E5h
.eh_frame:0000000000005BB2                 db 0FFh
.eh_frame:0000000000005BB3                 db 0FFh
.eh_frame:0000000000005BB4                 db  83h
.eh_frame:0000000000005BB5                 db    0
.eh_frame:0000000000005BB6                 db    0
.eh_frame:0000000000005BB7                 db    0
.eh_frame:0000000000005BB8                 db    0
.eh_frame:0000000000005BB9                 db  42h ; B
.eh_frame:0000000000005BBA                 db  0Eh
.eh_frame:0000000000005BBB                 db  10h
.eh_frame:0000000000005BBC                 db  8Dh
.eh_frame:0000000000005BBD                 db    2
.eh_frame:0000000000005BBE                 db  42h ; B
.eh_frame:0000000000005BBF                 db  0Eh
.eh_frame:0000000000005BC0                 db  18h
.eh_frame:0000000000005BC1                 db  8Ch
.eh_frame:0000000000005BC2                 db    3
.eh_frame:0000000000005BC3                 db  44h ; D
.eh_frame:0000000000005BC4                 db  0Eh
.eh_frame:0000000000005BC5                 db  20h
.eh_frame:0000000000005BC6                 db  86h
.eh_frame:0000000000005BC7                 db    4
.eh_frame:0000000000005BC8                 db  41h ; A
.eh_frame:0000000000005BC9                 db  0Eh
.eh_frame:0000000000005BCA                 db  28h ; (
.eh_frame:0000000000005BCB                 db  83h
.eh_frame:0000000000005BCC                 db    5
.eh_frame:0000000000005BCD                 db  4Ah ; J
.eh_frame:0000000000005BCE                 db  0Eh
.eh_frame:0000000000005BCF                 db  40h ; @
.eh_frame:0000000000005BD0                 db    2
.eh_frame:0000000000005BD1                 db  64h ; d
.eh_frame:0000000000005BD2                 db  0Ah
.eh_frame:0000000000005BD3                 db  0Eh
.eh_frame:0000000000005BD4                 db  28h ; (
.eh_frame:0000000000005BD5                 db  41h ; A
.eh_frame:0000000000005BD6                 db  0Eh
.eh_frame:0000000000005BD7                 db  20h
.eh_frame:0000000000005BD8                 db  41h ; A
.eh_frame:0000000000005BD9                 db  0Eh
.eh_frame:0000000000005BDA                 db  18h
.eh_frame:0000000000005BDB                 db  42h ; B
.eh_frame:0000000000005BDC                 db  0Eh
.eh_frame:0000000000005BDD                 db  10h
.eh_frame:0000000000005BDE                 db  42h ; B
.eh_frame:0000000000005BDF                 db  0Eh
.eh_frame:0000000000005BE0                 db    8
.eh_frame:0000000000005BE1                 db  41h ; A
.eh_frame:0000000000005BE2                 db  0Bh
.eh_frame:0000000000005BE3                 db    0
.eh_frame:0000000000005BE4                 db    0
.eh_frame:0000000000005BE5                 db    0
.eh_frame:0000000000005BE6                 db    0
.eh_frame:0000000000005BE7                 db    0
.eh_frame:0000000000005BE8                 db  4Ch ; L
.eh_frame:0000000000005BE9                 db    0
.eh_frame:0000000000005BEA                 db    0
.eh_frame:0000000000005BEB                 db    0
.eh_frame:0000000000005BEC                 db 0CCh
.eh_frame:0000000000005BED                 db    8
.eh_frame:0000000000005BEE                 db    0
.eh_frame:0000000000005BEF                 db    0
.eh_frame:0000000000005BF0                 db  40h ; @
.eh_frame:0000000000005BF1                 db 0E6h
.eh_frame:0000000000005BF2                 db 0FFh
.eh_frame:0000000000005BF3                 db 0FFh
.eh_frame:0000000000005BF4                 db  7Dh ; }
.eh_frame:0000000000005BF5                 db    0
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db    0
.eh_frame:0000000000005BF9                 db  42h ; B
.eh_frame:0000000000005BFA                 db  0Eh
.eh_frame:0000000000005BFB                 db  10h
.eh_frame:0000000000005BFC                 db  8Ch
.eh_frame:0000000000005BFD                 db    2
.eh_frame:0000000000005BFE                 db  41h ; A
.eh_frame:0000000000005BFF                 db  0Eh
.eh_frame:0000000000005C00                 db  18h
.eh_frame:0000000000005C01                 db  86h
.eh_frame:0000000000005C02                 db    3
.eh_frame:0000000000005C03                 db  44h ; D
.eh_frame:0000000000005C04                 db  0Eh
.eh_frame:0000000000005C05                 db  20h
.eh_frame:0000000000005C06                 db  83h
.eh_frame:0000000000005C07                 db    4
.eh_frame:0000000000005C08                 db  69h ; i
.eh_frame:0000000000005C09                 db  0Ah
.eh_frame:0000000000005C0A                 db  0Eh
.eh_frame:0000000000005C0B                 db  18h
.eh_frame:0000000000005C0C                 db  41h ; A
.eh_frame:0000000000005C0D                 db  0Eh
.eh_frame:0000000000005C0E                 db  10h
.eh_frame:0000000000005C0F                 db  42h ; B
.eh_frame:0000000000005C10                 db  0Eh
.eh_frame:0000000000005C11                 db    8
.eh_frame:0000000000005C12                 db  45h ; E
.eh_frame:0000000000005C13                 db  0Bh
.eh_frame:0000000000005C14                 db  55h ; U
.eh_frame:0000000000005C15                 db  0Ah
.eh_frame:0000000000005C16                 db  0Eh
.eh_frame:0000000000005C17                 db  18h
.eh_frame:0000000000005C18                 db  41h ; A
.eh_frame:0000000000005C19                 db  0Eh
.eh_frame:0000000000005C1A                 db  10h
.eh_frame:0000000000005C1B                 db  42h ; B
.eh_frame:0000000000005C1C                 db  0Eh
.eh_frame:0000000000005C1D                 db    8
.eh_frame:0000000000005C1E                 db  48h ; H
.eh_frame:0000000000005C1F                 db  0Bh
.eh_frame:0000000000005C20                 db  41h ; A
.eh_frame:0000000000005C21                 db  0Ah
.eh_frame:0000000000005C22                 db  0Eh
.eh_frame:0000000000005C23                 db  18h
.eh_frame:0000000000005C24                 db  46h ; F
.eh_frame:0000000000005C25                 db  0Eh
.eh_frame:0000000000005C26                 db  10h
.eh_frame:0000000000005C27                 db  42h ; B
.eh_frame:0000000000005C28                 db  0Eh
.eh_frame:0000000000005C29                 db    8
.eh_frame:0000000000005C2A                 db  47h ; G
.eh_frame:0000000000005C2B                 db  0Bh
.eh_frame:0000000000005C2C                 db  49h ; I
.eh_frame:0000000000005C2D                 db  0Eh
.eh_frame:0000000000005C2E                 db  18h
.eh_frame:0000000000005C2F                 db  41h ; A
.eh_frame:0000000000005C30                 db  0Eh
.eh_frame:0000000000005C31                 db  10h
.eh_frame:0000000000005C32                 db  42h ; B
.eh_frame:0000000000005C33                 db  0Eh
.eh_frame:0000000000005C34                 db    8
.eh_frame:0000000000005C35                 db    0
.eh_frame:0000000000005C36                 db    0
.eh_frame:0000000000005C37                 db    0
.eh_frame:0000000000005C38                 db  1Ch
.eh_frame:0000000000005C39                 db    0
.eh_frame:0000000000005C3A                 db    0
.eh_frame:0000000000005C3B                 db    0
.eh_frame:0000000000005C3C                 db  1Ch
.eh_frame:0000000000005C3D                 db    9
.eh_frame:0000000000005C3E                 db    0
.eh_frame:0000000000005C3F                 db    0
.eh_frame:0000000000005C40                 db  70h ; p
.eh_frame:0000000000005C41                 db 0E6h
.eh_frame:0000000000005C42                 db 0FFh
.eh_frame:0000000000005C43                 db 0FFh
.eh_frame:0000000000005C44                 db  60h ; `
.eh_frame:0000000000005C45                 db    0
.eh_frame:0000000000005C46                 db    0
.eh_frame:0000000000005C47                 db    0
.eh_frame:0000000000005C48                 db    0
.eh_frame:0000000000005C49                 db  44h ; D
.eh_frame:0000000000005C4A                 db  0Eh
.eh_frame:0000000000005C4B                 db  10h
.eh_frame:0000000000005C4C                 db  75h ; u
.eh_frame:0000000000005C4D                 db  0Ah
.eh_frame:0000000000005C4E                 db  0Eh
.eh_frame:0000000000005C4F                 db    8
.eh_frame:0000000000005C50                 db  47h ; G
.eh_frame:0000000000005C51                 db  0Bh
.eh_frame:0000000000005C52                 db  5Fh ; _
.eh_frame:0000000000005C53                 db  0Eh
.eh_frame:0000000000005C54                 db    8
.eh_frame:0000000000005C55                 db    0
.eh_frame:0000000000005C56                 db    0
.eh_frame:0000000000005C57                 db    0
.eh_frame:0000000000005C58                 db  1Ch
.eh_frame:0000000000005C59                 db    0
.eh_frame:0000000000005C5A                 db    0
.eh_frame:0000000000005C5B                 db    0
.eh_frame:0000000000005C5C                 db  3Ch ; <
.eh_frame:0000000000005C5D                 db    9
.eh_frame:0000000000005C5E                 db    0
.eh_frame:0000000000005C5F                 db    0
.eh_frame:0000000000005C60                 db 0B0h
.eh_frame:0000000000005C61                 db 0E6h
.eh_frame:0000000000005C62                 db 0FFh
.eh_frame:0000000000005C63                 db 0FFh
.eh_frame:0000000000005C64                 db  3Ch ; <
.eh_frame:0000000000005C65                 db    0
.eh_frame:0000000000005C66                 db    0
.eh_frame:0000000000005C67                 db    0
.eh_frame:0000000000005C68                 db    0
.eh_frame:0000000000005C69                 db  44h ; D
.eh_frame:0000000000005C6A                 db  0Eh
.eh_frame:0000000000005C6B                 db  10h
.eh_frame:0000000000005C6C                 db  61h ; a
.eh_frame:0000000000005C6D                 db  0Ah
.eh_frame:0000000000005C6E                 db  0Eh
.eh_frame:0000000000005C6F                 db    8
.eh_frame:0000000000005C70                 db  4Bh ; K
.eh_frame:0000000000005C71                 db  0Bh
.eh_frame:0000000000005C72                 db  4Bh ; K
.eh_frame:0000000000005C73                 db  0Eh
.eh_frame:0000000000005C74                 db    8
.eh_frame:0000000000005C75                 db    0
.eh_frame:0000000000005C76                 db    0
.eh_frame:0000000000005C77                 db    0
.eh_frame:0000000000005C78                 db  34h ; 4
.eh_frame:0000000000005C79                 db    0
.eh_frame:0000000000005C7A                 db    0
.eh_frame:0000000000005C7B                 db    0
.eh_frame:0000000000005C7C                 db  5Ch ; \
.eh_frame:0000000000005C7D                 db    9
.eh_frame:0000000000005C7E                 db    0
.eh_frame:0000000000005C7F                 db    0
.eh_frame:0000000000005C80                 db 0D0h
.eh_frame:0000000000005C81                 db 0E6h
.eh_frame:0000000000005C82                 db 0FFh
.eh_frame:0000000000005C83                 db 0FFh
.eh_frame:0000000000005C84                 db  7Bh ; {
.eh_frame:0000000000005C85                 db    0
.eh_frame:0000000000005C86                 db    0
.eh_frame:0000000000005C87                 db    0
.eh_frame:0000000000005C88                 db    0
.eh_frame:0000000000005C89                 db  42h ; B
.eh_frame:0000000000005C8A                 db  0Eh
.eh_frame:0000000000005C8B                 db  10h
.eh_frame:0000000000005C8C                 db  8Ch
.eh_frame:0000000000005C8D                 db    2
.eh_frame:0000000000005C8E                 db  41h ; A
.eh_frame:0000000000005C8F                 db  0Eh
.eh_frame:0000000000005C90                 db  18h
.eh_frame:0000000000005C91                 db  86h
.eh_frame:0000000000005C92                 db    3
.eh_frame:0000000000005C93                 db  41h ; A
.eh_frame:0000000000005C94                 db  0Eh
.eh_frame:0000000000005C95                 db  20h
.eh_frame:0000000000005C96                 db  83h
.eh_frame:0000000000005C97                 db    4
.eh_frame:0000000000005C98                 db  7Dh ; }
.eh_frame:0000000000005C99                 db  0Ah
.eh_frame:0000000000005C9A                 db  0Eh
.eh_frame:0000000000005C9B                 db  18h
.eh_frame:0000000000005C9C                 db  41h ; A
.eh_frame:0000000000005C9D                 db  0Eh
.eh_frame:0000000000005C9E                 db  10h
.eh_frame:0000000000005C9F                 db  42h ; B
.eh_frame:0000000000005CA0                 db  0Eh
.eh_frame:0000000000005CA1                 db    8
.eh_frame:0000000000005CA2                 db  44h ; D
.eh_frame:0000000000005CA3                 db  0Bh
.eh_frame:0000000000005CA4                 db  60h ; `
.eh_frame:0000000000005CA5                 db  0Ah
.eh_frame:0000000000005CA6                 db  0Eh
.eh_frame:0000000000005CA7                 db  18h
.eh_frame:0000000000005CA8                 db  41h ; A
.eh_frame:0000000000005CA9                 db  0Eh
.eh_frame:0000000000005CAA                 db  10h
.eh_frame:0000000000005CAB                 db  42h ; B
.eh_frame:0000000000005CAC                 db  0Eh
.eh_frame:0000000000005CAD                 db    8
.eh_frame:0000000000005CAE                 db  45h ; E
.eh_frame:0000000000005CAF                 db  0Bh
.eh_frame:0000000000005CB0                 db  1Ch
.eh_frame:0000000000005CB1                 db    0
.eh_frame:0000000000005CB2                 db    0
.eh_frame:0000000000005CB3                 db    0
.eh_frame:0000000000005CB4                 db  94h
.eh_frame:0000000000005CB5                 db    9
.eh_frame:0000000000005CB6                 db    0
.eh_frame:0000000000005CB7                 db    0
.eh_frame:0000000000005CB8                 db  18h
.eh_frame:0000000000005CB9                 db 0E7h
.eh_frame:0000000000005CBA                 db 0FFh
.eh_frame:0000000000005CBB                 db 0FFh
.eh_frame:0000000000005CBC                 db  40h ; @
.eh_frame:0000000000005CBD                 db    0
.eh_frame:0000000000005CBE                 db    0
.eh_frame:0000000000005CBF                 db    0
.eh_frame:0000000000005CC0                 db    0
.eh_frame:0000000000005CC1                 db  44h ; D
.eh_frame:0000000000005CC2                 db  0Eh
.eh_frame:0000000000005CC3                 db  10h
.eh_frame:0000000000005CC4                 db  83h
.eh_frame:0000000000005CC5                 db    2
.eh_frame:0000000000005CC6                 db  5Ah ; Z
.eh_frame:0000000000005CC7                 db  0Ah
.eh_frame:0000000000005CC8                 db  0Eh
.eh_frame:0000000000005CC9                 db    8
.eh_frame:0000000000005CCA                 db  4Ah ; J
.eh_frame:0000000000005CCB                 db  0Bh
.eh_frame:0000000000005CCC                 db  53h ; S
.eh_frame:0000000000005CCD                 db  0Eh
.eh_frame:0000000000005CCE                 db    8
.eh_frame:0000000000005CCF                 db    0
.eh_frame:0000000000005CD0                 db  2Ch ; ,
.eh_frame:0000000000005CD1                 db    0
.eh_frame:0000000000005CD2                 db    0
.eh_frame:0000000000005CD3                 db    0
.eh_frame:0000000000005CD4                 db 0B4h
.eh_frame:0000000000005CD5                 db    9
.eh_frame:0000000000005CD6                 db    0
.eh_frame:0000000000005CD7                 db    0
.eh_frame:0000000000005CD8                 db  38h ; 8
.eh_frame:0000000000005CD9                 db 0E7h
.eh_frame:0000000000005CDA                 db 0FFh
.eh_frame:0000000000005CDB                 db 0FFh
.eh_frame:0000000000005CDC                 db  57h ; W
.eh_frame:0000000000005CDD                 db    0
.eh_frame:0000000000005CDE                 db    0
.eh_frame:0000000000005CDF                 db    0
.eh_frame:0000000000005CE0                 db    0
.eh_frame:0000000000005CE1                 db  63h ; c
.eh_frame:0000000000005CE2                 db  0Eh
.eh_frame:0000000000005CE3                 db  10h
.eh_frame:0000000000005CE4                 db  8Ch
.eh_frame:0000000000005CE5                 db    2
.eh_frame:0000000000005CE6                 db  41h ; A
.eh_frame:0000000000005CE7                 db  0Eh
.eh_frame:0000000000005CE8                 db  18h
.eh_frame:0000000000005CE9                 db  86h
.eh_frame:0000000000005CEA                 db    3
.eh_frame:0000000000005CEB                 db  44h ; D
.eh_frame:0000000000005CEC                 db  0Eh
.eh_frame:0000000000005CED                 db  20h
.eh_frame:0000000000005CEE                 db  83h
.eh_frame:0000000000005CEF                 db    4
.eh_frame:0000000000005CF0                 db  6Bh ; k
.eh_frame:0000000000005CF1                 db  0Eh
.eh_frame:0000000000005CF2                 db  18h
.eh_frame:0000000000005CF3                 db  41h ; A
.eh_frame:0000000000005CF4                 db  0Eh
.eh_frame:0000000000005CF5                 db  10h
.eh_frame:0000000000005CF6                 db  42h ; B
.eh_frame:0000000000005CF7                 db  0Eh
.eh_frame:0000000000005CF8                 db    8
.eh_frame:0000000000005CF9                 db    0
.eh_frame:0000000000005CFA                 db    0
.eh_frame:0000000000005CFB                 db    0
.eh_frame:0000000000005CFC                 db    0
.eh_frame:0000000000005CFD                 db    0
.eh_frame:0000000000005CFE                 db    0
.eh_frame:0000000000005CFF                 db    0
.eh_frame:0000000000005D00                 db  44h ; D
.eh_frame:0000000000005D01                 db    0
.eh_frame:0000000000005D02                 db    0
.eh_frame:0000000000005D03                 db    0
.eh_frame:0000000000005D04                 db 0E4h
.eh_frame:0000000000005D05                 db    9
.eh_frame:0000000000005D06                 db    0
.eh_frame:0000000000005D07                 db    0
.eh_frame:0000000000005D08                 db  68h ; h
.eh_frame:0000000000005D09                 db 0E7h
.eh_frame:0000000000005D0A                 db 0FFh
.eh_frame:0000000000005D0B                 db 0FFh
.eh_frame:0000000000005D0C                 db  65h ; e
.eh_frame:0000000000005D0D                 db    0
.eh_frame:0000000000005D0E                 db    0
.eh_frame:0000000000005D0F                 db    0
.eh_frame:0000000000005D10                 db    0
.eh_frame:0000000000005D11                 db  42h ; B
.eh_frame:0000000000005D12                 db  0Eh
.eh_frame:0000000000005D13                 db  10h
.eh_frame:0000000000005D14                 db  8Fh
.eh_frame:0000000000005D15                 db    2
.eh_frame:0000000000005D16                 db  42h ; B
.eh_frame:0000000000005D17                 db  0Eh
.eh_frame:0000000000005D18                 db  18h
.eh_frame:0000000000005D19                 db  8Eh
.eh_frame:0000000000005D1A                 db    3
.eh_frame:0000000000005D1B                 db  45h ; E
.eh_frame:0000000000005D1C                 db  0Eh
.eh_frame:0000000000005D1D                 db  20h
.eh_frame:0000000000005D1E                 db  8Dh
.eh_frame:0000000000005D1F                 db    4
.eh_frame:0000000000005D20                 db  42h ; B
.eh_frame:0000000000005D21                 db  0Eh
.eh_frame:0000000000005D22                 db  28h ; (
.eh_frame:0000000000005D23                 db  8Ch
.eh_frame:0000000000005D24                 db    5
.eh_frame:0000000000005D25                 db  48h ; H
.eh_frame:0000000000005D26                 db  0Eh
.eh_frame:0000000000005D27                 db  30h ; 0
.eh_frame:0000000000005D28                 db  86h
.eh_frame:0000000000005D29                 db    6
.eh_frame:0000000000005D2A                 db  48h ; H
.eh_frame:0000000000005D2B                 db  0Eh
.eh_frame:0000000000005D2C                 db  38h ; 8
.eh_frame:0000000000005D2D                 db  83h
.eh_frame:0000000000005D2E                 db    7
.eh_frame:0000000000005D2F                 db  4Dh ; M
.eh_frame:0000000000005D30                 db  0Eh
.eh_frame:0000000000005D31                 db  40h ; @
.eh_frame:0000000000005D32                 db  72h ; r
.eh_frame:0000000000005D33                 db  0Eh
.eh_frame:0000000000005D34                 db  38h ; 8
.eh_frame:0000000000005D35                 db  41h ; A
.eh_frame:0000000000005D36                 db  0Eh
.eh_frame:0000000000005D37                 db  30h ; 0
.eh_frame:0000000000005D38                 db  41h ; A
.eh_frame:0000000000005D39                 db  0Eh
.eh_frame:0000000000005D3A                 db  28h ; (
.eh_frame:0000000000005D3B                 db  42h ; B
.eh_frame:0000000000005D3C                 db  0Eh
.eh_frame:0000000000005D3D                 db  20h
.eh_frame:0000000000005D3E                 db  42h ; B
.eh_frame:0000000000005D3F                 db  0Eh
.eh_frame:0000000000005D40                 db  18h
.eh_frame:0000000000005D41                 db  42h ; B
.eh_frame:0000000000005D42                 db  0Eh
.eh_frame:0000000000005D43                 db  10h
.eh_frame:0000000000005D44                 db  42h ; B
.eh_frame:0000000000005D45                 db  0Eh
.eh_frame:0000000000005D46                 db    8
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db  14h
.eh_frame:0000000000005D49                 db    0
.eh_frame:0000000000005D4A                 db    0
.eh_frame:0000000000005D4B                 db    0
.eh_frame:0000000000005D4C                 db  2Ch ; ,
.eh_frame:0000000000005D4D                 db  0Ah
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db  90h
.eh_frame:0000000000005D51                 db 0E7h
.eh_frame:0000000000005D52                 db 0FFh
.eh_frame:0000000000005D53                 db 0FFh
.eh_frame:0000000000005D54                 db    2
.eh_frame:0000000000005D55                 db    0
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db    0
.eh_frame:0000000000005D59                 db    0
.eh_frame:0000000000005D5A                 db    0
.eh_frame:0000000000005D5B                 db    0
.eh_frame:0000000000005D5C                 db    0
.eh_frame:0000000000005D5D                 db    0
.eh_frame:0000000000005D5E                 db    0
.eh_frame:0000000000005D5F                 db    0
.eh_frame:0000000000005D60                 db  10h
.eh_frame:0000000000005D61                 db    0
.eh_frame:0000000000005D62                 db    0
.eh_frame:0000000000005D63                 db    0
.eh_frame:0000000000005D64                 db  44h ; D
.eh_frame:0000000000005D65                 db  0Ah
.eh_frame:0000000000005D66                 db    0
.eh_frame:0000000000005D67                 db    0
.eh_frame:0000000000005D68                 db  88h
.eh_frame:0000000000005D69                 db 0E7h
.eh_frame:0000000000005D6A                 db 0FFh
.eh_frame:0000000000005D6B                 db 0FFh
.eh_frame:0000000000005D6C                 db  0Eh
.eh_frame:0000000000005D6D                 db    0
.eh_frame:0000000000005D6E                 db    0
.eh_frame:0000000000005D6F                 db    0
.eh_frame:0000000000005D70                 db    0
.eh_frame:0000000000005D71                 db    0
.eh_frame:0000000000005D72                 db    0
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74 __FRAME_END__   db    0
.eh_frame:0000000000005D75                 db    0
.eh_frame:0000000000005D76                 db    0
.eh_frame:0000000000005D77                 db    0
.eh_frame:0000000000005D77 _eh_frame       ends
.eh_frame:0000000000005D77
.init_array:0000000000206B70 ; ELF Initialization Function Table
.init_array:0000000000206B70 ; ===========================================================================
.init_array:0000000000206B70
.init_array:0000000000206B70 ; Segment type: Pure data
.init_array:0000000000206B70 ; Segment permissions: Read/Write
.init_array:0000000000206B70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B70                 assume cs:_init_array
.init_array:0000000000206B70                 ;org 206B70h
.init_array:0000000000206B70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B70
.fini_array:0000000000206B78 ; ELF Termination Function Table
.fini_array:0000000000206B78 ; ===========================================================================
.fini_array:0000000000206B78
.fini_array:0000000000206B78 ; Segment type: Pure data
.fini_array:0000000000206B78 ; Segment permissions: Read/Write
.fini_array:0000000000206B78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B78                 assume cs:_fini_array
.fini_array:0000000000206B78                 ;org 206B78h
.fini_array:0000000000206B78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B78
.data.rel.ro:0000000000206B80 ; ===========================================================================
.data.rel.ro:0000000000206B80
.data.rel.ro:0000000000206B80 ; Segment type: Pure data
.data.rel.ro:0000000000206B80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206B80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206B80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206B80                 ;org 206B80h
.data.rel.ro:0000000000206B80 ; struct option longopts
.data.rel.ro:0000000000206B80 longopts        dq offset aSilent       ; name
.data.rel.ro:0000000000206B80                                         ; DATA XREF: main+C↑o
.data.rel.ro:0000000000206B80                 dd 0                    ; has_arg ; "silent"
.data.rel.ro:0000000000206B80                 db 4 dup(0)
.data.rel.ro:0000000000206B80                 dq 0                    ; flag
.data.rel.ro:0000000000206B80                 dd 73h                  ; val
.data.rel.ro:0000000000206B80                 db 4 dup(0)
.data.rel.ro:0000000000206BA0                 dq offset aQuiet        ; "quiet"
.data.rel.ro:0000000000206BA8                 db    0
.data.rel.ro:0000000000206BA9                 db    0
.data.rel.ro:0000000000206BAA                 db    0
.data.rel.ro:0000000000206BAB                 db    0
.data.rel.ro:0000000000206BAC                 db    0
.data.rel.ro:0000000000206BAD                 db    0
.data.rel.ro:0000000000206BAE                 db    0
.data.rel.ro:0000000000206BAF                 db    0
.data.rel.ro:0000000000206BB0                 db    0
.data.rel.ro:0000000000206BB1                 db    0
.data.rel.ro:0000000000206BB2                 db    0
.data.rel.ro:0000000000206BB3                 db    0
.data.rel.ro:0000000000206BB4                 db    0
.data.rel.ro:0000000000206BB5                 db    0
.data.rel.ro:0000000000206BB6                 db    0
.data.rel.ro:0000000000206BB7                 db    0
.data.rel.ro:0000000000206BB8                 db  73h ; s
.data.rel.ro:0000000000206BB9                 db    0
.data.rel.ro:0000000000206BBA                 db    0
.data.rel.ro:0000000000206BBB                 db    0
.data.rel.ro:0000000000206BBC                 db    0
.data.rel.ro:0000000000206BBD                 db    0
.data.rel.ro:0000000000206BBE                 db    0
.data.rel.ro:0000000000206BBF                 db    0
.data.rel.ro:0000000000206BC0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  7Eh ; ~
.data.rel.ro:0000000000206BD9                 db 0FFh
.data.rel.ro:0000000000206BDA                 db 0FFh
.data.rel.ro:0000000000206BDB                 db 0FFh
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  7Dh ; }
.data.rel.ro:0000000000206BF9                 db 0FFh
.data.rel.ro:0000000000206BFA                 db 0FFh
.data.rel.ro:0000000000206BFB                 db 0FFh
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 1220h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4500h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206B70h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206B78h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 800h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 28Ch>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3F0h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E30h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B60h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2D0h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0B00h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0A8Ch> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 14h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_1240↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_1240+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000206EB8 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:0000000000206EC0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EC8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206ED0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206ED0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206ED8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206EE0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206EE0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EE8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EF0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EF0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EF8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206F00 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206F08 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F10 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F18 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F20 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F28 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F28                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F30 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F38 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F40 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F48 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F50 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F58 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F60 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F68 ttyname_ptr     dq offset ttyname       ; DATA XREF: _ttyname↑r
.got:0000000000206F70 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F78 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F80 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F88 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F90 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FD8                                         ; DATA XREF: start+24↑r
.got:0000000000206FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF0 _got            ends
.got:0000000000206FF0
LOAD:0000000000206FF8 ; ===========================================================================
LOAD:0000000000206FF8
LOAD:0000000000206FF8 ; Segment type: Pure data
LOAD:0000000000206FF8 ; Segment permissions: Read/Write
LOAD:0000000000206FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FF8                 assume cs:LOAD
LOAD:0000000000206FF8                 ;org 206FF8h
LOAD:0000000000206FF8                 align 20h
LOAD:0000000000206FF8 LOAD            ends
LOAD:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+AF↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: main+4F↑w
.data:0000000000207018                                         ; close_stdout:loc_1B92↑r ...
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_300D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000770↑o
.bss:0000000000207080                                         ; LOAD:00000000000007B8↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000758↑o
.bss:0000000000207088                                         ; main:loc_15A8↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007E8↑o
.bss:0000000000207090                                         ; main:loc_15EC↑r
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:0000000000000788↑o
.bss:0000000000207098                                         ; LOAD:00000000000007A0↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070A0 ; FILE *stderr
.bss:00000000002070A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007D0↑o
.bss:00000000002070A0                                         ; usage+3D↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'stderr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070A8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070A9 silent          db ?                    ; DATA XREF: main+5E↑w
.bss:00000000002070A9                                         ; main:loc_15E0↑w ...
.bss:00000000002070AA                 align 10h
.bss:00000000002070B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070B0                                         ; close_stdout+1B↑r
.bss:00000000002070B1                 align 8
.bss:00000000002070B8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070B8                                         ; close_stdout+56↑r
.bss:00000000002070C0                 public program_name
.bss:00000000002070C0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070C0                                         ; set_program_name:loc_1C2D↑w
.bss:00000000002070C8                 align 20h
.bss:00000000002070E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002070E0                                         ; quotearg_free+46↑o ...
.bss:00000000002070E1                 db    ? ;
.bss:00000000002070E2                 db    ? ;
.bss:00000000002070E3                 db    ? ;
.bss:00000000002070E4                 db    ? ;
.bss:00000000002070E5                 db    ? ;
.bss:00000000002070E6                 db    ? ;
.bss:00000000002070E7                 db    ? ;
.bss:00000000002070E8                 db    ? ;
.bss:00000000002070E9                 db    ? ;
.bss:00000000002070EA                 db    ? ;
.bss:00000000002070EB                 db    ? ;
.bss:00000000002070EC                 db    ? ;
.bss:00000000002070ED                 db    ? ;
.bss:00000000002070EE                 db    ? ;
.bss:00000000002070EF                 db    ? ;
.bss:00000000002070F0                 db    ? ;
.bss:00000000002070F1                 db    ? ;
.bss:00000000002070F2                 db    ? ;
.bss:00000000002070F3                 db    ? ;
.bss:00000000002070F4                 db    ? ;
.bss:00000000002070F5                 db    ? ;
.bss:00000000002070F6                 db    ? ;
.bss:00000000002070F7                 db    ? ;
.bss:00000000002070F8                 db    ? ;
.bss:00000000002070F9                 db    ? ;
.bss:00000000002070FA                 db    ? ;
.bss:00000000002070FB                 db    ? ;
.bss:00000000002070FC                 db    ? ;
.bss:00000000002070FD                 db    ? ;
.bss:00000000002070FE                 db    ? ;
.bss:00000000002070FF                 db    ? ;
.bss:0000000000207100                 db    ? ;
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002071E0                                         ; get_quoting_style↑o ...
.bss:00000000002071F0 xmmword_2071F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002071F0                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207200 xmmword_207200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207200                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207210 qword_207210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207210 _bss            ends
.bss:0000000000207210
.prgend:0000000000207218 ; ===========================================================================
.prgend:0000000000207218
.prgend:0000000000207218 ; Segment type: Zero-length
.prgend:0000000000207218 _prgend         segment byte public '' use64
.prgend:0000000000207218 _end            label byte
.prgend:0000000000207218 _prgend         ends
.prgend:0000000000207218
extern:0000000000207220 ; ===========================================================================
extern:0000000000207220
extern:0000000000207220 ; Segment type: Externs
extern:0000000000207220 ; extern
extern:0000000000207220 ; void free(void *ptr)
extern:0000000000207220                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207220                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207228 ; void __noreturn abort(void)
extern:0000000000207228                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207228                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207230 ; int *_errno_location(void)
extern:0000000000207230                 extrn __errno_location:near
extern:0000000000207230                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207230                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207238 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207238                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207238                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207240 ; void __noreturn exit(int status)
extern:0000000000207240                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207240                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207248 ; size_t _fpending(FILE *fp)
extern:0000000000207248                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207248                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207250 ; int puts(const char *s)
extern:0000000000207250                 extrn puts:near         ; CODE XREF: _puts↑j
extern:0000000000207250                                         ; DATA XREF: .got:puts_ptr↑o
extern:0000000000207258 ; int isatty(int fd)
extern:0000000000207258                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:0000000000207258                                         ; DATA XREF: .got:isatty_ptr↑o
extern:0000000000207260 ; char *textdomain(const char *domainname)
extern:0000000000207260                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207260                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207268 ; int fclose(FILE *stream)
extern:0000000000207268                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207268                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207270 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207270                 extrn bindtextdomain:near
extern:0000000000207270                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207270                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207278 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207278                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207278                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207280 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207280                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207280                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207280                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207288 ; size_t strlen(const char *s)
extern:0000000000207288                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207288                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000207290                 extrn __stack_chk_fail:near
extern:0000000000207290                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000207290                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000207298 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000207298                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000207298                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072A0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072A0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072A0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072A8 ; char *strrchr(const char *s, int c)
extern:00000000002072A8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072A8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072B0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072B0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072B0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072B8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072B8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072B8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072C0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072C0                 extrn __libc_start_main:near
extern:00000000002072C0                                         ; CODE XREF: start+24↑p
extern:00000000002072C0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072C8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072C8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072C8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072D0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072D0                 extrn fputs_unlocked:near
extern:00000000002072D0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072D0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072D8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072D8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072D8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072E0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072E0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072E0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002072E8 ; int fileno(FILE *stream)
extern:00000000002072E8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002072E8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002072F0 ; void *malloc(size_t size)
extern:00000000002072F0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002072F0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002072F8 ; int fflush(FILE *stream)
extern:00000000002072F8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002072F8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207300 ; char *nl_langinfo(nl_item item)
extern:0000000000207300                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207300                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207308 ; int _freading(FILE *fp)
extern:0000000000207308                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207308                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207310 ; char *ttyname(int fd)
extern:0000000000207310                 extrn ttyname:near      ; CODE XREF: _ttyname↑j
extern:0000000000207310                                         ; DATA XREF: .got:ttyname_ptr↑o
extern:0000000000207318 ; void *realloc(void *ptr, size_t size)
extern:0000000000207318                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207318                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207320 ; char *setlocale(int category, const char *locale)
extern:0000000000207320                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207320                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207328                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207328                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207330 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207330                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207330                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207338 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207338                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207338                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207340 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207340                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207340                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207348 ; void __noreturn exit(int status)
extern:0000000000207348                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207348                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207350 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207350                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207350                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207358                 extrn __fprintf_chk:near
extern:0000000000207358                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207358                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207360 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207360                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207360                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207368 ; int iswprint(wint_t wc)
extern:0000000000207368                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207368                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207370 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207370                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207370                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207370                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207378 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207378                 extrn __ctype_b_loc:near
extern:0000000000207378                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207378                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207380                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207380                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000207388                 extrn __gmon_start__:near ; weak
extern:0000000000207388                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000207388                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000207390                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000207390                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000207390
extern:0000000000207390
extern:0000000000207390                 end start
