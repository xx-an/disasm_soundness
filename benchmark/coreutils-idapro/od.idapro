LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : CEF9C22B709621330C1BABF81A953EE10FB6F953BCB9E12457BE90731938007B
LOAD:0000000000000000 ; Input MD5    : D76B1CB4964C339B36BBB9EF5FC35CD3
LOAD:0000000000000000 ; Input CRC32  : AF71219C
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/od
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'od.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dtoastr.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'ftoastr.c'
LOAD:0000000000000000 ; Source File : 'ldtoastr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xprintf.c'
LOAD:0000000000000000 ; Source File : 'xstrtol-error.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vfprintf.c'
LOAD:0000000000000000 ; Source File : 'vprintf.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fseterr.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 4BBF8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0EE18h               ; Size in file image
LOAD:00000000000000D8                 dq 0EE18h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0F9D0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20F9D0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 6D0h                 ; Size in file image
LOAD:0000000000000110                 dq 9A8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0FBF8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20FBF8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0D4DCh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0D4DCh               ; Physical address
LOAD:00000000000001B0                 dq 3A4h                 ; Size in file image
LOAD:00000000000001B8                 dq 3A4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0F9D0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20F9D0h              ; Physical address
LOAD:0000000000000220                 dq 630h                 ; Size in file image
LOAD:0000000000000228                 dq 630h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 1Ch, 0F8h, 3Dh, 0B5h, 0D2h, 15h, 3Eh, 18h, 0FFh, 67h ; Desc
LOAD:0000000000000284                 db 1Dh, 9Dh, 30h, 89h, 46h, 5Ch, 0A4h, 5, 91h, 9
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 40h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 40h, 41h, 47h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aSnprintfChk - offset byte_9B8, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_9B8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_9B8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_9B8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_9B8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_9B8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_9B8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aPuts - offset byte_9B8, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFerror - offset byte_9B8, 12h, 0, 0, \ ; "ferror"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aStrtod - offset byte_9B8, 12h, 0, 0, \ ; "strtod"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aLocaleconv - offset byte_9B8, 12h, 0, 0, \ ; "localeconv"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFreadUnlocked - offset byte_9B8, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9B8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aFclose - offset byte_9B8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aBindtextdomain - offset byte_9B8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aDcgettext - offset byte_9B8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9B8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrlen - offset byte_9B8, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStackChkFail - offset byte_9B8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aGetoptLong - offset byte_9B8, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aMbrtowc - offset byte_9B8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrchr - offset byte_9B8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aOverflow - offset byte_9B8, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrrchr - offset byte_9B8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aLseek - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000550                            0>
LOAD:0000000000000568                 Elf64_Sym <offset aAssertFail - offset byte_9B8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrtoulInterna - offset byte_9B8, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aStrtof - offset byte_9B8, 12h, 0, 0, \ ; "strtof"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMemset - offset byte_9B8, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFgetc - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "fgetc"
LOAD:00000000000005C8                            0>
LOAD:00000000000005E0                 Elf64_Sym <offset aLibcStartMain - offset byte_9B8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemcmp - offset byte_9B8, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFputsUnlocked - offset byte_9B8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aCalloc - offset byte_9B8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aGmonStart - offset byte_9B8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMemcpy - offset byte_9B8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFileno - offset byte_9B8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMalloc - offset byte_9B8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFflush - offset byte_9B8, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aNlLanginfo - offset byte_9B8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFxstat - offset byte_9B8, 12h, 0, 0, \ ; "__fxstat"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFreading - offset byte_9B8, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFwriteUnlocked - offset byte_9B8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aRealloc - offset byte_9B8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aSetlocale - offset byte_9B8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aPrintfChk - offset byte_9B8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aSetvbuf - offset byte_9B8, 12h, 0, 0, \ ; "setvbuf"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aStrtold - offset byte_9B8, 12h, 0, 0, \ ; "strtold"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFerror+1 - offset byte_9B8, 12h, 0, 0, \ ; "error"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFseeko - offset byte_9B8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFopen - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000007C0                            0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFreadUnlockedC - offset byte_9B8, 12h, 0, 0, \ ; "__fread_unlocked_chk"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCxaAtexit - offset byte_9B8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aExit+1 - offset byte_9B8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aFwrite - offset byte_9B8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aFprintfChk - offset byte_9B8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aItmRegistertmc - offset byte_9B8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aMbsinit - offset byte_9B8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aIswprint - offset byte_9B8, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aCxaFinalize - offset byte_9B8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aCtypeBLoc - offset byte_9B8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aSprintfChk - offset byte_9B8, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aStdout - offset byte_9B8, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000008E0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8                 Elf64_Sym <offset aProgname - offset byte_9B8, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000008F8                            offset __bss_start, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aStdin - offset byte_9B8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000910                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aProgramInvocat - offset byte_9B8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000928                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aPrognameFull - offset byte_9B8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000940                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000958                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9B8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000958                            offset __bss_start, 8>
LOAD:0000000000000970                 Elf64_Sym <offset aStderr - offset byte_9B8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000970                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000988                 Elf64_Sym <offset aOptind - offset byte_9B8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000988                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009A0                 Elf64_Sym <offset aOptarg - offset byte_9B8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000009A0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000009B8 ; ELF String Table
LOAD:00000000000009B8 byte_9B8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009B8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000009B9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000DA8↓o
LOAD:00000000000009C3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000009CA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009D7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000009E1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009E9 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:00000000000009EF aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000009F7 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:00000000000009FE aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A06 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A10 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000A15 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000A26 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000A2F aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A37 aStrtold        db 'strtold',0          ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A3F aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000A45 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000A4B aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000A4B                                         ; LOAD:0000000000000808↑o
LOAD:0000000000000A51 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A51                                         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000A69 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A77 aStrtod         db 'strtod',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A7E aStrtof         db 'strtof',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000A85 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A85                                         ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000A9C aFreadUnlockedC db '__fread_unlocked_chk',0
LOAD:0000000000000A9C                                         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000AB1 aFgetc          db 'fgetc',0            ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000AB7 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000ABE aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000AC5 aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000AD4 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000ADB aLocaleconv     db 'localeconv',0       ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000AE6 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000AF7 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000AFE aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B0C aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B13 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B19 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000B20 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000B27 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000B2E aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B36 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000B42 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000B50 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000B57 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B62 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000B69 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B78 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000B84 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000B8D aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B94 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000B9B aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000BA6 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000BAD aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000BAD                                         ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000BCB aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000BDA aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000BE2 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000BF0 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000BF0                                         ; LOAD:0000000000000430↑o
LOAD:0000000000000BFF aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000C0F aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C0F                                         ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000C21 aFerror         db 'ferror',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000C21                                         ; LOAD:0000000000000790↑o
LOAD:0000000000000C28 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C2F aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000C3A aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000C3A                                         ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000C4D aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C5C aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000C61 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000C6C aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C7C aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000C89 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000DB8↓o
LOAD:0000000000000C93 aGlibc27        db 'GLIBC_2.7',0        ; DATA XREF: LOAD:0000000000000DC8↓o
LOAD:0000000000000C9D aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000DD8↓o
LOAD:0000000000000CA8 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000DE8↓o
LOAD:0000000000000CB2 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000DF8↓o
LOAD:0000000000000CBE aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000E08↓o
LOAD:0000000000000CCA aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000CCA                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000CE6 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000CF5 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000CF5                                         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000D0F                 align 10h
LOAD:0000000000000D10 ; ELF GNU Symbol Version Table
LOAD:0000000000000D10                 dw 0
LOAD:0000000000000D12                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D14                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D16                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D1A                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D1C                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D1E                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D20                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D22                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000D24                 dw 2                    ; ferror@@GLIBC_2.2.5
LOAD:0000000000000D26                 dw 2                    ; strtod@@GLIBC_2.2.5
LOAD:0000000000000D28                 dw 2                    ; localeconv@@GLIBC_2.2.5
LOAD:0000000000000D2A                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D2C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D2E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D30                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D32                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D34                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D36                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D38                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D3A                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D3C                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D3E                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000D42                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000D48                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000D4A                 dw 2                    ; strtof@@GLIBC_2.2.5
LOAD:0000000000000D4C                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D4E                 dw 2                    ; fgetc@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D52                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D5A                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D5C                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D60                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D62                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D64                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000D66                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D68                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D6A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D6C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D6E                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D70                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 2                    ; strtold@@GLIBC_2.2.5
LOAD:0000000000000D74                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 6                    ; __fread_unlocked_chk@@GLIBC_2.7
LOAD:0000000000000D7C                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D82                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D84                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D86                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D88                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D8A                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D8C                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D8E                 dw 3                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D90                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D92                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D94                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000D96                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D98                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D9C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000D9E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000DA0                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000DA2                 dw 0
LOAD:0000000000000DA4                 dw 0
LOAD:0000000000000DA6                 dw 0
LOAD:0000000000000DA8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000DA8                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_9B8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000DB8                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_9B8, \ ; "GLIBC_2.3"
LOAD:0000000000000DB8                                10h>
LOAD:0000000000000DC8                 Elf64_Vernaux <0D696917h, 0, 6, offset aGlibc27 - offset byte_9B8, \ ; "GLIBC_2.7"
LOAD:0000000000000DC8                                10h>
LOAD:0000000000000DD8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_9B8, \ ; "GLIBC_2.14"
LOAD:0000000000000DD8                                10h>
LOAD:0000000000000DE8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_9B8, \ ; "GLIBC_2.4"
LOAD:0000000000000DE8                                10h>
LOAD:0000000000000DF8                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_9B8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000DF8                                10h>
LOAD:0000000000000E08                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_9B8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000E18 ; ELF RELA Relocation Table
LOAD:0000000000000E18                 Elf64_Rela <20F9D0h, 8, 2E70h> ; R_X86_64_RELATIVE +2E70h
LOAD:0000000000000E30                 Elf64_Rela <20F9D8h, 8, 2E30h> ; R_X86_64_RELATIVE +2E30h
LOAD:0000000000000E48                 Elf64_Rela <20F9E0h, 8, 0AEC9h> ; R_X86_64_RELATIVE +0AEC9h
LOAD:0000000000000E60                 Elf64_Rela <20FA00h, 8, 0AED4h> ; R_X86_64_RELATIVE +0AED4h
LOAD:0000000000000E78                 Elf64_Rela <20FA20h, 8, 0AEE2h> ; R_X86_64_RELATIVE +0AEE2h
LOAD:0000000000000E90                 Elf64_Rela <20FA40h, 8, 0AEEDh> ; R_X86_64_RELATIVE +0AEEDh
LOAD:0000000000000EA8                 Elf64_Rela <20FA60h, 8, 0AEF4h> ; R_X86_64_RELATIVE +0AEF4h
LOAD:0000000000000EC0                 Elf64_Rela <20FA80h, 8, 0AF06h> ; R_X86_64_RELATIVE +0AF06h
LOAD:0000000000000ED8                 Elf64_Rela <20FAA0h, 8, 0AF0Eh> ; R_X86_64_RELATIVE +0AF0Eh
LOAD:0000000000000EF0                 Elf64_Rela <20FAC0h, 8, 0AF1Ah> ; R_X86_64_RELATIVE +0AF1Ah
LOAD:0000000000000F08                 Elf64_Rela <20FAE0h, 8, 0AE7Dh> ; R_X86_64_RELATIVE +0AE7Dh
LOAD:0000000000000F20                 Elf64_Rela <20FB00h, 8, 0AF20h> ; R_X86_64_RELATIVE +0AF20h
LOAD:0000000000000F38                 Elf64_Rela <20FB20h, 8, 0AF25h> ; R_X86_64_RELATIVE +0AF25h
LOAD:0000000000000F50                 Elf64_Rela <20FB60h, 8, 0AF2Dh> ; R_X86_64_RELATIVE +0AF2Dh
LOAD:0000000000000F68                 Elf64_Rela <20FB68h, 8, 0AF34h> ; R_X86_64_RELATIVE +0AF34h
LOAD:0000000000000F80                 Elf64_Rela <20FB80h, 8, 0D139h> ; R_X86_64_RELATIVE +0D139h
LOAD:0000000000000F98                 Elf64_Rela <20FBA0h, 8, 0C897h> ; R_X86_64_RELATIVE +0C897h
LOAD:0000000000000FB0                 Elf64_Rela <20FBA8h, 8, 0C89Fh> ; R_X86_64_RELATIVE +0C89Fh
LOAD:0000000000000FC8                 Elf64_Rela <20FBB0h, 8, 0C8A5h> ; R_X86_64_RELATIVE +0C8A5h
LOAD:0000000000000FE0                 Elf64_Rela <20FBB8h, 8, 0C8B2h> ; R_X86_64_RELATIVE +0C8B2h
LOAD:0000000000000FF8                 Elf64_Rela <20FBC0h, 8, 0C8BFh> ; R_X86_64_RELATIVE +0C8BFh
LOAD:0000000000001010                 Elf64_Rela <20FBC8h, 8, 0AD50h> ; R_X86_64_RELATIVE +0AD50h
LOAD:0000000000001028                 Elf64_Rela <20FBD0h, 8, 0C8D3h> ; R_X86_64_RELATIVE +0C8D3h
LOAD:0000000000001040                 Elf64_Rela <20FBD8h, 8, 0C8B8h> ; R_X86_64_RELATIVE +0C8B8h
LOAD:0000000000001058                 Elf64_Rela <20FBE0h, 8, 0AE74h> ; R_X86_64_RELATIVE +0AE74h
LOAD:0000000000001070                 Elf64_Rela <20FBE8h, 8, 0C8DBh> ; R_X86_64_RELATIVE +0C8DBh
LOAD:0000000000001088                 Elf64_Rela <210008h, 8, 210008h> ; R_X86_64_RELATIVE +210008h
LOAD:00000000000010A0                 Elf64_Rela <210018h, 8, 0C784h> ; R_X86_64_RELATIVE +0C784h
LOAD:00000000000010B8                 Elf64_Rela <210020h, 8, 5280h> ; R_X86_64_RELATIVE +5280h
LOAD:00000000000010D0                 Elf64_Rela <210080h, 8, 210090h> ; R_X86_64_RELATIVE +210090h
LOAD:00000000000010E8                 Elf64_Rela <210098h, 8, 210240h> ; R_X86_64_RELATIVE +210240h
LOAD:0000000000001100                 Elf64_Rela <20FFD0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001118                 Elf64_Rela <20FFD8h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001130                 Elf64_Rela <20FFE0h, 2400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001148                 Elf64_Rela <20FFE8h, 3A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001160                 Elf64_Rela <20FFF0h, 3D00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001178                 Elf64_Rela <2100A0h, 4100000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001190                 Elf64_Rela <2100A8h, 4000000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000011A8                 Elf64_Rela <2100B0h, 4200000005h, 0> ; R_X86_64_COPY stdin
LOAD:00000000000011C0                 Elf64_Rela <2100B8h, 4700000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000011D8                 Elf64_Rela <2100C0h, 4800000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000011F0                 Elf64_Rela <2100C8h, 4400000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001208                 Elf64_Rela <2100E0h, 4600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001220 ; ELF JMPREL Relocation Table
LOAD:0000000000001220                 Elf64_Rela <20FE00h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001238                 Elf64_Rela <20FE08h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001250                 Elf64_Rela <20FE10h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001268                 Elf64_Rela <20FE18h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001280                 Elf64_Rela <20FE20h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001298                 Elf64_Rela <20FE28h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000012B0                 Elf64_Rela <20FE30h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000012C8                 Elf64_Rela <20FE38h, 900000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:00000000000012E0                 Elf64_Rela <20FE40h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT ferror
LOAD:00000000000012F8                 Elf64_Rela <20FE48h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT strtod
LOAD:0000000000001310                 Elf64_Rela <20FE50h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT localeconv
LOAD:0000000000001328                 Elf64_Rela <20FE58h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:0000000000001340                 Elf64_Rela <20FE60h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001358                 Elf64_Rela <20FE68h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001370                 Elf64_Rela <20FE70h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001388                 Elf64_Rela <20FE78h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000013A0                 Elf64_Rela <20FE80h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000013B8                 Elf64_Rela <20FE88h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000013D0                 Elf64_Rela <20FE90h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000013E8                 Elf64_Rela <20FE98h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001400                 Elf64_Rela <20FEA0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001418                 Elf64_Rela <20FEA8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001430                 Elf64_Rela <20FEB0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001448                 Elf64_Rela <20FEB8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001460                 Elf64_Rela <20FEC0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001478                 Elf64_Rela <20FEC8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001490                 Elf64_Rela <20FED0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:00000000000014A8                 Elf64_Rela <20FED8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT strtof
LOAD:00000000000014C0                 Elf64_Rela <20FEE0h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000014D8                 Elf64_Rela <20FEE8h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fgetc
LOAD:00000000000014F0                 Elf64_Rela <20FEF0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001508                 Elf64_Rela <20FEF8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001520                 Elf64_Rela <20FF00h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001538                 Elf64_Rela <20FF08h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001550                 Elf64_Rela <20FF10h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001568                 Elf64_Rela <20FF18h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001580                 Elf64_Rela <20FF20h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001598                 Elf64_Rela <20FF28h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000015B0                 Elf64_Rela <20FF30h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000015C8                 Elf64_Rela <20FF38h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000015E0                 Elf64_Rela <20FF40h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000015F8                 Elf64_Rela <20FF48h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001610                 Elf64_Rela <20FF50h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001628                 Elf64_Rela <20FF58h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001640                 Elf64_Rela <20FF60h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001658                 Elf64_Rela <20FF68h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT strtold
LOAD:0000000000001670                 Elf64_Rela <20FF70h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001688                 Elf64_Rela <20FF78h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000016A0                 Elf64_Rela <20FF80h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000016B8                 Elf64_Rela <20FF88h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __fread_unlocked_chk
LOAD:00000000000016D0                 Elf64_Rela <20FF90h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000016E8                 Elf64_Rela <20FF98h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001700                 Elf64_Rela <20FFA0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001718                 Elf64_Rela <20FFA8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001730                 Elf64_Rela <20FFB0h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001748                 Elf64_Rela <20FFB8h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001760                 Elf64_Rela <20FFC0h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001778                 Elf64_Rela <20FFC8h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001778 LOAD            ends
LOAD:0000000000001778
.init:0000000000001790 ; ===========================================================================
.init:0000000000001790
.init:0000000000001790 ; Segment type: Pure code
.init:0000000000001790 ; Segment permissions: Read/Execute
.init:0000000000001790 _init           segment dword public 'CODE' use64
.init:0000000000001790                 assume cs:_init
.init:0000000000001790                 ;org 1790h
.init:0000000000001790                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001790
.init:0000000000001790 ; =============== S U B R O U T I N E =======================================
.init:0000000000001790
.init:0000000000001790
.init:0000000000001790                 public _init_proc
.init:0000000000001790 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001790                 sub     rsp, 8          ; _init
.init:0000000000001794                 mov     rax, cs:__gmon_start___ptr
.init:000000000000179B                 test    rax, rax
.init:000000000000179E                 jz      short loc_17A2
.init:00000000000017A0                 call    rax ; __gmon_start__
.init:00000000000017A2
.init:00000000000017A2 loc_17A2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000017A2                 add     rsp, 8
.init:00000000000017A6                 retn
.init:00000000000017A6 _init_proc      endp
.init:00000000000017A6
.init:00000000000017A6 _init           ends
.init:00000000000017A6
LOAD:00000000000017A7 ; ===========================================================================
LOAD:00000000000017A7
LOAD:00000000000017A7 ; Segment type: Pure code
LOAD:00000000000017A7 ; Segment permissions: Read/Execute
LOAD:00000000000017A7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000017A7                 assume cs:LOAD
LOAD:00000000000017A7                 ;org 17A7h
LOAD:00000000000017A7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000017A7                 align 10h
LOAD:00000000000017A7 LOAD            ends
LOAD:00000000000017A7
.plt:00000000000017B0 ; ===========================================================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Segment type: Pure code
.plt:00000000000017B0 ; Segment permissions: Read/Execute
.plt:00000000000017B0 _plt            segment para public 'CODE' use64
.plt:00000000000017B0                 assume cs:_plt
.plt:00000000000017B0                 ;org 17B0h
.plt:00000000000017B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0
.plt:00000000000017B0 sub_17B0        proc near               ; CODE XREF: .plt:00000000000017CB↓j
.plt:00000000000017B0                                         ; .plt:00000000000017DB↓j ...
.plt:00000000000017B0 ; __unwind {
.plt:00000000000017B0                 push    cs:qword_20FDF0
.plt:00000000000017B6                 jmp     cs:qword_20FDF8
.plt:00000000000017B6 sub_17B0        endp
.plt:00000000000017B6
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017BC                 align 20h
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ___snprintf_chk proc near               ; CODE XREF: dtoastr+F7↓p
.plt:00000000000017C0                                         ; ftoastr+FF↓p ...
.plt:00000000000017C0                 jmp     cs:__snprintf_chk_ptr
.plt:00000000000017C0 ___snprintf_chk endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    0
.plt:00000000000017CB                 jmp     sub_17B0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; void free(void *ptr)
.plt:00000000000017D0 _free           proc near               ; CODE XREF: main+896↓p
.plt:00000000000017D0                                         ; main+CDD↓p ...
.plt:00000000000017D0                 jmp     cs:free_ptr
.plt:00000000000017D0 _free           endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    1
.plt:00000000000017DB                 jmp     sub_17B0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: noreturn thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; void __noreturn abort(void)
.plt:00000000000017E0 _abort          proc near               ; CODE XREF: decode_format_string:def_3EC8↓p
.plt:00000000000017E0                                         ; set_program_name+9A↓p ...
.plt:00000000000017E0                 jmp     cs:abort_ptr
.plt:00000000000017E0 _abort          endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    2
.plt:00000000000017EB                 jmp     sub_17B0
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; int *__errno_location(void)
.plt:00000000000017F0 ___errno_location proc near             ; CODE XREF: main+B2F↓p
.plt:00000000000017F0                                         ; check_and_close+12E↓p ...
.plt:00000000000017F0                 jmp     cs:__errno_location_ptr
.plt:00000000000017F0 ___errno_location endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    3
.plt:00000000000017FB                 jmp     sub_17B0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001800 _strncmp        proc near               ; CODE XREF: usage+3C4↓p
.plt:0000000000001800                                         ; usage+485↓p ...
.plt:0000000000001800                 jmp     cs:strncmp_ptr
.plt:0000000000001800 _strncmp        endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    4
.plt:000000000000180B                 jmp     sub_17B0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: noreturn thunk
.plt:0000000000001810
.plt:0000000000001810 ; void __noreturn _exit(int status)
.plt:0000000000001810 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001810                 jmp     cs:_exit_ptr
.plt:0000000000001810 __exit          endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    5
.plt:000000000000181B                 jmp     sub_17B0
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; size_t __fpending(FILE *fp)
.plt:0000000000001820 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001820                 jmp     cs:__fpending_ptr
.plt:0000000000001820 ___fpending     endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    6
.plt:000000000000182B                 jmp     sub_17B0
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; int puts(const char *s)
.plt:0000000000001830 _puts           proc near               ; CODE XREF: write_block+233↓p
.plt:0000000000001830                 jmp     cs:puts_ptr
.plt:0000000000001830 _puts           endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    7
.plt:000000000000183B                 jmp     sub_17B0
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; int ferror(FILE *stream)
.plt:0000000000001840 _ferror         proc near               ; CODE XREF: xvprintf+27↓p
.plt:0000000000001840                                         ; xvfprintf+23↓p
.plt:0000000000001840                 jmp     cs:ferror_ptr
.plt:0000000000001840 _ferror         endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    8
.plt:000000000000184B                 jmp     sub_17B0
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; double strtod(const char *nptr, char **endptr)
.plt:0000000000001850 _strtod         proc near               ; CODE XREF: dtoastr+118↓p
.plt:0000000000001850                 jmp     cs:strtod_ptr
.plt:0000000000001850 _strtod         endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    9
.plt:000000000000185B                 jmp     sub_17B0
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; struct lconv *localeconv(void)
.plt:0000000000001860 _localeconv     proc near               ; CODE XREF: decode_format_string:loc_4020↓p
.plt:0000000000001860                 jmp     cs:localeconv_ptr
.plt:0000000000001860 _localeconv     endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    0Ah
.plt:000000000000186B                 jmp     sub_17B0
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001870 _fread_unlocked proc near               ; CODE XREF: read_block+82↓p
.plt:0000000000001870                 jmp     cs:fread_unlocked_ptr
.plt:0000000000001870 _fread_unlocked endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    0Bh
.plt:000000000000187B                 jmp     sub_17B0
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; char *textdomain(const char *domainname)
.plt:0000000000001880 _textdomain     proc near               ; CODE XREF: main+57↓p
.plt:0000000000001880                 jmp     cs:textdomain_ptr
.plt:0000000000001880 _textdomain     endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    0Ch
.plt:000000000000188B                 jmp     sub_17B0
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int fclose(FILE *stream)
.plt:0000000000001890 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001890                                         ; rpl_fclose+6B↓j
.plt:0000000000001890                 jmp     cs:fclose_ptr
.plt:0000000000001890 _fclose         endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    0Dh
.plt:000000000000189B                 jmp     sub_17B0
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000018A0 _bindtextdomain proc near               ; CODE XREF: main+4B↓p
.plt:00000000000018A0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000018A0 _bindtextdomain endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    0Eh
.plt:00000000000018AB                 jmp     sub_17B0
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000018B0 _dcgettext      proc near               ; CODE XREF: main+92A↓p
.plt:00000000000018B0                                         ; main+94E↓p ...
.plt:00000000000018B0                 jmp     cs:dcgettext_ptr
.plt:00000000000018B0 _dcgettext      endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    0Fh
.plt:00000000000018BB                 jmp     sub_17B0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000018C0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000018C0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000018C0 ___ctype_get_mb_cur_max endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    10h
.plt:00000000000018CB                 jmp     sub_17B0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; size_t strlen(const char *s)
.plt:00000000000018D0 _strlen         proc near               ; CODE XREF: decode_format_string+3FA↓p
.plt:00000000000018D0                                         ; decode_format_string+592↓p ...
.plt:00000000000018D0                 jmp     cs:strlen_ptr
.plt:00000000000018D0 _strlen         endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    11h
.plt:00000000000018DB                 jmp     sub_17B0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: noreturn thunk
.plt:00000000000018E0
.plt:00000000000018E0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2CB7↓p
.plt:00000000000018E0                                         ; format_address_std:loc_2FAE↓p ...
.plt:00000000000018E0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000018E0 ___stack_chk_fail endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    12h
.plt:00000000000018EB                 jmp     sub_17B0
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000018F0 _getopt_long    proc near               ; CODE XREF: main+17F↓p
.plt:00000000000018F0                 jmp     cs:getopt_long_ptr
.plt:00000000000018F0 _getopt_long    endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    13h
.plt:00000000000018FB                 jmp     sub_17B0
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001900 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001900                 jmp     cs:mbrtowc_ptr
.plt:0000000000001900 _mbrtowc        endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    14h
.plt:000000000000190B                 jmp     sub_17B0
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; char *strchr(const char *s, int c)
.plt:0000000000001910 _strchr         proc near               ; CODE XREF: parse_old_offset+20↓p
.plt:0000000000001910                                         ; xstrtoumax+123↓p ...
.plt:0000000000001910                 jmp     cs:strchr_ptr
.plt:0000000000001910 _strchr         endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    15h
.plt:000000000000191B                 jmp     sub_17B0
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001920 ___overflow     proc near               ; CODE XREF: main+10B2↓p
.plt:0000000000001920                                         ; main+10C2↓p ...
.plt:0000000000001920                 jmp     cs:__overflow_ptr
.plt:0000000000001920 ___overflow     endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    16h
.plt:000000000000192B                 jmp     sub_17B0
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; char *strrchr(const char *s, int c)
.plt:0000000000001930 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001930                 jmp     cs:strrchr_ptr
.plt:0000000000001930 _strrchr        endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    17h
.plt:000000000000193B                 jmp     sub_17B0
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001940 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001940                                         ; rpl_fseeko+3B↓p
.plt:0000000000001940                 jmp     cs:lseek_ptr
.plt:0000000000001940 _lseek          endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    18h
.plt:000000000000194B                 jmp     sub_17B0
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: noreturn thunk
.plt:0000000000001950
.plt:0000000000001950 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001950 ___assert_fail  proc near               ; CODE XREF: main+1123↓p
.plt:0000000000001950                                         ; main+1142↓p ...
.plt:0000000000001950                 jmp     cs:__assert_fail_ptr
.plt:0000000000001950 ___assert_fail  endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    19h
.plt:000000000000195B                 jmp     sub_17B0
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001960 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001960                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001960 ___strtoul_internal endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    1Ah
.plt:000000000000196B                 jmp     sub_17B0
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; float strtof(const char *nptr, char **endptr)
.plt:0000000000001970 _strtof         proc near               ; CODE XREF: ftoastr+120↓p
.plt:0000000000001970                 jmp     cs:strtof_ptr
.plt:0000000000001970 _strtof         endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    1Bh
.plt:000000000000197B                 jmp     sub_17B0
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001980 _memset         proc near               ; CODE XREF: main+EC1↓p
.plt:0000000000001980                                         ; quotearg_n_options+99↓p ...
.plt:0000000000001980                 jmp     cs:memset_ptr
.plt:0000000000001980 _memset         endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    1Ch
.plt:000000000000198B                 jmp     sub_17B0
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; int fgetc(FILE *stream)
.plt:0000000000001990 _fgetc          proc near               ; CODE XREF: read_char:loc_4923↓p
.plt:0000000000001990                 jmp     cs:fgetc_ptr
.plt:0000000000001990 _fgetc          endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    1Dh
.plt:000000000000199B                 jmp     sub_17B0
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000019A0 _memcmp         proc near               ; CODE XREF: write_block+216↓p
.plt:00000000000019A0                                         ; argmatch+6F↓p ...
.plt:00000000000019A0                 jmp     cs:memcmp_ptr
.plt:00000000000019A0 _memcmp         endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    1Eh
.plt:00000000000019AB                 jmp     sub_17B0
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000019B0 _fputs_unlocked proc near               ; CODE XREF: format_address_std+6E↓p
.plt:00000000000019B0                                         ; usage+A3↓p ...
.plt:00000000000019B0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000019B0 _fputs_unlocked endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    1Fh
.plt:00000000000019BB                 jmp     sub_17B0
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000019C0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000019C0                 jmp     cs:calloc_ptr
.plt:00000000000019C0 _calloc         endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    20h ; ' '
.plt:00000000000019CB                 jmp     sub_17B0
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000019D0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000019D0                                         ; vasnprintf+2AE↓p ...
.plt:00000000000019D0                 jmp     cs:memcpy_ptr
.plt:00000000000019D0 _memcpy         endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    21h ; '!'
.plt:00000000000019DB                 jmp     sub_17B0
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; int fileno(FILE *stream)
.plt:00000000000019E0 _fileno         proc near               ; CODE XREF: skip+C2↓p
.plt:00000000000019E0                                         ; rpl_fclose+7↓p ...
.plt:00000000000019E0                 jmp     cs:fileno_ptr
.plt:00000000000019E0 _fileno         endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    22h ; '"'
.plt:00000000000019EB                 jmp     sub_17B0
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; void *malloc(size_t size)
.plt:00000000000019F0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000019F0                                         ; vasnprintf+D2↓p ...
.plt:00000000000019F0                 jmp     cs:malloc_ptr
.plt:00000000000019F0 _malloc         endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    23h ; '#'
.plt:00000000000019FB                 jmp     sub_17B0
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int fflush(FILE *stream)
.plt:0000000000001A00 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001A00                                         ; rpl_fflush+3B↓j
.plt:0000000000001A00                 jmp     cs:fflush_ptr
.plt:0000000000001A00 _fflush         endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    24h ; '$'
.plt:0000000000001A0B                 jmp     sub_17B0
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; char *nl_langinfo(nl_item item)
.plt:0000000000001A10 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001A10                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001A10 _nl_langinfo    endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    25h ; '%'
.plt:0000000000001A1B                 jmp     sub_17B0
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001A20 ___fxstat       proc near               ; CODE XREF: skip+D1↓p
.plt:0000000000001A20                 jmp     cs:__fxstat_ptr
.plt:0000000000001A20 ___fxstat       endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    26h ; '&'
.plt:0000000000001A2B                 jmp     sub_17B0
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int __freading(FILE *fp)
.plt:0000000000001A30 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001A30                                         ; rpl_fflush+9↓p
.plt:0000000000001A30                 jmp     cs:__freading_ptr
.plt:0000000000001A30 ___freading     endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    27h ; '''
.plt:0000000000001A3B                 jmp     sub_17B0
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001A40 _fwrite_unlocked proc near              ; CODE XREF: main+F74↓p
.plt:0000000000001A40                                         ; main+F86↓p ...
.plt:0000000000001A40                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001A40 _fwrite_unlocked endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    28h ; '('
.plt:0000000000001A4B                 jmp     sub_17B0
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001A50 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001A50                                         ; vasnprintf+285↓p ...
.plt:0000000000001A50                 jmp     cs:realloc_ptr
.plt:0000000000001A50 _realloc        endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    29h ; ')'
.plt:0000000000001A5B                 jmp     sub_17B0
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; char *setlocale(int category, const char *locale)
.plt:0000000000001A60 _setlocale      proc near               ; CODE XREF: main+38↓p
.plt:0000000000001A60                                         ; usage+3AB↓p ...
.plt:0000000000001A60                 jmp     cs:setlocale_ptr
.plt:0000000000001A60 _setlocale      endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    2Ah ; '*'
.plt:0000000000001A6B                 jmp     sub_17B0
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ___printf_chk   proc near               ; CODE XREF: write_block+144↓p
.plt:0000000000001A70                                         ; write_block+28B↓p ...
.plt:0000000000001A70                 jmp     cs:__printf_chk_ptr
.plt:0000000000001A70 ___printf_chk   endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    2Bh ; '+'
.plt:0000000000001A7B                 jmp     sub_17B0
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000001A80 _setvbuf        proc near               ; CODE XREF: open_next_file+10C↓p
.plt:0000000000001A80                 jmp     cs:setvbuf_ptr
.plt:0000000000001A80 _setvbuf        endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    2Ch ; ','
.plt:0000000000001A8B                 jmp     sub_17B0
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; long double strtold(const char *nptr, char **endptr)
.plt:0000000000001A90 _strtold        proc near               ; CODE XREF: ldtoastr+109↓p
.plt:0000000000001A90                 jmp     cs:strtold_ptr
.plt:0000000000001A90 _strtold        endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    2Dh ; '-'
.plt:0000000000001A9B                 jmp     sub_17B0
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001AA0 _error          proc near               ; CODE XREF: main+93B↓p
.plt:0000000000001AA0                                         ; main+963↓p ...
.plt:0000000000001AA0                 jmp     cs:error_ptr
.plt:0000000000001AA0 _error          endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    2Eh ; '.'
.plt:0000000000001AAB                 jmp     sub_17B0
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001AB0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_88CA↓j
.plt:0000000000001AB0                 jmp     cs:fseeko_ptr
.plt:0000000000001AB0 _fseeko         endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    2Fh ; '/'
.plt:0000000000001ABB                 jmp     sub_17B0
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001AC0 _fopen          proc near               ; CODE XREF: open_next_file+92↓p
.plt:0000000000001AC0                 jmp     cs:fopen_ptr
.plt:0000000000001AC0 _fopen          endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    30h ; '0'
.plt:0000000000001ACB                 jmp     sub_17B0
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ___fread_unlocked_chk proc near         ; CODE XREF: skip+15E↓p
.plt:0000000000001AD0                 jmp     cs:__fread_unlocked_chk_ptr
.plt:0000000000001AD0 ___fread_unlocked_chk endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    31h ; '1'
.plt:0000000000001ADB                 jmp     sub_17B0
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001AE0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001AE0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001AE0 ___cxa_atexit   endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    32h ; '2'
.plt:0000000000001AEB                 jmp     sub_17B0
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: noreturn thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; void __noreturn exit(int status)
.plt:0000000000001AF0 _exit           proc near               ; CODE XREF: main+557↓p
.plt:0000000000001AF0                                         ; usage+58↓p
.plt:0000000000001AF0                 jmp     cs:exit_ptr
.plt:0000000000001AF0 _exit           endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    33h ; '3'
.plt:0000000000001AFB                 jmp     sub_17B0
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001B00 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001B00                                         ; rpl_vfprintf+66↓p
.plt:0000000000001B00                 jmp     cs:fwrite_ptr
.plt:0000000000001B00 _fwrite         endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    34h ; '4'
.plt:0000000000001B0B                 jmp     sub_17B0
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001B10                                         ; argmatch_valid+7A↓p ...
.plt:0000000000001B10                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001B10 ___fprintf_chk  endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    35h ; '5'
.plt:0000000000001B1B                 jmp     sub_17B0
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001B20 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001B20                 jmp     cs:mbsinit_ptr
.plt:0000000000001B20 _mbsinit        endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    36h ; '6'
.plt:0000000000001B2B                 jmp     sub_17B0
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; int iswprint(wint_t wc)
.plt:0000000000001B30 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001B30                 jmp     cs:iswprint_ptr
.plt:0000000000001B30 _iswprint       endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    37h ; '7'
.plt:0000000000001B3B                 jmp     sub_17B0
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001B40 ___ctype_b_loc  proc near               ; CODE XREF: main+AB1↓p
.plt:0000000000001B40                                         ; main+BD5↓p ...
.plt:0000000000001B40                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001B40 ___ctype_b_loc  endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    38h ; '8'
.plt:0000000000001B4B                 jmp     sub_17B0
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ___sprintf_chk  proc near               ; CODE XREF: decode_format_string+1D6↓p
.plt:0000000000001B50                                         ; decode_format_string+3E4↓p ...
.plt:0000000000001B50                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001B50 ___sprintf_chk  endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    39h ; '9'
.plt:0000000000001B5B                 jmp     sub_17B0
.plt:0000000000001B5B ; } // starts at 17B0
.plt:0000000000001B5B _plt            ends
.plt:0000000000001B5B
.plt.got:0000000000001B60 ; ===========================================================================
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; Segment type: Pure code
.plt.got:0000000000001B60 ; Segment permissions: Read/Execute
.plt.got:0000000000001B60 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001B60                 assume cs:_plt_got
.plt.got:0000000000001B60                 ;org 1B60h
.plt.got:0000000000001B60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; Attributes: thunk
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001B60 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001B60 ; __unwind {
.plt.got:0000000000001B60                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001B60 __cxa_finalize  endp
.plt.got:0000000000001B60
.plt.got:0000000000001B60 ; ---------------------------------------------------------------------------
.plt.got:0000000000001B66                 align 8
.plt.got:0000000000001B66 ; } // starts at 1B60
.plt.got:0000000000001B66 _plt_got        ends
.plt.got:0000000000001B66
LOAD:0000000000001B68 ; ===========================================================================
LOAD:0000000000001B68
LOAD:0000000000001B68 ; Segment type: Pure code
LOAD:0000000000001B68 ; Segment permissions: Read/Execute
LOAD:0000000000001B68 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001B68                 assume cs:LOAD
LOAD:0000000000001B68                 ;org 1B68h
LOAD:0000000000001B68                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001B68                 align 10h
LOAD:0000000000001B68 LOAD            ends
LOAD:0000000000001B68
.text:0000000000001B70 ; ===========================================================================
.text:0000000000001B70
.text:0000000000001B70 ; Segment type: Pure code
.text:0000000000001B70 ; Segment permissions: Read/Execute
.text:0000000000001B70 _text           segment para public 'CODE' use64
.text:0000000000001B70                 assume cs:_text
.text:0000000000001B70                 ;org 1B70h
.text:0000000000001B70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001B70
.text:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B70
.text:0000000000001B70
.text:0000000000001B70 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001B70                 public main
.text:0000000000001B70 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001B70
.text:0000000000001B70 var_88          = qword ptr -88h
.text:0000000000001B70 var_80          = qword ptr -80h
.text:0000000000001B70 var_78          = qword ptr -78h
.text:0000000000001B70 var_70          = qword ptr -70h
.text:0000000000001B70 longind         = dword ptr -68h
.text:0000000000001B70 var_60          = qword ptr -60h
.text:0000000000001B70 ptr             = qword ptr -58h
.text:0000000000001B70 var_50          = qword ptr -50h
.text:0000000000001B70 var_40          = qword ptr -40h
.text:0000000000001B70
.text:0000000000001B70 ; __unwind {
.text:0000000000001B70                 push    r15
.text:0000000000001B72                 push    r14
.text:0000000000001B74                 mov     r14d, edi
.text:0000000000001B77                 push    r13
.text:0000000000001B79                 push    r12
.text:0000000000001B7B                 mov     r13, rsi
.text:0000000000001B7E                 push    rbp
.text:0000000000001B7F                 push    rbx
.text:0000000000001B80                 sub     rsp, 58h
.text:0000000000001B84                 mov     rdi, [rsi]
.text:0000000000001B87                 mov     rax, fs:28h
.text:0000000000001B90                 mov     [rsp+88h+var_40], rax
.text:0000000000001B95                 xor     eax, eax
.text:0000000000001B97                 call    set_program_name
.text:0000000000001B9C                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001BA3                 mov     edi, 6          ; category
.text:0000000000001BA8                 call    _setlocale
.text:0000000000001BAD                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001BB4                 lea     rdi, domainname ; "coreutils"
.text:0000000000001BBB                 call    _bindtextdomain
.text:0000000000001BC0                 lea     rdi, domainname ; "coreutils"
.text:0000000000001BC7                 call    _textdomain
.text:0000000000001BCC                 lea     rdi, close_stdout
.text:0000000000001BD3                 call    atexit
.text:0000000000001BD8                 lea     rax, integral_type_size
.text:0000000000001BDF                 lea     rdx, [rax+24h]
.text:0000000000001BE3                 nop     dword ptr [rax+rax+00h]
.text:0000000000001BE8
.text:0000000000001BE8 loc_1BE8:                               ; CODE XREF: main+85↓j
.text:0000000000001BE8                 mov     dword ptr [rax], 0
.text:0000000000001BEE                 add     rax, 4
.text:0000000000001BF2                 cmp     rax, rdx
.text:0000000000001BF5                 jnz     short loc_1BE8
.text:0000000000001BF7                 lea     rax, fp_type_size
.text:0000000000001BFE                 mov     cs:dword_210184, 1
.text:0000000000001C08                 mov     cs:dword_210188, 2
.text:0000000000001C12                 mov     cs:dword_210190, 3
.text:0000000000001C1C                 mov     cs:dword_2101A0, 5
.text:0000000000001C26                 lea     rdx, [rax+44h]
.text:0000000000001C2A                 nop     word ptr [rax+rax+00h]
.text:0000000000001C30
.text:0000000000001C30 loc_1C30:                               ; CODE XREF: main+CD↓j
.text:0000000000001C30                 mov     dword ptr [rax], 0
.text:0000000000001C36                 add     rax, 4
.text:0000000000001C3A                 cmp     rdx, rax
.text:0000000000001C3D                 jnz     short loc_1C30
.text:0000000000001C3F                 lea     rax, format_address_std
.text:0000000000001C46                 lea     rbx, [rsp+88h+longind]
.text:0000000000001C4B                 lea     rbp, jpt_1D15
.text:0000000000001C52                 mov     cs:dword_210130, 6
.text:0000000000001C5C                 mov     cs:dword_210160, 8
.text:0000000000001C66                 mov     r12d, 1
.text:0000000000001C6C                 mov     cs:format_address, rax
.text:0000000000001C73                 lea     rax, [rsp+88h+var_60]
.text:0000000000001C78                 mov     cs:dword_210140, 7
.text:0000000000001C82                 mov     cs:n_specs, 0
.text:0000000000001C8D                 mov     cs:n_specs_allocated, 0
.text:0000000000001C98                 xor     r15d, r15d
.text:0000000000001C9B                 mov     cs:spec, 0
.text:0000000000001CA6                 mov     cs:address_base, 8
.text:0000000000001CB0                 mov     cs:address_pad_len, 7
.text:0000000000001CBA                 mov     cs:flag_dump_strings, 0
.text:0000000000001CC1                 mov     byte ptr [rsp+88h+var_88], 0
.text:0000000000001CC5                 mov     [rsp+88h+var_80], rax
.text:0000000000001CCA                 nop     word ptr [rax+rax+00h]
.text:0000000000001CD0
.text:0000000000001CD0 loc_1CD0:                               ; CODE XREF: main+1F3↓j
.text:0000000000001CD0                                         ; main+200↓j ...
.text:0000000000001CD0                 lea     rcx, long_options ; longopts
.text:0000000000001CD7                 lea     rdx, short_options ; "A:aBbcDdeFfHhIij:LlN:OoS:st:vw::Xx"
.text:0000000000001CDE                 mov     r8, rbx         ; longind
.text:0000000000001CE1                 mov     rsi, r13        ; argv
.text:0000000000001CE4                 mov     edi, r14d       ; argc
.text:0000000000001CE7                 mov     [rsp+88h+longind], 0FFFFFFFFh
.text:0000000000001CEF                 call    _getopt_long
.text:0000000000001CF4                 cmp     eax, 0FFFFFFFFh
.text:0000000000001CF7                 jz      loc_2100
.text:0000000000001CFD                 add     eax, 83h        ; switch 261 cases
.text:0000000000001D02                 cmp     eax, 104h
.text:0000000000001D07                 ja      def_1D15        ; jumptable 0000000000001D15 default case, cases -129-64,67,69,71,74,75,77,80-82,84-87,89-96,103,107,109,110,112-114,117,121-127
.text:0000000000001D0D                 movsxd  rax, ss:(jpt_1D15 - 0C070h)[rbp+rax*4]
.text:0000000000001D12                 add     rax, rbp
.text:0000000000001D15                 jmp     rax             ; switch jump
.text:0000000000001D15 ; ---------------------------------------------------------------------------
.text:0000000000001D17                 align 20h
.text:0000000000001D20
.text:0000000000001D20 loc_1D20:                               ; CODE XREF: main+1A5↑j
.text:0000000000001D20                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001D20                 mov     r9, cs:argmatch_die ; jumptable 0000000000001D15 case 129
.text:0000000000001D27                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001D2E                 lea     rdx, endian_args
.text:0000000000001D35                 lea     rcx, endian_types
.text:0000000000001D3C                 lea     rdi, aEndian    ; "--endian"
.text:0000000000001D43                 mov     r8d, 4
.text:0000000000001D49                 call    __xargmatch_internal
.text:0000000000001D4E                 lea     rdx, endian_types
.text:0000000000001D55                 mov     eax, [rdx+rax*4]
.text:0000000000001D58                 test    eax, eax
.text:0000000000001D5A                 jz      loc_20F4
.text:0000000000001D60                 sub     eax, 1
.text:0000000000001D63                 jnz     loc_1CD0
.text:0000000000001D69                 mov     cs:input_swap, 1
.text:0000000000001D70                 jmp     loc_1CD0
.text:0000000000001D70 ; ---------------------------------------------------------------------------
.text:0000000000001D75                 align 8
.text:0000000000001D78
.text:0000000000001D78 loc_1D78:                               ; CODE XREF: main+1A5↑j
.text:0000000000001D78                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001D78                 mov     cs:traditional, 1 ; jumptable 0000000000001D15 case 128
.text:0000000000001D7F                 jmp     loc_1CD0
.text:0000000000001D7F ; ---------------------------------------------------------------------------
.text:0000000000001D84                 align 8
.text:0000000000001D88
.text:0000000000001D88 loc_1D88:                               ; CODE XREF: main+1A5↑j
.text:0000000000001D88                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001D88                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000001D15 case 119
.text:0000000000001D8F                 test    rdi, rdi
.text:0000000000001D92                 jz      loc_20DC
.text:0000000000001D98                 mov     rcx, [rsp+88h+var_80]
.text:0000000000001D9D                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001DA4                 xor     esi, esi
.text:0000000000001DA6                 mov     edx, 0Ah
.text:0000000000001DAB                 call    xstrtoumax
.text:0000000000001DB0                 test    eax, eax
.text:0000000000001DB2                 jnz     loc_2CE4
.text:0000000000001DB8                 mov     rax, [rsp+88h+var_60]
.text:0000000000001DBD                 mov     byte ptr [rsp+88h+var_88], 1
.text:0000000000001DC1                 mov     r15d, 1
.text:0000000000001DC7                 mov     [rsp+88h+var_78], rax
.text:0000000000001DCC                 jmp     loc_1CD0
.text:0000000000001DCC ; ---------------------------------------------------------------------------
.text:0000000000001DD1                 align 8
.text:0000000000001DD8
.text:0000000000001DD8 loc_1DD8:                               ; CODE XREF: main+1A5↑j
.text:0000000000001DD8                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001DD8                 mov     cs:abbreviate_duplicate_blocks, 0 ; jumptable 0000000000001D15 case 118
.text:0000000000001DDF                 mov     r15d, 1
.text:0000000000001DE5                 jmp     loc_1CD0
.text:0000000000001DE5 ; ---------------------------------------------------------------------------
.text:0000000000001DEA                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 loc_1DF0:                               ; CODE XREF: main+1A5↑j
.text:0000000000001DF0                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001DF0                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000001D15 case 116
.text:0000000000001DF7                 mov     r15d, 1
.text:0000000000001DFD                 call    decode_format_string
.text:0000000000001E02                 and     r12d, eax
.text:0000000000001E05                 jmp     loc_1CD0
.text:0000000000001E05 ; ---------------------------------------------------------------------------
.text:0000000000001E0A                 align 10h
.text:0000000000001E10
.text:0000000000001E10 loc_1E10:                               ; CODE XREF: main+1A5↑j
.text:0000000000001E10                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001E10                 lea     rdi, aD2        ; jumptable 0000000000001D15 case 115
.text:0000000000001E17                 call    decode_format_string
.text:0000000000001E1C                 and     r12d, eax
.text:0000000000001E1F                 jmp     loc_1CD0
.text:0000000000001E1F ; ---------------------------------------------------------------------------
.text:0000000000001E24                 align 8
.text:0000000000001E28
.text:0000000000001E28 loc_1E28:                               ; CODE XREF: main+1A5↑j
.text:0000000000001E28                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001E28                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000001D15 case 106
.text:0000000000001E2F                 lea     r8, multipliers_7627 ; "bEGKkMmPTYZ0"
.text:0000000000001E36                 lea     rcx, n_bytes_to_skip
.text:0000000000001E3D                 xor     edx, edx
.text:0000000000001E3F                 xor     esi, esi
.text:0000000000001E41                 call    xstrtoumax
.text:0000000000001E46                 test    eax, eax
.text:0000000000001E48                 jnz     loc_2D26
.text:0000000000001E4E
.text:0000000000001E4E loc_1E4E:                               ; CODE XREF: main+427↓j
.text:0000000000001E4E                 mov     r15d, 1
.text:0000000000001E54                 jmp     loc_1CD0
.text:0000000000001E54 ; ---------------------------------------------------------------------------
.text:0000000000001E59                 align 20h
.text:0000000000001E60
.text:0000000000001E60 loc_1E60:                               ; CODE XREF: main+1A5↑j
.text:0000000000001E60                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001E60                 lea     rdi, aDi        ; jumptable 0000000000001D15 case 105
.text:0000000000001E67                 call    decode_format_string
.text:0000000000001E6C                 and     r12d, eax
.text:0000000000001E6F                 jmp     loc_1CD0
.text:0000000000001E6F ; ---------------------------------------------------------------------------
.text:0000000000001E74                 align 8
.text:0000000000001E78
.text:0000000000001E78 loc_1E78:                               ; CODE XREF: main+1A5↑j
.text:0000000000001E78                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001E78                 lea     rdi, aX2        ; jumptable 0000000000001D15 cases 104,120
.text:0000000000001E7F                 call    decode_format_string
.text:0000000000001E84                 and     r12d, eax
.text:0000000000001E87                 jmp     loc_1CD0
.text:0000000000001E87 ; ---------------------------------------------------------------------------
.text:0000000000001E8C                 align 10h
.text:0000000000001E90
.text:0000000000001E90 loc_1E90:                               ; CODE XREF: main+1A5↑j
.text:0000000000001E90                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001E90                 lea     rdi, aFf        ; jumptable 0000000000001D15 case 102
.text:0000000000001E97                 call    decode_format_string
.text:0000000000001E9C                 and     r12d, eax
.text:0000000000001E9F                 jmp     loc_1CD0
.text:0000000000001E9F ; ---------------------------------------------------------------------------
.text:0000000000001EA4                 align 8
.text:0000000000001EA8
.text:0000000000001EA8 loc_1EA8:                               ; CODE XREF: main+1A5↑j
.text:0000000000001EA8                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001EA8                 lea     rdi, aU2        ; jumptable 0000000000001D15 case 100
.text:0000000000001EAF                 call    decode_format_string
.text:0000000000001EB4                 and     r12d, eax
.text:0000000000001EB7                 jmp     loc_1CD0
.text:0000000000001EB7 ; ---------------------------------------------------------------------------
.text:0000000000001EBC                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 loc_1EC0:                               ; CODE XREF: main+1A5↑j
.text:0000000000001EC0                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001EC0                 lea     rdi, aC+1       ; jumptable 0000000000001D15 case 99
.text:0000000000001EC7                 call    decode_format_string
.text:0000000000001ECC                 and     r12d, eax
.text:0000000000001ECF                 jmp     loc_1CD0
.text:0000000000001ECF ; ---------------------------------------------------------------------------
.text:0000000000001ED4                 align 8
.text:0000000000001ED8
.text:0000000000001ED8 loc_1ED8:                               ; CODE XREF: main+1A5↑j
.text:0000000000001ED8                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001ED8                 lea     rdi, aO1        ; jumptable 0000000000001D15 case 98
.text:0000000000001EDF                 call    decode_format_string
.text:0000000000001EE4                 and     r12d, eax
.text:0000000000001EE7                 jmp     loc_1CD0
.text:0000000000001EE7 ; ---------------------------------------------------------------------------
.text:0000000000001EEC                 align 10h
.text:0000000000001EF0
.text:0000000000001EF0 loc_1EF0:                               ; CODE XREF: main+1A5↑j
.text:0000000000001EF0                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001EF0                 lea     rdi, aA+1       ; jumptable 0000000000001D15 case 97
.text:0000000000001EF7                 call    decode_format_string
.text:0000000000001EFC                 and     r12d, eax
.text:0000000000001EFF                 jmp     loc_1CD0
.text:0000000000001EFF ; ---------------------------------------------------------------------------
.text:0000000000001F04                 align 8
.text:0000000000001F08
.text:0000000000001F08 loc_1F08:                               ; CODE XREF: main+1A5↑j
.text:0000000000001F08                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001F08                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000001D15 case 83
.text:0000000000001F0F                 test    rdi, rdi
.text:0000000000001F12                 jz      loc_20CC
.text:0000000000001F18                 mov     rcx, [rsp+88h+var_80]
.text:0000000000001F1D                 lea     r8, multipliers_7627 ; "bEGKkMmPTYZ0"
.text:0000000000001F24                 xor     edx, edx
.text:0000000000001F26                 xor     esi, esi
.text:0000000000001F28                 call    xstrtoumax
.text:0000000000001F2D                 test    eax, eax
.text:0000000000001F2F                 jnz     loc_2D44
.text:0000000000001F35                 mov     rax, [rsp+88h+var_60]
.text:0000000000001F3A                 mov     cs:string_min, rax
.text:0000000000001F41
.text:0000000000001F41 loc_1F41:                               ; CODE XREF: main+567↓j
.text:0000000000001F41                 mov     cs:flag_dump_strings, 1
.text:0000000000001F48                 mov     r15d, 1
.text:0000000000001F4E                 jmp     loc_1CD0
.text:0000000000001F4E ; ---------------------------------------------------------------------------
.text:0000000000001F53                 align 8
.text:0000000000001F58
.text:0000000000001F58 loc_1F58:                               ; CODE XREF: main+1A5↑j
.text:0000000000001F58                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001F58                 lea     rdi, aO4        ; jumptable 0000000000001D15 case 79
.text:0000000000001F5F                 call    decode_format_string
.text:0000000000001F64                 and     r12d, eax
.text:0000000000001F67                 jmp     loc_1CD0
.text:0000000000001F67 ; ---------------------------------------------------------------------------
.text:0000000000001F6C                 align 10h
.text:0000000000001F70
.text:0000000000001F70 loc_1F70:                               ; CODE XREF: main+1A5↑j
.text:0000000000001F70                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001F70                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000001D15 case 78
.text:0000000000001F77                 lea     r8, multipliers_7627 ; "bEGKkMmPTYZ0"
.text:0000000000001F7E                 lea     rcx, max_bytes_to_format
.text:0000000000001F85                 xor     edx, edx
.text:0000000000001F87                 xor     esi, esi
.text:0000000000001F89                 mov     cs:limit_bytes_to_format, 1
.text:0000000000001F90                 call    xstrtoumax
.text:0000000000001F95                 test    eax, eax
.text:0000000000001F97                 jz      loc_1E4E
.text:0000000000001F9D                 mov     r8, cs:optarg@@GLIBC_2_2_5
.text:0000000000001FA4                 mov     esi, [rsp+88h+longind]
.text:0000000000001FA8                 lea     rcx, long_options
.text:0000000000001FAF                 mov     edx, 4Eh ; 'N'
.text:0000000000001FB4                 mov     edi, eax
.text:0000000000001FB6                 call    xstrtol_fatal
.text:0000000000001FB6 ; ---------------------------------------------------------------------------
.text:0000000000001FBB                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: main+1A5↑j
.text:0000000000001FC0                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001FC0                 lea     rdi, aDl        ; jumptable 0000000000001D15 cases 73,76,108
.text:0000000000001FC7                 call    decode_format_string
.text:0000000000001FCC                 and     r12d, eax
.text:0000000000001FCF                 jmp     loc_1CD0
.text:0000000000001FCF ; ---------------------------------------------------------------------------
.text:0000000000001FD4                 align 8
.text:0000000000001FD8
.text:0000000000001FD8 loc_1FD8:                               ; CODE XREF: main+1A5↑j
.text:0000000000001FD8                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001FD8                 lea     rdi, aX4        ; jumptable 0000000000001D15 cases 72,88
.text:0000000000001FDF                 call    decode_format_string
.text:0000000000001FE4                 and     r12d, eax
.text:0000000000001FE7                 jmp     loc_1CD0
.text:0000000000001FE7 ; ---------------------------------------------------------------------------
.text:0000000000001FEC                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: main+1A5↑j
.text:0000000000001FF0                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000001FF0                 lea     rdi, aFd        ; jumptable 0000000000001D15 cases 70,101
.text:0000000000001FF7                 call    decode_format_string
.text:0000000000001FFC                 and     r12d, eax
.text:0000000000001FFF                 jmp     loc_1CD0
.text:0000000000001FFF ; ---------------------------------------------------------------------------
.text:0000000000002004                 align 8
.text:0000000000002008
.text:0000000000002008 loc_2008:                               ; CODE XREF: main+1A5↑j
.text:0000000000002008                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000002008                 lea     rdi, aU4        ; jumptable 0000000000001D15 case 68
.text:000000000000200F                 call    decode_format_string
.text:0000000000002014                 and     r12d, eax
.text:0000000000002017                 jmp     loc_1CD0
.text:0000000000002017 ; ---------------------------------------------------------------------------
.text:000000000000201C                 align 20h
.text:0000000000002020
.text:0000000000002020 loc_2020:                               ; CODE XREF: main+1A5↑j
.text:0000000000002020                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000002020                 lea     rdi, aO2        ; jumptable 0000000000001D15 cases 66,111
.text:0000000000002027                 call    decode_format_string
.text:000000000000202C                 and     r12d, eax
.text:000000000000202F                 jmp     loc_1CD0
.text:000000000000202F ; ---------------------------------------------------------------------------
.text:0000000000002034                 align 8
.text:0000000000002038
.text:0000000000002038 loc_2038:                               ; CODE XREF: main+1A5↑j
.text:0000000000002038                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000002038                 mov     rax, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000001D15 case 65
.text:000000000000203F                 movzx   r15d, byte ptr [rax]
.text:0000000000002043                 cmp     r15b, 6Eh ; 'n'
.text:0000000000002047                 jz      loc_242C
.text:000000000000204D                 jle     loc_2272
.text:0000000000002053                 cmp     r15b, 6Fh ; 'o'
.text:0000000000002057                 jz      loc_22A9
.text:000000000000205D                 cmp     r15b, 78h ; 'x'
.text:0000000000002061                 jnz     loc_2CBC
.text:0000000000002067                 lea     rax, format_address_std
.text:000000000000206E                 mov     cs:address_base, 10h
.text:0000000000002078                 mov     cs:address_pad_len, 6
.text:0000000000002082                 mov     r15d, 1
.text:0000000000002088                 mov     cs:format_address, rax
.text:000000000000208F                 jmp     loc_1CD0
.text:000000000000208F ; ---------------------------------------------------------------------------
.text:0000000000002094                 align 8
.text:0000000000002098
.text:0000000000002098 loc_2098:                               ; CODE XREF: main+1A5↑j
.text:0000000000002098                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:0000000000002098                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 0000000000001D15 case -131
.text:000000000000209F                 mov     rcx, cs:Version
.text:00000000000020A6                 lea     r8, aJimMeyering ; "Jim Meyering"
.text:00000000000020AD                 lea     rdx, unk_AE36
.text:00000000000020B4                 lea     rsi, aOd        ; "od"
.text:00000000000020BB                 xor     r9d, r9d
.text:00000000000020BE                 xor     eax, eax
.text:00000000000020C0                 call    version_etc
.text:00000000000020C5                 xor     edi, edi        ; status
.text:00000000000020C7                 call    _exit
.text:00000000000020CC ; ---------------------------------------------------------------------------
.text:00000000000020CC
.text:00000000000020CC loc_20CC:                               ; CODE XREF: main+3A2↑j
.text:00000000000020CC                 mov     cs:string_min, 3
.text:00000000000020D7                 jmp     loc_1F41
.text:00000000000020DC ; ---------------------------------------------------------------------------
.text:00000000000020DC
.text:00000000000020DC loc_20DC:                               ; CODE XREF: main+222↑j
.text:00000000000020DC                 mov     byte ptr [rsp+88h+var_88], 1
.text:00000000000020E0                 mov     r15d, 1
.text:00000000000020E6                 mov     [rsp+88h+var_78], 20h ; ' '
.text:00000000000020EF                 jmp     loc_1CD0
.text:00000000000020F4 ; ---------------------------------------------------------------------------
.text:00000000000020F4
.text:00000000000020F4 loc_20F4:                               ; CODE XREF: main+1EA↑j
.text:00000000000020F4                 mov     cs:input_swap, 0
.text:00000000000020FB                 jmp     loc_1CD0
.text:0000000000002100 ; ---------------------------------------------------------------------------
.text:0000000000002100
.text:0000000000002100 loc_2100:                               ; CODE XREF: main+187↑j
.text:0000000000002100                 test    r12b, r12b
.text:0000000000002103                 jz      loc_22D6
.text:0000000000002109                 cmp     cs:flag_dump_strings, 0
.text:0000000000002110                 jz      short loc_2120
.text:0000000000002112                 cmp     cs:n_specs, 0
.text:000000000000211A                 jnz     loc_2D02
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: main+5A0↑j
.text:0000000000002120                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002127                 movzx   edx, cs:traditional
.text:000000000000212E                 sub     r14d, eax
.text:0000000000002131                 test    r15b, r15b
.text:0000000000002134                 jz      loc_244F
.text:000000000000213A                 test    dl, dl
.text:000000000000213C                 jnz     loc_26B5
.text:0000000000002142
.text:0000000000002142 loc_2142:                               ; CODE XREF: main+901↓j
.text:0000000000002142                                         ; main+909↓j ...
.text:0000000000002142                 cmp     cs:flag_pseudo_start, 0
.text:0000000000002149                 jz      short loc_216D
.text:000000000000214B                 lea     rax, format_address_none
.text:0000000000002152                 cmp     cs:format_address, rax
.text:0000000000002159                 jz      loc_28A9
.text:000000000000215F                 lea     rax, format_address_label
.text:0000000000002166                 mov     cs:format_address, rax
.text:000000000000216D
.text:000000000000216D loc_216D:                               ; CODE XREF: main+5D9↑j
.text:000000000000216D                                         ; main+D5B↓j
.text:000000000000216D                 cmp     cs:limit_bytes_to_format, 0
.text:0000000000002174                 jz      short loc_219C
.text:0000000000002176                 xor     edx, edx
.text:0000000000002178                 mov     rax, cs:max_bytes_to_format
.text:000000000000217F                 add     rax, cs:n_bytes_to_skip
.text:0000000000002186                 jb      loc_2C60
.text:000000000000218C
.text:000000000000218C loc_218C:                               ; CODE XREF: main+10F5↓j
.text:000000000000218C                 test    rdx, rdx
.text:000000000000218F                 mov     cs:end_offset, rax
.text:0000000000002196                 jnz     loc_2C3C
.text:000000000000219C
.text:000000000000219C loc_219C:                               ; CODE XREF: main+604↑j
.text:000000000000219C                 cmp     cs:n_specs, 0
.text:00000000000021A4                 jz      loc_2663
.text:00000000000021AA
.text:00000000000021AA loc_21AA:                               ; CODE XREF: main+AFF↓j
.text:00000000000021AA                 test    r14d, r14d
.text:00000000000021AD                 jle     loc_2650
.text:00000000000021B3                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000021BA                 lea     rax, [r13+rax*8+0]
.text:00000000000021BF                 mov     cs:file_list, rax
.text:00000000000021C6
.text:00000000000021C6 loc_21C6:                               ; CODE XREF: main+AEE↓j
.text:00000000000021C6                 call    open_next_file
.text:00000000000021CB                 cmp     cs:in_stream, 0
.text:00000000000021D3                 mov     r13d, eax
.text:00000000000021D6                 jz      loc_2412
.text:00000000000021DC                 mov     rdi, cs:n_bytes_to_skip
.text:00000000000021E3                 call    skip
.text:00000000000021E8                 and     r13d, eax
.text:00000000000021EB                 cmp     cs:in_stream, 0
.text:00000000000021F3                 jz      loc_2412
.text:00000000000021F9                 xor     eax, eax
.text:00000000000021FB                 cmp     cs:flag_pseudo_start, 0
.text:0000000000002202                 jnz     loc_2700
.text:0000000000002208
.text:0000000000002208 loc_2208:                               ; CODE XREF: main+B9C↓j
.text:0000000000002208                 mov     r9, cs:n_specs
.text:000000000000220F                 mov     r10, cs:spec
.text:0000000000002216                 lea     r11, width_bytes
.text:000000000000221D                 mov     cs:pseudo_offset, rax
.text:0000000000002224                 xor     edi, edi
.text:0000000000002226                 mov     r8d, 1
.text:000000000000222C
.text:000000000000222C loc_222C:                               ; CODE XREF: main+700↓j
.text:000000000000222C                 cmp     rdi, r9
.text:000000000000222F                 jz      loc_24E2
.text:0000000000002235                 imul    rax, rdi, 28h ; '('
.text:0000000000002239                 movsxd  r8, r8d
.text:000000000000223C                 mov     eax, [r10+rax+4]
.text:0000000000002241                 movsxd  rsi, dword ptr [r11+rax*4]
.text:0000000000002245                 mov     rax, r8
.text:0000000000002248                 mov     rcx, rsi
.text:000000000000224B                 jmp     short loc_2253
.text:000000000000224B ; ---------------------------------------------------------------------------
.text:000000000000224D                 align 10h
.text:0000000000002250
.text:0000000000002250 loc_2250:                               ; CODE XREF: main+6EE↓j
.text:0000000000002250                 mov     rcx, rdx
.text:0000000000002253
.text:0000000000002253 loc_2253:                               ; CODE XREF: main+6DB↑j
.text:0000000000002253                 xor     edx, edx
.text:0000000000002255                 div     rcx
.text:0000000000002258                 mov     rax, rcx
.text:000000000000225B                 test    rdx, rdx
.text:000000000000225E                 jnz     short loc_2250
.text:0000000000002260                 mov     rax, rsi
.text:0000000000002263                 xor     edx, edx
.text:0000000000002265                 add     rdi, 1
.text:0000000000002269                 div     rcx
.text:000000000000226C                 imul    r8d, eax
.text:0000000000002270                 jmp     short loc_222C
.text:0000000000002272 ; ---------------------------------------------------------------------------
.text:0000000000002272
.text:0000000000002272 loc_2272:                               ; CODE XREF: main+4DD↑j
.text:0000000000002272                 cmp     r15b, 64h ; 'd'
.text:0000000000002276                 jnz     loc_2CBC
.text:000000000000227C                 lea     rax, format_address_std
.text:0000000000002283                 mov     cs:address_base, 0Ah
.text:000000000000228D                 mov     cs:address_pad_len, 7
.text:0000000000002297                 mov     r15d, 1
.text:000000000000229D                 mov     cs:format_address, rax
.text:00000000000022A4                 jmp     loc_1CD0
.text:00000000000022A9 ; ---------------------------------------------------------------------------
.text:00000000000022A9
.text:00000000000022A9 loc_22A9:                               ; CODE XREF: main+4E7↑j
.text:00000000000022A9                 lea     rax, format_address_std
.text:00000000000022B0                 mov     cs:address_base, 8
.text:00000000000022BA                 mov     cs:address_pad_len, 7
.text:00000000000022C4                 mov     r15d, 1
.text:00000000000022CA                 mov     cs:format_address, rax
.text:00000000000022D1                 jmp     loc_1CD0
.text:00000000000022D6 ; ---------------------------------------------------------------------------
.text:00000000000022D6
.text:00000000000022D6 loc_22D6:                               ; CODE XREF: main+593↑j
.text:00000000000022D6                 mov     eax, 1
.text:00000000000022DB
.text:00000000000022DB loc_22DB:                               ; CODE XREF: main+8B7↓j
.text:00000000000022DB                 mov     rbx, [rsp+88h+var_40]
.text:00000000000022E0                 xor     rbx, fs:28h
.text:00000000000022E9                 jnz     loc_2CB7
.text:00000000000022EF                 add     rsp, 58h
.text:00000000000022F3                 pop     rbx
.text:00000000000022F4                 pop     rbp
.text:00000000000022F5                 pop     r12
.text:00000000000022F7                 pop     r13
.text:00000000000022F9                 pop     r14
.text:00000000000022FB                 pop     r15
.text:00000000000022FD                 retn
.text:00000000000022FE ; ---------------------------------------------------------------------------
.text:00000000000022FE
.text:00000000000022FE loc_22FE:                               ; CODE XREF: main+A1E↓j
.text:00000000000022FE                 mov     eax, 2
.text:0000000000002303                 xor     ecx, ecx
.text:0000000000002305                 mul     rdi
.text:0000000000002308                 jo      loc_2C6F
.text:000000000000230E
.text:000000000000230E loc_230E:                               ; CODE XREF: main+1104↓j
.text:000000000000230E                 test    rax, rax
.text:0000000000002311                 js      loc_2C6A
.text:0000000000002317                 test    rcx, rcx
.text:000000000000231A                 jnz     loc_2C6A
.text:0000000000002320                 add     rdi, rdi
.text:0000000000002323                 call    xmalloc
.text:0000000000002328                 movzx   ebx, cs:limit_bytes_to_format
.text:000000000000232F                 mov     rdi, cs:bytes_per_block
.text:0000000000002336                 mov     [rsp+88h+ptr], rax
.text:000000000000233B                 mov     r14, cs:n_bytes_to_skip
.text:0000000000002342                 add     rax, rdi
.text:0000000000002345                 test    bl, bl
.text:0000000000002347                 mov     [rsp+88h+var_50], rax
.text:000000000000234C                 jz      loc_28D0
.text:0000000000002352                 lea     r12, [rsp+88h+var_60]
.text:0000000000002357                 mov     byte ptr [rsp+88h+var_88], r13b
.text:000000000000235B                 jmp     short loc_23BB
.text:000000000000235D ; ---------------------------------------------------------------------------
.text:000000000000235D
.text:000000000000235D loc_235D:                               ; CODE XREF: main+855↓j
.text:000000000000235D                 movzx   edx, bpl
.text:0000000000002361                 mov     rdi, cs:bytes_per_block
.text:0000000000002368                 sub     rax, r14
.text:000000000000236B                 mov     r13, [rsp+rdx*8+88h+ptr]
.text:0000000000002370                 mov     r15, rdx
.text:0000000000002373                 mov     rdx, r12
.text:0000000000002376                 cmp     rax, rdi
.text:0000000000002379                 cmovbe  rdi, rax
.text:000000000000237D                 mov     rsi, r13
.text:0000000000002380                 call    read_block
.text:0000000000002385                 mov     rsi, [rsp+88h+var_60]
.text:000000000000238A                 and     ebx, eax
.text:000000000000238C                 cmp     rsi, cs:bytes_per_block
.text:0000000000002393                 jb      loc_2935
.text:0000000000002399                 jnz     loc_2C79
.text:000000000000239F                 xor     ebp, 1
.text:00000000000023A2                 mov     rdi, r14
.text:00000000000023A5                 mov     rcx, r13
.text:00000000000023A8                 movzx   eax, bpl
.text:00000000000023AC                 mov     rdx, [rsp+rax*8+88h+ptr]
.text:00000000000023B1                 call    write_block
.text:00000000000023B6                 add     r14, [rsp+88h+var_60]
.text:00000000000023BB
.text:00000000000023BB loc_23BB:                               ; CODE XREF: main+7EB↑j
.text:00000000000023BB                 mov     rax, cs:end_offset
.text:00000000000023C2                 cmp     rax, r14
.text:00000000000023C5                 ja      short loc_235D
.text:00000000000023C7                 movzx   r13d, byte ptr [rsp+88h+var_88]
.text:00000000000023CC                 mov     [rsp+88h+var_60], 0
.text:00000000000023D5
.text:00000000000023D5 loc_23D5:                               ; CODE XREF: main+DD0↓j
.text:00000000000023D5                                         ; main+EEA↓j
.text:00000000000023D5                 mov     esi, 0Ah
.text:00000000000023DA                 mov     rdi, r14
.text:00000000000023DD                 call    cs:format_address
.text:00000000000023E3                 cmp     cs:limit_bytes_to_format, 0
.text:00000000000023EA                 jz      short loc_23FE
.text:00000000000023EC                 cmp     r14, cs:end_offset
.text:00000000000023F3                 jb      short loc_23FE
.text:00000000000023F5                 xor     edi, edi        ; errnum
.text:00000000000023F7                 call    check_and_close
.text:00000000000023FC                 and     ebx, eax
.text:00000000000023FE
.text:00000000000023FE loc_23FE:                               ; CODE XREF: main+87A↑j
.text:00000000000023FE                                         ; main+883↑j
.text:00000000000023FE                 mov     rdi, [rsp+88h+ptr] ; ptr
.text:0000000000002403                 movzx   ebx, bl
.text:0000000000002406                 call    _free
.text:000000000000240B
.text:000000000000240B loc_240B:                               ; CODE XREF: main+CE6↓j
.text:000000000000240B                 and     r13d, ebx
.text:000000000000240E                 and     r13d, 1
.text:0000000000002412
.text:0000000000002412 loc_2412:                               ; CODE XREF: main+666↑j
.text:0000000000002412                                         ; main+683↑j
.text:0000000000002412                 cmp     cs:have_read_stdin, 0
.text:0000000000002419                 jnz     loc_2674
.text:000000000000241F
.text:000000000000241F loc_241F:                               ; CODE XREF: main+B13↓j
.text:000000000000241F                 xor     r13d, 1
.text:0000000000002423                 movzx   eax, r13b
.text:0000000000002427                 jmp     loc_22DB
.text:000000000000242C ; ---------------------------------------------------------------------------
.text:000000000000242C
.text:000000000000242C loc_242C:                               ; CODE XREF: main+4D7↑j
.text:000000000000242C                 lea     rax, format_address_none
.text:0000000000002433                 mov     cs:address_pad_len, 0
.text:000000000000243D                 mov     r15d, 1
.text:0000000000002443                 mov     cs:format_address, rax
.text:000000000000244A                 jmp     loc_1CD0
.text:000000000000244F ; ---------------------------------------------------------------------------
.text:000000000000244F
.text:000000000000244F loc_244F:                               ; CODE XREF: main+5C4↑j
.text:000000000000244F                 cmp     r14d, 2
.text:0000000000002453                 jz      loc_2820
.text:0000000000002459                 cmp     r14d, 3
.text:000000000000245D                 jz      loc_27B6
.text:0000000000002463                 cmp     r14d, 1
.text:0000000000002467                 jz      loc_29A5
.text:000000000000246D
.text:000000000000246D loc_246D:                               ; CODE XREF: main+B5D↓j
.text:000000000000246D                 cmp     r14d, 1
.text:0000000000002471                 jle     loc_2142
.text:0000000000002477                 test    dl, dl
.text:0000000000002479                 jz      loc_2142
.text:000000000000247F
.text:000000000000247F loc_247F:                               ; CODE XREF: main+C83↓j
.text:000000000000247F                 mov     rdi, [r13+rax*8+8]
.text:0000000000002484                 call    quote
.text:0000000000002489                 lea     rsi, msgid      ; "extra operand %s"
.text:0000000000002490                 mov     rbx, rax
.text:0000000000002493                 mov     edx, 5          ; category
.text:0000000000002498                 xor     edi, edi        ; domainname
.text:000000000000249A                 call    _dcgettext
.text:000000000000249F                 mov     rcx, rbx
.text:00000000000024A2                 mov     rdx, rax        ; format
.text:00000000000024A5                 xor     esi, esi        ; errnum
.text:00000000000024A7                 xor     edi, edi        ; status
.text:00000000000024A9                 xor     eax, eax
.text:00000000000024AB                 call    _error
.text:00000000000024B0                 lea     rsi, aCompatibilityM ; "compatibility mode supports at most one"...
.text:00000000000024B7                 mov     edx, 5          ; category
.text:00000000000024BC                 xor     edi, edi        ; domainname
.text:00000000000024BE                 call    _dcgettext
.text:00000000000024C3                 lea     rdx, aS_2+2     ; format
.text:00000000000024CA                 mov     rcx, rax
.text:00000000000024CD                 xor     esi, esi        ; errnum
.text:00000000000024CF                 xor     edi, edi        ; status
.text:00000000000024D1                 xor     eax, eax
.text:00000000000024D3                 call    _error
.text:00000000000024D8
.text:00000000000024D8 def_1D15:                               ; CODE XREF: main+197↑j
.text:00000000000024D8                                         ; main+1A5↑j
.text:00000000000024D8                                         ; DATA XREF: ...
.text:00000000000024D8                 mov     edi, 1          ; jumptable 0000000000001D15 default case, cases -129-64,67,69,71,74,75,77,80-82,84-87,89-96,103,107,109,110,112-114,117,121-127
.text:00000000000024DD                 call    usage
.text:00000000000024E2 ; ---------------------------------------------------------------------------
.text:00000000000024E2
.text:00000000000024E2 loc_24E2:                               ; CODE XREF: main+6BF↑j
.text:00000000000024E2                 cmp     byte ptr [rsp+88h+var_88], 0
.text:00000000000024E6                 jnz     loc_2788
.text:00000000000024EC                 cmp     r8d, 0Fh
.text:00000000000024F0                 jg      loc_2A5F
.text:00000000000024F6                 mov     eax, 10h
.text:00000000000024FB                 cdq
.text:00000000000024FC                 idiv    r8d
.text:00000000000024FF                 imul    eax, r8d
.text:0000000000002503                 cdqe
.text:0000000000002505                 mov     cs:bytes_per_block, rax
.text:000000000000250C
.text:000000000000250C loc_250C:                               ; CODE XREF: main+C41↓j
.text:000000000000250C                                         ; main+E99↓j ...
.text:000000000000250C                 imul    r9, 28h ; '('
.text:0000000000002510                 lea     rcx, [r10+4]
.text:0000000000002514                 mov     rdi, cs:bytes_per_block
.text:000000000000251B                 xor     r8d, r8d
.text:000000000000251E                 mov     rsi, rcx
.text:0000000000002521                 lea     r9, [r10+r9+4]
.text:0000000000002526                 lea     r10, width_bytes
.text:000000000000252D                 jmp     short loc_2553
.text:000000000000252F ; ---------------------------------------------------------------------------
.text:000000000000252F
.text:000000000000252F loc_252F:                               ; CODE XREF: main+9E6↓j
.text:000000000000252F                 mov     eax, [rsi]
.text:0000000000002531                 xor     edx, edx
.text:0000000000002533                 movsxd  r11, dword ptr [r10+rax*4]
.text:0000000000002537                 mov     rax, rdi
.text:000000000000253A                 div     r11
.text:000000000000253D                 mov     edx, [rsi+18h]
.text:0000000000002540                 add     edx, 1
.text:0000000000002543                 imul    eax, edx
.text:0000000000002546                 cdqe
.text:0000000000002548                 cmp     r8, rax
.text:000000000000254B                 cmovb   r8, rax
.text:000000000000254F                 add     rsi, 28h ; '('
.text:0000000000002553
.text:0000000000002553 loc_2553:                               ; CODE XREF: main+9BD↑j
.text:0000000000002553                 cmp     r9, rsi
.text:0000000000002556                 jnz     short loc_252F
.text:0000000000002558                 lea     r10, width_bytes
.text:000000000000255F                 jmp     short loc_257F
.text:0000000000002561 ; ---------------------------------------------------------------------------
.text:0000000000002561
.text:0000000000002561 loc_2561:                               ; CODE XREF: main+A12↓j
.text:0000000000002561                 mov     eax, [rcx]
.text:0000000000002563                 xor     edx, edx
.text:0000000000002565                 add     rcx, 28h ; '('
.text:0000000000002569                 movsxd  r9, dword ptr [r10+rax*4]
.text:000000000000256D                 mov     rax, rdi
.text:0000000000002570                 div     r9
.text:0000000000002573                 mov     edx, r8d
.text:0000000000002576                 imul    eax, [rcx-10h]
.text:000000000000257A                 sub     edx, eax
.text:000000000000257C                 mov     [rcx-0Ch], edx
.text:000000000000257F
.text:000000000000257F loc_257F:                               ; CODE XREF: main+9EF↑j
.text:000000000000257F                 cmp     rsi, rcx
.text:0000000000002582                 jnz     short loc_2561
.text:0000000000002584                 movzx   ebp, cs:flag_dump_strings
.text:000000000000258B                 test    bpl, bpl
.text:000000000000258E                 jz      loc_22FE
.text:0000000000002594                 cmp     cs:string_min, 64h ; 'd'
.text:000000000000259C                 mov     edi, 64h ; 'd'
.text:00000000000025A1                 cmovnb  rdi, cs:string_min
.text:00000000000025A9                 mov     [rsp+88h+var_60], rdi
.text:00000000000025AE                 call    xmalloc
.text:00000000000025B3                 mov     r14, cs:n_bytes_to_skip
.text:00000000000025BA                 mov     [rsp+88h+var_88], rax
.text:00000000000025BE                 lea     rax, [rsp+88h+var_60]
.text:00000000000025C3                 mov     byte ptr [rsp+88h+var_80], r13b
.text:00000000000025C8                 mov     [rsp+88h+var_78], rax
.text:00000000000025CD
.text:00000000000025CD loc_25CD:                               ; CODE XREF: main+CAB↓j
.text:00000000000025CD                 cmp     cs:limit_bytes_to_format, 0
.text:00000000000025D4                 jz      short loc_25F9
.text:00000000000025D6                 mov     rdx, cs:string_min
.text:00000000000025DD                 mov     rax, cs:end_offset
.text:00000000000025E4                 cmp     rax, rdx
.text:00000000000025E7                 jb      loc_2BA2
.text:00000000000025ED                 sub     rax, rdx
.text:00000000000025F0                 cmp     rax, r14
.text:00000000000025F3                 jbe     loc_2BA2
.text:00000000000025F9
.text:00000000000025F9 loc_25F9:                               ; CODE XREF: main+A64↑j
.text:00000000000025F9                 mov     r13, [rsp+88h+var_88]
.text:00000000000025FD                 mov     r12, r14
.text:0000000000002600                 sub     r13, r14
.text:0000000000002603                 jmp     short loc_263C
.text:0000000000002605 ; ---------------------------------------------------------------------------
.text:0000000000002605
.text:0000000000002605 loc_2605:                               ; CODE XREF: main+AD9↓j
.text:0000000000002605                 mov     rdi, rbx
.text:0000000000002608                 add     r12, 1
.text:000000000000260C                 call    read_char
.text:0000000000002611                 mov     r15d, [rsp+88h+longind]
.text:0000000000002616                 and     ebp, eax
.text:0000000000002618                 test    r15d, r15d
.text:000000000000261B                 js      loc_2843
.text:0000000000002621                 call    ___ctype_b_loc
.text:0000000000002626                 mov     rsi, [rax]
.text:0000000000002629                 movsxd  rcx, r15d
.text:000000000000262C                 test    byte ptr [rsi+rcx*2+1], 40h
.text:0000000000002631                 jz      loc_2818
.text:0000000000002637                 mov     [r13+r12-1], r15b
.text:000000000000263C
.text:000000000000263C loc_263C:                               ; CODE XREF: main+A93↑j
.text:000000000000263C                 mov     rax, r12
.text:000000000000263F                 sub     rax, r14
.text:0000000000002642                 cmp     cs:string_min, rax
.text:0000000000002649                 ja      short loc_2605
.text:000000000000264B                 jmp     loc_2763
.text:0000000000002650 ; ---------------------------------------------------------------------------
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: main+63D↑j
.text:0000000000002650                 lea     rax, default_file_list
.text:0000000000002657                 mov     cs:file_list, rax
.text:000000000000265E                 jmp     loc_21C6
.text:0000000000002663 ; ---------------------------------------------------------------------------
.text:0000000000002663
.text:0000000000002663 loc_2663:                               ; CODE XREF: main+634↑j
.text:0000000000002663                 lea     rdi, aOs        ; "oS"
.text:000000000000266A                 call    decode_format_string
.text:000000000000266F                 jmp     loc_21AA
.text:0000000000002674 ; ---------------------------------------------------------------------------
.text:0000000000002674
.text:0000000000002674 loc_2674:                               ; CODE XREF: main+8A9↑j
.text:0000000000002674                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:000000000000267B                 call    rpl_fclose
.text:0000000000002680                 add     eax, 1
.text:0000000000002683                 jnz     loc_241F
.text:0000000000002689                 lea     rsi, aStandardInput ; "standard input"
.text:0000000000002690                 mov     edx, 5          ; category
.text:0000000000002695                 xor     edi, edi        ; domainname
.text:0000000000002697                 call    _dcgettext
.text:000000000000269C                 mov     rbx, rax
.text:000000000000269F                 call    ___errno_location
.text:00000000000026A4                 mov     esi, [rax]      ; errnum
.text:00000000000026A6                 mov     rdx, rbx        ; format
.text:00000000000026A9                 mov     edi, 1          ; status
.text:00000000000026AE                 xor     eax, eax
.text:00000000000026B0                 call    _error
.text:00000000000026B5
.text:00000000000026B5 loc_26B5:                               ; CODE XREF: main+5CC↑j
.text:00000000000026B5                 cmp     r14d, 2
.text:00000000000026B9                 jz      loc_2820
.text:00000000000026BF                 cmp     r14d, 3
.text:00000000000026C3                 jz      loc_27B6
.text:00000000000026C9                 cmp     r14d, 1
.text:00000000000026CD                 jnz     loc_246D
.text:00000000000026D3
.text:00000000000026D3 loc_26D3:                               ; CODE XREF: main+E3C↓j
.text:00000000000026D3                                         ; main+E45↓j
.text:00000000000026D3                 mov     rdi, [r13+rax*8+0] ; nptr
.text:00000000000026D8                 mov     rsi, rbx
.text:00000000000026DB                 call    parse_old_offset
.text:00000000000026E0                 test    al, al
.text:00000000000026E2                 jz      loc_29BB
.text:00000000000026E8                 mov     rax, qword ptr [rsp+88h+longind]
.text:00000000000026ED                 add     r13, 8
.text:00000000000026F1                 xor     r14d, r14d
.text:00000000000026F4                 mov     cs:n_bytes_to_skip, rax
.text:00000000000026FB                 jmp     loc_2142
.text:0000000000002700 ; ---------------------------------------------------------------------------
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: main+692↑j
.text:0000000000002700                 mov     rax, [rsp+88h+var_70]
.text:0000000000002705                 sub     rax, cs:n_bytes_to_skip
.text:000000000000270C                 jmp     loc_2208
.text:0000000000002711 ; ---------------------------------------------------------------------------
.text:0000000000002711
.text:0000000000002711 loc_2711:                               ; CODE XREF: main+C16↓j
.text:0000000000002711                 mov     rsi, [rsp+88h+var_78]
.text:0000000000002716                 mov     rdi, [rsp+88h+var_88]
.text:000000000000271A                 call    x2realloc
.text:000000000000271F                 mov     [rsp+88h+var_88], rax
.text:0000000000002723
.text:0000000000002723 loc_2723:                               ; CODE XREF: main+C14↓j
.text:0000000000002723                 mov     rdi, rbx
.text:0000000000002726                 add     r12, 1
.text:000000000000272A                 call    read_char
.text:000000000000272F                 mov     r15d, [rsp+88h+longind]
.text:0000000000002734                 and     ebp, eax
.text:0000000000002736                 test    r15d, r15d
.text:0000000000002739                 js      loc_2843
.text:000000000000273F                 jz      loc_2A79
.text:0000000000002745                 call    ___ctype_b_loc
.text:000000000000274A                 mov     rsi, [rax]
.text:000000000000274D                 movsxd  rdx, r15d
.text:0000000000002750                 test    byte ptr [rsi+rdx*2+1], 40h
.text:0000000000002755                 jz      loc_2818
.text:000000000000275B                 mov     rax, [rsp+88h+var_88]
.text:000000000000275F                 mov     [rax+r13], r15b
.text:0000000000002763
.text:0000000000002763 loc_2763:                               ; CODE XREF: main+ADB↑j
.text:0000000000002763                 mov     r13, r12
.text:0000000000002766                 sub     r13, r14
.text:0000000000002769                 cmp     cs:limit_bytes_to_format, 0
.text:0000000000002770                 jz      short loc_277F
.text:0000000000002772                 cmp     r12, cs:end_offset
.text:0000000000002779                 jnb     loc_2A79
.text:000000000000277F
.text:000000000000277F loc_277F:                               ; CODE XREF: main+C00↑j
.text:000000000000277F                 cmp     r13, [rsp+88h+var_60]
.text:0000000000002784                 jnz     short loc_2723
.text:0000000000002786                 jmp     short loc_2711
.text:0000000000002788 ; ---------------------------------------------------------------------------
.text:0000000000002788
.text:0000000000002788 loc_2788:                               ; CODE XREF: main+976↑j
.text:0000000000002788                 mov     rsi, [rsp+88h+var_78]
.text:000000000000278D                 movsxd  rbp, r8d
.text:0000000000002790                 test    rsi, rsi
.text:0000000000002793                 mov     rax, rsi
.text:0000000000002796                 jz      loc_29C6
.text:000000000000279C                 xor     edx, edx
.text:000000000000279E                 div     rbp
.text:00000000000027A1                 test    rdx, rdx
.text:00000000000027A4                 jnz     loc_29C6
.text:00000000000027AA                 mov     cs:bytes_per_block, rsi
.text:00000000000027B1                 jmp     loc_250C
.text:00000000000027B6 ; ---------------------------------------------------------------------------
.text:00000000000027B6
.text:00000000000027B6 loc_27B6:                               ; CODE XREF: main+8ED↑j
.text:00000000000027B6                                         ; main+B53↑j
.text:00000000000027B6                 test    dl, dl
.text:00000000000027B8                 mov     r14d, 3
.text:00000000000027BE                 jz      loc_2142
.text:00000000000027C4                 mov     rdi, [r13+rax*8+8] ; nptr
.text:00000000000027C9                 mov     rsi, rbx
.text:00000000000027CC                 call    parse_old_offset
.text:00000000000027D1                 test    al, al
.text:00000000000027D3                 jnz     loc_2BBF
.text:00000000000027D9
.text:00000000000027D9 loc_27D9:                               ; CODE XREF: main+1067↓j
.text:00000000000027D9                 mov     r14d, 3
.text:00000000000027DF
.text:00000000000027DF loc_27DF:                               ; CODE XREF: main+F04↓j
.text:00000000000027DF                 cmp     cs:traditional, 0
.text:00000000000027E6                 jz      loc_2142
.text:00000000000027EC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000027F3                 jmp     loc_247F
.text:00000000000027F8 ; ---------------------------------------------------------------------------
.text:00000000000027F8
.text:00000000000027F8 loc_27F8:                               ; CODE XREF: main+1A5↑j
.text:00000000000027F8                                         ; DATA XREF: .rodata:jpt_1D15↓o
.text:00000000000027F8                 xor     edi, edi        ; jumptable 0000000000001D15 case -130
.text:00000000000027FA                 call    usage
.text:00000000000027FF ; ---------------------------------------------------------------------------
.text:00000000000027FF
.text:00000000000027FF loc_27FF:                               ; CODE XREF: main+F3E↓j
.text:00000000000027FF                 mov     rax, [rcx+28h]
.text:0000000000002803                 cmp     rax, [rcx+30h]
.text:0000000000002807                 jnb     loc_2C1A
.text:000000000000280D                 lea     rdx, [rax+1]
.text:0000000000002811                 mov     [rcx+28h], rdx
.text:0000000000002815                 mov     byte ptr [rax], 0Ah
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: main+AC1↑j
.text:0000000000002818                                         ; main+BE5↑j ...
.text:0000000000002818                 mov     r14, r12
.text:000000000000281B                 jmp     loc_25CD
.text:0000000000002820 ; ---------------------------------------------------------------------------
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: main+8E3↑j
.text:0000000000002820                                         ; main+B49↑j
.text:0000000000002820                 test    dl, dl
.text:0000000000002822                 mov     rdi, [r13+rax*8+8] ; nptr
.text:0000000000002827                 jnz     short loc_285B
.text:0000000000002829                 movsx   eax, byte ptr [rdi]
.text:000000000000282C                 cmp     al, 2Bh ; '+'
.text:000000000000282E                 jz      short loc_285B
.text:0000000000002830                 sub     eax, 30h ; '0'
.text:0000000000002833                 cmp     eax, 9
.text:0000000000002836                 jbe     short loc_285B
.text:0000000000002838                 mov     r14d, 2
.text:000000000000283E                 jmp     loc_2142
.text:0000000000002843 ; ---------------------------------------------------------------------------
.text:0000000000002843
.text:0000000000002843 loc_2843:                               ; CODE XREF: main+AAB↑j
.text:0000000000002843                                         ; main+BC9↑j
.text:0000000000002843                 mov     rdi, [rsp+88h+var_88] ; ptr
.text:0000000000002847                 movzx   r13d, byte ptr [rsp+88h+var_80]
.text:000000000000284D                 call    _free
.text:0000000000002852
.text:0000000000002852 loc_2852:                               ; CODE XREF: main+104A↓j
.text:0000000000002852                 movzx   ebx, bpl
.text:0000000000002856                 jmp     loc_240B
.text:000000000000285B ; ---------------------------------------------------------------------------
.text:000000000000285B
.text:000000000000285B loc_285B:                               ; CODE XREF: main+CB7↑j
.text:000000000000285B                                         ; main+CBE↑j ...
.text:000000000000285B                 lea     rax, [rsp+88h+var_60]
.text:0000000000002860                 mov     rsi, rax
.text:0000000000002863                 call    parse_old_offset
.text:0000000000002868                 test    al, al
.text:000000000000286A                 jz      loc_2A6E
.text:0000000000002870                 cmp     cs:traditional, 0
.text:0000000000002877                 jnz     loc_2B5D
.text:000000000000287D
.text:000000000000287D loc_287D:                               ; CODE XREF: main+1003↓j
.text:000000000000287D                 mov     rax, [rsp+88h+var_60]
.text:0000000000002882                 mov     r14d, 1
.text:0000000000002888                 mov     cs:n_bytes_to_skip, rax
.text:000000000000288F                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002896                 mov     rdx, [r13+rax*8+0]
.text:000000000000289B                 mov     [r13+rax*8+8], rdx
.text:00000000000028A0                 add     r13, 8
.text:00000000000028A4                 jmp     loc_2142
.text:00000000000028A9 ; ---------------------------------------------------------------------------
.text:00000000000028A9
.text:00000000000028A9 loc_28A9:                               ; CODE XREF: main+5E9↑j
.text:00000000000028A9                 lea     rax, format_address_paren
.text:00000000000028B0                 mov     cs:address_base, 8
.text:00000000000028BA                 mov     cs:address_pad_len, 7
.text:00000000000028C4                 mov     cs:format_address, rax
.text:00000000000028CB                 jmp     loc_216D
.text:00000000000028D0 ; ---------------------------------------------------------------------------
.text:00000000000028D0
.text:00000000000028D0 loc_28D0:                               ; CODE XREF: main+7DC↑j
.text:00000000000028D0                 lea     rax, [rsp+88h+var_60]
.text:00000000000028D5                 mov     ebx, r12d
.text:00000000000028D8                 xor     ebp, ebp
.text:00000000000028DA                 xor     r15d, r15d
.text:00000000000028DD                 mov     byte ptr [rsp+88h+var_88], r13b
.text:00000000000028E1                 mov     r12, rax
.text:00000000000028E4                 jmp     short loc_2912
.text:00000000000028E6 ; ---------------------------------------------------------------------------
.text:00000000000028E6
.text:00000000000028E6 loc_28E6:                               ; CODE XREF: main+DC3↓j
.text:00000000000028E6                 jnz     loc_2C98
.text:00000000000028EC                 xor     ebp, 1
.text:00000000000028EF                 mov     rdi, r14
.text:00000000000028F2                 mov     rcx, r13
.text:00000000000028F5                 movzx   eax, bpl
.text:00000000000028F9                 mov     rdx, [rsp+rax*8+88h+ptr]
.text:00000000000028FE                 mov     r15, rax
.text:0000000000002901                 call    write_block
.text:0000000000002906                 add     r14, [rsp+88h+var_60]
.text:000000000000290B                 mov     rdi, cs:bytes_per_block
.text:0000000000002912
.text:0000000000002912 loc_2912:                               ; CODE XREF: main+D74↑j
.text:0000000000002912                 movsxd  rax, r15d
.text:0000000000002915                 mov     rdx, r12
.text:0000000000002918                 mov     r13, [rsp+rax*8+88h+ptr]
.text:000000000000291D                 mov     rsi, r13
.text:0000000000002920                 call    read_block
.text:0000000000002925                 mov     rsi, [rsp+88h+var_60]
.text:000000000000292A                 and     ebx, eax
.text:000000000000292C                 cmp     rsi, cs:bytes_per_block
.text:0000000000002933                 jnb     short loc_28E6
.text:0000000000002935
.text:0000000000002935 loc_2935:                               ; CODE XREF: main+823↑j
.text:0000000000002935                 test    rsi, rsi
.text:0000000000002938                 movzx   r13d, byte ptr [rsp+88h+var_88]
.text:000000000000293D                 mov     r8, rsi
.text:0000000000002940                 jz      loc_23D5
.text:0000000000002946                 mov     r10, cs:n_specs
.text:000000000000294D                 mov     r12, cs:spec
.text:0000000000002954                 lea     r11, width_bytes
.text:000000000000295B                 xor     r9d, r9d
.text:000000000000295E                 mov     esi, 1
.text:0000000000002963
.text:0000000000002963 loc_2963:                               ; CODE XREF: main+E33↓j
.text:0000000000002963                 cmp     r9, r10
.text:0000000000002966                 movsxd  rsi, esi
.text:0000000000002969                 jz      loc_2A0E
.text:000000000000296F                 imul    rax, r9, 28h ; '('
.text:0000000000002973                 mov     eax, [r12+rax+4]
.text:0000000000002978                 movsxd  rdi, dword ptr [r11+rax*4]
.text:000000000000297C                 mov     rax, rsi
.text:000000000000297F                 mov     rcx, rdi
.text:0000000000002982                 jmp     short loc_2987
.text:0000000000002984 ; ---------------------------------------------------------------------------
.text:0000000000002984
.text:0000000000002984 loc_2984:                               ; CODE XREF: main+E22↓j
.text:0000000000002984                 mov     rcx, rdx
.text:0000000000002987
.text:0000000000002987 loc_2987:                               ; CODE XREF: main+E12↑j
.text:0000000000002987                 xor     edx, edx
.text:0000000000002989                 div     rcx
.text:000000000000298C                 mov     rax, rcx
.text:000000000000298F                 test    rdx, rdx
.text:0000000000002992                 jnz     short loc_2984
.text:0000000000002994                 mov     rax, rdi
.text:0000000000002997                 xor     edx, edx
.text:0000000000002999                 add     r9, 1
.text:000000000000299D                 div     rcx
.text:00000000000029A0                 imul    esi, eax
.text:00000000000029A3                 jmp     short loc_2963
.text:00000000000029A5 ; ---------------------------------------------------------------------------
.text:00000000000029A5
.text:00000000000029A5 loc_29A5:                               ; CODE XREF: main+8F7↑j
.text:00000000000029A5                 test    dl, dl
.text:00000000000029A7                 mov     rcx, [r13+rax*8+0]
.text:00000000000029AC                 jnz     loc_26D3
.text:00000000000029B2                 cmp     byte ptr [rcx], 2Bh ; '+'
.text:00000000000029B5                 jz      loc_26D3
.text:00000000000029BB
.text:00000000000029BB loc_29BB:                               ; CODE XREF: main+B72↑j
.text:00000000000029BB                 mov     r14d, 1
.text:00000000000029C1                 jmp     loc_2142
.text:00000000000029C6 ; ---------------------------------------------------------------------------
.text:00000000000029C6
.text:00000000000029C6 loc_29C6:                               ; CODE XREF: main+C26↑j
.text:00000000000029C6                                         ; main+C34↑j
.text:00000000000029C6                 lea     rsi, aWarningInvalid ; "warning: invalid width %lu; using %d in"...
.text:00000000000029CD                 mov     edx, 5          ; category
.text:00000000000029D2                 xor     edi, edi        ; domainname
.text:00000000000029D4                 mov     dword ptr [rsp+88h+var_88], r8d
.text:00000000000029D8                 call    _dcgettext
.text:00000000000029DD                 mov     r8d, dword ptr [rsp+88h+var_88]
.text:00000000000029E1                 mov     rcx, [rsp+88h+var_78]
.text:00000000000029E6                 mov     rdx, rax        ; format
.text:00000000000029E9                 xor     esi, esi        ; errnum
.text:00000000000029EB                 xor     edi, edi        ; status
.text:00000000000029ED                 xor     eax, eax
.text:00000000000029EF                 call    _error
.text:00000000000029F4                 mov     cs:bytes_per_block, rbp
.text:00000000000029FB                 mov     r9, cs:n_specs
.text:0000000000002A02                 mov     r10, cs:spec
.text:0000000000002A09                 jmp     loc_250C
.text:0000000000002A0E ; ---------------------------------------------------------------------------
.text:0000000000002A0E
.text:0000000000002A0E loc_2A0E:                               ; CODE XREF: main+DF9↑j
.text:0000000000002A0E                 lea     rax, [rsi+r8-1]
.text:0000000000002A13                 xor     edx, edx
.text:0000000000002A15                 mov     r12, [rsp+r15*8+88h+ptr]
.text:0000000000002A1A                 mov     [rsp+88h+var_88], r8
.text:0000000000002A1E                 div     rsi
.text:0000000000002A21                 lea     rdi, [r12+r8]   ; s
.text:0000000000002A25                 imul    rax, rsi
.text:0000000000002A29                 xor     esi, esi        ; c
.text:0000000000002A2B                 sub     rax, r8
.text:0000000000002A2E                 mov     rdx, rax        ; n
.text:0000000000002A31                 call    _memset
.text:0000000000002A36                 mov     eax, ebp
.text:0000000000002A38                 mov     r8, [rsp+88h+var_88]
.text:0000000000002A3C                 mov     rdi, r14
.text:0000000000002A3F                 xor     eax, 1
.text:0000000000002A42                 mov     rcx, r12
.text:0000000000002A45                 movzx   eax, al
.text:0000000000002A48                 mov     rdx, [rsp+rax*8+88h+ptr]
.text:0000000000002A4D                 mov     rsi, r8
.text:0000000000002A50                 call    write_block
.text:0000000000002A55                 add     r14, [rsp+88h+var_60]
.text:0000000000002A5A                 jmp     loc_23D5
.text:0000000000002A5F ; ---------------------------------------------------------------------------
.text:0000000000002A5F
.text:0000000000002A5F loc_2A5F:                               ; CODE XREF: main+980↑j
.text:0000000000002A5F                 movsxd  r8, r8d
.text:0000000000002A62                 mov     cs:bytes_per_block, r8
.text:0000000000002A69                 jmp     loc_250C
.text:0000000000002A6E ; ---------------------------------------------------------------------------
.text:0000000000002A6E
.text:0000000000002A6E loc_2A6E:                               ; CODE XREF: main+CFA↑j
.text:0000000000002A6E                 mov     r14d, 2
.text:0000000000002A74                 jmp     loc_27DF
.text:0000000000002A79 ; ---------------------------------------------------------------------------
.text:0000000000002A79
.text:0000000000002A79 loc_2A79:                               ; CODE XREF: main+BCF↑j
.text:0000000000002A79                                         ; main+C09↑j
.text:0000000000002A79                 mov     r15, [rsp+88h+var_88]
.text:0000000000002A7D                 mov     rdi, r13
.text:0000000000002A80                 mov     esi, 20h ; ' '
.text:0000000000002A85                 not     rdi
.text:0000000000002A88                 add     rdi, r12
.text:0000000000002A8B                 mov     byte ptr [r15+r13], 0
.text:0000000000002A90                 mov     r13, r15
.text:0000000000002A93                 call    cs:format_address
.text:0000000000002A99
.text:0000000000002A99 loc_2A99:                               ; CODE XREF: main+F7D↓j
.text:0000000000002A99                 movzx   eax, byte ptr [r13+0]
.text:0000000000002A9E                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002AA5                 movsx   edx, al
.text:0000000000002AA8                 test    edx, edx
.text:0000000000002AAA                 mov     [rsp+88h+longind], edx
.text:0000000000002AAE                 jz      loc_27FF
.text:0000000000002AB4                 lea     edx, [rax-7]    ; switch 7 cases
.text:0000000000002AB7                 cmp     dl, 6
.text:0000000000002ABA                 ja      def_2ADB        ; jumptable 0000000000002ADB default case
.text:0000000000002AC0                 lea     rsi, jpt_2ADB
.text:0000000000002AC7                 movzx   edx, dl
.text:0000000000002ACA                 movsxd  rax, ds:(jpt_2ADB - 0C484h)[rsi+rdx*4]
.text:0000000000002ACE                 mov     edx, 2          ; n
.text:0000000000002AD3                 add     rax, rsi
.text:0000000000002AD6                 mov     esi, 1          ; size
.text:0000000000002ADB                 jmp     rax             ; switch jump
.text:0000000000002ADD ; ---------------------------------------------------------------------------
.text:0000000000002ADD
.text:0000000000002ADD loc_2ADD:                               ; CODE XREF: main+F6B↑j
.text:0000000000002ADD                                         ; DATA XREF: .rodata:jpt_2ADB↓o
.text:0000000000002ADD                 lea     rdi, asc_AD60   ; jumptable 0000000000002ADB case 12
.text:0000000000002AE4                 call    _fwrite_unlocked
.text:0000000000002AE9
.text:0000000000002AE9 loc_2AE9:                               ; CODE XREF: main+F8B↓j
.text:0000000000002AE9                                         ; main+F99↓j ...
.text:0000000000002AE9                 add     r13, 1
.text:0000000000002AED                 jmp     short loc_2A99
.text:0000000000002AEF ; ---------------------------------------------------------------------------
.text:0000000000002AEF
.text:0000000000002AEF loc_2AEF:                               ; CODE XREF: main+F6B↑j
.text:0000000000002AEF                                         ; DATA XREF: .rodata:jpt_2ADB↓o
.text:0000000000002AEF                 lea     rdi, aV         ; jumptable 0000000000002ADB case 11
.text:0000000000002AF6                 call    _fwrite_unlocked
.text:0000000000002AFB                 jmp     short loc_2AE9
.text:0000000000002AFD ; ---------------------------------------------------------------------------
.text:0000000000002AFD
.text:0000000000002AFD loc_2AFD:                               ; CODE XREF: main+F6B↑j
.text:0000000000002AFD                                         ; DATA XREF: .rodata:jpt_2ADB↓o
.text:0000000000002AFD                 lea     rdi, aN         ; jumptable 0000000000002ADB case 10
.text:0000000000002B04                 call    _fwrite_unlocked
.text:0000000000002B09                 jmp     short loc_2AE9
.text:0000000000002B0B ; ---------------------------------------------------------------------------
.text:0000000000002B0B
.text:0000000000002B0B loc_2B0B:                               ; CODE XREF: main+F6B↑j
.text:0000000000002B0B                                         ; DATA XREF: .rodata:jpt_2ADB↓o
.text:0000000000002B0B                 lea     rdi, aT         ; jumptable 0000000000002ADB case 9
.text:0000000000002B12                 call    _fwrite_unlocked
.text:0000000000002B17                 jmp     short loc_2AE9
.text:0000000000002B19 ; ---------------------------------------------------------------------------
.text:0000000000002B19
.text:0000000000002B19 loc_2B19:                               ; CODE XREF: main+F6B↑j
.text:0000000000002B19                                         ; DATA XREF: .rodata:jpt_2ADB↓o
.text:0000000000002B19                 lea     rdi, aB         ; jumptable 0000000000002ADB case 8
.text:0000000000002B20                 call    _fwrite_unlocked
.text:0000000000002B25                 jmp     short loc_2AE9
.text:0000000000002B27 ; ---------------------------------------------------------------------------
.text:0000000000002B27
.text:0000000000002B27 loc_2B27:                               ; CODE XREF: main+F6B↑j
.text:0000000000002B27                                         ; DATA XREF: .rodata:jpt_2ADB↓o
.text:0000000000002B27                 lea     rdi, aA         ; jumptable 0000000000002ADB case 7
.text:0000000000002B2E                 call    _fwrite_unlocked
.text:0000000000002B33                 jmp     short loc_2AE9
.text:0000000000002B35 ; ---------------------------------------------------------------------------
.text:0000000000002B35
.text:0000000000002B35 loc_2B35:                               ; CODE XREF: main+F6B↑j
.text:0000000000002B35                                         ; DATA XREF: .rodata:jpt_2ADB↓o
.text:0000000000002B35                 lea     rdi, unk_AD66   ; jumptable 0000000000002ADB case 13
.text:0000000000002B3C                 call    _fwrite_unlocked
.text:0000000000002B41                 jmp     short loc_2AE9
.text:0000000000002B43 ; ---------------------------------------------------------------------------
.text:0000000000002B43
.text:0000000000002B43 def_2ADB:                               ; CODE XREF: main+F4A↑j
.text:0000000000002B43                 mov     rdx, [rcx+28h]  ; jumptable 0000000000002ADB default case
.text:0000000000002B47                 cmp     rdx, [rcx+30h]
.text:0000000000002B4B                 jnb     loc_2C2C
.text:0000000000002B51                 lea     rsi, [rdx+1]
.text:0000000000002B55                 mov     [rcx+28h], rsi
.text:0000000000002B59                 mov     [rdx], al
.text:0000000000002B5B                 jmp     short loc_2AE9
.text:0000000000002B5D ; ---------------------------------------------------------------------------
.text:0000000000002B5D
.text:0000000000002B5D loc_2B5D:                               ; CODE XREF: main+D07↑j
.text:0000000000002B5D                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002B64                 mov     rsi, rbx
.text:0000000000002B67                 mov     rdi, [r13+rax*8+0] ; nptr
.text:0000000000002B6C                 call    parse_old_offset
.text:0000000000002B71                 test    al, al
.text:0000000000002B73                 jz      loc_287D
.text:0000000000002B79                 mov     rax, qword ptr [rsp+88h+longind]
.text:0000000000002B7E                 mov     cs:flag_pseudo_start, 1
.text:0000000000002B85                 add     r13, 10h
.text:0000000000002B89                 xor     r14d, r14d
.text:0000000000002B8C                 mov     cs:n_bytes_to_skip, rax
.text:0000000000002B93                 mov     rax, [rsp+88h+var_60]
.text:0000000000002B98                 mov     [rsp+88h+var_70], rax
.text:0000000000002B9D                 jmp     loc_2142
.text:0000000000002BA2 ; ---------------------------------------------------------------------------
.text:0000000000002BA2
.text:0000000000002BA2 loc_2BA2:                               ; CODE XREF: main+A77↑j
.text:0000000000002BA2                                         ; main+A83↑j
.text:0000000000002BA2                 mov     rdi, [rsp+88h+var_88] ; ptr
.text:0000000000002BA6                 movzx   r13d, byte ptr [rsp+88h+var_80]
.text:0000000000002BAC                 call    _free
.text:0000000000002BB1                 xor     edi, edi        ; errnum
.text:0000000000002BB3                 call    check_and_close
.text:0000000000002BB8                 and     ebp, eax
.text:0000000000002BBA                 jmp     loc_2852
.text:0000000000002BBF ; ---------------------------------------------------------------------------
.text:0000000000002BBF
.text:0000000000002BBF loc_2BBF:                               ; CODE XREF: main+C63↑j
.text:0000000000002BBF                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002BC6                 lea     rsi, [rsp+88h+var_60]
.text:0000000000002BCB                 mov     rdi, [r13+rax*8+10h] ; nptr
.text:0000000000002BD0                 call    parse_old_offset
.text:0000000000002BD5                 test    al, al
.text:0000000000002BD7                 jz      loc_27D9
.text:0000000000002BDD                 mov     rax, qword ptr [rsp+88h+longind]
.text:0000000000002BE2                 mov     cs:flag_pseudo_start, 1
.text:0000000000002BE9                 mov     r14d, 1
.text:0000000000002BEF                 mov     cs:n_bytes_to_skip, rax
.text:0000000000002BF6                 mov     rax, [rsp+88h+var_60]
.text:0000000000002BFB                 mov     [rsp+88h+var_70], rax
.text:0000000000002C00                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002C07                 mov     rdx, [r13+rax*8+0]
.text:0000000000002C0C                 mov     [r13+rax*8+10h], rdx
.text:0000000000002C11                 add     r13, 10h
.text:0000000000002C15                 jmp     loc_2142
.text:0000000000002C1A ; ---------------------------------------------------------------------------
.text:0000000000002C1A
.text:0000000000002C1A loc_2C1A:                               ; CODE XREF: main+C97↑j
.text:0000000000002C1A                 mov     esi, 0Ah        ; int
.text:0000000000002C1F                 mov     rdi, rcx        ; _IO_FILE *
.text:0000000000002C22                 call    ___overflow
.text:0000000000002C27                 jmp     loc_2818
.text:0000000000002C2C ; ---------------------------------------------------------------------------
.text:0000000000002C2C
.text:0000000000002C2C loc_2C2C:                               ; CODE XREF: main+FDB↑j
.text:0000000000002C2C                 movzx   esi, al         ; int
.text:0000000000002C2F                 mov     rdi, rcx        ; _IO_FILE *
.text:0000000000002C32                 call    ___overflow
.text:0000000000002C37                 jmp     loc_2AE9
.text:0000000000002C3C ; ---------------------------------------------------------------------------
.text:0000000000002C3C
.text:0000000000002C3C loc_2C3C:                               ; CODE XREF: main+626↑j
.text:0000000000002C3C                 lea     rsi, aSkipBytesReadB ; "skip-bytes + read-bytes is too large"
.text:0000000000002C43                 mov     edx, 5          ; category
.text:0000000000002C48                 xor     edi, edi        ; domainname
.text:0000000000002C4A                 call    _dcgettext
.text:0000000000002C4F                 xor     esi, esi        ; errnum
.text:0000000000002C51                 mov     rdx, rax        ; format
.text:0000000000002C54                 mov     edi, 1          ; status
.text:0000000000002C59                 xor     eax, eax
.text:0000000000002C5B                 call    _error
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: main+616↑j
.text:0000000000002C60                 mov     edx, 1
.text:0000000000002C65                 jmp     loc_218C
.text:0000000000002C6A ; ---------------------------------------------------------------------------
.text:0000000000002C6A
.text:0000000000002C6A loc_2C6A:                               ; CODE XREF: main+7A1↑j
.text:0000000000002C6A                                         ; main+7AA↑j
.text:0000000000002C6A                 call    xalloc_die
.text:0000000000002C6F ; ---------------------------------------------------------------------------
.text:0000000000002C6F
.text:0000000000002C6F loc_2C6F:                               ; CODE XREF: main+798↑j
.text:0000000000002C6F                 mov     ecx, 1
.text:0000000000002C74                 jmp     loc_230E
.text:0000000000002C79 ; ---------------------------------------------------------------------------
.text:0000000000002C79
.text:0000000000002C79 loc_2C79:                               ; CODE XREF: main+829↑j
.text:0000000000002C79                 lea     rcx, __PRETTY_FUNCTION___7577 ; "dump"
.text:0000000000002C80                 lea     rsi, file       ; "../coreutils-8.31/src/od.c"
.text:0000000000002C87                 lea     rdi, assertion  ; "n_bytes_read == bytes_per_block"
.text:0000000000002C8E                 mov     edx, 576h       ; line
.text:0000000000002C93                 call    ___assert_fail
.text:0000000000002C98 ; ---------------------------------------------------------------------------
.text:0000000000002C98
.text:0000000000002C98 loc_2C98:                               ; CODE XREF: main:loc_28E6↑j
.text:0000000000002C98                 lea     rcx, __PRETTY_FUNCTION___7577 ; "dump"
.text:0000000000002C9F                 lea     rsi, file       ; "../coreutils-8.31/src/od.c"
.text:0000000000002CA6                 lea     rdi, assertion  ; "n_bytes_read == bytes_per_block"
.text:0000000000002CAD                 mov     edx, 584h       ; line
.text:0000000000002CB2                 call    ___assert_fail
.text:0000000000002CB7 ; ---------------------------------------------------------------------------
.text:0000000000002CB7
.text:0000000000002CB7 loc_2CB7:                               ; CODE XREF: main+779↑j
.text:0000000000002CB7                 call    ___stack_chk_fail
.text:0000000000002CBC ; ---------------------------------------------------------------------------
.text:0000000000002CBC
.text:0000000000002CBC loc_2CBC:                               ; CODE XREF: main+4F1↑j
.text:0000000000002CBC                                         ; main+706↑j
.text:0000000000002CBC                 lea     rsi, aInvalidOutputA ; "invalid output address radix '%c'; it m"...
.text:0000000000002CC3                 mov     edx, 5          ; category
.text:0000000000002CC8                 xor     edi, edi        ; domainname
.text:0000000000002CCA                 call    _dcgettext
.text:0000000000002CCF                 movsx   ecx, r15b
.text:0000000000002CD3                 mov     rdx, rax        ; format
.text:0000000000002CD6                 xor     esi, esi        ; errnum
.text:0000000000002CD8                 mov     edi, 1          ; status
.text:0000000000002CDD                 xor     eax, eax
.text:0000000000002CDF                 call    _error
.text:0000000000002CE4
.text:0000000000002CE4 loc_2CE4:                               ; CODE XREF: main+242↑j
.text:0000000000002CE4                 mov     r8, cs:optarg@@GLIBC_2_2_5
.text:0000000000002CEB                 mov     esi, [rsp+88h+longind]
.text:0000000000002CEF                 lea     rcx, long_options
.text:0000000000002CF6                 mov     edx, 77h ; 'w'
.text:0000000000002CFB                 mov     edi, eax
.text:0000000000002CFD                 call    xstrtol_fatal
.text:0000000000002D02 ; ---------------------------------------------------------------------------
.text:0000000000002D02
.text:0000000000002D02 loc_2D02:                               ; CODE XREF: main+5AA↑j
.text:0000000000002D02                 lea     rsi, aNoTypeMayBeSpe ; "no type may be specified when dumping s"...
.text:0000000000002D09                 mov     edx, 5          ; category
.text:0000000000002D0E                 xor     edi, edi        ; domainname
.text:0000000000002D10                 call    _dcgettext
.text:0000000000002D15                 xor     esi, esi        ; errnum
.text:0000000000002D17                 mov     rdx, rax        ; format
.text:0000000000002D1A                 mov     edi, 1          ; status
.text:0000000000002D1F                 xor     eax, eax
.text:0000000000002D21                 call    _error
.text:0000000000002D26
.text:0000000000002D26 loc_2D26:                               ; CODE XREF: main+2D8↑j
.text:0000000000002D26                 mov     r8, cs:optarg@@GLIBC_2_2_5
.text:0000000000002D2D                 mov     esi, [rsp+88h+longind]
.text:0000000000002D31                 lea     rcx, long_options
.text:0000000000002D38                 mov     edx, 6Ah ; 'j'
.text:0000000000002D3D                 mov     edi, eax
.text:0000000000002D3F                 call    xstrtol_fatal
.text:0000000000002D44 ; ---------------------------------------------------------------------------
.text:0000000000002D44
.text:0000000000002D44 loc_2D44:                               ; CODE XREF: main+3BF↑j
.text:0000000000002D44                 mov     r8, cs:optarg@@GLIBC_2_2_5
.text:0000000000002D4B                 mov     esi, [rsp+88h+longind]
.text:0000000000002D4F                 lea     rcx, long_options
.text:0000000000002D56                 mov     edx, 53h ; 'S'
.text:0000000000002D5B                 mov     edi, eax
.text:0000000000002D5D                 call    xstrtol_fatal
.text:0000000000002D5D ; } // starts at 1B70
.text:0000000000002D5D main            endp
.text:0000000000002D5D
.text:0000000000002D5D ; ---------------------------------------------------------------------------
.text:0000000000002D62                 align 10h
.text:0000000000002D70
.text:0000000000002D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D70
.text:0000000000002D70 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002D70
.text:0000000000002D70 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002D70                 public start
.text:0000000000002D70 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002D70 ; __unwind {
.text:0000000000002D70                 xor     ebp, ebp
.text:0000000000002D72                 mov     r9, rdx         ; rtld_fini
.text:0000000000002D75                 pop     rsi             ; argc
.text:0000000000002D76                 mov     rdx, rsp        ; ubp_av
.text:0000000000002D79                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000002D7D                 push    rax
.text:0000000000002D7E                 push    rsp             ; stack_end
.text:0000000000002D7F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002D86                 lea     rcx, __libc_csu_init ; init
.text:0000000000002D8D                 lea     rdi, main       ; main
.text:0000000000002D94                 call    cs:__libc_start_main_ptr
.text:0000000000002D9A                 hlt
.text:0000000000002D9A ; } // starts at 2D70
.text:0000000000002D9A start           endp
.text:0000000000002D9A
.text:0000000000002D9A ; ---------------------------------------------------------------------------
.text:0000000000002D9B                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DA0
.text:0000000000002DA0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002DA0
.text:0000000000002DA0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2E53↓p
.text:0000000000002DA0                 lea     rdi, __bss_start
.text:0000000000002DA7                 push    rbp
.text:0000000000002DA8                 lea     rax, __bss_start
.text:0000000000002DAF                 cmp     rax, rdi
.text:0000000000002DB2                 mov     rbp, rsp
.text:0000000000002DB5                 jz      short loc_2DD0
.text:0000000000002DB7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000002DBE                 test    rax, rax
.text:0000000000002DC1                 jz      short loc_2DD0
.text:0000000000002DC3                 pop     rbp
.text:0000000000002DC4                 jmp     rax
.text:0000000000002DC4 ; ---------------------------------------------------------------------------
.text:0000000000002DC6                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002DD0                                         ; deregister_tm_clones+21↑j
.text:0000000000002DD0                 pop     rbp
.text:0000000000002DD1                 retn
.text:0000000000002DD1 deregister_tm_clones endp
.text:0000000000002DD1
.text:0000000000002DD1 ; ---------------------------------------------------------------------------
.text:0000000000002DD2                 align 20h
.text:0000000000002DE0
.text:0000000000002DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DE0
.text:0000000000002DE0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002DE0
.text:0000000000002DE0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002DE0                 lea     rdi, __bss_start
.text:0000000000002DE7                 lea     rsi, __bss_start
.text:0000000000002DEE                 push    rbp
.text:0000000000002DEF                 sub     rsi, rdi
.text:0000000000002DF2                 mov     rbp, rsp
.text:0000000000002DF5                 sar     rsi, 3
.text:0000000000002DF9                 mov     rax, rsi
.text:0000000000002DFC                 shr     rax, 3Fh
.text:0000000000002E00                 add     rsi, rax
.text:0000000000002E03                 sar     rsi, 1
.text:0000000000002E06                 jz      short loc_2E20
.text:0000000000002E08                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000002E0F                 test    rax, rax
.text:0000000000002E12                 jz      short loc_2E20
.text:0000000000002E14                 pop     rbp
.text:0000000000002E15                 jmp     rax
.text:0000000000002E15 ; ---------------------------------------------------------------------------
.text:0000000000002E17                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002E20                                         ; register_tm_clones+32↑j
.text:0000000000002E20                 pop     rbp
.text:0000000000002E21                 retn
.text:0000000000002E21 register_tm_clones endp
.text:0000000000002E21
.text:0000000000002E21 ; ---------------------------------------------------------------------------
.text:0000000000002E22                 align 10h
.text:0000000000002E30
.text:0000000000002E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E30
.text:0000000000002E30 ; Attributes: info_from_lumina
.text:0000000000002E30
.text:0000000000002E30 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002E30                 cmp     cs:completed_7697, 0
.text:0000000000002E37                 jnz     short locret_2E68
.text:0000000000002E39                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002E41                 push    rbp
.text:0000000000002E42                 mov     rbp, rsp
.text:0000000000002E45                 jz      short loc_2E53
.text:0000000000002E47                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000002E4E                 call    __cxa_finalize
.text:0000000000002E53
.text:0000000000002E53 loc_2E53:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002E53                 call    deregister_tm_clones
.text:0000000000002E58                 mov     cs:completed_7697, 1
.text:0000000000002E5F                 pop     rbp
.text:0000000000002E60                 retn
.text:0000000000002E60 ; ---------------------------------------------------------------------------
.text:0000000000002E61                 align 8
.text:0000000000002E68
.text:0000000000002E68 locret_2E68:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002E68                 rep retn
.text:0000000000002E68 __do_global_dtors_aux endp
.text:0000000000002E68
.text:0000000000002E68 ; ---------------------------------------------------------------------------
.text:0000000000002E6A                 align 10h
.text:0000000000002E70
.text:0000000000002E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E70
.text:0000000000002E70 ; Attributes: bp-based frame
.text:0000000000002E70
.text:0000000000002E70 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002E70                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002E70                 push    rbp
.text:0000000000002E71                 mov     rbp, rsp
.text:0000000000002E74                 pop     rbp
.text:0000000000002E75                 jmp     register_tm_clones
.text:0000000000002E75 frame_dummy     endp
.text:0000000000002E75
.text:0000000000002E75 ; ---------------------------------------------------------------------------
.text:0000000000002E7A                 align 20h
.text:0000000000002E80
.text:0000000000002E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E80
.text:0000000000002E80
.text:0000000000002E80 format_address_none proc near           ; DATA XREF: main+5DB↑o
.text:0000000000002E80                                         ; main:loc_242C↑o
.text:0000000000002E80 ; __unwind {
.text:0000000000002E80                 rep retn
.text:0000000000002E80 ; } // starts at 2E80
.text:0000000000002E80 format_address_none endp
.text:0000000000002E80
.text:0000000000002E80 ; ---------------------------------------------------------------------------
.text:0000000000002E82                 align 10h
.text:0000000000002E90
.text:0000000000002E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E90
.text:0000000000002E90
.text:0000000000002E90 format_address_std proc near            ; CODE XREF: format_address_paren+2F↓p
.text:0000000000002E90                                         ; format_address_label+10↓p
.text:0000000000002E90                                         ; DATA XREF: ...
.text:0000000000002E90
.text:0000000000002E90 var_21          = byte ptr -21h
.text:0000000000002E90 var_20          = byte ptr -20h
.text:0000000000002E90 var_10          = qword ptr -10h
.text:0000000000002E90
.text:0000000000002E90 ; __unwind {
.text:0000000000002E90                 sub     rsp, 38h
.text:0000000000002E94                 mov     rcx, rdi
.text:0000000000002E97                 mov     rax, fs:28h
.text:0000000000002EA0                 mov     [rsp+38h+var_10], rax
.text:0000000000002EA5                 xor     eax, eax
.text:0000000000002EA7                 movsxd  rax, cs:address_pad_len
.text:0000000000002EAE                 lea     rdi, [rsp+38h+var_21]
.text:0000000000002EB3                 mov     [rsp+38h+var_21], sil
.text:0000000000002EB8                 mov     [rsp+38h+var_20], 0
.text:0000000000002EBD                 mov     rsi, rdi
.text:0000000000002EC0                 sub     rsi, rax
.text:0000000000002EC3                 mov     eax, cs:address_base
.text:0000000000002EC9                 cmp     eax, 0Ah
.text:0000000000002ECC                 jz      short loc_2F40
.text:0000000000002ECE                 cmp     eax, 10h
.text:0000000000002ED1                 jz      loc_2F80
.text:0000000000002ED7                 cmp     eax, 8
.text:0000000000002EDA                 jz      short loc_2F20
.text:0000000000002EDC
.text:0000000000002EDC loc_2EDC:                               ; CODE XREF: format_address_std+A7↓j
.text:0000000000002EDC                                         ; format_address_std+E5↓j ...
.text:0000000000002EDC                 cmp     rsi, rdi
.text:0000000000002EDF                 mov     rax, rdi
.text:0000000000002EE2                 jnb     short loc_2EF7
.text:0000000000002EE4                 nop     dword ptr [rax+00h]
.text:0000000000002EE8
.text:0000000000002EE8 loc_2EE8:                               ; CODE XREF: format_address_std+62↓j
.text:0000000000002EE8                 sub     rax, 1
.text:0000000000002EEC                 mov     byte ptr [rax], 30h ; '0'
.text:0000000000002EEF                 cmp     rsi, rax
.text:0000000000002EF2                 jnz     short loc_2EE8
.text:0000000000002EF4                 mov     rdi, rsi        ; s
.text:0000000000002EF7
.text:0000000000002EF7 loc_2EF7:                               ; CODE XREF: format_address_std+52↑j
.text:0000000000002EF7                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002EFE                 call    _fputs_unlocked
.text:0000000000002F03                 mov     rax, [rsp+38h+var_10]
.text:0000000000002F08                 xor     rax, fs:28h
.text:0000000000002F11                 jnz     loc_2FAE
.text:0000000000002F17                 add     rsp, 38h
.text:0000000000002F1B                 retn
.text:0000000000002F1B ; ---------------------------------------------------------------------------
.text:0000000000002F1C                 align 20h
.text:0000000000002F20
.text:0000000000002F20 loc_2F20:                               ; CODE XREF: format_address_std+4A↑j
.text:0000000000002F20                                         ; format_address_std+A5↓j
.text:0000000000002F20                 mov     eax, ecx
.text:0000000000002F22                 shr     rcx, 3
.text:0000000000002F26                 sub     rdi, 1
.text:0000000000002F2A                 and     eax, 7
.text:0000000000002F2D                 add     eax, 30h ; '0'
.text:0000000000002F30                 test    rcx, rcx
.text:0000000000002F33                 mov     [rdi], al
.text:0000000000002F35                 jnz     short loc_2F20
.text:0000000000002F37                 jmp     short loc_2EDC
.text:0000000000002F37 ; ---------------------------------------------------------------------------
.text:0000000000002F39                 align 20h
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: format_address_std+3C↑j
.text:0000000000002F40                 mov     r8, 0CCCCCCCCCCCCCCCDh
.text:0000000000002F4A                 nop     word ptr [rax+rax+00h]
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: format_address_std+E3↓j
.text:0000000000002F50                 mov     rax, rcx
.text:0000000000002F53                 sub     rdi, 1
.text:0000000000002F57                 mul     r8
.text:0000000000002F5A                 shr     rdx, 3
.text:0000000000002F5E                 lea     rax, [rdx+rdx*4]
.text:0000000000002F62                 add     rax, rax
.text:0000000000002F65                 sub     rcx, rax
.text:0000000000002F68                 add     ecx, 30h ; '0'
.text:0000000000002F6B                 test    rdx, rdx
.text:0000000000002F6E                 mov     [rdi], cl
.text:0000000000002F70                 mov     rcx, rdx
.text:0000000000002F73                 jnz     short loc_2F50
.text:0000000000002F75                 jmp     loc_2EDC
.text:0000000000002F75 ; ---------------------------------------------------------------------------
.text:0000000000002F7A                 align 20h
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: format_address_std+41↑j
.text:0000000000002F80                 lea     rdx, a0123456789abcd ; "0123456789abcdef"
.text:0000000000002F87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: format_address_std+117↓j
.text:0000000000002F90                 mov     rax, rcx
.text:0000000000002F93                 shr     rcx, 4
.text:0000000000002F97                 sub     rdi, 1
.text:0000000000002F9B                 and     eax, 0Fh
.text:0000000000002F9E                 test    rcx, rcx
.text:0000000000002FA1                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000002FA5                 mov     [rdi], al
.text:0000000000002FA7                 jnz     short loc_2F90
.text:0000000000002FA9                 jmp     loc_2EDC
.text:0000000000002FAE ; ---------------------------------------------------------------------------
.text:0000000000002FAE
.text:0000000000002FAE loc_2FAE:                               ; CODE XREF: format_address_std+81↑j
.text:0000000000002FAE                 call    ___stack_chk_fail
.text:0000000000002FAE ; } // starts at 2E90
.text:0000000000002FAE format_address_std endp
.text:0000000000002FAE
.text:0000000000002FAE ; ---------------------------------------------------------------------------
.text:0000000000002FB3                 align 20h
.text:0000000000002FC0
.text:0000000000002FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FC0
.text:0000000000002FC0
.text:0000000000002FC0 ; __int64 __fastcall parse_old_offset(char *nptr)
.text:0000000000002FC0 parse_old_offset proc near              ; CODE XREF: main+B6B↑p
.text:0000000000002FC0                                         ; main+C5C↑p ...
.text:0000000000002FC0 ; __unwind {
.text:0000000000002FC0                 movzx   edx, byte ptr [rdi]
.text:0000000000002FC3                 test    dl, dl
.text:0000000000002FC5                 jz      short loc_300C
.text:0000000000002FC7                 push    rbp
.text:0000000000002FC8                 push    rbx
.text:0000000000002FC9                 mov     rbp, rsi
.text:0000000000002FCC                 mov     rbx, rdi
.text:0000000000002FCF                 sub     rsp, 8
.text:0000000000002FD3                 cmp     dl, 2Bh ; '+'
.text:0000000000002FD6                 jz      short loc_300F
.text:0000000000002FD8
.text:0000000000002FD8 loc_2FD8:                               ; CODE XREF: parse_old_offset+53↓j
.text:0000000000002FD8                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000002FDD                 mov     rdi, rbx        ; s
.text:0000000000002FE0                 call    _strchr
.text:0000000000002FE5                 test    rax, rax
.text:0000000000002FE8                 mov     edx, 0Ah
.text:0000000000002FED                 jz      short loc_3015
.text:0000000000002FEF
.text:0000000000002FEF loc_2FEF:                               ; CODE XREF: parse_old_offset+5D↓j
.text:0000000000002FEF                                         ; parse_old_offset+74↓j
.text:0000000000002FEF                 lea     r8, aBb         ; "Bb"
.text:0000000000002FF6                 mov     rcx, rbp
.text:0000000000002FF9                 xor     esi, esi
.text:0000000000002FFB                 mov     rdi, rbx        ; nptr
.text:0000000000002FFE                 call    xstrtoumax
.text:0000000000003003                 test    eax, eax
.text:0000000000003005                 pop     rdx
.text:0000000000003006                 setz    al
.text:0000000000003009                 pop     rbx
.text:000000000000300A                 pop     rbp
.text:000000000000300B                 retn
.text:000000000000300C ; ---------------------------------------------------------------------------
.text:000000000000300C
.text:000000000000300C loc_300C:                               ; CODE XREF: parse_old_offset+5↑j
.text:000000000000300C                 xor     eax, eax
.text:000000000000300E                 retn
.text:000000000000300F ; ---------------------------------------------------------------------------
.text:000000000000300F
.text:000000000000300F loc_300F:                               ; CODE XREF: parse_old_offset+16↑j
.text:000000000000300F                 add     rbx, 1
.text:0000000000003013                 jmp     short loc_2FD8
.text:0000000000003015 ; ---------------------------------------------------------------------------
.text:0000000000003015
.text:0000000000003015 loc_3015:                               ; CODE XREF: parse_old_offset+2D↑j
.text:0000000000003015                 cmp     byte ptr [rbx], 30h ; '0'
.text:0000000000003018                 mov     edx, 8
.text:000000000000301D                 jnz     short loc_2FEF
.text:000000000000301F                 movzx   eax, byte ptr [rbx+1]
.text:0000000000003023                 xor     edx, edx
.text:0000000000003025                 and     eax, 0FFFFFFDFh
.text:0000000000003028                 cmp     al, 58h ; 'X'
.text:000000000000302A                 setz    dl
.text:000000000000302D                 lea     edx, ds:8[rdx*8]
.text:0000000000003034                 jmp     short loc_2FEF
.text:0000000000003034 ; } // starts at 2FC0
.text:0000000000003034 parse_old_offset endp
.text:0000000000003034
.text:0000000000003034 ; ---------------------------------------------------------------------------
.text:0000000000003036                 align 20h
.text:0000000000003040
.text:0000000000003040 ; =============== S U B R O U T I N E =======================================
.text:0000000000003040
.text:0000000000003040
.text:0000000000003040 print_named_ascii proc near             ; DATA XREF: decode_format_string+27B↓o
.text:0000000000003040
.text:0000000000003040 var_58          = qword ptr -58h
.text:0000000000003040 var_50          = qword ptr -50h
.text:0000000000003040 var_42          = byte ptr -42h
.text:0000000000003040 var_41          = byte ptr -41h
.text:0000000000003040 var_40          = qword ptr -40h
.text:0000000000003040
.text:0000000000003040 ; __unwind {
.text:0000000000003040                 push    r15
.text:0000000000003042                 push    r14
.text:0000000000003044                 push    r13
.text:0000000000003046                 push    r12
.text:0000000000003048                 push    rbp
.text:0000000000003049                 push    rbx
.text:000000000000304A                 sub     rsp, 28h
.text:000000000000304E                 mov     rax, fs:28h
.text:0000000000003057                 mov     [rsp+58h+var_40], rax
.text:000000000000305C                 xor     eax, eax
.text:000000000000305E                 cmp     rdi, rsi
.text:0000000000003061                 jbe     loc_3108
.text:0000000000003067                 mov     r13d, r8d
.text:000000000000306A                 mov     rbp, rdi
.text:000000000000306D                 lea     r8, [rdi-1]
.text:0000000000003071                 movsxd  r12, r9d
.text:0000000000003074                 sub     rbp, rsi
.text:0000000000003077                 mov     rbx, rdi
.text:000000000000307A                 lea     rax, [rdx+rbp]
.text:000000000000307E                 mov     r14, rdx
.text:0000000000003081                 imul    r8, r12
.text:0000000000003085                 mov     [rsp+58h+var_58], rax
.text:0000000000003089                 lea     rax, [rsp+58h+var_42]
.text:000000000000308E                 mov     [rsp+58h+var_50], rax
.text:0000000000003093                 mov     r15, r8
.text:0000000000003096                 jmp     short loc_30CF
.text:0000000000003096 ; ---------------------------------------------------------------------------
.text:0000000000003098                 align 20h
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: print_named_ascii+B3↓j
.text:00000000000030A0                 lea     rcx, charname   ; "nul"
.text:00000000000030A7                 movzx   eax, al
.text:00000000000030AA                 lea     rdx, [rcx+rax*4]
.text:00000000000030AE
.text:00000000000030AE loc_30AE:                               ; CODE XREF: print_named_ascii+AF↓j
.text:00000000000030AE                                         ; print_named_ascii+C3↓j
.text:00000000000030AE                 sub     r9d, ebp
.text:00000000000030B1                 lea     rdi, aS         ; "%*s"
.text:00000000000030B8                 xor     eax, eax
.text:00000000000030BA                 lea     esi, [r9+r13]
.text:00000000000030BE                 sub     r15, r12
.text:00000000000030C1                 call    xasprintf
.text:00000000000030C6                 cmp     r14, [rsp+58h+var_58]
.text:00000000000030CA                 mov     r9d, ebp
.text:00000000000030CD                 jz      short loc_3108
.text:00000000000030CF
.text:00000000000030CF loc_30CF:                               ; CODE XREF: print_named_ascii+56↑j
.text:00000000000030CF                 xor     edx, edx
.text:00000000000030D1                 mov     rax, r15
.text:00000000000030D4                 add     r14, 1
.text:00000000000030D8                 div     rbx
.text:00000000000030DB                 lea     rdx, aDel       ; "del"
.text:00000000000030E2                 mov     rbp, rax
.text:00000000000030E5                 movzx   eax, byte ptr [r14-1]
.text:00000000000030EA                 and     eax, 7Fh
.text:00000000000030ED                 cmp     al, 7Fh
.text:00000000000030EF                 jz      short loc_30AE
.text:00000000000030F1                 cmp     al, 20h ; ' '
.text:00000000000030F3                 jbe     short loc_30A0
.text:00000000000030F5                 mov     [rsp+58h+var_42], al
.text:00000000000030F9                 mov     [rsp+58h+var_41], 0
.text:00000000000030FE                 mov     rdx, [rsp+58h+var_50]
.text:0000000000003103                 jmp     short loc_30AE
.text:0000000000003103 ; ---------------------------------------------------------------------------
.text:0000000000003105                 align 8
.text:0000000000003108
.text:0000000000003108 loc_3108:                               ; CODE XREF: print_named_ascii+21↑j
.text:0000000000003108                                         ; print_named_ascii+8D↑j
.text:0000000000003108                 mov     rax, [rsp+58h+var_40]
.text:000000000000310D                 xor     rax, fs:28h
.text:0000000000003116                 jnz     short loc_3127
.text:0000000000003118                 add     rsp, 28h
.text:000000000000311C                 pop     rbx
.text:000000000000311D                 pop     rbp
.text:000000000000311E                 pop     r12
.text:0000000000003120                 pop     r13
.text:0000000000003122                 pop     r14
.text:0000000000003124                 pop     r15
.text:0000000000003126                 retn
.text:0000000000003127 ; ---------------------------------------------------------------------------
.text:0000000000003127
.text:0000000000003127 loc_3127:                               ; CODE XREF: print_named_ascii+D6↑j
.text:0000000000003127                 call    ___stack_chk_fail
.text:0000000000003127 ; } // starts at 3040
.text:0000000000003127 print_named_ascii endp
.text:0000000000003127
.text:0000000000003127 ; ---------------------------------------------------------------------------
.text:000000000000312C                 align 10h
.text:0000000000003130
.text:0000000000003130 ; =============== S U B R O U T I N E =======================================
.text:0000000000003130
.text:0000000000003130
.text:0000000000003130 print_long_long proc near               ; DATA XREF: decode_format_string:loc_3ED0↓o
.text:0000000000003130
.text:0000000000003130 var_60          = qword ptr -60h
.text:0000000000003130 var_54          = dword ptr -54h
.text:0000000000003130 var_50          = qword ptr -50h
.text:0000000000003130 var_48          = qword ptr -48h
.text:0000000000003130 var_40          = qword ptr -40h
.text:0000000000003130
.text:0000000000003130 ; __unwind {
.text:0000000000003130                 push    r15
.text:0000000000003132                 push    r14
.text:0000000000003134                 push    r13
.text:0000000000003136                 push    r12
.text:0000000000003138                 push    rbp
.text:0000000000003139                 push    rbx
.text:000000000000313A                 sub     rsp, 38h
.text:000000000000313E                 mov     rax, fs:28h
.text:0000000000003147                 mov     [rsp+68h+var_40], rax
.text:000000000000314C                 xor     eax, eax
.text:000000000000314E                 cmp     rdi, rsi
.text:0000000000003151                 mov     [rsp+68h+var_60], rcx
.text:0000000000003156                 mov     [rsp+68h+var_54], r8d
.text:000000000000315B                 jbe     loc_3200
.text:0000000000003161                 lea     rcx, [rdi-1]
.text:0000000000003165                 movsxd  rax, r9d
.text:0000000000003168                 mov     rbx, rdi
.text:000000000000316B                 mov     rbp, rsi
.text:000000000000316E                 mov     r15, rdx
.text:0000000000003171                 mov     [rsp+68h+var_50], rax
.text:0000000000003176                 imul    rcx, rax
.text:000000000000317A                 mov     r13, rdi
.text:000000000000317D                 mov     r14, rcx
.text:0000000000003180                 jmp     short loc_31A8
.text:0000000000003180 ; ---------------------------------------------------------------------------
.text:0000000000003182                 align 8
.text:0000000000003188
.text:0000000000003188 loc_3188:                               ; CODE XREF: print_long_long+99↓j
.text:0000000000003188                 mov     rdx, [r15]
.text:000000000000318B
.text:000000000000318B loc_318B:                               ; CODE XREF: print_long_long+CA↓j
.text:000000000000318B                 mov     rdi, [rsp+68h+var_60]
.text:0000000000003190                 xor     eax, eax
.text:0000000000003192                 add     r15, 8
.text:0000000000003196                 call    xasprintf
.text:000000000000319B                 sub     r14, [rsp+68h+var_50]
.text:00000000000031A0                 cmp     r13, rbp
.text:00000000000031A3                 mov     r9d, r12d
.text:00000000000031A6                 jz      short loc_3200
.text:00000000000031A8
.text:00000000000031A8 loc_31A8:                               ; CODE XREF: print_long_long+50↑j
.text:00000000000031A8                 xor     edx, edx
.text:00000000000031AA                 mov     rax, r14
.text:00000000000031AD                 sub     r13, 1
.text:00000000000031B1                 div     rbx
.text:00000000000031B4                 sub     r9d, eax
.text:00000000000031B7                 cmp     cs:input_swap, 0
.text:00000000000031BE                 mov     r12, rax
.text:00000000000031C1                 mov     eax, [rsp+68h+var_54]
.text:00000000000031C5                 lea     esi, [r9+rax]
.text:00000000000031C9                 jz      short loc_3188
.text:00000000000031CB                 lea     rdx, [r15+7]
.text:00000000000031CF                 lea     r9, [rsp+68h+var_48]
.text:00000000000031D4                 xor     eax, eax
.text:00000000000031D6                 db      2Eh
.text:00000000000031D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000031E0
.text:00000000000031E0 loc_31E0:                               ; CODE XREF: print_long_long+C3↓j
.text:00000000000031E0                 movzx   edi, byte ptr [rdx]
.text:00000000000031E3                 sub     rdx, 1
.text:00000000000031E7                 mov     [r9+rax], dil
.text:00000000000031EB                 add     rax, 1
.text:00000000000031EF                 cmp     rax, 8
.text:00000000000031F3                 jnz     short loc_31E0
.text:00000000000031F5                 mov     rdx, [rsp+68h+var_48]
.text:00000000000031FA                 jmp     short loc_318B
.text:00000000000031FA ; ---------------------------------------------------------------------------
.text:00000000000031FC                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: print_long_long+2B↑j
.text:0000000000003200                                         ; print_long_long+76↑j
.text:0000000000003200                 mov     rax, [rsp+68h+var_40]
.text:0000000000003205                 xor     rax, fs:28h
.text:000000000000320E                 jnz     short loc_321F
.text:0000000000003210                 add     rsp, 38h
.text:0000000000003214                 pop     rbx
.text:0000000000003215                 pop     rbp
.text:0000000000003216                 pop     r12
.text:0000000000003218                 pop     r13
.text:000000000000321A                 pop     r14
.text:000000000000321C                 pop     r15
.text:000000000000321E                 retn
.text:000000000000321F ; ---------------------------------------------------------------------------
.text:000000000000321F
.text:000000000000321F loc_321F:                               ; CODE XREF: print_long_long+DE↑j
.text:000000000000321F                 call    ___stack_chk_fail
.text:000000000000321F ; } // starts at 3130
.text:000000000000321F print_long_long endp
.text:000000000000321F
.text:000000000000321F ; ---------------------------------------------------------------------------
.text:0000000000003224                 align 10h
.text:0000000000003230
.text:0000000000003230 ; =============== S U B R O U T I N E =======================================
.text:0000000000003230
.text:0000000000003230
.text:0000000000003230 print_long      proc near               ; DATA XREF: decode_format_string:loc_3EE0↓o
.text:0000000000003230
.text:0000000000003230 var_60          = qword ptr -60h
.text:0000000000003230 var_54          = dword ptr -54h
.text:0000000000003230 var_50          = qword ptr -50h
.text:0000000000003230 var_48          = qword ptr -48h
.text:0000000000003230 var_40          = qword ptr -40h
.text:0000000000003230
.text:0000000000003230 ; __unwind {
.text:0000000000003230                 push    r15
.text:0000000000003232                 push    r14
.text:0000000000003234                 push    r13
.text:0000000000003236                 push    r12
.text:0000000000003238                 push    rbp
.text:0000000000003239                 push    rbx
.text:000000000000323A                 sub     rsp, 38h
.text:000000000000323E                 mov     rax, fs:28h
.text:0000000000003247                 mov     [rsp+68h+var_40], rax
.text:000000000000324C                 xor     eax, eax
.text:000000000000324E                 cmp     rdi, rsi
.text:0000000000003251                 mov     [rsp+68h+var_60], rcx
.text:0000000000003256                 mov     [rsp+68h+var_54], r8d
.text:000000000000325B                 jbe     loc_3300
.text:0000000000003261                 lea     rcx, [rdi-1]
.text:0000000000003265                 movsxd  rax, r9d
.text:0000000000003268                 mov     rbx, rdi
.text:000000000000326B                 mov     rbp, rsi
.text:000000000000326E                 mov     r15, rdx
.text:0000000000003271                 mov     [rsp+68h+var_50], rax
.text:0000000000003276                 imul    rcx, rax
.text:000000000000327A                 mov     r13, rdi
.text:000000000000327D                 mov     r14, rcx
.text:0000000000003280                 jmp     short loc_32A8
.text:0000000000003280 ; ---------------------------------------------------------------------------
.text:0000000000003282                 align 8
.text:0000000000003288
.text:0000000000003288 loc_3288:                               ; CODE XREF: print_long+99↓j
.text:0000000000003288                 mov     rdx, [r15]
.text:000000000000328B
.text:000000000000328B loc_328B:                               ; CODE XREF: print_long+CA↓j
.text:000000000000328B                 mov     rdi, [rsp+68h+var_60]
.text:0000000000003290                 xor     eax, eax
.text:0000000000003292                 add     r15, 8
.text:0000000000003296                 call    xasprintf
.text:000000000000329B                 sub     r14, [rsp+68h+var_50]
.text:00000000000032A0                 cmp     r13, rbp
.text:00000000000032A3                 mov     r9d, r12d
.text:00000000000032A6                 jz      short loc_3300
.text:00000000000032A8
.text:00000000000032A8 loc_32A8:                               ; CODE XREF: print_long+50↑j
.text:00000000000032A8                 xor     edx, edx
.text:00000000000032AA                 mov     rax, r14
.text:00000000000032AD                 sub     r13, 1
.text:00000000000032B1                 div     rbx
.text:00000000000032B4                 sub     r9d, eax
.text:00000000000032B7                 cmp     cs:input_swap, 0
.text:00000000000032BE                 mov     r12, rax
.text:00000000000032C1                 mov     eax, [rsp+68h+var_54]
.text:00000000000032C5                 lea     esi, [r9+rax]
.text:00000000000032C9                 jz      short loc_3288
.text:00000000000032CB                 lea     rdx, [r15+7]
.text:00000000000032CF                 lea     r9, [rsp+68h+var_48]
.text:00000000000032D4                 xor     eax, eax
.text:00000000000032D6                 db      2Eh
.text:00000000000032D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: print_long+C3↓j
.text:00000000000032E0                 movzx   edi, byte ptr [rdx]
.text:00000000000032E3                 sub     rdx, 1
.text:00000000000032E7                 mov     [r9+rax], dil
.text:00000000000032EB                 add     rax, 1
.text:00000000000032EF                 cmp     rax, 8
.text:00000000000032F3                 jnz     short loc_32E0
.text:00000000000032F5                 mov     rdx, [rsp+68h+var_48]
.text:00000000000032FA                 jmp     short loc_328B
.text:00000000000032FA ; ---------------------------------------------------------------------------
.text:00000000000032FC                 align 20h
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: print_long+2B↑j
.text:0000000000003300                                         ; print_long+76↑j
.text:0000000000003300                 mov     rax, [rsp+68h+var_40]
.text:0000000000003305                 xor     rax, fs:28h
.text:000000000000330E                 jnz     short loc_331F
.text:0000000000003310                 add     rsp, 38h
.text:0000000000003314                 pop     rbx
.text:0000000000003315                 pop     rbp
.text:0000000000003316                 pop     r12
.text:0000000000003318                 pop     r13
.text:000000000000331A                 pop     r14
.text:000000000000331C                 pop     r15
.text:000000000000331E                 retn
.text:000000000000331F ; ---------------------------------------------------------------------------
.text:000000000000331F
.text:000000000000331F loc_331F:                               ; CODE XREF: print_long+DE↑j
.text:000000000000331F                 call    ___stack_chk_fail
.text:000000000000331F ; } // starts at 3230
.text:000000000000331F print_long      endp
.text:000000000000331F
.text:000000000000331F ; ---------------------------------------------------------------------------
.text:0000000000003324                 align 10h
.text:0000000000003330
.text:0000000000003330 ; =============== S U B R O U T I N E =======================================
.text:0000000000003330
.text:0000000000003330
.text:0000000000003330 print_int       proc near               ; DATA XREF: decode_format_string:loc_3EF0↓o
.text:0000000000003330
.text:0000000000003330 var_68          = qword ptr -68h
.text:0000000000003330 var_60          = qword ptr -60h
.text:0000000000003330 var_54          = dword ptr -54h
.text:0000000000003330 var_50          = qword ptr -50h
.text:0000000000003330 var_40          = qword ptr -40h
.text:0000000000003330
.text:0000000000003330 ; __unwind {
.text:0000000000003330                 push    r15
.text:0000000000003332                 push    r14
.text:0000000000003334                 push    r13
.text:0000000000003336                 push    r12
.text:0000000000003338                 push    rbp
.text:0000000000003339                 push    rbx
.text:000000000000333A                 mov     rbx, rdi
.text:000000000000333D                 sub     rsp, 38h
.text:0000000000003341                 mov     rdi, fs:28h
.text:000000000000334A                 mov     [rsp+68h+var_40], rdi
.text:000000000000334F                 xor     edi, edi
.text:0000000000003351                 cmp     rbx, rsi
.text:0000000000003354                 mov     [rsp+68h+var_68], rsi
.text:0000000000003358                 mov     [rsp+68h+var_60], rcx
.text:000000000000335D                 mov     [rsp+68h+var_54], r8d
.text:0000000000003362                 jbe     loc_3400
.text:0000000000003368                 lea     rcx, [rbx-1]
.text:000000000000336C                 movsxd  rax, r9d
.text:000000000000336F                 mov     r15, rdx
.text:0000000000003372                 mov     [rsp+68h+var_50], rax
.text:0000000000003377                 mov     r13, rbx
.text:000000000000337A                 imul    rcx, rax
.text:000000000000337E                 mov     r14, rcx
.text:0000000000003381                 jmp     short loc_33A9
.text:0000000000003381 ; ---------------------------------------------------------------------------
.text:0000000000003383                 align 8
.text:0000000000003388
.text:0000000000003388 loc_3388:                               ; CODE XREF: print_int+9A↓j
.text:0000000000003388                 mov     edx, [r15]
.text:000000000000338B
.text:000000000000338B loc_338B:                               ; CODE XREF: print_int+C9↓j
.text:000000000000338B                 mov     rdi, [rsp+68h+var_60]
.text:0000000000003390                 xor     eax, eax
.text:0000000000003392                 add     r15, 4
.text:0000000000003396                 call    xasprintf
.text:000000000000339B                 sub     r14, [rsp+68h+var_50]
.text:00000000000033A0                 cmp     r13, [rsp+68h+var_68]
.text:00000000000033A4                 mov     r9d, ebp
.text:00000000000033A7                 jz      short loc_3400
.text:00000000000033A9
.text:00000000000033A9 loc_33A9:                               ; CODE XREF: print_int+51↑j
.text:00000000000033A9                 xor     edx, edx
.text:00000000000033AB                 mov     rax, r14
.text:00000000000033AE                 sub     r13, 1
.text:00000000000033B2                 div     rbx
.text:00000000000033B5                 sub     r9d, eax
.text:00000000000033B8                 cmp     cs:input_swap, 0
.text:00000000000033BF                 mov     rbp, rax
.text:00000000000033C2                 mov     eax, [rsp+68h+var_54]
.text:00000000000033C6                 lea     esi, [r9+rax]
.text:00000000000033CA                 jz      short loc_3388
.text:00000000000033CC                 mov     r12b, [r15+3]
.text:00000000000033D0                 movzx   ecx, byte ptr [r15+2]
.text:00000000000033D5                 movzx   edx, byte ptr [r15+1]
.text:00000000000033DA                 mov     eax, r12d
.text:00000000000033DD                 mov     ah, cl
.text:00000000000033DF                 movzx   r10d, ax
.text:00000000000033E3                 movzx   eax, byte ptr [r15]
.text:00000000000033E7                 shl     edx, 10h
.text:00000000000033EA                 or      r10d, edx
.text:00000000000033ED                 shl     eax, 18h
.text:00000000000033F0                 or      r10d, eax
.text:00000000000033F3                 mov     r12d, r10d
.text:00000000000033F6                 mov     edx, r10d
.text:00000000000033F9                 jmp     short loc_338B
.text:00000000000033F9 ; ---------------------------------------------------------------------------
.text:00000000000033FB                 align 20h
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: print_int+32↑j
.text:0000000000003400                                         ; print_int+77↑j
.text:0000000000003400                 mov     rax, [rsp+68h+var_40]
.text:0000000000003405                 xor     rax, fs:28h
.text:000000000000340E                 jnz     short loc_341F
.text:0000000000003410                 add     rsp, 38h
.text:0000000000003414                 pop     rbx
.text:0000000000003415                 pop     rbp
.text:0000000000003416                 pop     r12
.text:0000000000003418                 pop     r13
.text:000000000000341A                 pop     r14
.text:000000000000341C                 pop     r15
.text:000000000000341E                 retn
.text:000000000000341F ; ---------------------------------------------------------------------------
.text:000000000000341F
.text:000000000000341F loc_341F:                               ; CODE XREF: print_int+DE↑j
.text:000000000000341F                 call    ___stack_chk_fail
.text:000000000000341F ; } // starts at 3330
.text:000000000000341F print_int       endp
.text:000000000000341F
.text:000000000000341F ; ---------------------------------------------------------------------------
.text:0000000000003424                 align 10h
.text:0000000000003430
.text:0000000000003430 ; =============== S U B R O U T I N E =======================================
.text:0000000000003430
.text:0000000000003430
.text:0000000000003430 print_short     proc near               ; DATA XREF: decode_format_string:loc_3F00↓o
.text:0000000000003430
.text:0000000000003430 var_68          = qword ptr -68h
.text:0000000000003430 var_5C          = dword ptr -5Ch
.text:0000000000003430 var_58          = qword ptr -58h
.text:0000000000003430 var_50          = qword ptr -50h
.text:0000000000003430 var_40          = qword ptr -40h
.text:0000000000003430
.text:0000000000003430 ; __unwind {
.text:0000000000003430                 push    r15
.text:0000000000003432                 push    r14
.text:0000000000003434                 push    r13
.text:0000000000003436                 push    r12
.text:0000000000003438                 push    rbp
.text:0000000000003439                 push    rbx
.text:000000000000343A                 sub     rsp, 38h
.text:000000000000343E                 mov     rax, fs:28h
.text:0000000000003447                 mov     [rsp+68h+var_40], rax
.text:000000000000344C                 xor     eax, eax
.text:000000000000344E                 cmp     rdi, rsi
.text:0000000000003451                 mov     [rsp+68h+var_68], rcx
.text:0000000000003455                 mov     [rsp+68h+var_5C], r8d
.text:000000000000345A                 jbe     loc_34F0
.text:0000000000003460                 lea     r8, [rdi-1]
.text:0000000000003464                 movsxd  rax, r9d
.text:0000000000003467                 mov     rbx, rdi
.text:000000000000346A                 mov     [rsp+68h+var_50], rax
.text:000000000000346F                 mov     rbp, rdx
.text:0000000000003472                 xor     r15d, r15d
.text:0000000000003475                 imul    r8, rax
.text:0000000000003479                 mov     rax, rdi
.text:000000000000347C                 sub     rax, rsi
.text:000000000000347F                 mov     [rsp+68h+var_58], rax
.text:0000000000003484                 mov     r13, r8
.text:0000000000003487                 jmp     short loc_34B4
.text:0000000000003487 ; ---------------------------------------------------------------------------
.text:0000000000003489                 align 10h
.text:0000000000003490
.text:0000000000003490 loc_3490:                               ; CODE XREF: print_short+A1↓j
.text:0000000000003490                 movzx   edx, word ptr [rbp+r15*2+0]
.text:0000000000003496
.text:0000000000003496 loc_3496:                               ; CODE XREF: print_short+B9↓j
.text:0000000000003496                 mov     rdi, [rsp+68h+var_68]
.text:000000000000349A                 xor     eax, eax
.text:000000000000349C                 add     r15, 1
.text:00000000000034A0                 call    xasprintf
.text:00000000000034A5                 sub     r13, [rsp+68h+var_50]
.text:00000000000034AA                 cmp     [rsp+68h+var_58], r15
.text:00000000000034AF                 mov     r9d, r12d
.text:00000000000034B2                 jz      short loc_34F0
.text:00000000000034B4
.text:00000000000034B4 loc_34B4:                               ; CODE XREF: print_short+57↑j
.text:00000000000034B4                 xor     edx, edx
.text:00000000000034B6                 mov     rax, r13
.text:00000000000034B9                 div     rbx
.text:00000000000034BC                 sub     r9d, eax
.text:00000000000034BF                 cmp     cs:input_swap, 0
.text:00000000000034C6                 mov     r12, rax
.text:00000000000034C9                 mov     eax, [rsp+68h+var_5C]
.text:00000000000034CD                 lea     esi, [r9+rax]
.text:00000000000034D1                 jz      short loc_3490
.text:00000000000034D3                 mov     r14b, [rbp+r15*2+1]
.text:00000000000034D8                 movzx   eax, byte ptr [rbp+r15*2+0]
.text:00000000000034DE                 mov     ecx, r14d
.text:00000000000034E1                 mov     ch, al
.text:00000000000034E3                 mov     r14d, ecx
.text:00000000000034E6                 movzx   edx, cx
.text:00000000000034E9                 jmp     short loc_3496
.text:00000000000034E9 ; ---------------------------------------------------------------------------
.text:00000000000034EB                 align 10h
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: print_short+2A↑j
.text:00000000000034F0                                         ; print_short+82↑j
.text:00000000000034F0                 mov     rax, [rsp+68h+var_40]
.text:00000000000034F5                 xor     rax, fs:28h
.text:00000000000034FE                 jnz     short loc_350F
.text:0000000000003500                 add     rsp, 38h
.text:0000000000003504                 pop     rbx
.text:0000000000003505                 pop     rbp
.text:0000000000003506                 pop     r12
.text:0000000000003508                 pop     r13
.text:000000000000350A                 pop     r14
.text:000000000000350C                 pop     r15
.text:000000000000350E                 retn
.text:000000000000350F ; ---------------------------------------------------------------------------
.text:000000000000350F
.text:000000000000350F loc_350F:                               ; CODE XREF: print_short+CE↑j
.text:000000000000350F                 call    ___stack_chk_fail
.text:000000000000350F ; } // starts at 3430
.text:000000000000350F print_short     endp
.text:000000000000350F
.text:000000000000350F ; ---------------------------------------------------------------------------
.text:0000000000003514                 align 20h
.text:0000000000003520
.text:0000000000003520 ; =============== S U B R O U T I N E =======================================
.text:0000000000003520
.text:0000000000003520
.text:0000000000003520 print_s_short   proc near               ; DATA XREF: decode_format_string+467↓o
.text:0000000000003520
.text:0000000000003520 var_68          = qword ptr -68h
.text:0000000000003520 var_5C          = dword ptr -5Ch
.text:0000000000003520 var_58          = qword ptr -58h
.text:0000000000003520 var_50          = qword ptr -50h
.text:0000000000003520 var_40          = qword ptr -40h
.text:0000000000003520
.text:0000000000003520 ; __unwind {
.text:0000000000003520                 push    r15
.text:0000000000003522                 push    r14
.text:0000000000003524                 push    r13
.text:0000000000003526                 push    r12
.text:0000000000003528                 push    rbp
.text:0000000000003529                 push    rbx
.text:000000000000352A                 sub     rsp, 38h
.text:000000000000352E                 mov     rax, fs:28h
.text:0000000000003537                 mov     [rsp+68h+var_40], rax
.text:000000000000353C                 xor     eax, eax
.text:000000000000353E                 cmp     rdi, rsi
.text:0000000000003541                 mov     [rsp+68h+var_68], rcx
.text:0000000000003545                 mov     [rsp+68h+var_5C], r8d
.text:000000000000354A                 jbe     loc_35E0
.text:0000000000003550                 lea     r8, [rdi-1]
.text:0000000000003554                 movsxd  rax, r9d
.text:0000000000003557                 mov     rbx, rdi
.text:000000000000355A                 mov     [rsp+68h+var_50], rax
.text:000000000000355F                 mov     rbp, rdx
.text:0000000000003562                 xor     r15d, r15d
.text:0000000000003565                 imul    r8, rax
.text:0000000000003569                 mov     rax, rdi
.text:000000000000356C                 sub     rax, rsi
.text:000000000000356F                 mov     [rsp+68h+var_58], rax
.text:0000000000003574                 mov     r13, r8
.text:0000000000003577                 jmp     short loc_35A4
.text:0000000000003577 ; ---------------------------------------------------------------------------
.text:0000000000003579                 align 20h
.text:0000000000003580
.text:0000000000003580 loc_3580:                               ; CODE XREF: print_s_short+A1↓j
.text:0000000000003580                 movsx   edx, word ptr [rbp+r15*2+0]
.text:0000000000003586
.text:0000000000003586 loc_3586:                               ; CODE XREF: print_s_short+B9↓j
.text:0000000000003586                 mov     rdi, [rsp+68h+var_68]
.text:000000000000358A                 xor     eax, eax
.text:000000000000358C                 add     r15, 1
.text:0000000000003590                 call    xasprintf
.text:0000000000003595                 sub     r13, [rsp+68h+var_50]
.text:000000000000359A                 cmp     [rsp+68h+var_58], r15
.text:000000000000359F                 mov     r9d, r12d
.text:00000000000035A2                 jz      short loc_35E0
.text:00000000000035A4
.text:00000000000035A4 loc_35A4:                               ; CODE XREF: print_s_short+57↑j
.text:00000000000035A4                 xor     edx, edx
.text:00000000000035A6                 mov     rax, r13
.text:00000000000035A9                 div     rbx
.text:00000000000035AC                 sub     r9d, eax
.text:00000000000035AF                 cmp     cs:input_swap, 0
.text:00000000000035B6                 mov     r12, rax
.text:00000000000035B9                 mov     eax, [rsp+68h+var_5C]
.text:00000000000035BD                 lea     esi, [r9+rax]
.text:00000000000035C1                 jz      short loc_3580
.text:00000000000035C3                 mov     r14b, [rbp+r15*2+1]
.text:00000000000035C8                 movzx   eax, byte ptr [rbp+r15*2+0]
.text:00000000000035CE                 mov     ecx, r14d
.text:00000000000035D1                 mov     ch, al
.text:00000000000035D3                 mov     r14d, ecx
.text:00000000000035D6                 movsx   edx, cx
.text:00000000000035D9                 jmp     short loc_3586
.text:00000000000035D9 ; ---------------------------------------------------------------------------
.text:00000000000035DB                 align 20h
.text:00000000000035E0
.text:00000000000035E0 loc_35E0:                               ; CODE XREF: print_s_short+2A↑j
.text:00000000000035E0                                         ; print_s_short+82↑j
.text:00000000000035E0                 mov     rax, [rsp+68h+var_40]
.text:00000000000035E5                 xor     rax, fs:28h
.text:00000000000035EE                 jnz     short loc_35FF
.text:00000000000035F0                 add     rsp, 38h
.text:00000000000035F4                 pop     rbx
.text:00000000000035F5                 pop     rbp
.text:00000000000035F6                 pop     r12
.text:00000000000035F8                 pop     r13
.text:00000000000035FA                 pop     r14
.text:00000000000035FC                 pop     r15
.text:00000000000035FE                 retn
.text:00000000000035FF ; ---------------------------------------------------------------------------
.text:00000000000035FF
.text:00000000000035FF loc_35FF:                               ; CODE XREF: print_s_short+CE↑j
.text:00000000000035FF                 call    ___stack_chk_fail
.text:00000000000035FF ; } // starts at 3520
.text:00000000000035FF print_s_short   endp
.text:00000000000035FF
.text:00000000000035FF ; ---------------------------------------------------------------------------
.text:0000000000003604                 align 10h
.text:0000000000003610
.text:0000000000003610 ; =============== S U B R O U T I N E =======================================
.text:0000000000003610
.text:0000000000003610
.text:0000000000003610 print_char      proc near               ; DATA XREF: decode_format_string:loc_3F20↓o
.text:0000000000003610
.text:0000000000003610 var_48          = qword ptr -48h
.text:0000000000003610 var_40          = qword ptr -40h
.text:0000000000003610
.text:0000000000003610 ; __unwind {
.text:0000000000003610                 push    r15
.text:0000000000003612                 push    r14
.text:0000000000003614                 push    r13
.text:0000000000003616                 push    r12
.text:0000000000003618                 push    rbp
.text:0000000000003619                 push    rbx
.text:000000000000361A                 sub     rsp, 18h
.text:000000000000361E                 cmp     rdi, rsi
.text:0000000000003621                 mov     [rsp+48h+var_48], rcx
.text:0000000000003625                 jbe     short loc_3682
.text:0000000000003627                 lea     rcx, [rdi-1]
.text:000000000000362B                 movsxd  r12, r9d
.text:000000000000362E                 mov     rbp, rdi
.text:0000000000003631                 sub     rbp, rsi
.text:0000000000003634                 mov     rbx, rdi
.text:0000000000003637                 mov     r15, rdx
.text:000000000000363A                 imul    rcx, r12
.text:000000000000363E                 lea     rax, [rdx+rbp]
.text:0000000000003642                 mov     r14d, r8d
.text:0000000000003645                 mov     [rsp+48h+var_40], rax
.text:000000000000364A                 mov     r13, rcx
.text:000000000000364D                 nop     dword ptr [rax]
.text:0000000000003650
.text:0000000000003650 loc_3650:                               ; CODE XREF: print_char+70↓j
.text:0000000000003650                 mov     rax, r13
.text:0000000000003653                 xor     edx, edx
.text:0000000000003655                 mov     rdi, [rsp+48h+var_48]
.text:0000000000003659                 div     rbx
.text:000000000000365C                 movzx   edx, byte ptr [r15]
.text:0000000000003660                 sub     r13, r12
.text:0000000000003663                 add     r15, 1
.text:0000000000003667                 sub     r9d, eax
.text:000000000000366A                 mov     rbp, rax
.text:000000000000366D                 xor     eax, eax
.text:000000000000366F                 lea     esi, [r9+r14]
.text:0000000000003673                 call    xasprintf
.text:0000000000003678                 cmp     r15, [rsp+48h+var_40]
.text:000000000000367D                 mov     r9d, ebp
.text:0000000000003680                 jnz     short loc_3650
.text:0000000000003682
.text:0000000000003682 loc_3682:                               ; CODE XREF: print_char+15↑j
.text:0000000000003682                 add     rsp, 18h
.text:0000000000003686                 pop     rbx
.text:0000000000003687                 pop     rbp
.text:0000000000003688                 pop     r12
.text:000000000000368A                 pop     r13
.text:000000000000368C                 pop     r14
.text:000000000000368E                 pop     r15
.text:0000000000003690                 retn
.text:0000000000003690 ; } // starts at 3610
.text:0000000000003690 print_char      endp
.text:0000000000003690
.text:0000000000003690 ; ---------------------------------------------------------------------------
.text:0000000000003691                 align 20h
.text:00000000000036A0
.text:00000000000036A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036A0
.text:00000000000036A0
.text:00000000000036A0 print_s_char    proc near               ; DATA XREF: decode_format_string+487↓o
.text:00000000000036A0
.text:00000000000036A0 var_48          = qword ptr -48h
.text:00000000000036A0 var_40          = qword ptr -40h
.text:00000000000036A0
.text:00000000000036A0 ; __unwind {
.text:00000000000036A0                 push    r15
.text:00000000000036A2                 push    r14
.text:00000000000036A4                 push    r13
.text:00000000000036A6                 push    r12
.text:00000000000036A8                 push    rbp
.text:00000000000036A9                 push    rbx
.text:00000000000036AA                 sub     rsp, 18h
.text:00000000000036AE                 cmp     rdi, rsi
.text:00000000000036B1                 mov     [rsp+48h+var_48], rcx
.text:00000000000036B5                 jbe     short loc_3712
.text:00000000000036B7                 lea     rcx, [rdi-1]
.text:00000000000036BB                 movsxd  r12, r9d
.text:00000000000036BE                 mov     rbp, rdi
.text:00000000000036C1                 sub     rbp, rsi
.text:00000000000036C4                 mov     rbx, rdi
.text:00000000000036C7                 mov     r15, rdx
.text:00000000000036CA                 imul    rcx, r12
.text:00000000000036CE                 lea     rax, [rdx+rbp]
.text:00000000000036D2                 mov     r14d, r8d
.text:00000000000036D5                 mov     [rsp+48h+var_40], rax
.text:00000000000036DA                 mov     r13, rcx
.text:00000000000036DD                 nop     dword ptr [rax]
.text:00000000000036E0
.text:00000000000036E0 loc_36E0:                               ; CODE XREF: print_s_char+70↓j
.text:00000000000036E0                 mov     rax, r13
.text:00000000000036E3                 xor     edx, edx
.text:00000000000036E5                 mov     rdi, [rsp+48h+var_48]
.text:00000000000036E9                 div     rbx
.text:00000000000036EC                 movsx   edx, byte ptr [r15]
.text:00000000000036F0                 sub     r13, r12
.text:00000000000036F3                 add     r15, 1
.text:00000000000036F7                 sub     r9d, eax
.text:00000000000036FA                 mov     rbp, rax
.text:00000000000036FD                 xor     eax, eax
.text:00000000000036FF                 lea     esi, [r9+r14]
.text:0000000000003703                 call    xasprintf
.text:0000000000003708                 cmp     r15, [rsp+48h+var_40]
.text:000000000000370D                 mov     r9d, ebp
.text:0000000000003710                 jnz     short loc_36E0
.text:0000000000003712
.text:0000000000003712 loc_3712:                               ; CODE XREF: print_s_char+15↑j
.text:0000000000003712                 add     rsp, 18h
.text:0000000000003716                 pop     rbx
.text:0000000000003717                 pop     rbp
.text:0000000000003718                 pop     r12
.text:000000000000371A                 pop     r13
.text:000000000000371C                 pop     r14
.text:000000000000371E                 pop     r15
.text:0000000000003720                 retn
.text:0000000000003720 ; } // starts at 36A0
.text:0000000000003720 print_s_char    endp
.text:0000000000003720
.text:0000000000003720 ; ---------------------------------------------------------------------------
.text:0000000000003721                 align 10h
.text:0000000000003730
.text:0000000000003730 ; =============== S U B R O U T I N E =======================================
.text:0000000000003730
.text:0000000000003730
.text:0000000000003730 print_long_double proc near             ; DATA XREF: decode_format_string+5E9↓o
.text:0000000000003730
.text:0000000000003730 var_B8          = tbyte ptr -0B8h
.text:0000000000003730 var_A0          = qword ptr -0A0h
.text:0000000000003730 var_98          = dword ptr -98h
.text:0000000000003730 var_94          = dword ptr -94h
.text:0000000000003730 var_90          = qword ptr -90h
.text:0000000000003730 var_88          = tbyte ptr -88h
.text:0000000000003730 nptr            = byte ptr -78h
.text:0000000000003730 var_40          = qword ptr -40h
.text:0000000000003730
.text:0000000000003730 ; __unwind {
.text:0000000000003730                 push    r15
.text:0000000000003732                 push    r14
.text:0000000000003734                 push    r13
.text:0000000000003736                 push    r12
.text:0000000000003738                 mov     r12, rdi
.text:000000000000373B                 push    rbp
.text:000000000000373C                 push    rbx
.text:000000000000373D                 sub     rsp, 78h
.text:0000000000003741                 mov     rdi, fs:28h
.text:000000000000374A                 mov     [rsp+0A8h+var_40], rdi
.text:000000000000374F                 xor     edi, edi
.text:0000000000003751                 cmp     r12, rsi
.text:0000000000003754                 mov     [rsp+0A8h+var_A0], rsi
.text:0000000000003759                 mov     [rsp+0A8h+var_94], r8d
.text:000000000000375E                 jbe     loc_3820
.text:0000000000003764                 lea     r8, [r12-1]
.text:0000000000003769                 movsxd  rax, r9d
.text:000000000000376C                 mov     rbx, rdx
.text:000000000000376F                 mov     [rsp+0A8h+var_90], rax
.text:0000000000003774                 mov     r15, r12
.text:0000000000003777                 lea     r13, [rsp+0A8h+nptr]
.text:000000000000377C                 imul    r8, rax
.text:0000000000003780                 mov     r14, r8
.text:0000000000003783                 jmp     short loc_37CC
.text:0000000000003783 ; ---------------------------------------------------------------------------
.text:0000000000003785                 align 8
.text:0000000000003788
.text:0000000000003788 loc_3788:                               ; CODE XREF: print_long_double+BF↓j
.text:0000000000003788                 fld     tbyte ptr [rbx]
.text:000000000000378A
.text:000000000000378A loc_378A:                               ; CODE XREF: print_long_double+E7↓j
.text:000000000000378A                 sub     rsp, 10h
.text:000000000000378E                 xor     ecx, ecx
.text:0000000000003790                 xor     edx, edx
.text:0000000000003792                 mov     esi, 2Dh ; '-'
.text:0000000000003797                 mov     rdi, r13        ; nptr
.text:000000000000379A                 add     rbx, 10h
.text:000000000000379E                 fstp    [rsp+0B8h+var_B8] ; _TBYTE
.text:00000000000037A1                 call    ldtoastr
.text:00000000000037A6                 lea     rdi, aS         ; "%*s"
.text:00000000000037AD                 mov     rdx, r13
.text:00000000000037B0                 xor     eax, eax
.text:00000000000037B2                 mov     esi, [rsp+0B8h+var_98]
.text:00000000000037B6                 call    xasprintf
.text:00000000000037BB                 sub     r14, [rsp+0B8h+var_90]
.text:00000000000037C0                 mov     r9d, ebp
.text:00000000000037C3                 pop     rax
.text:00000000000037C4                 pop     rdx
.text:00000000000037C5                 cmp     r15, [rsp+0A8h+var_A0]
.text:00000000000037CA                 jz      short loc_3820
.text:00000000000037CC
.text:00000000000037CC loc_37CC:                               ; CODE XREF: print_long_double+53↑j
.text:00000000000037CC                 xor     edx, edx
.text:00000000000037CE                 mov     rax, r14
.text:00000000000037D1                 sub     r15, 1
.text:00000000000037D5                 div     r12
.text:00000000000037D8                 sub     r9d, eax
.text:00000000000037DB                 add     r9d, [rsp+0A8h+var_94]
.text:00000000000037E0                 cmp     cs:input_swap, 0
.text:00000000000037E7                 mov     rbp, rax
.text:00000000000037EA                 mov     [rsp+0A8h+var_98], r9d
.text:00000000000037EF                 jz      short loc_3788
.text:00000000000037F1                 lea     rdx, [rbx+0Fh]
.text:00000000000037F5                 lea     rax, [rsp+0A8h+var_88]
.text:00000000000037FA                 lea     rsi, [rsp+0A8h+nptr]
.text:00000000000037FF                 nop
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: print_long_double+E1↓j
.text:0000000000003800                 movzx   ecx, byte ptr [rdx]
.text:0000000000003803                 add     rax, 1
.text:0000000000003807                 sub     rdx, 1
.text:000000000000380B                 mov     [rax-1], cl
.text:000000000000380E                 cmp     rsi, rax
.text:0000000000003811                 jnz     short loc_3800
.text:0000000000003813                 fld     [rsp+0A8h+var_88]
.text:0000000000003817                 jmp     loc_378A
.text:0000000000003817 ; ---------------------------------------------------------------------------
.text:000000000000381C                 align 20h
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: print_long_double+2E↑j
.text:0000000000003820                                         ; print_long_double+9A↑j
.text:0000000000003820                 mov     rax, [rsp+0A8h+var_40]
.text:0000000000003825                 xor     rax, fs:28h
.text:000000000000382E                 jnz     short loc_383F
.text:0000000000003830                 add     rsp, 78h
.text:0000000000003834                 pop     rbx
.text:0000000000003835                 pop     rbp
.text:0000000000003836                 pop     r12
.text:0000000000003838                 pop     r13
.text:000000000000383A                 pop     r14
.text:000000000000383C                 pop     r15
.text:000000000000383E                 retn
.text:000000000000383F ; ---------------------------------------------------------------------------
.text:000000000000383F
.text:000000000000383F loc_383F:                               ; CODE XREF: print_long_double+FE↑j
.text:000000000000383F                 call    ___stack_chk_fail
.text:000000000000383F ; } // starts at 3730
.text:000000000000383F print_long_double endp
.text:000000000000383F
.text:000000000000383F ; ---------------------------------------------------------------------------
.text:0000000000003844                 align 10h
.text:0000000000003850
.text:0000000000003850 ; =============== S U B R O U T I N E =======================================
.text:0000000000003850
.text:0000000000003850
.text:0000000000003850 print_double    proc near               ; DATA XREF: decode_format_string+5B9↓o
.text:0000000000003850
.text:0000000000003850 var_90          = qword ptr -90h
.text:0000000000003850 var_88          = dword ptr -88h
.text:0000000000003850 var_84          = dword ptr -84h
.text:0000000000003850 var_80          = qword ptr -80h
.text:0000000000003850 var_70          = qword ptr -70h
.text:0000000000003850 nptr            = byte ptr -68h
.text:0000000000003850 var_40          = qword ptr -40h
.text:0000000000003850
.text:0000000000003850 ; __unwind {
.text:0000000000003850                 push    r15
.text:0000000000003852                 push    r14
.text:0000000000003854                 push    r13
.text:0000000000003856                 push    r12
.text:0000000000003858                 push    rbp
.text:0000000000003859                 push    rbx
.text:000000000000385A                 mov     rbp, rdi
.text:000000000000385D                 sub     rsp, 68h
.text:0000000000003861                 mov     rdi, fs:28h
.text:000000000000386A                 mov     [rsp+98h+var_40], rdi
.text:000000000000386F                 xor     edi, edi
.text:0000000000003871                 cmp     rbp, rsi
.text:0000000000003874                 mov     [rsp+98h+var_90], rsi
.text:0000000000003879                 mov     [rsp+98h+var_84], r8d
.text:000000000000387E                 jbe     loc_3940
.text:0000000000003884                 lea     r8, [rbp-1]
.text:0000000000003888                 movsxd  rax, r9d
.text:000000000000388B                 mov     r13, rdx
.text:000000000000388E                 mov     [rsp+98h+var_80], rax
.text:0000000000003893                 mov     r15, rbp
.text:0000000000003896                 lea     r12, [rsp+98h+nptr]
.text:000000000000389B                 imul    r8, rax
.text:000000000000389F                 mov     r14, r8
.text:00000000000038A2                 jmp     short loc_38E7
.text:00000000000038A2 ; ---------------------------------------------------------------------------
.text:00000000000038A4                 align 8
.text:00000000000038A8
.text:00000000000038A8 loc_38A8:                               ; CODE XREF: print_double+BA↓j
.text:00000000000038A8                 movsd   xmm0, qword ptr [r13+0]
.text:00000000000038AE
.text:00000000000038AE loc_38AE:                               ; CODE XREF: print_double+EA↓j
.text:00000000000038AE                 xor     ecx, ecx
.text:00000000000038B0                 xor     edx, edx
.text:00000000000038B2                 mov     esi, 28h ; '('
.text:00000000000038B7                 mov     rdi, r12        ; nptr
.text:00000000000038BA                 add     r13, 8
.text:00000000000038BE                 call    dtoastr
.text:00000000000038C3                 mov     esi, [rsp+98h+var_88]
.text:00000000000038C7                 lea     rdi, aS         ; "%*s"
.text:00000000000038CE                 xor     eax, eax
.text:00000000000038D0                 mov     rdx, r12
.text:00000000000038D3                 call    xasprintf
.text:00000000000038D8                 sub     r14, [rsp+98h+var_80]
.text:00000000000038DD                 cmp     r15, [rsp+98h+var_90]
.text:00000000000038E2                 mov     r9d, ebx
.text:00000000000038E5                 jz      short loc_3940
.text:00000000000038E7
.text:00000000000038E7 loc_38E7:                               ; CODE XREF: print_double+52↑j
.text:00000000000038E7                 xor     edx, edx
.text:00000000000038E9                 mov     rax, r14
.text:00000000000038EC                 sub     r15, 1
.text:00000000000038F0                 div     rbp
.text:00000000000038F3                 sub     r9d, eax
.text:00000000000038F6                 add     r9d, [rsp+98h+var_84]
.text:00000000000038FB                 cmp     cs:input_swap, 0
.text:0000000000003902                 mov     rbx, rax
.text:0000000000003905                 mov     [rsp+98h+var_88], r9d
.text:000000000000390A                 jz      short loc_38A8
.text:000000000000390C                 lea     rdx, [r13+7]
.text:0000000000003910                 lea     rsi, [rsp+98h+var_70]
.text:0000000000003915                 xor     eax, eax
.text:0000000000003917                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003920
.text:0000000000003920 loc_3920:                               ; CODE XREF: print_double+E2↓j
.text:0000000000003920                 movzx   ecx, byte ptr [rdx]
.text:0000000000003923                 sub     rdx, 1
.text:0000000000003927                 mov     [rsi+rax], cl
.text:000000000000392A                 add     rax, 1
.text:000000000000392E                 cmp     rax, 8
.text:0000000000003932                 jnz     short loc_3920
.text:0000000000003934                 movsd   xmm0, [rsp+98h+var_70]
.text:000000000000393A                 jmp     loc_38AE
.text:000000000000393A ; ---------------------------------------------------------------------------
.text:000000000000393F                 align 20h
.text:0000000000003940
.text:0000000000003940 loc_3940:                               ; CODE XREF: print_double+2E↑j
.text:0000000000003940                                         ; print_double+95↑j
.text:0000000000003940                 mov     rax, [rsp+98h+var_40]
.text:0000000000003945                 xor     rax, fs:28h
.text:000000000000394E                 jnz     short loc_395F
.text:0000000000003950                 add     rsp, 68h
.text:0000000000003954                 pop     rbx
.text:0000000000003955                 pop     rbp
.text:0000000000003956                 pop     r12
.text:0000000000003958                 pop     r13
.text:000000000000395A                 pop     r14
.text:000000000000395C                 pop     r15
.text:000000000000395E                 retn
.text:000000000000395F ; ---------------------------------------------------------------------------
.text:000000000000395F
.text:000000000000395F loc_395F:                               ; CODE XREF: print_double+FE↑j
.text:000000000000395F                 call    ___stack_chk_fail
.text:000000000000395F ; } // starts at 3850
.text:000000000000395F print_double    endp
.text:000000000000395F
.text:000000000000395F ; ---------------------------------------------------------------------------
.text:0000000000003964                 align 10h
.text:0000000000003970
.text:0000000000003970 ; =============== S U B R O U T I N E =======================================
.text:0000000000003970
.text:0000000000003970
.text:0000000000003970 print_float     proc near               ; DATA XREF: decode_format_string+5D1↓o
.text:0000000000003970
.text:0000000000003970 nptr            = qword ptr -90h
.text:0000000000003970 var_88          = qword ptr -88h
.text:0000000000003970 var_80          = qword ptr -80h
.text:0000000000003970 var_78          = qword ptr -78h
.text:0000000000003970 var_70          = dword ptr -70h
.text:0000000000003970 var_6C          = dword ptr -6Ch
.text:0000000000003970 var_68          = byte ptr -68h
.text:0000000000003970 var_40          = qword ptr -40h
.text:0000000000003970
.text:0000000000003970 ; __unwind {
.text:0000000000003970                 push    r15
.text:0000000000003972                 push    r14
.text:0000000000003974                 mov     rax, rsi
.text:0000000000003977                 push    r13
.text:0000000000003979                 push    r12
.text:000000000000397B                 push    rbp
.text:000000000000397C                 push    rbx
.text:000000000000397D                 sub     rsp, 68h
.text:0000000000003981                 mov     [rsp+98h+var_88], rsi
.text:0000000000003986                 mov     [rsp+98h+var_70], r8d
.text:000000000000398B                 mov     rsi, fs:28h
.text:0000000000003994                 mov     [rsp+98h+var_40], rsi
.text:0000000000003999                 xor     esi, esi
.text:000000000000399B                 cmp     rdi, rax
.text:000000000000399E                 jbe     loc_3A70
.text:00000000000039A4                 lea     r8, [rdi-1]
.text:00000000000039A8                 movsxd  rax, r9d
.text:00000000000039AB                 mov     r12d, ebp
.text:00000000000039AE                 mov     [rsp+98h+var_80], rax
.text:00000000000039B3                 mov     rbx, rdx
.text:00000000000039B6                 mov     [rsp+98h+var_78], rdi
.text:00000000000039BB                 imul    r8, rax
.text:00000000000039BF                 lea     rax, [rsp+98h+var_68]
.text:00000000000039C4                 mov     rbp, rdi
.text:00000000000039C7                 mov     r13d, r9d
.text:00000000000039CA                 mov     [rsp+98h+nptr], rax
.text:00000000000039CF                 mov     r15, r8
.text:00000000000039D2                 jmp     short loc_3A18
.text:00000000000039D2 ; ---------------------------------------------------------------------------
.text:00000000000039D4                 align 8
.text:00000000000039D8
.text:00000000000039D8 loc_39D8:                               ; CODE XREF: print_float+C8↓j
.text:00000000000039D8                 movss   xmm0, dword ptr [rbx]
.text:00000000000039DC
.text:00000000000039DC loc_39DC:                               ; CODE XREF: print_float+F9↓j
.text:00000000000039DC                 mov     rdi, [rsp+98h+nptr] ; nptr
.text:00000000000039E1                 xor     ecx, ecx
.text:00000000000039E3                 xor     edx, edx
.text:00000000000039E5                 mov     esi, 1Fh
.text:00000000000039EA                 add     rbx, 4
.text:00000000000039EE                 call    ftoastr
.text:00000000000039F3                 mov     rdx, [rsp+98h+nptr]
.text:00000000000039F8                 lea     rdi, aS         ; "%*s"
.text:00000000000039FF                 mov     esi, r13d
.text:0000000000003A02                 xor     eax, eax
.text:0000000000003A04                 mov     r13d, r14d
.text:0000000000003A07                 call    xasprintf
.text:0000000000003A0C                 sub     r15, [rsp+98h+var_80]
.text:0000000000003A11                 cmp     rbp, [rsp+98h+var_88]
.text:0000000000003A16                 jz      short loc_3A70
.text:0000000000003A18
.text:0000000000003A18 loc_3A18:                               ; CODE XREF: print_float+62↑j
.text:0000000000003A18                 xor     edx, edx
.text:0000000000003A1A                 mov     rax, r15
.text:0000000000003A1D                 sub     rbp, 1
.text:0000000000003A21                 div     [rsp+98h+var_78]
.text:0000000000003A26                 sub     r13d, eax
.text:0000000000003A29                 add     r13d, [rsp+98h+var_70]
.text:0000000000003A2E                 cmp     cs:input_swap, 0
.text:0000000000003A35                 mov     r14, rax
.text:0000000000003A38                 jz      short loc_39D8
.text:0000000000003A3A                 mov     r12b, [rbx+3]
.text:0000000000003A3E                 movzx   edx, byte ptr [rbx+1]
.text:0000000000003A42                 mov     eax, r12d
.text:0000000000003A45                 mov     ah, [rbx+2]
.text:0000000000003A48                 shl     edx, 10h
.text:0000000000003A4B                 movzx   r10d, ax
.text:0000000000003A4F                 movzx   eax, byte ptr [rbx]
.text:0000000000003A52                 or      r10d, edx
.text:0000000000003A55                 shl     eax, 18h
.text:0000000000003A58                 or      r10d, eax
.text:0000000000003A5B                 mov     [rsp+98h+var_6C], r10d
.text:0000000000003A60                 mov     r12d, r10d
.text:0000000000003A63                 movss   xmm0, [rsp+98h+var_6C]
.text:0000000000003A69                 jmp     loc_39DC
.text:0000000000003A69 ; ---------------------------------------------------------------------------
.text:0000000000003A6E                 align 10h
.text:0000000000003A70
.text:0000000000003A70 loc_3A70:                               ; CODE XREF: print_float+2E↑j
.text:0000000000003A70                                         ; print_float+A6↑j
.text:0000000000003A70                 mov     rax, [rsp+98h+var_40]
.text:0000000000003A75                 xor     rax, fs:28h
.text:0000000000003A7E                 jnz     short loc_3A8F
.text:0000000000003A80                 add     rsp, 68h
.text:0000000000003A84                 pop     rbx
.text:0000000000003A85                 pop     rbp
.text:0000000000003A86                 pop     r12
.text:0000000000003A88                 pop     r13
.text:0000000000003A8A                 pop     r14
.text:0000000000003A8C                 pop     r15
.text:0000000000003A8E                 retn
.text:0000000000003A8F ; ---------------------------------------------------------------------------
.text:0000000000003A8F
.text:0000000000003A8F loc_3A8F:                               ; CODE XREF: print_float+10E↑j
.text:0000000000003A8F                 call    ___stack_chk_fail
.text:0000000000003A8F ; } // starts at 3970
.text:0000000000003A8F print_float     endp
.text:0000000000003A8F
.text:0000000000003A8F ; ---------------------------------------------------------------------------
.text:0000000000003A94                 align 20h
.text:0000000000003AA0
.text:0000000000003AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AA0
.text:0000000000003AA0
.text:0000000000003AA0 decode_format_string proc near          ; CODE XREF: main+28D↑p
.text:0000000000003AA0                                         ; main+2A7↑p ...
.text:0000000000003AA0
.text:0000000000003AA0 var_48          = qword ptr -48h
.text:0000000000003AA0 s               = qword ptr -40h
.text:0000000000003AA0
.text:0000000000003AA0 ; __unwind {
.text:0000000000003AA0                 push    r15
.text:0000000000003AA2                 push    r14
.text:0000000000003AA4                 push    r13
.text:0000000000003AA6                 push    r12
.text:0000000000003AA8                 push    rbp
.text:0000000000003AA9                 push    rbx
.text:0000000000003AAA                 sub     rsp, 18h
.text:0000000000003AAE                 test    rdi, rdi
.text:0000000000003AB1                 mov     [rsp+48h+var_48], rdi
.text:0000000000003AB5                 jz      loc_42A5
.text:0000000000003ABB                 cmp     byte ptr [rdi], 0
.text:0000000000003ABE                 mov     rax, cs:n_specs
.text:0000000000003AC5                 mov     r12, rdi
.text:0000000000003AC8                 lea     r14, jpt_3B1A
.text:0000000000003ACF                 jz      loc_3CF2
.text:0000000000003AD5                 nop     dword ptr [rax]
.text:0000000000003AD8
.text:0000000000003AD8 loc_3AD8:                               ; CODE XREF: decode_format_string+24C↓j
.text:0000000000003AD8                 mov     rcx, cs:n_specs_allocated
.text:0000000000003ADF                 mov     rdi, cs:spec
.text:0000000000003AE6                 cmp     rcx, rax
.text:0000000000003AE9                 jbe     loc_3D80
.text:0000000000003AEF
.text:0000000000003AEF loc_3AEF:                               ; CODE XREF: decode_format_string+324↓j
.text:0000000000003AEF                 lea     rax, [rax+rax*4]
.text:0000000000003AF3                 lea     rbp, [rdi+rax*8]
.text:0000000000003AF7                 test    rbp, rbp
.text:0000000000003AFA                 jz      loc_425D
.text:0000000000003B00                 movzx   esi, byte ptr [r12]
.text:0000000000003B05                 lea     eax, [rsi-61h]  ; switch 24 cases
.text:0000000000003B08                 cmp     al, 17h
.text:0000000000003B0A                 ja      def_3B1A        ; jumptable 0000000000003B1A default case, cases 98,101,103-110,112-116,118,119
.text:0000000000003B10                 movzx   eax, al
.text:0000000000003B13                 movsxd  rax, ds:(jpt_3B1A - 0BFC0h)[r14+rax*4]
.text:0000000000003B17                 add     rax, r14
.text:0000000000003B1A                 jmp     rax             ; switch jump
.text:0000000000003B1A ; ---------------------------------------------------------------------------
.text:0000000000003B1C                 align 20h
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: decode_format_string+7A↑j
.text:0000000000003B20                                         ; DATA XREF: .rodata:jpt_3B1A↓o
.text:0000000000003B20                 movzx   eax, byte ptr [r12+1] ; jumptable 0000000000003B1A case 102
.text:0000000000003B26                 cmp     al, 46h ; 'F'
.text:0000000000003B28                 jz      loc_40C8
.text:0000000000003B2E                 cmp     al, 4Ch ; 'L'
.text:0000000000003B30                 jz      loc_40B0
.text:0000000000003B36                 cmp     al, 44h ; 'D'
.text:0000000000003B38                 jz      loc_4098
.text:0000000000003B3E                 movsx   ecx, al
.text:0000000000003B41                 lea     rsi, [r12+1]
.text:0000000000003B46                 sub     ecx, 30h ; '0'
.text:0000000000003B49                 cmp     ecx, 9
.text:0000000000003B4C                 ja      loc_4010
.text:0000000000003B52                 lea     rbx, [r12+2]
.text:0000000000003B57                 movsxd  rcx, ecx
.text:0000000000003B5A                 xor     r8d, r8d
.text:0000000000003B5D                 jmp     short loc_3B87
.text:0000000000003B5D ; ---------------------------------------------------------------------------
.text:0000000000003B5F                 align 20h
.text:0000000000003B60
.text:0000000000003B60 loc_3B60:                               ; CODE XREF: decode_format_string+F8↓j
.text:0000000000003B60                 movsxd  rcx, eax
.text:0000000000003B63                 mov     rax, 0CCCCCCCCCCCCCCCDh
.text:0000000000003B6D                 add     rbx, 1
.text:0000000000003B71                 mov     rdx, rcx
.text:0000000000003B74                 not     rdx
.text:0000000000003B77                 mul     rdx
.text:0000000000003B7A                 shr     rdx, 3
.text:0000000000003B7E                 cmp     rdx, r8
.text:0000000000003B81                 jb      loc_41A0
.text:0000000000003B87
.text:0000000000003B87 loc_3B87:                               ; CODE XREF: decode_format_string+BD↑j
.text:0000000000003B87                 lea     rax, [r8+r8*4]
.text:0000000000003B8B                 lea     r8, [rcx+rax*2]
.text:0000000000003B8F                 movsx   eax, byte ptr [rbx]
.text:0000000000003B92                 sub     eax, 30h ; '0'
.text:0000000000003B95                 cmp     eax, 9
.text:0000000000003B98                 jbe     short loc_3B60
.text:0000000000003B9A                 cmp     rsi, rbx
.text:0000000000003B9D                 mov     r13d, cs:dword_210140
.text:0000000000003BA4                 jz      loc_4020
.text:0000000000003BAA                 cmp     r8, 10h
.text:0000000000003BAE                 ja      short loc_3BC4
.text:0000000000003BB0                 lea     rax, fp_type_size
.text:0000000000003BB7                 mov     r13d, [rax+r8*4]
.text:0000000000003BBB                 test    r13d, r13d
.text:0000000000003BBE                 jnz     loc_4020
.text:0000000000003BC4
.text:0000000000003BC4 loc_3BC4:                               ; CODE XREF: decode_format_string+10E↑j
.text:0000000000003BC4                 mov     rdi, [rsp+48h+var_48]
.text:0000000000003BC8                 mov     [rsp+48h+s], r8
.text:0000000000003BCD                 call    quote
.text:0000000000003BD2                 mov     edx, 5
.text:0000000000003BD7                 mov     rbx, rax
.text:0000000000003BDA                 lea     rsi, aInvalidTypeStr ; "invalid type string %s;\nthis system do"...
.text:0000000000003BE1                 jmp     loc_3FE2
.text:0000000000003BE1 ; ---------------------------------------------------------------------------
.text:0000000000003BE6                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 loc_3BF0:                               ; CODE XREF: decode_format_string+7A↑j
.text:0000000000003BF0                                         ; DATA XREF: .rodata:jpt_3B1A↓o
.text:0000000000003BF0                 movzx   eax, byte ptr [r12+1] ; jumptable 0000000000003B1A cases 100,111,117,120
.text:0000000000003BF6                 cmp     al, 49h ; 'I'
.text:0000000000003BF8                 jz      loc_4200
.text:0000000000003BFE                 jle     loc_3E00
.text:0000000000003C04                 cmp     al, 4Ch ; 'L'
.text:0000000000003C06                 jz      loc_41E8
.text:0000000000003C0C                 cmp     al, 53h ; 'S'
.text:0000000000003C0E                 jnz     loc_3F40
.text:0000000000003C14                 cmp     sil, 6Fh ; 'o'
.text:0000000000003C18                 lea     rbx, [r12+2]
.text:0000000000003C1D                 mov     r13d, cs:dword_210188
.text:0000000000003C24                 mov     r8d, 2
.text:0000000000003C2A                 jnz     loc_3E24
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: decode_format_string+37E↓j
.text:0000000000003C30                 lea     eax, [r13-4]
.text:0000000000003C34                 lea     r9, a03o+3      ; "o"
.text:0000000000003C3B                 lea     r10, [rbp+10h]
.text:0000000000003C3F                 lea     rcx, aDS        ; "%%*.%d%s"
.text:0000000000003C46                 mov     edx, 8
.text:0000000000003C4B                 mov     esi, 1
.text:0000000000003C50                 cmp     eax, 1
.text:0000000000003C53                 lea     rax, aLo        ; "lo"
.text:0000000000003C5A                 mov     rdi, r10
.text:0000000000003C5D                 mov     [rsp+48h+s], r10
.text:0000000000003C62                 cmovbe  r9, rax
.text:0000000000003C66                 lea     rax, bytes_to_oct_digits
.text:0000000000003C6D                 mov     r15d, [rax+r8*4]
.text:0000000000003C71                 xor     eax, eax
.text:0000000000003C73                 mov     r8d, r15d
.text:0000000000003C76                 call    ___sprintf_chk
.text:0000000000003C7B                 mov     edx, 2
.text:0000000000003C80                 mov     r10, [rsp+48h+s]
.text:0000000000003C85                 jmp     loc_3E93
.text:0000000000003C85 ; ---------------------------------------------------------------------------
.text:0000000000003C8A                 align 10h
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: decode_format_string+7A↑j
.text:0000000000003C90                                         ; DATA XREF: .rodata:jpt_3B1A↓o
.text:0000000000003C90                 lea     rbx, [r12+1]    ; jumptable 0000000000003B1A case 99
.text:0000000000003C95                 lea     rax, print_ascii
.text:0000000000003C9C                 mov     r15d, 3
.text:0000000000003CA2                 mov     edx, 6
.text:0000000000003CA7                 mov     r13d, 1
.text:0000000000003CAD
.text:0000000000003CAD loc_3CAD:                               ; CODE XREF: decode_format_string+28D↓j
.text:0000000000003CAD                                         ; decode_format_string+437↓j ...
.text:0000000000003CAD                 mov     [rbp+8], rax
.text:0000000000003CB1                 mov     [rbp+4], r13d
.text:0000000000003CB5                 mov     [rbp+0], edx
.text:0000000000003CB8                 mov     [rbp+1Ch], r15d
.text:0000000000003CBC                 cmp     byte ptr [rbx], 7Ah ; 'z'
.text:0000000000003CBF                 setz    al
.text:0000000000003CC2                 mov     [rbp+18h], al
.text:0000000000003CC5                 movzx   eax, al
.text:0000000000003CC8                 add     rbx, rax
.text:0000000000003CCB                 cmp     r12, rbx
.text:0000000000003CCE                 jz      loc_423E
.text:0000000000003CD4                 mov     rax, cs:n_specs
.text:0000000000003CDB                 mov     r12, rbx
.text:0000000000003CDE                 add     rax, 1
.text:0000000000003CE2                 cmp     byte ptr [rbx], 0
.text:0000000000003CE5                 mov     cs:n_specs, rax
.text:0000000000003CEC                 jnz     loc_3AD8
.text:0000000000003CF2
.text:0000000000003CF2 loc_3CF2:                               ; CODE XREF: decode_format_string+2F↑j
.text:0000000000003CF2                 add     rsp, 18h
.text:0000000000003CF6                 mov     eax, 1
.text:0000000000003CFB                 pop     rbx
.text:0000000000003CFC                 pop     rbp
.text:0000000000003CFD                 pop     r12
.text:0000000000003CFF                 pop     r13
.text:0000000000003D01                 pop     r14
.text:0000000000003D03                 pop     r15
.text:0000000000003D05                 retn
.text:0000000000003D05 ; ---------------------------------------------------------------------------
.text:0000000000003D06                 align 10h
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: decode_format_string+7A↑j
.text:0000000000003D10                                         ; DATA XREF: .rodata:jpt_3B1A↓o
.text:0000000000003D10                 lea     rbx, [r12+1]    ; jumptable 0000000000003B1A case 97
.text:0000000000003D15                 mov     r15d, 3
.text:0000000000003D1B                 lea     rax, print_named_ascii
.text:0000000000003D22                 mov     edx, 5
.text:0000000000003D27                 mov     r13d, 1
.text:0000000000003D2D                 jmp     loc_3CAD
.text:0000000000003D2D ; ---------------------------------------------------------------------------
.text:0000000000003D32                 align 8
.text:0000000000003D38
.text:0000000000003D38 def_3B1A:                               ; CODE XREF: decode_format_string+6A↑j
.text:0000000000003D38                                         ; decode_format_string+7A↑j
.text:0000000000003D38                                         ; DATA XREF: ...
.text:0000000000003D38                 mov     rdi, [rsp+48h+var_48] ; jumptable 0000000000003B1A default case, cases 98,101,103-110,112-116,118,119
.text:0000000000003D3C                 call    quote
.text:0000000000003D41                 movsx   ebx, byte ptr [r12]
.text:0000000000003D46                 lea     rsi, aInvalidCharact ; "invalid character '%c' in type string %"...
.text:0000000000003D4D                 mov     rbp, rax
.text:0000000000003D50                 mov     edx, 5          ; category
.text:0000000000003D55                 xor     edi, edi        ; domainname
.text:0000000000003D57                 call    _dcgettext
.text:0000000000003D5C                 mov     r8, rbp
.text:0000000000003D5F                 mov     rdx, rax        ; format
.text:0000000000003D62                 xor     esi, esi        ; errnum
.text:0000000000003D64                 mov     ecx, ebx
.text:0000000000003D66                 xor     eax, eax
.text:0000000000003D68                 xor     edi, edi        ; status
.text:0000000000003D6A                 call    _error
.text:0000000000003D6F                 add     rsp, 18h
.text:0000000000003D73                 xor     eax, eax
.text:0000000000003D75                 pop     rbx
.text:0000000000003D76                 pop     rbp
.text:0000000000003D77                 pop     r12
.text:0000000000003D79                 pop     r13
.text:0000000000003D7B                 pop     r14
.text:0000000000003D7D                 pop     r15
.text:0000000000003D7F                 retn
.text:0000000000003D80 ; ---------------------------------------------------------------------------
.text:0000000000003D80
.text:0000000000003D80 loc_3D80:                               ; CODE XREF: decode_format_string+49↑j
.text:0000000000003D80                 test    rdi, rdi
.text:0000000000003D83                 jz      short loc_3DD0
.text:0000000000003D85                 mov     rax, 222222222222221h
.text:0000000000003D8F                 cmp     rcx, rax
.text:0000000000003D92                 ja      short loc_3DF9
.text:0000000000003D94                 mov     rax, rcx
.text:0000000000003D97                 shr     rax, 1
.text:0000000000003D9A                 lea     rcx, [rcx+rax+1]
.text:0000000000003D9F
.text:0000000000003D9F loc_3D9F:                               ; CODE XREF: decode_format_string+357↓j
.text:0000000000003D9F                 lea     rsi, [rcx+rcx*4]
.text:0000000000003DA3                 mov     cs:n_specs_allocated, rcx
.text:0000000000003DAA                 shl     rsi, 3
.text:0000000000003DAE                 call    xrealloc
.text:0000000000003DB3                 mov     rdi, rax
.text:0000000000003DB6                 mov     cs:spec, rax
.text:0000000000003DBD                 mov     rax, cs:n_specs
.text:0000000000003DC4                 jmp     loc_3AEF
.text:0000000000003DC4 ; ---------------------------------------------------------------------------
.text:0000000000003DC9                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: decode_format_string+2E3↑j
.text:0000000000003DD0                 test    rcx, rcx
.text:0000000000003DD3                 mov     eax, 3
.text:0000000000003DD8                 mov     edx, 28h ; '('
.text:0000000000003DDD                 cmovz   rcx, rax
.text:0000000000003DE1                 mov     rax, rdx
.text:0000000000003DE4                 xor     esi, esi
.text:0000000000003DE6                 mul     rcx
.text:0000000000003DE9                 jo      loc_429B
.text:0000000000003DEF
.text:0000000000003DEF loc_3DEF:                               ; CODE XREF: decode_format_string+800↓j
.text:0000000000003DEF                 test    rax, rax
.text:0000000000003DF2                 js      short loc_3DF9
.text:0000000000003DF4                 test    rsi, rsi
.text:0000000000003DF7                 jz      short loc_3D9F
.text:0000000000003DF9
.text:0000000000003DF9 loc_3DF9:                               ; CODE XREF: decode_format_string+2F2↑j
.text:0000000000003DF9                                         ; decode_format_string+352↑j
.text:0000000000003DF9                 call    xalloc_die
.text:0000000000003DF9 ; ---------------------------------------------------------------------------
.text:0000000000003DFE                 align 20h
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: decode_format_string+15E↑j
.text:0000000000003E00                 cmp     al, 43h ; 'C'
.text:0000000000003E02                 jnz     loc_3F40
.text:0000000000003E08                 mov     r13d, cs:dword_210184
.text:0000000000003E0F                 lea     rbx, [r12+2]
.text:0000000000003E14                 mov     r8d, 1
.text:0000000000003E1A
.text:0000000000003E1A loc_3E1A:                               ; CODE XREF: decode_format_string+51F↓j
.text:0000000000003E1A                                         ; decode_format_string+75A↓j ...
.text:0000000000003E1A                 cmp     sil, 6Fh ; 'o'
.text:0000000000003E1E                 jz      loc_3C30
.text:0000000000003E24
.text:0000000000003E24 loc_3E24:                               ; CODE XREF: decode_format_string+18A↑j
.text:0000000000003E24                 jle     loc_40E0
.text:0000000000003E2A                 cmp     sil, 75h ; 'u'
.text:0000000000003E2E                 jz      loc_4140
.text:0000000000003E34                 cmp     sil, 78h ; 'x'
.text:0000000000003E38                 jnz     def_3EC8        ; jumptable 0000000000003EC8 default case, case 0
.text:0000000000003E3E                 lea     eax, [r13-4]
.text:0000000000003E42                 lea     r9, aAddressRadix+0Ch ; "x"
.text:0000000000003E49                 lea     r10, [rbp+10h]
.text:0000000000003E4D                 lea     rcx, aDS        ; "%%*.%d%s"
.text:0000000000003E54                 mov     edx, 8
.text:0000000000003E59                 mov     esi, 1
.text:0000000000003E5E                 cmp     eax, 1
.text:0000000000003E61                 lea     rax, aLx        ; "lx"
.text:0000000000003E68                 mov     rdi, r10
.text:0000000000003E6B                 mov     [rsp+48h+s], r10
.text:0000000000003E70                 cmovbe  r9, rax
.text:0000000000003E74                 lea     rax, bytes_to_hex_digits
.text:0000000000003E7B                 mov     r15d, [rax+r8*4]
.text:0000000000003E7F                 xor     eax, eax
.text:0000000000003E81                 mov     r8d, r15d
.text:0000000000003E84                 call    ___sprintf_chk
.text:0000000000003E89                 mov     r10, [rsp+48h+s]
.text:0000000000003E8E                 mov     edx, 3
.text:0000000000003E93
.text:0000000000003E93 loc_3E93:                               ; CODE XREF: decode_format_string+1E5↑j
.text:0000000000003E93                                         ; decode_format_string+699↓j ...
.text:0000000000003E93                 mov     rdi, r10        ; s
.text:0000000000003E96                 mov     dword ptr [rsp+48h+s], edx
.text:0000000000003E9A                 call    _strlen
.text:0000000000003E9F                 cmp     rax, 7
.text:0000000000003EA3                 mov     edx, dword ptr [rsp+48h+s]
.text:0000000000003EA7                 ja      loc_427C
.text:0000000000003EAD                 cmp     r13d, 5         ; switch 6 cases
.text:0000000000003EB1                 ja      def_3EC8        ; jumptable 0000000000003EC8 default case, case 0
.text:0000000000003EB7                 lea     rsi, jpt_3EC8
.text:0000000000003EBE                 mov     ecx, r13d
.text:0000000000003EC1                 movsxd  rax, ds:(jpt_3EC8 - 0C020h)[rsi+rcx*4]
.text:0000000000003EC5                 add     rax, rsi
.text:0000000000003EC8                 jmp     rax             ; switch jump
.text:0000000000003EC8 ; ---------------------------------------------------------------------------
.text:0000000000003ECA                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 loc_3ED0:                               ; CODE XREF: decode_format_string+428↑j
.text:0000000000003ED0                                         ; DATA XREF: .rodata:jpt_3EC8↓o
.text:0000000000003ED0                 lea     rax, print_long_long ; jumptable 0000000000003EC8 case 5
.text:0000000000003ED7                 jmp     loc_3CAD
.text:0000000000003ED7 ; ---------------------------------------------------------------------------
.text:0000000000003EDC                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: decode_format_string+428↑j
.text:0000000000003EE0                                         ; DATA XREF: .rodata:jpt_3EC8↓o
.text:0000000000003EE0                 lea     rax, print_long ; jumptable 0000000000003EC8 case 4
.text:0000000000003EE7                 jmp     loc_3CAD
.text:0000000000003EE7 ; ---------------------------------------------------------------------------
.text:0000000000003EEC                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: decode_format_string+428↑j
.text:0000000000003EF0                                         ; DATA XREF: .rodata:jpt_3EC8↓o
.text:0000000000003EF0                 lea     rax, print_int  ; jumptable 0000000000003EC8 case 3
.text:0000000000003EF7                 jmp     loc_3CAD
.text:0000000000003EF7 ; ---------------------------------------------------------------------------
.text:0000000000003EFC                 align 20h
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: decode_format_string+428↑j
.text:0000000000003F00                                         ; DATA XREF: .rodata:jpt_3EC8↓o
.text:0000000000003F00                 lea     rax, print_short ; jumptable 0000000000003EC8 case 2
.text:0000000000003F07                 lea     rcx, print_s_short
.text:0000000000003F0E                 test    edx, edx
.text:0000000000003F10                 cmovz   rax, rcx
.text:0000000000003F14                 jmp     loc_3CAD
.text:0000000000003F14 ; ---------------------------------------------------------------------------
.text:0000000000003F19                 align 20h
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: decode_format_string+428↑j
.text:0000000000003F20                                         ; DATA XREF: .rodata:jpt_3EC8↓o
.text:0000000000003F20                 lea     rax, print_char ; jumptable 0000000000003EC8 case 1
.text:0000000000003F27                 lea     rcx, print_s_char
.text:0000000000003F2E                 test    edx, edx
.text:0000000000003F30                 cmovz   rax, rcx
.text:0000000000003F34                 jmp     loc_3CAD
.text:0000000000003F34 ; ---------------------------------------------------------------------------
.text:0000000000003F39                 align 20h
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: decode_format_string+16E↑j
.text:0000000000003F40                                         ; decode_format_string+362↑j
.text:0000000000003F40                 movsx   ecx, al
.text:0000000000003F43                 lea     rdi, [r12+1]
.text:0000000000003F48                 sub     ecx, 30h ; '0'
.text:0000000000003F4B                 cmp     ecx, 9
.text:0000000000003F4E                 ja      loc_4229
.text:0000000000003F54                 lea     rbx, [r12+2]
.text:0000000000003F59                 movsxd  rcx, ecx
.text:0000000000003F5C                 xor     r8d, r8d
.text:0000000000003F5F                 jmp     short loc_3F8F
.text:0000000000003F5F ; ---------------------------------------------------------------------------
.text:0000000000003F61                 align 8
.text:0000000000003F68
.text:0000000000003F68 loc_3F68:                               ; CODE XREF: decode_format_string+500↓j
.text:0000000000003F68                 movsxd  rcx, eax
.text:0000000000003F6B                 mov     rax, 0CCCCCCCCCCCCCCCDh
.text:0000000000003F75                 add     rbx, 1
.text:0000000000003F79                 mov     rdx, rcx
.text:0000000000003F7C                 not     rdx
.text:0000000000003F7F                 mul     rdx
.text:0000000000003F82                 shr     rdx, 3
.text:0000000000003F86                 cmp     rdx, r8
.text:0000000000003F89                 jb      loc_41A0
.text:0000000000003F8F
.text:0000000000003F8F loc_3F8F:                               ; CODE XREF: decode_format_string+4BF↑j
.text:0000000000003F8F                 lea     rax, [r8+r8*4]
.text:0000000000003F93                 lea     r8, [rcx+rax*2]
.text:0000000000003F97                 movsx   eax, byte ptr [rbx]
.text:0000000000003F9A                 sub     eax, 30h ; '0'
.text:0000000000003F9D                 cmp     eax, 9
.text:0000000000003FA0                 jbe     short loc_3F68
.text:0000000000003FA2                 cmp     rdi, rbx
.text:0000000000003FA5                 jz      loc_4217
.text:0000000000003FAB                 cmp     r8, 8
.text:0000000000003FAF                 ja      short loc_3FC5
.text:0000000000003FB1                 lea     rax, integral_type_size
.text:0000000000003FB8                 mov     r13d, [rax+r8*4]
.text:0000000000003FBC                 test    r13d, r13d
.text:0000000000003FBF                 jnz     loc_3E1A
.text:0000000000003FC5
.text:0000000000003FC5 loc_3FC5:                               ; CODE XREF: decode_format_string+50F↑j
.text:0000000000003FC5                 mov     rdi, [rsp+48h+var_48]
.text:0000000000003FC9                 mov     [rsp+48h+s], r8
.text:0000000000003FCE                 call    quote
.text:0000000000003FD3                 lea     rsi, aInvalidTypeStr_0 ; "invalid type string %s;\nthis system do"...
.text:0000000000003FDA                 mov     rbx, rax
.text:0000000000003FDD                 mov     edx, 5          ; category
.text:0000000000003FE2
.text:0000000000003FE2 loc_3FE2:                               ; CODE XREF: decode_format_string+141↑j
.text:0000000000003FE2                 xor     edi, edi        ; domainname
.text:0000000000003FE4                 call    _dcgettext
.text:0000000000003FE9                 mov     r8, [rsp+48h+s]
.text:0000000000003FEE                 mov     rcx, rbx
.text:0000000000003FF1                 mov     rdx, rax        ; format
.text:0000000000003FF4                 xor     esi, esi        ; errnum
.text:0000000000003FF6                 xor     eax, eax
.text:0000000000003FF8                 xor     edi, edi        ; status
.text:0000000000003FFA                 call    _error
.text:0000000000003FFF                 add     rsp, 18h
.text:0000000000004003                 xor     eax, eax
.text:0000000000004005                 pop     rbx
.text:0000000000004006                 pop     rbp
.text:0000000000004007                 pop     r12
.text:0000000000004009                 pop     r13
.text:000000000000400B                 pop     r14
.text:000000000000400D                 pop     r15
.text:000000000000400F                 retn
.text:0000000000004010 ; ---------------------------------------------------------------------------
.text:0000000000004010
.text:0000000000004010 loc_4010:                               ; CODE XREF: decode_format_string+AC↑j
.text:0000000000004010                 mov     r13d, cs:dword_210140
.text:0000000000004017                 mov     rbx, rsi
.text:000000000000401A                 nop     word ptr [rax+rax+00h]
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: decode_format_string+104↑j
.text:0000000000004020                                         ; decode_format_string+11E↑j ...
.text:0000000000004020                 call    _localeconv
.text:0000000000004025                 mov     rdi, [rax]      ; s
.text:0000000000004028                 mov     eax, 1
.text:000000000000402D                 cmp     byte ptr [rdi], 0
.text:0000000000004030                 jz      short loc_4037
.text:0000000000004032                 call    _strlen
.text:0000000000004037
.text:0000000000004037 loc_4037:                               ; CODE XREF: decode_format_string+590↑j
.text:0000000000004037                 cmp     r13d, 7
.text:000000000000403B                 jz      short loc_4050
.text:000000000000403D                 cmp     r13d, 8
.text:0000000000004041                 jz      short loc_4080
.text:0000000000004043                 cmp     r13d, 6
.text:0000000000004047                 jz      short loc_4068
.text:0000000000004049
.text:0000000000004049 def_3EC8:                               ; CODE XREF: decode_format_string+398↑j
.text:0000000000004049                                         ; decode_format_string+411↑j ...
.text:0000000000004049                 call    _abort          ; jumptable 0000000000003EC8 default case, case 0
.text:0000000000004049 ; ---------------------------------------------------------------------------
.text:000000000000404E                 align 10h
.text:0000000000004050
.text:0000000000004050 loc_4050:                               ; CODE XREF: decode_format_string+59B↑j
.text:0000000000004050                 lea     r15d, [rax+17h]
.text:0000000000004054                 mov     edx, 4
.text:0000000000004059                 lea     rax, print_double
.text:0000000000004060                 jmp     loc_3CAD
.text:0000000000004060 ; ---------------------------------------------------------------------------
.text:0000000000004065                 align 8
.text:0000000000004068
.text:0000000000004068 loc_4068:                               ; CODE XREF: decode_format_string+5A7↑j
.text:0000000000004068                 lea     r15d, [rax+0Eh]
.text:000000000000406C                 mov     edx, 4
.text:0000000000004071                 lea     rax, print_float
.text:0000000000004078                 jmp     loc_3CAD
.text:0000000000004078 ; ---------------------------------------------------------------------------
.text:000000000000407D                 align 20h
.text:0000000000004080
.text:0000000000004080 loc_4080:                               ; CODE XREF: decode_format_string+5A1↑j
.text:0000000000004080                 lea     r15d, [rax+1Ch]
.text:0000000000004084                 mov     edx, 4
.text:0000000000004089                 lea     rax, print_long_double
.text:0000000000004090                 jmp     loc_3CAD
.text:0000000000004090 ; ---------------------------------------------------------------------------
.text:0000000000004095                 align 8
.text:0000000000004098
.text:0000000000004098 loc_4098:                               ; CODE XREF: decode_format_string+98↑j
.text:0000000000004098                 lea     rbx, [r12+2]
.text:000000000000409D                 mov     r13d, cs:dword_210140
.text:00000000000040A4                 jmp     loc_4020
.text:00000000000040A4 ; ---------------------------------------------------------------------------
.text:00000000000040A9                 align 10h
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: decode_format_string+90↑j
.text:00000000000040B0                 lea     rbx, [r12+2]
.text:00000000000040B5                 mov     r13d, cs:dword_210160
.text:00000000000040BC                 jmp     loc_4020
.text:00000000000040BC ; ---------------------------------------------------------------------------
.text:00000000000040C1                 align 8
.text:00000000000040C8
.text:00000000000040C8 loc_40C8:                               ; CODE XREF: decode_format_string+88↑j
.text:00000000000040C8                 lea     rbx, [r12+2]
.text:00000000000040CD                 mov     r13d, cs:dword_210130
.text:00000000000040D4                 jmp     loc_4020
.text:00000000000040D4 ; ---------------------------------------------------------------------------
.text:00000000000040D9                 align 20h
.text:00000000000040E0
.text:00000000000040E0 loc_40E0:                               ; CODE XREF: decode_format_string:loc_3E24↑j
.text:00000000000040E0                 cmp     sil, 64h ; 'd'
.text:00000000000040E4                 jnz     def_3EC8        ; jumptable 0000000000003EC8 default case, case 0
.text:00000000000040EA                 lea     rax, bytes_to_signed_dec_digits
.text:00000000000040F1                 lea     r10, [rbp+10h]
.text:00000000000040F5                 lea     rcx, aS_0       ; "%%*%s"
.text:00000000000040FC                 mov     edx, 8
.text:0000000000004101                 mov     esi, 1
.text:0000000000004106                 mov     r15d, [rax+r8*4]
.text:000000000000410A                 lea     eax, [r13-4]
.text:000000000000410E                 lea     r8, aMemoryExhauste+0Fh ; "d"
.text:0000000000004115                 mov     rdi, r10
.text:0000000000004118                 mov     [rsp+48h+s], r10
.text:000000000000411D                 cmp     eax, 1
.text:0000000000004120                 lea     rax, aLd        ; "ld"
.text:0000000000004127                 cmovbe  r8, rax
.text:000000000000412B                 xor     eax, eax
.text:000000000000412D                 call    ___sprintf_chk
.text:0000000000004132                 xor     edx, edx
.text:0000000000004134                 mov     r10, [rsp+48h+s]
.text:0000000000004139                 jmp     loc_3E93
.text:0000000000004139 ; ---------------------------------------------------------------------------
.text:000000000000413E                 align 20h
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: decode_format_string+38E↑j
.text:0000000000004140                 lea     rax, bytes_to_unsigned_dec_digits
.text:0000000000004147                 lea     r10, [rbp+10h]
.text:000000000000414B                 lea     rcx, aS_0       ; "%%*%s"
.text:0000000000004152                 mov     edx, 8
.text:0000000000004157                 mov     esi, 1
.text:000000000000415C                 mov     r15d, [rax+r8*4]
.text:0000000000004160                 lea     eax, [r13-4]
.text:0000000000004164                 lea     r8, aLu+1       ; "u"
.text:000000000000416B                 mov     rdi, r10
.text:000000000000416E                 mov     [rsp+48h+s], r10
.text:0000000000004173                 cmp     eax, 1
.text:0000000000004176                 lea     rax, aLu        ; "lu"
.text:000000000000417D                 cmovbe  r8, rax
.text:0000000000004181                 xor     eax, eax
.text:0000000000004183                 call    ___sprintf_chk
.text:0000000000004188                 mov     edx, 1
.text:000000000000418D                 mov     r10, [rsp+48h+s]
.text:0000000000004192                 jmp     loc_3E93
.text:0000000000004192 ; ---------------------------------------------------------------------------
.text:0000000000004197                 align 20h
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: decode_format_string+E1↑j
.text:00000000000041A0                                         ; decode_format_string+4E9↑j
.text:00000000000041A0                 mov     rdi, [rsp+48h+var_48]
.text:00000000000041A4                 call    quote
.text:00000000000041A9                 lea     rsi, aInvalidTypeStr_1 ; "invalid type string %s"
.text:00000000000041B0                 mov     rbx, rax
.text:00000000000041B3                 mov     edx, 5          ; category
.text:00000000000041B8                 xor     edi, edi        ; domainname
.text:00000000000041BA                 call    _dcgettext
.text:00000000000041BF                 mov     rcx, rbx
.text:00000000000041C2                 mov     rdx, rax        ; format
.text:00000000000041C5                 xor     esi, esi        ; errnum
.text:00000000000041C7                 xor     eax, eax
.text:00000000000041C9                 xor     edi, edi        ; status
.text:00000000000041CB                 call    _error
.text:00000000000041D0                 add     rsp, 18h
.text:00000000000041D4                 xor     eax, eax
.text:00000000000041D6                 pop     rbx
.text:00000000000041D7                 pop     rbp
.text:00000000000041D8                 pop     r12
.text:00000000000041DA                 pop     r13
.text:00000000000041DC                 pop     r14
.text:00000000000041DE                 pop     r15
.text:00000000000041E0                 retn
.text:00000000000041E0 ; ---------------------------------------------------------------------------
.text:00000000000041E1                 align 8
.text:00000000000041E8
.text:00000000000041E8 loc_41E8:                               ; CODE XREF: decode_format_string+166↑j
.text:00000000000041E8                 lea     rbx, [r12+2]
.text:00000000000041ED                 mov     r13d, cs:dword_2101A0
.text:00000000000041F4                 mov     r8d, 8
.text:00000000000041FA                 jmp     loc_3E1A
.text:00000000000041FA ; ---------------------------------------------------------------------------
.text:00000000000041FF                 align 20h
.text:0000000000004200
.text:0000000000004200 loc_4200:                               ; CODE XREF: decode_format_string+158↑j
.text:0000000000004200                 lea     rbx, [r12+2]
.text:0000000000004205                 mov     r13d, cs:dword_210190
.text:000000000000420C                 mov     r8d, 4
.text:0000000000004212                 jmp     loc_3E1A
.text:0000000000004217 ; ---------------------------------------------------------------------------
.text:0000000000004217
.text:0000000000004217 loc_4217:                               ; CODE XREF: decode_format_string+505↑j
.text:0000000000004217                 mov     r13d, cs:dword_210190
.text:000000000000421E                 mov     r8d, 4
.text:0000000000004224                 jmp     loc_3E1A
.text:0000000000004229 ; ---------------------------------------------------------------------------
.text:0000000000004229
.text:0000000000004229 loc_4229:                               ; CODE XREF: decode_format_string+4AE↑j
.text:0000000000004229                 mov     r13d, cs:dword_210190
.text:0000000000004230                 mov     rbx, rdi
.text:0000000000004233                 mov     r8d, 4
.text:0000000000004239                 jmp     loc_3E1A
.text:000000000000423E ; ---------------------------------------------------------------------------
.text:000000000000423E
.text:000000000000423E loc_423E:                               ; CODE XREF: decode_format_string+22E↑j
.text:000000000000423E                 lea     rcx, __PRETTY_FUNCTION___7462 ; "decode_format_string"
.text:0000000000004245                 lea     rsi, file       ; "../coreutils-8.31/src/od.c"
.text:000000000000424C                 lea     rdi, aSNext     ; "s != next"
.text:0000000000004253                 mov     edx, 3E4h       ; line
.text:0000000000004258                 call    ___assert_fail
.text:000000000000425D ; ---------------------------------------------------------------------------
.text:000000000000425D
.text:000000000000425D loc_425D:                               ; CODE XREF: decode_format_string+5A↑j
.text:000000000000425D                 lea     rcx, __PRETTY_FUNCTION___7407 ; "decode_one_format"
.text:0000000000004264                 lea     rsi, file       ; "../coreutils-8.31/src/od.c"
.text:000000000000426B                 lea     rdi, aTspecNull ; "tspec != NULL"
.text:0000000000004272                 mov     edx, 286h       ; line
.text:0000000000004277                 call    ___assert_fail
.text:000000000000427C ; ---------------------------------------------------------------------------
.text:000000000000427C
.text:000000000000427C loc_427C:                               ; CODE XREF: decode_format_string+407↑j
.text:000000000000427C                 lea     rcx, __PRETTY_FUNCTION___7407 ; "decode_one_format"
.text:0000000000004283                 lea     rsi, file       ; "../coreutils-8.31/src/od.c"
.text:000000000000428A                 lea     rdi, aStrlenTspecFmt ; "strlen (tspec->fmt_string) < FMT_BYTES_"...
.text:0000000000004291                 mov     edx, 2E9h       ; line
.text:0000000000004296                 call    ___assert_fail
.text:000000000000429B ; ---------------------------------------------------------------------------
.text:000000000000429B
.text:000000000000429B loc_429B:                               ; CODE XREF: decode_format_string+349↑j
.text:000000000000429B                 mov     esi, 1
.text:00000000000042A0                 jmp     loc_3DEF
.text:00000000000042A5 ; ---------------------------------------------------------------------------
.text:00000000000042A5
.text:00000000000042A5 loc_42A5:                               ; CODE XREF: decode_format_string+15↑j
.text:00000000000042A5                 lea     rcx, __PRETTY_FUNCTION___7462 ; "decode_format_string"
.text:00000000000042AC                 lea     rsi, file       ; "../coreutils-8.31/src/od.c"
.text:00000000000042B3                 lea     rdi, aSNull     ; "s != NULL"
.text:00000000000042BA                 mov     edx, 3D8h       ; line
.text:00000000000042BF                 call    ___assert_fail
.text:00000000000042BF ; } // starts at 3AA0
.text:00000000000042BF decode_format_string endp
.text:00000000000042BF
.text:00000000000042BF ; ---------------------------------------------------------------------------
.text:00000000000042C4                 align 10h
.text:00000000000042D0
.text:00000000000042D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042D0
.text:00000000000042D0
.text:00000000000042D0 print_ascii     proc near               ; DATA XREF: decode_format_string+1F5↑o
.text:00000000000042D0
.text:00000000000042D0 var_68          = qword ptr -68h
.text:00000000000042D0 var_60          = qword ptr -60h
.text:00000000000042D0 var_58          = qword ptr -58h
.text:00000000000042D0 var_50          = dword ptr -50h
.text:00000000000042D0 var_4C          = dword ptr -4Ch
.text:00000000000042D0 var_44          = byte ptr -44h
.text:00000000000042D0 var_40          = qword ptr -40h
.text:00000000000042D0
.text:00000000000042D0 ; __unwind {
.text:00000000000042D0                 push    r15
.text:00000000000042D2                 push    r14
.text:00000000000042D4                 push    r13
.text:00000000000042D6                 push    r12
.text:00000000000042D8                 push    rbp
.text:00000000000042D9                 push    rbx
.text:00000000000042DA                 sub     rsp, 38h
.text:00000000000042DE                 mov     rax, fs:28h
.text:00000000000042E7                 mov     [rsp+68h+var_40], rax
.text:00000000000042EC                 xor     eax, eax
.text:00000000000042EE                 cmp     rdi, rsi
.text:00000000000042F1                 mov     [rsp+68h+var_50], r8d
.text:00000000000042F6                 jbe     loc_4385
.text:00000000000042FC                 lea     rbx, [rdi-1]
.text:0000000000004300                 movsxd  r14, r9d
.text:0000000000004303                 mov     rax, rdi
.text:0000000000004306                 sub     rax, rsi
.text:0000000000004309                 lea     r13, jpt_4352
.text:0000000000004310                 mov     r12, rdi
.text:0000000000004313                 imul    rbx, r14
.text:0000000000004317                 add     rax, rdx
.text:000000000000431A                 mov     r15, rdx
.text:000000000000431D                 mov     [rsp+68h+var_68], rax
.text:0000000000004321                 nop     dword ptr [rax+00000000h]
.text:0000000000004328
.text:0000000000004328 loc_4328:                               ; CODE XREF: print_ascii+B3↓j
.text:0000000000004328                 xor     edx, edx
.text:000000000000432A                 mov     rax, rbx
.text:000000000000432D                 add     r15, 1
.text:0000000000004331                 movzx   r8d, byte ptr [r15-1]
.text:0000000000004336                 div     r12
.text:0000000000004339                 cmp     r8b, 0Dh        ; switch 14 cases
.text:000000000000433D                 movzx   edx, r8b
.text:0000000000004341                 mov     rbp, rax
.text:0000000000004344                 ja      def_4352        ; jumptable 0000000000004352 default case, cases 1-6
.text:000000000000434A                 movsxd  rax, ds:(jpt_4352 - 0C038h)[r13+rdx*4]
.text:000000000000434F                 add     rax, r13
.text:0000000000004352                 jmp     rax             ; switch jump
.text:0000000000004352 ; ---------------------------------------------------------------------------
.text:0000000000004354                 align 8
.text:0000000000004358
.text:0000000000004358 loc_4358:                               ; CODE XREF: print_ascii+82↑j
.text:0000000000004358                                         ; DATA XREF: .rodata:jpt_4352↓o
.text:0000000000004358                 lea     rdx, aA         ; jumptable 0000000000004352 case 7
.text:000000000000435F                 nop
.text:0000000000004360
.text:0000000000004360 loc_4360:                               ; CODE XREF: print_ascii+E7↓j
.text:0000000000004360                                         ; print_ascii+F7↓j ...
.text:0000000000004360                 mov     eax, [rsp+68h+var_50]
.text:0000000000004364                 sub     r9d, ebp
.text:0000000000004367                 lea     rdi, aS         ; "%*s"
.text:000000000000436E                 sub     rbx, r14
.text:0000000000004371                 lea     esi, [r9+rax]
.text:0000000000004375                 xor     eax, eax
.text:0000000000004377                 call    xasprintf
.text:000000000000437C                 cmp     r15, [rsp+68h+var_68]
.text:0000000000004380                 mov     r9d, ebp
.text:0000000000004383                 jnz     short loc_4328
.text:0000000000004385
.text:0000000000004385 loc_4385:                               ; CODE XREF: print_ascii+26↑j
.text:0000000000004385                 mov     rax, [rsp+68h+var_40]
.text:000000000000438A                 xor     rax, fs:28h
.text:0000000000004393                 jnz     loc_4489
.text:0000000000004399                 add     rsp, 38h
.text:000000000000439D                 pop     rbx
.text:000000000000439E                 pop     rbp
.text:000000000000439F                 pop     r12
.text:00000000000043A1                 pop     r13
.text:00000000000043A3                 pop     r14
.text:00000000000043A5                 pop     r15
.text:00000000000043A7                 retn
.text:00000000000043A7 ; ---------------------------------------------------------------------------
.text:00000000000043A8                 align 10h
.text:00000000000043B0
.text:00000000000043B0 loc_43B0:                               ; CODE XREF: print_ascii+82↑j
.text:00000000000043B0                                         ; DATA XREF: .rodata:jpt_4352↓o
.text:00000000000043B0                 lea     rdx, a0         ; jumptable 0000000000004352 case 0
.text:00000000000043B7                 jmp     short loc_4360
.text:00000000000043B7 ; ---------------------------------------------------------------------------
.text:00000000000043B9                 align 20h
.text:00000000000043C0
.text:00000000000043C0 loc_43C0:                               ; CODE XREF: print_ascii+82↑j
.text:00000000000043C0                                         ; DATA XREF: .rodata:jpt_4352↓o
.text:00000000000043C0                 lea     rdx, unk_AD66   ; jumptable 0000000000004352 case 13
.text:00000000000043C7                 jmp     short loc_4360
.text:00000000000043C7 ; ---------------------------------------------------------------------------
.text:00000000000043C9                 align 10h
.text:00000000000043D0
.text:00000000000043D0 loc_43D0:                               ; CODE XREF: print_ascii+82↑j
.text:00000000000043D0                                         ; DATA XREF: .rodata:jpt_4352↓o
.text:00000000000043D0                 lea     rdx, asc_AD60   ; jumptable 0000000000004352 case 12
.text:00000000000043D7                 jmp     short loc_4360
.text:00000000000043D7 ; ---------------------------------------------------------------------------
.text:00000000000043D9                 align 20h
.text:00000000000043E0
.text:00000000000043E0 loc_43E0:                               ; CODE XREF: print_ascii+82↑j
.text:00000000000043E0                                         ; DATA XREF: .rodata:jpt_4352↓o
.text:00000000000043E0                 lea     rdx, aV         ; jumptable 0000000000004352 case 11
.text:00000000000043E7                 jmp     loc_4360
.text:00000000000043E7 ; ---------------------------------------------------------------------------
.text:00000000000043EC                 align 10h
.text:00000000000043F0
.text:00000000000043F0 loc_43F0:                               ; CODE XREF: print_ascii+82↑j
.text:00000000000043F0                                         ; DATA XREF: .rodata:jpt_4352↓o
.text:00000000000043F0                 lea     rdx, aN         ; jumptable 0000000000004352 case 10
.text:00000000000043F7                 jmp     loc_4360
.text:00000000000043F7 ; ---------------------------------------------------------------------------
.text:00000000000043FC                 align 20h
.text:0000000000004400
.text:0000000000004400 loc_4400:                               ; CODE XREF: print_ascii+82↑j
.text:0000000000004400                                         ; DATA XREF: .rodata:jpt_4352↓o
.text:0000000000004400                 lea     rdx, aT         ; jumptable 0000000000004352 case 9
.text:0000000000004407                 jmp     loc_4360
.text:0000000000004407 ; ---------------------------------------------------------------------------
.text:000000000000440C                 align 10h
.text:0000000000004410
.text:0000000000004410 loc_4410:                               ; CODE XREF: print_ascii+82↑j
.text:0000000000004410                                         ; DATA XREF: .rodata:jpt_4352↓o
.text:0000000000004410                 lea     rdx, aB         ; jumptable 0000000000004352 case 8
.text:0000000000004417                 jmp     loc_4360
.text:0000000000004417 ; ---------------------------------------------------------------------------
.text:000000000000441C                 align 20h
.text:0000000000004420
.text:0000000000004420 def_4352:                               ; CODE XREF: print_ascii+74↑j
.text:0000000000004420                                         ; print_ascii+82↑j
.text:0000000000004420                                         ; DATA XREF: ...
.text:0000000000004420                 mov     [rsp+68h+var_4C], r9d ; jumptable 0000000000004352 default case, cases 1-6
.text:0000000000004425                 mov     [rsp+68h+var_58], rdx
.text:000000000000442A                 mov     byte ptr [rsp+68h+var_60], r8b
.text:000000000000442F                 call    ___ctype_b_loc
.text:0000000000004434                 mov     rdx, [rsp+68h+var_58]
.text:0000000000004439                 mov     rax, [rax]
.text:000000000000443C                 lea     r11, [rsp+68h+var_44]
.text:0000000000004441                 movzx   r8d, byte ptr [rsp+68h+var_60]
.text:0000000000004447                 lea     rcx, aC         ; "%c"
.text:000000000000444E                 mov     esi, 1
.text:0000000000004453                 mov     rdi, r11
.text:0000000000004456                 mov     [rsp+68h+var_60], r11
.text:000000000000445B                 test    byte ptr [rax+rdx*2+1], 40h
.text:0000000000004460                 lea     rax, a03o       ; "%03o"
.text:0000000000004467                 mov     edx, 4
.text:000000000000446C                 cmovz   rcx, rax
.text:0000000000004470                 xor     eax, eax
.text:0000000000004472                 call    ___sprintf_chk
.text:0000000000004477                 mov     r11, [rsp+68h+var_60]
.text:000000000000447C                 mov     r9d, [rsp+68h+var_4C]
.text:0000000000004481                 mov     rdx, r11
.text:0000000000004484                 jmp     loc_4360
.text:0000000000004489 ; ---------------------------------------------------------------------------
.text:0000000000004489
.text:0000000000004489 loc_4489:                               ; CODE XREF: print_ascii+C3↑j
.text:0000000000004489                 call    ___stack_chk_fail
.text:0000000000004489 ; } // starts at 42D0
.text:0000000000004489 print_ascii     endp
.text:0000000000004489
.text:0000000000004489 ; ---------------------------------------------------------------------------
.text:000000000000448E                 align 10h
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490
.text:0000000000004490 ; __int64 __fastcall check_and_close(int errnum)
.text:0000000000004490 check_and_close proc near               ; CODE XREF: main+887↑p
.text:0000000000004490                                         ; main+1043↑p ...
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 push    rbp
.text:0000000000004491                 push    rbx
.text:0000000000004492                 mov     ebx, 1
.text:0000000000004497                 sub     rsp, 8
.text:000000000000449B                 mov     rax, cs:in_stream
.text:00000000000044A2                 test    rax, rax
.text:00000000000044A5                 jz      short loc_44E5
.text:00000000000044A7                 test    byte ptr [rax], 20h
.text:00000000000044AA                 mov     ebp, edi
.text:00000000000044AC                 jnz     short loc_4520
.text:00000000000044AE                 mov     rdx, cs:file_list
.text:00000000000044B5                 lea     rdi, asc_D138+1 ; "-"
.text:00000000000044BC                 mov     ecx, 2
.text:00000000000044C1                 mov     rsi, [rdx-8]
.text:00000000000044C5                 repe cmpsb
.text:00000000000044C7                 setnbe  dl
.text:00000000000044CA                 sbb     dl, 0
.text:00000000000044CD                 test    dl, dl
.text:00000000000044CF                 jnz     loc_4598
.text:00000000000044D5
.text:00000000000044D5 loc_44D5:                               ; CODE XREF: check_and_close+112↓j
.text:00000000000044D5                 mov     ebx, 1
.text:00000000000044DA
.text:00000000000044DA loc_44DA:                               ; CODE XREF: check_and_close+EC↓j
.text:00000000000044DA                                         ; check_and_close+FE↓j ...
.text:00000000000044DA                 mov     cs:in_stream, 0
.text:00000000000044E5
.text:00000000000044E5 loc_44E5:                               ; CODE XREF: check_and_close+15↑j
.text:00000000000044E5                 mov     rax, cs:stdout@@GLIBC_2_2_5
.text:00000000000044EC                 test    byte ptr [rax], 20h
.text:00000000000044EF                 jz      short loc_4514
.text:00000000000044F1                 lea     rsi, aWriteError ; "write error"
.text:00000000000044F8                 mov     edx, 5          ; category
.text:00000000000044FD                 xor     edi, edi        ; domainname
.text:00000000000044FF                 xor     ebx, ebx
.text:0000000000004501                 call    _dcgettext
.text:0000000000004506                 xor     esi, esi        ; errnum
.text:0000000000004508                 mov     rdx, rax        ; format
.text:000000000000450B                 xor     edi, edi        ; status
.text:000000000000450D                 xor     eax, eax
.text:000000000000450F                 call    _error
.text:0000000000004514
.text:0000000000004514 loc_4514:                               ; CODE XREF: check_and_close+5F↑j
.text:0000000000004514                 add     rsp, 8
.text:0000000000004518                 mov     eax, ebx
.text:000000000000451A                 pop     rbx
.text:000000000000451B                 pop     rbp
.text:000000000000451C                 retn
.text:000000000000451C ; ---------------------------------------------------------------------------
.text:000000000000451D                 align 20h
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: check_and_close+1C↑j
.text:0000000000004520                 mov     rdx, cs:input_filename
.text:0000000000004527                 xor     edi, edi
.text:0000000000004529                 mov     esi, 3
.text:000000000000452E                 call    quotearg_n_style_colon
.text:0000000000004533                 lea     rsi, aSReadError ; "%s: read error"
.text:000000000000453A                 mov     rbx, rax
.text:000000000000453D                 xor     edi, edi        ; domainname
.text:000000000000453F                 mov     edx, 5          ; category
.text:0000000000004544                 call    _dcgettext
.text:0000000000004549                 mov     rcx, rbx
.text:000000000000454C                 xor     edi, edi        ; status
.text:000000000000454E                 mov     rdx, rax        ; format
.text:0000000000004551                 mov     esi, ebp        ; errnum
.text:0000000000004553                 xor     eax, eax
.text:0000000000004555                 call    _error
.text:000000000000455A                 mov     rax, cs:file_list
.text:0000000000004561                 lea     rdi, asc_D138+1 ; "-"
.text:0000000000004568                 mov     ecx, 2
.text:000000000000456D                 mov     rsi, [rax-8]
.text:0000000000004571                 repe cmpsb
.text:0000000000004573                 setnbe  al
.text:0000000000004576                 sbb     al, 0
.text:0000000000004578                 xor     ebx, ebx
.text:000000000000457A                 test    al, al
.text:000000000000457C                 jz      loc_44DA
.text:0000000000004582                 mov     rdi, cs:in_stream ; stream
.text:0000000000004589                 call    rpl_fclose
.text:000000000000458E                 jmp     loc_44DA
.text:000000000000458E ; ---------------------------------------------------------------------------
.text:0000000000004593                 align 8
.text:0000000000004598
.text:0000000000004598 loc_4598:                               ; CODE XREF: check_and_close+3F↑j
.text:0000000000004598                 mov     rdi, rax        ; stream
.text:000000000000459B                 call    rpl_fclose
.text:00000000000045A0                 test    eax, eax
.text:00000000000045A2                 jz      loc_44D5
.text:00000000000045A8                 mov     rdx, cs:input_filename
.text:00000000000045AF                 mov     esi, 3
.text:00000000000045B4                 xor     edi, edi
.text:00000000000045B6                 call    quotearg_n_style_colon
.text:00000000000045BB                 mov     rbx, rax
.text:00000000000045BE                 call    ___errno_location
.text:00000000000045C3                 mov     esi, [rax]      ; errnum
.text:00000000000045C5                 lea     rdx, aS_2+2     ; format
.text:00000000000045CC                 mov     rcx, rbx
.text:00000000000045CF                 xor     edi, edi        ; status
.text:00000000000045D1                 xor     eax, eax
.text:00000000000045D3                 xor     ebx, ebx
.text:00000000000045D5                 call    _error
.text:00000000000045DA                 jmp     loc_44DA
.text:00000000000045DA ; } // starts at 4490
.text:00000000000045DA check_and_close endp
.text:00000000000045DA
.text:00000000000045DA ; ---------------------------------------------------------------------------
.text:00000000000045DF                 align 20h
.text:00000000000045E0
.text:00000000000045E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045E0
.text:00000000000045E0
.text:00000000000045E0 open_next_file  proc near               ; CODE XREF: main:loc_21C6↑p
.text:00000000000045E0                                         ; skip+AC↓p ...
.text:00000000000045E0 ; __unwind {
.text:00000000000045E0                 push    rbp
.text:00000000000045E1                 push    rbx
.text:00000000000045E2                 lea     rbx, asc_D138+1 ; "-"
.text:00000000000045E9                 mov     ebp, 1
.text:00000000000045EE                 sub     rsp, 8
.text:00000000000045F2
.text:00000000000045F2 loc_45F2:                               ; CODE XREF: open_next_file+7F↓j
.text:00000000000045F2                 mov     rax, cs:file_list
.text:00000000000045F9                 mov     rdx, [rax]
.text:00000000000045FC                 test    rdx, rdx
.text:00000000000045FF                 mov     cs:input_filename, rdx
.text:0000000000004606                 jz      loc_4695
.text:000000000000460C                 mov     ecx, 2
.text:0000000000004611                 mov     rsi, rdx
.text:0000000000004614                 mov     rdi, rbx
.text:0000000000004617                 add     rax, 8
.text:000000000000461B                 repe cmpsb
.text:000000000000461D                 mov     cs:file_list, rax
.text:0000000000004624                 setnbe  al
.text:0000000000004627                 sbb     al, 0
.text:0000000000004629                 test    al, al
.text:000000000000462B                 jnz     short loc_4668
.text:000000000000462D                 lea     rsi, aStandardInput ; "standard input"
.text:0000000000004634                 mov     edx, 5          ; category
.text:0000000000004639                 xor     edi, edi        ; domainname
.text:000000000000463B                 call    _dcgettext
.text:0000000000004640                 mov     cs:input_filename, rax
.text:0000000000004647                 mov     rax, cs:stdin@@GLIBC_2_2_5
.text:000000000000464E                 mov     cs:have_read_stdin, 1
.text:0000000000004655                 mov     cs:in_stream, rax
.text:000000000000465C
.text:000000000000465C loc_465C:                               ; CODE XREF: open_next_file+F9↓j
.text:000000000000465C                 test    rax, rax
.text:000000000000465F                 jz      short loc_45F2
.text:0000000000004661                 jmp     short loc_4683
.text:0000000000004661 ; ---------------------------------------------------------------------------
.text:0000000000004663                 align 8
.text:0000000000004668
.text:0000000000004668 loc_4668:                               ; CODE XREF: open_next_file+4B↑j
.text:0000000000004668                 lea     rsi, modes      ; "r"
.text:000000000000466F                 mov     rdi, rdx        ; filename
.text:0000000000004672                 call    _fopen
.text:0000000000004677                 test    rax, rax
.text:000000000000467A                 mov     cs:in_stream, rax
.text:0000000000004681                 jz      short loc_46A0
.text:0000000000004683
.text:0000000000004683 loc_4683:                               ; CODE XREF: open_next_file+81↑j
.text:0000000000004683                 cmp     cs:limit_bytes_to_format, 0
.text:000000000000468A                 jz      short loc_4695
.text:000000000000468C                 cmp     cs:flag_dump_strings, 0
.text:0000000000004693                 jz      short loc_46E0
.text:0000000000004695
.text:0000000000004695 loc_4695:                               ; CODE XREF: open_next_file+26↑j
.text:0000000000004695                                         ; open_next_file+AA↑j ...
.text:0000000000004695                 add     rsp, 8
.text:0000000000004699                 mov     eax, ebp
.text:000000000000469B                 pop     rbx
.text:000000000000469C                 pop     rbp
.text:000000000000469D                 retn
.text:000000000000469D ; ---------------------------------------------------------------------------
.text:000000000000469E                 align 20h
.text:00000000000046A0
.text:00000000000046A0 loc_46A0:                               ; CODE XREF: open_next_file+A1↑j
.text:00000000000046A0                 mov     rdx, cs:input_filename
.text:00000000000046A7                 mov     esi, 3
.text:00000000000046AC                 xor     edi, edi
.text:00000000000046AE                 call    quotearg_n_style_colon
.text:00000000000046B3                 mov     rbp, rax
.text:00000000000046B6                 call    ___errno_location
.text:00000000000046BB                 mov     esi, [rax]      ; errnum
.text:00000000000046BD                 lea     rdx, aS_2+2     ; format
.text:00000000000046C4                 mov     rcx, rbp
.text:00000000000046C7                 xor     eax, eax
.text:00000000000046C9                 xor     edi, edi        ; status
.text:00000000000046CB                 xor     ebp, ebp
.text:00000000000046CD                 call    _error
.text:00000000000046D2                 mov     rax, cs:in_stream
.text:00000000000046D9                 jmp     loc_465C
.text:00000000000046D9 ; ---------------------------------------------------------------------------
.text:00000000000046DE                 align 20h
.text:00000000000046E0
.text:00000000000046E0 loc_46E0:                               ; CODE XREF: open_next_file+B3↑j
.text:00000000000046E0                 xor     ecx, ecx        ; n
.text:00000000000046E2                 mov     edx, 2          ; modes
.text:00000000000046E7                 xor     esi, esi        ; buf
.text:00000000000046E9                 mov     rdi, rax        ; stream
.text:00000000000046EC                 call    _setvbuf
.text:00000000000046F1                 jmp     short loc_4695
.text:00000000000046F1 ; } // starts at 45E0
.text:00000000000046F1 open_next_file  endp
.text:00000000000046F1
.text:00000000000046F1 ; ---------------------------------------------------------------------------
.text:00000000000046F3                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700
.text:0000000000004700 skip            proc near               ; CODE XREF: main+673↑p
.text:0000000000004700
.text:0000000000004700 var_20C0        = dword ptr -20C0h
.text:0000000000004700 var_20A8        = qword ptr -20A8h
.text:0000000000004700 var_20A0        = qword ptr -20A0h
.text:0000000000004700 var_2048        = byte ptr -2048h
.text:0000000000004700 var_40          = qword ptr -40h
.text:0000000000004700
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 push    r15
.text:0000000000004702                 push    r14
.text:0000000000004704                 push    r13
.text:0000000000004706                 push    r12
.text:0000000000004708                 push    rbp
.text:0000000000004709                 push    rbx
.text:000000000000470A                 sub     rsp, 20A8h
.text:0000000000004711                 mov     rax, fs:28h
.text:000000000000471A                 mov     [rsp+20D8h+var_40], rax
.text:0000000000004722                 xor     eax, eax
.text:0000000000004724                 test    rdi, rdi
.text:0000000000004727                 jz      loc_48A8
.text:000000000000472D                 mov     r15, cs:in_stream
.text:0000000000004734                 test    r15, r15
.text:0000000000004737                 jz      loc_480E
.text:000000000000473D                 mov     r13, rdi
.text:0000000000004740                 mov     ebx, 1
.text:0000000000004745                 mov     r12, rsp
.text:0000000000004748                 lea     rbp, [rsp+20D8h+var_2048]
.text:0000000000004750                 mov     r14, 1FFFFFFFFFFFFFFFh
.text:000000000000475A                 jmp     short loc_47BF
.text:000000000000475A ; ---------------------------------------------------------------------------
.text:000000000000475C                 align 20h
.text:0000000000004760
.text:0000000000004760 loc_4760:                               ; CODE XREF: skip+D8↓j
.text:0000000000004760                 mov     eax, [rsp+20D8h+var_20C0]
.text:0000000000004764                 and     eax, 0D000h
.text:0000000000004769                 cmp     eax, 8000h
.text:000000000000476E                 jnz     loc_4838
.text:0000000000004774                 mov     rax, [rsp+20D8h+var_20A0]
.text:0000000000004779                 mov     ecx, 200h
.text:000000000000477E                 lea     rdx, [rax-1]
.text:0000000000004782                 cmp     rdx, r14
.text:0000000000004785                 mov     rdx, [rsp+20D8h+var_20A8]
.text:000000000000478A                 cmova   rax, rcx
.text:000000000000478E                 cmp     rdx, rax
.text:0000000000004791                 jle     loc_4838
.text:0000000000004797                 cmp     rdx, r13
.text:000000000000479A                 jnb     loc_48BE
.text:00000000000047A0                 sub     r13, rdx
.text:00000000000047A3
.text:00000000000047A3 loc_47A3:                               ; CODE XREF: skip+10C↓j
.text:00000000000047A3                                         ; skip+1B6↓j
.text:00000000000047A3                 xor     edi, edi        ; errnum
.text:00000000000047A5                 call    check_and_close
.text:00000000000047AA                 and     ebx, eax
.text:00000000000047AC                 call    open_next_file
.text:00000000000047B1                 mov     r15, cs:in_stream
.text:00000000000047B8                 and     ebx, eax
.text:00000000000047BA                 test    r15, r15
.text:00000000000047BD                 jz      short loc_480E
.text:00000000000047BF
.text:00000000000047BF loc_47BF:                               ; CODE XREF: skip+5A↑j
.text:00000000000047BF                 mov     rdi, r15        ; stream
.text:00000000000047C2                 call    _fileno
.text:00000000000047C7                 mov     rdx, r12        ; stat_buf
.text:00000000000047CA                 mov     esi, eax        ; fildes
.text:00000000000047CC                 mov     edi, 1          ; ver
.text:00000000000047D1                 call    ___fxstat
.text:00000000000047D6                 test    eax, eax
.text:00000000000047D8                 jz      short loc_4760
.text:00000000000047DA                 mov     rdx, cs:input_filename
.text:00000000000047E1                 mov     esi, 3
.text:00000000000047E6                 xor     edi, edi
.text:00000000000047E8                 call    quotearg_n_style_colon
.text:00000000000047ED                 mov     rbx, rax
.text:00000000000047F0                 call    ___errno_location
.text:00000000000047F5                 mov     esi, [rax]      ; errnum
.text:00000000000047F7                 lea     rdx, aS_2+2     ; format
.text:00000000000047FE                 mov     rcx, rbx
.text:0000000000004801                 xor     edi, edi        ; status
.text:0000000000004803                 xor     eax, eax
.text:0000000000004805                 xor     ebx, ebx
.text:0000000000004807                 call    _error
.text:000000000000480C                 jmp     short loc_47A3
.text:000000000000480E ; ---------------------------------------------------------------------------
.text:000000000000480E
.text:000000000000480E loc_480E:                               ; CODE XREF: skip+37↑j
.text:000000000000480E                                         ; skip+BD↑j
.text:000000000000480E                 lea     rsi, aCannotSkipPast ; "cannot skip past end of combined input"
.text:0000000000004815                 mov     edx, 5          ; category
.text:000000000000481A                 xor     edi, edi        ; domainname
.text:000000000000481C                 call    _dcgettext
.text:0000000000004821                 xor     esi, esi        ; errnum
.text:0000000000004823                 mov     rdx, rax        ; format
.text:0000000000004826                 mov     edi, 1          ; status
.text:000000000000482B                 xor     eax, eax
.text:000000000000482D                 call    _error
.text:0000000000004832                 nop     word ptr [rax+rax+00h]
.text:0000000000004838
.text:0000000000004838 loc_4838:                               ; CODE XREF: skip+6E↑j
.text:0000000000004838                                         ; skip+91↑j
.text:0000000000004838                 mov     r15d, 2000h
.text:000000000000483E                 xchg    ax, ax
.text:0000000000004840
.text:0000000000004840 loc_4840:                               ; CODE XREF: skip+17F↓j
.text:0000000000004840                 cmp     r15, r13
.text:0000000000004843                 mov     r8, cs:in_stream
.text:000000000000484A                 mov     edx, 1
.text:000000000000484F                 cmova   r15, r13
.text:0000000000004853                 mov     esi, 2000h
.text:0000000000004858                 mov     rdi, rbp
.text:000000000000485B                 mov     rcx, r15
.text:000000000000485E                 call    ___fread_unlocked_chk
.text:0000000000004863                 sub     r13, rax
.text:0000000000004866                 cmp     rax, r15
.text:0000000000004869                 jz      short loc_487C
.text:000000000000486B                 mov     rax, cs:in_stream
.text:0000000000004872                 mov     eax, [rax]
.text:0000000000004874                 test    al, 20h
.text:0000000000004876                 jnz     short loc_48AF
.text:0000000000004878                 test    al, 10h
.text:000000000000487A                 jnz     short loc_48B3
.text:000000000000487C
.text:000000000000487C loc_487C:                               ; CODE XREF: skip+169↑j
.text:000000000000487C                 test    r13, r13
.text:000000000000487F                 jnz     short loc_4840
.text:0000000000004881
.text:0000000000004881 loc_4881:                               ; CODE XREF: skip+1AD↓j
.text:0000000000004881                                         ; skip+1B1↓j ...
.text:0000000000004881                 mov     rcx, [rsp+20D8h+var_40]
.text:0000000000004889                 xor     rcx, fs:28h
.text:0000000000004892                 mov     eax, ebx
.text:0000000000004894                 jnz     short loc_48DA
.text:0000000000004896                 add     rsp, 20A8h
.text:000000000000489D                 pop     rbx
.text:000000000000489E                 pop     rbp
.text:000000000000489F                 pop     r12
.text:00000000000048A1                 pop     r13
.text:00000000000048A3                 pop     r14
.text:00000000000048A5                 pop     r15
.text:00000000000048A7                 retn
.text:00000000000048A8 ; ---------------------------------------------------------------------------
.text:00000000000048A8
.text:00000000000048A8 loc_48A8:                               ; CODE XREF: skip+27↑j
.text:00000000000048A8                 mov     ebx, 1
.text:00000000000048AD                 jmp     short loc_4881
.text:00000000000048AF ; ---------------------------------------------------------------------------
.text:00000000000048AF
.text:00000000000048AF loc_48AF:                               ; CODE XREF: skip+176↑j
.text:00000000000048AF                 xor     ebx, ebx
.text:00000000000048B1                 jmp     short loc_4881
.text:00000000000048B3 ; ---------------------------------------------------------------------------
.text:00000000000048B3
.text:00000000000048B3 loc_48B3:                               ; CODE XREF: skip+17A↑j
.text:00000000000048B3                 test    r13, r13
.text:00000000000048B6                 jnz     loc_47A3
.text:00000000000048BC                 jmp     short loc_4881
.text:00000000000048BE ; ---------------------------------------------------------------------------
.text:00000000000048BE
.text:00000000000048BE loc_48BE:                               ; CODE XREF: skip+9A↑j
.text:00000000000048BE                 mov     edx, 1
.text:00000000000048C3                 mov     rsi, r13
.text:00000000000048C6                 mov     rdi, r15
.text:00000000000048C9                 call    rpl_fseeko
.text:00000000000048CE                 test    eax, eax
.text:00000000000048D0                 mov     eax, 0
.text:00000000000048D5                 cmovnz  ebx, eax
.text:00000000000048D8                 jmp     short loc_4881
.text:00000000000048DA ; ---------------------------------------------------------------------------
.text:00000000000048DA
.text:00000000000048DA loc_48DA:                               ; CODE XREF: skip+194↑j
.text:00000000000048DA                 call    ___stack_chk_fail
.text:00000000000048DA ; } // starts at 4700
.text:00000000000048DA skip            endp
.text:00000000000048DA
.text:00000000000048DA ; ---------------------------------------------------------------------------
.text:00000000000048DF                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0
.text:00000000000048E0 read_char       proc near               ; CODE XREF: main+A9C↑p
.text:00000000000048E0                                         ; main+BBA↑p
.text:00000000000048E0 ; __unwind {
.text:00000000000048E0                 push    r12
.text:00000000000048E2                 mov     r12, rdi
.text:00000000000048E5                 push    rbp
.text:00000000000048E6                 push    rbx
.text:00000000000048E7                 mov     dword ptr [rdi], 0FFFFFFFFh
.text:00000000000048ED                 mov     ebp, 1
.text:00000000000048F2                 mov     rdi, cs:in_stream
.text:00000000000048F9                 test    rdi, rdi
.text:00000000000048FC                 jnz     short loc_4923
.text:00000000000048FE                 jmp     short loc_4931
.text:0000000000004900 ; ---------------------------------------------------------------------------
.text:0000000000004900
.text:0000000000004900 loc_4900:                               ; CODE XREF: read_char+4F↓j
.text:0000000000004900                 call    ___errno_location
.text:0000000000004905                 mov     edi, [rax]      ; errnum
.text:0000000000004907                 call    check_and_close
.text:000000000000490C                 mov     ebx, eax
.text:000000000000490E                 call    open_next_file
.text:0000000000004913                 mov     rdi, cs:in_stream ; stream
.text:000000000000491A                 and     ebx, eax
.text:000000000000491C                 and     ebp, ebx
.text:000000000000491E                 test    rdi, rdi
.text:0000000000004921                 jz      short loc_4931
.text:0000000000004923
.text:0000000000004923 loc_4923:                               ; CODE XREF: read_char+1C↑j
.text:0000000000004923                 call    _fgetc
.text:0000000000004928                 cmp     eax, 0FFFFFFFFh
.text:000000000000492B                 mov     [r12], eax
.text:000000000000492F                 jz      short loc_4900
.text:0000000000004931
.text:0000000000004931 loc_4931:                               ; CODE XREF: read_char+1E↑j
.text:0000000000004931                                         ; read_char+41↑j
.text:0000000000004931                 mov     eax, ebp
.text:0000000000004933                 pop     rbx
.text:0000000000004934                 pop     rbp
.text:0000000000004935                 pop     r12
.text:0000000000004937                 retn
.text:0000000000004937 ; } // starts at 48E0
.text:0000000000004937 read_char       endp
.text:0000000000004937
.text:0000000000004937 ; ---------------------------------------------------------------------------
.text:0000000000004938                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940
.text:0000000000004940 write_block     proc near               ; CODE XREF: main+841↑p
.text:0000000000004940                                         ; main+D91↑p ...
.text:0000000000004940
.text:0000000000004940 var_50          = qword ptr -50h
.text:0000000000004940 var_48          = qword ptr -48h
.text:0000000000004940 var_40          = qword ptr -40h
.text:0000000000004940
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 push    r15
.text:0000000000004942                 push    r14
.text:0000000000004944                 mov     r14, rsi
.text:0000000000004947                 push    r13
.text:0000000000004949                 push    r12
.text:000000000000494B                 push    rbp
.text:000000000000494C                 push    rbx
.text:000000000000494D                 sub     rsp, 28h
.text:0000000000004951                 cmp     cs:abbreviate_duplicate_blocks, 0
.text:0000000000004958                 mov     [rsp+58h+var_40], rdi
.text:000000000000495D                 mov     [rsp+58h+var_50], rcx
.text:0000000000004962                 jz      short loc_4971
.text:0000000000004964                 cmp     cs:first_7524, 0
.text:000000000000496B                 jz      loc_4B40
.text:0000000000004971
.text:0000000000004971 loc_4971:                               ; CODE XREF: write_block+22↑j
.text:0000000000004971                                         ; write_block+20D↓j ...
.text:0000000000004971                 cmp     cs:n_specs, 0
.text:0000000000004979                 mov     cs:prev_pair_equal_7525, 0
.text:0000000000004980                 jz      loc_4B7F
.text:0000000000004986                 mov     rax, [rsp+58h+var_50]
.text:000000000000498B                 xor     ebp, ebp
.text:000000000000498D                 xor     r12d, r12d
.text:0000000000004990                 mov     [rsp+58h+var_48], r14
.text:0000000000004995                 lea     r13, [rax+r14]
.text:0000000000004999                 jmp     short loc_49D5
.text:0000000000004999 ; ---------------------------------------------------------------------------
.text:000000000000499B                 align 20h
.text:00000000000049A0
.text:00000000000049A0 loc_49A0:                               ; CODE XREF: write_block+118↓j
.text:00000000000049A0                                         ; write_block+1E2↓j ...
.text:00000000000049A0                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000049A7                 mov     rax, [rdi+28h]
.text:00000000000049AB                 cmp     rax, [rdi+30h]
.text:00000000000049AF                 jnb     loc_4B98
.text:00000000000049B5                 lea     rdx, [rax+1]
.text:00000000000049B9                 mov     [rdi+28h], rdx
.text:00000000000049BD                 mov     byte ptr [rax], 0Ah
.text:00000000000049C0
.text:00000000000049C0 loc_49C0:                               ; CODE XREF: write_block+262↓j
.text:00000000000049C0                 add     r12, 1
.text:00000000000049C4                 add     rbp, 28h ; '('
.text:00000000000049C8                 cmp     cs:n_specs, r12
.text:00000000000049CF                 jbe     loc_4B7F
.text:00000000000049D5
.text:00000000000049D5 loc_49D5:                               ; CODE XREF: write_block+59↑j
.text:00000000000049D5                 mov     rax, cs:spec
.text:00000000000049DC                 lea     rsi, width_bytes
.text:00000000000049E3                 mov     rbx, cs:bytes_per_block
.text:00000000000049EA                 xor     edx, edx
.text:00000000000049EC                 mov     eax, [rax+rbp+4]
.text:00000000000049F0                 movsxd  rcx, dword ptr [rsi+rax*4]
.text:00000000000049F4                 mov     rax, rbx
.text:00000000000049F7                 sub     rbx, [rsp+58h+var_48]
.text:00000000000049FC                 div     rcx
.text:00000000000049FF                 xor     edx, edx
.text:0000000000004A01                 mov     r14, rax
.text:0000000000004A04                 mov     r15d, eax
.text:0000000000004A07                 mov     rax, rbx
.text:0000000000004A0A                 div     rcx
.text:0000000000004A0D                 test    r12, r12
.text:0000000000004A10                 mov     rbx, rax
.text:0000000000004A13                 jnz     loc_4BB0
.text:0000000000004A19                 xor     esi, esi
.text:0000000000004A1B                 mov     rdi, [rsp+58h+var_40]
.text:0000000000004A20                 call    cs:format_address
.text:0000000000004A26
.text:0000000000004A26 loc_4A26:                               ; CODE XREF: write_block+290↓j
.text:0000000000004A26                 mov     rax, cs:spec
.text:0000000000004A2D                 movsxd  rsi, ebx
.text:0000000000004A30                 movsxd  rdi, r14d
.text:0000000000004A33                 mov     rdx, [rsp+58h+var_50]
.text:0000000000004A38                 add     rax, rbp
.text:0000000000004A3B                 lea     rcx, [rax+10h]
.text:0000000000004A3F                 mov     r9d, [rax+20h]
.text:0000000000004A43                 mov     r8d, [rax+1Ch]
.text:0000000000004A47                 call    qword ptr [rax+8]
.text:0000000000004A4A                 mov     rcx, cs:spec
.text:0000000000004A51                 add     rcx, rbp
.text:0000000000004A54                 cmp     byte ptr [rcx+18h], 0
.text:0000000000004A58                 jz      loc_49A0
.text:0000000000004A5E                 mov     eax, [rcx+20h]
.text:0000000000004A61                 lea     rsi, aS         ; "%*s"
.text:0000000000004A68                 mov     edi, 1
.text:0000000000004A6D                 imul    eax, ebx
.text:0000000000004A70                 imul    ebx, [rcx+1Ch]
.text:0000000000004A74                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004A7B                 cdq
.text:0000000000004A7C                 idiv    r15d
.text:0000000000004A7F                 lea     edx, [rax+rbx]
.text:0000000000004A82                 xor     eax, eax
.text:0000000000004A84                 call    ___printf_chk
.text:0000000000004A89                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000004A90                 lea     rdi, asc_AD9B   ; "  >"
.text:0000000000004A97                 mov     edx, 3          ; n
.text:0000000000004A9C                 mov     esi, 1          ; size
.text:0000000000004AA1                 call    _fwrite_unlocked
.text:0000000000004AA6                 cmp     [rsp+58h+var_48], 0
.text:0000000000004AAC                 jz      short loc_4B02
.text:0000000000004AAE                 call    ___ctype_b_loc
.text:0000000000004AB3                 mov     rbx, [rsp+58h+var_50]
.text:0000000000004AB8                 mov     r15, rax
.text:0000000000004ABB                 nop     dword ptr [rax+rax+00h]
.text:0000000000004AC0
.text:0000000000004AC0 loc_4AC0:                               ; CODE XREF: write_block+1C0↓j
.text:0000000000004AC0                 add     rbx, 1
.text:0000000000004AC4                 movzx   ecx, byte ptr [rbx-1]
.text:0000000000004AC8                 mov     rdx, [r15]
.text:0000000000004ACB                 test    byte ptr [rdx+rcx*2+1], 40h
.text:0000000000004AD0                 mov     rax, rcx
.text:0000000000004AD3                 movzx   esi, cl
.text:0000000000004AD6                 jnz     short loc_4AE2
.text:0000000000004AD8                 mov     esi, 2Eh ; '.'  ; int
.text:0000000000004ADD                 mov     eax, 2Eh ; '.'
.text:0000000000004AE2
.text:0000000000004AE2 loc_4AE2:                               ; CODE XREF: write_block+196↑j
.text:0000000000004AE2                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004AE9                 mov     rdx, [rdi+28h]
.text:0000000000004AED                 cmp     rdx, [rdi+30h]
.text:0000000000004AF1                 jnb     short loc_4B30
.text:0000000000004AF3                 lea     rcx, [rdx+1]
.text:0000000000004AF7                 mov     [rdi+28h], rcx
.text:0000000000004AFB                 mov     [rdx], al
.text:0000000000004AFD
.text:0000000000004AFD loc_4AFD:                               ; CODE XREF: write_block+1F5↓j
.text:0000000000004AFD                 cmp     rbx, r13
.text:0000000000004B00                 jnz     short loc_4AC0
.text:0000000000004B02
.text:0000000000004B02 loc_4B02:                               ; CODE XREF: write_block+16C↑j
.text:0000000000004B02                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004B09                 mov     rax, [rdi+28h]
.text:0000000000004B0D                 cmp     rax, [rdi+30h]
.text:0000000000004B11                 jnb     loc_4BD8
.text:0000000000004B17                 lea     rdx, [rax+1]
.text:0000000000004B1B                 mov     [rdi+28h], rdx
.text:0000000000004B1F                 mov     byte ptr [rax], 3Ch ; '<'
.text:0000000000004B22                 jmp     loc_49A0
.text:0000000000004B22 ; ---------------------------------------------------------------------------
.text:0000000000004B27                 align 10h
.text:0000000000004B30
.text:0000000000004B30 loc_4B30:                               ; CODE XREF: write_block+1B1↑j
.text:0000000000004B30                 call    ___overflow
.text:0000000000004B35                 jmp     short loc_4AFD
.text:0000000000004B35 ; ---------------------------------------------------------------------------
.text:0000000000004B37                 align 20h
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: write_block+2B↑j
.text:0000000000004B40                 mov     rdi, rdx        ; s1
.text:0000000000004B43                 mov     rdx, cs:bytes_per_block ; n
.text:0000000000004B4A                 cmp     rdx, rsi
.text:0000000000004B4D                 jnz     loc_4971
.text:0000000000004B53                 mov     rsi, rcx        ; s2
.text:0000000000004B56                 call    _memcmp
.text:0000000000004B5B                 test    eax, eax
.text:0000000000004B5D                 jnz     loc_4971
.text:0000000000004B63                 cmp     cs:prev_pair_equal_7525, 0
.text:0000000000004B6A                 jnz     short loc_4B7F
.text:0000000000004B6C                 lea     rdi, s          ; "*"
.text:0000000000004B73                 call    _puts
.text:0000000000004B78                 mov     cs:prev_pair_equal_7525, 1
.text:0000000000004B7F
.text:0000000000004B7F loc_4B7F:                               ; CODE XREF: write_block+40↑j
.text:0000000000004B7F                                         ; write_block+8F↑j ...
.text:0000000000004B7F                 mov     cs:first_7524, 0
.text:0000000000004B86                 add     rsp, 28h
.text:0000000000004B8A                 pop     rbx
.text:0000000000004B8B                 pop     rbp
.text:0000000000004B8C                 pop     r12
.text:0000000000004B8E                 pop     r13
.text:0000000000004B90                 pop     r14
.text:0000000000004B92                 pop     r15
.text:0000000000004B94                 retn
.text:0000000000004B94 ; ---------------------------------------------------------------------------
.text:0000000000004B95                 align 8
.text:0000000000004B98
.text:0000000000004B98 loc_4B98:                               ; CODE XREF: write_block+6F↑j
.text:0000000000004B98                 mov     esi, 0Ah        ; int
.text:0000000000004B9D                 call    ___overflow
.text:0000000000004BA2                 jmp     loc_49C0
.text:0000000000004BA2 ; ---------------------------------------------------------------------------
.text:0000000000004BA7                 align 10h
.text:0000000000004BB0
.text:0000000000004BB0 loc_4BB0:                               ; CODE XREF: write_block+D3↑j
.text:0000000000004BB0                 mov     edx, cs:address_pad_len
.text:0000000000004BB6                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004BBD                 lea     rsi, aS         ; "%*s"
.text:0000000000004BC4                 mov     edi, 1
.text:0000000000004BC9                 xor     eax, eax
.text:0000000000004BCB                 call    ___printf_chk
.text:0000000000004BD0                 jmp     loc_4A26
.text:0000000000004BD0 ; ---------------------------------------------------------------------------
.text:0000000000004BD5                 align 8
.text:0000000000004BD8
.text:0000000000004BD8 loc_4BD8:                               ; CODE XREF: write_block+1D1↑j
.text:0000000000004BD8                 mov     esi, 3Ch ; '<'  ; int
.text:0000000000004BDD                 call    ___overflow
.text:0000000000004BE2                 jmp     loc_49A0
.text:0000000000004BE2 ; } // starts at 4940
.text:0000000000004BE2 write_block     endp
.text:0000000000004BE2
.text:0000000000004BE2 ; ---------------------------------------------------------------------------
.text:0000000000004BE7                 align 10h
.text:0000000000004BF0
.text:0000000000004BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BF0
.text:0000000000004BF0
.text:0000000000004BF0 format_address_paren proc near          ; CODE XREF: format_address_label+29↓j
.text:0000000000004BF0                                         ; DATA XREF: main:loc_28A9↑o
.text:0000000000004BF0 ; __unwind {
.text:0000000000004BF0                 push    rbp
.text:0000000000004BF1                 push    rbx
.text:0000000000004BF2                 mov     rbp, rdi
.text:0000000000004BF5                 mov     ebx, esi
.text:0000000000004BF7                 sub     rsp, 8
.text:0000000000004BFB                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004C02                 mov     rax, [rdi+28h]
.text:0000000000004C06                 cmp     rax, [rdi+30h]
.text:0000000000004C0A                 jnb     short loc_4C60
.text:0000000000004C0C                 lea     rdx, [rax+1]
.text:0000000000004C10                 mov     [rdi+28h], rdx
.text:0000000000004C14                 mov     byte ptr [rax], 28h ; '('
.text:0000000000004C17
.text:0000000000004C17 loc_4C17:                               ; CODE XREF: format_address_paren+7A↓j
.text:0000000000004C17                 mov     esi, 29h ; ')'
.text:0000000000004C1C                 mov     rdi, rbp
.text:0000000000004C1F                 call    format_address_std
.text:0000000000004C24                 test    bl, bl
.text:0000000000004C26                 jz      short loc_4C43
.text:0000000000004C28                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004C2F                 mov     rax, [rdi+28h]
.text:0000000000004C33                 cmp     rax, [rdi+30h]
.text:0000000000004C37                 jnb     short loc_4C50
.text:0000000000004C39                 lea     rdx, [rax+1]
.text:0000000000004C3D                 mov     [rdi+28h], rdx
.text:0000000000004C41                 mov     [rax], bl
.text:0000000000004C43
.text:0000000000004C43 loc_4C43:                               ; CODE XREF: format_address_paren+36↑j
.text:0000000000004C43                 add     rsp, 8
.text:0000000000004C47                 pop     rbx
.text:0000000000004C48                 pop     rbp
.text:0000000000004C49                 retn
.text:0000000000004C49 ; ---------------------------------------------------------------------------
.text:0000000000004C4A                 align 10h
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: format_address_paren+47↑j
.text:0000000000004C50                 add     rsp, 8
.text:0000000000004C54                 movzx   esi, bl         ; int
.text:0000000000004C57                 pop     rbx
.text:0000000000004C58                 pop     rbp
.text:0000000000004C59                 jmp     ___overflow
.text:0000000000004C59 ; ---------------------------------------------------------------------------
.text:0000000000004C5E                 align 20h
.text:0000000000004C60
.text:0000000000004C60 loc_4C60:                               ; CODE XREF: format_address_paren+1A↑j
.text:0000000000004C60                 mov     esi, 28h ; '('  ; int
.text:0000000000004C65                 call    ___overflow
.text:0000000000004C6A                 jmp     short loc_4C17
.text:0000000000004C6A ; } // starts at 4BF0
.text:0000000000004C6A format_address_paren endp
.text:0000000000004C6A
.text:0000000000004C6A ; ---------------------------------------------------------------------------
.text:0000000000004C6C                 align 10h
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70
.text:0000000000004C70 format_address_label proc near          ; DATA XREF: main+5EF↑o
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 push    rbp
.text:0000000000004C71                 push    rbx
.text:0000000000004C72                 mov     ebp, esi
.text:0000000000004C74                 mov     esi, 20h ; ' '
.text:0000000000004C79                 mov     rbx, rdi
.text:0000000000004C7C                 sub     rsp, 8
.text:0000000000004C80                 call    format_address_std
.text:0000000000004C85                 add     rbx, cs:pseudo_offset
.text:0000000000004C8C                 add     rsp, 8
.text:0000000000004C90                 movsx   esi, bpl
.text:0000000000004C94                 mov     rdi, rbx
.text:0000000000004C97                 pop     rbx
.text:0000000000004C98                 pop     rbp
.text:0000000000004C99                 jmp     format_address_paren
.text:0000000000004C99 ; } // starts at 4C70
.text:0000000000004C99 format_address_label endp
.text:0000000000004C99
.text:0000000000004C99 ; ---------------------------------------------------------------------------
.text:0000000000004C9E                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0 read_block      proc near               ; CODE XREF: main+810↑p
.text:0000000000004CA0                                         ; main+DB0↑p
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 test    rdi, rdi
.text:0000000000004CA3                 push    r14
.text:0000000000004CA5                 push    r13
.text:0000000000004CA7                 push    r12
.text:0000000000004CA9                 push    rbp
.text:0000000000004CAA                 push    rbx
.text:0000000000004CAB                 jz      loc_4D47
.text:0000000000004CB1                 cmp     cs:bytes_per_block, rdi
.text:0000000000004CB8                 mov     r12, rdi
.text:0000000000004CBB                 jb      loc_4D47
.text:0000000000004CC1                 mov     rcx, cs:in_stream
.text:0000000000004CC8                 mov     rbx, rdx
.text:0000000000004CCB                 mov     qword ptr [rdx], 0
.text:0000000000004CD2                 test    rcx, rcx
.text:0000000000004CD5                 jz      short loc_4D40
.text:0000000000004CD7                 mov     r13, rsi
.text:0000000000004CDA                 xor     edi, edi
.text:0000000000004CDC                 mov     ebp, 1
.text:0000000000004CE1                 jmp     short loc_4D11
.text:0000000000004CE1 ; ---------------------------------------------------------------------------
.text:0000000000004CE3                 align 8
.text:0000000000004CE8
.text:0000000000004CE8 loc_4CE8:                               ; CODE XREF: read_block+8D↓j
.text:0000000000004CE8                 call    ___errno_location
.text:0000000000004CED                 mov     edi, [rax]      ; errnum
.text:0000000000004CEF                 call    check_and_close
.text:0000000000004CF4                 mov     r14d, eax
.text:0000000000004CF7                 call    open_next_file
.text:0000000000004CFC                 mov     rcx, cs:in_stream ; stream
.text:0000000000004D03                 and     r14d, eax
.text:0000000000004D06                 and     ebp, r14d
.text:0000000000004D09                 test    rcx, rcx
.text:0000000000004D0C                 jz      short loc_4D2F
.text:0000000000004D0E                 mov     rdi, [rbx]
.text:0000000000004D11
.text:0000000000004D11 loc_4D11:                               ; CODE XREF: read_block+41↑j
.text:0000000000004D11                 mov     r14, r12
.text:0000000000004D14                 mov     esi, 1          ; size
.text:0000000000004D19                 sub     r14, rdi
.text:0000000000004D1C                 add     rdi, r13        ; ptr
.text:0000000000004D1F                 mov     rdx, r14        ; n
.text:0000000000004D22                 call    _fread_unlocked
.text:0000000000004D27                 add     [rbx], rax
.text:0000000000004D2A                 cmp     r14, rax
.text:0000000000004D2D                 jnz     short loc_4CE8
.text:0000000000004D2F
.text:0000000000004D2F loc_4D2F:                               ; CODE XREF: read_block+6C↑j
.text:0000000000004D2F                                         ; read_block+A5↓j
.text:0000000000004D2F                 pop     rbx
.text:0000000000004D30                 mov     eax, ebp
.text:0000000000004D32                 pop     rbp
.text:0000000000004D33                 pop     r12
.text:0000000000004D35                 pop     r13
.text:0000000000004D37                 pop     r14
.text:0000000000004D39                 retn
.text:0000000000004D39 ; ---------------------------------------------------------------------------
.text:0000000000004D3A                 align 20h
.text:0000000000004D40
.text:0000000000004D40 loc_4D40:                               ; CODE XREF: read_block+35↑j
.text:0000000000004D40                 mov     ebp, 1
.text:0000000000004D45                 jmp     short loc_4D2F
.text:0000000000004D47 ; ---------------------------------------------------------------------------
.text:0000000000004D47
.text:0000000000004D47 loc_4D47:                               ; CODE XREF: read_block+B↑j
.text:0000000000004D47                                         ; read_block+1B↑j
.text:0000000000004D47                 lea     rcx, __PRETTY_FUNCTION___7548 ; "read_block"
.text:0000000000004D4E                 lea     rsi, file       ; "../coreutils-8.31/src/od.c"
.text:0000000000004D55                 lea     rdi, a0NNBytesPerBlo ; "0 < n && n <= bytes_per_block"
.text:0000000000004D5C                 mov     edx, 508h       ; line
.text:0000000000004D61                 call    ___assert_fail
.text:0000000000004D61 ; } // starts at 4CA0
.text:0000000000004D61 read_block      endp
.text:0000000000004D61
.text:0000000000004D61 ; ---------------------------------------------------------------------------
.text:0000000000004D66                 align 10h
.text:0000000000004D70
.text:0000000000004D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D70
.text:0000000000004D70 ; Attributes: noreturn
.text:0000000000004D70
.text:0000000000004D70 ; void __fastcall __noreturn usage(int status)
.text:0000000000004D70                 public usage
.text:0000000000004D70 usage           proc near               ; CODE XREF: main+96D↑p
.text:0000000000004D70                                         ; main+C8A↑p ...
.text:0000000000004D70
.text:0000000000004D70 var_A8          = qword ptr -0A8h
.text:0000000000004D70 var_A0          = qword ptr -0A0h
.text:0000000000004D70 var_98          = qword ptr -98h
.text:0000000000004D70 var_90          = qword ptr -90h
.text:0000000000004D70 var_88          = qword ptr -88h
.text:0000000000004D70 var_80          = qword ptr -80h
.text:0000000000004D70 var_78          = qword ptr -78h
.text:0000000000004D70 var_70          = qword ptr -70h
.text:0000000000004D70 var_68          = qword ptr -68h
.text:0000000000004D70 var_60          = qword ptr -60h
.text:0000000000004D70 var_58          = qword ptr -58h
.text:0000000000004D70 var_50          = qword ptr -50h
.text:0000000000004D70 var_48          = qword ptr -48h
.text:0000000000004D70 var_40          = qword ptr -40h
.text:0000000000004D70 var_30          = qword ptr -30h
.text:0000000000004D70
.text:0000000000004D70 ; __unwind {
.text:0000000000004D70                 push    r13
.text:0000000000004D72                 push    r12
.text:0000000000004D74                 mov     edx, 5          ; category
.text:0000000000004D79                 push    rbp
.text:0000000000004D7A                 push    rbx
.text:0000000000004D7B                 mov     ebp, edi
.text:0000000000004D7D                 sub     rsp, 88h
.text:0000000000004D84                 mov     rbx, cs:program_name
.text:0000000000004D8B                 mov     rax, fs:28h
.text:0000000000004D94                 mov     [rsp+0A8h+var_30], rax
.text:0000000000004D99                 xor     eax, eax
.text:0000000000004D9B                 test    edi, edi
.text:0000000000004D9D                 jz      short loc_4DCD
.text:0000000000004D9F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000004DA6                 xor     edi, edi        ; domainname
.text:0000000000004DA8                 call    _dcgettext
.text:0000000000004DAD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004DB4                 mov     rdx, rax
.text:0000000000004DB7                 mov     rcx, rbx
.text:0000000000004DBA                 mov     esi, 1
.text:0000000000004DBF                 xor     eax, eax
.text:0000000000004DC1                 call    ___fprintf_chk
.text:0000000000004DC6
.text:0000000000004DC6 loc_4DC6:                               ; CODE XREF: usage+43E↓j
.text:0000000000004DC6                 mov     edi, ebp        ; status
.text:0000000000004DC8                 call    _exit
.text:0000000000004DCD ; ---------------------------------------------------------------------------
.text:0000000000004DCD
.text:0000000000004DCD loc_4DCD:                               ; CODE XREF: usage+2D↑j
.text:0000000000004DCD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n  or: "...
.text:0000000000004DD4                 xor     edi, edi        ; domainname
.text:0000000000004DD6                 call    _dcgettext
.text:0000000000004DDB                 mov     rcx, rbx
.text:0000000000004DDE                 mov     r8, rbx
.text:0000000000004DE1                 mov     rdx, rbx
.text:0000000000004DE4                 mov     rsi, rax
.text:0000000000004DE7                 mov     edi, 1
.text:0000000000004DEC                 xor     eax, eax
.text:0000000000004DEE                 call    ___printf_chk
.text:0000000000004DF3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004DFA                 lea     rsi, aWriteAnUnambig ; "\nWrite an unambiguous representation, "...
.text:0000000000004E01                 mov     edx, 5          ; category
.text:0000000000004E06                 xor     edi, edi        ; domainname
.text:0000000000004E08                 call    _dcgettext
.text:0000000000004E0D                 mov     rsi, rbx        ; stream
.text:0000000000004E10                 mov     rdi, rax        ; s
.text:0000000000004E13                 call    _fputs_unlocked
.text:0000000000004E18                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004E1F                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000004E26                 mov     edx, 5          ; category
.text:0000000000004E2B                 xor     edi, edi        ; domainname
.text:0000000000004E2D                 call    _dcgettext
.text:0000000000004E32                 mov     rsi, rbx        ; stream
.text:0000000000004E35                 mov     rdi, rax        ; s
.text:0000000000004E38                 call    _fputs_unlocked
.text:0000000000004E3D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004E44                 lea     rsi, aIfFirstAndSeco ; "\nIf first and second call formats both"...
.text:0000000000004E4B                 mov     edx, 5          ; category
.text:0000000000004E50                 xor     edi, edi        ; domainname
.text:0000000000004E52                 call    _dcgettext
.text:0000000000004E57                 mov     rsi, rbx        ; stream
.text:0000000000004E5A                 mov     rdi, rax        ; s
.text:0000000000004E5D                 call    _fputs_unlocked
.text:0000000000004E62                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004E69                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000004E70                 mov     edx, 5          ; category
.text:0000000000004E75                 xor     edi, edi        ; domainname
.text:0000000000004E77                 call    _dcgettext
.text:0000000000004E7C                 mov     rsi, rbx        ; stream
.text:0000000000004E7F                 mov     rdi, rax        ; s
.text:0000000000004E82                 call    _fputs_unlocked
.text:0000000000004E87                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004E8E                 lea     rsi, aAAddressRadixR ; "  -A, --address-radix=RADIX   output fo"...
.text:0000000000004E95                 mov     edx, 5          ; category
.text:0000000000004E9A                 xor     edi, edi        ; domainname
.text:0000000000004E9C                 call    _dcgettext
.text:0000000000004EA1                 mov     rsi, rbx        ; stream
.text:0000000000004EA4                 mov     rdi, rax        ; s
.text:0000000000004EA7                 call    _fputs_unlocked
.text:0000000000004EAC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004EB3                 lea     rsi, aNReadBytesByte ; "  -N, --read-bytes=BYTES      limit dum"...
.text:0000000000004EBA                 mov     edx, 5          ; category
.text:0000000000004EBF                 xor     edi, edi        ; domainname
.text:0000000000004EC1                 call    _dcgettext
.text:0000000000004EC6                 mov     rsi, rbx        ; stream
.text:0000000000004EC9                 mov     rdi, rax        ; s
.text:0000000000004ECC                 call    _fputs_unlocked
.text:0000000000004ED1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004ED8                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000004EDF                 mov     edx, 5          ; category
.text:0000000000004EE4                 xor     edi, edi        ; domainname
.text:0000000000004EE6                 call    _dcgettext
.text:0000000000004EEB                 mov     rsi, rbx        ; stream
.text:0000000000004EEE                 mov     rdi, rax        ; s
.text:0000000000004EF1                 call    _fputs_unlocked
.text:0000000000004EF6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004EFD                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000004F04                 mov     edx, 5          ; category
.text:0000000000004F09                 xor     edi, edi        ; domainname
.text:0000000000004F0B                 call    _dcgettext
.text:0000000000004F10                 mov     rsi, rbx        ; stream
.text:0000000000004F13                 mov     rdi, rax        ; s
.text:0000000000004F16                 call    _fputs_unlocked
.text:0000000000004F1B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F22                 lea     rsi, aTraditionalFor ; "\n\nTraditional format specifications m"...
.text:0000000000004F29                 mov     edx, 5          ; category
.text:0000000000004F2E                 xor     edi, edi        ; domainname
.text:0000000000004F30                 call    _dcgettext
.text:0000000000004F35                 mov     rsi, rbx        ; stream
.text:0000000000004F38                 mov     rdi, rax        ; s
.text:0000000000004F3B                 call    _fputs_unlocked
.text:0000000000004F40                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F47                 lea     rsi, aFSameAsTFfSele ; "  -f   same as -t fF, select floats\n  "...
.text:0000000000004F4E                 mov     edx, 5          ; category
.text:0000000000004F53                 xor     edi, edi        ; domainname
.text:0000000000004F55                 call    _dcgettext
.text:0000000000004F5A                 mov     rsi, rbx        ; stream
.text:0000000000004F5D                 mov     rdi, rax        ; s
.text:0000000000004F60                 call    _fputs_unlocked
.text:0000000000004F65                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F6C                 lea     rsi, aTypeIsMadeUpOf ; "\n\nTYPE is made up of one or more of t"...
.text:0000000000004F73                 mov     edx, 5          ; category
.text:0000000000004F78                 xor     edi, edi        ; domainname
.text:0000000000004F7A                 call    _dcgettext
.text:0000000000004F7F                 mov     rsi, rbx        ; stream
.text:0000000000004F82                 mov     rdi, rax        ; s
.text:0000000000004F85                 call    _fputs_unlocked
.text:0000000000004F8A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F91                 lea     rsi, aDSizeSignedDec ; "  d[SIZE]    signed decimal, SIZE bytes"...
.text:0000000000004F98                 mov     edx, 5          ; category
.text:0000000000004F9D                 xor     edi, edi        ; domainname
.text:0000000000004F9F                 call    _dcgettext
.text:0000000000004FA4                 mov     rsi, rbx        ; stream
.text:0000000000004FA7                 mov     rdi, rax        ; s
.text:0000000000004FAA                 call    _fputs_unlocked
.text:0000000000004FAF                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004FB6                 lea     rsi, aSizeIsANumberF ; "\nSIZE is a number.  For TYPE in [doux]"...
.text:0000000000004FBD                 mov     edx, 5          ; category
.text:0000000000004FC2                 xor     edi, edi        ; domainname
.text:0000000000004FC4                 call    _dcgettext
.text:0000000000004FC9                 mov     rsi, rbx        ; stream
.text:0000000000004FCC                 mov     rdi, rax        ; s
.text:0000000000004FCF                 call    _fputs_unlocked
.text:0000000000004FD4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004FDB                 lea     rsi, aAddingAZSuffix ; "\nAdding a z suffix to any type display"...
.text:0000000000004FE2                 mov     edx, 5          ; category
.text:0000000000004FE7                 xor     edi, edi        ; domainname
.text:0000000000004FE9                 call    _dcgettext
.text:0000000000004FEE                 mov     rsi, rbx        ; stream
.text:0000000000004FF1                 mov     rdi, rax        ; s
.text:0000000000004FF4                 call    _fputs_unlocked
.text:0000000000004FF9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005000                 lea     rsi, aBytesIsHexWith ; "\n\nBYTES is hex with 0x or 0X prefix, "...
.text:0000000000005007                 mov     edx, 5          ; category
.text:000000000000500C                 xor     edi, edi        ; domainname
.text:000000000000500E                 call    _dcgettext
.text:0000000000005013                 mov     rsi, rbx        ; stream
.text:0000000000005016                 mov     rdi, rax        ; s
.text:0000000000005019                 lea     rbx, aOd        ; "od"
.text:0000000000005020                 call    _fputs_unlocked
.text:0000000000005025                 lea     rax, asc_ADC0   ; "["
.text:000000000000502C                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000005033                 mov     [rsp+0A8h+var_48], 0
.text:000000000000503C                 mov     [rsp+0A8h+var_40], 0
.text:0000000000005045                 mov     rdx, rsp
.text:0000000000005048                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000504C                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000005053                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000005058                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000505F                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000005064                 lea     rax, domainname ; "coreutils"
.text:000000000000506B                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000005070                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000005077                 mov     [rsp+0A8h+var_98], rax
.text:000000000000507C                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000005083                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000005088                 mov     [rsp+0A8h+var_90], rax
.text:000000000000508D                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000005094                 mov     [rsp+0A8h+var_88], rax
.text:0000000000005099                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000050A0                 mov     [rsp+0A8h+var_80], rax
.text:00000000000050A5                 mov     [rsp+0A8h+var_70], rax
.text:00000000000050AA                 mov     [rsp+0A8h+var_60], rax
.text:00000000000050AF                 mov     [rsp+0A8h+var_50], rax
.text:00000000000050B4                 nop     dword ptr [rax+00h]
.text:00000000000050B8
.text:00000000000050B8 loc_50B8:                               ; CODE XREF: usage+365↓j
.text:00000000000050B8                 add     rdx, 10h
.text:00000000000050BC                 mov     rdi, [rdx]
.text:00000000000050BF                 test    rdi, rdi
.text:00000000000050C2                 jz      short loc_50D7
.text:00000000000050C4                 mov     ecx, 3
.text:00000000000050C9                 mov     rsi, rbx
.text:00000000000050CC                 repe cmpsb
.text:00000000000050CE                 setnbe  al
.text:00000000000050D1                 sbb     al, 0
.text:00000000000050D3                 test    al, al
.text:00000000000050D5                 jnz     short loc_50B8
.text:00000000000050D7
.text:00000000000050D7 loc_50D7:                               ; CODE XREF: usage+352↑j
.text:00000000000050D7                 mov     r12, [rdx+8]
.text:00000000000050DB                 xor     edi, edi        ; domainname
.text:00000000000050DD                 mov     edx, 5          ; category
.text:00000000000050E2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000050E9                 test    r12, r12
.text:00000000000050EC                 jz      loc_51B3
.text:00000000000050F2                 call    _dcgettext
.text:00000000000050F7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000050FE                 lea     rdx, unk_AE36
.text:0000000000005105                 mov     rsi, rax
.text:0000000000005108                 mov     edi, 1
.text:000000000000510D                 xor     eax, eax
.text:000000000000510F                 call    ___printf_chk
.text:0000000000005114                 xor     esi, esi        ; locale
.text:0000000000005116                 mov     edi, 5          ; category
.text:000000000000511B                 call    _setlocale
.text:0000000000005120                 test    rax, rax
.text:0000000000005123                 jz      short loc_5141
.text:0000000000005125                 lea     rsi, s2         ; "en_"
.text:000000000000512C                 mov     edx, 3          ; n
.text:0000000000005131                 mov     rdi, rax        ; s1
.text:0000000000005134                 call    _strncmp
.text:0000000000005139                 test    eax, eax
.text:000000000000513B                 jnz     loc_5248
.text:0000000000005141
.text:0000000000005141 loc_5141:                               ; CODE XREF: usage+3B3↑j
.text:0000000000005141                                         ; usage+4FD↓j
.text:0000000000005141                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000005148                 xor     edi, edi        ; domainname
.text:000000000000514A                 mov     edx, 5          ; category
.text:000000000000514F                 call    _dcgettext
.text:0000000000005154                 lea     rcx, aOd        ; "od"
.text:000000000000515B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005162                 mov     rsi, rax
.text:0000000000005165                 mov     edi, 1
.text:000000000000516A                 xor     eax, eax
.text:000000000000516C                 call    ___printf_chk
.text:0000000000005171                 cmp     r12, rbx
.text:0000000000005174                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000517B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000005182                 cmovz   rbx, rcx
.text:0000000000005186
.text:0000000000005186 loc_5186:                               ; CODE XREF: usage+4CC↓j
.text:0000000000005186                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000518D                 xor     edi, edi        ; domainname
.text:000000000000518F                 mov     edx, 5          ; category
.text:0000000000005194                 call    _dcgettext
.text:0000000000005199                 mov     rcx, rbx
.text:000000000000519C                 mov     rsi, rax
.text:000000000000519F                 mov     rdx, r12
.text:00000000000051A2                 mov     edi, 1
.text:00000000000051A7                 xor     eax, eax
.text:00000000000051A9                 call    ___printf_chk
.text:00000000000051AE                 jmp     loc_4DC6
.text:00000000000051B3 ; ---------------------------------------------------------------------------
.text:00000000000051B3
.text:00000000000051B3 loc_51B3:                               ; CODE XREF: usage+37C↑j
.text:00000000000051B3                 call    _dcgettext
.text:00000000000051B8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000051BF                 lea     rdx, unk_AE36
.text:00000000000051C6                 mov     rsi, rax
.text:00000000000051C9                 mov     edi, 1
.text:00000000000051CE                 xor     eax, eax
.text:00000000000051D0                 call    ___printf_chk
.text:00000000000051D5                 xor     esi, esi        ; locale
.text:00000000000051D7                 mov     edi, 5          ; category
.text:00000000000051DC                 call    _setlocale
.text:00000000000051E1                 test    rax, rax
.text:00000000000051E4                 jz      short loc_51FE
.text:00000000000051E6                 lea     rsi, s2         ; "en_"
.text:00000000000051ED                 mov     edx, 3          ; n
.text:00000000000051F2                 mov     rdi, rax        ; s1
.text:00000000000051F5                 call    _strncmp
.text:00000000000051FA                 test    eax, eax
.text:00000000000051FC                 jnz     short loc_5241
.text:00000000000051FE
.text:00000000000051FE loc_51FE:                               ; CODE XREF: usage+474↑j
.text:00000000000051FE                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000005205                 mov     edx, 5          ; category
.text:000000000000520A                 xor     edi, edi        ; domainname
.text:000000000000520C                 lea     r12, aOd        ; "od"
.text:0000000000005213                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000521A                 call    _dcgettext
.text:000000000000521F                 lea     rcx, aOd        ; "od"
.text:0000000000005226                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000522D                 mov     rsi, rax
.text:0000000000005230                 mov     edi, 1
.text:0000000000005235                 xor     eax, eax
.text:0000000000005237                 call    ___printf_chk
.text:000000000000523C                 jmp     loc_5186
.text:0000000000005241 ; ---------------------------------------------------------------------------
.text:0000000000005241
.text:0000000000005241 loc_5241:                               ; CODE XREF: usage+48C↑j
.text:0000000000005241                 lea     r12, aOd        ; "od"
.text:0000000000005248
.text:0000000000005248 loc_5248:                               ; CODE XREF: usage+3CB↑j
.text:0000000000005248                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000524F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000005256                 xor     edi, edi        ; domainname
.text:0000000000005258                 mov     edx, 5          ; category
.text:000000000000525D                 call    _dcgettext
.text:0000000000005262                 mov     rsi, r13        ; stream
.text:0000000000005265                 mov     rdi, rax        ; s
.text:0000000000005268                 call    _fputs_unlocked
.text:000000000000526D                 jmp     loc_5141
.text:000000000000526D ; } // starts at 4D70
.text:000000000000526D usage           endp
.text:000000000000526D
.text:000000000000526D ; ---------------------------------------------------------------------------
.text:0000000000005272                 align 20h
.text:0000000000005280
.text:0000000000005280 ; =============== S U B R O U T I N E =======================================
.text:0000000000005280
.text:0000000000005280 ; Attributes: noreturn
.text:0000000000005280
.text:0000000000005280 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000005280 ; __unwind {
.text:0000000000005280                 mov     edi, 1          ; status
.text:0000000000005285                 jmp     usage
.text:0000000000005285 ; } // starts at 5280
.text:0000000000005285 __argmatch_die  endp
.text:0000000000005285
.text:0000000000005285 ; ---------------------------------------------------------------------------
.text:000000000000528A                 align 10h
.text:0000000000005290
.text:0000000000005290 ; =============== S U B R O U T I N E =======================================
.text:0000000000005290
.text:0000000000005290 ; Attributes: info_from_lumina
.text:0000000000005290
.text:0000000000005290 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005290                 public argmatch
.text:0000000000005290 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000005290
.text:0000000000005290 var_58          = qword ptr -58h
.text:0000000000005290 s2              = qword ptr -50h
.text:0000000000005290 var_41          = byte ptr -41h
.text:0000000000005290 var_40          = qword ptr -40h
.text:0000000000005290
.text:0000000000005290 ; __unwind {
.text:0000000000005290                 push    r15
.text:0000000000005292                 push    r14
.text:0000000000005294                 mov     r15, rsi
.text:0000000000005297                 push    r13
.text:0000000000005299                 push    r12
.text:000000000000529B                 mov     r13, rcx
.text:000000000000529E                 push    rbp
.text:000000000000529F                 push    rbx
.text:00000000000052A0                 mov     rbp, rdx
.text:00000000000052A3                 sub     rsp, 28h
.text:00000000000052A7                 mov     [rsp+58h+s2], rdi
.text:00000000000052AC                 mov     [rsp+58h+var_40], rdx
.text:00000000000052B1                 call    _strlen
.text:00000000000052B6                 mov     r14, [r15]
.text:00000000000052B9                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000052C1                 test    r14, r14
.text:00000000000052C4                 jz      loc_537D
.text:00000000000052CA                 mov     r12, rax
.text:00000000000052CD                 mov     [rsp+58h+var_41], 0
.text:00000000000052D2                 xor     ebx, ebx
.text:00000000000052D4                 jmp     short loc_5327
.text:00000000000052D4 ; ---------------------------------------------------------------------------
.text:00000000000052D6                 align 20h
.text:00000000000052E0
.text:00000000000052E0 loc_52E0:                               ; CODE XREF: argmatch+BD↓j
.text:00000000000052E0                 mov     rax, [rsp+58h+var_40]
.text:00000000000052E5                 test    rax, rax
.text:00000000000052E8                 jz      loc_5390
.text:00000000000052EE                 mov     rdi, [rsp+58h+var_58]
.text:00000000000052F2                 mov     rdx, r13        ; n
.text:00000000000052F5                 mov     rsi, rbp        ; s2
.text:00000000000052F8                 imul    rdi, r13
.text:00000000000052FC                 add     rdi, rax        ; s1
.text:00000000000052FF                 call    _memcmp
.text:0000000000005304                 test    eax, eax
.text:0000000000005306                 movzx   eax, [rsp+58h+var_41]
.text:000000000000530B                 mov     ecx, 1
.text:0000000000005310                 cmovnz  eax, ecx
.text:0000000000005313                 mov     [rsp+58h+var_41], al
.text:0000000000005317
.text:0000000000005317 loc_5317:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000005317                                         ; argmatch+105↓j
.text:0000000000005317                 add     rbx, 1
.text:000000000000531B                 add     rbp, r13
.text:000000000000531E                 mov     r14, [r15+rbx*8]
.text:0000000000005322                 test    r14, r14
.text:0000000000005325                 jz      short loc_5368
.text:0000000000005327
.text:0000000000005327 loc_5327:                               ; CODE XREF: argmatch+44↑j
.text:0000000000005327                                         ; argmatch+D1↓j
.text:0000000000005327                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000532C                 mov     rdx, r12        ; n
.text:000000000000532F                 mov     rdi, r14        ; s1
.text:0000000000005332                 call    _strncmp
.text:0000000000005337                 test    eax, eax
.text:0000000000005339                 jnz     short loc_5317
.text:000000000000533B                 mov     rdi, r14        ; s
.text:000000000000533E                 call    _strlen
.text:0000000000005343                 cmp     rax, r12
.text:0000000000005346                 jz      short loc_53A0
.text:0000000000005348                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000534D                 jnz     short loc_52E0
.text:000000000000534F                 mov     [rsp+58h+var_58], rbx
.text:0000000000005353                 add     rbx, 1
.text:0000000000005357                 add     rbp, r13
.text:000000000000535A                 mov     r14, [r15+rbx*8]
.text:000000000000535E                 test    r14, r14
.text:0000000000005361                 jnz     short loc_5327
.text:0000000000005363                 nop     dword ptr [rax+rax+00h]
.text:0000000000005368
.text:0000000000005368 loc_5368:                               ; CODE XREF: argmatch+95↑j
.text:0000000000005368                 cmp     [rsp+58h+var_41], 0
.text:000000000000536D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000005374                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000005379                 mov     [rsp+58h+var_58], rax
.text:000000000000537D
.text:000000000000537D loc_537D:                               ; CODE XREF: argmatch+34↑j
.text:000000000000537D                                         ; argmatch+114↓j
.text:000000000000537D                 mov     rax, [rsp+58h+var_58]
.text:0000000000005381                 add     rsp, 28h
.text:0000000000005385                 pop     rbx
.text:0000000000005386                 pop     rbp
.text:0000000000005387                 pop     r12
.text:0000000000005389                 pop     r13
.text:000000000000538B                 pop     r14
.text:000000000000538D                 pop     r15
.text:000000000000538F                 retn
.text:0000000000005390 ; ---------------------------------------------------------------------------
.text:0000000000005390
.text:0000000000005390 loc_5390:                               ; CODE XREF: argmatch+58↑j
.text:0000000000005390                 mov     [rsp+58h+var_41], 1
.text:0000000000005395                 jmp     short loc_5317
.text:0000000000005395 ; ---------------------------------------------------------------------------
.text:0000000000005397                 align 20h
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: argmatch+B6↑j
.text:00000000000053A0                 mov     [rsp+58h+var_58], rbx
.text:00000000000053A4                 jmp     short loc_537D
.text:00000000000053A4 ; } // starts at 5290
.text:00000000000053A4 argmatch        endp
.text:00000000000053A4
.text:00000000000053A4 ; ---------------------------------------------------------------------------
.text:00000000000053A6                 align 10h
.text:00000000000053B0
.text:00000000000053B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053B0
.text:00000000000053B0 ; Attributes: info_from_lumina
.text:00000000000053B0
.text:00000000000053B0 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:00000000000053B0                 public argmatch_invalid
.text:00000000000053B0 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:00000000000053B0 ; __unwind {
.text:00000000000053B0                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000053B4                 push    r12
.text:00000000000053B6                 mov     edx, 5          ; category
.text:00000000000053BB                 push    rbp
.text:00000000000053BC                 mov     r12, rsi
.text:00000000000053BF                 push    rbx
.text:00000000000053C0                 mov     rbp, rdi
.text:00000000000053C3                 jz      short loc_5410
.text:00000000000053C5                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00000000000053CC                 xor     edi, edi        ; domainname
.text:00000000000053CE                 call    _dcgettext
.text:00000000000053D3                 mov     rbx, rax
.text:00000000000053D6
.text:00000000000053D6 loc_53D6:                               ; CODE XREF: argmatch_invalid+71↓j
.text:00000000000053D6                 mov     rsi, rbp
.text:00000000000053D9                 mov     edi, 1
.text:00000000000053DE                 call    quote_n
.text:00000000000053E3                 mov     rdx, r12
.text:00000000000053E6                 mov     rbp, rax
.text:00000000000053E9                 mov     esi, 8
.text:00000000000053EE                 xor     edi, edi
.text:00000000000053F0                 call    quotearg_n_style
.text:00000000000053F5                 mov     r8, rbp
.text:00000000000053F8                 mov     rdx, rbx        ; format
.text:00000000000053FB                 mov     rcx, rax
.text:00000000000053FE                 pop     rbx
.text:00000000000053FF                 pop     rbp
.text:0000000000005400                 pop     r12
.text:0000000000005402                 xor     esi, esi        ; errnum
.text:0000000000005404                 xor     edi, edi        ; status
.text:0000000000005406                 xor     eax, eax
.text:0000000000005408                 jmp     _error
.text:0000000000005408 ; ---------------------------------------------------------------------------
.text:000000000000540D                 align 10h
.text:0000000000005410
.text:0000000000005410 loc_5410:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000005410                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000005417                 xor     edi, edi        ; domainname
.text:0000000000005419                 call    _dcgettext
.text:000000000000541E                 mov     rbx, rax
.text:0000000000005421                 jmp     short loc_53D6
.text:0000000000005421 ; } // starts at 53B0
.text:0000000000005421 argmatch_invalid endp
.text:0000000000005421
.text:0000000000005421 ; ---------------------------------------------------------------------------
.text:0000000000005423                 align 10h
.text:0000000000005430
.text:0000000000005430 ; =============== S U B R O U T I N E =======================================
.text:0000000000005430
.text:0000000000005430 ; Attributes: info_from_lumina
.text:0000000000005430
.text:0000000000005430 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005430                 public argmatch_valid
.text:0000000000005430 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000005430 ; __unwind {
.text:0000000000005430                 push    r15
.text:0000000000005432                 push    r14
.text:0000000000005434                 mov     r14, rdi
.text:0000000000005437                 push    r13
.text:0000000000005439                 push    r12
.text:000000000000543B                 xor     edi, edi        ; domainname
.text:000000000000543D                 push    rbp
.text:000000000000543E                 push    rbx
.text:000000000000543F                 mov     rbp, rsi
.text:0000000000005442                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000005449                 mov     r12, rdx
.text:000000000000544C                 mov     edx, 5          ; category
.text:0000000000005451                 sub     rsp, 8
.text:0000000000005455                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000000545C                 call    _dcgettext
.text:0000000000005461                 mov     rdi, rax        ; s
.text:0000000000005464                 mov     rsi, rbx        ; stream
.text:0000000000005467                 call    _fputs_unlocked
.text:000000000000546C                 mov     r15, [r14]
.text:000000000000546F                 test    r15, r15
.text:0000000000005472                 jz      loc_5508
.text:0000000000005478                 xor     r13d, r13d
.text:000000000000547B                 xor     ebx, ebx
.text:000000000000547D                 jmp     short loc_54B8
.text:000000000000547D ; ---------------------------------------------------------------------------
.text:000000000000547F                 align 20h
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000005480                                         ; argmatch_valid+9D↓j
.text:0000000000005480                 mov     rdi, r15
.text:0000000000005483                 add     rbx, 1
.text:0000000000005487                 mov     r13, rbp
.text:000000000000548A                 call    quote
.text:000000000000548F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005496                 lea     rdx, aS_1       ; "\n  - %s"
.text:000000000000549D                 mov     rcx, rax
.text:00000000000054A0                 mov     esi, 1
.text:00000000000054A5                 xor     eax, eax
.text:00000000000054A7                 add     rbp, r12
.text:00000000000054AA                 call    ___fprintf_chk
.text:00000000000054AF                 mov     r15, [r14+rbx*8]
.text:00000000000054B3                 test    r15, r15
.text:00000000000054B6                 jz      short loc_5508
.text:00000000000054B8
.text:00000000000054B8 loc_54B8:                               ; CODE XREF: argmatch_valid+4D↑j
.text:00000000000054B8                                         ; argmatch_valid+D2↓j
.text:00000000000054B8                 test    rbx, rbx
.text:00000000000054BB                 jz      short loc_5480
.text:00000000000054BD                 mov     rdx, r12        ; n
.text:00000000000054C0                 mov     rsi, rbp        ; s2
.text:00000000000054C3                 mov     rdi, r13        ; s1
.text:00000000000054C6                 call    _memcmp
.text:00000000000054CB                 test    eax, eax
.text:00000000000054CD                 jnz     short loc_5480
.text:00000000000054CF                 mov     rdi, r15
.text:00000000000054D2                 add     rbx, 1
.text:00000000000054D6                 add     rbp, r12
.text:00000000000054D9                 call    quote
.text:00000000000054DE                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000054E5                 lea     rdx, aS_2       ; ", %s"
.text:00000000000054EC                 mov     rcx, rax
.text:00000000000054EF                 mov     esi, 1
.text:00000000000054F4                 xor     eax, eax
.text:00000000000054F6                 call    ___fprintf_chk
.text:00000000000054FB                 mov     r15, [r14+rbx*8]
.text:00000000000054FF                 test    r15, r15
.text:0000000000005502                 jnz     short loc_54B8
.text:0000000000005504                 nop     dword ptr [rax+00h]
.text:0000000000005508
.text:0000000000005508 loc_5508:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000005508                                         ; argmatch_valid+86↑j
.text:0000000000005508                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000550F                 mov     rax, [rdi+28h]
.text:0000000000005513                 cmp     rax, [rdi+30h]
.text:0000000000005517                 jnb     short loc_5538
.text:0000000000005519                 lea     rdx, [rax+1]
.text:000000000000551D                 mov     [rdi+28h], rdx
.text:0000000000005521                 mov     byte ptr [rax], 0Ah
.text:0000000000005524                 add     rsp, 8
.text:0000000000005528                 pop     rbx
.text:0000000000005529                 pop     rbp
.text:000000000000552A                 pop     r12
.text:000000000000552C                 pop     r13
.text:000000000000552E                 pop     r14
.text:0000000000005530                 pop     r15
.text:0000000000005532                 retn
.text:0000000000005532 ; ---------------------------------------------------------------------------
.text:0000000000005533                 align 8
.text:0000000000005538
.text:0000000000005538 loc_5538:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000005538                 add     rsp, 8
.text:000000000000553C                 mov     esi, 0Ah        ; int
.text:0000000000005541                 pop     rbx
.text:0000000000005542                 pop     rbp
.text:0000000000005543                 pop     r12
.text:0000000000005545                 pop     r13
.text:0000000000005547                 pop     r14
.text:0000000000005549                 pop     r15
.text:000000000000554B                 jmp     ___overflow
.text:000000000000554B ; } // starts at 5430
.text:000000000000554B argmatch_valid  endp
.text:000000000000554B
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550 ; Attributes: info_from_lumina
.text:0000000000005550
.text:0000000000005550 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000005550                 public __xargmatch_internal
.text:0000000000005550 __xargmatch_internal proc near          ; CODE XREF: main+1D9↑p
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 push    r15
.text:0000000000005552                 push    r14
.text:0000000000005554                 mov     r14, rdi
.text:0000000000005557                 push    r13
.text:0000000000005559                 push    r12
.text:000000000000555B                 mov     r12, rsi
.text:000000000000555E                 push    rbp
.text:000000000000555F                 push    rbx
.text:0000000000005560                 mov     rbp, rcx
.text:0000000000005563                 mov     rbx, rdx
.text:0000000000005566                 mov     rcx, r8
.text:0000000000005569                 mov     rdx, rbp
.text:000000000000556C                 sub     rsp, 8
.text:0000000000005570                 mov     rsi, rbx
.text:0000000000005573                 mov     rdi, r12
.text:0000000000005576                 mov     r15, r8
.text:0000000000005579                 mov     r13, r9
.text:000000000000557C                 call    argmatch
.text:0000000000005581                 test    rax, rax
.text:0000000000005584                 js      short loc_5595
.text:0000000000005586
.text:0000000000005586 loc_5586:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000005586                 add     rsp, 8
.text:000000000000558A                 pop     rbx
.text:000000000000558B                 pop     rbp
.text:000000000000558C                 pop     r12
.text:000000000000558E                 pop     r13
.text:0000000000005590                 pop     r14
.text:0000000000005592                 pop     r15
.text:0000000000005594                 retn
.text:0000000000005595 ; ---------------------------------------------------------------------------
.text:0000000000005595
.text:0000000000005595 loc_5595:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000005595                 mov     rdx, rax
.text:0000000000005598                 mov     rsi, r12
.text:000000000000559B                 mov     rdi, r14
.text:000000000000559E                 call    argmatch_invalid
.text:00000000000055A3                 mov     rdx, r15
.text:00000000000055A6                 mov     rsi, rbp
.text:00000000000055A9                 mov     rdi, rbx
.text:00000000000055AC                 call    argmatch_valid
.text:00000000000055B1                 call    r13
.text:00000000000055B4                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000055BB                 jmp     short loc_5586
.text:00000000000055BB ; } // starts at 5550
.text:00000000000055BB __xargmatch_internal endp
.text:00000000000055BB
.text:00000000000055BB ; ---------------------------------------------------------------------------
.text:00000000000055BD                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0 ; Attributes: info_from_lumina
.text:00000000000055C0
.text:00000000000055C0 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:00000000000055C0                 public argmatch_to_argument
.text:00000000000055C0 argmatch_to_argument proc near
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 push    r14
.text:00000000000055C2                 push    r13
.text:00000000000055C4                 push    r12
.text:00000000000055C6                 push    rbp
.text:00000000000055C7                 push    rbx
.text:00000000000055C8                 mov     r14, [rsi]
.text:00000000000055CB                 test    r14, r14
.text:00000000000055CE                 jz      short loc_5601
.text:00000000000055D0                 mov     r12, rcx
.text:00000000000055D3                 mov     r13, rdi
.text:00000000000055D6                 mov     rbp, rdx
.text:00000000000055D9                 lea     rbx, [rsi+8]
.text:00000000000055DD                 jmp     short loc_55EF
.text:00000000000055DD ; ---------------------------------------------------------------------------
.text:00000000000055DF                 align 20h
.text:00000000000055E0
.text:00000000000055E0 loc_55E0:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:00000000000055E0                 mov     r14, [rbx]
.text:00000000000055E3                 add     rbp, r12
.text:00000000000055E6                 add     rbx, 8
.text:00000000000055EA                 test    r14, r14
.text:00000000000055ED                 jz      short loc_5601
.text:00000000000055EF
.text:00000000000055EF loc_55EF:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:00000000000055EF                 mov     rdx, r12        ; n
.text:00000000000055F2                 mov     rsi, rbp        ; s2
.text:00000000000055F5                 mov     rdi, r13        ; s1
.text:00000000000055F8                 call    _memcmp
.text:00000000000055FD                 test    eax, eax
.text:00000000000055FF                 jnz     short loc_55E0
.text:0000000000005601
.text:0000000000005601 loc_5601:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000005601                                         ; argmatch_to_argument+2D↑j
.text:0000000000005601                 pop     rbx
.text:0000000000005602                 mov     rax, r14
.text:0000000000005605                 pop     rbp
.text:0000000000005606                 pop     r12
.text:0000000000005608                 pop     r13
.text:000000000000560A                 pop     r14
.text:000000000000560C                 retn
.text:000000000000560C ; } // starts at 55C0
.text:000000000000560C argmatch_to_argument endp
.text:000000000000560C
.text:000000000000560C ; ---------------------------------------------------------------------------
.text:000000000000560D                 align 10h
.text:0000000000005610
.text:0000000000005610 ; =============== S U B R O U T I N E =======================================
.text:0000000000005610
.text:0000000000005610
.text:0000000000005610                 public close_stdout_set_file_name
.text:0000000000005610 close_stdout_set_file_name proc near
.text:0000000000005610 ; __unwind {
.text:0000000000005610                 mov     cs:file_name, rdi
.text:0000000000005617                 retn
.text:0000000000005617 ; } // starts at 5610
.text:0000000000005617 close_stdout_set_file_name endp
.text:0000000000005617
.text:0000000000005617 ; ---------------------------------------------------------------------------
.text:0000000000005618                 align 20h
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620
.text:0000000000005620                 public close_stdout_set_ignore_EPIPE
.text:0000000000005620 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 mov     cs:ignore_EPIPE, dil
.text:0000000000005627                 retn
.text:0000000000005627 ; } // starts at 5620
.text:0000000000005627 close_stdout_set_ignore_EPIPE endp
.text:0000000000005627
.text:0000000000005627 ; ---------------------------------------------------------------------------
.text:0000000000005628                 align 10h
.text:0000000000005630
.text:0000000000005630 ; =============== S U B R O U T I N E =======================================
.text:0000000000005630
.text:0000000000005630 ; Attributes: info_from_lumina
.text:0000000000005630
.text:0000000000005630 ; void __cdecl close_stdout()
.text:0000000000005630                 public close_stdout
.text:0000000000005630 close_stdout    proc near               ; DATA XREF: main+5C↑o
.text:0000000000005630 ; __unwind {
.text:0000000000005630                 push    rbp
.text:0000000000005631                 push    rbx
.text:0000000000005632                 sub     rsp, 8
.text:0000000000005636                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000563D                 call    close_stream
.text:0000000000005642                 test    eax, eax
.text:0000000000005644                 jz      short loc_565C
.text:0000000000005646                 call    ___errno_location
.text:000000000000564B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005652                 mov     rbx, rax
.text:0000000000005655                 jz      short loc_5673
.text:0000000000005657                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000565A                 jnz     short loc_5673
.text:000000000000565C
.text:000000000000565C loc_565C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000565C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005663                 call    close_stream
.text:0000000000005668                 test    eax, eax
.text:000000000000566A                 jnz     short loc_56B2
.text:000000000000566C                 add     rsp, 8
.text:0000000000005670                 pop     rbx
.text:0000000000005671                 pop     rbp
.text:0000000000005672                 retn
.text:0000000000005673 ; ---------------------------------------------------------------------------
.text:0000000000005673
.text:0000000000005673 loc_5673:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000005673                                         ; close_stdout+2A↑j
.text:0000000000005673                 lea     rsi, aWriteError ; "write error"
.text:000000000000567A                 xor     edi, edi        ; domainname
.text:000000000000567C                 mov     edx, 5          ; category
.text:0000000000005681                 call    _dcgettext
.text:0000000000005686                 mov     rdi, cs:file_name
.text:000000000000568D                 mov     rbp, rax
.text:0000000000005690                 test    rdi, rdi
.text:0000000000005693                 jz      short loc_56BD
.text:0000000000005695                 call    quotearg_colon
.text:000000000000569A                 mov     esi, [rbx]      ; errnum
.text:000000000000569C                 lea     rdx, format     ; "%s: %s"
.text:00000000000056A3                 mov     rcx, rax
.text:00000000000056A6                 mov     r8, rbp
.text:00000000000056A9                 xor     edi, edi        ; status
.text:00000000000056AB                 xor     eax, eax
.text:00000000000056AD                 call    _error
.text:00000000000056B2
.text:00000000000056B2 loc_56B2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000056B2                                         ; close_stdout+A2↓j
.text:00000000000056B2                 mov     edi, cs:exit_failure ; status
.text:00000000000056B8                 call    __exit
.text:00000000000056BD ; ---------------------------------------------------------------------------
.text:00000000000056BD
.text:00000000000056BD loc_56BD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000056BD                 mov     esi, [rbx]      ; errnum
.text:00000000000056BF                 lea     rdx, aS_2+2     ; format
.text:00000000000056C6                 mov     rcx, rax
.text:00000000000056C9                 xor     edi, edi        ; status
.text:00000000000056CB                 xor     eax, eax
.text:00000000000056CD                 call    _error
.text:00000000000056D2                 jmp     short loc_56B2
.text:00000000000056D2 ; } // starts at 5630
.text:00000000000056D2 close_stdout    endp
.text:00000000000056D2
.text:00000000000056D2 ; ---------------------------------------------------------------------------
.text:00000000000056D4                 align 20h
.text:00000000000056E0
.text:00000000000056E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056E0
.text:00000000000056E0
.text:00000000000056E0 ; __int64 __fastcall dtoastr(char *nptr)
.text:00000000000056E0                 public dtoastr
.text:00000000000056E0 dtoastr         proc near               ; CODE XREF: print_double+6E↑p
.text:00000000000056E0
.text:00000000000056E0 var_68          = qword ptr -68h
.text:00000000000056E0 var_5C          = dword ptr -5Ch
.text:00000000000056E0 var_4B          = word ptr -4Bh
.text:00000000000056E0 var_40          = qword ptr -40h
.text:00000000000056E0
.text:00000000000056E0 ; __unwind {
.text:00000000000056E0                 push    r15
.text:00000000000056E2                 push    r14
.text:00000000000056E4                 mov     r14d, ecx
.text:00000000000056E7                 push    r13
.text:00000000000056E9                 push    r12
.text:00000000000056EB                 mov     r12, rdi
.text:00000000000056EE                 push    rbp
.text:00000000000056EF                 push    rbx
.text:00000000000056F0                 mov     rbp, rsi
.text:00000000000056F3                 movapd  xmm3, xmm0
.text:00000000000056F7                 sub     rsp, 38h
.text:00000000000056FB                 movsd   [rsp+68h+var_68], xmm0
.text:0000000000005700                 pxor    xmm0, xmm0
.text:0000000000005704                 mov     rax, fs:28h
.text:000000000000570D                 mov     [rsp+68h+var_40], rax
.text:0000000000005712                 xor     eax, eax
.text:0000000000005714                 ucomisd xmm0, xmm3
.text:0000000000005718                 ja      loc_5830
.text:000000000000571E                 movsd   xmm0, [rsp+68h+var_68]
.text:0000000000005723
.text:0000000000005723 loc_5723:                               ; CODE XREF: dtoastr+15C↓j
.text:0000000000005723                 mov     eax, edx
.text:0000000000005725                 lea     r13, [rsp+68h+var_4B]
.text:000000000000572A                 mov     ecx, edx
.text:000000000000572C                 and     eax, 1
.text:000000000000572F                 shr     ecx, 1
.text:0000000000005731                 mov     esi, 2D25h
.text:0000000000005736                 lea     rdi, [r13+rax+1]
.text:000000000000573B                 and     ecx, 1
.text:000000000000573E                 mov     eax, edx
.text:0000000000005740                 mov     [rsp+68h+var_4B], si
.text:0000000000005745                 shr     eax, 2
.text:0000000000005748                 mov     ebx, 1
.text:000000000000574D                 lea     rsi, [rdi+rcx]
.text:0000000000005751                 and     eax, 1
.text:0000000000005754                 mov     byte ptr [rdi], 2Bh ; '+'
.text:0000000000005757                 movsd   xmm1, cs:qword_C800
.text:000000000000575F                 mov     edi, 2E2Ah
.text:0000000000005764                 lea     rcx, [rsi+rax]
.text:0000000000005768                 mov     eax, edx
.text:000000000000576A                 and     edx, 10h
.text:000000000000576D                 shr     eax, 3
.text:0000000000005770                 mov     byte ptr [rsi], 20h ; ' '
.text:0000000000005773                 mov     r15, 0FFFFFFFFFFFFFFFFh
.text:000000000000577A                 and     eax, 1
.text:000000000000577D                 mov     byte ptr [rcx], 30h ; '0'
.text:0000000000005780                 add     rax, rcx
.text:0000000000005783                 cmp     edx, 1
.text:0000000000005786                 sbb     edx, edx
.text:0000000000005788                 mov     [rax], di
.text:000000000000578B                 mov     byte ptr [rax+2], 2Ah ; '*'
.text:000000000000578F                 and     edx, 20h
.text:0000000000005792                 mov     byte ptr [rax+4], 0
.text:0000000000005796                 add     edx, 47h ; 'G'
.text:0000000000005799                 ucomisd xmm1, xmm0
.text:000000000000579D                 mov     [rax+3], dl
.text:00000000000057A0                 mov     eax, 0Fh
.text:00000000000057A5                 cmovbe  ebx, eax
.text:00000000000057A8                 jmp     short loc_57B3
.text:00000000000057A8 ; ---------------------------------------------------------------------------
.text:00000000000057AA                 align 10h
.text:00000000000057B0
.text:00000000000057B0 loc_57B0:                               ; CODE XREF: dtoastr+10D↓j
.text:00000000000057B0                                         ; dtoastr+122↓j ...
.text:00000000000057B0                 add     ebx, 1
.text:00000000000057B3
.text:00000000000057B3 loc_57B3:                               ; CODE XREF: dtoastr+C8↑j
.text:00000000000057B3                 sub     rsp, 8
.text:00000000000057B7                 mov     rcx, r15
.text:00000000000057BA                 mov     edx, 1
.text:00000000000057BF                 push    rbx
.text:00000000000057C0                 mov     r9d, r14d
.text:00000000000057C3                 mov     r8, r13
.text:00000000000057C6                 mov     rsi, rbp
.text:00000000000057C9                 mov     rdi, r12
.text:00000000000057CC                 mov     eax, 1
.text:00000000000057D1                 movsd   xmm0, [rsp+78h+var_68]
.text:00000000000057D7                 call    ___snprintf_chk
.text:00000000000057DC                 test    eax, eax
.text:00000000000057DE                 pop     rdx
.text:00000000000057DF                 pop     rcx
.text:00000000000057E0                 js      short loc_580A
.text:00000000000057E2                 cmp     ebx, 10h
.text:00000000000057E5                 jg      short loc_580A
.text:00000000000057E7                 movsxd  rdx, eax
.text:00000000000057EA                 cmp     rdx, rbp
.text:00000000000057ED                 jnb     short loc_57B0
.text:00000000000057EF                 xor     esi, esi        ; endptr
.text:00000000000057F1                 mov     rdi, r12        ; nptr
.text:00000000000057F4                 mov     [rsp+68h+var_5C], eax
.text:00000000000057F8                 call    _strtod
.text:00000000000057FD                 ucomisd xmm0, [rsp+68h+var_68]
.text:0000000000005802                 jp      short loc_57B0
.text:0000000000005804                 mov     eax, [rsp+68h+var_5C]
.text:0000000000005808                 jnz     short loc_57B0
.text:000000000000580A
.text:000000000000580A loc_580A:                               ; CODE XREF: dtoastr+100↑j
.text:000000000000580A                                         ; dtoastr+105↑j
.text:000000000000580A                 mov     rsi, [rsp+68h+var_40]
.text:000000000000580F                 xor     rsi, fs:28h
.text:0000000000005818                 jnz     short loc_5841
.text:000000000000581A                 add     rsp, 38h
.text:000000000000581E                 pop     rbx
.text:000000000000581F                 pop     rbp
.text:0000000000005820                 pop     r12
.text:0000000000005822                 pop     r13
.text:0000000000005824                 pop     r14
.text:0000000000005826                 pop     r15
.text:0000000000005828                 retn
.text:0000000000005828 ; ---------------------------------------------------------------------------
.text:0000000000005829                 align 10h
.text:0000000000005830
.text:0000000000005830 loc_5830:                               ; CODE XREF: dtoastr+38↑j
.text:0000000000005830                 movapd  xmm0, xmm3
.text:0000000000005834                 xorpd   xmm0, cs:xmmword_C7F0
.text:000000000000583C                 jmp     loc_5723
.text:0000000000005841 ; ---------------------------------------------------------------------------
.text:0000000000005841
.text:0000000000005841 loc_5841:                               ; CODE XREF: dtoastr+138↑j
.text:0000000000005841                 call    ___stack_chk_fail
.text:0000000000005841 ; } // starts at 56E0
.text:0000000000005841 dtoastr         endp
.text:0000000000005841
.text:0000000000005841 ; ---------------------------------------------------------------------------
.text:0000000000005846                 align 10h
.text:0000000000005850
.text:0000000000005850 ; =============== S U B R O U T I N E =======================================
.text:0000000000005850
.text:0000000000005850
.text:0000000000005850 ; __int64 __fastcall ftoastr(char *nptr)
.text:0000000000005850                 public ftoastr
.text:0000000000005850 ftoastr         proc near               ; CODE XREF: print_float+7E↑p
.text:0000000000005850
.text:0000000000005850 var_68          = qword ptr -68h
.text:0000000000005850 var_60          = dword ptr -60h
.text:0000000000005850 var_5C          = dword ptr -5Ch
.text:0000000000005850 var_4B          = word ptr -4Bh
.text:0000000000005850 var_40          = qword ptr -40h
.text:0000000000005850
.text:0000000000005850 ; __unwind {
.text:0000000000005850                 push    r15
.text:0000000000005852                 pxor    xmm4, xmm4
.text:0000000000005856                 push    r14
.text:0000000000005858                 push    r13
.text:000000000000585A                 mov     r15d, ecx
.text:000000000000585D                 push    r12
.text:000000000000585F                 push    rbp
.text:0000000000005860                 mov     r12, rdi
.text:0000000000005863                 push    rbx
.text:0000000000005864                 movaps  xmm3, xmm0
.text:0000000000005867                 cvtss2sd xmm4, xmm0
.text:000000000000586B                 mov     rbp, rsi
.text:000000000000586E                 sub     rsp, 38h
.text:0000000000005872                 movss   [rsp+68h+var_5C], xmm0
.text:0000000000005878                 pxor    xmm0, xmm0
.text:000000000000587C                 mov     rax, fs:28h
.text:0000000000005885                 mov     [rsp+68h+var_40], rax
.text:000000000000588A                 xor     eax, eax
.text:000000000000588C                 movsd   [rsp+68h+var_68], xmm4
.text:0000000000005891                 ucomiss xmm0, xmm3
.text:0000000000005894                 ja      loc_59A8
.text:000000000000589A                 movss   xmm0, [rsp+68h+var_5C]
.text:00000000000058A0
.text:00000000000058A0 loc_58A0:                               ; CODE XREF: ftoastr+162↓j
.text:00000000000058A0                 mov     eax, edx
.text:00000000000058A2                 lea     r13, [rsp+68h+var_4B]
.text:00000000000058A7                 mov     ecx, edx
.text:00000000000058A9                 and     eax, 1
.text:00000000000058AC                 shr     ecx, 1
.text:00000000000058AE                 mov     esi, 2D25h
.text:00000000000058B3                 lea     rdi, [r13+rax+1]
.text:00000000000058B8                 and     ecx, 1
.text:00000000000058BB                 mov     eax, edx
.text:00000000000058BD                 mov     [rsp+68h+var_4B], si
.text:00000000000058C2                 shr     eax, 2
.text:00000000000058C5                 mov     r14, 0FFFFFFFFFFFFFFFFh
.text:00000000000058CC                 lea     rsi, [rdi+rcx]
.text:00000000000058D0                 and     eax, 1
.text:00000000000058D3                 mov     byte ptr [rdi], 2Bh ; '+'
.text:00000000000058D6                 movss   xmm1, cs:dword_C820
.text:00000000000058DE                 mov     edi, 2E2Ah
.text:00000000000058E3                 lea     rcx, [rsi+rax]
.text:00000000000058E7                 mov     eax, edx
.text:00000000000058E9                 and     edx, 10h
.text:00000000000058EC                 shr     eax, 3
.text:00000000000058EF                 mov     byte ptr [rsi], 20h ; ' '
.text:00000000000058F2                 and     eax, 1
.text:00000000000058F5                 mov     byte ptr [rcx], 30h ; '0'
.text:00000000000058F8                 add     rax, rcx
.text:00000000000058FB                 cmp     edx, 1
.text:00000000000058FE                 sbb     edx, edx
.text:0000000000005900                 xor     ebx, ebx
.text:0000000000005902                 mov     [rax], di
.text:0000000000005905                 and     edx, 20h
.text:0000000000005908                 mov     byte ptr [rax+2], 2Ah ; '*'
.text:000000000000590C                 mov     byte ptr [rax+4], 0
.text:0000000000005910                 add     edx, 47h ; 'G'
.text:0000000000005913                 ucomiss xmm1, xmm0
.text:0000000000005916                 mov     [rax+3], dl
.text:0000000000005919                 setbe   bl
.text:000000000000591C                 lea     ebx, [rbx+rbx*4+1]
.text:0000000000005920                 jmp     short loc_592B
.text:0000000000005920 ; ---------------------------------------------------------------------------
.text:0000000000005922                 align 8
.text:0000000000005928
.text:0000000000005928 loc_5928:                               ; CODE XREF: ftoastr+115↓j
.text:0000000000005928                                         ; ftoastr+12A↓j ...
.text:0000000000005928                 add     ebx, 1
.text:000000000000592B
.text:000000000000592B loc_592B:                               ; CODE XREF: ftoastr+D0↑j
.text:000000000000592B                 sub     rsp, 8
.text:000000000000592F                 mov     rcx, r14
.text:0000000000005932                 mov     edx, 1
.text:0000000000005937                 push    rbx
.text:0000000000005938                 mov     r9d, r15d
.text:000000000000593B                 mov     r8, r13
.text:000000000000593E                 mov     rsi, rbp
.text:0000000000005941                 mov     rdi, r12
.text:0000000000005944                 mov     eax, 1
.text:0000000000005949                 movsd   xmm0, [rsp+78h+var_68]
.text:000000000000594F                 call    ___snprintf_chk
.text:0000000000005954                 test    eax, eax
.text:0000000000005956                 pop     rdx
.text:0000000000005957                 pop     rcx
.text:0000000000005958                 js      short loc_5982
.text:000000000000595A                 cmp     ebx, 8
.text:000000000000595D                 jg      short loc_5982
.text:000000000000595F                 movsxd  rdx, eax
.text:0000000000005962                 cmp     rdx, rbp
.text:0000000000005965                 jnb     short loc_5928
.text:0000000000005967                 xor     esi, esi        ; endptr
.text:0000000000005969                 mov     rdi, r12        ; nptr
.text:000000000000596C                 mov     [rsp+68h+var_60], eax
.text:0000000000005970                 call    _strtof
.text:0000000000005975                 ucomiss xmm0, [rsp+68h+var_5C]
.text:000000000000597A                 jp      short loc_5928
.text:000000000000597C                 mov     eax, [rsp+68h+var_60]
.text:0000000000005980                 jnz     short loc_5928
.text:0000000000005982
.text:0000000000005982 loc_5982:                               ; CODE XREF: ftoastr+108↑j
.text:0000000000005982                                         ; ftoastr+10D↑j
.text:0000000000005982                 mov     rsi, [rsp+68h+var_40]
.text:0000000000005987                 xor     rsi, fs:28h
.text:0000000000005990                 jnz     short loc_59B7
.text:0000000000005992                 add     rsp, 38h
.text:0000000000005996                 pop     rbx
.text:0000000000005997                 pop     rbp
.text:0000000000005998                 pop     r12
.text:000000000000599A                 pop     r13
.text:000000000000599C                 pop     r14
.text:000000000000599E                 pop     r15
.text:00000000000059A0                 retn
.text:00000000000059A0 ; ---------------------------------------------------------------------------
.text:00000000000059A1                 align 8
.text:00000000000059A8
.text:00000000000059A8 loc_59A8:                               ; CODE XREF: ftoastr+44↑j
.text:00000000000059A8                 movaps  xmm0, xmm3
.text:00000000000059AB                 xorps   xmm0, cs:xmmword_C810
.text:00000000000059B2                 jmp     loc_58A0
.text:00000000000059B7 ; ---------------------------------------------------------------------------
.text:00000000000059B7
.text:00000000000059B7 loc_59B7:                               ; CODE XREF: ftoastr+140↑j
.text:00000000000059B7                 call    ___stack_chk_fail
.text:00000000000059B7 ; } // starts at 5850
.text:00000000000059B7 ftoastr         endp
.text:00000000000059B7
.text:00000000000059B7 ; ---------------------------------------------------------------------------
.text:00000000000059BC                 align 20h
.text:00000000000059C0
.text:00000000000059C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059C0
.text:00000000000059C0
.text:00000000000059C0 ; __int64 __usercall ldtoastr@<rax>(char *nptr@<rdi>, _TBYTE)
.text:00000000000059C0                 public ldtoastr
.text:00000000000059C0 ldtoastr        proc near               ; CODE XREF: print_long_double+71↑p
.text:00000000000059C0
.text:00000000000059C0 var_5C          = dword ptr -5Ch
.text:00000000000059C0 var_4B          = word ptr -4Bh
.text:00000000000059C0 var_40          = qword ptr -40h
.text:00000000000059C0 arg_0           = tbyte ptr  8
.text:00000000000059C0
.text:00000000000059C0 ; __unwind {
.text:00000000000059C0                 push    r15
.text:00000000000059C2                 push    r14
.text:00000000000059C4                 fldz
.text:00000000000059C6                 push    r13
.text:00000000000059C8                 push    r12
.text:00000000000059CA                 mov     r14d, ecx
.text:00000000000059CD                 push    rbp
.text:00000000000059CE                 push    rbx
.text:00000000000059CF                 mov     r12, rdi
.text:00000000000059D2                 mov     rbp, rsi
.text:00000000000059D5                 sub     rsp, 38h
.text:00000000000059D9                 fld     [rsp+68h+arg_0]
.text:00000000000059DD                 fxch    st(1)
.text:00000000000059DF                 mov     rax, fs:28h
.text:00000000000059E8                 mov     [rsp+68h+var_40], rax
.text:00000000000059ED                 xor     eax, eax
.text:00000000000059EF                 fucomip st, st(1)
.text:00000000000059F1                 ja      loc_5B00
.text:00000000000059F7                 fstp    st
.text:00000000000059F9                 fld     [rsp+68h+arg_0]
.text:00000000000059FD
.text:00000000000059FD loc_59FD:                               ; CODE XREF: ldtoastr+142↓j
.text:00000000000059FD                 mov     eax, 2D25h
.text:0000000000005A02                 lea     r13, [rsp+68h+var_4B]
.text:0000000000005A07                 mov     ecx, edx
.text:0000000000005A09                 mov     [rsp+68h+var_4B], ax
.text:0000000000005A0E                 mov     eax, edx
.text:0000000000005A10                 shr     ecx, 1
.text:0000000000005A12                 and     eax, 1
.text:0000000000005A15                 and     ecx, 1
.text:0000000000005A18                 mov     ebx, 1
.text:0000000000005A1D                 lea     rdi, [r13+rax+1]
.text:0000000000005A22                 mov     eax, edx
.text:0000000000005A24                 mov     r15, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A2B                 shr     eax, 2
.text:0000000000005A2E                 lea     rsi, [rdi+rcx]
.text:0000000000005A32                 and     eax, 1
.text:0000000000005A35                 mov     byte ptr [rdi], 2Bh ; '+'
.text:0000000000005A38                 lea     rcx, [rsi+rax]
.text:0000000000005A3C                 mov     eax, edx
.text:0000000000005A3E                 and     edx, 10h
.text:0000000000005A41                 fld     cs:tbyte_C830
.text:0000000000005A47                 shr     eax, 3
.text:0000000000005A4A                 mov     byte ptr [rsi], 20h ; ' '
.text:0000000000005A4D                 mov     byte ptr [rcx], 30h ; '0'
.text:0000000000005A50                 and     eax, 1
.text:0000000000005A53                 add     rax, rcx
.text:0000000000005A56                 cmp     edx, 1
.text:0000000000005A59                 sbb     edx, edx
.text:0000000000005A5B                 mov     dword ptr [rax], 4C2A2E2Ah
.text:0000000000005A61                 mov     byte ptr [rax+5], 0
.text:0000000000005A65                 and     edx, 20h
.text:0000000000005A68                 add     edx, 47h ; 'G'
.text:0000000000005A6B                 mov     [rax+4], dl
.text:0000000000005A6E                 mov     eax, 12h
.text:0000000000005A73                 fucomip st, st(1)
.text:0000000000005A75                 fstp    st
.text:0000000000005A77                 cmovbe  ebx, eax
.text:0000000000005A7A                 jmp     short loc_5A83
.text:0000000000005A7A ; ---------------------------------------------------------------------------
.text:0000000000005A7C                 align 20h
.text:0000000000005A80
.text:0000000000005A80 loc_5A80:                               ; CODE XREF: ldtoastr+FE↓j
.text:0000000000005A80                                         ; ldtoastr+118↓j ...
.text:0000000000005A80                 add     ebx, 1
.text:0000000000005A83
.text:0000000000005A83 loc_5A83:                               ; CODE XREF: ldtoastr+BA↑j
.text:0000000000005A83                 push    qword ptr [rsp+68h+arg_0+8]
.text:0000000000005A87                 push    qword ptr [rsp+70h+arg_0]
.text:0000000000005A8B                 xor     eax, eax
.text:0000000000005A8D                 mov     r9d, r14d
.text:0000000000005A90                 mov     r8, r13
.text:0000000000005A93                 mov     rcx, r15
.text:0000000000005A96                 sub     rsp, 8
.text:0000000000005A9A                 mov     edx, 1
.text:0000000000005A9F                 mov     rsi, rbp
.text:0000000000005AA2                 push    rbx
.text:0000000000005AA3                 mov     rdi, r12
.text:0000000000005AA6                 call    ___snprintf_chk
.text:0000000000005AAB                 add     rsp, 20h
.text:0000000000005AAF                 test    eax, eax
.text:0000000000005AB1                 js      short loc_5AE0
.text:0000000000005AB3                 cmp     ebx, 14h
.text:0000000000005AB6                 jg      short loc_5AE0
.text:0000000000005AB8                 movsxd  rdx, eax
.text:0000000000005ABB                 cmp     rdx, rbp
.text:0000000000005ABE                 jnb     short loc_5A80
.text:0000000000005AC0                 xor     esi, esi        ; endptr
.text:0000000000005AC2                 mov     rdi, r12        ; nptr
.text:0000000000005AC5                 mov     [rsp+68h+var_5C], eax
.text:0000000000005AC9                 call    _strtold
.text:0000000000005ACE                 fld     [rsp+68h+arg_0]
.text:0000000000005AD2                 fxch    st(1)
.text:0000000000005AD4                 fucomip st, st(1)
.text:0000000000005AD6                 fstp    st
.text:0000000000005AD8                 jp      short loc_5A80
.text:0000000000005ADA                 mov     eax, [rsp+68h+var_5C]
.text:0000000000005ADE                 jnz     short loc_5A80
.text:0000000000005AE0
.text:0000000000005AE0 loc_5AE0:                               ; CODE XREF: ldtoastr+F1↑j
.text:0000000000005AE0                                         ; ldtoastr+F6↑j
.text:0000000000005AE0                 mov     rsi, [rsp+68h+var_40]
.text:0000000000005AE5                 xor     rsi, fs:28h
.text:0000000000005AEE                 jnz     short loc_5B07
.text:0000000000005AF0                 add     rsp, 38h
.text:0000000000005AF4                 pop     rbx
.text:0000000000005AF5                 pop     rbp
.text:0000000000005AF6                 pop     r12
.text:0000000000005AF8                 pop     r13
.text:0000000000005AFA                 pop     r14
.text:0000000000005AFC                 pop     r15
.text:0000000000005AFE                 retn
.text:0000000000005AFE ; ---------------------------------------------------------------------------
.text:0000000000005AFF                 align 20h
.text:0000000000005B00
.text:0000000000005B00 loc_5B00:                               ; CODE XREF: ldtoastr+31↑j
.text:0000000000005B00                 fchs
.text:0000000000005B02                 jmp     loc_59FD
.text:0000000000005B07 ; ---------------------------------------------------------------------------
.text:0000000000005B07
.text:0000000000005B07 loc_5B07:                               ; CODE XREF: ldtoastr+12E↑j
.text:0000000000005B07                 call    ___stack_chk_fail
.text:0000000000005B07 ; } // starts at 59C0
.text:0000000000005B07 ldtoastr        endp
.text:0000000000005B07
.text:0000000000005B07 ; ---------------------------------------------------------------------------
.text:0000000000005B0C                 align 10h
.text:0000000000005B10
.text:0000000000005B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B10
.text:0000000000005B10
.text:0000000000005B10                 public set_program_name
.text:0000000000005B10 set_program_name proc near              ; CODE XREF: main+27↑p
.text:0000000000005B10 ; __unwind {
.text:0000000000005B10                 test    rdi, rdi
.text:0000000000005B13                 push    rbx
.text:0000000000005B14                 jz      short loc_5B8D
.text:0000000000005B16                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000005B1B                 mov     rbx, rdi
.text:0000000000005B1E                 call    _strrchr
.text:0000000000005B23                 test    rax, rax
.text:0000000000005B26                 jz      short loc_5B7D
.text:0000000000005B28                 lea     r8, [rax+1]
.text:0000000000005B2C                 mov     rdx, r8
.text:0000000000005B2F                 sub     rdx, rbx
.text:0000000000005B32                 cmp     rdx, 6
.text:0000000000005B36                 jle     short loc_5B7D
.text:0000000000005B38                 lea     rsi, [rax-6]
.text:0000000000005B3C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000005B43                 mov     ecx, 7
.text:0000000000005B48                 repe cmpsb
.text:0000000000005B4A                 setnbe  dl
.text:0000000000005B4D                 sbb     dl, 0
.text:0000000000005B50                 test    dl, dl
.text:0000000000005B52                 jnz     short loc_5B7D
.text:0000000000005B54                 lea     rdi, aLt        ; "lt-"
.text:0000000000005B5B                 mov     ecx, 3
.text:0000000000005B60                 mov     rsi, r8
.text:0000000000005B63                 mov     rbx, r8
.text:0000000000005B66                 repe cmpsb
.text:0000000000005B68                 setnbe  dl
.text:0000000000005B6B                 sbb     dl, 0
.text:0000000000005B6E                 test    dl, dl
.text:0000000000005B70                 jnz     short loc_5B7D
.text:0000000000005B72                 lea     rbx, [rax+4]
.text:0000000000005B76                 mov     cs:__bss_start, rbx
.text:0000000000005B7D
.text:0000000000005B7D loc_5B7D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000005B7D                                         ; set_program_name+26↑j ...
.text:0000000000005B7D                 mov     cs:program_name, rbx
.text:0000000000005B84                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000005B8B                 pop     rbx
.text:0000000000005B8C                 retn
.text:0000000000005B8D ; ---------------------------------------------------------------------------
.text:0000000000005B8D
.text:0000000000005B8D loc_5B8D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000005B8D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000005B94                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000005B9B                 mov     edx, 37h ; '7'  ; n
.text:0000000000005BA0                 mov     esi, 1          ; size
.text:0000000000005BA5                 call    _fwrite
.text:0000000000005BAA                 call    _abort
.text:0000000000005BAA ; } // starts at 5B10
.text:0000000000005BAA set_program_name endp
.text:0000000000005BAA
.text:0000000000005BAA ; ---------------------------------------------------------------------------
.text:0000000000005BAF                 align 10h
.text:0000000000005BB0
.text:0000000000005BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BB0
.text:0000000000005BB0 ; Attributes: info_from_lumina
.text:0000000000005BB0
.text:0000000000005BB0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000005BB0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000005BB0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000005BB0 ; __unwind {
.text:0000000000005BB0                 push    rbp
.text:0000000000005BB1                 push    rbx
.text:0000000000005BB2                 mov     rbp, rdi
.text:0000000000005BB5                 mov     ebx, esi
.text:0000000000005BB7                 sub     rsp, 8
.text:0000000000005BBB                 call    locale_charset
.text:0000000000005BC0                 movzx   edx, byte ptr [rax]
.text:0000000000005BC3                 and     edx, 0FFFFFFDFh
.text:0000000000005BC6                 cmp     dl, 55h ; 'U'
.text:0000000000005BC9                 jz      short loc_5C40
.text:0000000000005BCB                 cmp     dl, 47h ; 'G'
.text:0000000000005BCE                 jz      short loc_5BF0
.text:0000000000005BD0
.text:0000000000005BD0 loc_5BD0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000005BD0                                         ; gettext_quote+50↓j ...
.text:0000000000005BD0                 lea     rax, unk_C893
.text:0000000000005BD7                 lea     rdx, aInvalidSSArgum+19h ; "'"
.text:0000000000005BDE                 cmp     ebx, 9
.text:0000000000005BE1                 cmovnz  rax, rdx
.text:0000000000005BE5                 add     rsp, 8
.text:0000000000005BE9                 pop     rbx
.text:0000000000005BEA                 pop     rbp
.text:0000000000005BEB                 retn
.text:0000000000005BEB ; ---------------------------------------------------------------------------
.text:0000000000005BEC                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 loc_5BF0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000005BF0                 movzx   edx, byte ptr [rax+1]
.text:0000000000005BF4                 and     edx, 0FFFFFFDFh
.text:0000000000005BF7                 cmp     dl, 42h ; 'B'
.text:0000000000005BFA                 jnz     short loc_5BD0
.text:0000000000005BFC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000005C00                 jnz     short loc_5BD0
.text:0000000000005C02                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000005C06                 jnz     short loc_5BD0
.text:0000000000005C08                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000005C0C                 jnz     short loc_5BD0
.text:0000000000005C0E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000005C12                 jnz     short loc_5BD0
.text:0000000000005C14                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000005C18                 jnz     short loc_5BD0
.text:0000000000005C1A                 cmp     byte ptr [rax+7], 0
.text:0000000000005C1E                 jnz     short loc_5BD0
.text:0000000000005C20                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000005C24                 lea     rax, unk_C88C
.text:0000000000005C2B                 lea     rdx, unk_C890
.text:0000000000005C32                 cmovnz  rax, rdx
.text:0000000000005C36                 add     rsp, 8
.text:0000000000005C3A                 pop     rbx
.text:0000000000005C3B                 pop     rbp
.text:0000000000005C3C                 retn
.text:0000000000005C3C ; ---------------------------------------------------------------------------
.text:0000000000005C3D                 align 20h
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000005C40                 movzx   edx, byte ptr [rax+1]
.text:0000000000005C44                 and     edx, 0FFFFFFDFh
.text:0000000000005C47                 cmp     dl, 54h ; 'T'
.text:0000000000005C4A                 jnz     short loc_5BD0
.text:0000000000005C4C                 movzx   edx, byte ptr [rax+2]
.text:0000000000005C50                 and     edx, 0FFFFFFDFh
.text:0000000000005C53                 cmp     dl, 46h ; 'F'
.text:0000000000005C56                 jnz     loc_5BD0
.text:0000000000005C5C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000005C60                 jnz     loc_5BD0
.text:0000000000005C66                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000005C6A                 jnz     loc_5BD0
.text:0000000000005C70                 cmp     byte ptr [rax+5], 0
.text:0000000000005C74                 jnz     loc_5BD0
.text:0000000000005C7A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000005C7E                 lea     rax, unk_C884
.text:0000000000005C85                 lea     rdx, unk_C888
.text:0000000000005C8C                 cmovnz  rax, rdx
.text:0000000000005C90                 add     rsp, 8
.text:0000000000005C94                 pop     rbx
.text:0000000000005C95                 pop     rbp
.text:0000000000005C96                 retn
.text:0000000000005C96 ; } // starts at 5BB0
.text:0000000000005C96 gettext_quote   endp
.text:0000000000005C96
.text:0000000000005C96 ; ---------------------------------------------------------------------------
.text:0000000000005C97                 align 20h
.text:0000000000005CA0
.text:0000000000005CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CA0
.text:0000000000005CA0 ; Attributes: info_from_lumina
.text:0000000000005CA0
.text:0000000000005CA0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000005CA0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000005CA0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000005CA0
.text:0000000000005CA0 var_E0          = dword ptr -0E0h
.text:0000000000005CA0 var_DB          = byte ptr -0DBh
.text:0000000000005CA0 var_DA          = byte ptr -0DAh
.text:0000000000005CA0 var_D9          = byte ptr -0D9h
.text:0000000000005CA0 s               = qword ptr -0D8h
.text:0000000000005CA0 n               = qword ptr -0D0h
.text:0000000000005CA0 var_C8          = qword ptr -0C8h
.text:0000000000005CA0 ps              = qword ptr -0C0h
.text:0000000000005CA0 var_B8          = qword ptr -0B8h
.text:0000000000005CA0 var_B0          = qword ptr -0B0h
.text:0000000000005CA0 var_A8          = qword ptr -0A8h
.text:0000000000005CA0 s2              = qword ptr -0A0h
.text:0000000000005CA0 var_98          = qword ptr -98h
.text:0000000000005CA0 var_90          = qword ptr -90h
.text:0000000000005CA0 var_88          = qword ptr -88h
.text:0000000000005CA0 var_80          = qword ptr -80h
.text:0000000000005CA0 var_78          = qword ptr -78h
.text:0000000000005CA0 var_70          = dword ptr -70h
.text:0000000000005CA0 var_6C          = byte ptr -6Ch
.text:0000000000005CA0 var_6B          = byte ptr -6Bh
.text:0000000000005CA0 var_6A          = byte ptr -6Ah
.text:0000000000005CA0 var_69          = byte ptr -69h
.text:0000000000005CA0 var_68          = qword ptr -68h
.text:0000000000005CA0 var_60          = qword ptr -60h
.text:0000000000005CA0 wc              = dword ptr -4Ch
.text:0000000000005CA0 var_48          = qword ptr -48h
.text:0000000000005CA0 var_40          = qword ptr -40h
.text:0000000000005CA0 arg_0           = qword ptr  8
.text:0000000000005CA0 arg_8           = qword ptr  10h
.text:0000000000005CA0 arg_10          = qword ptr  18h
.text:0000000000005CA0
.text:0000000000005CA0 ; __unwind {
.text:0000000000005CA0                 push    r15
.text:0000000000005CA2                 push    r14
.text:0000000000005CA4                 mov     r15d, r8d
.text:0000000000005CA7                 push    r13
.text:0000000000005CA9                 push    r12
.text:0000000000005CAB                 mov     r14, rdi
.text:0000000000005CAE                 push    rbp
.text:0000000000005CAF                 push    rbx
.text:0000000000005CB0                 mov     ebx, r9d
.text:0000000000005CB3                 mov     r13, rsi
.text:0000000000005CB6                 mov     rbp, rcx
.text:0000000000005CB9                 and     ebx, 2
.text:0000000000005CBC                 sub     rsp, 0B8h
.text:0000000000005CC3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000005CCB                 mov     [rsp+0E8h+s], rdx
.text:0000000000005CD0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000005CD5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000005CDA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000005CDF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000005CE7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005CEC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000005CF4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005CF9                 mov     rax, fs:28h
.text:0000000000005D02                 mov     [rsp+0E8h+var_40], rax
.text:0000000000005D0A                 xor     eax, eax
.text:0000000000005D0C                 call    ___ctype_get_mb_cur_max
.text:0000000000005D11                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000005D15                 mov     [rsp+0E8h+var_90], rax
.text:0000000000005D1A                 ja      def_5D31        ; jumptable 00000000000121F1 default case
.text:0000000000005D20                 lea     rcx, jpt_5D31
.text:0000000000005D27                 mov     edx, r15d
.text:0000000000005D2A                 movsxd  rax, ds:(jpt_5D31 - 0C900h)[rcx+rdx*4]
.text:0000000000005D2E                 add     rax, rcx
.text:0000000000005D31                 jmp     rax             ; switch jump
.text:0000000000005D33 ; ---------------------------------------------------------------------------
.text:0000000000005D33
.text:0000000000005D33 loc_5D33:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005D33                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000005D33                                         ; DATA XREF: ...
.text:0000000000005D33                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000005D38                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005D3D                 xor     r12d, r12d
.text:0000000000005D40                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005D49                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005D4E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005D53
.text:0000000000005D53 loc_5D53:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000005D53                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000005D5A                 mov     [rsp+0E8h+n], 1
.text:0000000000005D63                 xor     r15d, r15d
.text:0000000000005D66                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005D6E                 mov     [rsp+0E8h+s2], rax
.text:0000000000005D73
.text:0000000000005D73 loc_5D73:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000005D73                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000005D73                 xor     r11d, r11d
.text:0000000000005D76                 mov     rax, rbp
.text:0000000000005D79                 mov     r8d, r12d
.text:0000000000005D7C                 mov     rbp, r11
.text:0000000000005D7F                 mov     r11, rax
.text:0000000000005D82                 nop     word ptr [rax+rax+00h]
.text:0000000000005D88
.text:0000000000005D88 loc_5D88:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000005D88                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000005D88                 cmp     r11, rbp
.text:0000000000005D8B                 setnz   r12b
.text:0000000000005D8F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D93                 jnz     short loc_5DA2
.text:0000000000005D95                 mov     rax, [rsp+0E8h+s]
.text:0000000000005D9A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000005D9E                 setnz   r12b
.text:0000000000005DA2
.text:0000000000005DA2 loc_5DA2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000005DA2                 test    r12b, r12b
.text:0000000000005DA5                 jz      loc_6400
.text:0000000000005DAB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005DB0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000005DB5                 lea     r9, [rdi+rbp]
.text:0000000000005DB9                 setnz   al
.text:0000000000005DBC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000005DC0                 mov     r10d, eax
.text:0000000000005DC3                 jz      loc_5E70
.text:0000000000005DC9                 mov     rax, [rsp+0E8h+n]
.text:0000000000005DCE                 test    rax, rax
.text:0000000000005DD1                 jz      loc_6200
.text:0000000000005DD7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DDB                 lea     rbx, [rbp+rax+0]
.text:0000000000005DE0                 jnz     short loc_5E10
.text:0000000000005DE2                 cmp     rax, 1
.text:0000000000005DE6                 jbe     short loc_5E10
.text:0000000000005DE8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000005DED                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000005DF2                 mov     [rsp+0E8h+ps], r9
.text:0000000000005DF7                 call    _strlen
.text:0000000000005DFC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000005E02                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000005E08                 mov     r11, rax
.text:0000000000005E0B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000005E10
.text:0000000000005E10 loc_5E10:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000005E10                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000005E10                 cmp     rbx, r11
.text:0000000000005E13                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000005E18                 ja      loc_63D0
.text:0000000000005E1E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000005E23                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000005E28                 mov     rdi, r9         ; s1
.text:0000000000005E2B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000005E30                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000005E35                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000005E3A                 call    _memcmp
.text:0000000000005E3F                 test    eax, eax
.text:0000000000005E41                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000005E46                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000005E4C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000005E51                 jnz     loc_63D0
.text:0000000000005E57                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005E5C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000005E62                 jnz     loc_6DE5
.text:0000000000005E68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005E70
.text:0000000000005E70 loc_5E70:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000005E70                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000005E70                 movzx   ebx, byte ptr [r9]
.text:0000000000005E74                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000005E77                 ja      def_5E8E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000005E7D                 lea     rcx, jpt_5E8E
.text:0000000000005E84                 movzx   edx, bl
.text:0000000000005E87                 movsxd  rax, ds:(jpt_5E8E - 0C92Ch)[rcx+rdx*4]
.text:0000000000005E8B                 add     rax, rcx
.text:0000000000005E8E                 jmp     rax             ; switch jump
.text:0000000000005E90 ; ---------------------------------------------------------------------------
.text:0000000000005E90
.text:0000000000005E90 loc_5E90:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000005E90                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000005E90                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000005E93
.text:0000000000005E93 loc_5E93:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005E93                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000005E93                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000005E97                 setnz   al
.text:0000000000005E9A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E9E                 jnz     short loc_5EAC
.text:0000000000005EA0                 mov     rax, [rsp+0E8h+s]
.text:0000000000005EA5                 cmp     byte ptr [rax+1], 0
.text:0000000000005EA9                 setnz   al
.text:0000000000005EAC
.text:0000000000005EAC loc_5EAC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000005EAC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005EB1                 setz    dl
.text:0000000000005EB4                 test    al, al
.text:0000000000005EB6                 jz      loc_6108
.text:0000000000005EBC
.text:0000000000005EBC loc_5EBC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000005EBC                 xor     r12d, r12d
.text:0000000000005EBF                 xor     eax, eax
.text:0000000000005EC1                 nop     dword ptr [rax+00000000h]
.text:0000000000005EC8
.text:0000000000005EC8 loc_5EC8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000005EC8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000005EC8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000005ECD                 jnz     loc_5FE2
.text:0000000000005ED3                 test    dl, dl
.text:0000000000005ED5                 jnz     loc_5FE2
.text:0000000000005EDB
.text:0000000000005EDB loc_5EDB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000005EDB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000005EE0                 test    rsi, rsi
.text:0000000000005EE3                 jz      short loc_5EF9
.text:0000000000005EE5                 mov     edx, ebx
.text:0000000000005EE7                 shr     dl, 5
.text:0000000000005EEA                 movzx   edx, dl
.text:0000000000005EED                 mov     edx, [rsi+rdx*4]
.text:0000000000005EF0                 bt      edx, ebx
.text:0000000000005EF3                 jb      loc_6043
.text:0000000000005EF9
.text:0000000000005EF9 loc_5EF9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000005EF9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000005EF9                 test    r10b, r10b
.text:0000000000005EFC                 jnz     loc_6043
.text:0000000000005F02                 xor     eax, 1
.text:0000000000005F05                 add     rbp, 1
.text:0000000000005F09                 and     eax, r8d
.text:0000000000005F0C
.text:0000000000005F0C loc_5F0C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000005F0C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000005F0C                 test    al, al
.text:0000000000005F0E                 jz      short loc_5F30
.text:0000000000005F10                 cmp     r13, r15
.text:0000000000005F13                 jbe     short loc_5F1A
.text:0000000000005F15                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005F1A
.text:0000000000005F1A loc_5F1A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000005F1A                 lea     rax, [r15+1]
.text:0000000000005F1E                 cmp     r13, rax
.text:0000000000005F21                 jbe     short loc_5F29
.text:0000000000005F23                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000005F29
.text:0000000000005F29 loc_5F29:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000005F29                 add     r15, 2
.text:0000000000005F2D                 xor     r8d, r8d
.text:0000000000005F30
.text:0000000000005F30 loc_5F30:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000005F30                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000005F30                 cmp     r15, r13
.text:0000000000005F33                 jnb     short loc_5F39
.text:0000000000005F35                 mov     [r14+r15], bl
.text:0000000000005F39
.text:0000000000005F39 loc_5F39:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000005F39                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000005F3E                 add     r15, 1
.text:0000000000005F42                 mov     eax, 0
.text:0000000000005F47                 test    r12b, r12b
.text:0000000000005F4A                 cmovz   edi, eax
.text:0000000000005F4D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000005F52                 jmp     loc_5D88
.text:0000000000005F52 ; ---------------------------------------------------------------------------
.text:0000000000005F57                 align 20h
.text:0000000000005F60
.text:0000000000005F60 loc_5F60:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000005F60                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000005F60                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000005F63
.text:0000000000005F63 loc_5F63:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005F63                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000005F63                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000005F67                 cmp     eax, 2
.text:0000000000005F6A                 jz      loc_6528
.text:0000000000005F70                 cmp     eax, 5
.text:0000000000005F73                 jz      loc_64E8
.text:0000000000005F79                 cmp     eax, 2
.text:0000000000005F7C                 mov     ebx, 3Fh ; '?'
.text:0000000000005F81                 setz    dl
.text:0000000000005F84                 xor     r12d, r12d
.text:0000000000005F87                 xor     eax, eax
.text:0000000000005F89                 jmp     loc_5EC8
.text:0000000000005F89 ; ---------------------------------------------------------------------------
.text:0000000000005F8E                 align 10h
.text:0000000000005F90
.text:0000000000005F90 loc_5F90:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000005F90                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000005F90                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000005F93
.text:0000000000005F93 loc_5F93:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005F93                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000005F93                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000005F98                 jz      loc_64A0
.text:0000000000005F9E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000005FA3                 xor     edx, edx
.text:0000000000005FA5                 xor     eax, eax
.text:0000000000005FA7                 mov     ebx, 27h ; '''
.text:0000000000005FAC                 jmp     loc_5EC8
.text:0000000000005FAC ; ---------------------------------------------------------------------------
.text:0000000000005FB1                 align 8
.text:0000000000005FB8
.text:0000000000005FB8 loc_5FB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005FB8                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000005FB8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000005FBD                 mov     ebx, 74h ; 't'
.text:0000000000005FC2
.text:0000000000005FC2 loc_5FC2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000005FC2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000005FC2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005FC7                 setz    al
.text:0000000000005FCA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000005FCE                 jnz     loc_611E
.text:0000000000005FD4
.text:0000000000005FD4 loc_5FD4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000005FD4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000005FD4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000005FD9                 jnz     short loc_6040
.text:0000000000005FDB
.text:0000000000005FDB loc_5FDB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000005FDB                 mov     ebx, edx
.text:0000000000005FDD                 xor     r12d, r12d
.text:0000000000005FE0                 xor     eax, eax
.text:0000000000005FE2
.text:0000000000005FE2 loc_5FE2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000005FE2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000005FE2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005FE7                 jnz     loc_5EDB
.text:0000000000005FED                 jmp     loc_5EF9
.text:0000000000005FED ; ---------------------------------------------------------------------------
.text:0000000000005FF2                 align 8
.text:0000000000005FF8
.text:0000000000005FF8 loc_5FF8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005FF8                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000005FF8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000005FFD                 mov     ebx, 62h ; 'b'
.text:0000000000006002                 jmp     short loc_5FD4
.text:0000000000006002 ; ---------------------------------------------------------------------------
.text:0000000000006004                 align 8
.text:0000000000006008
.text:0000000000006008 loc_6008:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006008                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000006008                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000600D                 jz      loc_63E0
.text:0000000000006013                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006018                 jz      loc_6230
.text:000000000000601E
.text:000000000000601E loc_601E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000601E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006023                 jz      loc_6230
.text:0000000000006029                 cmp     [rsp+0E8h+n], 0
.text:000000000000602F                 jnz     loc_63EB
.text:0000000000006035                 mov     ebx, 5Ch ; '\'
.text:000000000000603A                 nop     word ptr [rax+rax+00h]
.text:0000000000006040
.text:0000000000006040 loc_6040:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000006040                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000006040                 xor     r12d, r12d
.text:0000000000006043
.text:0000000000006043 loc_6043:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000006043                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000006043                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006048                 setz    dl
.text:000000000000604B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006050                 mov     eax, edx
.text:0000000000006052                 jnz     loc_68A8
.text:0000000000006058                 mov     eax, r8d
.text:000000000000605B                 xor     eax, 1
.text:000000000000605E                 and     al, dl
.text:0000000000006060                 jz      short loc_6091
.text:0000000000006062                 cmp     r13, r15
.text:0000000000006065                 jbe     short loc_606C
.text:0000000000006067                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000606C
.text:000000000000606C loc_606C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000606C                 lea     rdx, [r15+1]
.text:0000000000006070                 cmp     r13, rdx
.text:0000000000006073                 jbe     short loc_607B
.text:0000000000006075                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000607B
.text:000000000000607B loc_607B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000607B                 lea     rdx, [r15+2]
.text:000000000000607F                 cmp     r13, rdx
.text:0000000000006082                 jbe     short loc_608A
.text:0000000000006084                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000608A
.text:000000000000608A loc_608A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000608A                 add     r15, 3
.text:000000000000608E                 mov     r8d, eax
.text:0000000000006091
.text:0000000000006091 loc_6091:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000006091                 cmp     r13, r15
.text:0000000000006094                 jbe     short loc_609B
.text:0000000000006096                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000609B
.text:000000000000609B loc_609B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000609B                 add     r15, 1
.text:000000000000609F                 add     rbp, 1
.text:00000000000060A3                 jmp     loc_5F30
.text:00000000000060A3 ; ---------------------------------------------------------------------------
.text:00000000000060A8                 align 10h
.text:00000000000060B0
.text:00000000000060B0 loc_60B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000060B0                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:00000000000060B0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000060B5                 jnz     loc_6283
.text:00000000000060BB                 xor     edx, edx
.text:00000000000060BD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000060C2                 jz      loc_5FDB
.text:00000000000060C8                 add     rbp, 1
.text:00000000000060CC                 jmp     loc_5D88
.text:00000000000060CC ; ---------------------------------------------------------------------------
.text:00000000000060D1                 align 8
.text:00000000000060D8
.text:00000000000060D8 loc_60D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000060D8                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:00000000000060D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000060DD                 setz    dl
.text:00000000000060E0                 xor     eax, eax
.text:00000000000060E2                 jmp     loc_5EC8
.text:00000000000060E2 ; ---------------------------------------------------------------------------
.text:00000000000060E7                 align 10h
.text:00000000000060F0
.text:00000000000060F0 loc_60F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000060F0                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:00000000000060F0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000060F5                 mov     ebx, 61h ; 'a'
.text:00000000000060FA                 jmp     loc_5FD4
.text:00000000000060FA ; ---------------------------------------------------------------------------
.text:00000000000060FF                 align 20h
.text:0000000000006100
.text:0000000000006100 loc_6100:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006100                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000006100                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000006105                 setz    dl
.text:0000000000006108
.text:0000000000006108 loc_6108:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000006108                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000006108                 test    rbp, rbp
.text:000000000000610B                 jnz     loc_5EBC
.text:0000000000006111
.text:0000000000006111 loc_6111:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000006111                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000006111                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000006116                 and     al, dl
.text:0000000000006118                 jz      loc_5EC8
.text:000000000000611E
.text:000000000000611E loc_611E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000611E                 mov     rbp, r11
.text:0000000000006121                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006129                 jmp     loc_6829
.text:0000000000006129 ; ---------------------------------------------------------------------------
.text:000000000000612E                 align 10h
.text:0000000000006130
.text:0000000000006130 loc_6130:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006130                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000006130                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000006135                 setz    dl
.text:0000000000006138                 xor     r12d, r12d
.text:000000000000613B                 jmp     short loc_6111
.text:000000000000613B ; ---------------------------------------------------------------------------
.text:000000000000613D                 align 20h
.text:0000000000006140
.text:0000000000006140 loc_6140:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006140                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000006140                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000006145                 mov     ebx, 20h ; ' '
.text:000000000000614A                 setz    dl
.text:000000000000614D                 jmp     short loc_6111
.text:000000000000614D ; ---------------------------------------------------------------------------
.text:000000000000614F                 align 10h
.text:0000000000006150
.text:0000000000006150 loc_6150:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006150                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000006150                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000006155                 mov     ebx, 72h ; 'r'
.text:000000000000615A                 jmp     loc_5FC2
.text:000000000000615A ; ---------------------------------------------------------------------------
.text:000000000000615F                 align 20h
.text:0000000000006160
.text:0000000000006160 loc_6160:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006160                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000006160                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000006165                 mov     ebx, 66h ; 'f'
.text:000000000000616A                 jmp     loc_5FD4
.text:000000000000616A ; ---------------------------------------------------------------------------
.text:000000000000616F                 align 10h
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006170                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000006170                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000006175                 mov     ebx, 76h ; 'v'
.text:000000000000617A                 jmp     loc_5FD4
.text:000000000000617A ; ---------------------------------------------------------------------------
.text:000000000000617F                 align 20h
.text:0000000000006180
.text:0000000000006180 loc_6180:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006180                                         ; DATA XREF: .rodata:jpt_5E8E↓o
.text:0000000000006180                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000006185                 mov     ebx, 6Eh ; 'n'
.text:000000000000618A                 jmp     loc_5FC2
.text:000000000000618A ; ---------------------------------------------------------------------------
.text:000000000000618F                 align 10h
.text:0000000000006190
.text:0000000000006190 def_621A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000006190                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000006190                                         ; DATA XREF: ...
.text:0000000000006190                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000006193                 nop     dword ptr [rax+rax+00h]
.text:0000000000006198
.text:0000000000006198 def_5E8E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000006198                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000006198                                         ; DATA XREF: ...
.text:0000000000006198                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000619E                 jnz     loc_6548
.text:00000000000061A4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000061A9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000061AE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000061B3                 call    ___ctype_b_loc
.text:00000000000061B8                 mov     rcx, [rax]
.text:00000000000061BB                 movzx   edx, bl
.text:00000000000061BE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000061C4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000061CA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000061CF                 mov     edi, 1
.text:00000000000061D4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000061D8                 and     ax, 4000h
.text:00000000000061DC                 setnz   r12b
.text:00000000000061E0                 setz    al
.text:00000000000061E3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000061E7
.text:00000000000061E7 loc_61E7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000061E7                 test    al, al
.text:00000000000061E9                 jnz     loc_6B81
.text:00000000000061EF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000061F4                 setz    dl
.text:00000000000061F7                 jmp     loc_5EC8
.text:00000000000061F7 ; ---------------------------------------------------------------------------
.text:00000000000061FC                 align 20h
.text:0000000000006200
.text:0000000000006200 loc_6200:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000006200                 movzx   ebx, byte ptr [r9]
.text:0000000000006204                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000006207                 ja      short def_621A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000006209                 lea     rcx, jpt_621A
.text:0000000000006210                 movzx   edx, bl
.text:0000000000006213                 movsxd  rax, ds:(jpt_621A - 0CB28h)[rcx+rdx*4]
.text:0000000000006217                 add     rax, rcx
.text:000000000000621A                 jmp     rax             ; switch jump
.text:000000000000621A ; ---------------------------------------------------------------------------
.text:000000000000621C                 align 20h
.text:0000000000006220
.text:0000000000006220 loc_6220:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006220                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006220                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000006223                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006228                 jnz     loc_601E
.text:000000000000622E                 xchg    ax, ax
.text:0000000000006230
.text:0000000000006230 loc_6230:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000006230                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000006230                 mov     edx, 5Ch ; '\'
.text:0000000000006235                 mov     ebx, 5Ch ; '\'
.text:000000000000623A                 jmp     loc_5FD4
.text:000000000000623A ; ---------------------------------------------------------------------------
.text:000000000000623F                 align 20h
.text:0000000000006240
.text:0000000000006240 loc_6240:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006240                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006240                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000006245                 xor     r10d, r10d
.text:0000000000006248                 mov     ebx, 66h ; 'f'
.text:000000000000624D                 jmp     loc_5FD4
.text:000000000000624D ; ---------------------------------------------------------------------------
.text:0000000000006252                 align 8
.text:0000000000006258
.text:0000000000006258 loc_6258:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006258                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006258                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000625D                 xor     r10d, r10d
.text:0000000000006260                 mov     ebx, 6Eh ; 'n'
.text:0000000000006265                 jmp     loc_5FC2
.text:0000000000006265 ; ---------------------------------------------------------------------------
.text:000000000000626A                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006270                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006270                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000006275                 jmp     loc_6040
.text:0000000000006275 ; ---------------------------------------------------------------------------
.text:000000000000627A                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006280                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006280                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000006283
.text:0000000000006283 loc_6283:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000006283                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006288                 setz    dl
.text:000000000000628B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006290                 jnz     loc_6E2A
.text:0000000000006296                 mov     eax, r8d
.text:0000000000006299                 mov     rcx, r15
.text:000000000000629C                 xor     eax, 1
.text:000000000000629F                 and     al, dl
.text:00000000000062A1                 jz      short loc_62D0
.text:00000000000062A3                 cmp     r13, r15
.text:00000000000062A6                 jbe     short loc_62AD
.text:00000000000062A8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000062AD
.text:00000000000062AD loc_62AD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000062AD                 lea     rcx, [r15+1]
.text:00000000000062B1                 cmp     r13, rcx
.text:00000000000062B4                 jbe     short loc_62BC
.text:00000000000062B6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000062BC
.text:00000000000062BC loc_62BC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000062BC                 lea     rcx, [r15+2]
.text:00000000000062C0                 cmp     r13, rcx
.text:00000000000062C3                 ja      loc_68F9
.text:00000000000062C9
.text:00000000000062C9 loc_62C9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000062C9                 lea     rcx, [r15+3]
.text:00000000000062CD                 mov     r8d, eax
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000062D0                 cmp     r13, rcx
.text:00000000000062D3                 jbe     short loc_62DA
.text:00000000000062D5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000062DA
.text:00000000000062DA loc_62DA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000062DA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000062DF                 lea     r15, [rcx+1]
.text:00000000000062E3                 jz      loc_68E9
.text:00000000000062E9                 lea     rax, [rbp+1]
.text:00000000000062ED                 cmp     rax, r11
.text:00000000000062F0                 jnb     short loc_630B
.text:00000000000062F2                 mov     rax, [rsp+0E8h+s]
.text:00000000000062F7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000062FC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000006300                 sub     eax, 30h ; '0'
.text:0000000000006303                 cmp     al, 9
.text:0000000000006305                 jbe     loc_6B39
.text:000000000000630B
.text:000000000000630B loc_630B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000630B                 mov     eax, r12d
.text:000000000000630E                 mov     ebx, 30h ; '0'
.text:0000000000006313                 xor     r12d, r12d
.text:0000000000006316                 jmp     loc_5EC8
.text:0000000000006316 ; ---------------------------------------------------------------------------
.text:000000000000631B                 align 20h
.text:0000000000006320
.text:0000000000006320 loc_6320:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006320                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006320                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000006325                 mov     r12d, r10d
.text:0000000000006328                 setz    dl
.text:000000000000632B                 xor     r10d, r10d
.text:000000000000632E                 xor     eax, eax
.text:0000000000006330                 jmp     loc_5EC8
.text:0000000000006330 ; ---------------------------------------------------------------------------
.text:0000000000006335                 align 8
.text:0000000000006338
.text:0000000000006338 loc_6338:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006338                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006338                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000633D                 setz    dl
.text:0000000000006340                 xor     r10d, r10d
.text:0000000000006343                 jmp     loc_6108
.text:0000000000006343 ; ---------------------------------------------------------------------------
.text:0000000000006348                 align 10h
.text:0000000000006350
.text:0000000000006350 loc_6350:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006350                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006350                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000006355                 setz    dl
.text:0000000000006358                 xor     r10d, r10d
.text:000000000000635B                 xor     r12d, r12d
.text:000000000000635E                 jmp     loc_6111
.text:000000000000635E ; ---------------------------------------------------------------------------
.text:0000000000006363                 align 8
.text:0000000000006368
.text:0000000000006368 loc_6368:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006368                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006368                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000636D                 mov     r12d, r10d
.text:0000000000006370                 mov     ebx, 20h ; ' '
.text:0000000000006375                 setz    dl
.text:0000000000006378                 xor     r10d, r10d
.text:000000000000637B                 jmp     loc_6111
.text:0000000000006380 ; ---------------------------------------------------------------------------
.text:0000000000006380
.text:0000000000006380 loc_6380:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006380                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006380                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000006385                 xor     r10d, r10d
.text:0000000000006388                 mov     ebx, 72h ; 'r'
.text:000000000000638D                 jmp     loc_5FC2
.text:000000000000638D ; ---------------------------------------------------------------------------
.text:0000000000006392                 align 8
.text:0000000000006398
.text:0000000000006398 loc_6398:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006398                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:0000000000006398                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000639D                 jmp     loc_6040
.text:000000000000639D ; ---------------------------------------------------------------------------
.text:00000000000063A2                 align 8
.text:00000000000063A8
.text:00000000000063A8 loc_63A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000063A8                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:00000000000063A8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000063AD                 xor     r10d, r10d
.text:00000000000063B0                 mov     ebx, 74h ; 't'
.text:00000000000063B5                 jmp     loc_5FC2
.text:00000000000063B5 ; ---------------------------------------------------------------------------
.text:00000000000063BA                 align 20h
.text:00000000000063C0
.text:00000000000063C0 loc_63C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000063C0                                         ; DATA XREF: .rodata:jpt_621A↓o
.text:00000000000063C0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000063C5                 jmp     loc_6040
.text:00000000000063C5 ; ---------------------------------------------------------------------------
.text:00000000000063CA                 align 10h
.text:00000000000063D0
.text:00000000000063D0 loc_63D0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000063D0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000063D0                 xor     r10d, r10d
.text:00000000000063D3                 jmp     loc_5E70
.text:00000000000063D3 ; ---------------------------------------------------------------------------
.text:00000000000063D8                 align 20h
.text:00000000000063E0
.text:00000000000063E0 loc_63E0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000063E0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000063E5                 jnz     loc_6D50
.text:00000000000063EB
.text:00000000000063EB loc_63EB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000063EB                 add     rbp, 1
.text:00000000000063EF                 mov     eax, r8d
.text:00000000000063F2                 xor     r12d, r12d
.text:00000000000063F5                 mov     ebx, 5Ch ; '\'
.text:00000000000063FA                 jmp     loc_5F0C
.text:00000000000063FA ; ---------------------------------------------------------------------------
.text:00000000000063FF                 align 20h
.text:0000000000006400
.text:0000000000006400 loc_6400:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000006400                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006405                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000640A                 mov     r12d, r8d
.text:000000000000640D                 mov     rbp, r11
.text:0000000000006410                 setz    dl
.text:0000000000006413                 mov     eax, ebx
.text:0000000000006415                 test    r15, r15
.text:0000000000006418                 setz    cl
.text:000000000000641B                 and     eax, edx
.text:000000000000641D                 and     al, cl
.text:000000000000641F                 jnz     loc_6E86
.text:0000000000006425                 mov     eax, ebx
.text:0000000000006427                 xor     eax, 1
.text:000000000000642A                 and     dl, al
.text:000000000000642C                 jz      loc_6D9C
.text:0000000000006432                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000006437                 jz      loc_6D9A
.text:000000000000643D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000006442                 jnz     loc_6E3D
.text:0000000000006448                 test    r13, r13
.text:000000000000644B                 setz    al
.text:000000000000644E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000006454                 setnz   dl
.text:0000000000006457                 and     al, dl
.text:0000000000006459                 jz      loc_6E7C
.text:000000000000645F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000006464
.text:0000000000006464 loc_6464:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000006464                 lea     rbx, aInvalidSSArgum+19h ; "'"
.text:000000000000646B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000646F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006477                 mov     r15d, 1
.text:000000000000647D                 mov     [rsp+0E8h+n], 1
.text:0000000000006486                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000648B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000006490                 mov     [rsp+0E8h+var_6C], al
.text:0000000000006494                 jmp     loc_5D73
.text:0000000000006494 ; ---------------------------------------------------------------------------
.text:0000000000006499                 align 20h
.text:00000000000064A0
.text:00000000000064A0 loc_64A0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000064A0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000064A5                 jnz     loc_6D50
.text:00000000000064AB                 test    r13, r13
.text:00000000000064AE                 jz      loc_68B0
.text:00000000000064B4                 xor     edx, edx
.text:00000000000064B6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000064BC                 jnz     loc_68B0
.text:00000000000064C2
.text:00000000000064C2 loc_64C2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000064C2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000064C2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000064C7                 add     r15, 3
.text:00000000000064CB                 xor     eax, eax
.text:00000000000064CD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000064D2                 xor     r8d, r8d
.text:00000000000064D5                 mov     r13, rdx
.text:00000000000064D8                 mov     ebx, 27h ; '''
.text:00000000000064DD                 jmp     loc_5EF9
.text:00000000000064DD ; ---------------------------------------------------------------------------
.text:00000000000064E2                 align 8
.text:00000000000064E8
.text:00000000000064E8 loc_64E8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000064E8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000064ED                 jz      short loc_6510
.text:00000000000064EF                 lea     rcx, [rbp+2]
.text:00000000000064F3                 cmp     rcx, r11
.text:00000000000064F6                 jnb     short loc_6510
.text:00000000000064F8                 mov     rax, [rsp+0E8h+s]
.text:00000000000064FD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000006502                 jz      loc_6C92
.text:0000000000006508                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006510
.text:0000000000006510 loc_6510:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000006510                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000006510                 xor     edx, edx
.text:0000000000006512                 xor     r12d, r12d
.text:0000000000006515                 xor     eax, eax
.text:0000000000006517                 mov     ebx, 3Fh ; '?'
.text:000000000000651C                 jmp     loc_5EC8
.text:000000000000651C ; ---------------------------------------------------------------------------
.text:0000000000006521                 align 8
.text:0000000000006528
.text:0000000000006528 loc_6528:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000006528                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000652D                 jnz     loc_6D50
.text:0000000000006533                 xor     r12d, r12d
.text:0000000000006536                 xor     eax, eax
.text:0000000000006538                 mov     ebx, 3Fh ; '?'
.text:000000000000653D                 jmp     loc_5EF9
.text:000000000000653D ; ---------------------------------------------------------------------------
.text:0000000000006542                 align 8
.text:0000000000006548
.text:0000000000006548 loc_6548:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000006548                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000006550                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000006554                 mov     [rsp+0E8h+var_48], 0
.text:0000000000006560                 mov     [rsp+0E8h+ps], rax
.text:0000000000006565                 jnz     short loc_6594
.text:0000000000006567                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000656C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000006571                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000006576                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000657B                 call    _strlen
.text:0000000000006580                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000006586                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000658C                 mov     r11, rax
.text:000000000000658F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000006594
.text:0000000000006594 loc_6594:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000006594                 lea     rax, [rsp+0E8h+wc]
.text:000000000000659C                 xor     ecx, ecx
.text:000000000000659E                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000065A2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000065A7                 mov     rbx, rcx
.text:00000000000065AA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000065B2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000065B7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000065BC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000065C4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000065C9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000065CE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000065D3
.text:00000000000065D3 loc_65D3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000065D3                 mov     rax, [rsp+0E8h+s]
.text:00000000000065D8                 lea     r14, [rbp+rbx+0]
.text:00000000000065DD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000065E2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000065E7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000065EC                 lea     r13, [rax+r14]
.text:00000000000065F0                 sub     rdx, r14
.text:00000000000065F3                 mov     rsi, r13
.text:00000000000065F6                 call    rpl_mbrtowc
.text:00000000000065FB                 test    rax, rax
.text:00000000000065FE                 mov     r15, rax
.text:0000000000006601                 jz      short loc_6651
.text:0000000000006603                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006607                 jz      loc_6C25
.text:000000000000660D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000006611                 jz      loc_6BB1
.text:0000000000006617                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000661C                 setz    al
.text:000000000000661F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000006623                 jnz     loc_67C0
.text:0000000000006629
.text:0000000000006629 loc_6629:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000006629                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000006629                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000006630                 call    _iswprint
.text:0000000000006635                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000663A                 test    eax, eax
.text:000000000000663C                 mov     eax, 0
.text:0000000000006641                 cmovz   r12d, eax
.text:0000000000006645                 add     rbx, r15
.text:0000000000006648                 call    _mbsinit
.text:000000000000664D                 test    eax, eax
.text:000000000000664F                 jz      short loc_65D3
.text:0000000000006651
.text:0000000000006651 loc_6651:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000006651                 mov     edx, r12d
.text:0000000000006654                 mov     rdi, rbx
.text:0000000000006657                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000665D                 xor     edx, 1
.text:0000000000006660                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006665                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000666B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000666F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006677                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000667C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006681                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006686
.text:0000000000006686 loc_6686:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000006686                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000006686                 cmp     rdi, 1
.text:000000000000668A                 jbe     loc_6C8B
.text:0000000000006690
.text:0000000000006690 loc_6690:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000006690                 mov     rcx, rdi
.text:0000000000006693                 xor     esi, esi
.text:0000000000006695                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000669B                 add     rcx, rbp
.text:000000000000669E                 mov     rdi, [rsp+0E8h+s]
.text:00000000000066A3                 jmp     loc_675E
.text:00000000000066A3 ; ---------------------------------------------------------------------------
.text:00000000000066A8                 align 10h
.text:00000000000066B0
.text:00000000000066B0 loc_66B0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000066B0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000066B5                 setz    al
.text:00000000000066B8                 test    r9b, r9b
.text:00000000000066BB                 jnz     loc_6B70
.text:00000000000066C1                 mov     esi, r8d
.text:00000000000066C4                 xor     esi, 1
.text:00000000000066C7                 and     al, sil
.text:00000000000066CA                 jz      short loc_66FB
.text:00000000000066CC                 cmp     r13, r15
.text:00000000000066CF                 jbe     short loc_66D6
.text:00000000000066D1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000066D6
.text:00000000000066D6 loc_66D6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000066D6                 lea     rsi, [r15+1]
.text:00000000000066DA                 cmp     r13, rsi
.text:00000000000066DD                 jbe     short loc_66E5
.text:00000000000066DF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000066E5
.text:00000000000066E5 loc_66E5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000066E5                 lea     rsi, [r15+2]
.text:00000000000066E9                 cmp     r13, rsi
.text:00000000000066EC                 jbe     short loc_66F4
.text:00000000000066EE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000066F4
.text:00000000000066F4 loc_66F4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000066F4                 add     r15, 3
.text:00000000000066F8                 mov     r8d, eax
.text:00000000000066FB
.text:00000000000066FB loc_66FB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000066FB                 cmp     r13, r15
.text:00000000000066FE                 jbe     short loc_6705
.text:0000000000006700                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000006705
.text:0000000000006705 loc_6705:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000006705                 lea     rax, [r15+1]
.text:0000000000006709                 cmp     r13, rax
.text:000000000000670C                 jbe     short loc_671B
.text:000000000000670E                 mov     eax, ebx
.text:0000000000006710                 shr     al, 6
.text:0000000000006713                 add     eax, 30h ; '0'
.text:0000000000006716                 mov     [r14+r15+1], al
.text:000000000000671B
.text:000000000000671B loc_671B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000671B                 lea     rax, [r15+2]
.text:000000000000671F                 cmp     r13, rax
.text:0000000000006722                 jbe     short loc_6734
.text:0000000000006724                 mov     eax, ebx
.text:0000000000006726                 shr     al, 3
.text:0000000000006729                 and     eax, 7
.text:000000000000672C                 add     eax, 30h ; '0'
.text:000000000000672F                 mov     [r14+r15+2], al
.text:0000000000006734
.text:0000000000006734 loc_6734:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000006734                 and     ebx, 7
.text:0000000000006737                 add     rbp, 1
.text:000000000000673B                 add     r15, 3
.text:000000000000673F                 add     ebx, 30h ; '0'
.text:0000000000006742                 cmp     rbp, rcx
.text:0000000000006745                 jnb     loc_5F30
.text:000000000000674B                 mov     esi, edx
.text:000000000000674D
.text:000000000000674D loc_674D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000674D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000674D                 cmp     r13, r15
.text:0000000000006750                 jbe     short loc_6756
.text:0000000000006752                 mov     [r14+r15], bl
.text:0000000000006756
.text:0000000000006756 loc_6756:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000006756                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000675A                 add     r15, 1
.text:000000000000675E
.text:000000000000675E loc_675E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000675E                 test    dl, dl
.text:0000000000006760                 jnz     loc_66B0
.text:0000000000006766                 mov     eax, esi
.text:0000000000006768                 xor     eax, 1
.text:000000000000676B                 and     eax, r8d
.text:000000000000676E                 test    r10b, r10b
.text:0000000000006771                 jz      short loc_6781
.text:0000000000006773                 cmp     r13, r15
.text:0000000000006776                 jbe     short loc_677D
.text:0000000000006778                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000677D
.text:000000000000677D loc_677D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000677D                 add     r15, 1
.text:0000000000006781
.text:0000000000006781 loc_6781:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000006781                 add     rbp, 1
.text:0000000000006785                 cmp     rbp, rcx
.text:0000000000006788                 jnb     loc_5F0C
.text:000000000000678E                 test    al, al
.text:0000000000006790                 jz      loc_6B8E
.text:0000000000006796                 cmp     r13, r15
.text:0000000000006799                 jbe     short loc_67A0
.text:000000000000679B                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000067A0
.text:00000000000067A0 loc_67A0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000067A0                 lea     rax, [r15+1]
.text:00000000000067A4                 cmp     r13, rax
.text:00000000000067A7                 jbe     short loc_67AF
.text:00000000000067A9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000067AF
.text:00000000000067AF loc_67AF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000067AF                 add     r15, 2
.text:00000000000067B3                 xor     r10d, r10d
.text:00000000000067B6                 xor     r8d, r8d
.text:00000000000067B9                 jmp     short loc_674D
.text:00000000000067B9 ; ---------------------------------------------------------------------------
.text:00000000000067BB                 align 20h
.text:00000000000067C0
.text:00000000000067C0 loc_67C0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000067C0                 cmp     r15, 1
.text:00000000000067C4                 jz      loc_6629
.text:00000000000067CA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000067CF                 lea     rcx, [rdi+r15]
.text:00000000000067D3                 lea     rdx, [rdi+r14+1]
.text:00000000000067D8                 lea     r8, [rcx+r14]
.text:00000000000067DC                 jmp     short loc_67ED
.text:00000000000067DC ; ---------------------------------------------------------------------------
.text:00000000000067DE                 align 20h
.text:00000000000067E0
.text:00000000000067E0 loc_67E0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000067E0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000067E0                 add     rdx, 1
.text:00000000000067E4                 cmp     r8, rdx
.text:00000000000067E7                 jz      loc_6629
.text:00000000000067ED
.text:00000000000067ED loc_67ED:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000067ED                 movzx   ecx, byte ptr [rdx]
.text:00000000000067F0                 sub     ecx, 5Bh ; '['
.text:00000000000067F3                 cmp     cl, 21h ; '!'
.text:00000000000067F6                 ja      short loc_67E0
.text:00000000000067F8                 mov     esi, 1
.text:00000000000067FD                 shl     rsi, cl
.text:0000000000006800                 mov     rcx, rsi
.text:0000000000006803                 mov     rsi, 20000002Bh
.text:000000000000680D                 test    rcx, rsi
.text:0000000000006810                 jz      short loc_67E0
.text:0000000000006812                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006817                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000681C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000006821                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006829
.text:0000000000006829 loc_6829:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000006829                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000006829                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000682E                 jz      short loc_6840
.text:0000000000006830                 test    al, al
.text:0000000000006832                 mov     eax, 4
.text:0000000000006837                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000683C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000006840
.text:0000000000006840 loc_6840:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000006840                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000006840                 sub     rsp, 8
.text:0000000000006844                 mov     rcx, rbp
.text:0000000000006847                 mov     rsi, r13
.text:000000000000684A                 push    [rsp+0F0h+var_88]
.text:000000000000684E                 push    [rsp+0F8h+var_80]
.text:0000000000006852                 mov     rdi, r14
.text:0000000000006855                 push    0
.text:0000000000006857                 mov     r9d, [rsp+108h+var_70]
.text:000000000000685F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000006864                 mov     rdx, [rsp+108h+s]
.text:0000000000006869                 and     r9d, 0FFFFFFFDh
.text:000000000000686D                 call    quotearg_buffer_restyled
.text:0000000000006872                 add     rsp, 20h
.text:0000000000006876                 mov     r15, rax
.text:0000000000006879
.text:0000000000006879 loc_6879:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000006879                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000006879                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000006881                 xor     rbx, fs:28h
.text:000000000000688A                 mov     rax, r15
.text:000000000000688D                 jnz     loc_6E93
.text:0000000000006893                 add     rsp, 0B8h
.text:000000000000689A                 pop     rbx
.text:000000000000689B                 pop     rbp
.text:000000000000689C                 pop     r12
.text:000000000000689E                 pop     r13
.text:00000000000068A0                 pop     r14
.text:00000000000068A2                 pop     r15
.text:00000000000068A4                 retn
.text:00000000000068A4 ; ---------------------------------------------------------------------------
.text:00000000000068A5                 align 8
.text:00000000000068A8
.text:00000000000068A8 loc_68A8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000068A8                 mov     rbp, r11
.text:00000000000068AB                 jmp     loc_6829
.text:00000000000068B0 ; ---------------------------------------------------------------------------
.text:00000000000068B0
.text:00000000000068B0 loc_68B0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000068B0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000068B0                 cmp     r13, r15
.text:00000000000068B3                 jbe     short loc_68BA
.text:00000000000068B5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000068BA
.text:00000000000068BA loc_68BA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000068BA                 lea     rax, [r15+1]
.text:00000000000068BE                 cmp     r13, rax
.text:00000000000068C1                 jbe     short loc_68C9
.text:00000000000068C3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000068C9
.text:00000000000068C9 loc_68C9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000068C9                 lea     rax, [r15+2]
.text:00000000000068CD                 cmp     r13, rax
.text:00000000000068D0                 jbe     loc_6EC2
.text:00000000000068D6                 mov     rdx, r13
.text:00000000000068D9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000068DF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000068E4                 jmp     loc_64C2
.text:00000000000068E9 ; ---------------------------------------------------------------------------
.text:00000000000068E9
.text:00000000000068E9 loc_68E9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000068E9                 mov     eax, r12d
.text:00000000000068EC                 mov     ebx, 30h ; '0'
.text:00000000000068F1                 xor     r12d, r12d
.text:00000000000068F4                 jmp     loc_5EF9
.text:00000000000068F9 ; ---------------------------------------------------------------------------
.text:00000000000068F9
.text:00000000000068F9 loc_68F9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000068F9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000068FF                 jmp     loc_62C9
.text:0000000000006904 ; ---------------------------------------------------------------------------
.text:0000000000006904
.text:0000000000006904 loc_6904:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006904                                         ; DATA XREF: .rodata:jpt_5D31↓o
.text:0000000000006904                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000006906                 jnz     loc_5D33        ; jumptable 00000000000121F1 case 1
.text:000000000000690C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006911
.text:0000000000006911 loc_6911:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000006911                 test    r13, r13
.text:0000000000006914                 jnz     loc_6EAA
.text:000000000000691A                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000006921                 mov     [rsp+0E8h+var_98], 0
.text:000000000000692A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000692F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006934                 xor     r12d, r12d
.text:0000000000006937                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000693C                 mov     [rsp+0E8h+n], 1
.text:0000000000006945                 mov     [rsp+0E8h+s2], rax
.text:000000000000694A                 mov     r15d, 1
.text:0000000000006950                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006958                 jmp     loc_5D73
.text:0000000000006958 ; ---------------------------------------------------------------------------
.text:000000000000695D                 align 20h
.text:0000000000006960
.text:0000000000006960 loc_6960:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006960                                         ; DATA XREF: .rodata:jpt_5D31↓o
.text:0000000000006960                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000006962                 jnz     loc_6D5D
.text:0000000000006968                 test    r13, r13
.text:000000000000696B                 jz      loc_6B96
.text:0000000000006971                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000006975                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000697A                 xor     r12d, r12d
.text:000000000000697D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006982                 mov     [rsp+0E8h+var_98], 0
.text:000000000000698B
.text:000000000000698B loc_698B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000698B                 lea     rax, unk_C893
.text:0000000000006992                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006997                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000699C                 mov     [rsp+0E8h+n], 1
.text:00000000000069A5                 mov     r15d, 1
.text:00000000000069AB                 mov     [rsp+0E8h+s2], rax
.text:00000000000069B0                 jmp     loc_5D73
.text:00000000000069B5 ; ---------------------------------------------------------------------------
.text:00000000000069B5
.text:00000000000069B5 loc_69B5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000069B5                                         ; DATA XREF: .rodata:jpt_5D31↓o
.text:00000000000069B5                 lea     rax, unk_C893   ; jumptable 00000000000121F1 case 6
.text:00000000000069BC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000069C1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000069C6                 xor     r12d, r12d
.text:00000000000069C9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000069D2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000069D7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000069DC                 mov     [rsp+0E8h+n], 1
.text:00000000000069E5                 xor     r15d, r15d
.text:00000000000069E8                 mov     [rsp+0E8h+s2], rax
.text:00000000000069ED                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000069F5                 jmp     loc_5D73
.text:00000000000069FA ; ---------------------------------------------------------------------------
.text:00000000000069FA
.text:00000000000069FA loc_69FA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000069FA                                         ; DATA XREF: .rodata:jpt_5D31↓o
.text:00000000000069FA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000069FF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006A04                 xor     r12d, r12d
.text:0000000000006A07                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006A10                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006A15                 xor     r15d, r15d
.text:0000000000006A18                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006A1D                 mov     [rsp+0E8h+n], 0
.text:0000000000006A26                 mov     [rsp+0E8h+s2], 0
.text:0000000000006A2F                 jmp     loc_5D73
.text:0000000000006A34 ; ---------------------------------------------------------------------------
.text:0000000000006A34
.text:0000000000006A34 loc_6A34:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006A34                                         ; DATA XREF: .rodata:jpt_5D31↓o
.text:0000000000006A34                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000006A39                 jz      short loc_6A91
.text:0000000000006A3B                 lea     rsi, asc_C895   ; "`"
.text:0000000000006A42                 xor     edi, edi        ; domainname
.text:0000000000006A44                 mov     edx, 5          ; category
.text:0000000000006A49                 call    _dcgettext
.text:0000000000006A4E                 mov     rcx, rax
.text:0000000000006A51                 mov     [rsp+0E8h+var_80], rax
.text:0000000000006A56                 lea     rax, asc_C895   ; "`"
.text:0000000000006A5D                 cmp     rcx, rax
.text:0000000000006A60                 jz      loc_6DFE
.text:0000000000006A66
.text:0000000000006A66 loc_6A66:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000006A66                 lea     rsi, aInvalidSSArgum+19h ; msgid
.text:0000000000006A6D                 xor     edi, edi        ; domainname
.text:0000000000006A6F                 mov     edx, 5          ; category
.text:0000000000006A74                 call    _dcgettext
.text:0000000000006A79                 mov     rcx, rax
.text:0000000000006A7C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006A81                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000006A88                 cmp     rcx, rax
.text:0000000000006A8B                 jz      loc_6E14
.text:0000000000006A91
.text:0000000000006A91 loc_6A91:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000006A91                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000006A91                 xor     r15d, r15d
.text:0000000000006A94                 test    ebx, ebx
.text:0000000000006A96                 jz      loc_6C5D
.text:0000000000006A9C
.text:0000000000006A9C loc_6A9C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000006A9C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000006A9C                 test    ebx, ebx
.text:0000000000006A9E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000006AA3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000006AA8                 xor     r12d, r12d
.text:0000000000006AAB                 mov     rdi, rbx        ; s
.text:0000000000006AAE                 call    _strlen
.text:0000000000006AB3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000006AB8                 mov     [rsp+0E8h+n], rax
.text:0000000000006ABD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006AC2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006AC7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006AD0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006AD5                 jmp     loc_5D73
.text:0000000000006ADA ; ---------------------------------------------------------------------------
.text:0000000000006ADA
.text:0000000000006ADA loc_6ADA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006ADA                                         ; DATA XREF: .rodata:jpt_5D31↓o
.text:0000000000006ADA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000006ADF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006AE4                 xor     r12d, r12d
.text:0000000000006AE7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006AF0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006AF5                 xor     r15d, r15d
.text:0000000000006AF8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006AFD                 mov     [rsp+0E8h+n], 0
.text:0000000000006B06                 mov     [rsp+0E8h+s2], 0
.text:0000000000006B0F                 jmp     loc_5D73
.text:0000000000006B14 ; ---------------------------------------------------------------------------
.text:0000000000006B14
.text:0000000000006B14 loc_6B14:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006B14                                         ; DATA XREF: .rodata:jpt_5D31↓o
.text:0000000000006B14                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000006B19                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006B1E                 xor     r12d, r12d
.text:0000000000006B21                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006B2A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006B2F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006B34                 jmp     loc_5D53
.text:0000000000006B39 ; ---------------------------------------------------------------------------
.text:0000000000006B39
.text:0000000000006B39 loc_6B39:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000006B39                 cmp     r13, r15
.text:0000000000006B3C                 jbe     short loc_6B43
.text:0000000000006B3E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000006B43
.text:0000000000006B43 loc_6B43:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000006B43                 lea     rax, [rcx+2]
.text:0000000000006B47                 cmp     r13, rax
.text:0000000000006B4A                 jbe     short loc_6B52
.text:0000000000006B4C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000006B52
.text:0000000000006B52 loc_6B52:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000006B52                 mov     eax, r12d
.text:0000000000006B55                 lea     r15, [rcx+3]
.text:0000000000006B59                 xor     r12d, r12d
.text:0000000000006B5C                 mov     ebx, 30h ; '0'
.text:0000000000006B61                 jmp     loc_5EC8
.text:0000000000006B61 ; ---------------------------------------------------------------------------
.text:0000000000006B66                 align 10h
.text:0000000000006B70
.text:0000000000006B70 loc_6B70:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000006B70                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006B75                 mov     rbp, r11
.text:0000000000006B78                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006B7C                 jmp     loc_6829
.text:0000000000006B81 ; ---------------------------------------------------------------------------
.text:0000000000006B81
.text:0000000000006B81 loc_6B81:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000006B81                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006B86                 xor     r12d, r12d
.text:0000000000006B89                 jmp     loc_6690
.text:0000000000006B8E ; ---------------------------------------------------------------------------
.text:0000000000006B8E
.text:0000000000006B8E loc_6B8E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000006B8E                 xor     r10d, r10d
.text:0000000000006B91                 jmp     loc_674D
.text:0000000000006B96 ; ---------------------------------------------------------------------------
.text:0000000000006B96
.text:0000000000006B96 loc_6B96:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000006B96                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006B9F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006BA4                 xor     r12d, r12d
.text:0000000000006BA7                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006BAC                 jmp     loc_698B
.text:0000000000006BB1 ; ---------------------------------------------------------------------------
.text:0000000000006BB1
.text:0000000000006BB1 loc_6BB1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000006BB1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006BB6                 mov     rsi, r14
.text:0000000000006BB9                 mov     rcx, r13
.text:0000000000006BBC                 mov     rax, rbx
.text:0000000000006BBF                 mov     rdi, rbx
.text:0000000000006BC2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000006BC8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006BCD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000006BD5                 cmp     rsi, r11
.text:0000000000006BD8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000006BDE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006BE6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006BEB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006BF0                 jnb     short loc_6C18
.text:0000000000006BF2                 cmp     byte ptr [rcx], 0
.text:0000000000006BF5                 jnz     short loc_6C07
.text:0000000000006BF7                 jmp     short loc_6C18
.text:0000000000006BF7 ; ---------------------------------------------------------------------------
.text:0000000000006BF9                 align 20h
.text:0000000000006C00
.text:0000000000006C00 loc_6C00:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000006C00                 cmp     byte ptr [r9+rax], 0
.text:0000000000006C05                 jz      short loc_6C15
.text:0000000000006C07
.text:0000000000006C07 loc_6C07:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000006C07                 add     rax, 1
.text:0000000000006C0B                 lea     rdx, [rbp+rax+0]
.text:0000000000006C10                 cmp     r11, rdx
.text:0000000000006C13                 ja      short loc_6C00
.text:0000000000006C15
.text:0000000000006C15 loc_6C15:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000006C15                 mov     rdi, rax
.text:0000000000006C18
.text:0000000000006C18 loc_6C18:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000006C18                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000006C18                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006C1D                 xor     r12d, r12d
.text:0000000000006C20                 jmp     loc_6686
.text:0000000000006C25 ; ---------------------------------------------------------------------------
.text:0000000000006C25
.text:0000000000006C25 loc_6C25:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000006C25                 mov     rdi, rbx
.text:0000000000006C28                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000006C2E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006C33                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000006C39                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006C41                 xor     r12d, r12d
.text:0000000000006C44                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006C49                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006C4E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006C53                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006C58                 jmp     loc_6686
.text:0000000000006C5D ; ---------------------------------------------------------------------------
.text:0000000000006C5D
.text:0000000000006C5D loc_6C5D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000006C5D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000006C62                 movzx   eax, byte ptr [rdx]
.text:0000000000006C65                 test    al, al
.text:0000000000006C67                 jz      loc_6A9C
.text:0000000000006C6D                 nop     dword ptr [rax]
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000006C70                 cmp     r13, r15
.text:0000000000006C73                 jbe     short loc_6C79
.text:0000000000006C75                 mov     [r14+r15], al
.text:0000000000006C79
.text:0000000000006C79 loc_6C79:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000006C79                 add     r15, 1
.text:0000000000006C7D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000006C82                 test    al, al
.text:0000000000006C84                 jnz     short loc_6C70
.text:0000000000006C86                 jmp     loc_6A9C
.text:0000000000006C8B ; ---------------------------------------------------------------------------
.text:0000000000006C8B
.text:0000000000006C8B loc_6C8B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000006C8B                 mov     eax, edx
.text:0000000000006C8D                 jmp     loc_61E7
.text:0000000000006C92 ; ---------------------------------------------------------------------------
.text:0000000000006C92
.text:0000000000006C92 loc_6C92:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000006C92                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000006C96                 cmp     bl, 3Eh ; '>'
.text:0000000000006C99                 ja      loc_6510
.text:0000000000006C9F                 mov     rax, 7000A38200000000h
.text:0000000000006CA9                 bt      rax, rbx
.text:0000000000006CAD                 jnb     loc_6510
.text:0000000000006CB3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006CB8                 jnz     loc_6EA2
.text:0000000000006CBE                 cmp     r13, r15
.text:0000000000006CC1                 jbe     short loc_6CC8
.text:0000000000006CC3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000006CC8
.text:0000000000006CC8 loc_6CC8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000006CC8                 lea     rax, [r15+1]
.text:0000000000006CCC                 cmp     r13, rax
.text:0000000000006CCF                 jbe     short loc_6CD7
.text:0000000000006CD1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000006CD7
.text:0000000000006CD7 loc_6CD7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000006CD7                 lea     rax, [r15+2]
.text:0000000000006CDB                 cmp     r13, rax
.text:0000000000006CDE                 jbe     short loc_6CE6
.text:0000000000006CE0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000006CE6
.text:0000000000006CE6 loc_6CE6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000006CE6                 lea     rax, [r15+3]
.text:0000000000006CEA                 cmp     r13, rax
.text:0000000000006CED                 jbe     short loc_6CF5
.text:0000000000006CEF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000006CF5
.text:0000000000006CF5 loc_6CF5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000006CF5                 add     r15, 4
.text:0000000000006CF9                 xor     edx, edx
.text:0000000000006CFB                 xor     r12d, r12d
.text:0000000000006CFE                 xor     eax, eax
.text:0000000000006D00                 mov     rbp, rcx
.text:0000000000006D03                 jmp     loc_5EC8
.text:0000000000006D08 ; ---------------------------------------------------------------------------
.text:0000000000006D08
.text:0000000000006D08 loc_6D08:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006D08                                         ; DATA XREF: .rodata:jpt_5D31↓o
.text:0000000000006D08                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000006D0A                 jz      loc_6E98
.text:0000000000006D10                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000006D17                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006D1C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006D21                 xor     r12d, r12d
.text:0000000000006D24                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006D2D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006D32                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006D37                 mov     [rsp+0E8h+n], 1
.text:0000000000006D40                 xor     r15d, r15d
.text:0000000000006D43                 mov     [rsp+0E8h+s2], rax
.text:0000000000006D48                 jmp     loc_5D73
.text:0000000000006D48 ; ---------------------------------------------------------------------------
.text:0000000000006D4D                 align 10h
.text:0000000000006D50
.text:0000000000006D50 loc_6D50:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000006D50                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000006D50                 mov     rbp, r11
.text:0000000000006D53                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000006D58                 jmp     loc_6829
.text:0000000000006D5D ; ---------------------------------------------------------------------------
.text:0000000000006D5D
.text:0000000000006D5D loc_6D5D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000006D5D                 lea     rax, unk_C893
.text:0000000000006D64                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006D69                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006D6E                 xor     r12d, r12d
.text:0000000000006D71                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006D7A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006D7F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006D84                 mov     [rsp+0E8h+n], 1
.text:0000000000006D8D                 xor     r15d, r15d
.text:0000000000006D90                 mov     [rsp+0E8h+s2], rax
.text:0000000000006D95                 jmp     loc_5D73
.text:0000000000006D9A ; ---------------------------------------------------------------------------
.text:0000000000006D9A
.text:0000000000006D9A loc_6D9A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000006D9A                 mov     eax, edx
.text:0000000000006D9C
.text:0000000000006D9C loc_6D9C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000006D9C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000006D9C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000006DA1                 test    rbx, rbx
.text:0000000000006DA4                 jz      short loc_6DD2
.text:0000000000006DA6                 test    al, al
.text:0000000000006DA8                 jz      short loc_6DD2
.text:0000000000006DAA                 movzx   ecx, byte ptr [rbx]
.text:0000000000006DAD                 mov     rax, rbx
.text:0000000000006DB0                 test    cl, cl
.text:0000000000006DB2                 jz      short loc_6DD2
.text:0000000000006DB4                 mov     rdx, r15
.text:0000000000006DB7                 sub     rax, r15
.text:0000000000006DBA
.text:0000000000006DBA loc_6DBA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000006DBA                 cmp     r13, rdx
.text:0000000000006DBD                 jbe     short loc_6DC3
.text:0000000000006DBF                 mov     [r14+rdx], cl
.text:0000000000006DC3
.text:0000000000006DC3 loc_6DC3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000006DC3                 add     rdx, 1
.text:0000000000006DC7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000006DCB                 test    cl, cl
.text:0000000000006DCD                 jnz     short loc_6DBA
.text:0000000000006DCF                 mov     r15, rdx
.text:0000000000006DD2
.text:0000000000006DD2 loc_6DD2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000006DD2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000006DD2                 cmp     r13, r15
.text:0000000000006DD5                 jbe     loc_6879
.text:0000000000006DDB                 mov     byte ptr [r14+r15], 0
.text:0000000000006DE0                 jmp     loc_6879
.text:0000000000006DE5 ; ---------------------------------------------------------------------------
.text:0000000000006DE5
.text:0000000000006DE5 loc_6DE5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000006DE5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006DEA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006DEF                 mov     rbp, r11
.text:0000000000006DF2                 setz    al
.text:0000000000006DF5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006DF9                 jmp     loc_6829
.text:0000000000006DFE ; ---------------------------------------------------------------------------
.text:0000000000006DFE
.text:0000000000006DFE loc_6DFE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000006DFE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006E02                 mov     rdi, rcx
.text:0000000000006E05                 call    gettext_quote
.text:0000000000006E0A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000006E0F                 jmp     loc_6A66
.text:0000000000006E14 ; ---------------------------------------------------------------------------
.text:0000000000006E14
.text:0000000000006E14 loc_6E14:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000006E14                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006E18                 mov     rdi, rcx
.text:0000000000006E1B                 call    gettext_quote
.text:0000000000006E20                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006E25                 jmp     loc_6A91
.text:0000000000006E2A ; ---------------------------------------------------------------------------
.text:0000000000006E2A
.text:0000000000006E2A loc_6E2A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000006E2A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006E2F                 mov     rbp, r11
.text:0000000000006E32                 mov     eax, edx
.text:0000000000006E34                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006E38                 jmp     loc_6829
.text:0000000000006E3D ; ---------------------------------------------------------------------------
.text:0000000000006E3D
.text:0000000000006E3D loc_6E3D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000006E3D                 sub     rsp, 8
.text:0000000000006E41                 mov     r8d, 5
.text:0000000000006E47                 mov     rcx, r11
.text:0000000000006E4A                 push    [rsp+0F0h+var_88]
.text:0000000000006E4E                 push    [rsp+0F8h+var_80]
.text:0000000000006E52                 mov     rdi, r14
.text:0000000000006E55                 push    [rsp+100h+var_C8]
.text:0000000000006E59                 mov     r9d, [rsp+108h+var_70]
.text:0000000000006E61                 mov     rdx, [rsp+108h+s]
.text:0000000000006E66                 mov     rsi, [rsp+108h+var_98]
.text:0000000000006E6B                 call    quotearg_buffer_restyled
.text:0000000000006E70                 add     rsp, 20h
.text:0000000000006E74                 mov     r15, rax
.text:0000000000006E77                 jmp     loc_6879
.text:0000000000006E7C ; ---------------------------------------------------------------------------
.text:0000000000006E7C
.text:0000000000006E7C loc_6E7C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000006E7C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000006E81                 jmp     loc_6D9C
.text:0000000000006E86 ; ---------------------------------------------------------------------------
.text:0000000000006E86
.text:0000000000006E86 loc_6E86:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000006E86                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006E8E                 jmp     loc_6829
.text:0000000000006E93 ; ---------------------------------------------------------------------------
.text:0000000000006E93
.text:0000000000006E93 loc_6E93:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000006E93                 call    ___stack_chk_fail
.text:0000000000006E98 ; ---------------------------------------------------------------------------
.text:0000000000006E98
.text:0000000000006E98 loc_6E98:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000006E98                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006E9D                 jmp     loc_6911
.text:0000000000006EA2 ; ---------------------------------------------------------------------------
.text:0000000000006EA2
.text:0000000000006EA2 loc_6EA2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000006EA2                 mov     rbp, r11
.text:0000000000006EA5                 jmp     loc_6840
.text:0000000000006EAA ; ---------------------------------------------------------------------------
.text:0000000000006EAA
.text:0000000000006EAA loc_6EAA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000006EAA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006EAF                 xor     eax, eax
.text:0000000000006EB1                 xor     r12d, r12d
.text:0000000000006EB4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006EBD                 jmp     loc_6464
.text:0000000000006EC2 ; ---------------------------------------------------------------------------
.text:0000000000006EC2
.text:0000000000006EC2 loc_6EC2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000006EC2                 mov     rdx, r13
.text:0000000000006EC5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000006ECA                 jmp     loc_64C2
.text:0000000000006ECF ; ---------------------------------------------------------------------------
.text:0000000000006ECF
.text:0000000000006ECF def_5D31:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000006ECF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000006ECF ; } // starts at 5CA0
.text:0000000000006ECF quotearg_buffer_restyled endp
.text:0000000000006ECF
.text:0000000000006ECF ; ---------------------------------------------------------------------------
.text:0000000000006ED4                 align 20h
.text:0000000000006EE0
.text:0000000000006EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EE0
.text:0000000000006EE0
.text:0000000000006EE0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000006EE0                                         ; quotearg_n_mem+7↓j ...
.text:0000000000006EE0
.text:0000000000006EE0 var_50          = qword ptr -50h
.text:0000000000006EE0 var_48          = qword ptr -48h
.text:0000000000006EE0 var_40          = dword ptr -40h
.text:0000000000006EE0 var_3C          = dword ptr -3Ch
.text:0000000000006EE0
.text:0000000000006EE0 ; __unwind {
.text:0000000000006EE0                 push    r15
.text:0000000000006EE2                 push    r14
.text:0000000000006EE4                 movsxd  r15, edi
.text:0000000000006EE7                 push    r13
.text:0000000000006EE9                 push    r12
.text:0000000000006EEB                 mov     r14, rdx
.text:0000000000006EEE                 push    rbp
.text:0000000000006EEF                 push    rbx
.text:0000000000006EF0                 mov     rbp, rcx
.text:0000000000006EF3                 sub     rsp, 28h
.text:0000000000006EF7                 mov     [rsp+58h+var_50], rsi
.text:0000000000006EFC                 call    ___errno_location
.text:0000000000006F01                 mov     r13, rax
.text:0000000000006F04                 mov     eax, [rax]
.text:0000000000006F06                 test    r15d, r15d
.text:0000000000006F09                 mov     rbx, cs:slotvec
.text:0000000000006F10                 mov     [rsp+58h+var_40], eax
.text:0000000000006F14                 js      loc_7081
.text:0000000000006F1A                 cmp     cs:nslots, r15d
.text:0000000000006F21                 jg      short loc_6F85
.text:0000000000006F23                 cmp     r15d, 7FFFFFFFh
.text:0000000000006F2A                 jz      loc_7086
.text:0000000000006F30                 lea     r12d, [r15+1]
.text:0000000000006F34                 lea     rax, slotvec0
.text:0000000000006F3B                 movsxd  rsi, r12d
.text:0000000000006F3E                 shl     rsi, 4
.text:0000000000006F42                 cmp     rbx, rax
.text:0000000000006F45                 jz      loc_7060
.text:0000000000006F4B                 mov     rdi, rbx
.text:0000000000006F4E                 call    xrealloc
.text:0000000000006F53                 mov     rbx, rax
.text:0000000000006F56                 mov     cs:slotvec, rax
.text:0000000000006F5D
.text:0000000000006F5D loc_6F5D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000006F5D                 movsxd  rdi, cs:nslots
.text:0000000000006F64                 mov     edx, r12d
.text:0000000000006F67                 xor     esi, esi        ; c
.text:0000000000006F69                 sub     edx, edi
.text:0000000000006F6B                 shl     rdi, 4
.text:0000000000006F6F                 movsxd  rdx, edx
.text:0000000000006F72                 add     rdi, rbx        ; s
.text:0000000000006F75                 shl     rdx, 4          ; n
.text:0000000000006F79                 call    _memset
.text:0000000000006F7E                 mov     cs:nslots, r12d
.text:0000000000006F85
.text:0000000000006F85 loc_6F85:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000006F85                 mov     eax, [rbp+4]
.text:0000000000006F88                 shl     r15, 4
.text:0000000000006F8C                 sub     rsp, 8
.text:0000000000006F90                 add     rbx, r15
.text:0000000000006F93                 lea     r15, [rbp+8]
.text:0000000000006F97                 mov     r8d, [rbp+0]
.text:0000000000006F9B                 mov     r11, [rbx]
.text:0000000000006F9E                 mov     r12, [rbx+8]
.text:0000000000006FA2                 mov     rcx, r14
.text:0000000000006FA5                 or      eax, 1
.text:0000000000006FA8                 mov     [rsp+60h+var_3C], eax
.text:0000000000006FAC                 push    qword ptr [rbp+30h]
.text:0000000000006FAF                 mov     r9d, eax
.text:0000000000006FB2                 push    qword ptr [rbp+28h]
.text:0000000000006FB5                 push    r15
.text:0000000000006FB7                 mov     rsi, r11
.text:0000000000006FBA                 mov     rdx, [rsp+78h+var_50]
.text:0000000000006FBF                 mov     rdi, r12
.text:0000000000006FC2                 mov     [rsp+78h+var_48], r11
.text:0000000000006FC7                 call    quotearg_buffer_restyled
.text:0000000000006FCC                 add     rsp, 20h
.text:0000000000006FD0                 mov     r11, [rsp+58h+var_48]
.text:0000000000006FD5                 cmp     r11, rax
.text:0000000000006FD8                 ja      short loc_7041
.text:0000000000006FDA                 lea     rsi, [rax+1]
.text:0000000000006FDE                 lea     rax, slot0
.text:0000000000006FE5                 cmp     r12, rax
.text:0000000000006FE8                 mov     [rbx], rsi
.text:0000000000006FEB                 jz      short loc_6FFF
.text:0000000000006FED                 mov     rdi, r12        ; ptr
.text:0000000000006FF0                 mov     [rsp+58h+var_48], rsi
.text:0000000000006FF5                 call    _free
.text:0000000000006FFA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000006FFF
.text:0000000000006FFF loc_6FFF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000006FFF                 mov     rdi, rsi
.text:0000000000007002                 mov     [rsp+58h+var_48], rsi
.text:0000000000007007                 call    xmalloc
.text:000000000000700C                 sub     rsp, 8
.text:0000000000007010                 mov     [rbx+8], rax
.text:0000000000007014                 mov     r8d, [rbp+0]
.text:0000000000007018                 push    qword ptr [rbp+30h]
.text:000000000000701B                 push    qword ptr [rbp+28h]
.text:000000000000701E                 mov     rcx, r14
.text:0000000000007021                 push    r15
.text:0000000000007023                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000007028                 mov     rdi, rax
.text:000000000000702B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000007030                 mov     rsi, [rsp+78h+var_48]
.text:0000000000007035                 mov     r12, rax
.text:0000000000007038                 call    quotearg_buffer_restyled
.text:000000000000703D                 add     rsp, 20h
.text:0000000000007041
.text:0000000000007041 loc_7041:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000007041                 mov     eax, [rsp+58h+var_40]
.text:0000000000007045                 mov     [r13+0], eax
.text:0000000000007049                 add     rsp, 28h
.text:000000000000704D                 mov     rax, r12
.text:0000000000007050                 pop     rbx
.text:0000000000007051                 pop     rbp
.text:0000000000007052                 pop     r12
.text:0000000000007054                 pop     r13
.text:0000000000007056                 pop     r14
.text:0000000000007058                 pop     r15
.text:000000000000705A                 retn
.text:000000000000705A ; ---------------------------------------------------------------------------
.text:000000000000705B                 align 20h
.text:0000000000007060
.text:0000000000007060 loc_7060:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000007060                 xor     edi, edi
.text:0000000000007062                 call    xrealloc
.text:0000000000007067                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000706F                 mov     rbx, rax
.text:0000000000007072                 mov     cs:slotvec, rax
.text:0000000000007079                 movups  xmmword ptr [rax], xmm0
.text:000000000000707C                 jmp     loc_6F5D
.text:0000000000007081 ; ---------------------------------------------------------------------------
.text:0000000000007081
.text:0000000000007081 loc_7081:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000007081                 call    _abort
.text:0000000000007086 ; ---------------------------------------------------------------------------
.text:0000000000007086
.text:0000000000007086 loc_7086:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000007086                 call    xalloc_die
.text:0000000000007086 ; } // starts at 6EE0
.text:0000000000007086 quotearg_n_options endp
.text:0000000000007086
.text:0000000000007086 ; ---------------------------------------------------------------------------
.text:000000000000708B                 align 10h
.text:0000000000007090
.text:0000000000007090 ; =============== S U B R O U T I N E =======================================
.text:0000000000007090
.text:0000000000007090 ; Attributes: info_from_lumina
.text:0000000000007090
.text:0000000000007090 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000007090                 public clone_quoting_options
.text:0000000000007090 clone_quoting_options proc near
.text:0000000000007090 ; __unwind {
.text:0000000000007090                 push    r12
.text:0000000000007092                 push    rbp
.text:0000000000007093                 push    rbx
.text:0000000000007094                 mov     rbx, rdi
.text:0000000000007097                 call    ___errno_location
.text:000000000000709C                 mov     r12d, [rax]
.text:000000000000709F                 mov     rbp, rax
.text:00000000000070A2                 lea     rax, default_quoting_options
.text:00000000000070A9                 test    rbx, rbx
.text:00000000000070AC                 mov     esi, 38h ; '8'  ; n
.text:00000000000070B1                 cmovz   rbx, rax
.text:00000000000070B5                 mov     rdi, rbx        ; src
.text:00000000000070B8                 call    xmemdup
.text:00000000000070BD                 mov     [rbp+0], r12d
.text:00000000000070C1                 pop     rbx
.text:00000000000070C2                 pop     rbp
.text:00000000000070C3                 pop     r12
.text:00000000000070C5                 retn
.text:00000000000070C5 ; } // starts at 7090
.text:00000000000070C5 clone_quoting_options endp
.text:00000000000070C5
.text:00000000000070C5 ; ---------------------------------------------------------------------------
.text:00000000000070C6                 align 10h
.text:00000000000070D0
.text:00000000000070D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070D0
.text:00000000000070D0
.text:00000000000070D0                 public get_quoting_style
.text:00000000000070D0 get_quoting_style proc near
.text:00000000000070D0 ; __unwind {
.text:00000000000070D0                 lea     rax, default_quoting_options
.text:00000000000070D7                 test    rdi, rdi
.text:00000000000070DA                 cmovz   rdi, rax
.text:00000000000070DE                 mov     eax, [rdi]
.text:00000000000070E0                 retn
.text:00000000000070E0 ; } // starts at 70D0
.text:00000000000070E0 get_quoting_style endp
.text:00000000000070E0
.text:00000000000070E0 ; ---------------------------------------------------------------------------
.text:00000000000070E1                 align 10h
.text:00000000000070F0
.text:00000000000070F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070F0
.text:00000000000070F0
.text:00000000000070F0                 public set_quoting_style
.text:00000000000070F0 set_quoting_style proc near
.text:00000000000070F0 ; __unwind {
.text:00000000000070F0                 lea     rax, default_quoting_options
.text:00000000000070F7                 test    rdi, rdi
.text:00000000000070FA                 cmovz   rdi, rax
.text:00000000000070FE                 mov     [rdi], esi
.text:0000000000007100                 retn
.text:0000000000007100 ; } // starts at 70F0
.text:0000000000007100 set_quoting_style endp
.text:0000000000007100
.text:0000000000007100 ; ---------------------------------------------------------------------------
.text:0000000000007101                 align 10h
.text:0000000000007110
.text:0000000000007110 ; =============== S U B R O U T I N E =======================================
.text:0000000000007110
.text:0000000000007110 ; Attributes: info_from_lumina
.text:0000000000007110
.text:0000000000007110 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000007110                 public set_char_quoting
.text:0000000000007110 set_char_quoting proc near
.text:0000000000007110 ; __unwind {
.text:0000000000007110                 lea     rax, default_quoting_options
.text:0000000000007117                 test    rdi, rdi
.text:000000000000711A                 mov     ecx, esi
.text:000000000000711C                 cmovz   rdi, rax
.text:0000000000007120                 mov     eax, esi
.text:0000000000007122                 and     ecx, 1Fh
.text:0000000000007125                 shr     al, 5
.text:0000000000007128                 movzx   eax, al
.text:000000000000712B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000007130                 mov     esi, [rdi]
.text:0000000000007132                 mov     eax, esi
.text:0000000000007134                 shr     eax, cl
.text:0000000000007136                 xor     edx, eax
.text:0000000000007138                 and     eax, 1
.text:000000000000713B                 and     edx, 1
.text:000000000000713E                 shl     edx, cl
.text:0000000000007140                 xor     edx, esi
.text:0000000000007142                 mov     [rdi], edx
.text:0000000000007144                 retn
.text:0000000000007144 ; } // starts at 7110
.text:0000000000007144 set_char_quoting endp
.text:0000000000007144
.text:0000000000007144 ; ---------------------------------------------------------------------------
.text:0000000000007145                 align 10h
.text:0000000000007150
.text:0000000000007150 ; =============== S U B R O U T I N E =======================================
.text:0000000000007150
.text:0000000000007150
.text:0000000000007150                 public set_quoting_flags
.text:0000000000007150 set_quoting_flags proc near
.text:0000000000007150 ; __unwind {
.text:0000000000007150                 lea     rax, default_quoting_options
.text:0000000000007157                 test    rdi, rdi
.text:000000000000715A                 cmovz   rdi, rax
.text:000000000000715E                 mov     eax, [rdi+4]
.text:0000000000007161                 mov     [rdi+4], esi
.text:0000000000007164                 retn
.text:0000000000007164 ; } // starts at 7150
.text:0000000000007164 set_quoting_flags endp
.text:0000000000007164
.text:0000000000007164 ; ---------------------------------------------------------------------------
.text:0000000000007165                 align 10h
.text:0000000000007170
.text:0000000000007170 ; =============== S U B R O U T I N E =======================================
.text:0000000000007170
.text:0000000000007170 ; Attributes: info_from_lumina
.text:0000000000007170
.text:0000000000007170 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000007170                 public set_custom_quoting
.text:0000000000007170 set_custom_quoting proc near
.text:0000000000007170 ; __unwind {
.text:0000000000007170                 lea     rax, default_quoting_options
.text:0000000000007177                 test    rdi, rdi
.text:000000000000717A                 cmovz   rdi, rax
.text:000000000000717E                 test    rsi, rsi
.text:0000000000007181                 mov     dword ptr [rdi], 0Ah
.text:0000000000007187                 jz      short loc_7197
.text:0000000000007189                 test    rdx, rdx
.text:000000000000718C                 jz      short loc_7197
.text:000000000000718E                 mov     [rdi+28h], rsi
.text:0000000000007192                 mov     [rdi+30h], rdx
.text:0000000000007196                 retn
.text:0000000000007197 ; ---------------------------------------------------------------------------
.text:0000000000007197
.text:0000000000007197 loc_7197:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000007197                                         ; set_custom_quoting+1C↑j
.text:0000000000007197                 sub     rsp, 8
.text:000000000000719B                 call    _abort
.text:000000000000719B ; } // starts at 7170
.text:000000000000719B set_custom_quoting endp
.text:000000000000719B
.text:00000000000071A0
.text:00000000000071A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071A0
.text:00000000000071A0 ; Attributes: info_from_lumina
.text:00000000000071A0
.text:00000000000071A0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000071A0                 public quotearg_buffer
.text:00000000000071A0 quotearg_buffer proc near
.text:00000000000071A0
.text:00000000000071A0 var_40          = qword ptr -40h
.text:00000000000071A0
.text:00000000000071A0 ; __unwind {
.text:00000000000071A0                 push    r15
.text:00000000000071A2                 push    r14
.text:00000000000071A4                 lea     rax, default_quoting_options
.text:00000000000071AB                 push    r13
.text:00000000000071AD                 push    r12
.text:00000000000071AF                 mov     r13, rdi
.text:00000000000071B2                 push    rbp
.text:00000000000071B3                 push    rbx
.text:00000000000071B4                 mov     rbx, r8
.text:00000000000071B7                 mov     r14, rsi
.text:00000000000071BA                 mov     r15, rdx
.text:00000000000071BD                 sub     rsp, 18h
.text:00000000000071C1                 test    r8, r8
.text:00000000000071C4                 cmovz   rbx, rax
.text:00000000000071C8                 mov     [rsp+48h+var_40], rcx
.text:00000000000071CD                 call    ___errno_location
.text:00000000000071D2                 mov     r12d, [rax]
.text:00000000000071D5                 mov     rbp, rax
.text:00000000000071D8                 lea     rax, [rbx+8]
.text:00000000000071DC                 sub     rsp, 8
.text:00000000000071E0                 mov     r9d, [rbx+4]
.text:00000000000071E4                 push    qword ptr [rbx+30h]
.text:00000000000071E7                 mov     r8d, [rbx]
.text:00000000000071EA                 push    qword ptr [rbx+28h]
.text:00000000000071ED                 mov     rdx, r15
.text:00000000000071F0                 push    rax
.text:00000000000071F1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000071F6                 mov     rsi, r14
.text:00000000000071F9                 mov     rdi, r13
.text:00000000000071FC                 call    quotearg_buffer_restyled
.text:0000000000007201                 mov     [rbp+0], r12d
.text:0000000000007205                 add     rsp, 38h
.text:0000000000007209                 pop     rbx
.text:000000000000720A                 pop     rbp
.text:000000000000720B                 pop     r12
.text:000000000000720D                 pop     r13
.text:000000000000720F                 pop     r14
.text:0000000000007211                 pop     r15
.text:0000000000007213                 retn
.text:0000000000007213 ; } // starts at 71A0
.text:0000000000007213 quotearg_buffer endp
.text:0000000000007213
.text:0000000000007213 ; ---------------------------------------------------------------------------
.text:0000000000007214                 align 20h
.text:0000000000007220
.text:0000000000007220 ; =============== S U B R O U T I N E =======================================
.text:0000000000007220
.text:0000000000007220 ; Attributes: info_from_lumina
.text:0000000000007220
.text:0000000000007220 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000007220                 public quotearg_alloc_mem
.text:0000000000007220 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000007220
.text:0000000000007220 var_5C          = dword ptr -5Ch
.text:0000000000007220 var_58          = qword ptr -58h
.text:0000000000007220 var_50          = qword ptr -50h
.text:0000000000007220 var_48          = qword ptr -48h
.text:0000000000007220 var_40          = qword ptr -40h
.text:0000000000007220
.text:0000000000007220 ; __unwind {
.text:0000000000007220                 push    r15
.text:0000000000007222                 push    r14
.text:0000000000007224                 lea     rax, default_quoting_options
.text:000000000000722B                 push    r13
.text:000000000000722D                 push    r12
.text:000000000000722F                 mov     r12, rdx
.text:0000000000007232                 push    rbp
.text:0000000000007233                 push    rbx
.text:0000000000007234                 mov     rbx, rcx
.text:0000000000007237                 mov     r14, rdi
.text:000000000000723A                 mov     r15, rsi
.text:000000000000723D                 sub     rsp, 38h
.text:0000000000007241                 test    rcx, rcx
.text:0000000000007244                 cmovz   rbx, rax
.text:0000000000007248                 xor     ebp, ebp
.text:000000000000724A                 call    ___errno_location
.text:000000000000724F                 test    r12, r12
.text:0000000000007252                 mov     r13, rax
.text:0000000000007255                 mov     eax, [rax]
.text:0000000000007257                 setz    bpl
.text:000000000000725B                 or      ebp, [rbx+4]
.text:000000000000725E                 lea     r10, [rbx+8]
.text:0000000000007262                 sub     rsp, 8
.text:0000000000007266                 mov     r8d, [rbx]
.text:0000000000007269                 mov     rcx, r15
.text:000000000000726C                 mov     [rsp+70h+var_5C], eax
.text:0000000000007270                 push    qword ptr [rbx+30h]
.text:0000000000007273                 mov     rdx, r14
.text:0000000000007276                 push    qword ptr [rbx+28h]
.text:0000000000007279                 push    r10
.text:000000000000727B                 xor     esi, esi
.text:000000000000727D                 mov     r9d, ebp
.text:0000000000007280                 xor     edi, edi
.text:0000000000007282                 mov     [rsp+88h+var_48], r10
.text:0000000000007287                 call    quotearg_buffer_restyled
.text:000000000000728C                 lea     rsi, [rax+1]
.text:0000000000007290                 mov     [rsp+88h+var_40], rax
.text:0000000000007295                 add     rsp, 20h
.text:0000000000007299                 mov     rdi, rsi
.text:000000000000729C                 mov     [rsp+68h+var_50], rsi
.text:00000000000072A1                 call    xmalloc
.text:00000000000072A6                 mov     [rsp+68h+var_58], rax
.text:00000000000072AB                 sub     rsp, 8
.text:00000000000072AF                 push    qword ptr [rbx+30h]
.text:00000000000072B2                 push    qword ptr [rbx+28h]
.text:00000000000072B5                 mov     r10, [rsp+80h+var_48]
.text:00000000000072BA                 mov     r9d, ebp
.text:00000000000072BD                 mov     r8d, [rbx]
.text:00000000000072C0                 mov     rcx, r15
.text:00000000000072C3                 mov     rdx, r14
.text:00000000000072C6                 mov     rdi, rax
.text:00000000000072C9                 push    r10
.text:00000000000072CB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000072D0                 call    quotearg_buffer_restyled
.text:00000000000072D5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000072D9                 add     rsp, 20h
.text:00000000000072DD                 test    r12, r12
.text:00000000000072E0                 mov     [r13+0], eax
.text:00000000000072E4                 jz      short loc_72EF
.text:00000000000072E6                 mov     r11, [rsp+68h+var_40]
.text:00000000000072EB                 mov     [r12], r11
.text:00000000000072EF
.text:00000000000072EF loc_72EF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000072EF                 mov     rax, [rsp+68h+var_58]
.text:00000000000072F4                 add     rsp, 38h
.text:00000000000072F8                 pop     rbx
.text:00000000000072F9                 pop     rbp
.text:00000000000072FA                 pop     r12
.text:00000000000072FC                 pop     r13
.text:00000000000072FE                 pop     r14
.text:0000000000007300                 pop     r15
.text:0000000000007302                 retn
.text:0000000000007302 ; } // starts at 7220
.text:0000000000007302 quotearg_alloc_mem endp
.text:0000000000007302
.text:0000000000007302 ; ---------------------------------------------------------------------------
.text:0000000000007303                 align 10h
.text:0000000000007310
.text:0000000000007310 ; =============== S U B R O U T I N E =======================================
.text:0000000000007310
.text:0000000000007310
.text:0000000000007310                 public quotearg_alloc
.text:0000000000007310 quotearg_alloc  proc near
.text:0000000000007310 ; __unwind {
.text:0000000000007310                 mov     rcx, rdx
.text:0000000000007313                 xor     edx, edx
.text:0000000000007315                 jmp     quotearg_alloc_mem
.text:0000000000007315 ; } // starts at 7310
.text:0000000000007315 quotearg_alloc  endp
.text:0000000000007315
.text:0000000000007315 ; ---------------------------------------------------------------------------
.text:000000000000731A                 align 20h
.text:0000000000007320
.text:0000000000007320 ; =============== S U B R O U T I N E =======================================
.text:0000000000007320
.text:0000000000007320 ; Attributes: info_from_lumina
.text:0000000000007320
.text:0000000000007320 ; void __cdecl quotearg_free()
.text:0000000000007320                 public quotearg_free
.text:0000000000007320 quotearg_free   proc near
.text:0000000000007320 ; __unwind {
.text:0000000000007320                 mov     eax, cs:nslots
.text:0000000000007326                 push    r12
.text:0000000000007328                 mov     r12, cs:slotvec
.text:000000000000732F                 push    rbp
.text:0000000000007330                 push    rbx
.text:0000000000007331                 cmp     eax, 1
.text:0000000000007334                 jle     short loc_7361
.text:0000000000007336                 sub     eax, 2
.text:0000000000007339                 lea     rbx, [r12+18h]
.text:000000000000733E                 shl     rax, 4
.text:0000000000007342                 lea     rbp, [r12+rax+28h]
.text:0000000000007347                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007350
.text:0000000000007350 loc_7350:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000007350                 mov     rdi, [rbx]      ; ptr
.text:0000000000007353                 add     rbx, 10h
.text:0000000000007357                 call    _free
.text:000000000000735C                 cmp     rbx, rbp
.text:000000000000735F                 jnz     short loc_7350
.text:0000000000007361
.text:0000000000007361 loc_7361:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000007361                 mov     rdi, [r12+8]    ; ptr
.text:0000000000007366                 lea     rbx, slot0
.text:000000000000736D                 cmp     rdi, rbx
.text:0000000000007370                 jz      short loc_7389
.text:0000000000007372                 call    _free
.text:0000000000007377                 mov     cs:slotvec0, 100h
.text:0000000000007382                 mov     cs:off_210098, rbx
.text:0000000000007389
.text:0000000000007389 loc_7389:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000007389                 lea     rbx, slotvec0
.text:0000000000007390                 cmp     r12, rbx
.text:0000000000007393                 jz      short loc_73A4
.text:0000000000007395                 mov     rdi, r12        ; ptr
.text:0000000000007398                 call    _free
.text:000000000000739D                 mov     cs:slotvec, rbx
.text:00000000000073A4
.text:00000000000073A4 loc_73A4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000073A4                 pop     rbx
.text:00000000000073A5                 mov     cs:nslots, 1
.text:00000000000073AF                 pop     rbp
.text:00000000000073B0                 pop     r12
.text:00000000000073B2                 retn
.text:00000000000073B2 ; } // starts at 7320
.text:00000000000073B2 quotearg_free   endp
.text:00000000000073B2
.text:00000000000073B2 ; ---------------------------------------------------------------------------
.text:00000000000073B3                 align 20h
.text:00000000000073C0
.text:00000000000073C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073C0
.text:00000000000073C0
.text:00000000000073C0                 public quotearg_n
.text:00000000000073C0 quotearg_n      proc near
.text:00000000000073C0 ; __unwind {
.text:00000000000073C0                 lea     rcx, default_quoting_options
.text:00000000000073C7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000073CE                 jmp     quotearg_n_options
.text:00000000000073CE ; } // starts at 73C0
.text:00000000000073CE quotearg_n      endp
.text:00000000000073CE
.text:00000000000073CE ; ---------------------------------------------------------------------------
.text:00000000000073D3                 align 20h
.text:00000000000073E0
.text:00000000000073E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073E0
.text:00000000000073E0
.text:00000000000073E0                 public quotearg_n_mem
.text:00000000000073E0 quotearg_n_mem  proc near
.text:00000000000073E0 ; __unwind {
.text:00000000000073E0                 lea     rcx, default_quoting_options
.text:00000000000073E7                 jmp     quotearg_n_options
.text:00000000000073E7 ; } // starts at 73E0
.text:00000000000073E7 quotearg_n_mem  endp
.text:00000000000073E7
.text:00000000000073E7 ; ---------------------------------------------------------------------------
.text:00000000000073EC                 align 10h
.text:00000000000073F0
.text:00000000000073F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073F0
.text:00000000000073F0
.text:00000000000073F0                 public quotearg
.text:00000000000073F0 quotearg        proc near
.text:00000000000073F0 ; __unwind {
.text:00000000000073F0                 lea     rcx, default_quoting_options
.text:00000000000073F7                 mov     rsi, rdi
.text:00000000000073FA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007401                 xor     edi, edi
.text:0000000000007403                 jmp     quotearg_n_options
.text:0000000000007403 ; } // starts at 73F0
.text:0000000000007403 quotearg        endp
.text:0000000000007403
.text:0000000000007403 ; ---------------------------------------------------------------------------
.text:0000000000007408                 align 10h
.text:0000000000007410
.text:0000000000007410 ; =============== S U B R O U T I N E =======================================
.text:0000000000007410
.text:0000000000007410
.text:0000000000007410                 public quotearg_mem
.text:0000000000007410 quotearg_mem    proc near
.text:0000000000007410 ; __unwind {
.text:0000000000007410                 lea     rcx, default_quoting_options
.text:0000000000007417                 mov     rdx, rsi
.text:000000000000741A                 mov     rsi, rdi
.text:000000000000741D                 xor     edi, edi
.text:000000000000741F                 jmp     quotearg_n_options
.text:000000000000741F ; } // starts at 7410
.text:000000000000741F quotearg_mem    endp
.text:000000000000741F
.text:000000000000741F ; ---------------------------------------------------------------------------
.text:0000000000007424                 align 10h
.text:0000000000007430
.text:0000000000007430 ; =============== S U B R O U T I N E =======================================
.text:0000000000007430
.text:0000000000007430 ; Attributes: info_from_lumina
.text:0000000000007430
.text:0000000000007430 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000007430                 public quotearg_n_style
.text:0000000000007430 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:0000000000007430                                         ; quotearg_style+7↓j
.text:0000000000007430
.text:0000000000007430 var_48          = dword ptr -48h
.text:0000000000007430 var_44          = qword ptr -44h
.text:0000000000007430 var_3C          = qword ptr -3Ch
.text:0000000000007430 var_34          = qword ptr -34h
.text:0000000000007430 var_2C          = qword ptr -2Ch
.text:0000000000007430 var_24          = qword ptr -24h
.text:0000000000007430 var_1C          = qword ptr -1Ch
.text:0000000000007430 var_14          = dword ptr -14h
.text:0000000000007430 var_10          = qword ptr -10h
.text:0000000000007430
.text:0000000000007430 ; __unwind {
.text:0000000000007430                 sub     rsp, 48h
.text:0000000000007434                 mov     rax, rdx
.text:0000000000007437                 mov     rdx, fs:28h
.text:0000000000007440                 mov     [rsp+48h+var_10], rdx
.text:0000000000007445                 xor     edx, edx
.text:0000000000007447                 cmp     esi, 0Ah
.text:000000000000744A                 jz      short loc_74B4
.text:000000000000744C                 mov     [rsp+48h+var_48], esi
.text:000000000000744F                 mov     rcx, rsp
.text:0000000000007452                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007459                 mov     rsi, rax
.text:000000000000745C                 mov     [rsp+48h+var_44], 0
.text:0000000000007465                 mov     [rsp+48h+var_3C], 0
.text:000000000000746E                 mov     [rsp+48h+var_34], 0
.text:0000000000007477                 mov     [rsp+48h+var_2C], 0
.text:0000000000007480                 mov     [rsp+48h+var_24], 0
.text:0000000000007489                 mov     [rsp+48h+var_1C], 0
.text:0000000000007492                 mov     [rsp+48h+var_14], 0
.text:000000000000749A                 call    quotearg_n_options
.text:000000000000749F                 mov     rcx, [rsp+48h+var_10]
.text:00000000000074A4                 xor     rcx, fs:28h
.text:00000000000074AD                 jnz     short loc_74B9
.text:00000000000074AF                 add     rsp, 48h
.text:00000000000074B3                 retn
.text:00000000000074B4 ; ---------------------------------------------------------------------------
.text:00000000000074B4
.text:00000000000074B4 loc_74B4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000074B4                 call    _abort
.text:00000000000074B9 ; ---------------------------------------------------------------------------
.text:00000000000074B9
.text:00000000000074B9 loc_74B9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000074B9                 call    ___stack_chk_fail
.text:00000000000074B9 ; } // starts at 7430
.text:00000000000074B9 quotearg_n_style endp
.text:00000000000074B9
.text:00000000000074B9 ; ---------------------------------------------------------------------------
.text:00000000000074BE                 align 20h
.text:00000000000074C0
.text:00000000000074C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074C0
.text:00000000000074C0 ; Attributes: info_from_lumina
.text:00000000000074C0
.text:00000000000074C0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000074C0                 public quotearg_n_style_mem
.text:00000000000074C0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000074C0
.text:00000000000074C0 var_48          = dword ptr -48h
.text:00000000000074C0 var_44          = qword ptr -44h
.text:00000000000074C0 var_3C          = qword ptr -3Ch
.text:00000000000074C0 var_34          = qword ptr -34h
.text:00000000000074C0 var_2C          = qword ptr -2Ch
.text:00000000000074C0 var_24          = qword ptr -24h
.text:00000000000074C0 var_1C          = qword ptr -1Ch
.text:00000000000074C0 var_14          = dword ptr -14h
.text:00000000000074C0 var_10          = qword ptr -10h
.text:00000000000074C0
.text:00000000000074C0 ; __unwind {
.text:00000000000074C0                 sub     rsp, 48h
.text:00000000000074C4                 mov     rax, rdx
.text:00000000000074C7                 mov     rdx, rcx
.text:00000000000074CA                 mov     rcx, fs:28h
.text:00000000000074D3                 mov     [rsp+48h+var_10], rcx
.text:00000000000074D8                 xor     ecx, ecx
.text:00000000000074DA                 cmp     esi, 0Ah
.text:00000000000074DD                 jz      short loc_7540
.text:00000000000074DF                 mov     [rsp+48h+var_48], esi
.text:00000000000074E2                 mov     rcx, rsp
.text:00000000000074E5                 mov     rsi, rax
.text:00000000000074E8                 mov     [rsp+48h+var_44], 0
.text:00000000000074F1                 mov     [rsp+48h+var_3C], 0
.text:00000000000074FA                 mov     [rsp+48h+var_34], 0
.text:0000000000007503                 mov     [rsp+48h+var_2C], 0
.text:000000000000750C                 mov     [rsp+48h+var_24], 0
.text:0000000000007515                 mov     [rsp+48h+var_1C], 0
.text:000000000000751E                 mov     [rsp+48h+var_14], 0
.text:0000000000007526                 call    quotearg_n_options
.text:000000000000752B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000007530                 xor     rdx, fs:28h
.text:0000000000007539                 jnz     short loc_7545
.text:000000000000753B                 add     rsp, 48h
.text:000000000000753F                 retn
.text:0000000000007540 ; ---------------------------------------------------------------------------
.text:0000000000007540
.text:0000000000007540 loc_7540:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000007540                 call    _abort
.text:0000000000007545 ; ---------------------------------------------------------------------------
.text:0000000000007545
.text:0000000000007545 loc_7545:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000007545                 call    ___stack_chk_fail
.text:0000000000007545 ; } // starts at 74C0
.text:0000000000007545 quotearg_n_style_mem endp
.text:0000000000007545
.text:0000000000007545 ; ---------------------------------------------------------------------------
.text:000000000000754A                 align 10h
.text:0000000000007550
.text:0000000000007550 ; =============== S U B R O U T I N E =======================================
.text:0000000000007550
.text:0000000000007550
.text:0000000000007550                 public quotearg_style
.text:0000000000007550 quotearg_style  proc near
.text:0000000000007550 ; __unwind {
.text:0000000000007550                 mov     rdx, rsi
.text:0000000000007553                 mov     esi, edi
.text:0000000000007555                 xor     edi, edi
.text:0000000000007557                 jmp     quotearg_n_style
.text:0000000000007557 ; } // starts at 7550
.text:0000000000007557 quotearg_style  endp
.text:0000000000007557
.text:0000000000007557 ; ---------------------------------------------------------------------------
.text:000000000000755C                 align 20h
.text:0000000000007560
.text:0000000000007560 ; =============== S U B R O U T I N E =======================================
.text:0000000000007560
.text:0000000000007560
.text:0000000000007560                 public quotearg_style_mem
.text:0000000000007560 quotearg_style_mem proc near
.text:0000000000007560 ; __unwind {
.text:0000000000007560                 mov     rcx, rdx
.text:0000000000007563                 mov     rdx, rsi
.text:0000000000007566                 mov     esi, edi
.text:0000000000007568                 xor     edi, edi
.text:000000000000756A                 jmp     quotearg_n_style_mem
.text:000000000000756A ; } // starts at 7560
.text:000000000000756A quotearg_style_mem endp
.text:000000000000756A
.text:000000000000756A ; ---------------------------------------------------------------------------
.text:000000000000756F                 align 10h
.text:0000000000007570
.text:0000000000007570 ; =============== S U B R O U T I N E =======================================
.text:0000000000007570
.text:0000000000007570 ; Attributes: info_from_lumina
.text:0000000000007570
.text:0000000000007570 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000007570                 public quotearg_char_mem
.text:0000000000007570 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000007570                                         ; quotearg_colon+C↓j ...
.text:0000000000007570
.text:0000000000007570 var_48          = xmmword ptr -48h
.text:0000000000007570 var_38          = xmmword ptr -38h
.text:0000000000007570 var_28          = xmmword ptr -28h
.text:0000000000007570 var_18          = qword ptr -18h
.text:0000000000007570 var_10          = qword ptr -10h
.text:0000000000007570
.text:0000000000007570 ; __unwind {
.text:0000000000007570                 sub     rsp, 48h
.text:0000000000007574                 mov     ecx, edx
.text:0000000000007576                 mov     rax, fs:28h
.text:000000000000757F                 mov     [rsp+48h+var_10], rax
.text:0000000000007584                 xor     eax, eax
.text:0000000000007586                 mov     rax, cs:qword_210370
.text:000000000000758D                 mov     r8, rsp
.text:0000000000007590                 and     ecx, 1Fh
.text:0000000000007593                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000759B                 mov     [rsp+48h+var_18], rax
.text:00000000000075A0                 mov     eax, edx
.text:00000000000075A2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000075A6                 shr     al, 5
.text:00000000000075A9                 movzx   eax, al
.text:00000000000075AC                 lea     r9, [r8+rax*4+8]
.text:00000000000075B1                 movdqa  xmm0, cs:xmmword_210350
.text:00000000000075B9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000075BE                 movdqa  xmm0, cs:xmmword_210360
.text:00000000000075C6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000075CB                 mov     edx, [r9]
.text:00000000000075CE                 mov     eax, edx
.text:00000000000075D0                 shr     eax, cl
.text:00000000000075D2                 not     eax
.text:00000000000075D4                 and     eax, 1
.text:00000000000075D7                 shl     eax, cl
.text:00000000000075D9                 mov     rcx, r8
.text:00000000000075DC                 xor     eax, edx
.text:00000000000075DE                 mov     rdx, rsi
.text:00000000000075E1                 mov     rsi, rdi
.text:00000000000075E4                 mov     [r9], eax
.text:00000000000075E7                 xor     edi, edi
.text:00000000000075E9                 call    quotearg_n_options
.text:00000000000075EE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000075F3                 xor     rsi, fs:28h
.text:00000000000075FC                 jnz     short loc_7603
.text:00000000000075FE                 add     rsp, 48h
.text:0000000000007602                 retn
.text:0000000000007603 ; ---------------------------------------------------------------------------
.text:0000000000007603
.text:0000000000007603 loc_7603:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000007603                 call    ___stack_chk_fail
.text:0000000000007603 ; } // starts at 7570
.text:0000000000007603 quotearg_char_mem endp
.text:0000000000007603
.text:0000000000007603 ; ---------------------------------------------------------------------------
.text:0000000000007608                 align 10h
.text:0000000000007610
.text:0000000000007610 ; =============== S U B R O U T I N E =======================================
.text:0000000000007610
.text:0000000000007610
.text:0000000000007610                 public quotearg_char
.text:0000000000007610 quotearg_char   proc near
.text:0000000000007610 ; __unwind {
.text:0000000000007610                 movsx   edx, sil
.text:0000000000007614                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000761B                 jmp     quotearg_char_mem
.text:000000000000761B ; } // starts at 7610
.text:000000000000761B quotearg_char   endp
.text:000000000000761B
.text:0000000000007620
.text:0000000000007620 ; =============== S U B R O U T I N E =======================================
.text:0000000000007620
.text:0000000000007620
.text:0000000000007620                 public quotearg_colon
.text:0000000000007620 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000007620 ; __unwind {
.text:0000000000007620                 mov     edx, 3Ah ; ':'
.text:0000000000007625                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000762C                 jmp     quotearg_char_mem
.text:000000000000762C ; } // starts at 7620
.text:000000000000762C quotearg_colon  endp
.text:000000000000762C
.text:000000000000762C ; ---------------------------------------------------------------------------
.text:0000000000007631                 align 20h
.text:0000000000007640
.text:0000000000007640 ; =============== S U B R O U T I N E =======================================
.text:0000000000007640
.text:0000000000007640
.text:0000000000007640                 public quotearg_colon_mem
.text:0000000000007640 quotearg_colon_mem proc near
.text:0000000000007640 ; __unwind {
.text:0000000000007640                 mov     edx, 3Ah ; ':'
.text:0000000000007645                 jmp     quotearg_char_mem
.text:0000000000007645 ; } // starts at 7640
.text:0000000000007645 quotearg_colon_mem endp
.text:0000000000007645
.text:0000000000007645 ; ---------------------------------------------------------------------------
.text:000000000000764A                 align 10h
.text:0000000000007650
.text:0000000000007650 ; =============== S U B R O U T I N E =======================================
.text:0000000000007650
.text:0000000000007650 ; Attributes: info_from_lumina
.text:0000000000007650
.text:0000000000007650 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000007650                 public quotearg_n_style_colon
.text:0000000000007650 quotearg_n_style_colon proc near        ; CODE XREF: check_and_close+9E↑p
.text:0000000000007650                                         ; check_and_close+126↑p ...
.text:0000000000007650
.text:0000000000007650 var_48          = dword ptr -48h
.text:0000000000007650 var_44          = qword ptr -44h
.text:0000000000007650 var_3C          = qword ptr -3Ch
.text:0000000000007650 var_34          = qword ptr -34h
.text:0000000000007650 var_2C          = qword ptr -2Ch
.text:0000000000007650 var_24          = qword ptr -24h
.text:0000000000007650 var_1C          = qword ptr -1Ch
.text:0000000000007650 var_14          = dword ptr -14h
.text:0000000000007650 var_10          = qword ptr -10h
.text:0000000000007650
.text:0000000000007650 ; __unwind {
.text:0000000000007650                 sub     rsp, 48h
.text:0000000000007654                 mov     rax, rdx
.text:0000000000007657                 mov     rdx, fs:28h
.text:0000000000007660                 mov     [rsp+48h+var_10], rdx
.text:0000000000007665                 xor     edx, edx
.text:0000000000007667                 cmp     esi, 0Ah
.text:000000000000766A                 jz      short loc_76D4
.text:000000000000766C                 mov     [rsp+48h+var_48], esi
.text:000000000000766F                 mov     rcx, rsp
.text:0000000000007672                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007679                 mov     rsi, rax
.text:000000000000767C                 mov     [rsp+48h+var_44], 0
.text:0000000000007685                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000768E                 mov     [rsp+48h+var_34], 0
.text:0000000000007697                 mov     [rsp+48h+var_2C], 0
.text:00000000000076A0                 mov     [rsp+48h+var_24], 0
.text:00000000000076A9                 mov     [rsp+48h+var_1C], 0
.text:00000000000076B2                 mov     [rsp+48h+var_14], 0
.text:00000000000076BA                 call    quotearg_n_options
.text:00000000000076BF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000076C4                 xor     rcx, fs:28h
.text:00000000000076CD                 jnz     short loc_76D9
.text:00000000000076CF                 add     rsp, 48h
.text:00000000000076D3                 retn
.text:00000000000076D4 ; ---------------------------------------------------------------------------
.text:00000000000076D4
.text:00000000000076D4 loc_76D4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000076D4                 call    _abort
.text:00000000000076D9 ; ---------------------------------------------------------------------------
.text:00000000000076D9
.text:00000000000076D9 loc_76D9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000076D9                 call    ___stack_chk_fail
.text:00000000000076D9 ; } // starts at 7650
.text:00000000000076D9 quotearg_n_style_colon endp
.text:00000000000076D9
.text:00000000000076D9 ; ---------------------------------------------------------------------------
.text:00000000000076DE                 align 20h
.text:00000000000076E0
.text:00000000000076E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076E0
.text:00000000000076E0 ; Attributes: info_from_lumina
.text:00000000000076E0
.text:00000000000076E0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000076E0                 public quotearg_n_custom_mem
.text:00000000000076E0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000076E0                                         ; quotearg_custom+12↓j ...
.text:00000000000076E0
.text:00000000000076E0 var_48          = xmmword ptr -48h
.text:00000000000076E0 var_38          = xmmword ptr -38h
.text:00000000000076E0 var_28          = xmmword ptr -28h
.text:00000000000076E0 var_18          = qword ptr -18h
.text:00000000000076E0 var_10          = qword ptr -10h
.text:00000000000076E0
.text:00000000000076E0 ; __unwind {
.text:00000000000076E0                 sub     rsp, 48h
.text:00000000000076E4                 mov     r9, rcx
.text:00000000000076E7                 mov     rcx, cs:qword_210370
.text:00000000000076EE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000076F6                 mov     rax, fs:28h
.text:00000000000076FF                 mov     [rsp+48h+var_10], rax
.text:0000000000007704                 xor     eax, eax
.text:0000000000007706                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000770A                 test    rsi, rsi
.text:000000000000770D                 mov     [rsp+48h+var_18], rcx
.text:0000000000007712                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000007719                 movdqa  xmm0, cs:xmmword_210350
.text:0000000000007721                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000007726                 movdqa  xmm0, cs:xmmword_210360
.text:000000000000772E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000007733                 jz      short loc_7767
.text:0000000000007735                 test    rdx, rdx
.text:0000000000007738                 jz      short loc_7767
.text:000000000000773A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000773F                 mov     [rsp+48h+var_18], rdx
.text:0000000000007744                 mov     rcx, rsp
.text:0000000000007747                 mov     rdx, r8
.text:000000000000774A                 mov     rsi, r9
.text:000000000000774D                 call    quotearg_n_options
.text:0000000000007752                 mov     rdi, [rsp+48h+var_10]
.text:0000000000007757                 xor     rdi, fs:28h
.text:0000000000007760                 jnz     short loc_776C
.text:0000000000007762                 add     rsp, 48h
.text:0000000000007766                 retn
.text:0000000000007767 ; ---------------------------------------------------------------------------
.text:0000000000007767
.text:0000000000007767 loc_7767:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000007767                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000007767                 call    _abort
.text:000000000000776C ; ---------------------------------------------------------------------------
.text:000000000000776C
.text:000000000000776C loc_776C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000776C                 call    ___stack_chk_fail
.text:000000000000776C ; } // starts at 76E0
.text:000000000000776C quotearg_n_custom_mem endp
.text:000000000000776C
.text:000000000000776C ; ---------------------------------------------------------------------------
.text:0000000000007771                 align 20h
.text:0000000000007780
.text:0000000000007780 ; =============== S U B R O U T I N E =======================================
.text:0000000000007780
.text:0000000000007780
.text:0000000000007780                 public quotearg_n_custom
.text:0000000000007780 quotearg_n_custom proc near
.text:0000000000007780 ; __unwind {
.text:0000000000007780                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000007787                 jmp     quotearg_n_custom_mem
.text:0000000000007787 ; } // starts at 7780
.text:0000000000007787 quotearg_n_custom endp
.text:0000000000007787
.text:0000000000007787 ; ---------------------------------------------------------------------------
.text:000000000000778C                 align 10h
.text:0000000000007790
.text:0000000000007790 ; =============== S U B R O U T I N E =======================================
.text:0000000000007790
.text:0000000000007790
.text:0000000000007790                 public quotearg_custom
.text:0000000000007790 quotearg_custom proc near
.text:0000000000007790 ; __unwind {
.text:0000000000007790                 mov     rcx, rdx
.text:0000000000007793                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000779A                 mov     rdx, rsi
.text:000000000000779D                 mov     rsi, rdi
.text:00000000000077A0                 xor     edi, edi
.text:00000000000077A2                 jmp     quotearg_n_custom_mem
.text:00000000000077A2 ; } // starts at 7790
.text:00000000000077A2 quotearg_custom endp
.text:00000000000077A2
.text:00000000000077A2 ; ---------------------------------------------------------------------------
.text:00000000000077A7                 align 10h
.text:00000000000077B0
.text:00000000000077B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077B0
.text:00000000000077B0
.text:00000000000077B0                 public quotearg_custom_mem
.text:00000000000077B0 quotearg_custom_mem proc near
.text:00000000000077B0 ; __unwind {
.text:00000000000077B0                 mov     r8, rcx
.text:00000000000077B3                 mov     rcx, rdx
.text:00000000000077B6                 mov     rdx, rsi
.text:00000000000077B9                 mov     rsi, rdi
.text:00000000000077BC                 xor     edi, edi
.text:00000000000077BE                 jmp     quotearg_n_custom_mem
.text:00000000000077BE ; } // starts at 77B0
.text:00000000000077BE quotearg_custom_mem endp
.text:00000000000077BE
.text:00000000000077BE ; ---------------------------------------------------------------------------
.text:00000000000077C3                 align 10h
.text:00000000000077D0
.text:00000000000077D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077D0
.text:00000000000077D0
.text:00000000000077D0                 public quote_n_mem
.text:00000000000077D0 quote_n_mem     proc near
.text:00000000000077D0 ; __unwind {
.text:00000000000077D0                 lea     rcx, quote_quoting_options
.text:00000000000077D7                 jmp     quotearg_n_options
.text:00000000000077D7 ; } // starts at 77D0
.text:00000000000077D7 quote_n_mem     endp
.text:00000000000077D7
.text:00000000000077D7 ; ---------------------------------------------------------------------------
.text:00000000000077DC                 align 20h
.text:00000000000077E0
.text:00000000000077E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077E0
.text:00000000000077E0
.text:00000000000077E0                 public quote_mem
.text:00000000000077E0 quote_mem       proc near
.text:00000000000077E0 ; __unwind {
.text:00000000000077E0                 lea     rcx, quote_quoting_options
.text:00000000000077E7                 mov     rdx, rsi
.text:00000000000077EA                 mov     rsi, rdi
.text:00000000000077ED                 xor     edi, edi
.text:00000000000077EF                 jmp     quotearg_n_options
.text:00000000000077EF ; } // starts at 77E0
.text:00000000000077EF quote_mem       endp
.text:00000000000077EF
.text:00000000000077EF ; ---------------------------------------------------------------------------
.text:00000000000077F4                 align 20h
.text:0000000000007800
.text:0000000000007800 ; =============== S U B R O U T I N E =======================================
.text:0000000000007800
.text:0000000000007800
.text:0000000000007800                 public quote_n
.text:0000000000007800 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:0000000000007800 ; __unwind {
.text:0000000000007800                 lea     rcx, quote_quoting_options
.text:0000000000007807                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000780E                 jmp     quotearg_n_options
.text:000000000000780E ; } // starts at 7800
.text:000000000000780E quote_n         endp
.text:000000000000780E
.text:000000000000780E ; ---------------------------------------------------------------------------
.text:0000000000007813                 align 20h
.text:0000000000007820
.text:0000000000007820 ; =============== S U B R O U T I N E =======================================
.text:0000000000007820
.text:0000000000007820
.text:0000000000007820                 public quote
.text:0000000000007820 quote           proc near               ; CODE XREF: main+914↑p
.text:0000000000007820                                         ; decode_format_string+12D↑p ...
.text:0000000000007820 ; __unwind {
.text:0000000000007820                 lea     rcx, quote_quoting_options
.text:0000000000007827                 mov     rsi, rdi
.text:000000000000782A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007831                 xor     edi, edi
.text:0000000000007833                 jmp     quotearg_n_options
.text:0000000000007833 ; } // starts at 7820
.text:0000000000007833 quote           endp
.text:0000000000007833
.text:0000000000007833 ; ---------------------------------------------------------------------------
.text:0000000000007838                 align 20h
.text:0000000000007840
.text:0000000000007840 ; =============== S U B R O U T I N E =======================================
.text:0000000000007840
.text:0000000000007840
.text:0000000000007840 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000007840                 public version_etc_arn
.text:0000000000007840 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_7C7B↓j
.text:0000000000007840                                         ; version_etc_va:loc_7CCB↓p ...
.text:0000000000007840
.text:0000000000007840 var_58          = qword ptr -58h
.text:0000000000007840 var_50          = qword ptr -50h
.text:0000000000007840 var_48          = qword ptr -48h
.text:0000000000007840 var_40          = qword ptr -40h
.text:0000000000007840
.text:0000000000007840 ; __unwind {
.text:0000000000007840                 push    r15
.text:0000000000007842                 push    r14
.text:0000000000007844                 push    r13
.text:0000000000007846                 push    r12
.text:0000000000007848                 mov     r12, r9
.text:000000000000784B                 push    rbp
.text:000000000000784C                 push    rbx
.text:000000000000784D                 mov     rbp, rdi
.text:0000000000007850                 mov     rbx, r8
.text:0000000000007853                 sub     rsp, 28h
.text:0000000000007857                 test    rsi, rsi
.text:000000000000785A                 jz      loc_7978
.text:0000000000007860                 mov     r8, rdx
.text:0000000000007863                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000786A                 mov     r9, rcx
.text:000000000000786D                 xor     eax, eax
.text:000000000000786F                 mov     rcx, rsi
.text:0000000000007872                 mov     esi, 1
.text:0000000000007877                 call    ___fprintf_chk
.text:000000000000787C
.text:000000000000787C loc_787C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000787C                 lea     rsi, aC_1       ; "(C)"
.text:0000000000007883                 xor     edi, edi        ; domainname
.text:0000000000007885                 mov     edx, 5          ; category
.text:000000000000788A                 call    _dcgettext
.text:000000000000788F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000007896                 mov     rcx, rax
.text:0000000000007899                 mov     r8d, 7E3h
.text:000000000000789F                 mov     esi, 1
.text:00000000000078A4                 mov     rdi, rbp
.text:00000000000078A7                 xor     eax, eax
.text:00000000000078A9                 call    ___fprintf_chk
.text:00000000000078AE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000078B5                 xor     edi, edi        ; domainname
.text:00000000000078B7                 mov     edx, 5          ; category
.text:00000000000078BC                 call    _dcgettext
.text:00000000000078C1                 mov     rsi, rbp        ; stream
.text:00000000000078C4                 mov     rdi, rax        ; s
.text:00000000000078C7                 call    _fputs_unlocked
.text:00000000000078CC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000078D0                 ja      def_78E4        ; jumptable 00000000000078E4 default case
.text:00000000000078D6                 lea     rdx, jpt_78E4
.text:00000000000078DD                 movsxd  rax, ds:(jpt_78E4 - 0D064h)[rdx+r12*4]
.text:00000000000078E1                 add     rax, rdx
.text:00000000000078E4                 jmp     rax             ; switch jump
.text:00000000000078E4 ; ---------------------------------------------------------------------------
.text:00000000000078E6                 align 10h
.text:00000000000078F0
.text:00000000000078F0 loc_78F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000078F0                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:00000000000078F0                 mov     r9, [rbx+38h]   ; jumptable 00000000000078E4 case 8
.text:00000000000078F4                 mov     rax, [rbx+10h]
.text:00000000000078F8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000078FF                 mov     r8, [rbx+8]
.text:0000000000007903                 mov     edx, 5          ; category
.text:0000000000007908                 xor     edi, edi        ; domainname
.text:000000000000790A                 mov     r13, [rbx+30h]
.text:000000000000790E                 mov     r12, [rbx+28h]
.text:0000000000007912                 mov     [rsp+58h+var_48], r9
.text:0000000000007917                 mov     r15, [rbx+20h]
.text:000000000000791B                 mov     r14, [rbx+18h]
.text:000000000000791F                 mov     [rsp+58h+var_58], rax
.text:0000000000007923                 mov     [rsp+58h+var_50], r8
.text:0000000000007928                 mov     rbx, [rbx]
.text:000000000000792B                 call    _dcgettext
.text:0000000000007930                 sub     rsp, 8
.text:0000000000007934
.text:0000000000007934 loc_7934:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000007934                 mov     r9, [rsp+60h+var_48]
.text:0000000000007939                 mov     rdx, rax
.text:000000000000793C                 mov     rcx, rbx
.text:000000000000793F                 mov     esi, 1
.text:0000000000007944                 mov     rdi, rbp
.text:0000000000007947                 xor     eax, eax
.text:0000000000007949                 push    r9
.text:000000000000794B                 push    r13
.text:000000000000794D                 push    r12
.text:000000000000794F                 push    r15
.text:0000000000007951                 push    r14
.text:0000000000007953                 mov     r9, [rsp+88h+var_58]
.text:0000000000007958                 mov     r8, [rsp+88h+var_50]
.text:000000000000795D                 call    ___fprintf_chk
.text:0000000000007962                 add     rsp, 30h
.text:0000000000007966
.text:0000000000007966 loc_7966:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007966                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:0000000000007966                 add     rsp, 28h        ; jumptable 00000000000078E4 case 0
.text:000000000000796A                 pop     rbx
.text:000000000000796B                 pop     rbp
.text:000000000000796C                 pop     r12
.text:000000000000796E                 pop     r13
.text:0000000000007970                 pop     r14
.text:0000000000007972                 pop     r15
.text:0000000000007974                 retn
.text:0000000000007974 ; ---------------------------------------------------------------------------
.text:0000000000007975                 align 8
.text:0000000000007978
.text:0000000000007978 loc_7978:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000007978                 mov     r8, rcx
.text:000000000000797B                 mov     rcx, rdx
.text:000000000000797E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000007985                 mov     esi, 1
.text:000000000000798A                 xor     eax, eax
.text:000000000000798C                 call    ___fprintf_chk
.text:0000000000007991                 jmp     loc_787C
.text:0000000000007991 ; ---------------------------------------------------------------------------
.text:0000000000007996                 align 20h
.text:00000000000079A0
.text:00000000000079A0 loc_79A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000079A0                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:00000000000079A0                 mov     r10, [rbx+40h]  ; jumptable 00000000000078E4 case 9
.text:00000000000079A4                 mov     r9, [rbx+38h]
.text:00000000000079A8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000079AF                 mov     rax, [rbx+10h]
.text:00000000000079B3                 mov     r8, [rbx+8]
.text:00000000000079B7                 mov     edx, 5          ; category
.text:00000000000079BC                 mov     r13, [rbx+30h]
.text:00000000000079C0                 mov     r12, [rbx+28h]
.text:00000000000079C4                 mov     r15, [rbx+20h]
.text:00000000000079C8                 mov     r14, [rbx+18h]
.text:00000000000079CC                 mov     rbx, [rbx]
.text:00000000000079CF                 mov     [rsp+58h+var_40], r10
.text:00000000000079D4                 mov     [rsp+58h+var_48], r9
.text:00000000000079D9                 mov     [rsp+58h+var_58], rax
.text:00000000000079DD                 mov     [rsp+58h+var_50], r8
.text:00000000000079E2
.text:00000000000079E2 loc_79E2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000079E2                 xor     edi, edi        ; domainname
.text:00000000000079E4                 call    _dcgettext
.text:00000000000079E9                 mov     r10, [rsp+58h+var_40]
.text:00000000000079EE                 push    r10
.text:00000000000079F0                 jmp     loc_7934
.text:00000000000079F0 ; ---------------------------------------------------------------------------
.text:00000000000079F5                 align 8
.text:00000000000079F8
.text:00000000000079F8 loc_79F8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000079F8                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:00000000000079F8                 mov     rbx, [rbx]      ; jumptable 00000000000078E4 case 1
.text:00000000000079FB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000007A02                 mov     edx, 5          ; category
.text:0000000000007A07                 xor     edi, edi        ; domainname
.text:0000000000007A09                 call    _dcgettext
.text:0000000000007A0E                 add     rsp, 28h
.text:0000000000007A12                 mov     rcx, rbx
.text:0000000000007A15                 mov     rdi, rbp
.text:0000000000007A18                 pop     rbx
.text:0000000000007A19                 pop     rbp
.text:0000000000007A1A                 pop     r12
.text:0000000000007A1C                 pop     r13
.text:0000000000007A1E                 pop     r14
.text:0000000000007A20                 pop     r15
.text:0000000000007A22                 mov     rdx, rax
.text:0000000000007A25                 mov     esi, 1
.text:0000000000007A2A                 xor     eax, eax
.text:0000000000007A2C                 jmp     ___fprintf_chk
.text:0000000000007A2C ; ---------------------------------------------------------------------------
.text:0000000000007A31                 align 8
.text:0000000000007A38
.text:0000000000007A38 loc_7A38:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007A38                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:0000000000007A38                 mov     r12, [rbx+8]    ; jumptable 00000000000078E4 case 2
.text:0000000000007A3C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000007A43                 mov     rbx, [rbx]
.text:0000000000007A46                 mov     edx, 5          ; category
.text:0000000000007A4B                 xor     edi, edi        ; domainname
.text:0000000000007A4D                 call    _dcgettext
.text:0000000000007A52                 add     rsp, 28h
.text:0000000000007A56                 mov     r8, r12
.text:0000000000007A59                 mov     rcx, rbx
.text:0000000000007A5C                 mov     rdi, rbp
.text:0000000000007A5F                 mov     rdx, rax
.text:0000000000007A62                 mov     esi, 1
.text:0000000000007A67                 pop     rbx
.text:0000000000007A68                 pop     rbp
.text:0000000000007A69                 pop     r12
.text:0000000000007A6B                 pop     r13
.text:0000000000007A6D                 pop     r14
.text:0000000000007A6F                 pop     r15
.text:0000000000007A71                 xor     eax, eax
.text:0000000000007A73                 jmp     ___fprintf_chk
.text:0000000000007A73 ; ---------------------------------------------------------------------------
.text:0000000000007A78                 align 20h
.text:0000000000007A80
.text:0000000000007A80 loc_7A80:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007A80                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:0000000000007A80                 mov     r13, [rbx+10h]  ; jumptable 00000000000078E4 case 3
.text:0000000000007A84                 mov     r12, [rbx+8]
.text:0000000000007A88                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000007A8F                 mov     rbx, [rbx]
.text:0000000000007A92                 mov     edx, 5          ; category
.text:0000000000007A97                 xor     edi, edi        ; domainname
.text:0000000000007A99                 call    _dcgettext
.text:0000000000007A9E                 add     rsp, 28h
.text:0000000000007AA2                 mov     r9, r13
.text:0000000000007AA5                 mov     r8, r12
.text:0000000000007AA8                 mov     rcx, rbx
.text:0000000000007AAB                 mov     rdi, rbp
.text:0000000000007AAE                 mov     rdx, rax
.text:0000000000007AB1                 pop     rbx
.text:0000000000007AB2                 pop     rbp
.text:0000000000007AB3                 pop     r12
.text:0000000000007AB5                 pop     r13
.text:0000000000007AB7                 pop     r14
.text:0000000000007AB9                 pop     r15
.text:0000000000007ABB                 mov     esi, 1
.text:0000000000007AC0                 xor     eax, eax
.text:0000000000007AC2                 jmp     ___fprintf_chk
.text:0000000000007AC2 ; ---------------------------------------------------------------------------
.text:0000000000007AC7                 align 10h
.text:0000000000007AD0
.text:0000000000007AD0 loc_7AD0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007AD0                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:0000000000007AD0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000078E4 case 4
.text:0000000000007AD7                 mov     edx, 5          ; category
.text:0000000000007ADC                 xor     edi, edi        ; domainname
.text:0000000000007ADE                 mov     r14, [rbx+18h]
.text:0000000000007AE2                 mov     r13, [rbx+10h]
.text:0000000000007AE6                 mov     r12, [rbx+8]
.text:0000000000007AEA                 mov     rbx, [rbx]
.text:0000000000007AED                 call    _dcgettext
.text:0000000000007AF2                 sub     rsp, 8
.text:0000000000007AF6
.text:0000000000007AF6 loc_7AF6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000007AF6                 push    r14
.text:0000000000007AF8                 mov     rdx, rax
.text:0000000000007AFB                 mov     r9, r13
.text:0000000000007AFE                 mov     r8, r12
.text:0000000000007B01                 mov     rcx, rbx
.text:0000000000007B04                 mov     rdi, rbp
.text:0000000000007B07                 mov     esi, 1
.text:0000000000007B0C                 xor     eax, eax
.text:0000000000007B0E                 call    ___fprintf_chk
.text:0000000000007B13                 pop     rax
.text:0000000000007B14                 pop     rdx
.text:0000000000007B15                 add     rsp, 28h
.text:0000000000007B19                 pop     rbx
.text:0000000000007B1A                 pop     rbp
.text:0000000000007B1B                 pop     r12
.text:0000000000007B1D                 pop     r13
.text:0000000000007B1F                 pop     r14
.text:0000000000007B21                 pop     r15
.text:0000000000007B23                 retn
.text:0000000000007B23 ; ---------------------------------------------------------------------------
.text:0000000000007B24                 align 8
.text:0000000000007B28
.text:0000000000007B28 loc_7B28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007B28                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:0000000000007B28                 mov     r15, [rbx+20h]  ; jumptable 00000000000078E4 case 5
.text:0000000000007B2C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000007B33                 mov     edx, 5          ; category
.text:0000000000007B38                 xor     edi, edi        ; domainname
.text:0000000000007B3A                 mov     r14, [rbx+18h]
.text:0000000000007B3E                 mov     r13, [rbx+10h]
.text:0000000000007B42                 mov     r12, [rbx+8]
.text:0000000000007B46                 mov     rbx, [rbx]
.text:0000000000007B49                 call    _dcgettext
.text:0000000000007B4E                 push    r15
.text:0000000000007B50                 jmp     short loc_7AF6
.text:0000000000007B50 ; ---------------------------------------------------------------------------
.text:0000000000007B52                 align 8
.text:0000000000007B58
.text:0000000000007B58 loc_7B58:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007B58                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:0000000000007B58                 mov     r8, [rbx+8]     ; jumptable 00000000000078E4 case 6
.text:0000000000007B5C                 mov     r12, [rbx+28h]
.text:0000000000007B60                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000007B67                 mov     r15, [rbx+20h]
.text:0000000000007B6B                 mov     r14, [rbx+18h]
.text:0000000000007B6F                 mov     edx, 5          ; category
.text:0000000000007B74                 mov     r13, [rbx+10h]
.text:0000000000007B78                 xor     edi, edi        ; domainname
.text:0000000000007B7A                 mov     rbx, [rbx]
.text:0000000000007B7D                 mov     [rsp+58h+var_58], r8
.text:0000000000007B81                 call    _dcgettext
.text:0000000000007B86                 sub     rsp, 8
.text:0000000000007B8A                 mov     r9, r13
.text:0000000000007B8D                 push    r12
.text:0000000000007B8F                 push    r15
.text:0000000000007B91                 push    r14
.text:0000000000007B93
.text:0000000000007B93 loc_7B93:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000007B93                 mov     r8, [rsp+78h+var_58]
.text:0000000000007B98                 mov     rcx, rbx
.text:0000000000007B9B                 mov     rdx, rax
.text:0000000000007B9E                 mov     rdi, rbp
.text:0000000000007BA1                 mov     esi, 1
.text:0000000000007BA6                 xor     eax, eax
.text:0000000000007BA8                 call    ___fprintf_chk
.text:0000000000007BAD                 add     rsp, 20h
.text:0000000000007BB1                 add     rsp, 28h
.text:0000000000007BB5                 pop     rbx
.text:0000000000007BB6                 pop     rbp
.text:0000000000007BB7                 pop     r12
.text:0000000000007BB9                 pop     r13
.text:0000000000007BBB                 pop     r14
.text:0000000000007BBD                 pop     r15
.text:0000000000007BBF                 retn
.text:0000000000007BC0 ; ---------------------------------------------------------------------------
.text:0000000000007BC0
.text:0000000000007BC0 loc_7BC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007BC0                                         ; DATA XREF: .rodata:jpt_78E4↓o
.text:0000000000007BC0                 mov     r9, [rbx+10h]   ; jumptable 00000000000078E4 case 7
.text:0000000000007BC4                 mov     r13, [rbx+30h]
.text:0000000000007BC8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000007BCF                 mov     r12, [rbx+28h]
.text:0000000000007BD3                 mov     r15, [rbx+20h]
.text:0000000000007BD7                 mov     edx, 5          ; category
.text:0000000000007BDC                 mov     r14, [rbx+18h]
.text:0000000000007BE0                 mov     r8, [rbx+8]
.text:0000000000007BE4                 xor     edi, edi        ; domainname
.text:0000000000007BE6                 mov     [rsp+58h+var_50], r9
.text:0000000000007BEB                 mov     rbx, [rbx]
.text:0000000000007BEE                 mov     [rsp+58h+var_58], r8
.text:0000000000007BF2                 call    _dcgettext
.text:0000000000007BF7                 push    r13
.text:0000000000007BF9                 push    r12
.text:0000000000007BFB                 push    r15
.text:0000000000007BFD                 push    r14
.text:0000000000007BFF                 mov     r9, [rsp+78h+var_50]
.text:0000000000007C04                 jmp     short loc_7B93
.text:0000000000007C04 ; ---------------------------------------------------------------------------
.text:0000000000007C06                 align 10h
.text:0000000000007C10
.text:0000000000007C10 def_78E4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000007C10                 mov     r10, [rbx+40h]  ; jumptable 00000000000078E4 default case
.text:0000000000007C14                 mov     r9, [rbx+38h]
.text:0000000000007C18                 mov     edx, 5
.text:0000000000007C1D                 mov     rax, [rbx+10h]
.text:0000000000007C21                 mov     r8, [rbx+8]
.text:0000000000007C25                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000007C2C                 mov     r13, [rbx+30h]
.text:0000000000007C30                 mov     r12, [rbx+28h]
.text:0000000000007C34                 mov     r15, [rbx+20h]
.text:0000000000007C38                 mov     r14, [rbx+18h]
.text:0000000000007C3C                 mov     [rsp+58h+var_40], r10
.text:0000000000007C41                 mov     [rsp+58h+var_48], r9
.text:0000000000007C46                 mov     [rsp+58h+var_58], rax
.text:0000000000007C4A                 mov     [rsp+58h+var_50], r8
.text:0000000000007C4F                 mov     rbx, [rbx]
.text:0000000000007C52                 jmp     loc_79E2
.text:0000000000007C52 ; } // starts at 7840
.text:0000000000007C52 version_etc_arn endp
.text:0000000000007C52
.text:0000000000007C52 ; ---------------------------------------------------------------------------
.text:0000000000007C57                 align 20h
.text:0000000000007C60
.text:0000000000007C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C60
.text:0000000000007C60 ; Attributes: info_from_lumina
.text:0000000000007C60
.text:0000000000007C60 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000007C60                 public version_etc_ar
.text:0000000000007C60 version_etc_ar  proc near
.text:0000000000007C60 ; __unwind {
.text:0000000000007C60                 xor     r9d, r9d
.text:0000000000007C63                 cmp     qword ptr [r8], 0
.text:0000000000007C67                 jz      short loc_7C7B
.text:0000000000007C69                 nop     dword ptr [rax+00000000h]
.text:0000000000007C70
.text:0000000000007C70 loc_7C70:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000007C70                 add     r9, 1
.text:0000000000007C74                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000007C79                 jnz     short loc_7C70
.text:0000000000007C7B
.text:0000000000007C7B loc_7C7B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000007C7B                 jmp     version_etc_arn
.text:0000000000007C7B ; } // starts at 7C60
.text:0000000000007C7B version_etc_ar  endp
.text:0000000000007C7B
.text:0000000000007C80
.text:0000000000007C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C80
.text:0000000000007C80 ; Attributes: info_from_lumina
.text:0000000000007C80
.text:0000000000007C80 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000007C80                 public version_etc_va
.text:0000000000007C80 version_etc_va  proc near
.text:0000000000007C80
.text:0000000000007C80 authtab         = qword ptr -68h
.text:0000000000007C80 var_10          = qword ptr -10h
.text:0000000000007C80
.text:0000000000007C80 ; __unwind {
.text:0000000000007C80                 sub     rsp, 68h
.text:0000000000007C84                 mov     r10, r8
.text:0000000000007C87                 xor     r9d, r9d
.text:0000000000007C8A                 mov     rax, fs:28h
.text:0000000000007C93                 mov     [rsp+68h+var_10], rax
.text:0000000000007C98                 xor     eax, eax
.text:0000000000007C9A                 mov     r8, rsp
.text:0000000000007C9D                 nop     dword ptr [rax]
.text:0000000000007CA0
.text:0000000000007CA0 loc_7CA0:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000007CA0                 mov     eax, [r10]
.text:0000000000007CA3                 cmp     eax, 2Fh ; '/'
.text:0000000000007CA6                 ja      short loc_7CEA
.text:0000000000007CA8                 mov     r11d, eax
.text:0000000000007CAB                 add     r11, [r10+10h]
.text:0000000000007CAF                 add     eax, 8
.text:0000000000007CB2                 mov     [r10], eax
.text:0000000000007CB5
.text:0000000000007CB5 loc_7CB5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000007CB5                 mov     rax, [r11]
.text:0000000000007CB8                 test    rax, rax
.text:0000000000007CBB                 mov     [r8+r9*8], rax
.text:0000000000007CBF                 jz      short loc_7CCB
.text:0000000000007CC1                 add     r9, 1
.text:0000000000007CC5                 cmp     r9, 0Ah
.text:0000000000007CC9                 jnz     short loc_7CA0
.text:0000000000007CCB
.text:0000000000007CCB loc_7CCB:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000007CCB                 call    version_etc_arn
.text:0000000000007CD0                 mov     rax, [rsp+68h+var_10]
.text:0000000000007CD5                 xor     rax, fs:28h
.text:0000000000007CDE                 jnz     short loc_7CE5
.text:0000000000007CE0                 add     rsp, 68h
.text:0000000000007CE4                 retn
.text:0000000000007CE5 ; ---------------------------------------------------------------------------
.text:0000000000007CE5
.text:0000000000007CE5 loc_7CE5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000007CE5                 call    ___stack_chk_fail
.text:0000000000007CEA ; ---------------------------------------------------------------------------
.text:0000000000007CEA
.text:0000000000007CEA loc_7CEA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000007CEA                 mov     r11, [r10+8]
.text:0000000000007CEE                 lea     rax, [r11+8]
.text:0000000000007CF2                 mov     [r10+8], rax
.text:0000000000007CF6                 jmp     short loc_7CB5
.text:0000000000007CF6 ; } // starts at 7C80
.text:0000000000007CF6 version_etc_va  endp
.text:0000000000007CF6
.text:0000000000007CF6 ; ---------------------------------------------------------------------------
.text:0000000000007CF8                 align 20h
.text:0000000000007D00
.text:0000000000007D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D00
.text:0000000000007D00 ; Attributes: info_from_lumina
.text:0000000000007D00
.text:0000000000007D00 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000007D00                 public version_etc
.text:0000000000007D00 version_etc     proc near               ; CODE XREF: main+550↑p
.text:0000000000007D00
.text:0000000000007D00 var_C0          = dword ptr -0C0h
.text:0000000000007D00 var_B8          = qword ptr -0B8h
.text:0000000000007D00 var_B0          = qword ptr -0B0h
.text:0000000000007D00 var_A8          = byte ptr -0A8h
.text:0000000000007D00 var_50          = qword ptr -50h
.text:0000000000007D00 var_48          = byte ptr -48h
.text:0000000000007D00 var_28          = qword ptr -28h
.text:0000000000007D00 var_20          = qword ptr -20h
.text:0000000000007D00 arg_0           = byte ptr  8
.text:0000000000007D00
.text:0000000000007D00 ; __unwind {
.text:0000000000007D00                 push    rbp
.text:0000000000007D01                 push    rbx
.text:0000000000007D02                 mov     r10d, 20h ; ' '
.text:0000000000007D08                 xor     r11d, r11d
.text:0000000000007D0B                 sub     rsp, 0B8h
.text:0000000000007D12                 mov     rax, fs:28h
.text:0000000000007D1B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000007D20                 xor     eax, eax
.text:0000000000007D22                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000007D2A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000007D32                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000007D3A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000007D3F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000007D47                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000007D4F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000007D54                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000007D5C                 xor     r9d, r9d
.text:0000000000007D5F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000007D64                 mov     rbp, rax
.text:0000000000007D67                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007D70
.text:0000000000007D70 loc_7D70:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000007D70                 cmp     r10d, 2Fh ; '/'
.text:0000000000007D74                 ja      short loc_7DCC
.text:0000000000007D76                 mov     eax, r10d
.text:0000000000007D79                 mov     r11d, 1
.text:0000000000007D7F                 add     r10d, 8
.text:0000000000007D83                 add     rax, rbp
.text:0000000000007D86
.text:0000000000007D86 loc_7D86:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000007D86                 mov     rax, [rax]
.text:0000000000007D89                 test    rax, rax
.text:0000000000007D8C                 mov     [r8+r9*8], rax
.text:0000000000007D90                 jz      short loc_7D9C
.text:0000000000007D92                 add     r9, 1
.text:0000000000007D96                 cmp     r9, 0Ah
.text:0000000000007D9A                 jnz     short loc_7D70
.text:0000000000007D9C
.text:0000000000007D9C loc_7D9C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000007D9C                 test    r11b, r11b
.text:0000000000007D9F                 jnz     short loc_7DC5
.text:0000000000007DA1
.text:0000000000007DA1 loc_7DA1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000007DA1                 call    version_etc_arn
.text:0000000000007DA6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000007DAB                 xor     rax, fs:28h
.text:0000000000007DB4                 jnz     short loc_7DC0
.text:0000000000007DB6                 add     rsp, 0B8h
.text:0000000000007DBD                 pop     rbx
.text:0000000000007DBE                 pop     rbp
.text:0000000000007DBF                 retn
.text:0000000000007DC0 ; ---------------------------------------------------------------------------
.text:0000000000007DC0
.text:0000000000007DC0 loc_7DC0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000007DC0                 call    ___stack_chk_fail
.text:0000000000007DC5 ; ---------------------------------------------------------------------------
.text:0000000000007DC5
.text:0000000000007DC5 loc_7DC5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000007DC5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000007DCA                 jmp     short loc_7DA1
.text:0000000000007DCC ; ---------------------------------------------------------------------------
.text:0000000000007DCC
.text:0000000000007DCC loc_7DCC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000007DCC                 mov     rax, rbx
.text:0000000000007DCF                 add     rbx, 8
.text:0000000000007DD3                 jmp     short loc_7D86
.text:0000000000007DD3 ; } // starts at 7D00
.text:0000000000007DD3 version_etc     endp
.text:0000000000007DD3
.text:0000000000007DD3 ; ---------------------------------------------------------------------------
.text:0000000000007DD5                 align 20h
.text:0000000000007DE0
.text:0000000000007DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DE0
.text:0000000000007DE0 ; Attributes: info_from_lumina
.text:0000000000007DE0
.text:0000000000007DE0 ; void __cdecl emit_bug_reporting_address()
.text:0000000000007DE0                 public emit_bug_reporting_address
.text:0000000000007DE0 emit_bug_reporting_address proc near
.text:0000000000007DE0 ; __unwind {
.text:0000000000007DE0                 push    rbx
.text:0000000000007DE1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000007DE8                 mov     edx, 5          ; category
.text:0000000000007DED                 xor     edi, edi        ; domainname
.text:0000000000007DEF                 call    _dcgettext
.text:0000000000007DF4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000007DFB                 mov     rsi, rax
.text:0000000000007DFE                 mov     edi, 1
.text:0000000000007E03                 xor     eax, eax
.text:0000000000007E05                 call    ___printf_chk
.text:0000000000007E0A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000007E11                 mov     edx, 5          ; category
.text:0000000000007E16                 xor     edi, edi        ; domainname
.text:0000000000007E18                 call    _dcgettext
.text:0000000000007E1D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000007E24                 lea     rdx, unk_AE36
.text:0000000000007E2B                 mov     rsi, rax
.text:0000000000007E2E                 mov     edi, 1
.text:0000000000007E33                 xor     eax, eax
.text:0000000000007E35                 call    ___printf_chk
.text:0000000000007E3A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000007E41                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000007E48                 xor     edi, edi        ; domainname
.text:0000000000007E4A                 mov     edx, 5          ; category
.text:0000000000007E4F                 call    _dcgettext
.text:0000000000007E54                 mov     rsi, rbx        ; stream
.text:0000000000007E57                 mov     rdi, rax        ; s
.text:0000000000007E5A                 pop     rbx
.text:0000000000007E5B                 jmp     _fputs_unlocked
.text:0000000000007E5B ; } // starts at 7DE0
.text:0000000000007E5B emit_bug_reporting_address endp
.text:0000000000007E5B
.text:0000000000007E60
.text:0000000000007E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E60
.text:0000000000007E60
.text:0000000000007E60                 public xmalloc
.text:0000000000007E60 xmalloc         proc near               ; CODE XREF: main+7B3↑p
.text:0000000000007E60                                         ; main+A3E↑p ...
.text:0000000000007E60 ; __unwind {
.text:0000000000007E60                 push    rbx
.text:0000000000007E61                 mov     rbx, rdi
.text:0000000000007E64                 call    _malloc
.text:0000000000007E69                 test    rax, rax
.text:0000000000007E6C                 jnz     short loc_7E73
.text:0000000000007E6E                 test    rbx, rbx
.text:0000000000007E71                 jnz     short loc_7E75
.text:0000000000007E73
.text:0000000000007E73 loc_7E73:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000007E73                 pop     rbx
.text:0000000000007E74                 retn
.text:0000000000007E75 ; ---------------------------------------------------------------------------
.text:0000000000007E75
.text:0000000000007E75 loc_7E75:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000007E75                 call    xalloc_die
.text:0000000000007E75 ; } // starts at 7E60
.text:0000000000007E75 xmalloc         endp
.text:0000000000007E75
.text:0000000000007E75 ; ---------------------------------------------------------------------------
.text:0000000000007E7A                 align 20h
.text:0000000000007E80
.text:0000000000007E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E80
.text:0000000000007E80 ; Attributes: info_from_lumina
.text:0000000000007E80
.text:0000000000007E80 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000007E80                 public xnmalloc
.text:0000000000007E80 xnmalloc        proc near
.text:0000000000007E80 ; __unwind {
.text:0000000000007E80                 mov     rax, rdi
.text:0000000000007E83                 mul     rsi
.text:0000000000007E86                 mov     rdi, rax
.text:0000000000007E89                 seto    al
.text:0000000000007E8C                 test    rdi, rdi
.text:0000000000007E8F                 js      short loc_7E9B
.text:0000000000007E91                 movzx   eax, al
.text:0000000000007E94                 test    rax, rax
.text:0000000000007E97                 jnz     short loc_7E9B
.text:0000000000007E99                 jmp     short xmalloc
.text:0000000000007E9B ; ---------------------------------------------------------------------------
.text:0000000000007E9B
.text:0000000000007E9B loc_7E9B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000007E9B                                         ; xnmalloc+17↑j
.text:0000000000007E9B                 sub     rsp, 8
.text:0000000000007E9F                 call    xalloc_die
.text:0000000000007E9F ; } // starts at 7E80
.text:0000000000007E9F xnmalloc        endp
.text:0000000000007E9F
.text:0000000000007E9F ; ---------------------------------------------------------------------------
.text:0000000000007EA4                 align 10h
.text:0000000000007EB0
.text:0000000000007EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007EB0
.text:0000000000007EB0
.text:0000000000007EB0                 public xcharalloc
.text:0000000000007EB0 xcharalloc      proc near
.text:0000000000007EB0 ; __unwind {
.text:0000000000007EB0                 jmp     short xmalloc
.text:0000000000007EB0 ; } // starts at 7EB0
.text:0000000000007EB0 xcharalloc      endp
.text:0000000000007EB0
.text:0000000000007EB0 ; ---------------------------------------------------------------------------
.text:0000000000007EB2                 align 20h
.text:0000000000007EC0
.text:0000000000007EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007EC0
.text:0000000000007EC0 ; Attributes: info_from_lumina
.text:0000000000007EC0
.text:0000000000007EC0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000007EC0                 public xrealloc
.text:0000000000007EC0 xrealloc        proc near               ; CODE XREF: decode_format_string+30E↑p
.text:0000000000007EC0                                         ; quotearg_n_options+6E↑p ...
.text:0000000000007EC0 ; __unwind {
.text:0000000000007EC0                 test    rsi, rsi
.text:0000000000007EC3                 push    rbx
.text:0000000000007EC4                 mov     rbx, rsi
.text:0000000000007EC7                 jnz     short loc_7ECE
.text:0000000000007EC9                 test    rdi, rdi
.text:0000000000007ECC                 jnz     short loc_7EE8
.text:0000000000007ECE
.text:0000000000007ECE loc_7ECE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000007ECE                 mov     rsi, rbx        ; size
.text:0000000000007ED1                 call    _realloc
.text:0000000000007ED6                 test    rax, rax
.text:0000000000007ED9                 jnz     short loc_7EE0
.text:0000000000007EDB                 test    rbx, rbx
.text:0000000000007EDE                 jnz     short loc_7EF1
.text:0000000000007EE0
.text:0000000000007EE0 loc_7EE0:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000007EE0                 pop     rbx
.text:0000000000007EE1                 retn
.text:0000000000007EE1 ; ---------------------------------------------------------------------------
.text:0000000000007EE2                 align 8
.text:0000000000007EE8
.text:0000000000007EE8 loc_7EE8:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000007EE8                 call    _free
.text:0000000000007EED                 xor     eax, eax
.text:0000000000007EEF                 pop     rbx
.text:0000000000007EF0                 retn
.text:0000000000007EF1 ; ---------------------------------------------------------------------------
.text:0000000000007EF1
.text:0000000000007EF1 loc_7EF1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000007EF1                 call    xalloc_die
.text:0000000000007EF1 ; } // starts at 7EC0
.text:0000000000007EF1 xrealloc        endp
.text:0000000000007EF1
.text:0000000000007EF1 ; ---------------------------------------------------------------------------
.text:0000000000007EF6                 align 20h
.text:0000000000007F00
.text:0000000000007F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F00
.text:0000000000007F00 ; Attributes: info_from_lumina
.text:0000000000007F00
.text:0000000000007F00 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000007F00                 public xnrealloc
.text:0000000000007F00 xnrealloc       proc near
.text:0000000000007F00 ; __unwind {
.text:0000000000007F00                 mov     rax, rsi
.text:0000000000007F03                 mul     rdx
.text:0000000000007F06                 mov     rsi, rax
.text:0000000000007F09                 seto    al
.text:0000000000007F0C                 test    rsi, rsi
.text:0000000000007F0F                 js      short loc_7F1B
.text:0000000000007F11                 movzx   eax, al
.text:0000000000007F14                 test    rax, rax
.text:0000000000007F17                 jnz     short loc_7F1B
.text:0000000000007F19                 jmp     short xrealloc
.text:0000000000007F1B ; ---------------------------------------------------------------------------
.text:0000000000007F1B
.text:0000000000007F1B loc_7F1B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000007F1B                                         ; xnrealloc+17↑j
.text:0000000000007F1B                 sub     rsp, 8
.text:0000000000007F1F                 call    xalloc_die
.text:0000000000007F1F ; } // starts at 7F00
.text:0000000000007F1F xnrealloc       endp
.text:0000000000007F1F
.text:0000000000007F1F ; ---------------------------------------------------------------------------
.text:0000000000007F24                 align 10h
.text:0000000000007F30
.text:0000000000007F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F30
.text:0000000000007F30 ; Attributes: info_from_lumina
.text:0000000000007F30
.text:0000000000007F30 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000007F30                 public x2nrealloc
.text:0000000000007F30 x2nrealloc      proc near
.text:0000000000007F30 ; __unwind {
.text:0000000000007F30                 test    rdi, rdi
.text:0000000000007F33                 mov     r9, rdx
.text:0000000000007F36                 mov     rcx, [rsi]
.text:0000000000007F39                 jz      short loc_7F70
.text:0000000000007F3B                 xor     edx, edx
.text:0000000000007F3D                 mov     rax, 5555555555555554h
.text:0000000000007F47                 div     r9
.text:0000000000007F4A                 cmp     rax, rcx
.text:0000000000007F4D                 jbe     short loc_7F8B
.text:0000000000007F4F                 mov     rax, rcx
.text:0000000000007F52                 shr     rax, 1
.text:0000000000007F55                 lea     rcx, [rax+rcx+1]
.text:0000000000007F5A
.text:0000000000007F5A loc_7F5A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000007F5A                 mov     [rsi], rcx
.text:0000000000007F5D                 imul    rcx, r9
.text:0000000000007F61                 mov     rsi, rcx
.text:0000000000007F64                 jmp     xrealloc
.text:0000000000007F64 ; ---------------------------------------------------------------------------
.text:0000000000007F69                 align 10h
.text:0000000000007F70
.text:0000000000007F70 loc_7F70:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000007F70                 test    rcx, rcx
.text:0000000000007F73                 jz      short loc_7F98
.text:0000000000007F75
.text:0000000000007F75 loc_7F75:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000007F75                 mov     rax, rcx
.text:0000000000007F78                 mul     r9
.text:0000000000007F7B                 seto    dl
.text:0000000000007F7E                 test    rax, rax
.text:0000000000007F81                 movzx   edx, dl
.text:0000000000007F84                 js      short loc_7F8B
.text:0000000000007F86                 test    rdx, rdx
.text:0000000000007F89                 jz      short loc_7F5A
.text:0000000000007F8B
.text:0000000000007F8B loc_7F8B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000007F8B                                         ; x2nrealloc+54↑j
.text:0000000000007F8B                 sub     rsp, 8
.text:0000000000007F8F                 call    xalloc_die
.text:0000000000007F8F ; ---------------------------------------------------------------------------
.text:0000000000007F94                 align 8
.text:0000000000007F98
.text:0000000000007F98 loc_7F98:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000007F98                 xor     edx, edx
.text:0000000000007F9A                 mov     eax, 80h
.text:0000000000007F9F                 xor     r8d, r8d
.text:0000000000007FA2                 div     r9
.text:0000000000007FA5                 test    rax, rax
.text:0000000000007FA8                 setz    r8b
.text:0000000000007FAC                 lea     rcx, [r8+rax]
.text:0000000000007FB0                 jmp     short loc_7F75
.text:0000000000007FB0 ; } // starts at 7F30
.text:0000000000007FB0 x2nrealloc      endp
.text:0000000000007FB0
.text:0000000000007FB0 ; ---------------------------------------------------------------------------
.text:0000000000007FB2                 align 20h
.text:0000000000007FC0
.text:0000000000007FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007FC0
.text:0000000000007FC0 ; Attributes: info_from_lumina
.text:0000000000007FC0
.text:0000000000007FC0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000007FC0                 public x2realloc
.text:0000000000007FC0 x2realloc       proc near               ; CODE XREF: main+BAA↑p
.text:0000000000007FC0 ; __unwind {
.text:0000000000007FC0                 test    rdi, rdi
.text:0000000000007FC3                 mov     rax, [rsi]
.text:0000000000007FC6                 jz      short loc_7FF0
.text:0000000000007FC8                 mov     rdx, 5555555555555553h
.text:0000000000007FD2                 cmp     rax, rdx
.text:0000000000007FD5                 ja      short loc_8001
.text:0000000000007FD7                 mov     rdx, rax
.text:0000000000007FDA                 shr     rdx, 1
.text:0000000000007FDD                 lea     rax, [rdx+rax+1]
.text:0000000000007FE2
.text:0000000000007FE2 loc_7FE2:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000007FE2                 mov     [rsi], rax
.text:0000000000007FE5                 mov     rsi, rax
.text:0000000000007FE8                 jmp     xrealloc
.text:0000000000007FE8 ; ---------------------------------------------------------------------------
.text:0000000000007FED                 align 10h
.text:0000000000007FF0
.text:0000000000007FF0 loc_7FF0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000007FF0                 test    rax, rax
.text:0000000000007FF3                 mov     edx, 80h
.text:0000000000007FF8                 cmovz   rax, rdx
.text:0000000000007FFC                 test    rax, rax
.text:0000000000007FFF                 jns     short loc_7FE2
.text:0000000000008001
.text:0000000000008001 loc_8001:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000008001                 sub     rsp, 8
.text:0000000000008005                 call    xalloc_die
.text:0000000000008005 ; } // starts at 7FC0
.text:0000000000008005 x2realloc       endp
.text:0000000000008005
.text:0000000000008005 ; ---------------------------------------------------------------------------
.text:000000000000800A                 align 10h
.text:0000000000008010
.text:0000000000008010 ; =============== S U B R O U T I N E =======================================
.text:0000000000008010
.text:0000000000008010
.text:0000000000008010 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000008010                 public xzalloc
.text:0000000000008010 xzalloc         proc near
.text:0000000000008010 ; __unwind {
.text:0000000000008010                 push    rbx
.text:0000000000008011                 mov     rbx, rdi
.text:0000000000008014                 call    xmalloc
.text:0000000000008019                 mov     rdx, rbx        ; n
.text:000000000000801C                 xor     esi, esi        ; c
.text:000000000000801E                 mov     rdi, rax        ; s
.text:0000000000008021                 pop     rbx
.text:0000000000008022                 jmp     _memset
.text:0000000000008022 ; } // starts at 8010
.text:0000000000008022 xzalloc         endp
.text:0000000000008022
.text:0000000000008022 ; ---------------------------------------------------------------------------
.text:0000000000008027                 align 10h
.text:0000000000008030
.text:0000000000008030 ; =============== S U B R O U T I N E =======================================
.text:0000000000008030
.text:0000000000008030 ; Attributes: info_from_lumina
.text:0000000000008030
.text:0000000000008030 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000008030                 public xcalloc
.text:0000000000008030 xcalloc         proc near
.text:0000000000008030 ; __unwind {
.text:0000000000008030                 mov     rax, rdi
.text:0000000000008033                 sub     rsp, 8
.text:0000000000008037                 mul     rsi
.text:000000000000803A                 seto    dl
.text:000000000000803D                 test    rax, rax
.text:0000000000008040                 js      short loc_8059
.text:0000000000008042                 movzx   edx, dl
.text:0000000000008045                 test    rdx, rdx
.text:0000000000008048                 jnz     short loc_8059
.text:000000000000804A                 call    _calloc
.text:000000000000804F                 test    rax, rax
.text:0000000000008052                 jz      short loc_8059
.text:0000000000008054                 add     rsp, 8
.text:0000000000008058                 retn
.text:0000000000008059 ; ---------------------------------------------------------------------------
.text:0000000000008059
.text:0000000000008059 loc_8059:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000008059                                         ; xcalloc+18↑j ...
.text:0000000000008059                 call    xalloc_die
.text:0000000000008059 ; } // starts at 8030
.text:0000000000008059 xcalloc         endp
.text:0000000000008059
.text:0000000000008059 ; ---------------------------------------------------------------------------
.text:000000000000805E                 align 20h
.text:0000000000008060
.text:0000000000008060 ; =============== S U B R O U T I N E =======================================
.text:0000000000008060
.text:0000000000008060 ; Attributes: info_from_lumina
.text:0000000000008060
.text:0000000000008060 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000008060                 public xmemdup
.text:0000000000008060 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000008060                                         ; xstrdup+11↓j
.text:0000000000008060 ; __unwind {
.text:0000000000008060                 push    rbp
.text:0000000000008061                 push    rbx
.text:0000000000008062                 mov     rbp, rdi
.text:0000000000008065                 mov     rdi, rsi
.text:0000000000008068                 mov     rbx, rsi
.text:000000000000806B                 sub     rsp, 8
.text:000000000000806F                 call    xmalloc
.text:0000000000008074                 add     rsp, 8
.text:0000000000008078                 mov     rdx, rbx        ; n
.text:000000000000807B                 mov     rsi, rbp        ; src
.text:000000000000807E                 pop     rbx
.text:000000000000807F                 pop     rbp
.text:0000000000008080                 mov     rdi, rax        ; dest
.text:0000000000008083                 jmp     _memcpy
.text:0000000000008083 ; } // starts at 8060
.text:0000000000008083 xmemdup         endp
.text:0000000000008083
.text:0000000000008083 ; ---------------------------------------------------------------------------
.text:0000000000008088                 align 10h
.text:0000000000008090
.text:0000000000008090 ; =============== S U B R O U T I N E =======================================
.text:0000000000008090
.text:0000000000008090
.text:0000000000008090 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000008090                 public xstrdup
.text:0000000000008090 xstrdup         proc near
.text:0000000000008090 ; __unwind {
.text:0000000000008090                 push    rbx
.text:0000000000008091                 mov     rbx, rdi
.text:0000000000008094                 call    _strlen
.text:0000000000008099                 mov     rdi, rbx        ; src
.text:000000000000809C                 lea     rsi, [rax+1]    ; n
.text:00000000000080A0                 pop     rbx
.text:00000000000080A1                 jmp     short xmemdup
.text:00000000000080A1 ; } // starts at 8090
.text:00000000000080A1 xstrdup         endp
.text:00000000000080A1
.text:00000000000080A1 ; ---------------------------------------------------------------------------
.text:00000000000080A3                 align 10h
.text:00000000000080B0
.text:00000000000080B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080B0
.text:00000000000080B0 ; Attributes: noreturn info_from_lumina
.text:00000000000080B0
.text:00000000000080B0 ; void __cdecl xalloc_die()
.text:00000000000080B0                 public xalloc_die
.text:00000000000080B0 xalloc_die      proc near               ; CODE XREF: main:loc_2C6A↑p
.text:00000000000080B0                                         ; decode_format_string:loc_3DF9↑p ...
.text:00000000000080B0 ; __unwind {
.text:00000000000080B0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000080B7                 sub     rsp, 8
.text:00000000000080BB                 mov     edx, 5          ; category
.text:00000000000080C0                 xor     edi, edi        ; domainname
.text:00000000000080C2                 call    _dcgettext
.text:00000000000080C7                 mov     edi, cs:exit_failure ; status
.text:00000000000080CD                 lea     rdx, aS_2+2     ; format
.text:00000000000080D4                 mov     rcx, rax
.text:00000000000080D7                 xor     esi, esi        ; errnum
.text:00000000000080D9                 xor     eax, eax
.text:00000000000080DB                 call    _error
.text:00000000000080E0                 call    _abort
.text:00000000000080E0 ; } // starts at 80B0
.text:00000000000080E0 xalloc_die      endp
.text:00000000000080E0
.text:00000000000080E0 ; ---------------------------------------------------------------------------
.text:00000000000080E5                 align 10h
.text:00000000000080F0
.text:00000000000080F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080F0
.text:00000000000080F0
.text:00000000000080F0                 public xvprintf
.text:00000000000080F0 xvprintf        proc near               ; CODE XREF: xasprintf+94↓p
.text:00000000000080F0 ; __unwind {
.text:00000000000080F0                 push    rbp
.text:00000000000080F1                 push    rbx
.text:00000000000080F2                 sub     rsp, 8
.text:00000000000080F6                 call    rpl_vprintf
.text:00000000000080FB                 test    eax, eax
.text:00000000000080FD                 mov     ebx, eax
.text:00000000000080FF                 js      short loc_8110
.text:0000000000008101
.text:0000000000008101 loc_8101:                               ; CODE XREF: xvprintf+2E↓j
.text:0000000000008101                                         ; xvprintf+5D↓j
.text:0000000000008101                 add     rsp, 8
.text:0000000000008105                 mov     eax, ebx
.text:0000000000008107                 pop     rbx
.text:0000000000008108                 pop     rbp
.text:0000000000008109                 retn
.text:0000000000008109 ; ---------------------------------------------------------------------------
.text:000000000000810A                 align 10h
.text:0000000000008110
.text:0000000000008110 loc_8110:                               ; CODE XREF: xvprintf+F↑j
.text:0000000000008110                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000008117                 call    _ferror
.text:000000000000811C                 test    eax, eax
.text:000000000000811E                 jnz     short loc_8101
.text:0000000000008120                 lea     rsi, aCannotPerformF ; "cannot perform formatted output"
.text:0000000000008127                 xor     edi, edi        ; domainname
.text:0000000000008129                 mov     edx, 5          ; category
.text:000000000000812E                 call    _dcgettext
.text:0000000000008133                 mov     rbp, rax
.text:0000000000008136                 call    ___errno_location
.text:000000000000813B                 mov     edi, cs:exit_failure ; status
.text:0000000000008141                 mov     esi, [rax]      ; errnum
.text:0000000000008143                 mov     rdx, rbp        ; format
.text:0000000000008146                 xor     eax, eax
.text:0000000000008148                 call    _error
.text:000000000000814D                 jmp     short loc_8101
.text:000000000000814D ; } // starts at 80F0
.text:000000000000814D xvprintf        endp
.text:000000000000814D
.text:000000000000814D ; ---------------------------------------------------------------------------
.text:000000000000814F                 align 10h
.text:0000000000008150
.text:0000000000008150 ; =============== S U B R O U T I N E =======================================
.text:0000000000008150
.text:0000000000008150 ; Attributes: info_from_lumina
.text:0000000000008150
.text:0000000000008150 ; char *xasprintf(const char *fmt, ...)
.text:0000000000008150                 public xasprintf
.text:0000000000008150 xasprintf       proc near               ; CODE XREF: print_named_ascii+81↑p
.text:0000000000008150                                         ; print_long_long+66↑p ...
.text:0000000000008150
.text:0000000000008150 var_D8          = dword ptr -0D8h
.text:0000000000008150 var_D4          = dword ptr -0D4h
.text:0000000000008150 var_D0          = qword ptr -0D0h
.text:0000000000008150 var_C8          = qword ptr -0C8h
.text:0000000000008150 var_C0          = qword ptr -0C0h
.text:0000000000008150 var_B8          = byte ptr -0B8h
.text:0000000000008150 var_B0          = qword ptr -0B0h
.text:0000000000008150 var_A8          = qword ptr -0A8h
.text:0000000000008150 var_A0          = qword ptr -0A0h
.text:0000000000008150 var_98          = qword ptr -98h
.text:0000000000008150 var_90          = qword ptr -90h
.text:0000000000008150 var_88          = xmmword ptr -88h
.text:0000000000008150 var_78          = xmmword ptr -78h
.text:0000000000008150 var_68          = xmmword ptr -68h
.text:0000000000008150 var_58          = xmmword ptr -58h
.text:0000000000008150 var_48          = xmmword ptr -48h
.text:0000000000008150 var_38          = xmmword ptr -38h
.text:0000000000008150 var_28          = xmmword ptr -28h
.text:0000000000008150 var_18          = xmmword ptr -18h
.text:0000000000008150 arg_0           = byte ptr  8
.text:0000000000008150
.text:0000000000008150 ; __unwind {
.text:0000000000008150                 sub     rsp, 0D8h
.text:0000000000008157                 test    al, al
.text:0000000000008159                 mov     [rsp+0D8h+var_B0], rsi
.text:000000000000815E                 mov     [rsp+0D8h+var_A8], rdx
.text:0000000000008163                 mov     [rsp+0D8h+var_A0], rcx
.text:0000000000008168                 mov     [rsp+0D8h+var_98], r8
.text:000000000000816D                 mov     [rsp+0D8h+var_90], r9
.text:0000000000008172                 jz      short loc_81AB
.text:0000000000008174                 movaps  [rsp+0D8h+var_88], xmm0
.text:0000000000008179                 movaps  [rsp+0D8h+var_78], xmm1
.text:000000000000817E                 movaps  [rsp+0D8h+var_68], xmm2
.text:0000000000008183                 movaps  [rsp+0D8h+var_58], xmm3
.text:000000000000818B                 movaps  [rsp+0D8h+var_48], xmm4
.text:0000000000008193                 movaps  [rsp+0D8h+var_38], xmm5
.text:000000000000819B                 movaps  [rsp+0D8h+var_28], xmm6
.text:00000000000081A3                 movaps  [rsp+0D8h+var_18], xmm7
.text:00000000000081AB
.text:00000000000081AB loc_81AB:                               ; CODE XREF: xasprintf+22↑j
.text:00000000000081AB                 mov     rax, fs:28h
.text:00000000000081B4                 mov     [rsp+0D8h+var_C0], rax
.text:00000000000081B9                 xor     eax, eax
.text:00000000000081BB                 lea     rax, [rsp+0D8h+arg_0]
.text:00000000000081C3                 mov     rsi, rsp
.text:00000000000081C6                 mov     [rsp+0D8h+var_D0], rax
.text:00000000000081CB                 lea     rax, [rsp+0D8h+var_B8]
.text:00000000000081D0                 mov     [rsp+0D8h+var_D8], 8
.text:00000000000081D7                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:00000000000081DF                 mov     [rsp+0D8h+var_C8], rax
.text:00000000000081E4                 call    xvprintf
.text:00000000000081E9                 mov     rdx, [rsp+0D8h+var_C0]
.text:00000000000081EE                 xor     rdx, fs:28h
.text:00000000000081F7                 jnz     short loc_8201
.text:00000000000081F9                 add     rsp, 0D8h
.text:0000000000008200                 retn
.text:0000000000008201 ; ---------------------------------------------------------------------------
.text:0000000000008201
.text:0000000000008201 loc_8201:                               ; CODE XREF: xasprintf+A7↑j
.text:0000000000008201                 call    ___stack_chk_fail
.text:0000000000008201 ; } // starts at 8150
.text:0000000000008201 xasprintf       endp
.text:0000000000008201
.text:0000000000008201 ; ---------------------------------------------------------------------------
.text:0000000000008206                 align 10h
.text:0000000000008210
.text:0000000000008210 ; =============== S U B R O U T I N E =======================================
.text:0000000000008210
.text:0000000000008210
.text:0000000000008210 ; __int64 __fastcall xvfprintf(FILE *stream)
.text:0000000000008210                 public xvfprintf
.text:0000000000008210 xvfprintf       proc near               ; CODE XREF: gzprintf+8F↓p
.text:0000000000008210 ; __unwind {
.text:0000000000008210                 push    rbp
.text:0000000000008211                 push    rbx
.text:0000000000008212                 mov     rbp, rdi
.text:0000000000008215                 sub     rsp, 8
.text:0000000000008219                 call    rpl_vfprintf
.text:000000000000821E                 test    eax, eax
.text:0000000000008220                 mov     ebx, eax
.text:0000000000008222                 js      short loc_8230
.text:0000000000008224
.text:0000000000008224 loc_8224:                               ; CODE XREF: xvfprintf+2A↓j
.text:0000000000008224                                         ; xvfprintf+59↓j
.text:0000000000008224                 add     rsp, 8
.text:0000000000008228                 mov     eax, ebx
.text:000000000000822A                 pop     rbx
.text:000000000000822B                 pop     rbp
.text:000000000000822C                 retn
.text:000000000000822C ; ---------------------------------------------------------------------------
.text:000000000000822D                 align 10h
.text:0000000000008230
.text:0000000000008230 loc_8230:                               ; CODE XREF: xvfprintf+12↑j
.text:0000000000008230                 mov     rdi, rbp        ; stream
.text:0000000000008233                 call    _ferror
.text:0000000000008238                 test    eax, eax
.text:000000000000823A                 jnz     short loc_8224
.text:000000000000823C                 lea     rsi, aCannotPerformF ; "cannot perform formatted output"
.text:0000000000008243                 xor     edi, edi        ; domainname
.text:0000000000008245                 mov     edx, 5          ; category
.text:000000000000824A                 call    _dcgettext
.text:000000000000824F                 mov     rbp, rax
.text:0000000000008252                 call    ___errno_location
.text:0000000000008257                 mov     edi, cs:exit_failure ; status
.text:000000000000825D                 mov     esi, [rax]      ; errnum
.text:000000000000825F                 mov     rdx, rbp        ; format
.text:0000000000008262                 xor     eax, eax
.text:0000000000008264                 call    _error
.text:0000000000008269                 jmp     short loc_8224
.text:0000000000008269 ; } // starts at 8210
.text:0000000000008269 xvfprintf       endp
.text:0000000000008269
.text:0000000000008269 ; ---------------------------------------------------------------------------
.text:000000000000826B                 align 10h
.text:0000000000008270
.text:0000000000008270 ; =============== S U B R O U T I N E =======================================
.text:0000000000008270
.text:0000000000008270 ; Attributes: info_from_lumina
.text:0000000000008270
.text:0000000000008270 ; int gzprintf(gzFile_0 file, const char *format, ...)
.text:0000000000008270                 public gzprintf
.text:0000000000008270 gzprintf        proc near
.text:0000000000008270
.text:0000000000008270 var_D8          = dword ptr -0D8h
.text:0000000000008270 var_D4          = dword ptr -0D4h
.text:0000000000008270 var_D0          = qword ptr -0D0h
.text:0000000000008270 var_C8          = qword ptr -0C8h
.text:0000000000008270 var_C0          = qword ptr -0C0h
.text:0000000000008270 var_B8          = byte ptr -0B8h
.text:0000000000008270 var_A8          = qword ptr -0A8h
.text:0000000000008270 var_A0          = qword ptr -0A0h
.text:0000000000008270 var_98          = qword ptr -98h
.text:0000000000008270 var_90          = qword ptr -90h
.text:0000000000008270 var_88          = xmmword ptr -88h
.text:0000000000008270 var_78          = xmmword ptr -78h
.text:0000000000008270 var_68          = xmmword ptr -68h
.text:0000000000008270 var_58          = xmmword ptr -58h
.text:0000000000008270 var_48          = xmmword ptr -48h
.text:0000000000008270 var_38          = xmmword ptr -38h
.text:0000000000008270 var_28          = xmmword ptr -28h
.text:0000000000008270 var_18          = xmmword ptr -18h
.text:0000000000008270 arg_0           = byte ptr  8
.text:0000000000008270
.text:0000000000008270 ; __unwind {
.text:0000000000008270                 sub     rsp, 0D8h
.text:0000000000008277                 test    al, al
.text:0000000000008279                 mov     [rsp+0D8h+var_A8], rdx
.text:000000000000827E                 mov     [rsp+0D8h+var_A0], rcx
.text:0000000000008283                 mov     [rsp+0D8h+var_98], r8
.text:0000000000008288                 mov     [rsp+0D8h+var_90], r9
.text:000000000000828D                 jz      short loc_82C6
.text:000000000000828F                 movaps  [rsp+0D8h+var_88], xmm0
.text:0000000000008294                 movaps  [rsp+0D8h+var_78], xmm1
.text:0000000000008299                 movaps  [rsp+0D8h+var_68], xmm2
.text:000000000000829E                 movaps  [rsp+0D8h+var_58], xmm3
.text:00000000000082A6                 movaps  [rsp+0D8h+var_48], xmm4
.text:00000000000082AE                 movaps  [rsp+0D8h+var_38], xmm5
.text:00000000000082B6                 movaps  [rsp+0D8h+var_28], xmm6
.text:00000000000082BE                 movaps  [rsp+0D8h+var_18], xmm7
.text:00000000000082C6
.text:00000000000082C6 loc_82C6:                               ; CODE XREF: gzprintf+1D↑j
.text:00000000000082C6                 mov     rax, fs:28h
.text:00000000000082CF                 mov     [rsp+0D8h+var_C0], rax
.text:00000000000082D4                 xor     eax, eax
.text:00000000000082D6                 lea     rax, [rsp+0D8h+arg_0]
.text:00000000000082DE                 mov     rdx, rsp
.text:00000000000082E1                 mov     [rsp+0D8h+var_D0], rax
.text:00000000000082E6                 lea     rax, [rsp+0D8h+var_B8]
.text:00000000000082EB                 mov     [rsp+0D8h+var_D8], 10h
.text:00000000000082F2                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:00000000000082FA                 mov     [rsp+0D8h+var_C8], rax
.text:00000000000082FF                 call    xvfprintf
.text:0000000000008304                 mov     rcx, [rsp+0D8h+var_C0]
.text:0000000000008309                 xor     rcx, fs:28h
.text:0000000000008312                 jnz     short loc_831C
.text:0000000000008314                 add     rsp, 0D8h
.text:000000000000831B                 retn
.text:000000000000831C ; ---------------------------------------------------------------------------
.text:000000000000831C
.text:000000000000831C loc_831C:                               ; CODE XREF: gzprintf+A2↑j
.text:000000000000831C                 call    ___stack_chk_fail
.text:000000000000831C ; } // starts at 8270
.text:000000000000831C gzprintf        endp
.text:000000000000831C
.text:000000000000831C ; ---------------------------------------------------------------------------
.text:0000000000008321                 align 10h
.text:0000000000008330
.text:0000000000008330 ; =============== S U B R O U T I N E =======================================
.text:0000000000008330
.text:0000000000008330 ; Attributes: noreturn info_from_lumina
.text:0000000000008330
.text:0000000000008330 ; void __fastcall xstrtol_fatal(strtol_error err, int opt_idx, char c, const option *long_options, const char *arg)
.text:0000000000008330                 public xstrtol_fatal
.text:0000000000008330 xstrtol_fatal   proc near               ; CODE XREF: main+446↑p
.text:0000000000008330                                         ; main+118D↑p ...
.text:0000000000008330
.text:0000000000008330 var_32          = byte ptr -32h
.text:0000000000008330 var_31          = byte ptr -31h
.text:0000000000008330 var_30          = qword ptr -30h
.text:0000000000008330
.text:0000000000008330 ; __unwind {
.text:0000000000008330                 push    r13
.text:0000000000008332                 push    r12
.text:0000000000008334                 mov     r10d, esi
.text:0000000000008337                 push    rbp
.text:0000000000008338                 push    rbx
.text:0000000000008339                 mov     r12, r8
.text:000000000000833C                 sub     rsp, 18h
.text:0000000000008340                 mov     rax, fs:28h
.text:0000000000008349                 mov     [rsp+38h+var_30], rax
.text:000000000000834E                 xor     eax, eax
.text:0000000000008350                 cmp     edi, 3
.text:0000000000008353                 mov     ebp, cs:exit_failure
.text:0000000000008359                 ja      short loc_83B4
.text:000000000000835B                 cmp     edi, 2
.text:000000000000835E                 jnb     short loc_83AB
.text:0000000000008360                 sub     edi, 1
.text:0000000000008363                 lea     rsi, aSSArgumentSToo ; "%s%s argument '%s' too large"
.text:000000000000836A                 jnz     short loc_83A6
.text:000000000000836C
.text:000000000000836C loc_836C:                               ; CODE XREF: xstrtol_fatal+82↓j
.text:000000000000836C                                         ; xstrtol_fatal+8E↓j
.text:000000000000836C                 test    r10d, r10d
.text:000000000000836F                 movsxd  rax, r10d
.text:0000000000008372                 js      short loc_83C2
.text:0000000000008374                 shl     rax, 5
.text:0000000000008378                 lea     rbx, asc_D138   ; "--"
.text:000000000000837F                 mov     r13, [rcx+rax]
.text:0000000000008383
.text:0000000000008383 loc_8383:                               ; CODE XREF: xstrtol_fatal+AA↓j
.text:0000000000008383                 mov     edx, 5          ; category
.text:0000000000008388                 xor     edi, edi        ; domainname
.text:000000000000838A                 call    _dcgettext
.text:000000000000838F                 mov     r9, r12
.text:0000000000008392                 mov     rdx, rax        ; format
.text:0000000000008395                 mov     r8, r13
.text:0000000000008398                 mov     rcx, rbx
.text:000000000000839B                 xor     esi, esi        ; errnum
.text:000000000000839D                 mov     edi, ebp        ; status
.text:000000000000839F                 xor     eax, eax
.text:00000000000083A1                 call    _error
.text:00000000000083A6
.text:00000000000083A6 loc_83A6:                               ; CODE XREF: xstrtol_fatal+3A↑j
.text:00000000000083A6                                         ; xstrtol_fatal+90↓j
.text:00000000000083A6                 call    _abort
.text:00000000000083AB ; ---------------------------------------------------------------------------
.text:00000000000083AB
.text:00000000000083AB loc_83AB:                               ; CODE XREF: xstrtol_fatal+2E↑j
.text:00000000000083AB                 lea     rsi, aInvalidSuffixI ; "invalid suffix in %s%s argument '%s'"
.text:00000000000083B2                 jmp     short loc_836C
.text:00000000000083B4 ; ---------------------------------------------------------------------------
.text:00000000000083B4
.text:00000000000083B4 loc_83B4:                               ; CODE XREF: xstrtol_fatal+29↑j
.text:00000000000083B4                 cmp     edi, 4
.text:00000000000083B7                 lea     rsi, aInvalidSSArgum ; "invalid %s%s argument '%s'"
.text:00000000000083BE                 jz      short loc_836C
.text:00000000000083C0                 jmp     short loc_83A6
.text:00000000000083C2 ; ---------------------------------------------------------------------------
.text:00000000000083C2
.text:00000000000083C2 loc_83C2:                               ; CODE XREF: xstrtol_fatal+42↑j
.text:00000000000083C2                 lea     rbx, asc_D138   ; "--"
.text:00000000000083C9                 mov     [rsp+38h+var_32], dl
.text:00000000000083CD                 mov     [rsp+38h+var_31], 0
.text:00000000000083D2                 lea     r13, [rsp+38h+var_32]
.text:00000000000083D7                 sub     rbx, rax
.text:00000000000083DA                 jmp     short loc_8383
.text:00000000000083DA ; } // starts at 8330
.text:00000000000083DA xstrtol_fatal   endp
.text:00000000000083DA
.text:00000000000083DA ; ---------------------------------------------------------------------------
.text:00000000000083DC                 align 20h
.text:00000000000083E0
.text:00000000000083E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083E0
.text:00000000000083E0
.text:00000000000083E0 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:00000000000083E0                 public xstrtoumax
.text:00000000000083E0 xstrtoumax      proc near               ; CODE XREF: main+23B↑p
.text:00000000000083E0                                         ; main+2D1↑p ...
.text:00000000000083E0
.text:00000000000083E0 base            = dword ptr -50h
.text:00000000000083E0 endptr          = qword ptr -48h
.text:00000000000083E0 var_40          = qword ptr -40h
.text:00000000000083E0
.text:00000000000083E0 ; __unwind {
.text:00000000000083E0                 push    r15
.text:00000000000083E2                 push    r14
.text:00000000000083E4                 push    r13
.text:00000000000083E6                 push    r12
.text:00000000000083E8                 push    rbp
.text:00000000000083E9                 push    rbx
.text:00000000000083EA                 sub     rsp, 28h
.text:00000000000083EE                 mov     rax, fs:28h
.text:00000000000083F7                 mov     [rsp+58h+var_40], rax
.text:00000000000083FC                 xor     eax, eax
.text:00000000000083FE                 cmp     edx, 24h ; '$'
.text:0000000000008401                 ja      loc_8765
.text:0000000000008407                 lea     rax, [rsp+58h+endptr]
.text:000000000000840C                 mov     r15, rsi
.text:000000000000840F                 test    rsi, rsi
.text:0000000000008412                 mov     rbp, rdi
.text:0000000000008415                 mov     [rsp+58h+base], edx
.text:0000000000008419                 mov     r14, rcx
.text:000000000000841C                 mov     r13, r8
.text:000000000000841F                 cmovz   r15, rax
.text:0000000000008423                 call    ___errno_location
.text:0000000000008428                 mov     dword ptr [rax], 0
.text:000000000000842E                 mov     r12, rax
.text:0000000000008431                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000008435                 call    ___ctype_b_loc
.text:000000000000843A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000843E                 mov     rsi, [rax]
.text:0000000000008441                 mov     rax, rbp
.text:0000000000008444                 jmp     short loc_8457
.text:0000000000008444 ; ---------------------------------------------------------------------------
.text:0000000000008446                 align 10h
.text:0000000000008450
.text:0000000000008450 loc_8450:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000008450                 add     rax, 1
.text:0000000000008454                 movzx   ebx, byte ptr [rax]
.text:0000000000008457
.text:0000000000008457 loc_8457:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000008457                 movzx   ecx, bl
.text:000000000000845A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000845F                 jnz     short loc_8450
.text:0000000000008461                 cmp     bl, 2Dh ; '-'
.text:0000000000008464                 jz      short loc_84B8
.text:0000000000008466                 xor     ecx, ecx        ; group
.text:0000000000008468                 mov     rsi, r15        ; endptr
.text:000000000000846B                 mov     rdi, rbp        ; nptr
.text:000000000000846E                 call    ___strtoul_internal
.text:0000000000008473                 mov     rcx, [r15]
.text:0000000000008476                 mov     rbx, rax
.text:0000000000008479                 cmp     rcx, rbp
.text:000000000000847C                 jz      short loc_84A8
.text:000000000000847E                 mov     eax, [r12]
.text:0000000000008482                 test    eax, eax
.text:0000000000008484                 jz      short loc_84E8
.text:0000000000008486                 cmp     eax, 22h ; '"'
.text:0000000000008489                 mov     ebp, 1
.text:000000000000848E                 jnz     short loc_84B8
.text:0000000000008490
.text:0000000000008490 loc_8490:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000008490                 test    r13, r13
.text:0000000000008493                 jz      short loc_849E
.text:0000000000008495                 movzx   r12d, byte ptr [rcx]
.text:0000000000008499                 test    r12b, r12b
.text:000000000000849C                 jnz     short loc_8517
.text:000000000000849E
.text:000000000000849E loc_849E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000849E                 mov     [r14], rbx
.text:00000000000084A1                 jmp     short loc_84BD
.text:00000000000084A1 ; ---------------------------------------------------------------------------
.text:00000000000084A3                 align 8
.text:00000000000084A8
.text:00000000000084A8 loc_84A8:                               ; CODE XREF: xstrtoumax+9C↑j
.text:00000000000084A8                 test    r13, r13
.text:00000000000084AB                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000084B0                 jnz     short loc_84F0
.text:00000000000084B2                 nop     word ptr [rax+rax+00h]
.text:00000000000084B8
.text:00000000000084B8 loc_84B8:                               ; CODE XREF: xstrtoumax+84↑j
.text:00000000000084B8                                         ; xstrtoumax+AE↑j ...
.text:00000000000084B8                 mov     ebp, 4
.text:00000000000084BD
.text:00000000000084BD loc_84BD:                               ; CODE XREF: xstrtoumax+C1↑j
.text:00000000000084BD                                         ; xstrtoumax+217↓j ...
.text:00000000000084BD                 mov     rdi, [rsp+58h+var_40]
.text:00000000000084C2                 xor     rdi, fs:28h
.text:00000000000084CB                 mov     eax, ebp
.text:00000000000084CD                 jnz     loc_8760
.text:00000000000084D3                 add     rsp, 28h
.text:00000000000084D7                 pop     rbx
.text:00000000000084D8                 pop     rbp
.text:00000000000084D9                 pop     r12
.text:00000000000084DB                 pop     r13
.text:00000000000084DD                 pop     r14
.text:00000000000084DF                 pop     r15
.text:00000000000084E1                 retn
.text:00000000000084E1 ; ---------------------------------------------------------------------------
.text:00000000000084E2                 align 8
.text:00000000000084E8
.text:00000000000084E8 loc_84E8:                               ; CODE XREF: xstrtoumax+A4↑j
.text:00000000000084E8                 xor     ebp, ebp
.text:00000000000084EA                 jmp     short loc_8490
.text:00000000000084EA ; ---------------------------------------------------------------------------
.text:00000000000084EC                 align 10h
.text:00000000000084F0
.text:00000000000084F0 loc_84F0:                               ; CODE XREF: xstrtoumax+D0↑j
.text:00000000000084F0                 movzx   r12d, byte ptr [rbp+0]
.text:00000000000084F5                 test    r12b, r12b
.text:00000000000084F8                 jz      short loc_84B8
.text:00000000000084FA                 movsx   esi, r12b       ; c
.text:00000000000084FE                 mov     rdi, r13        ; s
.text:0000000000008501                 xor     ebp, ebp
.text:0000000000008503                 call    _strchr
.text:0000000000008508                 test    rax, rax
.text:000000000000850B                 mov     ebx, 1
.text:0000000000008510                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008515                 jz      short loc_84B8
.text:0000000000008517
.text:0000000000008517 loc_8517:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000008517                 movsx   esi, r12b       ; c
.text:000000000000851B                 mov     rdi, r13        ; s
.text:000000000000851E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008523                 call    _strchr
.text:0000000000008528                 test    rax, rax
.text:000000000000852B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008530                 jz      def_85B6        ; jumptable 00000000000085B6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008536                 lea     eax, [r12-45h]
.text:000000000000853B                 cmp     al, 2Fh ; '/'
.text:000000000000853D                 ja      short loc_8590
.text:000000000000853F                 mov     rdx, 814400308945h
.text:0000000000008549                 bt      rdx, rax
.text:000000000000854D                 jnb     short loc_8590
.text:000000000000854F                 mov     esi, 30h ; '0'  ; c
.text:0000000000008554                 mov     rdi, r13        ; s
.text:0000000000008557                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000855C                 call    _strchr
.text:0000000000008561                 test    rax, rax
.text:0000000000008564                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008569                 jz      short loc_8590
.text:000000000000856B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000856F                 cmp     al, 44h ; 'D'
.text:0000000000008571                 jz      short loc_857F
.text:0000000000008573                 cmp     al, 69h ; 'i'
.text:0000000000008575                 jz      loc_8748
.text:000000000000857B                 cmp     al, 42h ; 'B'
.text:000000000000857D                 jnz     short loc_8590
.text:000000000000857F
.text:000000000000857F loc_857F:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000857F                 mov     edi, 2
.text:0000000000008584                 mov     esi, 3E8h
.text:0000000000008589                 jmp     short loc_859A
.text:0000000000008589 ; ---------------------------------------------------------------------------
.text:000000000000858B                 align 10h
.text:0000000000008590
.text:0000000000008590 loc_8590:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000008590                                         ; xstrtoumax+16D↑j ...
.text:0000000000008590                 mov     edi, 1
.text:0000000000008595                 mov     esi, 400h
.text:000000000000859A
.text:000000000000859A loc_859A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000859A                                         ; xstrtoumax+37B↓j
.text:000000000000859A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000859E                 cmp     r12b, 35h
.text:00000000000085A2                 ja      short def_85B6  ; jumptable 00000000000085B6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000085A4                 lea     rdx, jpt_85B6
.text:00000000000085AB                 movzx   r12d, r12b
.text:00000000000085AF                 movsxd  rax, ds:(jpt_85B6 - 0D1B0h)[rdx+r12*4]
.text:00000000000085B3                 add     rax, rdx
.text:00000000000085B6                 jmp     rax             ; switch jump
.text:00000000000085B8 ; ---------------------------------------------------------------------------
.text:00000000000085B8
.text:00000000000085B8 loc_85B8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000085B8                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:00000000000085B8                 mov     rax, rbx        ; jumptable 00000000000085B6 cases 77,109
.text:00000000000085BB                 mul     rsi
.text:00000000000085BE                 jo      loc_87B1
.text:00000000000085C4                 xor     r8d, r8d
.text:00000000000085C7
.text:00000000000085C7 loc_85C7:                               ; CODE XREF: xstrtoumax+34E↓j
.text:00000000000085C7                                         ; xstrtoumax+35E↓j ...
.text:00000000000085C7                 mul     rsi
.text:00000000000085CA                 jo      loc_87A2
.text:00000000000085D0                 mov     rbx, rax
.text:00000000000085D3
.text:00000000000085D3 loc_85D3:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:00000000000085D3                 or      ebp, r8d
.text:00000000000085D6                 db      2Eh
.text:00000000000085D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000085E0
.text:00000000000085E0 loc_85E0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000085E0                                         ; xstrtoumax+23B↓j ...
.text:00000000000085E0                 movsxd  rdi, edi        ; jumptable 00000000000085B6 case 99
.text:00000000000085E3                 mov     eax, ebp
.text:00000000000085E5                 add     rcx, rdi
.text:00000000000085E8                 or      eax, 2
.text:00000000000085EB                 mov     [r15], rcx
.text:00000000000085EE                 cmp     byte ptr [rcx], 0
.text:00000000000085F1                 mov     [r14], rbx
.text:00000000000085F4                 cmovnz  ebp, eax
.text:00000000000085F7                 jmp     loc_84BD
.text:00000000000085FC ; ---------------------------------------------------------------------------
.text:00000000000085FC
.text:00000000000085FC def_85B6:                               ; CODE XREF: xstrtoumax+150↑j
.text:00000000000085FC                                         ; xstrtoumax+1C2↑j ...
.text:00000000000085FC                 mov     [r14], rbx      ; jumptable 00000000000085B6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000085FF                 or      ebp, 2
.text:0000000000008602                 jmp     loc_84BD
.text:0000000000008607 ; ---------------------------------------------------------------------------
.text:0000000000008607
.text:0000000000008607 loc_8607:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008607                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:0000000000008607                 mov     edx, 2          ; jumptable 00000000000085B6 case 119
.text:000000000000860C                 mov     rax, rdx
.text:000000000000860F                 mul     rbx
.text:0000000000008612                 jo      loc_86AE
.text:0000000000008618                 add     rbx, rbx
.text:000000000000861B                 jmp     short loc_85E0  ; jumptable 00000000000085B6 case 99
.text:000000000000861D ; ---------------------------------------------------------------------------
.text:000000000000861D
.text:000000000000861D loc_861D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000861D                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:000000000000861D                 mov     edx, 200h       ; jumptable 00000000000085B6 case 98
.text:0000000000008622                 mov     rax, rdx
.text:0000000000008625                 mul     rbx
.text:0000000000008628                 jo      loc_86AE
.text:000000000000862E                 shl     rbx, 9
.text:0000000000008632                 jmp     short loc_85E0  ; jumptable 00000000000085B6 case 99
.text:0000000000008634 ; ---------------------------------------------------------------------------
.text:0000000000008634
.text:0000000000008634 loc_8634:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008634                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:0000000000008634                 mov     r8d, 7          ; jumptable 00000000000085B6 case 90
.text:000000000000863A                 xor     r9d, r9d
.text:000000000000863D                 nop     dword ptr [rax]
.text:0000000000008640
.text:0000000000008640 loc_8640:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000008640                 mov     rax, rbx
.text:0000000000008643                 mul     rsi
.text:0000000000008646                 mov     rbx, rax
.text:0000000000008649                 jo      loc_87DE
.text:000000000000864F
.text:000000000000864F loc_864F:                               ; CODE XREF: xstrtoumax+408↓j
.text:000000000000864F                 sub     r8d, 1
.text:0000000000008653                 jnz     short loc_8640
.text:0000000000008655
.text:0000000000008655 loc_8655:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000008655                                         ; xstrtoumax+2BD↓j ...
.text:0000000000008655                 or      ebp, r9d
.text:0000000000008658                 jmp     short loc_85E0  ; jumptable 00000000000085B6 case 99
.text:000000000000865A ; ---------------------------------------------------------------------------
.text:000000000000865A
.text:000000000000865A loc_865A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000865A                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:000000000000865A                 mov     r8d, 8          ; jumptable 00000000000085B6 case 89
.text:0000000000008660                 xor     r9d, r9d
.text:0000000000008663                 nop     dword ptr [rax+rax+00h]
.text:0000000000008668
.text:0000000000008668 loc_8668:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000008668                 mov     rax, rbx
.text:000000000000866B                 mul     rsi
.text:000000000000866E                 mov     rbx, rax
.text:0000000000008671                 jo      loc_87C0
.text:0000000000008677
.text:0000000000008677 loc_8677:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000008677                 sub     r8d, 1
.text:000000000000867B                 jnz     short loc_8668
.text:000000000000867D                 jmp     short loc_8655
.text:000000000000867F ; ---------------------------------------------------------------------------
.text:000000000000867F
.text:000000000000867F loc_867F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000867F                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:000000000000867F                 mov     r8d, 4          ; jumptable 00000000000085B6 cases 84,116
.text:0000000000008685                 xor     r9d, r9d
.text:0000000000008688
.text:0000000000008688 loc_8688:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000008688                 mov     rax, rbx
.text:000000000000868B                 mul     rsi
.text:000000000000868E                 mov     rbx, rax
.text:0000000000008691                 jo      loc_8793
.text:0000000000008697
.text:0000000000008697 loc_8697:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000008697                 sub     r8d, 1
.text:000000000000869B                 jnz     short loc_8688
.text:000000000000869D                 jmp     short loc_8655
.text:000000000000869F ; ---------------------------------------------------------------------------
.text:000000000000869F
.text:000000000000869F loc_869F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000869F                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:000000000000869F                 mov     rax, rbx        ; jumptable 00000000000085B6 cases 75,107
.text:00000000000086A2                 mul     rsi
.text:00000000000086A5                 mov     rbx, rax
.text:00000000000086A8                 jno     loc_85E0        ; jumptable 00000000000085B6 case 99
.text:00000000000086AE
.text:00000000000086AE loc_86AE:                               ; CODE XREF: xstrtoumax+232↑j
.text:00000000000086AE                                         ; xstrtoumax+248↑j ...
.text:00000000000086AE                 mov     ebp, 1
.text:00000000000086B3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000086B7                 jmp     loc_85E0        ; jumptable 00000000000085B6 case 99
.text:00000000000086B7 ; ---------------------------------------------------------------------------
.text:00000000000086BC                 align 20h
.text:00000000000086C0
.text:00000000000086C0 loc_86C0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000086C0                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:00000000000086C0                 mov     r8d, 5          ; jumptable 00000000000085B6 case 80
.text:00000000000086C6                 xor     r9d, r9d
.text:00000000000086C9
.text:00000000000086C9 loc_86C9:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:00000000000086C9                 mov     rax, rbx
.text:00000000000086CC                 mul     rsi
.text:00000000000086CF                 mov     rbx, rax
.text:00000000000086D2                 jo      loc_87CF
.text:00000000000086D8
.text:00000000000086D8 loc_86D8:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:00000000000086D8                 sub     r8d, 1
.text:00000000000086DC                 jnz     short loc_86C9
.text:00000000000086DE                 jmp     loc_8655
.text:00000000000086E3 ; ---------------------------------------------------------------------------
.text:00000000000086E3
.text:00000000000086E3 loc_86E3:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000086E3                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:00000000000086E3                 mov     r8d, 6          ; jumptable 00000000000085B6 case 69
.text:00000000000086E9                 xor     r9d, r9d
.text:00000000000086EC
.text:00000000000086EC loc_86EC:                               ; CODE XREF: xstrtoumax+31F↓j
.text:00000000000086EC                 mov     rax, rbx
.text:00000000000086EF                 mul     rsi
.text:00000000000086F2                 mov     rbx, rax
.text:00000000000086F5                 jo      loc_8784
.text:00000000000086FB
.text:00000000000086FB loc_86FB:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:00000000000086FB                 sub     r8d, 1
.text:00000000000086FF                 jnz     short loc_86EC
.text:0000000000008701                 jmp     loc_8655
.text:0000000000008706 ; ---------------------------------------------------------------------------
.text:0000000000008706
.text:0000000000008706 loc_8706:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008706                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:0000000000008706                 mov     edx, 400h       ; jumptable 00000000000085B6 case 66
.text:000000000000870B                 mov     rax, rdx
.text:000000000000870E                 mul     rbx
.text:0000000000008711                 jo      short loc_86AE
.text:0000000000008713                 shl     rbx, 0Ah
.text:0000000000008717                 jmp     loc_85E0        ; jumptable 00000000000085B6 case 99
.text:000000000000871C ; ---------------------------------------------------------------------------
.text:000000000000871C
.text:000000000000871C loc_871C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000871C                                         ; DATA XREF: .rodata:jpt_85B6↓o
.text:000000000000871C                 mov     rax, rbx        ; jumptable 00000000000085B6 cases 71,103
.text:000000000000871F                 mul     rsi
.text:0000000000008722                 jo      loc_87ED
.text:0000000000008728                 xor     r8d, r8d
.text:000000000000872B
.text:000000000000872B loc_872B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000872B                 mul     rsi
.text:000000000000872E                 jno     loc_85C7
.text:0000000000008734                 mov     r8d, 1
.text:000000000000873A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000873E                 jmp     loc_85C7
.text:000000000000873E ; ---------------------------------------------------------------------------
.text:0000000000008743                 align 8
.text:0000000000008748
.text:0000000000008748 loc_8748:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000008748                 xor     edi, edi
.text:000000000000874A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000874E                 mov     esi, 400h
.text:0000000000008753                 setz    dil
.text:0000000000008757                 lea     edi, [rdi+rdi+1]
.text:000000000000875B                 jmp     loc_859A
.text:0000000000008760 ; ---------------------------------------------------------------------------
.text:0000000000008760
.text:0000000000008760 loc_8760:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000008760                 call    ___stack_chk_fail
.text:0000000000008765 ; ---------------------------------------------------------------------------
.text:0000000000008765
.text:0000000000008765 loc_8765:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000008765                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:000000000000876C                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000008773                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000877A                 mov     edx, 54h ; 'T'  ; line
.text:000000000000877F                 call    ___assert_fail
.text:0000000000008784 ; ---------------------------------------------------------------------------
.text:0000000000008784
.text:0000000000008784 loc_8784:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000008784                 mov     r9d, 1
.text:000000000000878A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000878E                 jmp     loc_86FB
.text:0000000000008793 ; ---------------------------------------------------------------------------
.text:0000000000008793
.text:0000000000008793 loc_8793:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000008793                 mov     r9d, 1
.text:0000000000008799                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000879D                 jmp     loc_8697
.text:00000000000087A2 ; ---------------------------------------------------------------------------
.text:00000000000087A2
.text:00000000000087A2 loc_87A2:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:00000000000087A2                 mov     r8d, 1
.text:00000000000087A8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000087AC                 jmp     loc_85D3
.text:00000000000087B1 ; ---------------------------------------------------------------------------
.text:00000000000087B1
.text:00000000000087B1 loc_87B1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:00000000000087B1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000087B5                 mov     r8d, 1
.text:00000000000087BB                 jmp     loc_85C7
.text:00000000000087C0 ; ---------------------------------------------------------------------------
.text:00000000000087C0
.text:00000000000087C0 loc_87C0:                               ; CODE XREF: xstrtoumax+291↑j
.text:00000000000087C0                 mov     r9d, 1
.text:00000000000087C6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000087CA                 jmp     loc_8677
.text:00000000000087CF ; ---------------------------------------------------------------------------
.text:00000000000087CF
.text:00000000000087CF loc_87CF:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:00000000000087CF                 mov     r9d, 1
.text:00000000000087D5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000087D9                 jmp     loc_86D8
.text:00000000000087DE ; ---------------------------------------------------------------------------
.text:00000000000087DE
.text:00000000000087DE loc_87DE:                               ; CODE XREF: xstrtoumax+269↑j
.text:00000000000087DE                 mov     r9d, 1
.text:00000000000087E4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000087E8                 jmp     loc_864F
.text:00000000000087ED ; ---------------------------------------------------------------------------
.text:00000000000087ED
.text:00000000000087ED loc_87ED:                               ; CODE XREF: xstrtoumax+342↑j
.text:00000000000087ED                 mov     r8d, 1
.text:00000000000087F3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000087F7                 jmp     loc_872B
.text:00000000000087F7 ; } // starts at 83E0
.text:00000000000087F7 xstrtoumax      endp
.text:00000000000087F7
.text:00000000000087F7 ; ---------------------------------------------------------------------------
.text:00000000000087FC                 align 20h
.text:0000000000008800
.text:0000000000008800 ; =============== S U B R O U T I N E =======================================
.text:0000000000008800
.text:0000000000008800 ; Attributes: info_from_lumina
.text:0000000000008800
.text:0000000000008800 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000008800                 public rpl_fclose
.text:0000000000008800 rpl_fclose      proc near               ; CODE XREF: main+B0B↑p
.text:0000000000008800                                         ; check_and_close+F9↑p ...
.text:0000000000008800 ; __unwind {
.text:0000000000008800                 push    r12
.text:0000000000008802                 push    rbp
.text:0000000000008803                 push    rbx
.text:0000000000008804                 mov     rbx, rdi
.text:0000000000008807                 call    _fileno
.text:000000000000880C                 test    eax, eax
.text:000000000000880E                 mov     rdi, rbx        ; fp
.text:0000000000008811                 js      short loc_8867
.text:0000000000008813                 call    ___freading
.text:0000000000008818                 test    eax, eax
.text:000000000000881A                 jnz     short loc_8848
.text:000000000000881C
.text:000000000000881C loc_881C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000881C                 mov     rdi, rbx        ; stream
.text:000000000000881F                 call    rpl_fflush
.text:0000000000008824                 test    eax, eax
.text:0000000000008826                 jz      short loc_8864
.text:0000000000008828                 call    ___errno_location
.text:000000000000882D                 mov     r12d, [rax]
.text:0000000000008830                 mov     rdi, rbx        ; stream
.text:0000000000008833                 mov     rbp, rax
.text:0000000000008836                 call    _fclose
.text:000000000000883B                 test    r12d, r12d
.text:000000000000883E                 jnz     short loc_8870
.text:0000000000008840
.text:0000000000008840 loc_8840:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000008840                 pop     rbx
.text:0000000000008841                 pop     rbp
.text:0000000000008842                 pop     r12
.text:0000000000008844                 retn
.text:0000000000008844 ; ---------------------------------------------------------------------------
.text:0000000000008845                 align 8
.text:0000000000008848
.text:0000000000008848 loc_8848:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000008848                 mov     rdi, rbx        ; stream
.text:000000000000884B                 call    _fileno
.text:0000000000008850                 xor     esi, esi        ; offset
.text:0000000000008852                 mov     edx, 1          ; whence
.text:0000000000008857                 mov     edi, eax        ; fd
.text:0000000000008859                 call    _lseek
.text:000000000000885E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008862                 jnz     short loc_881C
.text:0000000000008864
.text:0000000000008864 loc_8864:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000008864                 mov     rdi, rbx        ; stream
.text:0000000000008867
.text:0000000000008867 loc_8867:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000008867                 pop     rbx
.text:0000000000008868                 pop     rbp
.text:0000000000008869                 pop     r12
.text:000000000000886B                 jmp     _fclose
.text:0000000000008870 ; ---------------------------------------------------------------------------
.text:0000000000008870
.text:0000000000008870 loc_8870:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000008870                 mov     [rbp+0], r12d
.text:0000000000008874                 mov     eax, 0FFFFFFFFh
.text:0000000000008879                 jmp     short loc_8840
.text:0000000000008879 ; } // starts at 8800
.text:0000000000008879 rpl_fclose      endp
.text:0000000000008879
.text:0000000000008879 ; ---------------------------------------------------------------------------
.text:000000000000887B                 align 20h
.text:0000000000008880
.text:0000000000008880 ; =============== S U B R O U T I N E =======================================
.text:0000000000008880
.text:0000000000008880 ; Attributes: info_from_lumina
.text:0000000000008880
.text:0000000000008880 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000008880                 public rpl_fflush
.text:0000000000008880 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000008880 ; __unwind {
.text:0000000000008880                 test    rdi, rdi
.text:0000000000008883                 push    rbx
.text:0000000000008884                 mov     rbx, rdi
.text:0000000000008887                 jz      short loc_889A
.text:0000000000008889                 call    ___freading
.text:000000000000888E                 test    eax, eax
.text:0000000000008890                 jz      short loc_889A
.text:0000000000008892                 test    dword ptr [rbx], 100h
.text:0000000000008898                 jnz     short loc_88A8
.text:000000000000889A
.text:000000000000889A loc_889A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000889A                                         ; rpl_fflush+10↑j
.text:000000000000889A                 mov     rdi, rbx        ; stream
.text:000000000000889D                 pop     rbx
.text:000000000000889E                 jmp     _fflush
.text:000000000000889E ; ---------------------------------------------------------------------------
.text:00000000000088A3                 align 8
.text:00000000000088A8
.text:00000000000088A8 loc_88A8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000088A8                 mov     rdi, rbx
.text:00000000000088AB                 mov     edx, 1
.text:00000000000088B0                 xor     esi, esi
.text:00000000000088B2                 call    rpl_fseeko
.text:00000000000088B7                 mov     rdi, rbx        ; stream
.text:00000000000088BA                 pop     rbx
.text:00000000000088BB                 jmp     _fflush
.text:00000000000088BB ; } // starts at 8880
.text:00000000000088BB rpl_fflush      endp
.text:00000000000088BB
.text:00000000000088C0
.text:00000000000088C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088C0
.text:00000000000088C0 ; Attributes: info_from_lumina
.text:00000000000088C0
.text:00000000000088C0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000088C0                 public rpl_fseeko
.text:00000000000088C0 rpl_fseeko      proc near               ; CODE XREF: skip+1C9↑p
.text:00000000000088C0                                         ; rpl_fflush+32↑p
.text:00000000000088C0 ; __unwind {
.text:00000000000088C0                 mov     rax, [rdi+8]
.text:00000000000088C4                 cmp     [rdi+10h], rax
.text:00000000000088C8                 jz      short loc_88D0
.text:00000000000088CA
.text:00000000000088CA loc_88CA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000088CA                                         ; rpl_fseeko+1F↓j
.text:00000000000088CA                 jmp     _fseeko
.text:00000000000088CA ; ---------------------------------------------------------------------------
.text:00000000000088CF                 align 10h
.text:00000000000088D0
.text:00000000000088D0 loc_88D0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000088D0                 mov     rax, [rdi+20h]
.text:00000000000088D4                 cmp     [rdi+28h], rax
.text:00000000000088D8                 jnz     short loc_88CA
.text:00000000000088DA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000088DF                 jnz     short loc_88CA
.text:00000000000088E1                 push    r12
.text:00000000000088E3                 push    rbp
.text:00000000000088E4                 mov     r12d, edx
.text:00000000000088E7                 push    rbx
.text:00000000000088E8                 mov     rbp, rsi
.text:00000000000088EB                 mov     rbx, rdi
.text:00000000000088EE                 call    _fileno
.text:00000000000088F3                 mov     edx, r12d       ; whence
.text:00000000000088F6                 mov     rsi, rbp        ; offset
.text:00000000000088F9                 mov     edi, eax        ; fd
.text:00000000000088FB                 call    _lseek
.text:0000000000008900                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008904                 jz      short loc_8912
.text:0000000000008906                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000008909                 mov     [rbx+90h], rax
.text:0000000000008910                 xor     eax, eax
.text:0000000000008912
.text:0000000000008912 loc_8912:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000008912                 pop     rbx
.text:0000000000008913                 pop     rbp
.text:0000000000008914                 pop     r12
.text:0000000000008916                 retn
.text:0000000000008916 ; } // starts at 88C0
.text:0000000000008916 rpl_fseeko      endp
.text:0000000000008916
.text:0000000000008916 ; ---------------------------------------------------------------------------
.text:0000000000008917                 align 20h
.text:0000000000008920
.text:0000000000008920 ; =============== S U B R O U T I N E =======================================
.text:0000000000008920
.text:0000000000008920 ; Attributes: info_from_lumina
.text:0000000000008920
.text:0000000000008920 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000008920                 public rpl_mbrtowc
.text:0000000000008920 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000008920
.text:0000000000008920 pwc             = dword ptr -34h
.text:0000000000008920 var_30          = qword ptr -30h
.text:0000000000008920
.text:0000000000008920 ; __unwind {
.text:0000000000008920                 push    r13
.text:0000000000008922                 push    r12
.text:0000000000008924                 mov     r13, rsi
.text:0000000000008927                 push    rbp
.text:0000000000008928                 push    rbx
.text:0000000000008929                 mov     rbx, rdi
.text:000000000000892C                 mov     r12, rdx
.text:000000000000892F                 sub     rsp, 18h
.text:0000000000008933                 mov     rax, fs:28h
.text:000000000000893C                 mov     [rsp+38h+var_30], rax
.text:0000000000008941                 xor     eax, eax
.text:0000000000008943                 lea     rax, [rsp+38h+pwc]
.text:0000000000008948                 test    rdi, rdi
.text:000000000000894B                 cmovz   rbx, rax
.text:000000000000894F                 mov     rdi, rbx        ; pwc
.text:0000000000008952                 call    _mbrtowc
.text:0000000000008957                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000895B                 mov     rbp, rax
.text:000000000000895E                 jbe     short loc_8980
.text:0000000000008960                 test    r12, r12
.text:0000000000008963                 jz      short loc_8980
.text:0000000000008965                 xor     edi, edi
.text:0000000000008967                 call    hard_locale
.text:000000000000896C                 test    al, al
.text:000000000000896E                 jnz     short loc_8980
.text:0000000000008970                 movzx   eax, byte ptr [r13+0]
.text:0000000000008975                 mov     ebp, 1
.text:000000000000897A                 mov     [rbx], eax
.text:000000000000897C                 nop     dword ptr [rax+00h]
.text:0000000000008980
.text:0000000000008980 loc_8980:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000008980                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000008980                 mov     rdx, [rsp+38h+var_30]
.text:0000000000008985                 xor     rdx, fs:28h
.text:000000000000898E                 mov     rax, rbp
.text:0000000000008991                 jnz     short loc_899E
.text:0000000000008993                 add     rsp, 18h
.text:0000000000008997                 pop     rbx
.text:0000000000008998                 pop     rbp
.text:0000000000008999                 pop     r12
.text:000000000000899B                 pop     r13
.text:000000000000899D                 retn
.text:000000000000899E ; ---------------------------------------------------------------------------
.text:000000000000899E
.text:000000000000899E loc_899E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000899E                 call    ___stack_chk_fail
.text:000000000000899E ; } // starts at 8920
.text:000000000000899E rpl_mbrtowc     endp
.text:000000000000899E
.text:000000000000899E ; ---------------------------------------------------------------------------
.text:00000000000089A3                 align 10h
.text:00000000000089B0
.text:00000000000089B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000089B0
.text:00000000000089B0
.text:00000000000089B0 ; __int64 __fastcall rpl_vfprintf(FILE *s)
.text:00000000000089B0                 public rpl_vfprintf
.text:00000000000089B0 rpl_vfprintf    proc near               ; CODE XREF: xvfprintf+9↑p
.text:00000000000089B0                                         ; rpl_vprintf+D↓j
.text:00000000000089B0
.text:00000000000089B0 n               = qword ptr -810h
.text:00000000000089B0 var_808         = byte ptr -808h
.text:00000000000089B0 var_30          = qword ptr -30h
.text:00000000000089B0
.text:00000000000089B0 ; __unwind {
.text:00000000000089B0                 push    r13
.text:00000000000089B2                 push    r12
.text:00000000000089B4                 mov     rax, rsi
.text:00000000000089B7                 push    rbp
.text:00000000000089B8                 push    rbx
.text:00000000000089B9                 mov     r13, rdi
.text:00000000000089BC                 sub     rsp, 7F8h
.text:00000000000089C3                 lea     r12, [rsp+818h+var_808]
.text:00000000000089C8                 lea     rsi, [rsp+818h+n]
.text:00000000000089CD                 mov     [rsp+818h+n], 7D0h
.text:00000000000089D6                 mov     rcx, fs:28h
.text:00000000000089DF                 mov     [rsp+818h+var_30], rcx
.text:00000000000089E7                 xor     ecx, ecx
.text:00000000000089E9                 mov     rdi, r12
.text:00000000000089EC                 mov     rcx, rdx
.text:00000000000089EF                 mov     rdx, rax
.text:00000000000089F2                 call    vasnprintf
.text:00000000000089F7                 test    rax, rax
.text:00000000000089FA                 mov     rbx, [rsp+818h+n]
.text:00000000000089FF                 jz      loc_8A8E
.text:0000000000008A05                 mov     rcx, r13        ; s
.text:0000000000008A08                 mov     rdx, rbx        ; n
.text:0000000000008A0B                 mov     esi, 1          ; size
.text:0000000000008A10                 mov     rdi, rax        ; ptr
.text:0000000000008A13                 mov     rbp, rax
.text:0000000000008A16                 call    _fwrite
.text:0000000000008A1B                 cmp     rax, rbx
.text:0000000000008A1E                 jb      short loc_8A60
.text:0000000000008A20                 cmp     rbp, r12
.text:0000000000008A23                 jz      short loc_8A2D
.text:0000000000008A25                 mov     rdi, rbp        ; ptr
.text:0000000000008A28                 call    _free
.text:0000000000008A2D
.text:0000000000008A2D loc_8A2D:                               ; CODE XREF: rpl_vfprintf+73↑j
.text:0000000000008A2D                 cmp     rbx, 7FFFFFFFh
.text:0000000000008A34                 ja      short loc_8A83
.text:0000000000008A36
.text:0000000000008A36 loc_8A36:                               ; CODE XREF: rpl_vfprintf+B8↓j
.text:0000000000008A36                                         ; rpl_vfprintf+D1↓j ...
.text:0000000000008A36                 mov     rcx, [rsp+818h+var_30]
.text:0000000000008A3E                 xor     rcx, fs:28h
.text:0000000000008A47                 mov     eax, ebx
.text:0000000000008A49                 jnz     short loc_8A9D
.text:0000000000008A4B                 add     rsp, 7F8h
.text:0000000000008A52                 pop     rbx
.text:0000000000008A53                 pop     rbp
.text:0000000000008A54                 pop     r12
.text:0000000000008A56                 pop     r13
.text:0000000000008A58                 retn
.text:0000000000008A58 ; ---------------------------------------------------------------------------
.text:0000000000008A59                 align 20h
.text:0000000000008A60
.text:0000000000008A60 loc_8A60:                               ; CODE XREF: rpl_vfprintf+6E↑j
.text:0000000000008A60                 cmp     rbp, r12
.text:0000000000008A63                 mov     ebx, 0FFFFFFFFh
.text:0000000000008A68                 jz      short loc_8A36
.text:0000000000008A6A                 call    ___errno_location
.text:0000000000008A6F                 mov     r13d, [rax]
.text:0000000000008A72                 mov     r12, rax
.text:0000000000008A75                 mov     rdi, rbp        ; ptr
.text:0000000000008A78                 call    _free
.text:0000000000008A7D                 mov     [r12], r13d
.text:0000000000008A81                 jmp     short loc_8A36
.text:0000000000008A83 ; ---------------------------------------------------------------------------
.text:0000000000008A83
.text:0000000000008A83 loc_8A83:                               ; CODE XREF: rpl_vfprintf+84↑j
.text:0000000000008A83                 call    ___errno_location
.text:0000000000008A88                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000008A8E
.text:0000000000008A8E loc_8A8E:                               ; CODE XREF: rpl_vfprintf+4F↑j
.text:0000000000008A8E                 mov     rdi, r13
.text:0000000000008A91                 mov     ebx, 0FFFFFFFFh
.text:0000000000008A96                 call    fseterr
.text:0000000000008A9B                 jmp     short loc_8A36
.text:0000000000008A9D ; ---------------------------------------------------------------------------
.text:0000000000008A9D
.text:0000000000008A9D loc_8A9D:                               ; CODE XREF: rpl_vfprintf+99↑j
.text:0000000000008A9D                 call    ___stack_chk_fail
.text:0000000000008A9D ; } // starts at 89B0
.text:0000000000008A9D rpl_vfprintf    endp
.text:0000000000008A9D
.text:0000000000008A9D ; ---------------------------------------------------------------------------
.text:0000000000008AA2                 align 10h
.text:0000000000008AB0
.text:0000000000008AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AB0
.text:0000000000008AB0
.text:0000000000008AB0                 public rpl_vprintf
.text:0000000000008AB0 rpl_vprintf     proc near               ; CODE XREF: xvprintf+6↑p
.text:0000000000008AB0 ; __unwind {
.text:0000000000008AB0                 mov     rdx, rsi
.text:0000000000008AB3                 mov     rsi, rdi
.text:0000000000008AB6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; s
.text:0000000000008ABD                 jmp     rpl_vfprintf
.text:0000000000008ABD ; } // starts at 8AB0
.text:0000000000008ABD rpl_vprintf     endp
.text:0000000000008ABD
.text:0000000000008ABD ; ---------------------------------------------------------------------------
.text:0000000000008AC2                 align 10h
.text:0000000000008AD0
.text:0000000000008AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AD0
.text:0000000000008AD0 ; Attributes: info_from_lumina
.text:0000000000008AD0
.text:0000000000008AD0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000008AD0                 public close_stream
.text:0000000000008AD0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000008AD0                                         ; close_stdout+33↑p
.text:0000000000008AD0 ; __unwind {
.text:0000000000008AD0                 push    r12
.text:0000000000008AD2                 push    rbp
.text:0000000000008AD3                 mov     rbp, rdi
.text:0000000000008AD6                 push    rbx
.text:0000000000008AD7                 call    ___fpending
.text:0000000000008ADC                 mov     ebx, [rbp+0]
.text:0000000000008ADF                 mov     rdi, rbp        ; stream
.text:0000000000008AE2                 mov     r12, rax
.text:0000000000008AE5                 call    rpl_fclose
.text:0000000000008AEA                 and     ebx, 20h
.text:0000000000008AED                 test    ebx, ebx
.text:0000000000008AEF                 jnz     short loc_8B08
.text:0000000000008AF1                 test    eax, eax
.text:0000000000008AF3                 jz      short loc_8AFF
.text:0000000000008AF5                 test    r12, r12
.text:0000000000008AF8                 mov     eax, 0FFFFFFFFh
.text:0000000000008AFD                 jz      short loc_8B38
.text:0000000000008AFF
.text:0000000000008AFF loc_8AFF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000008AFF                 pop     rbx
.text:0000000000008B00                 pop     rbp
.text:0000000000008B01                 pop     r12
.text:0000000000008B03                 retn
.text:0000000000008B03 ; ---------------------------------------------------------------------------
.text:0000000000008B04                 align 8
.text:0000000000008B08
.text:0000000000008B08 loc_8B08:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000008B08                 test    eax, eax
.text:0000000000008B0A                 jnz     short loc_8B28
.text:0000000000008B0C                 call    ___errno_location
.text:0000000000008B11                 mov     dword ptr [rax], 0
.text:0000000000008B17                 mov     eax, 0FFFFFFFFh
.text:0000000000008B1C                 pop     rbx
.text:0000000000008B1D                 pop     rbp
.text:0000000000008B1E                 pop     r12
.text:0000000000008B20                 retn
.text:0000000000008B20 ; ---------------------------------------------------------------------------
.text:0000000000008B21                 align 8
.text:0000000000008B28
.text:0000000000008B28 loc_8B28:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000008B28                 pop     rbx
.text:0000000000008B29                 mov     eax, 0FFFFFFFFh
.text:0000000000008B2E                 pop     rbp
.text:0000000000008B2F                 pop     r12
.text:0000000000008B31                 retn
.text:0000000000008B31 ; ---------------------------------------------------------------------------
.text:0000000000008B32                 align 8
.text:0000000000008B38
.text:0000000000008B38 loc_8B38:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000008B38                 call    ___errno_location
.text:0000000000008B3D                 cmp     dword ptr [rax], 9
.text:0000000000008B40                 pop     rbx
.text:0000000000008B41                 pop     rbp
.text:0000000000008B42                 pop     r12
.text:0000000000008B44                 setnz   al
.text:0000000000008B47                 movzx   eax, al
.text:0000000000008B4A                 neg     eax
.text:0000000000008B4C                 retn
.text:0000000000008B4C ; } // starts at 8AD0
.text:0000000000008B4C close_stream    endp
.text:0000000000008B4C
.text:0000000000008B4C ; ---------------------------------------------------------------------------
.text:0000000000008B4D                 align 10h
.text:0000000000008B50
.text:0000000000008B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B50
.text:0000000000008B50
.text:0000000000008B50                 public hard_locale
.text:0000000000008B50 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000008B50 ; __unwind {
.text:0000000000008B50                 sub     rsp, 8
.text:0000000000008B54                 xor     esi, esi        ; locale
.text:0000000000008B56                 call    _setlocale
.text:0000000000008B5B                 mov     rdx, rax
.text:0000000000008B5E                 mov     eax, 1
.text:0000000000008B63                 test    rdx, rdx
.text:0000000000008B66                 jz      short loc_8B85
.text:0000000000008B68                 lea     rdi, aC_0       ; "C"
.text:0000000000008B6F                 mov     ecx, 2
.text:0000000000008B74                 mov     rsi, rdx
.text:0000000000008B77                 repe cmpsb
.text:0000000000008B79                 setnbe  cl
.text:0000000000008B7C                 sbb     cl, 0
.text:0000000000008B7F                 xor     eax, eax
.text:0000000000008B81                 test    cl, cl
.text:0000000000008B83                 jnz     short loc_8B90
.text:0000000000008B85
.text:0000000000008B85 loc_8B85:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000008B85                 add     rsp, 8
.text:0000000000008B89                 retn
.text:0000000000008B89 ; ---------------------------------------------------------------------------
.text:0000000000008B8A                 align 10h
.text:0000000000008B90
.text:0000000000008B90 loc_8B90:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000008B90                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000008B97                 mov     ecx, 6
.text:0000000000008B9C                 mov     rsi, rdx
.text:0000000000008B9F                 repe cmpsb
.text:0000000000008BA1                 setnbe  al
.text:0000000000008BA4                 sbb     al, 0
.text:0000000000008BA6                 test    al, al
.text:0000000000008BA8                 setnz   al
.text:0000000000008BAB                 add     rsp, 8
.text:0000000000008BAF                 retn
.text:0000000000008BAF ; } // starts at 8B50
.text:0000000000008BAF hard_locale     endp
.text:0000000000008BAF
.text:0000000000008BB0
.text:0000000000008BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008BB0
.text:0000000000008BB0
.text:0000000000008BB0                 public locale_charset
.text:0000000000008BB0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000008BB0 ; __unwind {
.text:0000000000008BB0                 sub     rsp, 8
.text:0000000000008BB4                 mov     edi, 0Eh        ; item
.text:0000000000008BB9                 call    _nl_langinfo
.text:0000000000008BBE                 test    rax, rax
.text:0000000000008BC1                 jz      short loc_8BE0
.text:0000000000008BC3                 cmp     byte ptr [rax], 0
.text:0000000000008BC6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000008BCD                 cmovz   rax, rdx
.text:0000000000008BD1                 add     rsp, 8
.text:0000000000008BD5                 retn
.text:0000000000008BD5 ; ---------------------------------------------------------------------------
.text:0000000000008BD6                 align 20h
.text:0000000000008BE0
.text:0000000000008BE0 loc_8BE0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000008BE0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000008BE7                 add     rsp, 8
.text:0000000000008BEB                 retn
.text:0000000000008BEB ; } // starts at 8BB0
.text:0000000000008BEB locale_charset  endp
.text:0000000000008BEB
.text:0000000000008BEB ; ---------------------------------------------------------------------------
.text:0000000000008BEC                 align 10h
.text:0000000000008BF0
.text:0000000000008BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008BF0
.text:0000000000008BF0
.text:0000000000008BF0                 public fseterr
.text:0000000000008BF0 fseterr         proc near               ; CODE XREF: rpl_vfprintf+E6↑p
.text:0000000000008BF0 ; __unwind {
.text:0000000000008BF0                 or      dword ptr [rdi], 20h
.text:0000000000008BF3                 retn
.text:0000000000008BF3 ; } // starts at 8BF0
.text:0000000000008BF3 fseterr         endp
.text:0000000000008BF3
.text:0000000000008BF3 ; ---------------------------------------------------------------------------
.text:0000000000008BF4                 align 20h
.text:0000000000008C00
.text:0000000000008C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C00
.text:0000000000008C00 ; Attributes: bp-based frame
.text:0000000000008C00
.text:0000000000008C00                 public vasnprintf
.text:0000000000008C00 vasnprintf      proc near               ; CODE XREF: rpl_vfprintf+42↑p
.text:0000000000008C00
.text:0000000000008C00 var_450         = tbyte ptr -450h
.text:0000000000008C00 var_440         = tbyte ptr -440h
.text:0000000000008C00 var_430         = qword ptr -430h
.text:0000000000008C00 var_421         = byte ptr -421h
.text:0000000000008C00 ptr             = qword ptr -420h
.text:0000000000008C00 var_418         = qword ptr -418h
.text:0000000000008C00 var_410         = qword ptr -410h
.text:0000000000008C00 var_408         = qword ptr -408h
.text:0000000000008C00 var_400         = qword ptr -400h
.text:0000000000008C00 var_3F8         = qword ptr -3F8h
.text:0000000000008C00 var_3F0         = qword ptr -3F0h
.text:0000000000008C00 src             = qword ptr -3E8h
.text:0000000000008C00 var_3E0         = qword ptr -3E0h
.text:0000000000008C00 var_3D8         = qword ptr -3D8h
.text:0000000000008C00 var_3D0         = qword ptr -3D0h
.text:0000000000008C00 n               = qword ptr -3C8h
.text:0000000000008C00 var_3BC         = dword ptr -3BCh
.text:0000000000008C00 var_3B8         = dword ptr -3B8h
.text:0000000000008C00 var_3B4         = dword ptr -3B4h
.text:0000000000008C00 var_3B0         = byte ptr -3B0h
.text:0000000000008C00 var_3A8         = qword ptr -3A8h
.text:0000000000008C00 var_2C0         = qword ptr -2C0h
.text:0000000000008C00 var_2B8         = qword ptr -2B8h
.text:0000000000008C00 var_2B0         = qword ptr -2B0h
.text:0000000000008C00 var_2A8         = qword ptr -2A8h
.text:0000000000008C00 var_38          = qword ptr -38h
.text:0000000000008C00
.text:0000000000008C00 ; __unwind {
.text:0000000000008C00                 push    rbp
.text:0000000000008C01                 mov     rbp, rsp
.text:0000000000008C04                 push    r15
.text:0000000000008C06                 push    r14
.text:0000000000008C08                 push    r13
.text:0000000000008C0A                 push    r12
.text:0000000000008C0C                 lea     r14, [rbp+var_3B0]
.text:0000000000008C13                 push    rbx
.text:0000000000008C14                 mov     rbx, rdx
.text:0000000000008C17                 mov     r12, rcx
.text:0000000000008C1A                 mov     rdx, r14
.text:0000000000008C1D                 sub     rsp, 408h
.text:0000000000008C24                 mov     [rbp+var_418], rsi
.text:0000000000008C2B                 lea     rsi, [rbp+var_2C0]
.text:0000000000008C32                 mov     [rbp+src], rdi
.text:0000000000008C39                 mov     rdi, rbx
.text:0000000000008C3C                 mov     [rbp+var_410], r14
.text:0000000000008C43                 mov     rax, fs:28h
.text:0000000000008C4C                 mov     [rbp+var_38], rax
.text:0000000000008C50                 xor     eax, eax
.text:0000000000008C52                 mov     [rbp+var_408], rsi
.text:0000000000008C59                 call    printf_parse
.text:0000000000008C5E                 test    eax, eax
.text:0000000000008C60                 js      loc_9AC8
.text:0000000000008C66                 mov     rsi, r14
.text:0000000000008C69                 mov     rdi, r12
.text:0000000000008C6C                 call    printf_fetchargs
.text:0000000000008C71                 test    eax, eax
.text:0000000000008C73                 js      loc_9B30
.text:0000000000008C79                 mov     rax, [rbp+var_2B0]
.text:0000000000008C80                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C87                 add     rax, 7
.text:0000000000008C8B                 cmp     rax, 6
.text:0000000000008C8F                 cmovbe  rax, rdx
.text:0000000000008C93                 add     rax, [rbp+var_2A8]
.text:0000000000008C9A                 jb      loc_96C8
.text:0000000000008CA0                 mov     rdi, rax
.text:0000000000008CA3                 xor     r8d, r8d
.text:0000000000008CA6                 add     rdi, 6          ; size
.text:0000000000008CAA                 setb    r8b
.text:0000000000008CAE                 jb      loc_96C8
.text:0000000000008CB4                 cmp     rdi, 0F9Fh
.text:0000000000008CBB                 jbe     loc_8E08
.text:0000000000008CC1                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000008CC5                 mov     [rbp+n], r8
.text:0000000000008CCC                 jz      loc_96C8
.text:0000000000008CD2                 call    _malloc
.text:0000000000008CD7                 test    rax, rax
.text:0000000000008CDA                 mov     [rbp+var_3D8], rax
.text:0000000000008CE1                 jz      loc_96C8
.text:0000000000008CE7                 mov     r8, [rbp+n]
.text:0000000000008CEE                 mov     [rbp+ptr], rax
.text:0000000000008CF5
.text:0000000000008CF5 loc_8CF5:                               ; CODE XREF: vasnprintf+22E↓j
.text:0000000000008CF5                 xor     r12d, r12d
.text:0000000000008CF8                 cmp     [rbp+src], 0
.text:0000000000008D00                 jz      short loc_8D0C
.text:0000000000008D02                 mov     rax, [rbp+var_418]
.text:0000000000008D09                 mov     r12, [rax]
.text:0000000000008D0C
.text:0000000000008D0C loc_8D0C:                               ; CODE XREF: vasnprintf+100↑j
.text:0000000000008D0C                 mov     r13, [rbp+var_2B8]
.text:0000000000008D13                 lea     rax, [rbp+var_3BC]
.text:0000000000008D1A                 mov     r15, [rbp+src]
.text:0000000000008D21                 mov     [rbp+var_400], 0
.text:0000000000008D2C                 mov     [rbp+var_3F0], rax
.text:0000000000008D33                 mov     rax, rbx
.text:0000000000008D36                 mov     rbx, r8
.text:0000000000008D39                 mov     rcx, [r13+0]
.text:0000000000008D3D                 mov     r8, rax
.text:0000000000008D40                 cmp     rcx, r8
.text:0000000000008D43                 jz      loc_96B1
.text:0000000000008D49
.text:0000000000008D49 loc_8D49:                               ; CODE XREF: vasnprintf+AAB↓j
.text:0000000000008D49                 sub     rcx, r8
.text:0000000000008D4C                 mov     rax, rbx
.text:0000000000008D4F                 add     rax, rcx
.text:0000000000008D52                 mov     r14, rax
.text:0000000000008D55                 jnb     loc_8E38
.text:0000000000008D5B                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000008D5F                 jz      loc_9830
.text:0000000000008D65
.text:0000000000008D65 loc_8D65:                               ; CODE XREF: vasnprintf+4E2↓j
.text:0000000000008D65                                         ; vasnprintf+A86↓j ...
.text:0000000000008D65                 call    ___errno_location
.text:0000000000008D6A                 mov     [rbp+n], rax
.text:0000000000008D71
.text:0000000000008D71 loc_8D71:                               ; CODE XREF: vasnprintf+640↓j
.text:0000000000008D71                                         ; vasnprintf+652↓j ...
.text:0000000000008D71                 cmp     r15, [rbp+src]
.text:0000000000008D78                 jz      short loc_8D83
.text:0000000000008D7A                 test    r15, r15
.text:0000000000008D7D                 jnz     loc_9860
.text:0000000000008D83
.text:0000000000008D83 loc_8D83:                               ; CODE XREF: vasnprintf+178↑j
.text:0000000000008D83                                         ; vasnprintf+C68↓j
.text:0000000000008D83                 mov     rax, [rbp+ptr]
.text:0000000000008D8A                 test    rax, rax
.text:0000000000008D8D                 jz      short loc_8D97
.text:0000000000008D8F                 mov     rdi, rax        ; ptr
.text:0000000000008D92                 call    _free
.text:0000000000008D97
.text:0000000000008D97 loc_8D97:                               ; CODE XREF: vasnprintf+18D↑j
.text:0000000000008D97                                         ; vasnprintf+AD4↓j
.text:0000000000008D97                 mov     rax, [rbp+var_408]
.text:0000000000008D9E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000008DA5                 add     rax, 20h ; ' '
.text:0000000000008DA9                 cmp     rdi, rax
.text:0000000000008DAC                 jz      short loc_8DB3
.text:0000000000008DAE                 call    _free
.text:0000000000008DB3
.text:0000000000008DB3 loc_8DB3:                               ; CODE XREF: vasnprintf+1AC↑j
.text:0000000000008DB3                 mov     rax, [rbp+var_410]
.text:0000000000008DBA                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000008DC1                 add     rax, 10h
.text:0000000000008DC5                 cmp     rdi, rax
.text:0000000000008DC8                 jz      short loc_8DCF
.text:0000000000008DCA                 call    _free
.text:0000000000008DCF
.text:0000000000008DCF loc_8DCF:                               ; CODE XREF: vasnprintf+1C8↑j
.text:0000000000008DCF                 mov     rax, [rbp+n]
.text:0000000000008DD6                 xor     r15d, r15d
.text:0000000000008DD9                 mov     dword ptr [rax], 0Ch
.text:0000000000008DDF
.text:0000000000008DDF loc_8DDF:                               ; CODE XREF: vasnprintf+7BA↓j
.text:0000000000008DDF                                         ; vasnprintf+EBE↓j ...
.text:0000000000008DDF                 mov     rdi, [rbp+var_38]
.text:0000000000008DE3                 xor     rdi, fs:28h
.text:0000000000008DEC                 mov     rax, r15
.text:0000000000008DEF                 jnz     loc_9CF7
.text:0000000000008DF5                 lea     rsp, [rbp-28h]
.text:0000000000008DF9                 pop     rbx
.text:0000000000008DFA                 pop     r12
.text:0000000000008DFC                 pop     r13
.text:0000000000008DFE                 pop     r14
.text:0000000000008E00                 pop     r15
.text:0000000000008E02                 pop     rbp
.text:0000000000008E03                 retn
.text:0000000000008E03 ; ---------------------------------------------------------------------------
.text:0000000000008E04                 align 8
.text:0000000000008E08
.text:0000000000008E08 loc_8E08:                               ; CODE XREF: vasnprintf+BB↑j
.text:0000000000008E08                 add     rax, 24h ; '$'
.text:0000000000008E0C                 mov     [rbp+ptr], 0
.text:0000000000008E17                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000008E1B                 sub     rsp, rax
.text:0000000000008E1E                 lea     rax, [rsp+430h+var_421]
.text:0000000000008E23                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000008E27                 mov     [rbp+var_3D8], rax
.text:0000000000008E2E                 jmp     loc_8CF5
.text:0000000000008E2E ; ---------------------------------------------------------------------------
.text:0000000000008E33                 align 8
.text:0000000000008E38
.text:0000000000008E38 loc_8E38:                               ; CODE XREF: vasnprintf+155↑j
.text:0000000000008E38                 cmp     r12, rax
.text:0000000000008E3B                 jnb     short loc_8EA4
.text:0000000000008E3D                 test    r12, r12
.text:0000000000008E40                 jnz     loc_9770
.text:0000000000008E46                 cmp     rax, 0Ch
.text:0000000000008E4A                 ja      loc_9782
.text:0000000000008E50                 mov     r12d, 0Ch
.text:0000000000008E56
.text:0000000000008E56 loc_8E56:                               ; CODE XREF: vasnprintf+B7C↓j
.text:0000000000008E56                 cmp     r15, [rbp+src]
.text:0000000000008E5D                 setz    dl
.text:0000000000008E60                 test    r15, r15
.text:0000000000008E63                 jz      loc_97A8
.text:0000000000008E69
.text:0000000000008E69 loc_8E69:                               ; CODE XREF: vasnprintf+B9C↓j
.text:0000000000008E69                 test    dl, dl
.text:0000000000008E6B                 jnz     loc_97A8
.text:0000000000008E71                 mov     rsi, r12        ; size
.text:0000000000008E74                 mov     rdi, r15        ; ptr
.text:0000000000008E77                 mov     [rbp+var_3D0], r8
.text:0000000000008E7E                 mov     [rbp+n], rcx
.text:0000000000008E85                 call    _realloc
.text:0000000000008E8A                 test    rax, rax
.text:0000000000008E8D                 mov     rcx, [rbp+n]
.text:0000000000008E94                 mov     r8, [rbp+var_3D0]
.text:0000000000008E9B                 jz      loc_984B
.text:0000000000008EA1                 mov     r15, rax
.text:0000000000008EA4
.text:0000000000008EA4 loc_8EA4:                               ; CODE XREF: vasnprintf+23B↑j
.text:0000000000008EA4                                         ; vasnprintf+C23↓j ...
.text:0000000000008EA4                 lea     rdi, [r15+rbx]  ; dest
.text:0000000000008EA8                 mov     rdx, rcx        ; n
.text:0000000000008EAB                 mov     rsi, r8         ; src
.text:0000000000008EAE                 call    _memcpy
.text:0000000000008EB3
.text:0000000000008EB3 loc_8EB3:                               ; CODE XREF: vasnprintf+AB4↓j
.text:0000000000008EB3                 mov     rax, [rbp+var_400]
.text:0000000000008EBA                 cmp     [rbp+var_2C0], rax
.text:0000000000008EC1                 jz      loc_9B7B
.text:0000000000008EC7                 movzx   edx, byte ptr [r13+48h]
.text:0000000000008ECC                 mov     rax, [r13+50h]
.text:0000000000008ED0                 cmp     dl, 25h ; '%'
.text:0000000000008ED3                 jz      loc_9668
.text:0000000000008ED9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008EDD                 jz      def_915B        ; jumptable 000000000000915B default case, case 0
.text:0000000000008EDD                                         ; jumptable 0000000000009700 default case
.text:0000000000008EE3                 mov     r8, [rbp+var_3A8]
.text:0000000000008EEA                 shl     rax, 5
.text:0000000000008EEE                 add     rax, r8
.text:0000000000008EF1                 cmp     dl, 6Eh ; 'n'
.text:0000000000008EF4                 mov     edi, [rax]
.text:0000000000008EF6                 mov     dword ptr [rbp+var_3D0], edi
.text:0000000000008EFC                 jz      loc_96E0
.text:0000000000008F02                 mov     eax, [r13+10h]
.text:0000000000008F06                 mov     rdi, [rbp+var_3D8]
.text:0000000000008F0D                 test    al, 1
.text:0000000000008F0F                 mov     byte ptr [rdi], 25h ; '%'
.text:0000000000008F12                 lea     rbx, [rdi+1]
.text:0000000000008F16                 jz      short loc_8F27
.text:0000000000008F18                 mov     rdi, [rbp+var_3D8]
.text:0000000000008F1F                 lea     rbx, [rdi+2]
.text:0000000000008F23                 mov     byte ptr [rdi+1], 27h ; '''
.text:0000000000008F27
.text:0000000000008F27 loc_8F27:                               ; CODE XREF: vasnprintf+316↑j
.text:0000000000008F27                 test    al, 2
.text:0000000000008F29                 jz      short loc_8F32
.text:0000000000008F2B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:0000000000008F2E                 add     rbx, 1
.text:0000000000008F32
.text:0000000000008F32 loc_8F32:                               ; CODE XREF: vasnprintf+329↑j
.text:0000000000008F32                 test    al, 4
.text:0000000000008F34                 jz      short loc_8F3D
.text:0000000000008F36                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000008F39                 add     rbx, 1
.text:0000000000008F3D
.text:0000000000008F3D loc_8F3D:                               ; CODE XREF: vasnprintf+334↑j
.text:0000000000008F3D                 test    al, 8
.text:0000000000008F3F                 jz      short loc_8F48
.text:0000000000008F41                 mov     byte ptr [rbx], 20h ; ' '
.text:0000000000008F44                 add     rbx, 1
.text:0000000000008F48
.text:0000000000008F48 loc_8F48:                               ; CODE XREF: vasnprintf+33F↑j
.text:0000000000008F48                 test    al, 10h
.text:0000000000008F4A                 jz      short loc_8F53
.text:0000000000008F4C                 mov     byte ptr [rbx], 23h ; '#'
.text:0000000000008F4F                 add     rbx, 1
.text:0000000000008F53
.text:0000000000008F53 loc_8F53:                               ; CODE XREF: vasnprintf+34A↑j
.text:0000000000008F53                 test    al, 40h
.text:0000000000008F55                 jz      short loc_8F5E
.text:0000000000008F57                 mov     byte ptr [rbx], 49h ; 'I'
.text:0000000000008F5A                 add     rbx, 1
.text:0000000000008F5E
.text:0000000000008F5E loc_8F5E:                               ; CODE XREF: vasnprintf+355↑j
.text:0000000000008F5E                 test    al, 20h
.text:0000000000008F60                 jz      short loc_8F69
.text:0000000000008F62                 mov     byte ptr [rbx], 30h ; '0'
.text:0000000000008F65                 add     rbx, 1
.text:0000000000008F69
.text:0000000000008F69 loc_8F69:                               ; CODE XREF: vasnprintf+360↑j
.text:0000000000008F69                 mov     rsi, [r13+18h]  ; src
.text:0000000000008F6D                 mov     rdx, [r13+20h]
.text:0000000000008F71                 cmp     rsi, rdx
.text:0000000000008F74                 jz      short loc_8FA6
.text:0000000000008F76                 mov     rcx, rdx
.text:0000000000008F79                 mov     rdi, rbx        ; dest
.text:0000000000008F7C                 mov     [rbp+var_3E0], r8
.text:0000000000008F83                 sub     rcx, rsi
.text:0000000000008F86                 mov     rdx, rcx        ; n
.text:0000000000008F89                 mov     [rbp+n], rcx
.text:0000000000008F90                 call    _memcpy
.text:0000000000008F95                 mov     rcx, [rbp+n]
.text:0000000000008F9C                 mov     r8, [rbp+var_3E0]
.text:0000000000008FA3                 add     rbx, rcx
.text:0000000000008FA6
.text:0000000000008FA6 loc_8FA6:                               ; CODE XREF: vasnprintf+374↑j
.text:0000000000008FA6                 mov     rsi, [r13+30h]  ; src
.text:0000000000008FAA                 mov     rdx, [r13+38h]
.text:0000000000008FAE                 cmp     rsi, rdx
.text:0000000000008FB1                 jz      short loc_8FE3
.text:0000000000008FB3                 mov     rcx, rdx
.text:0000000000008FB6                 mov     rdi, rbx        ; dest
.text:0000000000008FB9                 mov     [rbp+var_3E0], r8
.text:0000000000008FC0                 sub     rcx, rsi
.text:0000000000008FC3                 mov     rdx, rcx        ; n
.text:0000000000008FC6                 mov     [rbp+n], rcx
.text:0000000000008FCD                 call    _memcpy
.text:0000000000008FD2                 mov     rcx, [rbp+n]
.text:0000000000008FD9                 mov     r8, [rbp+var_3E0]
.text:0000000000008FE0                 add     rbx, rcx
.text:0000000000008FE3
.text:0000000000008FE3 loc_8FE3:                               ; CODE XREF: vasnprintf+3B1↑j
.text:0000000000008FE3                 mov     edi, dword ptr [rbp+var_3D0]
.text:0000000000008FE9                 cmp     edi, 10h
.text:0000000000008FEC                 ja      short loc_901B
.text:0000000000008FEE                 mov     eax, 1
.text:0000000000008FF3                 mov     ecx, edi
.text:0000000000008FF5                 shl     rax, cl
.text:0000000000008FF8                 test    eax, 14180h
.text:0000000000008FFD                 jnz     short loc_9014
.text:0000000000008FFF                 test    ah, 10h
.text:0000000000009002                 jnz     loc_9960
.text:0000000000009008                 test    ah, 6
.text:000000000000900B                 jz      short loc_901B
.text:000000000000900D                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000009010                 add     rbx, 1
.text:0000000000009014
.text:0000000000009014 loc_9014:                               ; CODE XREF: vasnprintf+3FD↑j
.text:0000000000009014                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000009017                 add     rbx, 1
.text:000000000000901B
.text:000000000000901B loc_901B:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000901B                                         ; vasnprintf+40B↑j ...
.text:000000000000901B                 movzx   eax, byte ptr [r13+48h]
.text:0000000000009020                 mov     byte ptr [rbx+1], 0
.text:0000000000009024                 mov     [rbx], al
.text:0000000000009026                 mov     rax, [r13+28h]
.text:000000000000902A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000902E                 jz      loc_9760
.text:0000000000009034                 shl     rax, 5
.text:0000000000009038                 add     rax, r8
.text:000000000000903B                 cmp     dword ptr [rax], 5
.text:000000000000903E                 jnz     def_915B        ; jumptable 000000000000915B default case, case 0
.text:000000000000903E                                         ; jumptable 0000000000009700 default case
.text:0000000000009044                 mov     eax, [rax+10h]
.text:0000000000009047                 mov     dword ptr [rbp+var_3E0], 1
.text:0000000000009051                 mov     [rbp+var_3B8], eax
.text:0000000000009057
.text:0000000000009057 loc_9057:                               ; CODE XREF: vasnprintf+B6A↓j
.text:0000000000009057                 mov     rax, [r13+40h]
.text:000000000000905B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000905F                 jz      short loc_908C
.text:0000000000009061                 shl     rax, 5
.text:0000000000009065                 add     r8, rax
.text:0000000000009068                 cmp     dword ptr [r8], 5
.text:000000000000906C                 jnz     def_915B        ; jumptable 000000000000915B default case, case 0
.text:000000000000906C                                         ; jumptable 0000000000009700 default case
.text:0000000000009072                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000009078                 mov     edx, [r8+10h]
.text:000000000000907C                 mov     [rbp+rax*4+var_3B8], edx
.text:0000000000009083                 lea     eax, [rax+1]
.text:0000000000009086                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000908C
.text:000000000000908C loc_908C:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000908C                 mov     rax, r14
.text:000000000000908F                 xor     edx, edx
.text:0000000000009091                 add     rax, 2
.text:0000000000009095                 jb      loc_9CFC
.text:000000000000909B                 cmp     r12, rax
.text:000000000000909E                 jnb     short loc_90EB
.text:00000000000090A0                 test    r12, r12
.text:00000000000090A3                 jnz     loc_98C8
.text:00000000000090A9                 cmp     rax, 0Ch
.text:00000000000090AD                 ja      loc_98E0
.text:00000000000090B3                 mov     r12d, 0Ch
.text:00000000000090B9
.text:00000000000090B9 loc_90B9:                               ; CODE XREF: vasnprintf+CD4↓j
.text:00000000000090B9                 cmp     r15, [rbp+src]
.text:00000000000090C0                 setz    dl
.text:00000000000090C3                 test    r15, r15
.text:00000000000090C6                 jz      loc_9910
.text:00000000000090CC
.text:00000000000090CC loc_90CC:                               ; CODE XREF: vasnprintf+D03↓j
.text:00000000000090CC                 test    dl, dl
.text:00000000000090CE                 jnz     loc_9910
.text:00000000000090D4                 mov     rsi, r12        ; size
.text:00000000000090D7                 mov     rdi, r15        ; ptr
.text:00000000000090DA                 call    _realloc
.text:00000000000090DF                 test    rax, rax
.text:00000000000090E2                 jz      loc_8D65
.text:00000000000090E8                 mov     r15, rax
.text:00000000000090EB
.text:00000000000090EB loc_90EB:                               ; CODE XREF: vasnprintf+49E↑j
.text:00000000000090EB                                         ; vasnprintf+D53↓j ...
.text:00000000000090EB                 mov     byte ptr [r15+r14], 0
.text:00000000000090F0                 call    ___errno_location
.text:00000000000090F5                 mov     [rbp+n], rax
.text:00000000000090FC                 mov     eax, [rax]
.text:00000000000090FE                 mov     [rbp+var_3F8], rbx
.text:0000000000009105                 mov     [rbp-424h], eax
.text:000000000000910B                 nop     dword ptr [rax+rax+00h]
.text:0000000000009110
.text:0000000000009110 loc_9110:                               ; CODE XREF: vasnprintf+637↓j
.text:0000000000009110                                         ; vasnprintf+68D↓j ...
.text:0000000000009110                 mov     rax, [rbp+n]
.text:0000000000009117                 mov     rbx, r12
.text:000000000000911A                 mov     r10d, 7FFFFFFFh
.text:0000000000009120                 sub     rbx, r14
.text:0000000000009123                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000912D                 cmp     rbx, 7FFFFFFFh
.text:0000000000009134                 mov     dword ptr [rax], 0
.text:000000000000913A                 mov     eax, dword ptr [rbp+var_3D0]
.text:0000000000009140                 cmovbe  r10, rbx
.text:0000000000009144                 cmp     eax, 11h        ; switch 18 cases
.text:0000000000009147                 ja      def_915B        ; jumptable 000000000000915B default case, case 0
.text:0000000000009147                                         ; jumptable 0000000000009700 default case
.text:000000000000914D                 lea     rsi, jpt_915B
.text:0000000000009154                 movsxd  rax, ds:(jpt_915B - 0D2A4h)[rsi+rax*4]
.text:0000000000009158                 add     rax, rsi
.text:000000000000915B                 jmp     rax             ; switch jump
.text:000000000000915B ; ---------------------------------------------------------------------------
.text:000000000000915D                 align 20h
.text:0000000000009160
.text:0000000000009160 loc_9160:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009160                                         ; DATA XREF: .rodata:jpt_915B↓o
.text:0000000000009160                 mov     rax, [r13+50h]  ; jumptable 000000000000915B cases 7-10,15-17
.text:0000000000009164                 lea     rdi, [r15+r14]
.text:0000000000009168                 shl     rax, 5
.text:000000000000916C                 add     rax, [rbp+var_3A8]
.text:0000000000009173                 mov     r9, [rax+10h]
.text:0000000000009177                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000917D                 cmp     eax, 1
.text:0000000000009180                 jz      loc_9648
.text:0000000000009186                 cmp     eax, 2
.text:0000000000009189                 jz      loc_9630
.text:000000000000918F                 sub     rsp, 8
.text:0000000000009193                 push    [rbp+var_3F0]
.text:0000000000009199
.text:0000000000009199 loc_9199:                               ; CODE XREF: vasnprintf+CBE↓j
.text:0000000000009199                 mov     r8, [rbp+var_3D8]
.text:00000000000091A0                 mov     rsi, r10
.text:00000000000091A3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000091AA                 mov     edx, 1
.text:00000000000091AF                 xor     eax, eax
.text:00000000000091B1                 mov     [rbp+var_430], r10
.text:00000000000091B8                 call    ___snprintf_chk
.text:00000000000091BD                 pop     rsi
.text:00000000000091BE                 pop     rdi
.text:00000000000091BF                 mov     r10, [rbp+var_430]
.text:00000000000091C6
.text:00000000000091C6 loc_91C6:                               ; CODE XREF: vasnprintf+83D↓j
.text:00000000000091C6                                         ; vasnprintf+8BE↓j ...
.text:00000000000091C6                 mov     ecx, [rbp+var_3BC]
.text:00000000000091CC                 test    ecx, ecx
.text:00000000000091CE                 js      loc_930C
.text:00000000000091D4
.text:00000000000091D4 loc_91D4:                               ; CODE XREF: vasnprintf+706↓j
.text:00000000000091D4                 movsxd  rdx, ecx
.text:00000000000091D7                 cmp     rdx, r10
.text:00000000000091DA                 jnb     short loc_91EA
.text:00000000000091DC                 add     rdx, r15
.text:00000000000091DF                 cmp     byte ptr [rdx+r14], 0
.text:00000000000091E4                 jnz     def_915B        ; jumptable 000000000000915B default case, case 0
.text:00000000000091E4                                         ; jumptable 0000000000009700 default case
.text:00000000000091EA
.text:00000000000091EA loc_91EA:                               ; CODE XREF: vasnprintf+5DA↑j
.text:00000000000091EA                 cmp     ecx, eax
.text:00000000000091EC                 jge     short loc_91F6
.text:00000000000091EE
.text:00000000000091EE loc_91EE:                               ; CODE XREF: vasnprintf+71F↓j
.text:00000000000091EE                 mov     [rbp+var_3BC], eax
.text:00000000000091F4                 mov     ecx, eax
.text:00000000000091F6
.text:00000000000091F6 loc_91F6:                               ; CODE XREF: vasnprintf+5EC↑j
.text:00000000000091F6                 lea     eax, [rcx+1]
.text:00000000000091F9                 cmp     rax, r10
.text:00000000000091FC                 jb      loc_9A30
.text:0000000000009202                 cmp     rbx, 7FFFFFFEh
.text:0000000000009209                 ja      loc_9A50
.text:000000000000920F                 lea     rsi, [r12+r12]
.text:0000000000009213                 lea     edx, [rcx+2]
.text:0000000000009216                 test    r12, r12
.text:0000000000009219                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009220                 cmovns  rax, rsi
.text:0000000000009224                 add     rdx, r14
.text:0000000000009227                 jb      loc_9CE8
.text:000000000000922D                 cmp     rax, rdx
.text:0000000000009230                 cmovb   rax, rdx
.text:0000000000009234                 cmp     r12, rax
.text:0000000000009237                 jnb     loc_9110
.text:000000000000923D                 test    r12, r12
.text:0000000000009240                 js      loc_8D71
.text:0000000000009246                 cmp     rsi, rax
.text:0000000000009249                 mov     r12, rsi
.text:000000000000924C                 jnb     short loc_925B
.text:000000000000924E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009252                 jz      loc_8D71
.text:0000000000009258                 mov     r12, rax
.text:000000000000925B
.text:000000000000925B loc_925B:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000925B                 cmp     r15, [rbp+src]
.text:0000000000009262                 setz    bl
.text:0000000000009265                 test    r15, r15
.text:0000000000009268                 jz      loc_95F0
.text:000000000000926E                 test    bl, bl
.text:0000000000009270                 jnz     loc_95F0
.text:0000000000009276                 mov     rsi, r12        ; size
.text:0000000000009279                 mov     rdi, r15        ; ptr
.text:000000000000927C                 call    _realloc
.text:0000000000009281                 test    rax, rax
.text:0000000000009284                 jz      loc_8D71
.text:000000000000928A                 mov     r15, rax
.text:000000000000928D                 jmp     loc_9110
.text:000000000000928D ; ---------------------------------------------------------------------------
.text:0000000000009292                 align 8
.text:0000000000009298
.text:0000000000009298 loc_9298:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009298                                         ; DATA XREF: .rodata:jpt_915B↓o
.text:0000000000009298                 mov     rax, [r13+50h]  ; jumptable 000000000000915B cases 5,6,13,14
.text:000000000000929C                 lea     rdi, [r15+r14]
.text:00000000000092A0                 shl     rax, 5
.text:00000000000092A4                 add     rax, [rbp+var_3A8]
.text:00000000000092AB                 mov     r9d, [rax+10h]
.text:00000000000092AF                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000092B5                 cmp     eax, 1
.text:00000000000092B8                 jz      loc_94F0
.text:00000000000092BE
.text:00000000000092BE loc_92BE:                               ; CODE XREF: vasnprintf+8E9↓j
.text:00000000000092BE                                         ; vasnprintf+9B1↓j ...
.text:00000000000092BE                 cmp     eax, 2
.text:00000000000092C1                 jz      loc_9538
.text:00000000000092C7
.text:00000000000092C7 loc_92C7:                               ; CODE XREF: vasnprintf+92E↓j
.text:00000000000092C7                 sub     rsp, 8
.text:00000000000092CB                 push    [rbp+var_3F0]
.text:00000000000092D1
.text:00000000000092D1 loc_92D1:                               ; CODE XREF: vasnprintf+8FF↓j
.text:00000000000092D1                 mov     r8, [rbp+var_3D8]
.text:00000000000092D8                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000092DF                 mov     edx, 1
.text:00000000000092E4                 mov     rsi, r10
.text:00000000000092E7                 xor     eax, eax
.text:00000000000092E9                 mov     [rbp+var_430], r10
.text:00000000000092F0                 call    ___snprintf_chk
.text:00000000000092F5                 pop     rdx
.text:00000000000092F6                 pop     rcx
.text:00000000000092F7                 mov     ecx, [rbp+var_3BC]
.text:00000000000092FD                 mov     r10, [rbp+var_430]
.text:0000000000009304                 test    ecx, ecx
.text:0000000000009306                 jns     loc_91D4
.text:000000000000930C
.text:000000000000930C loc_930C:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000930C                 mov     rdi, [rbp+var_3F8]
.text:0000000000009313                 cmp     byte ptr [rdi+1], 0
.text:0000000000009317                 jnz     loc_9658
.text:000000000000931D                 test    eax, eax
.text:000000000000931F                 jns     loc_91EE
.text:0000000000009325                 mov     rax, [rbp+n]
.text:000000000000932C                 mov     ebx, [rax]
.text:000000000000932E                 test    ebx, ebx
.text:0000000000009330                 jnz     short loc_9350
.text:0000000000009332                 movzx   eax, byte ptr [r13+48h]
.text:0000000000009337                 mov     ebx, 16h
.text:000000000000933C                 and     eax, 0FFFFFFEFh
.text:000000000000933F                 cmp     al, 63h ; 'c'
.text:0000000000009341                 mov     eax, 54h ; 'T'
.text:0000000000009346                 cmovz   ebx, eax
.text:0000000000009349                 nop     dword ptr [rax+00000000h]
.text:0000000000009350
.text:0000000000009350 loc_9350:                               ; CODE XREF: vasnprintf+730↑j
.text:0000000000009350                 cmp     r15, [rbp+src]
.text:0000000000009357                 jz      short loc_9362
.text:0000000000009359                 test    r15, r15
.text:000000000000935C                 jnz     loc_9B0C
.text:0000000000009362
.text:0000000000009362 loc_9362:                               ; CODE XREF: vasnprintf+757↑j
.text:0000000000009362                                         ; vasnprintf+F14↓j
.text:0000000000009362                 mov     rax, [rbp+ptr]
.text:0000000000009369                 test    rax, rax
.text:000000000000936C                 jz      short loc_9376
.text:000000000000936E                 mov     rdi, rax        ; ptr
.text:0000000000009371                 call    _free
.text:0000000000009376
.text:0000000000009376 loc_9376:                               ; CODE XREF: vasnprintf+76C↑j
.text:0000000000009376                 mov     rax, [rbp+var_408]
.text:000000000000937D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000009384                 add     rax, 20h ; ' '
.text:0000000000009388                 cmp     rdi, rax
.text:000000000000938B                 jz      short loc_9392
.text:000000000000938D                 call    _free
.text:0000000000009392
.text:0000000000009392 loc_9392:                               ; CODE XREF: vasnprintf+78B↑j
.text:0000000000009392                 mov     rax, [rbp+var_410]
.text:0000000000009399                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000093A0                 add     rax, 10h
.text:00000000000093A4                 cmp     rdi, rax
.text:00000000000093A7                 jz      short loc_93AE
.text:00000000000093A9                 call    _free
.text:00000000000093AE
.text:00000000000093AE loc_93AE:                               ; CODE XREF: vasnprintf+7A7↑j
.text:00000000000093AE                 mov     rax, [rbp+n]
.text:00000000000093B5                 xor     r15d, r15d
.text:00000000000093B8                 mov     [rax], ebx
.text:00000000000093BA                 jmp     loc_8DDF
.text:00000000000093BA ; ---------------------------------------------------------------------------
.text:00000000000093BF                 align 20h
.text:00000000000093C0
.text:00000000000093C0 loc_93C0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000093C0                                         ; DATA XREF: .rodata:jpt_915B↓o
.text:00000000000093C0                 mov     rax, [r13+50h]  ; jumptable 000000000000915B case 12
.text:00000000000093C4                 lea     rdi, [r15+r14]
.text:00000000000093C8                 shl     rax, 5
.text:00000000000093CC                 add     rax, [rbp+var_3A8]
.text:00000000000093D3                 fld     tbyte ptr [rax+10h]
.text:00000000000093D6                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000093DC                 cmp     eax, 1
.text:00000000000093DF                 jz      loc_9A10
.text:00000000000093E5                 cmp     eax, 2
.text:00000000000093E8                 jnz     loc_98B0
.text:00000000000093EE                 mov     eax, [rbp+var_3B4]
.text:00000000000093F4                 sub     rsp, 8
.text:00000000000093F8                 push    [rbp+var_3F0]
.text:00000000000093FE                 mov     r9d, [rbp+var_3B8]
.text:0000000000009405                 mov     r8, [rbp+var_3D8]
.text:000000000000940C                 mov     rsi, r10
.text:000000000000940F                 sub     rsp, 18h
.text:0000000000009413                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000941A                 mov     edx, 1
.text:000000000000941F                 fstp    [rsp+458h+var_450]
.text:0000000000009423                 push    rax
.text:0000000000009424                 xor     eax, eax
.text:0000000000009426                 mov     [rbp+var_430], r10
.text:000000000000942D                 call    ___snprintf_chk
.text:0000000000009432                 add     rsp, 30h
.text:0000000000009436                 mov     r10, [rbp+var_430]
.text:000000000000943D                 jmp     loc_91C6
.text:000000000000943D ; ---------------------------------------------------------------------------
.text:0000000000009442                 align 8
.text:0000000000009448
.text:0000000000009448 loc_9448:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009448                                         ; DATA XREF: .rodata:jpt_915B↓o
.text:0000000000009448                 mov     rax, [r13+50h]  ; jumptable 000000000000915B case 11
.text:000000000000944C                 lea     rdi, [r15+r14]
.text:0000000000009450                 shl     rax, 5
.text:0000000000009454                 add     rax, [rbp+var_3A8]
.text:000000000000945B                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000009460                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000009466                 cmp     eax, 1
.text:0000000000009469                 jz      loc_9A00
.text:000000000000946F                 cmp     eax, 2
.text:0000000000009472                 jnz     loc_9870
.text:0000000000009478                 mov     eax, [rbp+var_3B4]
.text:000000000000947E                 push    [rbp+var_3F0]
.text:0000000000009484                 push    rax
.text:0000000000009485
.text:0000000000009485 loc_9485:                               ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000009485                 mov     r9d, [rbp+var_3B8]
.text:000000000000948C                 mov     r8, [rbp+var_3D8]
.text:0000000000009493                 mov     rsi, r10
.text:0000000000009496                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000949D                 mov     edx, 1
.text:00000000000094A2                 mov     eax, 1
.text:00000000000094A7                 mov     [rbp+var_430], r10
.text:00000000000094AE                 call    ___snprintf_chk
.text:00000000000094B3                 pop     r8
.text:00000000000094B5                 mov     r10, [rbp+var_430]
.text:00000000000094BC                 pop     r9
.text:00000000000094BE                 jmp     loc_91C6
.text:00000000000094BE ; ---------------------------------------------------------------------------
.text:00000000000094C3                 align 8
.text:00000000000094C8
.text:00000000000094C8 loc_94C8:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000094C8                                         ; DATA XREF: .rodata:jpt_915B↓o
.text:00000000000094C8                 mov     rax, [r13+50h]  ; jumptable 000000000000915B case 4
.text:00000000000094CC                 lea     rdi, [r15+r14]
.text:00000000000094D0                 shl     rax, 5
.text:00000000000094D4                 add     rax, [rbp+var_3A8]
.text:00000000000094DB                 movzx   r9d, word ptr [rax+10h]
.text:00000000000094E0                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000094E6                 cmp     eax, 1
.text:00000000000094E9                 jnz     loc_92BE
.text:00000000000094EF                 nop
.text:00000000000094F0
.text:00000000000094F0 loc_94F0:                               ; CODE XREF: vasnprintf+6B8↑j
.text:00000000000094F0                                         ; vasnprintf+929↓j ...
.text:00000000000094F0                 push    [rbp+var_3F0]
.text:00000000000094F6                 push    r9
.text:00000000000094F8
.text:00000000000094F8 loc_94F8:                               ; CODE XREF: vasnprintf+A50↓j
.text:00000000000094F8                 mov     r9d, [rbp+var_3B8]
.text:00000000000094FF                 jmp     loc_92D1
.text:00000000000094FF ; ---------------------------------------------------------------------------
.text:0000000000009504                 align 8
.text:0000000000009508
.text:0000000000009508 loc_9508:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009508                                         ; DATA XREF: .rodata:jpt_915B↓o
.text:0000000000009508                 mov     rax, [r13+50h]  ; jumptable 000000000000915B case 3
.text:000000000000950C                 lea     rdi, [r15+r14]
.text:0000000000009510                 shl     rax, 5
.text:0000000000009514                 add     rax, [rbp+var_3A8]
.text:000000000000951B                 movsx   r9d, word ptr [rax+10h]
.text:0000000000009520                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000009526                 cmp     eax, 1
.text:0000000000009529                 jz      short loc_94F0
.text:000000000000952B                 cmp     eax, 2
.text:000000000000952E                 jnz     loc_92C7
.text:0000000000009534                 nop     dword ptr [rax+00h]
.text:0000000000009538
.text:0000000000009538 loc_9538:                               ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000009538                 sub     rsp, 8
.text:000000000000953C                 push    [rbp+var_3F0]
.text:0000000000009542                 push    r9
.text:0000000000009544
.text:0000000000009544 loc_9544:                               ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000009544                 mov     eax, [rbp+var_3B4]
.text:000000000000954A                 push    rax
.text:000000000000954B
.text:000000000000954B loc_954B:                               ; CODE XREF: vasnprintf+E21↓j
.text:000000000000954B                 mov     r9d, [rbp+var_3B8]
.text:0000000000009552                 mov     r8, [rbp+var_3D8]
.text:0000000000009559                 mov     rsi, r10
.text:000000000000955C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009563                 mov     edx, 1
.text:0000000000009568                 xor     eax, eax
.text:000000000000956A                 mov     [rbp+var_430], r10
.text:0000000000009571                 call    ___snprintf_chk
.text:0000000000009576                 add     rsp, 20h
.text:000000000000957A                 mov     r10, [rbp+var_430]
.text:0000000000009581                 jmp     loc_91C6
.text:0000000000009581 ; ---------------------------------------------------------------------------
.text:0000000000009586                 align 10h
.text:0000000000009590
.text:0000000000009590 loc_9590:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009590                                         ; DATA XREF: .rodata:jpt_915B↓o
.text:0000000000009590                 mov     rax, [r13+50h]  ; jumptable 000000000000915B case 2
.text:0000000000009594                 lea     rdi, [r15+r14]
.text:0000000000009598                 shl     rax, 5
.text:000000000000959C                 add     rax, [rbp+var_3A8]
.text:00000000000095A3                 movzx   r9d, byte ptr [rax+10h]
.text:00000000000095A8                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000095AE                 cmp     eax, 1
.text:00000000000095B1                 jnz     loc_92BE
.text:00000000000095B7                 jmp     loc_94F0
.text:00000000000095B7 ; ---------------------------------------------------------------------------
.text:00000000000095BC                 align 20h
.text:00000000000095C0
.text:00000000000095C0 loc_95C0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000095C0                                         ; DATA XREF: .rodata:jpt_915B↓o
.text:00000000000095C0                 mov     rax, [r13+50h]  ; jumptable 000000000000915B case 1
.text:00000000000095C4                 lea     rdi, [r15+r14]
.text:00000000000095C8                 shl     rax, 5
.text:00000000000095CC                 add     rax, [rbp+var_3A8]
.text:00000000000095D3                 movsx   r9d, byte ptr [rax+10h]
.text:00000000000095D8                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000095DE                 cmp     eax, 1
.text:00000000000095E1                 jnz     loc_92BE
.text:00000000000095E7                 jmp     loc_94F0
.text:00000000000095E7 ; ---------------------------------------------------------------------------
.text:00000000000095EC                 align 10h
.text:00000000000095F0
.text:00000000000095F0 loc_95F0:                               ; CODE XREF: vasnprintf+668↑j
.text:00000000000095F0                                         ; vasnprintf+670↑j
.text:00000000000095F0                 mov     rdi, r12        ; size
.text:00000000000095F3                 call    _malloc
.text:00000000000095F8                 test    rax, rax
.text:00000000000095FB                 mov     rcx, rax
.text:00000000000095FE                 jz      loc_8D71
.text:0000000000009604                 test    r14, r14
.text:0000000000009607                 jz      loc_96C0
.text:000000000000960D                 test    bl, bl
.text:000000000000960F                 jz      loc_96C0
.text:0000000000009615                 mov     rsi, r15        ; src
.text:0000000000009618                 mov     rdx, r14        ; n
.text:000000000000961B                 mov     rdi, rax        ; dest
.text:000000000000961E                 call    _memcpy
.text:0000000000009623                 mov     r15, rax
.text:0000000000009626                 jmp     loc_9110
.text:0000000000009626 ; ---------------------------------------------------------------------------
.text:000000000000962B                 align 10h
.text:0000000000009630
.text:0000000000009630 loc_9630:                               ; CODE XREF: vasnprintf+589↑j
.text:0000000000009630                 sub     rsp, 8
.text:0000000000009634                 push    [rbp+var_3F0]
.text:000000000000963A                 push    r9
.text:000000000000963C                 jmp     loc_9544
.text:000000000000963C ; ---------------------------------------------------------------------------
.text:0000000000009641                 align 8
.text:0000000000009648
.text:0000000000009648 loc_9648:                               ; CODE XREF: vasnprintf+580↑j
.text:0000000000009648                 push    [rbp+var_3F0]
.text:000000000000964E                 push    r9
.text:0000000000009650                 jmp     loc_94F8
.text:0000000000009650 ; ---------------------------------------------------------------------------
.text:0000000000009655                 align 8
.text:0000000000009658
.text:0000000000009658 loc_9658:                               ; CODE XREF: vasnprintf+717↑j
.text:0000000000009658                 mov     byte ptr [rdi+1], 0
.text:000000000000965C                 jmp     loc_9110
.text:000000000000965C ; ---------------------------------------------------------------------------
.text:0000000000009661                 align 8
.text:0000000000009668
.text:0000000000009668 loc_9668:                               ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000009668                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000966C                 jnz     def_915B        ; jumptable 000000000000915B default case, case 0
.text:000000000000966C                                         ; jumptable 0000000000009700 default case
.text:0000000000009672                 mov     rax, r14
.text:0000000000009675                 add     rax, 1
.text:0000000000009679                 mov     rbx, rax
.text:000000000000967C                 jnb     loc_9708
.text:0000000000009682                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000009686                 jnz     loc_8D65
.text:000000000000968C                 mov     rbx, r12
.text:000000000000968F
.text:000000000000968F loc_968F:                               ; CODE XREF: vasnprintf+B0B↓j
.text:000000000000968F                                         ; vasnprintf+B58↓j ...
.text:000000000000968F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000009694
.text:0000000000009694 loc_9694:                               ; CODE XREF: vasnprintf+C46↓j
.text:0000000000009694                                         ; vasnprintf+D76↓j ...
.text:0000000000009694                 mov     r8, [r13+8]
.text:0000000000009698                 add     r13, 58h ; 'X'
.text:000000000000969C                 mov     rcx, [r13+0]
.text:00000000000096A0                 add     [rbp+var_400], 1
.text:00000000000096A8                 cmp     rcx, r8
.text:00000000000096AB                 jnz     loc_8D49
.text:00000000000096B1
.text:00000000000096B1 loc_96B1:                               ; CODE XREF: vasnprintf+143↑j
.text:00000000000096B1                 mov     r14, rbx
.text:00000000000096B4                 jmp     loc_8EB3
.text:00000000000096B4 ; ---------------------------------------------------------------------------
.text:00000000000096B9                 align 20h
.text:00000000000096C0
.text:00000000000096C0 loc_96C0:                               ; CODE XREF: vasnprintf+A07↑j
.text:00000000000096C0                                         ; vasnprintf+A0F↑j
.text:00000000000096C0                 mov     r15, rcx
.text:00000000000096C3                 jmp     loc_9110
.text:00000000000096C8 ; ---------------------------------------------------------------------------
.text:00000000000096C8
.text:00000000000096C8 loc_96C8:                               ; CODE XREF: vasnprintf+9A↑j
.text:00000000000096C8                                         ; vasnprintf+AE↑j ...
.text:00000000000096C8                 call    ___errno_location
.text:00000000000096CD                 mov     [rbp+n], rax
.text:00000000000096D4                 jmp     loc_8D97
.text:00000000000096D4 ; ---------------------------------------------------------------------------
.text:00000000000096D9                 align 20h
.text:00000000000096E0
.text:00000000000096E0 loc_96E0:                               ; CODE XREF: vasnprintf+2FC↑j
.text:00000000000096E0                 mov     edx, edi
.text:00000000000096E2                 sub     edx, 12h        ; switch 5 cases
.text:00000000000096E5                 cmp     edx, 4
.text:00000000000096E8                 ja      def_915B        ; jumptable 000000000000915B default case, case 0
.text:00000000000096E8                                         ; jumptable 0000000000009700 default case
.text:00000000000096EE                 lea     rdi, jpt_9700
.text:00000000000096F5                 mov     rax, [rax+10h]
.text:00000000000096F9                 movsxd  rdx, ds:(jpt_9700 - 0D2ECh)[rdi+rdx*4]
.text:00000000000096FD                 add     rdx, rdi
.text:0000000000009700                 jmp     rdx             ; switch jump
.text:0000000000009700 ; ---------------------------------------------------------------------------
.text:0000000000009702                 align 8
.text:0000000000009708
.text:0000000000009708 loc_9708:                               ; CODE XREF: vasnprintf+A7C↑j
.text:0000000000009708                 cmp     r12, rax
.text:000000000000970B                 jnb     short loc_968F
.text:000000000000970D                 test    r12, r12
.text:0000000000009710                 jnz     loc_9AE0
.text:0000000000009716                 cmp     rax, 0Ch
.text:000000000000971A                 ja      loc_9AF2
.text:0000000000009720                 mov     r12d, 0Ch
.text:0000000000009726
.text:0000000000009726 loc_9726:                               ; CODE XREF: vasnprintf+EEC↓j
.text:0000000000009726                                         ; vasnprintf+EFF↓j
.text:0000000000009726                 cmp     r15, [rbp+src]
.text:000000000000972D                 setz    dl
.text:0000000000009730                 test    r15, r15
.text:0000000000009733                 jz      loc_99A0
.text:0000000000009739                 test    dl, dl
.text:000000000000973B                 jnz     loc_99A0
.text:0000000000009741                 mov     rsi, r12        ; size
.text:0000000000009744                 mov     rdi, r15        ; ptr
.text:0000000000009747                 call    _realloc
.text:000000000000974C                 test    rax, rax
.text:000000000000974F                 jz      loc_984B
.text:0000000000009755                 mov     r15, rax
.text:0000000000009758                 jmp     loc_968F
.text:0000000000009758 ; ---------------------------------------------------------------------------
.text:000000000000975D                 align 20h
.text:0000000000009760
.text:0000000000009760 loc_9760:                               ; CODE XREF: vasnprintf+42E↑j
.text:0000000000009760                 mov     dword ptr [rbp+var_3E0], 0
.text:000000000000976A                 jmp     loc_9057
.text:000000000000976A ; ---------------------------------------------------------------------------
.text:000000000000976F                 align 10h
.text:0000000000009770
.text:0000000000009770 loc_9770:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000009770                 js      loc_8D65
.text:0000000000009776                 add     r12, r12
.text:0000000000009779                 cmp     r12, rax
.text:000000000000977C                 jnb     loc_8E56
.text:0000000000009782
.text:0000000000009782 loc_9782:                               ; CODE XREF: vasnprintf+24A↑j
.text:0000000000009782                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009786                 jz      loc_8D65
.text:000000000000978C                 cmp     r15, [rbp+src]
.text:0000000000009793                 mov     r12, rax
.text:0000000000009796                 setz    dl
.text:0000000000009799                 test    r15, r15
.text:000000000000979C                 jnz     loc_8E69
.text:00000000000097A2                 nop     word ptr [rax+rax+00h]
.text:00000000000097A8
.text:00000000000097A8 loc_97A8:                               ; CODE XREF: vasnprintf+263↑j
.text:00000000000097A8                                         ; vasnprintf+26B↑j
.text:00000000000097A8                 mov     rdi, r12        ; size
.text:00000000000097AB                 mov     [rbp+var_3E0], r8
.text:00000000000097B2                 mov     byte ptr [rbp+var_3D0], dl
.text:00000000000097B8                 mov     [rbp+n], rcx
.text:00000000000097BF                 call    _malloc
.text:00000000000097C4                 test    rax, rax
.text:00000000000097C7                 mov     r9, rax
.text:00000000000097CA                 mov     rcx, [rbp+n]
.text:00000000000097D1                 movzx   edx, byte ptr [rbp+var_3D0]
.text:00000000000097D8                 mov     r8, [rbp+var_3E0]
.text:00000000000097DF                 jz      loc_8D65
.text:00000000000097E5                 test    rbx, rbx
.text:00000000000097E8                 jz      loc_99F0
.text:00000000000097EE                 test    dl, dl
.text:00000000000097F0                 jz      loc_99F0
.text:00000000000097F6                 mov     rsi, r15        ; src
.text:00000000000097F9                 mov     rdx, rbx        ; n
.text:00000000000097FC                 mov     rdi, rax        ; dest
.text:00000000000097FF                 mov     [rbp+var_3D0], r8
.text:0000000000009806                 mov     [rbp+n], rcx
.text:000000000000980D                 call    _memcpy
.text:0000000000009812                 mov     rcx, [rbp+n]
.text:0000000000009819                 mov     r15, rax
.text:000000000000981C                 mov     r8, [rbp+var_3D0]
.text:0000000000009823                 jmp     loc_8EA4
.text:0000000000009823 ; ---------------------------------------------------------------------------
.text:0000000000009828                 align 10h
.text:0000000000009830
.text:0000000000009830 loc_9830:                               ; CODE XREF: vasnprintf+15F↑j
.text:0000000000009830                 mov     r14, r12
.text:0000000000009833                 jmp     loc_8EA4
.text:0000000000009833 ; ---------------------------------------------------------------------------
.text:0000000000009838                 align 20h
.text:0000000000009840
.text:0000000000009840 loc_9840:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000009840                                         ; DATA XREF: .rodata:jpt_9700↓o
.text:0000000000009840                 mov     [rax], r14      ; jumptable 0000000000009700 cases 21,22
.text:0000000000009843                 mov     rbx, r14
.text:0000000000009846                 jmp     loc_9694
.text:000000000000984B ; ---------------------------------------------------------------------------
.text:000000000000984B
.text:000000000000984B loc_984B:                               ; CODE XREF: vasnprintf+29B↑j
.text:000000000000984B                                         ; vasnprintf+B4F↑j ...
.text:000000000000984B                 call    ___errno_location
.text:0000000000009850                 mov     [rbp+n], rax
.text:0000000000009857                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009860
.text:0000000000009860 loc_9860:                               ; CODE XREF: vasnprintf+17D↑j
.text:0000000000009860                 mov     rdi, r15        ; ptr
.text:0000000000009863                 call    _free
.text:0000000000009868                 jmp     loc_8D83
.text:0000000000009868 ; ---------------------------------------------------------------------------
.text:000000000000986D                 align 10h
.text:0000000000009870
.text:0000000000009870 loc_9870:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000009870                 mov     r9, [rbp+var_3F0]
.text:0000000000009877                 mov     r8, [rbp+var_3D8]
.text:000000000000987E                 mov     rsi, r10
.text:0000000000009881                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009888                 mov     edx, 1
.text:000000000000988D                 mov     eax, 1
.text:0000000000009892                 mov     [rbp+var_430], r10
.text:0000000000009899                 call    ___snprintf_chk
.text:000000000000989E                 mov     r10, [rbp+var_430]
.text:00000000000098A5                 jmp     loc_91C6
.text:00000000000098A5 ; ---------------------------------------------------------------------------
.text:00000000000098AA                 align 10h
.text:00000000000098B0
.text:00000000000098B0 loc_98B0:                               ; CODE XREF: vasnprintf+7E8↑j
.text:00000000000098B0                 sub     rsp, 10h
.text:00000000000098B4                 mov     r9, [rbp+var_3F0]
.text:00000000000098BB                 fstp    [rsp+440h+var_440]
.text:00000000000098BE                 jmp     loc_9199
.text:00000000000098BE ; ---------------------------------------------------------------------------
.text:00000000000098C3                 align 8
.text:00000000000098C8
.text:00000000000098C8 loc_98C8:                               ; CODE XREF: vasnprintf+4A3↑j
.text:00000000000098C8                 js      loc_8D65
.text:00000000000098CE                 add     r12, r12
.text:00000000000098D1                 cmp     r12, rax
.text:00000000000098D4                 jnb     loc_90B9
.text:00000000000098DA                 nop     word ptr [rax+rax+00h]
.text:00000000000098E0
.text:00000000000098E0 loc_98E0:                               ; CODE XREF: vasnprintf+4AD↑j
.text:00000000000098E0                                         ; vasnprintf+1114↓j
.text:00000000000098E0                 test    rdx, rdx
.text:00000000000098E3                 jnz     loc_8D65
.text:00000000000098E9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000098ED                 jz      loc_8D65
.text:00000000000098F3                 cmp     r15, [rbp+src]
.text:00000000000098FA                 mov     r12, rax
.text:00000000000098FD                 setz    dl
.text:0000000000009900                 test    r15, r15
.text:0000000000009903                 jnz     loc_90CC
.text:0000000000009909                 nop     dword ptr [rax+00000000h]
.text:0000000000009910
.text:0000000000009910 loc_9910:                               ; CODE XREF: vasnprintf+4C6↑j
.text:0000000000009910                                         ; vasnprintf+4CE↑j
.text:0000000000009910                 mov     rdi, r12        ; size
.text:0000000000009913                 mov     byte ptr [rbp+n], dl
.text:0000000000009919                 call    _malloc
.text:000000000000991E                 test    rax, rax
.text:0000000000009921                 mov     rcx, rax
.text:0000000000009924                 movzx   edx, byte ptr [rbp+n]
.text:000000000000992B                 jz      loc_8D65
.text:0000000000009931                 test    r14, r14
.text:0000000000009934                 jz      loc_9AD0
.text:000000000000993A                 test    dl, dl
.text:000000000000993C                 jz      loc_9AD0
.text:0000000000009942                 mov     rsi, r15        ; src
.text:0000000000009945                 mov     rdx, r14        ; n
.text:0000000000009948                 mov     rdi, rax        ; dest
.text:000000000000994B                 call    _memcpy
.text:0000000000009950                 mov     r15, rax
.text:0000000000009953                 jmp     loc_90EB
.text:0000000000009953 ; ---------------------------------------------------------------------------
.text:0000000000009958                 align 20h
.text:0000000000009960
.text:0000000000009960 loc_9960:                               ; CODE XREF: vasnprintf+402↑j
.text:0000000000009960                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000009963                 add     rbx, 1
.text:0000000000009967                 jmp     loc_901B
.text:0000000000009967 ; ---------------------------------------------------------------------------
.text:000000000000996C                 align 10h
.text:0000000000009970
.text:0000000000009970 loc_9970:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000009970                                         ; DATA XREF: .rodata:jpt_9700↓o
.text:0000000000009970                 mov     [rax], r14b     ; jumptable 0000000000009700 case 18
.text:0000000000009973                 mov     rbx, r14
.text:0000000000009976                 jmp     loc_9694
.text:0000000000009976 ; ---------------------------------------------------------------------------
.text:000000000000997B                 align 20h
.text:0000000000009980
.text:0000000000009980 loc_9980:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000009980                                         ; DATA XREF: .rodata:jpt_9700↓o
.text:0000000000009980                 mov     [rax], r14d     ; jumptable 0000000000009700 case 20
.text:0000000000009983                 mov     rbx, r14
.text:0000000000009986                 jmp     loc_9694
.text:0000000000009986 ; ---------------------------------------------------------------------------
.text:000000000000998B                 align 10h
.text:0000000000009990
.text:0000000000009990 loc_9990:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000009990                                         ; DATA XREF: .rodata:jpt_9700↓o
.text:0000000000009990                 mov     [rax], r14w     ; jumptable 0000000000009700 case 19
.text:0000000000009994                 mov     rbx, r14
.text:0000000000009997                 jmp     loc_9694
.text:0000000000009997 ; ---------------------------------------------------------------------------
.text:000000000000999C                 align 20h
.text:00000000000099A0
.text:00000000000099A0 loc_99A0:                               ; CODE XREF: vasnprintf+B33↑j
.text:00000000000099A0                                         ; vasnprintf+B3B↑j
.text:00000000000099A0                 mov     rdi, r12        ; size
.text:00000000000099A3                 mov     byte ptr [rbp+n], dl
.text:00000000000099A9                 call    _malloc
.text:00000000000099AE                 test    rax, rax
.text:00000000000099B1                 mov     rcx, rax
.text:00000000000099B4                 movzx   edx, byte ptr [rbp+n]
.text:00000000000099BB                 jz      loc_8D65
.text:00000000000099C1                 test    r14, r14
.text:00000000000099C4                 jz      loc_9B04
.text:00000000000099CA                 test    dl, dl
.text:00000000000099CC                 jz      loc_9B04
.text:00000000000099D2                 mov     rsi, r15        ; src
.text:00000000000099D5                 mov     rdx, r14        ; n
.text:00000000000099D8                 mov     rdi, rax        ; dest
.text:00000000000099DB                 call    _memcpy
.text:00000000000099E0                 mov     r15, rax
.text:00000000000099E3                 jmp     loc_968F
.text:00000000000099E3 ; ---------------------------------------------------------------------------
.text:00000000000099E8                 align 10h
.text:00000000000099F0
.text:00000000000099F0 loc_99F0:                               ; CODE XREF: vasnprintf+BE8↑j
.text:00000000000099F0                                         ; vasnprintf+BF0↑j
.text:00000000000099F0                 mov     r15, r9
.text:00000000000099F3                 jmp     loc_8EA4
.text:00000000000099F3 ; ---------------------------------------------------------------------------
.text:00000000000099F8                 align 20h
.text:0000000000009A00
.text:0000000000009A00 loc_9A00:                               ; CODE XREF: vasnprintf+869↑j
.text:0000000000009A00                 sub     rsp, 8
.text:0000000000009A04                 push    [rbp+var_3F0]
.text:0000000000009A0A                 jmp     loc_9485
.text:0000000000009A0A ; ---------------------------------------------------------------------------
.text:0000000000009A0F                 align 10h
.text:0000000000009A10
.text:0000000000009A10 loc_9A10:                               ; CODE XREF: vasnprintf+7DF↑j
.text:0000000000009A10                 sub     rsp, 8
.text:0000000000009A14                 push    [rbp+var_3F0]
.text:0000000000009A1A                 sub     rsp, 10h
.text:0000000000009A1E                 fstp    [rsp+450h+var_450]
.text:0000000000009A21                 jmp     loc_954B
.text:0000000000009A21 ; ---------------------------------------------------------------------------
.text:0000000000009A26                 align 10h
.text:0000000000009A30
.text:0000000000009A30 loc_9A30:                               ; CODE XREF: vasnprintf+5FC↑j
.text:0000000000009A30                 mov     rax, [rbp+n]
.text:0000000000009A37                 mov     edi, [rbp-424h]
.text:0000000000009A3D                 movsxd  rbx, ecx
.text:0000000000009A40                 add     rbx, r14
.text:0000000000009A43                 mov     [rax], edi
.text:0000000000009A45                 jmp     loc_9694
.text:0000000000009A45 ; ---------------------------------------------------------------------------
.text:0000000000009A4A                 align 10h
.text:0000000000009A50
.text:0000000000009A50 loc_9A50:                               ; CODE XREF: vasnprintf+609↑j
.text:0000000000009A50                 cmp     r15, [rbp+src]
.text:0000000000009A57                 jz      short loc_9A62
.text:0000000000009A59                 test    r15, r15
.text:0000000000009A5C                 jnz     loc_9B19
.text:0000000000009A62
.text:0000000000009A62 loc_9A62:                               ; CODE XREF: vasnprintf+E57↑j
.text:0000000000009A62                                         ; vasnprintf+F21↓j
.text:0000000000009A62                 mov     rax, [rbp+ptr]
.text:0000000000009A69                 test    rax, rax
.text:0000000000009A6C                 jz      short loc_9A76
.text:0000000000009A6E                 mov     rdi, rax        ; ptr
.text:0000000000009A71                 call    _free
.text:0000000000009A76
.text:0000000000009A76 loc_9A76:                               ; CODE XREF: vasnprintf+E6C↑j
.text:0000000000009A76                 mov     rax, [rbp+var_408]
.text:0000000000009A7D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000009A84                 add     rax, 20h ; ' '
.text:0000000000009A88                 cmp     rdi, rax
.text:0000000000009A8B                 jz      short loc_9A92
.text:0000000000009A8D                 call    _free
.text:0000000000009A92
.text:0000000000009A92 loc_9A92:                               ; CODE XREF: vasnprintf+E8B↑j
.text:0000000000009A92                 mov     rax, [rbp+var_410]
.text:0000000000009A99                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000009AA0                 add     rax, 10h
.text:0000000000009AA4                 cmp     rdi, rax
.text:0000000000009AA7                 jz      short loc_9AAE
.text:0000000000009AA9                 call    _free
.text:0000000000009AAE
.text:0000000000009AAE loc_9AAE:                               ; CODE XREF: vasnprintf+EA7↑j
.text:0000000000009AAE                 mov     rax, [rbp+n]
.text:0000000000009AB5                 xor     r15d, r15d
.text:0000000000009AB8                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000009ABE                 jmp     loc_8DDF
.text:0000000000009ABE ; ---------------------------------------------------------------------------
.text:0000000000009AC3                 align 8
.text:0000000000009AC8
.text:0000000000009AC8 loc_9AC8:                               ; CODE XREF: vasnprintf+60↑j
.text:0000000000009AC8                 xor     r15d, r15d
.text:0000000000009ACB                 jmp     loc_8DDF
.text:0000000000009AD0 ; ---------------------------------------------------------------------------
.text:0000000000009AD0
.text:0000000000009AD0 loc_9AD0:                               ; CODE XREF: vasnprintf+D34↑j
.text:0000000000009AD0                                         ; vasnprintf+D3C↑j
.text:0000000000009AD0                 mov     r15, rcx
.text:0000000000009AD3                 jmp     loc_90EB
.text:0000000000009AD3 ; ---------------------------------------------------------------------------
.text:0000000000009AD8                 align 20h
.text:0000000000009AE0
.text:0000000000009AE0 loc_9AE0:                               ; CODE XREF: vasnprintf+B10↑j
.text:0000000000009AE0                 js      loc_8D65
.text:0000000000009AE6                 add     r12, r12
.text:0000000000009AE9                 cmp     r12, rax
.text:0000000000009AEC                 jnb     loc_9726
.text:0000000000009AF2
.text:0000000000009AF2 loc_9AF2:                               ; CODE XREF: vasnprintf+B1A↑j
.text:0000000000009AF2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009AF6                 jz      loc_8D65
.text:0000000000009AFC                 mov     r12, rax
.text:0000000000009AFF                 jmp     loc_9726
.text:0000000000009B04 ; ---------------------------------------------------------------------------
.text:0000000000009B04
.text:0000000000009B04 loc_9B04:                               ; CODE XREF: vasnprintf+DC4↑j
.text:0000000000009B04                                         ; vasnprintf+DCC↑j
.text:0000000000009B04                 mov     r15, rcx
.text:0000000000009B07                 jmp     loc_968F
.text:0000000000009B0C ; ---------------------------------------------------------------------------
.text:0000000000009B0C
.text:0000000000009B0C loc_9B0C:                               ; CODE XREF: vasnprintf+75C↑j
.text:0000000000009B0C                 mov     rdi, r15        ; ptr
.text:0000000000009B0F                 call    _free
.text:0000000000009B14                 jmp     loc_9362
.text:0000000000009B19 ; ---------------------------------------------------------------------------
.text:0000000000009B19
.text:0000000000009B19 loc_9B19:                               ; CODE XREF: vasnprintf+E5C↑j
.text:0000000000009B19                 mov     rdi, r15        ; ptr
.text:0000000000009B1C                 call    _free
.text:0000000000009B21                 jmp     loc_9A62
.text:0000000000009B26 ; ---------------------------------------------------------------------------
.text:0000000000009B26
.text:0000000000009B26 def_915B:                               ; CODE XREF: vasnprintf+2DD↑j
.text:0000000000009B26                                         ; vasnprintf+43E↑j ...
.text:0000000000009B26                 call    _abort          ; jumptable 000000000000915B default case, case 0
.text:0000000000009B26                                         ; jumptable 0000000000009700 default case
.text:0000000000009B26 ; ---------------------------------------------------------------------------
.text:0000000000009B2B                 align 10h
.text:0000000000009B30
.text:0000000000009B30 loc_9B30:                               ; CODE XREF: vasnprintf+73↑j
.text:0000000000009B30                 mov     rax, [rbp+var_408]
.text:0000000000009B37                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000009B3E                 add     rax, 20h ; ' '
.text:0000000000009B42                 cmp     rdi, rax
.text:0000000000009B45                 jz      short loc_9B4C
.text:0000000000009B47                 call    _free
.text:0000000000009B4C
.text:0000000000009B4C loc_9B4C:                               ; CODE XREF: vasnprintf+F45↑j
.text:0000000000009B4C                 mov     rax, [rbp+var_410]
.text:0000000000009B53                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000009B5A                 add     rax, 10h
.text:0000000000009B5E                 cmp     rdi, rax
.text:0000000000009B61                 jz      short loc_9B68
.text:0000000000009B63                 call    _free
.text:0000000000009B68
.text:0000000000009B68 loc_9B68:                               ; CODE XREF: vasnprintf+F61↑j
.text:0000000000009B68                 call    ___errno_location
.text:0000000000009B6D                 xor     r15d, r15d
.text:0000000000009B70                 mov     dword ptr [rax], 16h
.text:0000000000009B76                 jmp     loc_8DDF
.text:0000000000009B7B ; ---------------------------------------------------------------------------
.text:0000000000009B7B
.text:0000000000009B7B loc_9B7B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:0000000000009B7B                 mov     rbx, r14
.text:0000000000009B7E                 xor     eax, eax
.text:0000000000009B80                 add     rbx, 1
.text:0000000000009B84                 jb      loc_9C90
.text:0000000000009B8A                 cmp     r12, rbx
.text:0000000000009B8D                 jnb     short loc_9BDC
.text:0000000000009B8F                 test    r12, r12
.text:0000000000009B92                 jnz     loc_9CC9
.text:0000000000009B98                 cmp     rbx, 0Ch
.text:0000000000009B9C                 ja      loc_9CAE
.text:0000000000009BA2                 mov     r12d, 0Ch
.text:0000000000009BA8
.text:0000000000009BA8 loc_9BA8:                               ; CODE XREF: vasnprintf+10C4↓j
.text:0000000000009BA8                                         ; vasnprintf+10D5↓j
.text:0000000000009BA8                 cmp     r15, [rbp+src]
.text:0000000000009BAF                 setz    r13b
.text:0000000000009BB3                 test    r15, r15
.text:0000000000009BB6                 jz      loc_9C5C
.text:0000000000009BBC                 test    r13b, r13b
.text:0000000000009BBF                 jnz     loc_9C5C
.text:0000000000009BC5                 mov     rsi, r12        ; size
.text:0000000000009BC8                 mov     rdi, r15        ; ptr
.text:0000000000009BCB                 call    _realloc
.text:0000000000009BD0                 test    rax, rax
.text:0000000000009BD3                 jz      loc_984B
.text:0000000000009BD9                 mov     r15, rax
.text:0000000000009BDC
.text:0000000000009BDC loc_9BDC:                               ; CODE XREF: vasnprintf+F8D↑j
.text:0000000000009BDC                                         ; vasnprintf+108B↓j ...
.text:0000000000009BDC                 cmp     r15, [rbp+src]
.text:0000000000009BE3                 mov     byte ptr [r15+r14], 0
.text:0000000000009BE8                 jz      short loc_9C01
.text:0000000000009BEA                 cmp     r12, rbx
.text:0000000000009BED                 jbe     short loc_9C01
.text:0000000000009BEF                 mov     rdi, r15        ; ptr
.text:0000000000009BF2                 mov     rsi, rbx        ; size
.text:0000000000009BF5                 call    _realloc
.text:0000000000009BFA                 test    rax, rax
.text:0000000000009BFD                 cmovnz  r15, rax
.text:0000000000009C01
.text:0000000000009C01 loc_9C01:                               ; CODE XREF: vasnprintf+FE8↑j
.text:0000000000009C01                                         ; vasnprintf+FED↑j
.text:0000000000009C01                 mov     rax, [rbp+ptr]
.text:0000000000009C08                 test    rax, rax
.text:0000000000009C0B                 jz      short loc_9C15
.text:0000000000009C0D                 mov     rdi, rax        ; ptr
.text:0000000000009C10                 call    _free
.text:0000000000009C15
.text:0000000000009C15 loc_9C15:                               ; CODE XREF: vasnprintf+100B↑j
.text:0000000000009C15                 mov     rax, [rbp+var_408]
.text:0000000000009C1C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000009C23                 add     rax, 20h ; ' '
.text:0000000000009C27                 cmp     rdi, rax
.text:0000000000009C2A                 jz      short loc_9C31
.text:0000000000009C2C                 call    _free
.text:0000000000009C31
.text:0000000000009C31 loc_9C31:                               ; CODE XREF: vasnprintf+102A↑j
.text:0000000000009C31                 mov     rax, [rbp+var_410]
.text:0000000000009C38                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000009C3F                 add     rax, 10h
.text:0000000000009C43                 cmp     rdi, rax
.text:0000000000009C46                 jz      short loc_9C4D
.text:0000000000009C48                 call    _free
.text:0000000000009C4D
.text:0000000000009C4D loc_9C4D:                               ; CODE XREF: vasnprintf+1046↑j
.text:0000000000009C4D                 mov     rax, [rbp+var_418]
.text:0000000000009C54                 mov     [rax], r14
.text:0000000000009C57                 jmp     loc_8DDF
.text:0000000000009C5C ; ---------------------------------------------------------------------------
.text:0000000000009C5C
.text:0000000000009C5C loc_9C5C:                               ; CODE XREF: vasnprintf+FB6↑j
.text:0000000000009C5C                                         ; vasnprintf+FBF↑j
.text:0000000000009C5C                 mov     rdi, r12        ; size
.text:0000000000009C5F                 call    _malloc
.text:0000000000009C64                 test    rax, rax
.text:0000000000009C67                 mov     rcx, rax
.text:0000000000009C6A                 jz      loc_8D65
.text:0000000000009C70                 test    r14, r14
.text:0000000000009C73                 jz      short loc_9CE0
.text:0000000000009C75                 test    r13b, r13b
.text:0000000000009C78                 jz      short loc_9CE0
.text:0000000000009C7A                 mov     rsi, r15        ; src
.text:0000000000009C7D                 mov     rdx, r14        ; n
.text:0000000000009C80                 mov     rdi, rax        ; dest
.text:0000000000009C83                 call    _memcpy
.text:0000000000009C88                 mov     r15, rax
.text:0000000000009C8B                 jmp     loc_9BDC
.text:0000000000009C90 ; ---------------------------------------------------------------------------
.text:0000000000009C90
.text:0000000000009C90 loc_9C90:                               ; CODE XREF: vasnprintf+F84↑j
.text:0000000000009C90                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000009C94                 mov     eax, 1
.text:0000000000009C99                 jz      loc_9BDC
.text:0000000000009C9F                 test    r12, r12
.text:0000000000009CA2                 jz      loc_8D65
.text:0000000000009CA8                 js      loc_8D65
.text:0000000000009CAE
.text:0000000000009CAE loc_9CAE:                               ; CODE XREF: vasnprintf+F9C↑j
.text:0000000000009CAE                                         ; vasnprintf+10DB↓j
.text:0000000000009CAE                 test    rax, rax
.text:0000000000009CB1                 jnz     loc_8D65
.text:0000000000009CB7                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009CBB                 jz      loc_8D65
.text:0000000000009CC1                 mov     r12, rbx
.text:0000000000009CC4                 jmp     loc_9BA8
.text:0000000000009CC9 ; ---------------------------------------------------------------------------
.text:0000000000009CC9
.text:0000000000009CC9 loc_9CC9:                               ; CODE XREF: vasnprintf+F92↑j
.text:0000000000009CC9                 js      loc_8D65
.text:0000000000009CCF                 add     r12, r12
.text:0000000000009CD2                 cmp     r12, rbx
.text:0000000000009CD5                 jnb     loc_9BA8
.text:0000000000009CDB                 jmp     short loc_9CAE
.text:0000000000009CDB ; ---------------------------------------------------------------------------
.text:0000000000009CDD                 align 20h
.text:0000000000009CE0
.text:0000000000009CE0 loc_9CE0:                               ; CODE XREF: vasnprintf+1073↑j
.text:0000000000009CE0                                         ; vasnprintf+1078↑j
.text:0000000000009CE0                 mov     r15, rcx
.text:0000000000009CE3                 jmp     loc_9BDC
.text:0000000000009CE8 ; ---------------------------------------------------------------------------
.text:0000000000009CE8
.text:0000000000009CE8 loc_9CE8:                               ; CODE XREF: vasnprintf+627↑j
.text:0000000000009CE8                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000009CEC                 jz      loc_9110
.text:0000000000009CF2                 jmp     loc_8D71
.text:0000000000009CF7 ; ---------------------------------------------------------------------------
.text:0000000000009CF7
.text:0000000000009CF7 loc_9CF7:                               ; CODE XREF: vasnprintf+1EF↑j
.text:0000000000009CF7                 call    ___stack_chk_fail
.text:0000000000009CFC ; ---------------------------------------------------------------------------
.text:0000000000009CFC
.text:0000000000009CFC loc_9CFC:                               ; CODE XREF: vasnprintf+495↑j
.text:0000000000009CFC                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000009D00                 mov     edx, 1
.text:0000000000009D05                 jz      loc_90EB
.text:0000000000009D0B                 test    r12, r12
.text:0000000000009D0E                 jz      loc_8D65
.text:0000000000009D14                 jns     loc_98E0
.text:0000000000009D1A                 jmp     loc_8D65
.text:0000000000009D1A ; } // starts at 8C00
.text:0000000000009D1A vasnprintf      endp
.text:0000000000009D1A
.text:0000000000009D1A ; ---------------------------------------------------------------------------
.text:0000000000009D1F                 align 20h
.text:0000000000009D20
.text:0000000000009D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D20
.text:0000000000009D20
.text:0000000000009D20                 public printf_fetchargs
.text:0000000000009D20 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:0000000000009D20 ; __unwind {
.text:0000000000009D20                 cmp     qword ptr [rsi], 0
.text:0000000000009D24                 mov     rax, [rsi+8]
.text:0000000000009D28                 jz      short loc_9D8D
.text:0000000000009D2A                 lea     r8, jpt_9D56
.text:0000000000009D31                 lea     r10, wide_null_string_2696
.text:0000000000009D38                 lea     r9, aNull       ; "(NULL)"
.text:0000000000009D3F                 xor     ecx, ecx
.text:0000000000009D41                 nop     dword ptr [rax+00000000h]
.text:0000000000009D48
.text:0000000000009D48 loc_9D48:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:0000000000009D48                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:0000000000009D4B                 ja      short def_9D56  ; jumptable 0000000000009D56 default case, case 0
.text:0000000000009D4D                 mov     edx, [rax]
.text:0000000000009D4F                 movsxd  rdx, ds:(jpt_9D56 - 0D310h)[r8+rdx*4]
.text:0000000000009D53                 add     rdx, r8
.text:0000000000009D56                 jmp     rdx             ; switch jump
.text:0000000000009D56 ; ---------------------------------------------------------------------------
.text:0000000000009D58                 align 20h
.text:0000000000009D60
.text:0000000000009D60 loc_9D60:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000009D60                                         ; DATA XREF: .rodata:jpt_9D56↓o
.text:0000000000009D60                 mov     rdx, [rdi+8]    ; jumptable 0000000000009D56 case 12
.text:0000000000009D64                 add     rdx, 0Fh
.text:0000000000009D68                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:0000000000009D6C                 lea     r11, [rdx+10h]
.text:0000000000009D70                 mov     [rdi+8], r11
.text:0000000000009D74                 fld     tbyte ptr [rdx]
.text:0000000000009D76                 fstp    tbyte ptr [rax+10h]
.text:0000000000009D79                 nop     dword ptr [rax+00000000h]
.text:0000000000009D80
.text:0000000000009D80 loc_9D80:                               ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000009D80                                         ; printf_fetchargs+BA↓j ...
.text:0000000000009D80                 add     rcx, 1
.text:0000000000009D84                 add     rax, 20h ; ' '
.text:0000000000009D88                 cmp     [rsi], rcx
.text:0000000000009D8B                 ja      short loc_9D48
.text:0000000000009D8D
.text:0000000000009D8D loc_9D8D:                               ; CODE XREF: printf_fetchargs+8↑j
.text:0000000000009D8D                 xor     eax, eax
.text:0000000000009D8F                 retn
.text:0000000000009D90 ; ---------------------------------------------------------------------------
.text:0000000000009D90
.text:0000000000009D90 def_9D56:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000009D90                                         ; printf_fetchargs+36↑j
.text:0000000000009D90                                         ; DATA XREF: ...
.text:0000000000009D90                 mov     eax, 0FFFFFFFFh ; jumptable 0000000000009D56 default case, case 0
.text:0000000000009D95                 retn
.text:0000000000009D96 ; ---------------------------------------------------------------------------
.text:0000000000009D96
.text:0000000000009D96 loc_9D96:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000009D96                                         ; DATA XREF: .rodata:jpt_9D56↓o
.text:0000000000009D96                 mov     r11d, [rdi]     ; jumptable 0000000000009D56 cases 7-10,17-22
.text:0000000000009D99                 cmp     r11d, 2Fh ; '/'
.text:0000000000009D9D                 ja      loc_9EDA
.text:0000000000009DA3                 mov     edx, r11d
.text:0000000000009DA6                 add     rdx, [rdi+10h]
.text:0000000000009DAA                 add     r11d, 8
.text:0000000000009DAE                 mov     [rdi], r11d
.text:0000000000009DB1
.text:0000000000009DB1 loc_9DB1:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:0000000000009DB1                 mov     rdx, [rdx]
.text:0000000000009DB4                 mov     [rax+10h], rdx
.text:0000000000009DB8                 jmp     short loc_9D80
.text:0000000000009DBA ; ---------------------------------------------------------------------------
.text:0000000000009DBA
.text:0000000000009DBA loc_9DBA:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000009DBA                                         ; DATA XREF: .rodata:jpt_9D56↓o
.text:0000000000009DBA                 mov     r11d, [rdi]     ; jumptable 0000000000009D56 cases 5,6,13,14
.text:0000000000009DBD                 cmp     r11d, 2Fh ; '/'
.text:0000000000009DC1                 ja      loc_9EFC
.text:0000000000009DC7                 mov     edx, r11d
.text:0000000000009DCA                 add     rdx, [rdi+10h]
.text:0000000000009DCE                 add     r11d, 8
.text:0000000000009DD2                 mov     [rdi], r11d
.text:0000000000009DD5
.text:0000000000009DD5 loc_9DD5:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:0000000000009DD5                 mov     edx, [rdx]
.text:0000000000009DD7                 mov     [rax+10h], edx
.text:0000000000009DDA                 jmp     short loc_9D80
.text:0000000000009DDC ; ---------------------------------------------------------------------------
.text:0000000000009DDC
.text:0000000000009DDC loc_9DDC:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000009DDC                                         ; DATA XREF: .rodata:jpt_9D56↓o
.text:0000000000009DDC                 mov     r11d, [rdi]     ; jumptable 0000000000009D56 cases 1,2
.text:0000000000009DDF                 cmp     r11d, 2Fh ; '/'
.text:0000000000009DE3                 ja      loc_9EEB
.text:0000000000009DE9                 mov     edx, r11d
.text:0000000000009DEC                 add     rdx, [rdi+10h]
.text:0000000000009DF0                 add     r11d, 8
.text:0000000000009DF4                 mov     [rdi], r11d
.text:0000000000009DF7
.text:0000000000009DF7 loc_9DF7:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:0000000000009DF7                 mov     edx, [rdx]
.text:0000000000009DF9                 mov     [rax+10h], dl
.text:0000000000009DFC                 jmp     short loc_9D80
.text:0000000000009DFE ; ---------------------------------------------------------------------------
.text:0000000000009DFE
.text:0000000000009DFE loc_9DFE:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000009DFE                                         ; DATA XREF: .rodata:jpt_9D56↓o
.text:0000000000009DFE                 mov     r11d, [rdi]     ; jumptable 0000000000009D56 cases 3,4
.text:0000000000009E01                 cmp     r11d, 2Fh ; '/'
.text:0000000000009E05                 ja      loc_9EAA
.text:0000000000009E0B                 mov     edx, r11d
.text:0000000000009E0E                 add     rdx, [rdi+10h]
.text:0000000000009E12                 add     r11d, 8
.text:0000000000009E16                 mov     [rdi], r11d
.text:0000000000009E19
.text:0000000000009E19 loc_9E19:                               ; CODE XREF: printf_fetchargs+196↓j
.text:0000000000009E19                 mov     edx, [rdx]
.text:0000000000009E1B                 mov     [rax+10h], dx
.text:0000000000009E1F                 jmp     loc_9D80
.text:0000000000009E24 ; ---------------------------------------------------------------------------
.text:0000000000009E24
.text:0000000000009E24 loc_9E24:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000009E24                                         ; DATA XREF: .rodata:jpt_9D56↓o
.text:0000000000009E24                 mov     r11d, [rdi]     ; jumptable 0000000000009D56 case 15
.text:0000000000009E27                 cmp     r11d, 2Fh ; '/'
.text:0000000000009E2B                 ja      loc_9EBB
.text:0000000000009E31                 mov     edx, r11d
.text:0000000000009E34                 add     rdx, [rdi+10h]
.text:0000000000009E38                 add     r11d, 8
.text:0000000000009E3C                 mov     [rdi], r11d
.text:0000000000009E3F
.text:0000000000009E3F loc_9E3F:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:0000000000009E3F                 mov     rdx, [rdx]
.text:0000000000009E42                 test    rdx, rdx
.text:0000000000009E45                 cmovz   rdx, r9
.text:0000000000009E49                 mov     [rax+10h], rdx
.text:0000000000009E4D                 jmp     loc_9D80
.text:0000000000009E52 ; ---------------------------------------------------------------------------
.text:0000000000009E52
.text:0000000000009E52 loc_9E52:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000009E52                                         ; DATA XREF: .rodata:jpt_9D56↓o
.text:0000000000009E52                 mov     r11d, [rdi+4]   ; jumptable 0000000000009D56 case 11
.text:0000000000009E56                 cmp     r11d, 0AFh
.text:0000000000009E5D                 ja      loc_9F0D
.text:0000000000009E63                 mov     edx, r11d
.text:0000000000009E66                 add     rdx, [rdi+10h]
.text:0000000000009E6A                 add     r11d, 10h
.text:0000000000009E6E                 mov     [rdi+4], r11d
.text:0000000000009E72
.text:0000000000009E72 loc_9E72:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:0000000000009E72                 movsd   xmm0, qword ptr [rdx]
.text:0000000000009E76                 movsd   qword ptr [rax+10h], xmm0
.text:0000000000009E7B                 jmp     loc_9D80
.text:0000000000009E80 ; ---------------------------------------------------------------------------
.text:0000000000009E80
.text:0000000000009E80 loc_9E80:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000009E80                                         ; DATA XREF: .rodata:jpt_9D56↓o
.text:0000000000009E80                 mov     r11d, [rdi]     ; jumptable 0000000000009D56 case 16
.text:0000000000009E83                 cmp     r11d, 2Fh ; '/'
.text:0000000000009E87                 ja      short loc_9ECC
.text:0000000000009E89                 mov     edx, r11d
.text:0000000000009E8C                 add     rdx, [rdi+10h]
.text:0000000000009E90                 add     r11d, 8
.text:0000000000009E94                 mov     [rdi], r11d
.text:0000000000009E97
.text:0000000000009E97 loc_9E97:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000009E97                 mov     rdx, [rdx]
.text:0000000000009E9A                 test    rdx, rdx
.text:0000000000009E9D                 cmovz   rdx, r10
.text:0000000000009EA1                 mov     [rax+10h], rdx
.text:0000000000009EA5                 jmp     loc_9D80
.text:0000000000009EAA ; ---------------------------------------------------------------------------
.text:0000000000009EAA
.text:0000000000009EAA loc_9EAA:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:0000000000009EAA                 mov     rdx, [rdi+8]
.text:0000000000009EAE                 lea     r11, [rdx+8]
.text:0000000000009EB2                 mov     [rdi+8], r11
.text:0000000000009EB6                 jmp     loc_9E19
.text:0000000000009EBB ; ---------------------------------------------------------------------------
.text:0000000000009EBB
.text:0000000000009EBB loc_9EBB:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:0000000000009EBB                 mov     rdx, [rdi+8]
.text:0000000000009EBF                 lea     r11, [rdx+8]
.text:0000000000009EC3                 mov     [rdi+8], r11
.text:0000000000009EC7                 jmp     loc_9E3F
.text:0000000000009ECC ; ---------------------------------------------------------------------------
.text:0000000000009ECC
.text:0000000000009ECC loc_9ECC:                               ; CODE XREF: printf_fetchargs+167↑j
.text:0000000000009ECC                 mov     rdx, [rdi+8]
.text:0000000000009ED0                 lea     r11, [rdx+8]
.text:0000000000009ED4                 mov     [rdi+8], r11
.text:0000000000009ED8                 jmp     short loc_9E97
.text:0000000000009EDA ; ---------------------------------------------------------------------------
.text:0000000000009EDA
.text:0000000000009EDA loc_9EDA:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:0000000000009EDA                 mov     rdx, [rdi+8]
.text:0000000000009EDE                 lea     r11, [rdx+8]
.text:0000000000009EE2                 mov     [rdi+8], r11
.text:0000000000009EE6                 jmp     loc_9DB1
.text:0000000000009EEB ; ---------------------------------------------------------------------------
.text:0000000000009EEB
.text:0000000000009EEB loc_9EEB:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:0000000000009EEB                 mov     rdx, [rdi+8]
.text:0000000000009EEF                 lea     r11, [rdx+8]
.text:0000000000009EF3                 mov     [rdi+8], r11
.text:0000000000009EF7                 jmp     loc_9DF7
.text:0000000000009EFC ; ---------------------------------------------------------------------------
.text:0000000000009EFC
.text:0000000000009EFC loc_9EFC:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:0000000000009EFC                 mov     rdx, [rdi+8]
.text:0000000000009F00                 lea     r11, [rdx+8]
.text:0000000000009F04                 mov     [rdi+8], r11
.text:0000000000009F08                 jmp     loc_9DD5
.text:0000000000009F0D ; ---------------------------------------------------------------------------
.text:0000000000009F0D
.text:0000000000009F0D loc_9F0D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:0000000000009F0D                 mov     rdx, [rdi+8]
.text:0000000000009F11                 lea     r11, [rdx+8]
.text:0000000000009F15                 mov     [rdi+8], r11
.text:0000000000009F19                 jmp     loc_9E72
.text:0000000000009F19 ; } // starts at 9D20
.text:0000000000009F19 printf_fetchargs endp
.text:0000000000009F19
.text:0000000000009F19 ; ---------------------------------------------------------------------------
.text:0000000000009F1E                 align 20h
.text:0000000000009F20 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:0000000000009F20 ; Format      : ELF64 for x86-64 (Relocatable)
.text:0000000000009F20 ;
.text:0000000000009F20 ; Source File : 'printf-parse.c'
.text:0000000000009F20
.text:0000000000009F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F20
.text:0000000000009F20 ; Attributes: info_from_lumina
.text:0000000000009F20
.text:0000000000009F20 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:0000000000009F20                 public printf_parse
.text:0000000000009F20 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:0000000000009F20
.text:0000000000009F20 src             = qword ptr -80h
.text:0000000000009F20 var_78          = qword ptr -78h
.text:0000000000009F20 var_70          = qword ptr -70h
.text:0000000000009F20 var_68          = qword ptr -68h
.text:0000000000009F20 var_60          = qword ptr -60h
.text:0000000000009F20 var_58          = qword ptr -58h
.text:0000000000009F20 var_50          = qword ptr -50h
.text:0000000000009F20 var_48          = qword ptr -48h
.text:0000000000009F20 var_40          = qword ptr -40h
.text:0000000000009F20
.text:0000000000009F20 ; __unwind {
.text:0000000000009F20                 push    r15
.text:0000000000009F22                 push    r14
.text:0000000000009F24                 lea     rcx, [rsi+20h]
.text:0000000000009F28                 push    r13
.text:0000000000009F2A                 push    r12
.text:0000000000009F2C                 lea     rax, [rdx+10h]
.text:0000000000009F30                 push    rbp
.text:0000000000009F31                 push    rbx
.text:0000000000009F32                 mov     r14, rsi
.text:0000000000009F35                 mov     r15, rdx
.text:0000000000009F38                 xor     ebx, ebx
.text:0000000000009F3A                 mov     r9d, 7
.text:0000000000009F40                 sub     rsp, 58h
.text:0000000000009F44                 mov     r10d, 7
.text:0000000000009F4A                 mov     qword ptr [rsi], 0
.text:0000000000009F51                 mov     [rsi+8], rcx
.text:0000000000009F55                 mov     [rsp+88h+var_60], rcx
.text:0000000000009F5A                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000009F61                 mov     qword ptr [rdx], 0
.text:0000000000009F68                 mov     [rsp+88h+src], rax
.text:0000000000009F6D                 mov     [rdx+8], rax
.text:0000000000009F71                 mov     [rsp+88h+var_70], 0
.text:0000000000009F7A                 mov     [rsp+88h+var_78], 0
.text:0000000000009F83                 mov     [rsp+88h+var_68], 0
.text:0000000000009F8C                 jmp     short loc_9F9B
.text:0000000000009F8C ; ---------------------------------------------------------------------------
.text:0000000000009F8E                 align 10h
.text:0000000000009F90
.text:0000000000009F90 loc_9F90:                               ; CODE XREF: printf_parse+80↓j
.text:0000000000009F90                 cmp     al, 25h ; '%'
.text:0000000000009F92                 lea     rbp, [rdi+1]
.text:0000000000009F96                 jz      short loc_9FD8
.text:0000000000009F98
.text:0000000000009F98 loc_9F98:                               ; CODE XREF: printf_parse+35B↓j
.text:0000000000009F98                                         ; printf_parse+364↓j
.text:0000000000009F98                 mov     rdi, rbp
.text:0000000000009F9B
.text:0000000000009F9B loc_9F9B:                               ; CODE XREF: printf_parse+6C↑j
.text:0000000000009F9B                 movzx   eax, byte ptr [rdi]
.text:0000000000009F9E                 test    al, al
.text:0000000000009FA0                 jnz     short loc_9F90
.text:0000000000009FA2                 lea     rax, [rbx+rbx*4]
.text:0000000000009FA6                 lea     rax, [rbx+rax*2]
.text:0000000000009FAA                 mov     [rcx+rax*8], rdi
.text:0000000000009FAE                 mov     rax, [rsp+88h+var_78]
.text:0000000000009FB3                 mov     [r14+10h], rax
.text:0000000000009FB7                 mov     rax, [rsp+88h+var_70]
.text:0000000000009FBC                 mov     [r14+18h], rax
.text:0000000000009FC0                 xor     eax, eax
.text:0000000000009FC2
.text:0000000000009FC2 loc_9FC2:                               ; CODE XREF: printf_parse+87E↓j
.text:0000000000009FC2                                         ; printf_parse+B1C↓j
.text:0000000000009FC2                 add     rsp, 58h
.text:0000000000009FC6                 pop     rbx
.text:0000000000009FC7                 pop     rbp
.text:0000000000009FC8                 pop     r12
.text:0000000000009FCA                 pop     r13
.text:0000000000009FCC                 pop     r14
.text:0000000000009FCE                 pop     r15
.text:0000000000009FD0                 retn
.text:0000000000009FD0 ; ---------------------------------------------------------------------------
.text:0000000000009FD1                 align 8
.text:0000000000009FD8
.text:0000000000009FD8 loc_9FD8:                               ; CODE XREF: printf_parse+76↑j
.text:0000000000009FD8                 lea     rax, [rbx+rbx*4]
.text:0000000000009FDC                 mov     r13, r8
.text:0000000000009FDF                 lea     rax, [rbx+rax*2]
.text:0000000000009FE3                 lea     r12, [rcx+rax*8]
.text:0000000000009FE7                 mov     [r12], rdi
.text:0000000000009FEB                 mov     dword ptr [r12+10h], 0
.text:0000000000009FF4                 mov     qword ptr [r12+18h], 0
.text:0000000000009FFD                 mov     qword ptr [r12+20h], 0
.text:000000000000A006                 mov     [r12+28h], r8
.text:000000000000A00B                 mov     qword ptr [r12+30h], 0
.text:000000000000A014                 mov     qword ptr [r12+38h], 0
.text:000000000000A01D                 mov     [r12+40h], r8
.text:000000000000A022                 mov     [r12+50h], r8
.text:000000000000A027                 movzx   ebx, byte ptr [rdi+1]
.text:000000000000A02B                 lea     eax, [rbx-30h]
.text:000000000000A02E                 cmp     al, 9
.text:000000000000A030                 ja      short loc_A06E
.text:000000000000A032                 jmp     loc_A46A
.text:000000000000A032 ; ---------------------------------------------------------------------------
.text:000000000000A037                 align 20h
.text:000000000000A040
.text:000000000000A040 loc_A040:                               ; CODE XREF: printf_parse+158↓j
.text:000000000000A040                 cmp     bl, 2Dh ; '-'
.text:000000000000A043                 jz      short loc_A088
.text:000000000000A045                 cmp     bl, 2Bh ; '+'
.text:000000000000A048                 jz      short loc_A090
.text:000000000000A04A                 cmp     bl, 20h ; ' '
.text:000000000000A04D                 jz      short loc_A0A0
.text:000000000000A04F                 cmp     bl, 23h ; '#'
.text:000000000000A052                 jz      short loc_A0B0
.text:000000000000A054                 cmp     bl, 30h ; '0'
.text:000000000000A057                 jz      short loc_A0C0
.text:000000000000A059                 cmp     bl, 49h ; 'I'
.text:000000000000A05C                 jnz     short loc_A0D0
.text:000000000000A05E                 or      dword ptr [r12+10h], 40h
.text:000000000000A064                 nop     dword ptr [rax+00h]
.text:000000000000A068
.text:000000000000A068 loc_A068:                               ; CODE XREF: printf_parse+160↓j
.text:000000000000A068                                         ; printf_parse+16E↓j ...
.text:000000000000A068                 movzx   ebx, byte ptr [rax]
.text:000000000000A06B                 mov     rbp, rax
.text:000000000000A06E
.text:000000000000A06E loc_A06E:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000A06E                                         ; printf_parse+565↓j ...
.text:000000000000A06E                 lea     rax, [rbp+1]
.text:000000000000A072                 cmp     bl, 27h ; '''
.text:000000000000A075                 mov     rdx, rax
.text:000000000000A078                 jnz     short loc_A040
.text:000000000000A07A                 or      dword ptr [r12+10h], 1
.text:000000000000A080                 jmp     short loc_A068
.text:000000000000A080 ; ---------------------------------------------------------------------------
.text:000000000000A082                 align 8
.text:000000000000A088
.text:000000000000A088 loc_A088:                               ; CODE XREF: printf_parse+123↑j
.text:000000000000A088                 or      dword ptr [r12+10h], 2
.text:000000000000A08E                 jmp     short loc_A068
.text:000000000000A090 ; ---------------------------------------------------------------------------
.text:000000000000A090
.text:000000000000A090 loc_A090:                               ; CODE XREF: printf_parse+128↑j
.text:000000000000A090                 or      dword ptr [r12+10h], 4
.text:000000000000A096                 jmp     short loc_A068
.text:000000000000A096 ; ---------------------------------------------------------------------------
.text:000000000000A098                 align 20h
.text:000000000000A0A0
.text:000000000000A0A0 loc_A0A0:                               ; CODE XREF: printf_parse+12D↑j
.text:000000000000A0A0                 or      dword ptr [r12+10h], 8
.text:000000000000A0A6                 jmp     short loc_A068
.text:000000000000A0A6 ; ---------------------------------------------------------------------------
.text:000000000000A0A8                 align 10h
.text:000000000000A0B0
.text:000000000000A0B0 loc_A0B0:                               ; CODE XREF: printf_parse+132↑j
.text:000000000000A0B0                 or      dword ptr [r12+10h], 10h
.text:000000000000A0B6                 jmp     short loc_A068
.text:000000000000A0B6 ; ---------------------------------------------------------------------------
.text:000000000000A0B8                 align 20h
.text:000000000000A0C0
.text:000000000000A0C0 loc_A0C0:                               ; CODE XREF: printf_parse+137↑j
.text:000000000000A0C0                 or      dword ptr [r12+10h], 20h
.text:000000000000A0C6                 jmp     short loc_A068
.text:000000000000A0C6 ; ---------------------------------------------------------------------------
.text:000000000000A0C8                 align 10h
.text:000000000000A0D0
.text:000000000000A0D0 loc_A0D0:                               ; CODE XREF: printf_parse+13C↑j
.text:000000000000A0D0                 cmp     bl, 2Ah ; '*'
.text:000000000000A0D3                 jz      loc_A289
.text:000000000000A0D9                 lea     ecx, [rbx-30h]
.text:000000000000A0DC                 cmp     cl, 9
.text:000000000000A0DF                 jbe     loc_A4F7
.text:000000000000A0E5
.text:000000000000A0E5 loc_A0E5:                               ; CODE XREF: printf_parse+629↓j
.text:000000000000A0E5                                         ; printf_parse+96C↓j
.text:000000000000A0E5                 cmp     bl, 2Eh ; '.'
.text:000000000000A0E8                 jz      loc_A3BF
.text:000000000000A0EE
.text:000000000000A0EE loc_A0EE:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000A0EE                                         ; printf_parse+545↓j ...
.text:000000000000A0EE                 xor     eax, eax
.text:000000000000A0F0                 mov     esi, 1
.text:000000000000A0F5                 jmp     short loc_A127
.text:000000000000A0F5 ; ---------------------------------------------------------------------------
.text:000000000000A0F7                 align 20h
.text:000000000000A100
.text:000000000000A100 loc_A100:                               ; CODE XREF: printf_parse+20E↓j
.text:000000000000A100                 cmp     bl, 4Ch ; 'L'
.text:000000000000A103                 jz      short loc_A140
.text:000000000000A105                 cmp     bl, 6Ch ; 'l'
.text:000000000000A108                 jz      short loc_A120
.text:000000000000A10A                 cmp     bl, 6Ah ; 'j'
.text:000000000000A10D                 jz      short loc_A120
.text:000000000000A10F                 mov     edx, ebx
.text:000000000000A111                 and     edx, 0FFFFFFDFh
.text:000000000000A114                 cmp     dl, 5Ah ; 'Z'
.text:000000000000A117                 jz      short loc_A120
.text:000000000000A119                 cmp     bl, 74h ; 't'
.text:000000000000A11C                 jnz     short loc_A148
.text:000000000000A11E                 xchg    ax, ax
.text:000000000000A120
.text:000000000000A120 loc_A120:                               ; CODE XREF: printf_parse+1E8↑j
.text:000000000000A120                                         ; printf_parse+1ED↑j ...
.text:000000000000A120                 add     eax, 8
.text:000000000000A123
.text:000000000000A123 loc_A123:                               ; CODE XREF: printf_parse+21B↓j
.text:000000000000A123                                         ; printf_parse+223↓j
.text:000000000000A123                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000A127
.text:000000000000A127 loc_A127:                               ; CODE XREF: printf_parse+1D5↑j
.text:000000000000A127                 add     rbp, 1
.text:000000000000A12B                 cmp     bl, 68h ; 'h'
.text:000000000000A12E                 jnz     short loc_A100
.text:000000000000A130                 mov     ecx, eax
.text:000000000000A132                 mov     edx, esi
.text:000000000000A134                 and     ecx, 1
.text:000000000000A137                 shl     edx, cl
.text:000000000000A139                 or      eax, edx
.text:000000000000A13B                 jmp     short loc_A123
.text:000000000000A13B ; ---------------------------------------------------------------------------
.text:000000000000A13D                 align 20h
.text:000000000000A140
.text:000000000000A140 loc_A140:                               ; CODE XREF: printf_parse+1E3↑j
.text:000000000000A140                 or      eax, 4
.text:000000000000A143                 jmp     short loc_A123
.text:000000000000A143 ; ---------------------------------------------------------------------------
.text:000000000000A145                 align 8
.text:000000000000A148
.text:000000000000A148 loc_A148:                               ; CODE XREF: printf_parse+1FC↑j
.text:000000000000A148                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000A14B                 cmp     dl, 53h
.text:000000000000A14E                 ja      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000A154                 lea     rcx, jpt_A165
.text:000000000000A15B                 movzx   edx, dl
.text:000000000000A15E                 movsxd  rdx, ds:(jpt_A165 - 0D38Ch)[rcx+rdx*4]
.text:000000000000A162                 add     rdx, rcx
.text:000000000000A165                 jmp     rdx             ; switch jump
.text:000000000000A167 ; ---------------------------------------------------------------------------
.text:000000000000A167
.text:000000000000A167 loc_A167:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A167                                         ; DATA XREF: .rodata:jpt_A165↓o
.text:000000000000A167                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000A16D                 mov     ebx, 73h ; 's'
.text:000000000000A172                 nop     word ptr [rax+rax+00h]
.text:000000000000A178
.text:000000000000A178 loc_A178:                               ; CODE XREF: printf_parse+705↓j
.text:000000000000A178                                         ; printf_parse+70D↓j ...
.text:000000000000A178                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000A17C                 jz      loc_A837
.text:000000000000A182                 mov     [r12+50h], r13
.text:000000000000A187
.text:000000000000A187 loc_A187:                               ; CODE XREF: printf_parse+939↓j
.text:000000000000A187                 cmp     r9, r13
.text:000000000000A18A                 mov     rcx, [r15+8]
.text:000000000000A18E                 jbe     loc_A7B0
.text:000000000000A194
.text:000000000000A194 loc_A194:                               ; CODE XREF: printf_parse+912↓j
.text:000000000000A194                 mov     rax, [r15]
.text:000000000000A197                 mov     rdx, rax
.text:000000000000A19A                 shl     rdx, 5
.text:000000000000A19E                 add     rdx, rcx
.text:000000000000A1A1                 cmp     rax, r13
.text:000000000000A1A4                 ja      short loc_A1C6
.text:000000000000A1A6                 db      2Eh
.text:000000000000A1A6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A1B0
.text:000000000000A1B0 loc_A1B0:                               ; CODE XREF: printf_parse+2A1↓j
.text:000000000000A1B0                 add     rax, 1
.text:000000000000A1B4                 mov     dword ptr [rdx], 0
.text:000000000000A1BA                 add     rdx, 20h ; ' '
.text:000000000000A1BE                 cmp     rax, r13
.text:000000000000A1C1                 jbe     short loc_A1B0
.text:000000000000A1C3                 mov     [r15], rax
.text:000000000000A1C6
.text:000000000000A1C6 loc_A1C6:                               ; CODE XREF: printf_parse+284↑j
.text:000000000000A1C6                 shl     r13, 5
.text:000000000000A1CA                 lea     rax, [rcx+r13]
.text:000000000000A1CE                 mov     edx, [rax]
.text:000000000000A1D0                 test    edx, edx
.text:000000000000A1D2                 jnz     loc_A7A3
.text:000000000000A1D8                 mov     [rax], r11d
.text:000000000000A1DB
.text:000000000000A1DB loc_A1DB:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A1DB                                         ; printf_parse+886↓j
.text:000000000000A1DB                                         ; DATA XREF: ...
.text:000000000000A1DB                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:000000000000A1E0                 mov     rax, [r14]
.text:000000000000A1E3                 mov     [r12+8], rbp
.text:000000000000A1E8                 lea     rbx, [rax+1]
.text:000000000000A1EC                 cmp     r10, rbx
.text:000000000000A1EF                 mov     [r14], rbx
.text:000000000000A1F2                 ja      loc_A280
.text:000000000000A1F8                 test    r10, r10
.text:000000000000A1FB                 js      loc_ABA7
.text:000000000000A201                 add     r10, r10
.text:000000000000A204                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000A20E                 cmp     r10, rax
.text:000000000000A211                 ja      loc_ABA7
.text:000000000000A217                 lea     rax, [r10+r10*4]
.text:000000000000A21B                 mov     rdi, [r14+8]    ; ptr
.text:000000000000A21F                 cmp     [rsp+88h+var_60], rdi
.text:000000000000A224                 mov     [rsp+88h+var_48], r9
.text:000000000000A229                 mov     [rsp+88h+var_50], r10
.text:000000000000A22E                 lea     rax, [r10+rax*2]
.text:000000000000A232                 mov     [rsp+88h+var_58], r8
.text:000000000000A237                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000A23F                 jz      loc_A8FD
.text:000000000000A245                 call    _realloc        ; PIC mode
.text:000000000000A24A                 test    rax, rax
.text:000000000000A24D                 mov     rcx, rax
.text:000000000000A250                 mov     r8, [rsp+88h+var_58]
.text:000000000000A255                 mov     r10, [rsp+88h+var_50]
.text:000000000000A25A                 mov     r9, [rsp+88h+var_48]
.text:000000000000A25F                 jz      loc_ABA7
.text:000000000000A265                 mov     rax, [rsp+88h+var_60]
.text:000000000000A26A                 cmp     rax, [r14+8]
.text:000000000000A26E                 mov     rbx, [r14]
.text:000000000000A271                 jz      loc_A920
.text:000000000000A277
.text:000000000000A277 loc_A277:                               ; CODE XREF: printf_parse+A3D↓j
.text:000000000000A277                 mov     [r14+8], rcx
.text:000000000000A27B                 jmp     loc_9F98
.text:000000000000A280 ; ---------------------------------------------------------------------------
.text:000000000000A280
.text:000000000000A280 loc_A280:                               ; CODE XREF: printf_parse+2D2↑j
.text:000000000000A280                 mov     rcx, [r14+8]
.text:000000000000A284                 jmp     loc_9F98
.text:000000000000A289 ; ---------------------------------------------------------------------------
.text:000000000000A289
.text:000000000000A289 loc_A289:                               ; CODE XREF: printf_parse+1B3↑j
.text:000000000000A289                 mov     rsi, [rsp+88h+var_78]
.text:000000000000A28E                 mov     ecx, 1
.text:000000000000A293                 mov     [r12+18h], rbp
.text:000000000000A298                 mov     [r12+20h], rax
.text:000000000000A29D                 test    rsi, rsi
.text:000000000000A2A0                 cmovnz  rcx, rsi
.text:000000000000A2A4                 mov     [rsp+88h+var_78], rcx
.text:000000000000A2A9                 movzx   ecx, byte ptr [rbp+1]
.text:000000000000A2AD                 lea     esi, [rcx-30h]
.text:000000000000A2B0                 cmp     sil, 9
.text:000000000000A2B4                 jbe     loc_A595
.text:000000000000A2BA
.text:000000000000A2BA loc_A2BA:                               ; CODE XREF: printf_parse+68D↓j
.text:000000000000A2BA                 mov     rsi, [rsp+88h+var_68]
.text:000000000000A2BF                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A2C3                 lea     rdx, [rsi+1]
.text:000000000000A2C7                 mov     [r12+28h], rsi
.text:000000000000A2CC                 jz      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000A2D2                 mov     rbx, [rsp+88h+var_68]
.text:000000000000A2D7                 mov     rbp, rax
.text:000000000000A2DA                 mov     [rsp+88h+var_68], rdx
.text:000000000000A2DF
.text:000000000000A2DF loc_A2DF:                               ; CODE XREF: printf_parse+6F7↓j
.text:000000000000A2DF                 cmp     r9, rbx
.text:000000000000A2E2                 mov     rcx, [r15+8]
.text:000000000000A2E6                 ja      loc_A962
.text:000000000000A2EC                 add     r9, r9
.text:000000000000A2EF                 lea     rax, [rbx+1]
.text:000000000000A2F3                 cmp     r9, rbx
.text:000000000000A2F6                 cmovbe  r9, rax
.text:000000000000A2FA                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000A304                 cmp     r9, rax
.text:000000000000A307                 ja      loc_ABAB
.text:000000000000A30D                 mov     rsi, r9
.text:000000000000A310                 mov     [rsp+88h+var_48], r9
.text:000000000000A315                 mov     [rsp+88h+var_50], r10
.text:000000000000A31A                 shl     rsi, 5          ; size
.text:000000000000A31E                 cmp     [rsp+88h+src], rcx
.text:000000000000A323                 mov     [rsp+88h+var_58], r8
.text:000000000000A328                 jz      loc_AA41
.text:000000000000A32E                 mov     rdi, rcx        ; ptr
.text:000000000000A331                 call    _realloc        ; PIC mode
.text:000000000000A336                 mov     rdx, [r15+8]
.text:000000000000A33A                 mov     r8, [rsp+88h+var_58]
.text:000000000000A33F                 mov     rcx, rax
.text:000000000000A342                 mov     r10, [rsp+88h+var_50]
.text:000000000000A347                 mov     r9, [rsp+88h+var_48]
.text:000000000000A34C
.text:000000000000A34C loc_A34C:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000A34C                 test    rcx, rcx
.text:000000000000A34F                 jz      loc_AC07
.text:000000000000A355                 cmp     [rsp+88h+src], rdx
.text:000000000000A35A                 mov     rax, [r15]
.text:000000000000A35D                 jz      loc_AB1B
.text:000000000000A363
.text:000000000000A363 loc_A363:                               ; CODE XREF: printf_parse+C33↓j
.text:000000000000A363                 mov     [r15+8], rcx
.text:000000000000A367
.text:000000000000A367 loc_A367:                               ; CODE XREF: printf_parse+A45↓j
.text:000000000000A367                 mov     rdx, rax
.text:000000000000A36A                 shl     rdx, 5
.text:000000000000A36E                 add     rdx, rcx
.text:000000000000A371                 cmp     rax, rbx
.text:000000000000A374                 ja      short loc_A396
.text:000000000000A376                 db      2Eh
.text:000000000000A376                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A380
.text:000000000000A380 loc_A380:                               ; CODE XREF: printf_parse+471↓j
.text:000000000000A380                 add     rax, 1
.text:000000000000A384                 mov     dword ptr [rdx], 0
.text:000000000000A38A                 add     rdx, 20h ; ' '
.text:000000000000A38E                 cmp     rax, rbx
.text:000000000000A391                 jbe     short loc_A380
.text:000000000000A393                 mov     [r15], rax
.text:000000000000A396
.text:000000000000A396 loc_A396:                               ; CODE XREF: printf_parse+454↑j
.text:000000000000A396                 shl     rbx, 5
.text:000000000000A39A                 lea     rax, [rcx+rbx]
.text:000000000000A39E                 mov     edx, [rax]
.text:000000000000A3A0                 test    edx, edx
.text:000000000000A3A2                 jnz     loc_A87B
.text:000000000000A3A8                 mov     dword ptr [rax], 5
.text:000000000000A3AE                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000A3B2                 lea     rdx, [rbp+1]
.text:000000000000A3B6                 cmp     bl, 2Eh ; '.'
.text:000000000000A3B9                 jnz     loc_A0EE
.text:000000000000A3BF
.text:000000000000A3BF loc_A3BF:                               ; CODE XREF: printf_parse+1C8↑j
.text:000000000000A3BF                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:000000000000A3C3                 mov     [r12+30h], rbp
.text:000000000000A3C8                 jnz     loc_A54E
.text:000000000000A3CE                 mov     rsi, [rsp+88h+var_70]
.text:000000000000A3D3                 lea     r11, [rbp+2]
.text:000000000000A3D7                 mov     eax, 2
.text:000000000000A3DC                 mov     [r12+38h], r11
.text:000000000000A3E1                 cmp     rsi, 2
.text:000000000000A3E5                 cmovnb  rax, rsi
.text:000000000000A3E9                 mov     [rsp+88h+var_70], rax
.text:000000000000A3EE                 movsx   eax, byte ptr [rbp+2]
.text:000000000000A3F2                 lea     edx, [rax-30h]
.text:000000000000A3F5                 cmp     dl, 9
.text:000000000000A3F8                 jbe     loc_AA8C
.text:000000000000A3FE
.text:000000000000A3FE loc_A3FE:                               ; CODE XREF: printf_parse+B82↓j
.text:000000000000A3FE                 mov     rbx, [r12+40h]
.text:000000000000A403                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A407                 jz      loc_AA65
.text:000000000000A40D
.text:000000000000A40D loc_A40D:                               ; CODE XREF: printf_parse+B67↓j
.text:000000000000A40D                                         ; printf_parse+C59↓j
.text:000000000000A40D                 cmp     r9, rbx
.text:000000000000A410                 mov     rcx, [r15+8]
.text:000000000000A414                 jbe     loc_A97F
.text:000000000000A41A                 mov     rax, [r15]
.text:000000000000A41D
.text:000000000000A41D loc_A41D:                               ; CODE XREF: printf_parse+AE4↓j
.text:000000000000A41D                 mov     rdx, rax
.text:000000000000A420                 shl     rdx, 5
.text:000000000000A424                 add     rdx, rcx
.text:000000000000A427                 cmp     rax, rbx
.text:000000000000A42A                 ja      short loc_A446
.text:000000000000A42C                 nop     dword ptr [rax+00h]
.text:000000000000A430
.text:000000000000A430 loc_A430:                               ; CODE XREF: printf_parse+521↓j
.text:000000000000A430                 add     rax, 1
.text:000000000000A434                 mov     dword ptr [rdx], 0
.text:000000000000A43A                 add     rdx, 20h ; ' '
.text:000000000000A43E                 cmp     rax, rbx
.text:000000000000A441                 jbe     short loc_A430
.text:000000000000A443                 mov     [r15], rax
.text:000000000000A446
.text:000000000000A446 loc_A446:                               ; CODE XREF: printf_parse+50A↑j
.text:000000000000A446                 shl     rbx, 5
.text:000000000000A44A                 lea     rax, [rcx+rbx]
.text:000000000000A44E                 mov     edx, [rax]
.text:000000000000A450                 test    edx, edx
.text:000000000000A452                 jnz     loc_A96A
.text:000000000000A458                 mov     dword ptr [rax], 5
.text:000000000000A45E                 mov     rbp, r11
.text:000000000000A461                 movzx   ebx, byte ptr [r11]
.text:000000000000A465                 jmp     loc_A0EE
.text:000000000000A46A ; ---------------------------------------------------------------------------
.text:000000000000A46A
.text:000000000000A46A loc_A46A:                               ; CODE XREF: printf_parse+112↑j
.text:000000000000A46A                 mov     rax, rbp
.text:000000000000A46D                 nop     dword ptr [rax]
.text:000000000000A470
.text:000000000000A470 loc_A470:                               ; CODE XREF: printf_parse+55D↓j
.text:000000000000A470                 add     rax, 1
.text:000000000000A474                 movzx   edx, byte ptr [rax]
.text:000000000000A477                 lea     ecx, [rdx-30h]
.text:000000000000A47A                 cmp     cl, 9
.text:000000000000A47D                 jbe     short loc_A470
.text:000000000000A47F                 cmp     dl, 24h ; '$'
.text:000000000000A482                 mov     r13, r8
.text:000000000000A485                 jnz     loc_A06E
.text:000000000000A48B                 xor     edx, edx
.text:000000000000A48D
.text:000000000000A48D loc_A48D:                               ; CODE XREF: printf_parse+5B7↓j
.text:000000000000A48D                 movsx   eax, bl
.text:000000000000A490                 mov     rdi, 1999999999999999h
.text:000000000000A49A                 mov     rsi, r8
.text:000000000000A49D                 sub     eax, 30h ; '0'
.text:000000000000A4A0                 cmp     rdx, rdi
.text:000000000000A4A3                 cdqe
.text:000000000000A4A5                 ja      short loc_A4AE
.text:000000000000A4A7                 lea     rsi, [rdx+rdx*4]
.text:000000000000A4AB                 add     rsi, rsi
.text:000000000000A4AE
.text:000000000000A4AE loc_A4AE:                               ; CODE XREF: printf_parse+585↑j
.text:000000000000A4AE                 mov     rcx, rbp
.text:000000000000A4B1
.text:000000000000A4B1 loc_A4B1:                               ; CODE XREF: printf_parse+956↓j
.text:000000000000A4B1                 add     rax, rsi
.text:000000000000A4B4                 movzx   ebx, byte ptr [rbp+1]
.text:000000000000A4B8                 setb    sil
.text:000000000000A4BC                 add     rbp, 1
.text:000000000000A4C0                 mov     rdx, rax
.text:000000000000A4C3                 movzx   esi, sil
.text:000000000000A4C7                 test    rsi, rsi
.text:000000000000A4CA                 lea     edi, [rbx-30h]
.text:000000000000A4CD                 jnz     loc_A85E
.text:000000000000A4D3                 cmp     dil, 9
.text:000000000000A4D7                 jbe     short loc_A48D
.text:000000000000A4D9                 mov     r13, rax
.text:000000000000A4DC                 sub     r13, 1
.text:000000000000A4E0                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:000000000000A4E4                 ja      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000A4EA                 lea     rbp, [rcx+2]
.text:000000000000A4EE                 movzx   ebx, byte ptr [rcx+2]
.text:000000000000A4F2                 jmp     loc_A06E
.text:000000000000A4F7 ; ---------------------------------------------------------------------------
.text:000000000000A4F7
.text:000000000000A4F7 loc_A4F7:                               ; CODE XREF: printf_parse+1BF↑j
.text:000000000000A4F7                 mov     [r12+18h], rbp
.text:000000000000A4FC                 movzx   edi, byte ptr [rbp+0]
.text:000000000000A500                 mov     rsi, rbp
.text:000000000000A503                 lea     ecx, [rdi-30h]
.text:000000000000A506                 cmp     cl, 9
.text:000000000000A509                 jbe     short loc_A517
.text:000000000000A50B                 jmp     short loc_A540
.text:000000000000A50B ; ---------------------------------------------------------------------------
.text:000000000000A50D                 align 10h
.text:000000000000A510
.text:000000000000A510 loc_A510:                               ; CODE XREF: printf_parse+600↓j
.text:000000000000A510                 mov     rbp, rax
.text:000000000000A513                 add     rax, 1
.text:000000000000A517
.text:000000000000A517 loc_A517:                               ; CODE XREF: printf_parse+5E9↑j
.text:000000000000A517                 movzx   edi, byte ptr [rax]
.text:000000000000A51A                 lea     edx, [rdi-30h]
.text:000000000000A51D                 cmp     dl, 9
.text:000000000000A520                 jbe     short loc_A510
.text:000000000000A522                 mov     rcx, rax
.text:000000000000A525                 lea     rdx, [rbp+2]
.text:000000000000A529                 mov     rbp, rax
.text:000000000000A52C                 sub     rcx, rsi
.text:000000000000A52F                 mov     rsi, [rsp+88h+var_78]
.text:000000000000A534                 cmp     rsi, rcx
.text:000000000000A537                 cmovnb  rcx, rsi
.text:000000000000A53B                 mov     [rsp+88h+var_78], rcx
.text:000000000000A540
.text:000000000000A540 loc_A540:                               ; CODE XREF: printf_parse+5EB↑j
.text:000000000000A540                 mov     [r12+20h], rbp
.text:000000000000A545                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000A549                 jmp     loc_A0E5
.text:000000000000A54E ; ---------------------------------------------------------------------------
.text:000000000000A54E
.text:000000000000A54E loc_A54E:                               ; CODE XREF: printf_parse+4A8↑j
.text:000000000000A54E                 movzx   eax, byte ptr [rbp+1]
.text:000000000000A552                 sub     eax, 30h ; '0'
.text:000000000000A555                 cmp     al, 9
.text:000000000000A557                 ja      short loc_A56E
.text:000000000000A559                 nop     dword ptr [rax+00000000h]
.text:000000000000A560
.text:000000000000A560 loc_A560:                               ; CODE XREF: printf_parse+64C↓j
.text:000000000000A560                 add     rdx, 1
.text:000000000000A564                 movzx   eax, byte ptr [rdx]
.text:000000000000A567                 sub     eax, 30h ; '0'
.text:000000000000A56A                 cmp     al, 9
.text:000000000000A56C                 jbe     short loc_A560
.text:000000000000A56E
.text:000000000000A56E loc_A56E:                               ; CODE XREF: printf_parse+637↑j
.text:000000000000A56E                 mov     rsi, [rsp+88h+var_70]
.text:000000000000A573                 mov     rax, rdx
.text:000000000000A576                 mov     [r12+38h], rdx
.text:000000000000A57B                 sub     rax, rbp
.text:000000000000A57E                 movzx   ebx, byte ptr [rdx]
.text:000000000000A581                 mov     rbp, rdx
.text:000000000000A584                 cmp     rsi, rax
.text:000000000000A587                 cmovnb  rax, rsi
.text:000000000000A58B                 mov     [rsp+88h+var_70], rax
.text:000000000000A590                 jmp     loc_A0EE
.text:000000000000A595 ; ---------------------------------------------------------------------------
.text:000000000000A595
.text:000000000000A595 loc_A595:                               ; CODE XREF: printf_parse+394↑j
.text:000000000000A595                 mov     rsi, rax
.text:000000000000A598
.text:000000000000A598 loc_A598:                               ; CODE XREF: printf_parse+687↓j
.text:000000000000A598                 add     rsi, 1
.text:000000000000A59C                 movzx   edi, byte ptr [rsi]
.text:000000000000A59F                 lea     r11d, [rdi-30h]
.text:000000000000A5A3                 cmp     r11b, 9
.text:000000000000A5A7                 jbe     short loc_A598
.text:000000000000A5A9                 cmp     dil, 24h ; '$'
.text:000000000000A5AD                 jnz     loc_A2BA
.text:000000000000A5B3                 xor     esi, esi
.text:000000000000A5B5
.text:000000000000A5B5 loc_A5B5:                               ; CODE XREF: printf_parse+6DE↓j
.text:000000000000A5B5                 movsx   eax, cl
.text:000000000000A5B8                 mov     rdi, 1999999999999999h
.text:000000000000A5C2                 mov     rcx, r8
.text:000000000000A5C5                 sub     eax, 30h ; '0'
.text:000000000000A5C8                 cmp     rsi, rdi
.text:000000000000A5CB                 cdqe
.text:000000000000A5CD                 ja      short loc_A5D6
.text:000000000000A5CF                 lea     rcx, [rsi+rsi*4]
.text:000000000000A5D3                 add     rcx, rcx
.text:000000000000A5D6
.text:000000000000A5D6 loc_A5D6:                               ; CODE XREF: printf_parse+6AD↑j
.text:000000000000A5D6                 mov     rbp, rdx
.text:000000000000A5D9
.text:000000000000A5D9 loc_A5D9:                               ; CODE XREF: printf_parse+BF6↓j
.text:000000000000A5D9                 xor     r11d, r11d
.text:000000000000A5DC                 add     rax, rcx
.text:000000000000A5DF                 movzx   ecx, byte ptr [rdx+1]
.text:000000000000A5E3                 setb    r11b
.text:000000000000A5E7                 add     rdx, 1
.text:000000000000A5EB                 mov     rsi, rax
.text:000000000000A5EE                 test    r11, r11
.text:000000000000A5F1                 lea     edi, [rcx-30h]
.text:000000000000A5F4                 jnz     loc_AAFE
.text:000000000000A5FA                 cmp     dil, 9
.text:000000000000A5FE                 jbe     short loc_A5B5
.text:000000000000A600                 lea     rbx, [rax-1]
.text:000000000000A604                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000A608                 ja      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000A60E                 mov     [r12+28h], rbx
.text:000000000000A613                 add     rbp, 2
.text:000000000000A617                 jmp     loc_A2DF
.text:000000000000A61C ; ---------------------------------------------------------------------------
.text:000000000000A61C
.text:000000000000A61C loc_A61C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A61C                                         ; DATA XREF: .rodata:jpt_A165↓o
.text:000000000000A61C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:000000000000A61F                 mov     r11d, 16h
.text:000000000000A625                 jg      loc_A178
.text:000000000000A62B                 test    al, 4
.text:000000000000A62D                 jnz     loc_A178
.text:000000000000A633                 cmp     eax, 7
.text:000000000000A636                 mov     r11d, 15h
.text:000000000000A63C                 jg      loc_A178
.text:000000000000A642                 test    al, 2
.text:000000000000A644                 mov     r11d, 12h
.text:000000000000A64A                 jnz     loc_A178
.text:000000000000A650                 xor     r11d, r11d
.text:000000000000A653                 test    al, 1
.text:000000000000A655                 setz    r11b
.text:000000000000A659                 add     r11d, 13h
.text:000000000000A65D                 jmp     loc_A178
.text:000000000000A65D ; ---------------------------------------------------------------------------
.text:000000000000A662                 align 8
.text:000000000000A668
.text:000000000000A668 loc_A668:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A668                                         ; DATA XREF: .rodata:jpt_A165↓o
.text:000000000000A668                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000000A66B                 cmp     eax, 7
.text:000000000000A66E                 setnle  r11b
.text:000000000000A672                 add     r11d, 0Dh
.text:000000000000A676                 jmp     loc_A178
.text:000000000000A67B ; ---------------------------------------------------------------------------
.text:000000000000A67B
.text:000000000000A67B loc_A67B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A67B                                         ; DATA XREF: .rodata:jpt_A165↓o
.text:000000000000A67B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000A67E                 mov     r11d, 9
.text:000000000000A684                 jg      loc_A178
.text:000000000000A68A                 test    al, 4
.text:000000000000A68C                 jnz     loc_A178
.text:000000000000A692                 cmp     eax, 7
.text:000000000000A695                 mov     r11d, 7
.text:000000000000A69B                 jg      loc_A178
.text:000000000000A6A1                 test    al, 2
.text:000000000000A6A3                 mov     r11d, 1
.text:000000000000A6A9                 jnz     loc_A178
.text:000000000000A6AF                 and     eax, 1
.text:000000000000A6B2                 cmp     eax, 1
.text:000000000000A6B5                 sbb     r11d, r11d
.text:000000000000A6B8                 and     r11d, 2
.text:000000000000A6BC                 add     r11d, 3
.text:000000000000A6C0                 jmp     loc_A178
.text:000000000000A6C0 ; ---------------------------------------------------------------------------
.text:000000000000A6C5                 align 8
.text:000000000000A6C8
.text:000000000000A6C8 loc_A6C8:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A6C8                                         ; DATA XREF: .rodata:jpt_A165↓o
.text:000000000000A6C8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000000A6CB                 cmp     eax, 7
.text:000000000000A6CE                 setnle  r11b
.text:000000000000A6D2                 add     r11d, 0Fh
.text:000000000000A6D6                 jmp     loc_A178
.text:000000000000A6DB ; ---------------------------------------------------------------------------
.text:000000000000A6DB
.text:000000000000A6DB loc_A6DB:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A6DB                                         ; DATA XREF: .rodata:jpt_A165↓o
.text:000000000000A6DB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:000000000000A6DE                 mov     r11d, 0Ch
.text:000000000000A6E4                 jg      loc_A178
.text:000000000000A6EA                 xor     r11d, r11d
.text:000000000000A6ED                 test    al, 4
.text:000000000000A6EF                 setnz   r11b
.text:000000000000A6F3                 add     r11d, 0Bh
.text:000000000000A6F7                 jmp     loc_A178
.text:000000000000A6FC ; ---------------------------------------------------------------------------
.text:000000000000A6FC
.text:000000000000A6FC loc_A6FC:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A6FC                                         ; DATA XREF: .rodata:jpt_A165↓o
.text:000000000000A6FC                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:000000000000A702                 mov     ebx, 63h ; 'c'
.text:000000000000A707                 jmp     loc_A178
.text:000000000000A70C ; ---------------------------------------------------------------------------
.text:000000000000A70C
.text:000000000000A70C loc_A70C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A70C                                         ; DATA XREF: .rodata:jpt_A165↓o
.text:000000000000A70C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:000000000000A70F                 mov     r11d, 0Ah
.text:000000000000A715                 jg      loc_A178
.text:000000000000A71B                 test    al, 4
.text:000000000000A71D                 jnz     loc_A178
.text:000000000000A723                 cmp     eax, 7
.text:000000000000A726                 mov     r11d, 8
.text:000000000000A72C                 jg      loc_A178
.text:000000000000A732                 test    al, 2
.text:000000000000A734                 mov     r11d, 2
.text:000000000000A73A                 jnz     loc_A178
.text:000000000000A740                 and     eax, 1
.text:000000000000A743                 cmp     eax, 1
.text:000000000000A746                 sbb     r11d, r11d
.text:000000000000A749                 and     r11d, 2
.text:000000000000A74D                 add     r11d, 4
.text:000000000000A751                 jmp     loc_A178
.text:000000000000A751 ; ---------------------------------------------------------------------------
.text:000000000000A756                 align 20h
.text:000000000000A760
.text:000000000000A760 loc_A760:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A760                                         ; DATA XREF: .rodata:jpt_A165↓o
.text:000000000000A760                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:000000000000A766                 jmp     loc_A178
.text:000000000000A76B ; ---------------------------------------------------------------------------
.text:000000000000A76B
.text:000000000000A76B def_A165:                               ; CODE XREF: printf_parse+22E↑j
.text:000000000000A76B                                         ; printf_parse+245↑j ...
.text:000000000000A76B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000A76F
.text:000000000000A76F loc_A76F:                               ; CODE XREF: printf_parse+88C↓j
.text:000000000000A76F                                         ; printf_parse+95E↓j ...
.text:000000000000A76F                 cmp     [rsp+88h+src], rcx
.text:000000000000A774                 jz      short loc_A77E
.text:000000000000A776                 mov     rdi, rcx        ; ptr
.text:000000000000A779                 call    _free           ; PIC mode
.text:000000000000A77E
.text:000000000000A77E loc_A77E:                               ; CODE XREF: printf_parse+854↑j
.text:000000000000A77E                 mov     rdi, [r14+8]    ; ptr
.text:000000000000A782                 cmp     [rsp+88h+var_60], rdi
.text:000000000000A787                 jz      short loc_A78E
.text:000000000000A789                 call    _free           ; PIC mode
.text:000000000000A78E
.text:000000000000A78E loc_A78E:                               ; CODE XREF: printf_parse+867↑j
.text:000000000000A78E                 call    ___errno_location ; PIC mode
.text:000000000000A793                 mov     dword ptr [rax], 16h
.text:000000000000A799                 mov     eax, 0FFFFFFFFh
.text:000000000000A79E                 jmp     loc_9FC2
.text:000000000000A7A3 ; ---------------------------------------------------------------------------
.text:000000000000A7A3
.text:000000000000A7A3 loc_A7A3:                               ; CODE XREF: printf_parse+2B2↑j
.text:000000000000A7A3                 cmp     edx, r11d
.text:000000000000A7A6                 jz      loc_A1DB        ; jumptable 0000000000000245 case 37
.text:000000000000A7AC                 jmp     short loc_A76F
.text:000000000000A7AC ; ---------------------------------------------------------------------------
.text:000000000000A7AE                 align 10h
.text:000000000000A7B0
.text:000000000000A7B0 loc_A7B0:                               ; CODE XREF: printf_parse+26E↑j
.text:000000000000A7B0                 add     r9, r9
.text:000000000000A7B3                 lea     rax, [r13+1]
.text:000000000000A7B7                 cmp     r9, r13
.text:000000000000A7BA                 cmovbe  r9, rax
.text:000000000000A7BE                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000A7C8                 cmp     r9, rax
.text:000000000000A7CB                 ja      loc_ABAB
.text:000000000000A7D1                 mov     rsi, r9
.text:000000000000A7D4                 mov     [rsp+88h+var_40], r9
.text:000000000000A7D9                 mov     [rsp+88h+var_48], r10
.text:000000000000A7DE                 shl     rsi, 5          ; size
.text:000000000000A7E2                 cmp     [rsp+88h+src], rcx
.text:000000000000A7E7                 mov     [rsp+88h+var_50], r8
.text:000000000000A7EC                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000A7F1                 jz      loc_A891
.text:000000000000A7F7                 mov     rdi, rcx        ; ptr
.text:000000000000A7FA                 call    _realloc        ; PIC mode
.text:000000000000A7FF                 test    rax, rax
.text:000000000000A802                 mov     rcx, rax
.text:000000000000A805                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000A80A                 mov     r8, [rsp+88h+var_50]
.text:000000000000A80F                 mov     r10, [rsp+88h+var_48]
.text:000000000000A814                 mov     r9, [rsp+88h+var_40]
.text:000000000000A819                 jz      loc_ABA7
.text:000000000000A81F                 mov     rax, [rsp+88h+src]
.text:000000000000A824                 cmp     rax, [r15+8]
.text:000000000000A828                 jz      loc_A8B9
.text:000000000000A82E
.text:000000000000A82E loc_A82E:                               ; CODE XREF: printf_parse+9D8↓j
.text:000000000000A82E                 mov     [r15+8], rcx
.text:000000000000A832                 jmp     loc_A194
.text:000000000000A837 ; ---------------------------------------------------------------------------
.text:000000000000A837
.text:000000000000A837 loc_A837:                               ; CODE XREF: printf_parse+25C↑j
.text:000000000000A837                 mov     rsi, [rsp+88h+var_68]
.text:000000000000A83C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A840                 lea     rax, [rsi+1]
.text:000000000000A844                 mov     [r12+50h], rsi
.text:000000000000A849                 jz      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000A84F                 mov     r13, [rsp+88h+var_68]
.text:000000000000A854                 mov     [rsp+88h+var_68], rax
.text:000000000000A859                 jmp     loc_A187
.text:000000000000A85E ; ---------------------------------------------------------------------------
.text:000000000000A85E
.text:000000000000A85E loc_A85E:                               ; CODE XREF: printf_parse+5AD↑j
.text:000000000000A85E                 cmp     dil, 9
.text:000000000000A862                 ja      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000A868                 movsx   eax, bl
.text:000000000000A86B                 mov     rsi, r8
.text:000000000000A86E                 mov     rcx, rbp
.text:000000000000A871                 sub     eax, 30h ; '0'
.text:000000000000A874                 cdqe
.text:000000000000A876                 jmp     loc_A4B1
.text:000000000000A87B ; ---------------------------------------------------------------------------
.text:000000000000A87B
.text:000000000000A87B loc_A87B:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000A87B                 cmp     edx, 5
.text:000000000000A87E                 jnz     loc_A76F
.text:000000000000A884                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000A888                 lea     rdx, [rbp+1]
.text:000000000000A88C                 jmp     loc_A0E5
.text:000000000000A891 ; ---------------------------------------------------------------------------
.text:000000000000A891
.text:000000000000A891 loc_A891:                               ; CODE XREF: printf_parse+8D1↑j
.text:000000000000A891                 mov     rdi, rsi        ; size
.text:000000000000A894                 call    _malloc         ; PIC mode
.text:000000000000A899                 test    rax, rax
.text:000000000000A89C                 mov     rcx, rax
.text:000000000000A89F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000A8A4                 mov     r8, [rsp+88h+var_50]
.text:000000000000A8A9                 mov     r10, [rsp+88h+var_48]
.text:000000000000A8AE                 mov     r9, [rsp+88h+var_40]
.text:000000000000A8B3                 jz      loc_AA1C
.text:000000000000A8B9
.text:000000000000A8B9 loc_A8B9:                               ; CODE XREF: printf_parse+908↑j
.text:000000000000A8B9                 mov     rdx, [r15]
.text:000000000000A8BC                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000A8C1                 mov     rdi, rcx        ; dest
.text:000000000000A8C4                 mov     [rsp+88h+var_40], r9
.text:000000000000A8C9                 mov     [rsp+88h+var_48], r10
.text:000000000000A8CE                 mov     [rsp+88h+var_50], r8
.text:000000000000A8D3                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000A8D8                 shl     rdx, 5          ; n
.text:000000000000A8DC                 call    _memcpy         ; PIC mode
.text:000000000000A8E1                 mov     r9, [rsp+88h+var_40]
.text:000000000000A8E6                 mov     r10, [rsp+88h+var_48]
.text:000000000000A8EB                 mov     rcx, rax
.text:000000000000A8EE                 mov     r8, [rsp+88h+var_50]
.text:000000000000A8F3                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000A8F8                 jmp     loc_A82E
.text:000000000000A8FD ; ---------------------------------------------------------------------------
.text:000000000000A8FD
.text:000000000000A8FD loc_A8FD:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000A8FD                 mov     rdi, rsi        ; size
.text:000000000000A900                 call    _malloc         ; PIC mode
.text:000000000000A905                 test    rax, rax
.text:000000000000A908                 mov     rcx, rax
.text:000000000000A90B                 mov     r8, [rsp+88h+var_58]
.text:000000000000A910                 mov     r10, [rsp+88h+var_50]
.text:000000000000A915                 mov     r9, [rsp+88h+var_48]
.text:000000000000A91A                 jz      loc_AA09
.text:000000000000A920
.text:000000000000A920 loc_A920:                               ; CODE XREF: printf_parse+351↑j
.text:000000000000A920                 lea     rax, [rbx+rbx*4]
.text:000000000000A924                 mov     rsi, [rsp+88h+var_60] ; src
.text:000000000000A929                 mov     rdi, rcx        ; dest
.text:000000000000A92C                 mov     [rsp+88h+var_48], r9
.text:000000000000A931                 mov     [rsp+88h+var_50], r10
.text:000000000000A936                 lea     rdx, [rbx+rax*2]
.text:000000000000A93A                 mov     [rsp+88h+var_58], r8
.text:000000000000A93F                 shl     rdx, 3          ; n
.text:000000000000A943                 call    _memcpy         ; PIC mode
.text:000000000000A948                 mov     rbx, [r14]
.text:000000000000A94B                 mov     rcx, rax
.text:000000000000A94E                 mov     r9, [rsp+88h+var_48]
.text:000000000000A953                 mov     r10, [rsp+88h+var_50]
.text:000000000000A958                 mov     r8, [rsp+88h+var_58]
.text:000000000000A95D                 jmp     loc_A277
.text:000000000000A962 ; ---------------------------------------------------------------------------
.text:000000000000A962
.text:000000000000A962 loc_A962:                               ; CODE XREF: printf_parse+3C6↑j
.text:000000000000A962                 mov     rax, [r15]
.text:000000000000A965                 jmp     loc_A367
.text:000000000000A96A ; ---------------------------------------------------------------------------
.text:000000000000A96A
.text:000000000000A96A loc_A96A:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000A96A                 cmp     edx, 5
.text:000000000000A96D                 jnz     loc_A76F
.text:000000000000A973                 movzx   ebx, byte ptr [r11]
.text:000000000000A977                 mov     rbp, r11
.text:000000000000A97A                 jmp     loc_A0EE
.text:000000000000A97F ; ---------------------------------------------------------------------------
.text:000000000000A97F
.text:000000000000A97F loc_A97F:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000A97F                 add     r9, r9
.text:000000000000A982                 lea     rax, [rbx+1]
.text:000000000000A986                 cmp     r9, rbx
.text:000000000000A989                 cmovbe  r9, rax
.text:000000000000A98D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000A997                 cmp     r9, rax
.text:000000000000A99A                 ja      loc_ABAB
.text:000000000000A9A0                 mov     rsi, r9
.text:000000000000A9A3                 mov     [rsp+88h+var_40], r9
.text:000000000000A9A8                 mov     [rsp+88h+var_48], r10
.text:000000000000A9AD                 shl     rsi, 5          ; size
.text:000000000000A9B1                 cmp     [rsp+88h+src], rcx
.text:000000000000A9B6                 mov     [rsp+88h+var_50], r8
.text:000000000000A9BB                 mov     [rsp+88h+var_58], r11
.text:000000000000A9C0                 jz      loc_AB7E
.text:000000000000A9C6                 mov     rdi, rcx        ; ptr
.text:000000000000A9C9                 call    _realloc        ; PIC mode
.text:000000000000A9CE                 mov     rdx, [r15+8]
.text:000000000000A9D2                 mov     r11, [rsp+88h+var_58]
.text:000000000000A9D7                 mov     rcx, rax
.text:000000000000A9DA                 mov     r8, [rsp+88h+var_50]
.text:000000000000A9DF                 mov     r10, [rsp+88h+var_48]
.text:000000000000A9E4                 mov     r9, [rsp+88h+var_40]
.text:000000000000A9E9
.text:000000000000A9E9 loc_A9E9:                               ; CODE XREF: printf_parse+C82↓j
.text:000000000000A9E9                 test    rcx, rcx
.text:000000000000A9EC                 jz      loc_AC07
.text:000000000000A9F2                 cmp     [rsp+88h+src], rdx
.text:000000000000A9F7                 mov     rax, [r15]
.text:000000000000A9FA                 jz      loc_ABC0
.text:000000000000AA00
.text:000000000000AA00 loc_AA00:                               ; CODE XREF: printf_parse+CE2↓j
.text:000000000000AA00                 mov     [r15+8], rcx
.text:000000000000AA04                 jmp     loc_A41D
.text:000000000000AA09 ; ---------------------------------------------------------------------------
.text:000000000000AA09
.text:000000000000AA09 loc_AA09:                               ; CODE XREF: printf_parse+9FA↑j
.text:000000000000AA09                 mov     rcx, [r15+8]
.text:000000000000AA0D                 cmp     [rsp+88h+src], rcx
.text:000000000000AA12                 jz      short loc_AA2C
.text:000000000000AA14
.text:000000000000AA14 loc_AA14:                               ; CODE XREF: printf_parse+C90↓j
.text:000000000000AA14                 mov     rdi, rcx        ; ptr
.text:000000000000AA17                 call    _free           ; PIC mode
.text:000000000000AA1C
.text:000000000000AA1C loc_AA1C:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000AA1C                                         ; printf_parse+C96↓j
.text:000000000000AA1C                 mov     rdi, [r14+8]    ; ptr
.text:000000000000AA20                 cmp     [rsp+88h+var_60], rdi
.text:000000000000AA25                 jz      short loc_AA2C
.text:000000000000AA27                 call    _free           ; PIC mode
.text:000000000000AA2C
.text:000000000000AA2C loc_AA2C:                               ; CODE XREF: printf_parse+AF2↑j
.text:000000000000AA2C                                         ; printf_parse+B05↑j
.text:000000000000AA2C                 call    ___errno_location ; PIC mode
.text:000000000000AA31                 mov     dword ptr [rax], 0Ch
.text:000000000000AA37                 mov     eax, 0FFFFFFFFh
.text:000000000000AA3C                 jmp     loc_9FC2
.text:000000000000AA41 ; ---------------------------------------------------------------------------
.text:000000000000AA41
.text:000000000000AA41 loc_AA41:                               ; CODE XREF: printf_parse+408↑j
.text:000000000000AA41                 mov     rdi, rsi        ; size
.text:000000000000AA44                 call    _malloc         ; PIC mode
.text:000000000000AA49                 mov     rdx, [rsp+88h+src]
.text:000000000000AA4E                 mov     rcx, rax
.text:000000000000AA51                 mov     r9, [rsp+88h+var_48]
.text:000000000000AA56                 mov     r10, [rsp+88h+var_50]
.text:000000000000AA5B                 mov     r8, [rsp+88h+var_58]
.text:000000000000AA60                 jmp     loc_A34C
.text:000000000000AA65 ; ---------------------------------------------------------------------------
.text:000000000000AA65
.text:000000000000AA65 loc_AA65:                               ; CODE XREF: printf_parse+4E7↑j
.text:000000000000AA65                 mov     rsi, [rsp+88h+var_68]
.text:000000000000AA6A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000AA6E                 lea     rax, [rsi+1]
.text:000000000000AA72                 mov     [r12+40h], rsi
.text:000000000000AA77                 jz      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000AA7D                 mov     rbx, [rsp+88h+var_68]
.text:000000000000AA82                 mov     [rsp+88h+var_68], rax
.text:000000000000AA87                 jmp     loc_A40D
.text:000000000000AA8C ; ---------------------------------------------------------------------------
.text:000000000000AA8C
.text:000000000000AA8C loc_AA8C:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000AA8C                 mov     rdx, r11
.text:000000000000AA8F
.text:000000000000AA8F loc_AA8F:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000AA8F                 add     rdx, 1
.text:000000000000AA93                 movzx   ecx, byte ptr [rdx]
.text:000000000000AA96                 lea     esi, [rcx-30h]
.text:000000000000AA99                 cmp     sil, 9
.text:000000000000AA9D                 jbe     short loc_AA8F
.text:000000000000AA9F                 cmp     cl, 24h ; '$'
.text:000000000000AAA2                 jnz     loc_A3FE
.text:000000000000AAA8                 xor     ecx, ecx
.text:000000000000AAAA
.text:000000000000AAAA loc_AAAA:                               ; CODE XREF: printf_parse+C3C↓j
.text:000000000000AAAA                 mov     rsi, 1999999999999999h
.text:000000000000AAB4                 sub     eax, 30h ; '0'
.text:000000000000AAB7                 mov     rdx, r8
.text:000000000000AABA                 cmp     rcx, rsi
.text:000000000000AABD                 cdqe
.text:000000000000AABF                 ja      short loc_AAC8
.text:000000000000AAC1                 lea     rdx, [rcx+rcx*4]
.text:000000000000AAC5                 add     rdx, rdx
.text:000000000000AAC8
.text:000000000000AAC8 loc_AAC8:                               ; CODE XREF: printf_parse+B9F↑j
.text:000000000000AAC8                 mov     rsi, r11
.text:000000000000AACB
.text:000000000000AACB loc_AACB:                               ; CODE XREF: printf_parse+BDC↓j
.text:000000000000AACB                 xor     ebx, ebx
.text:000000000000AACD                 add     rdx, rax
.text:000000000000AAD0                 movsx   eax, byte ptr [r11+1]
.text:000000000000AAD5                 setb    bl
.text:000000000000AAD8                 add     r11, 1
.text:000000000000AADC                 mov     rcx, rdx
.text:000000000000AADF                 test    rbx, rbx
.text:000000000000AAE2                 lea     edi, [rax-30h]
.text:000000000000AAE5                 jz      short loc_AB58
.text:000000000000AAE7                 cmp     dil, 9
.text:000000000000AAEB                 ja      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000AAF1                 sub     eax, 30h ; '0'
.text:000000000000AAF4                 mov     rdx, r8
.text:000000000000AAF7                 mov     rsi, r11
.text:000000000000AAFA                 cdqe
.text:000000000000AAFC                 jmp     short loc_AACB
.text:000000000000AAFE ; ---------------------------------------------------------------------------
.text:000000000000AAFE
.text:000000000000AAFE loc_AAFE:                               ; CODE XREF: printf_parse+6D4↑j
.text:000000000000AAFE                 cmp     dil, 9
.text:000000000000AB02                 ja      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000AB08                 movsx   eax, cl
.text:000000000000AB0B                 mov     rbp, rdx
.text:000000000000AB0E                 mov     rcx, r8
.text:000000000000AB11                 sub     eax, 30h ; '0'
.text:000000000000AB14                 cdqe
.text:000000000000AB16                 jmp     loc_A5D9
.text:000000000000AB1B ; ---------------------------------------------------------------------------
.text:000000000000AB1B
.text:000000000000AB1B loc_AB1B:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000AB1B                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000AB20                 shl     rax, 5
.text:000000000000AB24                 mov     rdi, rcx        ; dest
.text:000000000000AB27                 mov     rdx, rax        ; n
.text:000000000000AB2A                 mov     [rsp+88h+var_48], r9
.text:000000000000AB2F                 mov     [rsp+88h+var_50], r10
.text:000000000000AB34                 mov     [rsp+88h+var_58], r8
.text:000000000000AB39                 call    _memcpy         ; PIC mode
.text:000000000000AB3E                 mov     r9, [rsp+88h+var_48]
.text:000000000000AB43                 mov     rcx, rax
.text:000000000000AB46                 mov     r10, [rsp+88h+var_50]
.text:000000000000AB4B                 mov     rax, [r15]
.text:000000000000AB4E                 mov     r8, [rsp+88h+var_58]
.text:000000000000AB53                 jmp     loc_A363
.text:000000000000AB58 ; ---------------------------------------------------------------------------
.text:000000000000AB58
.text:000000000000AB58 loc_AB58:                               ; CODE XREF: printf_parse+BC5↑j
.text:000000000000AB58                 cmp     dil, 9
.text:000000000000AB5C                 jbe     loc_AAAA
.text:000000000000AB62                 lea     rbx, [rdx-1]
.text:000000000000AB66                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000AB6A                 ja      def_A165        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000AB70                 mov     [r12+40h], rbx
.text:000000000000AB75                 lea     r11, [rsi+2]
.text:000000000000AB79                 jmp     loc_A40D
.text:000000000000AB7E ; ---------------------------------------------------------------------------
.text:000000000000AB7E
.text:000000000000AB7E loc_AB7E:                               ; CODE XREF: printf_parse+AA0↑j
.text:000000000000AB7E                 mov     rdi, rsi        ; size
.text:000000000000AB81                 call    _malloc         ; PIC mode
.text:000000000000AB86                 mov     rdx, [rsp+88h+src]
.text:000000000000AB8B                 mov     rcx, rax
.text:000000000000AB8E                 mov     r9, [rsp+88h+var_40]
.text:000000000000AB93                 mov     r10, [rsp+88h+var_48]
.text:000000000000AB98                 mov     r8, [rsp+88h+var_50]
.text:000000000000AB9D                 mov     r11, [rsp+88h+var_58]
.text:000000000000ABA2                 jmp     loc_A9E9
.text:000000000000ABA7 ; ---------------------------------------------------------------------------
.text:000000000000ABA7
.text:000000000000ABA7 loc_ABA7:                               ; CODE XREF: printf_parse+2DB↑j
.text:000000000000ABA7                                         ; printf_parse+2F1↑j ...
.text:000000000000ABA7                 mov     rcx, [r15+8]
.text:000000000000ABAB
.text:000000000000ABAB loc_ABAB:                               ; CODE XREF: printf_parse+3E7↑j
.text:000000000000ABAB                                         ; printf_parse+8AB↑j ...
.text:000000000000ABAB                 cmp     [rsp+88h+src], rcx
.text:000000000000ABB0                 jnz     loc_AA14
.text:000000000000ABB6                 jmp     loc_AA1C
.text:000000000000ABB6 ; ---------------------------------------------------------------------------
.text:000000000000ABBB                 align 20h
.text:000000000000ABC0
.text:000000000000ABC0 loc_ABC0:                               ; CODE XREF: printf_parse+ADA↑j
.text:000000000000ABC0                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000ABC5                 shl     rax, 5
.text:000000000000ABC9                 mov     rdi, rcx        ; dest
.text:000000000000ABCC                 mov     rdx, rax        ; n
.text:000000000000ABCF                 mov     [rsp+88h+var_40], r9
.text:000000000000ABD4                 mov     [rsp+88h+var_48], r10
.text:000000000000ABD9                 mov     [rsp+88h+var_50], r8
.text:000000000000ABDE                 mov     [rsp+88h+var_58], r11
.text:000000000000ABE3                 call    _memcpy         ; PIC mode
.text:000000000000ABE8                 mov     r9, [rsp+88h+var_40]
.text:000000000000ABED                 mov     rcx, rax
.text:000000000000ABF0                 mov     r10, [rsp+88h+var_48]
.text:000000000000ABF5                 mov     rax, [r15]
.text:000000000000ABF8                 mov     r8, [rsp+88h+var_50]
.text:000000000000ABFD                 mov     r11, [rsp+88h+var_58]
.text:000000000000AC02                 jmp     loc_AA00
.text:000000000000AC07 ; ---------------------------------------------------------------------------
.text:000000000000AC07
.text:000000000000AC07 loc_AC07:                               ; CODE XREF: printf_parse+42F↑j
.text:000000000000AC07                                         ; printf_parse+ACC↑j
.text:000000000000AC07                 mov     rcx, rdx
.text:000000000000AC0A                 jmp     short loc_ABAB
.text:000000000000AC0A ; } // starts at 9F20
.text:000000000000AC0A printf_parse    endp
.text:000000000000AC0A
.text:000000000000AC0A ; ---------------------------------------------------------------------------
.text:000000000000AC0C                 align 10h
.text:000000000000AC10
.text:000000000000AC10 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC10
.text:000000000000AC10 ; Attributes: info_from_lumina
.text:000000000000AC10
.text:000000000000AC10 ; void _libc_csu_init(void)
.text:000000000000AC10                 public __libc_csu_init
.text:000000000000AC10 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000AC10 ; __unwind {
.text:000000000000AC10                 push    r15
.text:000000000000AC12                 push    r14
.text:000000000000AC14                 mov     r15, rdx
.text:000000000000AC17                 push    r13
.text:000000000000AC19                 push    r12
.text:000000000000AC1B                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000AC22                 push    rbp
.text:000000000000AC23                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000AC2A                 push    rbx
.text:000000000000AC2B                 mov     r13d, edi
.text:000000000000AC2E                 mov     r14, rsi
.text:000000000000AC31                 sub     rbp, r12
.text:000000000000AC34                 sub     rsp, 8
.text:000000000000AC38                 sar     rbp, 3
.text:000000000000AC3C                 call    _init_proc
.text:000000000000AC41                 test    rbp, rbp
.text:000000000000AC44                 jz      short loc_AC66
.text:000000000000AC46                 xor     ebx, ebx
.text:000000000000AC48                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000AC50
.text:000000000000AC50 loc_AC50:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000AC50                 mov     rdx, r15
.text:000000000000AC53                 mov     rsi, r14
.text:000000000000AC56                 mov     edi, r13d
.text:000000000000AC59                 call    ds:(__frame_dummy_init_array_entry - 20F9D0h)[r12+rbx*8]
.text:000000000000AC5D                 add     rbx, 1
.text:000000000000AC61                 cmp     rbp, rbx
.text:000000000000AC64                 jnz     short loc_AC50
.text:000000000000AC66
.text:000000000000AC66 loc_AC66:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000AC66                 add     rsp, 8
.text:000000000000AC6A                 pop     rbx
.text:000000000000AC6B                 pop     rbp
.text:000000000000AC6C                 pop     r12
.text:000000000000AC6E                 pop     r13
.text:000000000000AC70                 pop     r14
.text:000000000000AC72                 pop     r15
.text:000000000000AC74                 retn
.text:000000000000AC74 ; } // starts at AC10
.text:000000000000AC74 __libc_csu_init endp
.text:000000000000AC74
.text:000000000000AC74 ; ---------------------------------------------------------------------------
.text:000000000000AC75                 align 20h
.text:000000000000AC80
.text:000000000000AC80 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC80
.text:000000000000AC80
.text:000000000000AC80 ; void _libc_csu_fini(void)
.text:000000000000AC80                 public __libc_csu_fini
.text:000000000000AC80 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000AC80 ; __unwind {
.text:000000000000AC80                 rep retn
.text:000000000000AC80 ; } // starts at AC80
.text:000000000000AC80 __libc_csu_fini endp
.text:000000000000AC80
.text:000000000000AC80 ; ---------------------------------------------------------------------------
.text:000000000000AC82                 align 10h
.text:000000000000AC90
.text:000000000000AC90 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC90
.text:000000000000AC90
.text:000000000000AC90 atexit          proc near               ; CODE XREF: main+63↑p
.text:000000000000AC90 ; __unwind {
.text:000000000000AC90                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000AC97                 xor     esi, esi        ; obj
.text:000000000000AC99                 jmp     ___cxa_atexit
.text:000000000000AC99 ; } // starts at AC90
.text:000000000000AC99 atexit          endp
.text:000000000000AC99
.text:000000000000AC99 _text           ends
.text:000000000000AC99
LOAD:000000000000AC9E ; ===========================================================================
LOAD:000000000000AC9E
LOAD:000000000000AC9E ; Segment type: Pure code
LOAD:000000000000AC9E ; Segment permissions: Read/Execute
LOAD:000000000000AC9E LOAD            segment byte public 'CODE' use64
LOAD:000000000000AC9E                 assume cs:LOAD
LOAD:000000000000AC9E                 ;org 0AC9Eh
LOAD:000000000000AC9E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000AC9E                 align 20h
LOAD:000000000000AC9E LOAD            ends
LOAD:000000000000AC9E
.fini:000000000000ACA0 ; ===========================================================================
.fini:000000000000ACA0
.fini:000000000000ACA0 ; Segment type: Pure code
.fini:000000000000ACA0 ; Segment permissions: Read/Execute
.fini:000000000000ACA0 _fini           segment dword public 'CODE' use64
.fini:000000000000ACA0                 assume cs:_fini
.fini:000000000000ACA0                 ;org 0ACA0h
.fini:000000000000ACA0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000ACA0
.fini:000000000000ACA0 ; =============== S U B R O U T I N E =======================================
.fini:000000000000ACA0
.fini:000000000000ACA0
.fini:000000000000ACA0                 public _term_proc
.fini:000000000000ACA0 _term_proc      proc near
.fini:000000000000ACA0                 sub     rsp, 8          ; _fini
.fini:000000000000ACA4                 add     rsp, 8
.fini:000000000000ACA8                 retn
.fini:000000000000ACA8 _term_proc      endp
.fini:000000000000ACA8
.fini:000000000000ACA8 _fini           ends
.fini:000000000000ACA8
LOAD:000000000000ACA9 ; ===========================================================================
LOAD:000000000000ACA9
LOAD:000000000000ACA9 ; Segment type: Pure code
LOAD:000000000000ACA9 ; Segment permissions: Read/Execute
LOAD:000000000000ACA9 LOAD            segment byte public 'CODE' use64
LOAD:000000000000ACA9                 assume cs:LOAD
LOAD:000000000000ACA9                 ;org 0ACA9h
LOAD:000000000000ACA9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000ACA9                 align 20h
LOAD:000000000000ACA9 LOAD            ends
LOAD:000000000000ACA9
.rodata:000000000000ACC0 ; ===========================================================================
.rodata:000000000000ACC0
.rodata:000000000000ACC0 ; Segment type: Pure data
.rodata:000000000000ACC0 ; Segment permissions: Read
.rodata:000000000000ACC0 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000ACC0                 assume cs:_rodata
.rodata:000000000000ACC0                 ;org 0ACC0h
.rodata:000000000000ACC0                 public _IO_stdin_used
.rodata:000000000000ACC0 _IO_stdin_used  db    1
.rodata:000000000000ACC1                 db    0
.rodata:000000000000ACC2                 db    2
.rodata:000000000000ACC3                 db    0
.rodata:000000000000ACC4 a0123456789abcd db '0123456789abcdef',0 ; DATA XREF: format_address_std:loc_2F80↑o
.rodata:000000000000ACD5 aBb             db 'Bb',0               ; DATA XREF: parse_old_offset:loc_2FEF↑o
.rodata:000000000000ACD8 aDel            db 'del',0              ; DATA XREF: print_named_ascii+9B↑o
.rodata:000000000000ACDC aS              db '%*s',0              ; DATA XREF: print_named_ascii+71↑o
.rodata:000000000000ACDC                                         ; print_long_double+76↑o ...
.rodata:000000000000ACE0 aLd             db 'ld',0               ; DATA XREF: decode_format_string+680↑o
.rodata:000000000000ACE3 aLo             db 'lo',0               ; DATA XREF: decode_format_string+1B3↑o
.rodata:000000000000ACE6 aLu             db 'lu',0               ; DATA XREF: decode_format_string+6D6↑o
.rodata:000000000000ACE6                                         ; decode_format_string+6C4↑o
.rodata:000000000000ACE9 aLx             db 'lx',0               ; DATA XREF: decode_format_string+3C1↑o
.rodata:000000000000ACEC ; const char file[]
.rodata:000000000000ACEC file            db '../coreutils-8.31/src/od.c',0
.rodata:000000000000ACEC                                         ; DATA XREF: main+1110↑o
.rodata:000000000000ACEC                                         ; main+112F↑o ...
.rodata:000000000000AD07 ; const char aSNull[]
.rodata:000000000000AD07 aSNull          db 's != NULL',0        ; DATA XREF: decode_format_string+813↑o
.rodata:000000000000AD11 ; const char aTspecNull[]
.rodata:000000000000AD11 aTspecNull      db 'tspec != NULL',0    ; DATA XREF: decode_format_string+7CB↑o
.rodata:000000000000AD1F aS_0            db '%%*%s',0            ; DATA XREF: decode_format_string+655↑o
.rodata:000000000000AD1F                                         ; decode_format_string+6AB↑o
.rodata:000000000000AD25 aDS             db '%%*.%d%s',0         ; DATA XREF: decode_format_string+19F↑o
.rodata:000000000000AD25                                         ; decode_format_string+3AD↑o
.rodata:000000000000AD2E ; const char aSNext[]
.rodata:000000000000AD2E aSNext          db 's != next',0        ; DATA XREF: decode_format_string+7AC↑o
.rodata:000000000000AD38 ; const char aInvalidTypeStr_1[]
.rodata:000000000000AD38 aInvalidTypeStr_1 db 'invalid type string %s',0
.rodata:000000000000AD38                                         ; DATA XREF: decode_format_string+709↑o
.rodata:000000000000AD4F aC              db '%c',0               ; DATA XREF: print_ascii+177↑o
.rodata:000000000000AD4F                                         ; main:loc_1EC0↑o ...
.rodata:000000000000AD52 a03o            db '%03o',0             ; DATA XREF: print_ascii+190↑o
.rodata:000000000000AD52                                         ; decode_format_string+194↑o
.rodata:000000000000AD57 a0              db '\0',0               ; DATA XREF: print_ascii:loc_43B0↑o
.rodata:000000000000AD5A aA              db '\a',0               ; DATA XREF: main:loc_2B27↑o
.rodata:000000000000AD5A                                         ; print_ascii:loc_4358↑o ...
.rodata:000000000000AD5D aB              db '\b',0               ; DATA XREF: main:loc_2B19↑o
.rodata:000000000000AD5D                                         ; print_ascii:loc_4410↑o
.rodata:000000000000AD60 asc_AD60        db '\f',0               ; DATA XREF: main:loc_2ADD↑o
.rodata:000000000000AD60                                         ; print_ascii:loc_43D0↑o
.rodata:000000000000AD63 aN              db '\n',0               ; DATA XREF: main:loc_2AFD↑o
.rodata:000000000000AD63                                         ; print_ascii:loc_43F0↑o
.rodata:000000000000AD66 unk_AD66        db  5Ch ; \             ; DATA XREF: main:loc_2B35↑o
.rodata:000000000000AD66                                         ; print_ascii:loc_43C0↑o
.rodata:000000000000AD67 ; const char modes[2]
.rodata:000000000000AD67 modes           db 'r',0                ; DATA XREF: open_next_file:loc_4668↑o
.rodata:000000000000AD69 aT              db '\t',0               ; DATA XREF: main:loc_2B0B↑o
.rodata:000000000000AD69                                         ; print_ascii:loc_4400↑o
.rodata:000000000000AD6C aV              db '\v',0               ; DATA XREF: main:loc_2AEF↑o
.rodata:000000000000AD6C                                         ; print_ascii:loc_43E0↑o
.rodata:000000000000AD6F ; const char aSReadError[]
.rodata:000000000000AD6F aSReadError     db '%s: read error',0   ; DATA XREF: check_and_close+A3↑o
.rodata:000000000000AD7E ; const char aWriteError[]
.rodata:000000000000AD7E aWriteError     db 'write error',0      ; DATA XREF: check_and_close+61↑o
.rodata:000000000000AD7E                                         ; close_stdout:loc_5673↑o
.rodata:000000000000AD8A ; const char aStandardInput[]
.rodata:000000000000AD8A aStandardInput  db 'standard input',0   ; DATA XREF: main+B19↑o
.rodata:000000000000AD8A                                         ; open_next_file+4D↑o
.rodata:000000000000AD99 ; const char s[]
.rodata:000000000000AD99 s               db '*',0                ; DATA XREF: write_block+22C↑o
.rodata:000000000000AD9B asc_AD9B        db '  >',0              ; DATA XREF: write_block+150↑o
.rodata:000000000000AD9F ; const char a0NNBytesPerBlo[]
.rodata:000000000000AD9F a0NNBytesPerBlo db '0 < n && n <= bytes_per_block',0
.rodata:000000000000AD9F                                         ; DATA XREF: read_block+B5↑o
.rodata:000000000000ADBD aOd             db 'od',0               ; DATA XREF: main+544↑o
.rodata:000000000000ADBD                                         ; usage+2A9↑o ...
.rodata:000000000000ADC0 asc_ADC0        db '[',0                ; DATA XREF: usage+2B5↑o
.rodata:000000000000ADC2 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+2DC↑o
.rodata:000000000000ADD2 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000ADD2                                         ; DATA XREF: usage+30C↑o
.rodata:000000000000ADD2                                         ; usage+404↑o ...
.rodata:000000000000ADE8 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+31D↑o
.rodata:000000000000ADF2 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+329↑o
.rodata:000000000000AE01 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+2BC↑o
.rodata:000000000000AE0B aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+2E8↑o
.rodata:000000000000AE15 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+300↑o
.rodata:000000000000AE1F ; const char aSOnlineHelpS[]
.rodata:000000000000AE1F aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+372↑o
.rodata:000000000000AE1F                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000AE36 unk_AE36        db  47h ; G             ; DATA XREF: main+53D↑o
.rodata:000000000000AE36                                         ; usage+38E↑o ...
.rodata:000000000000AE37                 db  4Eh ; N
.rodata:000000000000AE38                 db  55h ; U
.rodata:000000000000AE39                 db  20h
.rodata:000000000000AE3A ; const char domainname[]
.rodata:000000000000AE3A domainname      db 'coreutils',0        ; DATA XREF: main+44↑o
.rodata:000000000000AE3A                                         ; main+50↑o ...
.rodata:000000000000AE44 ; const char s2[]
.rodata:000000000000AE44 s2              db 'en_',0              ; DATA XREF: usage+3B5↑o
.rodata:000000000000AE44                                         ; usage+476↑o
.rodata:000000000000AE48 ; const char aFullDocumentat[]
.rodata:000000000000AE48 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000AE48                                         ; DATA XREF: usage:loc_5141↑o
.rodata:000000000000AE48                                         ; usage:loc_51FE↑o
.rodata:000000000000AE63 ; const char dirname[]
.rodata:000000000000AE63 dirname         db '/usr/local/share/locale',0
.rodata:000000000000AE63                                         ; DATA XREF: main+3D↑o
.rodata:000000000000AE7B aEndian         db '--endian',0         ; DATA XREF: main+1CC↑o
.rodata:000000000000AE7B                                         ; .data.rel.ro:000000000020FAE0↓o
.rodata:000000000000AE84 aO1             db 'o1',0               ; DATA XREF: main:loc_1ED8↑o
.rodata:000000000000AE87 aU4             db 'u4',0               ; DATA XREF: main:loc_2008↑o
.rodata:000000000000AE8A aU2             db 'u2',0               ; DATA XREF: main:loc_1EA8↑o
.rodata:000000000000AE8D aFd             db 'fD',0               ; DATA XREF: main:loc_1FF0↑o
.rodata:000000000000AE90 aFf             db 'fF',0               ; DATA XREF: main:loc_1E90↑o
.rodata:000000000000AE93 aX4             db 'x4',0               ; DATA XREF: main:loc_1FD8↑o
.rodata:000000000000AE96 aDi             db 'dI',0               ; DATA XREF: main:loc_1E60↑o
.rodata:000000000000AE99 aDl             db 'dL',0               ; DATA XREF: main:loc_1FC0↑o
.rodata:000000000000AE9C aO4             db 'o4',0               ; DATA XREF: main:loc_1F58↑o
.rodata:000000000000AE9F aO2             db 'o2',0               ; DATA XREF: main:loc_2020↑o
.rodata:000000000000AEA2 aD2             db 'd2',0               ; DATA XREF: main:loc_1E10↑o
.rodata:000000000000AEA5 aX2             db 'x2',0               ; DATA XREF: main:loc_1E78↑o
.rodata:000000000000AEA8 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+536↑o
.rodata:000000000000AEB5 ; const char msgid[]
.rodata:000000000000AEB5 msgid           db 'extra operand %s',0 ; DATA XREF: main+919↑o
.rodata:000000000000AEC6 aOs             db 'oS',0               ; DATA XREF: main:loc_2663↑o
.rodata:000000000000AEC9 aSkipBytes      db 'skip-bytes',0       ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000AED4 aAddressRadix   db 'address-radix',0    ; DATA XREF: .data.rel.ro:000000000020FA00↓o
.rodata:000000000000AED4                                         ; decode_format_string+3A2↑o
.rodata:000000000000AEE2 aReadBytes      db 'read-bytes',0       ; DATA XREF: .data.rel.ro:000000000020FA20↓o
.rodata:000000000000AEED aFormat         db 'format',0           ; DATA XREF: .data.rel.ro:000000000020FA40↓o
.rodata:000000000000AEF4 aOutputDuplicat db 'output-duplicates',0
.rodata:000000000000AEF4                                         ; DATA XREF: .data.rel.ro:000000000020FA60↓o
.rodata:000000000000AF06 aStrings        db 'strings',0          ; DATA XREF: .data.rel.ro:000000000020FA80↓o
.rodata:000000000000AF0E aTraditional    db 'traditional',0      ; DATA XREF: .data.rel.ro:000000000020FAA0↓o
.rodata:000000000000AF1A aWidth          db 'width',0            ; DATA XREF: .data.rel.ro:000000000020FAC0↓o
.rodata:000000000000AF20 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020FB00↓o
.rodata:000000000000AF25 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020FB20↓o
.rodata:000000000000AF2D aLittle         db 'little',0           ; DATA XREF: .data.rel.ro:endian_args↓o
.rodata:000000000000AF34 aBig            db 'big',0              ; DATA XREF: .data.rel.ro:000000000020FB68↓o
.rodata:000000000000AF38 ; const char aInvalidTypeStr_0[]
.rodata:000000000000AF38 aInvalidTypeStr_0 db 'invalid type string %s;',0Ah
.rodata:000000000000AF38                                         ; DATA XREF: decode_format_string+533↑o
.rodata:000000000000AF38                 db 'this system doesn',27h,'t provide a %lu-byte integral type',0
.rodata:000000000000AF85                 align 8
.rodata:000000000000AF88 ; const char aStrlenTspecFmt[]
.rodata:000000000000AF88 aStrlenTspecFmt db 'strlen (tspec->fmt_string) < FMT_BYTES_ALLOCATED',0
.rodata:000000000000AF88                                         ; DATA XREF: decode_format_string+7EA↑o
.rodata:000000000000AFB9                 align 20h
.rodata:000000000000AFC0 aInvalidTypeStr db 'invalid type string %s;',0Ah
.rodata:000000000000AFC0                                         ; DATA XREF: decode_format_string+13A↑o
.rodata:000000000000AFC0                 db 'this system doesn',27h,'t provide a %lu-byte floating point type',0
.rodata:000000000000B013                 align 8
.rodata:000000000000B018 ; const char aInvalidCharact[]
.rodata:000000000000B018 aInvalidCharact db 'invalid character ',27h,'%c',27h,' in type string %s',0
.rodata:000000000000B018                                         ; DATA XREF: decode_format_string+2A6↑o
.rodata:000000000000B041                 align 8
.rodata:000000000000B048 ; const char aCannotSkipPast[]
.rodata:000000000000B048 aCannotSkipPast db 'cannot skip past end of combined input',0
.rodata:000000000000B048                                         ; DATA XREF: skip:loc_480E↑o
.rodata:000000000000B06F                 align 10h
.rodata:000000000000B070 ; const char aTrySHelpForMor[]
.rodata:000000000000B070 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000B070                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000B097                 align 8
.rodata:000000000000B098 ; const char aUsageSOptionFi[]
.rodata:000000000000B098 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah
.rodata:000000000000B098                                         ; DATA XREF: usage:loc_4DCD↑o
.rodata:000000000000B098                 db '  or:  %s [-abcdfilosx]... [FILE] [[+]OFFSET[.][b]]',0Ah
.rodata:000000000000B098                 db '  or:  %s --traditional [OPTION]... [FILE] [[+]OFFSET[.][b] [+][L'
.rodata:000000000000B098                 db 'ABEL][.][b]]',0Ah,0
.rodata:000000000000B13B                 align 20h
.rodata:000000000000B140 ; const char aWriteAnUnambig[]
.rodata:000000000000B140 aWriteAnUnambig db 0Ah                  ; DATA XREF: usage+8A↑o
.rodata:000000000000B140                 db 'Write an unambiguous representation, octal bytes by default,',0Ah
.rodata:000000000000B140                 db 'of FILE to standard output.  With more than one FILE argument,',0Ah
.rodata:000000000000B140                 db 'concatenate them in the listed order to form the input.',0Ah,0
.rodata:000000000000B1F6                 align 8
.rodata:000000000000B1F8 ; const char aWithNoFileOrWh[]
.rodata:000000000000B1F8 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+AF↑o
.rodata:000000000000B1F8                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:000000000000B230 ; const char aIfFirstAndSeco[]
.rodata:000000000000B230 aIfFirstAndSeco db 0Ah                  ; DATA XREF: usage+D4↑o
.rodata:000000000000B230                 db 'If first and second call formats both apply, the second format is'
.rodata:000000000000B230                 db ' assumed',0Ah
.rodata:000000000000B230                 db 'if the last operand begins with + or (if there are 2 operands) a '
.rodata:000000000000B230                 db 'digit.',0Ah
.rodata:000000000000B230                 db 'An OFFSET operand means -j OFFSET.  LABEL is the pseudo-address',0Ah
.rodata:000000000000B230                 db 'at first byte printed, incremented when dump is progressing.',0Ah
.rodata:000000000000B230                 db 'For OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal;',0Ah
.rodata:000000000000B230                 db 'suffixes may be . for octal and b for multiply by 512.',0Ah,0
.rodata:000000000000B3B7                 align 8
.rodata:000000000000B3B8 ; const char aMandatoryArgum[]
.rodata:000000000000B3B8 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+F9↑o
.rodata:000000000000B3B8                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000000B3B8                 db 'ns too.',0Ah,0
.rodata:000000000000B403                 align 8
.rodata:000000000000B408 ; const char aAAddressRadixR[]
.rodata:000000000000B408 aAAddressRadixR db '  -A, --address-radix=RADIX   output format for file offsets; RAD'
.rodata:000000000000B408                                         ; DATA XREF: usage+11E↑o
.rodata:000000000000B408                 db 'IX is one',0Ah
.rodata:000000000000B408                 db '                                of [doxn], for Decimal, Octal, He'
.rodata:000000000000B408                 db 'x or None',0Ah
.rodata:000000000000B408                 db '      --endian={big|little}   swap input bytes according the spec'
.rodata:000000000000B408                 db 'ified order',0Ah
.rodata:000000000000B408                 db '  -j, --skip-bytes=BYTES      skip BYTES input bytes first',0Ah,0
.rodata:000000000000B527                 align 8
.rodata:000000000000B528 ; const char aNReadBytesByte[]
.rodata:000000000000B528 aNReadBytesByte db '  -N, --read-bytes=BYTES      limit dump to BYTES input bytes',0Ah
.rodata:000000000000B528                                         ; DATA XREF: usage+143↑o
.rodata:000000000000B528                 db '  -S BYTES, --strings[=BYTES]  output strings of at least BYTES g'
.rodata:000000000000B528                 db 'raphic chars;',0Ah
.rodata:000000000000B528                 db '                                3 is implied when BYTES is not sp'
.rodata:000000000000B528                 db 'ecified',0Ah
.rodata:000000000000B528                 db '  -t, --format=TYPE           select output format or formats',0Ah
.rodata:000000000000B528                 db '  -v, --output-duplicates     do not use * to mark line suppressi'
.rodata:000000000000B528                 db 'on',0Ah
.rodata:000000000000B528                 db '  -w[BYTES], --width[=BYTES]  output BYTES bytes per output line;'
.rodata:000000000000B528                 db 0Ah
.rodata:000000000000B528                 db '                                32 is implied when BYTES is not s'
.rodata:000000000000B528                 db 'pecified',0Ah
.rodata:000000000000B528                 db '      --traditional           accept arguments in third form abov'
.rodata:000000000000B528                 db 'e',0Ah,0
.rodata:000000000000B750 ; const char aHelpDisplayThi[]
.rodata:000000000000B750 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000B750                                         ; DATA XREF: usage+168↑o
.rodata:000000000000B77D                 align 20h
.rodata:000000000000B780 ; const char aVersionOutputV[]
.rodata:000000000000B780 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000B780                                         ; DATA XREF: usage+18D↑o
.rodata:000000000000B7B6                 align 8
.rodata:000000000000B7B8 ; const char aTraditionalFor[]
.rodata:000000000000B7B8 aTraditionalFor db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:000000000000B7B8                 db 0Ah
.rodata:000000000000B7B8                 db 'Traditional format specifications may be intermixed; they accumul'
.rodata:000000000000B7B8                 db 'ate:',0Ah
.rodata:000000000000B7B8                 db '  -a   same as -t a,  select named characters, ignoring high-orde'
.rodata:000000000000B7B8                 db 'r bit',0Ah
.rodata:000000000000B7B8                 db '  -b   same as -t o1, select octal bytes',0Ah
.rodata:000000000000B7B8                 db '  -c   same as -t c,  select printable characters or backslash es'
.rodata:000000000000B7B8                 db 'capes',0Ah
.rodata:000000000000B7B8                 db '  -d   same as -t u2, select unsigned decimal 2-byte units',0Ah,0
.rodata:000000000000B8F3                 align 8
.rodata:000000000000B8F8 ; const char aFSameAsTFfSele[]
.rodata:000000000000B8F8 aFSameAsTFfSele db '  -f   same as -t fF, select floats',0Ah
.rodata:000000000000B8F8                                         ; DATA XREF: usage+1D7↑o
.rodata:000000000000B8F8                 db '  -i   same as -t dI, select decimal ints',0Ah
.rodata:000000000000B8F8                 db '  -l   same as -t dL, select decimal longs',0Ah
.rodata:000000000000B8F8                 db '  -o   same as -t o2, select octal 2-byte units',0Ah
.rodata:000000000000B8F8                 db '  -s   same as -t d2, select decimal 2-byte units',0Ah
.rodata:000000000000B8F8                 db '  -x   same as -t x2, select hexadecimal 2-byte units',0Ah,0
.rodata:000000000000BA0A                 align 10h
.rodata:000000000000BA10 ; const char aTypeIsMadeUpOf[]
.rodata:000000000000BA10 aTypeIsMadeUpOf db 0Ah                  ; DATA XREF: usage+1FC↑o
.rodata:000000000000BA10                 db 0Ah
.rodata:000000000000BA10                 db 'TYPE is made up of one or more of these specifications:',0Ah
.rodata:000000000000BA10                 db '  a          named character, ignoring high-order bit',0Ah
.rodata:000000000000BA10                 db '  c          printable character or backslash escape',0Ah,0
.rodata:000000000000BAB6                 align 8
.rodata:000000000000BAB8 ; const char aDSizeSignedDec[]
.rodata:000000000000BAB8 aDSizeSignedDec db '  d[SIZE]    signed decimal, SIZE bytes per integer',0Ah
.rodata:000000000000BAB8                                         ; DATA XREF: usage+221↑o
.rodata:000000000000BAB8                 db '  f[SIZE]    floating point, SIZE bytes per float',0Ah
.rodata:000000000000BAB8                 db '  o[SIZE]    octal, SIZE bytes per integer',0Ah
.rodata:000000000000BAB8                 db '  u[SIZE]    unsigned decimal, SIZE bytes per integer',0Ah
.rodata:000000000000BAB8                 db '  x[SIZE]    hexadecimal, SIZE bytes per integer',0Ah,0
.rodata:000000000000BBB1                 align 8
.rodata:000000000000BBB8 ; const char aSizeIsANumberF[]
.rodata:000000000000BBB8 aSizeIsANumberF db 0Ah                  ; DATA XREF: usage+246↑o
.rodata:000000000000BBB8                 db 'SIZE is a number.  For TYPE in [doux], SIZE may also be C for',0Ah
.rodata:000000000000BBB8                 db 'sizeof(char), S for sizeof(short), I for sizeof(int) or L for',0Ah
.rodata:000000000000BBB8                 db 'sizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float)'
.rodata:000000000000BBB8                 db ', D',0Ah
.rodata:000000000000BBB8                 db 'for sizeof(double) or L for sizeof(long double).',0Ah,0
.rodata:000000000000BCAC                 align 10h
.rodata:000000000000BCB0 ; const char aAddingAZSuffix[]
.rodata:000000000000BCB0 aAddingAZSuffix db 0Ah                  ; DATA XREF: usage+26B↑o
.rodata:000000000000BCB0                 db 'Adding a z suffix to any type displays printable characters at th'
.rodata:000000000000BCB0                 db 'e end of',0Ah
.rodata:000000000000BCB0                 db 'each output line.',0Ah,0
.rodata:000000000000BD0E                 align 10h
.rodata:000000000000BD10 ; const char aBytesIsHexWith[]
.rodata:000000000000BD10 aBytesIsHexWith db 0Ah                  ; DATA XREF: usage+290↑o
.rodata:000000000000BD10                 db 0Ah
.rodata:000000000000BD10                 db 'BYTES is hex with 0x or 0X prefix, and may have a multiplier suff'
.rodata:000000000000BD10                 db 'ix:',0Ah
.rodata:000000000000BD10                 db '  b    512',0Ah
.rodata:000000000000BD10                 db '  KB   1000',0Ah
.rodata:000000000000BD10                 db '  K    1024',0Ah
.rodata:000000000000BD10                 db '  MB   1000*1000',0Ah
.rodata:000000000000BD10                 db '  M    1024*1024',0Ah
.rodata:000000000000BD10                 db 'and so on for G, T, P, E, Z, Y.',0Ah
.rodata:000000000000BD10                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah,0
.rodata:000000000000BDF8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000BDF8                                         ; DATA XREF: usage+387↑o
.rodata:000000000000BDF8                                         ; usage+3EB↑o ...
.rodata:000000000000BE20 ; const char aReportAnyTrans[]
.rodata:000000000000BE20 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000BE20                                         ; DATA XREF: usage+4DF↑o
.rodata:000000000000BE20                 db 'am/>',0Ah,0
.rodata:000000000000BE67                 align 8
.rodata:000000000000BE68 ; const char aOrAvailableLoc[]
.rodata:000000000000BE68 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000BE68                                         ; DATA XREF: usage:loc_5186↑o
.rodata:000000000000BE9B                 align 20h
.rodata:000000000000BEA0 ; const char aInvalidOutputA[]
.rodata:000000000000BEA0 aInvalidOutputA db 'invalid output address radix ',27h,'%c',27h,'; it must be one cha'
.rodata:000000000000BEA0                                         ; DATA XREF: main:loc_2CBC↑o
.rodata:000000000000BEA0                 db 'racter from [doxn]',0
.rodata:000000000000BEE8 ; const char aNoTypeMayBeSpe[]
.rodata:000000000000BEE8 aNoTypeMayBeSpe db 'no type may be specified when dumping strings',0
.rodata:000000000000BEE8                                         ; DATA XREF: main:loc_2D02↑o
.rodata:000000000000BF16                 align 8
.rodata:000000000000BF18 ; const char aCompatibilityM[]
.rodata:000000000000BF18 aCompatibilityM db 'compatibility mode supports at most one file',0
.rodata:000000000000BF18                                         ; DATA XREF: main+940↑o
.rodata:000000000000BF45                 align 8
.rodata:000000000000BF48 ; const char aSkipBytesReadB[]
.rodata:000000000000BF48 aSkipBytesReadB db 'skip-bytes + read-bytes is too large',0
.rodata:000000000000BF48                                         ; DATA XREF: main:loc_2C3C↑o
.rodata:000000000000BF6D                 align 10h
.rodata:000000000000BF70 ; const char aWarningInvalid[]
.rodata:000000000000BF70 aWarningInvalid db 'warning: invalid width %lu; using %d instead',0
.rodata:000000000000BF70                                         ; DATA XREF: main:loc_29C6↑o
.rodata:000000000000BF9D                 align 20h
.rodata:000000000000BFA0 ; const char assertion[]
.rodata:000000000000BFA0 assertion       db 'n_bytes_read == bytes_per_block',0
.rodata:000000000000BFA0                                         ; DATA XREF: main+1117↑o
.rodata:000000000000BFA0                                         ; main+1136↑o
.rodata:000000000000BFC0 jpt_3B1A        dd offset loc_3D10 - 0BFC0h
.rodata:000000000000BFC0                                         ; DATA XREF: decode_format_string+28↑o
.rodata:000000000000BFC0                                         ; decode_format_string+73↑r
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h ; jump table for switch statement
.rodata:000000000000BFC0                 dd offset loc_3C90 - 0BFC0h
.rodata:000000000000BFC0                 dd offset loc_3BF0 - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset loc_3B20 - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset loc_3BF0 - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset loc_3BF0 - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset def_3B1A - 0BFC0h
.rodata:000000000000BFC0                 dd offset loc_3BF0 - 0BFC0h
.rodata:000000000000C020 jpt_3EC8        dd offset def_3EC8 - 0C020h
.rodata:000000000000C020                                         ; DATA XREF: decode_format_string+417↑o
.rodata:000000000000C020                                         ; decode_format_string+421↑r
.rodata:000000000000C020                 dd offset loc_3F20 - 0C020h ; jump table for switch statement
.rodata:000000000000C020                 dd offset loc_3F00 - 0C020h
.rodata:000000000000C020                 dd offset loc_3EF0 - 0C020h
.rodata:000000000000C020                 dd offset loc_3EE0 - 0C020h
.rodata:000000000000C020                 dd offset loc_3ED0 - 0C020h
.rodata:000000000000C038 jpt_4352        dd offset loc_43B0 - 0C038h
.rodata:000000000000C038                                         ; DATA XREF: print_ascii+39↑o
.rodata:000000000000C038                                         ; print_ascii+7A↑r
.rodata:000000000000C038                 dd offset def_4352 - 0C038h ; jump table for switch statement
.rodata:000000000000C038                 dd offset def_4352 - 0C038h
.rodata:000000000000C038                 dd offset def_4352 - 0C038h
.rodata:000000000000C038                 dd offset def_4352 - 0C038h
.rodata:000000000000C038                 dd offset def_4352 - 0C038h
.rodata:000000000000C038                 dd offset def_4352 - 0C038h
.rodata:000000000000C038                 dd offset loc_4358 - 0C038h
.rodata:000000000000C038                 dd offset loc_4410 - 0C038h
.rodata:000000000000C038                 dd offset loc_4400 - 0C038h
.rodata:000000000000C038                 dd offset loc_43F0 - 0C038h
.rodata:000000000000C038                 dd offset loc_43E0 - 0C038h
.rodata:000000000000C038                 dd offset loc_43D0 - 0C038h
.rodata:000000000000C038                 dd offset loc_43C0 - 0C038h
.rodata:000000000000C070 jpt_1D15        dd offset loc_2098 - 0C070h, offset loc_27F8 - 0C070h
.rodata:000000000000C070                                         ; DATA XREF: main+DB↑o
.rodata:000000000000C070                                         ; main+19D↑r
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h ; jump table for switch statement
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset loc_2038 - 0C070h, offset loc_2020 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_2008 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_1FF0 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_1FD8 - 0C070h
.rodata:000000000000C070                 dd offset loc_1FC0 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_1FC0 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_1F70 - 0C070h
.rodata:000000000000C070                 dd offset loc_1F58 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset loc_1F08 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_1FD8 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset loc_1EF0 - 0C070h, offset loc_1ED8 - 0C070h
.rodata:000000000000C070                 dd offset loc_1EC0 - 0C070h, offset loc_1EA8 - 0C070h
.rodata:000000000000C070                 dd offset loc_1FF0 - 0C070h, offset loc_1E90 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_1E78 - 0C070h
.rodata:000000000000C070                 dd offset loc_1E60 - 0C070h, offset loc_1E28 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_1FC0 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset loc_2020 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset loc_1E10 - 0C070h, offset loc_1DF0 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_1DD8 - 0C070h
.rodata:000000000000C070                 dd offset loc_1D88 - 0C070h, offset loc_1E78 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset def_1D15 - 0C070h
.rodata:000000000000C070                 dd offset def_1D15 - 0C070h, offset loc_1D78 - 0C070h
.rodata:000000000000C070                 dd offset loc_1D20 - 0C070h
.rodata:000000000000C484 jpt_2ADB        dd offset loc_2B27 - 0C484h
.rodata:000000000000C484                                         ; DATA XREF: main+F50↑o
.rodata:000000000000C484                                         ; main+F5A↑r
.rodata:000000000000C484                 dd offset loc_2B19 - 0C484h ; jump table for switch statement
.rodata:000000000000C484                 dd offset loc_2B0B - 0C484h
.rodata:000000000000C484                 dd offset loc_2AFD - 0C484h
.rodata:000000000000C484                 dd offset loc_2AEF - 0C484h
.rodata:000000000000C484                 dd offset loc_2ADD - 0C484h
.rodata:000000000000C484                 dd offset loc_2B35 - 0C484h
.rodata:000000000000C4A0 ; const char _PRETTY_FUNCTION___7548[]
.rodata:000000000000C4A0 __PRETTY_FUNCTION___7548 db 'read_block',0
.rodata:000000000000C4A0                                         ; DATA XREF: read_block:loc_4D47↑o
.rodata:000000000000C4AB ; const char _PRETTY_FUNCTION___7577[]
.rodata:000000000000C4AB __PRETTY_FUNCTION___7577 db 'dump',0    ; DATA XREF: main:loc_2C79↑o
.rodata:000000000000C4AB                                         ; main:loc_2C98↑o
.rodata:000000000000C4B0 ; const char _PRETTY_FUNCTION___7407[]
.rodata:000000000000C4B0 __PRETTY_FUNCTION___7407 db 'decode_one_format',0
.rodata:000000000000C4B0                                         ; DATA XREF: decode_format_string:loc_425D↑o
.rodata:000000000000C4B0                                         ; decode_format_string:loc_427C↑o
.rodata:000000000000C4C2                 align 10h
.rodata:000000000000C4D0 ; const char _PRETTY_FUNCTION___7462[]
.rodata:000000000000C4D0 __PRETTY_FUNCTION___7462 db 'decode_format_string',0
.rodata:000000000000C4D0                                         ; DATA XREF: decode_format_string:loc_423E↑o
.rodata:000000000000C4D0                                         ; decode_format_string:loc_42A5↑o
.rodata:000000000000C4E5                 align 8
.rodata:000000000000C4E8 multipliers_7627 db 'bEGKkMmPTYZ0',0    ; DATA XREF: main+2BF↑o
.rodata:000000000000C4E8                                         ; main+3AD↑o ...
.rodata:000000000000C4F5                 align 8
.rodata:000000000000C4F8 endian_types    db    0                 ; DATA XREF: main+1C5↑o
.rodata:000000000000C4F8                                         ; main+1DE↑o
.rodata:000000000000C4F9                 db    0
.rodata:000000000000C4FA                 db    0
.rodata:000000000000C4FB                 db    0
.rodata:000000000000C4FC                 db    1
.rodata:000000000000C4FD                 db    0
.rodata:000000000000C4FE                 db    0
.rodata:000000000000C4FF                 db    0
.rodata:000000000000C500 ; const char short_options[]
.rodata:000000000000C500 short_options   db 'A:aBbcDdeFfHhIij:LlN:OoS:st:vw::Xx',0
.rodata:000000000000C500                                         ; DATA XREF: main+167↑o
.rodata:000000000000C523                 align 20h
.rodata:000000000000C540 charname        db 'nul',0              ; DATA XREF: print_named_ascii:loc_30A0↑o
.rodata:000000000000C544 aSoh            db 'soh',0
.rodata:000000000000C548 aStx            db 'stx',0
.rodata:000000000000C54C aEtx            db 'etx',0
.rodata:000000000000C550 aEot            db 'eot',0
.rodata:000000000000C554 aEnq            db 'enq',0
.rodata:000000000000C558 aAck            db 'ack',0
.rodata:000000000000C55C aBel            db 'bel',0
.rodata:000000000000C560 aBs             db 'bs',0
.rodata:000000000000C563                 align 4
.rodata:000000000000C564 aHt             db 'ht',0
.rodata:000000000000C567                 align 8
.rodata:000000000000C568 aNl             db 'nl',0
.rodata:000000000000C56B                 align 4
.rodata:000000000000C56C aVt             db 'vt',0
.rodata:000000000000C56F                 align 10h
.rodata:000000000000C570 aFf_0           db 'ff',0
.rodata:000000000000C573                 align 4
.rodata:000000000000C574 aCr             db 'cr',0
.rodata:000000000000C577                 align 8
.rodata:000000000000C578 aSo             db 'so',0
.rodata:000000000000C57B                 align 4
.rodata:000000000000C57C aSi             db 'si',0
.rodata:000000000000C57F                 align 20h
.rodata:000000000000C580 aDle            db 'dle',0
.rodata:000000000000C584 aDc1            db 'dc1',0
.rodata:000000000000C588 aDc2            db 'dc2',0
.rodata:000000000000C58C aDc3            db 'dc3',0
.rodata:000000000000C590 aDc4            db 'dc4',0
.rodata:000000000000C594 aNak            db 'nak',0
.rodata:000000000000C598 aSyn            db 'syn',0
.rodata:000000000000C59C aEtb            db 'etb',0
.rodata:000000000000C5A0 aCan            db 'can',0
.rodata:000000000000C5A4 aEm             db 'em',0
.rodata:000000000000C5A7                 align 8
.rodata:000000000000C5A8 aSub            db 'sub',0
.rodata:000000000000C5AC aEsc            db 'esc',0
.rodata:000000000000C5B0                 dq 736700007366h
.rodata:000000000000C5B8                 dq 737500007372h
.rodata:000000000000C5C0                 db  73h ; s
.rodata:000000000000C5C1                 db  70h ; p
.rodata:000000000000C5C2                 db    0
.rodata:000000000000C5C3                 db    0
.rodata:000000000000C5C4                 db    0
.rodata:000000000000C5C5                 db    0
.rodata:000000000000C5C6                 db    0
.rodata:000000000000C5C7                 db    0
.rodata:000000000000C5C8                 db    0
.rodata:000000000000C5C9                 db    0
.rodata:000000000000C5CA                 db    0
.rodata:000000000000C5CB                 db    0
.rodata:000000000000C5CC                 db    0
.rodata:000000000000C5CD                 db    0
.rodata:000000000000C5CE                 db    0
.rodata:000000000000C5CF                 db    0
.rodata:000000000000C5D0                 db    0
.rodata:000000000000C5D1                 db    0
.rodata:000000000000C5D2                 db    0
.rodata:000000000000C5D3                 db    0
.rodata:000000000000C5D4                 db    0
.rodata:000000000000C5D5                 db    0
.rodata:000000000000C5D6                 db    0
.rodata:000000000000C5D7                 db    0
.rodata:000000000000C5D8                 db    0
.rodata:000000000000C5D9                 db    0
.rodata:000000000000C5DA                 db    0
.rodata:000000000000C5DB                 db    0
.rodata:000000000000C5DC                 db    0
.rodata:000000000000C5DD                 db    0
.rodata:000000000000C5DE                 db    0
.rodata:000000000000C5DF                 db    0
.rodata:000000000000C5E0 width_bytes     db 0FFh                 ; DATA XREF: main+6A6↑o
.rodata:000000000000C5E0                                         ; main+9B6↑o ...
.rodata:000000000000C5E1                 db 0FFh
.rodata:000000000000C5E2                 db 0FFh
.rodata:000000000000C5E3                 db 0FFh
.rodata:000000000000C5E4                 db    1
.rodata:000000000000C5E5                 db    0
.rodata:000000000000C5E6                 db    0
.rodata:000000000000C5E7                 db    0
.rodata:000000000000C5E8                 db    2
.rodata:000000000000C5E9                 db    0
.rodata:000000000000C5EA                 db    0
.rodata:000000000000C5EB                 db    0
.rodata:000000000000C5EC                 db    4
.rodata:000000000000C5ED                 db    0
.rodata:000000000000C5EE                 db    0
.rodata:000000000000C5EF                 db    0
.rodata:000000000000C5F0                 db    8
.rodata:000000000000C5F1                 db    0
.rodata:000000000000C5F2                 db    0
.rodata:000000000000C5F3                 db    0
.rodata:000000000000C5F4                 db    8
.rodata:000000000000C5F5                 db    0
.rodata:000000000000C5F6                 db    0
.rodata:000000000000C5F7                 db    0
.rodata:000000000000C5F8                 db    4
.rodata:000000000000C5F9                 db    0
.rodata:000000000000C5FA                 db    0
.rodata:000000000000C5FB                 db    0
.rodata:000000000000C5FC                 db    8
.rodata:000000000000C5FD                 db    0
.rodata:000000000000C5FE                 db    0
.rodata:000000000000C5FF                 db    0
.rodata:000000000000C600                 db  10h
.rodata:000000000000C601                 db    0
.rodata:000000000000C602                 db    0
.rodata:000000000000C603                 db    0
.rodata:000000000000C604                 db    0
.rodata:000000000000C605                 db    0
.rodata:000000000000C606                 db    0
.rodata:000000000000C607                 db    0
.rodata:000000000000C608                 db    0
.rodata:000000000000C609                 db    0
.rodata:000000000000C60A                 db    0
.rodata:000000000000C60B                 db    0
.rodata:000000000000C60C                 db    0
.rodata:000000000000C60D                 db    0
.rodata:000000000000C60E                 db    0
.rodata:000000000000C60F                 db    0
.rodata:000000000000C610                 db    0
.rodata:000000000000C611                 db    0
.rodata:000000000000C612                 db    0
.rodata:000000000000C613                 db    0
.rodata:000000000000C614                 db    0
.rodata:000000000000C615                 db    0
.rodata:000000000000C616                 db    0
.rodata:000000000000C617                 db    0
.rodata:000000000000C618                 db    0
.rodata:000000000000C619                 db    0
.rodata:000000000000C61A                 db    0
.rodata:000000000000C61B                 db    0
.rodata:000000000000C61C                 db    0
.rodata:000000000000C61D                 db    0
.rodata:000000000000C61E                 db    0
.rodata:000000000000C61F                 db    0
.rodata:000000000000C620 bytes_to_hex_digits db    0             ; DATA XREF: decode_format_string+3D4↑o
.rodata:000000000000C621                 db    0
.rodata:000000000000C622                 db    0
.rodata:000000000000C623                 db    0
.rodata:000000000000C624                 db    2
.rodata:000000000000C625                 db    0
.rodata:000000000000C626                 db    0
.rodata:000000000000C627                 db    0
.rodata:000000000000C628                 db    4
.rodata:000000000000C629                 db    0
.rodata:000000000000C62A                 db    0
.rodata:000000000000C62B                 db    0
.rodata:000000000000C62C                 db    6
.rodata:000000000000C62D                 db    0
.rodata:000000000000C62E                 db    0
.rodata:000000000000C62F                 db    0
.rodata:000000000000C630                 db    8
.rodata:000000000000C631                 db    0
.rodata:000000000000C632                 db    0
.rodata:000000000000C633                 db    0
.rodata:000000000000C634                 db  0Ah
.rodata:000000000000C635                 db    0
.rodata:000000000000C636                 db    0
.rodata:000000000000C637                 db    0
.rodata:000000000000C638                 db  0Ch
.rodata:000000000000C639                 db    0
.rodata:000000000000C63A                 db    0
.rodata:000000000000C63B                 db    0
.rodata:000000000000C63C                 db  0Eh
.rodata:000000000000C63D                 db    0
.rodata:000000000000C63E                 db    0
.rodata:000000000000C63F                 db    0
.rodata:000000000000C640                 db  10h
.rodata:000000000000C641                 db    0
.rodata:000000000000C642                 db    0
.rodata:000000000000C643                 db    0
.rodata:000000000000C644                 db  12h
.rodata:000000000000C645                 db    0
.rodata:000000000000C646                 db    0
.rodata:000000000000C647                 db    0
.rodata:000000000000C648                 db  14h
.rodata:000000000000C649                 db    0
.rodata:000000000000C64A                 db    0
.rodata:000000000000C64B                 db    0
.rodata:000000000000C64C                 db  16h
.rodata:000000000000C64D                 db    0
.rodata:000000000000C64E                 db    0
.rodata:000000000000C64F                 db    0
.rodata:000000000000C650                 db  18h
.rodata:000000000000C651                 db    0
.rodata:000000000000C652                 db    0
.rodata:000000000000C653                 db    0
.rodata:000000000000C654                 db  1Ah
.rodata:000000000000C655                 db    0
.rodata:000000000000C656                 db    0
.rodata:000000000000C657                 db    0
.rodata:000000000000C658                 db  1Ch
.rodata:000000000000C659                 db    0
.rodata:000000000000C65A                 db    0
.rodata:000000000000C65B                 db    0
.rodata:000000000000C65C                 db  1Eh
.rodata:000000000000C65D                 db    0
.rodata:000000000000C65E                 db    0
.rodata:000000000000C65F                 db    0
.rodata:000000000000C660                 db  20h
.rodata:000000000000C661                 db    0
.rodata:000000000000C662                 db    0
.rodata:000000000000C663                 db    0
.rodata:000000000000C664                 db    0
.rodata:000000000000C665                 db    0
.rodata:000000000000C666                 db    0
.rodata:000000000000C667                 db    0
.rodata:000000000000C668                 db    0
.rodata:000000000000C669                 db    0
.rodata:000000000000C66A                 db    0
.rodata:000000000000C66B                 db    0
.rodata:000000000000C66C                 db    0
.rodata:000000000000C66D                 db    0
.rodata:000000000000C66E                 db    0
.rodata:000000000000C66F                 db    0
.rodata:000000000000C670                 db    0
.rodata:000000000000C671                 db    0
.rodata:000000000000C672                 db    0
.rodata:000000000000C673                 db    0
.rodata:000000000000C674                 db    0
.rodata:000000000000C675                 db    0
.rodata:000000000000C676                 db    0
.rodata:000000000000C677                 db    0
.rodata:000000000000C678                 db    0
.rodata:000000000000C679                 db    0
.rodata:000000000000C67A                 db    0
.rodata:000000000000C67B                 db    0
.rodata:000000000000C67C                 db    0
.rodata:000000000000C67D                 db    0
.rodata:000000000000C67E                 db    0
.rodata:000000000000C67F                 db    0
.rodata:000000000000C680 bytes_to_unsigned_dec_digits db    0    ; DATA XREF: decode_format_string:loc_4140↑o
.rodata:000000000000C681                 db    0
.rodata:000000000000C682                 db    0
.rodata:000000000000C683                 db    0
.rodata:000000000000C684                 db    3
.rodata:000000000000C685                 db    0
.rodata:000000000000C686                 db    0
.rodata:000000000000C687                 db    0
.rodata:000000000000C688                 db    5
.rodata:000000000000C689                 db    0
.rodata:000000000000C68A                 db    0
.rodata:000000000000C68B                 db    0
.rodata:000000000000C68C                 db    8
.rodata:000000000000C68D                 db    0
.rodata:000000000000C68E                 db    0
.rodata:000000000000C68F                 db    0
.rodata:000000000000C690                 db  0Ah
.rodata:000000000000C691                 db    0
.rodata:000000000000C692                 db    0
.rodata:000000000000C693                 db    0
.rodata:000000000000C694                 db  0Dh
.rodata:000000000000C695                 db    0
.rodata:000000000000C696                 db    0
.rodata:000000000000C697                 db    0
.rodata:000000000000C698                 db  0Fh
.rodata:000000000000C699                 db    0
.rodata:000000000000C69A                 db    0
.rodata:000000000000C69B                 db    0
.rodata:000000000000C69C                 db  11h
.rodata:000000000000C69D                 db    0
.rodata:000000000000C69E                 db    0
.rodata:000000000000C69F                 db    0
.rodata:000000000000C6A0                 db  14h
.rodata:000000000000C6A1                 db    0
.rodata:000000000000C6A2                 db    0
.rodata:000000000000C6A3                 db    0
.rodata:000000000000C6A4                 db  16h
.rodata:000000000000C6A5                 db    0
.rodata:000000000000C6A6                 db    0
.rodata:000000000000C6A7                 db    0
.rodata:000000000000C6A8                 db  19h
.rodata:000000000000C6A9                 db    0
.rodata:000000000000C6AA                 db    0
.rodata:000000000000C6AB                 db    0
.rodata:000000000000C6AC                 db  1Bh
.rodata:000000000000C6AD                 db    0
.rodata:000000000000C6AE                 db    0
.rodata:000000000000C6AF                 db    0
.rodata:000000000000C6B0                 db  1Dh
.rodata:000000000000C6B1                 db    0
.rodata:000000000000C6B2                 db    0
.rodata:000000000000C6B3                 db    0
.rodata:000000000000C6B4                 db  20h
.rodata:000000000000C6B5                 db    0
.rodata:000000000000C6B6                 db    0
.rodata:000000000000C6B7                 db    0
.rodata:000000000000C6B8                 db  22h ; "
.rodata:000000000000C6B9                 db    0
.rodata:000000000000C6BA                 db    0
.rodata:000000000000C6BB                 db    0
.rodata:000000000000C6BC                 db  25h ; %
.rodata:000000000000C6BD                 db    0
.rodata:000000000000C6BE                 db    0
.rodata:000000000000C6BF                 db    0
.rodata:000000000000C6C0                 db  27h ; '
.rodata:000000000000C6C1                 db    0
.rodata:000000000000C6C2                 db    0
.rodata:000000000000C6C3                 db    0
.rodata:000000000000C6C4                 db    0
.rodata:000000000000C6C5                 db    0
.rodata:000000000000C6C6                 db    0
.rodata:000000000000C6C7                 db    0
.rodata:000000000000C6C8                 db    0
.rodata:000000000000C6C9                 db    0
.rodata:000000000000C6CA                 db    0
.rodata:000000000000C6CB                 db    0
.rodata:000000000000C6CC                 db    0
.rodata:000000000000C6CD                 db    0
.rodata:000000000000C6CE                 db    0
.rodata:000000000000C6CF                 db    0
.rodata:000000000000C6D0                 db    0
.rodata:000000000000C6D1                 db    0
.rodata:000000000000C6D2                 db    0
.rodata:000000000000C6D3                 db    0
.rodata:000000000000C6D4                 db    0
.rodata:000000000000C6D5                 db    0
.rodata:000000000000C6D6                 db    0
.rodata:000000000000C6D7                 db    0
.rodata:000000000000C6D8                 db    0
.rodata:000000000000C6D9                 db    0
.rodata:000000000000C6DA                 db    0
.rodata:000000000000C6DB                 db    0
.rodata:000000000000C6DC                 db    0
.rodata:000000000000C6DD                 db    0
.rodata:000000000000C6DE                 db    0
.rodata:000000000000C6DF                 db    0
.rodata:000000000000C6E0 bytes_to_signed_dec_digits db    1      ; DATA XREF: decode_format_string+64A↑o
.rodata:000000000000C6E1                 db    0
.rodata:000000000000C6E2                 db    0
.rodata:000000000000C6E3                 db    0
.rodata:000000000000C6E4                 db    4
.rodata:000000000000C6E5                 db    0
.rodata:000000000000C6E6                 db    0
.rodata:000000000000C6E7                 db    0
.rodata:000000000000C6E8                 db    6
.rodata:000000000000C6E9                 db    0
.rodata:000000000000C6EA                 db    0
.rodata:000000000000C6EB                 db    0
.rodata:000000000000C6EC                 db    8
.rodata:000000000000C6ED                 db    0
.rodata:000000000000C6EE                 db    0
.rodata:000000000000C6EF                 db    0
.rodata:000000000000C6F0                 db  0Bh
.rodata:000000000000C6F1                 db    0
.rodata:000000000000C6F2                 db    0
.rodata:000000000000C6F3                 db    0
.rodata:000000000000C6F4                 db  0Dh
.rodata:000000000000C6F5                 db    0
.rodata:000000000000C6F6                 db    0
.rodata:000000000000C6F7                 db    0
.rodata:000000000000C6F8                 db  10h
.rodata:000000000000C6F9                 db    0
.rodata:000000000000C6FA                 db    0
.rodata:000000000000C6FB                 db    0
.rodata:000000000000C6FC                 db  12h
.rodata:000000000000C6FD                 db    0
.rodata:000000000000C6FE                 db    0
.rodata:000000000000C6FF                 db    0
.rodata:000000000000C700                 db  14h
.rodata:000000000000C701                 db    0
.rodata:000000000000C702                 db    0
.rodata:000000000000C703                 db    0
.rodata:000000000000C704                 db  17h
.rodata:000000000000C705                 db    0
.rodata:000000000000C706                 db    0
.rodata:000000000000C707                 db    0
.rodata:000000000000C708                 db  19h
.rodata:000000000000C709                 db    0
.rodata:000000000000C70A                 db    0
.rodata:000000000000C70B                 db    0
.rodata:000000000000C70C                 db  1Ch
.rodata:000000000000C70D                 db    0
.rodata:000000000000C70E                 db    0
.rodata:000000000000C70F                 db    0
.rodata:000000000000C710                 db  1Eh
.rodata:000000000000C711                 db    0
.rodata:000000000000C712                 db    0
.rodata:000000000000C713                 db    0
.rodata:000000000000C714                 db  21h ; !
.rodata:000000000000C715                 db    0
.rodata:000000000000C716                 db    0
.rodata:000000000000C717                 db    0
.rodata:000000000000C718                 db  23h ; #
.rodata:000000000000C719                 db    0
.rodata:000000000000C71A                 db    0
.rodata:000000000000C71B                 db    0
.rodata:000000000000C71C                 db  25h ; %
.rodata:000000000000C71D                 db    0
.rodata:000000000000C71E                 db    0
.rodata:000000000000C71F                 db    0
.rodata:000000000000C720                 db  28h ; (
.rodata:000000000000C721                 db    0
.rodata:000000000000C722                 db    0
.rodata:000000000000C723                 db    0
.rodata:000000000000C724                 db    0
.rodata:000000000000C725                 db    0
.rodata:000000000000C726                 db    0
.rodata:000000000000C727                 db    0
.rodata:000000000000C728                 db    0
.rodata:000000000000C729                 db    0
.rodata:000000000000C72A                 db    0
.rodata:000000000000C72B                 db    0
.rodata:000000000000C72C                 db    0
.rodata:000000000000C72D                 db    0
.rodata:000000000000C72E                 db    0
.rodata:000000000000C72F                 db    0
.rodata:000000000000C730                 db    0
.rodata:000000000000C731                 db    0
.rodata:000000000000C732                 db    0
.rodata:000000000000C733                 db    0
.rodata:000000000000C734                 db    0
.rodata:000000000000C735                 db    0
.rodata:000000000000C736                 db    0
.rodata:000000000000C737                 db    0
.rodata:000000000000C738                 db    0
.rodata:000000000000C739                 db    0
.rodata:000000000000C73A                 db    0
.rodata:000000000000C73B                 db    0
.rodata:000000000000C73C                 db    0
.rodata:000000000000C73D                 db    0
.rodata:000000000000C73E                 db    0
.rodata:000000000000C73F                 db    0
.rodata:000000000000C740 bytes_to_oct_digits db    0             ; DATA XREF: decode_format_string+1C6↑o
.rodata:000000000000C741                 db    0
.rodata:000000000000C742                 db    0
.rodata:000000000000C743                 db    0
.rodata:000000000000C744                 db    3
.rodata:000000000000C745                 db    0
.rodata:000000000000C746                 db    0
.rodata:000000000000C747                 db    0
.rodata:000000000000C748                 db    6
.rodata:000000000000C749                 db    0
.rodata:000000000000C74A                 db    0
.rodata:000000000000C74B                 db    0
.rodata:000000000000C74C                 db    8
.rodata:000000000000C74D                 db    0
.rodata:000000000000C74E                 db    0
.rodata:000000000000C74F                 db    0
.rodata:000000000000C750                 db  0Bh
.rodata:000000000000C751                 db    0
.rodata:000000000000C752                 db    0
.rodata:000000000000C753                 db    0
.rodata:000000000000C754                 db  0Eh
.rodata:000000000000C755                 db    0
.rodata:000000000000C756                 db    0
.rodata:000000000000C757                 db    0
.rodata:000000000000C758                 db  10h
.rodata:000000000000C759                 db    0
.rodata:000000000000C75A                 db    0
.rodata:000000000000C75B                 db    0
.rodata:000000000000C75C                 db  13h
.rodata:000000000000C75D                 db    0
.rodata:000000000000C75E                 db    0
.rodata:000000000000C75F                 db    0
.rodata:000000000000C760                 db  16h
.rodata:000000000000C761                 db    0
.rodata:000000000000C762                 db    0
.rodata:000000000000C763                 db    0
.rodata:000000000000C764                 db  19h
.rodata:000000000000C765                 db    0
.rodata:000000000000C766                 db    0
.rodata:000000000000C767                 db    0
.rodata:000000000000C768                 db  1Bh
.rodata:000000000000C769                 db    0
.rodata:000000000000C76A                 db    0
.rodata:000000000000C76B                 db    0
.rodata:000000000000C76C                 db  1Eh
.rodata:000000000000C76D                 db    0
.rodata:000000000000C76E                 db    0
.rodata:000000000000C76F                 db    0
.rodata:000000000000C770                 db  20h
.rodata:000000000000C771                 db    0
.rodata:000000000000C772                 db    0
.rodata:000000000000C773                 db    0
.rodata:000000000000C774                 db  23h ; #
.rodata:000000000000C775                 db    0
.rodata:000000000000C776                 db    0
.rodata:000000000000C777                 db    0
.rodata:000000000000C778                 db  26h ; &
.rodata:000000000000C779                 db    0
.rodata:000000000000C77A                 db    0
.rodata:000000000000C77B                 db    0
.rodata:000000000000C77C                 db  29h ; )
.rodata:000000000000C77D                 db    0
.rodata:000000000000C77E                 db    0
.rodata:000000000000C77F                 db    0
.rodata:000000000000C780                 db  2Bh ; +
.rodata:000000000000C781                 db    0
.rodata:000000000000C782                 db    0
.rodata:000000000000C783                 db    0
.rodata:000000000000C784 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000C789 ; const char aInvalidArgumen[]
.rodata:000000000000C789 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000000C789                                         ; DATA XREF: argmatch_invalid:loc_5410↑o
.rodata:000000000000C7A4 ; const char aAmbiguousArgum[]
.rodata:000000000000C7A4 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000000C7A4                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000000C7C1 ; const char aValidArguments[]
.rodata:000000000000C7C1 aValidArguments db 'Valid arguments are:',0
.rodata:000000000000C7C1                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000000C7D6 aS_1            db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000000C7D6                 db '  - %s',0
.rodata:000000000000C7DE aS_2            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000000C7DE                                         ; main+953↑o ...
.rodata:000000000000C7E3 ; const char format[]
.rodata:000000000000C7E3 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000C7EA                 align 10h
.rodata:000000000000C7F0 xmmword_C7F0    xmmword 8000000000000000h
.rodata:000000000000C7F0                                         ; DATA XREF: dtoastr+154↑r
.rodata:000000000000C800 qword_C800      dq 10000000000000h      ; DATA XREF: dtoastr+77↑r
.rodata:000000000000C808                 align 10h
.rodata:000000000000C810 xmmword_C810    xmmword 80000000h       ; DATA XREF: ftoastr+15B↑r
.rodata:000000000000C820 dword_C820      dd 800000h              ; DATA XREF: ftoastr+86↑r
.rodata:000000000000C824                 align 10h
.rodata:000000000000C830 tbyte_C830      dt 3.3621031431120935063e-4932
.rodata:000000000000C830                                         ; DATA XREF: ldtoastr+81↑r
.rodata:000000000000C83A                 align 20h
.rodata:000000000000C840 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000C840                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000C878 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000C880 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000C884 unk_C884        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000C885                 db  80h
.rodata:000000000000C886                 db  98h
.rodata:000000000000C887                 db    0
.rodata:000000000000C888 unk_C888        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000C889                 db  80h
.rodata:000000000000C88A                 db  99h
.rodata:000000000000C88B                 db    0
.rodata:000000000000C88C unk_C88C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000C88D                 db    7
.rodata:000000000000C88E                 db  65h ; e
.rodata:000000000000C88F                 db    0
.rodata:000000000000C890 unk_C890        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000C891                 db 0AFh
.rodata:000000000000C892                 db    0
.rodata:000000000000C893 unk_C893        db  22h ; "             ; DATA XREF: gettext_quote:loc_5BD0↑o
.rodata:000000000000C893                                         ; quotearg_buffer_restyled:loc_698B↑o ...
.rodata:000000000000C894                 db    0
.rodata:000000000000C895 ; const char asc_C895[2]
.rodata:000000000000C895 asc_C895        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000C895                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000C897 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000C89F aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020FBA8↓o
.rodata:000000000000C8A5 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020FBB0↓o
.rodata:000000000000C8B2 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020FBB8↓o
.rodata:000000000000C8B2                                         ; .data.rel.ro:000000000020FBD8↓o
.rodata:000000000000C8BF aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000C8BF                                         ; DATA XREF: .data.rel.ro:000000000020FBC0↓o
.rodata:000000000000C8D3 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020FBD0↓o
.rodata:000000000000C8DB aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020FBE8↓o
.rodata:000000000000C8E3                 align 20h
.rodata:000000000000C900 jpt_5D31        dd offset loc_6ADA - 0C900h
.rodata:000000000000C900                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000C900                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000C900                 dd offset loc_5D33 - 0C900h ; jump table for switch statement
.rodata:000000000000C900                 dd offset loc_6D08 - 0C900h
.rodata:000000000000C900                 dd offset loc_6B14 - 0C900h
.rodata:000000000000C900                 dd offset loc_6904 - 0C900h
.rodata:000000000000C900                 dd offset loc_6960 - 0C900h
.rodata:000000000000C900                 dd offset loc_69B5 - 0C900h
.rodata:000000000000C900                 dd offset loc_69FA - 0C900h
.rodata:000000000000C900                 dd offset loc_6A34 - 0C900h
.rodata:000000000000C900                 dd offset loc_6A34 - 0C900h
.rodata:000000000000C900                 dd offset loc_6A34 - 0C900h
.rodata:000000000000C92C jpt_5E8E        dd offset loc_60B0 - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000C92C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch ; jump table for switch statement
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset loc_60F0 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_5FF8 - 0C92Ch, offset loc_5FB8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6180 - 0C92Ch, offset loc_6170 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6160 - 0C92Ch, offset loc_6150 - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset def_5E8E - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6140 - 0C92Ch, offset loc_6130 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_6100 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_5F93 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_6130 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_6130 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_6130 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_5F63 - 0C92Ch
.rodata:000000000000C92C                 dd offset def_5E8E - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_6130 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6008 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_60D8 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_60D8 - 0C92Ch, offset loc_5E93 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6130 - 0C92Ch, offset loc_5E93 - 0C92Ch
.rodata:000000000000C92C                 dd offset loc_6100 - 0C92Ch
.rodata:000000000000CB28 jpt_621A        dd offset loc_6280 - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000CB28                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h ; jump table for switch statement
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset loc_6270 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_63C0 - 0CB28h, offset loc_63A8 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6258 - 0CB28h, offset loc_6398 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6240 - 0CB28h, offset loc_6380 - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset def_621A - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6368 - 0CB28h, offset loc_6350 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_6338 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_5F90 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_6350 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6350 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_6350 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_5F60 - 0CB28h
.rodata:000000000000CB28                 dd offset def_621A - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6350 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6220 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_6320 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6320 - 0CB28h, offset loc_5E90 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6350 - 0CB28h, offset loc_5E90 - 0CB28h
.rodata:000000000000CB28                 dd offset loc_6338 - 0CB28h
.rodata:000000000000CD24                 align 20h
.rodata:000000000000CD40                 public quoting_style_vals
.rodata:000000000000CD40 quoting_style_vals db    0
.rodata:000000000000CD41                 db    0
.rodata:000000000000CD42                 db    0
.rodata:000000000000CD43                 db    0
.rodata:000000000000CD44                 db    1
.rodata:000000000000CD45                 db    0
.rodata:000000000000CD46                 db    0
.rodata:000000000000CD47                 db    0
.rodata:000000000000CD48                 db    2
.rodata:000000000000CD49                 db    0
.rodata:000000000000CD4A                 db    0
.rodata:000000000000CD4B                 db    0
.rodata:000000000000CD4C                 db    3
.rodata:000000000000CD4D                 db    0
.rodata:000000000000CD4E                 db    0
.rodata:000000000000CD4F                 db    0
.rodata:000000000000CD50                 db    4
.rodata:000000000000CD51                 db    0
.rodata:000000000000CD52                 db    0
.rodata:000000000000CD53                 db    0
.rodata:000000000000CD54                 db    5
.rodata:000000000000CD55                 db    0
.rodata:000000000000CD56                 db    0
.rodata:000000000000CD57                 db    0
.rodata:000000000000CD58                 db    6
.rodata:000000000000CD59                 db    0
.rodata:000000000000CD5A                 db    0
.rodata:000000000000CD5B                 db    0
.rodata:000000000000CD5C                 db    7
.rodata:000000000000CD5D                 db    0
.rodata:000000000000CD5E                 db    0
.rodata:000000000000CD5F                 db    0
.rodata:000000000000CD60                 db    8
.rodata:000000000000CD61                 db    0
.rodata:000000000000CD62                 db    0
.rodata:000000000000CD63                 db    0
.rodata:000000000000CD64                 db    9
.rodata:000000000000CD65                 db    0
.rodata:000000000000CD66                 db    0
.rodata:000000000000CD67                 db    0
.rodata:000000000000CD68 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000CD74 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000CD7B ; const char aC_1[]
.rodata:000000000000CD7B aC_1            db '(C)',0              ; DATA XREF: version_etc_arn:loc_787C↑o
.rodata:000000000000CD7F ; const char aWrittenByS[]
.rodata:000000000000CD7F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000CD7F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000CD8F ; const char aWrittenBySAndS[]
.rodata:000000000000CD8F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000CD8F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000CDA6 ; const char aWrittenBySSAnd[]
.rodata:000000000000CDA6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000CDA6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000CDC2 ; const char aReportBugsToS[]
.rodata:000000000000CDC2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000CDC2                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000CDD7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000CDD7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000CDED ; const char aSHomePageS[]
.rodata:000000000000CDED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000CDED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000CE01                 align 8
.rodata:000000000000CE08 ; const char aLicenseGplv3Gn[]
.rodata:000000000000CE08 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000CE08                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000CE08                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000CE08                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000CE08                 db '.',0Ah
.rodata:000000000000CE08                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000CE08                 db 0Ah,0
.rodata:000000000000CED4                 align 8
.rodata:000000000000CED8 ; const char aWrittenBySSSAn[]
.rodata:000000000000CED8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000CED8                                         ; DATA XREF: version_etc_arn:loc_7AD0↑o
.rodata:000000000000CED8                 db 'and %s.',0Ah,0
.rodata:000000000000CEF8 ; const char aWrittenBySSSSA[]
.rodata:000000000000CEF8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000CEF8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000CEF8                 db '%s, and %s.',0Ah,0
.rodata:000000000000CF1C                 align 20h
.rodata:000000000000CF20 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000CF20 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000CF20                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000CF20                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000CF48 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000CF48 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000CF48                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000CF48                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000CF74                 align 8
.rodata:000000000000CF78 ; const char aWrittenBySSSSS[]
.rodata:000000000000CF78 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000CF78                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000CF78                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000CF78                 db 'and %s.',0Ah,0
.rodata:000000000000CFA8 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000CFA8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000CFA8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000CFA8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000CFA8                 db '%s, and %s.',0Ah,0
.rodata:000000000000CFDC                 align 20h
.rodata:000000000000CFE0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000CFE0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000CFE0                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000CFE0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000D01C                 align 20h
.rodata:000000000000D020 ; const char aGeneralHelpUsi[]
.rodata:000000000000D020 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000D020                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000D020                 db 0
.rodata:000000000000D061                 align 4
.rodata:000000000000D064 jpt_78E4        dd offset loc_7966 - 0D064h
.rodata:000000000000D064                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000D064                                         ; version_etc_arn+9D↑r
.rodata:000000000000D064                 dd offset loc_79F8 - 0D064h ; jump table for switch statement
.rodata:000000000000D064                 dd offset loc_7A38 - 0D064h
.rodata:000000000000D064                 dd offset loc_7A80 - 0D064h
.rodata:000000000000D064                 dd offset loc_7AD0 - 0D064h
.rodata:000000000000D064                 dd offset loc_7B28 - 0D064h
.rodata:000000000000D064                 dd offset loc_7B58 - 0D064h
.rodata:000000000000D064                 dd offset loc_7BC0 - 0D064h
.rodata:000000000000D064                 dd offset loc_78F0 - 0D064h
.rodata:000000000000D064                 dd offset loc_79A0 - 0D064h
.rodata:000000000000D08C                 align 20h
.rodata:000000000000D0A0                 public version_etc_copyright
.rodata:000000000000D0A0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000D0A0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000D0CF ; const char aMemoryExhauste[]
.rodata:000000000000D0CF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000D0CF                                         ; decode_format_string+66E↑o
.rodata:000000000000D0E0 ; const char aCannotPerformF[]
.rodata:000000000000D0E0 aCannotPerformF db 'cannot perform formatted output',0
.rodata:000000000000D0E0                                         ; DATA XREF: xvprintf+30↑o
.rodata:000000000000D0E0                                         ; xvfprintf+2C↑o
.rodata:000000000000D100 aInvalidSSArgum db 'invalid %s%s argument ',27h,'%s',27h,0
.rodata:000000000000D100                                         ; DATA XREF: xstrtol_fatal+87↑o
.rodata:000000000000D11B ; const char aSSArgumentSToo[]
.rodata:000000000000D11B aSSArgumentSToo db '%s%s argument ',27h,'%s',27h,' too large',0
.rodata:000000000000D11B                                         ; DATA XREF: xstrtol_fatal+33↑o
.rodata:000000000000D138 asc_D138        db '--',0               ; DATA XREF: xstrtol_fatal+48↑o
.rodata:000000000000D138                                         ; xstrtol_fatal:loc_83C2↑o ...
.rodata:000000000000D13B                 align 20h
.rodata:000000000000D140 aInvalidSuffixI db 'invalid suffix in %s%s argument ',27h,'%s',27h,0
.rodata:000000000000D140                                         ; DATA XREF: xstrtol_fatal:loc_83AB↑o
.rodata:000000000000D165                 align 8
.rodata:000000000000D168 ; const char aCoreutils831Li[]
.rodata:000000000000D168 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000D168                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:000000000000D188 ; const char a0StrtolBaseStr[]
.rodata:000000000000D188 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000D188                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:000000000000D1AE                 align 10h
.rodata:000000000000D1B0 jpt_85B6        dd offset loc_8706 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000D1B0                                         ; xstrtoumax+1CF↑r
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset loc_86E3 - 0D1B0h ; jump table for switch statement
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset loc_871C - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset loc_869F - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset loc_85B8 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset loc_86C0 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset loc_867F - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset loc_865A - 0D1B0h
.rodata:000000000000D1B0                 dd offset loc_8634 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset loc_861D - 0D1B0h, offset loc_85E0 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset loc_871C - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset loc_869F - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset loc_85B8 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset loc_867F - 0D1B0h, offset def_85B6 - 0D1B0h
.rodata:000000000000D1B0                 dd offset def_85B6 - 0D1B0h, offset loc_8607 - 0D1B0h
.rodata:000000000000D288 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000D288 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:000000000000D288                                         ; DATA XREF: xstrtoumax:loc_8765↑o
.rodata:000000000000D293 aC_0            db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000D295 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_8B90↑o
.rodata:000000000000D29B aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000D29B                                         ; locale_charset:loc_8BE0↑o
.rodata:000000000000D2A1                 align 4
.rodata:000000000000D2A4 jpt_915B        dd offset def_915B - 0D2A4h
.rodata:000000000000D2A4                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:000000000000D2A4                                         ; vasnprintf+554↑r
.rodata:000000000000D2A4                 dd offset loc_95C0 - 0D2A4h ; jump table for switch statement
.rodata:000000000000D2A4                 dd offset loc_9590 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9508 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_94C8 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9298 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9298 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9160 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9160 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9160 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9160 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9448 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_93C0 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9298 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9298 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9160 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9160 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9160 - 0D2A4h
.rodata:000000000000D2EC jpt_9700        dd offset loc_9970 - 0D2ECh
.rodata:000000000000D2EC                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:000000000000D2EC                                         ; vasnprintf+AF9↑r
.rodata:000000000000D2EC                 dd offset loc_9990 - 0D2ECh ; jump table for switch statement
.rodata:000000000000D2EC                 dd offset loc_9980 - 0D2ECh
.rodata:000000000000D2EC                 dd offset loc_9840 - 0D2ECh
.rodata:000000000000D2EC                 dd offset loc_9840 - 0D2ECh
.rodata:000000000000D300 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:000000000000D307                 align 10h
.rodata:000000000000D310 jpt_9D56        dd offset def_9D56 - 0D310h
.rodata:000000000000D310                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:000000000000D310                                         ; printf_fetchargs+2F↑r
.rodata:000000000000D310                 dd offset loc_9DDC - 0D310h ; jump table for switch statement
.rodata:000000000000D310                 dd offset loc_9DDC - 0D310h
.rodata:000000000000D310                 dd offset loc_9DFE - 0D310h
.rodata:000000000000D310                 dd offset loc_9DFE - 0D310h
.rodata:000000000000D310                 dd offset loc_9DBA - 0D310h
.rodata:000000000000D310                 dd offset loc_9DBA - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D310                 dd offset loc_9E52 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D60 - 0D310h
.rodata:000000000000D310                 dd offset loc_9DBA - 0D310h
.rodata:000000000000D310                 dd offset loc_9DBA - 0D310h
.rodata:000000000000D310                 dd offset loc_9E24 - 0D310h
.rodata:000000000000D310                 dd offset loc_9E80 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D310                 dd offset loc_9D96 - 0D310h
.rodata:000000000000D36C                 align 10h
.rodata:000000000000D370 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:000000000000D371                 db    0
.rodata:000000000000D372                 db    0
.rodata:000000000000D373                 db    0
.rodata:000000000000D374                 db  4Eh ; N
.rodata:000000000000D375                 db    0
.rodata:000000000000D376                 db    0
.rodata:000000000000D377                 db    0
.rodata:000000000000D378                 db  55h ; U
.rodata:000000000000D379                 db    0
.rodata:000000000000D37A                 db    0
.rodata:000000000000D37B                 db    0
.rodata:000000000000D37C                 db  4Ch ; L
.rodata:000000000000D37D                 db    0
.rodata:000000000000D37E                 db    0
.rodata:000000000000D37F                 db    0
.rodata:000000000000D380                 db  4Ch ; L
.rodata:000000000000D381                 db    0
.rodata:000000000000D382                 db    0
.rodata:000000000000D383                 db    0
.rodata:000000000000D384                 db  29h ; )
.rodata:000000000000D385                 db    0
.rodata:000000000000D386                 db    0
.rodata:000000000000D387                 db    0
.rodata:000000000000D388                 db    0
.rodata:000000000000D389                 db    0
.rodata:000000000000D38A                 db    0
.rodata:000000000000D38B                 db    0
.rodata:000000000000D38C jpt_A165        dd offset loc_A1DB - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                                         ; DATA XREF: printf_parse+234↑o
.rodata:000000000000D38C                                         ; printf_parse+23E↑r
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch ; jump table for switch statement
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A6DB - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A6FC - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A6DB - 0D38Ch, offset loc_A6DB - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A6DB - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A167 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset loc_A70C - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A6DB - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A668 - 0D38Ch, offset loc_A67B - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A6DB - 0D38Ch, offset loc_A6DB - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A6DB - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A67B - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset loc_A61C - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A70C - 0D38Ch, offset loc_A760 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A6C8 - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset loc_A70C - 0D38Ch, offset def_A165 - 0D38Ch
.rodata:000000000000D38C                 dd offset def_A165 - 0D38Ch, offset loc_A70C - 0D38Ch
.rodata:000000000000D38C _rodata         ends
.rodata:000000000000D38C
.eh_frame_hdr:000000000000D4DC ; ===========================================================================
.eh_frame_hdr:000000000000D4DC
.eh_frame_hdr:000000000000D4DC ; Segment type: Pure data
.eh_frame_hdr:000000000000D4DC ; Segment permissions: Read
.eh_frame_hdr:000000000000D4DC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000D4DC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000D4DC                 ;org 0D4DCh
.eh_frame_hdr:000000000000D4DC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000D4DD                 db  1Bh
.eh_frame_hdr:000000000000D4DE                 db    3
.eh_frame_hdr:000000000000D4DF                 db  3Bh ; ;
.eh_frame_hdr:000000000000D4E0                 db 0A0h
.eh_frame_hdr:000000000000D4E1                 db    3
.eh_frame_hdr:000000000000D4E2                 db    0
.eh_frame_hdr:000000000000D4E3                 db    0
.eh_frame_hdr:000000000000D4E4                 db  73h ; s
.eh_frame_hdr:000000000000D4E5                 db    0
.eh_frame_hdr:000000000000D4E6                 db    0
.eh_frame_hdr:000000000000D4E7                 db    0
.eh_frame_hdr:000000000000D4E8                 db 0D4h
.eh_frame_hdr:000000000000D4E9                 db  42h ; B
.eh_frame_hdr:000000000000D4EA                 db 0FFh
.eh_frame_hdr:000000000000D4EB                 db 0FFh
.eh_frame_hdr:000000000000D4EC                 db 0ECh
.eh_frame_hdr:000000000000D4ED                 db    3
.eh_frame_hdr:000000000000D4EE                 db    0
.eh_frame_hdr:000000000000D4EF                 db    0
.eh_frame_hdr:000000000000D4F0                 db  84h
.eh_frame_hdr:000000000000D4F1                 db  46h ; F
.eh_frame_hdr:000000000000D4F2                 db 0FFh
.eh_frame_hdr:000000000000D4F3                 db 0FFh
.eh_frame_hdr:000000000000D4F4                 db  14h
.eh_frame_hdr:000000000000D4F5                 db    4
.eh_frame_hdr:000000000000D4F6                 db    0
.eh_frame_hdr:000000000000D4F7                 db    0
.eh_frame_hdr:000000000000D4F8                 db  94h
.eh_frame_hdr:000000000000D4F9                 db  46h ; F
.eh_frame_hdr:000000000000D4FA                 db 0FFh
.eh_frame_hdr:000000000000D4FB                 db 0FFh
.eh_frame_hdr:000000000000D4FC                 db 0B4h
.eh_frame_hdr:000000000000D4FD                 db  0Ah
.eh_frame_hdr:000000000000D4FE                 db    0
.eh_frame_hdr:000000000000D4FF                 db    0
.eh_frame_hdr:000000000000D500                 db  94h
.eh_frame_hdr:000000000000D501                 db  58h ; X
.eh_frame_hdr:000000000000D502                 db 0FFh
.eh_frame_hdr:000000000000D503                 db 0FFh
.eh_frame_hdr:000000000000D504                 db 0BCh
.eh_frame_hdr:000000000000D505                 db    3
.eh_frame_hdr:000000000000D506                 db    0
.eh_frame_hdr:000000000000D507                 db    0
.eh_frame_hdr:000000000000D508                 db 0A4h
.eh_frame_hdr:000000000000D509                 db  59h ; Y
.eh_frame_hdr:000000000000D50A                 db 0FFh
.eh_frame_hdr:000000000000D50B                 db 0FFh
.eh_frame_hdr:000000000000D50C                 db  2Ch ; ,
.eh_frame_hdr:000000000000D50D                 db    4
.eh_frame_hdr:000000000000D50E                 db    0
.eh_frame_hdr:000000000000D50F                 db    0
.eh_frame_hdr:000000000000D510                 db 0B4h
.eh_frame_hdr:000000000000D511                 db  59h ; Y
.eh_frame_hdr:000000000000D512                 db 0FFh
.eh_frame_hdr:000000000000D513                 db 0FFh
.eh_frame_hdr:000000000000D514                 db  40h ; @
.eh_frame_hdr:000000000000D515                 db    4
.eh_frame_hdr:000000000000D516                 db    0
.eh_frame_hdr:000000000000D517                 db    0
.eh_frame_hdr:000000000000D518                 db 0E4h
.eh_frame_hdr:000000000000D519                 db  5Ah ; Z
.eh_frame_hdr:000000000000D51A                 db 0FFh
.eh_frame_hdr:000000000000D51B                 db 0FFh
.eh_frame_hdr:000000000000D51C                 db  5Ch ; \
.eh_frame_hdr:000000000000D51D                 db    4
.eh_frame_hdr:000000000000D51E                 db    0
.eh_frame_hdr:000000000000D51F                 db    0
.eh_frame_hdr:000000000000D520                 db  64h ; d
.eh_frame_hdr:000000000000D521                 db  5Bh ; [
.eh_frame_hdr:000000000000D522                 db 0FFh
.eh_frame_hdr:000000000000D523                 db 0FFh
.eh_frame_hdr:000000000000D524                 db  90h
.eh_frame_hdr:000000000000D525                 db    4
.eh_frame_hdr:000000000000D526                 db    0
.eh_frame_hdr:000000000000D527                 db    0
.eh_frame_hdr:000000000000D528                 db  54h ; T
.eh_frame_hdr:000000000000D529                 db  5Ch ; \
.eh_frame_hdr:000000000000D52A                 db 0FFh
.eh_frame_hdr:000000000000D52B                 db 0FFh
.eh_frame_hdr:000000000000D52C                 db 0DCh
.eh_frame_hdr:000000000000D52D                 db    4
.eh_frame_hdr:000000000000D52E                 db    0
.eh_frame_hdr:000000000000D52F                 db    0
.eh_frame_hdr:000000000000D530                 db  54h ; T
.eh_frame_hdr:000000000000D531                 db  5Dh ; ]
.eh_frame_hdr:000000000000D532                 db 0FFh
.eh_frame_hdr:000000000000D533                 db 0FFh
.eh_frame_hdr:000000000000D534                 db  28h ; (
.eh_frame_hdr:000000000000D535                 db    5
.eh_frame_hdr:000000000000D536                 db    0
.eh_frame_hdr:000000000000D537                 db    0
.eh_frame_hdr:000000000000D538                 db  54h ; T
.eh_frame_hdr:000000000000D539                 db  5Eh ; ^
.eh_frame_hdr:000000000000D53A                 db 0FFh
.eh_frame_hdr:000000000000D53B                 db 0FFh
.eh_frame_hdr:000000000000D53C                 db  74h ; t
.eh_frame_hdr:000000000000D53D                 db    5
.eh_frame_hdr:000000000000D53E                 db    0
.eh_frame_hdr:000000000000D53F                 db    0
.eh_frame_hdr:000000000000D540                 db  54h ; T
.eh_frame_hdr:000000000000D541                 db  5Fh ; _
.eh_frame_hdr:000000000000D542                 db 0FFh
.eh_frame_hdr:000000000000D543                 db 0FFh
.eh_frame_hdr:000000000000D544                 db 0C0h
.eh_frame_hdr:000000000000D545                 db    5
.eh_frame_hdr:000000000000D546                 db    0
.eh_frame_hdr:000000000000D547                 db    0
.eh_frame_hdr:000000000000D548                 db  44h ; D
.eh_frame_hdr:000000000000D549                 db  60h ; `
.eh_frame_hdr:000000000000D54A                 db 0FFh
.eh_frame_hdr:000000000000D54B                 db 0FFh
.eh_frame_hdr:000000000000D54C                 db  0Ch
.eh_frame_hdr:000000000000D54D                 db    6
.eh_frame_hdr:000000000000D54E                 db    0
.eh_frame_hdr:000000000000D54F                 db    0
.eh_frame_hdr:000000000000D550                 db  34h ; 4
.eh_frame_hdr:000000000000D551                 db  61h ; a
.eh_frame_hdr:000000000000D552                 db 0FFh
.eh_frame_hdr:000000000000D553                 db 0FFh
.eh_frame_hdr:000000000000D554                 db  58h ; X
.eh_frame_hdr:000000000000D555                 db    6
.eh_frame_hdr:000000000000D556                 db    0
.eh_frame_hdr:000000000000D557                 db    0
.eh_frame_hdr:000000000000D558                 db 0C4h
.eh_frame_hdr:000000000000D559                 db  61h ; a
.eh_frame_hdr:000000000000D55A                 db 0FFh
.eh_frame_hdr:000000000000D55B                 db 0FFh
.eh_frame_hdr:000000000000D55C                 db 0A0h
.eh_frame_hdr:000000000000D55D                 db    6
.eh_frame_hdr:000000000000D55E                 db    0
.eh_frame_hdr:000000000000D55F                 db    0
.eh_frame_hdr:000000000000D560                 db  54h ; T
.eh_frame_hdr:000000000000D561                 db  62h ; b
.eh_frame_hdr:000000000000D562                 db 0FFh
.eh_frame_hdr:000000000000D563                 db 0FFh
.eh_frame_hdr:000000000000D564                 db 0E8h
.eh_frame_hdr:000000000000D565                 db    6
.eh_frame_hdr:000000000000D566                 db    0
.eh_frame_hdr:000000000000D567                 db    0
.eh_frame_hdr:000000000000D568                 db  74h ; t
.eh_frame_hdr:000000000000D569                 db  63h ; c
.eh_frame_hdr:000000000000D56A                 db 0FFh
.eh_frame_hdr:000000000000D56B                 db 0FFh
.eh_frame_hdr:000000000000D56C                 db  44h ; D
.eh_frame_hdr:000000000000D56D                 db    7
.eh_frame_hdr:000000000000D56E                 db    0
.eh_frame_hdr:000000000000D56F                 db    0
.eh_frame_hdr:000000000000D570                 db  94h
.eh_frame_hdr:000000000000D571                 db  64h ; d
.eh_frame_hdr:000000000000D572                 db 0FFh
.eh_frame_hdr:000000000000D573                 db 0FFh
.eh_frame_hdr:000000000000D574                 db  90h
.eh_frame_hdr:000000000000D575                 db    7
.eh_frame_hdr:000000000000D576                 db    0
.eh_frame_hdr:000000000000D577                 db    0
.eh_frame_hdr:000000000000D578                 db 0C4h
.eh_frame_hdr:000000000000D579                 db  65h ; e
.eh_frame_hdr:000000000000D57A                 db 0FFh
.eh_frame_hdr:000000000000D57B                 db 0FFh
.eh_frame_hdr:000000000000D57C                 db 0E0h
.eh_frame_hdr:000000000000D57D                 db    7
.eh_frame_hdr:000000000000D57E                 db    0
.eh_frame_hdr:000000000000D57F                 db    0
.eh_frame_hdr:000000000000D580                 db 0F4h
.eh_frame_hdr:000000000000D581                 db  6Dh ; m
.eh_frame_hdr:000000000000D582                 db 0FFh
.eh_frame_hdr:000000000000D583                 db 0FFh
.eh_frame_hdr:000000000000D584                 db  7Ch ; |
.eh_frame_hdr:000000000000D585                 db    8
.eh_frame_hdr:000000000000D586                 db    0
.eh_frame_hdr:000000000000D587                 db    0
.eh_frame_hdr:000000000000D588                 db 0B4h
.eh_frame_hdr:000000000000D589                 db  6Fh ; o
.eh_frame_hdr:000000000000D58A                 db 0FFh
.eh_frame_hdr:000000000000D58B                 db 0FFh
.eh_frame_hdr:000000000000D58C                 db 0C8h
.eh_frame_hdr:000000000000D58D                 db    8
.eh_frame_hdr:000000000000D58E                 db    0
.eh_frame_hdr:000000000000D58F                 db    0
.eh_frame_hdr:000000000000D590                 db    4
.eh_frame_hdr:000000000000D591                 db  71h ; q
.eh_frame_hdr:000000000000D592                 db 0FFh
.eh_frame_hdr:000000000000D593                 db 0FFh
.eh_frame_hdr:000000000000D594                 db 0F4h
.eh_frame_hdr:000000000000D595                 db    8
.eh_frame_hdr:000000000000D596                 db    0
.eh_frame_hdr:000000000000D597                 db    0
.eh_frame_hdr:000000000000D598                 db  24h ; $
.eh_frame_hdr:000000000000D599                 db  72h ; r
.eh_frame_hdr:000000000000D59A                 db 0FFh
.eh_frame_hdr:000000000000D59B                 db 0FFh
.eh_frame_hdr:000000000000D59C                 db  20h
.eh_frame_hdr:000000000000D59D                 db    9
.eh_frame_hdr:000000000000D59E                 db    0
.eh_frame_hdr:000000000000D59F                 db    0
.eh_frame_hdr:000000000000D5A0                 db    4
.eh_frame_hdr:000000000000D5A1                 db  74h ; t
.eh_frame_hdr:000000000000D5A2                 db 0FFh
.eh_frame_hdr:000000000000D5A3                 db 0FFh
.eh_frame_hdr:000000000000D5A4                 db  70h ; p
.eh_frame_hdr:000000000000D5A5                 db    9
.eh_frame_hdr:000000000000D5A6                 db    0
.eh_frame_hdr:000000000000D5A7                 db    0
.eh_frame_hdr:000000000000D5A8                 db  64h ; d
.eh_frame_hdr:000000000000D5A9                 db  74h ; t
.eh_frame_hdr:000000000000D5AA                 db 0FFh
.eh_frame_hdr:000000000000D5AB                 db 0FFh
.eh_frame_hdr:000000000000D5AC                 db  9Ch
.eh_frame_hdr:000000000000D5AD                 db    9
.eh_frame_hdr:000000000000D5AE                 db    0
.eh_frame_hdr:000000000000D5AF                 db    0
.eh_frame_hdr:000000000000D5B0                 db  14h
.eh_frame_hdr:000000000000D5B1                 db  77h ; w
.eh_frame_hdr:000000000000D5B2                 db 0FFh
.eh_frame_hdr:000000000000D5B3                 db 0FFh
.eh_frame_hdr:000000000000D5B4                 db 0E8h
.eh_frame_hdr:000000000000D5B5                 db    9
.eh_frame_hdr:000000000000D5B6                 db    0
.eh_frame_hdr:000000000000D5B7                 db    0
.eh_frame_hdr:000000000000D5B8                 db  94h
.eh_frame_hdr:000000000000D5B9                 db  77h ; w
.eh_frame_hdr:000000000000D5BA                 db 0FFh
.eh_frame_hdr:000000000000D5BB                 db 0FFh
.eh_frame_hdr:000000000000D5BC                 db  20h
.eh_frame_hdr:000000000000D5BD                 db  0Ah
.eh_frame_hdr:000000000000D5BE                 db    0
.eh_frame_hdr:000000000000D5BF                 db    0
.eh_frame_hdr:000000000000D5C0                 db 0C4h
.eh_frame_hdr:000000000000D5C1                 db  77h ; w
.eh_frame_hdr:000000000000D5C2                 db 0FFh
.eh_frame_hdr:000000000000D5C3                 db 0FFh
.eh_frame_hdr:000000000000D5C4                 db  48h ; H
.eh_frame_hdr:000000000000D5C5                 db  0Ah
.eh_frame_hdr:000000000000D5C6                 db    0
.eh_frame_hdr:000000000000D5C7                 db    0
.eh_frame_hdr:000000000000D5C8                 db  94h
.eh_frame_hdr:000000000000D5C9                 db  78h ; x
.eh_frame_hdr:000000000000D5CA                 db 0FFh
.eh_frame_hdr:000000000000D5CB                 db 0FFh
.eh_frame_hdr:000000000000D5CC                 db  88h
.eh_frame_hdr:000000000000D5CD                 db  0Ah
.eh_frame_hdr:000000000000D5CE                 db    0
.eh_frame_hdr:000000000000D5CF                 db    0
.eh_frame_hdr:000000000000D5D0                 db 0A4h
.eh_frame_hdr:000000000000D5D1                 db  7Dh ; }
.eh_frame_hdr:000000000000D5D2                 db 0FFh
.eh_frame_hdr:000000000000D5D3                 db 0FFh
.eh_frame_hdr:000000000000D5D4                 db    4
.eh_frame_hdr:000000000000D5D5                 db  0Bh
.eh_frame_hdr:000000000000D5D6                 db    0
.eh_frame_hdr:000000000000D5D7                 db    0
.eh_frame_hdr:000000000000D5D8                 db 0B4h
.eh_frame_hdr:000000000000D5D9                 db  7Dh ; }
.eh_frame_hdr:000000000000D5DA                 db 0FFh
.eh_frame_hdr:000000000000D5DB                 db 0FFh
.eh_frame_hdr:000000000000D5DC                 db  18h
.eh_frame_hdr:000000000000D5DD                 db  0Bh
.eh_frame_hdr:000000000000D5DE                 db    0
.eh_frame_hdr:000000000000D5DF                 db    0
.eh_frame_hdr:000000000000D5E0                 db 0D4h
.eh_frame_hdr:000000000000D5E1                 db  7Eh ; ~
.eh_frame_hdr:000000000000D5E2                 db 0FFh
.eh_frame_hdr:000000000000D5E3                 db 0FFh
.eh_frame_hdr:000000000000D5E4                 db  64h ; d
.eh_frame_hdr:000000000000D5E5                 db  0Bh
.eh_frame_hdr:000000000000D5E6                 db    0
.eh_frame_hdr:000000000000D5E7                 db    0
.eh_frame_hdr:000000000000D5E8                 db  54h ; T
.eh_frame_hdr:000000000000D5E9                 db  7Fh ; 
.eh_frame_hdr:000000000000D5EA                 db 0FFh
.eh_frame_hdr:000000000000D5EB                 db 0FFh
.eh_frame_hdr:000000000000D5EC                 db  90h
.eh_frame_hdr:000000000000D5ED                 db  0Bh
.eh_frame_hdr:000000000000D5EE                 db    0
.eh_frame_hdr:000000000000D5EF                 db    0
.eh_frame_hdr:000000000000D5F0                 db  74h ; t
.eh_frame_hdr:000000000000D5F1                 db  80h
.eh_frame_hdr:000000000000D5F2                 db 0FFh
.eh_frame_hdr:000000000000D5F3                 db 0FFh
.eh_frame_hdr:000000000000D5F4                 db 0F0h
.eh_frame_hdr:000000000000D5F5                 db  0Bh
.eh_frame_hdr:000000000000D5F6                 db    0
.eh_frame_hdr:000000000000D5F7                 db    0
.eh_frame_hdr:000000000000D5F8                 db 0E4h
.eh_frame_hdr:000000000000D5F9                 db  80h
.eh_frame_hdr:000000000000D5FA                 db 0FFh
.eh_frame_hdr:000000000000D5FB                 db 0FFh
.eh_frame_hdr:000000000000D5FC                 db  3Ch ; <
.eh_frame_hdr:000000000000D5FD                 db  0Ch
.eh_frame_hdr:000000000000D5FE                 db    0
.eh_frame_hdr:000000000000D5FF                 db    0
.eh_frame_hdr:000000000000D600                 db  34h ; 4
.eh_frame_hdr:000000000000D601                 db  81h
.eh_frame_hdr:000000000000D602                 db 0FFh
.eh_frame_hdr:000000000000D603                 db 0FFh
.eh_frame_hdr:000000000000D604                 db  7Ch ; |
.eh_frame_hdr:000000000000D605                 db  0Ch
.eh_frame_hdr:000000000000D606                 db    0
.eh_frame_hdr:000000000000D607                 db    0
.eh_frame_hdr:000000000000D608                 db  44h ; D
.eh_frame_hdr:000000000000D609                 db  81h
.eh_frame_hdr:000000000000D60A                 db 0FFh
.eh_frame_hdr:000000000000D60B                 db 0FFh
.eh_frame_hdr:000000000000D60C                 db  90h
.eh_frame_hdr:000000000000D60D                 db  0Ch
.eh_frame_hdr:000000000000D60E                 db    0
.eh_frame_hdr:000000000000D60F                 db    0
.eh_frame_hdr:000000000000D610                 db  54h ; T
.eh_frame_hdr:000000000000D611                 db  81h
.eh_frame_hdr:000000000000D612                 db 0FFh
.eh_frame_hdr:000000000000D613                 db 0FFh
.eh_frame_hdr:000000000000D614                 db 0A4h
.eh_frame_hdr:000000000000D615                 db  0Ch
.eh_frame_hdr:000000000000D616                 db    0
.eh_frame_hdr:000000000000D617                 db    0
.eh_frame_hdr:000000000000D618                 db    4
.eh_frame_hdr:000000000000D619                 db  82h
.eh_frame_hdr:000000000000D61A                 db 0FFh
.eh_frame_hdr:000000000000D61B                 db 0FFh
.eh_frame_hdr:000000000000D61C                 db 0D4h
.eh_frame_hdr:000000000000D61D                 db  0Ch
.eh_frame_hdr:000000000000D61E                 db    0
.eh_frame_hdr:000000000000D61F                 db    0
.eh_frame_hdr:000000000000D620                 db  74h ; t
.eh_frame_hdr:000000000000D621                 db  83h
.eh_frame_hdr:000000000000D622                 db 0FFh
.eh_frame_hdr:000000000000D623                 db 0FFh
.eh_frame_hdr:000000000000D624                 db  2Ch ; ,
.eh_frame_hdr:000000000000D625                 db  0Dh
.eh_frame_hdr:000000000000D626                 db    0
.eh_frame_hdr:000000000000D627                 db    0
.eh_frame_hdr:000000000000D628                 db 0E4h
.eh_frame_hdr:000000000000D629                 db  84h
.eh_frame_hdr:000000000000D62A                 db 0FFh
.eh_frame_hdr:000000000000D62B                 db 0FFh
.eh_frame_hdr:000000000000D62C                 db  84h
.eh_frame_hdr:000000000000D62D                 db  0Dh
.eh_frame_hdr:000000000000D62E                 db    0
.eh_frame_hdr:000000000000D62F                 db    0
.eh_frame_hdr:000000000000D630                 db  34h ; 4
.eh_frame_hdr:000000000000D631                 db  86h
.eh_frame_hdr:000000000000D632                 db 0FFh
.eh_frame_hdr:000000000000D633                 db 0FFh
.eh_frame_hdr:000000000000D634                 db 0E4h
.eh_frame_hdr:000000000000D635                 db  0Dh
.eh_frame_hdr:000000000000D636                 db    0
.eh_frame_hdr:000000000000D637                 db    0
.eh_frame_hdr:000000000000D638                 db 0D4h
.eh_frame_hdr:000000000000D639                 db  86h
.eh_frame_hdr:000000000000D63A                 db 0FFh
.eh_frame_hdr:000000000000D63B                 db 0FFh
.eh_frame_hdr:000000000000D63C                 db    4
.eh_frame_hdr:000000000000D63D                 db  0Eh
.eh_frame_hdr:000000000000D63E                 db    0
.eh_frame_hdr:000000000000D63F                 db    0
.eh_frame_hdr:000000000000D640                 db 0C4h
.eh_frame_hdr:000000000000D641                 db  87h
.eh_frame_hdr:000000000000D642                 db 0FFh
.eh_frame_hdr:000000000000D643                 db 0FFh
.eh_frame_hdr:000000000000D644                 db  48h ; H
.eh_frame_hdr:000000000000D645                 db  0Eh
.eh_frame_hdr:000000000000D646                 db    0
.eh_frame_hdr:000000000000D647                 db    0
.eh_frame_hdr:000000000000D648                 db    4
.eh_frame_hdr:000000000000D649                 db  9Ah
.eh_frame_hdr:000000000000D64A                 db 0FFh
.eh_frame_hdr:000000000000D64B                 db 0FFh
.eh_frame_hdr:000000000000D64C                 db 0C0h
.eh_frame_hdr:000000000000D64D                 db  0Eh
.eh_frame_hdr:000000000000D64E                 db    0
.eh_frame_hdr:000000000000D64F                 db    0
.eh_frame_hdr:000000000000D650                 db 0B4h
.eh_frame_hdr:000000000000D651                 db  9Bh
.eh_frame_hdr:000000000000D652                 db 0FFh
.eh_frame_hdr:000000000000D653                 db 0FFh
.eh_frame_hdr:000000000000D654                 db  2Ch ; ,
.eh_frame_hdr:000000000000D655                 db  0Fh
.eh_frame_hdr:000000000000D656                 db    0
.eh_frame_hdr:000000000000D657                 db    0
.eh_frame_hdr:000000000000D658                 db 0F4h
.eh_frame_hdr:000000000000D659                 db  9Bh
.eh_frame_hdr:000000000000D65A                 db 0FFh
.eh_frame_hdr:000000000000D65B                 db 0FFh
.eh_frame_hdr:000000000000D65C                 db  58h ; X
.eh_frame_hdr:000000000000D65D                 db  0Fh
.eh_frame_hdr:000000000000D65E                 db    0
.eh_frame_hdr:000000000000D65F                 db    0
.eh_frame_hdr:000000000000D660                 db  14h
.eh_frame_hdr:000000000000D661                 db  9Ch
.eh_frame_hdr:000000000000D662                 db 0FFh
.eh_frame_hdr:000000000000D663                 db 0FFh
.eh_frame_hdr:000000000000D664                 db  6Ch ; l
.eh_frame_hdr:000000000000D665                 db  0Fh
.eh_frame_hdr:000000000000D666                 db    0
.eh_frame_hdr:000000000000D667                 db    0
.eh_frame_hdr:000000000000D668                 db  34h ; 4
.eh_frame_hdr:000000000000D669                 db  9Ch
.eh_frame_hdr:000000000000D66A                 db 0FFh
.eh_frame_hdr:000000000000D66B                 db 0FFh
.eh_frame_hdr:000000000000D66C                 db  80h
.eh_frame_hdr:000000000000D66D                 db  0Fh
.eh_frame_hdr:000000000000D66E                 db    0
.eh_frame_hdr:000000000000D66F                 db    0
.eh_frame_hdr:000000000000D670                 db  74h ; t
.eh_frame_hdr:000000000000D671                 db  9Ch
.eh_frame_hdr:000000000000D672                 db 0FFh
.eh_frame_hdr:000000000000D673                 db 0FFh
.eh_frame_hdr:000000000000D674                 db  94h
.eh_frame_hdr:000000000000D675                 db  0Fh
.eh_frame_hdr:000000000000D676                 db    0
.eh_frame_hdr:000000000000D677                 db    0
.eh_frame_hdr:000000000000D678                 db  94h
.eh_frame_hdr:000000000000D679                 db  9Ch
.eh_frame_hdr:000000000000D67A                 db 0FFh
.eh_frame_hdr:000000000000D67B                 db 0FFh
.eh_frame_hdr:000000000000D67C                 db 0A8h
.eh_frame_hdr:000000000000D67D                 db  0Fh
.eh_frame_hdr:000000000000D67E                 db    0
.eh_frame_hdr:000000000000D67F                 db    0
.eh_frame_hdr:000000000000D680                 db 0C4h
.eh_frame_hdr:000000000000D681                 db  9Ch
.eh_frame_hdr:000000000000D682                 db 0FFh
.eh_frame_hdr:000000000000D683                 db 0FFh
.eh_frame_hdr:000000000000D684                 db 0BCh
.eh_frame_hdr:000000000000D685                 db  0Fh
.eh_frame_hdr:000000000000D686                 db    0
.eh_frame_hdr:000000000000D687                 db    0
.eh_frame_hdr:000000000000D688                 db  44h ; D
.eh_frame_hdr:000000000000D689                 db  9Dh
.eh_frame_hdr:000000000000D68A                 db 0FFh
.eh_frame_hdr:000000000000D68B                 db 0FFh
.eh_frame_hdr:000000000000D68C                 db  10h
.eh_frame_hdr:000000000000D68D                 db  10h
.eh_frame_hdr:000000000000D68E                 db    0
.eh_frame_hdr:000000000000D68F                 db    0
.eh_frame_hdr:000000000000D690                 db  34h ; 4
.eh_frame_hdr:000000000000D691                 db  9Eh
.eh_frame_hdr:000000000000D692                 db 0FFh
.eh_frame_hdr:000000000000D693                 db 0FFh
.eh_frame_hdr:000000000000D694                 db  7Ch ; |
.eh_frame_hdr:000000000000D695                 db  10h
.eh_frame_hdr:000000000000D696                 db    0
.eh_frame_hdr:000000000000D697                 db    0
.eh_frame_hdr:000000000000D698                 db  44h ; D
.eh_frame_hdr:000000000000D699                 db  9Eh
.eh_frame_hdr:000000000000D69A                 db 0FFh
.eh_frame_hdr:000000000000D69B                 db 0FFh
.eh_frame_hdr:000000000000D69C                 db  90h
.eh_frame_hdr:000000000000D69D                 db  10h
.eh_frame_hdr:000000000000D69E                 db    0
.eh_frame_hdr:000000000000D69F                 db    0
.eh_frame_hdr:000000000000D6A0                 db 0E4h
.eh_frame_hdr:000000000000D6A1                 db  9Eh
.eh_frame_hdr:000000000000D6A2                 db 0FFh
.eh_frame_hdr:000000000000D6A3                 db 0FFh
.eh_frame_hdr:000000000000D6A4                 db 0BCh
.eh_frame_hdr:000000000000D6A5                 db  10h
.eh_frame_hdr:000000000000D6A6                 db    0
.eh_frame_hdr:000000000000D6A7                 db    0
.eh_frame_hdr:000000000000D6A8                 db    4
.eh_frame_hdr:000000000000D6A9                 db  9Fh
.eh_frame_hdr:000000000000D6AA                 db 0FFh
.eh_frame_hdr:000000000000D6AB                 db 0FFh
.eh_frame_hdr:000000000000D6AC                 db 0D0h
.eh_frame_hdr:000000000000D6AD                 db  10h
.eh_frame_hdr:000000000000D6AE                 db    0
.eh_frame_hdr:000000000000D6AF                 db    0
.eh_frame_hdr:000000000000D6B0                 db  14h
.eh_frame_hdr:000000000000D6B1                 db  9Fh
.eh_frame_hdr:000000000000D6B2                 db 0FFh
.eh_frame_hdr:000000000000D6B3                 db 0FFh
.eh_frame_hdr:000000000000D6B4                 db 0E4h
.eh_frame_hdr:000000000000D6B5                 db  10h
.eh_frame_hdr:000000000000D6B6                 db    0
.eh_frame_hdr:000000000000D6B7                 db    0
.eh_frame_hdr:000000000000D6B8                 db  34h ; 4
.eh_frame_hdr:000000000000D6B9                 db  9Fh
.eh_frame_hdr:000000000000D6BA                 db 0FFh
.eh_frame_hdr:000000000000D6BB                 db 0FFh
.eh_frame_hdr:000000000000D6BC                 db 0F8h
.eh_frame_hdr:000000000000D6BD                 db  10h
.eh_frame_hdr:000000000000D6BE                 db    0
.eh_frame_hdr:000000000000D6BF                 db    0
.eh_frame_hdr:000000000000D6C0                 db  54h ; T
.eh_frame_hdr:000000000000D6C1                 db  9Fh
.eh_frame_hdr:000000000000D6C2                 db 0FFh
.eh_frame_hdr:000000000000D6C3                 db 0FFh
.eh_frame_hdr:000000000000D6C4                 db  0Ch
.eh_frame_hdr:000000000000D6C5                 db  11h
.eh_frame_hdr:000000000000D6C6                 db    0
.eh_frame_hdr:000000000000D6C7                 db    0
.eh_frame_hdr:000000000000D6C8                 db 0E4h
.eh_frame_hdr:000000000000D6C9                 db  9Fh
.eh_frame_hdr:000000000000D6CA                 db 0FFh
.eh_frame_hdr:000000000000D6CB                 db 0FFh
.eh_frame_hdr:000000000000D6CC                 db  28h ; (
.eh_frame_hdr:000000000000D6CD                 db  11h
.eh_frame_hdr:000000000000D6CE                 db    0
.eh_frame_hdr:000000000000D6CF                 db    0
.eh_frame_hdr:000000000000D6D0                 db  74h ; t
.eh_frame_hdr:000000000000D6D1                 db 0A0h
.eh_frame_hdr:000000000000D6D2                 db 0FFh
.eh_frame_hdr:000000000000D6D3                 db 0FFh
.eh_frame_hdr:000000000000D6D4                 db  44h ; D
.eh_frame_hdr:000000000000D6D5                 db  11h
.eh_frame_hdr:000000000000D6D6                 db    0
.eh_frame_hdr:000000000000D6D7                 db    0
.eh_frame_hdr:000000000000D6D8                 db  84h
.eh_frame_hdr:000000000000D6D9                 db 0A0h
.eh_frame_hdr:000000000000D6DA                 db 0FFh
.eh_frame_hdr:000000000000D6DB                 db 0FFh
.eh_frame_hdr:000000000000D6DC                 db  58h ; X
.eh_frame_hdr:000000000000D6DD                 db  11h
.eh_frame_hdr:000000000000D6DE                 db    0
.eh_frame_hdr:000000000000D6DF                 db    0
.eh_frame_hdr:000000000000D6E0                 db  94h
.eh_frame_hdr:000000000000D6E1                 db 0A0h
.eh_frame_hdr:000000000000D6E2                 db 0FFh
.eh_frame_hdr:000000000000D6E3                 db 0FFh
.eh_frame_hdr:000000000000D6E4                 db  6Ch ; l
.eh_frame_hdr:000000000000D6E5                 db  11h
.eh_frame_hdr:000000000000D6E6                 db    0
.eh_frame_hdr:000000000000D6E7                 db    0
.eh_frame_hdr:000000000000D6E8                 db  34h ; 4
.eh_frame_hdr:000000000000D6E9                 db 0A1h
.eh_frame_hdr:000000000000D6EA                 db 0FFh
.eh_frame_hdr:000000000000D6EB                 db 0FFh
.eh_frame_hdr:000000000000D6EC                 db  88h
.eh_frame_hdr:000000000000D6ED                 db  11h
.eh_frame_hdr:000000000000D6EE                 db    0
.eh_frame_hdr:000000000000D6EF                 db    0
.eh_frame_hdr:000000000000D6F0                 db  44h ; D
.eh_frame_hdr:000000000000D6F1                 db 0A1h
.eh_frame_hdr:000000000000D6F2                 db 0FFh
.eh_frame_hdr:000000000000D6F3                 db 0FFh
.eh_frame_hdr:000000000000D6F4                 db  9Ch
.eh_frame_hdr:000000000000D6F5                 db  11h
.eh_frame_hdr:000000000000D6F6                 db    0
.eh_frame_hdr:000000000000D6F7                 db    0
.eh_frame_hdr:000000000000D6F8                 db  64h ; d
.eh_frame_hdr:000000000000D6F9                 db 0A1h
.eh_frame_hdr:000000000000D6FA                 db 0FFh
.eh_frame_hdr:000000000000D6FB                 db 0FFh
.eh_frame_hdr:000000000000D6FC                 db 0B0h
.eh_frame_hdr:000000000000D6FD                 db  11h
.eh_frame_hdr:000000000000D6FE                 db    0
.eh_frame_hdr:000000000000D6FF                 db    0
.eh_frame_hdr:000000000000D700                 db  74h ; t
.eh_frame_hdr:000000000000D701                 db 0A1h
.eh_frame_hdr:000000000000D702                 db 0FFh
.eh_frame_hdr:000000000000D703                 db 0FFh
.eh_frame_hdr:000000000000D704                 db 0C4h
.eh_frame_hdr:000000000000D705                 db  11h
.eh_frame_hdr:000000000000D706                 db    0
.eh_frame_hdr:000000000000D707                 db    0
.eh_frame_hdr:000000000000D708                 db    4
.eh_frame_hdr:000000000000D709                 db 0A2h
.eh_frame_hdr:000000000000D70A                 db 0FFh
.eh_frame_hdr:000000000000D70B                 db 0FFh
.eh_frame_hdr:000000000000D70C                 db 0E0h
.eh_frame_hdr:000000000000D70D                 db  11h
.eh_frame_hdr:000000000000D70E                 db    0
.eh_frame_hdr:000000000000D70F                 db    0
.eh_frame_hdr:000000000000D710                 db 0A4h
.eh_frame_hdr:000000000000D711                 db 0A2h
.eh_frame_hdr:000000000000D712                 db 0FFh
.eh_frame_hdr:000000000000D713                 db 0FFh
.eh_frame_hdr:000000000000D714                 db 0FCh
.eh_frame_hdr:000000000000D715                 db  11h
.eh_frame_hdr:000000000000D716                 db    0
.eh_frame_hdr:000000000000D717                 db    0
.eh_frame_hdr:000000000000D718                 db 0B4h
.eh_frame_hdr:000000000000D719                 db 0A2h
.eh_frame_hdr:000000000000D71A                 db 0FFh
.eh_frame_hdr:000000000000D71B                 db 0FFh
.eh_frame_hdr:000000000000D71C                 db  10h
.eh_frame_hdr:000000000000D71D                 db  12h
.eh_frame_hdr:000000000000D71E                 db    0
.eh_frame_hdr:000000000000D71F                 db    0
.eh_frame_hdr:000000000000D720                 db 0D4h
.eh_frame_hdr:000000000000D721                 db 0A2h
.eh_frame_hdr:000000000000D722                 db 0FFh
.eh_frame_hdr:000000000000D723                 db 0FFh
.eh_frame_hdr:000000000000D724                 db  24h ; $
.eh_frame_hdr:000000000000D725                 db  12h
.eh_frame_hdr:000000000000D726                 db    0
.eh_frame_hdr:000000000000D727                 db    0
.eh_frame_hdr:000000000000D728                 db 0F4h
.eh_frame_hdr:000000000000D729                 db 0A2h
.eh_frame_hdr:000000000000D72A                 db 0FFh
.eh_frame_hdr:000000000000D72B                 db 0FFh
.eh_frame_hdr:000000000000D72C                 db  38h ; 8
.eh_frame_hdr:000000000000D72D                 db  12h
.eh_frame_hdr:000000000000D72E                 db    0
.eh_frame_hdr:000000000000D72F                 db    0
.eh_frame_hdr:000000000000D730                 db    4
.eh_frame_hdr:000000000000D731                 db 0A3h
.eh_frame_hdr:000000000000D732                 db 0FFh
.eh_frame_hdr:000000000000D733                 db 0FFh
.eh_frame_hdr:000000000000D734                 db  4Ch ; L
.eh_frame_hdr:000000000000D735                 db  12h
.eh_frame_hdr:000000000000D736                 db    0
.eh_frame_hdr:000000000000D737                 db    0
.eh_frame_hdr:000000000000D738                 db  24h ; $
.eh_frame_hdr:000000000000D739                 db 0A3h
.eh_frame_hdr:000000000000D73A                 db 0FFh
.eh_frame_hdr:000000000000D73B                 db 0FFh
.eh_frame_hdr:000000000000D73C                 db  60h ; `
.eh_frame_hdr:000000000000D73D                 db  12h
.eh_frame_hdr:000000000000D73E                 db    0
.eh_frame_hdr:000000000000D73F                 db    0
.eh_frame_hdr:000000000000D740                 db  44h ; D
.eh_frame_hdr:000000000000D741                 db 0A3h
.eh_frame_hdr:000000000000D742                 db 0FFh
.eh_frame_hdr:000000000000D743                 db 0FFh
.eh_frame_hdr:000000000000D744                 db  74h ; t
.eh_frame_hdr:000000000000D745                 db  12h
.eh_frame_hdr:000000000000D746                 db    0
.eh_frame_hdr:000000000000D747                 db    0
.eh_frame_hdr:000000000000D748                 db  64h ; d
.eh_frame_hdr:000000000000D749                 db 0A3h
.eh_frame_hdr:000000000000D74A                 db 0FFh
.eh_frame_hdr:000000000000D74B                 db 0FFh
.eh_frame_hdr:000000000000D74C                 db  8Ch
.eh_frame_hdr:000000000000D74D                 db  12h
.eh_frame_hdr:000000000000D74E                 db    0
.eh_frame_hdr:000000000000D74F                 db    0
.eh_frame_hdr:000000000000D750                 db  84h
.eh_frame_hdr:000000000000D751                 db 0A7h
.eh_frame_hdr:000000000000D752                 db 0FFh
.eh_frame_hdr:000000000000D753                 db 0FFh
.eh_frame_hdr:000000000000D754                 db 0A0h
.eh_frame_hdr:000000000000D755                 db  13h
.eh_frame_hdr:000000000000D756                 db    0
.eh_frame_hdr:000000000000D757                 db    0
.eh_frame_hdr:000000000000D758                 db 0A4h
.eh_frame_hdr:000000000000D759                 db 0A7h
.eh_frame_hdr:000000000000D75A                 db 0FFh
.eh_frame_hdr:000000000000D75B                 db 0FFh
.eh_frame_hdr:000000000000D75C                 db 0B4h
.eh_frame_hdr:000000000000D75D                 db  13h
.eh_frame_hdr:000000000000D75E                 db    0
.eh_frame_hdr:000000000000D75F                 db    0
.eh_frame_hdr:000000000000D760                 db  24h ; $
.eh_frame_hdr:000000000000D761                 db 0A8h
.eh_frame_hdr:000000000000D762                 db 0FFh
.eh_frame_hdr:000000000000D763                 db 0FFh
.eh_frame_hdr:000000000000D764                 db 0D0h
.eh_frame_hdr:000000000000D765                 db  13h
.eh_frame_hdr:000000000000D766                 db    0
.eh_frame_hdr:000000000000D767                 db    0
.eh_frame_hdr:000000000000D768                 db    4
.eh_frame_hdr:000000000000D769                 db 0A9h
.eh_frame_hdr:000000000000D76A                 db 0FFh
.eh_frame_hdr:000000000000D76B                 db 0FFh
.eh_frame_hdr:000000000000D76C                 db 0FCh
.eh_frame_hdr:000000000000D76D                 db  13h
.eh_frame_hdr:000000000000D76E                 db    0
.eh_frame_hdr:000000000000D76F                 db    0
.eh_frame_hdr:000000000000D770                 db  84h
.eh_frame_hdr:000000000000D771                 db 0A9h
.eh_frame_hdr:000000000000D772                 db 0FFh
.eh_frame_hdr:000000000000D773                 db 0FFh
.eh_frame_hdr:000000000000D774                 db  1Ch
.eh_frame_hdr:000000000000D775                 db  14h
.eh_frame_hdr:000000000000D776                 db    0
.eh_frame_hdr:000000000000D777                 db    0
.eh_frame_hdr:000000000000D778                 db 0A4h
.eh_frame_hdr:000000000000D779                 db 0A9h
.eh_frame_hdr:000000000000D77A                 db 0FFh
.eh_frame_hdr:000000000000D77B                 db 0FFh
.eh_frame_hdr:000000000000D77C                 db  38h ; 8
.eh_frame_hdr:000000000000D77D                 db  14h
.eh_frame_hdr:000000000000D77E                 db    0
.eh_frame_hdr:000000000000D77F                 db    0
.eh_frame_hdr:000000000000D780                 db 0D4h
.eh_frame_hdr:000000000000D781                 db 0A9h
.eh_frame_hdr:000000000000D782                 db 0FFh
.eh_frame_hdr:000000000000D783                 db 0FFh
.eh_frame_hdr:000000000000D784                 db  4Ch ; L
.eh_frame_hdr:000000000000D785                 db  14h
.eh_frame_hdr:000000000000D786                 db    0
.eh_frame_hdr:000000000000D787                 db    0
.eh_frame_hdr:000000000000D788                 db 0E4h
.eh_frame_hdr:000000000000D789                 db 0A9h
.eh_frame_hdr:000000000000D78A                 db 0FFh
.eh_frame_hdr:000000000000D78B                 db 0FFh
.eh_frame_hdr:000000000000D78C                 db  60h ; `
.eh_frame_hdr:000000000000D78D                 db  14h
.eh_frame_hdr:000000000000D78E                 db    0
.eh_frame_hdr:000000000000D78F                 db    0
.eh_frame_hdr:000000000000D790                 db  24h ; $
.eh_frame_hdr:000000000000D791                 db 0AAh
.eh_frame_hdr:000000000000D792                 db 0FFh
.eh_frame_hdr:000000000000D793                 db 0FFh
.eh_frame_hdr:000000000000D794                 db  84h
.eh_frame_hdr:000000000000D795                 db  14h
.eh_frame_hdr:000000000000D796                 db    0
.eh_frame_hdr:000000000000D797                 db    0
.eh_frame_hdr:000000000000D798                 db  54h ; T
.eh_frame_hdr:000000000000D799                 db 0AAh
.eh_frame_hdr:000000000000D79A                 db 0FFh
.eh_frame_hdr:000000000000D79B                 db 0FFh
.eh_frame_hdr:000000000000D79C                 db  98h
.eh_frame_hdr:000000000000D79D                 db  14h
.eh_frame_hdr:000000000000D79E                 db    0
.eh_frame_hdr:000000000000D79F                 db    0
.eh_frame_hdr:000000000000D7A0                 db 0E4h
.eh_frame_hdr:000000000000D7A1                 db 0AAh
.eh_frame_hdr:000000000000D7A2                 db 0FFh
.eh_frame_hdr:000000000000D7A3                 db 0FFh
.eh_frame_hdr:000000000000D7A4                 db 0B0h
.eh_frame_hdr:000000000000D7A5                 db  14h
.eh_frame_hdr:000000000000D7A6                 db    0
.eh_frame_hdr:000000000000D7A7                 db    0
.eh_frame_hdr:000000000000D7A8                 db  34h ; 4
.eh_frame_hdr:000000000000D7A9                 db 0ABh
.eh_frame_hdr:000000000000D7AA                 db 0FFh
.eh_frame_hdr:000000000000D7AB                 db 0FFh
.eh_frame_hdr:000000000000D7AC                 db 0C8h
.eh_frame_hdr:000000000000D7AD                 db  14h
.eh_frame_hdr:000000000000D7AE                 db    0
.eh_frame_hdr:000000000000D7AF                 db    0
.eh_frame_hdr:000000000000D7B0                 db  54h ; T
.eh_frame_hdr:000000000000D7B1                 db 0ABh
.eh_frame_hdr:000000000000D7B2                 db 0FFh
.eh_frame_hdr:000000000000D7B3                 db 0FFh
.eh_frame_hdr:000000000000D7B4                 db 0E4h
.eh_frame_hdr:000000000000D7B5                 db  14h
.eh_frame_hdr:000000000000D7B6                 db    0
.eh_frame_hdr:000000000000D7B7                 db    0
.eh_frame_hdr:000000000000D7B8                 db  84h
.eh_frame_hdr:000000000000D7B9                 db 0ABh
.eh_frame_hdr:000000000000D7BA                 db 0FFh
.eh_frame_hdr:000000000000D7BB                 db 0FFh
.eh_frame_hdr:000000000000D7BC                 db    0
.eh_frame_hdr:000000000000D7BD                 db  15h
.eh_frame_hdr:000000000000D7BE                 db    0
.eh_frame_hdr:000000000000D7BF                 db    0
.eh_frame_hdr:000000000000D7C0                 db 0B4h
.eh_frame_hdr:000000000000D7C1                 db 0ABh
.eh_frame_hdr:000000000000D7C2                 db 0FFh
.eh_frame_hdr:000000000000D7C3                 db 0FFh
.eh_frame_hdr:000000000000D7C4                 db  28h ; (
.eh_frame_hdr:000000000000D7C5                 db  15h
.eh_frame_hdr:000000000000D7C6                 db    0
.eh_frame_hdr:000000000000D7C7                 db    0
.eh_frame_hdr:000000000000D7C8                 db 0D4h
.eh_frame_hdr:000000000000D7C9                 db 0ABh
.eh_frame_hdr:000000000000D7CA                 db 0FFh
.eh_frame_hdr:000000000000D7CB                 db 0FFh
.eh_frame_hdr:000000000000D7CC                 db  44h ; D
.eh_frame_hdr:000000000000D7CD                 db  15h
.eh_frame_hdr:000000000000D7CE                 db    0
.eh_frame_hdr:000000000000D7CF                 db    0
.eh_frame_hdr:000000000000D7D0                 db  14h
.eh_frame_hdr:000000000000D7D1                 db 0ACh
.eh_frame_hdr:000000000000D7D2                 db 0FFh
.eh_frame_hdr:000000000000D7D3                 db 0FFh
.eh_frame_hdr:000000000000D7D4                 db  5Ch ; \
.eh_frame_hdr:000000000000D7D5                 db  15h
.eh_frame_hdr:000000000000D7D6                 db    0
.eh_frame_hdr:000000000000D7D7                 db    0
.eh_frame_hdr:000000000000D7D8                 db  74h ; t
.eh_frame_hdr:000000000000D7D9                 db 0ACh
.eh_frame_hdr:000000000000D7DA                 db 0FFh
.eh_frame_hdr:000000000000D7DB                 db 0FFh
.eh_frame_hdr:000000000000D7DC                 db  88h
.eh_frame_hdr:000000000000D7DD                 db  15h
.eh_frame_hdr:000000000000D7DE                 db    0
.eh_frame_hdr:000000000000D7DF                 db    0
.eh_frame_hdr:000000000000D7E0                 db  34h ; 4
.eh_frame_hdr:000000000000D7E1                 db 0ADh
.eh_frame_hdr:000000000000D7E2                 db 0FFh
.eh_frame_hdr:000000000000D7E3                 db 0FFh
.eh_frame_hdr:000000000000D7E4                 db 0A4h
.eh_frame_hdr:000000000000D7E5                 db  15h
.eh_frame_hdr:000000000000D7E6                 db    0
.eh_frame_hdr:000000000000D7E7                 db    0
.eh_frame_hdr:000000000000D7E8                 db  94h
.eh_frame_hdr:000000000000D7E9                 db 0ADh
.eh_frame_hdr:000000000000D7EA                 db 0FFh
.eh_frame_hdr:000000000000D7EB                 db 0FFh
.eh_frame_hdr:000000000000D7EC                 db 0D0h
.eh_frame_hdr:000000000000D7ED                 db  15h
.eh_frame_hdr:000000000000D7EE                 db    0
.eh_frame_hdr:000000000000D7EF                 db    0
.eh_frame_hdr:000000000000D7F0                 db  54h ; T
.eh_frame_hdr:000000000000D7F1                 db 0AEh
.eh_frame_hdr:000000000000D7F2                 db 0FFh
.eh_frame_hdr:000000000000D7F3                 db 0FFh
.eh_frame_hdr:000000000000D7F4                 db 0ECh
.eh_frame_hdr:000000000000D7F5                 db  15h
.eh_frame_hdr:000000000000D7F6                 db    0
.eh_frame_hdr:000000000000D7F7                 db    0
.eh_frame_hdr:000000000000D7F8                 db    4
.eh_frame_hdr:000000000000D7F9                 db 0AFh
.eh_frame_hdr:000000000000D7FA                 db 0FFh
.eh_frame_hdr:000000000000D7FB                 db 0FFh
.eh_frame_hdr:000000000000D7FC                 db  14h
.eh_frame_hdr:000000000000D7FD                 db  16h
.eh_frame_hdr:000000000000D7FE                 db    0
.eh_frame_hdr:000000000000D7FF                 db    0
.eh_frame_hdr:000000000000D800                 db  24h ; $
.eh_frame_hdr:000000000000D801                 db 0B3h
.eh_frame_hdr:000000000000D802                 db 0FFh
.eh_frame_hdr:000000000000D803                 db 0FFh
.eh_frame_hdr:000000000000D804                 db  64h ; d
.eh_frame_hdr:000000000000D805                 db  16h
.eh_frame_hdr:000000000000D806                 db    0
.eh_frame_hdr:000000000000D807                 db    0
.eh_frame_hdr:000000000000D808                 db 0A4h
.eh_frame_hdr:000000000000D809                 db 0B3h
.eh_frame_hdr:000000000000D80A                 db 0FFh
.eh_frame_hdr:000000000000D80B                 db 0FFh
.eh_frame_hdr:000000000000D80C                 db  9Ch
.eh_frame_hdr:000000000000D80D                 db  16h
.eh_frame_hdr:000000000000D80E                 db    0
.eh_frame_hdr:000000000000D80F                 db    0
.eh_frame_hdr:000000000000D810                 db 0E4h
.eh_frame_hdr:000000000000D811                 db 0B3h
.eh_frame_hdr:000000000000D812                 db 0FFh
.eh_frame_hdr:000000000000D813                 db 0FFh
.eh_frame_hdr:000000000000D814                 db 0BCh
.eh_frame_hdr:000000000000D815                 db  16h
.eh_frame_hdr:000000000000D816                 db    0
.eh_frame_hdr:000000000000D817                 db    0
.eh_frame_hdr:000000000000D818                 db  44h ; D
.eh_frame_hdr:000000000000D819                 db 0B4h
.eh_frame_hdr:000000000000D81A                 db 0FFh
.eh_frame_hdr:000000000000D81B                 db 0FFh
.eh_frame_hdr:000000000000D81C                 db 0ECh
.eh_frame_hdr:000000000000D81D                 db  16h
.eh_frame_hdr:000000000000D81E                 db    0
.eh_frame_hdr:000000000000D81F                 db    0
.eh_frame_hdr:000000000000D820                 db 0D4h
.eh_frame_hdr:000000000000D821                 db 0B4h
.eh_frame_hdr:000000000000D822                 db 0FFh
.eh_frame_hdr:000000000000D823                 db 0FFh
.eh_frame_hdr:000000000000D824                 db  2Ch ; ,
.eh_frame_hdr:000000000000D825                 db  17h
.eh_frame_hdr:000000000000D826                 db    0
.eh_frame_hdr:000000000000D827                 db    0
.eh_frame_hdr:000000000000D828                 db 0D4h
.eh_frame_hdr:000000000000D829                 db 0B5h
.eh_frame_hdr:000000000000D82A                 db 0FFh
.eh_frame_hdr:000000000000D82B                 db 0FFh
.eh_frame_hdr:000000000000D82C                 db  6Ch ; l
.eh_frame_hdr:000000000000D82D                 db  17h
.eh_frame_hdr:000000000000D82E                 db    0
.eh_frame_hdr:000000000000D82F                 db    0
.eh_frame_hdr:000000000000D830                 db 0F4h
.eh_frame_hdr:000000000000D831                 db 0B5h
.eh_frame_hdr:000000000000D832                 db 0FFh
.eh_frame_hdr:000000000000D833                 db 0FFh
.eh_frame_hdr:000000000000D834                 db  84h
.eh_frame_hdr:000000000000D835                 db  17h
.eh_frame_hdr:000000000000D836                 db    0
.eh_frame_hdr:000000000000D837                 db    0
.eh_frame_hdr:000000000000D838                 db  74h ; t
.eh_frame_hdr:000000000000D839                 db 0B6h
.eh_frame_hdr:000000000000D83A                 db 0FFh
.eh_frame_hdr:000000000000D83B                 db 0FFh
.eh_frame_hdr:000000000000D83C                 db 0D4h
.eh_frame_hdr:000000000000D83D                 db  17h
.eh_frame_hdr:000000000000D83E                 db    0
.eh_frame_hdr:000000000000D83F                 db    0
.eh_frame_hdr:000000000000D840                 db 0D4h
.eh_frame_hdr:000000000000D841                 db 0B6h
.eh_frame_hdr:000000000000D842                 db 0FFh
.eh_frame_hdr:000000000000D843                 db 0FFh
.eh_frame_hdr:000000000000D844                 db 0F4h
.eh_frame_hdr:000000000000D845                 db  17h
.eh_frame_hdr:000000000000D846                 db    0
.eh_frame_hdr:000000000000D847                 db    0
.eh_frame_hdr:000000000000D848                 db  14h
.eh_frame_hdr:000000000000D849                 db 0B7h
.eh_frame_hdr:000000000000D84A                 db 0FFh
.eh_frame_hdr:000000000000D84B                 db 0FFh
.eh_frame_hdr:000000000000D84C                 db  14h
.eh_frame_hdr:000000000000D84D                 db  18h
.eh_frame_hdr:000000000000D84E                 db    0
.eh_frame_hdr:000000000000D84F                 db    0
.eh_frame_hdr:000000000000D850                 db  24h ; $
.eh_frame_hdr:000000000000D851                 db 0B7h
.eh_frame_hdr:000000000000D852                 db 0FFh
.eh_frame_hdr:000000000000D853                 db 0FFh
.eh_frame_hdr:000000000000D854                 db  2Ch ; ,
.eh_frame_hdr:000000000000D855                 db  18h
.eh_frame_hdr:000000000000D856                 db    0
.eh_frame_hdr:000000000000D857                 db    0
.eh_frame_hdr:000000000000D858                 db  44h ; D
.eh_frame_hdr:000000000000D859                 db 0C8h
.eh_frame_hdr:000000000000D85A                 db 0FFh
.eh_frame_hdr:000000000000D85B                 db 0FFh
.eh_frame_hdr:000000000000D85C                 db  5Ch ; \
.eh_frame_hdr:000000000000D85D                 db  18h
.eh_frame_hdr:000000000000D85E                 db    0
.eh_frame_hdr:000000000000D85F                 db    0
.eh_frame_hdr:000000000000D860                 db  44h ; D
.eh_frame_hdr:000000000000D861                 db 0CAh
.eh_frame_hdr:000000000000D862                 db 0FFh
.eh_frame_hdr:000000000000D863                 db 0FFh
.eh_frame_hdr:000000000000D864                 db  74h ; t
.eh_frame_hdr:000000000000D865                 db  18h
.eh_frame_hdr:000000000000D866                 db    0
.eh_frame_hdr:000000000000D867                 db    0
.eh_frame_hdr:000000000000D868                 db  34h ; 4
.eh_frame_hdr:000000000000D869                 db 0D7h
.eh_frame_hdr:000000000000D86A                 db 0FFh
.eh_frame_hdr:000000000000D86B                 db 0FFh
.eh_frame_hdr:000000000000D86C                 db 0C4h
.eh_frame_hdr:000000000000D86D                 db  18h
.eh_frame_hdr:000000000000D86E                 db    0
.eh_frame_hdr:000000000000D86F                 db    0
.eh_frame_hdr:000000000000D870                 db 0A4h
.eh_frame_hdr:000000000000D871                 db 0D7h
.eh_frame_hdr:000000000000D872                 db 0FFh
.eh_frame_hdr:000000000000D873                 db 0FFh
.eh_frame_hdr:000000000000D874                 db  0Ch
.eh_frame_hdr:000000000000D875                 db  19h
.eh_frame_hdr:000000000000D876                 db    0
.eh_frame_hdr:000000000000D877                 db    0
.eh_frame_hdr:000000000000D878                 db 0B4h
.eh_frame_hdr:000000000000D879                 db 0D7h
.eh_frame_hdr:000000000000D87A                 db 0FFh
.eh_frame_hdr:000000000000D87B                 db 0FFh
.eh_frame_hdr:000000000000D87C                 db  24h ; $
.eh_frame_hdr:000000000000D87D                 db  19h
.eh_frame_hdr:000000000000D87E                 db    0
.eh_frame_hdr:000000000000D87F                 db    0
.eh_frame_hdr:000000000000D87F _eh_frame_hdr   ends
.eh_frame_hdr:000000000000D87F
.eh_frame:000000000000D880 ; ===========================================================================
.eh_frame:000000000000D880
.eh_frame:000000000000D880 ; Segment type: Pure data
.eh_frame:000000000000D880 ; Segment permissions: Read
.eh_frame:000000000000D880 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000D880                 assume cs:_eh_frame
.eh_frame:000000000000D880                 ;org 0D880h
.eh_frame:000000000000D880                 db  14h
.eh_frame:000000000000D881                 db    0
.eh_frame:000000000000D882                 db    0
.eh_frame:000000000000D883                 db    0
.eh_frame:000000000000D884                 db    0
.eh_frame:000000000000D885                 db    0
.eh_frame:000000000000D886                 db    0
.eh_frame:000000000000D887                 db    0
.eh_frame:000000000000D888                 db    1
.eh_frame:000000000000D889                 db  7Ah ; z
.eh_frame:000000000000D88A                 db  52h ; R
.eh_frame:000000000000D88B                 db    0
.eh_frame:000000000000D88C                 db    1
.eh_frame:000000000000D88D                 db  78h ; x
.eh_frame:000000000000D88E                 db  10h
.eh_frame:000000000000D88F                 db    1
.eh_frame:000000000000D890                 db  1Bh
.eh_frame:000000000000D891                 db  0Ch
.eh_frame:000000000000D892                 db    7
.eh_frame:000000000000D893                 db    8
.eh_frame:000000000000D894                 db  90h
.eh_frame:000000000000D895                 db    1
.eh_frame:000000000000D896                 db    7
.eh_frame:000000000000D897                 db  10h
.eh_frame:000000000000D898                 db  14h
.eh_frame:000000000000D899                 db    0
.eh_frame:000000000000D89A                 db    0
.eh_frame:000000000000D89B                 db    0
.eh_frame:000000000000D89C                 db  1Ch
.eh_frame:000000000000D89D                 db    0
.eh_frame:000000000000D89E                 db    0
.eh_frame:000000000000D89F                 db    0
.eh_frame:000000000000D8A0                 db 0D0h
.eh_frame:000000000000D8A1                 db  54h ; T
.eh_frame:000000000000D8A2                 db 0FFh
.eh_frame:000000000000D8A3                 db 0FFh
.eh_frame:000000000000D8A4                 db  2Bh ; +
.eh_frame:000000000000D8A5                 db    0
.eh_frame:000000000000D8A6                 db    0
.eh_frame:000000000000D8A7                 db    0
.eh_frame:000000000000D8A8                 db    0
.eh_frame:000000000000D8A9                 db    0
.eh_frame:000000000000D8AA                 db    0
.eh_frame:000000000000D8AB                 db    0
.eh_frame:000000000000D8AC                 db    0
.eh_frame:000000000000D8AD                 db    0
.eh_frame:000000000000D8AE                 db    0
.eh_frame:000000000000D8AF                 db    0
.eh_frame:000000000000D8B0                 db  14h
.eh_frame:000000000000D8B1                 db    0
.eh_frame:000000000000D8B2                 db    0
.eh_frame:000000000000D8B3                 db    0
.eh_frame:000000000000D8B4                 db    0
.eh_frame:000000000000D8B5                 db    0
.eh_frame:000000000000D8B6                 db    0
.eh_frame:000000000000D8B7                 db    0
.eh_frame:000000000000D8B8                 db    1
.eh_frame:000000000000D8B9                 db  7Ah ; z
.eh_frame:000000000000D8BA                 db  52h ; R
.eh_frame:000000000000D8BB                 db    0
.eh_frame:000000000000D8BC                 db    1
.eh_frame:000000000000D8BD                 db  78h ; x
.eh_frame:000000000000D8BE                 db  10h
.eh_frame:000000000000D8BF                 db    1
.eh_frame:000000000000D8C0                 db  1Bh
.eh_frame:000000000000D8C1                 db  0Ch
.eh_frame:000000000000D8C2                 db    7
.eh_frame:000000000000D8C3                 db    8
.eh_frame:000000000000D8C4                 db  90h
.eh_frame:000000000000D8C5                 db    1
.eh_frame:000000000000D8C6                 db    0
.eh_frame:000000000000D8C7                 db    0
.eh_frame:000000000000D8C8                 db  24h ; $
.eh_frame:000000000000D8C9                 db    0
.eh_frame:000000000000D8CA                 db    0
.eh_frame:000000000000D8CB                 db    0
.eh_frame:000000000000D8CC                 db  1Ch
.eh_frame:000000000000D8CD                 db    0
.eh_frame:000000000000D8CE                 db    0
.eh_frame:000000000000D8CF                 db    0
.eh_frame:000000000000D8D0                 db 0E0h
.eh_frame:000000000000D8D1                 db  3Eh ; >
.eh_frame:000000000000D8D2                 db 0FFh
.eh_frame:000000000000D8D3                 db 0FFh
.eh_frame:000000000000D8D4                 db 0B0h
.eh_frame:000000000000D8D5                 db    3
.eh_frame:000000000000D8D6                 db    0
.eh_frame:000000000000D8D7                 db    0
.eh_frame:000000000000D8D8                 db    0
.eh_frame:000000000000D8D9                 db  0Eh
.eh_frame:000000000000D8DA                 db  10h
.eh_frame:000000000000D8DB                 db  46h ; F
.eh_frame:000000000000D8DC                 db  0Eh
.eh_frame:000000000000D8DD                 db  18h
.eh_frame:000000000000D8DE                 db  4Ah ; J
.eh_frame:000000000000D8DF                 db  0Fh
.eh_frame:000000000000D8E0                 db  0Bh
.eh_frame:000000000000D8E1                 db  77h ; w
.eh_frame:000000000000D8E2                 db    8
.eh_frame:000000000000D8E3                 db  80h
.eh_frame:000000000000D8E4                 db    0
.eh_frame:000000000000D8E5                 db  3Fh ; ?
.eh_frame:000000000000D8E6                 db  1Ah
.eh_frame:000000000000D8E7                 db  3Bh ; ;
.eh_frame:000000000000D8E8                 db  2Ah ; *
.eh_frame:000000000000D8E9                 db  33h ; 3
.eh_frame:000000000000D8EA                 db  24h ; $
.eh_frame:000000000000D8EB                 db  22h ; "
.eh_frame:000000000000D8EC                 db    0
.eh_frame:000000000000D8ED                 db    0
.eh_frame:000000000000D8EE                 db    0
.eh_frame:000000000000D8EF                 db    0
.eh_frame:000000000000D8F0                 db  14h
.eh_frame:000000000000D8F1                 db    0
.eh_frame:000000000000D8F2                 db    0
.eh_frame:000000000000D8F3                 db    0
.eh_frame:000000000000D8F4                 db  44h ; D
.eh_frame:000000000000D8F5                 db    0
.eh_frame:000000000000D8F6                 db    0
.eh_frame:000000000000D8F7                 db    0
.eh_frame:000000000000D8F8                 db  68h ; h
.eh_frame:000000000000D8F9                 db  42h ; B
.eh_frame:000000000000D8FA                 db 0FFh
.eh_frame:000000000000D8FB                 db 0FFh
.eh_frame:000000000000D8FC                 db    8
.eh_frame:000000000000D8FD                 db    0
.eh_frame:000000000000D8FE                 db    0
.eh_frame:000000000000D8FF                 db    0
.eh_frame:000000000000D900                 db    0
.eh_frame:000000000000D901                 db    0
.eh_frame:000000000000D902                 db    0
.eh_frame:000000000000D903                 db    0
.eh_frame:000000000000D904                 db    0
.eh_frame:000000000000D905                 db    0
.eh_frame:000000000000D906                 db    0
.eh_frame:000000000000D907                 db    0
.eh_frame:000000000000D908                 db  10h
.eh_frame:000000000000D909                 db    0
.eh_frame:000000000000D90A                 db    0
.eh_frame:000000000000D90B                 db    0
.eh_frame:000000000000D90C                 db  5Ch ; \
.eh_frame:000000000000D90D                 db    0
.eh_frame:000000000000D90E                 db    0
.eh_frame:000000000000D90F                 db    0
.eh_frame:000000000000D910                 db  70h ; p
.eh_frame:000000000000D911                 db  55h ; U
.eh_frame:000000000000D912                 db 0FFh
.eh_frame:000000000000D913                 db 0FFh
.eh_frame:000000000000D914                 db    2
.eh_frame:000000000000D915                 db    0
.eh_frame:000000000000D916                 db    0
.eh_frame:000000000000D917                 db    0
.eh_frame:000000000000D918                 db    0
.eh_frame:000000000000D919                 db    0
.eh_frame:000000000000D91A                 db    0
.eh_frame:000000000000D91B                 db    0
.eh_frame:000000000000D91C                 db  18h
.eh_frame:000000000000D91D                 db    0
.eh_frame:000000000000D91E                 db    0
.eh_frame:000000000000D91F                 db    0
.eh_frame:000000000000D920                 db  70h ; p
.eh_frame:000000000000D921                 db    0
.eh_frame:000000000000D922                 db    0
.eh_frame:000000000000D923                 db    0
.eh_frame:000000000000D924                 db  6Ch ; l
.eh_frame:000000000000D925                 db  55h ; U
.eh_frame:000000000000D926                 db 0FFh
.eh_frame:000000000000D927                 db 0FFh
.eh_frame:000000000000D928                 db  23h ; #
.eh_frame:000000000000D929                 db    1
.eh_frame:000000000000D92A                 db    0
.eh_frame:000000000000D92B                 db    0
.eh_frame:000000000000D92C                 db    0
.eh_frame:000000000000D92D                 db  44h ; D
.eh_frame:000000000000D92E                 db  0Eh
.eh_frame:000000000000D92F                 db  40h ; @
.eh_frame:000000000000D930                 db    2
.eh_frame:000000000000D931                 db  87h
.eh_frame:000000000000D932                 db  0Ah
.eh_frame:000000000000D933                 db  0Eh
.eh_frame:000000000000D934                 db    8
.eh_frame:000000000000D935                 db  45h ; E
.eh_frame:000000000000D936                 db  0Bh
.eh_frame:000000000000D937                 db    0
.eh_frame:000000000000D938                 db  30h ; 0
.eh_frame:000000000000D939                 db    0
.eh_frame:000000000000D93A                 db    0
.eh_frame:000000000000D93B                 db    0
.eh_frame:000000000000D93C                 db  8Ch
.eh_frame:000000000000D93D                 db    0
.eh_frame:000000000000D93E                 db    0
.eh_frame:000000000000D93F                 db    0
.eh_frame:000000000000D940                 db  80h
.eh_frame:000000000000D941                 db  56h ; V
.eh_frame:000000000000D942                 db 0FFh
.eh_frame:000000000000D943                 db 0FFh
.eh_frame:000000000000D944                 db  76h ; v
.eh_frame:000000000000D945                 db    0
.eh_frame:000000000000D946                 db    0
.eh_frame:000000000000D947                 db    0
.eh_frame:000000000000D948                 db    0
.eh_frame:000000000000D949                 db  48h ; H
.eh_frame:000000000000D94A                 db  0Eh
.eh_frame:000000000000D94B                 db  10h
.eh_frame:000000000000D94C                 db  86h
.eh_frame:000000000000D94D                 db    2
.eh_frame:000000000000D94E                 db  41h ; A
.eh_frame:000000000000D94F                 db  0Eh
.eh_frame:000000000000D950                 db  18h
.eh_frame:000000000000D951                 db  83h
.eh_frame:000000000000D952                 db    3
.eh_frame:000000000000D953                 db  4Ah ; J
.eh_frame:000000000000D954                 db  0Eh
.eh_frame:000000000000D955                 db  20h
.eh_frame:000000000000D956                 db  73h ; s
.eh_frame:000000000000D957                 db  0Eh
.eh_frame:000000000000D958                 db  18h
.eh_frame:000000000000D959                 db  44h ; D
.eh_frame:000000000000D95A                 db  0Eh
.eh_frame:000000000000D95B                 db  10h
.eh_frame:000000000000D95C                 db  41h ; A
.eh_frame:000000000000D95D                 db  0Eh
.eh_frame:000000000000D95E                 db    8
.eh_frame:000000000000D95F                 db  41h ; A
.eh_frame:000000000000D960                 db 0C3h
.eh_frame:000000000000D961                 db 0C6h
.eh_frame:000000000000D962                 db  43h ; C
.eh_frame:000000000000D963                 db  0Eh
.eh_frame:000000000000D964                 db  20h
.eh_frame:000000000000D965                 db  83h
.eh_frame:000000000000D966                 db    3
.eh_frame:000000000000D967                 db  86h
.eh_frame:000000000000D968                 db    2
.eh_frame:000000000000D969                 db    0
.eh_frame:000000000000D96A                 db    0
.eh_frame:000000000000D96B                 db    0
.eh_frame:000000000000D96C                 db  48h ; H
.eh_frame:000000000000D96D                 db    0
.eh_frame:000000000000D96E                 db    0
.eh_frame:000000000000D96F                 db    0
.eh_frame:000000000000D970                 db 0C0h
.eh_frame:000000000000D971                 db    0
.eh_frame:000000000000D972                 db    0
.eh_frame:000000000000D973                 db    0
.eh_frame:000000000000D974                 db 0CCh
.eh_frame:000000000000D975                 db  56h ; V
.eh_frame:000000000000D976                 db 0FFh
.eh_frame:000000000000D977                 db 0FFh
.eh_frame:000000000000D978                 db 0ECh
.eh_frame:000000000000D979                 db    0
.eh_frame:000000000000D97A                 db    0
.eh_frame:000000000000D97B                 db    0
.eh_frame:000000000000D97C                 db    0
.eh_frame:000000000000D97D                 db  42h ; B
.eh_frame:000000000000D97E                 db  0Eh
.eh_frame:000000000000D97F                 db  10h
.eh_frame:000000000000D980                 db  8Fh
.eh_frame:000000000000D981                 db    2
.eh_frame:000000000000D982                 db  42h ; B
.eh_frame:000000000000D983                 db  0Eh
.eh_frame:000000000000D984                 db  18h
.eh_frame:000000000000D985                 db  8Eh
.eh_frame:000000000000D986                 db    3
.eh_frame:000000000000D987                 db  42h ; B
.eh_frame:000000000000D988                 db  0Eh
.eh_frame:000000000000D989                 db  20h
.eh_frame:000000000000D98A                 db  8Dh
.eh_frame:000000000000D98B                 db    4
.eh_frame:000000000000D98C                 db  42h ; B
.eh_frame:000000000000D98D                 db  0Eh
.eh_frame:000000000000D98E                 db  28h ; (
.eh_frame:000000000000D98F                 db  8Ch
.eh_frame:000000000000D990                 db    5
.eh_frame:000000000000D991                 db  41h ; A
.eh_frame:000000000000D992                 db  0Eh
.eh_frame:000000000000D993                 db  30h ; 0
.eh_frame:000000000000D994                 db  86h
.eh_frame:000000000000D995                 db    6
.eh_frame:000000000000D996                 db  41h ; A
.eh_frame:000000000000D997                 db  0Eh
.eh_frame:000000000000D998                 db  38h ; 8
.eh_frame:000000000000D999                 db  83h
.eh_frame:000000000000D99A                 db    7
.eh_frame:000000000000D99B                 db  44h ; D
.eh_frame:000000000000D99C                 db  0Eh
.eh_frame:000000000000D99D                 db  60h ; `
.eh_frame:000000000000D99E                 db    2
.eh_frame:000000000000D99F                 db 0CEh
.eh_frame:000000000000D9A0                 db  0Ah
.eh_frame:000000000000D9A1                 db  0Eh
.eh_frame:000000000000D9A2                 db  38h ; 8
.eh_frame:000000000000D9A3                 db  41h ; A
.eh_frame:000000000000D9A4                 db  0Eh
.eh_frame:000000000000D9A5                 db  30h ; 0
.eh_frame:000000000000D9A6                 db  41h ; A
.eh_frame:000000000000D9A7                 db  0Eh
.eh_frame:000000000000D9A8                 db  28h ; (
.eh_frame:000000000000D9A9                 db  42h ; B
.eh_frame:000000000000D9AA                 db  0Eh
.eh_frame:000000000000D9AB                 db  20h
.eh_frame:000000000000D9AC                 db  42h ; B
.eh_frame:000000000000D9AD                 db  0Eh
.eh_frame:000000000000D9AE                 db  18h
.eh_frame:000000000000D9AF                 db  42h ; B
.eh_frame:000000000000D9B0                 db  0Eh
.eh_frame:000000000000D9B1                 db  10h
.eh_frame:000000000000D9B2                 db  42h ; B
.eh_frame:000000000000D9B3                 db  0Eh
.eh_frame:000000000000D9B4                 db    8
.eh_frame:000000000000D9B5                 db  41h ; A
.eh_frame:000000000000D9B6                 db  0Bh
.eh_frame:000000000000D9B7                 db    0
.eh_frame:000000000000D9B8                 db  48h ; H
.eh_frame:000000000000D9B9                 db    0
.eh_frame:000000000000D9BA                 db    0
.eh_frame:000000000000D9BB                 db    0
.eh_frame:000000000000D9BC                 db  0Ch
.eh_frame:000000000000D9BD                 db    1
.eh_frame:000000000000D9BE                 db    0
.eh_frame:000000000000D9BF                 db    0
.eh_frame:000000000000D9C0                 db  70h ; p
.eh_frame:000000000000D9C1                 db  57h ; W
.eh_frame:000000000000D9C2                 db 0FFh
.eh_frame:000000000000D9C3                 db 0FFh
.eh_frame:000000000000D9C4                 db 0F4h
.eh_frame:000000000000D9C5                 db    0
.eh_frame:000000000000D9C6                 db    0
.eh_frame:000000000000D9C7                 db    0
.eh_frame:000000000000D9C8                 db    0
.eh_frame:000000000000D9C9                 db  42h ; B
.eh_frame:000000000000D9CA                 db  0Eh
.eh_frame:000000000000D9CB                 db  10h
.eh_frame:000000000000D9CC                 db  8Fh
.eh_frame:000000000000D9CD                 db    2
.eh_frame:000000000000D9CE                 db  42h ; B
.eh_frame:000000000000D9CF                 db  0Eh
.eh_frame:000000000000D9D0                 db  18h
.eh_frame:000000000000D9D1                 db  8Eh
.eh_frame:000000000000D9D2                 db    3
.eh_frame:000000000000D9D3                 db  42h ; B
.eh_frame:000000000000D9D4                 db  0Eh
.eh_frame:000000000000D9D5                 db  20h
.eh_frame:000000000000D9D6                 db  8Dh
.eh_frame:000000000000D9D7                 db    4
.eh_frame:000000000000D9D8                 db  42h ; B
.eh_frame:000000000000D9D9                 db  0Eh
.eh_frame:000000000000D9DA                 db  28h ; (
.eh_frame:000000000000D9DB                 db  8Ch
.eh_frame:000000000000D9DC                 db    5
.eh_frame:000000000000D9DD                 db  41h ; A
.eh_frame:000000000000D9DE                 db  0Eh
.eh_frame:000000000000D9DF                 db  30h ; 0
.eh_frame:000000000000D9E0                 db  86h
.eh_frame:000000000000D9E1                 db    6
.eh_frame:000000000000D9E2                 db  41h ; A
.eh_frame:000000000000D9E3                 db  0Eh
.eh_frame:000000000000D9E4                 db  38h ; 8
.eh_frame:000000000000D9E5                 db  83h
.eh_frame:000000000000D9E6                 db    7
.eh_frame:000000000000D9E7                 db  44h ; D
.eh_frame:000000000000D9E8                 db  0Eh
.eh_frame:000000000000D9E9                 db  70h ; p
.eh_frame:000000000000D9EA                 db    2
.eh_frame:000000000000D9EB                 db 0D6h
.eh_frame:000000000000D9EC                 db  0Ah
.eh_frame:000000000000D9ED                 db  0Eh
.eh_frame:000000000000D9EE                 db  38h ; 8
.eh_frame:000000000000D9EF                 db  41h ; A
.eh_frame:000000000000D9F0                 db  0Eh
.eh_frame:000000000000D9F1                 db  30h ; 0
.eh_frame:000000000000D9F2                 db  41h ; A
.eh_frame:000000000000D9F3                 db  0Eh
.eh_frame:000000000000D9F4                 db  28h ; (
.eh_frame:000000000000D9F5                 db  42h ; B
.eh_frame:000000000000D9F6                 db  0Eh
.eh_frame:000000000000D9F7                 db  20h
.eh_frame:000000000000D9F8                 db  42h ; B
.eh_frame:000000000000D9F9                 db  0Eh
.eh_frame:000000000000D9FA                 db  18h
.eh_frame:000000000000D9FB                 db  42h ; B
.eh_frame:000000000000D9FC                 db  0Eh
.eh_frame:000000000000D9FD                 db  10h
.eh_frame:000000000000D9FE                 db  42h ; B
.eh_frame:000000000000D9FF                 db  0Eh
.eh_frame:000000000000DA00                 db    8
.eh_frame:000000000000DA01                 db  41h ; A
.eh_frame:000000000000DA02                 db  0Bh
.eh_frame:000000000000DA03                 db    0
.eh_frame:000000000000DA04                 db  48h ; H
.eh_frame:000000000000DA05                 db    0
.eh_frame:000000000000DA06                 db    0
.eh_frame:000000000000DA07                 db    0
.eh_frame:000000000000DA08                 db  58h ; X
.eh_frame:000000000000DA09                 db    1
.eh_frame:000000000000DA0A                 db    0
.eh_frame:000000000000DA0B                 db    0
.eh_frame:000000000000DA0C                 db  24h ; $
.eh_frame:000000000000DA0D                 db  58h ; X
.eh_frame:000000000000DA0E                 db 0FFh
.eh_frame:000000000000DA0F                 db 0FFh
.eh_frame:000000000000DA10                 db 0F4h
.eh_frame:000000000000DA11                 db    0
.eh_frame:000000000000DA12                 db    0
.eh_frame:000000000000DA13                 db    0
.eh_frame:000000000000DA14                 db    0
.eh_frame:000000000000DA15                 db  42h ; B
.eh_frame:000000000000DA16                 db  0Eh
.eh_frame:000000000000DA17                 db  10h
.eh_frame:000000000000DA18                 db  8Fh
.eh_frame:000000000000DA19                 db    2
.eh_frame:000000000000DA1A                 db  42h ; B
.eh_frame:000000000000DA1B                 db  0Eh
.eh_frame:000000000000DA1C                 db  18h
.eh_frame:000000000000DA1D                 db  8Eh
.eh_frame:000000000000DA1E                 db    3
.eh_frame:000000000000DA1F                 db  42h ; B
.eh_frame:000000000000DA20                 db  0Eh
.eh_frame:000000000000DA21                 db  20h
.eh_frame:000000000000DA22                 db  8Dh
.eh_frame:000000000000DA23                 db    4
.eh_frame:000000000000DA24                 db  42h ; B
.eh_frame:000000000000DA25                 db  0Eh
.eh_frame:000000000000DA26                 db  28h ; (
.eh_frame:000000000000DA27                 db  8Ch
.eh_frame:000000000000DA28                 db    5
.eh_frame:000000000000DA29                 db  41h ; A
.eh_frame:000000000000DA2A                 db  0Eh
.eh_frame:000000000000DA2B                 db  30h ; 0
.eh_frame:000000000000DA2C                 db  86h
.eh_frame:000000000000DA2D                 db    6
.eh_frame:000000000000DA2E                 db  41h ; A
.eh_frame:000000000000DA2F                 db  0Eh
.eh_frame:000000000000DA30                 db  38h ; 8
.eh_frame:000000000000DA31                 db  83h
.eh_frame:000000000000DA32                 db    7
.eh_frame:000000000000DA33                 db  44h ; D
.eh_frame:000000000000DA34                 db  0Eh
.eh_frame:000000000000DA35                 db  70h ; p
.eh_frame:000000000000DA36                 db    2
.eh_frame:000000000000DA37                 db 0D6h
.eh_frame:000000000000DA38                 db  0Ah
.eh_frame:000000000000DA39                 db  0Eh
.eh_frame:000000000000DA3A                 db  38h ; 8
.eh_frame:000000000000DA3B                 db  41h ; A
.eh_frame:000000000000DA3C                 db  0Eh
.eh_frame:000000000000DA3D                 db  30h ; 0
.eh_frame:000000000000DA3E                 db  41h ; A
.eh_frame:000000000000DA3F                 db  0Eh
.eh_frame:000000000000DA40                 db  28h ; (
.eh_frame:000000000000DA41                 db  42h ; B
.eh_frame:000000000000DA42                 db  0Eh
.eh_frame:000000000000DA43                 db  20h
.eh_frame:000000000000DA44                 db  42h ; B
.eh_frame:000000000000DA45                 db  0Eh
.eh_frame:000000000000DA46                 db  18h
.eh_frame:000000000000DA47                 db  42h ; B
.eh_frame:000000000000DA48                 db  0Eh
.eh_frame:000000000000DA49                 db  10h
.eh_frame:000000000000DA4A                 db  42h ; B
.eh_frame:000000000000DA4B                 db  0Eh
.eh_frame:000000000000DA4C                 db    8
.eh_frame:000000000000DA4D                 db  41h ; A
.eh_frame:000000000000DA4E                 db  0Bh
.eh_frame:000000000000DA4F                 db    0
.eh_frame:000000000000DA50                 db  48h ; H
.eh_frame:000000000000DA51                 db    0
.eh_frame:000000000000DA52                 db    0
.eh_frame:000000000000DA53                 db    0
.eh_frame:000000000000DA54                 db 0A4h
.eh_frame:000000000000DA55                 db    1
.eh_frame:000000000000DA56                 db    0
.eh_frame:000000000000DA57                 db    0
.eh_frame:000000000000DA58                 db 0D8h
.eh_frame:000000000000DA59                 db  58h ; X
.eh_frame:000000000000DA5A                 db 0FFh
.eh_frame:000000000000DA5B                 db 0FFh
.eh_frame:000000000000DA5C                 db 0F4h
.eh_frame:000000000000DA5D                 db    0
.eh_frame:000000000000DA5E                 db    0
.eh_frame:000000000000DA5F                 db    0
.eh_frame:000000000000DA60                 db    0
.eh_frame:000000000000DA61                 db  42h ; B
.eh_frame:000000000000DA62                 db  0Eh
.eh_frame:000000000000DA63                 db  10h
.eh_frame:000000000000DA64                 db  8Fh
.eh_frame:000000000000DA65                 db    2
.eh_frame:000000000000DA66                 db  42h ; B
.eh_frame:000000000000DA67                 db  0Eh
.eh_frame:000000000000DA68                 db  18h
.eh_frame:000000000000DA69                 db  8Eh
.eh_frame:000000000000DA6A                 db    3
.eh_frame:000000000000DA6B                 db  42h ; B
.eh_frame:000000000000DA6C                 db  0Eh
.eh_frame:000000000000DA6D                 db  20h
.eh_frame:000000000000DA6E                 db  8Dh
.eh_frame:000000000000DA6F                 db    4
.eh_frame:000000000000DA70                 db  42h ; B
.eh_frame:000000000000DA71                 db  0Eh
.eh_frame:000000000000DA72                 db  28h ; (
.eh_frame:000000000000DA73                 db  8Ch
.eh_frame:000000000000DA74                 db    5
.eh_frame:000000000000DA75                 db  41h ; A
.eh_frame:000000000000DA76                 db  0Eh
.eh_frame:000000000000DA77                 db  30h ; 0
.eh_frame:000000000000DA78                 db  86h
.eh_frame:000000000000DA79                 db    6
.eh_frame:000000000000DA7A                 db  41h ; A
.eh_frame:000000000000DA7B                 db  0Eh
.eh_frame:000000000000DA7C                 db  38h ; 8
.eh_frame:000000000000DA7D                 db  83h
.eh_frame:000000000000DA7E                 db    7
.eh_frame:000000000000DA7F                 db  47h ; G
.eh_frame:000000000000DA80                 db  0Eh
.eh_frame:000000000000DA81                 db  70h ; p
.eh_frame:000000000000DA82                 db    2
.eh_frame:000000000000DA83                 db 0D3h
.eh_frame:000000000000DA84                 db  0Ah
.eh_frame:000000000000DA85                 db  0Eh
.eh_frame:000000000000DA86                 db  38h ; 8
.eh_frame:000000000000DA87                 db  41h ; A
.eh_frame:000000000000DA88                 db  0Eh
.eh_frame:000000000000DA89                 db  30h ; 0
.eh_frame:000000000000DA8A                 db  41h ; A
.eh_frame:000000000000DA8B                 db  0Eh
.eh_frame:000000000000DA8C                 db  28h ; (
.eh_frame:000000000000DA8D                 db  42h ; B
.eh_frame:000000000000DA8E                 db  0Eh
.eh_frame:000000000000DA8F                 db  20h
.eh_frame:000000000000DA90                 db  42h ; B
.eh_frame:000000000000DA91                 db  0Eh
.eh_frame:000000000000DA92                 db  18h
.eh_frame:000000000000DA93                 db  42h ; B
.eh_frame:000000000000DA94                 db  0Eh
.eh_frame:000000000000DA95                 db  10h
.eh_frame:000000000000DA96                 db  42h ; B
.eh_frame:000000000000DA97                 db  0Eh
.eh_frame:000000000000DA98                 db    8
.eh_frame:000000000000DA99                 db  41h ; A
.eh_frame:000000000000DA9A                 db  0Bh
.eh_frame:000000000000DA9B                 db    0
.eh_frame:000000000000DA9C                 db  48h ; H
.eh_frame:000000000000DA9D                 db    0
.eh_frame:000000000000DA9E                 db    0
.eh_frame:000000000000DA9F                 db    0
.eh_frame:000000000000DAA0                 db 0F0h
.eh_frame:000000000000DAA1                 db    1
.eh_frame:000000000000DAA2                 db    0
.eh_frame:000000000000DAA3                 db    0
.eh_frame:000000000000DAA4                 db  8Ch
.eh_frame:000000000000DAA5                 db  59h ; Y
.eh_frame:000000000000DAA6                 db 0FFh
.eh_frame:000000000000DAA7                 db 0FFh
.eh_frame:000000000000DAA8                 db 0E4h
.eh_frame:000000000000DAA9                 db    0
.eh_frame:000000000000DAAA                 db    0
.eh_frame:000000000000DAAB                 db    0
.eh_frame:000000000000DAAC                 db    0
.eh_frame:000000000000DAAD                 db  42h ; B
.eh_frame:000000000000DAAE                 db  0Eh
.eh_frame:000000000000DAAF                 db  10h
.eh_frame:000000000000DAB0                 db  8Fh
.eh_frame:000000000000DAB1                 db    2
.eh_frame:000000000000DAB2                 db  42h ; B
.eh_frame:000000000000DAB3                 db  0Eh
.eh_frame:000000000000DAB4                 db  18h
.eh_frame:000000000000DAB5                 db  8Eh
.eh_frame:000000000000DAB6                 db    3
.eh_frame:000000000000DAB7                 db  42h ; B
.eh_frame:000000000000DAB8                 db  0Eh
.eh_frame:000000000000DAB9                 db  20h
.eh_frame:000000000000DABA                 db  8Dh
.eh_frame:000000000000DABB                 db    4
.eh_frame:000000000000DABC                 db  42h ; B
.eh_frame:000000000000DABD                 db  0Eh
.eh_frame:000000000000DABE                 db  28h ; (
.eh_frame:000000000000DABF                 db  8Ch
.eh_frame:000000000000DAC0                 db    5
.eh_frame:000000000000DAC1                 db  41h ; A
.eh_frame:000000000000DAC2                 db  0Eh
.eh_frame:000000000000DAC3                 db  30h ; 0
.eh_frame:000000000000DAC4                 db  86h
.eh_frame:000000000000DAC5                 db    6
.eh_frame:000000000000DAC6                 db  41h ; A
.eh_frame:000000000000DAC7                 db  0Eh
.eh_frame:000000000000DAC8                 db  38h ; 8
.eh_frame:000000000000DAC9                 db  83h
.eh_frame:000000000000DACA                 db    7
.eh_frame:000000000000DACB                 db  44h ; D
.eh_frame:000000000000DACC                 db  0Eh
.eh_frame:000000000000DACD                 db  70h ; p
.eh_frame:000000000000DACE                 db    2
.eh_frame:000000000000DACF                 db 0C6h
.eh_frame:000000000000DAD0                 db  0Ah
.eh_frame:000000000000DAD1                 db  0Eh
.eh_frame:000000000000DAD2                 db  38h ; 8
.eh_frame:000000000000DAD3                 db  41h ; A
.eh_frame:000000000000DAD4                 db  0Eh
.eh_frame:000000000000DAD5                 db  30h ; 0
.eh_frame:000000000000DAD6                 db  41h ; A
.eh_frame:000000000000DAD7                 db  0Eh
.eh_frame:000000000000DAD8                 db  28h ; (
.eh_frame:000000000000DAD9                 db  42h ; B
.eh_frame:000000000000DADA                 db  0Eh
.eh_frame:000000000000DADB                 db  20h
.eh_frame:000000000000DADC                 db  42h ; B
.eh_frame:000000000000DADD                 db  0Eh
.eh_frame:000000000000DADE                 db  18h
.eh_frame:000000000000DADF                 db  42h ; B
.eh_frame:000000000000DAE0                 db  0Eh
.eh_frame:000000000000DAE1                 db  10h
.eh_frame:000000000000DAE2                 db  42h ; B
.eh_frame:000000000000DAE3                 db  0Eh
.eh_frame:000000000000DAE4                 db    8
.eh_frame:000000000000DAE5                 db  41h ; A
.eh_frame:000000000000DAE6                 db  0Bh
.eh_frame:000000000000DAE7                 db    0
.eh_frame:000000000000DAE8                 db  48h ; H
.eh_frame:000000000000DAE9                 db    0
.eh_frame:000000000000DAEA                 db    0
.eh_frame:000000000000DAEB                 db    0
.eh_frame:000000000000DAEC                 db  3Ch ; <
.eh_frame:000000000000DAED                 db    2
.eh_frame:000000000000DAEE                 db    0
.eh_frame:000000000000DAEF                 db    0
.eh_frame:000000000000DAF0                 db  30h ; 0
.eh_frame:000000000000DAF1                 db  5Ah ; Z
.eh_frame:000000000000DAF2                 db 0FFh
.eh_frame:000000000000DAF3                 db 0FFh
.eh_frame:000000000000DAF4                 db 0E4h
.eh_frame:000000000000DAF5                 db    0
.eh_frame:000000000000DAF6                 db    0
.eh_frame:000000000000DAF7                 db    0
.eh_frame:000000000000DAF8                 db    0
.eh_frame:000000000000DAF9                 db  42h ; B
.eh_frame:000000000000DAFA                 db  0Eh
.eh_frame:000000000000DAFB                 db  10h
.eh_frame:000000000000DAFC                 db  8Fh
.eh_frame:000000000000DAFD                 db    2
.eh_frame:000000000000DAFE                 db  42h ; B
.eh_frame:000000000000DAFF                 db  0Eh
.eh_frame:000000000000DB00                 db  18h
.eh_frame:000000000000DB01                 db  8Eh
.eh_frame:000000000000DB02                 db    3
.eh_frame:000000000000DB03                 db  42h ; B
.eh_frame:000000000000DB04                 db  0Eh
.eh_frame:000000000000DB05                 db  20h
.eh_frame:000000000000DB06                 db  8Dh
.eh_frame:000000000000DB07                 db    4
.eh_frame:000000000000DB08                 db  42h ; B
.eh_frame:000000000000DB09                 db  0Eh
.eh_frame:000000000000DB0A                 db  28h ; (
.eh_frame:000000000000DB0B                 db  8Ch
.eh_frame:000000000000DB0C                 db    5
.eh_frame:000000000000DB0D                 db  41h ; A
.eh_frame:000000000000DB0E                 db  0Eh
.eh_frame:000000000000DB0F                 db  30h ; 0
.eh_frame:000000000000DB10                 db  86h
.eh_frame:000000000000DB11                 db    6
.eh_frame:000000000000DB12                 db  41h ; A
.eh_frame:000000000000DB13                 db  0Eh
.eh_frame:000000000000DB14                 db  38h ; 8
.eh_frame:000000000000DB15                 db  83h
.eh_frame:000000000000DB16                 db    7
.eh_frame:000000000000DB17                 db  44h ; D
.eh_frame:000000000000DB18                 db  0Eh
.eh_frame:000000000000DB19                 db  70h ; p
.eh_frame:000000000000DB1A                 db    2
.eh_frame:000000000000DB1B                 db 0C6h
.eh_frame:000000000000DB1C                 db  0Ah
.eh_frame:000000000000DB1D                 db  0Eh
.eh_frame:000000000000DB1E                 db  38h ; 8
.eh_frame:000000000000DB1F                 db  41h ; A
.eh_frame:000000000000DB20                 db  0Eh
.eh_frame:000000000000DB21                 db  30h ; 0
.eh_frame:000000000000DB22                 db  41h ; A
.eh_frame:000000000000DB23                 db  0Eh
.eh_frame:000000000000DB24                 db  28h ; (
.eh_frame:000000000000DB25                 db  42h ; B
.eh_frame:000000000000DB26                 db  0Eh
.eh_frame:000000000000DB27                 db  20h
.eh_frame:000000000000DB28                 db  42h ; B
.eh_frame:000000000000DB29                 db  0Eh
.eh_frame:000000000000DB2A                 db  18h
.eh_frame:000000000000DB2B                 db  42h ; B
.eh_frame:000000000000DB2C                 db  0Eh
.eh_frame:000000000000DB2D                 db  10h
.eh_frame:000000000000DB2E                 db  42h ; B
.eh_frame:000000000000DB2F                 db  0Eh
.eh_frame:000000000000DB30                 db    8
.eh_frame:000000000000DB31                 db  41h ; A
.eh_frame:000000000000DB32                 db  0Bh
.eh_frame:000000000000DB33                 db    0
.eh_frame:000000000000DB34                 db  44h ; D
.eh_frame:000000000000DB35                 db    0
.eh_frame:000000000000DB36                 db    0
.eh_frame:000000000000DB37                 db    0
.eh_frame:000000000000DB38                 db  88h
.eh_frame:000000000000DB39                 db    2
.eh_frame:000000000000DB3A                 db    0
.eh_frame:000000000000DB3B                 db    0
.eh_frame:000000000000DB3C                 db 0D4h
.eh_frame:000000000000DB3D                 db  5Ah ; Z
.eh_frame:000000000000DB3E                 db 0FFh
.eh_frame:000000000000DB3F                 db 0FFh
.eh_frame:000000000000DB40                 db  81h
.eh_frame:000000000000DB41                 db    0
.eh_frame:000000000000DB42                 db    0
.eh_frame:000000000000DB43                 db    0
.eh_frame:000000000000DB44                 db    0
.eh_frame:000000000000DB45                 db  42h ; B
.eh_frame:000000000000DB46                 db  0Eh
.eh_frame:000000000000DB47                 db  10h
.eh_frame:000000000000DB48                 db  8Fh
.eh_frame:000000000000DB49                 db    2
.eh_frame:000000000000DB4A                 db  42h ; B
.eh_frame:000000000000DB4B                 db  0Eh
.eh_frame:000000000000DB4C                 db  18h
.eh_frame:000000000000DB4D                 db  8Eh
.eh_frame:000000000000DB4E                 db    3
.eh_frame:000000000000DB4F                 db  42h ; B
.eh_frame:000000000000DB50                 db  0Eh
.eh_frame:000000000000DB51                 db  20h
.eh_frame:000000000000DB52                 db  8Dh
.eh_frame:000000000000DB53                 db    4
.eh_frame:000000000000DB54                 db  42h ; B
.eh_frame:000000000000DB55                 db  0Eh
.eh_frame:000000000000DB56                 db  28h ; (
.eh_frame:000000000000DB57                 db  8Ch
.eh_frame:000000000000DB58                 db    5
.eh_frame:000000000000DB59                 db  41h ; A
.eh_frame:000000000000DB5A                 db  0Eh
.eh_frame:000000000000DB5B                 db  30h ; 0
.eh_frame:000000000000DB5C                 db  86h
.eh_frame:000000000000DB5D                 db    6
.eh_frame:000000000000DB5E                 db  41h ; A
.eh_frame:000000000000DB5F                 db  0Eh
.eh_frame:000000000000DB60                 db  38h ; 8
.eh_frame:000000000000DB61                 db  83h
.eh_frame:000000000000DB62                 db    7
.eh_frame:000000000000DB63                 db  44h ; D
.eh_frame:000000000000DB64                 db  0Eh
.eh_frame:000000000000DB65                 db  50h ; P
.eh_frame:000000000000DB66                 db    2
.eh_frame:000000000000DB67                 db  68h ; h
.eh_frame:000000000000DB68                 db  0Eh
.eh_frame:000000000000DB69                 db  38h ; 8
.eh_frame:000000000000DB6A                 db  41h ; A
.eh_frame:000000000000DB6B                 db  0Eh
.eh_frame:000000000000DB6C                 db  30h ; 0
.eh_frame:000000000000DB6D                 db  41h ; A
.eh_frame:000000000000DB6E                 db  0Eh
.eh_frame:000000000000DB6F                 db  28h ; (
.eh_frame:000000000000DB70                 db  42h ; B
.eh_frame:000000000000DB71                 db  0Eh
.eh_frame:000000000000DB72                 db  20h
.eh_frame:000000000000DB73                 db  42h ; B
.eh_frame:000000000000DB74                 db  0Eh
.eh_frame:000000000000DB75                 db  18h
.eh_frame:000000000000DB76                 db  42h ; B
.eh_frame:000000000000DB77                 db  0Eh
.eh_frame:000000000000DB78                 db  10h
.eh_frame:000000000000DB79                 db  42h ; B
.eh_frame:000000000000DB7A                 db  0Eh
.eh_frame:000000000000DB7B                 db    8
.eh_frame:000000000000DB7C                 db  44h ; D
.eh_frame:000000000000DB7D                 db    0
.eh_frame:000000000000DB7E                 db    0
.eh_frame:000000000000DB7F                 db    0
.eh_frame:000000000000DB80                 db 0D0h
.eh_frame:000000000000DB81                 db    2
.eh_frame:000000000000DB82                 db    0
.eh_frame:000000000000DB83                 db    0
.eh_frame:000000000000DB84                 db  1Ch
.eh_frame:000000000000DB85                 db  5Bh ; [
.eh_frame:000000000000DB86                 db 0FFh
.eh_frame:000000000000DB87                 db 0FFh
.eh_frame:000000000000DB88                 db  81h
.eh_frame:000000000000DB89                 db    0
.eh_frame:000000000000DB8A                 db    0
.eh_frame:000000000000DB8B                 db    0
.eh_frame:000000000000DB8C                 db    0
.eh_frame:000000000000DB8D                 db  42h ; B
.eh_frame:000000000000DB8E                 db  0Eh
.eh_frame:000000000000DB8F                 db  10h
.eh_frame:000000000000DB90                 db  8Fh
.eh_frame:000000000000DB91                 db    2
.eh_frame:000000000000DB92                 db  42h ; B
.eh_frame:000000000000DB93                 db  0Eh
.eh_frame:000000000000DB94                 db  18h
.eh_frame:000000000000DB95                 db  8Eh
.eh_frame:000000000000DB96                 db    3
.eh_frame:000000000000DB97                 db  42h ; B
.eh_frame:000000000000DB98                 db  0Eh
.eh_frame:000000000000DB99                 db  20h
.eh_frame:000000000000DB9A                 db  8Dh
.eh_frame:000000000000DB9B                 db    4
.eh_frame:000000000000DB9C                 db  42h ; B
.eh_frame:000000000000DB9D                 db  0Eh
.eh_frame:000000000000DB9E                 db  28h ; (
.eh_frame:000000000000DB9F                 db  8Ch
.eh_frame:000000000000DBA0                 db    5
.eh_frame:000000000000DBA1                 db  41h ; A
.eh_frame:000000000000DBA2                 db  0Eh
.eh_frame:000000000000DBA3                 db  30h ; 0
.eh_frame:000000000000DBA4                 db  86h
.eh_frame:000000000000DBA5                 db    6
.eh_frame:000000000000DBA6                 db  41h ; A
.eh_frame:000000000000DBA7                 db  0Eh
.eh_frame:000000000000DBA8                 db  38h ; 8
.eh_frame:000000000000DBA9                 db  83h
.eh_frame:000000000000DBAA                 db    7
.eh_frame:000000000000DBAB                 db  44h ; D
.eh_frame:000000000000DBAC                 db  0Eh
.eh_frame:000000000000DBAD                 db  50h ; P
.eh_frame:000000000000DBAE                 db    2
.eh_frame:000000000000DBAF                 db  68h ; h
.eh_frame:000000000000DBB0                 db  0Eh
.eh_frame:000000000000DBB1                 db  38h ; 8
.eh_frame:000000000000DBB2                 db  41h ; A
.eh_frame:000000000000DBB3                 db  0Eh
.eh_frame:000000000000DBB4                 db  30h ; 0
.eh_frame:000000000000DBB5                 db  41h ; A
.eh_frame:000000000000DBB6                 db  0Eh
.eh_frame:000000000000DBB7                 db  28h ; (
.eh_frame:000000000000DBB8                 db  42h ; B
.eh_frame:000000000000DBB9                 db  0Eh
.eh_frame:000000000000DBBA                 db  20h
.eh_frame:000000000000DBBB                 db  42h ; B
.eh_frame:000000000000DBBC                 db  0Eh
.eh_frame:000000000000DBBD                 db  18h
.eh_frame:000000000000DBBE                 db  42h ; B
.eh_frame:000000000000DBBF                 db  0Eh
.eh_frame:000000000000DBC0                 db  10h
.eh_frame:000000000000DBC1                 db  42h ; B
.eh_frame:000000000000DBC2                 db  0Eh
.eh_frame:000000000000DBC3                 db    8
.eh_frame:000000000000DBC4                 db  58h ; X
.eh_frame:000000000000DBC5                 db    0
.eh_frame:000000000000DBC6                 db    0
.eh_frame:000000000000DBC7                 db    0
.eh_frame:000000000000DBC8                 db  18h
.eh_frame:000000000000DBC9                 db    3
.eh_frame:000000000000DBCA                 db    0
.eh_frame:000000000000DBCB                 db    0
.eh_frame:000000000000DBCC                 db  64h ; d
.eh_frame:000000000000DBCD                 db  5Bh ; [
.eh_frame:000000000000DBCE                 db 0FFh
.eh_frame:000000000000DBCF                 db 0FFh
.eh_frame:000000000000DBD0                 db  14h
.eh_frame:000000000000DBD1                 db    1
.eh_frame:000000000000DBD2                 db    0
.eh_frame:000000000000DBD3                 db    0
.eh_frame:000000000000DBD4                 db    0
.eh_frame:000000000000DBD5                 db  42h ; B
.eh_frame:000000000000DBD6                 db  0Eh
.eh_frame:000000000000DBD7                 db  10h
.eh_frame:000000000000DBD8                 db  8Fh
.eh_frame:000000000000DBD9                 db    2
.eh_frame:000000000000DBDA                 db  42h ; B
.eh_frame:000000000000DBDB                 db  0Eh
.eh_frame:000000000000DBDC                 db  18h
.eh_frame:000000000000DBDD                 db  8Eh
.eh_frame:000000000000DBDE                 db    3
.eh_frame:000000000000DBDF                 db  42h ; B
.eh_frame:000000000000DBE0                 db  0Eh
.eh_frame:000000000000DBE1                 db  20h
.eh_frame:000000000000DBE2                 db  8Dh
.eh_frame:000000000000DBE3                 db    4
.eh_frame:000000000000DBE4                 db  42h ; B
.eh_frame:000000000000DBE5                 db  0Eh
.eh_frame:000000000000DBE6                 db  28h ; (
.eh_frame:000000000000DBE7                 db  8Ch
.eh_frame:000000000000DBE8                 db    5
.eh_frame:000000000000DBE9                 db  44h ; D
.eh_frame:000000000000DBEA                 db  0Eh
.eh_frame:000000000000DBEB                 db  30h ; 0
.eh_frame:000000000000DBEC                 db  86h
.eh_frame:000000000000DBED                 db    6
.eh_frame:000000000000DBEE                 db  41h ; A
.eh_frame:000000000000DBEF                 db  0Eh
.eh_frame:000000000000DBF0                 db  38h ; 8
.eh_frame:000000000000DBF1                 db  83h
.eh_frame:000000000000DBF2                 db    7
.eh_frame:000000000000DBF3                 db  44h ; D
.eh_frame:000000000000DBF4                 db  0Eh
.eh_frame:000000000000DBF5                 db 0B0h
.eh_frame:000000000000DBF6                 db    1
.eh_frame:000000000000DBF7                 db    2
.eh_frame:000000000000DBF8                 db  4Dh ; M
.eh_frame:000000000000DBF9                 db  0Eh
.eh_frame:000000000000DBFA                 db 0C0h
.eh_frame:000000000000DBFB                 db    1
.eh_frame:000000000000DBFC                 db  76h ; v
.eh_frame:000000000000DBFD                 db  0Eh
.eh_frame:000000000000DBFE                 db 0B8h
.eh_frame:000000000000DBFF                 db    1
.eh_frame:000000000000DC00                 db  41h ; A
.eh_frame:000000000000DC01                 db  0Eh
.eh_frame:000000000000DC02                 db 0B0h
.eh_frame:000000000000DC03                 db    1
.eh_frame:000000000000DC04                 db    2
.eh_frame:000000000000DC05                 db  6Fh ; o
.eh_frame:000000000000DC06                 db  0Ah
.eh_frame:000000000000DC07                 db  0Eh
.eh_frame:000000000000DC08                 db  38h ; 8
.eh_frame:000000000000DC09                 db  41h ; A
.eh_frame:000000000000DC0A                 db  0Eh
.eh_frame:000000000000DC0B                 db  30h ; 0
.eh_frame:000000000000DC0C                 db  41h ; A
.eh_frame:000000000000DC0D                 db  0Eh
.eh_frame:000000000000DC0E                 db  28h ; (
.eh_frame:000000000000DC0F                 db  42h ; B
.eh_frame:000000000000DC10                 db  0Eh
.eh_frame:000000000000DC11                 db  20h
.eh_frame:000000000000DC12                 db  42h ; B
.eh_frame:000000000000DC13                 db  0Eh
.eh_frame:000000000000DC14                 db  18h
.eh_frame:000000000000DC15                 db  42h ; B
.eh_frame:000000000000DC16                 db  0Eh
.eh_frame:000000000000DC17                 db  10h
.eh_frame:000000000000DC18                 db  42h ; B
.eh_frame:000000000000DC19                 db  0Eh
.eh_frame:000000000000DC1A                 db    8
.eh_frame:000000000000DC1B                 db  41h ; A
.eh_frame:000000000000DC1C                 db  0Bh
.eh_frame:000000000000DC1D                 db    0
.eh_frame:000000000000DC1E                 db    0
.eh_frame:000000000000DC1F                 db    0
.eh_frame:000000000000DC20                 db  48h ; H
.eh_frame:000000000000DC21                 db    0
.eh_frame:000000000000DC22                 db    0
.eh_frame:000000000000DC23                 db    0
.eh_frame:000000000000DC24                 db  74h ; t
.eh_frame:000000000000DC25                 db    3
.eh_frame:000000000000DC26                 db    0
.eh_frame:000000000000DC27                 db    0
.eh_frame:000000000000DC28                 db  28h ; (
.eh_frame:000000000000DC29                 db  5Ch ; \
.eh_frame:000000000000DC2A                 db 0FFh
.eh_frame:000000000000DC2B                 db 0FFh
.eh_frame:000000000000DC2C                 db  14h
.eh_frame:000000000000DC2D                 db    1
.eh_frame:000000000000DC2E                 db    0
.eh_frame:000000000000DC2F                 db    0
.eh_frame:000000000000DC30                 db    0
.eh_frame:000000000000DC31                 db  42h ; B
.eh_frame:000000000000DC32                 db  0Eh
.eh_frame:000000000000DC33                 db  10h
.eh_frame:000000000000DC34                 db  8Fh
.eh_frame:000000000000DC35                 db    2
.eh_frame:000000000000DC36                 db  42h ; B
.eh_frame:000000000000DC37                 db  0Eh
.eh_frame:000000000000DC38                 db  18h
.eh_frame:000000000000DC39                 db  8Eh
.eh_frame:000000000000DC3A                 db    3
.eh_frame:000000000000DC3B                 db  42h ; B
.eh_frame:000000000000DC3C                 db  0Eh
.eh_frame:000000000000DC3D                 db  20h
.eh_frame:000000000000DC3E                 db  8Dh
.eh_frame:000000000000DC3F                 db    4
.eh_frame:000000000000DC40                 db  42h ; B
.eh_frame:000000000000DC41                 db  0Eh
.eh_frame:000000000000DC42                 db  28h ; (
.eh_frame:000000000000DC43                 db  8Ch
.eh_frame:000000000000DC44                 db    5
.eh_frame:000000000000DC45                 db  41h ; A
.eh_frame:000000000000DC46                 db  0Eh
.eh_frame:000000000000DC47                 db  30h ; 0
.eh_frame:000000000000DC48                 db  86h
.eh_frame:000000000000DC49                 db    6
.eh_frame:000000000000DC4A                 db  41h ; A
.eh_frame:000000000000DC4B                 db  0Eh
.eh_frame:000000000000DC4C                 db  38h ; 8
.eh_frame:000000000000DC4D                 db  83h
.eh_frame:000000000000DC4E                 db    7
.eh_frame:000000000000DC4F                 db  47h ; G
.eh_frame:000000000000DC50                 db  0Eh
.eh_frame:000000000000DC51                 db 0A0h
.eh_frame:000000000000DC52                 db    1
.eh_frame:000000000000DC53                 db    2
.eh_frame:000000000000DC54                 db 0F3h
.eh_frame:000000000000DC55                 db  0Ah
.eh_frame:000000000000DC56                 db  0Eh
.eh_frame:000000000000DC57                 db  38h ; 8
.eh_frame:000000000000DC58                 db  41h ; A
.eh_frame:000000000000DC59                 db  0Eh
.eh_frame:000000000000DC5A                 db  30h ; 0
.eh_frame:000000000000DC5B                 db  41h ; A
.eh_frame:000000000000DC5C                 db  0Eh
.eh_frame:000000000000DC5D                 db  28h ; (
.eh_frame:000000000000DC5E                 db  42h ; B
.eh_frame:000000000000DC5F                 db  0Eh
.eh_frame:000000000000DC60                 db  20h
.eh_frame:000000000000DC61                 db  42h ; B
.eh_frame:000000000000DC62                 db  0Eh
.eh_frame:000000000000DC63                 db  18h
.eh_frame:000000000000DC64                 db  42h ; B
.eh_frame:000000000000DC65                 db  0Eh
.eh_frame:000000000000DC66                 db  10h
.eh_frame:000000000000DC67                 db  42h ; B
.eh_frame:000000000000DC68                 db  0Eh
.eh_frame:000000000000DC69                 db    8
.eh_frame:000000000000DC6A                 db  41h ; A
.eh_frame:000000000000DC6B                 db  0Bh
.eh_frame:000000000000DC6C                 db  4Ch ; L
.eh_frame:000000000000DC6D                 db    0
.eh_frame:000000000000DC6E                 db    0
.eh_frame:000000000000DC6F                 db    0
.eh_frame:000000000000DC70                 db 0C0h
.eh_frame:000000000000DC71                 db    3
.eh_frame:000000000000DC72                 db    0
.eh_frame:000000000000DC73                 db    0
.eh_frame:000000000000DC74                 db 0FCh
.eh_frame:000000000000DC75                 db  5Ch ; \
.eh_frame:000000000000DC76                 db 0FFh
.eh_frame:000000000000DC77                 db 0FFh
.eh_frame:000000000000DC78                 db  24h ; $
.eh_frame:000000000000DC79                 db    1
.eh_frame:000000000000DC7A                 db    0
.eh_frame:000000000000DC7B                 db    0
.eh_frame:000000000000DC7C                 db    0
.eh_frame:000000000000DC7D                 db  42h ; B
.eh_frame:000000000000DC7E                 db  0Eh
.eh_frame:000000000000DC7F                 db  10h
.eh_frame:000000000000DC80                 db  8Fh
.eh_frame:000000000000DC81                 db    2
.eh_frame:000000000000DC82                 db  42h ; B
.eh_frame:000000000000DC83                 db  0Eh
.eh_frame:000000000000DC84                 db  18h
.eh_frame:000000000000DC85                 db  8Eh
.eh_frame:000000000000DC86                 db    3
.eh_frame:000000000000DC87                 db  45h ; E
.eh_frame:000000000000DC88                 db  0Eh
.eh_frame:000000000000DC89                 db  20h
.eh_frame:000000000000DC8A                 db  8Dh
.eh_frame:000000000000DC8B                 db    4
.eh_frame:000000000000DC8C                 db  42h ; B
.eh_frame:000000000000DC8D                 db  0Eh
.eh_frame:000000000000DC8E                 db  28h ; (
.eh_frame:000000000000DC8F                 db  8Ch
.eh_frame:000000000000DC90                 db    5
.eh_frame:000000000000DC91                 db  41h ; A
.eh_frame:000000000000DC92                 db  0Eh
.eh_frame:000000000000DC93                 db  30h ; 0
.eh_frame:000000000000DC94                 db  86h
.eh_frame:000000000000DC95                 db    6
.eh_frame:000000000000DC96                 db  41h ; A
.eh_frame:000000000000DC97                 db  0Eh
.eh_frame:000000000000DC98                 db  38h ; 8
.eh_frame:000000000000DC99                 db  83h
.eh_frame:000000000000DC9A                 db    7
.eh_frame:000000000000DC9B                 db  44h ; D
.eh_frame:000000000000DC9C                 db  0Eh
.eh_frame:000000000000DC9D                 db 0A0h
.eh_frame:000000000000DC9E                 db    1
.eh_frame:000000000000DC9F                 db    3
.eh_frame:000000000000DCA0                 db    3
.eh_frame:000000000000DCA1                 db    1
.eh_frame:000000000000DCA2                 db  0Ah
.eh_frame:000000000000DCA3                 db  0Eh
.eh_frame:000000000000DCA4                 db  38h ; 8
.eh_frame:000000000000DCA5                 db  41h ; A
.eh_frame:000000000000DCA6                 db  0Eh
.eh_frame:000000000000DCA7                 db  30h ; 0
.eh_frame:000000000000DCA8                 db  41h ; A
.eh_frame:000000000000DCA9                 db  0Eh
.eh_frame:000000000000DCAA                 db  28h ; (
.eh_frame:000000000000DCAB                 db  42h ; B
.eh_frame:000000000000DCAC                 db  0Eh
.eh_frame:000000000000DCAD                 db  20h
.eh_frame:000000000000DCAE                 db  42h ; B
.eh_frame:000000000000DCAF                 db  0Eh
.eh_frame:000000000000DCB0                 db  18h
.eh_frame:000000000000DCB1                 db  42h ; B
.eh_frame:000000000000DCB2                 db  0Eh
.eh_frame:000000000000DCB3                 db  10h
.eh_frame:000000000000DCB4                 db  42h ; B
.eh_frame:000000000000DCB5                 db  0Eh
.eh_frame:000000000000DCB6                 db    8
.eh_frame:000000000000DCB7                 db  41h ; A
.eh_frame:000000000000DCB8                 db  0Bh
.eh_frame:000000000000DCB9                 db    0
.eh_frame:000000000000DCBA                 db    0
.eh_frame:000000000000DCBB                 db    0
.eh_frame:000000000000DCBC                 db  98h
.eh_frame:000000000000DCBD                 db    0
.eh_frame:000000000000DCBE                 db    0
.eh_frame:000000000000DCBF                 db    0
.eh_frame:000000000000DCC0                 db  10h
.eh_frame:000000000000DCC1                 db    4
.eh_frame:000000000000DCC2                 db    0
.eh_frame:000000000000DCC3                 db    0
.eh_frame:000000000000DCC4                 db 0DCh
.eh_frame:000000000000DCC5                 db  5Dh ; ]
.eh_frame:000000000000DCC6                 db 0FFh
.eh_frame:000000000000DCC7                 db 0FFh
.eh_frame:000000000000DCC8                 db  24h ; $
.eh_frame:000000000000DCC9                 db    8
.eh_frame:000000000000DCCA                 db    0
.eh_frame:000000000000DCCB                 db    0
.eh_frame:000000000000DCCC                 db    0
.eh_frame:000000000000DCCD                 db  42h ; B
.eh_frame:000000000000DCCE                 db  0Eh
.eh_frame:000000000000DCCF                 db  10h
.eh_frame:000000000000DCD0                 db  8Fh
.eh_frame:000000000000DCD1                 db    2
.eh_frame:000000000000DCD2                 db  42h ; B
.eh_frame:000000000000DCD3                 db  0Eh
.eh_frame:000000000000DCD4                 db  18h
.eh_frame:000000000000DCD5                 db  8Eh
.eh_frame:000000000000DCD6                 db    3
.eh_frame:000000000000DCD7                 db  42h ; B
.eh_frame:000000000000DCD8                 db  0Eh
.eh_frame:000000000000DCD9                 db  20h
.eh_frame:000000000000DCDA                 db  8Dh
.eh_frame:000000000000DCDB                 db    4
.eh_frame:000000000000DCDC                 db  42h ; B
.eh_frame:000000000000DCDD                 db  0Eh
.eh_frame:000000000000DCDE                 db  28h ; (
.eh_frame:000000000000DCDF                 db  8Ch
.eh_frame:000000000000DCE0                 db    5
.eh_frame:000000000000DCE1                 db  41h ; A
.eh_frame:000000000000DCE2                 db  0Eh
.eh_frame:000000000000DCE3                 db  30h ; 0
.eh_frame:000000000000DCE4                 db  86h
.eh_frame:000000000000DCE5                 db    6
.eh_frame:000000000000DCE6                 db  41h ; A
.eh_frame:000000000000DCE7                 db  0Eh
.eh_frame:000000000000DCE8                 db  38h ; 8
.eh_frame:000000000000DCE9                 db  83h
.eh_frame:000000000000DCEA                 db    7
.eh_frame:000000000000DCEB                 db  44h ; D
.eh_frame:000000000000DCEC                 db  0Eh
.eh_frame:000000000000DCED                 db  50h ; P
.eh_frame:000000000000DCEE                 db    3
.eh_frame:000000000000DCEF                 db  48h ; H
.eh_frame:000000000000DCF0                 db    2
.eh_frame:000000000000DCF1                 db  0Ah
.eh_frame:000000000000DCF2                 db  0Eh
.eh_frame:000000000000DCF3                 db  38h ; 8
.eh_frame:000000000000DCF4                 db  46h ; F
.eh_frame:000000000000DCF5                 db  0Eh
.eh_frame:000000000000DCF6                 db  30h ; 0
.eh_frame:000000000000DCF7                 db  41h ; A
.eh_frame:000000000000DCF8                 db  0Eh
.eh_frame:000000000000DCF9                 db  28h ; (
.eh_frame:000000000000DCFA                 db  42h ; B
.eh_frame:000000000000DCFB                 db  0Eh
.eh_frame:000000000000DCFC                 db  20h
.eh_frame:000000000000DCFD                 db  42h ; B
.eh_frame:000000000000DCFE                 db  0Eh
.eh_frame:000000000000DCFF                 db  18h
.eh_frame:000000000000DD00                 db  42h ; B
.eh_frame:000000000000DD01                 db  0Eh
.eh_frame:000000000000DD02                 db  10h
.eh_frame:000000000000DD03                 db  42h ; B
.eh_frame:000000000000DD04                 db  0Eh
.eh_frame:000000000000DD05                 db    8
.eh_frame:000000000000DD06                 db  4Bh ; K
.eh_frame:000000000000DD07                 db  0Bh
.eh_frame:000000000000DD08                 db    2
.eh_frame:000000000000DD09                 db  63h ; c
.eh_frame:000000000000DD0A                 db  0Ah
.eh_frame:000000000000DD0B                 db  0Eh
.eh_frame:000000000000DD0C                 db  38h ; 8
.eh_frame:000000000000DD0D                 db  43h ; C
.eh_frame:000000000000DD0E                 db  0Eh
.eh_frame:000000000000DD0F                 db  30h ; 0
.eh_frame:000000000000DD10                 db  41h ; A
.eh_frame:000000000000DD11                 db  0Eh
.eh_frame:000000000000DD12                 db  28h ; (
.eh_frame:000000000000DD13                 db  42h ; B
.eh_frame:000000000000DD14                 db  0Eh
.eh_frame:000000000000DD15                 db  20h
.eh_frame:000000000000DD16                 db  42h ; B
.eh_frame:000000000000DD17                 db  0Eh
.eh_frame:000000000000DD18                 db  18h
.eh_frame:000000000000DD19                 db  42h ; B
.eh_frame:000000000000DD1A                 db  0Eh
.eh_frame:000000000000DD1B                 db  10h
.eh_frame:000000000000DD1C                 db  42h ; B
.eh_frame:000000000000DD1D                 db  0Eh
.eh_frame:000000000000DD1E                 db    8
.eh_frame:000000000000DD1F                 db  41h ; A
.eh_frame:000000000000DD20                 db  0Bh
.eh_frame:000000000000DD21                 db    3
.eh_frame:000000000000DD22                 db  83h
.eh_frame:000000000000DD23                 db    2
.eh_frame:000000000000DD24                 db  0Ah
.eh_frame:000000000000DD25                 db  0Eh
.eh_frame:000000000000DD26                 db  38h ; 8
.eh_frame:000000000000DD27                 db  43h ; C
.eh_frame:000000000000DD28                 db  0Eh
.eh_frame:000000000000DD29                 db  30h ; 0
.eh_frame:000000000000DD2A                 db  41h ; A
.eh_frame:000000000000DD2B                 db  0Eh
.eh_frame:000000000000DD2C                 db  28h ; (
.eh_frame:000000000000DD2D                 db  42h ; B
.eh_frame:000000000000DD2E                 db  0Eh
.eh_frame:000000000000DD2F                 db  20h
.eh_frame:000000000000DD30                 db  42h ; B
.eh_frame:000000000000DD31                 db  0Eh
.eh_frame:000000000000DD32                 db  18h
.eh_frame:000000000000DD33                 db  42h ; B
.eh_frame:000000000000DD34                 db  0Eh
.eh_frame:000000000000DD35                 db  10h
.eh_frame:000000000000DD36                 db  42h ; B
.eh_frame:000000000000DD37                 db  0Eh
.eh_frame:000000000000DD38                 db    8
.eh_frame:000000000000DD39                 db  41h ; A
.eh_frame:000000000000DD3A                 db  0Bh
.eh_frame:000000000000DD3B                 db    3
.eh_frame:000000000000DD3C                 db 0C4h
.eh_frame:000000000000DD3D                 db    1
.eh_frame:000000000000DD3E                 db  0Ah
.eh_frame:000000000000DD3F                 db  0Eh
.eh_frame:000000000000DD40                 db  38h ; 8
.eh_frame:000000000000DD41                 db  43h ; C
.eh_frame:000000000000DD42                 db  0Eh
.eh_frame:000000000000DD43                 db  30h ; 0
.eh_frame:000000000000DD44                 db  41h ; A
.eh_frame:000000000000DD45                 db  0Eh
.eh_frame:000000000000DD46                 db  28h ; (
.eh_frame:000000000000DD47                 db  42h ; B
.eh_frame:000000000000DD48                 db  0Eh
.eh_frame:000000000000DD49                 db  20h
.eh_frame:000000000000DD4A                 db  42h ; B
.eh_frame:000000000000DD4B                 db  0Eh
.eh_frame:000000000000DD4C                 db  18h
.eh_frame:000000000000DD4D                 db  42h ; B
.eh_frame:000000000000DD4E                 db  0Eh
.eh_frame:000000000000DD4F                 db  10h
.eh_frame:000000000000DD50                 db  42h ; B
.eh_frame:000000000000DD51                 db  0Eh
.eh_frame:000000000000DD52                 db    8
.eh_frame:000000000000DD53                 db  48h ; H
.eh_frame:000000000000DD54                 db  0Bh
.eh_frame:000000000000DD55                 db    0
.eh_frame:000000000000DD56                 db    0
.eh_frame:000000000000DD57                 db    0
.eh_frame:000000000000DD58                 db  48h ; H
.eh_frame:000000000000DD59                 db    0
.eh_frame:000000000000DD5A                 db    0
.eh_frame:000000000000DD5B                 db    0
.eh_frame:000000000000DD5C                 db 0ACh
.eh_frame:000000000000DD5D                 db    4
.eh_frame:000000000000DD5E                 db    0
.eh_frame:000000000000DD5F                 db    0
.eh_frame:000000000000DD60                 db  70h ; p
.eh_frame:000000000000DD61                 db  65h ; e
.eh_frame:000000000000DD62                 db 0FFh
.eh_frame:000000000000DD63                 db 0FFh
.eh_frame:000000000000DD64                 db 0BEh
.eh_frame:000000000000DD65                 db    1
.eh_frame:000000000000DD66                 db    0
.eh_frame:000000000000DD67                 db    0
.eh_frame:000000000000DD68                 db    0
.eh_frame:000000000000DD69                 db  42h ; B
.eh_frame:000000000000DD6A                 db  0Eh
.eh_frame:000000000000DD6B                 db  10h
.eh_frame:000000000000DD6C                 db  8Fh
.eh_frame:000000000000DD6D                 db    2
.eh_frame:000000000000DD6E                 db  42h ; B
.eh_frame:000000000000DD6F                 db  0Eh
.eh_frame:000000000000DD70                 db  18h
.eh_frame:000000000000DD71                 db  8Eh
.eh_frame:000000000000DD72                 db    3
.eh_frame:000000000000DD73                 db  42h ; B
.eh_frame:000000000000DD74                 db  0Eh
.eh_frame:000000000000DD75                 db  20h
.eh_frame:000000000000DD76                 db  8Dh
.eh_frame:000000000000DD77                 db    4
.eh_frame:000000000000DD78                 db  42h ; B
.eh_frame:000000000000DD79                 db  0Eh
.eh_frame:000000000000DD7A                 db  28h ; (
.eh_frame:000000000000DD7B                 db  8Ch
.eh_frame:000000000000DD7C                 db    5
.eh_frame:000000000000DD7D                 db  41h ; A
.eh_frame:000000000000DD7E                 db  0Eh
.eh_frame:000000000000DD7F                 db  30h ; 0
.eh_frame:000000000000DD80                 db  86h
.eh_frame:000000000000DD81                 db    6
.eh_frame:000000000000DD82                 db  41h ; A
.eh_frame:000000000000DD83                 db  0Eh
.eh_frame:000000000000DD84                 db  38h ; 8
.eh_frame:000000000000DD85                 db  83h
.eh_frame:000000000000DD86                 db    7
.eh_frame:000000000000DD87                 db  44h ; D
.eh_frame:000000000000DD88                 db  0Eh
.eh_frame:000000000000DD89                 db  70h ; p
.eh_frame:000000000000DD8A                 db    2
.eh_frame:000000000000DD8B                 db 0BFh
.eh_frame:000000000000DD8C                 db  0Ah
.eh_frame:000000000000DD8D                 db  0Eh
.eh_frame:000000000000DD8E                 db  38h ; 8
.eh_frame:000000000000DD8F                 db  41h ; A
.eh_frame:000000000000DD90                 db  0Eh
.eh_frame:000000000000DD91                 db  30h ; 0
.eh_frame:000000000000DD92                 db  41h ; A
.eh_frame:000000000000DD93                 db  0Eh
.eh_frame:000000000000DD94                 db  28h ; (
.eh_frame:000000000000DD95                 db  42h ; B
.eh_frame:000000000000DD96                 db  0Eh
.eh_frame:000000000000DD97                 db  20h
.eh_frame:000000000000DD98                 db  42h ; B
.eh_frame:000000000000DD99                 db  0Eh
.eh_frame:000000000000DD9A                 db  18h
.eh_frame:000000000000DD9B                 db  42h ; B
.eh_frame:000000000000DD9C                 db  0Eh
.eh_frame:000000000000DD9D                 db  10h
.eh_frame:000000000000DD9E                 db  42h ; B
.eh_frame:000000000000DD9F                 db  0Eh
.eh_frame:000000000000DDA0                 db    8
.eh_frame:000000000000DDA1                 db  49h ; I
.eh_frame:000000000000DDA2                 db  0Bh
.eh_frame:000000000000DDA3                 db    0
.eh_frame:000000000000DDA4                 db  28h ; (
.eh_frame:000000000000DDA5                 db    0
.eh_frame:000000000000DDA6                 db    0
.eh_frame:000000000000DDA7                 db    0
.eh_frame:000000000000DDA8                 db 0F8h
.eh_frame:000000000000DDA9                 db    4
.eh_frame:000000000000DDAA                 db    0
.eh_frame:000000000000DDAB                 db    0
.eh_frame:000000000000DDAC                 db 0E4h
.eh_frame:000000000000DDAD                 db  66h ; f
.eh_frame:000000000000DDAE                 db 0FFh
.eh_frame:000000000000DDAF                 db 0FFh
.eh_frame:000000000000DDB0                 db  4Fh ; O
.eh_frame:000000000000DDB1                 db    1
.eh_frame:000000000000DDB2                 db    0
.eh_frame:000000000000DDB3                 db    0
.eh_frame:000000000000DDB4                 db    0
.eh_frame:000000000000DDB5                 db  41h ; A
.eh_frame:000000000000DDB6                 db  0Eh
.eh_frame:000000000000DDB7                 db  10h
.eh_frame:000000000000DDB8                 db  86h
.eh_frame:000000000000DDB9                 db    2
.eh_frame:000000000000DDBA                 db  41h ; A
.eh_frame:000000000000DDBB                 db  0Eh
.eh_frame:000000000000DDBC                 db  18h
.eh_frame:000000000000DDBD                 db  83h
.eh_frame:000000000000DDBE                 db    3
.eh_frame:000000000000DDBF                 db  49h ; I
.eh_frame:000000000000DDC0                 db  0Eh
.eh_frame:000000000000DDC1                 db  20h
.eh_frame:000000000000DDC2                 db    2
.eh_frame:000000000000DDC3                 db  7Dh ; }
.eh_frame:000000000000DDC4                 db  0Ah
.eh_frame:000000000000DDC5                 db  0Eh
.eh_frame:000000000000DDC6                 db  18h
.eh_frame:000000000000DDC7                 db  43h ; C
.eh_frame:000000000000DDC8                 db  0Eh
.eh_frame:000000000000DDC9                 db  10h
.eh_frame:000000000000DDCA                 db  41h ; A
.eh_frame:000000000000DDCB                 db  0Eh
.eh_frame:000000000000DDCC                 db    8
.eh_frame:000000000000DDCD                 db  44h ; D
.eh_frame:000000000000DDCE                 db  0Bh
.eh_frame:000000000000DDCF                 db    0
.eh_frame:000000000000DDD0                 db  28h ; (
.eh_frame:000000000000DDD1                 db    0
.eh_frame:000000000000DDD2                 db    0
.eh_frame:000000000000DDD3                 db    0
.eh_frame:000000000000DDD4                 db  24h ; $
.eh_frame:000000000000DDD5                 db    5
.eh_frame:000000000000DDD6                 db    0
.eh_frame:000000000000DDD7                 db    0
.eh_frame:000000000000DDD8                 db    8
.eh_frame:000000000000DDD9                 db  68h ; h
.eh_frame:000000000000DDDA                 db 0FFh
.eh_frame:000000000000DDDB                 db 0FFh
.eh_frame:000000000000DDDC                 db  13h
.eh_frame:000000000000DDDD                 db    1
.eh_frame:000000000000DDDE                 db    0
.eh_frame:000000000000DDDF                 db    0
.eh_frame:000000000000DDE0                 db    0
.eh_frame:000000000000DDE1                 db  41h ; A
.eh_frame:000000000000DDE2                 db  0Eh
.eh_frame:000000000000DDE3                 db  10h
.eh_frame:000000000000DDE4                 db  86h
.eh_frame:000000000000DDE5                 db    2
.eh_frame:000000000000DDE6                 db  41h ; A
.eh_frame:000000000000DDE7                 db  0Eh
.eh_frame:000000000000DDE8                 db  18h
.eh_frame:000000000000DDE9                 db  83h
.eh_frame:000000000000DDEA                 db    3
.eh_frame:000000000000DDEB                 db  50h ; P
.eh_frame:000000000000DDEC                 db  0Eh
.eh_frame:000000000000DDED                 db  20h
.eh_frame:000000000000DDEE                 db    2
.eh_frame:000000000000DDEF                 db 0A7h
.eh_frame:000000000000DDF0                 db  0Ah
.eh_frame:000000000000DDF1                 db  0Eh
.eh_frame:000000000000DDF2                 db  18h
.eh_frame:000000000000DDF3                 db  43h ; C
.eh_frame:000000000000DDF4                 db  0Eh
.eh_frame:000000000000DDF5                 db  10h
.eh_frame:000000000000DDF6                 db  41h ; A
.eh_frame:000000000000DDF7                 db  0Eh
.eh_frame:000000000000DDF8                 db    8
.eh_frame:000000000000DDF9                 db  43h ; C
.eh_frame:000000000000DDFA                 db  0Bh
.eh_frame:000000000000DDFB                 db    0
.eh_frame:000000000000DDFC                 db  4Ch ; L
.eh_frame:000000000000DDFD                 db    0
.eh_frame:000000000000DDFE                 db    0
.eh_frame:000000000000DDFF                 db    0
.eh_frame:000000000000DE00                 db  50h ; P
.eh_frame:000000000000DE01                 db    5
.eh_frame:000000000000DE02                 db    0
.eh_frame:000000000000DE03                 db    0
.eh_frame:000000000000DE04                 db 0FCh
.eh_frame:000000000000DE05                 db  68h ; h
.eh_frame:000000000000DE06                 db 0FFh
.eh_frame:000000000000DE07                 db 0FFh
.eh_frame:000000000000DE08                 db 0DFh
.eh_frame:000000000000DE09                 db    1
.eh_frame:000000000000DE0A                 db    0
.eh_frame:000000000000DE0B                 db    0
.eh_frame:000000000000DE0C                 db    0
.eh_frame:000000000000DE0D                 db  42h ; B
.eh_frame:000000000000DE0E                 db  0Eh
.eh_frame:000000000000DE0F                 db  10h
.eh_frame:000000000000DE10                 db  8Fh
.eh_frame:000000000000DE11                 db    2
.eh_frame:000000000000DE12                 db  42h ; B
.eh_frame:000000000000DE13                 db  0Eh
.eh_frame:000000000000DE14                 db  18h
.eh_frame:000000000000DE15                 db  8Eh
.eh_frame:000000000000DE16                 db    3
.eh_frame:000000000000DE17                 db  42h ; B
.eh_frame:000000000000DE18                 db  0Eh
.eh_frame:000000000000DE19                 db  20h
.eh_frame:000000000000DE1A                 db  8Dh
.eh_frame:000000000000DE1B                 db    4
.eh_frame:000000000000DE1C                 db  42h ; B
.eh_frame:000000000000DE1D                 db  0Eh
.eh_frame:000000000000DE1E                 db  28h ; (
.eh_frame:000000000000DE1F                 db  8Ch
.eh_frame:000000000000DE20                 db    5
.eh_frame:000000000000DE21                 db  41h ; A
.eh_frame:000000000000DE22                 db  0Eh
.eh_frame:000000000000DE23                 db  30h ; 0
.eh_frame:000000000000DE24                 db  86h
.eh_frame:000000000000DE25                 db    6
.eh_frame:000000000000DE26                 db  41h ; A
.eh_frame:000000000000DE27                 db  0Eh
.eh_frame:000000000000DE28                 db  38h ; 8
.eh_frame:000000000000DE29                 db  83h
.eh_frame:000000000000DE2A                 db    7
.eh_frame:000000000000DE2B                 db  47h ; G
.eh_frame:000000000000DE2C                 db  0Eh
.eh_frame:000000000000DE2D                 db 0E0h
.eh_frame:000000000000DE2E                 db  41h ; A
.eh_frame:000000000000DE2F                 db    3
.eh_frame:000000000000DE30                 db  8Ch
.eh_frame:000000000000DE31                 db    1
.eh_frame:000000000000DE32                 db  0Ah
.eh_frame:000000000000DE33                 db  0Eh
.eh_frame:000000000000DE34                 db  38h ; 8
.eh_frame:000000000000DE35                 db  41h ; A
.eh_frame:000000000000DE36                 db  0Eh
.eh_frame:000000000000DE37                 db  30h ; 0
.eh_frame:000000000000DE38                 db  41h ; A
.eh_frame:000000000000DE39                 db  0Eh
.eh_frame:000000000000DE3A                 db  28h ; (
.eh_frame:000000000000DE3B                 db  42h ; B
.eh_frame:000000000000DE3C                 db  0Eh
.eh_frame:000000000000DE3D                 db  20h
.eh_frame:000000000000DE3E                 db  42h ; B
.eh_frame:000000000000DE3F                 db  0Eh
.eh_frame:000000000000DE40                 db  18h
.eh_frame:000000000000DE41                 db  42h ; B
.eh_frame:000000000000DE42                 db  0Eh
.eh_frame:000000000000DE43                 db  10h
.eh_frame:000000000000DE44                 db  42h ; B
.eh_frame:000000000000DE45                 db  0Eh
.eh_frame:000000000000DE46                 db    8
.eh_frame:000000000000DE47                 db  41h ; A
.eh_frame:000000000000DE48                 db  0Bh
.eh_frame:000000000000DE49                 db    0
.eh_frame:000000000000DE4A                 db    0
.eh_frame:000000000000DE4B                 db    0
.eh_frame:000000000000DE4C                 db  28h ; (
.eh_frame:000000000000DE4D                 db    0
.eh_frame:000000000000DE4E                 db    0
.eh_frame:000000000000DE4F                 db    0
.eh_frame:000000000000DE50                 db 0A0h
.eh_frame:000000000000DE51                 db    5
.eh_frame:000000000000DE52                 db    0
.eh_frame:000000000000DE53                 db    0
.eh_frame:000000000000DE54                 db  8Ch
.eh_frame:000000000000DE55                 db  6Ah ; j
.eh_frame:000000000000DE56                 db 0FFh
.eh_frame:000000000000DE57                 db 0FFh
.eh_frame:000000000000DE58                 db  58h ; X
.eh_frame:000000000000DE59                 db    0
.eh_frame:000000000000DE5A                 db    0
.eh_frame:000000000000DE5B                 db    0
.eh_frame:000000000000DE5C                 db    0
.eh_frame:000000000000DE5D                 db  42h ; B
.eh_frame:000000000000DE5E                 db  0Eh
.eh_frame:000000000000DE5F                 db  10h
.eh_frame:000000000000DE60                 db  8Ch
.eh_frame:000000000000DE61                 db    2
.eh_frame:000000000000DE62                 db  44h ; D
.eh_frame:000000000000DE63                 db  0Eh
.eh_frame:000000000000DE64                 db  18h
.eh_frame:000000000000DE65                 db  86h
.eh_frame:000000000000DE66                 db    3
.eh_frame:000000000000DE67                 db  41h ; A
.eh_frame:000000000000DE68                 db  0Eh
.eh_frame:000000000000DE69                 db  20h
.eh_frame:000000000000DE6A                 db  83h
.eh_frame:000000000000DE6B                 db    4
.eh_frame:000000000000DE6C                 db    2
.eh_frame:000000000000DE6D                 db  4Dh ; M
.eh_frame:000000000000DE6E                 db  0Eh
.eh_frame:000000000000DE6F                 db  18h
.eh_frame:000000000000DE70                 db  41h ; A
.eh_frame:000000000000DE71                 db  0Eh
.eh_frame:000000000000DE72                 db  10h
.eh_frame:000000000000DE73                 db  42h ; B
.eh_frame:000000000000DE74                 db  0Eh
.eh_frame:000000000000DE75                 db    8
.eh_frame:000000000000DE76                 db    0
.eh_frame:000000000000DE77                 db    0
.eh_frame:000000000000DE78                 db  48h ; H
.eh_frame:000000000000DE79                 db    0
.eh_frame:000000000000DE7A                 db    0
.eh_frame:000000000000DE7B                 db    0
.eh_frame:000000000000DE7C                 db 0CCh
.eh_frame:000000000000DE7D                 db    5
.eh_frame:000000000000DE7E                 db    0
.eh_frame:000000000000DE7F                 db    0
.eh_frame:000000000000DE80                 db 0C0h
.eh_frame:000000000000DE81                 db  6Ah ; j
.eh_frame:000000000000DE82                 db 0FFh
.eh_frame:000000000000DE83                 db 0FFh
.eh_frame:000000000000DE84                 db 0A7h
.eh_frame:000000000000DE85                 db    2
.eh_frame:000000000000DE86                 db    0
.eh_frame:000000000000DE87                 db    0
.eh_frame:000000000000DE88                 db    0
.eh_frame:000000000000DE89                 db  42h ; B
.eh_frame:000000000000DE8A                 db  0Eh
.eh_frame:000000000000DE8B                 db  10h
.eh_frame:000000000000DE8C                 db  8Fh
.eh_frame:000000000000DE8D                 db    2
.eh_frame:000000000000DE8E                 db  42h ; B
.eh_frame:000000000000DE8F                 db  0Eh
.eh_frame:000000000000DE90                 db  18h
.eh_frame:000000000000DE91                 db  8Eh
.eh_frame:000000000000DE92                 db    3
.eh_frame:000000000000DE93                 db  45h ; E
.eh_frame:000000000000DE94                 db  0Eh
.eh_frame:000000000000DE95                 db  20h
.eh_frame:000000000000DE96                 db  8Dh
.eh_frame:000000000000DE97                 db    4
.eh_frame:000000000000DE98                 db  42h ; B
.eh_frame:000000000000DE99                 db  0Eh
.eh_frame:000000000000DE9A                 db  28h ; (
.eh_frame:000000000000DE9B                 db  8Ch
.eh_frame:000000000000DE9C                 db    5
.eh_frame:000000000000DE9D                 db  41h ; A
.eh_frame:000000000000DE9E                 db  0Eh
.eh_frame:000000000000DE9F                 db  30h ; 0
.eh_frame:000000000000DEA0                 db  86h
.eh_frame:000000000000DEA1                 db    6
.eh_frame:000000000000DEA2                 db  41h ; A
.eh_frame:000000000000DEA3                 db  0Eh
.eh_frame:000000000000DEA4                 db  38h ; 8
.eh_frame:000000000000DEA5                 db  83h
.eh_frame:000000000000DEA6                 db    7
.eh_frame:000000000000DEA7                 db  44h ; D
.eh_frame:000000000000DEA8                 db  0Eh
.eh_frame:000000000000DEA9                 db  60h ; `
.eh_frame:000000000000DEAA                 db    3
.eh_frame:000000000000DEAB                 db  39h ; 9
.eh_frame:000000000000DEAC                 db    2
.eh_frame:000000000000DEAD                 db  0Ah
.eh_frame:000000000000DEAE                 db  0Eh
.eh_frame:000000000000DEAF                 db  38h ; 8
.eh_frame:000000000000DEB0                 db  41h ; A
.eh_frame:000000000000DEB1                 db  0Eh
.eh_frame:000000000000DEB2                 db  30h ; 0
.eh_frame:000000000000DEB3                 db  41h ; A
.eh_frame:000000000000DEB4                 db  0Eh
.eh_frame:000000000000DEB5                 db  28h ; (
.eh_frame:000000000000DEB6                 db  42h ; B
.eh_frame:000000000000DEB7                 db  0Eh
.eh_frame:000000000000DEB8                 db  20h
.eh_frame:000000000000DEB9                 db  42h ; B
.eh_frame:000000000000DEBA                 db  0Eh
.eh_frame:000000000000DEBB                 db  18h
.eh_frame:000000000000DEBC                 db  42h ; B
.eh_frame:000000000000DEBD                 db  0Eh
.eh_frame:000000000000DEBE                 db  10h
.eh_frame:000000000000DEBF                 db  42h ; B
.eh_frame:000000000000DEC0                 db  0Eh
.eh_frame:000000000000DEC1                 db    8
.eh_frame:000000000000DEC2                 db  44h ; D
.eh_frame:000000000000DEC3                 db  0Bh
.eh_frame:000000000000DEC4                 db  34h ; 4
.eh_frame:000000000000DEC5                 db    0
.eh_frame:000000000000DEC6                 db    0
.eh_frame:000000000000DEC7                 db    0
.eh_frame:000000000000DEC8                 db  18h
.eh_frame:000000000000DEC9                 db    6
.eh_frame:000000000000DECA                 db    0
.eh_frame:000000000000DECB                 db    0
.eh_frame:000000000000DECC                 db  24h ; $
.eh_frame:000000000000DECD                 db  6Dh ; m
.eh_frame:000000000000DECE                 db 0FFh
.eh_frame:000000000000DECF                 db 0FFh
.eh_frame:000000000000DED0                 db  7Ch ; |
.eh_frame:000000000000DED1                 db    0
.eh_frame:000000000000DED2                 db    0
.eh_frame:000000000000DED3                 db    0
.eh_frame:000000000000DED4                 db    0
.eh_frame:000000000000DED5                 db  41h ; A
.eh_frame:000000000000DED6                 db  0Eh
.eh_frame:000000000000DED7                 db  10h
.eh_frame:000000000000DED8                 db  86h
.eh_frame:000000000000DED9                 db    2
.eh_frame:000000000000DEDA                 db  41h ; A
.eh_frame:000000000000DEDB                 db  0Eh
.eh_frame:000000000000DEDC                 db  18h
.eh_frame:000000000000DEDD                 db  83h
.eh_frame:000000000000DEDE                 db    3
.eh_frame:000000000000DEDF                 db  49h ; I
.eh_frame:000000000000DEE0                 db  0Eh
.eh_frame:000000000000DEE1                 db  20h
.eh_frame:000000000000DEE2                 db    2
.eh_frame:000000000000DEE3                 db  4Ch ; L
.eh_frame:000000000000DEE4                 db  0Ah
.eh_frame:000000000000DEE5                 db  0Eh
.eh_frame:000000000000DEE6                 db  18h
.eh_frame:000000000000DEE7                 db  41h ; A
.eh_frame:000000000000DEE8                 db  0Eh
.eh_frame:000000000000DEE9                 db  10h
.eh_frame:000000000000DEEA                 db  41h ; A
.eh_frame:000000000000DEEB                 db  0Eh
.eh_frame:000000000000DEEC                 db    8
.eh_frame:000000000000DEED                 db  47h ; G
.eh_frame:000000000000DEEE                 db  0Bh
.eh_frame:000000000000DEEF                 db  44h ; D
.eh_frame:000000000000DEF0                 db  0Ah
.eh_frame:000000000000DEF1                 db  0Eh
.eh_frame:000000000000DEF2                 db  18h
.eh_frame:000000000000DEF3                 db  44h ; D
.eh_frame:000000000000DEF4                 db  0Eh
.eh_frame:000000000000DEF5                 db  10h
.eh_frame:000000000000DEF6                 db  41h ; A
.eh_frame:000000000000DEF7                 db  0Eh
.eh_frame:000000000000DEF8                 db    8
.eh_frame:000000000000DEF9                 db  47h ; G
.eh_frame:000000000000DEFA                 db  0Bh
.eh_frame:000000000000DEFB                 db    0
.eh_frame:000000000000DEFC                 db  24h ; $
.eh_frame:000000000000DEFD                 db    0
.eh_frame:000000000000DEFE                 db    0
.eh_frame:000000000000DEFF                 db    0
.eh_frame:000000000000DF00                 db  50h ; P
.eh_frame:000000000000DF01                 db    6
.eh_frame:000000000000DF02                 db    0
.eh_frame:000000000000DF03                 db    0
.eh_frame:000000000000DF04                 db  6Ch ; l
.eh_frame:000000000000DF05                 db  6Dh ; m
.eh_frame:000000000000DF06                 db 0FFh
.eh_frame:000000000000DF07                 db 0FFh
.eh_frame:000000000000DF08                 db  2Eh ; .
.eh_frame:000000000000DF09                 db    0
.eh_frame:000000000000DF0A                 db    0
.eh_frame:000000000000DF0B                 db    0
.eh_frame:000000000000DF0C                 db    0
.eh_frame:000000000000DF0D                 db  41h ; A
.eh_frame:000000000000DF0E                 db  0Eh
.eh_frame:000000000000DF0F                 db  10h
.eh_frame:000000000000DF10                 db  86h
.eh_frame:000000000000DF11                 db    2
.eh_frame:000000000000DF12                 db  41h ; A
.eh_frame:000000000000DF13                 db  0Eh
.eh_frame:000000000000DF14                 db  18h
.eh_frame:000000000000DF15                 db  83h
.eh_frame:000000000000DF16                 db    3
.eh_frame:000000000000DF17                 db  4Eh ; N
.eh_frame:000000000000DF18                 db  0Eh
.eh_frame:000000000000DF19                 db  20h
.eh_frame:000000000000DF1A                 db  50h ; P
.eh_frame:000000000000DF1B                 db  0Eh
.eh_frame:000000000000DF1C                 db  18h
.eh_frame:000000000000DF1D                 db  48h ; H
.eh_frame:000000000000DF1E                 db  0Eh
.eh_frame:000000000000DF1F                 db  10h
.eh_frame:000000000000DF20                 db  41h ; A
.eh_frame:000000000000DF21                 db  0Eh
.eh_frame:000000000000DF22                 db    8
.eh_frame:000000000000DF23                 db    0
.eh_frame:000000000000DF24                 db  3Ch ; <
.eh_frame:000000000000DF25                 db    0
.eh_frame:000000000000DF26                 db    0
.eh_frame:000000000000DF27                 db    0
.eh_frame:000000000000DF28                 db  78h ; x
.eh_frame:000000000000DF29                 db    6
.eh_frame:000000000000DF2A                 db    0
.eh_frame:000000000000DF2B                 db    0
.eh_frame:000000000000DF2C                 db  74h ; t
.eh_frame:000000000000DF2D                 db  6Dh ; m
.eh_frame:000000000000DF2E                 db 0FFh
.eh_frame:000000000000DF2F                 db 0FFh
.eh_frame:000000000000DF30                 db 0C6h
.eh_frame:000000000000DF31                 db    0
.eh_frame:000000000000DF32                 db    0
.eh_frame:000000000000DF33                 db    0
.eh_frame:000000000000DF34                 db    0
.eh_frame:000000000000DF35                 db  45h ; E
.eh_frame:000000000000DF36                 db  0Eh
.eh_frame:000000000000DF37                 db  10h
.eh_frame:000000000000DF38                 db  8Eh
.eh_frame:000000000000DF39                 db    2
.eh_frame:000000000000DF3A                 db  42h ; B
.eh_frame:000000000000DF3B                 db  0Eh
.eh_frame:000000000000DF3C                 db  18h
.eh_frame:000000000000DF3D                 db  8Dh
.eh_frame:000000000000DF3E                 db    3
.eh_frame:000000000000DF3F                 db  42h ; B
.eh_frame:000000000000DF40                 db  0Eh
.eh_frame:000000000000DF41                 db  20h
.eh_frame:000000000000DF42                 db  8Ch
.eh_frame:000000000000DF43                 db    4
.eh_frame:000000000000DF44                 db  41h ; A
.eh_frame:000000000000DF45                 db  0Eh
.eh_frame:000000000000DF46                 db  28h ; (
.eh_frame:000000000000DF47                 db  86h
.eh_frame:000000000000DF48                 db    5
.eh_frame:000000000000DF49                 db  41h ; A
.eh_frame:000000000000DF4A                 db  0Eh
.eh_frame:000000000000DF4B                 db  30h ; 0
.eh_frame:000000000000DF4C                 db  83h
.eh_frame:000000000000DF4D                 db    6
.eh_frame:000000000000DF4E                 db    2
.eh_frame:000000000000DF4F                 db  85h
.eh_frame:000000000000DF50                 db  0Ah
.eh_frame:000000000000DF51                 db  0Eh
.eh_frame:000000000000DF52                 db  28h ; (
.eh_frame:000000000000DF53                 db  43h ; C
.eh_frame:000000000000DF54                 db  0Eh
.eh_frame:000000000000DF55                 db  20h
.eh_frame:000000000000DF56                 db  42h ; B
.eh_frame:000000000000DF57                 db  0Eh
.eh_frame:000000000000DF58                 db  18h
.eh_frame:000000000000DF59                 db  42h ; B
.eh_frame:000000000000DF5A                 db  0Eh
.eh_frame:000000000000DF5B                 db  10h
.eh_frame:000000000000DF5C                 db  42h ; B
.eh_frame:000000000000DF5D                 db  0Eh
.eh_frame:000000000000DF5E                 db    8
.eh_frame:000000000000DF5F                 db  47h ; G
.eh_frame:000000000000DF60                 db  0Bh
.eh_frame:000000000000DF61                 db    0
.eh_frame:000000000000DF62                 db    0
.eh_frame:000000000000DF63                 db    0
.eh_frame:000000000000DF64                 db  28h ; (
.eh_frame:000000000000DF65                 db    0
.eh_frame:000000000000DF66                 db    0
.eh_frame:000000000000DF67                 db    0
.eh_frame:000000000000DF68                 db 0B8h
.eh_frame:000000000000DF69                 db    6
.eh_frame:000000000000DF6A                 db    0
.eh_frame:000000000000DF6B                 db    0
.eh_frame:000000000000DF6C                 db    4
.eh_frame:000000000000DF6D                 db  6Eh ; n
.eh_frame:000000000000DF6E                 db 0FFh
.eh_frame:000000000000DF6F                 db 0FFh
.eh_frame:000000000000DF70                 db    2
.eh_frame:000000000000DF71                 db    5
.eh_frame:000000000000DF72                 db    0
.eh_frame:000000000000DF73                 db    0
.eh_frame:000000000000DF74                 db    0
.eh_frame:000000000000DF75                 db  42h ; B
.eh_frame:000000000000DF76                 db  0Eh
.eh_frame:000000000000DF77                 db  10h
.eh_frame:000000000000DF78                 db  8Dh
.eh_frame:000000000000DF79                 db    2
.eh_frame:000000000000DF7A                 db  42h ; B
.eh_frame:000000000000DF7B                 db  0Eh
.eh_frame:000000000000DF7C                 db  18h
.eh_frame:000000000000DF7D                 db  8Ch
.eh_frame:000000000000DF7E                 db    3
.eh_frame:000000000000DF7F                 db  46h ; F
.eh_frame:000000000000DF80                 db  0Eh
.eh_frame:000000000000DF81                 db  20h
.eh_frame:000000000000DF82                 db  86h
.eh_frame:000000000000DF83                 db    4
.eh_frame:000000000000DF84                 db  41h ; A
.eh_frame:000000000000DF85                 db  0Eh
.eh_frame:000000000000DF86                 db  28h ; (
.eh_frame:000000000000DF87                 db  83h
.eh_frame:000000000000DF88                 db    5
.eh_frame:000000000000DF89                 db  49h ; I
.eh_frame:000000000000DF8A                 db  0Eh
.eh_frame:000000000000DF8B                 db 0B0h
.eh_frame:000000000000DF8C                 db    1
.eh_frame:000000000000DF8D                 db    0
.eh_frame:000000000000DF8E                 db    0
.eh_frame:000000000000DF8F                 db    0
.eh_frame:000000000000DF90                 db  4Ch ; L
.eh_frame:000000000000DF91                 db    0
.eh_frame:000000000000DF92                 db    0
.eh_frame:000000000000DF93                 db    0
.eh_frame:000000000000DF94                 db 0E4h
.eh_frame:000000000000DF95                 db    6
.eh_frame:000000000000DF96                 db    0
.eh_frame:000000000000DF97                 db    0
.eh_frame:000000000000DF98                 db 0D8h
.eh_frame:000000000000DF99                 db  3Bh ; ;
.eh_frame:000000000000DF9A                 db 0FFh
.eh_frame:000000000000DF9B                 db 0FFh
.eh_frame:000000000000DF9C                 db 0F2h
.eh_frame:000000000000DF9D                 db  11h
.eh_frame:000000000000DF9E                 db    0
.eh_frame:000000000000DF9F                 db    0
.eh_frame:000000000000DFA0                 db    0
.eh_frame:000000000000DFA1                 db  42h ; B
.eh_frame:000000000000DFA2                 db  0Eh
.eh_frame:000000000000DFA3                 db  10h
.eh_frame:000000000000DFA4                 db  8Fh
.eh_frame:000000000000DFA5                 db    2
.eh_frame:000000000000DFA6                 db  42h ; B
.eh_frame:000000000000DFA7                 db  0Eh
.eh_frame:000000000000DFA8                 db  18h
.eh_frame:000000000000DFA9                 db  8Eh
.eh_frame:000000000000DFAA                 db    3
.eh_frame:000000000000DFAB                 db  45h ; E
.eh_frame:000000000000DFAC                 db  0Eh
.eh_frame:000000000000DFAD                 db  20h
.eh_frame:000000000000DFAE                 db  8Dh
.eh_frame:000000000000DFAF                 db    4
.eh_frame:000000000000DFB0                 db  42h ; B
.eh_frame:000000000000DFB1                 db  0Eh
.eh_frame:000000000000DFB2                 db  28h ; (
.eh_frame:000000000000DFB3                 db  8Ch
.eh_frame:000000000000DFB4                 db    5
.eh_frame:000000000000DFB5                 db  44h ; D
.eh_frame:000000000000DFB6                 db  0Eh
.eh_frame:000000000000DFB7                 db  30h ; 0
.eh_frame:000000000000DFB8                 db  86h
.eh_frame:000000000000DFB9                 db    6
.eh_frame:000000000000DFBA                 db  41h ; A
.eh_frame:000000000000DFBB                 db  0Eh
.eh_frame:000000000000DFBC                 db  38h ; 8
.eh_frame:000000000000DFBD                 db  83h
.eh_frame:000000000000DFBE                 db    7
.eh_frame:000000000000DFBF                 db  44h ; D
.eh_frame:000000000000DFC0                 db  0Eh
.eh_frame:000000000000DFC1                 db  90h
.eh_frame:000000000000DFC2                 db    1
.eh_frame:000000000000DFC3                 db    3
.eh_frame:000000000000DFC4                 db  6Fh ; o
.eh_frame:000000000000DFC5                 db    7
.eh_frame:000000000000DFC6                 db  0Ah
.eh_frame:000000000000DFC7                 db  0Eh
.eh_frame:000000000000DFC8                 db  38h ; 8
.eh_frame:000000000000DFC9                 db  41h ; A
.eh_frame:000000000000DFCA                 db  0Eh
.eh_frame:000000000000DFCB                 db  30h ; 0
.eh_frame:000000000000DFCC                 db  41h ; A
.eh_frame:000000000000DFCD                 db  0Eh
.eh_frame:000000000000DFCE                 db  28h ; (
.eh_frame:000000000000DFCF                 db  42h ; B
.eh_frame:000000000000DFD0                 db  0Eh
.eh_frame:000000000000DFD1                 db  20h
.eh_frame:000000000000DFD2                 db  42h ; B
.eh_frame:000000000000DFD3                 db  0Eh
.eh_frame:000000000000DFD4                 db  18h
.eh_frame:000000000000DFD5                 db  42h ; B
.eh_frame:000000000000DFD6                 db  0Eh
.eh_frame:000000000000DFD7                 db  10h
.eh_frame:000000000000DFD8                 db  42h ; B
.eh_frame:000000000000DFD9                 db  0Eh
.eh_frame:000000000000DFDA                 db    8
.eh_frame:000000000000DFDB                 db  41h ; A
.eh_frame:000000000000DFDC                 db  0Bh
.eh_frame:000000000000DFDD                 db    0
.eh_frame:000000000000DFDE                 db    0
.eh_frame:000000000000DFDF                 db    0
.eh_frame:000000000000DFE0                 db  10h
.eh_frame:000000000000DFE1                 db    0
.eh_frame:000000000000DFE2                 db    0
.eh_frame:000000000000DFE3                 db    0
.eh_frame:000000000000DFE4                 db  34h ; 4
.eh_frame:000000000000DFE5                 db    7
.eh_frame:000000000000DFE6                 db    0
.eh_frame:000000000000DFE7                 db    0
.eh_frame:000000000000DFE8                 db  98h
.eh_frame:000000000000DFE9                 db  72h ; r
.eh_frame:000000000000DFEA                 db 0FFh
.eh_frame:000000000000DFEB                 db 0FFh
.eh_frame:000000000000DFEC                 db  0Ah
.eh_frame:000000000000DFED                 db    0
.eh_frame:000000000000DFEE                 db    0
.eh_frame:000000000000DFEF                 db    0
.eh_frame:000000000000DFF0                 db    0
.eh_frame:000000000000DFF1                 db    0
.eh_frame:000000000000DFF2                 db    0
.eh_frame:000000000000DFF3                 db    0
.eh_frame:000000000000DFF4                 db  48h ; H
.eh_frame:000000000000DFF5                 db    0
.eh_frame:000000000000DFF6                 db    0
.eh_frame:000000000000DFF7                 db    0
.eh_frame:000000000000DFF8                 db  48h ; H
.eh_frame:000000000000DFF9                 db    7
.eh_frame:000000000000DFFA                 db    0
.eh_frame:000000000000DFFB                 db    0
.eh_frame:000000000000DFFC                 db  94h
.eh_frame:000000000000DFFD                 db  72h ; r
.eh_frame:000000000000DFFE                 db 0FFh
.eh_frame:000000000000DFFF                 db 0FFh
.eh_frame:000000000000E000                 db  16h
.eh_frame:000000000000E001                 db    1
.eh_frame:000000000000E002                 db    0
.eh_frame:000000000000E003                 db    0
.eh_frame:000000000000E004                 db    0
.eh_frame:000000000000E005                 db  42h ; B
.eh_frame:000000000000E006                 db  0Eh
.eh_frame:000000000000E007                 db  10h
.eh_frame:000000000000E008                 db  8Fh
.eh_frame:000000000000E009                 db    2
.eh_frame:000000000000E00A                 db  42h ; B
.eh_frame:000000000000E00B                 db  0Eh
.eh_frame:000000000000E00C                 db  18h
.eh_frame:000000000000E00D                 db  8Eh
.eh_frame:000000000000E00E                 db    3
.eh_frame:000000000000E00F                 db  45h ; E
.eh_frame:000000000000E010                 db  0Eh
.eh_frame:000000000000E011                 db  20h
.eh_frame:000000000000E012                 db  8Dh
.eh_frame:000000000000E013                 db    4
.eh_frame:000000000000E014                 db  42h ; B
.eh_frame:000000000000E015                 db  0Eh
.eh_frame:000000000000E016                 db  28h ; (
.eh_frame:000000000000E017                 db  8Ch
.eh_frame:000000000000E018                 db    5
.eh_frame:000000000000E019                 db  44h ; D
.eh_frame:000000000000E01A                 db  0Eh
.eh_frame:000000000000E01B                 db  30h ; 0
.eh_frame:000000000000E01C                 db  86h
.eh_frame:000000000000E01D                 db    6
.eh_frame:000000000000E01E                 db  41h ; A
.eh_frame:000000000000E01F                 db  0Eh
.eh_frame:000000000000E020                 db  38h ; 8
.eh_frame:000000000000E021                 db  83h
.eh_frame:000000000000E022                 db    7
.eh_frame:000000000000E023                 db  47h ; G
.eh_frame:000000000000E024                 db  0Eh
.eh_frame:000000000000E025                 db  60h ; `
.eh_frame:000000000000E026                 db    2
.eh_frame:000000000000E027                 db 0DEh
.eh_frame:000000000000E028                 db  0Ah
.eh_frame:000000000000E029                 db  0Eh
.eh_frame:000000000000E02A                 db  38h ; 8
.eh_frame:000000000000E02B                 db  41h ; A
.eh_frame:000000000000E02C                 db  0Eh
.eh_frame:000000000000E02D                 db  30h ; 0
.eh_frame:000000000000E02E                 db  41h ; A
.eh_frame:000000000000E02F                 db  0Eh
.eh_frame:000000000000E030                 db  28h ; (
.eh_frame:000000000000E031                 db  42h ; B
.eh_frame:000000000000E032                 db  0Eh
.eh_frame:000000000000E033                 db  20h
.eh_frame:000000000000E034                 db  42h ; B
.eh_frame:000000000000E035                 db  0Eh
.eh_frame:000000000000E036                 db  18h
.eh_frame:000000000000E037                 db  42h ; B
.eh_frame:000000000000E038                 db  0Eh
.eh_frame:000000000000E039                 db  10h
.eh_frame:000000000000E03A                 db  42h ; B
.eh_frame:000000000000E03B                 db  0Eh
.eh_frame:000000000000E03C                 db    8
.eh_frame:000000000000E03D                 db  41h ; A
.eh_frame:000000000000E03E                 db  0Bh
.eh_frame:000000000000E03F                 db    0
.eh_frame:000000000000E040                 db  28h ; (
.eh_frame:000000000000E041                 db    0
.eh_frame:000000000000E042                 db    0
.eh_frame:000000000000E043                 db    0
.eh_frame:000000000000E044                 db  94h
.eh_frame:000000000000E045                 db    7
.eh_frame:000000000000E046                 db    0
.eh_frame:000000000000E047                 db    0
.eh_frame:000000000000E048                 db  68h ; h
.eh_frame:000000000000E049                 db  73h ; s
.eh_frame:000000000000E04A                 db 0FFh
.eh_frame:000000000000E04B                 db 0FFh
.eh_frame:000000000000E04C                 db  73h ; s
.eh_frame:000000000000E04D                 db    0
.eh_frame:000000000000E04E                 db    0
.eh_frame:000000000000E04F                 db    0
.eh_frame:000000000000E050                 db    0
.eh_frame:000000000000E051                 db  46h ; F
.eh_frame:000000000000E052                 db  0Eh
.eh_frame:000000000000E053                 db  10h
.eh_frame:000000000000E054                 db  8Ch
.eh_frame:000000000000E055                 db    2
.eh_frame:000000000000E056                 db  46h ; F
.eh_frame:000000000000E057                 db  0Eh
.eh_frame:000000000000E058                 db  18h
.eh_frame:000000000000E059                 db  86h
.eh_frame:000000000000E05A                 db    3
.eh_frame:000000000000E05B                 db  44h ; D
.eh_frame:000000000000E05C                 db  0Eh
.eh_frame:000000000000E05D                 db  20h
.eh_frame:000000000000E05E                 db  83h
.eh_frame:000000000000E05F                 db    4
.eh_frame:000000000000E060                 db  7Fh ; 
.eh_frame:000000000000E061                 db  0Ah
.eh_frame:000000000000E062                 db  0Eh
.eh_frame:000000000000E063                 db  18h
.eh_frame:000000000000E064                 db  41h ; A
.eh_frame:000000000000E065                 db  0Eh
.eh_frame:000000000000E066                 db  10h
.eh_frame:000000000000E067                 db  42h ; B
.eh_frame:000000000000E068                 db  0Eh
.eh_frame:000000000000E069                 db    8
.eh_frame:000000000000E06A                 db  4Eh ; N
.eh_frame:000000000000E06B                 db  0Bh
.eh_frame:000000000000E06C                 db  5Ch ; \
.eh_frame:000000000000E06D                 db    0
.eh_frame:000000000000E06E                 db    0
.eh_frame:000000000000E06F                 db    0
.eh_frame:000000000000E070                 db 0C0h
.eh_frame:000000000000E071                 db    7
.eh_frame:000000000000E072                 db    0
.eh_frame:000000000000E073                 db    0
.eh_frame:000000000000E074                 db 0BCh
.eh_frame:000000000000E075                 db  73h ; s
.eh_frame:000000000000E076                 db 0FFh
.eh_frame:000000000000E077                 db 0FFh
.eh_frame:000000000000E078                 db  20h
.eh_frame:000000000000E079                 db    1
.eh_frame:000000000000E07A                 db    0
.eh_frame:000000000000E07B                 db    0
.eh_frame:000000000000E07C                 db    0
.eh_frame:000000000000E07D                 db  42h ; B
.eh_frame:000000000000E07E                 db  0Eh
.eh_frame:000000000000E07F                 db  10h
.eh_frame:000000000000E080                 db  8Fh
.eh_frame:000000000000E081                 db    2
.eh_frame:000000000000E082                 db  42h ; B
.eh_frame:000000000000E083                 db  0Eh
.eh_frame:000000000000E084                 db  18h
.eh_frame:000000000000E085                 db  8Eh
.eh_frame:000000000000E086                 db    3
.eh_frame:000000000000E087                 db  45h ; E
.eh_frame:000000000000E088                 db  0Eh
.eh_frame:000000000000E089                 db  20h
.eh_frame:000000000000E08A                 db  8Dh
.eh_frame:000000000000E08B                 db    4
.eh_frame:000000000000E08C                 db  42h ; B
.eh_frame:000000000000E08D                 db  0Eh
.eh_frame:000000000000E08E                 db  28h ; (
.eh_frame:000000000000E08F                 db  8Ch
.eh_frame:000000000000E090                 db    5
.eh_frame:000000000000E091                 db  43h ; C
.eh_frame:000000000000E092                 db  0Eh
.eh_frame:000000000000E093                 db  30h ; 0
.eh_frame:000000000000E094                 db  86h
.eh_frame:000000000000E095                 db    6
.eh_frame:000000000000E096                 db  41h ; A
.eh_frame:000000000000E097                 db  0Eh
.eh_frame:000000000000E098                 db  38h ; 8
.eh_frame:000000000000E099                 db  83h
.eh_frame:000000000000E09A                 db    7
.eh_frame:000000000000E09B                 db  56h ; V
.eh_frame:000000000000E09C                 db  0Eh
.eh_frame:000000000000E09D                 db  40h ; @
.eh_frame:000000000000E09E                 db    2
.eh_frame:000000000000E09F                 db 0D3h
.eh_frame:000000000000E0A0                 db  0Ah
.eh_frame:000000000000E0A1                 db  0Eh
.eh_frame:000000000000E0A2                 db  38h ; 8
.eh_frame:000000000000E0A3                 db  41h ; A
.eh_frame:000000000000E0A4                 db  0Eh
.eh_frame:000000000000E0A5                 db  30h ; 0
.eh_frame:000000000000E0A6                 db  41h ; A
.eh_frame:000000000000E0A7                 db  0Eh
.eh_frame:000000000000E0A8                 db  28h ; (
.eh_frame:000000000000E0A9                 db  42h ; B
.eh_frame:000000000000E0AA                 db  0Eh
.eh_frame:000000000000E0AB                 db  20h
.eh_frame:000000000000E0AC                 db  42h ; B
.eh_frame:000000000000E0AD                 db  0Eh
.eh_frame:000000000000E0AE                 db  18h
.eh_frame:000000000000E0AF                 db  42h ; B
.eh_frame:000000000000E0B0                 db  0Eh
.eh_frame:000000000000E0B1                 db  10h
.eh_frame:000000000000E0B2                 db  42h ; B
.eh_frame:000000000000E0B3                 db  0Eh
.eh_frame:000000000000E0B4                 db    8
.eh_frame:000000000000E0B5                 db  46h ; F
.eh_frame:000000000000E0B6                 db  0Bh
.eh_frame:000000000000E0B7                 db  44h ; D
.eh_frame:000000000000E0B8                 db  0Eh
.eh_frame:000000000000E0B9                 db  38h ; 8
.eh_frame:000000000000E0BA                 db  46h ; F
.eh_frame:000000000000E0BB                 db  0Eh
.eh_frame:000000000000E0BC                 db  30h ; 0
.eh_frame:000000000000E0BD                 db  41h ; A
.eh_frame:000000000000E0BE                 db  0Eh
.eh_frame:000000000000E0BF                 db  28h ; (
.eh_frame:000000000000E0C0                 db  42h ; B
.eh_frame:000000000000E0C1                 db  0Eh
.eh_frame:000000000000E0C2                 db  20h
.eh_frame:000000000000E0C3                 db  42h ; B
.eh_frame:000000000000E0C4                 db  0Eh
.eh_frame:000000000000E0C5                 db  18h
.eh_frame:000000000000E0C6                 db  42h ; B
.eh_frame:000000000000E0C7                 db  0Eh
.eh_frame:000000000000E0C8                 db  10h
.eh_frame:000000000000E0C9                 db  42h ; B
.eh_frame:000000000000E0CA                 db  0Eh
.eh_frame:000000000000E0CB                 db    8
.eh_frame:000000000000E0CC                 db  48h ; H
.eh_frame:000000000000E0CD                 db    0
.eh_frame:000000000000E0CE                 db    0
.eh_frame:000000000000E0CF                 db    0
.eh_frame:000000000000E0D0                 db  20h
.eh_frame:000000000000E0D1                 db    8
.eh_frame:000000000000E0D2                 db    0
.eh_frame:000000000000E0D3                 db    0
.eh_frame:000000000000E0D4                 db  7Ch ; |
.eh_frame:000000000000E0D5                 db  74h ; t
.eh_frame:000000000000E0D6                 db 0FFh
.eh_frame:000000000000E0D7                 db 0FFh
.eh_frame:000000000000E0D8                 db  6Dh ; m
.eh_frame:000000000000E0D9                 db    0
.eh_frame:000000000000E0DA                 db    0
.eh_frame:000000000000E0DB                 db    0
.eh_frame:000000000000E0DC                 db    0
.eh_frame:000000000000E0DD                 db  42h ; B
.eh_frame:000000000000E0DE                 db  0Eh
.eh_frame:000000000000E0DF                 db  10h
.eh_frame:000000000000E0E0                 db  8Fh
.eh_frame:000000000000E0E1                 db    2
.eh_frame:000000000000E0E2                 db  42h ; B
.eh_frame:000000000000E0E3                 db  0Eh
.eh_frame:000000000000E0E4                 db  18h
.eh_frame:000000000000E0E5                 db  8Eh
.eh_frame:000000000000E0E6                 db    3
.eh_frame:000000000000E0E7                 db  45h ; E
.eh_frame:000000000000E0E8                 db  0Eh
.eh_frame:000000000000E0E9                 db  20h
.eh_frame:000000000000E0EA                 db  8Dh
.eh_frame:000000000000E0EB                 db    4
.eh_frame:000000000000E0EC                 db  42h ; B
.eh_frame:000000000000E0ED                 db  0Eh
.eh_frame:000000000000E0EE                 db  28h ; (
.eh_frame:000000000000E0EF                 db  8Ch
.eh_frame:000000000000E0F0                 db    5
.eh_frame:000000000000E0F1                 db  44h ; D
.eh_frame:000000000000E0F2                 db  0Eh
.eh_frame:000000000000E0F3                 db  30h ; 0
.eh_frame:000000000000E0F4                 db  86h
.eh_frame:000000000000E0F5                 db    6
.eh_frame:000000000000E0F6                 db  41h ; A
.eh_frame:000000000000E0F7                 db  0Eh
.eh_frame:000000000000E0F8                 db  38h ; 8
.eh_frame:000000000000E0F9                 db  83h
.eh_frame:000000000000E0FA                 db    7
.eh_frame:000000000000E0FB                 db  50h ; P
.eh_frame:000000000000E0FC                 db  0Eh
.eh_frame:000000000000E0FD                 db  40h ; @
.eh_frame:000000000000E0FE                 db  5Ah ; Z
.eh_frame:000000000000E0FF                 db  0Ah
.eh_frame:000000000000E100                 db  0Eh
.eh_frame:000000000000E101                 db  38h ; 8
.eh_frame:000000000000E102                 db  41h ; A
.eh_frame:000000000000E103                 db  0Eh
.eh_frame:000000000000E104                 db  30h ; 0
.eh_frame:000000000000E105                 db  41h ; A
.eh_frame:000000000000E106                 db  0Eh
.eh_frame:000000000000E107                 db  28h ; (
.eh_frame:000000000000E108                 db  42h ; B
.eh_frame:000000000000E109                 db  0Eh
.eh_frame:000000000000E10A                 db  20h
.eh_frame:000000000000E10B                 db  42h ; B
.eh_frame:000000000000E10C                 db  0Eh
.eh_frame:000000000000E10D                 db  18h
.eh_frame:000000000000E10E                 db  42h ; B
.eh_frame:000000000000E10F                 db  0Eh
.eh_frame:000000000000E110                 db  10h
.eh_frame:000000000000E111                 db  42h ; B
.eh_frame:000000000000E112                 db  0Eh
.eh_frame:000000000000E113                 db    8
.eh_frame:000000000000E114                 db  41h ; A
.eh_frame:000000000000E115                 db  0Bh
.eh_frame:000000000000E116                 db    0
.eh_frame:000000000000E117                 db    0
.eh_frame:000000000000E118                 db  3Ch ; <
.eh_frame:000000000000E119                 db    0
.eh_frame:000000000000E11A                 db    0
.eh_frame:000000000000E11B                 db    0
.eh_frame:000000000000E11C                 db  6Ch ; l
.eh_frame:000000000000E11D                 db    8
.eh_frame:000000000000E11E                 db    0
.eh_frame:000000000000E11F                 db    0
.eh_frame:000000000000E120                 db 0A0h
.eh_frame:000000000000E121                 db  74h ; t
.eh_frame:000000000000E122                 db 0FFh
.eh_frame:000000000000E123                 db 0FFh
.eh_frame:000000000000E124                 db  4Dh ; M
.eh_frame:000000000000E125                 db    0
.eh_frame:000000000000E126                 db    0
.eh_frame:000000000000E127                 db    0
.eh_frame:000000000000E128                 db    0
.eh_frame:000000000000E129                 db  42h ; B
.eh_frame:000000000000E12A                 db  0Eh
.eh_frame:000000000000E12B                 db  10h
.eh_frame:000000000000E12C                 db  8Eh
.eh_frame:000000000000E12D                 db    2
.eh_frame:000000000000E12E                 db  42h ; B
.eh_frame:000000000000E12F                 db  0Eh
.eh_frame:000000000000E130                 db  18h
.eh_frame:000000000000E131                 db  8Dh
.eh_frame:000000000000E132                 db    3
.eh_frame:000000000000E133                 db  42h ; B
.eh_frame:000000000000E134                 db  0Eh
.eh_frame:000000000000E135                 db  20h
.eh_frame:000000000000E136                 db  8Ch
.eh_frame:000000000000E137                 db    4
.eh_frame:000000000000E138                 db  41h ; A
.eh_frame:000000000000E139                 db  0Eh
.eh_frame:000000000000E13A                 db  28h ; (
.eh_frame:000000000000E13B                 db  86h
.eh_frame:000000000000E13C                 db    5
.eh_frame:000000000000E13D                 db  41h ; A
.eh_frame:000000000000E13E                 db  0Eh
.eh_frame:000000000000E13F                 db  30h ; 0
.eh_frame:000000000000E140                 db  83h
.eh_frame:000000000000E141                 db    6
.eh_frame:000000000000E142                 db  7Ah ; z
.eh_frame:000000000000E143                 db  0Eh
.eh_frame:000000000000E144                 db  28h ; (
.eh_frame:000000000000E145                 db  44h ; D
.eh_frame:000000000000E146                 db  0Eh
.eh_frame:000000000000E147                 db  20h
.eh_frame:000000000000E148                 db  42h ; B
.eh_frame:000000000000E149                 db  0Eh
.eh_frame:000000000000E14A                 db  18h
.eh_frame:000000000000E14B                 db  42h ; B
.eh_frame:000000000000E14C                 db  0Eh
.eh_frame:000000000000E14D                 db  10h
.eh_frame:000000000000E14E                 db  42h ; B
.eh_frame:000000000000E14F                 db  0Eh
.eh_frame:000000000000E150                 db    8
.eh_frame:000000000000E151                 db    0
.eh_frame:000000000000E152                 db    0
.eh_frame:000000000000E153                 db    0
.eh_frame:000000000000E154                 db    0
.eh_frame:000000000000E155                 db    0
.eh_frame:000000000000E156                 db    0
.eh_frame:000000000000E157                 db    0
.eh_frame:000000000000E158                 db  10h
.eh_frame:000000000000E159                 db    0
.eh_frame:000000000000E15A                 db    0
.eh_frame:000000000000E15B                 db    0
.eh_frame:000000000000E15C                 db 0ACh
.eh_frame:000000000000E15D                 db    8
.eh_frame:000000000000E15E                 db    0
.eh_frame:000000000000E15F                 db    0
.eh_frame:000000000000E160                 db 0B0h
.eh_frame:000000000000E161                 db  74h ; t
.eh_frame:000000000000E162                 db 0FFh
.eh_frame:000000000000E163                 db 0FFh
.eh_frame:000000000000E164                 db    8
.eh_frame:000000000000E165                 db    0
.eh_frame:000000000000E166                 db    0
.eh_frame:000000000000E167                 db    0
.eh_frame:000000000000E168                 db    0
.eh_frame:000000000000E169                 db    0
.eh_frame:000000000000E16A                 db    0
.eh_frame:000000000000E16B                 db    0
.eh_frame:000000000000E16C                 db  10h
.eh_frame:000000000000E16D                 db    0
.eh_frame:000000000000E16E                 db    0
.eh_frame:000000000000E16F                 db    0
.eh_frame:000000000000E170                 db 0C0h
.eh_frame:000000000000E171                 db    8
.eh_frame:000000000000E172                 db    0
.eh_frame:000000000000E173                 db    0
.eh_frame:000000000000E174                 db 0ACh
.eh_frame:000000000000E175                 db  74h ; t
.eh_frame:000000000000E176                 db 0FFh
.eh_frame:000000000000E177                 db 0FFh
.eh_frame:000000000000E178                 db    8
.eh_frame:000000000000E179                 db    0
.eh_frame:000000000000E17A                 db    0
.eh_frame:000000000000E17B                 db    0
.eh_frame:000000000000E17C                 db    0
.eh_frame:000000000000E17D                 db    0
.eh_frame:000000000000E17E                 db    0
.eh_frame:000000000000E17F                 db    0
.eh_frame:000000000000E180                 db  2Ch ; ,
.eh_frame:000000000000E181                 db    0
.eh_frame:000000000000E182                 db    0
.eh_frame:000000000000E183                 db    0
.eh_frame:000000000000E184                 db 0D4h
.eh_frame:000000000000E185                 db    8
.eh_frame:000000000000E186                 db    0
.eh_frame:000000000000E187                 db    0
.eh_frame:000000000000E188                 db 0A8h
.eh_frame:000000000000E189                 db  74h ; t
.eh_frame:000000000000E18A                 db 0FFh
.eh_frame:000000000000E18B                 db 0FFh
.eh_frame:000000000000E18C                 db 0A4h
.eh_frame:000000000000E18D                 db    0
.eh_frame:000000000000E18E                 db    0
.eh_frame:000000000000E18F                 db    0
.eh_frame:000000000000E190                 db    0
.eh_frame:000000000000E191                 db  41h ; A
.eh_frame:000000000000E192                 db  0Eh
.eh_frame:000000000000E193                 db  10h
.eh_frame:000000000000E194                 db  86h
.eh_frame:000000000000E195                 db    2
.eh_frame:000000000000E196                 db  41h ; A
.eh_frame:000000000000E197                 db  0Eh
.eh_frame:000000000000E198                 db  18h
.eh_frame:000000000000E199                 db  83h
.eh_frame:000000000000E19A                 db    3
.eh_frame:000000000000E19B                 db  44h ; D
.eh_frame:000000000000E19C                 db  0Eh
.eh_frame:000000000000E19D                 db  20h
.eh_frame:000000000000E19E                 db  7Ah ; z
.eh_frame:000000000000E19F                 db  0Ah
.eh_frame:000000000000E1A0                 db  0Eh
.eh_frame:000000000000E1A1                 db  18h
.eh_frame:000000000000E1A2                 db  41h ; A
.eh_frame:000000000000E1A3                 db  0Eh
.eh_frame:000000000000E1A4                 db  10h
.eh_frame:000000000000E1A5                 db  41h ; A
.eh_frame:000000000000E1A6                 db  0Eh
.eh_frame:000000000000E1A7                 db    8
.eh_frame:000000000000E1A8                 db  41h ; A
.eh_frame:000000000000E1A9                 db  0Bh
.eh_frame:000000000000E1AA                 db    0
.eh_frame:000000000000E1AB                 db    0
.eh_frame:000000000000E1AC                 db    0
.eh_frame:000000000000E1AD                 db    0
.eh_frame:000000000000E1AE                 db    0
.eh_frame:000000000000E1AF                 db    0
.eh_frame:000000000000E1B0                 db  54h ; T
.eh_frame:000000000000E1B1                 db    0
.eh_frame:000000000000E1B2                 db    0
.eh_frame:000000000000E1B3                 db    0
.eh_frame:000000000000E1B4                 db    4
.eh_frame:000000000000E1B5                 db    9
.eh_frame:000000000000E1B6                 db    0
.eh_frame:000000000000E1B7                 db    0
.eh_frame:000000000000E1B8                 db  28h ; (
.eh_frame:000000000000E1B9                 db  75h ; u
.eh_frame:000000000000E1BA                 db 0FFh
.eh_frame:000000000000E1BB                 db 0FFh
.eh_frame:000000000000E1BC                 db  66h ; f
.eh_frame:000000000000E1BD                 db    1
.eh_frame:000000000000E1BE                 db    0
.eh_frame:000000000000E1BF                 db    0
.eh_frame:000000000000E1C0                 db    0
.eh_frame:000000000000E1C1                 db  42h ; B
.eh_frame:000000000000E1C2                 db  0Eh
.eh_frame:000000000000E1C3                 db  10h
.eh_frame:000000000000E1C4                 db  8Fh
.eh_frame:000000000000E1C5                 db    2
.eh_frame:000000000000E1C6                 db  42h ; B
.eh_frame:000000000000E1C7                 db  0Eh
.eh_frame:000000000000E1C8                 db  18h
.eh_frame:000000000000E1C9                 db  8Eh
.eh_frame:000000000000E1CA                 db    3
.eh_frame:000000000000E1CB                 db  45h ; E
.eh_frame:000000000000E1CC                 db  0Eh
.eh_frame:000000000000E1CD                 db  20h
.eh_frame:000000000000E1CE                 db  8Dh
.eh_frame:000000000000E1CF                 db    4
.eh_frame:000000000000E1D0                 db  42h ; B
.eh_frame:000000000000E1D1                 db  0Eh
.eh_frame:000000000000E1D2                 db  28h ; (
.eh_frame:000000000000E1D3                 db  8Ch
.eh_frame:000000000000E1D4                 db    5
.eh_frame:000000000000E1D5                 db  44h ; D
.eh_frame:000000000000E1D6                 db  0Eh
.eh_frame:000000000000E1D7                 db  30h ; 0
.eh_frame:000000000000E1D8                 db  86h
.eh_frame:000000000000E1D9                 db    6
.eh_frame:000000000000E1DA                 db  41h ; A
.eh_frame:000000000000E1DB                 db  0Eh
.eh_frame:000000000000E1DC                 db  38h ; 8
.eh_frame:000000000000E1DD                 db  83h
.eh_frame:000000000000E1DE                 db    7
.eh_frame:000000000000E1DF                 db  4Bh ; K
.eh_frame:000000000000E1E0                 db  0Eh
.eh_frame:000000000000E1E1                 db  70h ; p
.eh_frame:000000000000E1E2                 db    2
.eh_frame:000000000000E1E3                 db 0BCh
.eh_frame:000000000000E1E4                 db  0Eh
.eh_frame:000000000000E1E5                 db  78h ; x
.eh_frame:000000000000E1E6                 db  49h ; I
.eh_frame:000000000000E1E7                 db  0Eh
.eh_frame:000000000000E1E8                 db  80h
.eh_frame:000000000000E1E9                 db    1
.eh_frame:000000000000E1EA                 db  5Fh ; _
.eh_frame:000000000000E1EB                 db  0Eh
.eh_frame:000000000000E1EC                 db  78h ; x
.eh_frame:000000000000E1ED                 db  41h ; A
.eh_frame:000000000000E1EE                 db  0Eh
.eh_frame:000000000000E1EF                 db  70h ; p
.eh_frame:000000000000E1F0                 db  7Eh ; ~
.eh_frame:000000000000E1F1                 db  0Ah
.eh_frame:000000000000E1F2                 db  0Eh
.eh_frame:000000000000E1F3                 db  38h ; 8
.eh_frame:000000000000E1F4                 db  41h ; A
.eh_frame:000000000000E1F5                 db  0Eh
.eh_frame:000000000000E1F6                 db  30h ; 0
.eh_frame:000000000000E1F7                 db  41h ; A
.eh_frame:000000000000E1F8                 db  0Eh
.eh_frame:000000000000E1F9                 db  28h ; (
.eh_frame:000000000000E1FA                 db  42h ; B
.eh_frame:000000000000E1FB                 db  0Eh
.eh_frame:000000000000E1FC                 db  20h
.eh_frame:000000000000E1FD                 db  42h ; B
.eh_frame:000000000000E1FE                 db  0Eh
.eh_frame:000000000000E1FF                 db  18h
.eh_frame:000000000000E200                 db  42h ; B
.eh_frame:000000000000E201                 db  0Eh
.eh_frame:000000000000E202                 db  10h
.eh_frame:000000000000E203                 db  42h ; B
.eh_frame:000000000000E204                 db  0Eh
.eh_frame:000000000000E205                 db    8
.eh_frame:000000000000E206                 db  48h ; H
.eh_frame:000000000000E207                 db  0Bh
.eh_frame:000000000000E208                 db  54h ; T
.eh_frame:000000000000E209                 db    0
.eh_frame:000000000000E20A                 db    0
.eh_frame:000000000000E20B                 db    0
.eh_frame:000000000000E20C                 db  5Ch ; \
.eh_frame:000000000000E20D                 db    9
.eh_frame:000000000000E20E                 db    0
.eh_frame:000000000000E20F                 db    0
.eh_frame:000000000000E210                 db  40h ; @
.eh_frame:000000000000E211                 db  76h ; v
.eh_frame:000000000000E212                 db 0FFh
.eh_frame:000000000000E213                 db 0FFh
.eh_frame:000000000000E214                 db  6Ch ; l
.eh_frame:000000000000E215                 db    1
.eh_frame:000000000000E216                 db    0
.eh_frame:000000000000E217                 db    0
.eh_frame:000000000000E218                 db    0
.eh_frame:000000000000E219                 db  42h ; B
.eh_frame:000000000000E21A                 db  0Eh
.eh_frame:000000000000E21B                 db  10h
.eh_frame:000000000000E21C                 db  8Fh
.eh_frame:000000000000E21D                 db    2
.eh_frame:000000000000E21E                 db  46h ; F
.eh_frame:000000000000E21F                 db  0Eh
.eh_frame:000000000000E220                 db  18h
.eh_frame:000000000000E221                 db  8Eh
.eh_frame:000000000000E222                 db    3
.eh_frame:000000000000E223                 db  42h ; B
.eh_frame:000000000000E224                 db  0Eh
.eh_frame:000000000000E225                 db  20h
.eh_frame:000000000000E226                 db  8Dh
.eh_frame:000000000000E227                 db    4
.eh_frame:000000000000E228                 db  45h ; E
.eh_frame:000000000000E229                 db  0Eh
.eh_frame:000000000000E22A                 db  28h ; (
.eh_frame:000000000000E22B                 db  8Ch
.eh_frame:000000000000E22C                 db    5
.eh_frame:000000000000E22D                 db  41h ; A
.eh_frame:000000000000E22E                 db  0Eh
.eh_frame:000000000000E22F                 db  30h ; 0
.eh_frame:000000000000E230                 db  86h
.eh_frame:000000000000E231                 db    6
.eh_frame:000000000000E232                 db  44h ; D
.eh_frame:000000000000E233                 db  0Eh
.eh_frame:000000000000E234                 db  38h ; 8
.eh_frame:000000000000E235                 db  83h
.eh_frame:000000000000E236                 db    7
.eh_frame:000000000000E237                 db  4Eh ; N
.eh_frame:000000000000E238                 db  0Eh
.eh_frame:000000000000E239                 db  70h ; p
.eh_frame:000000000000E23A                 db    2
.eh_frame:000000000000E23B                 db 0BDh
.eh_frame:000000000000E23C                 db  0Eh
.eh_frame:000000000000E23D                 db  78h ; x
.eh_frame:000000000000E23E                 db  49h ; I
.eh_frame:000000000000E23F                 db  0Eh
.eh_frame:000000000000E240                 db  80h
.eh_frame:000000000000E241                 db    1
.eh_frame:000000000000E242                 db  5Fh ; _
.eh_frame:000000000000E243                 db  0Eh
.eh_frame:000000000000E244                 db  78h ; x
.eh_frame:000000000000E245                 db  41h ; A
.eh_frame:000000000000E246                 db  0Eh
.eh_frame:000000000000E247                 db  70h ; p
.eh_frame:000000000000E248                 db  7Eh ; ~
.eh_frame:000000000000E249                 db  0Ah
.eh_frame:000000000000E24A                 db  0Eh
.eh_frame:000000000000E24B                 db  38h ; 8
.eh_frame:000000000000E24C                 db  41h ; A
.eh_frame:000000000000E24D                 db  0Eh
.eh_frame:000000000000E24E                 db  30h ; 0
.eh_frame:000000000000E24F                 db  41h ; A
.eh_frame:000000000000E250                 db  0Eh
.eh_frame:000000000000E251                 db  28h ; (
.eh_frame:000000000000E252                 db  42h ; B
.eh_frame:000000000000E253                 db  0Eh
.eh_frame:000000000000E254                 db  20h
.eh_frame:000000000000E255                 db  42h ; B
.eh_frame:000000000000E256                 db  0Eh
.eh_frame:000000000000E257                 db  18h
.eh_frame:000000000000E258                 db  42h ; B
.eh_frame:000000000000E259                 db  0Eh
.eh_frame:000000000000E25A                 db  10h
.eh_frame:000000000000E25B                 db  42h ; B
.eh_frame:000000000000E25C                 db  0Eh
.eh_frame:000000000000E25D                 db    8
.eh_frame:000000000000E25E                 db  48h ; H
.eh_frame:000000000000E25F                 db  0Bh
.eh_frame:000000000000E260                 db  5Ch ; \
.eh_frame:000000000000E261                 db    0
.eh_frame:000000000000E262                 db    0
.eh_frame:000000000000E263                 db    0
.eh_frame:000000000000E264                 db 0B4h
.eh_frame:000000000000E265                 db    9
.eh_frame:000000000000E266                 db    0
.eh_frame:000000000000E267                 db    0
.eh_frame:000000000000E268                 db  58h ; X
.eh_frame:000000000000E269                 db  77h ; w
.eh_frame:000000000000E26A                 db 0FFh
.eh_frame:000000000000E26B                 db 0FFh
.eh_frame:000000000000E26C                 db  4Ch ; L
.eh_frame:000000000000E26D                 db    1
.eh_frame:000000000000E26E                 db    0
.eh_frame:000000000000E26F                 db    0
.eh_frame:000000000000E270                 db    0
.eh_frame:000000000000E271                 db  42h ; B
.eh_frame:000000000000E272                 db  0Eh
.eh_frame:000000000000E273                 db  10h
.eh_frame:000000000000E274                 db  8Fh
.eh_frame:000000000000E275                 db    2
.eh_frame:000000000000E276                 db  42h ; B
.eh_frame:000000000000E277                 db  0Eh
.eh_frame:000000000000E278                 db  18h
.eh_frame:000000000000E279                 db  8Eh
.eh_frame:000000000000E27A                 db    3
.eh_frame:000000000000E27B                 db  44h ; D
.eh_frame:000000000000E27C                 db  0Eh
.eh_frame:000000000000E27D                 db  20h
.eh_frame:000000000000E27E                 db  8Dh
.eh_frame:000000000000E27F                 db    4
.eh_frame:000000000000E280                 db  42h ; B
.eh_frame:000000000000E281                 db  0Eh
.eh_frame:000000000000E282                 db  28h ; (
.eh_frame:000000000000E283                 db  8Ch
.eh_frame:000000000000E284                 db    5
.eh_frame:000000000000E285                 db  44h ; D
.eh_frame:000000000000E286                 db  0Eh
.eh_frame:000000000000E287                 db  30h ; 0
.eh_frame:000000000000E288                 db  86h
.eh_frame:000000000000E289                 db    6
.eh_frame:000000000000E28A                 db  41h ; A
.eh_frame:000000000000E28B                 db  0Eh
.eh_frame:000000000000E28C                 db  38h ; 8
.eh_frame:000000000000E28D                 db  83h
.eh_frame:000000000000E28E                 db    7
.eh_frame:000000000000E28F                 db  4Ah ; J
.eh_frame:000000000000E290                 db  0Eh
.eh_frame:000000000000E291                 db  70h ; p
.eh_frame:000000000000E292                 db    2
.eh_frame:000000000000E293                 db 0AEh
.eh_frame:000000000000E294                 db  0Eh
.eh_frame:000000000000E295                 db  78h ; x
.eh_frame:000000000000E296                 db  44h ; D
.eh_frame:000000000000E297                 db  0Eh
.eh_frame:000000000000E298                 db  80h
.eh_frame:000000000000E299                 db    1
.eh_frame:000000000000E29A                 db  4Fh ; O
.eh_frame:000000000000E29B                 db  0Eh
.eh_frame:000000000000E29C                 db  88h
.eh_frame:000000000000E29D                 db    1
.eh_frame:000000000000E29E                 db  49h ; I
.eh_frame:000000000000E29F                 db  0Eh
.eh_frame:000000000000E2A0                 db  90h
.eh_frame:000000000000E2A1                 db    1
.eh_frame:000000000000E2A2                 db  4Ch ; L
.eh_frame:000000000000E2A3                 db  0Eh
.eh_frame:000000000000E2A4                 db  70h ; p
.eh_frame:000000000000E2A5                 db    2
.eh_frame:000000000000E2A6                 db  45h ; E
.eh_frame:000000000000E2A7                 db  0Ah
.eh_frame:000000000000E2A8                 db  0Eh
.eh_frame:000000000000E2A9                 db  38h ; 8
.eh_frame:000000000000E2AA                 db  41h ; A
.eh_frame:000000000000E2AB                 db  0Eh
.eh_frame:000000000000E2AC                 db  30h ; 0
.eh_frame:000000000000E2AD                 db  41h ; A
.eh_frame:000000000000E2AE                 db  0Eh
.eh_frame:000000000000E2AF                 db  28h ; (
.eh_frame:000000000000E2B0                 db  42h ; B
.eh_frame:000000000000E2B1                 db  0Eh
.eh_frame:000000000000E2B2                 db  20h
.eh_frame:000000000000E2B3                 db  42h ; B
.eh_frame:000000000000E2B4                 db  0Eh
.eh_frame:000000000000E2B5                 db  18h
.eh_frame:000000000000E2B6                 db  42h ; B
.eh_frame:000000000000E2B7                 db  0Eh
.eh_frame:000000000000E2B8                 db  10h
.eh_frame:000000000000E2B9                 db  42h ; B
.eh_frame:000000000000E2BA                 db  0Eh
.eh_frame:000000000000E2BB                 db    8
.eh_frame:000000000000E2BC                 db  42h ; B
.eh_frame:000000000000E2BD                 db  0Bh
.eh_frame:000000000000E2BE                 db    0
.eh_frame:000000000000E2BF                 db    0
.eh_frame:000000000000E2C0                 db  1Ch
.eh_frame:000000000000E2C1                 db    0
.eh_frame:000000000000E2C2                 db    0
.eh_frame:000000000000E2C3                 db    0
.eh_frame:000000000000E2C4                 db  14h
.eh_frame:000000000000E2C5                 db  0Ah
.eh_frame:000000000000E2C6                 db    0
.eh_frame:000000000000E2C7                 db    0
.eh_frame:000000000000E2C8                 db  48h ; H
.eh_frame:000000000000E2C9                 db  78h ; x
.eh_frame:000000000000E2CA                 db 0FFh
.eh_frame:000000000000E2CB                 db 0FFh
.eh_frame:000000000000E2CC                 db  9Fh
.eh_frame:000000000000E2CD                 db    0
.eh_frame:000000000000E2CE                 db    0
.eh_frame:000000000000E2CF                 db    0
.eh_frame:000000000000E2D0                 db    0
.eh_frame:000000000000E2D1                 db  44h ; D
.eh_frame:000000000000E2D2                 db  0Eh
.eh_frame:000000000000E2D3                 db  10h
.eh_frame:000000000000E2D4                 db  83h
.eh_frame:000000000000E2D5                 db    2
.eh_frame:000000000000E2D6                 db    2
.eh_frame:000000000000E2D7                 db  78h ; x
.eh_frame:000000000000E2D8                 db  0Ah
.eh_frame:000000000000E2D9                 db  0Eh
.eh_frame:000000000000E2DA                 db    8
.eh_frame:000000000000E2DB                 db  41h ; A
.eh_frame:000000000000E2DC                 db  0Bh
.eh_frame:000000000000E2DD                 db    0
.eh_frame:000000000000E2DE                 db    0
.eh_frame:000000000000E2DF                 db    0
.eh_frame:000000000000E2E0                 db  40h ; @
.eh_frame:000000000000E2E1                 db    0
.eh_frame:000000000000E2E2                 db    0
.eh_frame:000000000000E2E3                 db    0
.eh_frame:000000000000E2E4                 db  34h ; 4
.eh_frame:000000000000E2E5                 db  0Ah
.eh_frame:000000000000E2E6                 db    0
.eh_frame:000000000000E2E7                 db    0
.eh_frame:000000000000E2E8                 db 0C8h
.eh_frame:000000000000E2E9                 db  78h ; x
.eh_frame:000000000000E2EA                 db 0FFh
.eh_frame:000000000000E2EB                 db 0FFh
.eh_frame:000000000000E2EC                 db 0E7h
.eh_frame:000000000000E2ED                 db    0
.eh_frame:000000000000E2EE                 db    0
.eh_frame:000000000000E2EF                 db    0
.eh_frame:000000000000E2F0                 db    0
.eh_frame:000000000000E2F1                 db  41h ; A
.eh_frame:000000000000E2F2                 db  0Eh
.eh_frame:000000000000E2F3                 db  10h
.eh_frame:000000000000E2F4                 db  86h
.eh_frame:000000000000E2F5                 db    2
.eh_frame:000000000000E2F6                 db  41h ; A
.eh_frame:000000000000E2F7                 db  0Eh
.eh_frame:000000000000E2F8                 db  18h
.eh_frame:000000000000E2F9                 db  83h
.eh_frame:000000000000E2FA                 db    3
.eh_frame:000000000000E2FB                 db  49h ; I
.eh_frame:000000000000E2FC                 db  0Eh
.eh_frame:000000000000E2FD                 db  20h
.eh_frame:000000000000E2FE                 db  6Eh ; n
.eh_frame:000000000000E2FF                 db  0Ah
.eh_frame:000000000000E300                 db  0Eh
.eh_frame:000000000000E301                 db  18h
.eh_frame:000000000000E302                 db  41h ; A
.eh_frame:000000000000E303                 db  0Eh
.eh_frame:000000000000E304                 db  10h
.eh_frame:000000000000E305                 db  41h ; A
.eh_frame:000000000000E306                 db  0Eh
.eh_frame:000000000000E307                 db    8
.eh_frame:000000000000E308                 db  45h ; E
.eh_frame:000000000000E309                 db  0Bh
.eh_frame:000000000000E30A                 db    2
.eh_frame:000000000000E30B                 db  4Ah ; J
.eh_frame:000000000000E30C                 db  0Ah
.eh_frame:000000000000E30D                 db  0Eh
.eh_frame:000000000000E30E                 db  18h
.eh_frame:000000000000E30F                 db  41h ; A
.eh_frame:000000000000E310                 db  0Eh
.eh_frame:000000000000E311                 db  10h
.eh_frame:000000000000E312                 db  41h ; A
.eh_frame:000000000000E313                 db  0Eh
.eh_frame:000000000000E314                 db    8
.eh_frame:000000000000E315                 db  44h ; D
.eh_frame:000000000000E316                 db  0Bh
.eh_frame:000000000000E317                 db    2
.eh_frame:000000000000E318                 db  54h ; T
.eh_frame:000000000000E319                 db  0Eh
.eh_frame:000000000000E31A                 db  18h
.eh_frame:000000000000E31B                 db  41h ; A
.eh_frame:000000000000E31C                 db  0Eh
.eh_frame:000000000000E31D                 db  10h
.eh_frame:000000000000E31E                 db  41h ; A
.eh_frame:000000000000E31F                 db  0Eh
.eh_frame:000000000000E320                 db    8
.eh_frame:000000000000E321                 db    0
.eh_frame:000000000000E322                 db    0
.eh_frame:000000000000E323                 db    0
.eh_frame:000000000000E324                 db  74h ; t
.eh_frame:000000000000E325                 db    0
.eh_frame:000000000000E326                 db    0
.eh_frame:000000000000E327                 db    0
.eh_frame:000000000000E328                 db  78h ; x
.eh_frame:000000000000E329                 db  0Ah
.eh_frame:000000000000E32A                 db    0
.eh_frame:000000000000E32B                 db    0
.eh_frame:000000000000E32C                 db  74h ; t
.eh_frame:000000000000E32D                 db  79h ; y
.eh_frame:000000000000E32E                 db 0FFh
.eh_frame:000000000000E32F                 db 0FFh
.eh_frame:000000000000E330                 db  34h ; 4
.eh_frame:000000000000E331                 db  12h
.eh_frame:000000000000E332                 db    0
.eh_frame:000000000000E333                 db    0
.eh_frame:000000000000E334                 db    0
.eh_frame:000000000000E335                 db  42h ; B
.eh_frame:000000000000E336                 db  0Eh
.eh_frame:000000000000E337                 db  10h
.eh_frame:000000000000E338                 db  8Fh
.eh_frame:000000000000E339                 db    2
.eh_frame:000000000000E33A                 db  42h ; B
.eh_frame:000000000000E33B                 db  0Eh
.eh_frame:000000000000E33C                 db  18h
.eh_frame:000000000000E33D                 db  8Eh
.eh_frame:000000000000E33E                 db    3
.eh_frame:000000000000E33F                 db  45h ; E
.eh_frame:000000000000E340                 db  0Eh
.eh_frame:000000000000E341                 db  20h
.eh_frame:000000000000E342                 db  8Dh
.eh_frame:000000000000E343                 db    4
.eh_frame:000000000000E344                 db  42h ; B
.eh_frame:000000000000E345                 db  0Eh
.eh_frame:000000000000E346                 db  28h ; (
.eh_frame:000000000000E347                 db  8Ch
.eh_frame:000000000000E348                 db    5
.eh_frame:000000000000E349                 db  44h ; D
.eh_frame:000000000000E34A                 db  0Eh
.eh_frame:000000000000E34B                 db  30h ; 0
.eh_frame:000000000000E34C                 db  86h
.eh_frame:000000000000E34D                 db    6
.eh_frame:000000000000E34E                 db  41h ; A
.eh_frame:000000000000E34F                 db  0Eh
.eh_frame:000000000000E350                 db  38h ; 8
.eh_frame:000000000000E351                 db  83h
.eh_frame:000000000000E352                 db    7
.eh_frame:000000000000E353                 db  53h ; S
.eh_frame:000000000000E354                 db  0Eh
.eh_frame:000000000000E355                 db 0F0h
.eh_frame:000000000000E356                 db    1
.eh_frame:000000000000E357                 db    3
.eh_frame:000000000000E358                 db  81h
.eh_frame:000000000000E359                 db  0Bh
.eh_frame:000000000000E35A                 db  0Eh
.eh_frame:000000000000E35B                 db 0F8h
.eh_frame:000000000000E35C                 db    1
.eh_frame:000000000000E35D                 db  4Ah ; J
.eh_frame:000000000000E35E                 db  0Eh
.eh_frame:000000000000E35F                 db  80h
.eh_frame:000000000000E360                 db    2
.eh_frame:000000000000E361                 db  44h ; D
.eh_frame:000000000000E362                 db  0Eh
.eh_frame:000000000000E363                 db  88h
.eh_frame:000000000000E364                 db    2
.eh_frame:000000000000E365                 db  45h ; E
.eh_frame:000000000000E366                 db  0Eh
.eh_frame:000000000000E367                 db  90h
.eh_frame:000000000000E368                 db    2
.eh_frame:000000000000E369                 db  5Fh ; _
.eh_frame:000000000000E36A                 db  0Eh
.eh_frame:000000000000E36B                 db 0F0h
.eh_frame:000000000000E36C                 db    1
.eh_frame:000000000000E36D                 db  64h ; d
.eh_frame:000000000000E36E                 db  0Ah
.eh_frame:000000000000E36F                 db  0Eh
.eh_frame:000000000000E370                 db  38h ; 8
.eh_frame:000000000000E371                 db  41h ; A
.eh_frame:000000000000E372                 db  0Eh
.eh_frame:000000000000E373                 db  30h ; 0
.eh_frame:000000000000E374                 db  41h ; A
.eh_frame:000000000000E375                 db  0Eh
.eh_frame:000000000000E376                 db  28h ; (
.eh_frame:000000000000E377                 db  42h ; B
.eh_frame:000000000000E378                 db  0Eh
.eh_frame:000000000000E379                 db  20h
.eh_frame:000000000000E37A                 db  42h ; B
.eh_frame:000000000000E37B                 db  0Eh
.eh_frame:000000000000E37C                 db  18h
.eh_frame:000000000000E37D                 db  42h ; B
.eh_frame:000000000000E37E                 db  0Eh
.eh_frame:000000000000E37F                 db  10h
.eh_frame:000000000000E380                 db  42h ; B
.eh_frame:000000000000E381                 db  0Eh
.eh_frame:000000000000E382                 db    8
.eh_frame:000000000000E383                 db  44h ; D
.eh_frame:000000000000E384                 db  0Bh
.eh_frame:000000000000E385                 db    3
.eh_frame:000000000000E386                 db  99h
.eh_frame:000000000000E387                 db    5
.eh_frame:000000000000E388                 db  0Eh
.eh_frame:000000000000E389                 db 0F8h
.eh_frame:000000000000E38A                 db    1
.eh_frame:000000000000E38B                 db  4Dh ; M
.eh_frame:000000000000E38C                 db  0Eh
.eh_frame:000000000000E38D                 db  80h
.eh_frame:000000000000E38E                 db    2
.eh_frame:000000000000E38F                 db  44h ; D
.eh_frame:000000000000E390                 db  0Eh
.eh_frame:000000000000E391                 db  88h
.eh_frame:000000000000E392                 db    2
.eh_frame:000000000000E393                 db  47h ; G
.eh_frame:000000000000E394                 db  0Eh
.eh_frame:000000000000E395                 db  90h
.eh_frame:000000000000E396                 db    2
.eh_frame:000000000000E397                 db  5Bh ; [
.eh_frame:000000000000E398                 db  0Eh
.eh_frame:000000000000E399                 db 0F0h
.eh_frame:000000000000E39A                 db    1
.eh_frame:000000000000E39B                 db    0
.eh_frame:000000000000E39C                 db  68h ; h
.eh_frame:000000000000E39D                 db    0
.eh_frame:000000000000E39E                 db    0
.eh_frame:000000000000E39F                 db    0
.eh_frame:000000000000E3A0                 db 0F0h
.eh_frame:000000000000E3A1                 db  0Ah
.eh_frame:000000000000E3A2                 db    0
.eh_frame:000000000000E3A3                 db    0
.eh_frame:000000000000E3A4                 db  3Ch ; <
.eh_frame:000000000000E3A5                 db  8Bh
.eh_frame:000000000000E3A6                 db 0FFh
.eh_frame:000000000000E3A7                 db 0FFh
.eh_frame:000000000000E3A8                 db 0ABh
.eh_frame:000000000000E3A9                 db    1
.eh_frame:000000000000E3AA                 db    0
.eh_frame:000000000000E3AB                 db    0
.eh_frame:000000000000E3AC                 db    0
.eh_frame:000000000000E3AD                 db  42h ; B
.eh_frame:000000000000E3AE                 db  0Eh
.eh_frame:000000000000E3AF                 db  10h
.eh_frame:000000000000E3B0                 db  8Fh
.eh_frame:000000000000E3B1                 db    2
.eh_frame:000000000000E3B2                 db  42h ; B
.eh_frame:000000000000E3B3                 db  0Eh
.eh_frame:000000000000E3B4                 db  18h
.eh_frame:000000000000E3B5                 db  8Eh
.eh_frame:000000000000E3B6                 db    3
.eh_frame:000000000000E3B7                 db  45h ; E
.eh_frame:000000000000E3B8                 db  0Eh
.eh_frame:000000000000E3B9                 db  20h
.eh_frame:000000000000E3BA                 db  8Dh
.eh_frame:000000000000E3BB                 db    4
.eh_frame:000000000000E3BC                 db  42h ; B
.eh_frame:000000000000E3BD                 db  0Eh
.eh_frame:000000000000E3BE                 db  28h ; (
.eh_frame:000000000000E3BF                 db  8Ch
.eh_frame:000000000000E3C0                 db    5
.eh_frame:000000000000E3C1                 db  44h ; D
.eh_frame:000000000000E3C2                 db  0Eh
.eh_frame:000000000000E3C3                 db  30h ; 0
.eh_frame:000000000000E3C4                 db  86h
.eh_frame:000000000000E3C5                 db    6
.eh_frame:000000000000E3C6                 db  41h ; A
.eh_frame:000000000000E3C7                 db  0Eh
.eh_frame:000000000000E3C8                 db  38h ; 8
.eh_frame:000000000000E3C9                 db  83h
.eh_frame:000000000000E3CA                 db    7
.eh_frame:000000000000E3CB                 db  47h ; G
.eh_frame:000000000000E3CC                 db  0Eh
.eh_frame:000000000000E3CD                 db  60h ; `
.eh_frame:000000000000E3CE                 db    2
.eh_frame:000000000000E3CF                 db  99h
.eh_frame:000000000000E3D0                 db  0Eh
.eh_frame:000000000000E3D1                 db  68h ; h
.eh_frame:000000000000E3D2                 db  5Fh ; _
.eh_frame:000000000000E3D3                 db  0Eh
.eh_frame:000000000000E3D4                 db  70h ; p
.eh_frame:000000000000E3D5                 db  46h ; F
.eh_frame:000000000000E3D6                 db  0Eh
.eh_frame:000000000000E3D7                 db  78h ; x
.eh_frame:000000000000E3D8                 db  42h ; B
.eh_frame:000000000000E3D9                 db  0Eh
.eh_frame:000000000000E3DA                 db  80h
.eh_frame:000000000000E3DB                 db    1
.eh_frame:000000000000E3DC                 db  59h ; Y
.eh_frame:000000000000E3DD                 db  0Eh
.eh_frame:000000000000E3DE                 db  60h ; `
.eh_frame:000000000000E3DF                 db    2
.eh_frame:000000000000E3E0                 db  40h ; @
.eh_frame:000000000000E3E1                 db  0Eh
.eh_frame:000000000000E3E2                 db  68h ; h
.eh_frame:000000000000E3E3                 db  4Bh ; K
.eh_frame:000000000000E3E4                 db  0Eh
.eh_frame:000000000000E3E5                 db  70h ; p
.eh_frame:000000000000E3E6                 db  43h ; C
.eh_frame:000000000000E3E7                 db  0Eh
.eh_frame:000000000000E3E8                 db  78h ; x
.eh_frame:000000000000E3E9                 db  45h ; E
.eh_frame:000000000000E3EA                 db  0Eh
.eh_frame:000000000000E3EB                 db  80h
.eh_frame:000000000000E3EC                 db    1
.eh_frame:000000000000E3ED                 db  5Eh ; ^
.eh_frame:000000000000E3EE                 db  0Eh
.eh_frame:000000000000E3EF                 db  60h ; `
.eh_frame:000000000000E3F0                 db  4Ch ; L
.eh_frame:000000000000E3F1                 db  0Ah
.eh_frame:000000000000E3F2                 db  0Eh
.eh_frame:000000000000E3F3                 db  38h ; 8
.eh_frame:000000000000E3F4                 db  44h ; D
.eh_frame:000000000000E3F5                 db  0Eh
.eh_frame:000000000000E3F6                 db  30h ; 0
.eh_frame:000000000000E3F7                 db  41h ; A
.eh_frame:000000000000E3F8                 db  0Eh
.eh_frame:000000000000E3F9                 db  28h ; (
.eh_frame:000000000000E3FA                 db  42h ; B
.eh_frame:000000000000E3FB                 db  0Eh
.eh_frame:000000000000E3FC                 db  20h
.eh_frame:000000000000E3FD                 db  42h ; B
.eh_frame:000000000000E3FE                 db  0Eh
.eh_frame:000000000000E3FF                 db  18h
.eh_frame:000000000000E400                 db  42h ; B
.eh_frame:000000000000E401                 db  0Eh
.eh_frame:000000000000E402                 db  10h
.eh_frame:000000000000E403                 db  42h ; B
.eh_frame:000000000000E404                 db  0Eh
.eh_frame:000000000000E405                 db    8
.eh_frame:000000000000E406                 db  46h ; F
.eh_frame:000000000000E407                 db  0Bh
.eh_frame:000000000000E408                 db  28h ; (
.eh_frame:000000000000E409                 db    0
.eh_frame:000000000000E40A                 db    0
.eh_frame:000000000000E40B                 db    0
.eh_frame:000000000000E40C                 db  5Ch ; \
.eh_frame:000000000000E40D                 db  0Bh
.eh_frame:000000000000E40E                 db    0
.eh_frame:000000000000E40F                 db    0
.eh_frame:000000000000E410                 db  80h
.eh_frame:000000000000E411                 db  8Ch
.eh_frame:000000000000E412                 db 0FFh
.eh_frame:000000000000E413                 db 0FFh
.eh_frame:000000000000E414                 db  36h ; 6
.eh_frame:000000000000E415                 db    0
.eh_frame:000000000000E416                 db    0
.eh_frame:000000000000E417                 db    0
.eh_frame:000000000000E418                 db    0
.eh_frame:000000000000E419                 db  42h ; B
.eh_frame:000000000000E41A                 db  0Eh
.eh_frame:000000000000E41B                 db  10h
.eh_frame:000000000000E41C                 db  8Ch
.eh_frame:000000000000E41D                 db    2
.eh_frame:000000000000E41E                 db  41h ; A
.eh_frame:000000000000E41F                 db  0Eh
.eh_frame:000000000000E420                 db  18h
.eh_frame:000000000000E421                 db  86h
.eh_frame:000000000000E422                 db    3
.eh_frame:000000000000E423                 db  41h ; A
.eh_frame:000000000000E424                 db  0Eh
.eh_frame:000000000000E425                 db  20h
.eh_frame:000000000000E426                 db  83h
.eh_frame:000000000000E427                 db    4
.eh_frame:000000000000E428                 db  6Eh ; n
.eh_frame:000000000000E429                 db  0Eh
.eh_frame:000000000000E42A                 db  18h
.eh_frame:000000000000E42B                 db  41h ; A
.eh_frame:000000000000E42C                 db  0Eh
.eh_frame:000000000000E42D                 db  10h
.eh_frame:000000000000E42E                 db  42h ; B
.eh_frame:000000000000E42F                 db  0Eh
.eh_frame:000000000000E430                 db    8
.eh_frame:000000000000E431                 db    0
.eh_frame:000000000000E432                 db    0
.eh_frame:000000000000E433                 db    0
.eh_frame:000000000000E434                 db  10h
.eh_frame:000000000000E435                 db    0
.eh_frame:000000000000E436                 db    0
.eh_frame:000000000000E437                 db    0
.eh_frame:000000000000E438                 db  88h
.eh_frame:000000000000E439                 db  0Bh
.eh_frame:000000000000E43A                 db    0
.eh_frame:000000000000E43B                 db    0
.eh_frame:000000000000E43C                 db  94h
.eh_frame:000000000000E43D                 db  8Ch
.eh_frame:000000000000E43E                 db 0FFh
.eh_frame:000000000000E43F                 db 0FFh
.eh_frame:000000000000E440                 db  11h
.eh_frame:000000000000E441                 db    0
.eh_frame:000000000000E442                 db    0
.eh_frame:000000000000E443                 db    0
.eh_frame:000000000000E444                 db    0
.eh_frame:000000000000E445                 db    0
.eh_frame:000000000000E446                 db    0
.eh_frame:000000000000E447                 db    0
.eh_frame:000000000000E448                 db  10h
.eh_frame:000000000000E449                 db    0
.eh_frame:000000000000E44A                 db    0
.eh_frame:000000000000E44B                 db    0
.eh_frame:000000000000E44C                 db  9Ch
.eh_frame:000000000000E44D                 db  0Bh
.eh_frame:000000000000E44E                 db    0
.eh_frame:000000000000E44F                 db    0
.eh_frame:000000000000E450                 db 0A0h
.eh_frame:000000000000E451                 db  8Ch
.eh_frame:000000000000E452                 db 0FFh
.eh_frame:000000000000E453                 db 0FFh
.eh_frame:000000000000E454                 db  11h
.eh_frame:000000000000E455                 db    0
.eh_frame:000000000000E456                 db    0
.eh_frame:000000000000E457                 db    0
.eh_frame:000000000000E458                 db    0
.eh_frame:000000000000E459                 db    0
.eh_frame:000000000000E45A                 db    0
.eh_frame:000000000000E45B                 db    0
.eh_frame:000000000000E45C                 db  10h
.eh_frame:000000000000E45D                 db    0
.eh_frame:000000000000E45E                 db    0
.eh_frame:000000000000E45F                 db    0
.eh_frame:000000000000E460                 db 0B0h
.eh_frame:000000000000E461                 db  0Bh
.eh_frame:000000000000E462                 db    0
.eh_frame:000000000000E463                 db    0
.eh_frame:000000000000E464                 db 0ACh
.eh_frame:000000000000E465                 db  8Ch
.eh_frame:000000000000E466                 db 0FFh
.eh_frame:000000000000E467                 db 0FFh
.eh_frame:000000000000E468                 db  35h ; 5
.eh_frame:000000000000E469                 db    0
.eh_frame:000000000000E46A                 db    0
.eh_frame:000000000000E46B                 db    0
.eh_frame:000000000000E46C                 db    0
.eh_frame:000000000000E46D                 db    0
.eh_frame:000000000000E46E                 db    0
.eh_frame:000000000000E46F                 db    0
.eh_frame:000000000000E470                 db  10h
.eh_frame:000000000000E471                 db    0
.eh_frame:000000000000E472                 db    0
.eh_frame:000000000000E473                 db    0
.eh_frame:000000000000E474                 db 0C4h
.eh_frame:000000000000E475                 db  0Bh
.eh_frame:000000000000E476                 db    0
.eh_frame:000000000000E477                 db    0
.eh_frame:000000000000E478                 db 0D8h
.eh_frame:000000000000E479                 db  8Ch
.eh_frame:000000000000E47A                 db 0FFh
.eh_frame:000000000000E47B                 db 0FFh
.eh_frame:000000000000E47C                 db  15h
.eh_frame:000000000000E47D                 db    0
.eh_frame:000000000000E47E                 db    0
.eh_frame:000000000000E47F                 db    0
.eh_frame:000000000000E480                 db    0
.eh_frame:000000000000E481                 db    0
.eh_frame:000000000000E482                 db    0
.eh_frame:000000000000E483                 db    0
.eh_frame:000000000000E484                 db  10h
.eh_frame:000000000000E485                 db    0
.eh_frame:000000000000E486                 db    0
.eh_frame:000000000000E487                 db    0
.eh_frame:000000000000E488                 db 0D8h
.eh_frame:000000000000E489                 db  0Bh
.eh_frame:000000000000E48A                 db    0
.eh_frame:000000000000E48B                 db    0
.eh_frame:000000000000E48C                 db 0E4h
.eh_frame:000000000000E48D                 db  8Ch
.eh_frame:000000000000E48E                 db 0FFh
.eh_frame:000000000000E48F                 db 0FFh
.eh_frame:000000000000E490                 db  30h ; 0
.eh_frame:000000000000E491                 db    0
.eh_frame:000000000000E492                 db    0
.eh_frame:000000000000E493                 db    0
.eh_frame:000000000000E494                 db    0
.eh_frame:000000000000E495                 db  6Bh ; k
.eh_frame:000000000000E496                 db  0Eh
.eh_frame:000000000000E497                 db  10h
.eh_frame:000000000000E498                 db  50h ; P
.eh_frame:000000000000E499                 db    0
.eh_frame:000000000000E49A                 db    0
.eh_frame:000000000000E49B                 db    0
.eh_frame:000000000000E49C                 db 0ECh
.eh_frame:000000000000E49D                 db  0Bh
.eh_frame:000000000000E49E                 db    0
.eh_frame:000000000000E49F                 db    0
.eh_frame:000000000000E4A0                 db    0
.eh_frame:000000000000E4A1                 db  8Dh
.eh_frame:000000000000E4A2                 db 0FFh
.eh_frame:000000000000E4A3                 db 0FFh
.eh_frame:000000000000E4A4                 db  74h ; t
.eh_frame:000000000000E4A5                 db    0
.eh_frame:000000000000E4A6                 db    0
.eh_frame:000000000000E4A7                 db    0
.eh_frame:000000000000E4A8                 db    0
.eh_frame:000000000000E4A9                 db  42h ; B
.eh_frame:000000000000E4AA                 db  0Eh
.eh_frame:000000000000E4AB                 db  10h
.eh_frame:000000000000E4AC                 db  8Fh
.eh_frame:000000000000E4AD                 db    2
.eh_frame:000000000000E4AE                 db  42h ; B
.eh_frame:000000000000E4AF                 db  0Eh
.eh_frame:000000000000E4B0                 db  18h
.eh_frame:000000000000E4B1                 db  8Eh
.eh_frame:000000000000E4B2                 db    3
.eh_frame:000000000000E4B3                 db  49h ; I
.eh_frame:000000000000E4B4                 db  0Eh
.eh_frame:000000000000E4B5                 db  20h
.eh_frame:000000000000E4B6                 db  8Dh
.eh_frame:000000000000E4B7                 db    4
.eh_frame:000000000000E4B8                 db  42h ; B
.eh_frame:000000000000E4B9                 db  0Eh
.eh_frame:000000000000E4BA                 db  28h ; (
.eh_frame:000000000000E4BB                 db  8Ch
.eh_frame:000000000000E4BC                 db    5
.eh_frame:000000000000E4BD                 db  44h ; D
.eh_frame:000000000000E4BE                 db  0Eh
.eh_frame:000000000000E4BF                 db  30h ; 0
.eh_frame:000000000000E4C0                 db  86h
.eh_frame:000000000000E4C1                 db    6
.eh_frame:000000000000E4C2                 db  41h ; A
.eh_frame:000000000000E4C3                 db  0Eh
.eh_frame:000000000000E4C4                 db  38h ; 8
.eh_frame:000000000000E4C5                 db  83h
.eh_frame:000000000000E4C6                 db    7
.eh_frame:000000000000E4C7                 db  4Dh ; M
.eh_frame:000000000000E4C8                 db  0Eh
.eh_frame:000000000000E4C9                 db  50h ; P
.eh_frame:000000000000E4CA                 db  5Fh ; _
.eh_frame:000000000000E4CB                 db  0Eh
.eh_frame:000000000000E4CC                 db  58h ; X
.eh_frame:000000000000E4CD                 db  47h ; G
.eh_frame:000000000000E4CE                 db  0Eh
.eh_frame:000000000000E4CF                 db  60h ; `
.eh_frame:000000000000E4D0                 db  46h ; F
.eh_frame:000000000000E4D1                 db  0Eh
.eh_frame:000000000000E4D2                 db  68h ; h
.eh_frame:000000000000E4D3                 db  44h ; D
.eh_frame:000000000000E4D4                 db  0Eh
.eh_frame:000000000000E4D5                 db  70h ; p
.eh_frame:000000000000E4D6                 db  58h ; X
.eh_frame:000000000000E4D7                 db  0Eh
.eh_frame:000000000000E4D8                 db  38h ; 8
.eh_frame:000000000000E4D9                 db  41h ; A
.eh_frame:000000000000E4DA                 db  0Eh
.eh_frame:000000000000E4DB                 db  30h ; 0
.eh_frame:000000000000E4DC                 db  41h ; A
.eh_frame:000000000000E4DD                 db  0Eh
.eh_frame:000000000000E4DE                 db  28h ; (
.eh_frame:000000000000E4DF                 db  42h ; B
.eh_frame:000000000000E4E0                 db  0Eh
.eh_frame:000000000000E4E1                 db  20h
.eh_frame:000000000000E4E2                 db  42h ; B
.eh_frame:000000000000E4E3                 db  0Eh
.eh_frame:000000000000E4E4                 db  18h
.eh_frame:000000000000E4E5                 db  42h ; B
.eh_frame:000000000000E4E6                 db  0Eh
.eh_frame:000000000000E4E7                 db  10h
.eh_frame:000000000000E4E8                 db  42h ; B
.eh_frame:000000000000E4E9                 db  0Eh
.eh_frame:000000000000E4EA                 db    8
.eh_frame:000000000000E4EB                 db    0
.eh_frame:000000000000E4EC                 db  68h ; h
.eh_frame:000000000000E4ED                 db    0
.eh_frame:000000000000E4EE                 db    0
.eh_frame:000000000000E4EF                 db    0
.eh_frame:000000000000E4F0                 db  40h ; @
.eh_frame:000000000000E4F1                 db  0Ch
.eh_frame:000000000000E4F2                 db    0
.eh_frame:000000000000E4F3                 db    0
.eh_frame:000000000000E4F4                 db  2Ch ; ,
.eh_frame:000000000000E4F5                 db  8Dh
.eh_frame:000000000000E4F6                 db 0FFh
.eh_frame:000000000000E4F7                 db 0FFh
.eh_frame:000000000000E4F8                 db 0E3h
.eh_frame:000000000000E4F9                 db    0
.eh_frame:000000000000E4FA                 db    0
.eh_frame:000000000000E4FB                 db    0
.eh_frame:000000000000E4FC                 db    0
.eh_frame:000000000000E4FD                 db  42h ; B
.eh_frame:000000000000E4FE                 db  0Eh
.eh_frame:000000000000E4FF                 db  10h
.eh_frame:000000000000E500                 db  8Fh
.eh_frame:000000000000E501                 db    2
.eh_frame:000000000000E502                 db  42h ; B
.eh_frame:000000000000E503                 db  0Eh
.eh_frame:000000000000E504                 db  18h
.eh_frame:000000000000E505                 db  8Eh
.eh_frame:000000000000E506                 db    3
.eh_frame:000000000000E507                 db  49h ; I
.eh_frame:000000000000E508                 db  0Eh
.eh_frame:000000000000E509                 db  20h
.eh_frame:000000000000E50A                 db  8Dh
.eh_frame:000000000000E50B                 db    4
.eh_frame:000000000000E50C                 db  42h ; B
.eh_frame:000000000000E50D                 db  0Eh
.eh_frame:000000000000E50E                 db  28h ; (
.eh_frame:000000000000E50F                 db  8Ch
.eh_frame:000000000000E510                 db    5
.eh_frame:000000000000E511                 db  44h ; D
.eh_frame:000000000000E512                 db  0Eh
.eh_frame:000000000000E513                 db  30h ; 0
.eh_frame:000000000000E514                 db  86h
.eh_frame:000000000000E515                 db    6
.eh_frame:000000000000E516                 db  41h ; A
.eh_frame:000000000000E517                 db  0Eh
.eh_frame:000000000000E518                 db  38h ; 8
.eh_frame:000000000000E519                 db  83h
.eh_frame:000000000000E51A                 db    7
.eh_frame:000000000000E51B                 db  4Dh ; M
.eh_frame:000000000000E51C                 db  0Eh
.eh_frame:000000000000E51D                 db  70h ; p
.eh_frame:000000000000E51E                 db  65h ; e
.eh_frame:000000000000E51F                 db  0Eh
.eh_frame:000000000000E520                 db  78h ; x
.eh_frame:000000000000E521                 db  4Dh ; M
.eh_frame:000000000000E522                 db  0Eh
.eh_frame:000000000000E523                 db  80h
.eh_frame:000000000000E524                 db    1
.eh_frame:000000000000E525                 db  46h ; F
.eh_frame:000000000000E526                 db  0Eh
.eh_frame:000000000000E527                 db  88h
.eh_frame:000000000000E528                 db    1
.eh_frame:000000000000E529                 db  42h ; B
.eh_frame:000000000000E52A                 db  0Eh
.eh_frame:000000000000E52B                 db  90h
.eh_frame:000000000000E52C                 db    1
.eh_frame:000000000000E52D                 db  5Eh ; ^
.eh_frame:000000000000E52E                 db  0Eh
.eh_frame:000000000000E52F                 db  70h ; p
.eh_frame:000000000000E530                 db  56h ; V
.eh_frame:000000000000E531                 db  0Eh
.eh_frame:000000000000E532                 db  78h ; x
.eh_frame:000000000000E533                 db  43h ; C
.eh_frame:000000000000E534                 db  0Eh
.eh_frame:000000000000E535                 db  80h
.eh_frame:000000000000E536                 db    1
.eh_frame:000000000000E537                 db  43h ; C
.eh_frame:000000000000E538                 db  0Eh
.eh_frame:000000000000E539                 db  88h
.eh_frame:000000000000E53A                 db    1
.eh_frame:000000000000E53B                 db  56h ; V
.eh_frame:000000000000E53C                 db  0Eh
.eh_frame:000000000000E53D                 db  90h
.eh_frame:000000000000E53E                 db    1
.eh_frame:000000000000E53F                 db  52h ; R
.eh_frame:000000000000E540                 db  0Eh
.eh_frame:000000000000E541                 db  70h ; p
.eh_frame:000000000000E542                 db  5Bh ; [
.eh_frame:000000000000E543                 db  0Eh
.eh_frame:000000000000E544                 db  38h ; 8
.eh_frame:000000000000E545                 db  41h ; A
.eh_frame:000000000000E546                 db  0Eh
.eh_frame:000000000000E547                 db  30h ; 0
.eh_frame:000000000000E548                 db  41h ; A
.eh_frame:000000000000E549                 db  0Eh
.eh_frame:000000000000E54A                 db  28h ; (
.eh_frame:000000000000E54B                 db  42h ; B
.eh_frame:000000000000E54C                 db  0Eh
.eh_frame:000000000000E54D                 db  20h
.eh_frame:000000000000E54E                 db  42h ; B
.eh_frame:000000000000E54F                 db  0Eh
.eh_frame:000000000000E550                 db  18h
.eh_frame:000000000000E551                 db  42h ; B
.eh_frame:000000000000E552                 db  0Eh
.eh_frame:000000000000E553                 db  10h
.eh_frame:000000000000E554                 db  42h ; B
.eh_frame:000000000000E555                 db  0Eh
.eh_frame:000000000000E556                 db    8
.eh_frame:000000000000E557                 db    0
.eh_frame:000000000000E558                 db  10h
.eh_frame:000000000000E559                 db    0
.eh_frame:000000000000E55A                 db    0
.eh_frame:000000000000E55B                 db    0
.eh_frame:000000000000E55C                 db 0ACh
.eh_frame:000000000000E55D                 db  0Ch
.eh_frame:000000000000E55E                 db    0
.eh_frame:000000000000E55F                 db    0
.eh_frame:000000000000E560                 db 0B0h
.eh_frame:000000000000E561                 db  8Dh
.eh_frame:000000000000E562                 db 0FFh
.eh_frame:000000000000E563                 db 0FFh
.eh_frame:000000000000E564                 db  0Ah
.eh_frame:000000000000E565                 db    0
.eh_frame:000000000000E566                 db    0
.eh_frame:000000000000E567                 db    0
.eh_frame:000000000000E568                 db    0
.eh_frame:000000000000E569                 db    0
.eh_frame:000000000000E56A                 db    0
.eh_frame:000000000000E56B                 db    0
.eh_frame:000000000000E56C                 db  28h ; (
.eh_frame:000000000000E56D                 db    0
.eh_frame:000000000000E56E                 db    0
.eh_frame:000000000000E56F                 db    0
.eh_frame:000000000000E570                 db 0C0h
.eh_frame:000000000000E571                 db  0Ch
.eh_frame:000000000000E572                 db    0
.eh_frame:000000000000E573                 db    0
.eh_frame:000000000000E574                 db 0ACh
.eh_frame:000000000000E575                 db  8Dh
.eh_frame:000000000000E576                 db 0FFh
.eh_frame:000000000000E577                 db 0FFh
.eh_frame:000000000000E578                 db  93h
.eh_frame:000000000000E579                 db    0
.eh_frame:000000000000E57A                 db    0
.eh_frame:000000000000E57B                 db    0
.eh_frame:000000000000E57C                 db    0
.eh_frame:000000000000E57D                 db  48h ; H
.eh_frame:000000000000E57E                 db  0Eh
.eh_frame:000000000000E57F                 db  10h
.eh_frame:000000000000E580                 db  8Ch
.eh_frame:000000000000E581                 db    2
.eh_frame:000000000000E582                 db  48h ; H
.eh_frame:000000000000E583                 db  0Eh
.eh_frame:000000000000E584                 db  18h
.eh_frame:000000000000E585                 db  86h
.eh_frame:000000000000E586                 db    3
.eh_frame:000000000000E587                 db  41h ; A
.eh_frame:000000000000E588                 db  0Eh
.eh_frame:000000000000E589                 db  20h
.eh_frame:000000000000E58A                 db  83h
.eh_frame:000000000000E58B                 db    4
.eh_frame:000000000000E58C                 db    2
.eh_frame:000000000000E58D                 db  74h ; t
.eh_frame:000000000000E58E                 db  0Eh
.eh_frame:000000000000E58F                 db  18h
.eh_frame:000000000000E590                 db  4Bh ; K
.eh_frame:000000000000E591                 db  0Eh
.eh_frame:000000000000E592                 db  10h
.eh_frame:000000000000E593                 db  42h ; B
.eh_frame:000000000000E594                 db  0Eh
.eh_frame:000000000000E595                 db    8
.eh_frame:000000000000E596                 db    0
.eh_frame:000000000000E597                 db    0
.eh_frame:000000000000E598                 db  10h
.eh_frame:000000000000E599                 db    0
.eh_frame:000000000000E59A                 db    0
.eh_frame:000000000000E59B                 db    0
.eh_frame:000000000000E59C                 db 0ECh
.eh_frame:000000000000E59D                 db  0Ch
.eh_frame:000000000000E59E                 db    0
.eh_frame:000000000000E59F                 db    0
.eh_frame:000000000000E5A0                 db  20h
.eh_frame:000000000000E5A1                 db  8Eh
.eh_frame:000000000000E5A2                 db 0FFh
.eh_frame:000000000000E5A3                 db 0FFh
.eh_frame:000000000000E5A4                 db  13h
.eh_frame:000000000000E5A5                 db    0
.eh_frame:000000000000E5A6                 db    0
.eh_frame:000000000000E5A7                 db    0
.eh_frame:000000000000E5A8                 db    0
.eh_frame:000000000000E5A9                 db    0
.eh_frame:000000000000E5AA                 db    0
.eh_frame:000000000000E5AB                 db    0
.eh_frame:000000000000E5AC                 db  10h
.eh_frame:000000000000E5AD                 db    0
.eh_frame:000000000000E5AE                 db    0
.eh_frame:000000000000E5AF                 db    0
.eh_frame:000000000000E5B0                 db    0
.eh_frame:000000000000E5B1                 db  0Dh
.eh_frame:000000000000E5B2                 db    0
.eh_frame:000000000000E5B3                 db    0
.eh_frame:000000000000E5B4                 db  2Ch ; ,
.eh_frame:000000000000E5B5                 db  8Eh
.eh_frame:000000000000E5B6                 db 0FFh
.eh_frame:000000000000E5B7                 db 0FFh
.eh_frame:000000000000E5B8                 db  0Ch
.eh_frame:000000000000E5B9                 db    0
.eh_frame:000000000000E5BA                 db    0
.eh_frame:000000000000E5BB                 db    0
.eh_frame:000000000000E5BC                 db    0
.eh_frame:000000000000E5BD                 db    0
.eh_frame:000000000000E5BE                 db    0
.eh_frame:000000000000E5BF                 db    0
.eh_frame:000000000000E5C0                 db  10h
.eh_frame:000000000000E5C1                 db    0
.eh_frame:000000000000E5C2                 db    0
.eh_frame:000000000000E5C3                 db    0
.eh_frame:000000000000E5C4                 db  14h
.eh_frame:000000000000E5C5                 db  0Dh
.eh_frame:000000000000E5C6                 db    0
.eh_frame:000000000000E5C7                 db    0
.eh_frame:000000000000E5C8                 db  28h ; (
.eh_frame:000000000000E5C9                 db  8Eh
.eh_frame:000000000000E5CA                 db 0FFh
.eh_frame:000000000000E5CB                 db 0FFh
.eh_frame:000000000000E5CC                 db  18h
.eh_frame:000000000000E5CD                 db    0
.eh_frame:000000000000E5CE                 db    0
.eh_frame:000000000000E5CF                 db    0
.eh_frame:000000000000E5D0                 db    0
.eh_frame:000000000000E5D1                 db    0
.eh_frame:000000000000E5D2                 db    0
.eh_frame:000000000000E5D3                 db    0
.eh_frame:000000000000E5D4                 db  10h
.eh_frame:000000000000E5D5                 db    0
.eh_frame:000000000000E5D6                 db    0
.eh_frame:000000000000E5D7                 db    0
.eh_frame:000000000000E5D8                 db  28h ; (
.eh_frame:000000000000E5D9                 db  0Dh
.eh_frame:000000000000E5DA                 db    0
.eh_frame:000000000000E5DB                 db    0
.eh_frame:000000000000E5DC                 db  34h ; 4
.eh_frame:000000000000E5DD                 db  8Eh
.eh_frame:000000000000E5DE                 db 0FFh
.eh_frame:000000000000E5DF                 db 0FFh
.eh_frame:000000000000E5E0                 db  14h
.eh_frame:000000000000E5E1                 db    0
.eh_frame:000000000000E5E2                 db    0
.eh_frame:000000000000E5E3                 db    0
.eh_frame:000000000000E5E4                 db    0
.eh_frame:000000000000E5E5                 db    0
.eh_frame:000000000000E5E6                 db    0
.eh_frame:000000000000E5E7                 db    0
.eh_frame:000000000000E5E8                 db  18h
.eh_frame:000000000000E5E9                 db    0
.eh_frame:000000000000E5EA                 db    0
.eh_frame:000000000000E5EB                 db    0
.eh_frame:000000000000E5EC                 db  3Ch ; <
.eh_frame:000000000000E5ED                 db  0Dh
.eh_frame:000000000000E5EE                 db    0
.eh_frame:000000000000E5EF                 db    0
.eh_frame:000000000000E5F0                 db  40h ; @
.eh_frame:000000000000E5F1                 db  8Eh
.eh_frame:000000000000E5F2                 db 0FFh
.eh_frame:000000000000E5F3                 db 0FFh
.eh_frame:000000000000E5F4                 db  8Eh
.eh_frame:000000000000E5F5                 db    0
.eh_frame:000000000000E5F6                 db    0
.eh_frame:000000000000E5F7                 db    0
.eh_frame:000000000000E5F8                 db    0
.eh_frame:000000000000E5F9                 db  44h ; D
.eh_frame:000000000000E5FA                 db  0Eh
.eh_frame:000000000000E5FB                 db  50h ; P
.eh_frame:000000000000E5FC                 db    2
.eh_frame:000000000000E5FD                 db  7Fh ; 
.eh_frame:000000000000E5FE                 db  0Ah
.eh_frame:000000000000E5FF                 db  0Eh
.eh_frame:000000000000E600                 db    8
.eh_frame:000000000000E601                 db  41h ; A
.eh_frame:000000000000E602                 db  0Bh
.eh_frame:000000000000E603                 db    0
.eh_frame:000000000000E604                 db  18h
.eh_frame:000000000000E605                 db    0
.eh_frame:000000000000E606                 db    0
.eh_frame:000000000000E607                 db    0
.eh_frame:000000000000E608                 db  58h ; X
.eh_frame:000000000000E609                 db  0Dh
.eh_frame:000000000000E60A                 db    0
.eh_frame:000000000000E60B                 db    0
.eh_frame:000000000000E60C                 db 0B4h
.eh_frame:000000000000E60D                 db  8Eh
.eh_frame:000000000000E60E                 db 0FFh
.eh_frame:000000000000E60F                 db 0FFh
.eh_frame:000000000000E610                 db  8Ah
.eh_frame:000000000000E611                 db    0
.eh_frame:000000000000E612                 db    0
.eh_frame:000000000000E613                 db    0
.eh_frame:000000000000E614                 db    0
.eh_frame:000000000000E615                 db  44h ; D
.eh_frame:000000000000E616                 db  0Eh
.eh_frame:000000000000E617                 db  50h ; P
.eh_frame:000000000000E618                 db    2
.eh_frame:000000000000E619                 db  7Bh ; {
.eh_frame:000000000000E61A                 db  0Ah
.eh_frame:000000000000E61B                 db  0Eh
.eh_frame:000000000000E61C                 db    8
.eh_frame:000000000000E61D                 db  41h ; A
.eh_frame:000000000000E61E                 db  0Bh
.eh_frame:000000000000E61F                 db    0
.eh_frame:000000000000E620                 db  10h
.eh_frame:000000000000E621                 db    0
.eh_frame:000000000000E622                 db    0
.eh_frame:000000000000E623                 db    0
.eh_frame:000000000000E624                 db  74h ; t
.eh_frame:000000000000E625                 db  0Dh
.eh_frame:000000000000E626                 db    0
.eh_frame:000000000000E627                 db    0
.eh_frame:000000000000E628                 db  28h ; (
.eh_frame:000000000000E629                 db  8Fh
.eh_frame:000000000000E62A                 db 0FFh
.eh_frame:000000000000E62B                 db 0FFh
.eh_frame:000000000000E62C                 db  0Ch
.eh_frame:000000000000E62D                 db    0
.eh_frame:000000000000E62E                 db    0
.eh_frame:000000000000E62F                 db    0
.eh_frame:000000000000E630                 db    0
.eh_frame:000000000000E631                 db    0
.eh_frame:000000000000E632                 db    0
.eh_frame:000000000000E633                 db    0
.eh_frame:000000000000E634                 db  10h
.eh_frame:000000000000E635                 db    0
.eh_frame:000000000000E636                 db    0
.eh_frame:000000000000E637                 db    0
.eh_frame:000000000000E638                 db  88h
.eh_frame:000000000000E639                 db  0Dh
.eh_frame:000000000000E63A                 db    0
.eh_frame:000000000000E63B                 db    0
.eh_frame:000000000000E63C                 db  24h ; $
.eh_frame:000000000000E63D                 db  8Fh
.eh_frame:000000000000E63E                 db 0FFh
.eh_frame:000000000000E63F                 db 0FFh
.eh_frame:000000000000E640                 db  0Fh
.eh_frame:000000000000E641                 db    0
.eh_frame:000000000000E642                 db    0
.eh_frame:000000000000E643                 db    0
.eh_frame:000000000000E644                 db    0
.eh_frame:000000000000E645                 db    0
.eh_frame:000000000000E646                 db    0
.eh_frame:000000000000E647                 db    0
.eh_frame:000000000000E648                 db  18h
.eh_frame:000000000000E649                 db    0
.eh_frame:000000000000E64A                 db    0
.eh_frame:000000000000E64B                 db    0
.eh_frame:000000000000E64C                 db  9Ch
.eh_frame:000000000000E64D                 db  0Dh
.eh_frame:000000000000E64E                 db    0
.eh_frame:000000000000E64F                 db    0
.eh_frame:000000000000E650                 db  20h
.eh_frame:000000000000E651                 db  8Fh
.eh_frame:000000000000E652                 db 0FFh
.eh_frame:000000000000E653                 db 0FFh
.eh_frame:000000000000E654                 db  98h
.eh_frame:000000000000E655                 db    0
.eh_frame:000000000000E656                 db    0
.eh_frame:000000000000E657                 db    0
.eh_frame:000000000000E658                 db    0
.eh_frame:000000000000E659                 db  44h ; D
.eh_frame:000000000000E65A                 db  0Eh
.eh_frame:000000000000E65B                 db  50h ; P
.eh_frame:000000000000E65C                 db    2
.eh_frame:000000000000E65D                 db  8Eh
.eh_frame:000000000000E65E                 db  0Ah
.eh_frame:000000000000E65F                 db  0Eh
.eh_frame:000000000000E660                 db    8
.eh_frame:000000000000E661                 db  41h ; A
.eh_frame:000000000000E662                 db  0Bh
.eh_frame:000000000000E663                 db    0
.eh_frame:000000000000E664                 db  10h
.eh_frame:000000000000E665                 db    0
.eh_frame:000000000000E666                 db    0
.eh_frame:000000000000E667                 db    0
.eh_frame:000000000000E668                 db 0B8h
.eh_frame:000000000000E669                 db  0Dh
.eh_frame:000000000000E66A                 db    0
.eh_frame:000000000000E66B                 db    0
.eh_frame:000000000000E66C                 db 0A4h
.eh_frame:000000000000E66D                 db  8Fh
.eh_frame:000000000000E66E                 db 0FFh
.eh_frame:000000000000E66F                 db 0FFh
.eh_frame:000000000000E670                 db  10h
.eh_frame:000000000000E671                 db    0
.eh_frame:000000000000E672                 db    0
.eh_frame:000000000000E673                 db    0
.eh_frame:000000000000E674                 db    0
.eh_frame:000000000000E675                 db    0
.eh_frame:000000000000E676                 db    0
.eh_frame:000000000000E677                 db    0
.eh_frame:000000000000E678                 db  10h
.eh_frame:000000000000E679                 db    0
.eh_frame:000000000000E67A                 db    0
.eh_frame:000000000000E67B                 db    0
.eh_frame:000000000000E67C                 db 0CCh
.eh_frame:000000000000E67D                 db  0Dh
.eh_frame:000000000000E67E                 db    0
.eh_frame:000000000000E67F                 db    0
.eh_frame:000000000000E680                 db 0A0h
.eh_frame:000000000000E681                 db  8Fh
.eh_frame:000000000000E682                 db 0FFh
.eh_frame:000000000000E683                 db 0FFh
.eh_frame:000000000000E684                 db  11h
.eh_frame:000000000000E685                 db    0
.eh_frame:000000000000E686                 db    0
.eh_frame:000000000000E687                 db    0
.eh_frame:000000000000E688                 db    0
.eh_frame:000000000000E689                 db    0
.eh_frame:000000000000E68A                 db    0
.eh_frame:000000000000E68B                 db    0
.eh_frame:000000000000E68C                 db  10h
.eh_frame:000000000000E68D                 db    0
.eh_frame:000000000000E68E                 db    0
.eh_frame:000000000000E68F                 db    0
.eh_frame:000000000000E690                 db 0E0h
.eh_frame:000000000000E691                 db  0Dh
.eh_frame:000000000000E692                 db    0
.eh_frame:000000000000E693                 db    0
.eh_frame:000000000000E694                 db 0ACh
.eh_frame:000000000000E695                 db  8Fh
.eh_frame:000000000000E696                 db 0FFh
.eh_frame:000000000000E697                 db 0FFh
.eh_frame:000000000000E698                 db  0Ah
.eh_frame:000000000000E699                 db    0
.eh_frame:000000000000E69A                 db    0
.eh_frame:000000000000E69B                 db    0
.eh_frame:000000000000E69C                 db    0
.eh_frame:000000000000E69D                 db    0
.eh_frame:000000000000E69E                 db    0
.eh_frame:000000000000E69F                 db    0
.eh_frame:000000000000E6A0                 db  18h
.eh_frame:000000000000E6A1                 db    0
.eh_frame:000000000000E6A2                 db    0
.eh_frame:000000000000E6A3                 db    0
.eh_frame:000000000000E6A4                 db 0F4h
.eh_frame:000000000000E6A5                 db  0Dh
.eh_frame:000000000000E6A6                 db    0
.eh_frame:000000000000E6A7                 db    0
.eh_frame:000000000000E6A8                 db 0A8h
.eh_frame:000000000000E6A9                 db  8Fh
.eh_frame:000000000000E6AA                 db 0FFh
.eh_frame:000000000000E6AB                 db 0FFh
.eh_frame:000000000000E6AC                 db  8Eh
.eh_frame:000000000000E6AD                 db    0
.eh_frame:000000000000E6AE                 db    0
.eh_frame:000000000000E6AF                 db    0
.eh_frame:000000000000E6B0                 db    0
.eh_frame:000000000000E6B1                 db  44h ; D
.eh_frame:000000000000E6B2                 db  0Eh
.eh_frame:000000000000E6B3                 db  50h ; P
.eh_frame:000000000000E6B4                 db    2
.eh_frame:000000000000E6B5                 db  7Fh ; 
.eh_frame:000000000000E6B6                 db  0Ah
.eh_frame:000000000000E6B7                 db  0Eh
.eh_frame:000000000000E6B8                 db    8
.eh_frame:000000000000E6B9                 db  41h ; A
.eh_frame:000000000000E6BA                 db  0Bh
.eh_frame:000000000000E6BB                 db    0
.eh_frame:000000000000E6BC                 db  18h
.eh_frame:000000000000E6BD                 db    0
.eh_frame:000000000000E6BE                 db    0
.eh_frame:000000000000E6BF                 db    0
.eh_frame:000000000000E6C0                 db  10h
.eh_frame:000000000000E6C1                 db  0Eh
.eh_frame:000000000000E6C2                 db    0
.eh_frame:000000000000E6C3                 db    0
.eh_frame:000000000000E6C4                 db  1Ch
.eh_frame:000000000000E6C5                 db  90h
.eh_frame:000000000000E6C6                 db 0FFh
.eh_frame:000000000000E6C7                 db 0FFh
.eh_frame:000000000000E6C8                 db  91h
.eh_frame:000000000000E6C9                 db    0
.eh_frame:000000000000E6CA                 db    0
.eh_frame:000000000000E6CB                 db    0
.eh_frame:000000000000E6CC                 db    0
.eh_frame:000000000000E6CD                 db  44h ; D
.eh_frame:000000000000E6CE                 db  0Eh
.eh_frame:000000000000E6CF                 db  50h ; P
.eh_frame:000000000000E6D0                 db    2
.eh_frame:000000000000E6D1                 db  82h
.eh_frame:000000000000E6D2                 db  0Ah
.eh_frame:000000000000E6D3                 db  0Eh
.eh_frame:000000000000E6D4                 db    8
.eh_frame:000000000000E6D5                 db  41h ; A
.eh_frame:000000000000E6D6                 db  0Bh
.eh_frame:000000000000E6D7                 db    0
.eh_frame:000000000000E6D8                 db  10h
.eh_frame:000000000000E6D9                 db    0
.eh_frame:000000000000E6DA                 db    0
.eh_frame:000000000000E6DB                 db    0
.eh_frame:000000000000E6DC                 db  2Ch ; ,
.eh_frame:000000000000E6DD                 db  0Eh
.eh_frame:000000000000E6DE                 db    0
.eh_frame:000000000000E6DF                 db    0
.eh_frame:000000000000E6E0                 db 0A0h
.eh_frame:000000000000E6E1                 db  90h
.eh_frame:000000000000E6E2                 db 0FFh
.eh_frame:000000000000E6E3                 db 0FFh
.eh_frame:000000000000E6E4                 db  0Ch
.eh_frame:000000000000E6E5                 db    0
.eh_frame:000000000000E6E6                 db    0
.eh_frame:000000000000E6E7                 db    0
.eh_frame:000000000000E6E8                 db    0
.eh_frame:000000000000E6E9                 db    0
.eh_frame:000000000000E6EA                 db    0
.eh_frame:000000000000E6EB                 db    0
.eh_frame:000000000000E6EC                 db  10h
.eh_frame:000000000000E6ED                 db    0
.eh_frame:000000000000E6EE                 db    0
.eh_frame:000000000000E6EF                 db    0
.eh_frame:000000000000E6F0                 db  40h ; @
.eh_frame:000000000000E6F1                 db  0Eh
.eh_frame:000000000000E6F2                 db    0
.eh_frame:000000000000E6F3                 db    0
.eh_frame:000000000000E6F4                 db  9Ch
.eh_frame:000000000000E6F5                 db  90h
.eh_frame:000000000000E6F6                 db 0FFh
.eh_frame:000000000000E6F7                 db 0FFh
.eh_frame:000000000000E6F8                 db  17h
.eh_frame:000000000000E6F9                 db    0
.eh_frame:000000000000E6FA                 db    0
.eh_frame:000000000000E6FB                 db    0
.eh_frame:000000000000E6FC                 db    0
.eh_frame:000000000000E6FD                 db    0
.eh_frame:000000000000E6FE                 db    0
.eh_frame:000000000000E6FF                 db    0
.eh_frame:000000000000E700                 db  10h
.eh_frame:000000000000E701                 db    0
.eh_frame:000000000000E702                 db    0
.eh_frame:000000000000E703                 db    0
.eh_frame:000000000000E704                 db  54h ; T
.eh_frame:000000000000E705                 db  0Eh
.eh_frame:000000000000E706                 db    0
.eh_frame:000000000000E707                 db    0
.eh_frame:000000000000E708                 db 0A8h
.eh_frame:000000000000E709                 db  90h
.eh_frame:000000000000E70A                 db 0FFh
.eh_frame:000000000000E70B                 db 0FFh
.eh_frame:000000000000E70C                 db  13h
.eh_frame:000000000000E70D                 db    0
.eh_frame:000000000000E70E                 db    0
.eh_frame:000000000000E70F                 db    0
.eh_frame:000000000000E710                 db    0
.eh_frame:000000000000E711                 db    0
.eh_frame:000000000000E712                 db    0
.eh_frame:000000000000E713                 db    0
.eh_frame:000000000000E714                 db  10h
.eh_frame:000000000000E715                 db    0
.eh_frame:000000000000E716                 db    0
.eh_frame:000000000000E717                 db    0
.eh_frame:000000000000E718                 db  68h ; h
.eh_frame:000000000000E719                 db  0Eh
.eh_frame:000000000000E71A                 db    0
.eh_frame:000000000000E71B                 db    0
.eh_frame:000000000000E71C                 db 0B4h
.eh_frame:000000000000E71D                 db  90h
.eh_frame:000000000000E71E                 db 0FFh
.eh_frame:000000000000E71F                 db 0FFh
.eh_frame:000000000000E720                 db  0Ch
.eh_frame:000000000000E721                 db    0
.eh_frame:000000000000E722                 db    0
.eh_frame:000000000000E723                 db    0
.eh_frame:000000000000E724                 db    0
.eh_frame:000000000000E725                 db    0
.eh_frame:000000000000E726                 db    0
.eh_frame:000000000000E727                 db    0
.eh_frame:000000000000E728                 db  10h
.eh_frame:000000000000E729                 db    0
.eh_frame:000000000000E72A                 db    0
.eh_frame:000000000000E72B                 db    0
.eh_frame:000000000000E72C                 db  7Ch ; |
.eh_frame:000000000000E72D                 db  0Eh
.eh_frame:000000000000E72E                 db    0
.eh_frame:000000000000E72F                 db    0
.eh_frame:000000000000E730                 db 0B0h
.eh_frame:000000000000E731                 db  90h
.eh_frame:000000000000E732                 db 0FFh
.eh_frame:000000000000E733                 db 0FFh
.eh_frame:000000000000E734                 db  14h
.eh_frame:000000000000E735                 db    0
.eh_frame:000000000000E736                 db    0
.eh_frame:000000000000E737                 db    0
.eh_frame:000000000000E738                 db    0
.eh_frame:000000000000E739                 db    0
.eh_frame:000000000000E73A                 db    0
.eh_frame:000000000000E73B                 db    0
.eh_frame:000000000000E73C                 db  10h
.eh_frame:000000000000E73D                 db    0
.eh_frame:000000000000E73E                 db    0
.eh_frame:000000000000E73F                 db    0
.eh_frame:000000000000E740                 db  90h
.eh_frame:000000000000E741                 db  0Eh
.eh_frame:000000000000E742                 db    0
.eh_frame:000000000000E743                 db    0
.eh_frame:000000000000E744                 db 0BCh
.eh_frame:000000000000E745                 db  90h
.eh_frame:000000000000E746                 db 0FFh
.eh_frame:000000000000E747                 db 0FFh
.eh_frame:000000000000E748                 db  13h
.eh_frame:000000000000E749                 db    0
.eh_frame:000000000000E74A                 db    0
.eh_frame:000000000000E74B                 db    0
.eh_frame:000000000000E74C                 db    0
.eh_frame:000000000000E74D                 db    0
.eh_frame:000000000000E74E                 db    0
.eh_frame:000000000000E74F                 db    0
.eh_frame:000000000000E750                 db  14h
.eh_frame:000000000000E751                 db    0
.eh_frame:000000000000E752                 db    0
.eh_frame:000000000000E753                 db    0
.eh_frame:000000000000E754                 db 0A4h
.eh_frame:000000000000E755                 db  0Eh
.eh_frame:000000000000E756                 db    0
.eh_frame:000000000000E757                 db    0
.eh_frame:000000000000E758                 db 0C8h
.eh_frame:000000000000E759                 db  90h
.eh_frame:000000000000E75A                 db 0FFh
.eh_frame:000000000000E75B                 db 0FFh
.eh_frame:000000000000E75C                 db  18h
.eh_frame:000000000000E75D                 db    0
.eh_frame:000000000000E75E                 db    0
.eh_frame:000000000000E75F                 db    0
.eh_frame:000000000000E760                 db    0
.eh_frame:000000000000E761                 db    0
.eh_frame:000000000000E762                 db    0
.eh_frame:000000000000E763                 db    0
.eh_frame:000000000000E764                 db    0
.eh_frame:000000000000E765                 db    0
.eh_frame:000000000000E766                 db    0
.eh_frame:000000000000E767                 db    0
.eh_frame:000000000000E768                 db  10h
.eh_frame:000000000000E769                 db    1
.eh_frame:000000000000E76A                 db    0
.eh_frame:000000000000E76B                 db    0
.eh_frame:000000000000E76C                 db 0BCh
.eh_frame:000000000000E76D                 db  0Eh
.eh_frame:000000000000E76E                 db    0
.eh_frame:000000000000E76F                 db    0
.eh_frame:000000000000E770                 db 0D0h
.eh_frame:000000000000E771                 db  90h
.eh_frame:000000000000E772                 db 0FFh
.eh_frame:000000000000E773                 db 0FFh
.eh_frame:000000000000E774                 db  17h
.eh_frame:000000000000E775                 db    4
.eh_frame:000000000000E776                 db    0
.eh_frame:000000000000E777                 db    0
.eh_frame:000000000000E778                 db    0
.eh_frame:000000000000E779                 db  42h ; B
.eh_frame:000000000000E77A                 db  0Eh
.eh_frame:000000000000E77B                 db  10h
.eh_frame:000000000000E77C                 db  8Fh
.eh_frame:000000000000E77D                 db    2
.eh_frame:000000000000E77E                 db  42h ; B
.eh_frame:000000000000E77F                 db  0Eh
.eh_frame:000000000000E780                 db  18h
.eh_frame:000000000000E781                 db  8Eh
.eh_frame:000000000000E782                 db    3
.eh_frame:000000000000E783                 db  42h ; B
.eh_frame:000000000000E784                 db  0Eh
.eh_frame:000000000000E785                 db  20h
.eh_frame:000000000000E786                 db  8Dh
.eh_frame:000000000000E787                 db    4
.eh_frame:000000000000E788                 db  42h ; B
.eh_frame:000000000000E789                 db  0Eh
.eh_frame:000000000000E78A                 db  28h ; (
.eh_frame:000000000000E78B                 db  8Ch
.eh_frame:000000000000E78C                 db    5
.eh_frame:000000000000E78D                 db  44h ; D
.eh_frame:000000000000E78E                 db  0Eh
.eh_frame:000000000000E78F                 db  30h ; 0
.eh_frame:000000000000E790                 db  86h
.eh_frame:000000000000E791                 db    6
.eh_frame:000000000000E792                 db  41h ; A
.eh_frame:000000000000E793                 db  0Eh
.eh_frame:000000000000E794                 db  38h ; 8
.eh_frame:000000000000E795                 db  83h
.eh_frame:000000000000E796                 db    7
.eh_frame:000000000000E797                 db  4Ah ; J
.eh_frame:000000000000E798                 db  0Eh
.eh_frame:000000000000E799                 db  60h ; `
.eh_frame:000000000000E79A                 db    2
.eh_frame:000000000000E79B                 db 0DDh
.eh_frame:000000000000E79C                 db  0Eh
.eh_frame:000000000000E79D                 db  68h ; h
.eh_frame:000000000000E79E                 db  57h ; W
.eh_frame:000000000000E79F                 db  0Eh
.eh_frame:000000000000E7A0                 db  70h ; p
.eh_frame:000000000000E7A1                 db  42h ; B
.eh_frame:000000000000E7A2                 db  0Eh
.eh_frame:000000000000E7A3                 db  78h ; x
.eh_frame:000000000000E7A4                 db  42h ; B
.eh_frame:000000000000E7A5                 db  0Eh
.eh_frame:000000000000E7A6                 db  80h
.eh_frame:000000000000E7A7                 db    1
.eh_frame:000000000000E7A8                 db  42h ; B
.eh_frame:000000000000E7A9                 db  0Eh
.eh_frame:000000000000E7AA                 db  88h
.eh_frame:000000000000E7AB                 db    1
.eh_frame:000000000000E7AC                 db  42h ; B
.eh_frame:000000000000E7AD                 db  0Eh
.eh_frame:000000000000E7AE                 db  90h
.eh_frame:000000000000E7AF                 db    1
.eh_frame:000000000000E7B0                 db  53h ; S
.eh_frame:000000000000E7B1                 db  0Eh
.eh_frame:000000000000E7B2                 db  60h ; `
.eh_frame:000000000000E7B3                 db  44h ; D
.eh_frame:000000000000E7B4                 db  0Ah
.eh_frame:000000000000E7B5                 db  0Eh
.eh_frame:000000000000E7B6                 db  38h ; 8
.eh_frame:000000000000E7B7                 db  41h ; A
.eh_frame:000000000000E7B8                 db  0Eh
.eh_frame:000000000000E7B9                 db  30h ; 0
.eh_frame:000000000000E7BA                 db  41h ; A
.eh_frame:000000000000E7BB                 db  0Eh
.eh_frame:000000000000E7BC                 db  28h ; (
.eh_frame:000000000000E7BD                 db  42h ; B
.eh_frame:000000000000E7BE                 db  0Eh
.eh_frame:000000000000E7BF                 db  20h
.eh_frame:000000000000E7C0                 db  42h ; B
.eh_frame:000000000000E7C1                 db  0Eh
.eh_frame:000000000000E7C2                 db  18h
.eh_frame:000000000000E7C3                 db  42h ; B
.eh_frame:000000000000E7C4                 db  0Eh
.eh_frame:000000000000E7C5                 db  10h
.eh_frame:000000000000E7C6                 db  42h ; B
.eh_frame:000000000000E7C7                 db  0Eh
.eh_frame:000000000000E7C8                 db    8
.eh_frame:000000000000E7C9                 db  44h ; D
.eh_frame:000000000000E7CA                 db  0Bh
.eh_frame:000000000000E7CB                 db    2
.eh_frame:000000000000E7CC                 db  78h ; x
.eh_frame:000000000000E7CD                 db  0Ah
.eh_frame:000000000000E7CE                 db  0Eh
.eh_frame:000000000000E7CF                 db  68h ; h
.eh_frame:000000000000E7D0                 db  48h ; H
.eh_frame:000000000000E7D1                 db  0Bh
.eh_frame:000000000000E7D2                 db  5Ah ; Z
.eh_frame:000000000000E7D3                 db  0Ah
.eh_frame:000000000000E7D4                 db  0Eh
.eh_frame:000000000000E7D5                 db  38h ; 8
.eh_frame:000000000000E7D6                 db  47h ; G
.eh_frame:000000000000E7D7                 db  0Eh
.eh_frame:000000000000E7D8                 db  30h ; 0
.eh_frame:000000000000E7D9                 db  41h ; A
.eh_frame:000000000000E7DA                 db  0Eh
.eh_frame:000000000000E7DB                 db  28h ; (
.eh_frame:000000000000E7DC                 db  42h ; B
.eh_frame:000000000000E7DD                 db  0Eh
.eh_frame:000000000000E7DE                 db  20h
.eh_frame:000000000000E7DF                 db  42h ; B
.eh_frame:000000000000E7E0                 db  0Eh
.eh_frame:000000000000E7E1                 db  18h
.eh_frame:000000000000E7E2                 db  42h ; B
.eh_frame:000000000000E7E3                 db  0Eh
.eh_frame:000000000000E7E4                 db  10h
.eh_frame:000000000000E7E5                 db  42h ; B
.eh_frame:000000000000E7E6                 db  0Eh
.eh_frame:000000000000E7E7                 db    8
.eh_frame:000000000000E7E8                 db  56h ; V
.eh_frame:000000000000E7E9                 db  0Bh
.eh_frame:000000000000E7EA                 db  5Eh ; ^
.eh_frame:000000000000E7EB                 db  0Ah
.eh_frame:000000000000E7EC                 db  0Eh
.eh_frame:000000000000E7ED                 db  38h ; 8
.eh_frame:000000000000E7EE                 db  52h ; R
.eh_frame:000000000000E7EF                 db  0Eh
.eh_frame:000000000000E7F0                 db  30h ; 0
.eh_frame:000000000000E7F1                 db  41h ; A
.eh_frame:000000000000E7F2                 db  0Eh
.eh_frame:000000000000E7F3                 db  28h ; (
.eh_frame:000000000000E7F4                 db  42h ; B
.eh_frame:000000000000E7F5                 db  0Eh
.eh_frame:000000000000E7F6                 db  20h
.eh_frame:000000000000E7F7                 db  42h ; B
.eh_frame:000000000000E7F8                 db  0Eh
.eh_frame:000000000000E7F9                 db  18h
.eh_frame:000000000000E7FA                 db  42h ; B
.eh_frame:000000000000E7FB                 db  0Eh
.eh_frame:000000000000E7FC                 db  10h
.eh_frame:000000000000E7FD                 db  42h ; B
.eh_frame:000000000000E7FE                 db  0Eh
.eh_frame:000000000000E7FF                 db    8
.eh_frame:000000000000E800                 db  4Fh ; O
.eh_frame:000000000000E801                 db  0Bh
.eh_frame:000000000000E802                 db  62h ; b
.eh_frame:000000000000E803                 db  0Ah
.eh_frame:000000000000E804                 db  0Eh
.eh_frame:000000000000E805                 db  38h ; 8
.eh_frame:000000000000E806                 db  50h ; P
.eh_frame:000000000000E807                 db  0Eh
.eh_frame:000000000000E808                 db  30h ; 0
.eh_frame:000000000000E809                 db  41h ; A
.eh_frame:000000000000E80A                 db  0Eh
.eh_frame:000000000000E80B                 db  28h ; (
.eh_frame:000000000000E80C                 db  42h ; B
.eh_frame:000000000000E80D                 db  0Eh
.eh_frame:000000000000E80E                 db  20h
.eh_frame:000000000000E80F                 db  42h ; B
.eh_frame:000000000000E810                 db  0Eh
.eh_frame:000000000000E811                 db  18h
.eh_frame:000000000000E812                 db  42h ; B
.eh_frame:000000000000E813                 db  0Eh
.eh_frame:000000000000E814                 db  10h
.eh_frame:000000000000E815                 db  42h ; B
.eh_frame:000000000000E816                 db  0Eh
.eh_frame:000000000000E817                 db    8
.eh_frame:000000000000E818                 db  55h ; U
.eh_frame:000000000000E819                 db  0Bh
.eh_frame:000000000000E81A                 db  66h ; f
.eh_frame:000000000000E81B                 db  0Eh
.eh_frame:000000000000E81C                 db  68h ; h
.eh_frame:000000000000E81D                 db  42h ; B
.eh_frame:000000000000E81E                 db  0Eh
.eh_frame:000000000000E81F                 db  70h ; p
.eh_frame:000000000000E820                 db  5Ch ; \
.eh_frame:000000000000E821                 db  0Eh
.eh_frame:000000000000E822                 db  68h ; h
.eh_frame:000000000000E823                 db  41h ; A
.eh_frame:000000000000E824                 db  0Eh
.eh_frame:000000000000E825                 db  60h ; `
.eh_frame:000000000000E826                 db  44h ; D
.eh_frame:000000000000E827                 db  0Ah
.eh_frame:000000000000E828                 db  0Eh
.eh_frame:000000000000E829                 db  38h ; 8
.eh_frame:000000000000E82A                 db  41h ; A
.eh_frame:000000000000E82B                 db  0Eh
.eh_frame:000000000000E82C                 db  30h ; 0
.eh_frame:000000000000E82D                 db  41h ; A
.eh_frame:000000000000E82E                 db  0Eh
.eh_frame:000000000000E82F                 db  28h ; (
.eh_frame:000000000000E830                 db  42h ; B
.eh_frame:000000000000E831                 db  0Eh
.eh_frame:000000000000E832                 db  20h
.eh_frame:000000000000E833                 db  42h ; B
.eh_frame:000000000000E834                 db  0Eh
.eh_frame:000000000000E835                 db  18h
.eh_frame:000000000000E836                 db  42h ; B
.eh_frame:000000000000E837                 db  0Eh
.eh_frame:000000000000E838                 db  10h
.eh_frame:000000000000E839                 db  42h ; B
.eh_frame:000000000000E83A                 db  0Eh
.eh_frame:000000000000E83B                 db    8
.eh_frame:000000000000E83C                 db  45h ; E
.eh_frame:000000000000E83D                 db  0Bh
.eh_frame:000000000000E83E                 db  68h ; h
.eh_frame:000000000000E83F                 db  0Ah
.eh_frame:000000000000E840                 db  0Eh
.eh_frame:000000000000E841                 db  68h ; h
.eh_frame:000000000000E842                 db  48h ; H
.eh_frame:000000000000E843                 db  0Bh
.eh_frame:000000000000E844                 db  72h ; r
.eh_frame:000000000000E845                 db  0Eh
.eh_frame:000000000000E846                 db  68h ; h
.eh_frame:000000000000E847                 db  45h ; E
.eh_frame:000000000000E848                 db  0Eh
.eh_frame:000000000000E849                 db  70h ; p
.eh_frame:000000000000E84A                 db  42h ; B
.eh_frame:000000000000E84B                 db  0Eh
.eh_frame:000000000000E84C                 db  78h ; x
.eh_frame:000000000000E84D                 db  42h ; B
.eh_frame:000000000000E84E                 db  0Eh
.eh_frame:000000000000E84F                 db  80h
.eh_frame:000000000000E850                 db    1
.eh_frame:000000000000E851                 db  5Eh ; ^
.eh_frame:000000000000E852                 db  0Eh
.eh_frame:000000000000E853                 db  60h ; `
.eh_frame:000000000000E854                 db  44h ; D
.eh_frame:000000000000E855                 db  0Ah
.eh_frame:000000000000E856                 db  0Eh
.eh_frame:000000000000E857                 db  38h ; 8
.eh_frame:000000000000E858                 db  41h ; A
.eh_frame:000000000000E859                 db  0Eh
.eh_frame:000000000000E85A                 db  30h ; 0
.eh_frame:000000000000E85B                 db  41h ; A
.eh_frame:000000000000E85C                 db  0Eh
.eh_frame:000000000000E85D                 db  28h ; (
.eh_frame:000000000000E85E                 db  42h ; B
.eh_frame:000000000000E85F                 db  0Eh
.eh_frame:000000000000E860                 db  20h
.eh_frame:000000000000E861                 db  42h ; B
.eh_frame:000000000000E862                 db  0Eh
.eh_frame:000000000000E863                 db  18h
.eh_frame:000000000000E864                 db  42h ; B
.eh_frame:000000000000E865                 db  0Eh
.eh_frame:000000000000E866                 db  10h
.eh_frame:000000000000E867                 db  42h ; B
.eh_frame:000000000000E868                 db  0Eh
.eh_frame:000000000000E869                 db    8
.eh_frame:000000000000E86A                 db  41h ; A
.eh_frame:000000000000E86B                 db  0Bh
.eh_frame:000000000000E86C                 db  79h ; y
.eh_frame:000000000000E86D                 db  0Ah
.eh_frame:000000000000E86E                 db  0Eh
.eh_frame:000000000000E86F                 db  68h ; h
.eh_frame:000000000000E870                 db  42h ; B
.eh_frame:000000000000E871                 db  0Eh
.eh_frame:000000000000E872                 db  70h ; p
.eh_frame:000000000000E873                 db  42h ; B
.eh_frame:000000000000E874                 db  0Eh
.eh_frame:000000000000E875                 db  78h ; x
.eh_frame:000000000000E876                 db  42h ; B
.eh_frame:000000000000E877                 db  0Eh
.eh_frame:000000000000E878                 db  80h
.eh_frame:000000000000E879                 db    1
.eh_frame:000000000000E87A                 db  51h ; Q
.eh_frame:000000000000E87B                 db  0Bh
.eh_frame:000000000000E87C                 db  10h
.eh_frame:000000000000E87D                 db    0
.eh_frame:000000000000E87E                 db    0
.eh_frame:000000000000E87F                 db    0
.eh_frame:000000000000E880                 db 0D0h
.eh_frame:000000000000E881                 db  0Fh
.eh_frame:000000000000E882                 db    0
.eh_frame:000000000000E883                 db    0
.eh_frame:000000000000E884                 db 0DCh
.eh_frame:000000000000E885                 db  93h
.eh_frame:000000000000E886                 db 0FFh
.eh_frame:000000000000E887                 db 0FFh
.eh_frame:000000000000E888                 db  20h
.eh_frame:000000000000E889                 db    0
.eh_frame:000000000000E88A                 db    0
.eh_frame:000000000000E88B                 db    0
.eh_frame:000000000000E88C                 db    0
.eh_frame:000000000000E88D                 db    0
.eh_frame:000000000000E88E                 db    0
.eh_frame:000000000000E88F                 db    0
.eh_frame:000000000000E890                 db  18h
.eh_frame:000000000000E891                 db    0
.eh_frame:000000000000E892                 db    0
.eh_frame:000000000000E893                 db    0
.eh_frame:000000000000E894                 db 0E4h
.eh_frame:000000000000E895                 db  0Fh
.eh_frame:000000000000E896                 db    0
.eh_frame:000000000000E897                 db    0
.eh_frame:000000000000E898                 db 0E8h
.eh_frame:000000000000E899                 db  93h
.eh_frame:000000000000E89A                 db 0FFh
.eh_frame:000000000000E89B                 db 0FFh
.eh_frame:000000000000E89C                 db  78h ; x
.eh_frame:000000000000E89D                 db    0
.eh_frame:000000000000E89E                 db    0
.eh_frame:000000000000E89F                 db    0
.eh_frame:000000000000E8A0                 db    0
.eh_frame:000000000000E8A1                 db  44h ; D
.eh_frame:000000000000E8A2                 db  0Eh
.eh_frame:000000000000E8A3                 db  70h ; p
.eh_frame:000000000000E8A4                 db    2
.eh_frame:000000000000E8A5                 db  60h ; `
.eh_frame:000000000000E8A6                 db  0Ah
.eh_frame:000000000000E8A7                 db  0Eh
.eh_frame:000000000000E8A8                 db    8
.eh_frame:000000000000E8A9                 db  41h ; A
.eh_frame:000000000000E8AA                 db  0Bh
.eh_frame:000000000000E8AB                 db    0
.eh_frame:000000000000E8AC                 db  28h ; (
.eh_frame:000000000000E8AD                 db    0
.eh_frame:000000000000E8AE                 db    0
.eh_frame:000000000000E8AF                 db    0
.eh_frame:000000000000E8B0                 db    0
.eh_frame:000000000000E8B1                 db  10h
.eh_frame:000000000000E8B2                 db    0
.eh_frame:000000000000E8B3                 db    0
.eh_frame:000000000000E8B4                 db  4Ch ; L
.eh_frame:000000000000E8B5                 db  94h
.eh_frame:000000000000E8B6                 db 0FFh
.eh_frame:000000000000E8B7                 db 0FFh
.eh_frame:000000000000E8B8                 db 0D5h
.eh_frame:000000000000E8B9                 db    0
.eh_frame:000000000000E8BA                 db    0
.eh_frame:000000000000E8BB                 db    0
.eh_frame:000000000000E8BC                 db    0
.eh_frame:000000000000E8BD                 db  41h ; A
.eh_frame:000000000000E8BE                 db  0Eh
.eh_frame:000000000000E8BF                 db  10h
.eh_frame:000000000000E8C0                 db  86h
.eh_frame:000000000000E8C1                 db    2
.eh_frame:000000000000E8C2                 db  41h ; A
.eh_frame:000000000000E8C3                 db  0Eh
.eh_frame:000000000000E8C4                 db  18h
.eh_frame:000000000000E8C5                 db  83h
.eh_frame:000000000000E8C6                 db    3
.eh_frame:000000000000E8C7                 db  50h ; P
.eh_frame:000000000000E8C8                 db  0Eh
.eh_frame:000000000000E8C9                 db 0D0h
.eh_frame:000000000000E8CA                 db    1
.eh_frame:000000000000E8CB                 db    2
.eh_frame:000000000000E8CC                 db 0ABh
.eh_frame:000000000000E8CD                 db  0Ah
.eh_frame:000000000000E8CE                 db  0Eh
.eh_frame:000000000000E8CF                 db  18h
.eh_frame:000000000000E8D0                 db  41h ; A
.eh_frame:000000000000E8D1                 db  0Eh
.eh_frame:000000000000E8D2                 db  10h
.eh_frame:000000000000E8D3                 db  41h ; A
.eh_frame:000000000000E8D4                 db  0Eh
.eh_frame:000000000000E8D5                 db    8
.eh_frame:000000000000E8D6                 db  41h ; A
.eh_frame:000000000000E8D7                 db  0Bh
.eh_frame:000000000000E8D8                 db  1Ch
.eh_frame:000000000000E8D9                 db    0
.eh_frame:000000000000E8DA                 db    0
.eh_frame:000000000000E8DB                 db    0
.eh_frame:000000000000E8DC                 db  2Ch ; ,
.eh_frame:000000000000E8DD                 db  10h
.eh_frame:000000000000E8DE                 db    0
.eh_frame:000000000000E8DF                 db    0
.eh_frame:000000000000E8E0                 db    0
.eh_frame:000000000000E8E1                 db  95h
.eh_frame:000000000000E8E2                 db 0FFh
.eh_frame:000000000000E8E3                 db 0FFh
.eh_frame:000000000000E8E4                 db  80h
.eh_frame:000000000000E8E5                 db    0
.eh_frame:000000000000E8E6                 db    0
.eh_frame:000000000000E8E7                 db    0
.eh_frame:000000000000E8E8                 db    0
.eh_frame:000000000000E8E9                 db  41h ; A
.eh_frame:000000000000E8EA                 db  0Eh
.eh_frame:000000000000E8EB                 db  10h
.eh_frame:000000000000E8EC                 db  83h
.eh_frame:000000000000E8ED                 db    2
.eh_frame:000000000000E8EE                 db    2
.eh_frame:000000000000E8EF                 db  7Ah ; z
.eh_frame:000000000000E8F0                 db  0Eh
.eh_frame:000000000000E8F1                 db    8
.eh_frame:000000000000E8F2                 db    0
.eh_frame:000000000000E8F3                 db    0
.eh_frame:000000000000E8F4                 db    0
.eh_frame:000000000000E8F5                 db    0
.eh_frame:000000000000E8F6                 db    0
.eh_frame:000000000000E8F7                 db    0
.eh_frame:000000000000E8F8                 db  18h
.eh_frame:000000000000E8F9                 db    0
.eh_frame:000000000000E8FA                 db    0
.eh_frame:000000000000E8FB                 db    0
.eh_frame:000000000000E8FC                 db  4Ch ; L
.eh_frame:000000000000E8FD                 db  10h
.eh_frame:000000000000E8FE                 db    0
.eh_frame:000000000000E8FF                 db    0
.eh_frame:000000000000E900                 db  60h ; `
.eh_frame:000000000000E901                 db  95h
.eh_frame:000000000000E902                 db 0FFh
.eh_frame:000000000000E903                 db 0FFh
.eh_frame:000000000000E904                 db  1Ah
.eh_frame:000000000000E905                 db    0
.eh_frame:000000000000E906                 db    0
.eh_frame:000000000000E907                 db    0
.eh_frame:000000000000E908                 db    0
.eh_frame:000000000000E909                 db  41h ; A
.eh_frame:000000000000E90A                 db  0Eh
.eh_frame:000000000000E90B                 db  10h
.eh_frame:000000000000E90C                 db  83h
.eh_frame:000000000000E90D                 db    2
.eh_frame:000000000000E90E                 db  53h ; S
.eh_frame:000000000000E90F                 db  0Ah
.eh_frame:000000000000E910                 db  0Eh
.eh_frame:000000000000E911                 db    8
.eh_frame:000000000000E912                 db  41h ; A
.eh_frame:000000000000E913                 db  0Bh
.eh_frame:000000000000E914                 db  10h
.eh_frame:000000000000E915                 db    0
.eh_frame:000000000000E916                 db    0
.eh_frame:000000000000E917                 db    0
.eh_frame:000000000000E918                 db  68h ; h
.eh_frame:000000000000E919                 db  10h
.eh_frame:000000000000E91A                 db    0
.eh_frame:000000000000E91B                 db    0
.eh_frame:000000000000E91C                 db  64h ; d
.eh_frame:000000000000E91D                 db  95h
.eh_frame:000000000000E91E                 db 0FFh
.eh_frame:000000000000E91F                 db 0FFh
.eh_frame:000000000000E920                 db  24h ; $
.eh_frame:000000000000E921                 db    0
.eh_frame:000000000000E922                 db    0
.eh_frame:000000000000E923                 db    0
.eh_frame:000000000000E924                 db    0
.eh_frame:000000000000E925                 db  5Fh ; _
.eh_frame:000000000000E926                 db  0Eh
.eh_frame:000000000000E927                 db  10h
.eh_frame:000000000000E928                 db  10h
.eh_frame:000000000000E929                 db    0
.eh_frame:000000000000E92A                 db    0
.eh_frame:000000000000E92B                 db    0
.eh_frame:000000000000E92C                 db  7Ch ; |
.eh_frame:000000000000E92D                 db  10h
.eh_frame:000000000000E92E                 db    0
.eh_frame:000000000000E92F                 db    0
.eh_frame:000000000000E930                 db  80h
.eh_frame:000000000000E931                 db  95h
.eh_frame:000000000000E932                 db 0FFh
.eh_frame:000000000000E933                 db 0FFh
.eh_frame:000000000000E934                 db    2
.eh_frame:000000000000E935                 db    0
.eh_frame:000000000000E936                 db    0
.eh_frame:000000000000E937                 db    0
.eh_frame:000000000000E938                 db    0
.eh_frame:000000000000E939                 db    0
.eh_frame:000000000000E93A                 db    0
.eh_frame:000000000000E93B                 db    0
.eh_frame:000000000000E93C                 db  20h
.eh_frame:000000000000E93D                 db    0
.eh_frame:000000000000E93E                 db    0
.eh_frame:000000000000E93F                 db    0
.eh_frame:000000000000E940                 db  90h
.eh_frame:000000000000E941                 db  10h
.eh_frame:000000000000E942                 db    0
.eh_frame:000000000000E943                 db    0
.eh_frame:000000000000E944                 db  7Ch ; |
.eh_frame:000000000000E945                 db  95h
.eh_frame:000000000000E946                 db 0FFh
.eh_frame:000000000000E947                 db 0FFh
.eh_frame:000000000000E948                 db  36h ; 6
.eh_frame:000000000000E949                 db    0
.eh_frame:000000000000E94A                 db    0
.eh_frame:000000000000E94B                 db    0
.eh_frame:000000000000E94C                 db    0
.eh_frame:000000000000E94D                 db  44h ; D
.eh_frame:000000000000E94E                 db  0Eh
.eh_frame:000000000000E94F                 db  10h
.eh_frame:000000000000E950                 db  83h
.eh_frame:000000000000E951                 db    2
.eh_frame:000000000000E952                 db  5Dh ; ]
.eh_frame:000000000000E953                 db  0Ah
.eh_frame:000000000000E954                 db  0Eh
.eh_frame:000000000000E955                 db    8
.eh_frame:000000000000E956                 db  47h ; G
.eh_frame:000000000000E957                 db  0Bh
.eh_frame:000000000000E958                 db  48h ; H
.eh_frame:000000000000E959                 db  0Ah
.eh_frame:000000000000E95A                 db  0Eh
.eh_frame:000000000000E95B                 db    8
.eh_frame:000000000000E95C                 db  41h ; A
.eh_frame:000000000000E95D                 db  0Bh
.eh_frame:000000000000E95E                 db    0
.eh_frame:000000000000E95F                 db    0
.eh_frame:000000000000E960                 db  10h
.eh_frame:000000000000E961                 db    0
.eh_frame:000000000000E962                 db    0
.eh_frame:000000000000E963                 db    0
.eh_frame:000000000000E964                 db 0B4h
.eh_frame:000000000000E965                 db  10h
.eh_frame:000000000000E966                 db    0
.eh_frame:000000000000E967                 db    0
.eh_frame:000000000000E968                 db  98h
.eh_frame:000000000000E969                 db  95h
.eh_frame:000000000000E96A                 db 0FFh
.eh_frame:000000000000E96B                 db 0FFh
.eh_frame:000000000000E96C                 db  24h ; $
.eh_frame:000000000000E96D                 db    0
.eh_frame:000000000000E96E                 db    0
.eh_frame:000000000000E96F                 db    0
.eh_frame:000000000000E970                 db    0
.eh_frame:000000000000E971                 db  5Fh ; _
.eh_frame:000000000000E972                 db  0Eh
.eh_frame:000000000000E973                 db  10h
.eh_frame:000000000000E974                 db  14h
.eh_frame:000000000000E975                 db    0
.eh_frame:000000000000E976                 db    0
.eh_frame:000000000000E977                 db    0
.eh_frame:000000000000E978                 db 0C8h
.eh_frame:000000000000E979                 db  10h
.eh_frame:000000000000E97A                 db    0
.eh_frame:000000000000E97B                 db    0
.eh_frame:000000000000E97C                 db 0B4h
.eh_frame:000000000000E97D                 db  95h
.eh_frame:000000000000E97E                 db 0FFh
.eh_frame:000000000000E97F                 db 0FFh
.eh_frame:000000000000E980                 db  82h
.eh_frame:000000000000E981                 db    0
.eh_frame:000000000000E982                 db    0
.eh_frame:000000000000E983                 db    0
.eh_frame:000000000000E984                 db    0
.eh_frame:000000000000E985                 db    2
.eh_frame:000000000000E986                 db  5Fh ; _
.eh_frame:000000000000E987                 db  0Eh
.eh_frame:000000000000E988                 db  10h
.eh_frame:000000000000E989                 db  49h ; I
.eh_frame:000000000000E98A                 db  0Eh
.eh_frame:000000000000E98B                 db    8
.eh_frame:000000000000E98C                 db  14h
.eh_frame:000000000000E98D                 db    0
.eh_frame:000000000000E98E                 db    0
.eh_frame:000000000000E98F                 db    0
.eh_frame:000000000000E990                 db 0E0h
.eh_frame:000000000000E991                 db  10h
.eh_frame:000000000000E992                 db    0
.eh_frame:000000000000E993                 db    0
.eh_frame:000000000000E994                 db  2Ch ; ,
.eh_frame:000000000000E995                 db  96h
.eh_frame:000000000000E996                 db 0FFh
.eh_frame:000000000000E997                 db 0FFh
.eh_frame:000000000000E998                 db  4Ah ; J
.eh_frame:000000000000E999                 db    0
.eh_frame:000000000000E99A                 db    0
.eh_frame:000000000000E99B                 db    0
.eh_frame:000000000000E99C                 db    0
.eh_frame:000000000000E99D                 db    2
.eh_frame:000000000000E99E                 db  45h ; E
.eh_frame:000000000000E99F                 db  0Eh
.eh_frame:000000000000E9A0                 db  10h
.eh_frame:000000000000E9A1                 db    0
.eh_frame:000000000000E9A2                 db    0
.eh_frame:000000000000E9A3                 db    0
.eh_frame:000000000000E9A4                 db  18h
.eh_frame:000000000000E9A5                 db    0
.eh_frame:000000000000E9A6                 db    0
.eh_frame:000000000000E9A7                 db    0
.eh_frame:000000000000E9A8                 db 0F8h
.eh_frame:000000000000E9A9                 db  10h
.eh_frame:000000000000E9AA                 db    0
.eh_frame:000000000000E9AB                 db    0
.eh_frame:000000000000E9AC                 db  64h ; d
.eh_frame:000000000000E9AD                 db  96h
.eh_frame:000000000000E9AE                 db 0FFh
.eh_frame:000000000000E9AF                 db 0FFh
.eh_frame:000000000000E9B0                 db  17h
.eh_frame:000000000000E9B1                 db    0
.eh_frame:000000000000E9B2                 db    0
.eh_frame:000000000000E9B3                 db    0
.eh_frame:000000000000E9B4                 db    0
.eh_frame:000000000000E9B5                 db  41h ; A
.eh_frame:000000000000E9B6                 db  0Eh
.eh_frame:000000000000E9B7                 db  10h
.eh_frame:000000000000E9B8                 db  83h
.eh_frame:000000000000E9B9                 db    2
.eh_frame:000000000000E9BA                 db  51h ; Q
.eh_frame:000000000000E9BB                 db  0Eh
.eh_frame:000000000000E9BC                 db    8
.eh_frame:000000000000E9BD                 db    0
.eh_frame:000000000000E9BE                 db    0
.eh_frame:000000000000E9BF                 db    0
.eh_frame:000000000000E9C0                 db  18h
.eh_frame:000000000000E9C1                 db    0
.eh_frame:000000000000E9C2                 db    0
.eh_frame:000000000000E9C3                 db    0
.eh_frame:000000000000E9C4                 db  14h
.eh_frame:000000000000E9C5                 db  11h
.eh_frame:000000000000E9C6                 db    0
.eh_frame:000000000000E9C7                 db    0
.eh_frame:000000000000E9C8                 db  68h ; h
.eh_frame:000000000000E9C9                 db  96h
.eh_frame:000000000000E9CA                 db 0FFh
.eh_frame:000000000000E9CB                 db 0FFh
.eh_frame:000000000000E9CC                 db  2Eh ; .
.eh_frame:000000000000E9CD                 db    0
.eh_frame:000000000000E9CE                 db    0
.eh_frame:000000000000E9CF                 db    0
.eh_frame:000000000000E9D0                 db    0
.eh_frame:000000000000E9D1                 db  47h ; G
.eh_frame:000000000000E9D2                 db  0Eh
.eh_frame:000000000000E9D3                 db  10h
.eh_frame:000000000000E9D4                 db  61h ; a
.eh_frame:000000000000E9D5                 db  0Ah
.eh_frame:000000000000E9D6                 db  0Eh
.eh_frame:000000000000E9D7                 db    8
.eh_frame:000000000000E9D8                 db  41h ; A
.eh_frame:000000000000E9D9                 db  0Bh
.eh_frame:000000000000E9DA                 db    0
.eh_frame:000000000000E9DB                 db    0
.eh_frame:000000000000E9DC                 db  24h ; $
.eh_frame:000000000000E9DD                 db    0
.eh_frame:000000000000E9DE                 db    0
.eh_frame:000000000000E9DF                 db    0
.eh_frame:000000000000E9E0                 db  30h ; 0
.eh_frame:000000000000E9E1                 db  11h
.eh_frame:000000000000E9E2                 db    0
.eh_frame:000000000000E9E3                 db    0
.eh_frame:000000000000E9E4                 db  7Ch ; |
.eh_frame:000000000000E9E5                 db  96h
.eh_frame:000000000000E9E6                 db 0FFh
.eh_frame:000000000000E9E7                 db 0FFh
.eh_frame:000000000000E9E8                 db  28h ; (
.eh_frame:000000000000E9E9                 db    0
.eh_frame:000000000000E9EA                 db    0
.eh_frame:000000000000E9EB                 db    0
.eh_frame:000000000000E9EC                 db    0
.eh_frame:000000000000E9ED                 db  41h ; A
.eh_frame:000000000000E9EE                 db  0Eh
.eh_frame:000000000000E9EF                 db  10h
.eh_frame:000000000000E9F0                 db  86h
.eh_frame:000000000000E9F1                 db    2
.eh_frame:000000000000E9F2                 db  41h ; A
.eh_frame:000000000000E9F3                 db  0Eh
.eh_frame:000000000000E9F4                 db  18h
.eh_frame:000000000000E9F5                 db  83h
.eh_frame:000000000000E9F6                 db    3
.eh_frame:000000000000E9F7                 db  4Dh ; M
.eh_frame:000000000000E9F8                 db  0Eh
.eh_frame:000000000000E9F9                 db  20h
.eh_frame:000000000000E9FA                 db  49h ; I
.eh_frame:000000000000E9FB                 db  0Eh
.eh_frame:000000000000E9FC                 db  18h
.eh_frame:000000000000E9FD                 db  47h ; G
.eh_frame:000000000000E9FE                 db  0Eh
.eh_frame:000000000000E9FF                 db  10h
.eh_frame:000000000000EA00                 db  41h ; A
.eh_frame:000000000000EA01                 db  0Eh
.eh_frame:000000000000EA02                 db    8
.eh_frame:000000000000EA03                 db    0
.eh_frame:000000000000EA04                 db  18h
.eh_frame:000000000000EA05                 db    0
.eh_frame:000000000000EA06                 db    0
.eh_frame:000000000000EA07                 db    0
.eh_frame:000000000000EA08                 db  58h ; X
.eh_frame:000000000000EA09                 db  11h
.eh_frame:000000000000EA0A                 db    0
.eh_frame:000000000000EA0B                 db    0
.eh_frame:000000000000EA0C                 db  84h
.eh_frame:000000000000EA0D                 db  96h
.eh_frame:000000000000EA0E                 db 0FFh
.eh_frame:000000000000EA0F                 db 0FFh
.eh_frame:000000000000EA10                 db  13h
.eh_frame:000000000000EA11                 db    0
.eh_frame:000000000000EA12                 db    0
.eh_frame:000000000000EA13                 db    0
.eh_frame:000000000000EA14                 db    0
.eh_frame:000000000000EA15                 db  41h ; A
.eh_frame:000000000000EA16                 db  0Eh
.eh_frame:000000000000EA17                 db  10h
.eh_frame:000000000000EA18                 db  83h
.eh_frame:000000000000EA19                 db    2
.eh_frame:000000000000EA1A                 db  50h ; P
.eh_frame:000000000000EA1B                 db  0Eh
.eh_frame:000000000000EA1C                 db    8
.eh_frame:000000000000EA1D                 db    0
.eh_frame:000000000000EA1E                 db    0
.eh_frame:000000000000EA1F                 db    0
.eh_frame:000000000000EA20                 db  14h
.eh_frame:000000000000EA21                 db    0
.eh_frame:000000000000EA22                 db    0
.eh_frame:000000000000EA23                 db    0
.eh_frame:000000000000EA24                 db  74h ; t
.eh_frame:000000000000EA25                 db  11h
.eh_frame:000000000000EA26                 db    0
.eh_frame:000000000000EA27                 db    0
.eh_frame:000000000000EA28                 db  88h
.eh_frame:000000000000EA29                 db  96h
.eh_frame:000000000000EA2A                 db 0FFh
.eh_frame:000000000000EA2B                 db 0FFh
.eh_frame:000000000000EA2C                 db  35h ; 5
.eh_frame:000000000000EA2D                 db    0
.eh_frame:000000000000EA2E                 db    0
.eh_frame:000000000000EA2F                 db    0
.eh_frame:000000000000EA30                 db    0
.eh_frame:000000000000EA31                 db  4Bh ; K
.eh_frame:000000000000EA32                 db  0Eh
.eh_frame:000000000000EA33                 db  10h
.eh_frame:000000000000EA34                 db    0
.eh_frame:000000000000EA35                 db    0
.eh_frame:000000000000EA36                 db    0
.eh_frame:000000000000EA37                 db    0
.eh_frame:000000000000EA38                 db  28h ; (
.eh_frame:000000000000EA39                 db    0
.eh_frame:000000000000EA3A                 db    0
.eh_frame:000000000000EA3B                 db    0
.eh_frame:000000000000EA3C                 db  8Ch
.eh_frame:000000000000EA3D                 db  11h
.eh_frame:000000000000EA3E                 db    0
.eh_frame:000000000000EA3F                 db    0
.eh_frame:000000000000EA40                 db 0B0h
.eh_frame:000000000000EA41                 db  96h
.eh_frame:000000000000EA42                 db 0FFh
.eh_frame:000000000000EA43                 db 0FFh
.eh_frame:000000000000EA44                 db  5Fh ; _
.eh_frame:000000000000EA45                 db    0
.eh_frame:000000000000EA46                 db    0
.eh_frame:000000000000EA47                 db    0
.eh_frame:000000000000EA48                 db    0
.eh_frame:000000000000EA49                 db  41h ; A
.eh_frame:000000000000EA4A                 db  0Eh
.eh_frame:000000000000EA4B                 db  10h
.eh_frame:000000000000EA4C                 db  86h
.eh_frame:000000000000EA4D                 db    2
.eh_frame:000000000000EA4E                 db  41h ; A
.eh_frame:000000000000EA4F                 db  0Eh
.eh_frame:000000000000EA50                 db  18h
.eh_frame:000000000000EA51                 db  83h
.eh_frame:000000000000EA52                 db    3
.eh_frame:000000000000EA53                 db  44h ; D
.eh_frame:000000000000EA54                 db  0Eh
.eh_frame:000000000000EA55                 db  20h
.eh_frame:000000000000EA56                 db  4Fh ; O
.eh_frame:000000000000EA57                 db  0Ah
.eh_frame:000000000000EA58                 db  0Eh
.eh_frame:000000000000EA59                 db  18h
.eh_frame:000000000000EA5A                 db  43h ; C
.eh_frame:000000000000EA5B                 db  0Eh
.eh_frame:000000000000EA5C                 db  10h
.eh_frame:000000000000EA5D                 db  41h ; A
.eh_frame:000000000000EA5E                 db  0Eh
.eh_frame:000000000000EA5F                 db    8
.eh_frame:000000000000EA60                 db  47h ; G
.eh_frame:000000000000EA61                 db  0Bh
.eh_frame:000000000000EA62                 db    0
.eh_frame:000000000000EA63                 db    0
.eh_frame:000000000000EA64                 db  18h
.eh_frame:000000000000EA65                 db    0
.eh_frame:000000000000EA66                 db    0
.eh_frame:000000000000EA67                 db    0
.eh_frame:000000000000EA68                 db 0B8h
.eh_frame:000000000000EA69                 db  11h
.eh_frame:000000000000EA6A                 db    0
.eh_frame:000000000000EA6B                 db    0
.eh_frame:000000000000EA6C                 db 0E4h
.eh_frame:000000000000EA6D                 db  96h
.eh_frame:000000000000EA6E                 db 0FFh
.eh_frame:000000000000EA6F                 db 0FFh
.eh_frame:000000000000EA70                 db 0B6h
.eh_frame:000000000000EA71                 db    0
.eh_frame:000000000000EA72                 db    0
.eh_frame:000000000000EA73                 db    0
.eh_frame:000000000000EA74                 db    0
.eh_frame:000000000000EA75                 db  47h ; G
.eh_frame:000000000000EA76                 db  0Eh
.eh_frame:000000000000EA77                 db 0E0h
.eh_frame:000000000000EA78                 db    1
.eh_frame:000000000000EA79                 db    2
.eh_frame:000000000000EA7A                 db 0A9h
.eh_frame:000000000000EA7B                 db  0Ah
.eh_frame:000000000000EA7C                 db  0Eh
.eh_frame:000000000000EA7D                 db    8
.eh_frame:000000000000EA7E                 db  41h ; A
.eh_frame:000000000000EA7F                 db  0Bh
.eh_frame:000000000000EA80                 db  28h ; (
.eh_frame:000000000000EA81                 db    0
.eh_frame:000000000000EA82                 db    0
.eh_frame:000000000000EA83                 db    0
.eh_frame:000000000000EA84                 db 0D4h
.eh_frame:000000000000EA85                 db  11h
.eh_frame:000000000000EA86                 db    0
.eh_frame:000000000000EA87                 db    0
.eh_frame:000000000000EA88                 db  88h
.eh_frame:000000000000EA89                 db  97h
.eh_frame:000000000000EA8A                 db 0FFh
.eh_frame:000000000000EA8B                 db 0FFh
.eh_frame:000000000000EA8C                 db  5Bh ; [
.eh_frame:000000000000EA8D                 db    0
.eh_frame:000000000000EA8E                 db    0
.eh_frame:000000000000EA8F                 db    0
.eh_frame:000000000000EA90                 db    0
.eh_frame:000000000000EA91                 db  41h ; A
.eh_frame:000000000000EA92                 db  0Eh
.eh_frame:000000000000EA93                 db  10h
.eh_frame:000000000000EA94                 db  86h
.eh_frame:000000000000EA95                 db    2
.eh_frame:000000000000EA96                 db  41h ; A
.eh_frame:000000000000EA97                 db  0Eh
.eh_frame:000000000000EA98                 db  18h
.eh_frame:000000000000EA99                 db  83h
.eh_frame:000000000000EA9A                 db    3
.eh_frame:000000000000EA9B                 db  47h ; G
.eh_frame:000000000000EA9C                 db  0Eh
.eh_frame:000000000000EA9D                 db  20h
.eh_frame:000000000000EA9E                 db  4Fh ; O
.eh_frame:000000000000EA9F                 db  0Ah
.eh_frame:000000000000EAA0                 db  0Eh
.eh_frame:000000000000EAA1                 db  18h
.eh_frame:000000000000EAA2                 db  43h ; C
.eh_frame:000000000000EAA3                 db  0Eh
.eh_frame:000000000000EAA4                 db  10h
.eh_frame:000000000000EAA5                 db  41h ; A
.eh_frame:000000000000EAA6                 db  0Eh
.eh_frame:000000000000EAA7                 db    8
.eh_frame:000000000000EAA8                 db  44h ; D
.eh_frame:000000000000EAA9                 db  0Bh
.eh_frame:000000000000EAAA                 db    0
.eh_frame:000000000000EAAB                 db    0
.eh_frame:000000000000EAAC                 db  18h
.eh_frame:000000000000EAAD                 db    0
.eh_frame:000000000000EAAE                 db    0
.eh_frame:000000000000EAAF                 db    0
.eh_frame:000000000000EAB0                 db    0
.eh_frame:000000000000EAB1                 db  12h
.eh_frame:000000000000EAB2                 db    0
.eh_frame:000000000000EAB3                 db    0
.eh_frame:000000000000EAB4                 db 0BCh
.eh_frame:000000000000EAB5                 db  97h
.eh_frame:000000000000EAB6                 db 0FFh
.eh_frame:000000000000EAB7                 db 0FFh
.eh_frame:000000000000EAB8                 db 0B1h
.eh_frame:000000000000EAB9                 db    0
.eh_frame:000000000000EABA                 db    0
.eh_frame:000000000000EABB                 db    0
.eh_frame:000000000000EABC                 db    0
.eh_frame:000000000000EABD                 db  47h ; G
.eh_frame:000000000000EABE                 db  0Eh
.eh_frame:000000000000EABF                 db 0E0h
.eh_frame:000000000000EAC0                 db    1
.eh_frame:000000000000EAC1                 db    2
.eh_frame:000000000000EAC2                 db 0A4h
.eh_frame:000000000000EAC3                 db  0Ah
.eh_frame:000000000000EAC4                 db  0Eh
.eh_frame:000000000000EAC5                 db    8
.eh_frame:000000000000EAC6                 db  41h ; A
.eh_frame:000000000000EAC7                 db  0Bh
.eh_frame:000000000000EAC8                 db  24h ; $
.eh_frame:000000000000EAC9                 db    0
.eh_frame:000000000000EACA                 db    0
.eh_frame:000000000000EACB                 db    0
.eh_frame:000000000000EACC                 db  1Ch
.eh_frame:000000000000EACD                 db  12h
.eh_frame:000000000000EACE                 db    0
.eh_frame:000000000000EACF                 db    0
.eh_frame:000000000000EAD0                 db  60h ; `
.eh_frame:000000000000EAD1                 db  98h
.eh_frame:000000000000EAD2                 db 0FFh
.eh_frame:000000000000EAD3                 db 0FFh
.eh_frame:000000000000EAD4                 db 0ACh
.eh_frame:000000000000EAD5                 db    0
.eh_frame:000000000000EAD6                 db    0
.eh_frame:000000000000EAD7                 db    0
.eh_frame:000000000000EAD8                 db    0
.eh_frame:000000000000EAD9                 db  42h ; B
.eh_frame:000000000000EADA                 db  0Eh
.eh_frame:000000000000EADB                 db  10h
.eh_frame:000000000000EADC                 db  8Dh
.eh_frame:000000000000EADD                 db    2
.eh_frame:000000000000EADE                 db  42h ; B
.eh_frame:000000000000EADF                 db  0Eh
.eh_frame:000000000000EAE0                 db  18h
.eh_frame:000000000000EAE1                 db  8Ch
.eh_frame:000000000000EAE2                 db    3
.eh_frame:000000000000EAE3                 db  44h ; D
.eh_frame:000000000000EAE4                 db  0Eh
.eh_frame:000000000000EAE5                 db  20h
.eh_frame:000000000000EAE6                 db  86h
.eh_frame:000000000000EAE7                 db    4
.eh_frame:000000000000EAE8                 db  41h ; A
.eh_frame:000000000000EAE9                 db  0Eh
.eh_frame:000000000000EAEA                 db  28h ; (
.eh_frame:000000000000EAEB                 db  83h
.eh_frame:000000000000EAEC                 db    5
.eh_frame:000000000000EAED                 db  47h ; G
.eh_frame:000000000000EAEE                 db  0Eh
.eh_frame:000000000000EAEF                 db  40h ; @
.eh_frame:000000000000EAF0                 db  4Ch ; L
.eh_frame:000000000000EAF1                 db    0
.eh_frame:000000000000EAF2                 db    0
.eh_frame:000000000000EAF3                 db    0
.eh_frame:000000000000EAF4                 db  44h ; D
.eh_frame:000000000000EAF5                 db  12h
.eh_frame:000000000000EAF6                 db    0
.eh_frame:000000000000EAF7                 db    0
.eh_frame:000000000000EAF8                 db 0E8h
.eh_frame:000000000000EAF9                 db  98h
.eh_frame:000000000000EAFA                 db 0FFh
.eh_frame:000000000000EAFB                 db 0FFh
.eh_frame:000000000000EAFC                 db  1Ch
.eh_frame:000000000000EAFD                 db    4
.eh_frame:000000000000EAFE                 db    0
.eh_frame:000000000000EAFF                 db    0
.eh_frame:000000000000EB00                 db    0
.eh_frame:000000000000EB01                 db  42h ; B
.eh_frame:000000000000EB02                 db  0Eh
.eh_frame:000000000000EB03                 db  10h
.eh_frame:000000000000EB04                 db  8Fh
.eh_frame:000000000000EB05                 db    2
.eh_frame:000000000000EB06                 db  42h ; B
.eh_frame:000000000000EB07                 db  0Eh
.eh_frame:000000000000EB08                 db  18h
.eh_frame:000000000000EB09                 db  8Eh
.eh_frame:000000000000EB0A                 db    3
.eh_frame:000000000000EB0B                 db  42h ; B
.eh_frame:000000000000EB0C                 db  0Eh
.eh_frame:000000000000EB0D                 db  20h
.eh_frame:000000000000EB0E                 db  8Dh
.eh_frame:000000000000EB0F                 db    4
.eh_frame:000000000000EB10                 db  42h ; B
.eh_frame:000000000000EB11                 db  0Eh
.eh_frame:000000000000EB12                 db  28h ; (
.eh_frame:000000000000EB13                 db  8Ch
.eh_frame:000000000000EB14                 db    5
.eh_frame:000000000000EB15                 db  41h ; A
.eh_frame:000000000000EB16                 db  0Eh
.eh_frame:000000000000EB17                 db  30h ; 0
.eh_frame:000000000000EB18                 db  86h
.eh_frame:000000000000EB19                 db    6
.eh_frame:000000000000EB1A                 db  41h ; A
.eh_frame:000000000000EB1B                 db  0Eh
.eh_frame:000000000000EB1C                 db  38h ; 8
.eh_frame:000000000000EB1D                 db  83h
.eh_frame:000000000000EB1E                 db    7
.eh_frame:000000000000EB1F                 db  44h ; D
.eh_frame:000000000000EB20                 db  0Eh
.eh_frame:000000000000EB21                 db  60h ; `
.eh_frame:000000000000EB22                 db    2
.eh_frame:000000000000EB23                 db 0E9h
.eh_frame:000000000000EB24                 db  0Ah
.eh_frame:000000000000EB25                 db  0Eh
.eh_frame:000000000000EB26                 db  38h ; 8
.eh_frame:000000000000EB27                 db  41h ; A
.eh_frame:000000000000EB28                 db  0Eh
.eh_frame:000000000000EB29                 db  30h ; 0
.eh_frame:000000000000EB2A                 db  41h ; A
.eh_frame:000000000000EB2B                 db  0Eh
.eh_frame:000000000000EB2C                 db  28h ; (
.eh_frame:000000000000EB2D                 db  42h ; B
.eh_frame:000000000000EB2E                 db  0Eh
.eh_frame:000000000000EB2F                 db  20h
.eh_frame:000000000000EB30                 db  42h ; B
.eh_frame:000000000000EB31                 db  0Eh
.eh_frame:000000000000EB32                 db  18h
.eh_frame:000000000000EB33                 db  42h ; B
.eh_frame:000000000000EB34                 db  0Eh
.eh_frame:000000000000EB35                 db  10h
.eh_frame:000000000000EB36                 db  42h ; B
.eh_frame:000000000000EB37                 db  0Eh
.eh_frame:000000000000EB38                 db    8
.eh_frame:000000000000EB39                 db  47h ; G
.eh_frame:000000000000EB3A                 db  0Bh
.eh_frame:000000000000EB3B                 db    0
.eh_frame:000000000000EB3C                 db    0
.eh_frame:000000000000EB3D                 db    0
.eh_frame:000000000000EB3E                 db    0
.eh_frame:000000000000EB3F                 db    0
.eh_frame:000000000000EB40                 db  34h ; 4
.eh_frame:000000000000EB41                 db    0
.eh_frame:000000000000EB42                 db    0
.eh_frame:000000000000EB43                 db    0
.eh_frame:000000000000EB44                 db  94h
.eh_frame:000000000000EB45                 db  12h
.eh_frame:000000000000EB46                 db    0
.eh_frame:000000000000EB47                 db    0
.eh_frame:000000000000EB48                 db 0B8h
.eh_frame:000000000000EB49                 db  9Ch
.eh_frame:000000000000EB4A                 db 0FFh
.eh_frame:000000000000EB4B                 db 0FFh
.eh_frame:000000000000EB4C                 db  7Bh ; {
.eh_frame:000000000000EB4D                 db    0
.eh_frame:000000000000EB4E                 db    0
.eh_frame:000000000000EB4F                 db    0
.eh_frame:000000000000EB50                 db    0
.eh_frame:000000000000EB51                 db  42h ; B
.eh_frame:000000000000EB52                 db  0Eh
.eh_frame:000000000000EB53                 db  10h
.eh_frame:000000000000EB54                 db  8Ch
.eh_frame:000000000000EB55                 db    2
.eh_frame:000000000000EB56                 db  41h ; A
.eh_frame:000000000000EB57                 db  0Eh
.eh_frame:000000000000EB58                 db  18h
.eh_frame:000000000000EB59                 db  86h
.eh_frame:000000000000EB5A                 db    3
.eh_frame:000000000000EB5B                 db  41h ; A
.eh_frame:000000000000EB5C                 db  0Eh
.eh_frame:000000000000EB5D                 db  20h
.eh_frame:000000000000EB5E                 db  83h
.eh_frame:000000000000EB5F                 db    4
.eh_frame:000000000000EB60                 db  7Dh ; }
.eh_frame:000000000000EB61                 db  0Ah
.eh_frame:000000000000EB62                 db  0Eh
.eh_frame:000000000000EB63                 db  18h
.eh_frame:000000000000EB64                 db  41h ; A
.eh_frame:000000000000EB65                 db  0Eh
.eh_frame:000000000000EB66                 db  10h
.eh_frame:000000000000EB67                 db  42h ; B
.eh_frame:000000000000EB68                 db  0Eh
.eh_frame:000000000000EB69                 db    8
.eh_frame:000000000000EB6A                 db  44h ; D
.eh_frame:000000000000EB6B                 db  0Bh
.eh_frame:000000000000EB6C                 db  60h ; `
.eh_frame:000000000000EB6D                 db  0Ah
.eh_frame:000000000000EB6E                 db  0Eh
.eh_frame:000000000000EB6F                 db  18h
.eh_frame:000000000000EB70                 db  41h ; A
.eh_frame:000000000000EB71                 db  0Eh
.eh_frame:000000000000EB72                 db  10h
.eh_frame:000000000000EB73                 db  42h ; B
.eh_frame:000000000000EB74                 db  0Eh
.eh_frame:000000000000EB75                 db    8
.eh_frame:000000000000EB76                 db  45h ; E
.eh_frame:000000000000EB77                 db  0Bh
.eh_frame:000000000000EB78                 db  1Ch
.eh_frame:000000000000EB79                 db    0
.eh_frame:000000000000EB7A                 db    0
.eh_frame:000000000000EB7B                 db    0
.eh_frame:000000000000EB7C                 db 0CCh
.eh_frame:000000000000EB7D                 db  12h
.eh_frame:000000000000EB7E                 db    0
.eh_frame:000000000000EB7F                 db    0
.eh_frame:000000000000EB80                 db    0
.eh_frame:000000000000EB81                 db  9Dh
.eh_frame:000000000000EB82                 db 0FFh
.eh_frame:000000000000EB83                 db 0FFh
.eh_frame:000000000000EB84                 db  40h ; @
.eh_frame:000000000000EB85                 db    0
.eh_frame:000000000000EB86                 db    0
.eh_frame:000000000000EB87                 db    0
.eh_frame:000000000000EB88                 db    0
.eh_frame:000000000000EB89                 db  44h ; D
.eh_frame:000000000000EB8A                 db  0Eh
.eh_frame:000000000000EB8B                 db  10h
.eh_frame:000000000000EB8C                 db  83h
.eh_frame:000000000000EB8D                 db    2
.eh_frame:000000000000EB8E                 db  5Ah ; Z
.eh_frame:000000000000EB8F                 db  0Ah
.eh_frame:000000000000EB90                 db  0Eh
.eh_frame:000000000000EB91                 db    8
.eh_frame:000000000000EB92                 db  4Ah ; J
.eh_frame:000000000000EB93                 db  0Bh
.eh_frame:000000000000EB94                 db  53h ; S
.eh_frame:000000000000EB95                 db  0Eh
.eh_frame:000000000000EB96                 db    8
.eh_frame:000000000000EB97                 db    0
.eh_frame:000000000000EB98                 db  2Ch ; ,
.eh_frame:000000000000EB99                 db    0
.eh_frame:000000000000EB9A                 db    0
.eh_frame:000000000000EB9B                 db    0
.eh_frame:000000000000EB9C                 db 0ECh
.eh_frame:000000000000EB9D                 db  12h
.eh_frame:000000000000EB9E                 db    0
.eh_frame:000000000000EB9F                 db    0
.eh_frame:000000000000EBA0                 db  20h
.eh_frame:000000000000EBA1                 db  9Dh
.eh_frame:000000000000EBA2                 db 0FFh
.eh_frame:000000000000EBA3                 db 0FFh
.eh_frame:000000000000EBA4                 db  57h ; W
.eh_frame:000000000000EBA5                 db    0
.eh_frame:000000000000EBA6                 db    0
.eh_frame:000000000000EBA7                 db    0
.eh_frame:000000000000EBA8                 db    0
.eh_frame:000000000000EBA9                 db  63h ; c
.eh_frame:000000000000EBAA                 db  0Eh
.eh_frame:000000000000EBAB                 db  10h
.eh_frame:000000000000EBAC                 db  8Ch
.eh_frame:000000000000EBAD                 db    2
.eh_frame:000000000000EBAE                 db  41h ; A
.eh_frame:000000000000EBAF                 db  0Eh
.eh_frame:000000000000EBB0                 db  18h
.eh_frame:000000000000EBB1                 db  86h
.eh_frame:000000000000EBB2                 db    3
.eh_frame:000000000000EBB3                 db  44h ; D
.eh_frame:000000000000EBB4                 db  0Eh
.eh_frame:000000000000EBB5                 db  20h
.eh_frame:000000000000EBB6                 db  83h
.eh_frame:000000000000EBB7                 db    4
.eh_frame:000000000000EBB8                 db  6Bh ; k
.eh_frame:000000000000EBB9                 db  0Eh
.eh_frame:000000000000EBBA                 db  18h
.eh_frame:000000000000EBBB                 db  41h ; A
.eh_frame:000000000000EBBC                 db  0Eh
.eh_frame:000000000000EBBD                 db  10h
.eh_frame:000000000000EBBE                 db  42h ; B
.eh_frame:000000000000EBBF                 db  0Eh
.eh_frame:000000000000EBC0                 db    8
.eh_frame:000000000000EBC1                 db    0
.eh_frame:000000000000EBC2                 db    0
.eh_frame:000000000000EBC3                 db    0
.eh_frame:000000000000EBC4                 db    0
.eh_frame:000000000000EBC5                 db    0
.eh_frame:000000000000EBC6                 db    0
.eh_frame:000000000000EBC7                 db    0
.eh_frame:000000000000EBC8                 db  3Ch ; <
.eh_frame:000000000000EBC9                 db    0
.eh_frame:000000000000EBCA                 db    0
.eh_frame:000000000000EBCB                 db    0
.eh_frame:000000000000EBCC                 db  1Ch
.eh_frame:000000000000EBCD                 db  13h
.eh_frame:000000000000EBCE                 db    0
.eh_frame:000000000000EBCF                 db    0
.eh_frame:000000000000EBD0                 db  50h ; P
.eh_frame:000000000000EBD1                 db  9Dh
.eh_frame:000000000000EBD2                 db 0FFh
.eh_frame:000000000000EBD3                 db 0FFh
.eh_frame:000000000000EBD4                 db  83h
.eh_frame:000000000000EBD5                 db    0
.eh_frame:000000000000EBD6                 db    0
.eh_frame:000000000000EBD7                 db    0
.eh_frame:000000000000EBD8                 db    0
.eh_frame:000000000000EBD9                 db  42h ; B
.eh_frame:000000000000EBDA                 db  0Eh
.eh_frame:000000000000EBDB                 db  10h
.eh_frame:000000000000EBDC                 db  8Dh
.eh_frame:000000000000EBDD                 db    2
.eh_frame:000000000000EBDE                 db  42h ; B
.eh_frame:000000000000EBDF                 db  0Eh
.eh_frame:000000000000EBE0                 db  18h
.eh_frame:000000000000EBE1                 db  8Ch
.eh_frame:000000000000EBE2                 db    3
.eh_frame:000000000000EBE3                 db  44h ; D
.eh_frame:000000000000EBE4                 db  0Eh
.eh_frame:000000000000EBE5                 db  20h
.eh_frame:000000000000EBE6                 db  86h
.eh_frame:000000000000EBE7                 db    4
.eh_frame:000000000000EBE8                 db  41h ; A
.eh_frame:000000000000EBE9                 db  0Eh
.eh_frame:000000000000EBEA                 db  28h ; (
.eh_frame:000000000000EBEB                 db  83h
.eh_frame:000000000000EBEC                 db    5
.eh_frame:000000000000EBED                 db  4Ah ; J
.eh_frame:000000000000EBEE                 db  0Eh
.eh_frame:000000000000EBEF                 db  40h ; @
.eh_frame:000000000000EBF0                 db    2
.eh_frame:000000000000EBF1                 db  64h ; d
.eh_frame:000000000000EBF2                 db  0Ah
.eh_frame:000000000000EBF3                 db  0Eh
.eh_frame:000000000000EBF4                 db  28h ; (
.eh_frame:000000000000EBF5                 db  41h ; A
.eh_frame:000000000000EBF6                 db  0Eh
.eh_frame:000000000000EBF7                 db  20h
.eh_frame:000000000000EBF8                 db  41h ; A
.eh_frame:000000000000EBF9                 db  0Eh
.eh_frame:000000000000EBFA                 db  18h
.eh_frame:000000000000EBFB                 db  42h ; B
.eh_frame:000000000000EBFC                 db  0Eh
.eh_frame:000000000000EBFD                 db  10h
.eh_frame:000000000000EBFE                 db  42h ; B
.eh_frame:000000000000EBFF                 db  0Eh
.eh_frame:000000000000EC00                 db    8
.eh_frame:000000000000EC01                 db  41h ; A
.eh_frame:000000000000EC02                 db  0Bh
.eh_frame:000000000000EC03                 db    0
.eh_frame:000000000000EC04                 db    0
.eh_frame:000000000000EC05                 db    0
.eh_frame:000000000000EC06                 db    0
.eh_frame:000000000000EC07                 db    0
.eh_frame:000000000000EC08                 db  3Ch ; <
.eh_frame:000000000000EC09                 db    0
.eh_frame:000000000000EC0A                 db    0
.eh_frame:000000000000EC0B                 db    0
.eh_frame:000000000000EC0C                 db  5Ch ; \
.eh_frame:000000000000EC0D                 db  13h
.eh_frame:000000000000EC0E                 db    0
.eh_frame:000000000000EC0F                 db    0
.eh_frame:000000000000EC10                 db 0A0h
.eh_frame:000000000000EC11                 db  9Dh
.eh_frame:000000000000EC12                 db 0FFh
.eh_frame:000000000000EC13                 db 0FFh
.eh_frame:000000000000EC14                 db 0F2h
.eh_frame:000000000000EC15                 db    0
.eh_frame:000000000000EC16                 db    0
.eh_frame:000000000000EC17                 db    0
.eh_frame:000000000000EC18                 db    0
.eh_frame:000000000000EC19                 db  42h ; B
.eh_frame:000000000000EC1A                 db  0Eh
.eh_frame:000000000000EC1B                 db  10h
.eh_frame:000000000000EC1C                 db  8Dh
.eh_frame:000000000000EC1D                 db    2
.eh_frame:000000000000EC1E                 db  42h ; B
.eh_frame:000000000000EC1F                 db  0Eh
.eh_frame:000000000000EC20                 db  18h
.eh_frame:000000000000EC21                 db  8Ch
.eh_frame:000000000000EC22                 db    3
.eh_frame:000000000000EC23                 db  44h ; D
.eh_frame:000000000000EC24                 db  0Eh
.eh_frame:000000000000EC25                 db  20h
.eh_frame:000000000000EC26                 db  86h
.eh_frame:000000000000EC27                 db    4
.eh_frame:000000000000EC28                 db  41h ; A
.eh_frame:000000000000EC29                 db  0Eh
.eh_frame:000000000000EC2A                 db  28h ; (
.eh_frame:000000000000EC2B                 db  83h
.eh_frame:000000000000EC2C                 db    5
.eh_frame:000000000000EC2D                 db  4Ah ; J
.eh_frame:000000000000EC2E                 db  0Eh
.eh_frame:000000000000EC2F                 db 0A0h
.eh_frame:000000000000EC30                 db  10h
.eh_frame:000000000000EC31                 db    2
.eh_frame:000000000000EC32                 db  8Fh
.eh_frame:000000000000EC33                 db  0Ah
.eh_frame:000000000000EC34                 db  0Eh
.eh_frame:000000000000EC35                 db  28h ; (
.eh_frame:000000000000EC36                 db  41h ; A
.eh_frame:000000000000EC37                 db  0Eh
.eh_frame:000000000000EC38                 db  20h
.eh_frame:000000000000EC39                 db  41h ; A
.eh_frame:000000000000EC3A                 db  0Eh
.eh_frame:000000000000EC3B                 db  18h
.eh_frame:000000000000EC3C                 db  42h ; B
.eh_frame:000000000000EC3D                 db  0Eh
.eh_frame:000000000000EC3E                 db  10h
.eh_frame:000000000000EC3F                 db  42h ; B
.eh_frame:000000000000EC40                 db  0Eh
.eh_frame:000000000000EC41                 db    8
.eh_frame:000000000000EC42                 db  48h ; H
.eh_frame:000000000000EC43                 db  0Bh
.eh_frame:000000000000EC44                 db    0
.eh_frame:000000000000EC45                 db    0
.eh_frame:000000000000EC46                 db    0
.eh_frame:000000000000EC47                 db    0
.eh_frame:000000000000EC48                 db  14h
.eh_frame:000000000000EC49                 db    0
.eh_frame:000000000000EC4A                 db    0
.eh_frame:000000000000EC4B                 db    0
.eh_frame:000000000000EC4C                 db  9Ch
.eh_frame:000000000000EC4D                 db  13h
.eh_frame:000000000000EC4E                 db    0
.eh_frame:000000000000EC4F                 db    0
.eh_frame:000000000000EC50                 db  60h ; `
.eh_frame:000000000000EC51                 db  9Eh
.eh_frame:000000000000EC52                 db 0FFh
.eh_frame:000000000000EC53                 db 0FFh
.eh_frame:000000000000EC54                 db  12h
.eh_frame:000000000000EC55                 db    0
.eh_frame:000000000000EC56                 db    0
.eh_frame:000000000000EC57                 db    0
.eh_frame:000000000000EC58                 db    0
.eh_frame:000000000000EC59                 db    0
.eh_frame:000000000000EC5A                 db    0
.eh_frame:000000000000EC5B                 db    0
.eh_frame:000000000000EC5C                 db    0
.eh_frame:000000000000EC5D                 db    0
.eh_frame:000000000000EC5E                 db    0
.eh_frame:000000000000EC5F                 db    0
.eh_frame:000000000000EC60                 db  4Ch ; L
.eh_frame:000000000000EC61                 db    0
.eh_frame:000000000000EC62                 db    0
.eh_frame:000000000000EC63                 db    0
.eh_frame:000000000000EC64                 db 0B4h
.eh_frame:000000000000EC65                 db  13h
.eh_frame:000000000000EC66                 db    0
.eh_frame:000000000000EC67                 db    0
.eh_frame:000000000000EC68                 db  68h ; h
.eh_frame:000000000000EC69                 db  9Eh
.eh_frame:000000000000EC6A                 db 0FFh
.eh_frame:000000000000EC6B                 db 0FFh
.eh_frame:000000000000EC6C                 db  7Dh ; }
.eh_frame:000000000000EC6D                 db    0
.eh_frame:000000000000EC6E                 db    0
.eh_frame:000000000000EC6F                 db    0
.eh_frame:000000000000EC70                 db    0
.eh_frame:000000000000EC71                 db  42h ; B
.eh_frame:000000000000EC72                 db  0Eh
.eh_frame:000000000000EC73                 db  10h
.eh_frame:000000000000EC74                 db  8Ch
.eh_frame:000000000000EC75                 db    2
.eh_frame:000000000000EC76                 db  41h ; A
.eh_frame:000000000000EC77                 db  0Eh
.eh_frame:000000000000EC78                 db  18h
.eh_frame:000000000000EC79                 db  86h
.eh_frame:000000000000EC7A                 db    3
.eh_frame:000000000000EC7B                 db  44h ; D
.eh_frame:000000000000EC7C                 db  0Eh
.eh_frame:000000000000EC7D                 db  20h
.eh_frame:000000000000EC7E                 db  83h
.eh_frame:000000000000EC7F                 db    4
.eh_frame:000000000000EC80                 db  69h ; i
.eh_frame:000000000000EC81                 db  0Ah
.eh_frame:000000000000EC82                 db  0Eh
.eh_frame:000000000000EC83                 db  18h
.eh_frame:000000000000EC84                 db  41h ; A
.eh_frame:000000000000EC85                 db  0Eh
.eh_frame:000000000000EC86                 db  10h
.eh_frame:000000000000EC87                 db  42h ; B
.eh_frame:000000000000EC88                 db  0Eh
.eh_frame:000000000000EC89                 db    8
.eh_frame:000000000000EC8A                 db  45h ; E
.eh_frame:000000000000EC8B                 db  0Bh
.eh_frame:000000000000EC8C                 db  55h ; U
.eh_frame:000000000000EC8D                 db  0Ah
.eh_frame:000000000000EC8E                 db  0Eh
.eh_frame:000000000000EC8F                 db  18h
.eh_frame:000000000000EC90                 db  41h ; A
.eh_frame:000000000000EC91                 db  0Eh
.eh_frame:000000000000EC92                 db  10h
.eh_frame:000000000000EC93                 db  42h ; B
.eh_frame:000000000000EC94                 db  0Eh
.eh_frame:000000000000EC95                 db    8
.eh_frame:000000000000EC96                 db  48h ; H
.eh_frame:000000000000EC97                 db  0Bh
.eh_frame:000000000000EC98                 db  41h ; A
.eh_frame:000000000000EC99                 db  0Ah
.eh_frame:000000000000EC9A                 db  0Eh
.eh_frame:000000000000EC9B                 db  18h
.eh_frame:000000000000EC9C                 db  46h ; F
.eh_frame:000000000000EC9D                 db  0Eh
.eh_frame:000000000000EC9E                 db  10h
.eh_frame:000000000000EC9F                 db  42h ; B
.eh_frame:000000000000ECA0                 db  0Eh
.eh_frame:000000000000ECA1                 db    8
.eh_frame:000000000000ECA2                 db  47h ; G
.eh_frame:000000000000ECA3                 db  0Bh
.eh_frame:000000000000ECA4                 db  49h ; I
.eh_frame:000000000000ECA5                 db  0Eh
.eh_frame:000000000000ECA6                 db  18h
.eh_frame:000000000000ECA7                 db  41h ; A
.eh_frame:000000000000ECA8                 db  0Eh
.eh_frame:000000000000ECA9                 db  10h
.eh_frame:000000000000ECAA                 db  42h ; B
.eh_frame:000000000000ECAB                 db  0Eh
.eh_frame:000000000000ECAC                 db    8
.eh_frame:000000000000ECAD                 db    0
.eh_frame:000000000000ECAE                 db    0
.eh_frame:000000000000ECAF                 db    0
.eh_frame:000000000000ECB0                 db  1Ch
.eh_frame:000000000000ECB1                 db    0
.eh_frame:000000000000ECB2                 db    0
.eh_frame:000000000000ECB3                 db    0
.eh_frame:000000000000ECB4                 db    4
.eh_frame:000000000000ECB5                 db  14h
.eh_frame:000000000000ECB6                 db    0
.eh_frame:000000000000ECB7                 db    0
.eh_frame:000000000000ECB8                 db  98h
.eh_frame:000000000000ECB9                 db  9Eh
.eh_frame:000000000000ECBA                 db 0FFh
.eh_frame:000000000000ECBB                 db 0FFh
.eh_frame:000000000000ECBC                 db  60h ; `
.eh_frame:000000000000ECBD                 db    0
.eh_frame:000000000000ECBE                 db    0
.eh_frame:000000000000ECBF                 db    0
.eh_frame:000000000000ECC0                 db    0
.eh_frame:000000000000ECC1                 db  44h ; D
.eh_frame:000000000000ECC2                 db  0Eh
.eh_frame:000000000000ECC3                 db  10h
.eh_frame:000000000000ECC4                 db  75h ; u
.eh_frame:000000000000ECC5                 db  0Ah
.eh_frame:000000000000ECC6                 db  0Eh
.eh_frame:000000000000ECC7                 db    8
.eh_frame:000000000000ECC8                 db  47h ; G
.eh_frame:000000000000ECC9                 db  0Bh
.eh_frame:000000000000ECCA                 db  5Fh ; _
.eh_frame:000000000000ECCB                 db  0Eh
.eh_frame:000000000000ECCC                 db    8
.eh_frame:000000000000ECCD                 db    0
.eh_frame:000000000000ECCE                 db    0
.eh_frame:000000000000ECCF                 db    0
.eh_frame:000000000000ECD0                 db  1Ch
.eh_frame:000000000000ECD1                 db    0
.eh_frame:000000000000ECD2                 db    0
.eh_frame:000000000000ECD3                 db    0
.eh_frame:000000000000ECD4                 db  24h ; $
.eh_frame:000000000000ECD5                 db  14h
.eh_frame:000000000000ECD6                 db    0
.eh_frame:000000000000ECD7                 db    0
.eh_frame:000000000000ECD8                 db 0D8h
.eh_frame:000000000000ECD9                 db  9Eh
.eh_frame:000000000000ECDA                 db 0FFh
.eh_frame:000000000000ECDB                 db 0FFh
.eh_frame:000000000000ECDC                 db  3Ch ; <
.eh_frame:000000000000ECDD                 db    0
.eh_frame:000000000000ECDE                 db    0
.eh_frame:000000000000ECDF                 db    0
.eh_frame:000000000000ECE0                 db    0
.eh_frame:000000000000ECE1                 db  44h ; D
.eh_frame:000000000000ECE2                 db  0Eh
.eh_frame:000000000000ECE3                 db  10h
.eh_frame:000000000000ECE4                 db  61h ; a
.eh_frame:000000000000ECE5                 db  0Ah
.eh_frame:000000000000ECE6                 db  0Eh
.eh_frame:000000000000ECE7                 db    8
.eh_frame:000000000000ECE8                 db  4Bh ; K
.eh_frame:000000000000ECE9                 db  0Bh
.eh_frame:000000000000ECEA                 db  4Bh ; K
.eh_frame:000000000000ECEB                 db  0Eh
.eh_frame:000000000000ECEC                 db    8
.eh_frame:000000000000ECED                 db    0
.eh_frame:000000000000ECEE                 db    0
.eh_frame:000000000000ECEF                 db    0
.eh_frame:000000000000ECF0                 db  14h
.eh_frame:000000000000ECF1                 db    0
.eh_frame:000000000000ECF2                 db    0
.eh_frame:000000000000ECF3                 db    0
.eh_frame:000000000000ECF4                 db  44h ; D
.eh_frame:000000000000ECF5                 db  14h
.eh_frame:000000000000ECF6                 db    0
.eh_frame:000000000000ECF7                 db    0
.eh_frame:000000000000ECF8                 db 0F8h
.eh_frame:000000000000ECF9                 db  9Eh
.eh_frame:000000000000ECFA                 db 0FFh
.eh_frame:000000000000ECFB                 db 0FFh
.eh_frame:000000000000ECFC                 db    4
.eh_frame:000000000000ECFD                 db    0
.eh_frame:000000000000ECFE                 db    0
.eh_frame:000000000000ECFF                 db    0
.eh_frame:000000000000ED00                 db    0
.eh_frame:000000000000ED01                 db    0
.eh_frame:000000000000ED02                 db    0
.eh_frame:000000000000ED03                 db    0
.eh_frame:000000000000ED04                 db    0
.eh_frame:000000000000ED05                 db    0
.eh_frame:000000000000ED06                 db    0
.eh_frame:000000000000ED07                 db    0
.eh_frame:000000000000ED08                 db  2Ch ; ,
.eh_frame:000000000000ED09                 db    0
.eh_frame:000000000000ED0A                 db    0
.eh_frame:000000000000ED0B                 db    0
.eh_frame:000000000000ED0C                 db  5Ch ; \
.eh_frame:000000000000ED0D                 db  14h
.eh_frame:000000000000ED0E                 db    0
.eh_frame:000000000000ED0F                 db    0
.eh_frame:000000000000ED10                 db 0F0h
.eh_frame:000000000000ED11                 db  9Eh
.eh_frame:000000000000ED12                 db 0FFh
.eh_frame:000000000000ED13                 db 0FFh
.eh_frame:000000000000ED14                 db  1Fh
.eh_frame:000000000000ED15                 db  11h
.eh_frame:000000000000ED16                 db    0
.eh_frame:000000000000ED17                 db    0
.eh_frame:000000000000ED18                 db    0
.eh_frame:000000000000ED19                 db  41h ; A
.eh_frame:000000000000ED1A                 db  0Eh
.eh_frame:000000000000ED1B                 db  10h
.eh_frame:000000000000ED1C                 db  86h
.eh_frame:000000000000ED1D                 db    2
.eh_frame:000000000000ED1E                 db  43h ; C
.eh_frame:000000000000ED1F                 db  0Dh
.eh_frame:000000000000ED20                 db    6
.eh_frame:000000000000ED21                 db  48h ; H
.eh_frame:000000000000ED22                 db  8Fh
.eh_frame:000000000000ED23                 db    3
.eh_frame:000000000000ED24                 db  8Eh
.eh_frame:000000000000ED25                 db    4
.eh_frame:000000000000ED26                 db  8Dh
.eh_frame:000000000000ED27                 db    5
.eh_frame:000000000000ED28                 db  8Ch
.eh_frame:000000000000ED29                 db    6
.eh_frame:000000000000ED2A                 db  48h ; H
.eh_frame:000000000000ED2B                 db  83h
.eh_frame:000000000000ED2C                 db    7
.eh_frame:000000000000ED2D                 db    3
.eh_frame:000000000000ED2E                 db 0EFh
.eh_frame:000000000000ED2F                 db    1
.eh_frame:000000000000ED30                 db  0Ah
.eh_frame:000000000000ED31                 db  0Ch
.eh_frame:000000000000ED32                 db    7
.eh_frame:000000000000ED33                 db    8
.eh_frame:000000000000ED34                 db  45h ; E
.eh_frame:000000000000ED35                 db  0Bh
.eh_frame:000000000000ED36                 db    0
.eh_frame:000000000000ED37                 db    0
.eh_frame:000000000000ED38                 db  14h
.eh_frame:000000000000ED39                 db    0
.eh_frame:000000000000ED3A                 db    0
.eh_frame:000000000000ED3B                 db    0
.eh_frame:000000000000ED3C                 db  8Ch
.eh_frame:000000000000ED3D                 db  14h
.eh_frame:000000000000ED3E                 db    0
.eh_frame:000000000000ED3F                 db    0
.eh_frame:000000000000ED40                 db 0E0h
.eh_frame:000000000000ED41                 db 0AFh
.eh_frame:000000000000ED42                 db 0FFh
.eh_frame:000000000000ED43                 db 0FFh
.eh_frame:000000000000ED44                 db 0FEh
.eh_frame:000000000000ED45                 db    1
.eh_frame:000000000000ED46                 db    0
.eh_frame:000000000000ED47                 db    0
.eh_frame:000000000000ED48                 db    0
.eh_frame:000000000000ED49                 db    0
.eh_frame:000000000000ED4A                 db    0
.eh_frame:000000000000ED4B                 db    0
.eh_frame:000000000000ED4C                 db    0
.eh_frame:000000000000ED4D                 db    0
.eh_frame:000000000000ED4E                 db    0
.eh_frame:000000000000ED4F                 db    0
.eh_frame:000000000000ED50                 db  4Ch ; L
.eh_frame:000000000000ED51                 db    0
.eh_frame:000000000000ED52                 db    0
.eh_frame:000000000000ED53                 db    0
.eh_frame:000000000000ED54                 db 0A4h
.eh_frame:000000000000ED55                 db  14h
.eh_frame:000000000000ED56                 db    0
.eh_frame:000000000000ED57                 db    0
.eh_frame:000000000000ED58                 db 0C8h
.eh_frame:000000000000ED59                 db 0B1h
.eh_frame:000000000000ED5A                 db 0FFh
.eh_frame:000000000000ED5B                 db 0FFh
.eh_frame:000000000000ED5C                 db 0ECh
.eh_frame:000000000000ED5D                 db  0Ch
.eh_frame:000000000000ED5E                 db    0
.eh_frame:000000000000ED5F                 db    0
.eh_frame:000000000000ED60                 db    0
.eh_frame:000000000000ED61                 db  42h ; B
.eh_frame:000000000000ED62                 db  0Eh
.eh_frame:000000000000ED63                 db  10h
.eh_frame:000000000000ED64                 db  8Fh
.eh_frame:000000000000ED65                 db    2
.eh_frame:000000000000ED66                 db  42h ; B
.eh_frame:000000000000ED67                 db  0Eh
.eh_frame:000000000000ED68                 db  18h
.eh_frame:000000000000ED69                 db  8Eh
.eh_frame:000000000000ED6A                 db    3
.eh_frame:000000000000ED6B                 db  46h ; F
.eh_frame:000000000000ED6C                 db  0Eh
.eh_frame:000000000000ED6D                 db  20h
.eh_frame:000000000000ED6E                 db  8Dh
.eh_frame:000000000000ED6F                 db    4
.eh_frame:000000000000ED70                 db  42h ; B
.eh_frame:000000000000ED71                 db  0Eh
.eh_frame:000000000000ED72                 db  28h ; (
.eh_frame:000000000000ED73                 db  8Ch
.eh_frame:000000000000ED74                 db    5
.eh_frame:000000000000ED75                 db  45h ; E
.eh_frame:000000000000ED76                 db  0Eh
.eh_frame:000000000000ED77                 db  30h ; 0
.eh_frame:000000000000ED78                 db  86h
.eh_frame:000000000000ED79                 db    6
.eh_frame:000000000000ED7A                 db  41h ; A
.eh_frame:000000000000ED7B                 db  0Eh
.eh_frame:000000000000ED7C                 db  38h ; 8
.eh_frame:000000000000ED7D                 db  83h
.eh_frame:000000000000ED7E                 db    7
.eh_frame:000000000000ED7F                 db  52h ; R
.eh_frame:000000000000ED80                 db  0Eh
.eh_frame:000000000000ED81                 db  90h
.eh_frame:000000000000ED82                 db    1
.eh_frame:000000000000ED83                 db    2
.eh_frame:000000000000ED84                 db  82h
.eh_frame:000000000000ED85                 db  0Ah
.eh_frame:000000000000ED86                 db  0Eh
.eh_frame:000000000000ED87                 db  38h ; 8
.eh_frame:000000000000ED88                 db  41h ; A
.eh_frame:000000000000ED89                 db  0Eh
.eh_frame:000000000000ED8A                 db  30h ; 0
.eh_frame:000000000000ED8B                 db  41h ; A
.eh_frame:000000000000ED8C                 db  0Eh
.eh_frame:000000000000ED8D                 db  28h ; (
.eh_frame:000000000000ED8E                 db  42h ; B
.eh_frame:000000000000ED8F                 db  0Eh
.eh_frame:000000000000ED90                 db  20h
.eh_frame:000000000000ED91                 db  42h ; B
.eh_frame:000000000000ED92                 db  0Eh
.eh_frame:000000000000ED93                 db  18h
.eh_frame:000000000000ED94                 db  42h ; B
.eh_frame:000000000000ED95                 db  0Eh
.eh_frame:000000000000ED96                 db  10h
.eh_frame:000000000000ED97                 db  42h ; B
.eh_frame:000000000000ED98                 db  0Eh
.eh_frame:000000000000ED99                 db    8
.eh_frame:000000000000ED9A                 db  48h ; H
.eh_frame:000000000000ED9B                 db  0Bh
.eh_frame:000000000000ED9C                 db    0
.eh_frame:000000000000ED9D                 db    0
.eh_frame:000000000000ED9E                 db    0
.eh_frame:000000000000ED9F                 db    0
.eh_frame:000000000000EDA0                 db  44h ; D
.eh_frame:000000000000EDA1                 db    0
.eh_frame:000000000000EDA2                 db    0
.eh_frame:000000000000EDA3                 db    0
.eh_frame:000000000000EDA4                 db 0F4h
.eh_frame:000000000000EDA5                 db  14h
.eh_frame:000000000000EDA6                 db    0
.eh_frame:000000000000EDA7                 db    0
.eh_frame:000000000000EDA8                 db  68h ; h
.eh_frame:000000000000EDA9                 db 0BEh
.eh_frame:000000000000EDAA                 db 0FFh
.eh_frame:000000000000EDAB                 db 0FFh
.eh_frame:000000000000EDAC                 db  65h ; e
.eh_frame:000000000000EDAD                 db    0
.eh_frame:000000000000EDAE                 db    0
.eh_frame:000000000000EDAF                 db    0
.eh_frame:000000000000EDB0                 db    0
.eh_frame:000000000000EDB1                 db  42h ; B
.eh_frame:000000000000EDB2                 db  0Eh
.eh_frame:000000000000EDB3                 db  10h
.eh_frame:000000000000EDB4                 db  8Fh
.eh_frame:000000000000EDB5                 db    2
.eh_frame:000000000000EDB6                 db  42h ; B
.eh_frame:000000000000EDB7                 db  0Eh
.eh_frame:000000000000EDB8                 db  18h
.eh_frame:000000000000EDB9                 db  8Eh
.eh_frame:000000000000EDBA                 db    3
.eh_frame:000000000000EDBB                 db  45h ; E
.eh_frame:000000000000EDBC                 db  0Eh
.eh_frame:000000000000EDBD                 db  20h
.eh_frame:000000000000EDBE                 db  8Dh
.eh_frame:000000000000EDBF                 db    4
.eh_frame:000000000000EDC0                 db  42h ; B
.eh_frame:000000000000EDC1                 db  0Eh
.eh_frame:000000000000EDC2                 db  28h ; (
.eh_frame:000000000000EDC3                 db  8Ch
.eh_frame:000000000000EDC4                 db    5
.eh_frame:000000000000EDC5                 db  48h ; H
.eh_frame:000000000000EDC6                 db  0Eh
.eh_frame:000000000000EDC7                 db  30h ; 0
.eh_frame:000000000000EDC8                 db  86h
.eh_frame:000000000000EDC9                 db    6
.eh_frame:000000000000EDCA                 db  48h ; H
.eh_frame:000000000000EDCB                 db  0Eh
.eh_frame:000000000000EDCC                 db  38h ; 8
.eh_frame:000000000000EDCD                 db  83h
.eh_frame:000000000000EDCE                 db    7
.eh_frame:000000000000EDCF                 db  4Dh ; M
.eh_frame:000000000000EDD0                 db  0Eh
.eh_frame:000000000000EDD1                 db  40h ; @
.eh_frame:000000000000EDD2                 db  72h ; r
.eh_frame:000000000000EDD3                 db  0Eh
.eh_frame:000000000000EDD4                 db  38h ; 8
.eh_frame:000000000000EDD5                 db  41h ; A
.eh_frame:000000000000EDD6                 db  0Eh
.eh_frame:000000000000EDD7                 db  30h ; 0
.eh_frame:000000000000EDD8                 db  41h ; A
.eh_frame:000000000000EDD9                 db  0Eh
.eh_frame:000000000000EDDA                 db  28h ; (
.eh_frame:000000000000EDDB                 db  42h ; B
.eh_frame:000000000000EDDC                 db  0Eh
.eh_frame:000000000000EDDD                 db  20h
.eh_frame:000000000000EDDE                 db  42h ; B
.eh_frame:000000000000EDDF                 db  0Eh
.eh_frame:000000000000EDE0                 db  18h
.eh_frame:000000000000EDE1                 db  42h ; B
.eh_frame:000000000000EDE2                 db  0Eh
.eh_frame:000000000000EDE3                 db  10h
.eh_frame:000000000000EDE4                 db  42h ; B
.eh_frame:000000000000EDE5                 db  0Eh
.eh_frame:000000000000EDE6                 db    8
.eh_frame:000000000000EDE7                 db    0
.eh_frame:000000000000EDE8                 db  14h
.eh_frame:000000000000EDE9                 db    0
.eh_frame:000000000000EDEA                 db    0
.eh_frame:000000000000EDEB                 db    0
.eh_frame:000000000000EDEC                 db  3Ch ; <
.eh_frame:000000000000EDED                 db  15h
.eh_frame:000000000000EDEE                 db    0
.eh_frame:000000000000EDEF                 db    0
.eh_frame:000000000000EDF0                 db  90h
.eh_frame:000000000000EDF1                 db 0BEh
.eh_frame:000000000000EDF2                 db 0FFh
.eh_frame:000000000000EDF3                 db 0FFh
.eh_frame:000000000000EDF4                 db    2
.eh_frame:000000000000EDF5                 db    0
.eh_frame:000000000000EDF6                 db    0
.eh_frame:000000000000EDF7                 db    0
.eh_frame:000000000000EDF8                 db    0
.eh_frame:000000000000EDF9                 db    0
.eh_frame:000000000000EDFA                 db    0
.eh_frame:000000000000EDFB                 db    0
.eh_frame:000000000000EDFC                 db    0
.eh_frame:000000000000EDFD                 db    0
.eh_frame:000000000000EDFE                 db    0
.eh_frame:000000000000EDFF                 db    0
.eh_frame:000000000000EE00                 db  10h
.eh_frame:000000000000EE01                 db    0
.eh_frame:000000000000EE02                 db    0
.eh_frame:000000000000EE03                 db    0
.eh_frame:000000000000EE04                 db  54h ; T
.eh_frame:000000000000EE05                 db  15h
.eh_frame:000000000000EE06                 db    0
.eh_frame:000000000000EE07                 db    0
.eh_frame:000000000000EE08                 db  88h
.eh_frame:000000000000EE09                 db 0BEh
.eh_frame:000000000000EE0A                 db 0FFh
.eh_frame:000000000000EE0B                 db 0FFh
.eh_frame:000000000000EE0C                 db  0Eh
.eh_frame:000000000000EE0D                 db    0
.eh_frame:000000000000EE0E                 db    0
.eh_frame:000000000000EE0F                 db    0
.eh_frame:000000000000EE10                 db    0
.eh_frame:000000000000EE11                 db    0
.eh_frame:000000000000EE12                 db    0
.eh_frame:000000000000EE13                 db    0
.eh_frame:000000000000EE14 __FRAME_END__   db    0
.eh_frame:000000000000EE15                 db    0
.eh_frame:000000000000EE16                 db    0
.eh_frame:000000000000EE17                 db    0
.eh_frame:000000000000EE17 _eh_frame       ends
.eh_frame:000000000000EE17
.init_array:000000000020F9D0 ; ELF Initialization Function Table
.init_array:000000000020F9D0 ; ===========================================================================
.init_array:000000000020F9D0
.init_array:000000000020F9D0 ; Segment type: Pure data
.init_array:000000000020F9D0 ; Segment permissions: Read/Write
.init_array:000000000020F9D0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020F9D0                 assume cs:_init_array
.init_array:000000000020F9D0                 ;org 20F9D0h
.init_array:000000000020F9D0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020F9D0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020F9D0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020F9D0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020F9D0
.fini_array:000000000020F9D8 ; ELF Termination Function Table
.fini_array:000000000020F9D8 ; ===========================================================================
.fini_array:000000000020F9D8
.fini_array:000000000020F9D8 ; Segment type: Pure data
.fini_array:000000000020F9D8 ; Segment permissions: Read/Write
.fini_array:000000000020F9D8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020F9D8                 assume cs:_fini_array
.fini_array:000000000020F9D8                 ;org 20F9D8h
.fini_array:000000000020F9D8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020F9D8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020F9D8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020F9D8
.data.rel.ro:000000000020F9E0 ; ===========================================================================
.data.rel.ro:000000000020F9E0
.data.rel.ro:000000000020F9E0 ; Segment type: Pure data
.data.rel.ro:000000000020F9E0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020F9E0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020F9E0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020F9E0                 ;org 20F9E0h
.data.rel.ro:000000000020F9E0 ; struct option long_options
.data.rel.ro:000000000020F9E0 long_options    dq offset aSkipBytes    ; name
.data.rel.ro:000000000020F9E0                                         ; DATA XREF: main:loc_1CD0↑o
.data.rel.ro:000000000020F9E0                                         ; main+438↑o ...
.data.rel.ro:000000000020F9E0                 dd 1                    ; has_arg ; "skip-bytes"
.data.rel.ro:000000000020F9E0                 db 4 dup(0)
.data.rel.ro:000000000020F9E0                 dq 0                    ; flag
.data.rel.ro:000000000020F9E0                 dd 6Ah                  ; val
.data.rel.ro:000000000020F9E0                 db 4 dup(0)
.data.rel.ro:000000000020FA00                 dq offset aAddressRadix ; "address-radix"
.data.rel.ro:000000000020FA08                 db    1
.data.rel.ro:000000000020FA09                 db    0
.data.rel.ro:000000000020FA0A                 db    0
.data.rel.ro:000000000020FA0B                 db    0
.data.rel.ro:000000000020FA0C                 db    0
.data.rel.ro:000000000020FA0D                 db    0
.data.rel.ro:000000000020FA0E                 db    0
.data.rel.ro:000000000020FA0F                 db    0
.data.rel.ro:000000000020FA10                 db    0
.data.rel.ro:000000000020FA11                 db    0
.data.rel.ro:000000000020FA12                 db    0
.data.rel.ro:000000000020FA13                 db    0
.data.rel.ro:000000000020FA14                 db    0
.data.rel.ro:000000000020FA15                 db    0
.data.rel.ro:000000000020FA16                 db    0
.data.rel.ro:000000000020FA17                 db    0
.data.rel.ro:000000000020FA18                 db  41h ; A
.data.rel.ro:000000000020FA19                 db    0
.data.rel.ro:000000000020FA1A                 db    0
.data.rel.ro:000000000020FA1B                 db    0
.data.rel.ro:000000000020FA1C                 db    0
.data.rel.ro:000000000020FA1D                 db    0
.data.rel.ro:000000000020FA1E                 db    0
.data.rel.ro:000000000020FA1F                 db    0
.data.rel.ro:000000000020FA20                 dq offset aReadBytes    ; "read-bytes"
.data.rel.ro:000000000020FA28                 db    1
.data.rel.ro:000000000020FA29                 db    0
.data.rel.ro:000000000020FA2A                 db    0
.data.rel.ro:000000000020FA2B                 db    0
.data.rel.ro:000000000020FA2C                 db    0
.data.rel.ro:000000000020FA2D                 db    0
.data.rel.ro:000000000020FA2E                 db    0
.data.rel.ro:000000000020FA2F                 db    0
.data.rel.ro:000000000020FA30                 db    0
.data.rel.ro:000000000020FA31                 db    0
.data.rel.ro:000000000020FA32                 db    0
.data.rel.ro:000000000020FA33                 db    0
.data.rel.ro:000000000020FA34                 db    0
.data.rel.ro:000000000020FA35                 db    0
.data.rel.ro:000000000020FA36                 db    0
.data.rel.ro:000000000020FA37                 db    0
.data.rel.ro:000000000020FA38                 db  4Eh ; N
.data.rel.ro:000000000020FA39                 db    0
.data.rel.ro:000000000020FA3A                 db    0
.data.rel.ro:000000000020FA3B                 db    0
.data.rel.ro:000000000020FA3C                 db    0
.data.rel.ro:000000000020FA3D                 db    0
.data.rel.ro:000000000020FA3E                 db    0
.data.rel.ro:000000000020FA3F                 db    0
.data.rel.ro:000000000020FA40                 dq offset aFormat       ; "format"
.data.rel.ro:000000000020FA48                 db    1
.data.rel.ro:000000000020FA49                 db    0
.data.rel.ro:000000000020FA4A                 db    0
.data.rel.ro:000000000020FA4B                 db    0
.data.rel.ro:000000000020FA4C                 db    0
.data.rel.ro:000000000020FA4D                 db    0
.data.rel.ro:000000000020FA4E                 db    0
.data.rel.ro:000000000020FA4F                 db    0
.data.rel.ro:000000000020FA50                 db    0
.data.rel.ro:000000000020FA51                 db    0
.data.rel.ro:000000000020FA52                 db    0
.data.rel.ro:000000000020FA53                 db    0
.data.rel.ro:000000000020FA54                 db    0
.data.rel.ro:000000000020FA55                 db    0
.data.rel.ro:000000000020FA56                 db    0
.data.rel.ro:000000000020FA57                 db    0
.data.rel.ro:000000000020FA58                 db  74h ; t
.data.rel.ro:000000000020FA59                 db    0
.data.rel.ro:000000000020FA5A                 db    0
.data.rel.ro:000000000020FA5B                 db    0
.data.rel.ro:000000000020FA5C                 db    0
.data.rel.ro:000000000020FA5D                 db    0
.data.rel.ro:000000000020FA5E                 db    0
.data.rel.ro:000000000020FA5F                 db    0
.data.rel.ro:000000000020FA60                 dq offset aOutputDuplicat ; "output-duplicates"
.data.rel.ro:000000000020FA68                 db    0
.data.rel.ro:000000000020FA69                 db    0
.data.rel.ro:000000000020FA6A                 db    0
.data.rel.ro:000000000020FA6B                 db    0
.data.rel.ro:000000000020FA6C                 db    0
.data.rel.ro:000000000020FA6D                 db    0
.data.rel.ro:000000000020FA6E                 db    0
.data.rel.ro:000000000020FA6F                 db    0
.data.rel.ro:000000000020FA70                 db    0
.data.rel.ro:000000000020FA71                 db    0
.data.rel.ro:000000000020FA72                 db    0
.data.rel.ro:000000000020FA73                 db    0
.data.rel.ro:000000000020FA74                 db    0
.data.rel.ro:000000000020FA75                 db    0
.data.rel.ro:000000000020FA76                 db    0
.data.rel.ro:000000000020FA77                 db    0
.data.rel.ro:000000000020FA78                 db  76h ; v
.data.rel.ro:000000000020FA79                 db    0
.data.rel.ro:000000000020FA7A                 db    0
.data.rel.ro:000000000020FA7B                 db    0
.data.rel.ro:000000000020FA7C                 db    0
.data.rel.ro:000000000020FA7D                 db    0
.data.rel.ro:000000000020FA7E                 db    0
.data.rel.ro:000000000020FA7F                 db    0
.data.rel.ro:000000000020FA80                 dq offset aStrings      ; "strings"
.data.rel.ro:000000000020FA88                 db    2
.data.rel.ro:000000000020FA89                 db    0
.data.rel.ro:000000000020FA8A                 db    0
.data.rel.ro:000000000020FA8B                 db    0
.data.rel.ro:000000000020FA8C                 db    0
.data.rel.ro:000000000020FA8D                 db    0
.data.rel.ro:000000000020FA8E                 db    0
.data.rel.ro:000000000020FA8F                 db    0
.data.rel.ro:000000000020FA90                 db    0
.data.rel.ro:000000000020FA91                 db    0
.data.rel.ro:000000000020FA92                 db    0
.data.rel.ro:000000000020FA93                 db    0
.data.rel.ro:000000000020FA94                 db    0
.data.rel.ro:000000000020FA95                 db    0
.data.rel.ro:000000000020FA96                 db    0
.data.rel.ro:000000000020FA97                 db    0
.data.rel.ro:000000000020FA98                 db  53h ; S
.data.rel.ro:000000000020FA99                 db    0
.data.rel.ro:000000000020FA9A                 db    0
.data.rel.ro:000000000020FA9B                 db    0
.data.rel.ro:000000000020FA9C                 db    0
.data.rel.ro:000000000020FA9D                 db    0
.data.rel.ro:000000000020FA9E                 db    0
.data.rel.ro:000000000020FA9F                 db    0
.data.rel.ro:000000000020FAA0                 dq offset aTraditional  ; "traditional"
.data.rel.ro:000000000020FAA8                 db    0
.data.rel.ro:000000000020FAA9                 db    0
.data.rel.ro:000000000020FAAA                 db    0
.data.rel.ro:000000000020FAAB                 db    0
.data.rel.ro:000000000020FAAC                 db    0
.data.rel.ro:000000000020FAAD                 db    0
.data.rel.ro:000000000020FAAE                 db    0
.data.rel.ro:000000000020FAAF                 db    0
.data.rel.ro:000000000020FAB0                 db    0
.data.rel.ro:000000000020FAB1                 db    0
.data.rel.ro:000000000020FAB2                 db    0
.data.rel.ro:000000000020FAB3                 db    0
.data.rel.ro:000000000020FAB4                 db    0
.data.rel.ro:000000000020FAB5                 db    0
.data.rel.ro:000000000020FAB6                 db    0
.data.rel.ro:000000000020FAB7                 db    0
.data.rel.ro:000000000020FAB8                 db  80h
.data.rel.ro:000000000020FAB9                 db    0
.data.rel.ro:000000000020FABA                 db    0
.data.rel.ro:000000000020FABB                 db    0
.data.rel.ro:000000000020FABC                 db    0
.data.rel.ro:000000000020FABD                 db    0
.data.rel.ro:000000000020FABE                 db    0
.data.rel.ro:000000000020FABF                 db    0
.data.rel.ro:000000000020FAC0                 dq offset aWidth        ; "width"
.data.rel.ro:000000000020FAC8                 db    2
.data.rel.ro:000000000020FAC9                 db    0
.data.rel.ro:000000000020FACA                 db    0
.data.rel.ro:000000000020FACB                 db    0
.data.rel.ro:000000000020FACC                 db    0
.data.rel.ro:000000000020FACD                 db    0
.data.rel.ro:000000000020FACE                 db    0
.data.rel.ro:000000000020FACF                 db    0
.data.rel.ro:000000000020FAD0                 db    0
.data.rel.ro:000000000020FAD1                 db    0
.data.rel.ro:000000000020FAD2                 db    0
.data.rel.ro:000000000020FAD3                 db    0
.data.rel.ro:000000000020FAD4                 db    0
.data.rel.ro:000000000020FAD5                 db    0
.data.rel.ro:000000000020FAD6                 db    0
.data.rel.ro:000000000020FAD7                 db    0
.data.rel.ro:000000000020FAD8                 db  77h ; w
.data.rel.ro:000000000020FAD9                 db    0
.data.rel.ro:000000000020FADA                 db    0
.data.rel.ro:000000000020FADB                 db    0
.data.rel.ro:000000000020FADC                 db    0
.data.rel.ro:000000000020FADD                 db    0
.data.rel.ro:000000000020FADE                 db    0
.data.rel.ro:000000000020FADF                 db    0
.data.rel.ro:000000000020FAE0                 dq offset aEndian+2     ; "endian"
.data.rel.ro:000000000020FAE8                 db    1
.data.rel.ro:000000000020FAE9                 db    0
.data.rel.ro:000000000020FAEA                 db    0
.data.rel.ro:000000000020FAEB                 db    0
.data.rel.ro:000000000020FAEC                 db    0
.data.rel.ro:000000000020FAED                 db    0
.data.rel.ro:000000000020FAEE                 db    0
.data.rel.ro:000000000020FAEF                 db    0
.data.rel.ro:000000000020FAF0                 db    0
.data.rel.ro:000000000020FAF1                 db    0
.data.rel.ro:000000000020FAF2                 db    0
.data.rel.ro:000000000020FAF3                 db    0
.data.rel.ro:000000000020FAF4                 db    0
.data.rel.ro:000000000020FAF5                 db    0
.data.rel.ro:000000000020FAF6                 db    0
.data.rel.ro:000000000020FAF7                 db    0
.data.rel.ro:000000000020FAF8                 db  81h
.data.rel.ro:000000000020FAF9                 db    0
.data.rel.ro:000000000020FAFA                 db    0
.data.rel.ro:000000000020FAFB                 db    0
.data.rel.ro:000000000020FAFC                 db    0
.data.rel.ro:000000000020FAFD                 db    0
.data.rel.ro:000000000020FAFE                 db    0
.data.rel.ro:000000000020FAFF                 db    0
.data.rel.ro:000000000020FB00                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020FB08                 db    0
.data.rel.ro:000000000020FB09                 db    0
.data.rel.ro:000000000020FB0A                 db    0
.data.rel.ro:000000000020FB0B                 db    0
.data.rel.ro:000000000020FB0C                 db    0
.data.rel.ro:000000000020FB0D                 db    0
.data.rel.ro:000000000020FB0E                 db    0
.data.rel.ro:000000000020FB0F                 db    0
.data.rel.ro:000000000020FB10                 db    0
.data.rel.ro:000000000020FB11                 db    0
.data.rel.ro:000000000020FB12                 db    0
.data.rel.ro:000000000020FB13                 db    0
.data.rel.ro:000000000020FB14                 db    0
.data.rel.ro:000000000020FB15                 db    0
.data.rel.ro:000000000020FB16                 db    0
.data.rel.ro:000000000020FB17                 db    0
.data.rel.ro:000000000020FB18                 db  7Eh ; ~
.data.rel.ro:000000000020FB19                 db 0FFh
.data.rel.ro:000000000020FB1A                 db 0FFh
.data.rel.ro:000000000020FB1B                 db 0FFh
.data.rel.ro:000000000020FB1C                 db    0
.data.rel.ro:000000000020FB1D                 db    0
.data.rel.ro:000000000020FB1E                 db    0
.data.rel.ro:000000000020FB1F                 db    0
.data.rel.ro:000000000020FB20                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020FB28                 db    0
.data.rel.ro:000000000020FB29                 db    0
.data.rel.ro:000000000020FB2A                 db    0
.data.rel.ro:000000000020FB2B                 db    0
.data.rel.ro:000000000020FB2C                 db    0
.data.rel.ro:000000000020FB2D                 db    0
.data.rel.ro:000000000020FB2E                 db    0
.data.rel.ro:000000000020FB2F                 db    0
.data.rel.ro:000000000020FB30                 db    0
.data.rel.ro:000000000020FB31                 db    0
.data.rel.ro:000000000020FB32                 db    0
.data.rel.ro:000000000020FB33                 db    0
.data.rel.ro:000000000020FB34                 db    0
.data.rel.ro:000000000020FB35                 db    0
.data.rel.ro:000000000020FB36                 db    0
.data.rel.ro:000000000020FB37                 db    0
.data.rel.ro:000000000020FB38                 db  7Dh ; }
.data.rel.ro:000000000020FB39                 db 0FFh
.data.rel.ro:000000000020FB3A                 db 0FFh
.data.rel.ro:000000000020FB3B                 db 0FFh
.data.rel.ro:000000000020FB3C                 db    0
.data.rel.ro:000000000020FB3D                 db    0
.data.rel.ro:000000000020FB3E                 db    0
.data.rel.ro:000000000020FB3F                 db    0
.data.rel.ro:000000000020FB40                 db    0
.data.rel.ro:000000000020FB41                 db    0
.data.rel.ro:000000000020FB42                 db    0
.data.rel.ro:000000000020FB43                 db    0
.data.rel.ro:000000000020FB44                 db    0
.data.rel.ro:000000000020FB45                 db    0
.data.rel.ro:000000000020FB46                 db    0
.data.rel.ro:000000000020FB47                 db    0
.data.rel.ro:000000000020FB48                 db    0
.data.rel.ro:000000000020FB49                 db    0
.data.rel.ro:000000000020FB4A                 db    0
.data.rel.ro:000000000020FB4B                 db    0
.data.rel.ro:000000000020FB4C                 db    0
.data.rel.ro:000000000020FB4D                 db    0
.data.rel.ro:000000000020FB4E                 db    0
.data.rel.ro:000000000020FB4F                 db    0
.data.rel.ro:000000000020FB50                 db    0
.data.rel.ro:000000000020FB51                 db    0
.data.rel.ro:000000000020FB52                 db    0
.data.rel.ro:000000000020FB53                 db    0
.data.rel.ro:000000000020FB54                 db    0
.data.rel.ro:000000000020FB55                 db    0
.data.rel.ro:000000000020FB56                 db    0
.data.rel.ro:000000000020FB57                 db    0
.data.rel.ro:000000000020FB58                 db    0
.data.rel.ro:000000000020FB59                 db    0
.data.rel.ro:000000000020FB5A                 db    0
.data.rel.ro:000000000020FB5B                 db    0
.data.rel.ro:000000000020FB5C                 db    0
.data.rel.ro:000000000020FB5D                 db    0
.data.rel.ro:000000000020FB5E                 db    0
.data.rel.ro:000000000020FB5F                 db    0
.data.rel.ro:000000000020FB60 endian_args     dq offset aLittle       ; DATA XREF: main+1BE↑o
.data.rel.ro:000000000020FB60                                         ; "little"
.data.rel.ro:000000000020FB68                 dq offset aBig          ; "big"
.data.rel.ro:000000000020FB70                 align 20h
.data.rel.ro:000000000020FB80 default_file_list dq offset asc_D138+1  ; DATA XREF: main:loc_2650↑o
.data.rel.ro:000000000020FB80                                         ; "-"
.data.rel.ro:000000000020FB88                 align 20h
.data.rel.ro:000000000020FBA0                 public quoting_style_args
.data.rel.ro:000000000020FBA0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020FBA8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020FBB0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020FBB8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020FBC0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020FBC8                 dq offset aC+1          ; "c"
.data.rel.ro:000000000020FBD0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020FBD8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020FBE0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020FBE8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020FBF0                 db    0
.data.rel.ro:000000000020FBF1                 db    0
.data.rel.ro:000000000020FBF2                 db    0
.data.rel.ro:000000000020FBF3                 db    0
.data.rel.ro:000000000020FBF4                 db    0
.data.rel.ro:000000000020FBF5                 db    0
.data.rel.ro:000000000020FBF6                 db    0
.data.rel.ro:000000000020FBF7                 db    0
.data.rel.ro:000000000020FBF7 _data_rel_ro    ends
.data.rel.ro:000000000020FBF7
LOAD:000000000020FBF8 ; ELF Dynamic Information
LOAD:000000000020FBF8 ; ===========================================================================
LOAD:000000000020FBF8
LOAD:000000000020FBF8 ; Segment type: Pure data
LOAD:000000000020FBF8 ; Segment permissions: Read/Write
LOAD:000000000020FBF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020FBF8                 assume cs:LOAD
LOAD:000000000020FBF8                 ;org 20FBF8h
LOAD:000000000020FBF8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020FBF8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020FBF8                                         ; DT_NEEDED libc.so.6
LOAD:000000000020FC08                 Elf64_Dyn <0Ch, 1790h>  ; DT_INIT
LOAD:000000000020FC18                 Elf64_Dyn <0Dh, 0ACA0h> ; DT_FINI
LOAD:000000000020FC28                 Elf64_Dyn <19h, 20F9D0h> ; DT_INIT_ARRAY
LOAD:000000000020FC38                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020FC48                 Elf64_Dyn <1Ah, 20F9D8h> ; DT_FINI_ARRAY
LOAD:000000000020FC58                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020FC68                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020FC78                 Elf64_Dyn <5, 9B8h>     ; DT_STRTAB
LOAD:000000000020FC88                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020FC98                 Elf64_Dyn <0Ah, 357h>   ; DT_STRSZ
LOAD:000000000020FCA8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020FCB8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020FCC8                 Elf64_Dyn <3, 20FDE8h>  ; DT_PLTGOT
LOAD:000000000020FCD8                 Elf64_Dyn <2, 570h>     ; DT_PLTRELSZ
LOAD:000000000020FCE8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020FCF8                 Elf64_Dyn <17h, 1220h>  ; DT_JMPREL
LOAD:000000000020FD08                 Elf64_Dyn <7, 0E18h>    ; DT_RELA
LOAD:000000000020FD18                 Elf64_Dyn <8, 408h>     ; DT_RELASZ
LOAD:000000000020FD28                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020FD38                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020FD48                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020FD58                 Elf64_Dyn <6FFFFFFEh, 0DA8h> ; DT_VERNEED
LOAD:000000000020FD68                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020FD78                 Elf64_Dyn <6FFFFFF0h, 0D10h> ; DT_VERSYM
LOAD:000000000020FD88                 Elf64_Dyn <6FFFFFF9h, 1Fh> ; DT_RELACOUNT
LOAD:000000000020FD98                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020FDA8                 db    0
LOAD:000000000020FDA9                 db    0
LOAD:000000000020FDAA                 db    0
LOAD:000000000020FDAB                 db    0
LOAD:000000000020FDAC                 db    0
LOAD:000000000020FDAD                 db    0
LOAD:000000000020FDAE                 db    0
LOAD:000000000020FDAF                 db    0
LOAD:000000000020FDB0                 db    0
LOAD:000000000020FDB1                 db    0
LOAD:000000000020FDB2                 db    0
LOAD:000000000020FDB3                 db    0
LOAD:000000000020FDB4                 db    0
LOAD:000000000020FDB5                 db    0
LOAD:000000000020FDB6                 db    0
LOAD:000000000020FDB7                 db    0
LOAD:000000000020FDB8                 db    0
LOAD:000000000020FDB9                 db    0
LOAD:000000000020FDBA                 db    0
LOAD:000000000020FDBB                 db    0
LOAD:000000000020FDBC                 db    0
LOAD:000000000020FDBD                 db    0
LOAD:000000000020FDBE                 db    0
LOAD:000000000020FDBF                 db    0
LOAD:000000000020FDC0                 db    0
LOAD:000000000020FDC1                 db    0
LOAD:000000000020FDC2                 db    0
LOAD:000000000020FDC3                 db    0
LOAD:000000000020FDC4                 db    0
LOAD:000000000020FDC5                 db    0
LOAD:000000000020FDC6                 db    0
LOAD:000000000020FDC7                 db    0
LOAD:000000000020FDC8                 db    0
LOAD:000000000020FDC9                 db    0
LOAD:000000000020FDCA                 db    0
LOAD:000000000020FDCB                 db    0
LOAD:000000000020FDCC                 db    0
LOAD:000000000020FDCD                 db    0
LOAD:000000000020FDCE                 db    0
LOAD:000000000020FDCF                 db    0
LOAD:000000000020FDD0                 db    0
LOAD:000000000020FDD1                 db    0
LOAD:000000000020FDD2                 db    0
LOAD:000000000020FDD3                 db    0
LOAD:000000000020FDD4                 db    0
LOAD:000000000020FDD5                 db    0
LOAD:000000000020FDD6                 db    0
LOAD:000000000020FDD7                 db    0
LOAD:000000000020FDD8                 db    0
LOAD:000000000020FDD9                 db    0
LOAD:000000000020FDDA                 db    0
LOAD:000000000020FDDB                 db    0
LOAD:000000000020FDDC                 db    0
LOAD:000000000020FDDD                 db    0
LOAD:000000000020FDDE                 db    0
LOAD:000000000020FDDF                 db    0
LOAD:000000000020FDE0                 db    0
LOAD:000000000020FDE1                 db    0
LOAD:000000000020FDE2                 db    0
LOAD:000000000020FDE3                 db    0
LOAD:000000000020FDE4                 db    0
LOAD:000000000020FDE5                 db    0
LOAD:000000000020FDE6                 db    0
LOAD:000000000020FDE7                 db    0
LOAD:000000000020FDE7 LOAD            ends
LOAD:000000000020FDE7
.got:000000000020FDE8 ; ===========================================================================
.got:000000000020FDE8
.got:000000000020FDE8 ; Segment type: Pure data
.got:000000000020FDE8 ; Segment permissions: Read/Write
.got:000000000020FDE8 _got            segment qword public 'DATA' use64
.got:000000000020FDE8                 assume cs:_got
.got:000000000020FDE8                 ;org 20FDE8h
.got:000000000020FDE8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020FDF0 qword_20FDF0    dq 0                    ; DATA XREF: sub_17B0↑r
.got:000000000020FDF8 qword_20FDF8    dq 0                    ; DATA XREF: sub_17B0+6↑r
.got:000000000020FE00 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000020FE00                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000020FE08 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020FE10 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020FE18 __errno_location_ptr dq offset __errno_location
.got:000000000020FE18                                         ; DATA XREF: ___errno_location↑r
.got:000000000020FE20 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020FE28 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020FE30 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020FE38 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:000000000020FE40 ferror_ptr      dq offset ferror        ; DATA XREF: _ferror↑r
.got:000000000020FE48 strtod_ptr      dq offset strtod        ; DATA XREF: _strtod↑r
.got:000000000020FE50 localeconv_ptr  dq offset localeconv    ; DATA XREF: _localeconv↑r
.got:000000000020FE58 fread_unlocked_ptr dq offset fread_unlocked
.got:000000000020FE58                                         ; DATA XREF: _fread_unlocked↑r
.got:000000000020FE60 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020FE68 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020FE70 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020FE70                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020FE78 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020FE80 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020FE80                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020FE88 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020FE90 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020FE90                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020FE98 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020FEA0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020FEA8 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020FEB0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020FEB8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020FEC0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020FEC8 __assert_fail_ptr dq offset __assert_fail
.got:000000000020FEC8                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020FED0 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020FED0                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020FED8 strtof_ptr      dq offset strtof        ; DATA XREF: _strtof↑r
.got:000000000020FEE0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020FEE8 fgetc_ptr       dq offset fgetc         ; DATA XREF: _fgetc↑r
.got:000000000020FEF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020FEF8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020FEF8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020FF00 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020FF08 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020FF10 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020FF18 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020FF20 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020FF28 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020FF30 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020FF38 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020FF40 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000020FF40                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000020FF48 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020FF50 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020FF58 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020FF60 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:000000000020FF68 strtold_ptr     dq offset strtold       ; DATA XREF: _strtold↑r
.got:000000000020FF70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020FF78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020FF80 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000020FF88 __fread_unlocked_chk_ptr dq offset __fread_unlocked_chk
.got:000000000020FF88                                         ; DATA XREF: ___fread_unlocked_chk↑r
.got:000000000020FF90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020FF98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020FFA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020FFA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020FFA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020FFB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020FFB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020FFC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020FFC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020FFC8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:000000000020FFC8                                         ; DATA XREF: ___sprintf_chk↑r
.got:000000000020FFD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020FFD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020FFD8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020FFD8                                         ; DATA XREF: start+24↑r
.got:000000000020FFE0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020FFE0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020FFE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020FFE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020FFF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020FFF0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020FFF0                                         ; __do_global_dtors_aux+9↑r
.got:000000000020FFF0 _got            ends
.got:000000000020FFF0
LOAD:000000000020FFF8 ; ===========================================================================
LOAD:000000000020FFF8
LOAD:000000000020FFF8 ; Segment type: Pure data
LOAD:000000000020FFF8 ; Segment permissions: Read/Write
LOAD:000000000020FFF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020FFF8                 assume cs:LOAD
LOAD:000000000020FFF8                 ;org 20FFF8h
LOAD:000000000020FFF8                 align 20h
LOAD:000000000020FFF8 LOAD            ends
LOAD:000000000020FFF8
.data:0000000000210000 ; ===========================================================================
.data:0000000000210000
.data:0000000000210000 ; Segment type: Pure data
.data:0000000000210000 ; Segment permissions: Read/Write
.data:0000000000210000 _data           segment align_32 public 'DATA' use64
.data:0000000000210000                 assume cs:_data
.data:0000000000210000                 ;org 210000h
.data:0000000000210000                 public __data_start ; weak
.data:0000000000210000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000210000                                         ; data_start
.data:0000000000210001                 db    0
.data:0000000000210002                 db    0
.data:0000000000210003                 db    0
.data:0000000000210004                 db    0
.data:0000000000210005                 db    0
.data:0000000000210006                 db    0
.data:0000000000210007                 db    0
.data:0000000000210008                 public __dso_handle
.data:0000000000210008 ; void *_dso_handle
.data:0000000000210008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000210008                                         ; atexit↑r ...
.data:0000000000210010 first_7524      db 1                    ; DATA XREF: write_block+24↑r
.data:0000000000210010                                         ; write_block:loc_4B7F↑w
.data:0000000000210011 abbreviate_duplicate_blocks db 1        ; DATA XREF: main:loc_1DD8↑w
.data:0000000000210011                                         ; write_block+11↑r
.data:0000000000210012                 align 8
.data:0000000000210018                 public Version
.data:0000000000210018 Version         dq offset a831          ; DATA XREF: main+52F↑r
.data:0000000000210018                                         ; "8.31"
.data:0000000000210020                 public argmatch_die
.data:0000000000210020 argmatch_die    dq offset __argmatch_die
.data:0000000000210020                                         ; DATA XREF: main:loc_1D20↑r
.data:0000000000210028                 public exit_failure
.data:0000000000210028 ; int exit_failure
.data:0000000000210028 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_56B2↑r
.data:0000000000210028                                         ; xalloc_die+17↑r ...
.data:000000000021002C                 align 20h
.data:0000000000210040                 public quote_quoting_options
.data:0000000000210040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000210040                                         ; quote_mem↑o ...
.data:0000000000210041                 db    0
.data:0000000000210042                 db    0
.data:0000000000210043                 db    0
.data:0000000000210044                 db    0
.data:0000000000210045                 db    0
.data:0000000000210046                 db    0
.data:0000000000210047                 db    0
.data:0000000000210048                 db    0
.data:0000000000210049                 db    0
.data:000000000021004A                 db    0
.data:000000000021004B                 db    0
.data:000000000021004C                 db    0
.data:000000000021004D                 db    0
.data:000000000021004E                 db    0
.data:000000000021004F                 db    0
.data:0000000000210050                 db    0
.data:0000000000210051                 db    0
.data:0000000000210052                 db    0
.data:0000000000210053                 db    0
.data:0000000000210054                 db    0
.data:0000000000210055                 db    0
.data:0000000000210056                 db    0
.data:0000000000210057                 db    0
.data:0000000000210058                 db    0
.data:0000000000210059                 db    0
.data:000000000021005A                 db    0
.data:000000000021005B                 db    0
.data:000000000021005C                 db    0
.data:000000000021005D                 db    0
.data:000000000021005E                 db    0
.data:000000000021005F                 db    0
.data:0000000000210060                 db    0
.data:0000000000210061                 db    0
.data:0000000000210062                 db    0
.data:0000000000210063                 db    0
.data:0000000000210064                 db    0
.data:0000000000210065                 db    0
.data:0000000000210066                 db    0
.data:0000000000210067                 db    0
.data:0000000000210068                 db    0
.data:0000000000210069                 db    0
.data:000000000021006A                 db    0
.data:000000000021006B                 db    0
.data:000000000021006C                 db    0
.data:000000000021006D                 db    0
.data:000000000021006E                 db    0
.data:000000000021006F                 db    0
.data:0000000000210070                 db    0
.data:0000000000210071                 db    0
.data:0000000000210072                 db    0
.data:0000000000210073                 db    0
.data:0000000000210074                 db    0
.data:0000000000210075                 db    0
.data:0000000000210076                 db    0
.data:0000000000210077                 db    0
.data:0000000000210078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000210078                                         ; quotearg_n_options:loc_6F5D↑r ...
.data:000000000021007C                 align 20h
.data:0000000000210080 ; void *slotvec
.data:0000000000210080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000210080                                         ; quotearg_n_options+76↑w ...
.data:0000000000210088                 align 10h
.data:0000000000210090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000210090                                         ; quotearg_n_options+187↑r ...
.data:0000000000210098 off_210098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000210098 _data           ends
.data:0000000000210098
.bss:00000000002100A0 ; ===========================================================================
.bss:00000000002100A0
.bss:00000000002100A0 ; Segment type: Uninitialized
.bss:00000000002100A0 ; Segment permissions: Read/Write
.bss:00000000002100A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002100A0                 assume cs:_bss
.bss:00000000002100A0                 ;org 2100A0h
.bss:00000000002100A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002100A0                 public __bss_start ; weak
.bss:00000000002100A0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000008F8↑o
.bss:00000000002100A0                                         ; LOAD:0000000000000958↑o ...
.bss:00000000002100A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002100A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002100A0                                         ; _edata
.bss:00000000002100A0                                         ; Copy of shared data
.bss:00000000002100A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002100A8 ; FILE *stdout
.bss:00000000002100A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008E0↑o
.bss:00000000002100A8                                         ; main:loc_2098↑r ...
.bss:00000000002100A8                                         ; Alternative name is 'stdout'
.bss:00000000002100A8                                         ; Copy of shared data
.bss:00000000002100B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002100B0 ; FILE *stdin
.bss:00000000002100B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000910↑o
.bss:00000000002100B0                                         ; main:loc_2674↑r ...
.bss:00000000002100B0                                         ; Alternative name is 'stdin'
.bss:00000000002100B0                                         ; Copy of shared data
.bss:00000000002100B8                 public optind@@GLIBC_2_2_5
.bss:00000000002100B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000988↑o
.bss:00000000002100B8                                         ; main:loc_2120↑r ...
.bss:00000000002100B8                                         ; Alternative name is 'optind'
.bss:00000000002100B8                                         ; Copy of shared data
.bss:00000000002100BC                 align 20h
.bss:00000000002100C0                 public optarg@@GLIBC_2_2_5
.bss:00000000002100C0 ; char *optarg
.bss:00000000002100C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009A0↑o
.bss:00000000002100C0                                         ; main+1B7↑r ...
.bss:00000000002100C0                                         ; Alternative name is 'optarg'
.bss:00000000002100C0                                         ; Copy of shared data
.bss:00000000002100C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002100C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002100C8                                         ; DATA XREF: LOAD:0000000000000928↑o
.bss:00000000002100C8                                         ; LOAD:0000000000000940↑o ...
.bss:00000000002100C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002100C8                                         ; Copy of shared data
.bss:00000000002100D0                 align 20h
.bss:00000000002100E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002100E0 ; FILE *stderr
.bss:00000000002100E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000970↑o
.bss:00000000002100E0                                         ; usage+3D↑r ...
.bss:00000000002100E0                                         ; Alternative name is 'stderr'
.bss:00000000002100E0                                         ; Copy of shared data
.bss:00000000002100E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002100E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002100E9                 align 20h
.bss:0000000000210100 prev_pair_equal_7525 db ?               ; DATA XREF: write_block+39↑w
.bss:0000000000210100                                         ; write_block+223↑r ...
.bss:0000000000210101 input_swap      db ?                    ; DATA XREF: main+1F9↑w
.bss:0000000000210101                                         ; main:loc_20F4↑w ...
.bss:0000000000210102                 align 20h
.bss:0000000000210120 fp_type_size    db    ? ;               ; DATA XREF: main+87↑o
.bss:0000000000210120                                         ; decode_format_string+110↑o
.bss:0000000000210121                 db    ? ;
.bss:0000000000210122                 db    ? ;
.bss:0000000000210123                 db    ? ;
.bss:0000000000210124                 db    ? ;
.bss:0000000000210125                 db    ? ;
.bss:0000000000210126                 db    ? ;
.bss:0000000000210127                 db    ? ;
.bss:0000000000210128                 db    ? ;
.bss:0000000000210129                 db    ? ;
.bss:000000000021012A                 db    ? ;
.bss:000000000021012B                 db    ? ;
.bss:000000000021012C                 db    ? ;
.bss:000000000021012D                 db    ? ;
.bss:000000000021012E                 db    ? ;
.bss:000000000021012F                 db    ? ;
.bss:0000000000210130 dword_210130    dd ?                    ; DATA XREF: main+E2↑w
.bss:0000000000210130                                         ; decode_format_string+62D↑r
.bss:0000000000210134                 align 20h
.bss:0000000000210140 dword_210140    dd ?                    ; DATA XREF: main+108↑w
.bss:0000000000210140                                         ; decode_format_string+FD↑r ...
.bss:0000000000210144                 align 20h
.bss:0000000000210160 dword_210160    dd ?                    ; DATA XREF: main+EC↑w
.bss:0000000000210160                                         ; decode_format_string+615↑r
.bss:0000000000210164                 align 20h
.bss:0000000000210180 integral_type_size db    ? ;            ; DATA XREF: main+68↑o
.bss:0000000000210180                                         ; decode_format_string+511↑o
.bss:0000000000210181                 db    ? ;
.bss:0000000000210182                 db    ? ;
.bss:0000000000210183                 db    ? ;
.bss:0000000000210184 dword_210184    dd ?                    ; DATA XREF: main+8E↑w
.bss:0000000000210184                                         ; decode_format_string+368↑r
.bss:0000000000210188 dword_210188    dd ?                    ; DATA XREF: main+98↑w
.bss:0000000000210188                                         ; decode_format_string+17D↑r
.bss:000000000021018C                 align 10h
.bss:0000000000210190 dword_210190    dd ?                    ; DATA XREF: main+A2↑w
.bss:0000000000210190                                         ; decode_format_string+765↑r ...
.bss:0000000000210194                 align 20h
.bss:00000000002101A0 dword_2101A0    dd ?                    ; DATA XREF: main+AC↑w
.bss:00000000002101A0                                         ; decode_format_string+74D↑r
.bss:00000000002101A4 have_read_stdin db ?                    ; DATA XREF: main:loc_2412↑r
.bss:00000000002101A4                                         ; open_next_file+6E↑w
.bss:00000000002101A5                 align 8
.bss:00000000002101A8 ; FILE *in_stream
.bss:00000000002101A8 in_stream       dq ?                    ; DATA XREF: main+65B↑r
.bss:00000000002101A8                                         ; main+67B↑r ...
.bss:00000000002101B0 file_list       dq ?                    ; DATA XREF: main+64F↑w
.bss:00000000002101B0                                         ; main+AE7↑w ...
.bss:00000000002101B8 input_filename  dq ?                    ; DATA XREF: check_and_close:loc_4520↑r
.bss:00000000002101B8                                         ; check_and_close+118↑r ...
.bss:00000000002101C0 ; size_t bytes_per_block
.bss:00000000002101C0 bytes_per_block dq ?                    ; DATA XREF: main+7BF↑r
.bss:00000000002101C0                                         ; main+7F1↑r ...
.bss:00000000002101C8 n_specs_allocated dq ?                  ; DATA XREF: main+11D↑w
.bss:00000000002101C8                                         ; decode_format_string:loc_3AD8↑r ...
.bss:00000000002101D0 n_specs         dq ?                    ; DATA XREF: main+112↑w
.bss:00000000002101D0                                         ; main+5A2↑r ...
.bss:00000000002101D8 spec            dq ?                    ; DATA XREF: main+12B↑w
.bss:00000000002101D8                                         ; main+69F↑r ...
.bss:00000000002101E0 end_offset      dq ?                    ; DATA XREF: main+61F↑w
.bss:00000000002101E0                                         ; main:loc_23BB↑r ...
.bss:00000000002101E8 max_bytes_to_format dq ?                ; DATA XREF: main+40E↑o
.bss:00000000002101E8                                         ; main+608↑r
.bss:00000000002101F0 limit_bytes_to_format db ?              ; DATA XREF: main+419↑w
.bss:00000000002101F0                                         ; main:loc_216D↑r ...
.bss:00000000002101F1                 align 8
.bss:00000000002101F8 n_bytes_to_skip dq ?                    ; DATA XREF: main+2C6↑o
.bss:00000000002101F8                                         ; main+60F↑r ...
.bss:0000000000210200 format_address  dq ?                    ; DATA XREF: main+FC↑w
.bss:0000000000210200                                         ; main+518↑w ...
.bss:0000000000210208 pseudo_offset   dq ?                    ; DATA XREF: main+6AD↑w
.bss:0000000000210208                                         ; format_address_label+15↑r
.bss:0000000000210210 flag_pseudo_start db ?                  ; DATA XREF: main:loc_2142↑r
.bss:0000000000210210                                         ; main+68B↑r ...
.bss:0000000000210211 traditional     db ?                    ; DATA XREF: main:loc_1D78↑w
.bss:0000000000210211                                         ; main+5B7↑r ...
.bss:0000000000210212 flag_dump_strings db ?                  ; DATA XREF: main+14A↑w
.bss:0000000000210212                                         ; main:loc_1F41↑w ...
.bss:0000000000210213                 align 8
.bss:0000000000210218 string_min      dq ?                    ; DATA XREF: main+3CA↑w
.bss:0000000000210218                                         ; main:loc_20CC↑w ...
.bss:0000000000210220 address_pad_len dd ?                    ; DATA XREF: main+140↑w
.bss:0000000000210220                                         ; main+508↑w ...
.bss:0000000000210224 address_base    dd ?                    ; DATA XREF: main+136↑w
.bss:0000000000210224                                         ; main+4FE↑w ...
.bss:0000000000210228 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000210228                                         ; close_stdout+1B↑r
.bss:0000000000210229                 align 10h
.bss:0000000000210230 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000210230                                         ; close_stdout+56↑r
.bss:0000000000210238                 public program_name
.bss:0000000000210238 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000210238                                         ; set_program_name:loc_5B7D↑w
.bss:0000000000210240 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000210240                                         ; quotearg_free+46↑o ...
.bss:0000000000210241                 db    ? ;
.bss:0000000000210242                 db    ? ;
.bss:0000000000210243                 db    ? ;
.bss:0000000000210244                 db    ? ;
.bss:0000000000210245                 db    ? ;
.bss:0000000000210246                 db    ? ;
.bss:0000000000210247                 db    ? ;
.bss:0000000000210248                 db    ? ;
.bss:0000000000210249                 db    ? ;
.bss:000000000021024A                 db    ? ;
.bss:000000000021024B                 db    ? ;
.bss:000000000021024C                 db    ? ;
.bss:000000000021024D                 db    ? ;
.bss:000000000021024E                 db    ? ;
.bss:000000000021024F                 db    ? ;
.bss:0000000000210250                 db    ? ;
.bss:0000000000210251                 db    ? ;
.bss:0000000000210252                 db    ? ;
.bss:0000000000210253                 db    ? ;
.bss:0000000000210254                 db    ? ;
.bss:0000000000210255                 db    ? ;
.bss:0000000000210256                 db    ? ;
.bss:0000000000210257                 db    ? ;
.bss:0000000000210258                 db    ? ;
.bss:0000000000210259                 db    ? ;
.bss:000000000021025A                 db    ? ;
.bss:000000000021025B                 db    ? ;
.bss:000000000021025C                 db    ? ;
.bss:000000000021025D                 db    ? ;
.bss:000000000021025E                 db    ? ;
.bss:000000000021025F                 db    ? ;
.bss:0000000000210260                 db    ? ;
.bss:0000000000210261                 db    ? ;
.bss:0000000000210262                 db    ? ;
.bss:0000000000210263                 db    ? ;
.bss:0000000000210264                 db    ? ;
.bss:0000000000210265                 db    ? ;
.bss:0000000000210266                 db    ? ;
.bss:0000000000210267                 db    ? ;
.bss:0000000000210268                 db    ? ;
.bss:0000000000210269                 db    ? ;
.bss:000000000021026A                 db    ? ;
.bss:000000000021026B                 db    ? ;
.bss:000000000021026C                 db    ? ;
.bss:000000000021026D                 db    ? ;
.bss:000000000021026E                 db    ? ;
.bss:000000000021026F                 db    ? ;
.bss:0000000000210270                 db    ? ;
.bss:0000000000210271                 db    ? ;
.bss:0000000000210272                 db    ? ;
.bss:0000000000210273                 db    ? ;
.bss:0000000000210274                 db    ? ;
.bss:0000000000210275                 db    ? ;
.bss:0000000000210276                 db    ? ;
.bss:0000000000210277                 db    ? ;
.bss:0000000000210278                 db    ? ;
.bss:0000000000210279                 db    ? ;
.bss:000000000021027A                 db    ? ;
.bss:000000000021027B                 db    ? ;
.bss:000000000021027C                 db    ? ;
.bss:000000000021027D                 db    ? ;
.bss:000000000021027E                 db    ? ;
.bss:000000000021027F                 db    ? ;
.bss:0000000000210280                 db    ? ;
.bss:0000000000210281                 db    ? ;
.bss:0000000000210282                 db    ? ;
.bss:0000000000210283                 db    ? ;
.bss:0000000000210284                 db    ? ;
.bss:0000000000210285                 db    ? ;
.bss:0000000000210286                 db    ? ;
.bss:0000000000210287                 db    ? ;
.bss:0000000000210288                 db    ? ;
.bss:0000000000210289                 db    ? ;
.bss:000000000021028A                 db    ? ;
.bss:000000000021028B                 db    ? ;
.bss:000000000021028C                 db    ? ;
.bss:000000000021028D                 db    ? ;
.bss:000000000021028E                 db    ? ;
.bss:000000000021028F                 db    ? ;
.bss:0000000000210290                 db    ? ;
.bss:0000000000210291                 db    ? ;
.bss:0000000000210292                 db    ? ;
.bss:0000000000210293                 db    ? ;
.bss:0000000000210294                 db    ? ;
.bss:0000000000210295                 db    ? ;
.bss:0000000000210296                 db    ? ;
.bss:0000000000210297                 db    ? ;
.bss:0000000000210298                 db    ? ;
.bss:0000000000210299                 db    ? ;
.bss:000000000021029A                 db    ? ;
.bss:000000000021029B                 db    ? ;
.bss:000000000021029C                 db    ? ;
.bss:000000000021029D                 db    ? ;
.bss:000000000021029E                 db    ? ;
.bss:000000000021029F                 db    ? ;
.bss:00000000002102A0                 db    ? ;
.bss:00000000002102A1                 db    ? ;
.bss:00000000002102A2                 db    ? ;
.bss:00000000002102A3                 db    ? ;
.bss:00000000002102A4                 db    ? ;
.bss:00000000002102A5                 db    ? ;
.bss:00000000002102A6                 db    ? ;
.bss:00000000002102A7                 db    ? ;
.bss:00000000002102A8                 db    ? ;
.bss:00000000002102A9                 db    ? ;
.bss:00000000002102AA                 db    ? ;
.bss:00000000002102AB                 db    ? ;
.bss:00000000002102AC                 db    ? ;
.bss:00000000002102AD                 db    ? ;
.bss:00000000002102AE                 db    ? ;
.bss:00000000002102AF                 db    ? ;
.bss:00000000002102B0                 db    ? ;
.bss:00000000002102B1                 db    ? ;
.bss:00000000002102B2                 db    ? ;
.bss:00000000002102B3                 db    ? ;
.bss:00000000002102B4                 db    ? ;
.bss:00000000002102B5                 db    ? ;
.bss:00000000002102B6                 db    ? ;
.bss:00000000002102B7                 db    ? ;
.bss:00000000002102B8                 db    ? ;
.bss:00000000002102B9                 db    ? ;
.bss:00000000002102BA                 db    ? ;
.bss:00000000002102BB                 db    ? ;
.bss:00000000002102BC                 db    ? ;
.bss:00000000002102BD                 db    ? ;
.bss:00000000002102BE                 db    ? ;
.bss:00000000002102BF                 db    ? ;
.bss:00000000002102C0                 db    ? ;
.bss:00000000002102C1                 db    ? ;
.bss:00000000002102C2                 db    ? ;
.bss:00000000002102C3                 db    ? ;
.bss:00000000002102C4                 db    ? ;
.bss:00000000002102C5                 db    ? ;
.bss:00000000002102C6                 db    ? ;
.bss:00000000002102C7                 db    ? ;
.bss:00000000002102C8                 db    ? ;
.bss:00000000002102C9                 db    ? ;
.bss:00000000002102CA                 db    ? ;
.bss:00000000002102CB                 db    ? ;
.bss:00000000002102CC                 db    ? ;
.bss:00000000002102CD                 db    ? ;
.bss:00000000002102CE                 db    ? ;
.bss:00000000002102CF                 db    ? ;
.bss:00000000002102D0                 db    ? ;
.bss:00000000002102D1                 db    ? ;
.bss:00000000002102D2                 db    ? ;
.bss:00000000002102D3                 db    ? ;
.bss:00000000002102D4                 db    ? ;
.bss:00000000002102D5                 db    ? ;
.bss:00000000002102D6                 db    ? ;
.bss:00000000002102D7                 db    ? ;
.bss:00000000002102D8                 db    ? ;
.bss:00000000002102D9                 db    ? ;
.bss:00000000002102DA                 db    ? ;
.bss:00000000002102DB                 db    ? ;
.bss:00000000002102DC                 db    ? ;
.bss:00000000002102DD                 db    ? ;
.bss:00000000002102DE                 db    ? ;
.bss:00000000002102DF                 db    ? ;
.bss:00000000002102E0                 db    ? ;
.bss:00000000002102E1                 db    ? ;
.bss:00000000002102E2                 db    ? ;
.bss:00000000002102E3                 db    ? ;
.bss:00000000002102E4                 db    ? ;
.bss:00000000002102E5                 db    ? ;
.bss:00000000002102E6                 db    ? ;
.bss:00000000002102E7                 db    ? ;
.bss:00000000002102E8                 db    ? ;
.bss:00000000002102E9                 db    ? ;
.bss:00000000002102EA                 db    ? ;
.bss:00000000002102EB                 db    ? ;
.bss:00000000002102EC                 db    ? ;
.bss:00000000002102ED                 db    ? ;
.bss:00000000002102EE                 db    ? ;
.bss:00000000002102EF                 db    ? ;
.bss:00000000002102F0                 db    ? ;
.bss:00000000002102F1                 db    ? ;
.bss:00000000002102F2                 db    ? ;
.bss:00000000002102F3                 db    ? ;
.bss:00000000002102F4                 db    ? ;
.bss:00000000002102F5                 db    ? ;
.bss:00000000002102F6                 db    ? ;
.bss:00000000002102F7                 db    ? ;
.bss:00000000002102F8                 db    ? ;
.bss:00000000002102F9                 db    ? ;
.bss:00000000002102FA                 db    ? ;
.bss:00000000002102FB                 db    ? ;
.bss:00000000002102FC                 db    ? ;
.bss:00000000002102FD                 db    ? ;
.bss:00000000002102FE                 db    ? ;
.bss:00000000002102FF                 db    ? ;
.bss:0000000000210300                 db    ? ;
.bss:0000000000210301                 db    ? ;
.bss:0000000000210302                 db    ? ;
.bss:0000000000210303                 db    ? ;
.bss:0000000000210304                 db    ? ;
.bss:0000000000210305                 db    ? ;
.bss:0000000000210306                 db    ? ;
.bss:0000000000210307                 db    ? ;
.bss:0000000000210308                 db    ? ;
.bss:0000000000210309                 db    ? ;
.bss:000000000021030A                 db    ? ;
.bss:000000000021030B                 db    ? ;
.bss:000000000021030C                 db    ? ;
.bss:000000000021030D                 db    ? ;
.bss:000000000021030E                 db    ? ;
.bss:000000000021030F                 db    ? ;
.bss:0000000000210310                 db    ? ;
.bss:0000000000210311                 db    ? ;
.bss:0000000000210312                 db    ? ;
.bss:0000000000210313                 db    ? ;
.bss:0000000000210314                 db    ? ;
.bss:0000000000210315                 db    ? ;
.bss:0000000000210316                 db    ? ;
.bss:0000000000210317                 db    ? ;
.bss:0000000000210318                 db    ? ;
.bss:0000000000210319                 db    ? ;
.bss:000000000021031A                 db    ? ;
.bss:000000000021031B                 db    ? ;
.bss:000000000021031C                 db    ? ;
.bss:000000000021031D                 db    ? ;
.bss:000000000021031E                 db    ? ;
.bss:000000000021031F                 db    ? ;
.bss:0000000000210320                 db    ? ;
.bss:0000000000210321                 db    ? ;
.bss:0000000000210322                 db    ? ;
.bss:0000000000210323                 db    ? ;
.bss:0000000000210324                 db    ? ;
.bss:0000000000210325                 db    ? ;
.bss:0000000000210326                 db    ? ;
.bss:0000000000210327                 db    ? ;
.bss:0000000000210328                 db    ? ;
.bss:0000000000210329                 db    ? ;
.bss:000000000021032A                 db    ? ;
.bss:000000000021032B                 db    ? ;
.bss:000000000021032C                 db    ? ;
.bss:000000000021032D                 db    ? ;
.bss:000000000021032E                 db    ? ;
.bss:000000000021032F                 db    ? ;
.bss:0000000000210330                 db    ? ;
.bss:0000000000210331                 db    ? ;
.bss:0000000000210332                 db    ? ;
.bss:0000000000210333                 db    ? ;
.bss:0000000000210334                 db    ? ;
.bss:0000000000210335                 db    ? ;
.bss:0000000000210336                 db    ? ;
.bss:0000000000210337                 db    ? ;
.bss:0000000000210338                 db    ? ;
.bss:0000000000210339                 db    ? ;
.bss:000000000021033A                 db    ? ;
.bss:000000000021033B                 db    ? ;
.bss:000000000021033C                 db    ? ;
.bss:000000000021033D                 db    ? ;
.bss:000000000021033E                 db    ? ;
.bss:000000000021033F                 db    ? ;
.bss:0000000000210340 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000210340                                         ; get_quoting_style↑o ...
.bss:0000000000210350 xmmword_210350  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000210350                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000210360 xmmword_210360  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000210360                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000210370 qword_210370    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000210370                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000210370 _bss            ends
.bss:0000000000210370
.prgend:0000000000210378 ; ===========================================================================
.prgend:0000000000210378
.prgend:0000000000210378 ; Segment type: Zero-length
.prgend:0000000000210378 _prgend         segment byte public '' use64
.prgend:0000000000210378 _end            label byte
.prgend:0000000000210378 _prgend         ends
.prgend:0000000000210378
extern:0000000000210380 ; ===========================================================================
extern:0000000000210380
extern:0000000000210380 ; Segment type: Externs
extern:0000000000210380 ; extern
extern:0000000000210380                 extrn __snprintf_chk:near
extern:0000000000210380                                         ; CODE XREF: ___snprintf_chk↑j
extern:0000000000210380                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:0000000000210388 ; void free(void *ptr)
extern:0000000000210388                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000210388                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000210390 ; void __noreturn abort(void)
extern:0000000000210390                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000210390                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000210398 ; int *_errno_location(void)
extern:0000000000210398                 extrn __errno_location:near
extern:0000000000210398                                         ; CODE XREF: ___errno_location↑j
extern:0000000000210398                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002103A0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002103A0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002103A0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002103A8 ; void __noreturn exit(int status)
extern:00000000002103A8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002103A8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002103B0 ; size_t _fpending(FILE *fp)
extern:00000000002103B0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002103B0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002103B8 ; int puts(const char *s)
extern:00000000002103B8                 extrn puts:near         ; CODE XREF: _puts↑j
extern:00000000002103B8                                         ; DATA XREF: .got:puts_ptr↑o
extern:00000000002103C0 ; int ferror(FILE *stream)
extern:00000000002103C0                 extrn ferror:near       ; CODE XREF: _ferror↑j
extern:00000000002103C0                                         ; DATA XREF: .got:ferror_ptr↑o
extern:00000000002103C8 ; double strtod(const char *nptr, char **endptr)
extern:00000000002103C8                 extrn strtod:near       ; CODE XREF: _strtod↑j
extern:00000000002103C8                                         ; DATA XREF: .got:strtod_ptr↑o
extern:00000000002103D0 ; struct lconv *localeconv(void)
extern:00000000002103D0                 extrn localeconv:near   ; CODE XREF: _localeconv↑j
extern:00000000002103D0                                         ; DATA XREF: .got:localeconv_ptr↑o
extern:00000000002103D8 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:00000000002103D8                 extrn fread_unlocked:near
extern:00000000002103D8                                         ; CODE XREF: _fread_unlocked↑j
extern:00000000002103D8                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:00000000002103E0 ; char *textdomain(const char *domainname)
extern:00000000002103E0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002103E0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002103E8 ; int fclose(FILE *stream)
extern:00000000002103E8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002103E8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002103F0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002103F0                 extrn bindtextdomain:near
extern:00000000002103F0                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002103F0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002103F8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002103F8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002103F8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000210400 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000210400                 extrn __ctype_get_mb_cur_max:near
extern:0000000000210400                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000210400                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000210408 ; size_t strlen(const char *s)
extern:0000000000210408                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000210408                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000210410                 extrn __stack_chk_fail:near
extern:0000000000210410                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000210410                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000210418 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000210418                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000210418                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000210420 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000210420                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000210420                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000210428 ; char *strchr(const char *s, int c)
extern:0000000000210428                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000210428                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000210430 ; int _overflow(_IO_FILE *, int)
extern:0000000000210430                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000210430                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000210438 ; char *strrchr(const char *s, int c)
extern:0000000000210438                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000210438                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000210440 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000210440                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000210440                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000210448 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000210448                 extrn __assert_fail:near
extern:0000000000210448                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000210448                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000210450 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000210450                 extrn __strtoul_internal:near
extern:0000000000210450                                         ; CODE XREF: ___strtoul_internal↑j
extern:0000000000210450                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:0000000000210458 ; float strtof(const char *nptr, char **endptr)
extern:0000000000210458                 extrn strtof:near       ; CODE XREF: _strtof↑j
extern:0000000000210458                                         ; DATA XREF: .got:strtof_ptr↑o
extern:0000000000210460 ; void *memset(void *s, int c, size_t n)
extern:0000000000210460                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000210460                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000210468 ; int fgetc(FILE *stream)
extern:0000000000210468                 extrn fgetc:near        ; CODE XREF: _fgetc↑j
extern:0000000000210468                                         ; DATA XREF: .got:fgetc_ptr↑o
extern:0000000000210470 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000210470                 extrn __libc_start_main:near
extern:0000000000210470                                         ; CODE XREF: start+24↑p
extern:0000000000210470                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000210478 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000210478                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000210478                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000210480 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000210480                 extrn fputs_unlocked:near
extern:0000000000210480                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000210480                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000210488 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000210488                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000210488                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000210490 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000210490                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000210490                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000210498 ; int fileno(FILE *stream)
extern:0000000000210498                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000210498                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002104A0 ; void *malloc(size_t size)
extern:00000000002104A0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002104A0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002104A8 ; int fflush(FILE *stream)
extern:00000000002104A8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002104A8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002104B0 ; char *nl_langinfo(nl_item item)
extern:00000000002104B0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002104B0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002104B8 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:00000000002104B8                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:00000000002104B8                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:00000000002104C0 ; int _freading(FILE *fp)
extern:00000000002104C0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002104C0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002104C8 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:00000000002104C8                 extrn fwrite_unlocked:near
extern:00000000002104C8                                         ; CODE XREF: _fwrite_unlocked↑j
extern:00000000002104C8                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:00000000002104D0 ; void *realloc(void *ptr, size_t size)
extern:00000000002104D0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002104D0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:00000000002104D8 ; char *setlocale(int category, const char *locale)
extern:00000000002104D8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:00000000002104D8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002104E0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002104E0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002104E8 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:00000000002104E8                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:00000000002104E8                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:00000000002104F0 ; long double strtold(const char *nptr, char **endptr)
extern:00000000002104F0                 extrn strtold:near      ; CODE XREF: _strtold↑j
extern:00000000002104F0                                         ; DATA XREF: .got:strtold_ptr↑o
extern:00000000002104F8 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002104F8                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002104F8                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000210500 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000210500                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000210500                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000210508 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000210508                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000210508                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000210510                 extrn __fread_unlocked_chk:near
extern:0000000000210510                                         ; CODE XREF: ___fread_unlocked_chk↑j
extern:0000000000210510                                         ; DATA XREF: .got:__fread_unlocked_chk_ptr↑o
extern:0000000000210518 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000210518                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000210518                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000210520 ; void __noreturn exit(int status)
extern:0000000000210520                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000210520                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000210528 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000210528                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000210528                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000210530                 extrn __fprintf_chk:near
extern:0000000000210530                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000210530                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000210538 ; int mbsinit(const mbstate_t *ps)
extern:0000000000210538                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000210538                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000210540 ; int iswprint(wint_t wc)
extern:0000000000210540                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000210540                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000210548 ; int __fastcall __cxa_finalize(void *)
extern:0000000000210548                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000210548                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000210548                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000210550 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000210550                 extrn __ctype_b_loc:near
extern:0000000000210550                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000210550                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000210558                 extrn __sprintf_chk:near
extern:0000000000210558                                         ; CODE XREF: ___sprintf_chk↑j
extern:0000000000210558                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:0000000000210560                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000210560                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000210568                 extrn __gmon_start__:near ; weak
extern:0000000000210568                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000210568                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000210570                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000210570                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000210570
extern:0000000000210570
extern:0000000000210570                 end start
