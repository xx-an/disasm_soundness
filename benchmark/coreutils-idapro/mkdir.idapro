LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 771BE71AAE2E877409E8566833F79B6578E48561CD969DD86484F9B70989AE8F
LOAD:0000000000000000 ; Input MD5    : 27BF91DAA0236D8A78BB4532F9EC9CDC
LOAD:0000000000000000 ; Input CRC32  : 613D5B4E
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/mkdir
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'mkdir.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'prog-fprintf.c'
LOAD:0000000000000000 ; Source File : 'selinux.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'mkdir-p.c'
LOAD:0000000000000000 ; Source File : 'modechange.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'savewd.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vfprintf.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'mkancesdirs.c'
LOAD:0000000000000000 ; Source File : 'dirchownmod.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'fseterr.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 3D0A0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0AC40h               ; Size in file image
LOAD:00000000000000D8                 dq 0AC40h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0BA90h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20BA90h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 5F0h                 ; Size in file image
LOAD:0000000000000110                 dq 7B0h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0BBD8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20BBD8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 996Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 996Ch                ; Physical address
LOAD:00000000000001B0                 dq 30Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 30Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0BA90h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20BA90h              ; Physical address
LOAD:0000000000000220                 dq 570h                 ; Size in file image
LOAD:0000000000000228                 dq 570h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 24h, 0A0h, 0E1h, 21h, 56h, 0F1h, 94h, 0FCh, 7Ch, 28h ; Desc
LOAD:0000000000000284                 db 0DBh, 7Ch, 0BFh, 9, 4Dh, 6Fh, 41h, 73h, 0C9h, 0A8h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 43h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 43h, 44h, 49h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aSnprintfChk - offset byte_9E8, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aRaise - offset byte_9E8, 12h, 0, 0, offset dword_0,\ ; "raise"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_9E8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_9E8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_9E8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_9E8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_9E8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_9E8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_9E8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aMkdir - offset byte_9E8, 12h, 0, 0, offset dword_0,\ ; "mkdir"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFcntl - offset byte_9E8, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9E8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aOpen2 - offset byte_9E8, 12h, 0, 0, offset dword_0,\ ; "__open_2"
LOAD:0000000000000418                            0>
LOAD:0000000000000430                 Elf64_Sym <offset aFclose - offset byte_9E8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aBindtextdomain - offset byte_9E8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aDcgettext - offset byte_9E8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9E8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrlen - offset byte_9E8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFchdir+1 - offset byte_9E8, 12h, 0, 0, \ ; "chdir"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStackChkFail - offset byte_9E8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aGetoptLong - offset byte_9E8, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aMbrtowc - offset byte_9E8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aOverflow - offset byte_9E8, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrrchr - offset byte_9E8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLseek - offset byte_9E8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000538                            0>
LOAD:0000000000000550                 Elf64_Sym <offset aAssertFail - offset byte_9E8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMemset - offset byte_9E8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFclose+1 - offset byte_9E8, 12h, 0, 0, \ ; "close"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aLibcStartMain - offset byte_9E8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMemcmp - offset byte_9E8, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFputsUnlocked - offset byte_9E8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aCalloc - offset byte_9E8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aGmonStart - offset byte_9E8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aUmask - offset byte_9E8, 12h, 0, 0, offset dword_0,\ ; "umask"
LOAD:0000000000000610                            0>
LOAD:0000000000000628                 Elf64_Sym <offset aMemcpy - offset byte_9E8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFileno - offset byte_9E8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aXstat - offset byte_9E8, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000658                            0>
LOAD:0000000000000670                 Elf64_Sym <offset aMalloc - offset byte_9E8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFflush - offset byte_9E8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aNlLanginfo - offset byte_9E8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFxstat - offset byte_9E8, 12h, 0, 0, \ ; "__fxstat"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aLchown - offset byte_9E8, 12h, 0, 0, \ ; "lchown"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFreading - offset byte_9E8, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFchdir - offset byte_9E8, 12h, 0, 0, \ ; "fchdir"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFwriteUnlocked - offset byte_9E8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFchown+1 - offset byte_9E8, 12h, 0, 0, \ ; "chown"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aRealloc - offset byte_9E8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aSetlocale - offset byte_9E8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aPrintfChk - offset byte_9E8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFchmod - offset byte_9E8, 12h, 0, 0, \ ; "fchmod"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFchmod+1 - offset byte_9E8, 12h, 0, 0, \ ; "chmod"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aError - offset byte_9E8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000007C0                            0>
LOAD:00000000000007D8                 Elf64_Sym <offset aWaitpid - offset byte_9E8, 12h, 0, 0, \ ; "waitpid"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aOpen - offset byte_9E8, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000007F0                            0>
LOAD:0000000000000808                 Elf64_Sym <offset aFseeko - offset byte_9E8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aFchown - offset byte_9E8, 12h, 0, 0, \ ; "fchown"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aCxaAtexit - offset byte_9E8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aExit+1 - offset byte_9E8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFwrite - offset byte_9E8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aFprintfChk - offset byte_9E8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aItmRegistertmc - offset byte_9E8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aMbsinit - offset byte_9E8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aIswprint - offset byte_9E8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aCxaFinalize - offset byte_9E8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFork - offset byte_9E8, 12h, 0, 0, offset dword_0, \ ; "fork"
LOAD:00000000000008F8                            0>
LOAD:0000000000000910                 Elf64_Sym <offset aCtypeBLoc - offset byte_9E8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aStdout - offset byte_9E8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000928                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aProgname - offset byte_9E8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000940                            offset __bss_start, 8>
LOAD:0000000000000958                 Elf64_Sym <offset aProgramInvocat - offset byte_9E8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000958                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000970                 Elf64_Sym <offset aPrognameFull - offset byte_9E8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000970                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000988                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9E8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000988                            offset __bss_start, 8>
LOAD:00000000000009A0                 Elf64_Sym <offset aStderr - offset byte_9E8, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000009A0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000009B8                 Elf64_Sym <offset aOptind - offset byte_9E8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000009B8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009D0                 Elf64_Sym <offset aOptarg - offset byte_9E8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000009D0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000009E8 ; ELF String Table
LOAD:00000000000009E8 byte_9E8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009E8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000009E9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000DA0↓o
LOAD:00000000000009F3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000009FA aFchmod         db 'fchmod',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:00000000000009FA                                         ; LOAD:00000000000007A8↑o
LOAD:0000000000000A01 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A0E aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000A18 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000A20 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A28 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000A2F aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A37 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A41 aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000A41                                         ; LOAD:00000000000004A8↑o
LOAD:0000000000000A48 aError          db 'error',0            ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A4E aFork           db 'fork',0             ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000A53 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000A64 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000A6D aMkdir          db 'mkdir',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A73 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A7B aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000A81 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A81                                         ; LOAD:0000000000000850↑o
LOAD:0000000000000A87 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A87                                         ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000A9F aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000AAD aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000AAD                                         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000AC4 aLchown         db 'lchown',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000ACB aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000AD2 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AD9 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000AE0 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000AF1 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000AF8 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B06 aFchown         db 'fchown',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000B06                                         ; LOAD:0000000000000730↑o
LOAD:0000000000000B0D aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000B14 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000B1A aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000B21 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000B21                                         ; LOAD:0000000000000580↑o
LOAD:0000000000000B28 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B2F aUmask          db 'umask',0            ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000B35 aRaise          db 'raise',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000B3B aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000B43 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000B4F aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000B5D aOpen2          db '__open_2',0         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000B66 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000B6D aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B78 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000B7F aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B8E aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000B9A aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000BA3 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000BAA aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000BB1 aWaitpid        db 'waitpid',0          ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000BB9 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000BC4 aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000BC9 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000BC9                                         ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000BE7 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000BF6 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000BFC aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000C04 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000C04                                         ; LOAD:0000000000000400↑o
LOAD:0000000000000C13 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000C23 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C23                                         ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000C35 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000C3C aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000C47 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000C56 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000C5B aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C66 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000C76 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000C83 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000DB0↓o
LOAD:0000000000000C8D aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000DC0↓o
LOAD:0000000000000C98 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000DD0↓o
LOAD:0000000000000CA2 aGlibc27        db 'GLIBC_2.7',0        ; DATA XREF: LOAD:0000000000000DE0↓o
LOAD:0000000000000CAC aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000DF0↓o
LOAD:0000000000000CB8 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000E00↓o
LOAD:0000000000000CC4 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000CC4                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000CE0 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000CEF aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000CEF                                         ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000D09                 align 2
LOAD:0000000000000D0A ; ELF GNU Symbol Version Table
LOAD:0000000000000D0A                 dw 0
LOAD:0000000000000D0C                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D0E                 dw 2                    ; raise@@GLIBC_2.2.5
LOAD:0000000000000D10                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D12                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D14                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D16                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D1A                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D1C                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D1E                 dw 2                    ; mkdir@@GLIBC_2.2.5
LOAD:0000000000000D20                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000D22                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D24                 dw 4                    ; __open_2@@GLIBC_2.7
LOAD:0000000000000D26                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D28                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D2A                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D2C                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D2E                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D30                 dw 2                    ; chdir@@GLIBC_2.2.5
LOAD:0000000000000D32                 dw 5                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D34                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D36                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D38                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000D3A                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D3C                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D3E                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D42                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D48                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D4A                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D4C                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D4E                 dw 2                    ; umask@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D52                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D5A                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D5C                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 2                    ; lchown@@GLIBC_2.2.5
LOAD:0000000000000D60                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D62                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:0000000000000D64                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D66                 dw 2                    ; chown@@GLIBC_2.2.5
LOAD:0000000000000D68                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D6A                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D6C                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D6E                 dw 2                    ; fchmod@@GLIBC_2.2.5
LOAD:0000000000000D70                 dw 2                    ; chmod@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000D74                 dw 2                    ; waitpid@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 2                    ; fchown@@GLIBC_2.2.5
LOAD:0000000000000D7C                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D82                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D84                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D86                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D88                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D8A                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D8C                 dw 2                    ; fork@@GLIBC_2.2.5
LOAD:0000000000000D8E                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D90                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D92                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D94                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D96                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D98                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000D9C                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000D9E                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000DA0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000DA0                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_9E8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000DB0                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_9E8, \ ; "GLIBC_2.3"
LOAD:0000000000000DB0                                10h>
LOAD:0000000000000DC0                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_9E8, \ ; "GLIBC_2.14"
LOAD:0000000000000DC0                                10h>
LOAD:0000000000000DD0                 Elf64_Vernaux <0D696914h, 0, 5, offset aGlibc24 - offset byte_9E8, \ ; "GLIBC_2.4"
LOAD:0000000000000DD0                                10h>
LOAD:0000000000000DE0                 Elf64_Vernaux <0D696917h, 0, 4, offset aGlibc27 - offset byte_9E8, \ ; "GLIBC_2.7"
LOAD:0000000000000DE0                                10h>
LOAD:0000000000000DF0                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_9E8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000DF0                                10h>
LOAD:0000000000000E00                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_9E8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000E10 ; ELF RELA Relocation Table
LOAD:0000000000000E10                 Elf64_Rela <20BA90h, 8, 1ED0h> ; R_X86_64_RELATIVE +1ED0h
LOAD:0000000000000E28                 Elf64_Rela <20BA98h, 8, 1E90h> ; R_X86_64_RELATIVE +1E90h
LOAD:0000000000000E40                 Elf64_Rela <20BAA0h, 8, 8850h> ; R_X86_64_RELATIVE +8850h
LOAD:0000000000000E58                 Elf64_Rela <20BAC0h, 8, 8858h> ; R_X86_64_RELATIVE +8858h
LOAD:0000000000000E70                 Elf64_Rela <20BAE0h, 8, 885Dh> ; R_X86_64_RELATIVE +885Dh
LOAD:0000000000000E88                 Elf64_Rela <20BB00h, 8, 8865h> ; R_X86_64_RELATIVE +8865h
LOAD:0000000000000EA0                 Elf64_Rela <20BB20h, 8, 886Dh> ; R_X86_64_RELATIVE +886Dh
LOAD:0000000000000EB8                 Elf64_Rela <20BB40h, 8, 8872h> ; R_X86_64_RELATIVE +8872h
LOAD:0000000000000ED0                 Elf64_Rela <20BB80h, 8, 8E01h> ; R_X86_64_RELATIVE +8E01h
LOAD:0000000000000EE8                 Elf64_Rela <20BB88h, 8, 8E09h> ; R_X86_64_RELATIVE +8E09h
LOAD:0000000000000F00                 Elf64_Rela <20BB90h, 8, 8E0Fh> ; R_X86_64_RELATIVE +8E0Fh
LOAD:0000000000000F18                 Elf64_Rela <20BB98h, 8, 8E1Ch> ; R_X86_64_RELATIVE +8E1Ch
LOAD:0000000000000F30                 Elf64_Rela <20BBA0h, 8, 8E29h> ; R_X86_64_RELATIVE +8E29h
LOAD:0000000000000F48                 Elf64_Rela <20BBA8h, 8, 8E3Dh> ; R_X86_64_RELATIVE +8E3Dh
LOAD:0000000000000F60                 Elf64_Rela <20BBB0h, 8, 8E3Fh> ; R_X86_64_RELATIVE +8E3Fh
LOAD:0000000000000F78                 Elf64_Rela <20BBB8h, 8, 8E22h> ; R_X86_64_RELATIVE +8E22h
LOAD:0000000000000F90                 Elf64_Rela <20BBC0h, 8, 87FEh> ; R_X86_64_RELATIVE +87FEh
LOAD:0000000000000FA8                 Elf64_Rela <20BBC8h, 8, 8E47h> ; R_X86_64_RELATIVE +8E47h
LOAD:0000000000000FC0                 Elf64_Rela <20C008h, 8, 20C008h> ; R_X86_64_RELATIVE +20C008h
LOAD:0000000000000FD8                 Elf64_Rela <20C010h, 8, 8C94h> ; R_X86_64_RELATIVE +8C94h
LOAD:0000000000000FF0                 Elf64_Rela <20C060h, 8, 20C070h> ; R_X86_64_RELATIVE +20C070h
LOAD:0000000000001008                 Elf64_Rela <20C078h, 8, 20C100h> ; R_X86_64_RELATIVE +20C100h
LOAD:0000000000001020                 Elf64_Rela <20BFC8h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001038                 Elf64_Rela <20BFD0h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001050                 Elf64_Rela <20BFD8h, 2100000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001068                 Elf64_Rela <20BFE0h, 3D00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001080                 Elf64_Rela <20BFE8h, 4000000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001098                 Elf64_Rela <20C080h, 4400000005h, 0> ; R_X86_64_COPY __progname
LOAD:00000000000010B0                 Elf64_Rela <20C088h, 4300000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000010C8                 Elf64_Rela <20C090h, 4900000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000010E0                 Elf64_Rela <20C098h, 4A00000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000010F8                 Elf64_Rela <20C0A0h, 4600000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001110                 Elf64_Rela <20C0C0h, 4800000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001128 ; ELF JMPREL Relocation Table
LOAD:0000000000001128                 Elf64_Rela <20BDE0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001140                 Elf64_Rela <20BDE8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT raise
LOAD:0000000000001158                 Elf64_Rela <20BDF0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001170                 Elf64_Rela <20BDF8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001188                 Elf64_Rela <20BE00h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000011A0                 Elf64_Rela <20BE08h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000011B8                 Elf64_Rela <20BE10h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000011D0                 Elf64_Rela <20BE18h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000011E8                 Elf64_Rela <20BE20h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT mkdir
LOAD:0000000000001200                 Elf64_Rela <20BE28h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001218                 Elf64_Rela <20BE30h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001230                 Elf64_Rela <20BE38h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __open_2
LOAD:0000000000001248                 Elf64_Rela <20BE40h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001260                 Elf64_Rela <20BE48h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001278                 Elf64_Rela <20BE50h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001290                 Elf64_Rela <20BE58h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000012A8                 Elf64_Rela <20BE60h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000012C0                 Elf64_Rela <20BE68h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT chdir
LOAD:00000000000012D8                 Elf64_Rela <20BE70h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000012F0                 Elf64_Rela <20BE78h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001308                 Elf64_Rela <20BE80h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001320                 Elf64_Rela <20BE88h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001338                 Elf64_Rela <20BE90h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001350                 Elf64_Rela <20BE98h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001368                 Elf64_Rela <20BEA0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001380                 Elf64_Rela <20BEA8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001398                 Elf64_Rela <20BEB0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000013B0                 Elf64_Rela <20BEB8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000013C8                 Elf64_Rela <20BEC0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000013E0                 Elf64_Rela <20BEC8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000013F8                 Elf64_Rela <20BED0h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT umask
LOAD:0000000000001410                 Elf64_Rela <20BED8h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001428                 Elf64_Rela <20BEE0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001440                 Elf64_Rela <20BEE8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001458                 Elf64_Rela <20BEF0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001470                 Elf64_Rela <20BEF8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001488                 Elf64_Rela <20BF00h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000014A0                 Elf64_Rela <20BF08h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000014B8                 Elf64_Rela <20BF10h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT lchown
LOAD:00000000000014D0                 Elf64_Rela <20BF18h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000014E8                 Elf64_Rela <20BF20h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:0000000000001500                 Elf64_Rela <20BF28h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001518                 Elf64_Rela <20BF30h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT chown
LOAD:0000000000001530                 Elf64_Rela <20BF38h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001548                 Elf64_Rela <20BF40h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001560                 Elf64_Rela <20BF48h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001578                 Elf64_Rela <20BF50h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fchmod
LOAD:0000000000001590                 Elf64_Rela <20BF58h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT chmod
LOAD:00000000000015A8                 Elf64_Rela <20BF60h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000015C0                 Elf64_Rela <20BF68h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT waitpid
LOAD:00000000000015D8                 Elf64_Rela <20BF70h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000015F0                 Elf64_Rela <20BF78h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001608                 Elf64_Rela <20BF80h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT fchown
LOAD:0000000000001620                 Elf64_Rela <20BF88h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001638                 Elf64_Rela <20BF90h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001650                 Elf64_Rela <20BF98h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001668                 Elf64_Rela <20BFA0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001680                 Elf64_Rela <20BFA8h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001698                 Elf64_Rela <20BFB0h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000016B0                 Elf64_Rela <20BFB8h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT fork
LOAD:00000000000016C8                 Elf64_Rela <20BFC0h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000016C8 LOAD            ends
LOAD:00000000000016C8
.init:00000000000016E0 ; ===========================================================================
.init:00000000000016E0
.init:00000000000016E0 ; Segment type: Pure code
.init:00000000000016E0 ; Segment permissions: Read/Execute
.init:00000000000016E0 _init           segment dword public 'CODE' use64
.init:00000000000016E0                 assume cs:_init
.init:00000000000016E0                 ;org 16E0h
.init:00000000000016E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000016E0
.init:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.init:00000000000016E0
.init:00000000000016E0
.init:00000000000016E0                 public _init_proc
.init:00000000000016E0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000016E0                 sub     rsp, 8          ; _init
.init:00000000000016E4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000016EB                 test    rax, rax
.init:00000000000016EE                 jz      short loc_16F2
.init:00000000000016F0                 call    rax ; __gmon_start__
.init:00000000000016F2
.init:00000000000016F2 loc_16F2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000016F2                 add     rsp, 8
.init:00000000000016F6                 retn
.init:00000000000016F6 _init_proc      endp
.init:00000000000016F6
.init:00000000000016F6 _init           ends
.init:00000000000016F6
LOAD:00000000000016F7 ; ===========================================================================
LOAD:00000000000016F7
LOAD:00000000000016F7 ; Segment type: Pure code
LOAD:00000000000016F7 ; Segment permissions: Read/Execute
LOAD:00000000000016F7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000016F7                 assume cs:LOAD
LOAD:00000000000016F7                 ;org 16F7h
LOAD:00000000000016F7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016F7                 align 20h
LOAD:00000000000016F7 LOAD            ends
LOAD:00000000000016F7
.plt:0000000000001700 ; ===========================================================================
.plt:0000000000001700
.plt:0000000000001700 ; Segment type: Pure code
.plt:0000000000001700 ; Segment permissions: Read/Execute
.plt:0000000000001700 _plt            segment para public 'CODE' use64
.plt:0000000000001700                 assume cs:_plt
.plt:0000000000001700                 ;org 1700h
.plt:0000000000001700                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700
.plt:0000000000001700 sub_1700        proc near               ; CODE XREF: .plt:000000000000171B↓j
.plt:0000000000001700                                         ; .plt:000000000000172B↓j ...
.plt:0000000000001700 ; __unwind {
.plt:0000000000001700                 push    cs:qword_20BDD0
.plt:0000000000001706                 jmp     cs:qword_20BDD8
.plt:0000000000001706 sub_1700        endp
.plt:0000000000001706
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:000000000000170C                 align 10h
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000001710                                         ; vasnprintf+6F0↓p ...
.plt:0000000000001710                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001710 ___snprintf_chk endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    0
.plt:000000000000171B                 jmp     sub_1700
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int raise(int sig)
.plt:0000000000001720 _raise          proc near               ; CODE XREF: savewd_restore+BC↓p
.plt:0000000000001720                 jmp     cs:raise_ptr
.plt:0000000000001720 _raise          endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    1
.plt:000000000000172B                 jmp     sub_1700
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; void free(void *ptr)
.plt:0000000000001730 _free           proc near               ; CODE XREF: main+258↓p
.plt:0000000000001730                                         ; mode_compile+B6↓p ...
.plt:0000000000001730                 jmp     cs:free_ptr
.plt:0000000000001730 _free           endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    2
.plt:000000000000173B                 jmp     sub_1700
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: noreturn thunk
.plt:0000000000001740
.plt:0000000000001740 ; void __noreturn abort(void)
.plt:0000000000001740 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001740                                         ; quotearg_buffer_restyled:def_31C1↓p ...
.plt:0000000000001740                 jmp     cs:abort_ptr
.plt:0000000000001740 _abort          endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    3
.plt:000000000000174B                 jmp     sub_1700
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; int *__errno_location(void)
.plt:0000000000001750 ___errno_location proc near             ; CODE XREF: process_dir+4E↓p
.plt:0000000000001750                                         ; process_dir+77↓p ...
.plt:0000000000001750                 jmp     cs:__errno_location_ptr
.plt:0000000000001750 ___errno_location endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    4
.plt:000000000000175B                 jmp     sub_1700
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001760 _strncmp        proc near               ; CODE XREF: usage+274↓p
.plt:0000000000001760                                         ; usage+335↓p
.plt:0000000000001760                 jmp     cs:strncmp_ptr
.plt:0000000000001760 _strncmp        endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    5
.plt:000000000000176B                 jmp     sub_1700
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: noreturn thunk
.plt:0000000000001770
.plt:0000000000001770 ; void __noreturn _exit(int status)
.plt:0000000000001770 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001770                                         ; savewd_restore+14E↓p
.plt:0000000000001770                 jmp     cs:_exit_ptr
.plt:0000000000001770 __exit          endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    6
.plt:000000000000177B                 jmp     sub_1700
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; size_t __fpending(FILE *fp)
.plt:0000000000001780 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001780                 jmp     cs:__fpending_ptr
.plt:0000000000001780 ___fpending     endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    7
.plt:000000000000178B                 jmp     sub_1700
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; int mkdir(const char *path, __mode_t mode)
.plt:0000000000001790 _mkdir          proc near               ; CODE XREF: make_ancestor+33↓p
.plt:0000000000001790                                         ; make_ancestor+79↓p ...
.plt:0000000000001790                 jmp     cs:mkdir_ptr
.plt:0000000000001790 _mkdir          endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    8
.plt:000000000000179B                 jmp     sub_1700
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; int fcntl(int fd, int cmd, ...)
.plt:00000000000017A0 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:00000000000017A0                                         ; rpl_fcntl+D4↓p ...
.plt:00000000000017A0                 jmp     cs:fcntl_ptr
.plt:00000000000017A0 _fcntl          endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    9
.plt:00000000000017AB                 jmp     sub_1700
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; char *textdomain(const char *domainname)
.plt:00000000000017B0 _textdomain     proc near               ; CODE XREF: main+7D↓p
.plt:00000000000017B0                 jmp     cs:textdomain_ptr
.plt:00000000000017B0 _textdomain     endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    0Ah
.plt:00000000000017BB                 jmp     sub_1700
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ___open_2       proc near               ; CODE XREF: savewd_chdir+31↓p
.plt:00000000000017C0                                         ; savewd_chdir+15A↓p
.plt:00000000000017C0                 jmp     cs:__open_2_ptr
.plt:00000000000017C0 ___open_2       endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    0Bh
.plt:00000000000017CB                 jmp     sub_1700
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; int fclose(FILE *stream)
.plt:00000000000017D0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000017D0                                         ; rpl_fclose+6B↓j
.plt:00000000000017D0                 jmp     cs:fclose_ptr
.plt:00000000000017D0 _fclose         endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    0Ch
.plt:00000000000017DB                 jmp     sub_1700
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000017E0 _bindtextdomain proc near               ; CODE XREF: main+71↓p
.plt:00000000000017E0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000017E0 _bindtextdomain endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    0Dh
.plt:00000000000017EB                 jmp     sub_1700
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000017F0 _dcgettext      proc near               ; CODE XREF: main+14C↓p
.plt:00000000000017F0                                         ; main+176↓p ...
.plt:00000000000017F0                 jmp     cs:dcgettext_ptr
.plt:00000000000017F0 _dcgettext      endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    0Eh
.plt:00000000000017FB                 jmp     sub_1700
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001800 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001800                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001800 ___ctype_get_mb_cur_max endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    0Fh
.plt:000000000000180B                 jmp     sub_1700
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; size_t strlen(const char *s)
.plt:0000000000001810 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001810                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001810                 jmp     cs:strlen_ptr
.plt:0000000000001810 _strlen         endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    10h
.plt:000000000000181B                 jmp     sub_1700
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; int chdir(const char *path)
.plt:0000000000001820 _chdir          proc near               ; CODE XREF: savewd_chdir+11B↓p
.plt:0000000000001820                 jmp     cs:chdir_ptr
.plt:0000000000001820 _chdir          endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    11h
.plt:000000000000182B                 jmp     sub_1700
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: noreturn thunk
.plt:0000000000001830
.plt:0000000000001830 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1D96↓p
.plt:0000000000001830                                         ; prog_fprintf:loc_253F↓p ...
.plt:0000000000001830                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001830 ___stack_chk_fail endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    12h
.plt:000000000000183B                 jmp     sub_1700
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001840 _getopt_long    proc near               ; CODE XREF: main+A4↓p
.plt:0000000000001840                 jmp     cs:getopt_long_ptr
.plt:0000000000001840 _getopt_long    endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    13h
.plt:000000000000184B                 jmp     sub_1700
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001850 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001850                 jmp     cs:mbrtowc_ptr
.plt:0000000000001850 _mbrtowc        endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    14h
.plt:000000000000185B                 jmp     sub_1700
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001860 ___overflow     proc near               ; CODE XREF: prog_fprintf+108↓p
.plt:0000000000001860                 jmp     cs:__overflow_ptr
.plt:0000000000001860 ___overflow     endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    15h
.plt:000000000000186B                 jmp     sub_1700
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; char *strrchr(const char *s, int c)
.plt:0000000000001870 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001870                 jmp     cs:strrchr_ptr
.plt:0000000000001870 _strrchr        endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    16h
.plt:000000000000187B                 jmp     sub_1700
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001880 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001880                                         ; rpl_fseeko+3B↓p
.plt:0000000000001880                 jmp     cs:lseek_ptr
.plt:0000000000001880 _lseek          endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    17h
.plt:000000000000188B                 jmp     sub_1700
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: noreturn thunk
.plt:0000000000001890
.plt:0000000000001890 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001890 ___assert_fail  proc near               ; CODE XREF: savewd_chdir+1D7↓p
.plt:0000000000001890                                         ; savewd_chdir+285↓p ...
.plt:0000000000001890                 jmp     cs:__assert_fail_ptr
.plt:0000000000001890 ___assert_fail  endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    18h
.plt:000000000000189B                 jmp     sub_1700
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000018A0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000018A0                                         ; xzalloc+12↓j
.plt:00000000000018A0                 jmp     cs:memset_ptr
.plt:00000000000018A0 _memset         endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    19h
.plt:00000000000018AB                 jmp     sub_1700
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; int close(int fd)
.plt:00000000000018B0 _close          proc near               ; CODE XREF: savewd_chdir+6D↓p
.plt:00000000000018B0                                         ; savewd_restore+F5↓p ...
.plt:00000000000018B0                 jmp     cs:close_ptr
.plt:00000000000018B0 _close          endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    1Ah
.plt:00000000000018BB                 jmp     sub_1700
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000018C0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000018C0                 jmp     cs:memcmp_ptr
.plt:00000000000018C0 _memcmp         endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    1Bh
.plt:00000000000018CB                 jmp     sub_1700
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000018D0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000018D0                                         ; usage+C2↓p ...
.plt:00000000000018D0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000018D0 _fputs_unlocked endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    1Ch
.plt:00000000000018DB                 jmp     sub_1700
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000018E0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000018E0                 jmp     cs:calloc_ptr
.plt:00000000000018E0 _calloc         endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    1Dh
.plt:00000000000018EB                 jmp     sub_1700
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; __mode_t umask(__mode_t mask)
.plt:00000000000018F0 _umask          proc near               ; CODE XREF: main+1A6↓p
.plt:00000000000018F0                                         ; main+1B0↓p ...
.plt:00000000000018F0                 jmp     cs:umask_ptr
.plt:00000000000018F0 _umask          endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    1Eh
.plt:00000000000018FB                 jmp     sub_1700
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001900 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001900                                         ; vasnprintf+2AE↓p ...
.plt:0000000000001900                 jmp     cs:memcpy_ptr
.plt:0000000000001900 _memcpy         endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    1Fh
.plt:000000000000190B                 jmp     sub_1700
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; int fileno(FILE *stream)
.plt:0000000000001910 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001910                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001910                 jmp     cs:fileno_ptr
.plt:0000000000001910 _fileno         endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    20h ; ' '
.plt:000000000000191B                 jmp     sub_1700
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001920 ___xstat        proc near               ; CODE XREF: make_dir_parents+125↓p
.plt:0000000000001920                                         ; mode_create_from_ref+26↓p ...
.plt:0000000000001920                 jmp     cs:__xstat_ptr
.plt:0000000000001920 ___xstat        endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    21h ; '!'
.plt:000000000000192B                 jmp     sub_1700
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; void *malloc(size_t size)
.plt:0000000000001930 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001930                                         ; vasnprintf+D2↓p ...
.plt:0000000000001930                 jmp     cs:malloc_ptr
.plt:0000000000001930 _malloc         endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    22h ; '"'
.plt:000000000000193B                 jmp     sub_1700
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; int fflush(FILE *stream)
.plt:0000000000001940 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001940                                         ; rpl_fflush+3B↓j
.plt:0000000000001940                 jmp     cs:fflush_ptr
.plt:0000000000001940 _fflush         endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    23h ; '#'
.plt:000000000000194B                 jmp     sub_1700
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; char *nl_langinfo(nl_item item)
.plt:0000000000001950 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001950                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001950 _nl_langinfo    endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    24h ; '$'
.plt:000000000000195B                 jmp     sub_1700
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001960 ___fxstat       proc near               ; CODE XREF: dirchownmod+4B↓p
.plt:0000000000001960                 jmp     cs:__fxstat_ptr
.plt:0000000000001960 ___fxstat       endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    25h ; '%'
.plt:000000000000196B                 jmp     sub_1700
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; int lchown(const char *file, __uid_t owner, __gid_t group)
.plt:0000000000001970 _lchown         proc near               ; CODE XREF: dirchownmod+A5↓p
.plt:0000000000001970                 jmp     cs:lchown_ptr
.plt:0000000000001970 _lchown         endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    26h ; '&'
.plt:000000000000197B                 jmp     sub_1700
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; int __freading(FILE *fp)
.plt:0000000000001980 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001980                                         ; rpl_fflush+9↓p
.plt:0000000000001980                 jmp     cs:__freading_ptr
.plt:0000000000001980 ___freading     endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    27h ; '''
.plt:000000000000198B                 jmp     sub_1700
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; int fchdir(int fd)
.plt:0000000000001990 _fchdir         proc near               ; CODE XREF: savewd_chdir+EA↓p
.plt:0000000000001990                                         ; savewd_restore+D3↓p
.plt:0000000000001990                 jmp     cs:fchdir_ptr
.plt:0000000000001990 _fchdir         endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    28h ; '('
.plt:000000000000199B                 jmp     sub_1700
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000019A0 _fwrite_unlocked proc near              ; CODE XREF: prog_fprintf+91↓p
.plt:00000000000019A0                 jmp     cs:fwrite_unlocked_ptr
.plt:00000000000019A0 _fwrite_unlocked endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    29h ; ')'
.plt:00000000000019AB                 jmp     sub_1700
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int chown(const char *file, __uid_t owner, __gid_t group)
.plt:00000000000019B0 _chown          proc near               ; CODE XREF: dirchownmod:loc_6240↓p
.plt:00000000000019B0                 jmp     cs:chown_ptr
.plt:00000000000019B0 _chown          endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    2Ah ; '*'
.plt:00000000000019BB                 jmp     sub_1700
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000019C0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000019C0                                         ; vasnprintf+285↓p ...
.plt:00000000000019C0                 jmp     cs:realloc_ptr
.plt:00000000000019C0 _realloc        endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    2Bh ; '+'
.plt:00000000000019CB                 jmp     sub_1700
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; char *setlocale(int category, const char *locale)
.plt:00000000000019D0 _setlocale      proc near               ; CODE XREF: main+5E↓p
.plt:00000000000019D0                                         ; usage+25B↓p ...
.plt:00000000000019D0                 jmp     cs:setlocale_ptr
.plt:00000000000019D0 _setlocale      endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    2Ch ; ','
.plt:00000000000019DB                 jmp     sub_1700
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000019E0                                         ; usage+24F↓p ...
.plt:00000000000019E0                 jmp     cs:__printf_chk_ptr
.plt:00000000000019E0 ___printf_chk   endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    2Dh ; '-'
.plt:00000000000019EB                 jmp     sub_1700
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; int fchmod(int fd, __mode_t mode)
.plt:00000000000019F0 _fchmod         proc near               ; CODE XREF: dirchownmod+1F2↓p
.plt:00000000000019F0                 jmp     cs:fchmod_ptr
.plt:00000000000019F0 _fchmod         endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    2Eh ; '.'
.plt:00000000000019FB                 jmp     sub_1700
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int chmod(const char *file, __mode_t mode)
.plt:0000000000001A00 _chmod          proc near               ; CODE XREF: dirchownmod+18E↓p
.plt:0000000000001A00                 jmp     cs:chmod_ptr
.plt:0000000000001A00 _chmod          endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    2Fh ; '/'
.plt:0000000000001A0B                 jmp     sub_1700
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001A10 _error          proc near               ; CODE XREF: main+15A↓p
.plt:0000000000001A10                                         ; main+2A1↓p ...
.plt:0000000000001A10                 jmp     cs:error_ptr
.plt:0000000000001A10 _error          endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    30h ; '0'
.plt:0000000000001A1B                 jmp     sub_1700
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
.plt:0000000000001A20 _waitpid        proc near               ; CODE XREF: savewd_restore+A1↓p
.plt:0000000000001A20                 jmp     cs:waitpid_ptr
.plt:0000000000001A20 _waitpid        endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    31h ; '1'
.plt:0000000000001A2B                 jmp     sub_1700
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int open(const char *file, int oflag, ...)
.plt:0000000000001A30 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000001A30                 jmp     cs:open_ptr
.plt:0000000000001A30 _open           endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    32h ; '2'
.plt:0000000000001A3B                 jmp     sub_1700
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001A40 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_638A↓j
.plt:0000000000001A40                 jmp     cs:fseeko_ptr
.plt:0000000000001A40 _fseeko         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    33h ; '3'
.plt:0000000000001A4B                 jmp     sub_1700
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; int fchown(int fd, __uid_t owner, __gid_t group)
.plt:0000000000001A50 _fchown         proc near               ; CODE XREF: dirchownmod+1A2↓p
.plt:0000000000001A50                 jmp     cs:fchown_ptr
.plt:0000000000001A50 _fchown         endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    34h ; '4'
.plt:0000000000001A5B                 jmp     sub_1700
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001A60 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001A60                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001A60 ___cxa_atexit   endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    35h ; '5'
.plt:0000000000001A6B                 jmp     sub_1700
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: noreturn thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; void __noreturn exit(int status)
.plt:0000000000001A70 _exit           proc near               ; CODE XREF: main+12A↓p
.plt:0000000000001A70                                         ; usage+58↓p
.plt:0000000000001A70                 jmp     cs:exit_ptr
.plt:0000000000001A70 _exit           endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    36h ; '6'
.plt:0000000000001A7B                 jmp     sub_1700
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001A80 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001A80                                         ; rpl_vfprintf+66↓p
.plt:0000000000001A80                 jmp     cs:fwrite_ptr
.plt:0000000000001A80 _fwrite         endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    37h ; '7'
.plt:0000000000001A8B                 jmp     sub_1700
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001A90                                         ; version_etc_arn+37↓p ...
.plt:0000000000001A90                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001A90 ___fprintf_chk  endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    38h ; '8'
.plt:0000000000001A9B                 jmp     sub_1700
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001AA0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001AA0                 jmp     cs:mbsinit_ptr
.plt:0000000000001AA0 _mbsinit        endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    39h ; '9'
.plt:0000000000001AAB                 jmp     sub_1700
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; int iswprint(wint_t wc)
.plt:0000000000001AB0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001AB0                 jmp     cs:iswprint_ptr
.plt:0000000000001AB0 _iswprint       endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    3Ah ; ':'
.plt:0000000000001ABB                 jmp     sub_1700
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; __pid_t fork(void)
.plt:0000000000001AC0 _fork           proc near               ; CODE XREF: savewd_chdir:loc_4F19↓p
.plt:0000000000001AC0                 jmp     cs:fork_ptr
.plt:0000000000001AC0 _fork           endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    3Bh ; ';'
.plt:0000000000001ACB                 jmp     sub_1700
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001AD0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001AD0                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001AD0 ___ctype_b_loc  endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    3Ch ; '<'
.plt:0000000000001ADB                 jmp     sub_1700
.plt:0000000000001ADB ; } // starts at 1700
.plt:0000000000001ADB _plt            ends
.plt:0000000000001ADB
.plt.got:0000000000001AE0 ; ===========================================================================
.plt.got:0000000000001AE0
.plt.got:0000000000001AE0 ; Segment type: Pure code
.plt.got:0000000000001AE0 ; Segment permissions: Read/Execute
.plt.got:0000000000001AE0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001AE0                 assume cs:_plt_got
.plt.got:0000000000001AE0                 ;org 1AE0h
.plt.got:0000000000001AE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001AE0
.plt.got:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001AE0
.plt.got:0000000000001AE0 ; Attributes: thunk
.plt.got:0000000000001AE0
.plt.got:0000000000001AE0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001AE0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001AE0 ; __unwind {
.plt.got:0000000000001AE0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001AE0 __cxa_finalize  endp
.plt.got:0000000000001AE0
.plt.got:0000000000001AE0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001AE6                 align 8
.plt.got:0000000000001AE6 ; } // starts at 1AE0
.plt.got:0000000000001AE6 _plt_got        ends
.plt.got:0000000000001AE6
LOAD:0000000000001AE8 ; ===========================================================================
LOAD:0000000000001AE8
LOAD:0000000000001AE8 ; Segment type: Pure code
LOAD:0000000000001AE8 ; Segment permissions: Read/Execute
LOAD:0000000000001AE8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001AE8                 assume cs:LOAD
LOAD:0000000000001AE8                 ;org 1AE8h
LOAD:0000000000001AE8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001AE8                 align 10h
LOAD:0000000000001AE8 LOAD            ends
LOAD:0000000000001AE8
.text:0000000000001AF0 ; ===========================================================================
.text:0000000000001AF0
.text:0000000000001AF0 ; Segment type: Pure code
.text:0000000000001AF0 ; Segment permissions: Read/Execute
.text:0000000000001AF0 _text           segment para public 'CODE' use64
.text:0000000000001AF0                 assume cs:_text
.text:0000000000001AF0                 ;org 1AF0h
.text:0000000000001AF0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001AF0
.text:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AF0
.text:0000000000001AF0
.text:0000000000001AF0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001AF0                 public main
.text:0000000000001AF0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001AF0
.text:0000000000001AF0 var_58          = qword ptr -58h
.text:0000000000001AF0 var_50          = dword ptr -50h
.text:0000000000001AF0 var_4C          = qword ptr -4Ch
.text:0000000000001AF0 var_44          = byte ptr -44h
.text:0000000000001AF0 var_40          = qword ptr -40h
.text:0000000000001AF0 var_30          = qword ptr -30h
.text:0000000000001AF0
.text:0000000000001AF0 ; __unwind {
.text:0000000000001AF0                 push    r14
.text:0000000000001AF2                 push    r13
.text:0000000000001AF4                 lea     r13, make_ancestor
.text:0000000000001AFB                 push    r12
.text:0000000000001AFD                 push    rbp
.text:0000000000001AFE                 mov     ebp, edi
.text:0000000000001B00                 push    rbx
.text:0000000000001B01                 mov     rbx, rsi
.text:0000000000001B04                 xor     r12d, r12d
.text:0000000000001B07                 sub     rsp, 30h
.text:0000000000001B0B                 mov     rdi, [rsi]
.text:0000000000001B0E                 mov     rax, fs:28h
.text:0000000000001B17                 mov     [rsp+58h+var_30], rax
.text:0000000000001B1C                 xor     eax, eax
.text:0000000000001B1E                 mov     [rsp+58h+var_58], 0
.text:0000000000001B26                 mov     [rsp+58h+var_4C], 1FFh
.text:0000000000001B2F                 mov     [rsp+58h+var_40], 0
.text:0000000000001B38                 mov     [rsp+58h+var_44], 0
.text:0000000000001B3D                 call    set_program_name
.text:0000000000001B42                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001B49                 mov     edi, 6          ; category
.text:0000000000001B4E                 call    _setlocale
.text:0000000000001B53                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001B5A                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B61                 call    _bindtextdomain
.text:0000000000001B66                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B6D                 call    _textdomain
.text:0000000000001B72                 lea     rdi, close_stdout
.text:0000000000001B79                 call    atexit
.text:0000000000001B7E
.text:0000000000001B7E loc_1B7E:                               ; CODE XREF: main+E7↓j
.text:0000000000001B7E                                         ; main+138↓j ...
.text:0000000000001B7E                 lea     rcx, longopts   ; longopts
.text:0000000000001B85                 lea     rdx, shortopts  ; "pm:vZ"
.text:0000000000001B8C                 xor     r8d, r8d        ; longind
.text:0000000000001B8F                 mov     rsi, rbx        ; argv
.text:0000000000001B92                 mov     edi, ebp        ; argc
.text:0000000000001B94                 call    _getopt_long
.text:0000000000001B99                 cmp     eax, 0FFFFFFFFh
.text:0000000000001B9C                 jz      loc_1C81
.text:0000000000001BA2                 cmp     eax, 5Ah ; 'Z'
.text:0000000000001BA5                 jz      short loc_1C20
.text:0000000000001BA7                 jle     short loc_1BE0
.text:0000000000001BA9                 cmp     eax, 70h ; 'p'
.text:0000000000001BAC                 jz      loc_1C78
.text:0000000000001BB2                 cmp     eax, 76h ; 'v'
.text:0000000000001BB5                 jz      loc_1C58
.text:0000000000001BBB                 cmp     eax, 6Dh ; 'm'
.text:0000000000001BBE                 jz      short loc_1BD0
.text:0000000000001BC0
.text:0000000000001BC0 loc_1BC0:                               ; CODE XREF: main+267↓j
.text:0000000000001BC0                                         ; main+2CC↓j
.text:0000000000001BC0                 mov     edi, 1          ; status
.text:0000000000001BC5                 call    usage
.text:0000000000001BC5 ; ---------------------------------------------------------------------------
.text:0000000000001BCA                 align 10h
.text:0000000000001BD0
.text:0000000000001BD0 loc_1BD0:                               ; CODE XREF: main+CE↑j
.text:0000000000001BD0                 mov     r12, cs:optarg@@GLIBC_2_2_5
.text:0000000000001BD7                 jmp     short loc_1B7E
.text:0000000000001BD7 ; ---------------------------------------------------------------------------
.text:0000000000001BD9                 align 20h
.text:0000000000001BE0
.text:0000000000001BE0 loc_1BE0:                               ; CODE XREF: main+B7↑j
.text:0000000000001BE0                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001BE5                 jnz     loc_1D52
.text:0000000000001BEB                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BF2                 mov     rcx, cs:Version
.text:0000000000001BF9                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001C00                 lea     rdx, unk_87C0
.text:0000000000001C07                 lea     rsi, aMkdir_0   ; "mkdir"
.text:0000000000001C0E                 xor     r9d, r9d
.text:0000000000001C11                 xor     eax, eax
.text:0000000000001C13                 call    version_etc
.text:0000000000001C18                 xor     edi, edi        ; status
.text:0000000000001C1A                 call    _exit
.text:0000000000001C1A ; ---------------------------------------------------------------------------
.text:0000000000001C1F                 align 20h
.text:0000000000001C20
.text:0000000000001C20 loc_1C20:                               ; CODE XREF: main+B5↑j
.text:0000000000001C20                 cmp     cs:optarg@@GLIBC_2_2_5, 0
.text:0000000000001C28                 jz      loc_1B7E
.text:0000000000001C2E                 lea     rsi, msgid      ; "warning: ignoring --context; it require"...
.text:0000000000001C35                 xor     edi, edi        ; domainname
.text:0000000000001C37                 mov     edx, 5          ; category
.text:0000000000001C3C                 call    _dcgettext
.text:0000000000001C41                 xor     esi, esi        ; errnum
.text:0000000000001C43                 mov     rdx, rax        ; format
.text:0000000000001C46                 xor     edi, edi        ; status
.text:0000000000001C48                 xor     eax, eax
.text:0000000000001C4A                 call    _error
.text:0000000000001C4F                 jmp     loc_1B7E
.text:0000000000001C4F ; ---------------------------------------------------------------------------
.text:0000000000001C54                 align 8
.text:0000000000001C58
.text:0000000000001C58 loc_1C58:                               ; CODE XREF: main+C5↑j
.text:0000000000001C58                 lea     rsi, aCreatedDirecto ; "created directory %s"
.text:0000000000001C5F                 mov     edx, 5          ; category
.text:0000000000001C64                 xor     edi, edi        ; domainname
.text:0000000000001C66                 call    _dcgettext
.text:0000000000001C6B                 mov     [rsp+58h+var_40], rax
.text:0000000000001C70                 jmp     loc_1B7E
.text:0000000000001C70 ; ---------------------------------------------------------------------------
.text:0000000000001C75                 align 8
.text:0000000000001C78
.text:0000000000001C78 loc_1C78:                               ; CODE XREF: main+BC↑j
.text:0000000000001C78                 mov     [rsp+58h+var_58], r13
.text:0000000000001C7C                 jmp     loc_1B7E
.text:0000000000001C81 ; ---------------------------------------------------------------------------
.text:0000000000001C81
.text:0000000000001C81 loc_1C81:                               ; CODE XREF: main+AC↑j
.text:0000000000001C81                 cmp     cs:optind@@GLIBC_2_2_5, ebp
.text:0000000000001C87                 jz      loc_1D9B
.text:0000000000001C8D                 cmp     [rsp+58h+var_58], 0
.text:0000000000001C92                 jz      short loc_1CF9
.text:0000000000001C94                 xor     edi, edi        ; mask
.text:0000000000001C96                 call    _umask
.text:0000000000001C9B                 mov     edi, eax        ; mask
.text:0000000000001C9D                 mov     r13d, eax
.text:0000000000001CA0                 call    _umask
.text:0000000000001CA5                 test    r12, r12
.text:0000000000001CA8                 mov     [rsp+58h+var_50], r13d
.text:0000000000001CAD                 jnz     short loc_1D14
.text:0000000000001CAF                 mov     dword ptr [rsp+58h+var_4C], 1FFh
.text:0000000000001CB7
.text:0000000000001CB7 loc_1CB7:                               ; CODE XREF: main+20C↓j
.text:0000000000001CB7                 mov     r12, rsp
.text:0000000000001CBA
.text:0000000000001CBA loc_1CBA:                               ; CODE XREF: main+25D↓j
.text:0000000000001CBA                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:0000000000001CC1                 mov     edi, ebp
.text:0000000000001CC3                 mov     rcx, r12
.text:0000000000001CC6                 sub     edi, edx
.text:0000000000001CC8                 lea     rsi, [rbx+rdx*8]
.text:0000000000001CCC                 lea     rdx, process_dir
.text:0000000000001CD3                 call    savewd_process_files
.text:0000000000001CD8                 mov     rcx, [rsp+58h+var_30]
.text:0000000000001CDD                 xor     rcx, fs:28h
.text:0000000000001CE6                 jnz     loc_1D96
.text:0000000000001CEC                 add     rsp, 30h
.text:0000000000001CF0                 pop     rbx
.text:0000000000001CF1                 pop     rbp
.text:0000000000001CF2                 pop     r12
.text:0000000000001CF4                 pop     r13
.text:0000000000001CF6                 pop     r14
.text:0000000000001CF8                 retn
.text:0000000000001CF9 ; ---------------------------------------------------------------------------
.text:0000000000001CF9
.text:0000000000001CF9 loc_1CF9:                               ; CODE XREF: main+1A2↑j
.text:0000000000001CF9                 test    r12, r12
.text:0000000000001CFC                 jz      short loc_1CB7
.text:0000000000001CFE                 xor     edi, edi        ; mask
.text:0000000000001D00                 call    _umask
.text:0000000000001D05                 mov     r13d, eax
.text:0000000000001D08                 mov     edi, eax        ; mask
.text:0000000000001D0A                 call    _umask
.text:0000000000001D0F                 mov     [rsp+58h+var_50], r13d
.text:0000000000001D14
.text:0000000000001D14 loc_1D14:                               ; CODE XREF: main+1BD↑j
.text:0000000000001D14                 mov     rdi, r12
.text:0000000000001D17                 call    mode_compile
.text:0000000000001D1C                 test    rax, rax
.text:0000000000001D1F                 mov     r14, rax
.text:0000000000001D22                 jz      short loc_1D64
.text:0000000000001D24                 mov     r12, rsp
.text:0000000000001D27                 mov     rcx, rax
.text:0000000000001D2A                 mov     edx, r13d
.text:0000000000001D2D                 lea     r8, [r12+10h]
.text:0000000000001D32                 mov     esi, 1
.text:0000000000001D37                 mov     edi, 1FFh
.text:0000000000001D3C                 call    mode_adjust
.text:0000000000001D41                 mov     rdi, r14        ; ptr
.text:0000000000001D44                 mov     dword ptr [rsp+58h+var_4C], eax
.text:0000000000001D48                 call    _free
.text:0000000000001D4D                 jmp     loc_1CBA
.text:0000000000001D52 ; ---------------------------------------------------------------------------
.text:0000000000001D52
.text:0000000000001D52 loc_1D52:                               ; CODE XREF: main+F5↑j
.text:0000000000001D52                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001D57                 jnz     loc_1BC0
.text:0000000000001D5D                 xor     edi, edi        ; status
.text:0000000000001D5F                 call    usage
.text:0000000000001D64 ; ---------------------------------------------------------------------------
.text:0000000000001D64
.text:0000000000001D64 loc_1D64:                               ; CODE XREF: main+232↑j
.text:0000000000001D64                 mov     rdi, r12
.text:0000000000001D67                 call    quote
.text:0000000000001D6C                 lea     rsi, aInvalidModeS ; "invalid mode %s"
.text:0000000000001D73                 mov     rbx, rax
.text:0000000000001D76                 mov     edx, 5          ; category
.text:0000000000001D7B                 xor     edi, edi        ; domainname
.text:0000000000001D7D                 call    _dcgettext
.text:0000000000001D82                 mov     rcx, rbx
.text:0000000000001D85                 mov     rdx, rax        ; format
.text:0000000000001D88                 xor     esi, esi        ; errnum
.text:0000000000001D8A                 mov     edi, 1          ; status
.text:0000000000001D8F                 xor     eax, eax
.text:0000000000001D91                 call    _error
.text:0000000000001D96
.text:0000000000001D96 loc_1D96:                               ; CODE XREF: main+1F6↑j
.text:0000000000001D96                 call    ___stack_chk_fail
.text:0000000000001D9B ; ---------------------------------------------------------------------------
.text:0000000000001D9B
.text:0000000000001D9B loc_1D9B:                               ; CODE XREF: main+197↑j
.text:0000000000001D9B                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000001DA2                 xor     edi, edi        ; domainname
.text:0000000000001DA4                 mov     edx, 5          ; category
.text:0000000000001DA9                 call    _dcgettext
.text:0000000000001DAE                 xor     esi, esi        ; errnum
.text:0000000000001DB0                 mov     rdx, rax        ; format
.text:0000000000001DB3                 xor     edi, edi        ; status
.text:0000000000001DB5                 xor     eax, eax
.text:0000000000001DB7                 call    _error
.text:0000000000001DBC                 jmp     loc_1BC0
.text:0000000000001DBC ; } // starts at 1AF0
.text:0000000000001DBC main            endp
.text:0000000000001DBC
.text:0000000000001DBC ; ---------------------------------------------------------------------------
.text:0000000000001DC1                 align 10h
.text:0000000000001DD0
.text:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DD0
.text:0000000000001DD0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001DD0
.text:0000000000001DD0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001DD0                 public start
.text:0000000000001DD0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001DD0 ; __unwind {
.text:0000000000001DD0                 xor     ebp, ebp
.text:0000000000001DD2                 mov     r9, rdx         ; rtld_fini
.text:0000000000001DD5                 pop     rsi             ; argc
.text:0000000000001DD6                 mov     rdx, rsp        ; ubp_av
.text:0000000000001DD9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001DDD                 push    rax
.text:0000000000001DDE                 push    rsp             ; stack_end
.text:0000000000001DDF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001DE6                 lea     rcx, __libc_csu_init ; init
.text:0000000000001DED                 lea     rdi, main       ; main
.text:0000000000001DF4                 call    cs:__libc_start_main_ptr
.text:0000000000001DFA                 hlt
.text:0000000000001DFA ; } // starts at 1DD0
.text:0000000000001DFA start           endp
.text:0000000000001DFA
.text:0000000000001DFA ; ---------------------------------------------------------------------------
.text:0000000000001DFB                 align 20h
.text:0000000000001E00
.text:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E00
.text:0000000000001E00 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001E00
.text:0000000000001E00 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1EB3↓p
.text:0000000000001E00                 lea     rdi, __bss_start
.text:0000000000001E07                 push    rbp
.text:0000000000001E08                 lea     rax, __bss_start
.text:0000000000001E0F                 cmp     rax, rdi
.text:0000000000001E12                 mov     rbp, rsp
.text:0000000000001E15                 jz      short loc_1E30
.text:0000000000001E17                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001E1E                 test    rax, rax
.text:0000000000001E21                 jz      short loc_1E30
.text:0000000000001E23                 pop     rbp
.text:0000000000001E24                 jmp     rax
.text:0000000000001E24 ; ---------------------------------------------------------------------------
.text:0000000000001E26                 align 10h
.text:0000000000001E30
.text:0000000000001E30 loc_1E30:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001E30                                         ; deregister_tm_clones+21↑j
.text:0000000000001E30                 pop     rbp
.text:0000000000001E31                 retn
.text:0000000000001E31 deregister_tm_clones endp
.text:0000000000001E31
.text:0000000000001E31 ; ---------------------------------------------------------------------------
.text:0000000000001E32                 align 20h
.text:0000000000001E40
.text:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E40
.text:0000000000001E40 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001E40
.text:0000000000001E40 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001E40                 lea     rdi, __bss_start
.text:0000000000001E47                 lea     rsi, __bss_start
.text:0000000000001E4E                 push    rbp
.text:0000000000001E4F                 sub     rsi, rdi
.text:0000000000001E52                 mov     rbp, rsp
.text:0000000000001E55                 sar     rsi, 3
.text:0000000000001E59                 mov     rax, rsi
.text:0000000000001E5C                 shr     rax, 3Fh
.text:0000000000001E60                 add     rsi, rax
.text:0000000000001E63                 sar     rsi, 1
.text:0000000000001E66                 jz      short loc_1E80
.text:0000000000001E68                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001E6F                 test    rax, rax
.text:0000000000001E72                 jz      short loc_1E80
.text:0000000000001E74                 pop     rbp
.text:0000000000001E75                 jmp     rax
.text:0000000000001E75 ; ---------------------------------------------------------------------------
.text:0000000000001E77                 align 20h
.text:0000000000001E80
.text:0000000000001E80 loc_1E80:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001E80                                         ; register_tm_clones+32↑j
.text:0000000000001E80                 pop     rbp
.text:0000000000001E81                 retn
.text:0000000000001E81 register_tm_clones endp
.text:0000000000001E81
.text:0000000000001E81 ; ---------------------------------------------------------------------------
.text:0000000000001E82                 align 10h
.text:0000000000001E90
.text:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E90
.text:0000000000001E90 ; Attributes: info_from_lumina
.text:0000000000001E90
.text:0000000000001E90 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001E90                 cmp     cs:completed_7697, 0
.text:0000000000001E97                 jnz     short locret_1EC8
.text:0000000000001E99                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001EA1                 push    rbp
.text:0000000000001EA2                 mov     rbp, rsp
.text:0000000000001EA5                 jz      short loc_1EB3
.text:0000000000001EA7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001EAE                 call    __cxa_finalize
.text:0000000000001EB3
.text:0000000000001EB3 loc_1EB3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001EB3                 call    deregister_tm_clones
.text:0000000000001EB8                 mov     cs:completed_7697, 1
.text:0000000000001EBF                 pop     rbp
.text:0000000000001EC0                 retn
.text:0000000000001EC0 ; ---------------------------------------------------------------------------
.text:0000000000001EC1                 align 8
.text:0000000000001EC8
.text:0000000000001EC8 locret_1EC8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001EC8                 rep retn
.text:0000000000001EC8 __do_global_dtors_aux endp
.text:0000000000001EC8
.text:0000000000001EC8 ; ---------------------------------------------------------------------------
.text:0000000000001ECA                 align 10h
.text:0000000000001ED0
.text:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001ED0
.text:0000000000001ED0 ; Attributes: bp-based frame
.text:0000000000001ED0
.text:0000000000001ED0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001ED0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001ED0                 push    rbp
.text:0000000000001ED1                 mov     rbp, rsp
.text:0000000000001ED4                 pop     rbp
.text:0000000000001ED5                 jmp     register_tm_clones
.text:0000000000001ED5 frame_dummy     endp
.text:0000000000001ED5
.text:0000000000001ED5 ; ---------------------------------------------------------------------------
.text:0000000000001EDA                 align 20h
.text:0000000000001EE0
.text:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EE0
.text:0000000000001EE0
.text:0000000000001EE0 process_dir     proc near               ; DATA XREF: main+1DC↑o
.text:0000000000001EE0
.text:0000000000001EE0 var_30          = qword ptr -30h
.text:0000000000001EE0 var_28          = qword ptr -28h
.text:0000000000001EE0 var_20          = qword ptr -20h
.text:0000000000001EE0
.text:0000000000001EE0 ; __unwind {
.text:0000000000001EE0                 push    rbp
.text:0000000000001EE1                 push    rbx
.text:0000000000001EE2                 mov     rbx, rdx
.text:0000000000001EE5                 sub     rsp, 28h
.text:0000000000001EE9                 cmp     byte ptr [rbx+14h], 0
.text:0000000000001EED                 mov     rdx, [rdx]
.text:0000000000001EF0                 jz      short loc_1EF7
.text:0000000000001EF2                 test    rdx, rdx
.text:0000000000001EF5                 jz      short loc_1F48
.text:0000000000001EF7
.text:0000000000001EF7 loc_1EF7:                               ; CODE XREF: process_dir+10↑j
.text:0000000000001EF7                                         ; process_dir+91↓j
.text:0000000000001EF7                 mov     eax, [rbx+10h]
.text:0000000000001EFA                 mov     r8d, [rbx+0Ch]
.text:0000000000001EFE                 lea     r9, announce_mkdir
.text:0000000000001F05                 push    1
.text:0000000000001F07                 push    0FFFFFFFFFFFFFFFFh
.text:0000000000001F09                 mov     rcx, rbx
.text:0000000000001F0C                 push    0FFFFFFFFFFFFFFFFh
.text:0000000000001F0E                 push    rax
.text:0000000000001F0F                 call    make_dir_parents
.text:0000000000001F14                 xor     eax, 1
.text:0000000000001F17                 add     rsp, 20h
.text:0000000000001F1B                 test    al, al
.text:0000000000001F1D                 movzx   ebp, al
.text:0000000000001F20                 jnz     short loc_1F39
.text:0000000000001F22                 cmp     byte ptr [rbx+14h], 0
.text:0000000000001F26                 jz      short loc_1F39
.text:0000000000001F28                 cmp     qword ptr [rbx], 0
.text:0000000000001F2C                 jz      short loc_1F39
.text:0000000000001F2E                 call    ___errno_location
.text:0000000000001F33                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000001F39
.text:0000000000001F39 loc_1F39:                               ; CODE XREF: process_dir+40↑j
.text:0000000000001F39                                         ; process_dir+46↑j ...
.text:0000000000001F39                 add     rsp, 28h
.text:0000000000001F3D                 mov     eax, ebp
.text:0000000000001F3F                 pop     rbx
.text:0000000000001F40                 pop     rbp
.text:0000000000001F41                 retn
.text:0000000000001F41 ; ---------------------------------------------------------------------------
.text:0000000000001F42                 align 8
.text:0000000000001F48
.text:0000000000001F48 loc_1F48:                               ; CODE XREF: process_dir+15↑j
.text:0000000000001F48                 mov     [rsp+38h+var_20], rsi
.text:0000000000001F4D                 mov     [rsp+38h+var_28], rdi
.text:0000000000001F52                 mov     [rsp+38h+var_30], rdx
.text:0000000000001F57                 call    ___errno_location
.text:0000000000001F5C                 mov     rsi, [rsp+38h+var_20]
.text:0000000000001F61                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000001F67                 mov     rdi, [rsp+38h+var_28]
.text:0000000000001F6C                 mov     rdx, [rsp+38h+var_30]
.text:0000000000001F71                 jmp     short loc_1EF7
.text:0000000000001F71 ; } // starts at 1EE0
.text:0000000000001F71 process_dir     endp
.text:0000000000001F71
.text:0000000000001F71 ; ---------------------------------------------------------------------------
.text:0000000000001F73                 align 20h
.text:0000000000001F80
.text:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F80
.text:0000000000001F80
.text:0000000000001F80 announce_mkdir_part_4 proc near         ; CODE XREF: announce_mkdir+7↓j
.text:0000000000001F80                                         ; make_ancestor+54↓p
.text:0000000000001F80 ; __unwind {
.text:0000000000001F80                 push    rbx
.text:0000000000001F81                 mov     rbx, rsi
.text:0000000000001F84                 mov     rsi, rdi
.text:0000000000001F87                 mov     edi, 4
.text:0000000000001F8C                 call    quotearg_style
.text:0000000000001F91                 mov     rsi, [rbx+18h]
.text:0000000000001F95                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; s
.text:0000000000001F9C                 mov     rdx, rax
.text:0000000000001F9F                 pop     rbx
.text:0000000000001FA0                 xor     eax, eax
.text:0000000000001FA2                 jmp     prog_fprintf
.text:0000000000001FA2 ; } // starts at 1F80
.text:0000000000001FA2 announce_mkdir_part_4 endp
.text:0000000000001FA2
.text:0000000000001FA2 ; ---------------------------------------------------------------------------
.text:0000000000001FA7                 align 10h
.text:0000000000001FB0
.text:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FB0
.text:0000000000001FB0
.text:0000000000001FB0 announce_mkdir  proc near               ; DATA XREF: process_dir+1E↑o
.text:0000000000001FB0 ; __unwind {
.text:0000000000001FB0                 cmp     qword ptr [rsi+18h], 0
.text:0000000000001FB5                 jz      short locret_1FC0
.text:0000000000001FB7                 jmp     short announce_mkdir_part_4
.text:0000000000001FB7 ; ---------------------------------------------------------------------------
.text:0000000000001FB9                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 locret_1FC0:                            ; CODE XREF: announce_mkdir+5↑j
.text:0000000000001FC0                 rep retn
.text:0000000000001FC0 ; } // starts at 1FB0
.text:0000000000001FC0 announce_mkdir  endp
.text:0000000000001FC0
.text:0000000000001FC0 ; ---------------------------------------------------------------------------
.text:0000000000001FC2                 align 10h
.text:0000000000001FD0
.text:0000000000001FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FD0
.text:0000000000001FD0
.text:0000000000001FD0 make_ancestor   proc near               ; DATA XREF: main+4↑o
.text:0000000000001FD0 ; __unwind {
.text:0000000000001FD0                 cmp     byte ptr [rdx+14h], 0
.text:0000000000001FD4                 push    r14
.text:0000000000001FD6                 push    r13
.text:0000000000001FD8                 push    r12
.text:0000000000001FDA                 mov     r12, rdi
.text:0000000000001FDD                 push    rbp
.text:0000000000001FDE                 mov     rbp, rdx
.text:0000000000001FE1                 push    rbx
.text:0000000000001FE2                 mov     rbx, rsi
.text:0000000000001FE5                 jz      short loc_1FF2
.text:0000000000001FE7                 call    ___errno_location
.text:0000000000001FEC                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000001FF2
.text:0000000000001FF2 loc_1FF2:                               ; CODE XREF: make_ancestor+15↑j
.text:0000000000001FF2                 mov     edi, [rbp+8]
.text:0000000000001FF5                 test    dil, 0C0h
.text:0000000000001FF9                 jnz     short loc_2038
.text:0000000000001FFB                 mov     rdi, rbx        ; path
.text:0000000000001FFE                 mov     esi, 1FFh       ; mode
.text:0000000000002003                 call    _mkdir
.text:0000000000002008                 mov     ebx, eax
.text:000000000000200A
.text:000000000000200A loc_200A:                               ; CODE XREF: make_ancestor+97↓j
.text:000000000000200A                 test    ebx, ebx
.text:000000000000200C                 jnz     short loc_2029
.text:000000000000200E                 mov     ebx, [rbp+8]
.text:0000000000002011                 shr     ebx, 8
.text:0000000000002014                 and     ebx, 1
.text:0000000000002017                 cmp     qword ptr [rbp+18h], 0
.text:000000000000201C                 jz      short loc_2029
.text:000000000000201E                 mov     rsi, rbp
.text:0000000000002021                 mov     rdi, r12
.text:0000000000002024                 call    announce_mkdir_part_4
.text:0000000000002029
.text:0000000000002029 loc_2029:                               ; CODE XREF: make_ancestor+3C↑j
.text:0000000000002029                                         ; make_ancestor+4C↑j
.text:0000000000002029                 mov     eax, ebx
.text:000000000000202B                 pop     rbx
.text:000000000000202C                 pop     rbp
.text:000000000000202D                 pop     r12
.text:000000000000202F                 pop     r13
.text:0000000000002031                 pop     r14
.text:0000000000002033                 retn
.text:0000000000002033 ; ---------------------------------------------------------------------------
.text:0000000000002034                 align 8
.text:0000000000002038
.text:0000000000002038 loc_2038:                               ; CODE XREF: make_ancestor+29↑j
.text:0000000000002038                 and     dil, 3Fh        ; mask
.text:000000000000203C                 call    _umask
.text:0000000000002041                 mov     rdi, rbx        ; path
.text:0000000000002044                 mov     esi, 1FFh       ; mode
.text:0000000000002049                 call    _mkdir
.text:000000000000204E                 mov     ebx, eax
.text:0000000000002050                 call    ___errno_location
.text:0000000000002055                 mov     edi, [rbp+8]    ; mask
.text:0000000000002058                 mov     r14d, [rax]
.text:000000000000205B                 mov     r13, rax
.text:000000000000205E                 call    _umask
.text:0000000000002063                 mov     [r13+0], r14d
.text:0000000000002067                 jmp     short loc_200A
.text:0000000000002067 ; } // starts at 1FD0
.text:0000000000002067 make_ancestor   endp
.text:0000000000002067
.text:0000000000002067 ; ---------------------------------------------------------------------------
.text:0000000000002069                 align 10h
.text:0000000000002070
.text:0000000000002070 ; =============== S U B R O U T I N E =======================================
.text:0000000000002070
.text:0000000000002070 ; Attributes: noreturn
.text:0000000000002070
.text:0000000000002070 ; void __fastcall __noreturn usage(int status)
.text:0000000000002070                 public usage
.text:0000000000002070 usage           proc near               ; CODE XREF: main+D5↑p
.text:0000000000002070                                         ; main+26F↑p
.text:0000000000002070
.text:0000000000002070 var_A8          = qword ptr -0A8h
.text:0000000000002070 var_A0          = qword ptr -0A0h
.text:0000000000002070 var_98          = qword ptr -98h
.text:0000000000002070 var_90          = qword ptr -90h
.text:0000000000002070 var_88          = qword ptr -88h
.text:0000000000002070 var_80          = qword ptr -80h
.text:0000000000002070 var_78          = qword ptr -78h
.text:0000000000002070 var_70          = qword ptr -70h
.text:0000000000002070 var_68          = qword ptr -68h
.text:0000000000002070 var_60          = qword ptr -60h
.text:0000000000002070 var_58          = qword ptr -58h
.text:0000000000002070 var_50          = qword ptr -50h
.text:0000000000002070 var_48          = qword ptr -48h
.text:0000000000002070 var_40          = qword ptr -40h
.text:0000000000002070 var_30          = qword ptr -30h
.text:0000000000002070
.text:0000000000002070 ; __unwind {
.text:0000000000002070                 push    r13
.text:0000000000002072                 push    r12
.text:0000000000002074                 mov     edx, 5          ; category
.text:0000000000002079                 push    rbp
.text:000000000000207A                 push    rbx
.text:000000000000207B                 mov     ebp, edi
.text:000000000000207D                 sub     rsp, 88h
.text:0000000000002084                 mov     rbx, cs:program_name
.text:000000000000208B                 mov     rax, fs:28h
.text:0000000000002094                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002099                 xor     eax, eax
.text:000000000000209B                 test    edi, edi
.text:000000000000209D                 jz      short loc_20CD
.text:000000000000209F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000020A6                 xor     edi, edi        ; domainname
.text:00000000000020A8                 call    _dcgettext
.text:00000000000020AD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000020B4                 mov     rdx, rax
.text:00000000000020B7                 mov     rcx, rbx
.text:00000000000020BA                 mov     esi, 1
.text:00000000000020BF                 xor     eax, eax
.text:00000000000020C1                 call    ___fprintf_chk
.text:00000000000020C6
.text:00000000000020C6 loc_20C6:                               ; CODE XREF: usage+2EE↓j
.text:00000000000020C6                 mov     edi, ebp        ; status
.text:00000000000020C8                 call    _exit
.text:00000000000020CD ; ---------------------------------------------------------------------------
.text:00000000000020CD
.text:00000000000020CD loc_20CD:                               ; CODE XREF: usage+2D↑j
.text:00000000000020CD                 lea     rsi, aUsageSOptionDi ; "Usage: %s [OPTION]... DIRECTORY...\n"
.text:00000000000020D4                 xor     edi, edi        ; domainname
.text:00000000000020D6                 call    _dcgettext
.text:00000000000020DB                 mov     rdx, rbx
.text:00000000000020DE                 mov     rsi, rax
.text:00000000000020E1                 mov     edi, 1
.text:00000000000020E6                 xor     eax, eax
.text:00000000000020E8                 call    ___printf_chk
.text:00000000000020ED                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000020F4                 lea     rsi, aCreateTheDirec ; "Create the DIRECTORY(ies), if they do n"...
.text:00000000000020FB                 mov     edx, 5          ; category
.text:0000000000002100                 xor     edi, edi        ; domainname
.text:0000000000002102                 call    _dcgettext
.text:0000000000002107                 mov     rsi, rbx        ; stream
.text:000000000000210A                 mov     rdi, rax        ; s
.text:000000000000210D                 call    _fputs_unlocked
.text:0000000000002112                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002119                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002120                 mov     edx, 5          ; category
.text:0000000000002125                 xor     edi, edi        ; domainname
.text:0000000000002127                 call    _dcgettext
.text:000000000000212C                 mov     rsi, rbx        ; stream
.text:000000000000212F                 mov     rdi, rax        ; s
.text:0000000000002132                 call    _fputs_unlocked
.text:0000000000002137                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000213E                 lea     rsi, aMModeModeSetFi ; "  -m, --mode=MODE   set file mode (as i"...
.text:0000000000002145                 mov     edx, 5          ; category
.text:000000000000214A                 xor     edi, edi        ; domainname
.text:000000000000214C                 call    _dcgettext
.text:0000000000002151                 mov     rsi, rbx        ; stream
.text:0000000000002154                 mov     rdi, rax        ; s
.text:0000000000002157                 call    _fputs_unlocked
.text:000000000000215C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002163                 lea     rsi, aZSetSelinuxSec ; "  -Z                   set SELinux secu"...
.text:000000000000216A                 mov     edx, 5          ; category
.text:000000000000216F                 xor     edi, edi        ; domainname
.text:0000000000002171                 call    _dcgettext
.text:0000000000002176                 mov     rsi, rbx        ; stream
.text:0000000000002179                 mov     rdi, rax        ; s
.text:000000000000217C                 call    _fputs_unlocked
.text:0000000000002181                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002188                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000218F                 mov     edx, 5          ; category
.text:0000000000002194                 xor     edi, edi        ; domainname
.text:0000000000002196                 call    _dcgettext
.text:000000000000219B                 mov     rsi, rbx        ; stream
.text:000000000000219E                 mov     rdi, rax        ; s
.text:00000000000021A1                 call    _fputs_unlocked
.text:00000000000021A6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021AD                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000021B4                 mov     edx, 5          ; category
.text:00000000000021B9                 xor     edi, edi        ; domainname
.text:00000000000021BB                 call    _dcgettext
.text:00000000000021C0                 mov     rsi, rbx        ; stream
.text:00000000000021C3                 mov     rdi, rax        ; s
.text:00000000000021C6                 lea     rbx, aMkdir_0   ; "mkdir"
.text:00000000000021CD                 call    _fputs_unlocked
.text:00000000000021D2                 lea     rax, asc_874A   ; "["
.text:00000000000021D9                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000021E0                 mov     [rsp+0A8h+var_48], 0
.text:00000000000021E9                 mov     [rsp+0A8h+var_40], 0
.text:00000000000021F2                 mov     rdx, rsp
.text:00000000000021F5                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000021F9                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002200                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002205                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000220C                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002211                 lea     rax, domainname ; "coreutils"
.text:0000000000002218                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000221D                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002224                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002229                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002230                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002235                 mov     [rsp+0A8h+var_90], rax
.text:000000000000223A                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002241                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002246                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000224D                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002252                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002257                 mov     [rsp+0A8h+var_60], rax
.text:000000000000225C                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002261                 nop     dword ptr [rax+00000000h]
.text:0000000000002268
.text:0000000000002268 loc_2268:                               ; CODE XREF: usage+215↓j
.text:0000000000002268                 add     rdx, 10h
.text:000000000000226C                 mov     rdi, [rdx]
.text:000000000000226F                 test    rdi, rdi
.text:0000000000002272                 jz      short loc_2287
.text:0000000000002274                 mov     ecx, 6
.text:0000000000002279                 mov     rsi, rbx
.text:000000000000227C                 repe cmpsb
.text:000000000000227E                 setnbe  al
.text:0000000000002281                 sbb     al, 0
.text:0000000000002283                 test    al, al
.text:0000000000002285                 jnz     short loc_2268
.text:0000000000002287
.text:0000000000002287 loc_2287:                               ; CODE XREF: usage+202↑j
.text:0000000000002287                 mov     r12, [rdx+8]
.text:000000000000228B                 xor     edi, edi        ; domainname
.text:000000000000228D                 mov     edx, 5          ; category
.text:0000000000002292                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002299                 test    r12, r12
.text:000000000000229C                 jz      loc_2363
.text:00000000000022A2                 call    _dcgettext
.text:00000000000022A7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000022AE                 lea     rdx, unk_87C0
.text:00000000000022B5                 mov     rsi, rax
.text:00000000000022B8                 mov     edi, 1
.text:00000000000022BD                 xor     eax, eax
.text:00000000000022BF                 call    ___printf_chk
.text:00000000000022C4                 xor     esi, esi        ; locale
.text:00000000000022C6                 mov     edi, 5          ; category
.text:00000000000022CB                 call    _setlocale
.text:00000000000022D0                 test    rax, rax
.text:00000000000022D3                 jz      short loc_22F1
.text:00000000000022D5                 lea     rsi, s2         ; "en_"
.text:00000000000022DC                 mov     edx, 3          ; n
.text:00000000000022E1                 mov     rdi, rax        ; s1
.text:00000000000022E4                 call    _strncmp
.text:00000000000022E9                 test    eax, eax
.text:00000000000022EB                 jnz     loc_23F8
.text:00000000000022F1
.text:00000000000022F1 loc_22F1:                               ; CODE XREF: usage+263↑j
.text:00000000000022F1                                         ; usage+3AD↓j
.text:00000000000022F1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000022F8                 xor     edi, edi        ; domainname
.text:00000000000022FA                 mov     edx, 5          ; category
.text:00000000000022FF                 call    _dcgettext
.text:0000000000002304                 lea     rcx, aMkdir_0   ; "mkdir"
.text:000000000000230B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002312                 mov     rsi, rax
.text:0000000000002315                 mov     edi, 1
.text:000000000000231A                 xor     eax, eax
.text:000000000000231C                 call    ___printf_chk
.text:0000000000002321                 cmp     r12, rbx
.text:0000000000002324                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000232B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002332                 cmovz   rbx, rcx
.text:0000000000002336
.text:0000000000002336 loc_2336:                               ; CODE XREF: usage+37C↓j
.text:0000000000002336                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000233D                 xor     edi, edi        ; domainname
.text:000000000000233F                 mov     edx, 5          ; category
.text:0000000000002344                 call    _dcgettext
.text:0000000000002349                 mov     rcx, rbx
.text:000000000000234C                 mov     rsi, rax
.text:000000000000234F                 mov     rdx, r12
.text:0000000000002352                 mov     edi, 1
.text:0000000000002357                 xor     eax, eax
.text:0000000000002359                 call    ___printf_chk
.text:000000000000235E                 jmp     loc_20C6
.text:0000000000002363 ; ---------------------------------------------------------------------------
.text:0000000000002363
.text:0000000000002363 loc_2363:                               ; CODE XREF: usage+22C↑j
.text:0000000000002363                 call    _dcgettext
.text:0000000000002368                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000236F                 lea     rdx, unk_87C0
.text:0000000000002376                 mov     rsi, rax
.text:0000000000002379                 mov     edi, 1
.text:000000000000237E                 xor     eax, eax
.text:0000000000002380                 call    ___printf_chk
.text:0000000000002385                 xor     esi, esi        ; locale
.text:0000000000002387                 mov     edi, 5          ; category
.text:000000000000238C                 call    _setlocale
.text:0000000000002391                 test    rax, rax
.text:0000000000002394                 jz      short loc_23AE
.text:0000000000002396                 lea     rsi, s2         ; "en_"
.text:000000000000239D                 mov     edx, 3          ; n
.text:00000000000023A2                 mov     rdi, rax        ; s1
.text:00000000000023A5                 call    _strncmp
.text:00000000000023AA                 test    eax, eax
.text:00000000000023AC                 jnz     short loc_23F1
.text:00000000000023AE
.text:00000000000023AE loc_23AE:                               ; CODE XREF: usage+324↑j
.text:00000000000023AE                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000023B5                 mov     edx, 5          ; category
.text:00000000000023BA                 xor     edi, edi        ; domainname
.text:00000000000023BC                 lea     r12, aMkdir_0   ; "mkdir"
.text:00000000000023C3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000023CA                 call    _dcgettext
.text:00000000000023CF                 lea     rcx, aMkdir_0   ; "mkdir"
.text:00000000000023D6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000023DD                 mov     rsi, rax
.text:00000000000023E0                 mov     edi, 1
.text:00000000000023E5                 xor     eax, eax
.text:00000000000023E7                 call    ___printf_chk
.text:00000000000023EC                 jmp     loc_2336
.text:00000000000023F1 ; ---------------------------------------------------------------------------
.text:00000000000023F1
.text:00000000000023F1 loc_23F1:                               ; CODE XREF: usage+33C↑j
.text:00000000000023F1                 lea     r12, aMkdir_0   ; "mkdir"
.text:00000000000023F8
.text:00000000000023F8 loc_23F8:                               ; CODE XREF: usage+27B↑j
.text:00000000000023F8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000023FF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002406                 xor     edi, edi        ; domainname
.text:0000000000002408                 mov     edx, 5          ; category
.text:000000000000240D                 call    _dcgettext
.text:0000000000002412                 mov     rsi, r13        ; stream
.text:0000000000002415                 mov     rdi, rax        ; s
.text:0000000000002418                 call    _fputs_unlocked
.text:000000000000241D                 jmp     loc_22F1
.text:000000000000241D ; } // starts at 2070
.text:000000000000241D usage           endp
.text:000000000000241D
.text:000000000000241D ; ---------------------------------------------------------------------------
.text:0000000000002422                 align 10h
.text:0000000000002430
.text:0000000000002430 ; =============== S U B R O U T I N E =======================================
.text:0000000000002430
.text:0000000000002430
.text:0000000000002430 ; __int64 __usercall prog_fprintf@<rax>(FILE *s@<rdi>, char)
.text:0000000000002430                 public prog_fprintf
.text:0000000000002430 prog_fprintf    proc near               ; CODE XREF: announce_mkdir_part_4+22↑j
.text:0000000000002430
.text:0000000000002430 var_E8          = dword ptr -0E8h
.text:0000000000002430 var_E4          = dword ptr -0E4h
.text:0000000000002430 var_E0          = qword ptr -0E0h
.text:0000000000002430 var_D8          = qword ptr -0D8h
.text:0000000000002430 var_D0          = qword ptr -0D0h
.text:0000000000002430 var_C8          = byte ptr -0C8h
.text:0000000000002430 var_B8          = qword ptr -0B8h
.text:0000000000002430 var_B0          = qword ptr -0B0h
.text:0000000000002430 var_A8          = qword ptr -0A8h
.text:0000000000002430 var_A0          = qword ptr -0A0h
.text:0000000000002430 var_98          = xmmword ptr -98h
.text:0000000000002430 var_88          = xmmword ptr -88h
.text:0000000000002430 var_78          = xmmword ptr -78h
.text:0000000000002430 var_68          = xmmword ptr -68h
.text:0000000000002430 var_58          = xmmword ptr -58h
.text:0000000000002430 var_48          = xmmword ptr -48h
.text:0000000000002430 var_38          = xmmword ptr -38h
.text:0000000000002430 var_28          = xmmword ptr -28h
.text:0000000000002430 arg_0           = byte ptr  8
.text:0000000000002430
.text:0000000000002430 ; __unwind {
.text:0000000000002430                 push    rbp
.text:0000000000002431                 push    rbx
.text:0000000000002432                 mov     rbp, rsi
.text:0000000000002435                 mov     rbx, rdi
.text:0000000000002438                 sub     rsp, 0D8h
.text:000000000000243F                 test    al, al
.text:0000000000002441                 mov     [rsp+0E8h+var_B8], rdx
.text:0000000000002446                 mov     [rsp+0E8h+var_B0], rcx
.text:000000000000244B                 mov     [rsp+0E8h+var_A8], r8
.text:0000000000002450                 mov     [rsp+0E8h+var_A0], r9
.text:0000000000002455                 jz      short loc_248E
.text:0000000000002457                 movaps  [rsp+0E8h+var_98], xmm0
.text:000000000000245C                 movaps  [rsp+0E8h+var_88], xmm1
.text:0000000000002461                 movaps  [rsp+0E8h+var_78], xmm2
.text:0000000000002466                 movaps  [rsp+0E8h+var_68], xmm3
.text:000000000000246E                 movaps  [rsp+0E8h+var_58], xmm4
.text:0000000000002476                 movaps  [rsp+0E8h+var_48], xmm5
.text:000000000000247E                 movaps  [rsp+0E8h+var_38], xmm6
.text:0000000000002486                 movaps  [rsp+0E8h+var_28], xmm7
.text:000000000000248E
.text:000000000000248E loc_248E:                               ; CODE XREF: prog_fprintf+25↑j
.text:000000000000248E                 mov     rsi, rbx        ; stream
.text:0000000000002491                 mov     rax, fs:28h
.text:000000000000249A                 mov     [rsp+0E8h+var_D0], rax
.text:000000000000249F                 xor     eax, eax
.text:00000000000024A1                 mov     rdi, cs:program_name ; s
.text:00000000000024A8                 call    _fputs_unlocked
.text:00000000000024AD                 lea     rdi, asc_8C91   ; ": "
.text:00000000000024B4                 mov     rcx, rbx        ; stream
.text:00000000000024B7                 mov     edx, 2          ; n
.text:00000000000024BC                 mov     esi, 1          ; size
.text:00000000000024C1                 call    _fwrite_unlocked
.text:00000000000024C6                 lea     rax, [rsp+0E8h+arg_0]
.text:00000000000024CE                 mov     rdx, rsp
.text:00000000000024D1                 mov     rsi, rbp
.text:00000000000024D4                 mov     rdi, rbx        ; s
.text:00000000000024D7                 mov     [rsp+0E8h+var_E8], 10h
.text:00000000000024DE                 mov     [rsp+0E8h+var_E4], 30h ; '0'
.text:00000000000024E6                 mov     [rsp+0E8h+var_E0], rax
.text:00000000000024EB                 lea     rax, [rsp+0E8h+var_C8]
.text:00000000000024F0                 mov     [rsp+0E8h+var_D8], rax
.text:00000000000024F5                 call    rpl_vfprintf
.text:00000000000024FA                 mov     rax, [rbx+28h]
.text:00000000000024FE                 cmp     rax, [rbx+30h]
.text:0000000000002502                 jnb     short loc_2530
.text:0000000000002504                 lea     rdx, [rax+1]
.text:0000000000002508                 mov     [rbx+28h], rdx
.text:000000000000250C                 mov     byte ptr [rax], 0Ah
.text:000000000000250F
.text:000000000000250F loc_250F:                               ; CODE XREF: prog_fprintf+10D↓j
.text:000000000000250F                 mov     rax, [rsp+0E8h+var_D0]
.text:0000000000002514                 xor     rax, fs:28h
.text:000000000000251D                 jnz     short loc_253F
.text:000000000000251F                 add     rsp, 0D8h
.text:0000000000002526                 pop     rbx
.text:0000000000002527                 pop     rbp
.text:0000000000002528                 retn
.text:0000000000002528 ; ---------------------------------------------------------------------------
.text:0000000000002529                 align 10h
.text:0000000000002530
.text:0000000000002530 loc_2530:                               ; CODE XREF: prog_fprintf+D2↑j
.text:0000000000002530                 mov     esi, 0Ah        ; int
.text:0000000000002535                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000002538                 call    ___overflow
.text:000000000000253D                 jmp     short loc_250F
.text:000000000000253F ; ---------------------------------------------------------------------------
.text:000000000000253F
.text:000000000000253F loc_253F:                               ; CODE XREF: prog_fprintf+ED↑j
.text:000000000000253F                 call    ___stack_chk_fail
.text:000000000000253F ; } // starts at 2430
.text:000000000000253F prog_fprintf    endp
.text:000000000000253F
.text:000000000000253F ; ---------------------------------------------------------------------------
.text:0000000000002544                 align 10h
.text:0000000000002550
.text:0000000000002550 ; =============== S U B R O U T I N E =======================================
.text:0000000000002550
.text:0000000000002550
.text:0000000000002550                 public close_stdout_set_file_name
.text:0000000000002550 close_stdout_set_file_name proc near
.text:0000000000002550 ; __unwind {
.text:0000000000002550                 mov     cs:file_name, rdi
.text:0000000000002557                 retn
.text:0000000000002557 ; } // starts at 2550
.text:0000000000002557 close_stdout_set_file_name endp
.text:0000000000002557
.text:0000000000002557 ; ---------------------------------------------------------------------------
.text:0000000000002558                 align 20h
.text:0000000000002560
.text:0000000000002560 ; =============== S U B R O U T I N E =======================================
.text:0000000000002560
.text:0000000000002560
.text:0000000000002560                 public close_stdout_set_ignore_EPIPE
.text:0000000000002560 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002560 ; __unwind {
.text:0000000000002560                 mov     cs:ignore_EPIPE, dil
.text:0000000000002567                 retn
.text:0000000000002567 ; } // starts at 2560
.text:0000000000002567 close_stdout_set_ignore_EPIPE endp
.text:0000000000002567
.text:0000000000002567 ; ---------------------------------------------------------------------------
.text:0000000000002568                 align 10h
.text:0000000000002570
.text:0000000000002570 ; =============== S U B R O U T I N E =======================================
.text:0000000000002570
.text:0000000000002570 ; Attributes: info_from_lumina
.text:0000000000002570
.text:0000000000002570 ; void __cdecl close_stdout()
.text:0000000000002570                 public close_stdout
.text:0000000000002570 close_stdout    proc near               ; DATA XREF: main+82↑o
.text:0000000000002570 ; __unwind {
.text:0000000000002570                 push    rbp
.text:0000000000002571                 push    rbx
.text:0000000000002572                 sub     rsp, 8
.text:0000000000002576                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000257D                 call    close_stream
.text:0000000000002582                 test    eax, eax
.text:0000000000002584                 jz      short loc_259C
.text:0000000000002586                 call    ___errno_location
.text:000000000000258B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002592                 mov     rbx, rax
.text:0000000000002595                 jz      short loc_25B3
.text:0000000000002597                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000259A                 jnz     short loc_25B3
.text:000000000000259C
.text:000000000000259C loc_259C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000259C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000025A3                 call    close_stream
.text:00000000000025A8                 test    eax, eax
.text:00000000000025AA                 jnz     short loc_25F2
.text:00000000000025AC                 add     rsp, 8
.text:00000000000025B0                 pop     rbx
.text:00000000000025B1                 pop     rbp
.text:00000000000025B2                 retn
.text:00000000000025B3 ; ---------------------------------------------------------------------------
.text:00000000000025B3
.text:00000000000025B3 loc_25B3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000025B3                                         ; close_stdout+2A↑j
.text:00000000000025B3                 lea     rsi, aWriteError ; "write error"
.text:00000000000025BA                 xor     edi, edi        ; domainname
.text:00000000000025BC                 mov     edx, 5          ; category
.text:00000000000025C1                 call    _dcgettext
.text:00000000000025C6                 mov     rdi, cs:file_name
.text:00000000000025CD                 mov     rbp, rax
.text:00000000000025D0                 test    rdi, rdi
.text:00000000000025D3                 jz      short loc_25FD
.text:00000000000025D5                 call    quotearg_colon
.text:00000000000025DA                 mov     esi, [rbx]      ; errnum
.text:00000000000025DC                 lea     rdx, format     ; "%s: %s"
.text:00000000000025E3                 mov     rcx, rax
.text:00000000000025E6                 mov     r8, rbp
.text:00000000000025E9                 xor     edi, edi        ; status
.text:00000000000025EB                 xor     eax, eax
.text:00000000000025ED                 call    _error
.text:00000000000025F2
.text:00000000000025F2 loc_25F2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000025F2                                         ; close_stdout+A2↓j
.text:00000000000025F2                 mov     edi, cs:exit_failure ; status
.text:00000000000025F8                 call    __exit
.text:00000000000025FD ; ---------------------------------------------------------------------------
.text:00000000000025FD
.text:00000000000025FD loc_25FD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000025FD                 mov     esi, [rbx]      ; errnum
.text:00000000000025FF                 lea     rdx, format+4   ; format
.text:0000000000002606                 mov     rcx, rax
.text:0000000000002609                 xor     edi, edi        ; status
.text:000000000000260B                 xor     eax, eax
.text:000000000000260D                 call    _error
.text:0000000000002612                 jmp     short loc_25F2
.text:0000000000002612 ; } // starts at 2570
.text:0000000000002612 close_stdout    endp
.text:0000000000002612
.text:0000000000002612 ; ---------------------------------------------------------------------------
.text:0000000000002614                 align 20h
.text:0000000000002620
.text:0000000000002620 ; =============== S U B R O U T I N E =======================================
.text:0000000000002620
.text:0000000000002620
.text:0000000000002620                 public make_dir_parents
.text:0000000000002620 make_dir_parents proc near              ; CODE XREF: process_dir+2F↑p
.text:0000000000002620
.text:0000000000002620 path            = qword ptr -0F8h
.text:0000000000002620 mode            = dword ptr -0F0h
.text:0000000000002620 var_E8          = qword ptr -0E8h
.text:0000000000002620 var_E0          = dword ptr -0E0h
.text:0000000000002620 var_D9          = byte ptr -0D9h
.text:0000000000002620 stat_buf        = stat ptr -0D8h
.text:0000000000002620 var_40          = qword ptr -40h
.text:0000000000002620 arg_0           = dword ptr  8
.text:0000000000002620 arg_8           = dword ptr  10h
.text:0000000000002620 arg_10          = dword ptr  18h
.text:0000000000002620 arg_18          = dword ptr  20h
.text:0000000000002620
.text:0000000000002620 ; __unwind {
.text:0000000000002620                 push    r15
.text:0000000000002622                 push    r14
.text:0000000000002624                 mov     r15, rcx
.text:0000000000002627                 push    r13
.text:0000000000002629                 push    r12
.text:000000000000262B                 mov     r14, rsi
.text:000000000000262E                 push    rbp
.text:000000000000262F                 push    rbx
.text:0000000000002630                 mov     r13, rdx
.text:0000000000002633                 mov     rbx, rdi
.text:0000000000002636                 mov     r12d, r8d
.text:0000000000002639                 sub     rsp, 0C8h
.text:0000000000002640                 mov     eax, [rsp+0F8h+arg_18]
.text:0000000000002647                 mov     [rsp+0F8h+var_E0], eax
.text:000000000000264B                 mov     rax, fs:28h
.text:0000000000002654                 mov     [rsp+0F8h+var_40], rax
.text:000000000000265C                 xor     eax, eax
.text:000000000000265E                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:0000000000002661                 jz      short loc_266C
.text:0000000000002663                 cmp     dword ptr [rsi], 4
.text:0000000000002666                 jz      loc_27B0
.text:000000000000266C
.text:000000000000266C loc_266C:                               ; CODE XREF: make_dir_parents+41↑j
.text:000000000000266C                                         ; make_dir_parents+195↓j
.text:000000000000266C                 test    r13, r13
.text:000000000000266F                 jz      loc_27A0
.text:0000000000002675                 mov     rcx, r15
.text:0000000000002678                 mov     rdx, r13
.text:000000000000267B                 mov     rsi, r14
.text:000000000000267E                 mov     rdi, rbx
.text:0000000000002681                 mov     qword ptr [rsp+0F8h+mode], r9
.text:0000000000002686                 call    mkancesdirs
.text:000000000000268B                 test    rax, rax
.text:000000000000268E                 js      loc_2970
.text:0000000000002694                 mov     r9, qword ptr [rsp+0F8h+mode]
.text:0000000000002699                 add     rax, rbx
.text:000000000000269C                 mov     [rsp+0F8h+path], rax
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: make_dir_parents+184↓j
.text:00000000000026A0                 cmp     [rsp+0F8h+arg_8], 0FFFFFFFFh
.text:00000000000026A8                 mov     eax, [rsp+0F8h+arg_0]
.text:00000000000026AF                 mov     esi, r12d
.text:00000000000026B2                 setz    cl
.text:00000000000026B5                 cmp     [rsp+0F8h+arg_10], 0FFFFFFFFh
.text:00000000000026BD                 setz    dl
.text:00000000000026C0                 and     eax, 0C00h
.text:00000000000026C5                 and     esi, 200h
.text:00000000000026CB                 or      eax, esi
.text:00000000000026CD                 and     cl, dl
.text:00000000000026CF                 mov     [rsp+0F8h+var_D9], cl
.text:00000000000026D3                 jnz     loc_2820
.text:00000000000026D9                 mov     eax, r12d
.text:00000000000026DC                 and     eax, 0FFFFFFC0h
.text:00000000000026DF                 mov     [rsp+0F8h+mode], eax
.text:00000000000026E3
.text:00000000000026E3 loc_26E3:                               ; CODE XREF: make_dir_parents+26A↓j
.text:00000000000026E3                 mov     esi, [rsp+0F8h+mode] ; mode
.text:00000000000026E7                 mov     rdi, [rsp+0F8h+path] ; path
.text:00000000000026EB                 mov     [rsp+0F8h+var_E8], r9
.text:00000000000026F0                 call    _mkdir
.text:00000000000026F5                 test    eax, eax
.text:00000000000026F7                 mov     ebp, eax
.text:00000000000026F9                 mov     r9, [rsp+0F8h+var_E8]
.text:00000000000026FE                 jz      loc_2890
.text:0000000000002704
.text:0000000000002704 loc_2704:                               ; CODE XREF: make_dir_parents+219↓j
.text:0000000000002704                 call    ___errno_location
.text:0000000000002709                 cmp     byte ptr [rsp+0F8h+var_E0], 0
.text:000000000000270E                 mov     r15, rax
.text:0000000000002711                 mov     ebp, [rax]
.text:0000000000002713                 jz      loc_29B0
.text:0000000000002719                 test    ebp, ebp
.text:000000000000271B                 jz      loc_286C
.text:0000000000002721                 cmp     ebp, 2
.text:0000000000002724                 setnz   r12b
.text:0000000000002728                 test    r13, r13
.text:000000000000272B                 setnz   al
.text:000000000000272E                 and     r12b, al
.text:0000000000002731                 jz      loc_27BB
.text:0000000000002737                 mov     rsi, [rsp+0F8h+path] ; filename
.text:000000000000273B                 lea     rdx, [rsp+0F8h+stat_buf] ; stat_buf
.text:0000000000002740                 mov     edi, 1          ; ver
.text:0000000000002745                 call    ___xstat
.text:000000000000274A                 test    eax, eax
.text:000000000000274C                 jz      loc_2990
.text:0000000000002752                 cmp     ebp, 11h
.text:0000000000002755                 jnz     short loc_27BB
.text:0000000000002757                 mov     eax, [r15]
.text:000000000000275A                 cmp     eax, 14h
.text:000000000000275D                 jz      short loc_27BB
.text:000000000000275F                 cmp     eax, 2
.text:0000000000002762                 jz      short loc_27BB
.text:0000000000002764                 mov     rdi, rbx
.text:0000000000002767                 xor     r12d, r12d
.text:000000000000276A                 call    quote
.text:000000000000276F                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000002776                 mov     edx, 5          ; category
.text:000000000000277B                 xor     edi, edi        ; domainname
.text:000000000000277D                 mov     rbx, rax
.text:0000000000002780                 call    _dcgettext
.text:0000000000002785                 mov     esi, [r15]      ; errnum
.text:0000000000002788                 mov     rdx, rax        ; format
.text:000000000000278B                 mov     rcx, rbx
.text:000000000000278E                 xor     edi, edi        ; status
.text:0000000000002790                 xor     eax, eax
.text:0000000000002792                 call    _error
.text:0000000000002797                 jmp     short loc_27ED
.text:0000000000002797 ; ---------------------------------------------------------------------------
.text:0000000000002799                 align 20h
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: make_dir_parents+4F↑j
.text:00000000000027A0                 mov     [rsp+0F8h+path], rbx
.text:00000000000027A4                 jmp     loc_26A0
.text:00000000000027A4 ; ---------------------------------------------------------------------------
.text:00000000000027A9                 align 10h
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: make_dir_parents+46↑j
.text:00000000000027B0                 mov     ebp, [rsi+4]
.text:00000000000027B3                 test    ebp, ebp
.text:00000000000027B5                 jz      loc_266C
.text:00000000000027BB
.text:00000000000027BB loc_27BB:                               ; CODE XREF: make_dir_parents+111↑j
.text:00000000000027BB                                         ; make_dir_parents+135↑j ...
.text:00000000000027BB                 mov     rdi, rbx
.text:00000000000027BE                 xor     r12d, r12d
.text:00000000000027C1                 call    quote
.text:00000000000027C6                 lea     rsi, aCannotCreateDi ; "cannot create directory %s"
.text:00000000000027CD                 mov     rbx, rax
.text:00000000000027D0                 mov     edx, 5          ; category
.text:00000000000027D5                 xor     edi, edi        ; domainname
.text:00000000000027D7                 call    _dcgettext
.text:00000000000027DC                 mov     rcx, rbx
.text:00000000000027DF                 mov     rdx, rax        ; format
.text:00000000000027E2                 mov     esi, ebp        ; errnum
.text:00000000000027E4                 xor     edi, edi        ; status
.text:00000000000027E6                 xor     eax, eax
.text:00000000000027E8                 call    _error
.text:00000000000027ED
.text:00000000000027ED loc_27ED:                               ; CODE XREF: make_dir_parents+177↑j
.text:00000000000027ED                                         ; make_dir_parents+252↓j ...
.text:00000000000027ED                 mov     rdi, [rsp+0F8h+var_40]
.text:00000000000027F5                 xor     rdi, fs:28h
.text:00000000000027FE                 mov     eax, r12d
.text:0000000000002801                 jnz     loc_29D5
.text:0000000000002807                 add     rsp, 0C8h
.text:000000000000280E                 pop     rbx
.text:000000000000280F                 pop     rbp
.text:0000000000002810                 pop     r12
.text:0000000000002812                 pop     r13
.text:0000000000002814                 pop     r14
.text:0000000000002816                 pop     r15
.text:0000000000002818                 retn
.text:0000000000002818 ; ---------------------------------------------------------------------------
.text:0000000000002819                 align 20h
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: make_dir_parents+B3↑j
.text:0000000000002820                 test    eax, eax
.text:0000000000002822                 jnz     short loc_2880
.text:0000000000002824                 mov     rdi, [rsp+0F8h+path] ; path
.text:0000000000002828                 mov     esi, r12d       ; mode
.text:000000000000282B                 mov     [rsp+0F8h+var_E8], r9
.text:0000000000002830                 call    _mkdir
.text:0000000000002835                 test    eax, eax
.text:0000000000002837                 mov     ebp, eax
.text:0000000000002839                 jnz     loc_2704
.text:000000000000283F                 mov     eax, r12d
.text:0000000000002842                 mov     rsi, r15
.text:0000000000002845                 mov     rdi, rbx
.text:0000000000002848                 and     eax, 1FFh
.text:000000000000284D                 and     eax, [rsp+0F8h+arg_0]
.text:0000000000002854                 mov     r9, [rsp+0F8h+var_E8]
.text:0000000000002859                 mov     [rsp+0F8h+mode], eax
.text:000000000000285D                 call    r9
.text:0000000000002860                 mov     esi, [rsp+0F8h+mode]
.text:0000000000002864                 test    esi, esi
.text:0000000000002866                 jnz     loc_29DA
.text:000000000000286C
.text:000000000000286C loc_286C:                               ; CODE XREF: make_dir_parents+FB↑j
.text:000000000000286C                                         ; make_dir_parents+295↓j ...
.text:000000000000286C                 mov     r12d, 1
.text:0000000000002872                 jmp     loc_27ED
.text:0000000000002872 ; ---------------------------------------------------------------------------
.text:0000000000002877                 align 20h
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: make_dir_parents+202↑j
.text:0000000000002880                 mov     eax, r12d
.text:0000000000002883                 and     eax, 0FFFFFFEDh
.text:0000000000002886                 mov     [rsp+0F8h+mode], eax
.text:000000000000288A                 jmp     loc_26E3
.text:000000000000288A ; ---------------------------------------------------------------------------
.text:000000000000288F                 align 10h
.text:0000000000002890
.text:0000000000002890 loc_2890:                               ; CODE XREF: make_dir_parents+DE↑j
.text:0000000000002890                 mov     rsi, r15
.text:0000000000002893                 mov     rdi, rbx
.text:0000000000002896                 call    r9
.text:0000000000002899                 mov     edx, 3
.text:000000000000289E
.text:000000000000289E loc_289E:                               ; CODE XREF: make_dir_parents+39D↓j
.text:000000000000289E                                         ; make_dir_parents+3C4↓j
.text:000000000000289E                 mov     r15, [rsp+0F8h+path]
.text:00000000000028A2                 lea     rcx, [rsp+0F8h+stat_buf]
.text:00000000000028A7                 mov     rdi, r14
.text:00000000000028AA                 mov     rsi, r15
.text:00000000000028AD                 call    savewd_chdir
.text:00000000000028B2                 cmp     eax, 0FFFFFFFFh
.text:00000000000028B5                 jl      short loc_286C
.text:00000000000028B7                 test    eax, eax
.text:00000000000028B9                 lea     rax, asc_8CAC   ; "."
.text:00000000000028C0                 mov     r9d, r12d
.text:00000000000028C3                 cmovnz  rax, r15
.text:00000000000028C7                 sub     rsp, 8
.text:00000000000028CB                 mov     edx, [rsp+100h+arg_0]
.text:00000000000028D2                 mov     rsi, rax        ; file
.text:00000000000028D5                 push    rdx             ; int
.text:00000000000028D6                 mov     r8d, [rsp+108h+arg_10]
.text:00000000000028DE                 mov     ecx, [rsp+108h+arg_8]
.text:00000000000028E5                 mov     edx, [rsp+108h+mode]
.text:00000000000028E9                 mov     edi, dword ptr [rsp+108h+stat_buf.st_dev] ; fd
.text:00000000000028ED                 call    dirchownmod
.text:00000000000028F2                 test    eax, eax
.text:00000000000028F4                 pop     rdx
.text:00000000000028F5                 pop     rcx
.text:00000000000028F6                 jz      loc_286C
.text:00000000000028FC                 test    ebp, ebp
.text:00000000000028FE                 jz      loc_29C8
.text:0000000000002904                 cmp     ebp, 2
.text:0000000000002907                 jz      loc_27BB
.text:000000000000290D                 test    r13, r13
.text:0000000000002910                 jz      loc_27BB
.text:0000000000002916                 call    ___errno_location
.text:000000000000291B                 cmp     dword ptr [rax], 14h
.text:000000000000291E                 mov     r12, rax
.text:0000000000002921                 jz      loc_27BB
.text:0000000000002927
.text:0000000000002927 loc_2927:                               ; CODE XREF: make_dir_parents+3B0↓j
.text:0000000000002927                 mov     rdi, rbx
.text:000000000000292A                 call    quote
.text:000000000000292F                 cmp     [rsp+0F8h+var_D9], 0
.text:0000000000002934                 mov     rbx, rax
.text:0000000000002937                 lea     rsi, aCannotChangeOw ; "cannot change owner and permissions of "...
.text:000000000000293E                 lea     rax, aCannotChangePe ; "cannot change permissions of %s"
.text:0000000000002945                 mov     edx, 5          ; category
.text:000000000000294A                 cmovnz  rsi, rax        ; msgid
.text:000000000000294E                 xor     edi, edi        ; domainname
.text:0000000000002950                 call    _dcgettext
.text:0000000000002955                 mov     esi, [r12]      ; errnum
.text:0000000000002959                 mov     rdx, rax        ; format
.text:000000000000295C                 mov     rcx, rbx
.text:000000000000295F                 xor     edi, edi        ; status
.text:0000000000002961                 xor     eax, eax
.text:0000000000002963                 xor     r12d, r12d
.text:0000000000002966                 call    _error
.text:000000000000296B                 jmp     loc_27ED
.text:0000000000002970 ; ---------------------------------------------------------------------------
.text:0000000000002970
.text:0000000000002970 loc_2970:                               ; CODE XREF: make_dir_parents+6E↑j
.text:0000000000002970                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002974                 jnz     loc_286C
.text:000000000000297A                 call    ___errno_location
.text:000000000000297F                 mov     ebp, [rax]
.text:0000000000002981                 jmp     loc_27BB
.text:0000000000002981 ; ---------------------------------------------------------------------------
.text:0000000000002986                 align 10h
.text:0000000000002990
.text:0000000000002990 loc_2990:                               ; CODE XREF: make_dir_parents+12C↑j
.text:0000000000002990                 mov     eax, [rsp+0F8h+stat_buf.st_mode]
.text:0000000000002994                 and     eax, 0F000h
.text:0000000000002999                 cmp     eax, 4000h
.text:000000000000299E                 jnz     loc_27BB
.text:00000000000029A4                 jmp     loc_27ED
.text:00000000000029A4 ; ---------------------------------------------------------------------------
.text:00000000000029A9                 align 10h
.text:00000000000029B0
.text:00000000000029B0 loc_29B0:                               ; CODE XREF: make_dir_parents+F3↑j
.text:00000000000029B0                 mov     [rsp+0F8h+mode], 0FFFFFFFFh
.text:00000000000029B8                 mov     edx, 2
.text:00000000000029BD                 jmp     loc_289E
.text:00000000000029BD ; ---------------------------------------------------------------------------
.text:00000000000029C2                 align 8
.text:00000000000029C8
.text:00000000000029C8 loc_29C8:                               ; CODE XREF: make_dir_parents+2DE↑j
.text:00000000000029C8                 call    ___errno_location
.text:00000000000029CD                 mov     r12, rax
.text:00000000000029D0                 jmp     loc_2927
.text:00000000000029D5 ; ---------------------------------------------------------------------------
.text:00000000000029D5
.text:00000000000029D5 loc_29D5:                               ; CODE XREF: make_dir_parents+1E1↑j
.text:00000000000029D5                 call    ___stack_chk_fail
.text:00000000000029DA ; ---------------------------------------------------------------------------
.text:00000000000029DA
.text:00000000000029DA loc_29DA:                               ; CODE XREF: make_dir_parents+246↑j
.text:00000000000029DA                 mov     [rsp+0F8h+mode], r12d
.text:00000000000029DF                 mov     edx, 3
.text:00000000000029E4                 jmp     loc_289E
.text:00000000000029E4 ; } // starts at 2620
.text:00000000000029E4 make_dir_parents endp
.text:00000000000029E4
.text:00000000000029E4 ; ---------------------------------------------------------------------------
.text:00000000000029E9                 align 10h
.text:00000000000029F0
.text:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029F0
.text:00000000000029F0 ; Attributes: info_from_lumina
.text:00000000000029F0
.text:00000000000029F0                 public mode_compile
.text:00000000000029F0 mode_compile    proc near               ; CODE XREF: main+227↑p
.text:00000000000029F0 ; __unwind {
.text:00000000000029F0                 push    rbp
.text:00000000000029F1                 push    rbx
.text:00000000000029F2                 mov     rbx, rdi
.text:00000000000029F5                 sub     rsp, 8
.text:00000000000029F9                 movsx   eax, byte ptr [rdi]
.text:00000000000029FC                 lea     edx, [rax-30h]
.text:00000000000029FF                 cmp     dl, 7
.text:0000000000002A02                 jbe     loc_2AB8
.text:0000000000002A08                 test    al, al
.text:0000000000002A0A                 mov     rcx, rdi
.text:0000000000002A0D                 mov     edi, 1
.text:0000000000002A12                 jz      short loc_2A3B
.text:0000000000002A14                 nop     dword ptr [rax+00h]
.text:0000000000002A18
.text:0000000000002A18 loc_2A18:                               ; CODE XREF: mode_compile+49↓j
.text:0000000000002A18                 mov     edx, eax
.text:0000000000002A1A                 and     edx, 0FFFFFFEFh
.text:0000000000002A1D                 cmp     dl, 2Dh ; '-'
.text:0000000000002A20                 setz    dl
.text:0000000000002A23                 cmp     al, 2Bh ; '+'
.text:0000000000002A25                 setz    al
.text:0000000000002A28                 add     rcx, 1
.text:0000000000002A2C                 or      eax, edx
.text:0000000000002A2E                 movzx   eax, al
.text:0000000000002A31                 add     rdi, rax
.text:0000000000002A34                 movzx   eax, byte ptr [rcx]
.text:0000000000002A37                 test    al, al
.text:0000000000002A39                 jnz     short loc_2A18
.text:0000000000002A3B
.text:0000000000002A3B loc_2A3B:                               ; CODE XREF: mode_compile+22↑j
.text:0000000000002A3B                 mov     edx, 10h
.text:0000000000002A40                 xor     ecx, ecx
.text:0000000000002A42                 mov     rax, rdx
.text:0000000000002A45                 mul     rdi
.text:0000000000002A48                 jo      loc_2D5F
.text:0000000000002A4E
.text:0000000000002A4E loc_2A4E:                               ; CODE XREF: mode_compile+374↓j
.text:0000000000002A4E                 test    rax, rax
.text:0000000000002A51                 js      loc_2D69
.text:0000000000002A57                 test    rcx, rcx
.text:0000000000002A5A                 jnz     loc_2D69
.text:0000000000002A60                 shl     rdi, 4
.text:0000000000002A64                 lea     rbp, jpt_2C24
.text:0000000000002A6B                 call    xmalloc
.text:0000000000002A70                 xor     esi, esi
.text:0000000000002A72
.text:0000000000002A72 loc_2A72:                               ; CODE XREF: mode_compile+38D↓j
.text:0000000000002A72                 xor     r11d, r11d
.text:0000000000002A75
.text:0000000000002A75 loc_2A75:                               ; CODE XREF: mode_compile+2EA↓j
.text:0000000000002A75                 movzx   r9d, byte ptr [rbx]
.text:0000000000002A79                 cmp     r9b, 61h ; 'a'
.text:0000000000002A7D                 jz      loc_2CD0
.text:0000000000002A83                 jle     short loc_2AF0
.text:0000000000002A85                 cmp     r9b, 6Fh ; 'o'
.text:0000000000002A89                 jz      loc_2D00
.text:0000000000002A8F                 cmp     r9b, 75h ; 'u'
.text:0000000000002A93                 jz      loc_2CF0
.text:0000000000002A99                 cmp     r9b, 67h ; 'g'
.text:0000000000002A9D                 jz      loc_2CE0
.text:0000000000002AA3
.text:0000000000002AA3 loc_2AA3:                               ; CODE XREF: mode_compile+110↓j
.text:0000000000002AA3                                         ; mode_compile+1B8↓j ...
.text:0000000000002AA3                 mov     rdi, rax        ; ptr
.text:0000000000002AA6                 call    _free
.text:0000000000002AAB                 xor     eax, eax
.text:0000000000002AAD
.text:0000000000002AAD loc_2AAD:                               ; CODE XREF: mode_compile+3A4↓j
.text:0000000000002AAD                 add     rsp, 8
.text:0000000000002AB1                 pop     rbx
.text:0000000000002AB2                 pop     rbp
.text:0000000000002AB3                 retn
.text:0000000000002AB3 ; ---------------------------------------------------------------------------
.text:0000000000002AB4                 align 8
.text:0000000000002AB8
.text:0000000000002AB8 loc_2AB8:                               ; CODE XREF: mode_compile+12↑j
.text:0000000000002AB8                 mov     rdx, rdi
.text:0000000000002ABB                 xor     ebp, ebp
.text:0000000000002ABD                 jmp     short loc_2ACF
.text:0000000000002ABD ; ---------------------------------------------------------------------------
.text:0000000000002ABF                 align 20h
.text:0000000000002AC0
.text:0000000000002AC0 loc_2AC0:                               ; CODE XREF: mode_compile+ED↓j
.text:0000000000002AC0                 movsx   eax, byte ptr [rdx]
.text:0000000000002AC3                 lea     ecx, [rax-30h]
.text:0000000000002AC6                 cmp     cl, 7
.text:0000000000002AC9                 ja      loc_2D10
.text:0000000000002ACF
.text:0000000000002ACF loc_2ACF:                               ; CODE XREF: mode_compile+CD↑j
.text:0000000000002ACF                 lea     ebp, [rax+rbp*8-30h]
.text:0000000000002AD3                 add     rdx, 1
.text:0000000000002AD7                 cmp     ebp, 0FFFh
.text:0000000000002ADD                 jbe     short loc_2AC0
.text:0000000000002ADF
.text:0000000000002ADF loc_2ADF:                               ; CODE XREF: mode_compile+322↓j
.text:0000000000002ADF                 add     rsp, 8
.text:0000000000002AE3                 xor     eax, eax
.text:0000000000002AE5                 pop     rbx
.text:0000000000002AE6                 pop     rbp
.text:0000000000002AE7                 retn
.text:0000000000002AE7 ; ---------------------------------------------------------------------------
.text:0000000000002AE8                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: mode_compile+93↑j
.text:0000000000002AF0                 cmp     r9b, 2Dh ; '-'
.text:0000000000002AF4                 jz      short loc_2B02
.text:0000000000002AF6                 cmp     r9b, 3Dh ; '='
.text:0000000000002AFA                 jz      short loc_2B02
.text:0000000000002AFC                 cmp     r9b, 2Bh ; '+'
.text:0000000000002B00                 jnz     short loc_2AA3
.text:0000000000002B02
.text:0000000000002B02 loc_2B02:                               ; CODE XREF: mode_compile+104↑j
.text:0000000000002B02                                         ; mode_compile+10A↑j
.text:0000000000002B02                 lea     rdi, [rsi+1]
.text:0000000000002B06                 shl     rsi, 4
.text:0000000000002B0A                 add     rsi, rax
.text:0000000000002B0D                 jmp     short loc_2B74
.text:0000000000002B0D ; ---------------------------------------------------------------------------
.text:0000000000002B0F                 align 10h
.text:0000000000002B10
.text:0000000000002B10 loc_2B10:                               ; CODE XREF: mode_compile+195↓j
.text:0000000000002B10                 cmp     dl, 6Fh ; 'o'
.text:0000000000002B13                 lea     r8, [rbx+2]
.text:0000000000002B17                 jz      loc_2CB0
.text:0000000000002B1D                 cmp     dl, 75h ; 'u'
.text:0000000000002B20                 mov     r10d, 1C0h
.text:0000000000002B26                 jnz     loc_2C00
.text:0000000000002B2C
.text:0000000000002B2C loc_2B2C:                               ; CODE XREF: mode_compile+2C6↓j
.text:0000000000002B2C                                         ; mode_compile+2DA↓j
.text:0000000000002B2C                 mov     [rsi], r9b
.text:0000000000002B2F                 mov     byte ptr [rsi+1], 3
.text:0000000000002B33                 movzx   r9d, byte ptr [rbx+2]
.text:0000000000002B38                 mov     [rsi+4], r11d
.text:0000000000002B3C                 mov     rbx, r8
.text:0000000000002B3F                 mov     [rsi+8], r10d
.text:0000000000002B43
.text:0000000000002B43 loc_2B43:                               ; CODE XREF: mode_compile+26D↓j
.text:0000000000002B43                 mov     edx, r10d
.text:0000000000002B46                 and     edx, r11d
.text:0000000000002B49                 test    r11d, r11d
.text:0000000000002B4C                 cmovnz  r10d, edx
.text:0000000000002B50
.text:0000000000002B50 loc_2B50:                               ; CODE XREF: mode_compile+205↓j
.text:0000000000002B50                 mov     edx, r9d
.text:0000000000002B53                 mov     [rsi+0Ch], r10d
.text:0000000000002B57                 add     rsi, 10h
.text:0000000000002B5B                 and     edx, 0FFFFFFEFh
.text:0000000000002B5E                 lea     rcx, [rdi+1]
.text:0000000000002B62                 cmp     dl, 2Dh ; '-'
.text:0000000000002B65                 jz      short loc_2B71
.text:0000000000002B67                 cmp     r9b, 2Bh ; '+'
.text:0000000000002B6B                 jnz     loc_2D70
.text:0000000000002B71
.text:0000000000002B71 loc_2B71:                               ; CODE XREF: mode_compile+175↑j
.text:0000000000002B71                 mov     rdi, rcx
.text:0000000000002B74
.text:0000000000002B74 loc_2B74:                               ; CODE XREF: mode_compile+11D↑j
.text:0000000000002B74                 movsx   edx, byte ptr [rbx+1]
.text:0000000000002B78                 lea     rcx, [rbx+1]
.text:0000000000002B7C                 cmp     dl, 67h ; 'g'
.text:0000000000002B7F                 jz      loc_2CC0
.text:0000000000002B85                 jg      short loc_2B10
.text:0000000000002B87                 lea     r8d, [rdx-30h]
.text:0000000000002B8B                 cmp     r8b, 7
.text:0000000000002B8F                 ja      short loc_2C00
.text:0000000000002B91                 xor     r8d, r8d
.text:0000000000002B94                 nop     dword ptr [rax+00h]
.text:0000000000002B98
.text:0000000000002B98 loc_2B98:                               ; CODE XREF: mode_compile+1C9↓j
.text:0000000000002B98                 lea     r8d, [rdx+r8*8-30h]
.text:0000000000002B9D                 add     rcx, 1
.text:0000000000002BA1                 cmp     r8d, 0FFFh
.text:0000000000002BA8                 ja      loc_2AA3
.text:0000000000002BAE                 movsx   edx, byte ptr [rcx]
.text:0000000000002BB1                 lea     r10d, [rdx-30h]
.text:0000000000002BB5                 cmp     r10b, 7
.text:0000000000002BB9                 jbe     short loc_2B98
.text:0000000000002BBB                 test    r11d, r11d
.text:0000000000002BBE                 jnz     loc_2AA3
.text:0000000000002BC4                 test    dl, dl
.text:0000000000002BC6                 jz      short loc_2BD1
.text:0000000000002BC8                 cmp     dl, 2Ch ; ','
.text:0000000000002BCB                 jnz     loc_2AA3
.text:0000000000002BD1
.text:0000000000002BD1 loc_2BD1:                               ; CODE XREF: mode_compile+1D6↑j
.text:0000000000002BD1                 mov     [rsi], r9b
.text:0000000000002BD4                 mov     byte ptr [rsi+1], 1
.text:0000000000002BD8                 mov     r9d, edx
.text:0000000000002BDB                 mov     dword ptr [rsi+4], 0FFFh
.text:0000000000002BE2                 mov     [rsi+8], r8d
.text:0000000000002BE6                 mov     rbx, rcx
.text:0000000000002BE9                 mov     r11d, 0FFFh
.text:0000000000002BEF                 mov     r10d, 0FFFh
.text:0000000000002BF5                 jmp     loc_2B50
.text:0000000000002BF5 ; ---------------------------------------------------------------------------
.text:0000000000002BFA                 align 20h
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: mode_compile+136↑j
.text:0000000000002C00                                         ; mode_compile+19F↑j
.text:0000000000002C00                 lea     r8d, [rdx-58h]  ; switch 33 cases
.text:0000000000002C04                 xor     r10d, r10d
.text:0000000000002C07                 mov     ebx, 1
.text:0000000000002C0C                 cmp     r8b, 20h
.text:0000000000002C10                 ja      short def_2C24  ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:0000000000002C12                 nop     word ptr [rax+rax+00h]
.text:0000000000002C18
.text:0000000000002C18 loc_2C18:                               ; CODE XREF: mode_compile+257↓j
.text:0000000000002C18                 movzx   r8d, r8b
.text:0000000000002C1C                 movsxd  r8, ss:(jpt_2C24 - 8D24h)[rbp+r8*4]
.text:0000000000002C21                 add     r8, rbp
.text:0000000000002C24                 jmp     r8              ; switch jump
.text:0000000000002C24 ; ---------------------------------------------------------------------------
.text:0000000000002C27                 align 10h
.text:0000000000002C30
.text:0000000000002C30 loc_2C30:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002C30                                         ; DATA XREF: .rodata:jpt_2C24↓o
.text:0000000000002C30                 mov     ebx, 2          ; jumptable 00000000000CDF74 case 88
.text:0000000000002C35                 nop     dword ptr [rax]
.text:0000000000002C38
.text:0000000000002C38 loc_2C38:                               ; CODE XREF: mode_compile+27C↓j
.text:0000000000002C38                                         ; mode_compile+284↓j ...
.text:0000000000002C38                 add     rcx, 1
.text:0000000000002C3C                 movzx   edx, byte ptr [rcx]
.text:0000000000002C3F                 lea     r8d, [rdx-58h]
.text:0000000000002C43                 cmp     r8b, 20h ; ' '
.text:0000000000002C47                 jbe     short loc_2C18
.text:0000000000002C49
.text:0000000000002C49 def_2C24:                               ; CODE XREF: mode_compile+220↑j
.text:0000000000002C49                                         ; mode_compile+234↑j
.text:0000000000002C49                                         ; DATA XREF: ...
.text:0000000000002C49                 mov     [rsi], r9b      ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:0000000000002C4C                 mov     [rsi+1], bl
.text:0000000000002C4F                 mov     r9d, edx
.text:0000000000002C52                 mov     [rsi+4], r11d
.text:0000000000002C56                 mov     [rsi+8], r10d
.text:0000000000002C5A                 mov     rbx, rcx
.text:0000000000002C5D                 jmp     loc_2B43
.text:0000000000002C5D ; ---------------------------------------------------------------------------
.text:0000000000002C62                 align 8
.text:0000000000002C68
.text:0000000000002C68 loc_2C68:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002C68                                         ; DATA XREF: .rodata:jpt_2C24↓o
.text:0000000000002C68                 or      r10d, 49h       ; jumptable 00000000000CDF74 case 120
.text:0000000000002C6C                 jmp     short loc_2C38
.text:0000000000002C6C ; ---------------------------------------------------------------------------
.text:0000000000002C6E                 align 10h
.text:0000000000002C70
.text:0000000000002C70 loc_2C70:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002C70                                         ; DATA XREF: .rodata:jpt_2C24↓o
.text:0000000000002C70                 or      r10b, 92h       ; jumptable 00000000000CDF74 case 119
.text:0000000000002C74                 jmp     short loc_2C38
.text:0000000000002C74 ; ---------------------------------------------------------------------------
.text:0000000000002C76                 align 20h
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002C80                                         ; DATA XREF: .rodata:jpt_2C24↓o
.text:0000000000002C80                 or      r10d, 200h      ; jumptable 00000000000CDF74 case 116
.text:0000000000002C87                 jmp     short loc_2C38
.text:0000000000002C87 ; ---------------------------------------------------------------------------
.text:0000000000002C89                 align 10h
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002C90                                         ; DATA XREF: .rodata:jpt_2C24↓o
.text:0000000000002C90                 or      r10d, 0C00h     ; jumptable 00000000000CDF74 case 115
.text:0000000000002C97                 jmp     short loc_2C38
.text:0000000000002C97 ; ---------------------------------------------------------------------------
.text:0000000000002C99                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002CA0                                         ; DATA XREF: .rodata:jpt_2C24↓o
.text:0000000000002CA0                 or      r10d, 124h      ; jumptable 00000000000CDF74 case 114
.text:0000000000002CA7                 jmp     short loc_2C38
.text:0000000000002CA7 ; ---------------------------------------------------------------------------
.text:0000000000002CA9                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: mode_compile+127↑j
.text:0000000000002CB0                 mov     r10d, 7
.text:0000000000002CB6                 jmp     loc_2B2C
.text:0000000000002CB6 ; ---------------------------------------------------------------------------
.text:0000000000002CBB                 align 20h
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: mode_compile+18F↑j
.text:0000000000002CC0                 lea     r8, [rbx+2]
.text:0000000000002CC4                 mov     r10d, 38h ; '8'
.text:0000000000002CCA                 jmp     loc_2B2C
.text:0000000000002CCA ; ---------------------------------------------------------------------------
.text:0000000000002CCF                 align 10h
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: mode_compile+8D↑j
.text:0000000000002CD0                 mov     r11d, 0FFFh
.text:0000000000002CD6
.text:0000000000002CD6 loc_2CD6:                               ; CODE XREF: mode_compile+2F7↓j
.text:0000000000002CD6                                         ; mode_compile+307↓j ...
.text:0000000000002CD6                 add     rbx, 1
.text:0000000000002CDA                 jmp     loc_2A75
.text:0000000000002CDA ; ---------------------------------------------------------------------------
.text:0000000000002CDF                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: mode_compile+AD↑j
.text:0000000000002CE0                 or      r11d, 438h
.text:0000000000002CE7                 jmp     short loc_2CD6
.text:0000000000002CE7 ; ---------------------------------------------------------------------------
.text:0000000000002CE9                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 loc_2CF0:                               ; CODE XREF: mode_compile+A3↑j
.text:0000000000002CF0                 or      r11d, 9C0h
.text:0000000000002CF7                 jmp     short loc_2CD6
.text:0000000000002CF7 ; ---------------------------------------------------------------------------
.text:0000000000002CF9                 align 20h
.text:0000000000002D00
.text:0000000000002D00 loc_2D00:                               ; CODE XREF: mode_compile+99↑j
.text:0000000000002D00                 or      r11d, 207h
.text:0000000000002D07                 jmp     short loc_2CD6
.text:0000000000002D07 ; ---------------------------------------------------------------------------
.text:0000000000002D09                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: mode_compile+D9↑j
.text:0000000000002D10                 test    al, al
.text:0000000000002D12                 jnz     loc_2ADF
.text:0000000000002D18                 sub     rdx, rbx
.text:0000000000002D1B                 mov     ebx, ebp
.text:0000000000002D1D                 mov     eax, 0FFFh
.text:0000000000002D22                 and     ebx, 0C00h
.text:0000000000002D28                 mov     edi, 20h ; ' '
.text:0000000000002D2D                 or      ebx, 3FFh
.text:0000000000002D33                 cmp     rdx, 5
.text:0000000000002D37                 cmovge  ebx, eax
.text:0000000000002D3A                 call    xmalloc
.text:0000000000002D3F                 mov     edx, 13Dh
.text:0000000000002D44                 mov     dword ptr [rax+4], 0FFFh
.text:0000000000002D4B                 mov     [rax+8], ebp
.text:0000000000002D4E                 mov     [rax], dx
.text:0000000000002D51                 mov     [rax+0Ch], ebx
.text:0000000000002D54                 mov     byte ptr [rax+11h], 0
.text:0000000000002D58                 add     rsp, 8
.text:0000000000002D5C                 pop     rbx
.text:0000000000002D5D                 pop     rbp
.text:0000000000002D5E                 retn
.text:0000000000002D5F ; ---------------------------------------------------------------------------
.text:0000000000002D5F
.text:0000000000002D5F loc_2D5F:                               ; CODE XREF: mode_compile+58↑j
.text:0000000000002D5F                 mov     ecx, 1
.text:0000000000002D64                 jmp     loc_2A4E
.text:0000000000002D69 ; ---------------------------------------------------------------------------
.text:0000000000002D69
.text:0000000000002D69 loc_2D69:                               ; CODE XREF: mode_compile+61↑j
.text:0000000000002D69                                         ; mode_compile+6A↑j
.text:0000000000002D69                 call    xalloc_die
.text:0000000000002D69 ; ---------------------------------------------------------------------------
.text:0000000000002D6E                 align 10h
.text:0000000000002D70
.text:0000000000002D70 loc_2D70:                               ; CODE XREF: mode_compile+17B↑j
.text:0000000000002D70                 cmp     r9b, 2Ch ; ','
.text:0000000000002D74                 jnz     short loc_2D82
.text:0000000000002D76                 add     rbx, 1
.text:0000000000002D7A                 mov     rsi, rdi
.text:0000000000002D7D                 jmp     loc_2A72
.text:0000000000002D82 ; ---------------------------------------------------------------------------
.text:0000000000002D82
.text:0000000000002D82 loc_2D82:                               ; CODE XREF: mode_compile+384↑j
.text:0000000000002D82                 test    r9b, r9b
.text:0000000000002D85                 jnz     loc_2AA3
.text:0000000000002D8B                 shl     rdi, 4
.text:0000000000002D8F                 mov     byte ptr [rax+rdi+1], 0
.text:0000000000002D94                 jmp     loc_2AAD
.text:0000000000002D94 ; } // starts at 29F0
.text:0000000000002D94 mode_compile    endp
.text:0000000000002D94
.text:0000000000002D94 ; ---------------------------------------------------------------------------
.text:0000000000002D99                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DA0
.text:0000000000002DA0
.text:0000000000002DA0 ; __int64 __fastcall mode_create_from_ref(char *filename)
.text:0000000000002DA0                 public mode_create_from_ref
.text:0000000000002DA0 mode_create_from_ref proc near
.text:0000000000002DA0
.text:0000000000002DA0 var_90          = dword ptr -90h
.text:0000000000002DA0 var_10          = qword ptr -10h
.text:0000000000002DA0
.text:0000000000002DA0 ; __unwind {
.text:0000000000002DA0                 push    rbx
.text:0000000000002DA1                 mov     rsi, rdi        ; filename
.text:0000000000002DA4                 mov     edi, 1          ; ver
.text:0000000000002DA9                 sub     rsp, 0A0h
.text:0000000000002DB0                 mov     rdx, rsp        ; stat_buf
.text:0000000000002DB3                 mov     rax, fs:28h
.text:0000000000002DBC                 mov     [rsp+0A8h+var_10], rax
.text:0000000000002DC4                 xor     eax, eax
.text:0000000000002DC6                 call    ___xstat
.text:0000000000002DCB                 test    eax, eax
.text:0000000000002DCD                 jnz     short loc_2E20
.text:0000000000002DCF                 mov     ebx, [rsp+0A8h+var_90]
.text:0000000000002DD3                 mov     edi, 20h ; ' '
.text:0000000000002DD8                 call    xmalloc
.text:0000000000002DDD                 mov     edx, 13Dh
.text:0000000000002DE2                 mov     dword ptr [rax+4], 0FFFh
.text:0000000000002DE9                 mov     dword ptr [rax+0Ch], 0FFFh
.text:0000000000002DF0                 mov     [rax], dx
.text:0000000000002DF3                 mov     [rax+8], ebx
.text:0000000000002DF6                 mov     byte ptr [rax+11h], 0
.text:0000000000002DFA
.text:0000000000002DFA loc_2DFA:                               ; CODE XREF: mode_create_from_ref+82↓j
.text:0000000000002DFA                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000002E02                 xor     rcx, fs:28h
.text:0000000000002E0B                 jnz     short loc_2E24
.text:0000000000002E0D                 add     rsp, 0A0h
.text:0000000000002E14                 pop     rbx
.text:0000000000002E15                 retn
.text:0000000000002E15 ; ---------------------------------------------------------------------------
.text:0000000000002E16                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: mode_create_from_ref+2D↑j
.text:0000000000002E20                 xor     eax, eax
.text:0000000000002E22                 jmp     short loc_2DFA
.text:0000000000002E24 ; ---------------------------------------------------------------------------
.text:0000000000002E24
.text:0000000000002E24 loc_2E24:                               ; CODE XREF: mode_create_from_ref+6B↑j
.text:0000000000002E24                 call    ___stack_chk_fail
.text:0000000000002E24 ; } // starts at 2DA0
.text:0000000000002E24 mode_create_from_ref endp
.text:0000000000002E24
.text:0000000000002E24 ; ---------------------------------------------------------------------------
.text:0000000000002E29                 align 10h
.text:0000000000002E30
.text:0000000000002E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E30
.text:0000000000002E30
.text:0000000000002E30                 public mode_adjust
.text:0000000000002E30 mode_adjust     proc near               ; CODE XREF: main+24C↑p
.text:0000000000002E30 ; __unwind {
.text:0000000000002E30                 movzx   r10d, byte ptr [rcx+1]
.text:0000000000002E35                 mov     eax, edi
.text:0000000000002E37                 and     eax, 0FFFh
.text:0000000000002E3C                 test    r10b, r10b
.text:0000000000002E3F                 jz      loc_2F90
.text:0000000000002E45                 cmp     sil, 1
.text:0000000000002E49                 push    r12
.text:0000000000002E4B                 push    rbp
.text:0000000000002E4C                 push    rbx
.text:0000000000002E4D                 sbb     ebx, ebx
.text:0000000000002E4F                 movzx   ebp, sil
.text:0000000000002E53                 not     ebx
.text:0000000000002E55                 xor     r11d, r11d
.text:0000000000002E58                 and     ebx, 0C00h
.text:0000000000002E5E                 jmp     short loc_2E9A
.text:0000000000002E60 ; ---------------------------------------------------------------------------
.text:0000000000002E60
.text:0000000000002E60 loc_2E60:                               ; CODE XREF: mode_adjust+D4↓j
.text:0000000000002E60                 mov     edi, r9d
.text:0000000000002E63                 or      edi, edx
.text:0000000000002E65                 not     edi
.text:0000000000002E67                 and     esi, edi
.text:0000000000002E69                 cmp     r12b, 2Dh ; '-'
.text:0000000000002E6D                 jz      loc_2F80
.text:0000000000002E73                 cmp     r12b, 3Dh ; '='
.text:0000000000002E77                 jz      loc_2F2B
.text:0000000000002E7D
.text:0000000000002E7D loc_2E7D:                               ; CODE XREF: mode_adjust+EA↓j
.text:0000000000002E7D                 cmp     r12b, 2Bh ; '+'
.text:0000000000002E81                 jnz     short loc_2E88
.text:0000000000002E83                 or      r11d, esi
.text:0000000000002E86                 or      eax, esi
.text:0000000000002E88
.text:0000000000002E88 loc_2E88:                               ; CODE XREF: mode_adjust+51↑j
.text:0000000000002E88                                         ; mode_adjust+157↓j
.text:0000000000002E88                 add     rcx, 10h
.text:0000000000002E8C                 movzx   r10d, byte ptr [rcx+1]
.text:0000000000002E91                 test    r10b, r10b
.text:0000000000002E94                 jz      loc_2F4C
.text:0000000000002E9A
.text:0000000000002E9A loc_2E9A:                               ; CODE XREF: mode_adjust+2E↑j
.text:0000000000002E9A                                         ; mode_adjust+116↓j
.text:0000000000002E9A                 mov     r9d, [rcx+0Ch]
.text:0000000000002E9E                 mov     edi, [rcx+4]
.text:0000000000002EA1                 mov     esi, [rcx+8]
.text:0000000000002EA4                 not     r9d
.text:0000000000002EA7                 and     r9d, ebx
.text:0000000000002EAA                 cmp     r10b, 2
.text:0000000000002EAE                 jz      loc_2F60
.text:0000000000002EB4                 cmp     r10b, 3
.text:0000000000002EB8                 jnz     short loc_2EF8
.text:0000000000002EBA                 and     esi, eax
.text:0000000000002EBC                 mov     r10d, esi
.text:0000000000002EBF                 and     r10d, 124h
.text:0000000000002EC6                 cmp     r10d, 1
.text:0000000000002ECA                 sbb     r10d, r10d
.text:0000000000002ECD                 not     r10d
.text:0000000000002ED0                 and     r10d, 124h
.text:0000000000002ED7                 mov     r12d, r10d
.text:0000000000002EDA                 or      r12b, 92h
.text:0000000000002EDE                 test    sil, 92h
.text:0000000000002EE2                 cmovnz  r10d, r12d
.text:0000000000002EE6                 mov     r12d, r10d
.text:0000000000002EE9                 or      r12d, 49h
.text:0000000000002EED                 test    sil, 49h
.text:0000000000002EF1                 cmovnz  r10d, r12d
.text:0000000000002EF5                 or      esi, r10d
.text:0000000000002EF8
.text:0000000000002EF8 loc_2EF8:                               ; CODE XREF: mode_adjust+88↑j
.text:0000000000002EF8                                         ; mode_adjust+145↓j
.text:0000000000002EF8                 mov     r10d, r9d
.text:0000000000002EFB                 test    edi, edi
.text:0000000000002EFD                 movzx   r12d, byte ptr [rcx]
.text:0000000000002F01                 not     r10d
.text:0000000000002F04                 jz      loc_2E60
.text:0000000000002F0A                 and     r10d, edi
.text:0000000000002F0D                 and     esi, r10d
.text:0000000000002F10                 cmp     r12b, 2Dh ; '-'
.text:0000000000002F14                 jz      short loc_2F80
.text:0000000000002F16                 cmp     r12b, 3Dh ; '='
.text:0000000000002F1A                 jnz     loc_2E7D
.text:0000000000002F20                 not     edi
.text:0000000000002F22                 or      r9d, edi
.text:0000000000002F25                 mov     r10d, r9d
.text:0000000000002F28                 not     r10d
.text:0000000000002F2B
.text:0000000000002F2B loc_2F2B:                               ; CODE XREF: mode_adjust+47↑j
.text:0000000000002F2B                 and     r10d, 0FFFh
.text:0000000000002F32                 add     rcx, 10h
.text:0000000000002F36                 and     eax, r9d
.text:0000000000002F39                 or      r11d, r10d
.text:0000000000002F3C                 movzx   r10d, byte ptr [rcx+1]
.text:0000000000002F41                 or      eax, esi
.text:0000000000002F43                 test    r10b, r10b
.text:0000000000002F46                 jnz     loc_2E9A
.text:0000000000002F4C
.text:0000000000002F4C loc_2F4C:                               ; CODE XREF: mode_adjust+64↑j
.text:0000000000002F4C                 test    r8, r8
.text:0000000000002F4F                 jz      short loc_2F54
.text:0000000000002F51                 mov     [r8], r11d
.text:0000000000002F54
.text:0000000000002F54 loc_2F54:                               ; CODE XREF: mode_adjust+11F↑j
.text:0000000000002F54                 pop     rbx
.text:0000000000002F55                 pop     rbp
.text:0000000000002F56                 pop     r12
.text:0000000000002F58                 retn
.text:0000000000002F58 ; ---------------------------------------------------------------------------
.text:0000000000002F59                 align 20h
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: mode_adjust+7E↑j
.text:0000000000002F60                 mov     r12d, eax
.text:0000000000002F63                 mov     r10d, esi
.text:0000000000002F66                 and     r12d, 49h
.text:0000000000002F6A                 or      r10d, 49h
.text:0000000000002F6E                 or      r12d, ebp
.text:0000000000002F71                 cmovnz  esi, r10d
.text:0000000000002F75                 jmp     short loc_2EF8
.text:0000000000002F75 ; ---------------------------------------------------------------------------
.text:0000000000002F77                 align 20h
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: mode_adjust+3D↑j
.text:0000000000002F80                                         ; mode_adjust+E4↑j
.text:0000000000002F80                 or      r11d, esi
.text:0000000000002F83                 not     esi
.text:0000000000002F85                 and     eax, esi
.text:0000000000002F87                 jmp     loc_2E88
.text:0000000000002F87 ; ---------------------------------------------------------------------------
.text:0000000000002F8C                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: mode_adjust+F↑j
.text:0000000000002F90                 xor     r11d, r11d
.text:0000000000002F93                 test    r8, r8
.text:0000000000002F96                 jz      short locret_2F9B
.text:0000000000002F98                 mov     [r8], r11d
.text:0000000000002F9B
.text:0000000000002F9B locret_2F9B:                            ; CODE XREF: mode_adjust+166↑j
.text:0000000000002F9B                 rep retn
.text:0000000000002F9B ; } // starts at 2E30
.text:0000000000002F9B mode_adjust     endp
.text:0000000000002F9B
.text:0000000000002F9B ; ---------------------------------------------------------------------------
.text:0000000000002F9D                 align 20h
.text:0000000000002FA0
.text:0000000000002FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FA0
.text:0000000000002FA0
.text:0000000000002FA0                 public set_program_name
.text:0000000000002FA0 set_program_name proc near              ; CODE XREF: main+4D↑p
.text:0000000000002FA0 ; __unwind {
.text:0000000000002FA0                 test    rdi, rdi
.text:0000000000002FA3                 push    rbx
.text:0000000000002FA4                 jz      short loc_301D
.text:0000000000002FA6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002FAB                 mov     rbx, rdi
.text:0000000000002FAE                 call    _strrchr
.text:0000000000002FB3                 test    rax, rax
.text:0000000000002FB6                 jz      short loc_300D
.text:0000000000002FB8                 lea     r8, [rax+1]
.text:0000000000002FBC                 mov     rdx, r8
.text:0000000000002FBF                 sub     rdx, rbx
.text:0000000000002FC2                 cmp     rdx, 6
.text:0000000000002FC6                 jle     short loc_300D
.text:0000000000002FC8                 lea     rsi, [rax-6]
.text:0000000000002FCC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002FD3                 mov     ecx, 7
.text:0000000000002FD8                 repe cmpsb
.text:0000000000002FDA                 setnbe  dl
.text:0000000000002FDD                 sbb     dl, 0
.text:0000000000002FE0                 test    dl, dl
.text:0000000000002FE2                 jnz     short loc_300D
.text:0000000000002FE4                 lea     rdi, aLt        ; "lt-"
.text:0000000000002FEB                 mov     ecx, 3
.text:0000000000002FF0                 mov     rsi, r8
.text:0000000000002FF3                 mov     rbx, r8
.text:0000000000002FF6                 repe cmpsb
.text:0000000000002FF8                 setnbe  dl
.text:0000000000002FFB                 sbb     dl, 0
.text:0000000000002FFE                 test    dl, dl
.text:0000000000003000                 jnz     short loc_300D
.text:0000000000003002                 lea     rbx, [rax+4]
.text:0000000000003006                 mov     cs:__bss_start, rbx
.text:000000000000300D
.text:000000000000300D loc_300D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000300D                                         ; set_program_name+26↑j ...
.text:000000000000300D                 mov     cs:program_name, rbx
.text:0000000000003014                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000301B                 pop     rbx
.text:000000000000301C                 retn
.text:000000000000301D ; ---------------------------------------------------------------------------
.text:000000000000301D
.text:000000000000301D loc_301D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000301D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003024                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000302B                 mov     edx, 37h ; '7'  ; n
.text:0000000000003030                 mov     esi, 1          ; size
.text:0000000000003035                 call    _fwrite
.text:000000000000303A                 call    _abort
.text:000000000000303A ; } // starts at 2FA0
.text:000000000000303A set_program_name endp
.text:000000000000303A
.text:000000000000303A ; ---------------------------------------------------------------------------
.text:000000000000303F                 align 20h
.text:0000000000003040
.text:0000000000003040 ; =============== S U B R O U T I N E =======================================
.text:0000000000003040
.text:0000000000003040 ; Attributes: info_from_lumina
.text:0000000000003040
.text:0000000000003040 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003040 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003040                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003040 ; __unwind {
.text:0000000000003040                 push    rbp
.text:0000000000003041                 push    rbx
.text:0000000000003042                 mov     rbp, rdi
.text:0000000000003045                 mov     ebx, esi
.text:0000000000003047                 sub     rsp, 8
.text:000000000000304B                 call    locale_charset
.text:0000000000003050                 movzx   edx, byte ptr [rax]
.text:0000000000003053                 and     edx, 0FFFFFFDFh
.text:0000000000003056                 cmp     dl, 55h ; 'U'
.text:0000000000003059                 jz      short loc_30D0
.text:000000000000305B                 cmp     dl, 47h ; 'G'
.text:000000000000305E                 jz      short loc_3080
.text:0000000000003060
.text:0000000000003060 loc_3060:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000003060                                         ; gettext_quote+50↓j ...
.text:0000000000003060                 lea     rax, unk_8DFB
.text:0000000000003067                 lea     rdx, asc_8DFD   ; "'"
.text:000000000000306E                 cmp     ebx, 9
.text:0000000000003071                 cmovnz  rax, rdx
.text:0000000000003075                 add     rsp, 8
.text:0000000000003079                 pop     rbx
.text:000000000000307A                 pop     rbp
.text:000000000000307B                 retn
.text:000000000000307B ; ---------------------------------------------------------------------------
.text:000000000000307C                 align 20h
.text:0000000000003080
.text:0000000000003080 loc_3080:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003080                 movzx   edx, byte ptr [rax+1]
.text:0000000000003084                 and     edx, 0FFFFFFDFh
.text:0000000000003087                 cmp     dl, 42h ; 'B'
.text:000000000000308A                 jnz     short loc_3060
.text:000000000000308C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003090                 jnz     short loc_3060
.text:0000000000003092                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003096                 jnz     short loc_3060
.text:0000000000003098                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000309C                 jnz     short loc_3060
.text:000000000000309E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000030A2                 jnz     short loc_3060
.text:00000000000030A4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000030A8                 jnz     short loc_3060
.text:00000000000030AA                 cmp     byte ptr [rax+7], 0
.text:00000000000030AE                 jnz     short loc_3060
.text:00000000000030B0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000030B4                 lea     rax, unk_8DF4
.text:00000000000030BB                 lea     rdx, unk_8DF8
.text:00000000000030C2                 cmovnz  rax, rdx
.text:00000000000030C6                 add     rsp, 8
.text:00000000000030CA                 pop     rbx
.text:00000000000030CB                 pop     rbp
.text:00000000000030CC                 retn
.text:00000000000030CC ; ---------------------------------------------------------------------------
.text:00000000000030CD                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000030D0                 movzx   edx, byte ptr [rax+1]
.text:00000000000030D4                 and     edx, 0FFFFFFDFh
.text:00000000000030D7                 cmp     dl, 54h ; 'T'
.text:00000000000030DA                 jnz     short loc_3060
.text:00000000000030DC                 movzx   edx, byte ptr [rax+2]
.text:00000000000030E0                 and     edx, 0FFFFFFDFh
.text:00000000000030E3                 cmp     dl, 46h ; 'F'
.text:00000000000030E6                 jnz     loc_3060
.text:00000000000030EC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000030F0                 jnz     loc_3060
.text:00000000000030F6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000030FA                 jnz     loc_3060
.text:0000000000003100                 cmp     byte ptr [rax+5], 0
.text:0000000000003104                 jnz     loc_3060
.text:000000000000310A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000310E                 lea     rax, unk_8DEC
.text:0000000000003115                 lea     rdx, unk_8DF0
.text:000000000000311C                 cmovnz  rax, rdx
.text:0000000000003120                 add     rsp, 8
.text:0000000000003124                 pop     rbx
.text:0000000000003125                 pop     rbp
.text:0000000000003126                 retn
.text:0000000000003126 ; } // starts at 3040
.text:0000000000003126 gettext_quote   endp
.text:0000000000003126
.text:0000000000003126 ; ---------------------------------------------------------------------------
.text:0000000000003127                 align 10h
.text:0000000000003130
.text:0000000000003130 ; =============== S U B R O U T I N E =======================================
.text:0000000000003130
.text:0000000000003130 ; Attributes: info_from_lumina
.text:0000000000003130
.text:0000000000003130 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003130 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003130                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003130
.text:0000000000003130 var_E0          = dword ptr -0E0h
.text:0000000000003130 var_DB          = byte ptr -0DBh
.text:0000000000003130 var_DA          = byte ptr -0DAh
.text:0000000000003130 var_D9          = byte ptr -0D9h
.text:0000000000003130 s               = qword ptr -0D8h
.text:0000000000003130 n               = qword ptr -0D0h
.text:0000000000003130 var_C8          = qword ptr -0C8h
.text:0000000000003130 ps              = qword ptr -0C0h
.text:0000000000003130 var_B8          = qword ptr -0B8h
.text:0000000000003130 var_B0          = qword ptr -0B0h
.text:0000000000003130 var_A8          = qword ptr -0A8h
.text:0000000000003130 s2              = qword ptr -0A0h
.text:0000000000003130 var_98          = qword ptr -98h
.text:0000000000003130 var_90          = qword ptr -90h
.text:0000000000003130 var_88          = qword ptr -88h
.text:0000000000003130 var_80          = qword ptr -80h
.text:0000000000003130 var_78          = qword ptr -78h
.text:0000000000003130 var_70          = dword ptr -70h
.text:0000000000003130 var_6C          = byte ptr -6Ch
.text:0000000000003130 var_6B          = byte ptr -6Bh
.text:0000000000003130 var_6A          = byte ptr -6Ah
.text:0000000000003130 var_69          = byte ptr -69h
.text:0000000000003130 var_68          = qword ptr -68h
.text:0000000000003130 var_60          = qword ptr -60h
.text:0000000000003130 wc              = dword ptr -4Ch
.text:0000000000003130 var_48          = qword ptr -48h
.text:0000000000003130 var_40          = qword ptr -40h
.text:0000000000003130 arg_0           = qword ptr  8
.text:0000000000003130 arg_8           = qword ptr  10h
.text:0000000000003130 arg_10          = qword ptr  18h
.text:0000000000003130
.text:0000000000003130 ; __unwind {
.text:0000000000003130                 push    r15
.text:0000000000003132                 push    r14
.text:0000000000003134                 mov     r15d, r8d
.text:0000000000003137                 push    r13
.text:0000000000003139                 push    r12
.text:000000000000313B                 mov     r14, rdi
.text:000000000000313E                 push    rbp
.text:000000000000313F                 push    rbx
.text:0000000000003140                 mov     ebx, r9d
.text:0000000000003143                 mov     r13, rsi
.text:0000000000003146                 mov     rbp, rcx
.text:0000000000003149                 and     ebx, 2
.text:000000000000314C                 sub     rsp, 0B8h
.text:0000000000003153                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000315B                 mov     [rsp+0E8h+s], rdx
.text:0000000000003160                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003165                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000316A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000316F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003177                 mov     [rsp+0E8h+var_80], rax
.text:000000000000317C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003184                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003189                 mov     rax, fs:28h
.text:0000000000003192                 mov     [rsp+0E8h+var_40], rax
.text:000000000000319A                 xor     eax, eax
.text:000000000000319C                 call    ___ctype_get_mb_cur_max
.text:00000000000031A1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000031A5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000031AA                 ja      def_31C1        ; jumptable 00000000000121F1 default case
.text:00000000000031B0                 lea     rcx, jpt_31C1
.text:00000000000031B7                 mov     edx, r15d
.text:00000000000031BA                 movsxd  rax, ds:(jpt_31C1 - 8E60h)[rcx+rdx*4]
.text:00000000000031BE                 add     rax, rcx
.text:00000000000031C1                 jmp     rax             ; switch jump
.text:00000000000031C3 ; ---------------------------------------------------------------------------
.text:00000000000031C3
.text:00000000000031C3 loc_31C3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000031C3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000031C3                                         ; DATA XREF: ...
.text:00000000000031C3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000031C8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000031CD                 xor     r12d, r12d
.text:00000000000031D0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031D9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000031DE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000031E3
.text:00000000000031E3 loc_31E3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000031E3                 lea     rax, asc_8DFD   ; "'"
.text:00000000000031EA                 mov     [rsp+0E8h+n], 1
.text:00000000000031F3                 xor     r15d, r15d
.text:00000000000031F6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000031FE                 mov     [rsp+0E8h+s2], rax
.text:0000000000003203
.text:0000000000003203 loc_3203:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003203                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003203                 xor     r11d, r11d
.text:0000000000003206                 mov     rax, rbp
.text:0000000000003209                 mov     r8d, r12d
.text:000000000000320C                 mov     rbp, r11
.text:000000000000320F                 mov     r11, rax
.text:0000000000003212                 nop     word ptr [rax+rax+00h]
.text:0000000000003218
.text:0000000000003218 loc_3218:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003218                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003218                 cmp     r11, rbp
.text:000000000000321B                 setnz   r12b
.text:000000000000321F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003223                 jnz     short loc_3232
.text:0000000000003225                 mov     rax, [rsp+0E8h+s]
.text:000000000000322A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000322E                 setnz   r12b
.text:0000000000003232
.text:0000000000003232 loc_3232:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003232                 test    r12b, r12b
.text:0000000000003235                 jz      loc_3890
.text:000000000000323B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003240                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003245                 lea     r9, [rdi+rbp]
.text:0000000000003249                 setnz   al
.text:000000000000324C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003250                 mov     r10d, eax
.text:0000000000003253                 jz      loc_3300
.text:0000000000003259                 mov     rax, [rsp+0E8h+n]
.text:000000000000325E                 test    rax, rax
.text:0000000000003261                 jz      loc_3690
.text:0000000000003267                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000326B                 lea     rbx, [rbp+rax+0]
.text:0000000000003270                 jnz     short loc_32A0
.text:0000000000003272                 cmp     rax, 1
.text:0000000000003276                 jbe     short loc_32A0
.text:0000000000003278                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000327D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003282                 mov     [rsp+0E8h+ps], r9
.text:0000000000003287                 call    _strlen
.text:000000000000328C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003292                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003298                 mov     r11, rax
.text:000000000000329B                 mov     r9, [rsp+0E8h+ps]
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000032A0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000032A0                 cmp     rbx, r11
.text:00000000000032A3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000032A8                 ja      loc_3860
.text:00000000000032AE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000032B3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000032B8                 mov     rdi, r9         ; s1
.text:00000000000032BB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000032C0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000032C5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000032CA                 call    _memcmp
.text:00000000000032CF                 test    eax, eax
.text:00000000000032D1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000032D6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000032DC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000032E1                 jnz     loc_3860
.text:00000000000032E7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000032EC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000032F2                 jnz     loc_4275
.text:00000000000032F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003300                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003300                 movzx   ebx, byte ptr [r9]
.text:0000000000003304                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003307                 ja      def_331E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000330D                 lea     rcx, jpt_331E
.text:0000000000003314                 movzx   edx, bl
.text:0000000000003317                 movsxd  rax, ds:(jpt_331E - 8E8Ch)[rcx+rdx*4]
.text:000000000000331B                 add     rax, rcx
.text:000000000000331E                 jmp     rax             ; switch jump
.text:0000000000003320 ; ---------------------------------------------------------------------------
.text:0000000000003320
.text:0000000000003320 loc_3320:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003320                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:0000000000003320                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003323
.text:0000000000003323 loc_3323:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003323                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003323                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003327                 setnz   al
.text:000000000000332A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000332E                 jnz     short loc_333C
.text:0000000000003330                 mov     rax, [rsp+0E8h+s]
.text:0000000000003335                 cmp     byte ptr [rax+1], 0
.text:0000000000003339                 setnz   al
.text:000000000000333C
.text:000000000000333C loc_333C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000333C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003341                 setz    dl
.text:0000000000003344                 test    al, al
.text:0000000000003346                 jz      loc_3598
.text:000000000000334C
.text:000000000000334C loc_334C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000334C                 xor     r12d, r12d
.text:000000000000334F                 xor     eax, eax
.text:0000000000003351                 nop     dword ptr [rax+00000000h]
.text:0000000000003358
.text:0000000000003358 loc_3358:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003358                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003358                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000335D                 jnz     loc_3472
.text:0000000000003363                 test    dl, dl
.text:0000000000003365                 jnz     loc_3472
.text:000000000000336B
.text:000000000000336B loc_336B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000336B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003370                 test    rsi, rsi
.text:0000000000003373                 jz      short loc_3389
.text:0000000000003375                 mov     edx, ebx
.text:0000000000003377                 shr     dl, 5
.text:000000000000337A                 movzx   edx, dl
.text:000000000000337D                 mov     edx, [rsi+rdx*4]
.text:0000000000003380                 bt      edx, ebx
.text:0000000000003383                 jb      loc_34D3
.text:0000000000003389
.text:0000000000003389 loc_3389:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003389                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003389                 test    r10b, r10b
.text:000000000000338C                 jnz     loc_34D3
.text:0000000000003392                 xor     eax, 1
.text:0000000000003395                 add     rbp, 1
.text:0000000000003399                 and     eax, r8d
.text:000000000000339C
.text:000000000000339C loc_339C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000339C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000339C                 test    al, al
.text:000000000000339E                 jz      short loc_33C0
.text:00000000000033A0                 cmp     r13, r15
.text:00000000000033A3                 jbe     short loc_33AA
.text:00000000000033A5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000033AA
.text:00000000000033AA loc_33AA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000033AA                 lea     rax, [r15+1]
.text:00000000000033AE                 cmp     r13, rax
.text:00000000000033B1                 jbe     short loc_33B9
.text:00000000000033B3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000033B9
.text:00000000000033B9 loc_33B9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000033B9                 add     r15, 2
.text:00000000000033BD                 xor     r8d, r8d
.text:00000000000033C0
.text:00000000000033C0 loc_33C0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000033C0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000033C0                 cmp     r15, r13
.text:00000000000033C3                 jnb     short loc_33C9
.text:00000000000033C5                 mov     [r14+r15], bl
.text:00000000000033C9
.text:00000000000033C9 loc_33C9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000033C9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000033CE                 add     r15, 1
.text:00000000000033D2                 mov     eax, 0
.text:00000000000033D7                 test    r12b, r12b
.text:00000000000033DA                 cmovz   edi, eax
.text:00000000000033DD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000033E2                 jmp     loc_3218
.text:00000000000033E2 ; ---------------------------------------------------------------------------
.text:00000000000033E7                 align 10h
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000033F0                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:00000000000033F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000033F3
.text:00000000000033F3 loc_33F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033F3                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:00000000000033F3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000033F7                 cmp     eax, 2
.text:00000000000033FA                 jz      loc_39B8
.text:0000000000003400                 cmp     eax, 5
.text:0000000000003403                 jz      loc_3978
.text:0000000000003409                 cmp     eax, 2
.text:000000000000340C                 mov     ebx, 3Fh ; '?'
.text:0000000000003411                 setz    dl
.text:0000000000003414                 xor     r12d, r12d
.text:0000000000003417                 xor     eax, eax
.text:0000000000003419                 jmp     loc_3358
.text:0000000000003419 ; ---------------------------------------------------------------------------
.text:000000000000341E                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003420                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:0000000000003420                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003423
.text:0000000000003423 loc_3423:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003423                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003423                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003428                 jz      loc_3930
.text:000000000000342E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003433                 xor     edx, edx
.text:0000000000003435                 xor     eax, eax
.text:0000000000003437                 mov     ebx, 27h ; '''
.text:000000000000343C                 jmp     loc_3358
.text:000000000000343C ; ---------------------------------------------------------------------------
.text:0000000000003441                 align 8
.text:0000000000003448
.text:0000000000003448 loc_3448:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003448                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003448                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000344D                 mov     ebx, 74h ; 't'
.text:0000000000003452
.text:0000000000003452 loc_3452:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003452                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003452                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003457                 setz    al
.text:000000000000345A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000345E                 jnz     loc_35AE
.text:0000000000003464
.text:0000000000003464 loc_3464:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003464                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003464                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003469                 jnz     short loc_34D0
.text:000000000000346B
.text:000000000000346B loc_346B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000346B                 mov     ebx, edx
.text:000000000000346D                 xor     r12d, r12d
.text:0000000000003470                 xor     eax, eax
.text:0000000000003472
.text:0000000000003472 loc_3472:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003472                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003472                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003477                 jnz     loc_336B
.text:000000000000347D                 jmp     loc_3389
.text:000000000000347D ; ---------------------------------------------------------------------------
.text:0000000000003482                 align 8
.text:0000000000003488
.text:0000000000003488 loc_3488:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003488                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003488                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000348D                 mov     ebx, 62h ; 'b'
.text:0000000000003492                 jmp     short loc_3464
.text:0000000000003492 ; ---------------------------------------------------------------------------
.text:0000000000003494                 align 8
.text:0000000000003498
.text:0000000000003498 loc_3498:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003498                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003498                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000349D                 jz      loc_3870
.text:00000000000034A3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000034A8                 jz      loc_36C0
.text:00000000000034AE
.text:00000000000034AE loc_34AE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000034AE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034B3                 jz      loc_36C0
.text:00000000000034B9                 cmp     [rsp+0E8h+n], 0
.text:00000000000034BF                 jnz     loc_387B
.text:00000000000034C5                 mov     ebx, 5Ch ; '\'
.text:00000000000034CA                 nop     word ptr [rax+rax+00h]
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000034D0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000034D0                 xor     r12d, r12d
.text:00000000000034D3
.text:00000000000034D3 loc_34D3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000034D3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000034D3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034D8                 setz    dl
.text:00000000000034DB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034E0                 mov     eax, edx
.text:00000000000034E2                 jnz     loc_3D38
.text:00000000000034E8                 mov     eax, r8d
.text:00000000000034EB                 xor     eax, 1
.text:00000000000034EE                 and     al, dl
.text:00000000000034F0                 jz      short loc_3521
.text:00000000000034F2                 cmp     r13, r15
.text:00000000000034F5                 jbe     short loc_34FC
.text:00000000000034F7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000034FC
.text:00000000000034FC loc_34FC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000034FC                 lea     rdx, [r15+1]
.text:0000000000003500                 cmp     r13, rdx
.text:0000000000003503                 jbe     short loc_350B
.text:0000000000003505                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000350B
.text:000000000000350B loc_350B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000350B                 lea     rdx, [r15+2]
.text:000000000000350F                 cmp     r13, rdx
.text:0000000000003512                 jbe     short loc_351A
.text:0000000000003514                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000351A
.text:000000000000351A loc_351A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000351A                 add     r15, 3
.text:000000000000351E                 mov     r8d, eax
.text:0000000000003521
.text:0000000000003521 loc_3521:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003521                 cmp     r13, r15
.text:0000000000003524                 jbe     short loc_352B
.text:0000000000003526                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000352B
.text:000000000000352B loc_352B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000352B                 add     r15, 1
.text:000000000000352F                 add     rbp, 1
.text:0000000000003533                 jmp     loc_33C0
.text:0000000000003533 ; ---------------------------------------------------------------------------
.text:0000000000003538                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003540                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003540                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003545                 jnz     loc_3713
.text:000000000000354B                 xor     edx, edx
.text:000000000000354D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003552                 jz      loc_346B
.text:0000000000003558                 add     rbp, 1
.text:000000000000355C                 jmp     loc_3218
.text:000000000000355C ; ---------------------------------------------------------------------------
.text:0000000000003561                 align 8
.text:0000000000003568
.text:0000000000003568 loc_3568:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003568                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003568                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000356D                 setz    dl
.text:0000000000003570                 xor     eax, eax
.text:0000000000003572                 jmp     loc_3358
.text:0000000000003572 ; ---------------------------------------------------------------------------
.text:0000000000003577                 align 20h
.text:0000000000003580
.text:0000000000003580 loc_3580:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003580                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003580                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003585                 mov     ebx, 61h ; 'a'
.text:000000000000358A                 jmp     loc_3464
.text:000000000000358A ; ---------------------------------------------------------------------------
.text:000000000000358F                 align 10h
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003590                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003590                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003595                 setz    dl
.text:0000000000003598
.text:0000000000003598 loc_3598:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003598                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003598                 test    rbp, rbp
.text:000000000000359B                 jnz     loc_334C
.text:00000000000035A1
.text:00000000000035A1 loc_35A1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000035A1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000035A1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000035A6                 and     al, dl
.text:00000000000035A8                 jz      loc_3358
.text:00000000000035AE
.text:00000000000035AE loc_35AE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000035AE                 mov     rbp, r11
.text:00000000000035B1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000035B9                 jmp     loc_3CB9
.text:00000000000035B9 ; ---------------------------------------------------------------------------
.text:00000000000035BE                 align 20h
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035C0                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:00000000000035C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000035C5                 setz    dl
.text:00000000000035C8                 xor     r12d, r12d
.text:00000000000035CB                 jmp     short loc_35A1
.text:00000000000035CB ; ---------------------------------------------------------------------------
.text:00000000000035CD                 align 10h
.text:00000000000035D0
.text:00000000000035D0 loc_35D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035D0                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:00000000000035D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000035D5                 mov     ebx, 20h ; ' '
.text:00000000000035DA                 setz    dl
.text:00000000000035DD                 jmp     short loc_35A1
.text:00000000000035DD ; ---------------------------------------------------------------------------
.text:00000000000035DF                 align 20h
.text:00000000000035E0
.text:00000000000035E0 loc_35E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035E0                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:00000000000035E0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000035E5                 mov     ebx, 72h ; 'r'
.text:00000000000035EA                 jmp     loc_3452
.text:00000000000035EA ; ---------------------------------------------------------------------------
.text:00000000000035EF                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035F0                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:00000000000035F0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000035F5                 mov     ebx, 66h ; 'f'
.text:00000000000035FA                 jmp     loc_3464
.text:00000000000035FA ; ---------------------------------------------------------------------------
.text:00000000000035FF                 align 20h
.text:0000000000003600
.text:0000000000003600 loc_3600:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003600                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003600                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003605                 mov     ebx, 76h ; 'v'
.text:000000000000360A                 jmp     loc_3464
.text:000000000000360A ; ---------------------------------------------------------------------------
.text:000000000000360F                 align 10h
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003610                                         ; DATA XREF: .rodata:jpt_331E↓o
.text:0000000000003610                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003615                 mov     ebx, 6Eh ; 'n'
.text:000000000000361A                 jmp     loc_3452
.text:000000000000361A ; ---------------------------------------------------------------------------
.text:000000000000361F                 align 20h
.text:0000000000003620
.text:0000000000003620 def_36AA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003620                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003620                                         ; DATA XREF: ...
.text:0000000000003620                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003623                 nop     dword ptr [rax+rax+00h]
.text:0000000000003628
.text:0000000000003628 def_331E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003628                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003628                                         ; DATA XREF: ...
.text:0000000000003628                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000362E                 jnz     loc_39D8
.text:0000000000003634                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003639                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000363E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003643                 call    ___ctype_b_loc
.text:0000000000003648                 mov     rcx, [rax]
.text:000000000000364B                 movzx   edx, bl
.text:000000000000364E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003654                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000365A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000365F                 mov     edi, 1
.text:0000000000003664                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003668                 and     ax, 4000h
.text:000000000000366C                 setnz   r12b
.text:0000000000003670                 setz    al
.text:0000000000003673                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003677
.text:0000000000003677 loc_3677:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003677                 test    al, al
.text:0000000000003679                 jnz     loc_4011
.text:000000000000367F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003684                 setz    dl
.text:0000000000003687                 jmp     loc_3358
.text:0000000000003687 ; ---------------------------------------------------------------------------
.text:000000000000368C                 align 10h
.text:0000000000003690
.text:0000000000003690 loc_3690:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003690                 movzx   ebx, byte ptr [r9]
.text:0000000000003694                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003697                 ja      short def_36AA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003699                 lea     rcx, jpt_36AA
.text:00000000000036A0                 movzx   edx, bl
.text:00000000000036A3                 movsxd  rax, ds:(jpt_36AA - 9088h)[rcx+rdx*4]
.text:00000000000036A7                 add     rax, rcx
.text:00000000000036AA                 jmp     rax             ; switch jump
.text:00000000000036AA ; ---------------------------------------------------------------------------
.text:00000000000036AC                 align 10h
.text:00000000000036B0
.text:00000000000036B0 loc_36B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000036B0                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:00000000000036B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000036B3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000036B8                 jnz     loc_34AE
.text:00000000000036BE                 xchg    ax, ax
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000036C0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000036C0                 mov     edx, 5Ch ; '\'
.text:00000000000036C5                 mov     ebx, 5Ch ; '\'
.text:00000000000036CA                 jmp     loc_3464
.text:00000000000036CA ; ---------------------------------------------------------------------------
.text:00000000000036CF                 align 10h
.text:00000000000036D0
.text:00000000000036D0 loc_36D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000036D0                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:00000000000036D0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000036D5                 xor     r10d, r10d
.text:00000000000036D8                 mov     ebx, 66h ; 'f'
.text:00000000000036DD                 jmp     loc_3464
.text:00000000000036DD ; ---------------------------------------------------------------------------
.text:00000000000036E2                 align 8
.text:00000000000036E8
.text:00000000000036E8 loc_36E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000036E8                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:00000000000036E8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000036ED                 xor     r10d, r10d
.text:00000000000036F0                 mov     ebx, 6Eh ; 'n'
.text:00000000000036F5                 jmp     loc_3452
.text:00000000000036F5 ; ---------------------------------------------------------------------------
.text:00000000000036FA                 align 20h
.text:0000000000003700
.text:0000000000003700 loc_3700:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003700                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:0000000000003700                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003705                 jmp     loc_34D0
.text:0000000000003705 ; ---------------------------------------------------------------------------
.text:000000000000370A                 align 10h
.text:0000000000003710
.text:0000000000003710 loc_3710:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003710                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:0000000000003710                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003713
.text:0000000000003713 loc_3713:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003713                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003718                 setz    dl
.text:000000000000371B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003720                 jnz     loc_42BA
.text:0000000000003726                 mov     eax, r8d
.text:0000000000003729                 mov     rcx, r15
.text:000000000000372C                 xor     eax, 1
.text:000000000000372F                 and     al, dl
.text:0000000000003731                 jz      short loc_3760
.text:0000000000003733                 cmp     r13, r15
.text:0000000000003736                 jbe     short loc_373D
.text:0000000000003738                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000373D
.text:000000000000373D loc_373D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000373D                 lea     rcx, [r15+1]
.text:0000000000003741                 cmp     r13, rcx
.text:0000000000003744                 jbe     short loc_374C
.text:0000000000003746                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000374C
.text:000000000000374C loc_374C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000374C                 lea     rcx, [r15+2]
.text:0000000000003750                 cmp     r13, rcx
.text:0000000000003753                 ja      loc_3D89
.text:0000000000003759
.text:0000000000003759 loc_3759:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003759                 lea     rcx, [r15+3]
.text:000000000000375D                 mov     r8d, eax
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003760                 cmp     r13, rcx
.text:0000000000003763                 jbe     short loc_376A
.text:0000000000003765                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000376A
.text:000000000000376A loc_376A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000376A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000376F                 lea     r15, [rcx+1]
.text:0000000000003773                 jz      loc_3D79
.text:0000000000003779                 lea     rax, [rbp+1]
.text:000000000000377D                 cmp     rax, r11
.text:0000000000003780                 jnb     short loc_379B
.text:0000000000003782                 mov     rax, [rsp+0E8h+s]
.text:0000000000003787                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000378C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003790                 sub     eax, 30h ; '0'
.text:0000000000003793                 cmp     al, 9
.text:0000000000003795                 jbe     loc_3FC9
.text:000000000000379B
.text:000000000000379B loc_379B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000379B                 mov     eax, r12d
.text:000000000000379E                 mov     ebx, 30h ; '0'
.text:00000000000037A3                 xor     r12d, r12d
.text:00000000000037A6                 jmp     loc_3358
.text:00000000000037A6 ; ---------------------------------------------------------------------------
.text:00000000000037AB                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000037B0                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:00000000000037B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000037B5                 mov     r12d, r10d
.text:00000000000037B8                 setz    dl
.text:00000000000037BB                 xor     r10d, r10d
.text:00000000000037BE                 xor     eax, eax
.text:00000000000037C0                 jmp     loc_3358
.text:00000000000037C0 ; ---------------------------------------------------------------------------
.text:00000000000037C5                 align 8
.text:00000000000037C8
.text:00000000000037C8 loc_37C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000037C8                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:00000000000037C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000037CD                 setz    dl
.text:00000000000037D0                 xor     r10d, r10d
.text:00000000000037D3                 jmp     loc_3598
.text:00000000000037D3 ; ---------------------------------------------------------------------------
.text:00000000000037D8                 align 20h
.text:00000000000037E0
.text:00000000000037E0 loc_37E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000037E0                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:00000000000037E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000037E5                 setz    dl
.text:00000000000037E8                 xor     r10d, r10d
.text:00000000000037EB                 xor     r12d, r12d
.text:00000000000037EE                 jmp     loc_35A1
.text:00000000000037EE ; ---------------------------------------------------------------------------
.text:00000000000037F3                 align 8
.text:00000000000037F8
.text:00000000000037F8 loc_37F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000037F8                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:00000000000037F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000037FD                 mov     r12d, r10d
.text:0000000000003800                 mov     ebx, 20h ; ' '
.text:0000000000003805                 setz    dl
.text:0000000000003808                 xor     r10d, r10d
.text:000000000000380B                 jmp     loc_35A1
.text:0000000000003810 ; ---------------------------------------------------------------------------
.text:0000000000003810
.text:0000000000003810 loc_3810:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003810                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:0000000000003810                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003815                 xor     r10d, r10d
.text:0000000000003818                 mov     ebx, 72h ; 'r'
.text:000000000000381D                 jmp     loc_3452
.text:000000000000381D ; ---------------------------------------------------------------------------
.text:0000000000003822                 align 8
.text:0000000000003828
.text:0000000000003828 loc_3828:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003828                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:0000000000003828                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000382D                 jmp     loc_34D0
.text:000000000000382D ; ---------------------------------------------------------------------------
.text:0000000000003832                 align 8
.text:0000000000003838
.text:0000000000003838 loc_3838:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003838                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:0000000000003838                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000383D                 xor     r10d, r10d
.text:0000000000003840                 mov     ebx, 74h ; 't'
.text:0000000000003845                 jmp     loc_3452
.text:0000000000003845 ; ---------------------------------------------------------------------------
.text:000000000000384A                 align 10h
.text:0000000000003850
.text:0000000000003850 loc_3850:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003850                                         ; DATA XREF: .rodata:jpt_36AA↓o
.text:0000000000003850                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003855                 jmp     loc_34D0
.text:0000000000003855 ; ---------------------------------------------------------------------------
.text:000000000000385A                 align 20h
.text:0000000000003860
.text:0000000000003860 loc_3860:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003860                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003860                 xor     r10d, r10d
.text:0000000000003863                 jmp     loc_3300
.text:0000000000003863 ; ---------------------------------------------------------------------------
.text:0000000000003868                 align 10h
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003870                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003875                 jnz     loc_41E0
.text:000000000000387B
.text:000000000000387B loc_387B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000387B                 add     rbp, 1
.text:000000000000387F                 mov     eax, r8d
.text:0000000000003882                 xor     r12d, r12d
.text:0000000000003885                 mov     ebx, 5Ch ; '\'
.text:000000000000388A                 jmp     loc_339C
.text:000000000000388A ; ---------------------------------------------------------------------------
.text:000000000000388F                 align 10h
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003890                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003895                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000389A                 mov     r12d, r8d
.text:000000000000389D                 mov     rbp, r11
.text:00000000000038A0                 setz    dl
.text:00000000000038A3                 mov     eax, ebx
.text:00000000000038A5                 test    r15, r15
.text:00000000000038A8                 setz    cl
.text:00000000000038AB                 and     eax, edx
.text:00000000000038AD                 and     al, cl
.text:00000000000038AF                 jnz     loc_4316
.text:00000000000038B5                 mov     eax, ebx
.text:00000000000038B7                 xor     eax, 1
.text:00000000000038BA                 and     dl, al
.text:00000000000038BC                 jz      loc_422C
.text:00000000000038C2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000038C7                 jz      loc_422A
.text:00000000000038CD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000038D2                 jnz     loc_42CD
.text:00000000000038D8                 test    r13, r13
.text:00000000000038DB                 setz    al
.text:00000000000038DE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000038E4                 setnz   dl
.text:00000000000038E7                 and     al, dl
.text:00000000000038E9                 jz      loc_430C
.text:00000000000038EF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000038F4
.text:00000000000038F4 loc_38F4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000038F4                 lea     rbx, asc_8DFD   ; "'"
.text:00000000000038FB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000038FF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003907                 mov     r15d, 1
.text:000000000000390D                 mov     [rsp+0E8h+n], 1
.text:0000000000003916                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000391B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003920                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003924                 jmp     loc_3203
.text:0000000000003924 ; ---------------------------------------------------------------------------
.text:0000000000003929                 align 10h
.text:0000000000003930
.text:0000000000003930 loc_3930:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003930                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003935                 jnz     loc_41E0
.text:000000000000393B                 test    r13, r13
.text:000000000000393E                 jz      loc_3D40
.text:0000000000003944                 xor     edx, edx
.text:0000000000003946                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000394C                 jnz     loc_3D40
.text:0000000000003952
.text:0000000000003952 loc_3952:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003952                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003952                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003957                 add     r15, 3
.text:000000000000395B                 xor     eax, eax
.text:000000000000395D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003962                 xor     r8d, r8d
.text:0000000000003965                 mov     r13, rdx
.text:0000000000003968                 mov     ebx, 27h ; '''
.text:000000000000396D                 jmp     loc_3389
.text:000000000000396D ; ---------------------------------------------------------------------------
.text:0000000000003972                 align 8
.text:0000000000003978
.text:0000000000003978 loc_3978:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003978                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000397D                 jz      short loc_39A0
.text:000000000000397F                 lea     rcx, [rbp+2]
.text:0000000000003983                 cmp     rcx, r11
.text:0000000000003986                 jnb     short loc_39A0
.text:0000000000003988                 mov     rax, [rsp+0E8h+s]
.text:000000000000398D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003992                 jz      loc_4122
.text:0000000000003998                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000039A0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000039A0                 xor     edx, edx
.text:00000000000039A2                 xor     r12d, r12d
.text:00000000000039A5                 xor     eax, eax
.text:00000000000039A7                 mov     ebx, 3Fh ; '?'
.text:00000000000039AC                 jmp     loc_3358
.text:00000000000039AC ; ---------------------------------------------------------------------------
.text:00000000000039B1                 align 8
.text:00000000000039B8
.text:00000000000039B8 loc_39B8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000039B8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000039BD                 jnz     loc_41E0
.text:00000000000039C3                 xor     r12d, r12d
.text:00000000000039C6                 xor     eax, eax
.text:00000000000039C8                 mov     ebx, 3Fh ; '?'
.text:00000000000039CD                 jmp     loc_3389
.text:00000000000039CD ; ---------------------------------------------------------------------------
.text:00000000000039D2                 align 8
.text:00000000000039D8
.text:00000000000039D8 loc_39D8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000039D8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000039E0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000039E4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000039F0                 mov     [rsp+0E8h+ps], rax
.text:00000000000039F5                 jnz     short loc_3A24
.text:00000000000039F7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000039FC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003A01                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003A06                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003A0B                 call    _strlen
.text:0000000000003A10                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003A16                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003A1C                 mov     r11, rax
.text:0000000000003A1F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003A24
.text:0000000000003A24 loc_3A24:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003A24                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003A2C                 xor     ecx, ecx
.text:0000000000003A2E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003A32                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003A37                 mov     rbx, rcx
.text:0000000000003A3A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003A42                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003A47                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003A4C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003A54                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003A59                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003A5E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003A63
.text:0000000000003A63 loc_3A63:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003A63                 mov     rax, [rsp+0E8h+s]
.text:0000000000003A68                 lea     r14, [rbp+rbx+0]
.text:0000000000003A6D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003A72                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003A77                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003A7C                 lea     r13, [rax+r14]
.text:0000000000003A80                 sub     rdx, r14
.text:0000000000003A83                 mov     rsi, r13
.text:0000000000003A86                 call    rpl_mbrtowc
.text:0000000000003A8B                 test    rax, rax
.text:0000000000003A8E                 mov     r15, rax
.text:0000000000003A91                 jz      short loc_3AE1
.text:0000000000003A93                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A97                 jz      loc_40B5
.text:0000000000003A9D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003AA1                 jz      loc_4041
.text:0000000000003AA7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003AAC                 setz    al
.text:0000000000003AAF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003AB3                 jnz     loc_3C50
.text:0000000000003AB9
.text:0000000000003AB9 loc_3AB9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003AB9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003AB9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003AC0                 call    _iswprint
.text:0000000000003AC5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003ACA                 test    eax, eax
.text:0000000000003ACC                 mov     eax, 0
.text:0000000000003AD1                 cmovz   r12d, eax
.text:0000000000003AD5                 add     rbx, r15
.text:0000000000003AD8                 call    _mbsinit
.text:0000000000003ADD                 test    eax, eax
.text:0000000000003ADF                 jz      short loc_3A63
.text:0000000000003AE1
.text:0000000000003AE1 loc_3AE1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003AE1                 mov     edx, r12d
.text:0000000000003AE4                 mov     rdi, rbx
.text:0000000000003AE7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003AED                 xor     edx, 1
.text:0000000000003AF0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003AF5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003AFB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003AFF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003B07                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003B0C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003B11                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003B16
.text:0000000000003B16 loc_3B16:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003B16                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003B16                 cmp     rdi, 1
.text:0000000000003B1A                 jbe     loc_411B
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003B20                 mov     rcx, rdi
.text:0000000000003B23                 xor     esi, esi
.text:0000000000003B25                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003B2B                 add     rcx, rbp
.text:0000000000003B2E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003B33                 jmp     loc_3BEE
.text:0000000000003B33 ; ---------------------------------------------------------------------------
.text:0000000000003B38                 align 20h
.text:0000000000003B40
.text:0000000000003B40 loc_3B40:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003B40                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B45                 setz    al
.text:0000000000003B48                 test    r9b, r9b
.text:0000000000003B4B                 jnz     loc_4000
.text:0000000000003B51                 mov     esi, r8d
.text:0000000000003B54                 xor     esi, 1
.text:0000000000003B57                 and     al, sil
.text:0000000000003B5A                 jz      short loc_3B8B
.text:0000000000003B5C                 cmp     r13, r15
.text:0000000000003B5F                 jbe     short loc_3B66
.text:0000000000003B61                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003B66
.text:0000000000003B66 loc_3B66:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003B66                 lea     rsi, [r15+1]
.text:0000000000003B6A                 cmp     r13, rsi
.text:0000000000003B6D                 jbe     short loc_3B75
.text:0000000000003B6F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003B75
.text:0000000000003B75 loc_3B75:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003B75                 lea     rsi, [r15+2]
.text:0000000000003B79                 cmp     r13, rsi
.text:0000000000003B7C                 jbe     short loc_3B84
.text:0000000000003B7E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003B84
.text:0000000000003B84 loc_3B84:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003B84                 add     r15, 3
.text:0000000000003B88                 mov     r8d, eax
.text:0000000000003B8B
.text:0000000000003B8B loc_3B8B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003B8B                 cmp     r13, r15
.text:0000000000003B8E                 jbe     short loc_3B95
.text:0000000000003B90                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003B95
.text:0000000000003B95 loc_3B95:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003B95                 lea     rax, [r15+1]
.text:0000000000003B99                 cmp     r13, rax
.text:0000000000003B9C                 jbe     short loc_3BAB
.text:0000000000003B9E                 mov     eax, ebx
.text:0000000000003BA0                 shr     al, 6
.text:0000000000003BA3                 add     eax, 30h ; '0'
.text:0000000000003BA6                 mov     [r14+r15+1], al
.text:0000000000003BAB
.text:0000000000003BAB loc_3BAB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003BAB                 lea     rax, [r15+2]
.text:0000000000003BAF                 cmp     r13, rax
.text:0000000000003BB2                 jbe     short loc_3BC4
.text:0000000000003BB4                 mov     eax, ebx
.text:0000000000003BB6                 shr     al, 3
.text:0000000000003BB9                 and     eax, 7
.text:0000000000003BBC                 add     eax, 30h ; '0'
.text:0000000000003BBF                 mov     [r14+r15+2], al
.text:0000000000003BC4
.text:0000000000003BC4 loc_3BC4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003BC4                 and     ebx, 7
.text:0000000000003BC7                 add     rbp, 1
.text:0000000000003BCB                 add     r15, 3
.text:0000000000003BCF                 add     ebx, 30h ; '0'
.text:0000000000003BD2                 cmp     rbp, rcx
.text:0000000000003BD5                 jnb     loc_33C0
.text:0000000000003BDB                 mov     esi, edx
.text:0000000000003BDD
.text:0000000000003BDD loc_3BDD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003BDD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003BDD                 cmp     r13, r15
.text:0000000000003BE0                 jbe     short loc_3BE6
.text:0000000000003BE2                 mov     [r14+r15], bl
.text:0000000000003BE6
.text:0000000000003BE6 loc_3BE6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003BE6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003BEA                 add     r15, 1
.text:0000000000003BEE
.text:0000000000003BEE loc_3BEE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003BEE                 test    dl, dl
.text:0000000000003BF0                 jnz     loc_3B40
.text:0000000000003BF6                 mov     eax, esi
.text:0000000000003BF8                 xor     eax, 1
.text:0000000000003BFB                 and     eax, r8d
.text:0000000000003BFE                 test    r10b, r10b
.text:0000000000003C01                 jz      short loc_3C11
.text:0000000000003C03                 cmp     r13, r15
.text:0000000000003C06                 jbe     short loc_3C0D
.text:0000000000003C08                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003C0D
.text:0000000000003C0D loc_3C0D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003C0D                 add     r15, 1
.text:0000000000003C11
.text:0000000000003C11 loc_3C11:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003C11                 add     rbp, 1
.text:0000000000003C15                 cmp     rbp, rcx
.text:0000000000003C18                 jnb     loc_339C
.text:0000000000003C1E                 test    al, al
.text:0000000000003C20                 jz      loc_401E
.text:0000000000003C26                 cmp     r13, r15
.text:0000000000003C29                 jbe     short loc_3C30
.text:0000000000003C2B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003C30                 lea     rax, [r15+1]
.text:0000000000003C34                 cmp     r13, rax
.text:0000000000003C37                 jbe     short loc_3C3F
.text:0000000000003C39                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003C3F
.text:0000000000003C3F loc_3C3F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003C3F                 add     r15, 2
.text:0000000000003C43                 xor     r10d, r10d
.text:0000000000003C46                 xor     r8d, r8d
.text:0000000000003C49                 jmp     short loc_3BDD
.text:0000000000003C49 ; ---------------------------------------------------------------------------
.text:0000000000003C4B                 align 10h
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003C50                 cmp     r15, 1
.text:0000000000003C54                 jz      loc_3AB9
.text:0000000000003C5A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003C5F                 lea     rcx, [rdi+r15]
.text:0000000000003C63                 lea     rdx, [rdi+r14+1]
.text:0000000000003C68                 lea     r8, [rcx+r14]
.text:0000000000003C6C                 jmp     short loc_3C7D
.text:0000000000003C6C ; ---------------------------------------------------------------------------
.text:0000000000003C6E                 align 10h
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003C70                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003C70                 add     rdx, 1
.text:0000000000003C74                 cmp     r8, rdx
.text:0000000000003C77                 jz      loc_3AB9
.text:0000000000003C7D
.text:0000000000003C7D loc_3C7D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003C7D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003C80                 sub     ecx, 5Bh ; '['
.text:0000000000003C83                 cmp     cl, 21h ; '!'
.text:0000000000003C86                 ja      short loc_3C70
.text:0000000000003C88                 mov     esi, 1
.text:0000000000003C8D                 shl     rsi, cl
.text:0000000000003C90                 mov     rcx, rsi
.text:0000000000003C93                 mov     rsi, 20000002Bh
.text:0000000000003C9D                 test    rcx, rsi
.text:0000000000003CA0                 jz      short loc_3C70
.text:0000000000003CA2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003CA7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003CAC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003CB1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003CB9
.text:0000000000003CB9 loc_3CB9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003CB9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003CB9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003CBE                 jz      short loc_3CD0
.text:0000000000003CC0                 test    al, al
.text:0000000000003CC2                 mov     eax, 4
.text:0000000000003CC7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003CCC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003CD0
.text:0000000000003CD0 loc_3CD0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003CD0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003CD0                 sub     rsp, 8
.text:0000000000003CD4                 mov     rcx, rbp
.text:0000000000003CD7                 mov     rsi, r13
.text:0000000000003CDA                 push    [rsp+0F0h+var_88]
.text:0000000000003CDE                 push    [rsp+0F8h+var_80]
.text:0000000000003CE2                 mov     rdi, r14
.text:0000000000003CE5                 push    0
.text:0000000000003CE7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003CEF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003CF4                 mov     rdx, [rsp+108h+s]
.text:0000000000003CF9                 and     r9d, 0FFFFFFFDh
.text:0000000000003CFD                 call    quotearg_buffer_restyled
.text:0000000000003D02                 add     rsp, 20h
.text:0000000000003D06                 mov     r15, rax
.text:0000000000003D09
.text:0000000000003D09 loc_3D09:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003D09                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003D09                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003D11                 xor     rbx, fs:28h
.text:0000000000003D1A                 mov     rax, r15
.text:0000000000003D1D                 jnz     loc_4323
.text:0000000000003D23                 add     rsp, 0B8h
.text:0000000000003D2A                 pop     rbx
.text:0000000000003D2B                 pop     rbp
.text:0000000000003D2C                 pop     r12
.text:0000000000003D2E                 pop     r13
.text:0000000000003D30                 pop     r14
.text:0000000000003D32                 pop     r15
.text:0000000000003D34                 retn
.text:0000000000003D34 ; ---------------------------------------------------------------------------
.text:0000000000003D35                 align 8
.text:0000000000003D38
.text:0000000000003D38 loc_3D38:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003D38                 mov     rbp, r11
.text:0000000000003D3B                 jmp     loc_3CB9
.text:0000000000003D40 ; ---------------------------------------------------------------------------
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003D40                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003D40                 cmp     r13, r15
.text:0000000000003D43                 jbe     short loc_3D4A
.text:0000000000003D45                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003D4A
.text:0000000000003D4A loc_3D4A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003D4A                 lea     rax, [r15+1]
.text:0000000000003D4E                 cmp     r13, rax
.text:0000000000003D51                 jbe     short loc_3D59
.text:0000000000003D53                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003D59
.text:0000000000003D59 loc_3D59:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003D59                 lea     rax, [r15+2]
.text:0000000000003D5D                 cmp     r13, rax
.text:0000000000003D60                 jbe     loc_4352
.text:0000000000003D66                 mov     rdx, r13
.text:0000000000003D69                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003D6F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003D74                 jmp     loc_3952
.text:0000000000003D79 ; ---------------------------------------------------------------------------
.text:0000000000003D79
.text:0000000000003D79 loc_3D79:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003D79                 mov     eax, r12d
.text:0000000000003D7C                 mov     ebx, 30h ; '0'
.text:0000000000003D81                 xor     r12d, r12d
.text:0000000000003D84                 jmp     loc_3389
.text:0000000000003D89 ; ---------------------------------------------------------------------------
.text:0000000000003D89
.text:0000000000003D89 loc_3D89:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003D89                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003D8F                 jmp     loc_3759
.text:0000000000003D94 ; ---------------------------------------------------------------------------
.text:0000000000003D94
.text:0000000000003D94 loc_3D94:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003D94                                         ; DATA XREF: .rodata:jpt_31C1↓o
.text:0000000000003D94                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003D96                 jnz     loc_31C3        ; jumptable 00000000000121F1 case 1
.text:0000000000003D9C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003DA1
.text:0000000000003DA1 loc_3DA1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003DA1                 test    r13, r13
.text:0000000000003DA4                 jnz     loc_433A
.text:0000000000003DAA                 lea     rax, asc_8DFD   ; "'"
.text:0000000000003DB1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DBA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003DBF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DC4                 xor     r12d, r12d
.text:0000000000003DC7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003DCC                 mov     [rsp+0E8h+n], 1
.text:0000000000003DD5                 mov     [rsp+0E8h+s2], rax
.text:0000000000003DDA                 mov     r15d, 1
.text:0000000000003DE0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003DE8                 jmp     loc_3203
.text:0000000000003DE8 ; ---------------------------------------------------------------------------
.text:0000000000003DED                 align 10h
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003DF0                                         ; DATA XREF: .rodata:jpt_31C1↓o
.text:0000000000003DF0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003DF2                 jnz     loc_41ED
.text:0000000000003DF8                 test    r13, r13
.text:0000000000003DFB                 jz      loc_4026
.text:0000000000003E01                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003E05                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E0A                 xor     r12d, r12d
.text:0000000000003E0D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E12                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E1B
.text:0000000000003E1B loc_3E1B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003E1B                 lea     rax, unk_8DFB
.text:0000000000003E22                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003E27                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003E2C                 mov     [rsp+0E8h+n], 1
.text:0000000000003E35                 mov     r15d, 1
.text:0000000000003E3B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003E40                 jmp     loc_3203
.text:0000000000003E45 ; ---------------------------------------------------------------------------
.text:0000000000003E45
.text:0000000000003E45 loc_3E45:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003E45                                         ; DATA XREF: .rodata:jpt_31C1↓o
.text:0000000000003E45                 lea     rax, unk_8DFB   ; jumptable 00000000000121F1 case 6
.text:0000000000003E4C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E51                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E56                 xor     r12d, r12d
.text:0000000000003E59                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E62                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003E67                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003E6C                 mov     [rsp+0E8h+n], 1
.text:0000000000003E75                 xor     r15d, r15d
.text:0000000000003E78                 mov     [rsp+0E8h+s2], rax
.text:0000000000003E7D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003E85                 jmp     loc_3203
.text:0000000000003E8A ; ---------------------------------------------------------------------------
.text:0000000000003E8A
.text:0000000000003E8A loc_3E8A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003E8A                                         ; DATA XREF: .rodata:jpt_31C1↓o
.text:0000000000003E8A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000003E8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E94                 xor     r12d, r12d
.text:0000000000003E97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003EA0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003EA5                 xor     r15d, r15d
.text:0000000000003EA8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003EAD                 mov     [rsp+0E8h+n], 0
.text:0000000000003EB6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003EBF                 jmp     loc_3203
.text:0000000000003EC4 ; ---------------------------------------------------------------------------
.text:0000000000003EC4
.text:0000000000003EC4 loc_3EC4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003EC4                                         ; DATA XREF: .rodata:jpt_31C1↓o
.text:0000000000003EC4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003EC9                 jz      short loc_3F21
.text:0000000000003ECB                 lea     rsi, asc_8DFF   ; "`"
.text:0000000000003ED2                 xor     edi, edi        ; domainname
.text:0000000000003ED4                 mov     edx, 5          ; category
.text:0000000000003ED9                 call    _dcgettext
.text:0000000000003EDE                 mov     rcx, rax
.text:0000000000003EE1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003EE6                 lea     rax, asc_8DFF   ; "`"
.text:0000000000003EED                 cmp     rcx, rax
.text:0000000000003EF0                 jz      loc_428E
.text:0000000000003EF6
.text:0000000000003EF6 loc_3EF6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003EF6                 lea     rsi, asc_8DFD   ; "'"
.text:0000000000003EFD                 xor     edi, edi        ; domainname
.text:0000000000003EFF                 mov     edx, 5          ; category
.text:0000000000003F04                 call    _dcgettext
.text:0000000000003F09                 mov     rcx, rax
.text:0000000000003F0C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003F11                 lea     rax, asc_8DFD   ; "'"
.text:0000000000003F18                 cmp     rcx, rax
.text:0000000000003F1B                 jz      loc_42A4
.text:0000000000003F21
.text:0000000000003F21 loc_3F21:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003F21                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003F21                 xor     r15d, r15d
.text:0000000000003F24                 test    ebx, ebx
.text:0000000000003F26                 jz      loc_40ED
.text:0000000000003F2C
.text:0000000000003F2C loc_3F2C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003F2C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003F2C                 test    ebx, ebx
.text:0000000000003F2E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003F33                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003F38                 xor     r12d, r12d
.text:0000000000003F3B                 mov     rdi, rbx        ; s
.text:0000000000003F3E                 call    _strlen
.text:0000000000003F43                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003F48                 mov     [rsp+0E8h+n], rax
.text:0000000000003F4D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003F52                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003F57                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F60                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003F65                 jmp     loc_3203
.text:0000000000003F6A ; ---------------------------------------------------------------------------
.text:0000000000003F6A
.text:0000000000003F6A loc_3F6A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003F6A                                         ; DATA XREF: .rodata:jpt_31C1↓o
.text:0000000000003F6A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003F6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003F74                 xor     r12d, r12d
.text:0000000000003F77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F80                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003F85                 xor     r15d, r15d
.text:0000000000003F88                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003F8D                 mov     [rsp+0E8h+n], 0
.text:0000000000003F96                 mov     [rsp+0E8h+s2], 0
.text:0000000000003F9F                 jmp     loc_3203
.text:0000000000003FA4 ; ---------------------------------------------------------------------------
.text:0000000000003FA4
.text:0000000000003FA4 loc_3FA4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003FA4                                         ; DATA XREF: .rodata:jpt_31C1↓o
.text:0000000000003FA4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003FA9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003FAE                 xor     r12d, r12d
.text:0000000000003FB1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003FBA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003FBF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003FC4                 jmp     loc_31E3
.text:0000000000003FC9 ; ---------------------------------------------------------------------------
.text:0000000000003FC9
.text:0000000000003FC9 loc_3FC9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003FC9                 cmp     r13, r15
.text:0000000000003FCC                 jbe     short loc_3FD3
.text:0000000000003FCE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003FD3
.text:0000000000003FD3 loc_3FD3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003FD3                 lea     rax, [rcx+2]
.text:0000000000003FD7                 cmp     r13, rax
.text:0000000000003FDA                 jbe     short loc_3FE2
.text:0000000000003FDC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003FE2
.text:0000000000003FE2 loc_3FE2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003FE2                 mov     eax, r12d
.text:0000000000003FE5                 lea     r15, [rcx+3]
.text:0000000000003FE9                 xor     r12d, r12d
.text:0000000000003FEC                 mov     ebx, 30h ; '0'
.text:0000000000003FF1                 jmp     loc_3358
.text:0000000000003FF1 ; ---------------------------------------------------------------------------
.text:0000000000003FF6                 align 20h
.text:0000000000004000
.text:0000000000004000 loc_4000:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004000                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004005                 mov     rbp, r11
.text:0000000000004008                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000400C                 jmp     loc_3CB9
.text:0000000000004011 ; ---------------------------------------------------------------------------
.text:0000000000004011
.text:0000000000004011 loc_4011:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004011                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004016                 xor     r12d, r12d
.text:0000000000004019                 jmp     loc_3B20
.text:000000000000401E ; ---------------------------------------------------------------------------
.text:000000000000401E
.text:000000000000401E loc_401E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000401E                 xor     r10d, r10d
.text:0000000000004021                 jmp     loc_3BDD
.text:0000000000004026 ; ---------------------------------------------------------------------------
.text:0000000000004026
.text:0000000000004026 loc_4026:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004026                 mov     [rsp+0E8h+var_98], 0
.text:000000000000402F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004034                 xor     r12d, r12d
.text:0000000000004037                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000403C                 jmp     loc_3E1B
.text:0000000000004041 ; ---------------------------------------------------------------------------
.text:0000000000004041
.text:0000000000004041 loc_4041:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004041                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004046                 mov     rsi, r14
.text:0000000000004049                 mov     rcx, r13
.text:000000000000404C                 mov     rax, rbx
.text:000000000000404F                 mov     rdi, rbx
.text:0000000000004052                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004058                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000405D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000004065                 cmp     rsi, r11
.text:0000000000004068                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000406E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004076                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000407B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004080                 jnb     short loc_40A8
.text:0000000000004082                 cmp     byte ptr [rcx], 0
.text:0000000000004085                 jnz     short loc_4097
.text:0000000000004087                 jmp     short loc_40A8
.text:0000000000004087 ; ---------------------------------------------------------------------------
.text:0000000000004089                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004090                 cmp     byte ptr [r9+rax], 0
.text:0000000000004095                 jz      short loc_40A5
.text:0000000000004097
.text:0000000000004097 loc_4097:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004097                 add     rax, 1
.text:000000000000409B                 lea     rdx, [rbp+rax+0]
.text:00000000000040A0                 cmp     r11, rdx
.text:00000000000040A3                 ja      short loc_4090
.text:00000000000040A5
.text:00000000000040A5 loc_40A5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000040A5                 mov     rdi, rax
.text:00000000000040A8
.text:00000000000040A8 loc_40A8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000040A8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000040A8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000040AD                 xor     r12d, r12d
.text:00000000000040B0                 jmp     loc_3B16
.text:00000000000040B5 ; ---------------------------------------------------------------------------
.text:00000000000040B5
.text:00000000000040B5 loc_40B5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000040B5                 mov     rdi, rbx
.text:00000000000040B8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000040BE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000040C3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000040C9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000040D1                 xor     r12d, r12d
.text:00000000000040D4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000040D9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000040DE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000040E3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000040E8                 jmp     loc_3B16
.text:00000000000040ED ; ---------------------------------------------------------------------------
.text:00000000000040ED
.text:00000000000040ED loc_40ED:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000040ED                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000040F2                 movzx   eax, byte ptr [rdx]
.text:00000000000040F5                 test    al, al
.text:00000000000040F7                 jz      loc_3F2C
.text:00000000000040FD                 nop     dword ptr [rax]
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004100                 cmp     r13, r15
.text:0000000000004103                 jbe     short loc_4109
.text:0000000000004105                 mov     [r14+r15], al
.text:0000000000004109
.text:0000000000004109 loc_4109:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004109                 add     r15, 1
.text:000000000000410D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004112                 test    al, al
.text:0000000000004114                 jnz     short loc_4100
.text:0000000000004116                 jmp     loc_3F2C
.text:000000000000411B ; ---------------------------------------------------------------------------
.text:000000000000411B
.text:000000000000411B loc_411B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000411B                 mov     eax, edx
.text:000000000000411D                 jmp     loc_3677
.text:0000000000004122 ; ---------------------------------------------------------------------------
.text:0000000000004122
.text:0000000000004122 loc_4122:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004122                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004126                 cmp     bl, 3Eh ; '>'
.text:0000000000004129                 ja      loc_39A0
.text:000000000000412F                 mov     rax, 7000A38200000000h
.text:0000000000004139                 bt      rax, rbx
.text:000000000000413D                 jnb     loc_39A0
.text:0000000000004143                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004148                 jnz     loc_4332
.text:000000000000414E                 cmp     r13, r15
.text:0000000000004151                 jbe     short loc_4158
.text:0000000000004153                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004158
.text:0000000000004158 loc_4158:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004158                 lea     rax, [r15+1]
.text:000000000000415C                 cmp     r13, rax
.text:000000000000415F                 jbe     short loc_4167
.text:0000000000004161                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004167
.text:0000000000004167 loc_4167:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004167                 lea     rax, [r15+2]
.text:000000000000416B                 cmp     r13, rax
.text:000000000000416E                 jbe     short loc_4176
.text:0000000000004170                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004176
.text:0000000000004176 loc_4176:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004176                 lea     rax, [r15+3]
.text:000000000000417A                 cmp     r13, rax
.text:000000000000417D                 jbe     short loc_4185
.text:000000000000417F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004185
.text:0000000000004185 loc_4185:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004185                 add     r15, 4
.text:0000000000004189                 xor     edx, edx
.text:000000000000418B                 xor     r12d, r12d
.text:000000000000418E                 xor     eax, eax
.text:0000000000004190                 mov     rbp, rcx
.text:0000000000004193                 jmp     loc_3358
.text:0000000000004198 ; ---------------------------------------------------------------------------
.text:0000000000004198
.text:0000000000004198 loc_4198:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004198                                         ; DATA XREF: .rodata:jpt_31C1↓o
.text:0000000000004198                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000419A                 jz      loc_4328
.text:00000000000041A0                 lea     rax, asc_8DFD   ; "'"
.text:00000000000041A7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000041AC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000041B1                 xor     r12d, r12d
.text:00000000000041B4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000041BD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000041C2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000041C7                 mov     [rsp+0E8h+n], 1
.text:00000000000041D0                 xor     r15d, r15d
.text:00000000000041D3                 mov     [rsp+0E8h+s2], rax
.text:00000000000041D8                 jmp     loc_3203
.text:00000000000041D8 ; ---------------------------------------------------------------------------
.text:00000000000041DD                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000041E0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000041E0                 mov     rbp, r11
.text:00000000000041E3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000041E8                 jmp     loc_3CB9
.text:00000000000041ED ; ---------------------------------------------------------------------------
.text:00000000000041ED
.text:00000000000041ED loc_41ED:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000041ED                 lea     rax, unk_8DFB
.text:00000000000041F4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000041F9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000041FE                 xor     r12d, r12d
.text:0000000000004201                 mov     [rsp+0E8h+var_98], 0
.text:000000000000420A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000420F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004214                 mov     [rsp+0E8h+n], 1
.text:000000000000421D                 xor     r15d, r15d
.text:0000000000004220                 mov     [rsp+0E8h+s2], rax
.text:0000000000004225                 jmp     loc_3203
.text:000000000000422A ; ---------------------------------------------------------------------------
.text:000000000000422A
.text:000000000000422A loc_422A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000422A                 mov     eax, edx
.text:000000000000422C
.text:000000000000422C loc_422C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000422C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000422C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004231                 test    rbx, rbx
.text:0000000000004234                 jz      short loc_4262
.text:0000000000004236                 test    al, al
.text:0000000000004238                 jz      short loc_4262
.text:000000000000423A                 movzx   ecx, byte ptr [rbx]
.text:000000000000423D                 mov     rax, rbx
.text:0000000000004240                 test    cl, cl
.text:0000000000004242                 jz      short loc_4262
.text:0000000000004244                 mov     rdx, r15
.text:0000000000004247                 sub     rax, r15
.text:000000000000424A
.text:000000000000424A loc_424A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000424A                 cmp     r13, rdx
.text:000000000000424D                 jbe     short loc_4253
.text:000000000000424F                 mov     [r14+rdx], cl
.text:0000000000004253
.text:0000000000004253 loc_4253:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004253                 add     rdx, 1
.text:0000000000004257                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000425B                 test    cl, cl
.text:000000000000425D                 jnz     short loc_424A
.text:000000000000425F                 mov     r15, rdx
.text:0000000000004262
.text:0000000000004262 loc_4262:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004262                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004262                 cmp     r13, r15
.text:0000000000004265                 jbe     loc_3D09
.text:000000000000426B                 mov     byte ptr [r14+r15], 0
.text:0000000000004270                 jmp     loc_3D09
.text:0000000000004275 ; ---------------------------------------------------------------------------
.text:0000000000004275
.text:0000000000004275 loc_4275:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004275                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000427A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000427F                 mov     rbp, r11
.text:0000000000004282                 setz    al
.text:0000000000004285                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004289                 jmp     loc_3CB9
.text:000000000000428E ; ---------------------------------------------------------------------------
.text:000000000000428E
.text:000000000000428E loc_428E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000428E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004292                 mov     rdi, rcx
.text:0000000000004295                 call    gettext_quote
.text:000000000000429A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000429F                 jmp     loc_3EF6
.text:00000000000042A4 ; ---------------------------------------------------------------------------
.text:00000000000042A4
.text:00000000000042A4 loc_42A4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000042A4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000042A8                 mov     rdi, rcx
.text:00000000000042AB                 call    gettext_quote
.text:00000000000042B0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000042B5                 jmp     loc_3F21
.text:00000000000042BA ; ---------------------------------------------------------------------------
.text:00000000000042BA
.text:00000000000042BA loc_42BA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000042BA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000042BF                 mov     rbp, r11
.text:00000000000042C2                 mov     eax, edx
.text:00000000000042C4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000042C8                 jmp     loc_3CB9
.text:00000000000042CD ; ---------------------------------------------------------------------------
.text:00000000000042CD
.text:00000000000042CD loc_42CD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000042CD                 sub     rsp, 8
.text:00000000000042D1                 mov     r8d, 5
.text:00000000000042D7                 mov     rcx, r11
.text:00000000000042DA                 push    [rsp+0F0h+var_88]
.text:00000000000042DE                 push    [rsp+0F8h+var_80]
.text:00000000000042E2                 mov     rdi, r14
.text:00000000000042E5                 push    [rsp+100h+var_C8]
.text:00000000000042E9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000042F1                 mov     rdx, [rsp+108h+s]
.text:00000000000042F6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000042FB                 call    quotearg_buffer_restyled
.text:0000000000004300                 add     rsp, 20h
.text:0000000000004304                 mov     r15, rax
.text:0000000000004307                 jmp     loc_3D09
.text:000000000000430C ; ---------------------------------------------------------------------------
.text:000000000000430C
.text:000000000000430C loc_430C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000430C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004311                 jmp     loc_422C
.text:0000000000004316 ; ---------------------------------------------------------------------------
.text:0000000000004316
.text:0000000000004316 loc_4316:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004316                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000431E                 jmp     loc_3CB9
.text:0000000000004323 ; ---------------------------------------------------------------------------
.text:0000000000004323
.text:0000000000004323 loc_4323:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004323                 call    ___stack_chk_fail
.text:0000000000004328 ; ---------------------------------------------------------------------------
.text:0000000000004328
.text:0000000000004328 loc_4328:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004328                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000432D                 jmp     loc_3DA1
.text:0000000000004332 ; ---------------------------------------------------------------------------
.text:0000000000004332
.text:0000000000004332 loc_4332:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004332                 mov     rbp, r11
.text:0000000000004335                 jmp     loc_3CD0
.text:000000000000433A ; ---------------------------------------------------------------------------
.text:000000000000433A
.text:000000000000433A loc_433A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000433A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000433F                 xor     eax, eax
.text:0000000000004341                 xor     r12d, r12d
.text:0000000000004344                 mov     [rsp+0E8h+var_98], 0
.text:000000000000434D                 jmp     loc_38F4
.text:0000000000004352 ; ---------------------------------------------------------------------------
.text:0000000000004352
.text:0000000000004352 loc_4352:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004352                 mov     rdx, r13
.text:0000000000004355                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000435A                 jmp     loc_3952
.text:000000000000435F ; ---------------------------------------------------------------------------
.text:000000000000435F
.text:000000000000435F def_31C1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000435F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000435F ; } // starts at 3130
.text:000000000000435F quotearg_buffer_restyled endp
.text:000000000000435F
.text:000000000000435F ; ---------------------------------------------------------------------------
.text:0000000000004364                 align 10h
.text:0000000000004370
.text:0000000000004370 ; =============== S U B R O U T I N E =======================================
.text:0000000000004370
.text:0000000000004370
.text:0000000000004370 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004370                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004370
.text:0000000000004370 var_50          = qword ptr -50h
.text:0000000000004370 var_48          = qword ptr -48h
.text:0000000000004370 var_40          = dword ptr -40h
.text:0000000000004370 var_3C          = dword ptr -3Ch
.text:0000000000004370
.text:0000000000004370 ; __unwind {
.text:0000000000004370                 push    r15
.text:0000000000004372                 push    r14
.text:0000000000004374                 movsxd  r15, edi
.text:0000000000004377                 push    r13
.text:0000000000004379                 push    r12
.text:000000000000437B                 mov     r14, rdx
.text:000000000000437E                 push    rbp
.text:000000000000437F                 push    rbx
.text:0000000000004380                 mov     rbp, rcx
.text:0000000000004383                 sub     rsp, 28h
.text:0000000000004387                 mov     [rsp+58h+var_50], rsi
.text:000000000000438C                 call    ___errno_location
.text:0000000000004391                 mov     r13, rax
.text:0000000000004394                 mov     eax, [rax]
.text:0000000000004396                 test    r15d, r15d
.text:0000000000004399                 mov     rbx, cs:slotvec
.text:00000000000043A0                 mov     [rsp+58h+var_40], eax
.text:00000000000043A4                 js      loc_4511
.text:00000000000043AA                 cmp     cs:nslots, r15d
.text:00000000000043B1                 jg      short loc_4415
.text:00000000000043B3                 cmp     r15d, 7FFFFFFFh
.text:00000000000043BA                 jz      loc_4516
.text:00000000000043C0                 lea     r12d, [r15+1]
.text:00000000000043C4                 lea     rax, slotvec0
.text:00000000000043CB                 movsxd  rsi, r12d
.text:00000000000043CE                 shl     rsi, 4
.text:00000000000043D2                 cmp     rbx, rax
.text:00000000000043D5                 jz      loc_44F0
.text:00000000000043DB                 mov     rdi, rbx
.text:00000000000043DE                 call    xrealloc
.text:00000000000043E3                 mov     rbx, rax
.text:00000000000043E6                 mov     cs:slotvec, rax
.text:00000000000043ED
.text:00000000000043ED loc_43ED:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000043ED                 movsxd  rdi, cs:nslots
.text:00000000000043F4                 mov     edx, r12d
.text:00000000000043F7                 xor     esi, esi        ; c
.text:00000000000043F9                 sub     edx, edi
.text:00000000000043FB                 shl     rdi, 4
.text:00000000000043FF                 movsxd  rdx, edx
.text:0000000000004402                 add     rdi, rbx        ; s
.text:0000000000004405                 shl     rdx, 4          ; n
.text:0000000000004409                 call    _memset
.text:000000000000440E                 mov     cs:nslots, r12d
.text:0000000000004415
.text:0000000000004415 loc_4415:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004415                 mov     eax, [rbp+4]
.text:0000000000004418                 shl     r15, 4
.text:000000000000441C                 sub     rsp, 8
.text:0000000000004420                 add     rbx, r15
.text:0000000000004423                 lea     r15, [rbp+8]
.text:0000000000004427                 mov     r8d, [rbp+0]
.text:000000000000442B                 mov     r11, [rbx]
.text:000000000000442E                 mov     r12, [rbx+8]
.text:0000000000004432                 mov     rcx, r14
.text:0000000000004435                 or      eax, 1
.text:0000000000004438                 mov     [rsp+60h+var_3C], eax
.text:000000000000443C                 push    qword ptr [rbp+30h]
.text:000000000000443F                 mov     r9d, eax
.text:0000000000004442                 push    qword ptr [rbp+28h]
.text:0000000000004445                 push    r15
.text:0000000000004447                 mov     rsi, r11
.text:000000000000444A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000444F                 mov     rdi, r12
.text:0000000000004452                 mov     [rsp+78h+var_48], r11
.text:0000000000004457                 call    quotearg_buffer_restyled
.text:000000000000445C                 add     rsp, 20h
.text:0000000000004460                 mov     r11, [rsp+58h+var_48]
.text:0000000000004465                 cmp     r11, rax
.text:0000000000004468                 ja      short loc_44D1
.text:000000000000446A                 lea     rsi, [rax+1]
.text:000000000000446E                 lea     rax, slot0
.text:0000000000004475                 cmp     r12, rax
.text:0000000000004478                 mov     [rbx], rsi
.text:000000000000447B                 jz      short loc_448F
.text:000000000000447D                 mov     rdi, r12        ; ptr
.text:0000000000004480                 mov     [rsp+58h+var_48], rsi
.text:0000000000004485                 call    _free
.text:000000000000448A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000448F
.text:000000000000448F loc_448F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000448F                 mov     rdi, rsi
.text:0000000000004492                 mov     [rsp+58h+var_48], rsi
.text:0000000000004497                 call    xmalloc
.text:000000000000449C                 sub     rsp, 8
.text:00000000000044A0                 mov     [rbx+8], rax
.text:00000000000044A4                 mov     r8d, [rbp+0]
.text:00000000000044A8                 push    qword ptr [rbp+30h]
.text:00000000000044AB                 push    qword ptr [rbp+28h]
.text:00000000000044AE                 mov     rcx, r14
.text:00000000000044B1                 push    r15
.text:00000000000044B3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000044B8                 mov     rdi, rax
.text:00000000000044BB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000044C0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000044C5                 mov     r12, rax
.text:00000000000044C8                 call    quotearg_buffer_restyled
.text:00000000000044CD                 add     rsp, 20h
.text:00000000000044D1
.text:00000000000044D1 loc_44D1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000044D1                 mov     eax, [rsp+58h+var_40]
.text:00000000000044D5                 mov     [r13+0], eax
.text:00000000000044D9                 add     rsp, 28h
.text:00000000000044DD                 mov     rax, r12
.text:00000000000044E0                 pop     rbx
.text:00000000000044E1                 pop     rbp
.text:00000000000044E2                 pop     r12
.text:00000000000044E4                 pop     r13
.text:00000000000044E6                 pop     r14
.text:00000000000044E8                 pop     r15
.text:00000000000044EA                 retn
.text:00000000000044EA ; ---------------------------------------------------------------------------
.text:00000000000044EB                 align 10h
.text:00000000000044F0
.text:00000000000044F0 loc_44F0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000044F0                 xor     edi, edi
.text:00000000000044F2                 call    xrealloc
.text:00000000000044F7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000044FF                 mov     rbx, rax
.text:0000000000004502                 mov     cs:slotvec, rax
.text:0000000000004509                 movups  xmmword ptr [rax], xmm0
.text:000000000000450C                 jmp     loc_43ED
.text:0000000000004511 ; ---------------------------------------------------------------------------
.text:0000000000004511
.text:0000000000004511 loc_4511:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004511                 call    _abort
.text:0000000000004516 ; ---------------------------------------------------------------------------
.text:0000000000004516
.text:0000000000004516 loc_4516:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004516                 call    xalloc_die
.text:0000000000004516 ; } // starts at 4370
.text:0000000000004516 quotearg_n_options endp
.text:0000000000004516
.text:0000000000004516 ; ---------------------------------------------------------------------------
.text:000000000000451B                 align 20h
.text:0000000000004520
.text:0000000000004520 ; =============== S U B R O U T I N E =======================================
.text:0000000000004520
.text:0000000000004520 ; Attributes: info_from_lumina
.text:0000000000004520
.text:0000000000004520 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004520                 public clone_quoting_options
.text:0000000000004520 clone_quoting_options proc near
.text:0000000000004520 ; __unwind {
.text:0000000000004520                 push    r12
.text:0000000000004522                 push    rbp
.text:0000000000004523                 push    rbx
.text:0000000000004524                 mov     rbx, rdi
.text:0000000000004527                 call    ___errno_location
.text:000000000000452C                 mov     r12d, [rax]
.text:000000000000452F                 mov     rbp, rax
.text:0000000000004532                 lea     rax, default_quoting_options
.text:0000000000004539                 test    rbx, rbx
.text:000000000000453C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004541                 cmovz   rbx, rax
.text:0000000000004545                 mov     rdi, rbx        ; src
.text:0000000000004548                 call    xmemdup
.text:000000000000454D                 mov     [rbp+0], r12d
.text:0000000000004551                 pop     rbx
.text:0000000000004552                 pop     rbp
.text:0000000000004553                 pop     r12
.text:0000000000004555                 retn
.text:0000000000004555 ; } // starts at 4520
.text:0000000000004555 clone_quoting_options endp
.text:0000000000004555
.text:0000000000004555 ; ---------------------------------------------------------------------------
.text:0000000000004556                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560
.text:0000000000004560                 public get_quoting_style
.text:0000000000004560 get_quoting_style proc near
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 lea     rax, default_quoting_options
.text:0000000000004567                 test    rdi, rdi
.text:000000000000456A                 cmovz   rdi, rax
.text:000000000000456E                 mov     eax, [rdi]
.text:0000000000004570                 retn
.text:0000000000004570 ; } // starts at 4560
.text:0000000000004570 get_quoting_style endp
.text:0000000000004570
.text:0000000000004570 ; ---------------------------------------------------------------------------
.text:0000000000004571                 align 20h
.text:0000000000004580
.text:0000000000004580 ; =============== S U B R O U T I N E =======================================
.text:0000000000004580
.text:0000000000004580
.text:0000000000004580                 public set_quoting_style
.text:0000000000004580 set_quoting_style proc near
.text:0000000000004580 ; __unwind {
.text:0000000000004580                 lea     rax, default_quoting_options
.text:0000000000004587                 test    rdi, rdi
.text:000000000000458A                 cmovz   rdi, rax
.text:000000000000458E                 mov     [rdi], esi
.text:0000000000004590                 retn
.text:0000000000004590 ; } // starts at 4580
.text:0000000000004590 set_quoting_style endp
.text:0000000000004590
.text:0000000000004590 ; ---------------------------------------------------------------------------
.text:0000000000004591                 align 20h
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0 ; Attributes: info_from_lumina
.text:00000000000045A0
.text:00000000000045A0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000045A0                 public set_char_quoting
.text:00000000000045A0 set_char_quoting proc near
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 lea     rax, default_quoting_options
.text:00000000000045A7                 test    rdi, rdi
.text:00000000000045AA                 mov     ecx, esi
.text:00000000000045AC                 cmovz   rdi, rax
.text:00000000000045B0                 mov     eax, esi
.text:00000000000045B2                 and     ecx, 1Fh
.text:00000000000045B5                 shr     al, 5
.text:00000000000045B8                 movzx   eax, al
.text:00000000000045BB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000045C0                 mov     esi, [rdi]
.text:00000000000045C2                 mov     eax, esi
.text:00000000000045C4                 shr     eax, cl
.text:00000000000045C6                 xor     edx, eax
.text:00000000000045C8                 and     eax, 1
.text:00000000000045CB                 and     edx, 1
.text:00000000000045CE                 shl     edx, cl
.text:00000000000045D0                 xor     edx, esi
.text:00000000000045D2                 mov     [rdi], edx
.text:00000000000045D4                 retn
.text:00000000000045D4 ; } // starts at 45A0
.text:00000000000045D4 set_char_quoting endp
.text:00000000000045D4
.text:00000000000045D4 ; ---------------------------------------------------------------------------
.text:00000000000045D5                 align 20h
.text:00000000000045E0
.text:00000000000045E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045E0
.text:00000000000045E0
.text:00000000000045E0                 public set_quoting_flags
.text:00000000000045E0 set_quoting_flags proc near
.text:00000000000045E0 ; __unwind {
.text:00000000000045E0                 lea     rax, default_quoting_options
.text:00000000000045E7                 test    rdi, rdi
.text:00000000000045EA                 cmovz   rdi, rax
.text:00000000000045EE                 mov     eax, [rdi+4]
.text:00000000000045F1                 mov     [rdi+4], esi
.text:00000000000045F4                 retn
.text:00000000000045F4 ; } // starts at 45E0
.text:00000000000045F4 set_quoting_flags endp
.text:00000000000045F4
.text:00000000000045F4 ; ---------------------------------------------------------------------------
.text:00000000000045F5                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600 ; Attributes: info_from_lumina
.text:0000000000004600
.text:0000000000004600 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004600                 public set_custom_quoting
.text:0000000000004600 set_custom_quoting proc near
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 lea     rax, default_quoting_options
.text:0000000000004607                 test    rdi, rdi
.text:000000000000460A                 cmovz   rdi, rax
.text:000000000000460E                 test    rsi, rsi
.text:0000000000004611                 mov     dword ptr [rdi], 0Ah
.text:0000000000004617                 jz      short loc_4627
.text:0000000000004619                 test    rdx, rdx
.text:000000000000461C                 jz      short loc_4627
.text:000000000000461E                 mov     [rdi+28h], rsi
.text:0000000000004622                 mov     [rdi+30h], rdx
.text:0000000000004626                 retn
.text:0000000000004627 ; ---------------------------------------------------------------------------
.text:0000000000004627
.text:0000000000004627 loc_4627:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004627                                         ; set_custom_quoting+1C↑j
.text:0000000000004627                 sub     rsp, 8
.text:000000000000462B                 call    _abort
.text:000000000000462B ; } // starts at 4600
.text:000000000000462B set_custom_quoting endp
.text:000000000000462B
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630 ; Attributes: info_from_lumina
.text:0000000000004630
.text:0000000000004630 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004630                 public quotearg_buffer
.text:0000000000004630 quotearg_buffer proc near
.text:0000000000004630
.text:0000000000004630 var_40          = qword ptr -40h
.text:0000000000004630
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 push    r15
.text:0000000000004632                 push    r14
.text:0000000000004634                 lea     rax, default_quoting_options
.text:000000000000463B                 push    r13
.text:000000000000463D                 push    r12
.text:000000000000463F                 mov     r13, rdi
.text:0000000000004642                 push    rbp
.text:0000000000004643                 push    rbx
.text:0000000000004644                 mov     rbx, r8
.text:0000000000004647                 mov     r14, rsi
.text:000000000000464A                 mov     r15, rdx
.text:000000000000464D                 sub     rsp, 18h
.text:0000000000004651                 test    r8, r8
.text:0000000000004654                 cmovz   rbx, rax
.text:0000000000004658                 mov     [rsp+48h+var_40], rcx
.text:000000000000465D                 call    ___errno_location
.text:0000000000004662                 mov     r12d, [rax]
.text:0000000000004665                 mov     rbp, rax
.text:0000000000004668                 lea     rax, [rbx+8]
.text:000000000000466C                 sub     rsp, 8
.text:0000000000004670                 mov     r9d, [rbx+4]
.text:0000000000004674                 push    qword ptr [rbx+30h]
.text:0000000000004677                 mov     r8d, [rbx]
.text:000000000000467A                 push    qword ptr [rbx+28h]
.text:000000000000467D                 mov     rdx, r15
.text:0000000000004680                 push    rax
.text:0000000000004681                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004686                 mov     rsi, r14
.text:0000000000004689                 mov     rdi, r13
.text:000000000000468C                 call    quotearg_buffer_restyled
.text:0000000000004691                 mov     [rbp+0], r12d
.text:0000000000004695                 add     rsp, 38h
.text:0000000000004699                 pop     rbx
.text:000000000000469A                 pop     rbp
.text:000000000000469B                 pop     r12
.text:000000000000469D                 pop     r13
.text:000000000000469F                 pop     r14
.text:00000000000046A1                 pop     r15
.text:00000000000046A3                 retn
.text:00000000000046A3 ; } // starts at 4630
.text:00000000000046A3 quotearg_buffer endp
.text:00000000000046A3
.text:00000000000046A3 ; ---------------------------------------------------------------------------
.text:00000000000046A4                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0 ; Attributes: info_from_lumina
.text:00000000000046B0
.text:00000000000046B0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000046B0                 public quotearg_alloc_mem
.text:00000000000046B0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000046B0
.text:00000000000046B0 var_5C          = dword ptr -5Ch
.text:00000000000046B0 var_58          = qword ptr -58h
.text:00000000000046B0 var_50          = qword ptr -50h
.text:00000000000046B0 var_48          = qword ptr -48h
.text:00000000000046B0 var_40          = qword ptr -40h
.text:00000000000046B0
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 push    r15
.text:00000000000046B2                 push    r14
.text:00000000000046B4                 lea     rax, default_quoting_options
.text:00000000000046BB                 push    r13
.text:00000000000046BD                 push    r12
.text:00000000000046BF                 mov     r12, rdx
.text:00000000000046C2                 push    rbp
.text:00000000000046C3                 push    rbx
.text:00000000000046C4                 mov     rbx, rcx
.text:00000000000046C7                 mov     r14, rdi
.text:00000000000046CA                 mov     r15, rsi
.text:00000000000046CD                 sub     rsp, 38h
.text:00000000000046D1                 test    rcx, rcx
.text:00000000000046D4                 cmovz   rbx, rax
.text:00000000000046D8                 xor     ebp, ebp
.text:00000000000046DA                 call    ___errno_location
.text:00000000000046DF                 test    r12, r12
.text:00000000000046E2                 mov     r13, rax
.text:00000000000046E5                 mov     eax, [rax]
.text:00000000000046E7                 setz    bpl
.text:00000000000046EB                 or      ebp, [rbx+4]
.text:00000000000046EE                 lea     r10, [rbx+8]
.text:00000000000046F2                 sub     rsp, 8
.text:00000000000046F6                 mov     r8d, [rbx]
.text:00000000000046F9                 mov     rcx, r15
.text:00000000000046FC                 mov     [rsp+70h+var_5C], eax
.text:0000000000004700                 push    qword ptr [rbx+30h]
.text:0000000000004703                 mov     rdx, r14
.text:0000000000004706                 push    qword ptr [rbx+28h]
.text:0000000000004709                 push    r10
.text:000000000000470B                 xor     esi, esi
.text:000000000000470D                 mov     r9d, ebp
.text:0000000000004710                 xor     edi, edi
.text:0000000000004712                 mov     [rsp+88h+var_48], r10
.text:0000000000004717                 call    quotearg_buffer_restyled
.text:000000000000471C                 lea     rsi, [rax+1]
.text:0000000000004720                 mov     [rsp+88h+var_40], rax
.text:0000000000004725                 add     rsp, 20h
.text:0000000000004729                 mov     rdi, rsi
.text:000000000000472C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004731                 call    xmalloc
.text:0000000000004736                 mov     [rsp+68h+var_58], rax
.text:000000000000473B                 sub     rsp, 8
.text:000000000000473F                 push    qword ptr [rbx+30h]
.text:0000000000004742                 push    qword ptr [rbx+28h]
.text:0000000000004745                 mov     r10, [rsp+80h+var_48]
.text:000000000000474A                 mov     r9d, ebp
.text:000000000000474D                 mov     r8d, [rbx]
.text:0000000000004750                 mov     rcx, r15
.text:0000000000004753                 mov     rdx, r14
.text:0000000000004756                 mov     rdi, rax
.text:0000000000004759                 push    r10
.text:000000000000475B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004760                 call    quotearg_buffer_restyled
.text:0000000000004765                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004769                 add     rsp, 20h
.text:000000000000476D                 test    r12, r12
.text:0000000000004770                 mov     [r13+0], eax
.text:0000000000004774                 jz      short loc_477F
.text:0000000000004776                 mov     r11, [rsp+68h+var_40]
.text:000000000000477B                 mov     [r12], r11
.text:000000000000477F
.text:000000000000477F loc_477F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000477F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004784                 add     rsp, 38h
.text:0000000000004788                 pop     rbx
.text:0000000000004789                 pop     rbp
.text:000000000000478A                 pop     r12
.text:000000000000478C                 pop     r13
.text:000000000000478E                 pop     r14
.text:0000000000004790                 pop     r15
.text:0000000000004792                 retn
.text:0000000000004792 ; } // starts at 46B0
.text:0000000000004792 quotearg_alloc_mem endp
.text:0000000000004792
.text:0000000000004792 ; ---------------------------------------------------------------------------
.text:0000000000004793                 align 20h
.text:00000000000047A0
.text:00000000000047A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047A0
.text:00000000000047A0
.text:00000000000047A0                 public quotearg_alloc
.text:00000000000047A0 quotearg_alloc  proc near
.text:00000000000047A0 ; __unwind {
.text:00000000000047A0                 mov     rcx, rdx
.text:00000000000047A3                 xor     edx, edx
.text:00000000000047A5                 jmp     quotearg_alloc_mem
.text:00000000000047A5 ; } // starts at 47A0
.text:00000000000047A5 quotearg_alloc  endp
.text:00000000000047A5
.text:00000000000047A5 ; ---------------------------------------------------------------------------
.text:00000000000047AA                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0 ; Attributes: info_from_lumina
.text:00000000000047B0
.text:00000000000047B0 ; void __cdecl quotearg_free()
.text:00000000000047B0                 public quotearg_free
.text:00000000000047B0 quotearg_free   proc near
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 mov     eax, cs:nslots
.text:00000000000047B6                 push    r12
.text:00000000000047B8                 mov     r12, cs:slotvec
.text:00000000000047BF                 push    rbp
.text:00000000000047C0                 push    rbx
.text:00000000000047C1                 cmp     eax, 1
.text:00000000000047C4                 jle     short loc_47F1
.text:00000000000047C6                 sub     eax, 2
.text:00000000000047C9                 lea     rbx, [r12+18h]
.text:00000000000047CE                 shl     rax, 4
.text:00000000000047D2                 lea     rbp, [r12+rax+28h]
.text:00000000000047D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000047E0
.text:00000000000047E0 loc_47E0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000047E0                 mov     rdi, [rbx]      ; ptr
.text:00000000000047E3                 add     rbx, 10h
.text:00000000000047E7                 call    _free
.text:00000000000047EC                 cmp     rbx, rbp
.text:00000000000047EF                 jnz     short loc_47E0
.text:00000000000047F1
.text:00000000000047F1 loc_47F1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000047F1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000047F6                 lea     rbx, slot0
.text:00000000000047FD                 cmp     rdi, rbx
.text:0000000000004800                 jz      short loc_4819
.text:0000000000004802                 call    _free
.text:0000000000004807                 mov     cs:slotvec0, 100h
.text:0000000000004812                 mov     cs:off_20C078, rbx
.text:0000000000004819
.text:0000000000004819 loc_4819:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004819                 lea     rbx, slotvec0
.text:0000000000004820                 cmp     r12, rbx
.text:0000000000004823                 jz      short loc_4834
.text:0000000000004825                 mov     rdi, r12        ; ptr
.text:0000000000004828                 call    _free
.text:000000000000482D                 mov     cs:slotvec, rbx
.text:0000000000004834
.text:0000000000004834 loc_4834:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004834                 pop     rbx
.text:0000000000004835                 mov     cs:nslots, 1
.text:000000000000483F                 pop     rbp
.text:0000000000004840                 pop     r12
.text:0000000000004842                 retn
.text:0000000000004842 ; } // starts at 47B0
.text:0000000000004842 quotearg_free   endp
.text:0000000000004842
.text:0000000000004842 ; ---------------------------------------------------------------------------
.text:0000000000004843                 align 10h
.text:0000000000004850
.text:0000000000004850 ; =============== S U B R O U T I N E =======================================
.text:0000000000004850
.text:0000000000004850
.text:0000000000004850                 public quotearg_n
.text:0000000000004850 quotearg_n      proc near
.text:0000000000004850 ; __unwind {
.text:0000000000004850                 lea     rcx, default_quoting_options
.text:0000000000004857                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000485E                 jmp     quotearg_n_options
.text:000000000000485E ; } // starts at 4850
.text:000000000000485E quotearg_n      endp
.text:000000000000485E
.text:000000000000485E ; ---------------------------------------------------------------------------
.text:0000000000004863                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870
.text:0000000000004870                 public quotearg_n_mem
.text:0000000000004870 quotearg_n_mem  proc near
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 lea     rcx, default_quoting_options
.text:0000000000004877                 jmp     quotearg_n_options
.text:0000000000004877 ; } // starts at 4870
.text:0000000000004877 quotearg_n_mem  endp
.text:0000000000004877
.text:0000000000004877 ; ---------------------------------------------------------------------------
.text:000000000000487C                 align 20h
.text:0000000000004880
.text:0000000000004880 ; =============== S U B R O U T I N E =======================================
.text:0000000000004880
.text:0000000000004880
.text:0000000000004880                 public quotearg
.text:0000000000004880 quotearg        proc near
.text:0000000000004880 ; __unwind {
.text:0000000000004880                 lea     rcx, default_quoting_options
.text:0000000000004887                 mov     rsi, rdi
.text:000000000000488A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004891                 xor     edi, edi
.text:0000000000004893                 jmp     quotearg_n_options
.text:0000000000004893 ; } // starts at 4880
.text:0000000000004893 quotearg        endp
.text:0000000000004893
.text:0000000000004893 ; ---------------------------------------------------------------------------
.text:0000000000004898                 align 20h
.text:00000000000048A0
.text:00000000000048A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048A0
.text:00000000000048A0
.text:00000000000048A0                 public quotearg_mem
.text:00000000000048A0 quotearg_mem    proc near
.text:00000000000048A0 ; __unwind {
.text:00000000000048A0                 lea     rcx, default_quoting_options
.text:00000000000048A7                 mov     rdx, rsi
.text:00000000000048AA                 mov     rsi, rdi
.text:00000000000048AD                 xor     edi, edi
.text:00000000000048AF                 jmp     quotearg_n_options
.text:00000000000048AF ; } // starts at 48A0
.text:00000000000048AF quotearg_mem    endp
.text:00000000000048AF
.text:00000000000048AF ; ---------------------------------------------------------------------------
.text:00000000000048B4                 align 20h
.text:00000000000048C0
.text:00000000000048C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048C0
.text:00000000000048C0 ; Attributes: info_from_lumina
.text:00000000000048C0
.text:00000000000048C0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000048C0                 public quotearg_n_style
.text:00000000000048C0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000048C0
.text:00000000000048C0 var_48          = dword ptr -48h
.text:00000000000048C0 var_44          = qword ptr -44h
.text:00000000000048C0 var_3C          = qword ptr -3Ch
.text:00000000000048C0 var_34          = qword ptr -34h
.text:00000000000048C0 var_2C          = qword ptr -2Ch
.text:00000000000048C0 var_24          = qword ptr -24h
.text:00000000000048C0 var_1C          = qword ptr -1Ch
.text:00000000000048C0 var_14          = dword ptr -14h
.text:00000000000048C0 var_10          = qword ptr -10h
.text:00000000000048C0
.text:00000000000048C0 ; __unwind {
.text:00000000000048C0                 sub     rsp, 48h
.text:00000000000048C4                 mov     rax, rdx
.text:00000000000048C7                 mov     rdx, fs:28h
.text:00000000000048D0                 mov     [rsp+48h+var_10], rdx
.text:00000000000048D5                 xor     edx, edx
.text:00000000000048D7                 cmp     esi, 0Ah
.text:00000000000048DA                 jz      short loc_4944
.text:00000000000048DC                 mov     [rsp+48h+var_48], esi
.text:00000000000048DF                 mov     rcx, rsp
.text:00000000000048E2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000048E9                 mov     rsi, rax
.text:00000000000048EC                 mov     [rsp+48h+var_44], 0
.text:00000000000048F5                 mov     [rsp+48h+var_3C], 0
.text:00000000000048FE                 mov     [rsp+48h+var_34], 0
.text:0000000000004907                 mov     [rsp+48h+var_2C], 0
.text:0000000000004910                 mov     [rsp+48h+var_24], 0
.text:0000000000004919                 mov     [rsp+48h+var_1C], 0
.text:0000000000004922                 mov     [rsp+48h+var_14], 0
.text:000000000000492A                 call    quotearg_n_options
.text:000000000000492F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004934                 xor     rcx, fs:28h
.text:000000000000493D                 jnz     short loc_4949
.text:000000000000493F                 add     rsp, 48h
.text:0000000000004943                 retn
.text:0000000000004944 ; ---------------------------------------------------------------------------
.text:0000000000004944
.text:0000000000004944 loc_4944:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004944                 call    _abort
.text:0000000000004949 ; ---------------------------------------------------------------------------
.text:0000000000004949
.text:0000000000004949 loc_4949:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004949                 call    ___stack_chk_fail
.text:0000000000004949 ; } // starts at 48C0
.text:0000000000004949 quotearg_n_style endp
.text:0000000000004949
.text:0000000000004949 ; ---------------------------------------------------------------------------
.text:000000000000494E                 align 10h
.text:0000000000004950
.text:0000000000004950 ; =============== S U B R O U T I N E =======================================
.text:0000000000004950
.text:0000000000004950 ; Attributes: info_from_lumina
.text:0000000000004950
.text:0000000000004950 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004950                 public quotearg_n_style_mem
.text:0000000000004950 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004950
.text:0000000000004950 var_48          = dword ptr -48h
.text:0000000000004950 var_44          = qword ptr -44h
.text:0000000000004950 var_3C          = qword ptr -3Ch
.text:0000000000004950 var_34          = qword ptr -34h
.text:0000000000004950 var_2C          = qword ptr -2Ch
.text:0000000000004950 var_24          = qword ptr -24h
.text:0000000000004950 var_1C          = qword ptr -1Ch
.text:0000000000004950 var_14          = dword ptr -14h
.text:0000000000004950 var_10          = qword ptr -10h
.text:0000000000004950
.text:0000000000004950 ; __unwind {
.text:0000000000004950                 sub     rsp, 48h
.text:0000000000004954                 mov     rax, rdx
.text:0000000000004957                 mov     rdx, rcx
.text:000000000000495A                 mov     rcx, fs:28h
.text:0000000000004963                 mov     [rsp+48h+var_10], rcx
.text:0000000000004968                 xor     ecx, ecx
.text:000000000000496A                 cmp     esi, 0Ah
.text:000000000000496D                 jz      short loc_49D0
.text:000000000000496F                 mov     [rsp+48h+var_48], esi
.text:0000000000004972                 mov     rcx, rsp
.text:0000000000004975                 mov     rsi, rax
.text:0000000000004978                 mov     [rsp+48h+var_44], 0
.text:0000000000004981                 mov     [rsp+48h+var_3C], 0
.text:000000000000498A                 mov     [rsp+48h+var_34], 0
.text:0000000000004993                 mov     [rsp+48h+var_2C], 0
.text:000000000000499C                 mov     [rsp+48h+var_24], 0
.text:00000000000049A5                 mov     [rsp+48h+var_1C], 0
.text:00000000000049AE                 mov     [rsp+48h+var_14], 0
.text:00000000000049B6                 call    quotearg_n_options
.text:00000000000049BB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000049C0                 xor     rdx, fs:28h
.text:00000000000049C9                 jnz     short loc_49D5
.text:00000000000049CB                 add     rsp, 48h
.text:00000000000049CF                 retn
.text:00000000000049D0 ; ---------------------------------------------------------------------------
.text:00000000000049D0
.text:00000000000049D0 loc_49D0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000049D0                 call    _abort
.text:00000000000049D5 ; ---------------------------------------------------------------------------
.text:00000000000049D5
.text:00000000000049D5 loc_49D5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000049D5                 call    ___stack_chk_fail
.text:00000000000049D5 ; } // starts at 4950
.text:00000000000049D5 quotearg_n_style_mem endp
.text:00000000000049D5
.text:00000000000049D5 ; ---------------------------------------------------------------------------
.text:00000000000049DA                 align 20h
.text:00000000000049E0
.text:00000000000049E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049E0
.text:00000000000049E0
.text:00000000000049E0                 public quotearg_style
.text:00000000000049E0 quotearg_style  proc near               ; CODE XREF: announce_mkdir_part_4+C↑p
.text:00000000000049E0 ; __unwind {
.text:00000000000049E0                 mov     rdx, rsi
.text:00000000000049E3                 mov     esi, edi
.text:00000000000049E5                 xor     edi, edi
.text:00000000000049E7                 jmp     quotearg_n_style
.text:00000000000049E7 ; } // starts at 49E0
.text:00000000000049E7 quotearg_style  endp
.text:00000000000049E7
.text:00000000000049E7 ; ---------------------------------------------------------------------------
.text:00000000000049EC                 align 10h
.text:00000000000049F0
.text:00000000000049F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049F0
.text:00000000000049F0
.text:00000000000049F0                 public quotearg_style_mem
.text:00000000000049F0 quotearg_style_mem proc near
.text:00000000000049F0 ; __unwind {
.text:00000000000049F0                 mov     rcx, rdx
.text:00000000000049F3                 mov     rdx, rsi
.text:00000000000049F6                 mov     esi, edi
.text:00000000000049F8                 xor     edi, edi
.text:00000000000049FA                 jmp     quotearg_n_style_mem
.text:00000000000049FA ; } // starts at 49F0
.text:00000000000049FA quotearg_style_mem endp
.text:00000000000049FA
.text:00000000000049FA ; ---------------------------------------------------------------------------
.text:00000000000049FF                 align 20h
.text:0000000000004A00
.text:0000000000004A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A00
.text:0000000000004A00 ; Attributes: info_from_lumina
.text:0000000000004A00
.text:0000000000004A00 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004A00                 public quotearg_char_mem
.text:0000000000004A00 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004A00                                         ; quotearg_colon+C↓j ...
.text:0000000000004A00
.text:0000000000004A00 var_48          = xmmword ptr -48h
.text:0000000000004A00 var_38          = xmmword ptr -38h
.text:0000000000004A00 var_28          = xmmword ptr -28h
.text:0000000000004A00 var_18          = qword ptr -18h
.text:0000000000004A00 var_10          = qword ptr -10h
.text:0000000000004A00
.text:0000000000004A00 ; __unwind {
.text:0000000000004A00                 sub     rsp, 48h
.text:0000000000004A04                 mov     ecx, edx
.text:0000000000004A06                 mov     rax, fs:28h
.text:0000000000004A0F                 mov     [rsp+48h+var_10], rax
.text:0000000000004A14                 xor     eax, eax
.text:0000000000004A16                 mov     rax, cs:qword_20C230
.text:0000000000004A1D                 mov     r8, rsp
.text:0000000000004A20                 and     ecx, 1Fh
.text:0000000000004A23                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004A2B                 mov     [rsp+48h+var_18], rax
.text:0000000000004A30                 mov     eax, edx
.text:0000000000004A32                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004A36                 shr     al, 5
.text:0000000000004A39                 movzx   eax, al
.text:0000000000004A3C                 lea     r9, [r8+rax*4+8]
.text:0000000000004A41                 movdqa  xmm0, cs:xmmword_20C210
.text:0000000000004A49                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004A4E                 movdqa  xmm0, cs:xmmword_20C220
.text:0000000000004A56                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004A5B                 mov     edx, [r9]
.text:0000000000004A5E                 mov     eax, edx
.text:0000000000004A60                 shr     eax, cl
.text:0000000000004A62                 not     eax
.text:0000000000004A64                 and     eax, 1
.text:0000000000004A67                 shl     eax, cl
.text:0000000000004A69                 mov     rcx, r8
.text:0000000000004A6C                 xor     eax, edx
.text:0000000000004A6E                 mov     rdx, rsi
.text:0000000000004A71                 mov     rsi, rdi
.text:0000000000004A74                 mov     [r9], eax
.text:0000000000004A77                 xor     edi, edi
.text:0000000000004A79                 call    quotearg_n_options
.text:0000000000004A7E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004A83                 xor     rsi, fs:28h
.text:0000000000004A8C                 jnz     short loc_4A93
.text:0000000000004A8E                 add     rsp, 48h
.text:0000000000004A92                 retn
.text:0000000000004A93 ; ---------------------------------------------------------------------------
.text:0000000000004A93
.text:0000000000004A93 loc_4A93:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004A93                 call    ___stack_chk_fail
.text:0000000000004A93 ; } // starts at 4A00
.text:0000000000004A93 quotearg_char_mem endp
.text:0000000000004A93
.text:0000000000004A93 ; ---------------------------------------------------------------------------
.text:0000000000004A98                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AA0
.text:0000000000004AA0
.text:0000000000004AA0                 public quotearg_char
.text:0000000000004AA0 quotearg_char   proc near
.text:0000000000004AA0 ; __unwind {
.text:0000000000004AA0                 movsx   edx, sil
.text:0000000000004AA4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004AAB                 jmp     quotearg_char_mem
.text:0000000000004AAB ; } // starts at 4AA0
.text:0000000000004AAB quotearg_char   endp
.text:0000000000004AAB
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0
.text:0000000000004AB0                 public quotearg_colon
.text:0000000000004AB0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 mov     edx, 3Ah ; ':'
.text:0000000000004AB5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004ABC                 jmp     quotearg_char_mem
.text:0000000000004ABC ; } // starts at 4AB0
.text:0000000000004ABC quotearg_colon  endp
.text:0000000000004ABC
.text:0000000000004ABC ; ---------------------------------------------------------------------------
.text:0000000000004AC1                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0                 public quotearg_colon_mem
.text:0000000000004AD0 quotearg_colon_mem proc near
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 mov     edx, 3Ah ; ':'
.text:0000000000004AD5                 jmp     quotearg_char_mem
.text:0000000000004AD5 ; } // starts at 4AD0
.text:0000000000004AD5 quotearg_colon_mem endp
.text:0000000000004AD5
.text:0000000000004AD5 ; ---------------------------------------------------------------------------
.text:0000000000004ADA                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AE0
.text:0000000000004AE0 ; Attributes: info_from_lumina
.text:0000000000004AE0
.text:0000000000004AE0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004AE0                 public quotearg_n_style_colon
.text:0000000000004AE0 quotearg_n_style_colon proc near
.text:0000000000004AE0
.text:0000000000004AE0 var_48          = dword ptr -48h
.text:0000000000004AE0 var_44          = qword ptr -44h
.text:0000000000004AE0 var_3C          = qword ptr -3Ch
.text:0000000000004AE0 var_34          = qword ptr -34h
.text:0000000000004AE0 var_2C          = qword ptr -2Ch
.text:0000000000004AE0 var_24          = qword ptr -24h
.text:0000000000004AE0 var_1C          = qword ptr -1Ch
.text:0000000000004AE0 var_14          = dword ptr -14h
.text:0000000000004AE0 var_10          = qword ptr -10h
.text:0000000000004AE0
.text:0000000000004AE0 ; __unwind {
.text:0000000000004AE0                 sub     rsp, 48h
.text:0000000000004AE4                 mov     rax, rdx
.text:0000000000004AE7                 mov     rdx, fs:28h
.text:0000000000004AF0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004AF5                 xor     edx, edx
.text:0000000000004AF7                 cmp     esi, 0Ah
.text:0000000000004AFA                 jz      short loc_4B64
.text:0000000000004AFC                 mov     [rsp+48h+var_48], esi
.text:0000000000004AFF                 mov     rcx, rsp
.text:0000000000004B02                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B09                 mov     rsi, rax
.text:0000000000004B0C                 mov     [rsp+48h+var_44], 0
.text:0000000000004B15                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004B1E                 mov     [rsp+48h+var_34], 0
.text:0000000000004B27                 mov     [rsp+48h+var_2C], 0
.text:0000000000004B30                 mov     [rsp+48h+var_24], 0
.text:0000000000004B39                 mov     [rsp+48h+var_1C], 0
.text:0000000000004B42                 mov     [rsp+48h+var_14], 0
.text:0000000000004B4A                 call    quotearg_n_options
.text:0000000000004B4F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004B54                 xor     rcx, fs:28h
.text:0000000000004B5D                 jnz     short loc_4B69
.text:0000000000004B5F                 add     rsp, 48h
.text:0000000000004B63                 retn
.text:0000000000004B64 ; ---------------------------------------------------------------------------
.text:0000000000004B64
.text:0000000000004B64 loc_4B64:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004B64                 call    _abort
.text:0000000000004B69 ; ---------------------------------------------------------------------------
.text:0000000000004B69
.text:0000000000004B69 loc_4B69:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004B69                 call    ___stack_chk_fail
.text:0000000000004B69 ; } // starts at 4AE0
.text:0000000000004B69 quotearg_n_style_colon endp
.text:0000000000004B69
.text:0000000000004B69 ; ---------------------------------------------------------------------------
.text:0000000000004B6E                 align 10h
.text:0000000000004B70
.text:0000000000004B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B70
.text:0000000000004B70 ; Attributes: info_from_lumina
.text:0000000000004B70
.text:0000000000004B70 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004B70                 public quotearg_n_custom_mem
.text:0000000000004B70 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004B70                                         ; quotearg_custom+12↓j ...
.text:0000000000004B70
.text:0000000000004B70 var_48          = xmmword ptr -48h
.text:0000000000004B70 var_38          = xmmword ptr -38h
.text:0000000000004B70 var_28          = xmmword ptr -28h
.text:0000000000004B70 var_18          = qword ptr -18h
.text:0000000000004B70 var_10          = qword ptr -10h
.text:0000000000004B70
.text:0000000000004B70 ; __unwind {
.text:0000000000004B70                 sub     rsp, 48h
.text:0000000000004B74                 mov     r9, rcx
.text:0000000000004B77                 mov     rcx, cs:qword_20C230
.text:0000000000004B7E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004B86                 mov     rax, fs:28h
.text:0000000000004B8F                 mov     [rsp+48h+var_10], rax
.text:0000000000004B94                 xor     eax, eax
.text:0000000000004B96                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004B9A                 test    rsi, rsi
.text:0000000000004B9D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004BA2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004BA9                 movdqa  xmm0, cs:xmmword_20C210
.text:0000000000004BB1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004BB6                 movdqa  xmm0, cs:xmmword_20C220
.text:0000000000004BBE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004BC3                 jz      short loc_4BF7
.text:0000000000004BC5                 test    rdx, rdx
.text:0000000000004BC8                 jz      short loc_4BF7
.text:0000000000004BCA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004BCF                 mov     [rsp+48h+var_18], rdx
.text:0000000000004BD4                 mov     rcx, rsp
.text:0000000000004BD7                 mov     rdx, r8
.text:0000000000004BDA                 mov     rsi, r9
.text:0000000000004BDD                 call    quotearg_n_options
.text:0000000000004BE2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004BE7                 xor     rdi, fs:28h
.text:0000000000004BF0                 jnz     short loc_4BFC
.text:0000000000004BF2                 add     rsp, 48h
.text:0000000000004BF6                 retn
.text:0000000000004BF7 ; ---------------------------------------------------------------------------
.text:0000000000004BF7
.text:0000000000004BF7 loc_4BF7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004BF7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004BF7                 call    _abort
.text:0000000000004BFC ; ---------------------------------------------------------------------------
.text:0000000000004BFC
.text:0000000000004BFC loc_4BFC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004BFC                 call    ___stack_chk_fail
.text:0000000000004BFC ; } // starts at 4B70
.text:0000000000004BFC quotearg_n_custom_mem endp
.text:0000000000004BFC
.text:0000000000004BFC ; ---------------------------------------------------------------------------
.text:0000000000004C01                 align 10h
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10
.text:0000000000004C10                 public quotearg_n_custom
.text:0000000000004C10 quotearg_n_custom proc near
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C17                 jmp     quotearg_n_custom_mem
.text:0000000000004C17 ; } // starts at 4C10
.text:0000000000004C17 quotearg_n_custom endp
.text:0000000000004C17
.text:0000000000004C17 ; ---------------------------------------------------------------------------
.text:0000000000004C1C                 align 20h
.text:0000000000004C20
.text:0000000000004C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C20
.text:0000000000004C20
.text:0000000000004C20                 public quotearg_custom
.text:0000000000004C20 quotearg_custom proc near
.text:0000000000004C20 ; __unwind {
.text:0000000000004C20                 mov     rcx, rdx
.text:0000000000004C23                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C2A                 mov     rdx, rsi
.text:0000000000004C2D                 mov     rsi, rdi
.text:0000000000004C30                 xor     edi, edi
.text:0000000000004C32                 jmp     quotearg_n_custom_mem
.text:0000000000004C32 ; } // starts at 4C20
.text:0000000000004C32 quotearg_custom endp
.text:0000000000004C32
.text:0000000000004C32 ; ---------------------------------------------------------------------------
.text:0000000000004C37                 align 20h
.text:0000000000004C40
.text:0000000000004C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C40
.text:0000000000004C40
.text:0000000000004C40                 public quotearg_custom_mem
.text:0000000000004C40 quotearg_custom_mem proc near
.text:0000000000004C40 ; __unwind {
.text:0000000000004C40                 mov     r8, rcx
.text:0000000000004C43                 mov     rcx, rdx
.text:0000000000004C46                 mov     rdx, rsi
.text:0000000000004C49                 mov     rsi, rdi
.text:0000000000004C4C                 xor     edi, edi
.text:0000000000004C4E                 jmp     quotearg_n_custom_mem
.text:0000000000004C4E ; } // starts at 4C40
.text:0000000000004C4E quotearg_custom_mem endp
.text:0000000000004C4E
.text:0000000000004C4E ; ---------------------------------------------------------------------------
.text:0000000000004C53                 align 20h
.text:0000000000004C60
.text:0000000000004C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C60
.text:0000000000004C60
.text:0000000000004C60                 public quote_n_mem
.text:0000000000004C60 quote_n_mem     proc near
.text:0000000000004C60 ; __unwind {
.text:0000000000004C60                 lea     rcx, quote_quoting_options
.text:0000000000004C67                 jmp     quotearg_n_options
.text:0000000000004C67 ; } // starts at 4C60
.text:0000000000004C67 quote_n_mem     endp
.text:0000000000004C67
.text:0000000000004C67 ; ---------------------------------------------------------------------------
.text:0000000000004C6C                 align 10h
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70
.text:0000000000004C70                 public quote_mem
.text:0000000000004C70 quote_mem       proc near
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 lea     rcx, quote_quoting_options
.text:0000000000004C77                 mov     rdx, rsi
.text:0000000000004C7A                 mov     rsi, rdi
.text:0000000000004C7D                 xor     edi, edi
.text:0000000000004C7F                 jmp     quotearg_n_options
.text:0000000000004C7F ; } // starts at 4C70
.text:0000000000004C7F quote_mem       endp
.text:0000000000004C7F
.text:0000000000004C7F ; ---------------------------------------------------------------------------
.text:0000000000004C84                 align 10h
.text:0000000000004C90
.text:0000000000004C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C90
.text:0000000000004C90
.text:0000000000004C90                 public quote_n
.text:0000000000004C90 quote_n         proc near
.text:0000000000004C90 ; __unwind {
.text:0000000000004C90                 lea     rcx, quote_quoting_options
.text:0000000000004C97                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C9E                 jmp     quotearg_n_options
.text:0000000000004C9E ; } // starts at 4C90
.text:0000000000004C9E quote_n         endp
.text:0000000000004C9E
.text:0000000000004C9E ; ---------------------------------------------------------------------------
.text:0000000000004CA3                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0
.text:0000000000004CB0                 public quote
.text:0000000000004CB0 quote           proc near               ; CODE XREF: main+277↑p
.text:0000000000004CB0                                         ; make_dir_parents+14A↑p ...
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 lea     rcx, quote_quoting_options
.text:0000000000004CB7                 mov     rsi, rdi
.text:0000000000004CBA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CC1                 xor     edi, edi
.text:0000000000004CC3                 jmp     quotearg_n_options
.text:0000000000004CC3 ; } // starts at 4CB0
.text:0000000000004CC3 quote           endp
.text:0000000000004CC3
.text:0000000000004CC3 ; ---------------------------------------------------------------------------
.text:0000000000004CC8                 align 10h
.text:0000000000004CD0
.text:0000000000004CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CD0
.text:0000000000004CD0
.text:0000000000004CD0                 public savewd_init
.text:0000000000004CD0 savewd_init     proc near
.text:0000000000004CD0 ; __unwind {
.text:0000000000004CD0                 mov     dword ptr [rdi], 0
.text:0000000000004CD6                 retn
.text:0000000000004CD6 ; } // starts at 4CD0
.text:0000000000004CD6 savewd_init     endp
.text:0000000000004CD6
.text:0000000000004CD6 ; ---------------------------------------------------------------------------
.text:0000000000004CD7                 align 20h
.text:0000000000004CE0
.text:0000000000004CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CE0
.text:0000000000004CE0
.text:0000000000004CE0                 public savewd_errno
.text:0000000000004CE0 savewd_errno    proc near
.text:0000000000004CE0 ; __unwind {
.text:0000000000004CE0                 xor     eax, eax
.text:0000000000004CE2                 cmp     dword ptr [rdi], 4
.text:0000000000004CE5                 jz      short loc_4CF0
.text:0000000000004CE7                 rep retn
.text:0000000000004CE7 ; ---------------------------------------------------------------------------
.text:0000000000004CE9                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 loc_4CF0:                               ; CODE XREF: savewd_errno+5↑j
.text:0000000000004CF0                 mov     eax, [rdi+4]
.text:0000000000004CF3                 retn
.text:0000000000004CF3 ; } // starts at 4CE0
.text:0000000000004CF3 savewd_errno    endp
.text:0000000000004CF3
.text:0000000000004CF3 ; ---------------------------------------------------------------------------
.text:0000000000004CF4                 align 20h
.text:0000000000004D00
.text:0000000000004D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D00
.text:0000000000004D00
.text:0000000000004D00                 public savewd_chdir
.text:0000000000004D00 savewd_chdir    proc near               ; CODE XREF: make_dir_parents+28D↑p
.text:0000000000004D00                                         ; mkancesdirs+A9↓p
.text:0000000000004D00 ; __unwind {
.text:0000000000004D00                 test    rcx, rcx
.text:0000000000004D03                 push    r14
.text:0000000000004D05                 mov     r14d, edx
.text:0000000000004D08                 push    r13
.text:0000000000004D0A                 mov     r13, rsi
.text:0000000000004D0D                 push    r12
.text:0000000000004D0F                 mov     r12, rdi
.text:0000000000004D12                 push    rbp
.text:0000000000004D13                 mov     rbp, rcx
.text:0000000000004D16                 push    rbx
.text:0000000000004D17                 jz      loc_4E38
.text:0000000000004D1D                 mov     esi, edx
.text:0000000000004D1F                 mov     rdi, r13
.text:0000000000004D22                 shl     esi, 11h
.text:0000000000004D25                 and     esi, 20000h
.text:0000000000004D2B                 or      esi, 10900h
.text:0000000000004D31                 call    ___open_2
.text:0000000000004D36                 mov     [rbp+0], eax
.text:0000000000004D39                 mov     ebx, eax
.text:0000000000004D3B                 call    ___errno_location
.text:0000000000004D40                 mov     eax, [rax]
.text:0000000000004D42                 mov     [rbp+4], eax
.text:0000000000004D45
.text:0000000000004D45 loc_4D45:                               ; CODE XREF: savewd_chdir+161↓j
.text:0000000000004D45                 test    ebx, ebx
.text:0000000000004D47                 js      short loc_4D88
.text:0000000000004D49                 and     r14d, 2
.text:0000000000004D4D                 jz      short loc_4D96
.text:0000000000004D4F
.text:0000000000004D4F loc_4D4F:                               ; CODE XREF: savewd_chdir+113↓j
.text:0000000000004D4F                                         ; savewd_chdir+1A8↓j ...
.text:0000000000004D4F                 test    rbp, rbp        ; jumptable 0000000000004E13 cases 2,4,5
.text:0000000000004D52                 setz    al
.text:0000000000004D55                 xor     r14d, r14d
.text:0000000000004D58
.text:0000000000004D58 loc_4D58:                               ; CODE XREF: savewd_chdir+176↓j
.text:0000000000004D58                                         ; savewd_chdir+237↓j
.text:0000000000004D58                 test    ebx, ebx
.text:0000000000004D5A                 js      short loc_4D76
.text:0000000000004D5C                 test    al, al
.text:0000000000004D5E                 jz      short loc_4D76
.text:0000000000004D60                 call    ___errno_location
.text:0000000000004D65                 mov     r12d, [rax]
.text:0000000000004D68                 mov     rbp, rax
.text:0000000000004D6B                 mov     edi, ebx        ; fd
.text:0000000000004D6D                 call    _close
.text:0000000000004D72                 mov     [rbp+0], r12d
.text:0000000000004D76
.text:0000000000004D76 loc_4D76:                               ; CODE XREF: savewd_chdir+5A↑j
.text:0000000000004D76                                         ; savewd_chdir+5E↑j ...
.text:0000000000004D76                 pop     rbx
.text:0000000000004D77                 mov     eax, r14d
.text:0000000000004D7A                 pop     rbp
.text:0000000000004D7B                 pop     r12
.text:0000000000004D7D                 pop     r13
.text:0000000000004D7F                 pop     r14
.text:0000000000004D81                 retn
.text:0000000000004D81 ; ---------------------------------------------------------------------------
.text:0000000000004D82                 align 8
.text:0000000000004D88
.text:0000000000004D88 loc_4D88:                               ; CODE XREF: savewd_chdir+47↑j
.text:0000000000004D88                 call    ___errno_location
.text:0000000000004D8D                 cmp     dword ptr [rax], 0Dh
.text:0000000000004D90                 jnz     loc_4F60
.text:0000000000004D96
.text:0000000000004D96 loc_4D96:                               ; CODE XREF: savewd_chdir+4D↑j
.text:0000000000004D96                                         ; savewd_chdir+140↓j
.text:0000000000004D96                 mov     ecx, [r12]
.text:0000000000004D9A                 cmp     ecx, 5
.text:0000000000004D9D                 ja      loc_4F8A
.text:0000000000004DA3                 mov     eax, 1
.text:0000000000004DA8                 shl     rax, cl
.text:0000000000004DAB                 test    al, 36h
.text:0000000000004DAD                 jnz     short loc_4DE4
.text:0000000000004DAF                 test    al, 8
.text:0000000000004DB1                 jnz     loc_4E80
.text:0000000000004DB7                 test    ecx, ecx
.text:0000000000004DB9                 jnz     loc_4F8A
.text:0000000000004DBF                 lea     rdi, asc_8CAC   ; "."
.text:0000000000004DC6                 xor     esi, esi
.text:0000000000004DC8                 xor     eax, eax
.text:0000000000004DCA                 call    open_safer
.text:0000000000004DCF                 test    eax, eax
.text:0000000000004DD1                 js      loc_4EE0
.text:0000000000004DD7                 mov     dword ptr [r12], 1
.text:0000000000004DDF                 mov     [r12+4], eax
.text:0000000000004DE4
.text:0000000000004DE4 loc_4DE4:                               ; CODE XREF: savewd_chdir+AD↑j
.text:0000000000004DE4                                         ; savewd_chdir+1FE↓j ...
.text:0000000000004DE4                 test    ebx, ebx
.text:0000000000004DE6                 js      short loc_4E18
.text:0000000000004DE8
.text:0000000000004DE8 loc_4DE8:                               ; CODE XREF: savewd_chdir+18F↓j
.text:0000000000004DE8                 mov     edi, ebx        ; fd
.text:0000000000004DEA                 call    _fchdir
.text:0000000000004DEF                 test    eax, eax
.text:0000000000004DF1                 mov     r14d, eax
.text:0000000000004DF4                 jnz     short loc_4E70
.text:0000000000004DF6
.text:0000000000004DF6 loc_4DF6:                               ; CODE XREF: savewd_chdir+125↓j
.text:0000000000004DF6                 cmp     dword ptr [r12], 5 ; switch 6 cases
.text:0000000000004DFB                 ja      def_4E13        ; jumptable 0000000000004E13 default case, case 0
.text:0000000000004E01                 mov     eax, [r12]
.text:0000000000004E05                 lea     rdx, jpt_4E13
.text:0000000000004E0C                 movsxd  rax, ds:(jpt_4E13 - 9330h)[rdx+rax*4]
.text:0000000000004E10                 add     rax, rdx
.text:0000000000004E13                 jmp     rax             ; switch jump
.text:0000000000004E13 ; ---------------------------------------------------------------------------
.text:0000000000004E15                 align 8
.text:0000000000004E18
.text:0000000000004E18 loc_4E18:                               ; CODE XREF: savewd_chdir+E6↑j
.text:0000000000004E18                                         ; savewd_chdir+195↓j
.text:0000000000004E18                 mov     rdi, r13        ; path
.text:0000000000004E1B                 call    _chdir
.text:0000000000004E20                 test    eax, eax
.text:0000000000004E22                 mov     r14d, eax
.text:0000000000004E25                 jz      short loc_4DF6
.text:0000000000004E27                 pop     rbx
.text:0000000000004E28                 mov     eax, r14d
.text:0000000000004E2B                 pop     rbp
.text:0000000000004E2C                 pop     r12
.text:0000000000004E2E                 pop     r13
.text:0000000000004E30                 pop     r14
.text:0000000000004E32                 retn
.text:0000000000004E32 ; ---------------------------------------------------------------------------
.text:0000000000004E33                 align 8
.text:0000000000004E38
.text:0000000000004E38 loc_4E38:                               ; CODE XREF: savewd_chdir+17↑j
.text:0000000000004E38                 test    dl, 1
.text:0000000000004E3B                 mov     ebx, 0FFFFFFFFh
.text:0000000000004E40                 jz      loc_4D96
.text:0000000000004E46                 mov     esi, edx
.text:0000000000004E48                 mov     rdi, r13
.text:0000000000004E4B                 shl     esi, 11h
.text:0000000000004E4E                 and     esi, 20000h
.text:0000000000004E54                 or      esi, 10900h
.text:0000000000004E5A                 call    ___open_2
.text:0000000000004E5F                 mov     ebx, eax
.text:0000000000004E61                 jmp     loc_4D45
.text:0000000000004E61 ; ---------------------------------------------------------------------------
.text:0000000000004E66                 align 10h
.text:0000000000004E70
.text:0000000000004E70 loc_4E70:                               ; CODE XREF: savewd_chdir+F4↑j
.text:0000000000004E70                 test    rbp, rbp
.text:0000000000004E73                 setz    al
.text:0000000000004E76                 jmp     loc_4D58
.text:0000000000004E76 ; ---------------------------------------------------------------------------
.text:0000000000004E7B                 align 20h
.text:0000000000004E80
.text:0000000000004E80 loc_4E80:                               ; CODE XREF: savewd_chdir+B1↑j
.text:0000000000004E80                 mov     edx, [r12+4]
.text:0000000000004E85                 test    edx, edx
.text:0000000000004E87                 js      loc_4F19
.text:0000000000004E8D                 test    ebx, ebx
.text:0000000000004E8F                 jns     loc_4DE8
.text:0000000000004E95                 jmp     short loc_4E18
.text:0000000000004E95 ; ---------------------------------------------------------------------------
.text:0000000000004E97                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 loc_4EA0:                               ; CODE XREF: savewd_chdir+113↑j
.text:0000000000004EA0                                         ; DATA XREF: .rodata:jpt_4E13↓o
.text:0000000000004EA0                 mov     dword ptr [r12], 2 ; jumptable 0000000000004E13 case 1
.text:0000000000004EA8                 jmp     loc_4D4F        ; jumptable 0000000000004E13 cases 2,4,5
.text:0000000000004EA8 ; ---------------------------------------------------------------------------
.text:0000000000004EAD                 align 10h
.text:0000000000004EB0
.text:0000000000004EB0 loc_4EB0:                               ; CODE XREF: savewd_chdir+113↑j
.text:0000000000004EB0                                         ; DATA XREF: .rodata:jpt_4E13↓o
.text:0000000000004EB0                 mov     eax, [r12+4]    ; jumptable 0000000000004E13 case 3
.text:0000000000004EB5                 test    eax, eax
.text:0000000000004EB7                 jz      loc_4D4F        ; jumptable 0000000000004E13 cases 2,4,5
.text:0000000000004EBD                 lea     rcx, __PRETTY_FUNCTION___4461 ; "savewd_chdir"
.text:0000000000004EC4                 lea     rsi, file       ; "../coreutils-8.31/lib/savewd.c"
.text:0000000000004ECB                 lea     rdi, assertion  ; "wd->val.child == 0"
.text:0000000000004ED2                 mov     edx, 9Bh        ; line
.text:0000000000004ED7                 call    ___assert_fail
.text:0000000000004ED7 ; ---------------------------------------------------------------------------
.text:0000000000004EDC                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: savewd_chdir+D1↑j
.text:0000000000004EE0                 call    ___errno_location
.text:0000000000004EE5                 mov     eax, [rax]
.text:0000000000004EE7                 cmp     eax, 0Dh
.text:0000000000004EEA                 jz      short loc_4F08
.text:0000000000004EEC                 cmp     eax, 74h ; 't'
.text:0000000000004EEF                 jz      short loc_4F08
.text:0000000000004EF1                 mov     dword ptr [r12], 4
.text:0000000000004EF9                 mov     [r12+4], eax
.text:0000000000004EFE                 jmp     loc_4DE4
.text:0000000000004EFE ; ---------------------------------------------------------------------------
.text:0000000000004F03                 align 8
.text:0000000000004F08
.text:0000000000004F08 loc_4F08:                               ; CODE XREF: savewd_chdir+1EA↑j
.text:0000000000004F08                                         ; savewd_chdir+1EF↑j
.text:0000000000004F08                 mov     dword ptr [r12], 3
.text:0000000000004F10                 mov     dword ptr [r12+4], 0FFFFFFFFh
.text:0000000000004F19
.text:0000000000004F19 loc_4F19:                               ; CODE XREF: savewd_chdir+187↑j
.text:0000000000004F19                 call    _fork
.text:0000000000004F1E                 cmp     eax, 0
.text:0000000000004F21                 mov     [r12+4], eax
.text:0000000000004F26                 jz      loc_4DE4
.text:0000000000004F2C                 mov     eax, 1
.text:0000000000004F31                 mov     r14d, 0FFFFFFFEh
.text:0000000000004F37                 jg      loc_4D58
.text:0000000000004F3D                 mov     dword ptr [r12], 4
.text:0000000000004F45                 call    ___errno_location
.text:0000000000004F4A                 mov     eax, [rax]
.text:0000000000004F4C                 mov     [r12+4], eax
.text:0000000000004F51                 jmp     loc_4DE4
.text:0000000000004F51 ; ---------------------------------------------------------------------------
.text:0000000000004F56                 align 20h
.text:0000000000004F60
.text:0000000000004F60 loc_4F60:                               ; CODE XREF: savewd_chdir+90↑j
.text:0000000000004F60                 mov     r14d, 0FFFFFFFFh
.text:0000000000004F66                 jmp     loc_4D76
.text:0000000000004F6B ; ---------------------------------------------------------------------------
.text:0000000000004F6B
.text:0000000000004F6B def_4E13:                               ; CODE XREF: savewd_chdir+FB↑j
.text:0000000000004F6B                                         ; savewd_chdir+113↑j
.text:0000000000004F6B                                         ; DATA XREF: ...
.text:0000000000004F6B                 lea     rcx, __PRETTY_FUNCTION___4461 ; jumptable 0000000000004E13 default case, case 0
.text:0000000000004F72                 lea     rsi, file       ; "../coreutils-8.31/lib/savewd.c"
.text:0000000000004F79                 lea     rdi, aWdValChild0_0+10h ; assertion
.text:0000000000004F80                 mov     edx, 9Fh        ; line
.text:0000000000004F85                 call    ___assert_fail
.text:0000000000004F8A ; ---------------------------------------------------------------------------
.text:0000000000004F8A
.text:0000000000004F8A loc_4F8A:                               ; CODE XREF: savewd_chdir+9D↑j
.text:0000000000004F8A                                         ; savewd_chdir+B9↑j
.text:0000000000004F8A                 lea     rcx, __PRETTY_FUNCTION___4446 ; "savewd_save"
.text:0000000000004F91                 lea     rsi, file       ; "../coreutils-8.31/lib/savewd.c"
.text:0000000000004F98                 lea     rdi, aWdValChild0_0+10h ; assertion
.text:0000000000004F9F                 mov     edx, 63h ; 'c'  ; line
.text:0000000000004FA4                 call    ___assert_fail
.text:0000000000004FA4 ; } // starts at 4D00
.text:0000000000004FA4 savewd_chdir    endp
.text:0000000000004FA4
.text:0000000000004FA4 ; ---------------------------------------------------------------------------
.text:0000000000004FA9                 align 10h
.text:0000000000004FB0
.text:0000000000004FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FB0
.text:0000000000004FB0
.text:0000000000004FB0                 public savewd_restore
.text:0000000000004FB0 savewd_restore  proc near               ; CODE XREF: savewd_process_files+159↓p
.text:0000000000004FB0
.text:0000000000004FB0 stat_loc        = dword ptr -24h
.text:0000000000004FB0 var_20          = qword ptr -20h
.text:0000000000004FB0
.text:0000000000004FB0 ; __unwind {
.text:0000000000004FB0                 push    r12
.text:0000000000004FB2                 push    rbp
.text:0000000000004FB3                 push    rbx
.text:0000000000004FB4                 sub     rsp, 10h
.text:0000000000004FB8                 mov     rax, fs:28h
.text:0000000000004FC1                 mov     [rsp+28h+var_20], rax
.text:0000000000004FC6                 xor     eax, eax
.text:0000000000004FC8                 cmp     dword ptr [rdi], 4 ; switch 5 cases
.text:0000000000004FCB                 ja      def_4FE4        ; jumptable 0000000000004FE4 default case
.text:0000000000004FD1                 mov     eax, [rdi]
.text:0000000000004FD3                 lea     rdx, jpt_4FE4
.text:0000000000004FDA                 mov     rbx, rdi
.text:0000000000004FDD                 movsxd  rax, ds:(jpt_4FE4 - 9348h)[rdx+rax*4]
.text:0000000000004FE1                 add     rax, rdx
.text:0000000000004FE4                 jmp     rax             ; switch jump
.text:0000000000004FE4 ; ---------------------------------------------------------------------------
.text:0000000000004FE6                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 loc_4FF0:                               ; CODE XREF: savewd_restore+34↑j
.text:0000000000004FF0                                         ; DATA XREF: .rodata:jpt_4FE4↓o
.text:0000000000004FF0                 mov     ebp, [rdi+4]    ; jumptable 0000000000004FE4 case 3
.text:0000000000004FF3                 cmp     ebp, 0
.text:0000000000004FF6                 jz      loc_50FC
.text:0000000000004FFC                 lea     r12, [rsp+28h+stat_loc]
.text:0000000000005001                 jg      short loc_504A
.text:0000000000005003
.text:0000000000005003 loc_5003:                               ; CODE XREF: savewd_restore+34↑j
.text:0000000000005003                                         ; DATA XREF: .rodata:jpt_4FE4↓o
.text:0000000000005003                 xor     eax, eax        ; jumptable 0000000000004FE4 cases 0,1
.text:0000000000005005
.text:0000000000005005 loc_5005:                               ; CODE XREF: savewd_restore+8D↓j
.text:0000000000005005                                         ; savewd_restore+C8↓j ...
.text:0000000000005005                 mov     rcx, [rsp+28h+var_20]
.text:000000000000500A                 xor     rcx, fs:28h
.text:0000000000005013                 jnz     loc_50D8
.text:0000000000005019                 add     rsp, 10h
.text:000000000000501D                 pop     rbx
.text:000000000000501E                 pop     rbp
.text:000000000000501F                 pop     r12
.text:0000000000005021                 retn
.text:0000000000005021 ; ---------------------------------------------------------------------------
.text:0000000000005022                 align 8
.text:0000000000005028
.text:0000000000005028 loc_5028:                               ; CODE XREF: savewd_restore+34↑j
.text:0000000000005028                                         ; DATA XREF: .rodata:jpt_4FE4↓o
.text:0000000000005028                 mov     r12d, [rdi+4]   ; jumptable 0000000000004FE4 case 4
.text:000000000000502C                 call    ___errno_location
.text:0000000000005031                 mov     rbp, rax
.text:0000000000005034
.text:0000000000005034 loc_5034:                               ; CODE XREF: savewd_restore+104↓j
.text:0000000000005034                 mov     [rbp+0], r12d
.text:0000000000005038                 mov     eax, 0FFFFFFFFh
.text:000000000000503D                 jmp     short loc_5005
.text:000000000000503D ; ---------------------------------------------------------------------------
.text:000000000000503F                 align 20h
.text:0000000000005040
.text:0000000000005040 loc_5040:                               ; CODE XREF: savewd_restore+A8↓j
.text:0000000000005040                 call    ___errno_location
.text:0000000000005045                 cmp     dword ptr [rax], 4
.text:0000000000005048                 jnz     short loc_50B9
.text:000000000000504A
.text:000000000000504A loc_504A:                               ; CODE XREF: savewd_restore+51↑j
.text:000000000000504A                 xor     edx, edx        ; options
.text:000000000000504C                 mov     rsi, r12        ; stat_loc
.text:000000000000504F                 mov     edi, ebp        ; pid
.text:0000000000005051                 call    _waitpid
.text:0000000000005056                 test    eax, eax
.text:0000000000005058                 js      short loc_5040
.text:000000000000505A                 mov     eax, [rsp+28h+stat_loc]
.text:000000000000505E                 mov     dword ptr [rbx+4], 0FFFFFFFFh
.text:0000000000005065                 mov     edi, eax
.text:0000000000005067                 and     edi, 7Fh        ; sig
.text:000000000000506A                 jz      short loc_5075
.text:000000000000506C                 call    _raise
.text:0000000000005071                 mov     eax, [rsp+28h+stat_loc]
.text:0000000000005075
.text:0000000000005075 loc_5075:                               ; CODE XREF: savewd_restore+BA↑j
.text:0000000000005075                 movzx   eax, ah
.text:0000000000005078                 jmp     short loc_5005
.text:0000000000005078 ; ---------------------------------------------------------------------------
.text:000000000000507A                 align 20h
.text:0000000000005080
.text:0000000000005080 loc_5080:                               ; CODE XREF: savewd_restore+34↑j
.text:0000000000005080                                         ; DATA XREF: .rodata:jpt_4FE4↓o
.text:0000000000005080                 mov     edi, [rdi+4]    ; jumptable 0000000000004FE4 case 2
.text:0000000000005083                 call    _fchdir
.text:0000000000005088                 test    eax, eax
.text:000000000000508A                 jnz     short loc_5097
.text:000000000000508C                 mov     dword ptr [rbx], 1
.text:0000000000005092                 jmp     loc_5005
.text:0000000000005097 ; ---------------------------------------------------------------------------
.text:0000000000005097
.text:0000000000005097 loc_5097:                               ; CODE XREF: savewd_restore+DA↑j
.text:0000000000005097                 call    ___errno_location
.text:000000000000509C                 mov     edi, [rbx+4]    ; fd
.text:000000000000509F                 mov     r12d, [rax]
.text:00000000000050A2                 mov     rbp, rax
.text:00000000000050A5                 call    _close
.text:00000000000050AA                 mov     dword ptr [rbx], 4
.text:00000000000050B0                 mov     [rbx+4], r12d
.text:00000000000050B4                 jmp     loc_5034
.text:00000000000050B9 ; ---------------------------------------------------------------------------
.text:00000000000050B9
.text:00000000000050B9 loc_50B9:                               ; CODE XREF: savewd_restore+98↑j
.text:00000000000050B9                 lea     rcx, __PRETTY_FUNCTION___4477 ; "savewd_restore"
.text:00000000000050C0                 lea     rsi, file       ; "../coreutils-8.31/lib/savewd.c"
.text:00000000000050C7                 lea     rdi, aErrnoLocation4 ; "(*__errno_location ()) == 4"
.text:00000000000050CE                 mov     edx, 0D8h       ; line
.text:00000000000050D3                 call    ___assert_fail
.text:00000000000050D8 ; ---------------------------------------------------------------------------
.text:00000000000050D8
.text:00000000000050D8 loc_50D8:                               ; CODE XREF: savewd_restore+63↑j
.text:00000000000050D8                 call    ___stack_chk_fail
.text:00000000000050DD ; ---------------------------------------------------------------------------
.text:00000000000050DD
.text:00000000000050DD def_4FE4:                               ; CODE XREF: savewd_restore+1B↑j
.text:00000000000050DD                 lea     rcx, __PRETTY_FUNCTION___4477 ; jumptable 0000000000004FE4 default case
.text:00000000000050E4                 lea     rsi, file       ; "../coreutils-8.31/lib/savewd.c"
.text:00000000000050EB                 lea     rdi, aWdValChild0_0+10h ; assertion
.text:00000000000050F2                 mov     edx, 0E2h       ; line
.text:00000000000050F7                 call    ___assert_fail
.text:00000000000050FC ; ---------------------------------------------------------------------------
.text:00000000000050FC
.text:00000000000050FC loc_50FC:                               ; CODE XREF: savewd_restore+46↑j
.text:00000000000050FC                 mov     edi, esi        ; status
.text:00000000000050FE                 call    __exit
.text:00000000000050FE ; } // starts at 4FB0
.text:00000000000050FE savewd_restore  endp
.text:00000000000050FE
.text:00000000000050FE ; ---------------------------------------------------------------------------
.text:0000000000005103                 align 10h
.text:0000000000005110
.text:0000000000005110 ; =============== S U B R O U T I N E =======================================
.text:0000000000005110
.text:0000000000005110
.text:0000000000005110                 public savewd_finish
.text:0000000000005110 savewd_finish   proc near               ; CODE XREF: savewd_process_files+90↓p
.text:0000000000005110 ; __unwind {
.text:0000000000005110                 push    rbx
.text:0000000000005111                 cmp     dword ptr [rdi], 4 ; switch 5 cases
.text:0000000000005114                 ja      short def_5129  ; jumptable 0000000000005129 default case
.text:0000000000005116                 mov     eax, [rdi]
.text:0000000000005118                 lea     rdx, jpt_5129
.text:000000000000511F                 mov     rbx, rdi
.text:0000000000005122                 movsxd  rax, ds:(jpt_5129 - 935Ch)[rdx+rax*4]
.text:0000000000005126                 add     rax, rdx
.text:0000000000005129                 jmp     rax             ; switch jump
.text:0000000000005129 ; ---------------------------------------------------------------------------
.text:000000000000512B                 align 10h
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: savewd_finish+19↑j
.text:0000000000005130                                         ; DATA XREF: .rodata:jpt_5129↓o
.text:0000000000005130                 mov     edi, [rdi+4]    ; jumptable 0000000000005129 cases 1,2
.text:0000000000005133                 call    _close
.text:0000000000005138
.text:0000000000005138 loc_5138:                               ; CODE XREF: savewd_finish+19↑j
.text:0000000000005138                                         ; savewd_finish+35↓j
.text:0000000000005138                                         ; DATA XREF: ...
.text:0000000000005138                 mov     dword ptr [rbx], 5 ; jumptable 0000000000005129 cases 0,4
.text:000000000000513E                 pop     rbx
.text:000000000000513F                 retn
.text:0000000000005140 ; ---------------------------------------------------------------------------
.text:0000000000005140
.text:0000000000005140 loc_5140:                               ; CODE XREF: savewd_finish+19↑j
.text:0000000000005140                                         ; DATA XREF: .rodata:jpt_5129↓o
.text:0000000000005140                 mov     eax, [rdi+4]    ; jumptable 0000000000005129 case 3
.text:0000000000005143                 test    eax, eax
.text:0000000000005145                 js      short loc_5138  ; jumptable 0000000000005129 cases 0,4
.text:0000000000005147                 lea     rcx, __PRETTY_FUNCTION___4491 ; "savewd_finish"
.text:000000000000514E                 lea     rsi, file       ; "../coreutils-8.31/lib/savewd.c"
.text:0000000000005155                 lea     rdi, aWdValChild0_0 ; "wd->val.child < 0"
.text:000000000000515C                 mov     edx, 0F7h       ; line
.text:0000000000005161                 call    ___assert_fail
.text:0000000000005166 ; ---------------------------------------------------------------------------
.text:0000000000005166
.text:0000000000005166 def_5129:                               ; CODE XREF: savewd_finish+4↑j
.text:0000000000005166                 lea     rcx, __PRETTY_FUNCTION___4491 ; jumptable 0000000000005129 default case
.text:000000000000516D                 lea     rsi, file       ; "../coreutils-8.31/lib/savewd.c"
.text:0000000000005174                 lea     rdi, aWdValChild0_0+10h ; assertion
.text:000000000000517B                 mov     edx, 0FBh       ; line
.text:0000000000005180                 call    ___assert_fail
.text:0000000000005180 ; } // starts at 5110
.text:0000000000005180 savewd_finish   endp
.text:0000000000005180
.text:0000000000005180 ; ---------------------------------------------------------------------------
.text:0000000000005185                 align 10h
.text:0000000000005190
.text:0000000000005190 ; =============== S U B R O U T I N E =======================================
.text:0000000000005190
.text:0000000000005190
.text:0000000000005190                 public savewd_process_files
.text:0000000000005190 savewd_process_files proc near          ; CODE XREF: main+1E3↑p
.text:0000000000005190
.text:0000000000005190 var_60          = qword ptr -60h
.text:0000000000005190 var_58          = qword ptr -58h
.text:0000000000005190 var_50          = dword ptr -50h
.text:0000000000005190 var_4C          = dword ptr -4Ch
.text:0000000000005190 var_48          = dword ptr -48h
.text:0000000000005190 var_44          = dword ptr -44h
.text:0000000000005190 var_40          = qword ptr -40h
.text:0000000000005190
.text:0000000000005190 ; __unwind {
.text:0000000000005190                 push    r15
.text:0000000000005192                 push    r14
.text:0000000000005194                 mov     eax, edi
.text:0000000000005196                 push    r13
.text:0000000000005198                 push    r12
.text:000000000000519A                 sub     eax, 1
.text:000000000000519D                 push    rbp
.text:000000000000519E                 push    rbx
.text:000000000000519F                 mov     r12, rcx
.text:00000000000051A2                 mov     rbp, rdx
.text:00000000000051A5                 sub     rsp, 38h
.text:00000000000051A9                 mov     rcx, fs:28h
.text:00000000000051B2                 mov     [rsp+68h+var_40], rcx
.text:00000000000051B7                 xor     ecx, ecx
.text:00000000000051B9                 test    eax, eax
.text:00000000000051BB                 mov     [rsp+68h+var_50], edi
.text:00000000000051BF                 mov     [rsp+68h+var_58], rsi
.text:00000000000051C4                 mov     [rsp+68h+var_48], 0
.text:00000000000051CC                 mov     [rsp+68h+var_4C], eax
.text:00000000000051D0                 js      short loc_5212
.text:00000000000051D2                 mov     r13d, eax
.text:00000000000051D5                 cdqe
.text:00000000000051D7                 lea     rdx, ds:0[rax*8]
.text:00000000000051DF                 mov     rax, [rsi+rax*8]
.text:00000000000051E3                 cmp     byte ptr [rax], 2Fh ; '/'
.text:00000000000051E6                 jnz     loc_5298
.text:00000000000051EC                 lea     rax, [rsi+rdx-8]
.text:00000000000051F1                 jmp     short loc_5208
.text:00000000000051F1 ; ---------------------------------------------------------------------------
.text:00000000000051F3                 align 8
.text:00000000000051F8
.text:00000000000051F8 loc_51F8:                               ; CODE XREF: savewd_process_files+80↓j
.text:00000000000051F8                 mov     rdx, [rax]
.text:00000000000051FB                 sub     rax, 8
.text:00000000000051FF                 cmp     byte ptr [rdx], 2Fh ; '/'
.text:0000000000005202                 jnz     loc_5298
.text:0000000000005208
.text:0000000000005208 loc_5208:                               ; CODE XREF: savewd_process_files+61↑j
.text:0000000000005208                 sub     r13d, 1
.text:000000000000520C                 cmp     r13d, 0FFFFFFFFh
.text:0000000000005210                 jnz     short loc_51F8
.text:0000000000005212
.text:0000000000005212 loc_5212:                               ; CODE XREF: savewd_process_files+40↑j
.text:0000000000005212                                         ; savewd_process_files+10B↓j
.text:0000000000005212                 lea     rbx, [rsp+68h+var_48]
.text:0000000000005217                 xor     r15d, r15d
.text:000000000000521A                 xor     r13d, r13d
.text:000000000000521D
.text:000000000000521D loc_521D:                               ; CODE XREF: savewd_process_files+16E↓j
.text:000000000000521D                 mov     rdi, rbx
.text:0000000000005220                 call    savewd_finish
.text:0000000000005225                 cmp     [rsp+68h+var_50], r13d
.text:000000000000522A                 jle     short loc_526B
.text:000000000000522C                 mov     ecx, [rsp+68h+var_4C]
.text:0000000000005230                 mov     rdi, [rsp+68h+var_58]
.text:0000000000005235                 movsxd  rax, r13d
.text:0000000000005238                 sub     ecx, r13d
.text:000000000000523B                 lea     r14, [rdi+rax*8]
.text:000000000000523F                 mov     r13, rcx
.text:0000000000005242                 add     r13, rax
.text:0000000000005245                 lea     r13, [rdi+r13*8+8]
.text:000000000000524A                 nop     word ptr [rax+rax+00h]
.text:0000000000005250
.text:0000000000005250 loc_5250:                               ; CODE XREF: savewd_process_files+D9↓j
.text:0000000000005250                 mov     rdi, [r14]
.text:0000000000005253                 mov     rdx, r12
.text:0000000000005256                 mov     rsi, rbx
.text:0000000000005259                 call    rbp
.text:000000000000525B                 cmp     r15d, eax
.text:000000000000525E                 cmovl   r15d, eax
.text:0000000000005262                 add     r14, 8
.text:0000000000005266                 cmp     r14, r13
.text:0000000000005269                 jnz     short loc_5250
.text:000000000000526B
.text:000000000000526B loc_526B:                               ; CODE XREF: savewd_process_files+9A↑j
.text:000000000000526B                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005270                 xor     rcx, fs:28h
.text:0000000000005279                 mov     eax, r15d
.text:000000000000527C                 jnz     loc_5317
.text:0000000000005282                 add     rsp, 38h
.text:0000000000005286                 pop     rbx
.text:0000000000005287                 pop     rbp
.text:0000000000005288                 pop     r12
.text:000000000000528A                 pop     r13
.text:000000000000528C                 pop     r14
.text:000000000000528E                 pop     r15
.text:0000000000005290                 retn
.text:0000000000005290 ; ---------------------------------------------------------------------------
.text:0000000000005291                 align 8
.text:0000000000005298
.text:0000000000005298 loc_5298:                               ; CODE XREF: savewd_process_files+56↑j
.text:0000000000005298                                         ; savewd_process_files+72↑j
.text:0000000000005298                 test    r13d, r13d
.text:000000000000529B                 jle     loc_5212
.text:00000000000052A1                 mov     rcx, [rsp+68h+var_58]
.text:00000000000052A6                 lea     eax, [r13-1]
.text:00000000000052AA                 xor     r15d, r15d
.text:00000000000052AD                 lea     rbx, [rsp+68h+var_48]
.text:00000000000052B2                 lea     rax, [rcx+rax*8+8]
.text:00000000000052B7                 mov     r14, rcx
.text:00000000000052BA                 mov     [rsp+68h+var_60], rax
.text:00000000000052BF                 xor     eax, eax
.text:00000000000052C1                 jmp     short loc_5308
.text:00000000000052C1 ; ---------------------------------------------------------------------------
.text:00000000000052C3                 align 8
.text:00000000000052C8
.text:00000000000052C8 loc_52C8:                               ; CODE XREF: savewd_process_files+17B↓j
.text:00000000000052C8                                         ; savewd_process_files+185↓j
.text:00000000000052C8                 mov     rdx, r12
.text:00000000000052CB                 mov     rsi, rbx
.text:00000000000052CE                 mov     rdi, [r14]
.text:00000000000052D1                 call    rbp
.text:00000000000052D3                 cmp     r15d, eax
.text:00000000000052D6                 cmovl   r15d, eax
.text:00000000000052DA
.text:00000000000052DA loc_52DA:                               ; CODE XREF: savewd_process_files+183↓j
.text:00000000000052DA                 mov     rax, [r14+8]
.text:00000000000052DE                 cmp     byte ptr [rax], 2Fh ; '/'
.text:00000000000052E1                 jz      short loc_52F5
.text:00000000000052E3                 mov     esi, r15d
.text:00000000000052E6                 mov     rdi, rbx
.text:00000000000052E9                 call    savewd_restore
.text:00000000000052EE                 cmp     r15d, eax
.text:00000000000052F1                 cmovl   r15d, eax
.text:00000000000052F5
.text:00000000000052F5 loc_52F5:                               ; CODE XREF: savewd_process_files+151↑j
.text:00000000000052F5                 add     r14, 8
.text:00000000000052F9                 cmp     r14, [rsp+68h+var_60]
.text:00000000000052FE                 jz      loc_521D
.text:0000000000005304                 mov     eax, [rsp+68h+var_48]
.text:0000000000005308
.text:0000000000005308 loc_5308:                               ; CODE XREF: savewd_process_files+131↑j
.text:0000000000005308                 cmp     eax, 3
.text:000000000000530B                 jnz     short loc_52C8
.text:000000000000530D                 mov     eax, [rsp+68h+var_44]
.text:0000000000005311                 test    eax, eax
.text:0000000000005313                 jg      short loc_52DA
.text:0000000000005315                 jmp     short loc_52C8
.text:0000000000005317 ; ---------------------------------------------------------------------------
.text:0000000000005317
.text:0000000000005317 loc_5317:                               ; CODE XREF: savewd_process_files+EC↑j
.text:0000000000005317                 call    ___stack_chk_fail
.text:0000000000005317 ; } // starts at 5190
.text:0000000000005317 savewd_process_files endp
.text:0000000000005317
.text:0000000000005317 ; ---------------------------------------------------------------------------
.text:000000000000531C                 align 20h
.text:0000000000005320
.text:0000000000005320 ; =============== S U B R O U T I N E =======================================
.text:0000000000005320
.text:0000000000005320
.text:0000000000005320 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005320                 public version_etc_arn
.text:0000000000005320 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_575B↓j
.text:0000000000005320                                         ; version_etc_va:loc_57AB↓p ...
.text:0000000000005320
.text:0000000000005320 var_58          = qword ptr -58h
.text:0000000000005320 var_50          = qword ptr -50h
.text:0000000000005320 var_48          = qword ptr -48h
.text:0000000000005320 var_40          = qword ptr -40h
.text:0000000000005320
.text:0000000000005320 ; __unwind {
.text:0000000000005320                 push    r15
.text:0000000000005322                 push    r14
.text:0000000000005324                 push    r13
.text:0000000000005326                 push    r12
.text:0000000000005328                 mov     r12, r9
.text:000000000000532B                 push    rbp
.text:000000000000532C                 push    rbx
.text:000000000000532D                 mov     rbp, rdi
.text:0000000000005330                 mov     rbx, r8
.text:0000000000005333                 sub     rsp, 28h
.text:0000000000005337                 test    rsi, rsi
.text:000000000000533A                 jz      loc_5458
.text:0000000000005340                 mov     r8, rdx
.text:0000000000005343                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000534A                 mov     r9, rcx
.text:000000000000534D                 xor     eax, eax
.text:000000000000534F                 mov     rcx, rsi
.text:0000000000005352                 mov     esi, 1
.text:0000000000005357                 call    ___fprintf_chk
.text:000000000000535C
.text:000000000000535C loc_535C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000535C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005363                 xor     edi, edi        ; domainname
.text:0000000000005365                 mov     edx, 5          ; category
.text:000000000000536A                 call    _dcgettext
.text:000000000000536F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005376                 mov     rcx, rax
.text:0000000000005379                 mov     r8d, 7E3h
.text:000000000000537F                 mov     esi, 1
.text:0000000000005384                 mov     rdi, rbp
.text:0000000000005387                 xor     eax, eax
.text:0000000000005389                 call    ___fprintf_chk
.text:000000000000538E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005395                 xor     edi, edi        ; domainname
.text:0000000000005397                 mov     edx, 5          ; category
.text:000000000000539C                 call    _dcgettext
.text:00000000000053A1                 mov     rsi, rbp        ; stream
.text:00000000000053A4                 mov     rdi, rax        ; s
.text:00000000000053A7                 call    _fputs_unlocked
.text:00000000000053AC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000053B0                 ja      def_53C4        ; jumptable 00000000000053C4 default case
.text:00000000000053B6                 lea     rdx, jpt_53C4
.text:00000000000053BD                 movsxd  rax, ds:(jpt_53C4 - 96A8h)[rdx+r12*4]
.text:00000000000053C1                 add     rax, rdx
.text:00000000000053C4                 jmp     rax             ; switch jump
.text:00000000000053C4 ; ---------------------------------------------------------------------------
.text:00000000000053C6                 align 10h
.text:00000000000053D0
.text:00000000000053D0 loc_53D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000053D0                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:00000000000053D0                 mov     r9, [rbx+38h]   ; jumptable 00000000000053C4 case 8
.text:00000000000053D4                 mov     rax, [rbx+10h]
.text:00000000000053D8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000053DF                 mov     r8, [rbx+8]
.text:00000000000053E3                 mov     edx, 5          ; category
.text:00000000000053E8                 xor     edi, edi        ; domainname
.text:00000000000053EA                 mov     r13, [rbx+30h]
.text:00000000000053EE                 mov     r12, [rbx+28h]
.text:00000000000053F2                 mov     [rsp+58h+var_48], r9
.text:00000000000053F7                 mov     r15, [rbx+20h]
.text:00000000000053FB                 mov     r14, [rbx+18h]
.text:00000000000053FF                 mov     [rsp+58h+var_58], rax
.text:0000000000005403                 mov     [rsp+58h+var_50], r8
.text:0000000000005408                 mov     rbx, [rbx]
.text:000000000000540B                 call    _dcgettext
.text:0000000000005410                 sub     rsp, 8
.text:0000000000005414
.text:0000000000005414 loc_5414:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005414                 mov     r9, [rsp+60h+var_48]
.text:0000000000005419                 mov     rdx, rax
.text:000000000000541C                 mov     rcx, rbx
.text:000000000000541F                 mov     esi, 1
.text:0000000000005424                 mov     rdi, rbp
.text:0000000000005427                 xor     eax, eax
.text:0000000000005429                 push    r9
.text:000000000000542B                 push    r13
.text:000000000000542D                 push    r12
.text:000000000000542F                 push    r15
.text:0000000000005431                 push    r14
.text:0000000000005433                 mov     r9, [rsp+88h+var_58]
.text:0000000000005438                 mov     r8, [rsp+88h+var_50]
.text:000000000000543D                 call    ___fprintf_chk
.text:0000000000005442                 add     rsp, 30h
.text:0000000000005446
.text:0000000000005446 loc_5446:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005446                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:0000000000005446                 add     rsp, 28h        ; jumptable 00000000000053C4 case 0
.text:000000000000544A                 pop     rbx
.text:000000000000544B                 pop     rbp
.text:000000000000544C                 pop     r12
.text:000000000000544E                 pop     r13
.text:0000000000005450                 pop     r14
.text:0000000000005452                 pop     r15
.text:0000000000005454                 retn
.text:0000000000005454 ; ---------------------------------------------------------------------------
.text:0000000000005455                 align 8
.text:0000000000005458
.text:0000000000005458 loc_5458:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005458                 mov     r8, rcx
.text:000000000000545B                 mov     rcx, rdx
.text:000000000000545E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005465                 mov     esi, 1
.text:000000000000546A                 xor     eax, eax
.text:000000000000546C                 call    ___fprintf_chk
.text:0000000000005471                 jmp     loc_535C
.text:0000000000005471 ; ---------------------------------------------------------------------------
.text:0000000000005476                 align 20h
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005480                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:0000000000005480                 mov     r10, [rbx+40h]  ; jumptable 00000000000053C4 case 9
.text:0000000000005484                 mov     r9, [rbx+38h]
.text:0000000000005488                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000548F                 mov     rax, [rbx+10h]
.text:0000000000005493                 mov     r8, [rbx+8]
.text:0000000000005497                 mov     edx, 5          ; category
.text:000000000000549C                 mov     r13, [rbx+30h]
.text:00000000000054A0                 mov     r12, [rbx+28h]
.text:00000000000054A4                 mov     r15, [rbx+20h]
.text:00000000000054A8                 mov     r14, [rbx+18h]
.text:00000000000054AC                 mov     rbx, [rbx]
.text:00000000000054AF                 mov     [rsp+58h+var_40], r10
.text:00000000000054B4                 mov     [rsp+58h+var_48], r9
.text:00000000000054B9                 mov     [rsp+58h+var_58], rax
.text:00000000000054BD                 mov     [rsp+58h+var_50], r8
.text:00000000000054C2
.text:00000000000054C2 loc_54C2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000054C2                 xor     edi, edi        ; domainname
.text:00000000000054C4                 call    _dcgettext
.text:00000000000054C9                 mov     r10, [rsp+58h+var_40]
.text:00000000000054CE                 push    r10
.text:00000000000054D0                 jmp     loc_5414
.text:00000000000054D0 ; ---------------------------------------------------------------------------
.text:00000000000054D5                 align 8
.text:00000000000054D8
.text:00000000000054D8 loc_54D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000054D8                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:00000000000054D8                 mov     rbx, [rbx]      ; jumptable 00000000000053C4 case 1
.text:00000000000054DB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000054E2                 mov     edx, 5          ; category
.text:00000000000054E7                 xor     edi, edi        ; domainname
.text:00000000000054E9                 call    _dcgettext
.text:00000000000054EE                 add     rsp, 28h
.text:00000000000054F2                 mov     rcx, rbx
.text:00000000000054F5                 mov     rdi, rbp
.text:00000000000054F8                 pop     rbx
.text:00000000000054F9                 pop     rbp
.text:00000000000054FA                 pop     r12
.text:00000000000054FC                 pop     r13
.text:00000000000054FE                 pop     r14
.text:0000000000005500                 pop     r15
.text:0000000000005502                 mov     rdx, rax
.text:0000000000005505                 mov     esi, 1
.text:000000000000550A                 xor     eax, eax
.text:000000000000550C                 jmp     ___fprintf_chk
.text:000000000000550C ; ---------------------------------------------------------------------------
.text:0000000000005511                 align 8
.text:0000000000005518
.text:0000000000005518 loc_5518:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005518                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:0000000000005518                 mov     r12, [rbx+8]    ; jumptable 00000000000053C4 case 2
.text:000000000000551C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005523                 mov     rbx, [rbx]
.text:0000000000005526                 mov     edx, 5          ; category
.text:000000000000552B                 xor     edi, edi        ; domainname
.text:000000000000552D                 call    _dcgettext
.text:0000000000005532                 add     rsp, 28h
.text:0000000000005536                 mov     r8, r12
.text:0000000000005539                 mov     rcx, rbx
.text:000000000000553C                 mov     rdi, rbp
.text:000000000000553F                 mov     rdx, rax
.text:0000000000005542                 mov     esi, 1
.text:0000000000005547                 pop     rbx
.text:0000000000005548                 pop     rbp
.text:0000000000005549                 pop     r12
.text:000000000000554B                 pop     r13
.text:000000000000554D                 pop     r14
.text:000000000000554F                 pop     r15
.text:0000000000005551                 xor     eax, eax
.text:0000000000005553                 jmp     ___fprintf_chk
.text:0000000000005553 ; ---------------------------------------------------------------------------
.text:0000000000005558                 align 20h
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005560                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:0000000000005560                 mov     r13, [rbx+10h]  ; jumptable 00000000000053C4 case 3
.text:0000000000005564                 mov     r12, [rbx+8]
.text:0000000000005568                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000556F                 mov     rbx, [rbx]
.text:0000000000005572                 mov     edx, 5          ; category
.text:0000000000005577                 xor     edi, edi        ; domainname
.text:0000000000005579                 call    _dcgettext
.text:000000000000557E                 add     rsp, 28h
.text:0000000000005582                 mov     r9, r13
.text:0000000000005585                 mov     r8, r12
.text:0000000000005588                 mov     rcx, rbx
.text:000000000000558B                 mov     rdi, rbp
.text:000000000000558E                 mov     rdx, rax
.text:0000000000005591                 pop     rbx
.text:0000000000005592                 pop     rbp
.text:0000000000005593                 pop     r12
.text:0000000000005595                 pop     r13
.text:0000000000005597                 pop     r14
.text:0000000000005599                 pop     r15
.text:000000000000559B                 mov     esi, 1
.text:00000000000055A0                 xor     eax, eax
.text:00000000000055A2                 jmp     ___fprintf_chk
.text:00000000000055A2 ; ---------------------------------------------------------------------------
.text:00000000000055A7                 align 10h
.text:00000000000055B0
.text:00000000000055B0 loc_55B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000055B0                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:00000000000055B0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000053C4 case 4
.text:00000000000055B7                 mov     edx, 5          ; category
.text:00000000000055BC                 xor     edi, edi        ; domainname
.text:00000000000055BE                 mov     r14, [rbx+18h]
.text:00000000000055C2                 mov     r13, [rbx+10h]
.text:00000000000055C6                 mov     r12, [rbx+8]
.text:00000000000055CA                 mov     rbx, [rbx]
.text:00000000000055CD                 call    _dcgettext
.text:00000000000055D2                 sub     rsp, 8
.text:00000000000055D6
.text:00000000000055D6 loc_55D6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000055D6                 push    r14
.text:00000000000055D8                 mov     rdx, rax
.text:00000000000055DB                 mov     r9, r13
.text:00000000000055DE                 mov     r8, r12
.text:00000000000055E1                 mov     rcx, rbx
.text:00000000000055E4                 mov     rdi, rbp
.text:00000000000055E7                 mov     esi, 1
.text:00000000000055EC                 xor     eax, eax
.text:00000000000055EE                 call    ___fprintf_chk
.text:00000000000055F3                 pop     rax
.text:00000000000055F4                 pop     rdx
.text:00000000000055F5                 add     rsp, 28h
.text:00000000000055F9                 pop     rbx
.text:00000000000055FA                 pop     rbp
.text:00000000000055FB                 pop     r12
.text:00000000000055FD                 pop     r13
.text:00000000000055FF                 pop     r14
.text:0000000000005601                 pop     r15
.text:0000000000005603                 retn
.text:0000000000005603 ; ---------------------------------------------------------------------------
.text:0000000000005604                 align 8
.text:0000000000005608
.text:0000000000005608 loc_5608:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005608                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:0000000000005608                 mov     r15, [rbx+20h]  ; jumptable 00000000000053C4 case 5
.text:000000000000560C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005613                 mov     edx, 5          ; category
.text:0000000000005618                 xor     edi, edi        ; domainname
.text:000000000000561A                 mov     r14, [rbx+18h]
.text:000000000000561E                 mov     r13, [rbx+10h]
.text:0000000000005622                 mov     r12, [rbx+8]
.text:0000000000005626                 mov     rbx, [rbx]
.text:0000000000005629                 call    _dcgettext
.text:000000000000562E                 push    r15
.text:0000000000005630                 jmp     short loc_55D6
.text:0000000000005630 ; ---------------------------------------------------------------------------
.text:0000000000005632                 align 8
.text:0000000000005638
.text:0000000000005638 loc_5638:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005638                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:0000000000005638                 mov     r8, [rbx+8]     ; jumptable 00000000000053C4 case 6
.text:000000000000563C                 mov     r12, [rbx+28h]
.text:0000000000005640                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005647                 mov     r15, [rbx+20h]
.text:000000000000564B                 mov     r14, [rbx+18h]
.text:000000000000564F                 mov     edx, 5          ; category
.text:0000000000005654                 mov     r13, [rbx+10h]
.text:0000000000005658                 xor     edi, edi        ; domainname
.text:000000000000565A                 mov     rbx, [rbx]
.text:000000000000565D                 mov     [rsp+58h+var_58], r8
.text:0000000000005661                 call    _dcgettext
.text:0000000000005666                 sub     rsp, 8
.text:000000000000566A                 mov     r9, r13
.text:000000000000566D                 push    r12
.text:000000000000566F                 push    r15
.text:0000000000005671                 push    r14
.text:0000000000005673
.text:0000000000005673 loc_5673:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000005673                 mov     r8, [rsp+78h+var_58]
.text:0000000000005678                 mov     rcx, rbx
.text:000000000000567B                 mov     rdx, rax
.text:000000000000567E                 mov     rdi, rbp
.text:0000000000005681                 mov     esi, 1
.text:0000000000005686                 xor     eax, eax
.text:0000000000005688                 call    ___fprintf_chk
.text:000000000000568D                 add     rsp, 20h
.text:0000000000005691                 add     rsp, 28h
.text:0000000000005695                 pop     rbx
.text:0000000000005696                 pop     rbp
.text:0000000000005697                 pop     r12
.text:0000000000005699                 pop     r13
.text:000000000000569B                 pop     r14
.text:000000000000569D                 pop     r15
.text:000000000000569F                 retn
.text:00000000000056A0 ; ---------------------------------------------------------------------------
.text:00000000000056A0
.text:00000000000056A0 loc_56A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000056A0                                         ; DATA XREF: .rodata:jpt_53C4↓o
.text:00000000000056A0                 mov     r9, [rbx+10h]   ; jumptable 00000000000053C4 case 7
.text:00000000000056A4                 mov     r13, [rbx+30h]
.text:00000000000056A8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000056AF                 mov     r12, [rbx+28h]
.text:00000000000056B3                 mov     r15, [rbx+20h]
.text:00000000000056B7                 mov     edx, 5          ; category
.text:00000000000056BC                 mov     r14, [rbx+18h]
.text:00000000000056C0                 mov     r8, [rbx+8]
.text:00000000000056C4                 xor     edi, edi        ; domainname
.text:00000000000056C6                 mov     [rsp+58h+var_50], r9
.text:00000000000056CB                 mov     rbx, [rbx]
.text:00000000000056CE                 mov     [rsp+58h+var_58], r8
.text:00000000000056D2                 call    _dcgettext
.text:00000000000056D7                 push    r13
.text:00000000000056D9                 push    r12
.text:00000000000056DB                 push    r15
.text:00000000000056DD                 push    r14
.text:00000000000056DF                 mov     r9, [rsp+78h+var_50]
.text:00000000000056E4                 jmp     short loc_5673
.text:00000000000056E4 ; ---------------------------------------------------------------------------
.text:00000000000056E6                 align 10h
.text:00000000000056F0
.text:00000000000056F0 def_53C4:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000056F0                 mov     r10, [rbx+40h]  ; jumptable 00000000000053C4 default case
.text:00000000000056F4                 mov     r9, [rbx+38h]
.text:00000000000056F8                 mov     edx, 5
.text:00000000000056FD                 mov     rax, [rbx+10h]
.text:0000000000005701                 mov     r8, [rbx+8]
.text:0000000000005705                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000570C                 mov     r13, [rbx+30h]
.text:0000000000005710                 mov     r12, [rbx+28h]
.text:0000000000005714                 mov     r15, [rbx+20h]
.text:0000000000005718                 mov     r14, [rbx+18h]
.text:000000000000571C                 mov     [rsp+58h+var_40], r10
.text:0000000000005721                 mov     [rsp+58h+var_48], r9
.text:0000000000005726                 mov     [rsp+58h+var_58], rax
.text:000000000000572A                 mov     [rsp+58h+var_50], r8
.text:000000000000572F                 mov     rbx, [rbx]
.text:0000000000005732                 jmp     loc_54C2
.text:0000000000005732 ; } // starts at 5320
.text:0000000000005732 version_etc_arn endp
.text:0000000000005732
.text:0000000000005732 ; ---------------------------------------------------------------------------
.text:0000000000005737                 align 20h
.text:0000000000005740
.text:0000000000005740 ; =============== S U B R O U T I N E =======================================
.text:0000000000005740
.text:0000000000005740 ; Attributes: info_from_lumina
.text:0000000000005740
.text:0000000000005740 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005740                 public version_etc_ar
.text:0000000000005740 version_etc_ar  proc near
.text:0000000000005740 ; __unwind {
.text:0000000000005740                 xor     r9d, r9d
.text:0000000000005743                 cmp     qword ptr [r8], 0
.text:0000000000005747                 jz      short loc_575B
.text:0000000000005749                 nop     dword ptr [rax+00000000h]
.text:0000000000005750
.text:0000000000005750 loc_5750:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005750                 add     r9, 1
.text:0000000000005754                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005759                 jnz     short loc_5750
.text:000000000000575B
.text:000000000000575B loc_575B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000575B                 jmp     version_etc_arn
.text:000000000000575B ; } // starts at 5740
.text:000000000000575B version_etc_ar  endp
.text:000000000000575B
.text:0000000000005760
.text:0000000000005760 ; =============== S U B R O U T I N E =======================================
.text:0000000000005760
.text:0000000000005760 ; Attributes: info_from_lumina
.text:0000000000005760
.text:0000000000005760 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005760                 public version_etc_va
.text:0000000000005760 version_etc_va  proc near
.text:0000000000005760
.text:0000000000005760 authtab         = qword ptr -68h
.text:0000000000005760 var_10          = qword ptr -10h
.text:0000000000005760
.text:0000000000005760 ; __unwind {
.text:0000000000005760                 sub     rsp, 68h
.text:0000000000005764                 mov     r10, r8
.text:0000000000005767                 xor     r9d, r9d
.text:000000000000576A                 mov     rax, fs:28h
.text:0000000000005773                 mov     [rsp+68h+var_10], rax
.text:0000000000005778                 xor     eax, eax
.text:000000000000577A                 mov     r8, rsp
.text:000000000000577D                 nop     dword ptr [rax]
.text:0000000000005780
.text:0000000000005780 loc_5780:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005780                 mov     eax, [r10]
.text:0000000000005783                 cmp     eax, 2Fh ; '/'
.text:0000000000005786                 ja      short loc_57CA
.text:0000000000005788                 mov     r11d, eax
.text:000000000000578B                 add     r11, [r10+10h]
.text:000000000000578F                 add     eax, 8
.text:0000000000005792                 mov     [r10], eax
.text:0000000000005795
.text:0000000000005795 loc_5795:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005795                 mov     rax, [r11]
.text:0000000000005798                 test    rax, rax
.text:000000000000579B                 mov     [r8+r9*8], rax
.text:000000000000579F                 jz      short loc_57AB
.text:00000000000057A1                 add     r9, 1
.text:00000000000057A5                 cmp     r9, 0Ah
.text:00000000000057A9                 jnz     short loc_5780
.text:00000000000057AB
.text:00000000000057AB loc_57AB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000057AB                 call    version_etc_arn
.text:00000000000057B0                 mov     rax, [rsp+68h+var_10]
.text:00000000000057B5                 xor     rax, fs:28h
.text:00000000000057BE                 jnz     short loc_57C5
.text:00000000000057C0                 add     rsp, 68h
.text:00000000000057C4                 retn
.text:00000000000057C5 ; ---------------------------------------------------------------------------
.text:00000000000057C5
.text:00000000000057C5 loc_57C5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000057C5                 call    ___stack_chk_fail
.text:00000000000057CA ; ---------------------------------------------------------------------------
.text:00000000000057CA
.text:00000000000057CA loc_57CA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000057CA                 mov     r11, [r10+8]
.text:00000000000057CE                 lea     rax, [r11+8]
.text:00000000000057D2                 mov     [r10+8], rax
.text:00000000000057D6                 jmp     short loc_5795
.text:00000000000057D6 ; } // starts at 5760
.text:00000000000057D6 version_etc_va  endp
.text:00000000000057D6
.text:00000000000057D6 ; ---------------------------------------------------------------------------
.text:00000000000057D8                 align 20h
.text:00000000000057E0
.text:00000000000057E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057E0
.text:00000000000057E0 ; Attributes: info_from_lumina
.text:00000000000057E0
.text:00000000000057E0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000057E0                 public version_etc
.text:00000000000057E0 version_etc     proc near               ; CODE XREF: main+123↑p
.text:00000000000057E0
.text:00000000000057E0 var_C0          = dword ptr -0C0h
.text:00000000000057E0 var_B8          = qword ptr -0B8h
.text:00000000000057E0 var_B0          = qword ptr -0B0h
.text:00000000000057E0 var_A8          = byte ptr -0A8h
.text:00000000000057E0 var_50          = qword ptr -50h
.text:00000000000057E0 var_48          = byte ptr -48h
.text:00000000000057E0 var_28          = qword ptr -28h
.text:00000000000057E0 var_20          = qword ptr -20h
.text:00000000000057E0 arg_0           = byte ptr  8
.text:00000000000057E0
.text:00000000000057E0 ; __unwind {
.text:00000000000057E0                 push    rbp
.text:00000000000057E1                 push    rbx
.text:00000000000057E2                 mov     r10d, 20h ; ' '
.text:00000000000057E8                 xor     r11d, r11d
.text:00000000000057EB                 sub     rsp, 0B8h
.text:00000000000057F2                 mov     rax, fs:28h
.text:00000000000057FB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005800                 xor     eax, eax
.text:0000000000005802                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000580A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005812                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000581A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000581F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005827                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000582F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005834                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000583C                 xor     r9d, r9d
.text:000000000000583F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005844                 mov     rbp, rax
.text:0000000000005847                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005850
.text:0000000000005850 loc_5850:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005850                 cmp     r10d, 2Fh ; '/'
.text:0000000000005854                 ja      short loc_58AC
.text:0000000000005856                 mov     eax, r10d
.text:0000000000005859                 mov     r11d, 1
.text:000000000000585F                 add     r10d, 8
.text:0000000000005863                 add     rax, rbp
.text:0000000000005866
.text:0000000000005866 loc_5866:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005866                 mov     rax, [rax]
.text:0000000000005869                 test    rax, rax
.text:000000000000586C                 mov     [r8+r9*8], rax
.text:0000000000005870                 jz      short loc_587C
.text:0000000000005872                 add     r9, 1
.text:0000000000005876                 cmp     r9, 0Ah
.text:000000000000587A                 jnz     short loc_5850
.text:000000000000587C
.text:000000000000587C loc_587C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000587C                 test    r11b, r11b
.text:000000000000587F                 jnz     short loc_58A5
.text:0000000000005881
.text:0000000000005881 loc_5881:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005881                 call    version_etc_arn
.text:0000000000005886                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000588B                 xor     rax, fs:28h
.text:0000000000005894                 jnz     short loc_58A0
.text:0000000000005896                 add     rsp, 0B8h
.text:000000000000589D                 pop     rbx
.text:000000000000589E                 pop     rbp
.text:000000000000589F                 retn
.text:00000000000058A0 ; ---------------------------------------------------------------------------
.text:00000000000058A0
.text:00000000000058A0 loc_58A0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000058A0                 call    ___stack_chk_fail
.text:00000000000058A5 ; ---------------------------------------------------------------------------
.text:00000000000058A5
.text:00000000000058A5 loc_58A5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000058A5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000058AA                 jmp     short loc_5881
.text:00000000000058AC ; ---------------------------------------------------------------------------
.text:00000000000058AC
.text:00000000000058AC loc_58AC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000058AC                 mov     rax, rbx
.text:00000000000058AF                 add     rbx, 8
.text:00000000000058B3                 jmp     short loc_5866
.text:00000000000058B3 ; } // starts at 57E0
.text:00000000000058B3 version_etc     endp
.text:00000000000058B3
.text:00000000000058B3 ; ---------------------------------------------------------------------------
.text:00000000000058B5                 align 20h
.text:00000000000058C0
.text:00000000000058C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058C0
.text:00000000000058C0 ; Attributes: info_from_lumina
.text:00000000000058C0
.text:00000000000058C0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000058C0                 public emit_bug_reporting_address
.text:00000000000058C0 emit_bug_reporting_address proc near
.text:00000000000058C0 ; __unwind {
.text:00000000000058C0                 push    rbx
.text:00000000000058C1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000058C8                 mov     edx, 5          ; category
.text:00000000000058CD                 xor     edi, edi        ; domainname
.text:00000000000058CF                 call    _dcgettext
.text:00000000000058D4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000058DB                 mov     rsi, rax
.text:00000000000058DE                 mov     edi, 1
.text:00000000000058E3                 xor     eax, eax
.text:00000000000058E5                 call    ___printf_chk
.text:00000000000058EA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000058F1                 mov     edx, 5          ; category
.text:00000000000058F6                 xor     edi, edi        ; domainname
.text:00000000000058F8                 call    _dcgettext
.text:00000000000058FD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005904                 lea     rdx, unk_87C0
.text:000000000000590B                 mov     rsi, rax
.text:000000000000590E                 mov     edi, 1
.text:0000000000005913                 xor     eax, eax
.text:0000000000005915                 call    ___printf_chk
.text:000000000000591A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005921                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005928                 xor     edi, edi        ; domainname
.text:000000000000592A                 mov     edx, 5          ; category
.text:000000000000592F                 call    _dcgettext
.text:0000000000005934                 mov     rsi, rbx        ; stream
.text:0000000000005937                 mov     rdi, rax        ; s
.text:000000000000593A                 pop     rbx
.text:000000000000593B                 jmp     _fputs_unlocked
.text:000000000000593B ; } // starts at 58C0
.text:000000000000593B emit_bug_reporting_address endp
.text:000000000000593B
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940
.text:0000000000005940                 public xmalloc
.text:0000000000005940 xmalloc         proc near               ; CODE XREF: mode_compile+7B↑p
.text:0000000000005940                                         ; mode_compile+34A↑p ...
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 push    rbx
.text:0000000000005941                 mov     rbx, rdi
.text:0000000000005944                 call    _malloc
.text:0000000000005949                 test    rax, rax
.text:000000000000594C                 jnz     short loc_5953
.text:000000000000594E                 test    rbx, rbx
.text:0000000000005951                 jnz     short loc_5955
.text:0000000000005953
.text:0000000000005953 loc_5953:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005953                 pop     rbx
.text:0000000000005954                 retn
.text:0000000000005955 ; ---------------------------------------------------------------------------
.text:0000000000005955
.text:0000000000005955 loc_5955:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005955                 call    xalloc_die
.text:0000000000005955 ; } // starts at 5940
.text:0000000000005955 xmalloc         endp
.text:0000000000005955
.text:0000000000005955 ; ---------------------------------------------------------------------------
.text:000000000000595A                 align 20h
.text:0000000000005960
.text:0000000000005960 ; =============== S U B R O U T I N E =======================================
.text:0000000000005960
.text:0000000000005960 ; Attributes: info_from_lumina
.text:0000000000005960
.text:0000000000005960 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005960                 public xnmalloc
.text:0000000000005960 xnmalloc        proc near
.text:0000000000005960 ; __unwind {
.text:0000000000005960                 mov     rax, rdi
.text:0000000000005963                 mul     rsi
.text:0000000000005966                 mov     rdi, rax
.text:0000000000005969                 seto    al
.text:000000000000596C                 test    rdi, rdi
.text:000000000000596F                 js      short loc_597B
.text:0000000000005971                 movzx   eax, al
.text:0000000000005974                 test    rax, rax
.text:0000000000005977                 jnz     short loc_597B
.text:0000000000005979                 jmp     short xmalloc
.text:000000000000597B ; ---------------------------------------------------------------------------
.text:000000000000597B
.text:000000000000597B loc_597B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000597B                                         ; xnmalloc+17↑j
.text:000000000000597B                 sub     rsp, 8
.text:000000000000597F                 call    xalloc_die
.text:000000000000597F ; } // starts at 5960
.text:000000000000597F xnmalloc        endp
.text:000000000000597F
.text:000000000000597F ; ---------------------------------------------------------------------------
.text:0000000000005984                 align 10h
.text:0000000000005990
.text:0000000000005990 ; =============== S U B R O U T I N E =======================================
.text:0000000000005990
.text:0000000000005990
.text:0000000000005990                 public xcharalloc
.text:0000000000005990 xcharalloc      proc near
.text:0000000000005990 ; __unwind {
.text:0000000000005990                 jmp     short xmalloc
.text:0000000000005990 ; } // starts at 5990
.text:0000000000005990 xcharalloc      endp
.text:0000000000005990
.text:0000000000005990 ; ---------------------------------------------------------------------------
.text:0000000000005992                 align 20h
.text:00000000000059A0
.text:00000000000059A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059A0
.text:00000000000059A0 ; Attributes: info_from_lumina
.text:00000000000059A0
.text:00000000000059A0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000059A0                 public xrealloc
.text:00000000000059A0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000059A0                                         ; quotearg_n_options+182↑p ...
.text:00000000000059A0 ; __unwind {
.text:00000000000059A0                 test    rsi, rsi
.text:00000000000059A3                 push    rbx
.text:00000000000059A4                 mov     rbx, rsi
.text:00000000000059A7                 jnz     short loc_59AE
.text:00000000000059A9                 test    rdi, rdi
.text:00000000000059AC                 jnz     short loc_59C8
.text:00000000000059AE
.text:00000000000059AE loc_59AE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000059AE                 mov     rsi, rbx        ; size
.text:00000000000059B1                 call    _realloc
.text:00000000000059B6                 test    rax, rax
.text:00000000000059B9                 jnz     short loc_59C0
.text:00000000000059BB                 test    rbx, rbx
.text:00000000000059BE                 jnz     short loc_59D1
.text:00000000000059C0
.text:00000000000059C0 loc_59C0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000059C0                 pop     rbx
.text:00000000000059C1                 retn
.text:00000000000059C1 ; ---------------------------------------------------------------------------
.text:00000000000059C2                 align 8
.text:00000000000059C8
.text:00000000000059C8 loc_59C8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000059C8                 call    _free
.text:00000000000059CD                 xor     eax, eax
.text:00000000000059CF                 pop     rbx
.text:00000000000059D0                 retn
.text:00000000000059D1 ; ---------------------------------------------------------------------------
.text:00000000000059D1
.text:00000000000059D1 loc_59D1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000059D1                 call    xalloc_die
.text:00000000000059D1 ; } // starts at 59A0
.text:00000000000059D1 xrealloc        endp
.text:00000000000059D1
.text:00000000000059D1 ; ---------------------------------------------------------------------------
.text:00000000000059D6                 align 20h
.text:00000000000059E0
.text:00000000000059E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059E0
.text:00000000000059E0 ; Attributes: info_from_lumina
.text:00000000000059E0
.text:00000000000059E0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000059E0                 public xnrealloc
.text:00000000000059E0 xnrealloc       proc near
.text:00000000000059E0 ; __unwind {
.text:00000000000059E0                 mov     rax, rsi
.text:00000000000059E3                 mul     rdx
.text:00000000000059E6                 mov     rsi, rax
.text:00000000000059E9                 seto    al
.text:00000000000059EC                 test    rsi, rsi
.text:00000000000059EF                 js      short loc_59FB
.text:00000000000059F1                 movzx   eax, al
.text:00000000000059F4                 test    rax, rax
.text:00000000000059F7                 jnz     short loc_59FB
.text:00000000000059F9                 jmp     short xrealloc
.text:00000000000059FB ; ---------------------------------------------------------------------------
.text:00000000000059FB
.text:00000000000059FB loc_59FB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000059FB                                         ; xnrealloc+17↑j
.text:00000000000059FB                 sub     rsp, 8
.text:00000000000059FF                 call    xalloc_die
.text:00000000000059FF ; } // starts at 59E0
.text:00000000000059FF xnrealloc       endp
.text:00000000000059FF
.text:00000000000059FF ; ---------------------------------------------------------------------------
.text:0000000000005A04                 align 10h
.text:0000000000005A10
.text:0000000000005A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A10
.text:0000000000005A10 ; Attributes: info_from_lumina
.text:0000000000005A10
.text:0000000000005A10 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005A10                 public x2nrealloc
.text:0000000000005A10 x2nrealloc      proc near
.text:0000000000005A10 ; __unwind {
.text:0000000000005A10                 test    rdi, rdi
.text:0000000000005A13                 mov     r9, rdx
.text:0000000000005A16                 mov     rcx, [rsi]
.text:0000000000005A19                 jz      short loc_5A50
.text:0000000000005A1B                 xor     edx, edx
.text:0000000000005A1D                 mov     rax, 5555555555555554h
.text:0000000000005A27                 div     r9
.text:0000000000005A2A                 cmp     rax, rcx
.text:0000000000005A2D                 jbe     short loc_5A6B
.text:0000000000005A2F                 mov     rax, rcx
.text:0000000000005A32                 shr     rax, 1
.text:0000000000005A35                 lea     rcx, [rax+rcx+1]
.text:0000000000005A3A
.text:0000000000005A3A loc_5A3A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000005A3A                 mov     [rsi], rcx
.text:0000000000005A3D                 imul    rcx, r9
.text:0000000000005A41                 mov     rsi, rcx
.text:0000000000005A44                 jmp     xrealloc
.text:0000000000005A44 ; ---------------------------------------------------------------------------
.text:0000000000005A49                 align 10h
.text:0000000000005A50
.text:0000000000005A50 loc_5A50:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005A50                 test    rcx, rcx
.text:0000000000005A53                 jz      short loc_5A78
.text:0000000000005A55
.text:0000000000005A55 loc_5A55:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005A55                 mov     rax, rcx
.text:0000000000005A58                 mul     r9
.text:0000000000005A5B                 seto    dl
.text:0000000000005A5E                 test    rax, rax
.text:0000000000005A61                 movzx   edx, dl
.text:0000000000005A64                 js      short loc_5A6B
.text:0000000000005A66                 test    rdx, rdx
.text:0000000000005A69                 jz      short loc_5A3A
.text:0000000000005A6B
.text:0000000000005A6B loc_5A6B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000005A6B                                         ; x2nrealloc+54↑j
.text:0000000000005A6B                 sub     rsp, 8
.text:0000000000005A6F                 call    xalloc_die
.text:0000000000005A6F ; ---------------------------------------------------------------------------
.text:0000000000005A74                 align 8
.text:0000000000005A78
.text:0000000000005A78 loc_5A78:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005A78                 xor     edx, edx
.text:0000000000005A7A                 mov     eax, 80h
.text:0000000000005A7F                 xor     r8d, r8d
.text:0000000000005A82                 div     r9
.text:0000000000005A85                 test    rax, rax
.text:0000000000005A88                 setz    r8b
.text:0000000000005A8C                 lea     rcx, [r8+rax]
.text:0000000000005A90                 jmp     short loc_5A55
.text:0000000000005A90 ; } // starts at 5A10
.text:0000000000005A90 x2nrealloc      endp
.text:0000000000005A90
.text:0000000000005A90 ; ---------------------------------------------------------------------------
.text:0000000000005A92                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0 ; Attributes: info_from_lumina
.text:0000000000005AA0
.text:0000000000005AA0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005AA0                 public x2realloc
.text:0000000000005AA0 x2realloc       proc near
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 test    rdi, rdi
.text:0000000000005AA3                 mov     rax, [rsi]
.text:0000000000005AA6                 jz      short loc_5AD0
.text:0000000000005AA8                 mov     rdx, 5555555555555553h
.text:0000000000005AB2                 cmp     rax, rdx
.text:0000000000005AB5                 ja      short loc_5AE1
.text:0000000000005AB7                 mov     rdx, rax
.text:0000000000005ABA                 shr     rdx, 1
.text:0000000000005ABD                 lea     rax, [rdx+rax+1]
.text:0000000000005AC2
.text:0000000000005AC2 loc_5AC2:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005AC2                 mov     [rsi], rax
.text:0000000000005AC5                 mov     rsi, rax
.text:0000000000005AC8                 jmp     xrealloc
.text:0000000000005AC8 ; ---------------------------------------------------------------------------
.text:0000000000005ACD                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 loc_5AD0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005AD0                 test    rax, rax
.text:0000000000005AD3                 mov     edx, 80h
.text:0000000000005AD8                 cmovz   rax, rdx
.text:0000000000005ADC                 test    rax, rax
.text:0000000000005ADF                 jns     short loc_5AC2
.text:0000000000005AE1
.text:0000000000005AE1 loc_5AE1:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005AE1                 sub     rsp, 8
.text:0000000000005AE5                 call    xalloc_die
.text:0000000000005AE5 ; } // starts at 5AA0
.text:0000000000005AE5 x2realloc       endp
.text:0000000000005AE5
.text:0000000000005AE5 ; ---------------------------------------------------------------------------
.text:0000000000005AEA                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0
.text:0000000000005AF0 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005AF0                 public xzalloc
.text:0000000000005AF0 xzalloc         proc near
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 push    rbx
.text:0000000000005AF1                 mov     rbx, rdi
.text:0000000000005AF4                 call    xmalloc
.text:0000000000005AF9                 mov     rdx, rbx        ; n
.text:0000000000005AFC                 xor     esi, esi        ; c
.text:0000000000005AFE                 mov     rdi, rax        ; s
.text:0000000000005B01                 pop     rbx
.text:0000000000005B02                 jmp     _memset
.text:0000000000005B02 ; } // starts at 5AF0
.text:0000000000005B02 xzalloc         endp
.text:0000000000005B02
.text:0000000000005B02 ; ---------------------------------------------------------------------------
.text:0000000000005B07                 align 10h
.text:0000000000005B10
.text:0000000000005B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B10
.text:0000000000005B10 ; Attributes: info_from_lumina
.text:0000000000005B10
.text:0000000000005B10 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005B10                 public xcalloc
.text:0000000000005B10 xcalloc         proc near
.text:0000000000005B10 ; __unwind {
.text:0000000000005B10                 mov     rax, rdi
.text:0000000000005B13                 sub     rsp, 8
.text:0000000000005B17                 mul     rsi
.text:0000000000005B1A                 seto    dl
.text:0000000000005B1D                 test    rax, rax
.text:0000000000005B20                 js      short loc_5B39
.text:0000000000005B22                 movzx   edx, dl
.text:0000000000005B25                 test    rdx, rdx
.text:0000000000005B28                 jnz     short loc_5B39
.text:0000000000005B2A                 call    _calloc
.text:0000000000005B2F                 test    rax, rax
.text:0000000000005B32                 jz      short loc_5B39
.text:0000000000005B34                 add     rsp, 8
.text:0000000000005B38                 retn
.text:0000000000005B39 ; ---------------------------------------------------------------------------
.text:0000000000005B39
.text:0000000000005B39 loc_5B39:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005B39                                         ; xcalloc+18↑j ...
.text:0000000000005B39                 call    xalloc_die
.text:0000000000005B39 ; } // starts at 5B10
.text:0000000000005B39 xcalloc         endp
.text:0000000000005B39
.text:0000000000005B39 ; ---------------------------------------------------------------------------
.text:0000000000005B3E                 align 20h
.text:0000000000005B40
.text:0000000000005B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B40
.text:0000000000005B40 ; Attributes: info_from_lumina
.text:0000000000005B40
.text:0000000000005B40 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005B40                 public xmemdup
.text:0000000000005B40 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005B40                                         ; xstrdup+11↓j
.text:0000000000005B40 ; __unwind {
.text:0000000000005B40                 push    rbp
.text:0000000000005B41                 push    rbx
.text:0000000000005B42                 mov     rbp, rdi
.text:0000000000005B45                 mov     rdi, rsi
.text:0000000000005B48                 mov     rbx, rsi
.text:0000000000005B4B                 sub     rsp, 8
.text:0000000000005B4F                 call    xmalloc
.text:0000000000005B54                 add     rsp, 8
.text:0000000000005B58                 mov     rdx, rbx        ; n
.text:0000000000005B5B                 mov     rsi, rbp        ; src
.text:0000000000005B5E                 pop     rbx
.text:0000000000005B5F                 pop     rbp
.text:0000000000005B60                 mov     rdi, rax        ; dest
.text:0000000000005B63                 jmp     _memcpy
.text:0000000000005B63 ; } // starts at 5B40
.text:0000000000005B63 xmemdup         endp
.text:0000000000005B63
.text:0000000000005B63 ; ---------------------------------------------------------------------------
.text:0000000000005B68                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70
.text:0000000000005B70 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005B70                 public xstrdup
.text:0000000000005B70 xstrdup         proc near
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 push    rbx
.text:0000000000005B71                 mov     rbx, rdi
.text:0000000000005B74                 call    _strlen
.text:0000000000005B79                 mov     rdi, rbx        ; src
.text:0000000000005B7C                 lea     rsi, [rax+1]    ; n
.text:0000000000005B80                 pop     rbx
.text:0000000000005B81                 jmp     short xmemdup
.text:0000000000005B81 ; } // starts at 5B70
.text:0000000000005B81 xstrdup         endp
.text:0000000000005B81
.text:0000000000005B81 ; ---------------------------------------------------------------------------
.text:0000000000005B83                 align 10h
.text:0000000000005B90
.text:0000000000005B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B90
.text:0000000000005B90 ; Attributes: noreturn info_from_lumina
.text:0000000000005B90
.text:0000000000005B90 ; void __cdecl xalloc_die()
.text:0000000000005B90                 public xalloc_die
.text:0000000000005B90 xalloc_die      proc near               ; CODE XREF: mode_compile:loc_2D69↑p
.text:0000000000005B90                                         ; quotearg_n_options:loc_4516↑p ...
.text:0000000000005B90 ; __unwind {
.text:0000000000005B90                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005B97                 sub     rsp, 8
.text:0000000000005B9B                 mov     edx, 5          ; category
.text:0000000000005BA0                 xor     edi, edi        ; domainname
.text:0000000000005BA2                 call    _dcgettext
.text:0000000000005BA7                 mov     edi, cs:exit_failure ; status
.text:0000000000005BAD                 lea     rdx, format+4   ; format
.text:0000000000005BB4                 mov     rcx, rax
.text:0000000000005BB7                 xor     esi, esi        ; errnum
.text:0000000000005BB9                 xor     eax, eax
.text:0000000000005BBB                 call    _error
.text:0000000000005BC0                 call    _abort
.text:0000000000005BC0 ; } // starts at 5B90
.text:0000000000005BC0 xalloc_die      endp
.text:0000000000005BC0
.text:0000000000005BC0 ; ---------------------------------------------------------------------------
.text:0000000000005BC5                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BD0
.text:0000000000005BD0 ; Attributes: info_from_lumina
.text:0000000000005BD0
.text:0000000000005BD0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005BD0                 public rpl_mbrtowc
.text:0000000000005BD0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005BD0
.text:0000000000005BD0 pwc             = dword ptr -34h
.text:0000000000005BD0 var_30          = qword ptr -30h
.text:0000000000005BD0
.text:0000000000005BD0 ; __unwind {
.text:0000000000005BD0                 push    r13
.text:0000000000005BD2                 push    r12
.text:0000000000005BD4                 mov     r13, rsi
.text:0000000000005BD7                 push    rbp
.text:0000000000005BD8                 push    rbx
.text:0000000000005BD9                 mov     rbx, rdi
.text:0000000000005BDC                 mov     r12, rdx
.text:0000000000005BDF                 sub     rsp, 18h
.text:0000000000005BE3                 mov     rax, fs:28h
.text:0000000000005BEC                 mov     [rsp+38h+var_30], rax
.text:0000000000005BF1                 xor     eax, eax
.text:0000000000005BF3                 lea     rax, [rsp+38h+pwc]
.text:0000000000005BF8                 test    rdi, rdi
.text:0000000000005BFB                 cmovz   rbx, rax
.text:0000000000005BFF                 mov     rdi, rbx        ; pwc
.text:0000000000005C02                 call    _mbrtowc
.text:0000000000005C07                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005C0B                 mov     rbp, rax
.text:0000000000005C0E                 jbe     short loc_5C30
.text:0000000000005C10                 test    r12, r12
.text:0000000000005C13                 jz      short loc_5C30
.text:0000000000005C15                 xor     edi, edi
.text:0000000000005C17                 call    hard_locale
.text:0000000000005C1C                 test    al, al
.text:0000000000005C1E                 jnz     short loc_5C30
.text:0000000000005C20                 movzx   eax, byte ptr [r13+0]
.text:0000000000005C25                 mov     ebp, 1
.text:0000000000005C2A                 mov     [rbx], eax
.text:0000000000005C2C                 nop     dword ptr [rax+00h]
.text:0000000000005C30
.text:0000000000005C30 loc_5C30:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005C30                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005C30                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005C35                 xor     rdx, fs:28h
.text:0000000000005C3E                 mov     rax, rbp
.text:0000000000005C41                 jnz     short loc_5C4E
.text:0000000000005C43                 add     rsp, 18h
.text:0000000000005C47                 pop     rbx
.text:0000000000005C48                 pop     rbp
.text:0000000000005C49                 pop     r12
.text:0000000000005C4B                 pop     r13
.text:0000000000005C4D                 retn
.text:0000000000005C4E ; ---------------------------------------------------------------------------
.text:0000000000005C4E
.text:0000000000005C4E loc_5C4E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005C4E                 call    ___stack_chk_fail
.text:0000000000005C4E ; } // starts at 5BD0
.text:0000000000005C4E rpl_mbrtowc     endp
.text:0000000000005C4E
.text:0000000000005C4E ; ---------------------------------------------------------------------------
.text:0000000000005C53                 align 20h
.text:0000000000005C60
.text:0000000000005C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C60
.text:0000000000005C60
.text:0000000000005C60 ; __int64 __fastcall rpl_vfprintf(FILE *s)
.text:0000000000005C60                 public rpl_vfprintf
.text:0000000000005C60 rpl_vfprintf    proc near               ; CODE XREF: prog_fprintf+C5↑p
.text:0000000000005C60
.text:0000000000005C60 n               = qword ptr -810h
.text:0000000000005C60 var_808         = byte ptr -808h
.text:0000000000005C60 var_30          = qword ptr -30h
.text:0000000000005C60
.text:0000000000005C60 ; __unwind {
.text:0000000000005C60                 push    r13
.text:0000000000005C62                 push    r12
.text:0000000000005C64                 mov     rax, rsi
.text:0000000000005C67                 push    rbp
.text:0000000000005C68                 push    rbx
.text:0000000000005C69                 mov     r13, rdi
.text:0000000000005C6C                 sub     rsp, 7F8h
.text:0000000000005C73                 lea     r12, [rsp+818h+var_808]
.text:0000000000005C78                 lea     rsi, [rsp+818h+n]
.text:0000000000005C7D                 mov     [rsp+818h+n], 7D0h
.text:0000000000005C86                 mov     rcx, fs:28h
.text:0000000000005C8F                 mov     [rsp+818h+var_30], rcx
.text:0000000000005C97                 xor     ecx, ecx
.text:0000000000005C99                 mov     rdi, r12
.text:0000000000005C9C                 mov     rcx, rdx
.text:0000000000005C9F                 mov     rdx, rax
.text:0000000000005CA2                 call    vasnprintf
.text:0000000000005CA7                 test    rax, rax
.text:0000000000005CAA                 mov     rbx, [rsp+818h+n]
.text:0000000000005CAF                 jz      loc_5D3E
.text:0000000000005CB5                 mov     rcx, r13        ; s
.text:0000000000005CB8                 mov     rdx, rbx        ; n
.text:0000000000005CBB                 mov     esi, 1          ; size
.text:0000000000005CC0                 mov     rdi, rax        ; ptr
.text:0000000000005CC3                 mov     rbp, rax
.text:0000000000005CC6                 call    _fwrite
.text:0000000000005CCB                 cmp     rax, rbx
.text:0000000000005CCE                 jb      short loc_5D10
.text:0000000000005CD0                 cmp     rbp, r12
.text:0000000000005CD3                 jz      short loc_5CDD
.text:0000000000005CD5                 mov     rdi, rbp        ; ptr
.text:0000000000005CD8                 call    _free
.text:0000000000005CDD
.text:0000000000005CDD loc_5CDD:                               ; CODE XREF: rpl_vfprintf+73↑j
.text:0000000000005CDD                 cmp     rbx, 7FFFFFFFh
.text:0000000000005CE4                 ja      short loc_5D33
.text:0000000000005CE6
.text:0000000000005CE6 loc_5CE6:                               ; CODE XREF: rpl_vfprintf+B8↓j
.text:0000000000005CE6                                         ; rpl_vfprintf+D1↓j ...
.text:0000000000005CE6                 mov     rcx, [rsp+818h+var_30]
.text:0000000000005CEE                 xor     rcx, fs:28h
.text:0000000000005CF7                 mov     eax, ebx
.text:0000000000005CF9                 jnz     short loc_5D4D
.text:0000000000005CFB                 add     rsp, 7F8h
.text:0000000000005D02                 pop     rbx
.text:0000000000005D03                 pop     rbp
.text:0000000000005D04                 pop     r12
.text:0000000000005D06                 pop     r13
.text:0000000000005D08                 retn
.text:0000000000005D08 ; ---------------------------------------------------------------------------
.text:0000000000005D09                 align 10h
.text:0000000000005D10
.text:0000000000005D10 loc_5D10:                               ; CODE XREF: rpl_vfprintf+6E↑j
.text:0000000000005D10                 cmp     rbp, r12
.text:0000000000005D13                 mov     ebx, 0FFFFFFFFh
.text:0000000000005D18                 jz      short loc_5CE6
.text:0000000000005D1A                 call    ___errno_location
.text:0000000000005D1F                 mov     r13d, [rax]
.text:0000000000005D22                 mov     r12, rax
.text:0000000000005D25                 mov     rdi, rbp        ; ptr
.text:0000000000005D28                 call    _free
.text:0000000000005D2D                 mov     [r12], r13d
.text:0000000000005D31                 jmp     short loc_5CE6
.text:0000000000005D33 ; ---------------------------------------------------------------------------
.text:0000000000005D33
.text:0000000000005D33 loc_5D33:                               ; CODE XREF: rpl_vfprintf+84↑j
.text:0000000000005D33                 call    ___errno_location
.text:0000000000005D38                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000005D3E
.text:0000000000005D3E loc_5D3E:                               ; CODE XREF: rpl_vfprintf+4F↑j
.text:0000000000005D3E                 mov     rdi, r13
.text:0000000000005D41                 mov     ebx, 0FFFFFFFFh
.text:0000000000005D46                 call    fseterr
.text:0000000000005D4B                 jmp     short loc_5CE6
.text:0000000000005D4D ; ---------------------------------------------------------------------------
.text:0000000000005D4D
.text:0000000000005D4D loc_5D4D:                               ; CODE XREF: rpl_vfprintf+99↑j
.text:0000000000005D4D                 call    ___stack_chk_fail
.text:0000000000005D4D ; } // starts at 5C60
.text:0000000000005D4D rpl_vfprintf    endp
.text:0000000000005D4D
.text:0000000000005D4D ; ---------------------------------------------------------------------------
.text:0000000000005D52                 align 20h
.text:0000000000005D60
.text:0000000000005D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D60
.text:0000000000005D60 ; Attributes: info_from_lumina
.text:0000000000005D60
.text:0000000000005D60 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005D60                 public close_stream
.text:0000000000005D60 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005D60                                         ; close_stdout+33↑p
.text:0000000000005D60 ; __unwind {
.text:0000000000005D60                 push    r12
.text:0000000000005D62                 push    rbp
.text:0000000000005D63                 mov     rbp, rdi
.text:0000000000005D66                 push    rbx
.text:0000000000005D67                 call    ___fpending
.text:0000000000005D6C                 mov     ebx, [rbp+0]
.text:0000000000005D6F                 mov     rdi, rbp        ; stream
.text:0000000000005D72                 mov     r12, rax
.text:0000000000005D75                 call    rpl_fclose
.text:0000000000005D7A                 and     ebx, 20h
.text:0000000000005D7D                 test    ebx, ebx
.text:0000000000005D7F                 jnz     short loc_5D98
.text:0000000000005D81                 test    eax, eax
.text:0000000000005D83                 jz      short loc_5D8F
.text:0000000000005D85                 test    r12, r12
.text:0000000000005D88                 mov     eax, 0FFFFFFFFh
.text:0000000000005D8D                 jz      short loc_5DC8
.text:0000000000005D8F
.text:0000000000005D8F loc_5D8F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000005D8F                 pop     rbx
.text:0000000000005D90                 pop     rbp
.text:0000000000005D91                 pop     r12
.text:0000000000005D93                 retn
.text:0000000000005D93 ; ---------------------------------------------------------------------------
.text:0000000000005D94                 align 8
.text:0000000000005D98
.text:0000000000005D98 loc_5D98:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005D98                 test    eax, eax
.text:0000000000005D9A                 jnz     short loc_5DB8
.text:0000000000005D9C                 call    ___errno_location
.text:0000000000005DA1                 mov     dword ptr [rax], 0
.text:0000000000005DA7                 mov     eax, 0FFFFFFFFh
.text:0000000000005DAC                 pop     rbx
.text:0000000000005DAD                 pop     rbp
.text:0000000000005DAE                 pop     r12
.text:0000000000005DB0                 retn
.text:0000000000005DB0 ; ---------------------------------------------------------------------------
.text:0000000000005DB1                 align 8
.text:0000000000005DB8
.text:0000000000005DB8 loc_5DB8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005DB8                 pop     rbx
.text:0000000000005DB9                 mov     eax, 0FFFFFFFFh
.text:0000000000005DBE                 pop     rbp
.text:0000000000005DBF                 pop     r12
.text:0000000000005DC1                 retn
.text:0000000000005DC1 ; ---------------------------------------------------------------------------
.text:0000000000005DC2                 align 8
.text:0000000000005DC8
.text:0000000000005DC8 loc_5DC8:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005DC8                 call    ___errno_location
.text:0000000000005DCD                 cmp     dword ptr [rax], 9
.text:0000000000005DD0                 pop     rbx
.text:0000000000005DD1                 pop     rbp
.text:0000000000005DD2                 pop     r12
.text:0000000000005DD4                 setnz   al
.text:0000000000005DD7                 movzx   eax, al
.text:0000000000005DDA                 neg     eax
.text:0000000000005DDC                 retn
.text:0000000000005DDC ; } // starts at 5D60
.text:0000000000005DDC close_stream    endp
.text:0000000000005DDC
.text:0000000000005DDC ; ---------------------------------------------------------------------------
.text:0000000000005DDD                 align 20h
.text:0000000000005DE0
.text:0000000000005DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DE0
.text:0000000000005DE0
.text:0000000000005DE0                 public open_safer
.text:0000000000005DE0 open_safer      proc near               ; CODE XREF: savewd_chdir+CA↑p
.text:0000000000005DE0
.text:0000000000005DE0 var_58          = dword ptr -58h
.text:0000000000005DE0 var_50          = qword ptr -50h
.text:0000000000005DE0 var_48          = qword ptr -48h
.text:0000000000005DE0 var_40          = qword ptr -40h
.text:0000000000005DE0 var_38          = byte ptr -38h
.text:0000000000005DE0 var_28          = qword ptr -28h
.text:0000000000005DE0 arg_0           = byte ptr  8
.text:0000000000005DE0
.text:0000000000005DE0 ; __unwind {
.text:0000000000005DE0                 sub     rsp, 58h
.text:0000000000005DE4                 mov     [rsp+58h+var_28], rdx
.text:0000000000005DE9                 xor     edx, edx
.text:0000000000005DEB                 mov     rax, fs:28h
.text:0000000000005DF4                 mov     [rsp+58h+var_40], rax
.text:0000000000005DF9                 xor     eax, eax
.text:0000000000005DFB                 test    sil, 40h
.text:0000000000005DFF                 jnz     short loc_5E28
.text:0000000000005E01
.text:0000000000005E01 loc_5E01:                               ; CODE XREF: open_safer+67↓j
.text:0000000000005E01                 xor     eax, eax
.text:0000000000005E03                 call    _open
.text:0000000000005E08                 mov     edi, eax        ; fd
.text:0000000000005E0A                 call    fd_safer_flag
.text:0000000000005E0F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000005E14                 xor     rcx, fs:28h
.text:0000000000005E1D                 jnz     short loc_5E49
.text:0000000000005E1F                 add     rsp, 58h
.text:0000000000005E23                 retn
.text:0000000000005E23 ; ---------------------------------------------------------------------------
.text:0000000000005E24                 align 8
.text:0000000000005E28
.text:0000000000005E28 loc_5E28:                               ; CODE XREF: open_safer+1F↑j
.text:0000000000005E28                 lea     rax, [rsp+58h+arg_0]
.text:0000000000005E2D                 mov     [rsp+58h+var_58], 10h
.text:0000000000005E34                 mov     edx, dword ptr [rsp+58h+var_28]
.text:0000000000005E38                 mov     [rsp+58h+var_50], rax
.text:0000000000005E3D                 lea     rax, [rsp+58h+var_38]
.text:0000000000005E42                 mov     [rsp+58h+var_48], rax
.text:0000000000005E47                 jmp     short loc_5E01
.text:0000000000005E49 ; ---------------------------------------------------------------------------
.text:0000000000005E49
.text:0000000000005E49 loc_5E49:                               ; CODE XREF: open_safer+3D↑j
.text:0000000000005E49                 call    ___stack_chk_fail
.text:0000000000005E49 ; } // starts at 5DE0
.text:0000000000005E49 open_safer      endp
.text:0000000000005E49
.text:0000000000005E49 ; ---------------------------------------------------------------------------
.text:0000000000005E4E                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50
.text:0000000000005E50                 public hard_locale
.text:0000000000005E50 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 sub     rsp, 8
.text:0000000000005E54                 xor     esi, esi        ; locale
.text:0000000000005E56                 call    _setlocale
.text:0000000000005E5B                 mov     rdx, rax
.text:0000000000005E5E                 mov     eax, 1
.text:0000000000005E63                 test    rdx, rdx
.text:0000000000005E66                 jz      short loc_5E85
.text:0000000000005E68                 lea     rdi, aC         ; "C"
.text:0000000000005E6F                 mov     ecx, 2
.text:0000000000005E74                 mov     rsi, rdx
.text:0000000000005E77                 repe cmpsb
.text:0000000000005E79                 setnbe  cl
.text:0000000000005E7C                 sbb     cl, 0
.text:0000000000005E7F                 xor     eax, eax
.text:0000000000005E81                 test    cl, cl
.text:0000000000005E83                 jnz     short loc_5E90
.text:0000000000005E85
.text:0000000000005E85 loc_5E85:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005E85                 add     rsp, 8
.text:0000000000005E89                 retn
.text:0000000000005E89 ; ---------------------------------------------------------------------------
.text:0000000000005E8A                 align 10h
.text:0000000000005E90
.text:0000000000005E90 loc_5E90:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005E90                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005E97                 mov     ecx, 6
.text:0000000000005E9C                 mov     rsi, rdx
.text:0000000000005E9F                 repe cmpsb
.text:0000000000005EA1                 setnbe  al
.text:0000000000005EA4                 sbb     al, 0
.text:0000000000005EA6                 test    al, al
.text:0000000000005EA8                 setnz   al
.text:0000000000005EAB                 add     rsp, 8
.text:0000000000005EAF                 retn
.text:0000000000005EAF ; } // starts at 5E50
.text:0000000000005EAF hard_locale     endp
.text:0000000000005EAF
.text:0000000000005EB0
.text:0000000000005EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EB0
.text:0000000000005EB0
.text:0000000000005EB0                 public locale_charset
.text:0000000000005EB0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005EB0 ; __unwind {
.text:0000000000005EB0                 sub     rsp, 8
.text:0000000000005EB4                 mov     edi, 0Eh        ; item
.text:0000000000005EB9                 call    _nl_langinfo
.text:0000000000005EBE                 test    rax, rax
.text:0000000000005EC1                 jz      short loc_5EE0
.text:0000000000005EC3                 cmp     byte ptr [rax], 0
.text:0000000000005EC6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000005ECD                 cmovz   rax, rdx
.text:0000000000005ED1                 add     rsp, 8
.text:0000000000005ED5                 retn
.text:0000000000005ED5 ; ---------------------------------------------------------------------------
.text:0000000000005ED6                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 loc_5EE0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005EE0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005EE7                 add     rsp, 8
.text:0000000000005EEB                 retn
.text:0000000000005EEB ; } // starts at 5EB0
.text:0000000000005EEB locale_charset  endp
.text:0000000000005EEB
.text:0000000000005EEB ; ---------------------------------------------------------------------------
.text:0000000000005EEC                 align 10h
.text:0000000000005EF0
.text:0000000000005EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EF0
.text:0000000000005EF0
.text:0000000000005EF0                 public mkancesdirs
.text:0000000000005EF0 mkancesdirs     proc near               ; CODE XREF: make_dir_parents+66↑p
.text:0000000000005EF0
.text:0000000000005EF0 var_50          = qword ptr -50h
.text:0000000000005EF0 var_44          = dword ptr -44h
.text:0000000000005EF0 var_40          = qword ptr -40h
.text:0000000000005EF0
.text:0000000000005EF0 ; __unwind {
.text:0000000000005EF0                 push    r15
.text:0000000000005EF2                 push    r14
.text:0000000000005EF4                 mov     r14, rdx
.text:0000000000005EF7                 push    r13
.text:0000000000005EF9                 push    r12
.text:0000000000005EFB                 mov     r13, rdi
.text:0000000000005EFE                 push    rbp
.text:0000000000005EFF                 push    rbx
.text:0000000000005F00                 mov     rbp, rdi
.text:0000000000005F03                 mov     rbx, rdi
.text:0000000000005F06                 xor     r12d, r12d
.text:0000000000005F09                 sub     rsp, 28h
.text:0000000000005F0D                 mov     [rsp+58h+var_50], rsi
.text:0000000000005F12                 mov     [rsp+58h+var_40], rcx
.text:0000000000005F17                 mov     byte ptr [rsp+58h+var_44], 0
.text:0000000000005F1C                 nop     dword ptr [rax+00h]
.text:0000000000005F20
.text:0000000000005F20 loc_5F20:                               ; CODE XREF: mkancesdirs+5A↓j
.text:0000000000005F20                                         ; mkancesdirs+5F↓j ...
.text:0000000000005F20                 add     rbx, 1
.text:0000000000005F24                 movzx   edx, byte ptr [rbx-1]
.text:0000000000005F28                 test    dl, dl
.text:0000000000005F2A                 jz      loc_5FC8
.text:0000000000005F30
.text:0000000000005F30 loc_5F30:                               ; CODE XREF: mkancesdirs+CB↓j
.text:0000000000005F30                 movzx   eax, byte ptr [rbx]
.text:0000000000005F33                 cmp     al, 2Fh ; '/'
.text:0000000000005F35                 jz      loc_5FE0
.text:0000000000005F3B                 test    al, al
.text:0000000000005F3D                 setnz   al
.text:0000000000005F40                 cmp     dl, 2Fh ; '/'
.text:0000000000005F43                 setz    r15b
.text:0000000000005F47                 and     r15b, al
.text:0000000000005F4A                 jz      short loc_5F20
.text:0000000000005F4C                 test    r12, r12
.text:0000000000005F4F                 jz      short loc_5F20
.text:0000000000005F51                 mov     rax, r12
.text:0000000000005F54                 sub     rax, rbp
.text:0000000000005F57                 cmp     rax, 1
.text:0000000000005F5B                 jz      loc_5FF0
.text:0000000000005F61                 cmp     rax, 2
.text:0000000000005F65                 mov     byte ptr [r12], 0
.text:0000000000005F6A                 jz      loc_6035
.text:0000000000005F70
.text:0000000000005F70 loc_5F70:                               ; CODE XREF: mkancesdirs+10B↓j
.text:0000000000005F70                                         ; mkancesdirs+149↓j ...
.text:0000000000005F70                 mov     rdx, [rsp+58h+var_40]
.text:0000000000005F75                 mov     rsi, rbp
.text:0000000000005F78                 mov     rdi, r13
.text:0000000000005F7B                 call    r14
.text:0000000000005F7E                 test    eax, eax
.text:0000000000005F80                 js      short loc_6000
.text:0000000000005F82                 mov     byte ptr [rsp+58h+var_44], r15b
.text:0000000000005F87                 mov     edx, 1
.text:0000000000005F8C                 xor     r15d, r15d
.text:0000000000005F8F
.text:0000000000005F8F loc_5F8F:                               ; CODE XREF: mkancesdirs+11F↓j
.text:0000000000005F8F                                         ; mkancesdirs+163↓j
.text:0000000000005F8F                 mov     rdi, [rsp+58h+var_50]
.text:0000000000005F94                 xor     ecx, ecx
.text:0000000000005F96                 mov     rsi, rbp
.text:0000000000005F99                 call    savewd_chdir
.text:0000000000005F9E                 cmp     eax, 0FFFFFFFFh
.text:0000000000005FA1                 mov     ebp, eax
.text:0000000000005FA3                 jz      short loc_6018
.text:0000000000005FA5                 test    eax, eax
.text:0000000000005FA7                 mov     byte ptr [r12], 2Fh ; '/'
.text:0000000000005FAC                 jnz     short loc_6018
.text:0000000000005FAE
.text:0000000000005FAE loc_5FAE:                               ; CODE XREF: mkancesdirs+104↓j
.text:0000000000005FAE                 mov     rbp, rbx
.text:0000000000005FB1                 add     rbx, 1
.text:0000000000005FB5                 movzx   edx, byte ptr [rbx-1]
.text:0000000000005FB9                 test    dl, dl
.text:0000000000005FBB                 jnz     loc_5F30
.text:0000000000005FC1                 nop     dword ptr [rax+00000000h]
.text:0000000000005FC8
.text:0000000000005FC8 loc_5FC8:                               ; CODE XREF: mkancesdirs+3A↑j
.text:0000000000005FC8                 mov     rax, rbp
.text:0000000000005FCB                 sub     rax, r13
.text:0000000000005FCE
.text:0000000000005FCE loc_5FCE:                               ; CODE XREF: mkancesdirs+143↓j
.text:0000000000005FCE                 add     rsp, 28h
.text:0000000000005FD2                 pop     rbx
.text:0000000000005FD3                 pop     rbp
.text:0000000000005FD4                 pop     r12
.text:0000000000005FD6                 pop     r13
.text:0000000000005FD8                 pop     r14
.text:0000000000005FDA                 pop     r15
.text:0000000000005FDC                 retn
.text:0000000000005FDC ; ---------------------------------------------------------------------------
.text:0000000000005FDD                 align 20h
.text:0000000000005FE0
.text:0000000000005FE0 loc_5FE0:                               ; CODE XREF: mkancesdirs+45↑j
.text:0000000000005FE0                 cmp     dl, 2Fh ; '/'
.text:0000000000005FE3                 cmovnz  r12, rbx
.text:0000000000005FE7                 jmp     loc_5F20
.text:0000000000005FE7 ; ---------------------------------------------------------------------------
.text:0000000000005FEC                 align 10h
.text:0000000000005FF0
.text:0000000000005FF0 loc_5FF0:                               ; CODE XREF: mkancesdirs+6B↑j
.text:0000000000005FF0                 cmp     byte ptr [rbp+0], 2Eh ; '.'
.text:0000000000005FF4                 jz      short loc_5FAE
.text:0000000000005FF6                 mov     byte ptr [r12], 0
.text:0000000000005FFB                 jmp     loc_5F70
.text:0000000000006000 ; ---------------------------------------------------------------------------
.text:0000000000006000
.text:0000000000006000 loc_6000:                               ; CODE XREF: mkancesdirs+90↑j
.text:0000000000006000                 call    ___errno_location
.text:0000000000006005                 mov     edx, [rsp+58h+var_44]
.text:0000000000006009                 mov     r15d, [rax]
.text:000000000000600C                 and     edx, 1
.text:000000000000600F                 jmp     loc_5F8F
.text:000000000000600F ; ---------------------------------------------------------------------------
.text:0000000000006014                 align 8
.text:0000000000006018
.text:0000000000006018 loc_6018:                               ; CODE XREF: mkancesdirs+B3↑j
.text:0000000000006018                                         ; mkancesdirs+BC↑j
.text:0000000000006018                 test    r15d, r15d
.text:000000000000601B                 jz      short loc_6030
.text:000000000000601D                 call    ___errno_location
.text:0000000000006022                 cmp     dword ptr [rax], 2
.text:0000000000006025                 jnz     short loc_6030
.text:0000000000006027                 mov     [rax], r15d
.text:000000000000602A                 nop     word ptr [rax+rax+00h]
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: mkancesdirs+12B↑j
.text:0000000000006030                                         ; mkancesdirs+135↑j
.text:0000000000006030                 movsxd  rax, ebp
.text:0000000000006033                 jmp     short loc_5FCE
.text:0000000000006035 ; ---------------------------------------------------------------------------
.text:0000000000006035
.text:0000000000006035 loc_6035:                               ; CODE XREF: mkancesdirs+7A↑j
.text:0000000000006035                 cmp     byte ptr [rbp+0], 2Eh ; '.'
.text:0000000000006039                 jnz     loc_5F70
.text:000000000000603F                 cmp     byte ptr [rbp+1], 2Eh ; '.'
.text:0000000000006043                 jnz     loc_5F70
.text:0000000000006049                 xor     r15d, r15d
.text:000000000000604C                 mov     byte ptr [rsp+58h+var_44], 0
.text:0000000000006051                 xor     edx, edx
.text:0000000000006053                 jmp     loc_5F8F
.text:0000000000006053 ; } // starts at 5EF0
.text:0000000000006053 mkancesdirs     endp
.text:0000000000006053
.text:0000000000006053 ; ---------------------------------------------------------------------------
.text:0000000000006058                 align 20h
.text:0000000000006060
.text:0000000000006060 ; =============== S U B R O U T I N E =======================================
.text:0000000000006060
.text:0000000000006060
.text:0000000000006060 ; __int64 __usercall dirchownmod@<rax>(int fd@<edi>, char *file@<rsi>, int)
.text:0000000000006060                 public dirchownmod
.text:0000000000006060 dirchownmod     proc near               ; CODE XREF: make_dir_parents+2CD↑p
.text:0000000000006060
.text:0000000000006060 group           = dword ptr -0DCh
.text:0000000000006060 stat_buf        = stat ptr -0D8h
.text:0000000000006060 var_40          = qword ptr -40h
.text:0000000000006060 arg_0           = dword ptr  8
.text:0000000000006060
.text:0000000000006060 ; __unwind {
.text:0000000000006060                 push    r15
.text:0000000000006062                 push    r14
.text:0000000000006064                 mov     r15d, edx
.text:0000000000006067                 push    r13
.text:0000000000006069                 push    r12
.text:000000000000606B                 mov     r13d, ecx
.text:000000000000606E                 push    rbp
.text:000000000000606F                 push    rbx
.text:0000000000006070                 mov     ebp, edi
.text:0000000000006072                 mov     r12, rsi
.text:0000000000006075                 mov     r14d, r9d
.text:0000000000006078                 sub     rsp, 0B8h
.text:000000000000607F                 mov     rax, fs:28h
.text:0000000000006088                 mov     [rsp+0E8h+var_40], rax
.text:0000000000006090                 xor     eax, eax
.text:0000000000006092                 test    edi, edi
.text:0000000000006094                 mov     [rsp+0E8h+group], r8d
.text:0000000000006099                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:000000000000609E                 js      loc_6170
.text:00000000000060A4                 mov     esi, edi        ; fildes
.text:00000000000060A6                 mov     edi, 1          ; ver
.text:00000000000060AB                 call    ___fxstat
.text:00000000000060B0                 test    eax, eax
.text:00000000000060B2                 mov     ebx, eax
.text:00000000000060B4                 mov     r8d, [rsp+0E8h+group]
.text:00000000000060B9                 jnz     loc_6260
.text:00000000000060BF                 mov     ecx, [rsp+0E8h+stat_buf.st_mode]
.text:00000000000060C3                 mov     eax, ecx
.text:00000000000060C5                 and     eax, 0F000h
.text:00000000000060CA                 cmp     eax, 4000h
.text:00000000000060CF                 jnz     short loc_6120
.text:00000000000060D1
.text:00000000000060D1 loc_60D1:                               ; CODE XREF: dirchownmod+135↓j
.text:00000000000060D1                 cmp     r13d, 0FFFFFFFFh
.text:00000000000060D5                 jz      loc_61B0
.text:00000000000060DB                 cmp     [rsp+0E8h+stat_buf.st_uid], r13d
.text:00000000000060E0                 jz      loc_61B0
.text:00000000000060E6
.text:00000000000060E6 loc_60E6:                               ; CODE XREF: dirchownmod+15B↓j
.text:00000000000060E6                 test    ebp, ebp
.text:00000000000060E8                 mov     [rsp+0E8h+group], ecx
.text:00000000000060EC                 mov     edx, r8d        ; group
.text:00000000000060EF                 mov     esi, r13d       ; owner
.text:00000000000060F2                 jns     loc_6200
.text:00000000000060F8                 cmp     r15d, 0FFFFFFFFh
.text:00000000000060FC                 mov     rdi, r12        ; file
.text:00000000000060FF                 jz      loc_6240
.text:0000000000006105                 call    _lchown
.text:000000000000610A                 mov     ecx, [rsp+0E8h+group]
.text:000000000000610E                 mov     ebx, eax
.text:0000000000006110
.text:0000000000006110 loc_6110:                               ; CODE XREF: dirchownmod+1EB↓j
.text:0000000000006110                 test    ebx, ebx
.text:0000000000006112                 jnz     short loc_6144
.text:0000000000006114                 jmp     loc_6211
.text:0000000000006114 ; ---------------------------------------------------------------------------
.text:0000000000006119                 align 20h
.text:0000000000006120
.text:0000000000006120 loc_6120:                               ; CODE XREF: dirchownmod+6F↑j
.text:0000000000006120                 call    ___errno_location
.text:0000000000006125                 mov     r13d, 14h
.text:000000000000612B                 mov     r12, rax
.text:000000000000612E                 mov     dword ptr [rax], 14h
.text:0000000000006134                 mov     ebx, 0FFFFFFFFh
.text:0000000000006139
.text:0000000000006139 loc_6139:                               ; CODE XREF: dirchownmod+20B↓j
.text:0000000000006139                 mov     edi, ebp        ; fd
.text:000000000000613B                 call    _close
.text:0000000000006140                 mov     [r12], r13d
.text:0000000000006144
.text:0000000000006144 loc_6144:                               ; CODE XREF: dirchownmod+B2↑j
.text:0000000000006144                                         ; dirchownmod+123↓j ...
.text:0000000000006144                 mov     rcx, [rsp+0E8h+var_40]
.text:000000000000614C                 xor     rcx, fs:28h
.text:0000000000006155                 mov     eax, ebx
.text:0000000000006157                 jnz     loc_6270
.text:000000000000615D                 add     rsp, 0B8h
.text:0000000000006164                 pop     rbx
.text:0000000000006165                 pop     rbp
.text:0000000000006166                 pop     r12
.text:0000000000006168                 pop     r13
.text:000000000000616A                 pop     r14
.text:000000000000616C                 pop     r15
.text:000000000000616E                 retn
.text:000000000000616E ; ---------------------------------------------------------------------------
.text:000000000000616F                 align 10h
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: dirchownmod+3E↑j
.text:0000000000006170                 mov     edi, 1          ; ver
.text:0000000000006175                 call    ___xstat
.text:000000000000617A                 test    eax, eax
.text:000000000000617C                 mov     ebx, eax
.text:000000000000617E                 mov     r8d, [rsp+0E8h+group]
.text:0000000000006183                 jnz     short loc_6144
.text:0000000000006185                 mov     ecx, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000006189                 mov     eax, ecx
.text:000000000000618B                 and     eax, 0F000h
.text:0000000000006190                 cmp     eax, 4000h
.text:0000000000006195                 jz      loc_60D1
.text:000000000000619B                 call    ___errno_location
.text:00000000000061A0                 or      ebx, 0FFFFFFFFh
.text:00000000000061A3                 mov     dword ptr [rax], 14h
.text:00000000000061A9                 jmp     short loc_6144
.text:00000000000061A9 ; ---------------------------------------------------------------------------
.text:00000000000061AB                 align 10h
.text:00000000000061B0
.text:00000000000061B0 loc_61B0:                               ; CODE XREF: dirchownmod+75↑j
.text:00000000000061B0                                         ; dirchownmod+80↑j
.text:00000000000061B0                 cmp     r8d, 0FFFFFFFFh
.text:00000000000061B4                 jz      short loc_61C1
.text:00000000000061B6                 cmp     [rsp+0E8h+stat_buf.st_gid], r8d
.text:00000000000061BB                 jnz     loc_60E6
.text:00000000000061C1
.text:00000000000061C1 loc_61C1:                               ; CODE XREF: dirchownmod+154↑j
.text:00000000000061C1                                         ; dirchownmod+1B4↓j
.text:00000000000061C1                 xor     edx, edx
.text:00000000000061C3
.text:00000000000061C3 loc_61C3:                               ; CODE XREF: dirchownmod+1BE↓j
.text:00000000000061C3                 mov     eax, ecx
.text:00000000000061C5                 xor     eax, r14d
.text:00000000000061C8                 or      eax, edx
.text:00000000000061CA                 test    [rsp+0E8h+arg_0], eax
.text:00000000000061D1                 jz      short loc_6220
.text:00000000000061D3                 mov     esi, [rsp+0E8h+arg_0]
.text:00000000000061DA                 and     ecx, 0FFFh
.text:00000000000061E0                 not     esi
.text:00000000000061E2                 and     esi, ecx
.text:00000000000061E4                 or      esi, r14d       ; mode
.text:00000000000061E7                 test    ebp, ebp
.text:00000000000061E9                 jns     short loc_6250
.text:00000000000061EB                 mov     rdi, r12        ; file
.text:00000000000061EE                 call    _chmod
.text:00000000000061F3                 mov     ebx, eax
.text:00000000000061F5                 jmp     loc_6144
.text:00000000000061F5 ; ---------------------------------------------------------------------------
.text:00000000000061FA                 align 20h
.text:0000000000006200
.text:0000000000006200 loc_6200:                               ; CODE XREF: dirchownmod+92↑j
.text:0000000000006200                 mov     edi, ebp        ; fd
.text:0000000000006202                 call    _fchown
.text:0000000000006207                 test    eax, eax
.text:0000000000006209                 mov     ebx, eax
.text:000000000000620B                 mov     ecx, [rsp+0E8h+group]
.text:000000000000620F                 jnz     short loc_6260
.text:0000000000006211
.text:0000000000006211 loc_6211:                               ; CODE XREF: dirchownmod+B4↑j
.text:0000000000006211                 test    cl, 49h
.text:0000000000006214                 jz      short loc_61C1
.text:0000000000006216                 mov     edx, ecx
.text:0000000000006218                 and     edx, 0C00h
.text:000000000000621E                 jmp     short loc_61C3
.text:0000000000006220 ; ---------------------------------------------------------------------------
.text:0000000000006220
.text:0000000000006220 loc_6220:                               ; CODE XREF: dirchownmod+171↑j
.text:0000000000006220                 xor     ebx, ebx
.text:0000000000006222                 test    ebp, ebp
.text:0000000000006224                 js      loc_6144
.text:000000000000622A                 nop     word ptr [rax+rax+00h]
.text:0000000000006230
.text:0000000000006230 loc_6230:                               ; CODE XREF: dirchownmod+1FB↓j
.text:0000000000006230                 mov     edi, ebp        ; fd
.text:0000000000006232                 call    _close
.text:0000000000006237                 mov     ebx, eax
.text:0000000000006239                 jmp     loc_6144
.text:0000000000006239 ; ---------------------------------------------------------------------------
.text:000000000000623E                 align 20h
.text:0000000000006240
.text:0000000000006240 loc_6240:                               ; CODE XREF: dirchownmod+9F↑j
.text:0000000000006240                 call    _chown
.text:0000000000006245                 mov     ecx, [rsp+0E8h+group]
.text:0000000000006249                 mov     ebx, eax
.text:000000000000624B                 jmp     loc_6110
.text:0000000000006250 ; ---------------------------------------------------------------------------
.text:0000000000006250
.text:0000000000006250 loc_6250:                               ; CODE XREF: dirchownmod+189↑j
.text:0000000000006250                 mov     edi, ebp        ; fd
.text:0000000000006252                 call    _fchmod
.text:0000000000006257                 test    eax, eax
.text:0000000000006259                 mov     ebx, eax
.text:000000000000625B                 jz      short loc_6230
.text:000000000000625D                 nop     dword ptr [rax]
.text:0000000000006260
.text:0000000000006260 loc_6260:                               ; CODE XREF: dirchownmod+59↑j
.text:0000000000006260                                         ; dirchownmod+1AF↑j
.text:0000000000006260                 call    ___errno_location
.text:0000000000006265                 mov     r12, rax
.text:0000000000006268                 mov     r13d, [rax]
.text:000000000000626B                 jmp     loc_6139
.text:0000000000006270 ; ---------------------------------------------------------------------------
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: dirchownmod+F7↑j
.text:0000000000006270                 call    ___stack_chk_fail
.text:0000000000006270 ; } // starts at 6060
.text:0000000000006270 dirchownmod     endp
.text:0000000000006270
.text:0000000000006270 ; ---------------------------------------------------------------------------
.text:0000000000006275                 align 20h
.text:0000000000006280
.text:0000000000006280 ; =============== S U B R O U T I N E =======================================
.text:0000000000006280
.text:0000000000006280 ; Attributes: info_from_lumina
.text:0000000000006280
.text:0000000000006280 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000006280                 public fd_safer_flag
.text:0000000000006280 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:0000000000006280 ; __unwind {
.text:0000000000006280                 push    r13
.text:0000000000006282                 push    r12
.text:0000000000006284                 push    rbp
.text:0000000000006285                 push    rbx
.text:0000000000006286                 mov     ebx, edi
.text:0000000000006288                 sub     rsp, 8
.text:000000000000628C                 cmp     edi, 2
.text:000000000000628F                 ja      short loc_62B2
.text:0000000000006291                 call    dup_safer
.text:0000000000006296                 mov     r12d, eax
.text:0000000000006299                 call    ___errno_location
.text:000000000000629E                 mov     r13d, [rax]
.text:00000000000062A1                 mov     rbp, rax
.text:00000000000062A4                 mov     edi, ebx        ; fd
.text:00000000000062A6                 call    _close
.text:00000000000062AB                 mov     ebx, r12d
.text:00000000000062AE                 mov     [rbp+0], r13d
.text:00000000000062B2
.text:00000000000062B2 loc_62B2:                               ; CODE XREF: fd_safer_flag+F↑j
.text:00000000000062B2                 add     rsp, 8
.text:00000000000062B6                 mov     eax, ebx
.text:00000000000062B8                 pop     rbx
.text:00000000000062B9                 pop     rbp
.text:00000000000062BA                 pop     r12
.text:00000000000062BC                 pop     r13
.text:00000000000062BE                 retn
.text:00000000000062BE ; } // starts at 6280
.text:00000000000062BE fd_safer_flag   endp
.text:00000000000062BE
.text:00000000000062BE ; ---------------------------------------------------------------------------
.text:00000000000062BF                 align 20h
.text:00000000000062C0
.text:00000000000062C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062C0
.text:00000000000062C0 ; Attributes: info_from_lumina
.text:00000000000062C0
.text:00000000000062C0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000062C0                 public rpl_fclose
.text:00000000000062C0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000062C0 ; __unwind {
.text:00000000000062C0                 push    r12
.text:00000000000062C2                 push    rbp
.text:00000000000062C3                 push    rbx
.text:00000000000062C4                 mov     rbx, rdi
.text:00000000000062C7                 call    _fileno
.text:00000000000062CC                 test    eax, eax
.text:00000000000062CE                 mov     rdi, rbx        ; fp
.text:00000000000062D1                 js      short loc_6327
.text:00000000000062D3                 call    ___freading
.text:00000000000062D8                 test    eax, eax
.text:00000000000062DA                 jnz     short loc_6308
.text:00000000000062DC
.text:00000000000062DC loc_62DC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000062DC                 mov     rdi, rbx        ; stream
.text:00000000000062DF                 call    rpl_fflush
.text:00000000000062E4                 test    eax, eax
.text:00000000000062E6                 jz      short loc_6324
.text:00000000000062E8                 call    ___errno_location
.text:00000000000062ED                 mov     r12d, [rax]
.text:00000000000062F0                 mov     rdi, rbx        ; stream
.text:00000000000062F3                 mov     rbp, rax
.text:00000000000062F6                 call    _fclose
.text:00000000000062FB                 test    r12d, r12d
.text:00000000000062FE                 jnz     short loc_6330
.text:0000000000006300
.text:0000000000006300 loc_6300:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006300                 pop     rbx
.text:0000000000006301                 pop     rbp
.text:0000000000006302                 pop     r12
.text:0000000000006304                 retn
.text:0000000000006304 ; ---------------------------------------------------------------------------
.text:0000000000006305                 align 8
.text:0000000000006308
.text:0000000000006308 loc_6308:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006308                 mov     rdi, rbx        ; stream
.text:000000000000630B                 call    _fileno
.text:0000000000006310                 xor     esi, esi        ; offset
.text:0000000000006312                 mov     edx, 1          ; whence
.text:0000000000006317                 mov     edi, eax        ; fd
.text:0000000000006319                 call    _lseek
.text:000000000000631E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006322                 jnz     short loc_62DC
.text:0000000000006324
.text:0000000000006324 loc_6324:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000006324                 mov     rdi, rbx        ; stream
.text:0000000000006327
.text:0000000000006327 loc_6327:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000006327                 pop     rbx
.text:0000000000006328                 pop     rbp
.text:0000000000006329                 pop     r12
.text:000000000000632B                 jmp     _fclose
.text:0000000000006330 ; ---------------------------------------------------------------------------
.text:0000000000006330
.text:0000000000006330 loc_6330:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000006330                 mov     [rbp+0], r12d
.text:0000000000006334                 mov     eax, 0FFFFFFFFh
.text:0000000000006339                 jmp     short loc_6300
.text:0000000000006339 ; } // starts at 62C0
.text:0000000000006339 rpl_fclose      endp
.text:0000000000006339
.text:0000000000006339 ; ---------------------------------------------------------------------------
.text:000000000000633B                 align 20h
.text:0000000000006340
.text:0000000000006340 ; =============== S U B R O U T I N E =======================================
.text:0000000000006340
.text:0000000000006340 ; Attributes: info_from_lumina
.text:0000000000006340
.text:0000000000006340 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000006340                 public rpl_fflush
.text:0000000000006340 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000006340 ; __unwind {
.text:0000000000006340                 test    rdi, rdi
.text:0000000000006343                 push    rbx
.text:0000000000006344                 mov     rbx, rdi
.text:0000000000006347                 jz      short loc_635A
.text:0000000000006349                 call    ___freading
.text:000000000000634E                 test    eax, eax
.text:0000000000006350                 jz      short loc_635A
.text:0000000000006352                 test    dword ptr [rbx], 100h
.text:0000000000006358                 jnz     short loc_6368
.text:000000000000635A
.text:000000000000635A loc_635A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000635A                                         ; rpl_fflush+10↑j
.text:000000000000635A                 mov     rdi, rbx        ; stream
.text:000000000000635D                 pop     rbx
.text:000000000000635E                 jmp     _fflush
.text:000000000000635E ; ---------------------------------------------------------------------------
.text:0000000000006363                 align 8
.text:0000000000006368
.text:0000000000006368 loc_6368:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006368                 mov     rdi, rbx
.text:000000000000636B                 mov     edx, 1
.text:0000000000006370                 xor     esi, esi
.text:0000000000006372                 call    rpl_fseeko
.text:0000000000006377                 mov     rdi, rbx        ; stream
.text:000000000000637A                 pop     rbx
.text:000000000000637B                 jmp     _fflush
.text:000000000000637B ; } // starts at 6340
.text:000000000000637B rpl_fflush      endp
.text:000000000000637B
.text:0000000000006380
.text:0000000000006380 ; =============== S U B R O U T I N E =======================================
.text:0000000000006380
.text:0000000000006380 ; Attributes: info_from_lumina
.text:0000000000006380
.text:0000000000006380 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006380                 public rpl_fseeko
.text:0000000000006380 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006380 ; __unwind {
.text:0000000000006380                 mov     rax, [rdi+8]
.text:0000000000006384                 cmp     [rdi+10h], rax
.text:0000000000006388                 jz      short loc_6390
.text:000000000000638A
.text:000000000000638A loc_638A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000638A                                         ; rpl_fseeko+1F↓j
.text:000000000000638A                 jmp     _fseeko
.text:000000000000638A ; ---------------------------------------------------------------------------
.text:000000000000638F                 align 10h
.text:0000000000006390
.text:0000000000006390 loc_6390:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006390                 mov     rax, [rdi+20h]
.text:0000000000006394                 cmp     [rdi+28h], rax
.text:0000000000006398                 jnz     short loc_638A
.text:000000000000639A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000639F                 jnz     short loc_638A
.text:00000000000063A1                 push    r12
.text:00000000000063A3                 push    rbp
.text:00000000000063A4                 mov     r12d, edx
.text:00000000000063A7                 push    rbx
.text:00000000000063A8                 mov     rbp, rsi
.text:00000000000063AB                 mov     rbx, rdi
.text:00000000000063AE                 call    _fileno
.text:00000000000063B3                 mov     edx, r12d       ; whence
.text:00000000000063B6                 mov     rsi, rbp        ; offset
.text:00000000000063B9                 mov     edi, eax        ; fd
.text:00000000000063BB                 call    _lseek
.text:00000000000063C0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000063C4                 jz      short loc_63D2
.text:00000000000063C6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000063C9                 mov     [rbx+90h], rax
.text:00000000000063D0                 xor     eax, eax
.text:00000000000063D2
.text:00000000000063D2 loc_63D2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000063D2                 pop     rbx
.text:00000000000063D3                 pop     rbp
.text:00000000000063D4                 pop     r12
.text:00000000000063D6                 retn
.text:00000000000063D6 ; } // starts at 6380
.text:00000000000063D6 rpl_fseeko      endp
.text:00000000000063D6
.text:00000000000063D6 ; ---------------------------------------------------------------------------
.text:00000000000063D7                 align 20h
.text:00000000000063E0
.text:00000000000063E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063E0
.text:00000000000063E0
.text:00000000000063E0                 public fseterr
.text:00000000000063E0 fseterr         proc near               ; CODE XREF: rpl_vfprintf+E6↑p
.text:00000000000063E0 ; __unwind {
.text:00000000000063E0                 or      dword ptr [rdi], 20h
.text:00000000000063E3                 retn
.text:00000000000063E3 ; } // starts at 63E0
.text:00000000000063E3 fseterr         endp
.text:00000000000063E3
.text:00000000000063E3 ; ---------------------------------------------------------------------------
.text:00000000000063E4                 align 10h
.text:00000000000063F0
.text:00000000000063F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063F0
.text:00000000000063F0 ; Attributes: bp-based frame
.text:00000000000063F0
.text:00000000000063F0                 public vasnprintf
.text:00000000000063F0 vasnprintf      proc near               ; CODE XREF: rpl_vfprintf+42↑p
.text:00000000000063F0
.text:00000000000063F0 var_450         = tbyte ptr -450h
.text:00000000000063F0 var_440         = tbyte ptr -440h
.text:00000000000063F0 var_430         = qword ptr -430h
.text:00000000000063F0 var_421         = byte ptr -421h
.text:00000000000063F0 ptr             = qword ptr -420h
.text:00000000000063F0 var_418         = qword ptr -418h
.text:00000000000063F0 var_410         = qword ptr -410h
.text:00000000000063F0 var_408         = qword ptr -408h
.text:00000000000063F0 var_400         = qword ptr -400h
.text:00000000000063F0 var_3F8         = qword ptr -3F8h
.text:00000000000063F0 var_3F0         = qword ptr -3F0h
.text:00000000000063F0 src             = qword ptr -3E8h
.text:00000000000063F0 var_3E0         = qword ptr -3E0h
.text:00000000000063F0 var_3D8         = qword ptr -3D8h
.text:00000000000063F0 var_3D0         = qword ptr -3D0h
.text:00000000000063F0 n               = qword ptr -3C8h
.text:00000000000063F0 var_3BC         = dword ptr -3BCh
.text:00000000000063F0 var_3B8         = dword ptr -3B8h
.text:00000000000063F0 var_3B4         = dword ptr -3B4h
.text:00000000000063F0 var_3B0         = byte ptr -3B0h
.text:00000000000063F0 var_3A8         = qword ptr -3A8h
.text:00000000000063F0 var_2C0         = qword ptr -2C0h
.text:00000000000063F0 var_2B8         = qword ptr -2B8h
.text:00000000000063F0 var_2B0         = qword ptr -2B0h
.text:00000000000063F0 var_2A8         = qword ptr -2A8h
.text:00000000000063F0 var_38          = qword ptr -38h
.text:00000000000063F0
.text:00000000000063F0 ; __unwind {
.text:00000000000063F0                 push    rbp
.text:00000000000063F1                 mov     rbp, rsp
.text:00000000000063F4                 push    r15
.text:00000000000063F6                 push    r14
.text:00000000000063F8                 push    r13
.text:00000000000063FA                 push    r12
.text:00000000000063FC                 lea     r14, [rbp+var_3B0]
.text:0000000000006403                 push    rbx
.text:0000000000006404                 mov     rbx, rdx
.text:0000000000006407                 mov     r12, rcx
.text:000000000000640A                 mov     rdx, r14
.text:000000000000640D                 sub     rsp, 408h
.text:0000000000006414                 mov     [rbp+var_418], rsi
.text:000000000000641B                 lea     rsi, [rbp+var_2C0]
.text:0000000000006422                 mov     [rbp+src], rdi
.text:0000000000006429                 mov     rdi, rbx
.text:000000000000642C                 mov     [rbp+var_410], r14
.text:0000000000006433                 mov     rax, fs:28h
.text:000000000000643C                 mov     [rbp+var_38], rax
.text:0000000000006440                 xor     eax, eax
.text:0000000000006442                 mov     [rbp+var_408], rsi
.text:0000000000006449                 call    printf_parse
.text:000000000000644E                 test    eax, eax
.text:0000000000006450                 js      loc_72B8
.text:0000000000006456                 mov     rsi, r14
.text:0000000000006459                 mov     rdi, r12
.text:000000000000645C                 call    printf_fetchargs
.text:0000000000006461                 test    eax, eax
.text:0000000000006463                 js      loc_7320
.text:0000000000006469                 mov     rax, [rbp+var_2B0]
.text:0000000000006470                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006477                 add     rax, 7
.text:000000000000647B                 cmp     rax, 6
.text:000000000000647F                 cmovbe  rax, rdx
.text:0000000000006483                 add     rax, [rbp+var_2A8]
.text:000000000000648A                 jb      loc_6EB8
.text:0000000000006490                 mov     rdi, rax
.text:0000000000006493                 xor     r8d, r8d
.text:0000000000006496                 add     rdi, 6          ; size
.text:000000000000649A                 setb    r8b
.text:000000000000649E                 jb      loc_6EB8
.text:00000000000064A4                 cmp     rdi, 0F9Fh
.text:00000000000064AB                 jbe     loc_65F8
.text:00000000000064B1                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000000064B5                 mov     [rbp+n], r8
.text:00000000000064BC                 jz      loc_6EB8
.text:00000000000064C2                 call    _malloc
.text:00000000000064C7                 test    rax, rax
.text:00000000000064CA                 mov     [rbp+var_3D8], rax
.text:00000000000064D1                 jz      loc_6EB8
.text:00000000000064D7                 mov     r8, [rbp+n]
.text:00000000000064DE                 mov     [rbp+ptr], rax
.text:00000000000064E5
.text:00000000000064E5 loc_64E5:                               ; CODE XREF: vasnprintf+22E↓j
.text:00000000000064E5                 xor     r12d, r12d
.text:00000000000064E8                 cmp     [rbp+src], 0
.text:00000000000064F0                 jz      short loc_64FC
.text:00000000000064F2                 mov     rax, [rbp+var_418]
.text:00000000000064F9                 mov     r12, [rax]
.text:00000000000064FC
.text:00000000000064FC loc_64FC:                               ; CODE XREF: vasnprintf+100↑j
.text:00000000000064FC                 mov     r13, [rbp+var_2B8]
.text:0000000000006503                 lea     rax, [rbp+var_3BC]
.text:000000000000650A                 mov     r15, [rbp+src]
.text:0000000000006511                 mov     [rbp+var_400], 0
.text:000000000000651C                 mov     [rbp+var_3F0], rax
.text:0000000000006523                 mov     rax, rbx
.text:0000000000006526                 mov     rbx, r8
.text:0000000000006529                 mov     rcx, [r13+0]
.text:000000000000652D                 mov     r8, rax
.text:0000000000006530                 cmp     rcx, r8
.text:0000000000006533                 jz      loc_6EA1
.text:0000000000006539
.text:0000000000006539 loc_6539:                               ; CODE XREF: vasnprintf+AAB↓j
.text:0000000000006539                 sub     rcx, r8
.text:000000000000653C                 mov     rax, rbx
.text:000000000000653F                 add     rax, rcx
.text:0000000000006542                 mov     r14, rax
.text:0000000000006545                 jnb     loc_6628
.text:000000000000654B                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000654F                 jz      loc_7020
.text:0000000000006555
.text:0000000000006555 loc_6555:                               ; CODE XREF: vasnprintf+4E2↓j
.text:0000000000006555                                         ; vasnprintf+A86↓j ...
.text:0000000000006555                 call    ___errno_location
.text:000000000000655A                 mov     [rbp+n], rax
.text:0000000000006561
.text:0000000000006561 loc_6561:                               ; CODE XREF: vasnprintf+640↓j
.text:0000000000006561                                         ; vasnprintf+652↓j ...
.text:0000000000006561                 cmp     r15, [rbp+src]
.text:0000000000006568                 jz      short loc_6573
.text:000000000000656A                 test    r15, r15
.text:000000000000656D                 jnz     loc_7050
.text:0000000000006573
.text:0000000000006573 loc_6573:                               ; CODE XREF: vasnprintf+178↑j
.text:0000000000006573                                         ; vasnprintf+C68↓j
.text:0000000000006573                 mov     rax, [rbp+ptr]
.text:000000000000657A                 test    rax, rax
.text:000000000000657D                 jz      short loc_6587
.text:000000000000657F                 mov     rdi, rax        ; ptr
.text:0000000000006582                 call    _free
.text:0000000000006587
.text:0000000000006587 loc_6587:                               ; CODE XREF: vasnprintf+18D↑j
.text:0000000000006587                                         ; vasnprintf+AD4↓j
.text:0000000000006587                 mov     rax, [rbp+var_408]
.text:000000000000658E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006595                 add     rax, 20h ; ' '
.text:0000000000006599                 cmp     rdi, rax
.text:000000000000659C                 jz      short loc_65A3
.text:000000000000659E                 call    _free
.text:00000000000065A3
.text:00000000000065A3 loc_65A3:                               ; CODE XREF: vasnprintf+1AC↑j
.text:00000000000065A3                 mov     rax, [rbp+var_410]
.text:00000000000065AA                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000065B1                 add     rax, 10h
.text:00000000000065B5                 cmp     rdi, rax
.text:00000000000065B8                 jz      short loc_65BF
.text:00000000000065BA                 call    _free
.text:00000000000065BF
.text:00000000000065BF loc_65BF:                               ; CODE XREF: vasnprintf+1C8↑j
.text:00000000000065BF                 mov     rax, [rbp+n]
.text:00000000000065C6                 xor     r15d, r15d
.text:00000000000065C9                 mov     dword ptr [rax], 0Ch
.text:00000000000065CF
.text:00000000000065CF loc_65CF:                               ; CODE XREF: vasnprintf+7BA↓j
.text:00000000000065CF                                         ; vasnprintf+EBE↓j ...
.text:00000000000065CF                 mov     rdi, [rbp+var_38]
.text:00000000000065D3                 xor     rdi, fs:28h
.text:00000000000065DC                 mov     rax, r15
.text:00000000000065DF                 jnz     loc_74E7
.text:00000000000065E5                 lea     rsp, [rbp-28h]
.text:00000000000065E9                 pop     rbx
.text:00000000000065EA                 pop     r12
.text:00000000000065EC                 pop     r13
.text:00000000000065EE                 pop     r14
.text:00000000000065F0                 pop     r15
.text:00000000000065F2                 pop     rbp
.text:00000000000065F3                 retn
.text:00000000000065F3 ; ---------------------------------------------------------------------------
.text:00000000000065F4                 align 8
.text:00000000000065F8
.text:00000000000065F8 loc_65F8:                               ; CODE XREF: vasnprintf+BB↑j
.text:00000000000065F8                 add     rax, 24h ; '$'
.text:00000000000065FC                 mov     [rbp+ptr], 0
.text:0000000000006607                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000660B                 sub     rsp, rax
.text:000000000000660E                 lea     rax, [rsp+430h+var_421]
.text:0000000000006613                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000006617                 mov     [rbp+var_3D8], rax
.text:000000000000661E                 jmp     loc_64E5
.text:000000000000661E ; ---------------------------------------------------------------------------
.text:0000000000006623                 align 8
.text:0000000000006628
.text:0000000000006628 loc_6628:                               ; CODE XREF: vasnprintf+155↑j
.text:0000000000006628                 cmp     r12, rax
.text:000000000000662B                 jnb     short loc_6694
.text:000000000000662D                 test    r12, r12
.text:0000000000006630                 jnz     loc_6F60
.text:0000000000006636                 cmp     rax, 0Ch
.text:000000000000663A                 ja      loc_6F72
.text:0000000000006640                 mov     r12d, 0Ch
.text:0000000000006646
.text:0000000000006646 loc_6646:                               ; CODE XREF: vasnprintf+B7C↓j
.text:0000000000006646                 cmp     r15, [rbp+src]
.text:000000000000664D                 setz    dl
.text:0000000000006650                 test    r15, r15
.text:0000000000006653                 jz      loc_6F98
.text:0000000000006659
.text:0000000000006659 loc_6659:                               ; CODE XREF: vasnprintf+B9C↓j
.text:0000000000006659                 test    dl, dl
.text:000000000000665B                 jnz     loc_6F98
.text:0000000000006661                 mov     rsi, r12        ; size
.text:0000000000006664                 mov     rdi, r15        ; ptr
.text:0000000000006667                 mov     [rbp+var_3D0], r8
.text:000000000000666E                 mov     [rbp+n], rcx
.text:0000000000006675                 call    _realloc
.text:000000000000667A                 test    rax, rax
.text:000000000000667D                 mov     rcx, [rbp+n]
.text:0000000000006684                 mov     r8, [rbp+var_3D0]
.text:000000000000668B                 jz      loc_703B
.text:0000000000006691                 mov     r15, rax
.text:0000000000006694
.text:0000000000006694 loc_6694:                               ; CODE XREF: vasnprintf+23B↑j
.text:0000000000006694                                         ; vasnprintf+C23↓j ...
.text:0000000000006694                 lea     rdi, [r15+rbx]  ; dest
.text:0000000000006698                 mov     rdx, rcx        ; n
.text:000000000000669B                 mov     rsi, r8         ; src
.text:000000000000669E                 call    _memcpy
.text:00000000000066A3
.text:00000000000066A3 loc_66A3:                               ; CODE XREF: vasnprintf+AB4↓j
.text:00000000000066A3                 mov     rax, [rbp+var_400]
.text:00000000000066AA                 cmp     [rbp+var_2C0], rax
.text:00000000000066B1                 jz      loc_736B
.text:00000000000066B7                 movzx   edx, byte ptr [r13+48h]
.text:00000000000066BC                 mov     rax, [r13+50h]
.text:00000000000066C0                 cmp     dl, 25h ; '%'
.text:00000000000066C3                 jz      loc_6E58
.text:00000000000066C9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000066CD                 jz      def_694B        ; jumptable 000000000000694B default case, case 0
.text:00000000000066CD                                         ; jumptable 0000000000006EF0 default case
.text:00000000000066D3                 mov     r8, [rbp+var_3A8]
.text:00000000000066DA                 shl     rax, 5
.text:00000000000066DE                 add     rax, r8
.text:00000000000066E1                 cmp     dl, 6Eh ; 'n'
.text:00000000000066E4                 mov     edi, [rax]
.text:00000000000066E6                 mov     dword ptr [rbp+var_3D0], edi
.text:00000000000066EC                 jz      loc_6ED0
.text:00000000000066F2                 mov     eax, [r13+10h]
.text:00000000000066F6                 mov     rdi, [rbp+var_3D8]
.text:00000000000066FD                 test    al, 1
.text:00000000000066FF                 mov     byte ptr [rdi], 25h ; '%'
.text:0000000000006702                 lea     rbx, [rdi+1]
.text:0000000000006706                 jz      short loc_6717
.text:0000000000006708                 mov     rdi, [rbp+var_3D8]
.text:000000000000670F                 lea     rbx, [rdi+2]
.text:0000000000006713                 mov     byte ptr [rdi+1], 27h ; '''
.text:0000000000006717
.text:0000000000006717 loc_6717:                               ; CODE XREF: vasnprintf+316↑j
.text:0000000000006717                 test    al, 2
.text:0000000000006719                 jz      short loc_6722
.text:000000000000671B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000671E                 add     rbx, 1
.text:0000000000006722
.text:0000000000006722 loc_6722:                               ; CODE XREF: vasnprintf+329↑j
.text:0000000000006722                 test    al, 4
.text:0000000000006724                 jz      short loc_672D
.text:0000000000006726                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000006729                 add     rbx, 1
.text:000000000000672D
.text:000000000000672D loc_672D:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000672D                 test    al, 8
.text:000000000000672F                 jz      short loc_6738
.text:0000000000006731                 mov     byte ptr [rbx], 20h ; ' '
.text:0000000000006734                 add     rbx, 1
.text:0000000000006738
.text:0000000000006738 loc_6738:                               ; CODE XREF: vasnprintf+33F↑j
.text:0000000000006738                 test    al, 10h
.text:000000000000673A                 jz      short loc_6743
.text:000000000000673C                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000673F                 add     rbx, 1
.text:0000000000006743
.text:0000000000006743 loc_6743:                               ; CODE XREF: vasnprintf+34A↑j
.text:0000000000006743                 test    al, 40h
.text:0000000000006745                 jz      short loc_674E
.text:0000000000006747                 mov     byte ptr [rbx], 49h ; 'I'
.text:000000000000674A                 add     rbx, 1
.text:000000000000674E
.text:000000000000674E loc_674E:                               ; CODE XREF: vasnprintf+355↑j
.text:000000000000674E                 test    al, 20h
.text:0000000000006750                 jz      short loc_6759
.text:0000000000006752                 mov     byte ptr [rbx], 30h ; '0'
.text:0000000000006755                 add     rbx, 1
.text:0000000000006759
.text:0000000000006759 loc_6759:                               ; CODE XREF: vasnprintf+360↑j
.text:0000000000006759                 mov     rsi, [r13+18h]  ; src
.text:000000000000675D                 mov     rdx, [r13+20h]
.text:0000000000006761                 cmp     rsi, rdx
.text:0000000000006764                 jz      short loc_6796
.text:0000000000006766                 mov     rcx, rdx
.text:0000000000006769                 mov     rdi, rbx        ; dest
.text:000000000000676C                 mov     [rbp+var_3E0], r8
.text:0000000000006773                 sub     rcx, rsi
.text:0000000000006776                 mov     rdx, rcx        ; n
.text:0000000000006779                 mov     [rbp+n], rcx
.text:0000000000006780                 call    _memcpy
.text:0000000000006785                 mov     rcx, [rbp+n]
.text:000000000000678C                 mov     r8, [rbp+var_3E0]
.text:0000000000006793                 add     rbx, rcx
.text:0000000000006796
.text:0000000000006796 loc_6796:                               ; CODE XREF: vasnprintf+374↑j
.text:0000000000006796                 mov     rsi, [r13+30h]  ; src
.text:000000000000679A                 mov     rdx, [r13+38h]
.text:000000000000679E                 cmp     rsi, rdx
.text:00000000000067A1                 jz      short loc_67D3
.text:00000000000067A3                 mov     rcx, rdx
.text:00000000000067A6                 mov     rdi, rbx        ; dest
.text:00000000000067A9                 mov     [rbp+var_3E0], r8
.text:00000000000067B0                 sub     rcx, rsi
.text:00000000000067B3                 mov     rdx, rcx        ; n
.text:00000000000067B6                 mov     [rbp+n], rcx
.text:00000000000067BD                 call    _memcpy
.text:00000000000067C2                 mov     rcx, [rbp+n]
.text:00000000000067C9                 mov     r8, [rbp+var_3E0]
.text:00000000000067D0                 add     rbx, rcx
.text:00000000000067D3
.text:00000000000067D3 loc_67D3:                               ; CODE XREF: vasnprintf+3B1↑j
.text:00000000000067D3                 mov     edi, dword ptr [rbp+var_3D0]
.text:00000000000067D9                 cmp     edi, 10h
.text:00000000000067DC                 ja      short loc_680B
.text:00000000000067DE                 mov     eax, 1
.text:00000000000067E3                 mov     ecx, edi
.text:00000000000067E5                 shl     rax, cl
.text:00000000000067E8                 test    eax, 14180h
.text:00000000000067ED                 jnz     short loc_6804
.text:00000000000067EF                 test    ah, 10h
.text:00000000000067F2                 jnz     loc_7150
.text:00000000000067F8                 test    ah, 6
.text:00000000000067FB                 jz      short loc_680B
.text:00000000000067FD                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000006800                 add     rbx, 1
.text:0000000000006804
.text:0000000000006804 loc_6804:                               ; CODE XREF: vasnprintf+3FD↑j
.text:0000000000006804                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000006807                 add     rbx, 1
.text:000000000000680B
.text:000000000000680B loc_680B:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000680B                                         ; vasnprintf+40B↑j ...
.text:000000000000680B                 movzx   eax, byte ptr [r13+48h]
.text:0000000000006810                 mov     byte ptr [rbx+1], 0
.text:0000000000006814                 mov     [rbx], al
.text:0000000000006816                 mov     rax, [r13+28h]
.text:000000000000681A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000681E                 jz      loc_6F50
.text:0000000000006824                 shl     rax, 5
.text:0000000000006828                 add     rax, r8
.text:000000000000682B                 cmp     dword ptr [rax], 5
.text:000000000000682E                 jnz     def_694B        ; jumptable 000000000000694B default case, case 0
.text:000000000000682E                                         ; jumptable 0000000000006EF0 default case
.text:0000000000006834                 mov     eax, [rax+10h]
.text:0000000000006837                 mov     dword ptr [rbp+var_3E0], 1
.text:0000000000006841                 mov     [rbp+var_3B8], eax
.text:0000000000006847
.text:0000000000006847 loc_6847:                               ; CODE XREF: vasnprintf+B6A↓j
.text:0000000000006847                 mov     rax, [r13+40h]
.text:000000000000684B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000684F                 jz      short loc_687C
.text:0000000000006851                 shl     rax, 5
.text:0000000000006855                 add     r8, rax
.text:0000000000006858                 cmp     dword ptr [r8], 5
.text:000000000000685C                 jnz     def_694B        ; jumptable 000000000000694B default case, case 0
.text:000000000000685C                                         ; jumptable 0000000000006EF0 default case
.text:0000000000006862                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006868                 mov     edx, [r8+10h]
.text:000000000000686C                 mov     [rbp+rax*4+var_3B8], edx
.text:0000000000006873                 lea     eax, [rax+1]
.text:0000000000006876                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000687C
.text:000000000000687C loc_687C:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000687C                 mov     rax, r14
.text:000000000000687F                 xor     edx, edx
.text:0000000000006881                 add     rax, 2
.text:0000000000006885                 jb      loc_74EC
.text:000000000000688B                 cmp     r12, rax
.text:000000000000688E                 jnb     short loc_68DB
.text:0000000000006890                 test    r12, r12
.text:0000000000006893                 jnz     loc_70B8
.text:0000000000006899                 cmp     rax, 0Ch
.text:000000000000689D                 ja      loc_70D0
.text:00000000000068A3                 mov     r12d, 0Ch
.text:00000000000068A9
.text:00000000000068A9 loc_68A9:                               ; CODE XREF: vasnprintf+CD4↓j
.text:00000000000068A9                 cmp     r15, [rbp+src]
.text:00000000000068B0                 setz    dl
.text:00000000000068B3                 test    r15, r15
.text:00000000000068B6                 jz      loc_7100
.text:00000000000068BC
.text:00000000000068BC loc_68BC:                               ; CODE XREF: vasnprintf+D03↓j
.text:00000000000068BC                 test    dl, dl
.text:00000000000068BE                 jnz     loc_7100
.text:00000000000068C4                 mov     rsi, r12        ; size
.text:00000000000068C7                 mov     rdi, r15        ; ptr
.text:00000000000068CA                 call    _realloc
.text:00000000000068CF                 test    rax, rax
.text:00000000000068D2                 jz      loc_6555
.text:00000000000068D8                 mov     r15, rax
.text:00000000000068DB
.text:00000000000068DB loc_68DB:                               ; CODE XREF: vasnprintf+49E↑j
.text:00000000000068DB                                         ; vasnprintf+D53↓j ...
.text:00000000000068DB                 mov     byte ptr [r15+r14], 0
.text:00000000000068E0                 call    ___errno_location
.text:00000000000068E5                 mov     [rbp+n], rax
.text:00000000000068EC                 mov     eax, [rax]
.text:00000000000068EE                 mov     [rbp+var_3F8], rbx
.text:00000000000068F5                 mov     [rbp-424h], eax
.text:00000000000068FB                 nop     dword ptr [rax+rax+00h]
.text:0000000000006900
.text:0000000000006900 loc_6900:                               ; CODE XREF: vasnprintf+637↓j
.text:0000000000006900                                         ; vasnprintf+68D↓j ...
.text:0000000000006900                 mov     rax, [rbp+n]
.text:0000000000006907                 mov     rbx, r12
.text:000000000000690A                 mov     r10d, 7FFFFFFFh
.text:0000000000006910                 sub     rbx, r14
.text:0000000000006913                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000691D                 cmp     rbx, 7FFFFFFFh
.text:0000000000006924                 mov     dword ptr [rax], 0
.text:000000000000692A                 mov     eax, dword ptr [rbp+var_3D0]
.text:0000000000006930                 cmovbe  r10, rbx
.text:0000000000006934                 cmp     eax, 11h        ; switch 18 cases
.text:0000000000006937                 ja      def_694B        ; jumptable 000000000000694B default case, case 0
.text:0000000000006937                                         ; jumptable 0000000000006EF0 default case
.text:000000000000693D                 lea     rsi, jpt_694B
.text:0000000000006944                 movsxd  rax, ds:(jpt_694B - 9730h)[rsi+rax*4]
.text:0000000000006948                 add     rax, rsi
.text:000000000000694B                 jmp     rax             ; switch jump
.text:000000000000694B ; ---------------------------------------------------------------------------
.text:000000000000694D                 align 10h
.text:0000000000006950
.text:0000000000006950 loc_6950:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006950                                         ; DATA XREF: .rodata:jpt_694B↓o
.text:0000000000006950                 mov     rax, [r13+50h]  ; jumptable 000000000000694B cases 7-10,15-17
.text:0000000000006954                 lea     rdi, [r15+r14]
.text:0000000000006958                 shl     rax, 5
.text:000000000000695C                 add     rax, [rbp+var_3A8]
.text:0000000000006963                 mov     r9, [rax+10h]
.text:0000000000006967                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000696D                 cmp     eax, 1
.text:0000000000006970                 jz      loc_6E38
.text:0000000000006976                 cmp     eax, 2
.text:0000000000006979                 jz      loc_6E20
.text:000000000000697F                 sub     rsp, 8
.text:0000000000006983                 push    [rbp+var_3F0]
.text:0000000000006989
.text:0000000000006989 loc_6989:                               ; CODE XREF: vasnprintf+CBE↓j
.text:0000000000006989                 mov     r8, [rbp+var_3D8]
.text:0000000000006990                 mov     rsi, r10
.text:0000000000006993                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000699A                 mov     edx, 1
.text:000000000000699F                 xor     eax, eax
.text:00000000000069A1                 mov     [rbp+var_430], r10
.text:00000000000069A8                 call    ___snprintf_chk
.text:00000000000069AD                 pop     rsi
.text:00000000000069AE                 pop     rdi
.text:00000000000069AF                 mov     r10, [rbp+var_430]
.text:00000000000069B6
.text:00000000000069B6 loc_69B6:                               ; CODE XREF: vasnprintf+83D↓j
.text:00000000000069B6                                         ; vasnprintf+8BE↓j ...
.text:00000000000069B6                 mov     ecx, [rbp+var_3BC]
.text:00000000000069BC                 test    ecx, ecx
.text:00000000000069BE                 js      loc_6AFC
.text:00000000000069C4
.text:00000000000069C4 loc_69C4:                               ; CODE XREF: vasnprintf+706↓j
.text:00000000000069C4                 movsxd  rdx, ecx
.text:00000000000069C7                 cmp     rdx, r10
.text:00000000000069CA                 jnb     short loc_69DA
.text:00000000000069CC                 add     rdx, r15
.text:00000000000069CF                 cmp     byte ptr [rdx+r14], 0
.text:00000000000069D4                 jnz     def_694B        ; jumptable 000000000000694B default case, case 0
.text:00000000000069D4                                         ; jumptable 0000000000006EF0 default case
.text:00000000000069DA
.text:00000000000069DA loc_69DA:                               ; CODE XREF: vasnprintf+5DA↑j
.text:00000000000069DA                 cmp     ecx, eax
.text:00000000000069DC                 jge     short loc_69E6
.text:00000000000069DE
.text:00000000000069DE loc_69DE:                               ; CODE XREF: vasnprintf+71F↓j
.text:00000000000069DE                 mov     [rbp+var_3BC], eax
.text:00000000000069E4                 mov     ecx, eax
.text:00000000000069E6
.text:00000000000069E6 loc_69E6:                               ; CODE XREF: vasnprintf+5EC↑j
.text:00000000000069E6                 lea     eax, [rcx+1]
.text:00000000000069E9                 cmp     rax, r10
.text:00000000000069EC                 jb      loc_7220
.text:00000000000069F2                 cmp     rbx, 7FFFFFFEh
.text:00000000000069F9                 ja      loc_7240
.text:00000000000069FF                 lea     rsi, [r12+r12]
.text:0000000000006A03                 lea     edx, [rcx+2]
.text:0000000000006A06                 test    r12, r12
.text:0000000000006A09                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A10                 cmovns  rax, rsi
.text:0000000000006A14                 add     rdx, r14
.text:0000000000006A17                 jb      loc_74D8
.text:0000000000006A1D                 cmp     rax, rdx
.text:0000000000006A20                 cmovb   rax, rdx
.text:0000000000006A24                 cmp     r12, rax
.text:0000000000006A27                 jnb     loc_6900
.text:0000000000006A2D                 test    r12, r12
.text:0000000000006A30                 js      loc_6561
.text:0000000000006A36                 cmp     rsi, rax
.text:0000000000006A39                 mov     r12, rsi
.text:0000000000006A3C                 jnb     short loc_6A4B
.text:0000000000006A3E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A42                 jz      loc_6561
.text:0000000000006A48                 mov     r12, rax
.text:0000000000006A4B
.text:0000000000006A4B loc_6A4B:                               ; CODE XREF: vasnprintf+64C↑j
.text:0000000000006A4B                 cmp     r15, [rbp+src]
.text:0000000000006A52                 setz    bl
.text:0000000000006A55                 test    r15, r15
.text:0000000000006A58                 jz      loc_6DE0
.text:0000000000006A5E                 test    bl, bl
.text:0000000000006A60                 jnz     loc_6DE0
.text:0000000000006A66                 mov     rsi, r12        ; size
.text:0000000000006A69                 mov     rdi, r15        ; ptr
.text:0000000000006A6C                 call    _realloc
.text:0000000000006A71                 test    rax, rax
.text:0000000000006A74                 jz      loc_6561
.text:0000000000006A7A                 mov     r15, rax
.text:0000000000006A7D                 jmp     loc_6900
.text:0000000000006A7D ; ---------------------------------------------------------------------------
.text:0000000000006A82                 align 8
.text:0000000000006A88
.text:0000000000006A88 loc_6A88:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006A88                                         ; DATA XREF: .rodata:jpt_694B↓o
.text:0000000000006A88                 mov     rax, [r13+50h]  ; jumptable 000000000000694B cases 5,6,13,14
.text:0000000000006A8C                 lea     rdi, [r15+r14]
.text:0000000000006A90                 shl     rax, 5
.text:0000000000006A94                 add     rax, [rbp+var_3A8]
.text:0000000000006A9B                 mov     r9d, [rax+10h]
.text:0000000000006A9F                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006AA5                 cmp     eax, 1
.text:0000000000006AA8                 jz      loc_6CE0
.text:0000000000006AAE
.text:0000000000006AAE loc_6AAE:                               ; CODE XREF: vasnprintf+8E9↓j
.text:0000000000006AAE                                         ; vasnprintf+9B1↓j ...
.text:0000000000006AAE                 cmp     eax, 2
.text:0000000000006AB1                 jz      loc_6D28
.text:0000000000006AB7
.text:0000000000006AB7 loc_6AB7:                               ; CODE XREF: vasnprintf+92E↓j
.text:0000000000006AB7                 sub     rsp, 8
.text:0000000000006ABB                 push    [rbp+var_3F0]
.text:0000000000006AC1
.text:0000000000006AC1 loc_6AC1:                               ; CODE XREF: vasnprintf+8FF↓j
.text:0000000000006AC1                 mov     r8, [rbp+var_3D8]
.text:0000000000006AC8                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006ACF                 mov     edx, 1
.text:0000000000006AD4                 mov     rsi, r10
.text:0000000000006AD7                 xor     eax, eax
.text:0000000000006AD9                 mov     [rbp+var_430], r10
.text:0000000000006AE0                 call    ___snprintf_chk
.text:0000000000006AE5                 pop     rdx
.text:0000000000006AE6                 pop     rcx
.text:0000000000006AE7                 mov     ecx, [rbp+var_3BC]
.text:0000000000006AED                 mov     r10, [rbp+var_430]
.text:0000000000006AF4                 test    ecx, ecx
.text:0000000000006AF6                 jns     loc_69C4
.text:0000000000006AFC
.text:0000000000006AFC loc_6AFC:                               ; CODE XREF: vasnprintf+5CE↑j
.text:0000000000006AFC                 mov     rdi, [rbp+var_3F8]
.text:0000000000006B03                 cmp     byte ptr [rdi+1], 0
.text:0000000000006B07                 jnz     loc_6E48
.text:0000000000006B0D                 test    eax, eax
.text:0000000000006B0F                 jns     loc_69DE
.text:0000000000006B15                 mov     rax, [rbp+n]
.text:0000000000006B1C                 mov     ebx, [rax]
.text:0000000000006B1E                 test    ebx, ebx
.text:0000000000006B20                 jnz     short loc_6B40
.text:0000000000006B22                 movzx   eax, byte ptr [r13+48h]
.text:0000000000006B27                 mov     ebx, 16h
.text:0000000000006B2C                 and     eax, 0FFFFFFEFh
.text:0000000000006B2F                 cmp     al, 63h ; 'c'
.text:0000000000006B31                 mov     eax, 54h ; 'T'
.text:0000000000006B36                 cmovz   ebx, eax
.text:0000000000006B39                 nop     dword ptr [rax+00000000h]
.text:0000000000006B40
.text:0000000000006B40 loc_6B40:                               ; CODE XREF: vasnprintf+730↑j
.text:0000000000006B40                 cmp     r15, [rbp+src]
.text:0000000000006B47                 jz      short loc_6B52
.text:0000000000006B49                 test    r15, r15
.text:0000000000006B4C                 jnz     loc_72FC
.text:0000000000006B52
.text:0000000000006B52 loc_6B52:                               ; CODE XREF: vasnprintf+757↑j
.text:0000000000006B52                                         ; vasnprintf+F14↓j
.text:0000000000006B52                 mov     rax, [rbp+ptr]
.text:0000000000006B59                 test    rax, rax
.text:0000000000006B5C                 jz      short loc_6B66
.text:0000000000006B5E                 mov     rdi, rax        ; ptr
.text:0000000000006B61                 call    _free
.text:0000000000006B66
.text:0000000000006B66 loc_6B66:                               ; CODE XREF: vasnprintf+76C↑j
.text:0000000000006B66                 mov     rax, [rbp+var_408]
.text:0000000000006B6D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006B74                 add     rax, 20h ; ' '
.text:0000000000006B78                 cmp     rdi, rax
.text:0000000000006B7B                 jz      short loc_6B82
.text:0000000000006B7D                 call    _free
.text:0000000000006B82
.text:0000000000006B82 loc_6B82:                               ; CODE XREF: vasnprintf+78B↑j
.text:0000000000006B82                 mov     rax, [rbp+var_410]
.text:0000000000006B89                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006B90                 add     rax, 10h
.text:0000000000006B94                 cmp     rdi, rax
.text:0000000000006B97                 jz      short loc_6B9E
.text:0000000000006B99                 call    _free
.text:0000000000006B9E
.text:0000000000006B9E loc_6B9E:                               ; CODE XREF: vasnprintf+7A7↑j
.text:0000000000006B9E                 mov     rax, [rbp+n]
.text:0000000000006BA5                 xor     r15d, r15d
.text:0000000000006BA8                 mov     [rax], ebx
.text:0000000000006BAA                 jmp     loc_65CF
.text:0000000000006BAA ; ---------------------------------------------------------------------------
.text:0000000000006BAF                 align 10h
.text:0000000000006BB0
.text:0000000000006BB0 loc_6BB0:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006BB0                                         ; DATA XREF: .rodata:jpt_694B↓o
.text:0000000000006BB0                 mov     rax, [r13+50h]  ; jumptable 000000000000694B case 12
.text:0000000000006BB4                 lea     rdi, [r15+r14]
.text:0000000000006BB8                 shl     rax, 5
.text:0000000000006BBC                 add     rax, [rbp+var_3A8]
.text:0000000000006BC3                 fld     tbyte ptr [rax+10h]
.text:0000000000006BC6                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006BCC                 cmp     eax, 1
.text:0000000000006BCF                 jz      loc_7200
.text:0000000000006BD5                 cmp     eax, 2
.text:0000000000006BD8                 jnz     loc_70A0
.text:0000000000006BDE                 mov     eax, [rbp+var_3B4]
.text:0000000000006BE4                 sub     rsp, 8
.text:0000000000006BE8                 push    [rbp+var_3F0]
.text:0000000000006BEE                 mov     r9d, [rbp+var_3B8]
.text:0000000000006BF5                 mov     r8, [rbp+var_3D8]
.text:0000000000006BFC                 mov     rsi, r10
.text:0000000000006BFF                 sub     rsp, 18h
.text:0000000000006C03                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006C0A                 mov     edx, 1
.text:0000000000006C0F                 fstp    [rsp+458h+var_450]
.text:0000000000006C13                 push    rax
.text:0000000000006C14                 xor     eax, eax
.text:0000000000006C16                 mov     [rbp+var_430], r10
.text:0000000000006C1D                 call    ___snprintf_chk
.text:0000000000006C22                 add     rsp, 30h
.text:0000000000006C26                 mov     r10, [rbp+var_430]
.text:0000000000006C2D                 jmp     loc_69B6
.text:0000000000006C2D ; ---------------------------------------------------------------------------
.text:0000000000006C32                 align 8
.text:0000000000006C38
.text:0000000000006C38 loc_6C38:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006C38                                         ; DATA XREF: .rodata:jpt_694B↓o
.text:0000000000006C38                 mov     rax, [r13+50h]  ; jumptable 000000000000694B case 11
.text:0000000000006C3C                 lea     rdi, [r15+r14]
.text:0000000000006C40                 shl     rax, 5
.text:0000000000006C44                 add     rax, [rbp+var_3A8]
.text:0000000000006C4B                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000006C50                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006C56                 cmp     eax, 1
.text:0000000000006C59                 jz      loc_71F0
.text:0000000000006C5F                 cmp     eax, 2
.text:0000000000006C62                 jnz     loc_7060
.text:0000000000006C68                 mov     eax, [rbp+var_3B4]
.text:0000000000006C6E                 push    [rbp+var_3F0]
.text:0000000000006C74                 push    rax
.text:0000000000006C75
.text:0000000000006C75 loc_6C75:                               ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000006C75                 mov     r9d, [rbp+var_3B8]
.text:0000000000006C7C                 mov     r8, [rbp+var_3D8]
.text:0000000000006C83                 mov     rsi, r10
.text:0000000000006C86                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006C8D                 mov     edx, 1
.text:0000000000006C92                 mov     eax, 1
.text:0000000000006C97                 mov     [rbp+var_430], r10
.text:0000000000006C9E                 call    ___snprintf_chk
.text:0000000000006CA3                 pop     r8
.text:0000000000006CA5                 mov     r10, [rbp+var_430]
.text:0000000000006CAC                 pop     r9
.text:0000000000006CAE                 jmp     loc_69B6
.text:0000000000006CAE ; ---------------------------------------------------------------------------
.text:0000000000006CB3                 align 8
.text:0000000000006CB8
.text:0000000000006CB8 loc_6CB8:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006CB8                                         ; DATA XREF: .rodata:jpt_694B↓o
.text:0000000000006CB8                 mov     rax, [r13+50h]  ; jumptable 000000000000694B case 4
.text:0000000000006CBC                 lea     rdi, [r15+r14]
.text:0000000000006CC0                 shl     rax, 5
.text:0000000000006CC4                 add     rax, [rbp+var_3A8]
.text:0000000000006CCB                 movzx   r9d, word ptr [rax+10h]
.text:0000000000006CD0                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006CD6                 cmp     eax, 1
.text:0000000000006CD9                 jnz     loc_6AAE
.text:0000000000006CDF                 nop
.text:0000000000006CE0
.text:0000000000006CE0 loc_6CE0:                               ; CODE XREF: vasnprintf+6B8↑j
.text:0000000000006CE0                                         ; vasnprintf+929↓j ...
.text:0000000000006CE0                 push    [rbp+var_3F0]
.text:0000000000006CE6                 push    r9
.text:0000000000006CE8
.text:0000000000006CE8 loc_6CE8:                               ; CODE XREF: vasnprintf+A50↓j
.text:0000000000006CE8                 mov     r9d, [rbp+var_3B8]
.text:0000000000006CEF                 jmp     loc_6AC1
.text:0000000000006CEF ; ---------------------------------------------------------------------------
.text:0000000000006CF4                 align 8
.text:0000000000006CF8
.text:0000000000006CF8 loc_6CF8:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006CF8                                         ; DATA XREF: .rodata:jpt_694B↓o
.text:0000000000006CF8                 mov     rax, [r13+50h]  ; jumptable 000000000000694B case 3
.text:0000000000006CFC                 lea     rdi, [r15+r14]
.text:0000000000006D00                 shl     rax, 5
.text:0000000000006D04                 add     rax, [rbp+var_3A8]
.text:0000000000006D0B                 movsx   r9d, word ptr [rax+10h]
.text:0000000000006D10                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006D16                 cmp     eax, 1
.text:0000000000006D19                 jz      short loc_6CE0
.text:0000000000006D1B                 cmp     eax, 2
.text:0000000000006D1E                 jnz     loc_6AB7
.text:0000000000006D24                 nop     dword ptr [rax+00h]
.text:0000000000006D28
.text:0000000000006D28 loc_6D28:                               ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000006D28                 sub     rsp, 8
.text:0000000000006D2C                 push    [rbp+var_3F0]
.text:0000000000006D32                 push    r9
.text:0000000000006D34
.text:0000000000006D34 loc_6D34:                               ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000006D34                 mov     eax, [rbp+var_3B4]
.text:0000000000006D3A                 push    rax
.text:0000000000006D3B
.text:0000000000006D3B loc_6D3B:                               ; CODE XREF: vasnprintf+E21↓j
.text:0000000000006D3B                 mov     r9d, [rbp+var_3B8]
.text:0000000000006D42                 mov     r8, [rbp+var_3D8]
.text:0000000000006D49                 mov     rsi, r10
.text:0000000000006D4C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D53                 mov     edx, 1
.text:0000000000006D58                 xor     eax, eax
.text:0000000000006D5A                 mov     [rbp+var_430], r10
.text:0000000000006D61                 call    ___snprintf_chk
.text:0000000000006D66                 add     rsp, 20h
.text:0000000000006D6A                 mov     r10, [rbp+var_430]
.text:0000000000006D71                 jmp     loc_69B6
.text:0000000000006D71 ; ---------------------------------------------------------------------------
.text:0000000000006D76                 align 20h
.text:0000000000006D80
.text:0000000000006D80 loc_6D80:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006D80                                         ; DATA XREF: .rodata:jpt_694B↓o
.text:0000000000006D80                 mov     rax, [r13+50h]  ; jumptable 000000000000694B case 2
.text:0000000000006D84                 lea     rdi, [r15+r14]
.text:0000000000006D88                 shl     rax, 5
.text:0000000000006D8C                 add     rax, [rbp+var_3A8]
.text:0000000000006D93                 movzx   r9d, byte ptr [rax+10h]
.text:0000000000006D98                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006D9E                 cmp     eax, 1
.text:0000000000006DA1                 jnz     loc_6AAE
.text:0000000000006DA7                 jmp     loc_6CE0
.text:0000000000006DA7 ; ---------------------------------------------------------------------------
.text:0000000000006DAC                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 loc_6DB0:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006DB0                                         ; DATA XREF: .rodata:jpt_694B↓o
.text:0000000000006DB0                 mov     rax, [r13+50h]  ; jumptable 000000000000694B case 1
.text:0000000000006DB4                 lea     rdi, [r15+r14]
.text:0000000000006DB8                 shl     rax, 5
.text:0000000000006DBC                 add     rax, [rbp+var_3A8]
.text:0000000000006DC3                 movsx   r9d, byte ptr [rax+10h]
.text:0000000000006DC8                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006DCE                 cmp     eax, 1
.text:0000000000006DD1                 jnz     loc_6AAE
.text:0000000000006DD7                 jmp     loc_6CE0
.text:0000000000006DD7 ; ---------------------------------------------------------------------------
.text:0000000000006DDC                 align 20h
.text:0000000000006DE0
.text:0000000000006DE0 loc_6DE0:                               ; CODE XREF: vasnprintf+668↑j
.text:0000000000006DE0                                         ; vasnprintf+670↑j
.text:0000000000006DE0                 mov     rdi, r12        ; size
.text:0000000000006DE3                 call    _malloc
.text:0000000000006DE8                 test    rax, rax
.text:0000000000006DEB                 mov     rcx, rax
.text:0000000000006DEE                 jz      loc_6561
.text:0000000000006DF4                 test    r14, r14
.text:0000000000006DF7                 jz      loc_6EB0
.text:0000000000006DFD                 test    bl, bl
.text:0000000000006DFF                 jz      loc_6EB0
.text:0000000000006E05                 mov     rsi, r15        ; src
.text:0000000000006E08                 mov     rdx, r14        ; n
.text:0000000000006E0B                 mov     rdi, rax        ; dest
.text:0000000000006E0E                 call    _memcpy
.text:0000000000006E13                 mov     r15, rax
.text:0000000000006E16                 jmp     loc_6900
.text:0000000000006E16 ; ---------------------------------------------------------------------------
.text:0000000000006E1B                 align 20h
.text:0000000000006E20
.text:0000000000006E20 loc_6E20:                               ; CODE XREF: vasnprintf+589↑j
.text:0000000000006E20                 sub     rsp, 8
.text:0000000000006E24                 push    [rbp+var_3F0]
.text:0000000000006E2A                 push    r9
.text:0000000000006E2C                 jmp     loc_6D34
.text:0000000000006E2C ; ---------------------------------------------------------------------------
.text:0000000000006E31                 align 8
.text:0000000000006E38
.text:0000000000006E38 loc_6E38:                               ; CODE XREF: vasnprintf+580↑j
.text:0000000000006E38                 push    [rbp+var_3F0]
.text:0000000000006E3E                 push    r9
.text:0000000000006E40                 jmp     loc_6CE8
.text:0000000000006E40 ; ---------------------------------------------------------------------------
.text:0000000000006E45                 align 8
.text:0000000000006E48
.text:0000000000006E48 loc_6E48:                               ; CODE XREF: vasnprintf+717↑j
.text:0000000000006E48                 mov     byte ptr [rdi+1], 0
.text:0000000000006E4C                 jmp     loc_6900
.text:0000000000006E4C ; ---------------------------------------------------------------------------
.text:0000000000006E51                 align 8
.text:0000000000006E58
.text:0000000000006E58 loc_6E58:                               ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000006E58                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E5C                 jnz     def_694B        ; jumptable 000000000000694B default case, case 0
.text:0000000000006E5C                                         ; jumptable 0000000000006EF0 default case
.text:0000000000006E62                 mov     rax, r14
.text:0000000000006E65                 add     rax, 1
.text:0000000000006E69                 mov     rbx, rax
.text:0000000000006E6C                 jnb     loc_6EF8
.text:0000000000006E72                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E76                 jnz     loc_6555
.text:0000000000006E7C                 mov     rbx, r12
.text:0000000000006E7F
.text:0000000000006E7F loc_6E7F:                               ; CODE XREF: vasnprintf+B0B↓j
.text:0000000000006E7F                                         ; vasnprintf+B58↓j ...
.text:0000000000006E7F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000006E84
.text:0000000000006E84 loc_6E84:                               ; CODE XREF: vasnprintf+C46↓j
.text:0000000000006E84                                         ; vasnprintf+D76↓j ...
.text:0000000000006E84                 mov     r8, [r13+8]
.text:0000000000006E88                 add     r13, 58h ; 'X'
.text:0000000000006E8C                 mov     rcx, [r13+0]
.text:0000000000006E90                 add     [rbp+var_400], 1
.text:0000000000006E98                 cmp     rcx, r8
.text:0000000000006E9B                 jnz     loc_6539
.text:0000000000006EA1
.text:0000000000006EA1 loc_6EA1:                               ; CODE XREF: vasnprintf+143↑j
.text:0000000000006EA1                 mov     r14, rbx
.text:0000000000006EA4                 jmp     loc_66A3
.text:0000000000006EA4 ; ---------------------------------------------------------------------------
.text:0000000000006EA9                 align 10h
.text:0000000000006EB0
.text:0000000000006EB0 loc_6EB0:                               ; CODE XREF: vasnprintf+A07↑j
.text:0000000000006EB0                                         ; vasnprintf+A0F↑j
.text:0000000000006EB0                 mov     r15, rcx
.text:0000000000006EB3                 jmp     loc_6900
.text:0000000000006EB8 ; ---------------------------------------------------------------------------
.text:0000000000006EB8
.text:0000000000006EB8 loc_6EB8:                               ; CODE XREF: vasnprintf+9A↑j
.text:0000000000006EB8                                         ; vasnprintf+AE↑j ...
.text:0000000000006EB8                 call    ___errno_location
.text:0000000000006EBD                 mov     [rbp+n], rax
.text:0000000000006EC4                 jmp     loc_6587
.text:0000000000006EC4 ; ---------------------------------------------------------------------------
.text:0000000000006EC9                 align 10h
.text:0000000000006ED0
.text:0000000000006ED0 loc_6ED0:                               ; CODE XREF: vasnprintf+2FC↑j
.text:0000000000006ED0                 mov     edx, edi
.text:0000000000006ED2                 sub     edx, 12h        ; switch 5 cases
.text:0000000000006ED5                 cmp     edx, 4
.text:0000000000006ED8                 ja      def_694B        ; jumptable 000000000000694B default case, case 0
.text:0000000000006ED8                                         ; jumptable 0000000000006EF0 default case
.text:0000000000006EDE                 lea     rdi, jpt_6EF0
.text:0000000000006EE5                 mov     rax, [rax+10h]
.text:0000000000006EE9                 movsxd  rdx, ds:(jpt_6EF0 - 9778h)[rdi+rdx*4]
.text:0000000000006EED                 add     rdx, rdi
.text:0000000000006EF0                 jmp     rdx             ; switch jump
.text:0000000000006EF0 ; ---------------------------------------------------------------------------
.text:0000000000006EF2                 align 8
.text:0000000000006EF8
.text:0000000000006EF8 loc_6EF8:                               ; CODE XREF: vasnprintf+A7C↑j
.text:0000000000006EF8                 cmp     r12, rax
.text:0000000000006EFB                 jnb     short loc_6E7F
.text:0000000000006EFD                 test    r12, r12
.text:0000000000006F00                 jnz     loc_72D0
.text:0000000000006F06                 cmp     rax, 0Ch
.text:0000000000006F0A                 ja      loc_72E2
.text:0000000000006F10                 mov     r12d, 0Ch
.text:0000000000006F16
.text:0000000000006F16 loc_6F16:                               ; CODE XREF: vasnprintf+EEC↓j
.text:0000000000006F16                                         ; vasnprintf+EFF↓j
.text:0000000000006F16                 cmp     r15, [rbp+src]
.text:0000000000006F1D                 setz    dl
.text:0000000000006F20                 test    r15, r15
.text:0000000000006F23                 jz      loc_7190
.text:0000000000006F29                 test    dl, dl
.text:0000000000006F2B                 jnz     loc_7190
.text:0000000000006F31                 mov     rsi, r12        ; size
.text:0000000000006F34                 mov     rdi, r15        ; ptr
.text:0000000000006F37                 call    _realloc
.text:0000000000006F3C                 test    rax, rax
.text:0000000000006F3F                 jz      loc_703B
.text:0000000000006F45                 mov     r15, rax
.text:0000000000006F48                 jmp     loc_6E7F
.text:0000000000006F48 ; ---------------------------------------------------------------------------
.text:0000000000006F4D                 align 10h
.text:0000000000006F50
.text:0000000000006F50 loc_6F50:                               ; CODE XREF: vasnprintf+42E↑j
.text:0000000000006F50                 mov     dword ptr [rbp+var_3E0], 0
.text:0000000000006F5A                 jmp     loc_6847
.text:0000000000006F5A ; ---------------------------------------------------------------------------
.text:0000000000006F5F                 align 20h
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000006F60                 js      loc_6555
.text:0000000000006F66                 add     r12, r12
.text:0000000000006F69                 cmp     r12, rax
.text:0000000000006F6C                 jnb     loc_6646
.text:0000000000006F72
.text:0000000000006F72 loc_6F72:                               ; CODE XREF: vasnprintf+24A↑j
.text:0000000000006F72                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F76                 jz      loc_6555
.text:0000000000006F7C                 cmp     r15, [rbp+src]
.text:0000000000006F83                 mov     r12, rax
.text:0000000000006F86                 setz    dl
.text:0000000000006F89                 test    r15, r15
.text:0000000000006F8C                 jnz     loc_6659
.text:0000000000006F92                 nop     word ptr [rax+rax+00h]
.text:0000000000006F98
.text:0000000000006F98 loc_6F98:                               ; CODE XREF: vasnprintf+263↑j
.text:0000000000006F98                                         ; vasnprintf+26B↑j
.text:0000000000006F98                 mov     rdi, r12        ; size
.text:0000000000006F9B                 mov     [rbp+var_3E0], r8
.text:0000000000006FA2                 mov     byte ptr [rbp+var_3D0], dl
.text:0000000000006FA8                 mov     [rbp+n], rcx
.text:0000000000006FAF                 call    _malloc
.text:0000000000006FB4                 test    rax, rax
.text:0000000000006FB7                 mov     r9, rax
.text:0000000000006FBA                 mov     rcx, [rbp+n]
.text:0000000000006FC1                 movzx   edx, byte ptr [rbp+var_3D0]
.text:0000000000006FC8                 mov     r8, [rbp+var_3E0]
.text:0000000000006FCF                 jz      loc_6555
.text:0000000000006FD5                 test    rbx, rbx
.text:0000000000006FD8                 jz      loc_71E0
.text:0000000000006FDE                 test    dl, dl
.text:0000000000006FE0                 jz      loc_71E0
.text:0000000000006FE6                 mov     rsi, r15        ; src
.text:0000000000006FE9                 mov     rdx, rbx        ; n
.text:0000000000006FEC                 mov     rdi, rax        ; dest
.text:0000000000006FEF                 mov     [rbp+var_3D0], r8
.text:0000000000006FF6                 mov     [rbp+n], rcx
.text:0000000000006FFD                 call    _memcpy
.text:0000000000007002                 mov     rcx, [rbp+n]
.text:0000000000007009                 mov     r15, rax
.text:000000000000700C                 mov     r8, [rbp+var_3D0]
.text:0000000000007013                 jmp     loc_6694
.text:0000000000007013 ; ---------------------------------------------------------------------------
.text:0000000000007018                 align 20h
.text:0000000000007020
.text:0000000000007020 loc_7020:                               ; CODE XREF: vasnprintf+15F↑j
.text:0000000000007020                 mov     r14, r12
.text:0000000000007023                 jmp     loc_6694
.text:0000000000007023 ; ---------------------------------------------------------------------------
.text:0000000000007028                 align 10h
.text:0000000000007030
.text:0000000000007030 loc_7030:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007030                                         ; DATA XREF: .rodata:jpt_6EF0↓o
.text:0000000000007030                 mov     [rax], r14      ; jumptable 0000000000006EF0 cases 21,22
.text:0000000000007033                 mov     rbx, r14
.text:0000000000007036                 jmp     loc_6E84
.text:000000000000703B ; ---------------------------------------------------------------------------
.text:000000000000703B
.text:000000000000703B loc_703B:                               ; CODE XREF: vasnprintf+29B↑j
.text:000000000000703B                                         ; vasnprintf+B4F↑j ...
.text:000000000000703B                 call    ___errno_location
.text:0000000000007040                 mov     [rbp+n], rax
.text:0000000000007047                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007050
.text:0000000000007050 loc_7050:                               ; CODE XREF: vasnprintf+17D↑j
.text:0000000000007050                 mov     rdi, r15        ; ptr
.text:0000000000007053                 call    _free
.text:0000000000007058                 jmp     loc_6573
.text:0000000000007058 ; ---------------------------------------------------------------------------
.text:000000000000705D                 align 20h
.text:0000000000007060
.text:0000000000007060 loc_7060:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000007060                 mov     r9, [rbp+var_3F0]
.text:0000000000007067                 mov     r8, [rbp+var_3D8]
.text:000000000000706E                 mov     rsi, r10
.text:0000000000007071                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007078                 mov     edx, 1
.text:000000000000707D                 mov     eax, 1
.text:0000000000007082                 mov     [rbp+var_430], r10
.text:0000000000007089                 call    ___snprintf_chk
.text:000000000000708E                 mov     r10, [rbp+var_430]
.text:0000000000007095                 jmp     loc_69B6
.text:0000000000007095 ; ---------------------------------------------------------------------------
.text:000000000000709A                 align 20h
.text:00000000000070A0
.text:00000000000070A0 loc_70A0:                               ; CODE XREF: vasnprintf+7E8↑j
.text:00000000000070A0                 sub     rsp, 10h
.text:00000000000070A4                 mov     r9, [rbp+var_3F0]
.text:00000000000070AB                 fstp    [rsp+440h+var_440]
.text:00000000000070AE                 jmp     loc_6989
.text:00000000000070AE ; ---------------------------------------------------------------------------
.text:00000000000070B3                 align 8
.text:00000000000070B8
.text:00000000000070B8 loc_70B8:                               ; CODE XREF: vasnprintf+4A3↑j
.text:00000000000070B8                 js      loc_6555
.text:00000000000070BE                 add     r12, r12
.text:00000000000070C1                 cmp     r12, rax
.text:00000000000070C4                 jnb     loc_68A9
.text:00000000000070CA                 nop     word ptr [rax+rax+00h]
.text:00000000000070D0
.text:00000000000070D0 loc_70D0:                               ; CODE XREF: vasnprintf+4AD↑j
.text:00000000000070D0                                         ; vasnprintf+1114↓j
.text:00000000000070D0                 test    rdx, rdx
.text:00000000000070D3                 jnz     loc_6555
.text:00000000000070D9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000070DD                 jz      loc_6555
.text:00000000000070E3                 cmp     r15, [rbp+src]
.text:00000000000070EA                 mov     r12, rax
.text:00000000000070ED                 setz    dl
.text:00000000000070F0                 test    r15, r15
.text:00000000000070F3                 jnz     loc_68BC
.text:00000000000070F9                 nop     dword ptr [rax+00000000h]
.text:0000000000007100
.text:0000000000007100 loc_7100:                               ; CODE XREF: vasnprintf+4C6↑j
.text:0000000000007100                                         ; vasnprintf+4CE↑j
.text:0000000000007100                 mov     rdi, r12        ; size
.text:0000000000007103                 mov     byte ptr [rbp+n], dl
.text:0000000000007109                 call    _malloc
.text:000000000000710E                 test    rax, rax
.text:0000000000007111                 mov     rcx, rax
.text:0000000000007114                 movzx   edx, byte ptr [rbp+n]
.text:000000000000711B                 jz      loc_6555
.text:0000000000007121                 test    r14, r14
.text:0000000000007124                 jz      loc_72C0
.text:000000000000712A                 test    dl, dl
.text:000000000000712C                 jz      loc_72C0
.text:0000000000007132                 mov     rsi, r15        ; src
.text:0000000000007135                 mov     rdx, r14        ; n
.text:0000000000007138                 mov     rdi, rax        ; dest
.text:000000000000713B                 call    _memcpy
.text:0000000000007140                 mov     r15, rax
.text:0000000000007143                 jmp     loc_68DB
.text:0000000000007143 ; ---------------------------------------------------------------------------
.text:0000000000007148                 align 10h
.text:0000000000007150
.text:0000000000007150 loc_7150:                               ; CODE XREF: vasnprintf+402↑j
.text:0000000000007150                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000007153                 add     rbx, 1
.text:0000000000007157                 jmp     loc_680B
.text:0000000000007157 ; ---------------------------------------------------------------------------
.text:000000000000715C                 align 20h
.text:0000000000007160
.text:0000000000007160 loc_7160:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007160                                         ; DATA XREF: .rodata:jpt_6EF0↓o
.text:0000000000007160                 mov     [rax], r14b     ; jumptable 0000000000006EF0 case 18
.text:0000000000007163                 mov     rbx, r14
.text:0000000000007166                 jmp     loc_6E84
.text:0000000000007166 ; ---------------------------------------------------------------------------
.text:000000000000716B                 align 10h
.text:0000000000007170
.text:0000000000007170 loc_7170:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007170                                         ; DATA XREF: .rodata:jpt_6EF0↓o
.text:0000000000007170                 mov     [rax], r14d     ; jumptable 0000000000006EF0 case 20
.text:0000000000007173                 mov     rbx, r14
.text:0000000000007176                 jmp     loc_6E84
.text:0000000000007176 ; ---------------------------------------------------------------------------
.text:000000000000717B                 align 20h
.text:0000000000007180
.text:0000000000007180 loc_7180:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007180                                         ; DATA XREF: .rodata:jpt_6EF0↓o
.text:0000000000007180                 mov     [rax], r14w     ; jumptable 0000000000006EF0 case 19
.text:0000000000007184                 mov     rbx, r14
.text:0000000000007187                 jmp     loc_6E84
.text:0000000000007187 ; ---------------------------------------------------------------------------
.text:000000000000718C                 align 10h
.text:0000000000007190
.text:0000000000007190 loc_7190:                               ; CODE XREF: vasnprintf+B33↑j
.text:0000000000007190                                         ; vasnprintf+B3B↑j
.text:0000000000007190                 mov     rdi, r12        ; size
.text:0000000000007193                 mov     byte ptr [rbp+n], dl
.text:0000000000007199                 call    _malloc
.text:000000000000719E                 test    rax, rax
.text:00000000000071A1                 mov     rcx, rax
.text:00000000000071A4                 movzx   edx, byte ptr [rbp+n]
.text:00000000000071AB                 jz      loc_6555
.text:00000000000071B1                 test    r14, r14
.text:00000000000071B4                 jz      loc_72F4
.text:00000000000071BA                 test    dl, dl
.text:00000000000071BC                 jz      loc_72F4
.text:00000000000071C2                 mov     rsi, r15        ; src
.text:00000000000071C5                 mov     rdx, r14        ; n
.text:00000000000071C8                 mov     rdi, rax        ; dest
.text:00000000000071CB                 call    _memcpy
.text:00000000000071D0                 mov     r15, rax
.text:00000000000071D3                 jmp     loc_6E7F
.text:00000000000071D3 ; ---------------------------------------------------------------------------
.text:00000000000071D8                 align 20h
.text:00000000000071E0
.text:00000000000071E0 loc_71E0:                               ; CODE XREF: vasnprintf+BE8↑j
.text:00000000000071E0                                         ; vasnprintf+BF0↑j
.text:00000000000071E0                 mov     r15, r9
.text:00000000000071E3                 jmp     loc_6694
.text:00000000000071E3 ; ---------------------------------------------------------------------------
.text:00000000000071E8                 align 10h
.text:00000000000071F0
.text:00000000000071F0 loc_71F0:                               ; CODE XREF: vasnprintf+869↑j
.text:00000000000071F0                 sub     rsp, 8
.text:00000000000071F4                 push    [rbp+var_3F0]
.text:00000000000071FA                 jmp     loc_6C75
.text:00000000000071FA ; ---------------------------------------------------------------------------
.text:00000000000071FF                 align 20h
.text:0000000000007200
.text:0000000000007200 loc_7200:                               ; CODE XREF: vasnprintf+7DF↑j
.text:0000000000007200                 sub     rsp, 8
.text:0000000000007204                 push    [rbp+var_3F0]
.text:000000000000720A                 sub     rsp, 10h
.text:000000000000720E                 fstp    [rsp+450h+var_450]
.text:0000000000007211                 jmp     loc_6D3B
.text:0000000000007211 ; ---------------------------------------------------------------------------
.text:0000000000007216                 align 20h
.text:0000000000007220
.text:0000000000007220 loc_7220:                               ; CODE XREF: vasnprintf+5FC↑j
.text:0000000000007220                 mov     rax, [rbp+n]
.text:0000000000007227                 mov     edi, [rbp-424h]
.text:000000000000722D                 movsxd  rbx, ecx
.text:0000000000007230                 add     rbx, r14
.text:0000000000007233                 mov     [rax], edi
.text:0000000000007235                 jmp     loc_6E84
.text:0000000000007235 ; ---------------------------------------------------------------------------
.text:000000000000723A                 align 20h
.text:0000000000007240
.text:0000000000007240 loc_7240:                               ; CODE XREF: vasnprintf+609↑j
.text:0000000000007240                 cmp     r15, [rbp+src]
.text:0000000000007247                 jz      short loc_7252
.text:0000000000007249                 test    r15, r15
.text:000000000000724C                 jnz     loc_7309
.text:0000000000007252
.text:0000000000007252 loc_7252:                               ; CODE XREF: vasnprintf+E57↑j
.text:0000000000007252                                         ; vasnprintf+F21↓j
.text:0000000000007252                 mov     rax, [rbp+ptr]
.text:0000000000007259                 test    rax, rax
.text:000000000000725C                 jz      short loc_7266
.text:000000000000725E                 mov     rdi, rax        ; ptr
.text:0000000000007261                 call    _free
.text:0000000000007266
.text:0000000000007266 loc_7266:                               ; CODE XREF: vasnprintf+E6C↑j
.text:0000000000007266                 mov     rax, [rbp+var_408]
.text:000000000000726D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000007274                 add     rax, 20h ; ' '
.text:0000000000007278                 cmp     rdi, rax
.text:000000000000727B                 jz      short loc_7282
.text:000000000000727D                 call    _free
.text:0000000000007282
.text:0000000000007282 loc_7282:                               ; CODE XREF: vasnprintf+E8B↑j
.text:0000000000007282                 mov     rax, [rbp+var_410]
.text:0000000000007289                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000007290                 add     rax, 10h
.text:0000000000007294                 cmp     rdi, rax
.text:0000000000007297                 jz      short loc_729E
.text:0000000000007299                 call    _free
.text:000000000000729E
.text:000000000000729E loc_729E:                               ; CODE XREF: vasnprintf+EA7↑j
.text:000000000000729E                 mov     rax, [rbp+n]
.text:00000000000072A5                 xor     r15d, r15d
.text:00000000000072A8                 mov     dword ptr [rax], 4Bh ; 'K'
.text:00000000000072AE                 jmp     loc_65CF
.text:00000000000072AE ; ---------------------------------------------------------------------------
.text:00000000000072B3                 align 8
.text:00000000000072B8
.text:00000000000072B8 loc_72B8:                               ; CODE XREF: vasnprintf+60↑j
.text:00000000000072B8                 xor     r15d, r15d
.text:00000000000072BB                 jmp     loc_65CF
.text:00000000000072C0 ; ---------------------------------------------------------------------------
.text:00000000000072C0
.text:00000000000072C0 loc_72C0:                               ; CODE XREF: vasnprintf+D34↑j
.text:00000000000072C0                                         ; vasnprintf+D3C↑j
.text:00000000000072C0                 mov     r15, rcx
.text:00000000000072C3                 jmp     loc_68DB
.text:00000000000072C3 ; ---------------------------------------------------------------------------
.text:00000000000072C8                 align 10h
.text:00000000000072D0
.text:00000000000072D0 loc_72D0:                               ; CODE XREF: vasnprintf+B10↑j
.text:00000000000072D0                 js      loc_6555
.text:00000000000072D6                 add     r12, r12
.text:00000000000072D9                 cmp     r12, rax
.text:00000000000072DC                 jnb     loc_6F16
.text:00000000000072E2
.text:00000000000072E2 loc_72E2:                               ; CODE XREF: vasnprintf+B1A↑j
.text:00000000000072E2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000072E6                 jz      loc_6555
.text:00000000000072EC                 mov     r12, rax
.text:00000000000072EF                 jmp     loc_6F16
.text:00000000000072F4 ; ---------------------------------------------------------------------------
.text:00000000000072F4
.text:00000000000072F4 loc_72F4:                               ; CODE XREF: vasnprintf+DC4↑j
.text:00000000000072F4                                         ; vasnprintf+DCC↑j
.text:00000000000072F4                 mov     r15, rcx
.text:00000000000072F7                 jmp     loc_6E7F
.text:00000000000072FC ; ---------------------------------------------------------------------------
.text:00000000000072FC
.text:00000000000072FC loc_72FC:                               ; CODE XREF: vasnprintf+75C↑j
.text:00000000000072FC                 mov     rdi, r15        ; ptr
.text:00000000000072FF                 call    _free
.text:0000000000007304                 jmp     loc_6B52
.text:0000000000007309 ; ---------------------------------------------------------------------------
.text:0000000000007309
.text:0000000000007309 loc_7309:                               ; CODE XREF: vasnprintf+E5C↑j
.text:0000000000007309                 mov     rdi, r15        ; ptr
.text:000000000000730C                 call    _free
.text:0000000000007311                 jmp     loc_7252
.text:0000000000007316 ; ---------------------------------------------------------------------------
.text:0000000000007316
.text:0000000000007316 def_694B:                               ; CODE XREF: vasnprintf+2DD↑j
.text:0000000000007316                                         ; vasnprintf+43E↑j ...
.text:0000000000007316                 call    _abort          ; jumptable 000000000000694B default case, case 0
.text:0000000000007316                                         ; jumptable 0000000000006EF0 default case
.text:0000000000007316 ; ---------------------------------------------------------------------------
.text:000000000000731B                 align 20h
.text:0000000000007320
.text:0000000000007320 loc_7320:                               ; CODE XREF: vasnprintf+73↑j
.text:0000000000007320                 mov     rax, [rbp+var_408]
.text:0000000000007327                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000732E                 add     rax, 20h ; ' '
.text:0000000000007332                 cmp     rdi, rax
.text:0000000000007335                 jz      short loc_733C
.text:0000000000007337                 call    _free
.text:000000000000733C
.text:000000000000733C loc_733C:                               ; CODE XREF: vasnprintf+F45↑j
.text:000000000000733C                 mov     rax, [rbp+var_410]
.text:0000000000007343                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000734A                 add     rax, 10h
.text:000000000000734E                 cmp     rdi, rax
.text:0000000000007351                 jz      short loc_7358
.text:0000000000007353                 call    _free
.text:0000000000007358
.text:0000000000007358 loc_7358:                               ; CODE XREF: vasnprintf+F61↑j
.text:0000000000007358                 call    ___errno_location
.text:000000000000735D                 xor     r15d, r15d
.text:0000000000007360                 mov     dword ptr [rax], 16h
.text:0000000000007366                 jmp     loc_65CF
.text:000000000000736B ; ---------------------------------------------------------------------------
.text:000000000000736B
.text:000000000000736B loc_736B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:000000000000736B                 mov     rbx, r14
.text:000000000000736E                 xor     eax, eax
.text:0000000000007370                 add     rbx, 1
.text:0000000000007374                 jb      loc_7480
.text:000000000000737A                 cmp     r12, rbx
.text:000000000000737D                 jnb     short loc_73CC
.text:000000000000737F                 test    r12, r12
.text:0000000000007382                 jnz     loc_74B9
.text:0000000000007388                 cmp     rbx, 0Ch
.text:000000000000738C                 ja      loc_749E
.text:0000000000007392                 mov     r12d, 0Ch
.text:0000000000007398
.text:0000000000007398 loc_7398:                               ; CODE XREF: vasnprintf+10C4↓j
.text:0000000000007398                                         ; vasnprintf+10D5↓j
.text:0000000000007398                 cmp     r15, [rbp+src]
.text:000000000000739F                 setz    r13b
.text:00000000000073A3                 test    r15, r15
.text:00000000000073A6                 jz      loc_744C
.text:00000000000073AC                 test    r13b, r13b
.text:00000000000073AF                 jnz     loc_744C
.text:00000000000073B5                 mov     rsi, r12        ; size
.text:00000000000073B8                 mov     rdi, r15        ; ptr
.text:00000000000073BB                 call    _realloc
.text:00000000000073C0                 test    rax, rax
.text:00000000000073C3                 jz      loc_703B
.text:00000000000073C9                 mov     r15, rax
.text:00000000000073CC
.text:00000000000073CC loc_73CC:                               ; CODE XREF: vasnprintf+F8D↑j
.text:00000000000073CC                                         ; vasnprintf+108B↓j ...
.text:00000000000073CC                 cmp     r15, [rbp+src]
.text:00000000000073D3                 mov     byte ptr [r15+r14], 0
.text:00000000000073D8                 jz      short loc_73F1
.text:00000000000073DA                 cmp     r12, rbx
.text:00000000000073DD                 jbe     short loc_73F1
.text:00000000000073DF                 mov     rdi, r15        ; ptr
.text:00000000000073E2                 mov     rsi, rbx        ; size
.text:00000000000073E5                 call    _realloc
.text:00000000000073EA                 test    rax, rax
.text:00000000000073ED                 cmovnz  r15, rax
.text:00000000000073F1
.text:00000000000073F1 loc_73F1:                               ; CODE XREF: vasnprintf+FE8↑j
.text:00000000000073F1                                         ; vasnprintf+FED↑j
.text:00000000000073F1                 mov     rax, [rbp+ptr]
.text:00000000000073F8                 test    rax, rax
.text:00000000000073FB                 jz      short loc_7405
.text:00000000000073FD                 mov     rdi, rax        ; ptr
.text:0000000000007400                 call    _free
.text:0000000000007405
.text:0000000000007405 loc_7405:                               ; CODE XREF: vasnprintf+100B↑j
.text:0000000000007405                 mov     rax, [rbp+var_408]
.text:000000000000740C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000007413                 add     rax, 20h ; ' '
.text:0000000000007417                 cmp     rdi, rax
.text:000000000000741A                 jz      short loc_7421
.text:000000000000741C                 call    _free
.text:0000000000007421
.text:0000000000007421 loc_7421:                               ; CODE XREF: vasnprintf+102A↑j
.text:0000000000007421                 mov     rax, [rbp+var_410]
.text:0000000000007428                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000742F                 add     rax, 10h
.text:0000000000007433                 cmp     rdi, rax
.text:0000000000007436                 jz      short loc_743D
.text:0000000000007438                 call    _free
.text:000000000000743D
.text:000000000000743D loc_743D:                               ; CODE XREF: vasnprintf+1046↑j
.text:000000000000743D                 mov     rax, [rbp+var_418]
.text:0000000000007444                 mov     [rax], r14
.text:0000000000007447                 jmp     loc_65CF
.text:000000000000744C ; ---------------------------------------------------------------------------
.text:000000000000744C
.text:000000000000744C loc_744C:                               ; CODE XREF: vasnprintf+FB6↑j
.text:000000000000744C                                         ; vasnprintf+FBF↑j
.text:000000000000744C                 mov     rdi, r12        ; size
.text:000000000000744F                 call    _malloc
.text:0000000000007454                 test    rax, rax
.text:0000000000007457                 mov     rcx, rax
.text:000000000000745A                 jz      loc_6555
.text:0000000000007460                 test    r14, r14
.text:0000000000007463                 jz      short loc_74D0
.text:0000000000007465                 test    r13b, r13b
.text:0000000000007468                 jz      short loc_74D0
.text:000000000000746A                 mov     rsi, r15        ; src
.text:000000000000746D                 mov     rdx, r14        ; n
.text:0000000000007470                 mov     rdi, rax        ; dest
.text:0000000000007473                 call    _memcpy
.text:0000000000007478                 mov     r15, rax
.text:000000000000747B                 jmp     loc_73CC
.text:0000000000007480 ; ---------------------------------------------------------------------------
.text:0000000000007480
.text:0000000000007480 loc_7480:                               ; CODE XREF: vasnprintf+F84↑j
.text:0000000000007480                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000007484                 mov     eax, 1
.text:0000000000007489                 jz      loc_73CC
.text:000000000000748F                 test    r12, r12
.text:0000000000007492                 jz      loc_6555
.text:0000000000007498                 js      loc_6555
.text:000000000000749E
.text:000000000000749E loc_749E:                               ; CODE XREF: vasnprintf+F9C↑j
.text:000000000000749E                                         ; vasnprintf+10DB↓j
.text:000000000000749E                 test    rax, rax
.text:00000000000074A1                 jnz     loc_6555
.text:00000000000074A7                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000074AB                 jz      loc_6555
.text:00000000000074B1                 mov     r12, rbx
.text:00000000000074B4                 jmp     loc_7398
.text:00000000000074B9 ; ---------------------------------------------------------------------------
.text:00000000000074B9
.text:00000000000074B9 loc_74B9:                               ; CODE XREF: vasnprintf+F92↑j
.text:00000000000074B9                 js      loc_6555
.text:00000000000074BF                 add     r12, r12
.text:00000000000074C2                 cmp     r12, rbx
.text:00000000000074C5                 jnb     loc_7398
.text:00000000000074CB                 jmp     short loc_749E
.text:00000000000074CB ; ---------------------------------------------------------------------------
.text:00000000000074CD                 align 10h
.text:00000000000074D0
.text:00000000000074D0 loc_74D0:                               ; CODE XREF: vasnprintf+1073↑j
.text:00000000000074D0                                         ; vasnprintf+1078↑j
.text:00000000000074D0                 mov     r15, rcx
.text:00000000000074D3                 jmp     loc_73CC
.text:00000000000074D8 ; ---------------------------------------------------------------------------
.text:00000000000074D8
.text:00000000000074D8 loc_74D8:                               ; CODE XREF: vasnprintf+627↑j
.text:00000000000074D8                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000074DC                 jz      loc_6900
.text:00000000000074E2                 jmp     loc_6561
.text:00000000000074E7 ; ---------------------------------------------------------------------------
.text:00000000000074E7
.text:00000000000074E7 loc_74E7:                               ; CODE XREF: vasnprintf+1EF↑j
.text:00000000000074E7                 call    ___stack_chk_fail
.text:00000000000074EC ; ---------------------------------------------------------------------------
.text:00000000000074EC
.text:00000000000074EC loc_74EC:                               ; CODE XREF: vasnprintf+495↑j
.text:00000000000074EC                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000074F0                 mov     edx, 1
.text:00000000000074F5                 jz      loc_68DB
.text:00000000000074FB                 test    r12, r12
.text:00000000000074FE                 jz      loc_6555
.text:0000000000007504                 jns     loc_70D0
.text:000000000000750A                 jmp     loc_6555
.text:000000000000750A ; } // starts at 63F0
.text:000000000000750A vasnprintf      endp
.text:000000000000750A
.text:000000000000750A ; ---------------------------------------------------------------------------
.text:000000000000750F                 align 10h
.text:0000000000007510
.text:0000000000007510 ; =============== S U B R O U T I N E =======================================
.text:0000000000007510
.text:0000000000007510
.text:0000000000007510                 public dup_safer
.text:0000000000007510 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:0000000000007510 ; __unwind {
.text:0000000000007510                 mov     edx, 3
.text:0000000000007515                 xor     esi, esi
.text:0000000000007517                 xor     eax, eax
.text:0000000000007519                 jmp     rpl_fcntl
.text:0000000000007519 ; } // starts at 7510
.text:0000000000007519 dup_safer       endp
.text:0000000000007519
.text:0000000000007519 ; ---------------------------------------------------------------------------
.text:000000000000751E                 align 20h
.text:0000000000007520
.text:0000000000007520 ; =============== S U B R O U T I N E =======================================
.text:0000000000007520
.text:0000000000007520
.text:0000000000007520 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000007520                 public rpl_fcntl
.text:0000000000007520 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:0000000000007520
.text:0000000000007520 var_68          = dword ptr -68h
.text:0000000000007520 var_60          = qword ptr -60h
.text:0000000000007520 var_58          = qword ptr -58h
.text:0000000000007520 var_50          = qword ptr -50h
.text:0000000000007520 var_48          = byte ptr -48h
.text:0000000000007520 var_38          = qword ptr -38h
.text:0000000000007520 var_30          = qword ptr -30h
.text:0000000000007520 var_28          = qword ptr -28h
.text:0000000000007520 var_20          = qword ptr -20h
.text:0000000000007520 arg_0           = byte ptr  8
.text:0000000000007520
.text:0000000000007520 ; __unwind {
.text:0000000000007520                 push    r12
.text:0000000000007522                 push    rbp
.text:0000000000007523                 mov     ebp, edi
.text:0000000000007525                 push    rbx
.text:0000000000007526                 sub     rsp, 50h
.text:000000000000752A                 mov     rax, fs:28h
.text:0000000000007533                 mov     [rsp+68h+var_50], rax
.text:0000000000007538                 xor     eax, eax
.text:000000000000753A                 lea     rax, [rsp+68h+arg_0]
.text:000000000000753F                 test    esi, esi
.text:0000000000007541                 mov     [rsp+68h+var_38], rdx
.text:0000000000007546                 mov     [rsp+68h+var_30], rcx
.text:000000000000754B                 mov     [rsp+68h+var_28], r8
.text:0000000000007550                 mov     [rsp+68h+var_60], rax
.text:0000000000007555                 lea     rax, [rsp+68h+var_48]
.text:000000000000755A                 mov     [rsp+68h+var_20], r9
.text:000000000000755F                 mov     [rsp+68h+var_68], 10h
.text:0000000000007566                 mov     [rsp+68h+var_58], rax
.text:000000000000756B                 jz      loc_7772
.text:0000000000007571                 cmp     esi, 406h
.text:0000000000007577                 jnz     short loc_75C0
.text:0000000000007579                 mov     rax, [rsp+68h+var_58]
.text:000000000000757E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000007585                 mov     [rsp+68h+var_68], 18h
.text:000000000000758C                 mov     r12d, [rax+10h]
.text:0000000000007590                 mov     edx, r12d
.text:0000000000007593                 js      loc_76C3
.text:0000000000007599                 xor     eax, eax
.text:000000000000759B                 mov     esi, 406h       ; cmd
.text:00000000000075A0                 call    _fcntl
.text:00000000000075A5                 test    eax, eax
.text:00000000000075A7                 mov     ebx, eax
.text:00000000000075A9                 js      loc_7738
.text:00000000000075AF
.text:00000000000075AF loc_75AF:                               ; CODE XREF: rpl_fcntl+220↓j
.text:00000000000075AF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:00000000000075B9                 jmp     short loc_7600
.text:00000000000075B9 ; ---------------------------------------------------------------------------
.text:00000000000075BB                 align 20h
.text:00000000000075C0
.text:00000000000075C0 loc_75C0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:00000000000075C0                 cmp     esi, 0Bh
.text:00000000000075C3                 jz      short loc_75F0
.text:00000000000075C5                 jg      short loc_7620
.text:00000000000075C7                 cmp     esi, 4
.text:00000000000075CA                 jz      loc_76A0
.text:00000000000075D0                 jg      loc_7690
.text:00000000000075D6                 cmp     esi, 2
.text:00000000000075D9                 jz      loc_76A0
.text:00000000000075DF                 jg      short loc_75F0
.text:00000000000075E1                 cmp     esi, 1
.text:00000000000075E4                 jnz     short loc_7648
.text:00000000000075E6                 db      2Eh
.text:00000000000075E6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000075F0
.text:00000000000075F0 loc_75F0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:00000000000075F0                                         ; rpl_fcntl+BF↑j ...
.text:00000000000075F0                 mov     edi, ebp        ; fd
.text:00000000000075F2                 xor     eax, eax
.text:00000000000075F4                 call    _fcntl
.text:00000000000075F9                 mov     ebx, eax
.text:00000000000075FB                 nop     dword ptr [rax+rax+00h]
.text:0000000000007600
.text:0000000000007600 loc_7600:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000007600                                         ; rpl_fcntl+147↓j ...
.text:0000000000007600                 mov     rcx, [rsp+68h+var_50]
.text:0000000000007605                 xor     rcx, fs:28h
.text:000000000000760E                 mov     eax, ebx
.text:0000000000007610                 jnz     loc_776D
.text:0000000000007616                 add     rsp, 50h
.text:000000000000761A                 pop     rbx
.text:000000000000761B                 pop     rbp
.text:000000000000761C                 pop     r12
.text:000000000000761E                 retn
.text:000000000000761E ; ---------------------------------------------------------------------------
.text:000000000000761F                 align 20h
.text:0000000000007620
.text:0000000000007620 loc_7620:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000007620                 cmp     esi, 407h
.text:0000000000007626                 jg      short loc_7670
.text:0000000000007628                 cmp     esi, 406h
.text:000000000000762E                 jge     short loc_76A0
.text:0000000000007630                 cmp     esi, 401h
.text:0000000000007636                 jz      short loc_75F0
.text:0000000000007638                 cmp     esi, 402h
.text:000000000000763E                 jz      short loc_76A0
.text:0000000000007640                 cmp     esi, 400h
.text:0000000000007646                 jz      short loc_76A0
.text:0000000000007648
.text:0000000000007648 loc_7648:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000007648                                         ; rpl_fcntl+164↓j ...
.text:0000000000007648                 mov     eax, [rsp+68h+var_68]
.text:000000000000764B                 cmp     eax, 2Fh ; '/'
.text:000000000000764E                 ja      loc_778A
.text:0000000000007654                 add     rax, [rsp+68h+var_58]
.text:0000000000007659
.text:0000000000007659 loc_7659:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000007659                 mov     rdx, [rax]
.text:000000000000765C                 mov     edi, ebp        ; fd
.text:000000000000765E                 xor     eax, eax
.text:0000000000007660                 call    _fcntl
.text:0000000000007665                 mov     ebx, eax
.text:0000000000007667                 jmp     short loc_7600
.text:0000000000007667 ; ---------------------------------------------------------------------------
.text:0000000000007669                 align 10h
.text:0000000000007670
.text:0000000000007670 loc_7670:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000007670                 cmp     esi, 409h
.text:0000000000007676                 jz      short loc_76A0
.text:0000000000007678                 jl      loc_75F0
.text:000000000000767E                 cmp     esi, 40Ah
.text:0000000000007684                 jnz     short loc_7648
.text:0000000000007686                 jmp     loc_75F0
.text:0000000000007686 ; ---------------------------------------------------------------------------
.text:000000000000768B                 align 10h
.text:0000000000007690
.text:0000000000007690 loc_7690:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000007690                 cmp     esi, 9
.text:0000000000007693                 jz      loc_75F0
.text:0000000000007699                 jg      short loc_76A0
.text:000000000000769B                 cmp     esi, 8
.text:000000000000769E                 jnz     short loc_7648
.text:00000000000076A0
.text:00000000000076A0 loc_76A0:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:00000000000076A0                                         ; rpl_fcntl+B9↑j ...
.text:00000000000076A0                 mov     eax, [rsp+68h+var_68]
.text:00000000000076A3                 cmp     eax, 2Fh ; '/'
.text:00000000000076A6                 ja      loc_7794
.text:00000000000076AC                 add     rax, [rsp+68h+var_58]
.text:00000000000076B1
.text:00000000000076B1 loc_76B1:                               ; CODE XREF: rpl_fcntl+279↓j
.text:00000000000076B1                 mov     edx, [rax]
.text:00000000000076B3                 mov     edi, ebp        ; fd
.text:00000000000076B5                 xor     eax, eax
.text:00000000000076B7                 call    _fcntl
.text:00000000000076BC                 mov     ebx, eax
.text:00000000000076BE                 jmp     loc_7600
.text:00000000000076C3 ; ---------------------------------------------------------------------------
.text:00000000000076C3
.text:00000000000076C3 loc_76C3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:00000000000076C3                 xor     esi, esi        ; cmd
.text:00000000000076C5                 xor     eax, eax
.text:00000000000076C7                 call    _fcntl
.text:00000000000076CC                 test    eax, eax
.text:00000000000076CE                 mov     ebx, eax
.text:00000000000076D0                 js      loc_7600
.text:00000000000076D6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:00000000000076DD                 jnz     loc_7600
.text:00000000000076E3
.text:00000000000076E3 loc_76E3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:00000000000076E3                 xor     eax, eax
.text:00000000000076E5                 mov     esi, 1          ; cmd
.text:00000000000076EA                 mov     edi, ebx        ; fd
.text:00000000000076EC                 call    _fcntl
.text:00000000000076F1                 test    eax, eax
.text:00000000000076F3                 js      short loc_7711
.text:00000000000076F5                 or      eax, 1
.text:00000000000076F8                 mov     esi, 2          ; cmd
.text:00000000000076FD                 mov     edi, ebx        ; fd
.text:00000000000076FF                 mov     edx, eax
.text:0000000000007701                 xor     eax, eax
.text:0000000000007703                 call    _fcntl
.text:0000000000007708                 cmp     eax, 0FFFFFFFFh
.text:000000000000770B                 jnz     loc_7600
.text:0000000000007711
.text:0000000000007711 loc_7711:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000007711                 call    ___errno_location
.text:0000000000007716                 mov     r12d, [rax]
.text:0000000000007719                 mov     rbp, rax
.text:000000000000771C                 mov     edi, ebx        ; fd
.text:000000000000771E                 call    _close
.text:0000000000007723                 mov     ebx, 0FFFFFFFFh
.text:0000000000007728                 mov     [rbp+0], r12d
.text:000000000000772C                 jmp     loc_7600
.text:000000000000772C ; ---------------------------------------------------------------------------
.text:0000000000007731                 align 8
.text:0000000000007738
.text:0000000000007738 loc_7738:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000007738                 call    ___errno_location
.text:000000000000773D                 cmp     dword ptr [rax], 16h
.text:0000000000007740                 jnz     loc_75AF
.text:0000000000007746                 xor     esi, esi        ; cmd
.text:0000000000007748                 xor     eax, eax
.text:000000000000774A                 mov     edx, r12d
.text:000000000000774D                 mov     edi, ebp        ; fd
.text:000000000000774F                 call    _fcntl
.text:0000000000007754                 test    eax, eax
.text:0000000000007756                 mov     ebx, eax
.text:0000000000007758                 js      loc_7600
.text:000000000000775E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000007768                 jmp     loc_76E3
.text:000000000000776D ; ---------------------------------------------------------------------------
.text:000000000000776D
.text:000000000000776D loc_776D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000776D                 call    ___stack_chk_fail
.text:0000000000007772 ; ---------------------------------------------------------------------------
.text:0000000000007772
.text:0000000000007772 loc_7772:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000007772                 mov     rax, [rsp+68h+var_58]
.text:0000000000007777                 xor     esi, esi        ; cmd
.text:0000000000007779                 mov     edx, [rax+10h]
.text:000000000000777C                 xor     eax, eax
.text:000000000000777E                 call    _fcntl
.text:0000000000007783                 mov     ebx, eax
.text:0000000000007785                 jmp     loc_7600
.text:000000000000778A ; ---------------------------------------------------------------------------
.text:000000000000778A
.text:000000000000778A loc_778A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000778A                 mov     rax, [rsp+68h+var_60]
.text:000000000000778F                 jmp     loc_7659
.text:0000000000007794 ; ---------------------------------------------------------------------------
.text:0000000000007794
.text:0000000000007794 loc_7794:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000007794                 mov     rax, [rsp+68h+var_60]
.text:0000000000007799                 jmp     loc_76B1
.text:0000000000007799 ; } // starts at 7520
.text:0000000000007799 rpl_fcntl       endp
.text:0000000000007799
.text:0000000000007799 ; ---------------------------------------------------------------------------
.text:000000000000779E                 align 20h
.text:00000000000077A0
.text:00000000000077A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077A0
.text:00000000000077A0
.text:00000000000077A0                 public printf_fetchargs
.text:00000000000077A0 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:00000000000077A0 ; __unwind {
.text:00000000000077A0                 cmp     qword ptr [rsi], 0
.text:00000000000077A4                 mov     rax, [rsi+8]
.text:00000000000077A8                 jz      short loc_780D
.text:00000000000077AA                 lea     r8, jpt_77D6
.text:00000000000077B1                 lea     r10, wide_null_string_2696
.text:00000000000077B8                 lea     r9, aNull       ; "(NULL)"
.text:00000000000077BF                 xor     ecx, ecx
.text:00000000000077C1                 nop     dword ptr [rax+00000000h]
.text:00000000000077C8
.text:00000000000077C8 loc_77C8:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:00000000000077C8                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:00000000000077CB                 ja      short def_77D6  ; jumptable 00000000000077D6 default case, case 0
.text:00000000000077CD                 mov     edx, [rax]
.text:00000000000077CF                 movsxd  rdx, ds:(jpt_77D6 - 97A0h)[r8+rdx*4]
.text:00000000000077D3                 add     rdx, r8
.text:00000000000077D6                 jmp     rdx             ; switch jump
.text:00000000000077D6 ; ---------------------------------------------------------------------------
.text:00000000000077D8                 align 20h
.text:00000000000077E0
.text:00000000000077E0 loc_77E0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000077E0                                         ; DATA XREF: .rodata:jpt_77D6↓o
.text:00000000000077E0                 mov     rdx, [rdi+8]    ; jumptable 00000000000077D6 case 12
.text:00000000000077E4                 add     rdx, 0Fh
.text:00000000000077E8                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:00000000000077EC                 lea     r11, [rdx+10h]
.text:00000000000077F0                 mov     [rdi+8], r11
.text:00000000000077F4                 fld     tbyte ptr [rdx]
.text:00000000000077F6                 fstp    tbyte ptr [rax+10h]
.text:00000000000077F9                 nop     dword ptr [rax+00000000h]
.text:0000000000007800
.text:0000000000007800 loc_7800:                               ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000007800                                         ; printf_fetchargs+BA↓j ...
.text:0000000000007800                 add     rcx, 1
.text:0000000000007804                 add     rax, 20h ; ' '
.text:0000000000007808                 cmp     [rsi], rcx
.text:000000000000780B                 ja      short loc_77C8
.text:000000000000780D
.text:000000000000780D loc_780D:                               ; CODE XREF: printf_fetchargs+8↑j
.text:000000000000780D                 xor     eax, eax
.text:000000000000780F                 retn
.text:0000000000007810 ; ---------------------------------------------------------------------------
.text:0000000000007810
.text:0000000000007810 def_77D6:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000007810                                         ; printf_fetchargs+36↑j
.text:0000000000007810                                         ; DATA XREF: ...
.text:0000000000007810                 mov     eax, 0FFFFFFFFh ; jumptable 00000000000077D6 default case, case 0
.text:0000000000007815                 retn
.text:0000000000007816 ; ---------------------------------------------------------------------------
.text:0000000000007816
.text:0000000000007816 loc_7816:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007816                                         ; DATA XREF: .rodata:jpt_77D6↓o
.text:0000000000007816                 mov     r11d, [rdi]     ; jumptable 00000000000077D6 cases 7-10,17-22
.text:0000000000007819                 cmp     r11d, 2Fh ; '/'
.text:000000000000781D                 ja      loc_795A
.text:0000000000007823                 mov     edx, r11d
.text:0000000000007826                 add     rdx, [rdi+10h]
.text:000000000000782A                 add     r11d, 8
.text:000000000000782E                 mov     [rdi], r11d
.text:0000000000007831
.text:0000000000007831 loc_7831:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:0000000000007831                 mov     rdx, [rdx]
.text:0000000000007834                 mov     [rax+10h], rdx
.text:0000000000007838                 jmp     short loc_7800
.text:000000000000783A ; ---------------------------------------------------------------------------
.text:000000000000783A
.text:000000000000783A loc_783A:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000783A                                         ; DATA XREF: .rodata:jpt_77D6↓o
.text:000000000000783A                 mov     r11d, [rdi]     ; jumptable 00000000000077D6 cases 5,6,13,14
.text:000000000000783D                 cmp     r11d, 2Fh ; '/'
.text:0000000000007841                 ja      loc_797C
.text:0000000000007847                 mov     edx, r11d
.text:000000000000784A                 add     rdx, [rdi+10h]
.text:000000000000784E                 add     r11d, 8
.text:0000000000007852                 mov     [rdi], r11d
.text:0000000000007855
.text:0000000000007855 loc_7855:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:0000000000007855                 mov     edx, [rdx]
.text:0000000000007857                 mov     [rax+10h], edx
.text:000000000000785A                 jmp     short loc_7800
.text:000000000000785C ; ---------------------------------------------------------------------------
.text:000000000000785C
.text:000000000000785C loc_785C:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000785C                                         ; DATA XREF: .rodata:jpt_77D6↓o
.text:000000000000785C                 mov     r11d, [rdi]     ; jumptable 00000000000077D6 cases 1,2
.text:000000000000785F                 cmp     r11d, 2Fh ; '/'
.text:0000000000007863                 ja      loc_796B
.text:0000000000007869                 mov     edx, r11d
.text:000000000000786C                 add     rdx, [rdi+10h]
.text:0000000000007870                 add     r11d, 8
.text:0000000000007874                 mov     [rdi], r11d
.text:0000000000007877
.text:0000000000007877 loc_7877:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:0000000000007877                 mov     edx, [rdx]
.text:0000000000007879                 mov     [rax+10h], dl
.text:000000000000787C                 jmp     short loc_7800
.text:000000000000787E ; ---------------------------------------------------------------------------
.text:000000000000787E
.text:000000000000787E loc_787E:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000787E                                         ; DATA XREF: .rodata:jpt_77D6↓o
.text:000000000000787E                 mov     r11d, [rdi]     ; jumptable 00000000000077D6 cases 3,4
.text:0000000000007881                 cmp     r11d, 2Fh ; '/'
.text:0000000000007885                 ja      loc_792A
.text:000000000000788B                 mov     edx, r11d
.text:000000000000788E                 add     rdx, [rdi+10h]
.text:0000000000007892                 add     r11d, 8
.text:0000000000007896                 mov     [rdi], r11d
.text:0000000000007899
.text:0000000000007899 loc_7899:                               ; CODE XREF: printf_fetchargs+196↓j
.text:0000000000007899                 mov     edx, [rdx]
.text:000000000000789B                 mov     [rax+10h], dx
.text:000000000000789F                 jmp     loc_7800
.text:00000000000078A4 ; ---------------------------------------------------------------------------
.text:00000000000078A4
.text:00000000000078A4 loc_78A4:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000078A4                                         ; DATA XREF: .rodata:jpt_77D6↓o
.text:00000000000078A4                 mov     r11d, [rdi]     ; jumptable 00000000000077D6 case 15
.text:00000000000078A7                 cmp     r11d, 2Fh ; '/'
.text:00000000000078AB                 ja      loc_793B
.text:00000000000078B1                 mov     edx, r11d
.text:00000000000078B4                 add     rdx, [rdi+10h]
.text:00000000000078B8                 add     r11d, 8
.text:00000000000078BC                 mov     [rdi], r11d
.text:00000000000078BF
.text:00000000000078BF loc_78BF:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:00000000000078BF                 mov     rdx, [rdx]
.text:00000000000078C2                 test    rdx, rdx
.text:00000000000078C5                 cmovz   rdx, r9
.text:00000000000078C9                 mov     [rax+10h], rdx
.text:00000000000078CD                 jmp     loc_7800
.text:00000000000078D2 ; ---------------------------------------------------------------------------
.text:00000000000078D2
.text:00000000000078D2 loc_78D2:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000078D2                                         ; DATA XREF: .rodata:jpt_77D6↓o
.text:00000000000078D2                 mov     r11d, [rdi+4]   ; jumptable 00000000000077D6 case 11
.text:00000000000078D6                 cmp     r11d, 0AFh
.text:00000000000078DD                 ja      loc_798D
.text:00000000000078E3                 mov     edx, r11d
.text:00000000000078E6                 add     rdx, [rdi+10h]
.text:00000000000078EA                 add     r11d, 10h
.text:00000000000078EE                 mov     [rdi+4], r11d
.text:00000000000078F2
.text:00000000000078F2 loc_78F2:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:00000000000078F2                 movsd   xmm0, qword ptr [rdx]
.text:00000000000078F6                 movsd   qword ptr [rax+10h], xmm0
.text:00000000000078FB                 jmp     loc_7800
.text:0000000000007900 ; ---------------------------------------------------------------------------
.text:0000000000007900
.text:0000000000007900 loc_7900:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007900                                         ; DATA XREF: .rodata:jpt_77D6↓o
.text:0000000000007900                 mov     r11d, [rdi]     ; jumptable 00000000000077D6 case 16
.text:0000000000007903                 cmp     r11d, 2Fh ; '/'
.text:0000000000007907                 ja      short loc_794C
.text:0000000000007909                 mov     edx, r11d
.text:000000000000790C                 add     rdx, [rdi+10h]
.text:0000000000007910                 add     r11d, 8
.text:0000000000007914                 mov     [rdi], r11d
.text:0000000000007917
.text:0000000000007917 loc_7917:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000007917                 mov     rdx, [rdx]
.text:000000000000791A                 test    rdx, rdx
.text:000000000000791D                 cmovz   rdx, r10
.text:0000000000007921                 mov     [rax+10h], rdx
.text:0000000000007925                 jmp     loc_7800
.text:000000000000792A ; ---------------------------------------------------------------------------
.text:000000000000792A
.text:000000000000792A loc_792A:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:000000000000792A                 mov     rdx, [rdi+8]
.text:000000000000792E                 lea     r11, [rdx+8]
.text:0000000000007932                 mov     [rdi+8], r11
.text:0000000000007936                 jmp     loc_7899
.text:000000000000793B ; ---------------------------------------------------------------------------
.text:000000000000793B
.text:000000000000793B loc_793B:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000000793B                 mov     rdx, [rdi+8]
.text:000000000000793F                 lea     r11, [rdx+8]
.text:0000000000007943                 mov     [rdi+8], r11
.text:0000000000007947                 jmp     loc_78BF
.text:000000000000794C ; ---------------------------------------------------------------------------
.text:000000000000794C
.text:000000000000794C loc_794C:                               ; CODE XREF: printf_fetchargs+167↑j
.text:000000000000794C                 mov     rdx, [rdi+8]
.text:0000000000007950                 lea     r11, [rdx+8]
.text:0000000000007954                 mov     [rdi+8], r11
.text:0000000000007958                 jmp     short loc_7917
.text:000000000000795A ; ---------------------------------------------------------------------------
.text:000000000000795A
.text:000000000000795A loc_795A:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:000000000000795A                 mov     rdx, [rdi+8]
.text:000000000000795E                 lea     r11, [rdx+8]
.text:0000000000007962                 mov     [rdi+8], r11
.text:0000000000007966                 jmp     loc_7831
.text:000000000000796B ; ---------------------------------------------------------------------------
.text:000000000000796B
.text:000000000000796B loc_796B:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:000000000000796B                 mov     rdx, [rdi+8]
.text:000000000000796F                 lea     r11, [rdx+8]
.text:0000000000007973                 mov     [rdi+8], r11
.text:0000000000007977                 jmp     loc_7877
.text:000000000000797C ; ---------------------------------------------------------------------------
.text:000000000000797C
.text:000000000000797C loc_797C:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:000000000000797C                 mov     rdx, [rdi+8]
.text:0000000000007980                 lea     r11, [rdx+8]
.text:0000000000007984                 mov     [rdi+8], r11
.text:0000000000007988                 jmp     loc_7855
.text:000000000000798D ; ---------------------------------------------------------------------------
.text:000000000000798D
.text:000000000000798D loc_798D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:000000000000798D                 mov     rdx, [rdi+8]
.text:0000000000007991                 lea     r11, [rdx+8]
.text:0000000000007995                 mov     [rdi+8], r11
.text:0000000000007999                 jmp     loc_78F2
.text:0000000000007999 ; } // starts at 77A0
.text:0000000000007999 printf_fetchargs endp
.text:0000000000007999
.text:0000000000007999 ; ---------------------------------------------------------------------------
.text:000000000000799E                 align 20h
.text:00000000000079A0 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:00000000000079A0 ; Format      : ELF64 for x86-64 (Relocatable)
.text:00000000000079A0 ;
.text:00000000000079A0 ; Source File : 'printf-parse.c'
.text:00000000000079A0
.text:00000000000079A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000079A0
.text:00000000000079A0 ; Attributes: info_from_lumina
.text:00000000000079A0
.text:00000000000079A0 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:00000000000079A0                 public printf_parse
.text:00000000000079A0 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:00000000000079A0
.text:00000000000079A0 src             = qword ptr -80h
.text:00000000000079A0 var_78          = qword ptr -78h
.text:00000000000079A0 var_70          = qword ptr -70h
.text:00000000000079A0 var_68          = qword ptr -68h
.text:00000000000079A0 var_60          = qword ptr -60h
.text:00000000000079A0 var_58          = qword ptr -58h
.text:00000000000079A0 var_50          = qword ptr -50h
.text:00000000000079A0 var_48          = qword ptr -48h
.text:00000000000079A0 var_40          = qword ptr -40h
.text:00000000000079A0
.text:00000000000079A0 ; __unwind {
.text:00000000000079A0                 push    r15
.text:00000000000079A2                 push    r14
.text:00000000000079A4                 lea     rcx, [rsi+20h]
.text:00000000000079A8                 push    r13
.text:00000000000079AA                 push    r12
.text:00000000000079AC                 lea     rax, [rdx+10h]
.text:00000000000079B0                 push    rbp
.text:00000000000079B1                 push    rbx
.text:00000000000079B2                 mov     r14, rsi
.text:00000000000079B5                 mov     r15, rdx
.text:00000000000079B8                 xor     ebx, ebx
.text:00000000000079BA                 mov     r9d, 7
.text:00000000000079C0                 sub     rsp, 58h
.text:00000000000079C4                 mov     r10d, 7
.text:00000000000079CA                 mov     qword ptr [rsi], 0
.text:00000000000079D1                 mov     [rsi+8], rcx
.text:00000000000079D5                 mov     [rsp+88h+var_60], rcx
.text:00000000000079DA                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000079E1                 mov     qword ptr [rdx], 0
.text:00000000000079E8                 mov     [rsp+88h+src], rax
.text:00000000000079ED                 mov     [rdx+8], rax
.text:00000000000079F1                 mov     [rsp+88h+var_70], 0
.text:00000000000079FA                 mov     [rsp+88h+var_78], 0
.text:0000000000007A03                 mov     [rsp+88h+var_68], 0
.text:0000000000007A0C                 jmp     short loc_7A1B
.text:0000000000007A0C ; ---------------------------------------------------------------------------
.text:0000000000007A0E                 align 10h
.text:0000000000007A10
.text:0000000000007A10 loc_7A10:                               ; CODE XREF: printf_parse+80↓j
.text:0000000000007A10                 cmp     al, 25h ; '%'
.text:0000000000007A12                 lea     rbp, [rdi+1]
.text:0000000000007A16                 jz      short loc_7A58
.text:0000000000007A18
.text:0000000000007A18 loc_7A18:                               ; CODE XREF: printf_parse+35B↓j
.text:0000000000007A18                                         ; printf_parse+364↓j
.text:0000000000007A18                 mov     rdi, rbp
.text:0000000000007A1B
.text:0000000000007A1B loc_7A1B:                               ; CODE XREF: printf_parse+6C↑j
.text:0000000000007A1B                 movzx   eax, byte ptr [rdi]
.text:0000000000007A1E                 test    al, al
.text:0000000000007A20                 jnz     short loc_7A10
.text:0000000000007A22                 lea     rax, [rbx+rbx*4]
.text:0000000000007A26                 lea     rax, [rbx+rax*2]
.text:0000000000007A2A                 mov     [rcx+rax*8], rdi
.text:0000000000007A2E                 mov     rax, [rsp+88h+var_78]
.text:0000000000007A33                 mov     [r14+10h], rax
.text:0000000000007A37                 mov     rax, [rsp+88h+var_70]
.text:0000000000007A3C                 mov     [r14+18h], rax
.text:0000000000007A40                 xor     eax, eax
.text:0000000000007A42
.text:0000000000007A42 loc_7A42:                               ; CODE XREF: printf_parse+87E↓j
.text:0000000000007A42                                         ; printf_parse+B1C↓j
.text:0000000000007A42                 add     rsp, 58h
.text:0000000000007A46                 pop     rbx
.text:0000000000007A47                 pop     rbp
.text:0000000000007A48                 pop     r12
.text:0000000000007A4A                 pop     r13
.text:0000000000007A4C                 pop     r14
.text:0000000000007A4E                 pop     r15
.text:0000000000007A50                 retn
.text:0000000000007A50 ; ---------------------------------------------------------------------------
.text:0000000000007A51                 align 8
.text:0000000000007A58
.text:0000000000007A58 loc_7A58:                               ; CODE XREF: printf_parse+76↑j
.text:0000000000007A58                 lea     rax, [rbx+rbx*4]
.text:0000000000007A5C                 mov     r13, r8
.text:0000000000007A5F                 lea     rax, [rbx+rax*2]
.text:0000000000007A63                 lea     r12, [rcx+rax*8]
.text:0000000000007A67                 mov     [r12], rdi
.text:0000000000007A6B                 mov     dword ptr [r12+10h], 0
.text:0000000000007A74                 mov     qword ptr [r12+18h], 0
.text:0000000000007A7D                 mov     qword ptr [r12+20h], 0
.text:0000000000007A86                 mov     [r12+28h], r8
.text:0000000000007A8B                 mov     qword ptr [r12+30h], 0
.text:0000000000007A94                 mov     qword ptr [r12+38h], 0
.text:0000000000007A9D                 mov     [r12+40h], r8
.text:0000000000007AA2                 mov     [r12+50h], r8
.text:0000000000007AA7                 movzx   ebx, byte ptr [rdi+1]
.text:0000000000007AAB                 lea     eax, [rbx-30h]
.text:0000000000007AAE                 cmp     al, 9
.text:0000000000007AB0                 ja      short loc_7AEE
.text:0000000000007AB2                 jmp     loc_7EEA
.text:0000000000007AB2 ; ---------------------------------------------------------------------------
.text:0000000000007AB7                 align 20h
.text:0000000000007AC0
.text:0000000000007AC0 loc_7AC0:                               ; CODE XREF: printf_parse+158↓j
.text:0000000000007AC0                 cmp     bl, 2Dh ; '-'
.text:0000000000007AC3                 jz      short loc_7B08
.text:0000000000007AC5                 cmp     bl, 2Bh ; '+'
.text:0000000000007AC8                 jz      short loc_7B10
.text:0000000000007ACA                 cmp     bl, 20h ; ' '
.text:0000000000007ACD                 jz      short loc_7B20
.text:0000000000007ACF                 cmp     bl, 23h ; '#'
.text:0000000000007AD2                 jz      short loc_7B30
.text:0000000000007AD4                 cmp     bl, 30h ; '0'
.text:0000000000007AD7                 jz      short loc_7B40
.text:0000000000007AD9                 cmp     bl, 49h ; 'I'
.text:0000000000007ADC                 jnz     short loc_7B50
.text:0000000000007ADE                 or      dword ptr [r12+10h], 40h
.text:0000000000007AE4                 nop     dword ptr [rax+00h]
.text:0000000000007AE8
.text:0000000000007AE8 loc_7AE8:                               ; CODE XREF: printf_parse+160↓j
.text:0000000000007AE8                                         ; printf_parse+16E↓j ...
.text:0000000000007AE8                 movzx   ebx, byte ptr [rax]
.text:0000000000007AEB                 mov     rbp, rax
.text:0000000000007AEE
.text:0000000000007AEE loc_7AEE:                               ; CODE XREF: printf_parse+110↑j
.text:0000000000007AEE                                         ; printf_parse+565↓j ...
.text:0000000000007AEE                 lea     rax, [rbp+1]
.text:0000000000007AF2                 cmp     bl, 27h ; '''
.text:0000000000007AF5                 mov     rdx, rax
.text:0000000000007AF8                 jnz     short loc_7AC0
.text:0000000000007AFA                 or      dword ptr [r12+10h], 1
.text:0000000000007B00                 jmp     short loc_7AE8
.text:0000000000007B00 ; ---------------------------------------------------------------------------
.text:0000000000007B02                 align 8
.text:0000000000007B08
.text:0000000000007B08 loc_7B08:                               ; CODE XREF: printf_parse+123↑j
.text:0000000000007B08                 or      dword ptr [r12+10h], 2
.text:0000000000007B0E                 jmp     short loc_7AE8
.text:0000000000007B10 ; ---------------------------------------------------------------------------
.text:0000000000007B10
.text:0000000000007B10 loc_7B10:                               ; CODE XREF: printf_parse+128↑j
.text:0000000000007B10                 or      dword ptr [r12+10h], 4
.text:0000000000007B16                 jmp     short loc_7AE8
.text:0000000000007B16 ; ---------------------------------------------------------------------------
.text:0000000000007B18                 align 20h
.text:0000000000007B20
.text:0000000000007B20 loc_7B20:                               ; CODE XREF: printf_parse+12D↑j
.text:0000000000007B20                 or      dword ptr [r12+10h], 8
.text:0000000000007B26                 jmp     short loc_7AE8
.text:0000000000007B26 ; ---------------------------------------------------------------------------
.text:0000000000007B28                 align 10h
.text:0000000000007B30
.text:0000000000007B30 loc_7B30:                               ; CODE XREF: printf_parse+132↑j
.text:0000000000007B30                 or      dword ptr [r12+10h], 10h
.text:0000000000007B36                 jmp     short loc_7AE8
.text:0000000000007B36 ; ---------------------------------------------------------------------------
.text:0000000000007B38                 align 20h
.text:0000000000007B40
.text:0000000000007B40 loc_7B40:                               ; CODE XREF: printf_parse+137↑j
.text:0000000000007B40                 or      dword ptr [r12+10h], 20h
.text:0000000000007B46                 jmp     short loc_7AE8
.text:0000000000007B46 ; ---------------------------------------------------------------------------
.text:0000000000007B48                 align 10h
.text:0000000000007B50
.text:0000000000007B50 loc_7B50:                               ; CODE XREF: printf_parse+13C↑j
.text:0000000000007B50                 cmp     bl, 2Ah ; '*'
.text:0000000000007B53                 jz      loc_7D09
.text:0000000000007B59                 lea     ecx, [rbx-30h]
.text:0000000000007B5C                 cmp     cl, 9
.text:0000000000007B5F                 jbe     loc_7F77
.text:0000000000007B65
.text:0000000000007B65 loc_7B65:                               ; CODE XREF: printf_parse+629↓j
.text:0000000000007B65                                         ; printf_parse+96C↓j
.text:0000000000007B65                 cmp     bl, 2Eh ; '.'
.text:0000000000007B68                 jz      loc_7E3F
.text:0000000000007B6E
.text:0000000000007B6E loc_7B6E:                               ; CODE XREF: printf_parse+499↓j
.text:0000000000007B6E                                         ; printf_parse+545↓j ...
.text:0000000000007B6E                 xor     eax, eax
.text:0000000000007B70                 mov     esi, 1
.text:0000000000007B75                 jmp     short loc_7BA7
.text:0000000000007B75 ; ---------------------------------------------------------------------------
.text:0000000000007B77                 align 20h
.text:0000000000007B80
.text:0000000000007B80 loc_7B80:                               ; CODE XREF: printf_parse+20E↓j
.text:0000000000007B80                 cmp     bl, 4Ch ; 'L'
.text:0000000000007B83                 jz      short loc_7BC0
.text:0000000000007B85                 cmp     bl, 6Ch ; 'l'
.text:0000000000007B88                 jz      short loc_7BA0
.text:0000000000007B8A                 cmp     bl, 6Ah ; 'j'
.text:0000000000007B8D                 jz      short loc_7BA0
.text:0000000000007B8F                 mov     edx, ebx
.text:0000000000007B91                 and     edx, 0FFFFFFDFh
.text:0000000000007B94                 cmp     dl, 5Ah ; 'Z'
.text:0000000000007B97                 jz      short loc_7BA0
.text:0000000000007B99                 cmp     bl, 74h ; 't'
.text:0000000000007B9C                 jnz     short loc_7BC8
.text:0000000000007B9E                 xchg    ax, ax
.text:0000000000007BA0
.text:0000000000007BA0 loc_7BA0:                               ; CODE XREF: printf_parse+1E8↑j
.text:0000000000007BA0                                         ; printf_parse+1ED↑j ...
.text:0000000000007BA0                 add     eax, 8
.text:0000000000007BA3
.text:0000000000007BA3 loc_7BA3:                               ; CODE XREF: printf_parse+21B↓j
.text:0000000000007BA3                                         ; printf_parse+223↓j
.text:0000000000007BA3                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007BA7
.text:0000000000007BA7 loc_7BA7:                               ; CODE XREF: printf_parse+1D5↑j
.text:0000000000007BA7                 add     rbp, 1
.text:0000000000007BAB                 cmp     bl, 68h ; 'h'
.text:0000000000007BAE                 jnz     short loc_7B80
.text:0000000000007BB0                 mov     ecx, eax
.text:0000000000007BB2                 mov     edx, esi
.text:0000000000007BB4                 and     ecx, 1
.text:0000000000007BB7                 shl     edx, cl
.text:0000000000007BB9                 or      eax, edx
.text:0000000000007BBB                 jmp     short loc_7BA3
.text:0000000000007BBB ; ---------------------------------------------------------------------------
.text:0000000000007BBD                 align 20h
.text:0000000000007BC0
.text:0000000000007BC0 loc_7BC0:                               ; CODE XREF: printf_parse+1E3↑j
.text:0000000000007BC0                 or      eax, 4
.text:0000000000007BC3                 jmp     short loc_7BA3
.text:0000000000007BC3 ; ---------------------------------------------------------------------------
.text:0000000000007BC5                 align 8
.text:0000000000007BC8
.text:0000000000007BC8 loc_7BC8:                               ; CODE XREF: printf_parse+1FC↑j
.text:0000000000007BC8                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:0000000000007BCB                 cmp     dl, 53h
.text:0000000000007BCE                 ja      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007BD4                 lea     rcx, jpt_7BE5
.text:0000000000007BDB                 movzx   edx, dl
.text:0000000000007BDE                 movsxd  rdx, ds:(jpt_7BE5 - 981Ch)[rcx+rdx*4]
.text:0000000000007BE2                 add     rdx, rcx
.text:0000000000007BE5                 jmp     rdx             ; switch jump
.text:0000000000007BE7 ; ---------------------------------------------------------------------------
.text:0000000000007BE7
.text:0000000000007BE7 loc_7BE7:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007BE7                                         ; DATA XREF: .rodata:jpt_7BE5↓o
.text:0000000000007BE7                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:0000000000007BED                 mov     ebx, 73h ; 's'
.text:0000000000007BF2                 nop     word ptr [rax+rax+00h]
.text:0000000000007BF8
.text:0000000000007BF8 loc_7BF8:                               ; CODE XREF: printf_parse+705↓j
.text:0000000000007BF8                                         ; printf_parse+70D↓j ...
.text:0000000000007BF8                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:0000000000007BFC                 jz      loc_82B7
.text:0000000000007C02                 mov     [r12+50h], r13
.text:0000000000007C07
.text:0000000000007C07 loc_7C07:                               ; CODE XREF: printf_parse+939↓j
.text:0000000000007C07                 cmp     r9, r13
.text:0000000000007C0A                 mov     rcx, [r15+8]
.text:0000000000007C0E                 jbe     loc_8230
.text:0000000000007C14
.text:0000000000007C14 loc_7C14:                               ; CODE XREF: printf_parse+912↓j
.text:0000000000007C14                 mov     rax, [r15]
.text:0000000000007C17                 mov     rdx, rax
.text:0000000000007C1A                 shl     rdx, 5
.text:0000000000007C1E                 add     rdx, rcx
.text:0000000000007C21                 cmp     rax, r13
.text:0000000000007C24                 ja      short loc_7C46
.text:0000000000007C26                 db      2Eh
.text:0000000000007C26                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007C30
.text:0000000000007C30 loc_7C30:                               ; CODE XREF: printf_parse+2A1↓j
.text:0000000000007C30                 add     rax, 1
.text:0000000000007C34                 mov     dword ptr [rdx], 0
.text:0000000000007C3A                 add     rdx, 20h ; ' '
.text:0000000000007C3E                 cmp     rax, r13
.text:0000000000007C41                 jbe     short loc_7C30
.text:0000000000007C43                 mov     [r15], rax
.text:0000000000007C46
.text:0000000000007C46 loc_7C46:                               ; CODE XREF: printf_parse+284↑j
.text:0000000000007C46                 shl     r13, 5
.text:0000000000007C4A                 lea     rax, [rcx+r13]
.text:0000000000007C4E                 mov     edx, [rax]
.text:0000000000007C50                 test    edx, edx
.text:0000000000007C52                 jnz     loc_8223
.text:0000000000007C58                 mov     [rax], r11d
.text:0000000000007C5B
.text:0000000000007C5B loc_7C5B:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007C5B                                         ; printf_parse+886↓j
.text:0000000000007C5B                                         ; DATA XREF: ...
.text:0000000000007C5B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:0000000000007C60                 mov     rax, [r14]
.text:0000000000007C63                 mov     [r12+8], rbp
.text:0000000000007C68                 lea     rbx, [rax+1]
.text:0000000000007C6C                 cmp     r10, rbx
.text:0000000000007C6F                 mov     [r14], rbx
.text:0000000000007C72                 ja      loc_7D00
.text:0000000000007C78                 test    r10, r10
.text:0000000000007C7B                 js      loc_8627
.text:0000000000007C81                 add     r10, r10
.text:0000000000007C84                 mov     rax, 2E8BA2E8BA2E8BAh
.text:0000000000007C8E                 cmp     r10, rax
.text:0000000000007C91                 ja      loc_8627
.text:0000000000007C97                 lea     rax, [r10+r10*4]
.text:0000000000007C9B                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007C9F                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007CA4                 mov     [rsp+88h+var_48], r9
.text:0000000000007CA9                 mov     [rsp+88h+var_50], r10
.text:0000000000007CAE                 lea     rax, [r10+rax*2]
.text:0000000000007CB2                 mov     [rsp+88h+var_58], r8
.text:0000000000007CB7                 lea     rsi, ds:0[rax*8] ; size
.text:0000000000007CBF                 jz      loc_837D
.text:0000000000007CC5                 call    _realloc        ; PIC mode
.text:0000000000007CCA                 test    rax, rax
.text:0000000000007CCD                 mov     rcx, rax
.text:0000000000007CD0                 mov     r8, [rsp+88h+var_58]
.text:0000000000007CD5                 mov     r10, [rsp+88h+var_50]
.text:0000000000007CDA                 mov     r9, [rsp+88h+var_48]
.text:0000000000007CDF                 jz      loc_8627
.text:0000000000007CE5                 mov     rax, [rsp+88h+var_60]
.text:0000000000007CEA                 cmp     rax, [r14+8]
.text:0000000000007CEE                 mov     rbx, [r14]
.text:0000000000007CF1                 jz      loc_83A0
.text:0000000000007CF7
.text:0000000000007CF7 loc_7CF7:                               ; CODE XREF: printf_parse+A3D↓j
.text:0000000000007CF7                 mov     [r14+8], rcx
.text:0000000000007CFB                 jmp     loc_7A18
.text:0000000000007D00 ; ---------------------------------------------------------------------------
.text:0000000000007D00
.text:0000000000007D00 loc_7D00:                               ; CODE XREF: printf_parse+2D2↑j
.text:0000000000007D00                 mov     rcx, [r14+8]
.text:0000000000007D04                 jmp     loc_7A18
.text:0000000000007D09 ; ---------------------------------------------------------------------------
.text:0000000000007D09
.text:0000000000007D09 loc_7D09:                               ; CODE XREF: printf_parse+1B3↑j
.text:0000000000007D09                 mov     rsi, [rsp+88h+var_78]
.text:0000000000007D0E                 mov     ecx, 1
.text:0000000000007D13                 mov     [r12+18h], rbp
.text:0000000000007D18                 mov     [r12+20h], rax
.text:0000000000007D1D                 test    rsi, rsi
.text:0000000000007D20                 cmovnz  rcx, rsi
.text:0000000000007D24                 mov     [rsp+88h+var_78], rcx
.text:0000000000007D29                 movzx   ecx, byte ptr [rbp+1]
.text:0000000000007D2D                 lea     esi, [rcx-30h]
.text:0000000000007D30                 cmp     sil, 9
.text:0000000000007D34                 jbe     loc_8015
.text:0000000000007D3A
.text:0000000000007D3A loc_7D3A:                               ; CODE XREF: printf_parse+68D↓j
.text:0000000000007D3A                 mov     rsi, [rsp+88h+var_68]
.text:0000000000007D3F                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007D43                 lea     rdx, [rsi+1]
.text:0000000000007D47                 mov     [r12+28h], rsi
.text:0000000000007D4C                 jz      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007D52                 mov     rbx, [rsp+88h+var_68]
.text:0000000000007D57                 mov     rbp, rax
.text:0000000000007D5A                 mov     [rsp+88h+var_68], rdx
.text:0000000000007D5F
.text:0000000000007D5F loc_7D5F:                               ; CODE XREF: printf_parse+6F7↓j
.text:0000000000007D5F                 cmp     r9, rbx
.text:0000000000007D62                 mov     rcx, [r15+8]
.text:0000000000007D66                 ja      loc_83E2
.text:0000000000007D6C                 add     r9, r9
.text:0000000000007D6F                 lea     rax, [rbx+1]
.text:0000000000007D73                 cmp     r9, rbx
.text:0000000000007D76                 cmovbe  r9, rax
.text:0000000000007D7A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007D84                 cmp     r9, rax
.text:0000000000007D87                 ja      loc_862B
.text:0000000000007D8D                 mov     rsi, r9
.text:0000000000007D90                 mov     [rsp+88h+var_48], r9
.text:0000000000007D95                 mov     [rsp+88h+var_50], r10
.text:0000000000007D9A                 shl     rsi, 5          ; size
.text:0000000000007D9E                 cmp     [rsp+88h+src], rcx
.text:0000000000007DA3                 mov     [rsp+88h+var_58], r8
.text:0000000000007DA8                 jz      loc_84C1
.text:0000000000007DAE                 mov     rdi, rcx        ; ptr
.text:0000000000007DB1                 call    _realloc        ; PIC mode
.text:0000000000007DB6                 mov     rdx, [r15+8]
.text:0000000000007DBA                 mov     r8, [rsp+88h+var_58]
.text:0000000000007DBF                 mov     rcx, rax
.text:0000000000007DC2                 mov     r10, [rsp+88h+var_50]
.text:0000000000007DC7                 mov     r9, [rsp+88h+var_48]
.text:0000000000007DCC
.text:0000000000007DCC loc_7DCC:                               ; CODE XREF: printf_parse+B40↓j
.text:0000000000007DCC                 test    rcx, rcx
.text:0000000000007DCF                 jz      loc_8687
.text:0000000000007DD5                 cmp     [rsp+88h+src], rdx
.text:0000000000007DDA                 mov     rax, [r15]
.text:0000000000007DDD                 jz      loc_859B
.text:0000000000007DE3
.text:0000000000007DE3 loc_7DE3:                               ; CODE XREF: printf_parse+C33↓j
.text:0000000000007DE3                 mov     [r15+8], rcx
.text:0000000000007DE7
.text:0000000000007DE7 loc_7DE7:                               ; CODE XREF: printf_parse+A45↓j
.text:0000000000007DE7                 mov     rdx, rax
.text:0000000000007DEA                 shl     rdx, 5
.text:0000000000007DEE                 add     rdx, rcx
.text:0000000000007DF1                 cmp     rax, rbx
.text:0000000000007DF4                 ja      short loc_7E16
.text:0000000000007DF6                 db      2Eh
.text:0000000000007DF6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007E00
.text:0000000000007E00 loc_7E00:                               ; CODE XREF: printf_parse+471↓j
.text:0000000000007E00                 add     rax, 1
.text:0000000000007E04                 mov     dword ptr [rdx], 0
.text:0000000000007E0A                 add     rdx, 20h ; ' '
.text:0000000000007E0E                 cmp     rax, rbx
.text:0000000000007E11                 jbe     short loc_7E00
.text:0000000000007E13                 mov     [r15], rax
.text:0000000000007E16
.text:0000000000007E16 loc_7E16:                               ; CODE XREF: printf_parse+454↑j
.text:0000000000007E16                 shl     rbx, 5
.text:0000000000007E1A                 lea     rax, [rcx+rbx]
.text:0000000000007E1E                 mov     edx, [rax]
.text:0000000000007E20                 test    edx, edx
.text:0000000000007E22                 jnz     loc_82FB
.text:0000000000007E28                 mov     dword ptr [rax], 5
.text:0000000000007E2E                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007E32                 lea     rdx, [rbp+1]
.text:0000000000007E36                 cmp     bl, 2Eh ; '.'
.text:0000000000007E39                 jnz     loc_7B6E
.text:0000000000007E3F
.text:0000000000007E3F loc_7E3F:                               ; CODE XREF: printf_parse+1C8↑j
.text:0000000000007E3F                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:0000000000007E43                 mov     [r12+30h], rbp
.text:0000000000007E48                 jnz     loc_7FCE
.text:0000000000007E4E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007E53                 lea     r11, [rbp+2]
.text:0000000000007E57                 mov     eax, 2
.text:0000000000007E5C                 mov     [r12+38h], r11
.text:0000000000007E61                 cmp     rsi, 2
.text:0000000000007E65                 cmovnb  rax, rsi
.text:0000000000007E69                 mov     [rsp+88h+var_70], rax
.text:0000000000007E6E                 movsx   eax, byte ptr [rbp+2]
.text:0000000000007E72                 lea     edx, [rax-30h]
.text:0000000000007E75                 cmp     dl, 9
.text:0000000000007E78                 jbe     loc_850C
.text:0000000000007E7E
.text:0000000000007E7E loc_7E7E:                               ; CODE XREF: printf_parse+B82↓j
.text:0000000000007E7E                 mov     rbx, [r12+40h]
.text:0000000000007E83                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007E87                 jz      loc_84E5
.text:0000000000007E8D
.text:0000000000007E8D loc_7E8D:                               ; CODE XREF: printf_parse+B67↓j
.text:0000000000007E8D                                         ; printf_parse+C59↓j
.text:0000000000007E8D                 cmp     r9, rbx
.text:0000000000007E90                 mov     rcx, [r15+8]
.text:0000000000007E94                 jbe     loc_83FF
.text:0000000000007E9A                 mov     rax, [r15]
.text:0000000000007E9D
.text:0000000000007E9D loc_7E9D:                               ; CODE XREF: printf_parse+AE4↓j
.text:0000000000007E9D                 mov     rdx, rax
.text:0000000000007EA0                 shl     rdx, 5
.text:0000000000007EA4                 add     rdx, rcx
.text:0000000000007EA7                 cmp     rax, rbx
.text:0000000000007EAA                 ja      short loc_7EC6
.text:0000000000007EAC                 nop     dword ptr [rax+00h]
.text:0000000000007EB0
.text:0000000000007EB0 loc_7EB0:                               ; CODE XREF: printf_parse+521↓j
.text:0000000000007EB0                 add     rax, 1
.text:0000000000007EB4                 mov     dword ptr [rdx], 0
.text:0000000000007EBA                 add     rdx, 20h ; ' '
.text:0000000000007EBE                 cmp     rax, rbx
.text:0000000000007EC1                 jbe     short loc_7EB0
.text:0000000000007EC3                 mov     [r15], rax
.text:0000000000007EC6
.text:0000000000007EC6 loc_7EC6:                               ; CODE XREF: printf_parse+50A↑j
.text:0000000000007EC6                 shl     rbx, 5
.text:0000000000007ECA                 lea     rax, [rcx+rbx]
.text:0000000000007ECE                 mov     edx, [rax]
.text:0000000000007ED0                 test    edx, edx
.text:0000000000007ED2                 jnz     loc_83EA
.text:0000000000007ED8                 mov     dword ptr [rax], 5
.text:0000000000007EDE                 mov     rbp, r11
.text:0000000000007EE1                 movzx   ebx, byte ptr [r11]
.text:0000000000007EE5                 jmp     loc_7B6E
.text:0000000000007EEA ; ---------------------------------------------------------------------------
.text:0000000000007EEA
.text:0000000000007EEA loc_7EEA:                               ; CODE XREF: printf_parse+112↑j
.text:0000000000007EEA                 mov     rax, rbp
.text:0000000000007EED                 nop     dword ptr [rax]
.text:0000000000007EF0
.text:0000000000007EF0 loc_7EF0:                               ; CODE XREF: printf_parse+55D↓j
.text:0000000000007EF0                 add     rax, 1
.text:0000000000007EF4                 movzx   edx, byte ptr [rax]
.text:0000000000007EF7                 lea     ecx, [rdx-30h]
.text:0000000000007EFA                 cmp     cl, 9
.text:0000000000007EFD                 jbe     short loc_7EF0
.text:0000000000007EFF                 cmp     dl, 24h ; '$'
.text:0000000000007F02                 mov     r13, r8
.text:0000000000007F05                 jnz     loc_7AEE
.text:0000000000007F0B                 xor     edx, edx
.text:0000000000007F0D
.text:0000000000007F0D loc_7F0D:                               ; CODE XREF: printf_parse+5B7↓j
.text:0000000000007F0D                 movsx   eax, bl
.text:0000000000007F10                 mov     rdi, 1999999999999999h
.text:0000000000007F1A                 mov     rsi, r8
.text:0000000000007F1D                 sub     eax, 30h ; '0'
.text:0000000000007F20                 cmp     rdx, rdi
.text:0000000000007F23                 cdqe
.text:0000000000007F25                 ja      short loc_7F2E
.text:0000000000007F27                 lea     rsi, [rdx+rdx*4]
.text:0000000000007F2B                 add     rsi, rsi
.text:0000000000007F2E
.text:0000000000007F2E loc_7F2E:                               ; CODE XREF: printf_parse+585↑j
.text:0000000000007F2E                 mov     rcx, rbp
.text:0000000000007F31
.text:0000000000007F31 loc_7F31:                               ; CODE XREF: printf_parse+956↓j
.text:0000000000007F31                 add     rax, rsi
.text:0000000000007F34                 movzx   ebx, byte ptr [rbp+1]
.text:0000000000007F38                 setb    sil
.text:0000000000007F3C                 add     rbp, 1
.text:0000000000007F40                 mov     rdx, rax
.text:0000000000007F43                 movzx   esi, sil
.text:0000000000007F47                 test    rsi, rsi
.text:0000000000007F4A                 lea     edi, [rbx-30h]
.text:0000000000007F4D                 jnz     loc_82DE
.text:0000000000007F53                 cmp     dil, 9
.text:0000000000007F57                 jbe     short loc_7F0D
.text:0000000000007F59                 mov     r13, rax
.text:0000000000007F5C                 sub     r13, 1
.text:0000000000007F60                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:0000000000007F64                 ja      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007F6A                 lea     rbp, [rcx+2]
.text:0000000000007F6E                 movzx   ebx, byte ptr [rcx+2]
.text:0000000000007F72                 jmp     loc_7AEE
.text:0000000000007F77 ; ---------------------------------------------------------------------------
.text:0000000000007F77
.text:0000000000007F77 loc_7F77:                               ; CODE XREF: printf_parse+1BF↑j
.text:0000000000007F77                 mov     [r12+18h], rbp
.text:0000000000007F7C                 movzx   edi, byte ptr [rbp+0]
.text:0000000000007F80                 mov     rsi, rbp
.text:0000000000007F83                 lea     ecx, [rdi-30h]
.text:0000000000007F86                 cmp     cl, 9
.text:0000000000007F89                 jbe     short loc_7F97
.text:0000000000007F8B                 jmp     short loc_7FC0
.text:0000000000007F8B ; ---------------------------------------------------------------------------
.text:0000000000007F8D                 align 10h
.text:0000000000007F90
.text:0000000000007F90 loc_7F90:                               ; CODE XREF: printf_parse+600↓j
.text:0000000000007F90                 mov     rbp, rax
.text:0000000000007F93                 add     rax, 1
.text:0000000000007F97
.text:0000000000007F97 loc_7F97:                               ; CODE XREF: printf_parse+5E9↑j
.text:0000000000007F97                 movzx   edi, byte ptr [rax]
.text:0000000000007F9A                 lea     edx, [rdi-30h]
.text:0000000000007F9D                 cmp     dl, 9
.text:0000000000007FA0                 jbe     short loc_7F90
.text:0000000000007FA2                 mov     rcx, rax
.text:0000000000007FA5                 lea     rdx, [rbp+2]
.text:0000000000007FA9                 mov     rbp, rax
.text:0000000000007FAC                 sub     rcx, rsi
.text:0000000000007FAF                 mov     rsi, [rsp+88h+var_78]
.text:0000000000007FB4                 cmp     rsi, rcx
.text:0000000000007FB7                 cmovnb  rcx, rsi
.text:0000000000007FBB                 mov     [rsp+88h+var_78], rcx
.text:0000000000007FC0
.text:0000000000007FC0 loc_7FC0:                               ; CODE XREF: printf_parse+5EB↑j
.text:0000000000007FC0                 mov     [r12+20h], rbp
.text:0000000000007FC5                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007FC9                 jmp     loc_7B65
.text:0000000000007FCE ; ---------------------------------------------------------------------------
.text:0000000000007FCE
.text:0000000000007FCE loc_7FCE:                               ; CODE XREF: printf_parse+4A8↑j
.text:0000000000007FCE                 movzx   eax, byte ptr [rbp+1]
.text:0000000000007FD2                 sub     eax, 30h ; '0'
.text:0000000000007FD5                 cmp     al, 9
.text:0000000000007FD7                 ja      short loc_7FEE
.text:0000000000007FD9                 nop     dword ptr [rax+00000000h]
.text:0000000000007FE0
.text:0000000000007FE0 loc_7FE0:                               ; CODE XREF: printf_parse+64C↓j
.text:0000000000007FE0                 add     rdx, 1
.text:0000000000007FE4                 movzx   eax, byte ptr [rdx]
.text:0000000000007FE7                 sub     eax, 30h ; '0'
.text:0000000000007FEA                 cmp     al, 9
.text:0000000000007FEC                 jbe     short loc_7FE0
.text:0000000000007FEE
.text:0000000000007FEE loc_7FEE:                               ; CODE XREF: printf_parse+637↑j
.text:0000000000007FEE                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007FF3                 mov     rax, rdx
.text:0000000000007FF6                 mov     [r12+38h], rdx
.text:0000000000007FFB                 sub     rax, rbp
.text:0000000000007FFE                 movzx   ebx, byte ptr [rdx]
.text:0000000000008001                 mov     rbp, rdx
.text:0000000000008004                 cmp     rsi, rax
.text:0000000000008007                 cmovnb  rax, rsi
.text:000000000000800B                 mov     [rsp+88h+var_70], rax
.text:0000000000008010                 jmp     loc_7B6E
.text:0000000000008015 ; ---------------------------------------------------------------------------
.text:0000000000008015
.text:0000000000008015 loc_8015:                               ; CODE XREF: printf_parse+394↑j
.text:0000000000008015                 mov     rsi, rax
.text:0000000000008018
.text:0000000000008018 loc_8018:                               ; CODE XREF: printf_parse+687↓j
.text:0000000000008018                 add     rsi, 1
.text:000000000000801C                 movzx   edi, byte ptr [rsi]
.text:000000000000801F                 lea     r11d, [rdi-30h]
.text:0000000000008023                 cmp     r11b, 9
.text:0000000000008027                 jbe     short loc_8018
.text:0000000000008029                 cmp     dil, 24h ; '$'
.text:000000000000802D                 jnz     loc_7D3A
.text:0000000000008033                 xor     esi, esi
.text:0000000000008035
.text:0000000000008035 loc_8035:                               ; CODE XREF: printf_parse+6DE↓j
.text:0000000000008035                 movsx   eax, cl
.text:0000000000008038                 mov     rdi, 1999999999999999h
.text:0000000000008042                 mov     rcx, r8
.text:0000000000008045                 sub     eax, 30h ; '0'
.text:0000000000008048                 cmp     rsi, rdi
.text:000000000000804B                 cdqe
.text:000000000000804D                 ja      short loc_8056
.text:000000000000804F                 lea     rcx, [rsi+rsi*4]
.text:0000000000008053                 add     rcx, rcx
.text:0000000000008056
.text:0000000000008056 loc_8056:                               ; CODE XREF: printf_parse+6AD↑j
.text:0000000000008056                 mov     rbp, rdx
.text:0000000000008059
.text:0000000000008059 loc_8059:                               ; CODE XREF: printf_parse+BF6↓j
.text:0000000000008059                 xor     r11d, r11d
.text:000000000000805C                 add     rax, rcx
.text:000000000000805F                 movzx   ecx, byte ptr [rdx+1]
.text:0000000000008063                 setb    r11b
.text:0000000000008067                 add     rdx, 1
.text:000000000000806B                 mov     rsi, rax
.text:000000000000806E                 test    r11, r11
.text:0000000000008071                 lea     edi, [rcx-30h]
.text:0000000000008074                 jnz     loc_857E
.text:000000000000807A                 cmp     dil, 9
.text:000000000000807E                 jbe     short loc_8035
.text:0000000000008080                 lea     rbx, [rax-1]
.text:0000000000008084                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000008088                 ja      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000808E                 mov     [r12+28h], rbx
.text:0000000000008093                 add     rbp, 2
.text:0000000000008097                 jmp     loc_7D5F
.text:000000000000809C ; ---------------------------------------------------------------------------
.text:000000000000809C
.text:000000000000809C loc_809C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000809C                                         ; DATA XREF: .rodata:jpt_7BE5↓o
.text:000000000000809C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:000000000000809F                 mov     r11d, 16h
.text:00000000000080A5                 jg      loc_7BF8
.text:00000000000080AB                 test    al, 4
.text:00000000000080AD                 jnz     loc_7BF8
.text:00000000000080B3                 cmp     eax, 7
.text:00000000000080B6                 mov     r11d, 15h
.text:00000000000080BC                 jg      loc_7BF8
.text:00000000000080C2                 test    al, 2
.text:00000000000080C4                 mov     r11d, 12h
.text:00000000000080CA                 jnz     loc_7BF8
.text:00000000000080D0                 xor     r11d, r11d
.text:00000000000080D3                 test    al, 1
.text:00000000000080D5                 setz    r11b
.text:00000000000080D9                 add     r11d, 13h
.text:00000000000080DD                 jmp     loc_7BF8
.text:00000000000080DD ; ---------------------------------------------------------------------------
.text:00000000000080E2                 align 8
.text:00000000000080E8
.text:00000000000080E8 loc_80E8:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000080E8                                         ; DATA XREF: .rodata:jpt_7BE5↓o
.text:00000000000080E8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:00000000000080EB                 cmp     eax, 7
.text:00000000000080EE                 setnle  r11b
.text:00000000000080F2                 add     r11d, 0Dh
.text:00000000000080F6                 jmp     loc_7BF8
.text:00000000000080FB ; ---------------------------------------------------------------------------
.text:00000000000080FB
.text:00000000000080FB loc_80FB:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000080FB                                         ; DATA XREF: .rodata:jpt_7BE5↓o
.text:00000000000080FB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:00000000000080FE                 mov     r11d, 9
.text:0000000000008104                 jg      loc_7BF8
.text:000000000000810A                 test    al, 4
.text:000000000000810C                 jnz     loc_7BF8
.text:0000000000008112                 cmp     eax, 7
.text:0000000000008115                 mov     r11d, 7
.text:000000000000811B                 jg      loc_7BF8
.text:0000000000008121                 test    al, 2
.text:0000000000008123                 mov     r11d, 1
.text:0000000000008129                 jnz     loc_7BF8
.text:000000000000812F                 and     eax, 1
.text:0000000000008132                 cmp     eax, 1
.text:0000000000008135                 sbb     r11d, r11d
.text:0000000000008138                 and     r11d, 2
.text:000000000000813C                 add     r11d, 3
.text:0000000000008140                 jmp     loc_7BF8
.text:0000000000008140 ; ---------------------------------------------------------------------------
.text:0000000000008145                 align 8
.text:0000000000008148
.text:0000000000008148 loc_8148:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000008148                                         ; DATA XREF: .rodata:jpt_7BE5↓o
.text:0000000000008148                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000000814B                 cmp     eax, 7
.text:000000000000814E                 setnle  r11b
.text:0000000000008152                 add     r11d, 0Fh
.text:0000000000008156                 jmp     loc_7BF8
.text:000000000000815B ; ---------------------------------------------------------------------------
.text:000000000000815B
.text:000000000000815B loc_815B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000815B                                         ; DATA XREF: .rodata:jpt_7BE5↓o
.text:000000000000815B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:000000000000815E                 mov     r11d, 0Ch
.text:0000000000008164                 jg      loc_7BF8
.text:000000000000816A                 xor     r11d, r11d
.text:000000000000816D                 test    al, 4
.text:000000000000816F                 setnz   r11b
.text:0000000000008173                 add     r11d, 0Bh
.text:0000000000008177                 jmp     loc_7BF8
.text:000000000000817C ; ---------------------------------------------------------------------------
.text:000000000000817C
.text:000000000000817C loc_817C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000817C                                         ; DATA XREF: .rodata:jpt_7BE5↓o
.text:000000000000817C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:0000000000008182                 mov     ebx, 63h ; 'c'
.text:0000000000008187                 jmp     loc_7BF8
.text:000000000000818C ; ---------------------------------------------------------------------------
.text:000000000000818C
.text:000000000000818C loc_818C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000818C                                         ; DATA XREF: .rodata:jpt_7BE5↓o
.text:000000000000818C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:000000000000818F                 mov     r11d, 0Ah
.text:0000000000008195                 jg      loc_7BF8
.text:000000000000819B                 test    al, 4
.text:000000000000819D                 jnz     loc_7BF8
.text:00000000000081A3                 cmp     eax, 7
.text:00000000000081A6                 mov     r11d, 8
.text:00000000000081AC                 jg      loc_7BF8
.text:00000000000081B2                 test    al, 2
.text:00000000000081B4                 mov     r11d, 2
.text:00000000000081BA                 jnz     loc_7BF8
.text:00000000000081C0                 and     eax, 1
.text:00000000000081C3                 cmp     eax, 1
.text:00000000000081C6                 sbb     r11d, r11d
.text:00000000000081C9                 and     r11d, 2
.text:00000000000081CD                 add     r11d, 4
.text:00000000000081D1                 jmp     loc_7BF8
.text:00000000000081D1 ; ---------------------------------------------------------------------------
.text:00000000000081D6                 align 20h
.text:00000000000081E0
.text:00000000000081E0 loc_81E0:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000081E0                                         ; DATA XREF: .rodata:jpt_7BE5↓o
.text:00000000000081E0                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:00000000000081E6                 jmp     loc_7BF8
.text:00000000000081EB ; ---------------------------------------------------------------------------
.text:00000000000081EB
.text:00000000000081EB def_7BE5:                               ; CODE XREF: printf_parse+22E↑j
.text:00000000000081EB                                         ; printf_parse+245↑j ...
.text:00000000000081EB                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000081EF
.text:00000000000081EF loc_81EF:                               ; CODE XREF: printf_parse+88C↓j
.text:00000000000081EF                                         ; printf_parse+95E↓j ...
.text:00000000000081EF                 cmp     [rsp+88h+src], rcx
.text:00000000000081F4                 jz      short loc_81FE
.text:00000000000081F6                 mov     rdi, rcx        ; ptr
.text:00000000000081F9                 call    _free           ; PIC mode
.text:00000000000081FE
.text:00000000000081FE loc_81FE:                               ; CODE XREF: printf_parse+854↑j
.text:00000000000081FE                 mov     rdi, [r14+8]    ; ptr
.text:0000000000008202                 cmp     [rsp+88h+var_60], rdi
.text:0000000000008207                 jz      short loc_820E
.text:0000000000008209                 call    _free           ; PIC mode
.text:000000000000820E
.text:000000000000820E loc_820E:                               ; CODE XREF: printf_parse+867↑j
.text:000000000000820E                 call    ___errno_location ; PIC mode
.text:0000000000008213                 mov     dword ptr [rax], 16h
.text:0000000000008219                 mov     eax, 0FFFFFFFFh
.text:000000000000821E                 jmp     loc_7A42
.text:0000000000008223 ; ---------------------------------------------------------------------------
.text:0000000000008223
.text:0000000000008223 loc_8223:                               ; CODE XREF: printf_parse+2B2↑j
.text:0000000000008223                 cmp     edx, r11d
.text:0000000000008226                 jz      loc_7C5B        ; jumptable 0000000000000245 case 37
.text:000000000000822C                 jmp     short loc_81EF
.text:000000000000822C ; ---------------------------------------------------------------------------
.text:000000000000822E                 align 10h
.text:0000000000008230
.text:0000000000008230 loc_8230:                               ; CODE XREF: printf_parse+26E↑j
.text:0000000000008230                 add     r9, r9
.text:0000000000008233                 lea     rax, [r13+1]
.text:0000000000008237                 cmp     r9, r13
.text:000000000000823A                 cmovbe  r9, rax
.text:000000000000823E                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000008248                 cmp     r9, rax
.text:000000000000824B                 ja      loc_862B
.text:0000000000008251                 mov     rsi, r9
.text:0000000000008254                 mov     [rsp+88h+var_40], r9
.text:0000000000008259                 mov     [rsp+88h+var_48], r10
.text:000000000000825E                 shl     rsi, 5          ; size
.text:0000000000008262                 cmp     [rsp+88h+src], rcx
.text:0000000000008267                 mov     [rsp+88h+var_50], r8
.text:000000000000826C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000008271                 jz      loc_8311
.text:0000000000008277                 mov     rdi, rcx        ; ptr
.text:000000000000827A                 call    _realloc        ; PIC mode
.text:000000000000827F                 test    rax, rax
.text:0000000000008282                 mov     rcx, rax
.text:0000000000008285                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000828A                 mov     r8, [rsp+88h+var_50]
.text:000000000000828F                 mov     r10, [rsp+88h+var_48]
.text:0000000000008294                 mov     r9, [rsp+88h+var_40]
.text:0000000000008299                 jz      loc_8627
.text:000000000000829F                 mov     rax, [rsp+88h+src]
.text:00000000000082A4                 cmp     rax, [r15+8]
.text:00000000000082A8                 jz      loc_8339
.text:00000000000082AE
.text:00000000000082AE loc_82AE:                               ; CODE XREF: printf_parse+9D8↓j
.text:00000000000082AE                 mov     [r15+8], rcx
.text:00000000000082B2                 jmp     loc_7C14
.text:00000000000082B7 ; ---------------------------------------------------------------------------
.text:00000000000082B7
.text:00000000000082B7 loc_82B7:                               ; CODE XREF: printf_parse+25C↑j
.text:00000000000082B7                 mov     rsi, [rsp+88h+var_68]
.text:00000000000082BC                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000082C0                 lea     rax, [rsi+1]
.text:00000000000082C4                 mov     [r12+50h], rsi
.text:00000000000082C9                 jz      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000082CF                 mov     r13, [rsp+88h+var_68]
.text:00000000000082D4                 mov     [rsp+88h+var_68], rax
.text:00000000000082D9                 jmp     loc_7C07
.text:00000000000082DE ; ---------------------------------------------------------------------------
.text:00000000000082DE
.text:00000000000082DE loc_82DE:                               ; CODE XREF: printf_parse+5AD↑j
.text:00000000000082DE                 cmp     dil, 9
.text:00000000000082E2                 ja      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000082E8                 movsx   eax, bl
.text:00000000000082EB                 mov     rsi, r8
.text:00000000000082EE                 mov     rcx, rbp
.text:00000000000082F1                 sub     eax, 30h ; '0'
.text:00000000000082F4                 cdqe
.text:00000000000082F6                 jmp     loc_7F31
.text:00000000000082FB ; ---------------------------------------------------------------------------
.text:00000000000082FB
.text:00000000000082FB loc_82FB:                               ; CODE XREF: printf_parse+482↑j
.text:00000000000082FB                 cmp     edx, 5
.text:00000000000082FE                 jnz     loc_81EF
.text:0000000000008304                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000008308                 lea     rdx, [rbp+1]
.text:000000000000830C                 jmp     loc_7B65
.text:0000000000008311 ; ---------------------------------------------------------------------------
.text:0000000000008311
.text:0000000000008311 loc_8311:                               ; CODE XREF: printf_parse+8D1↑j
.text:0000000000008311                 mov     rdi, rsi        ; size
.text:0000000000008314                 call    _malloc         ; PIC mode
.text:0000000000008319                 test    rax, rax
.text:000000000000831C                 mov     rcx, rax
.text:000000000000831F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000008324                 mov     r8, [rsp+88h+var_50]
.text:0000000000008329                 mov     r10, [rsp+88h+var_48]
.text:000000000000832E                 mov     r9, [rsp+88h+var_40]
.text:0000000000008333                 jz      loc_849C
.text:0000000000008339
.text:0000000000008339 loc_8339:                               ; CODE XREF: printf_parse+908↑j
.text:0000000000008339                 mov     rdx, [r15]
.text:000000000000833C                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000008341                 mov     rdi, rcx        ; dest
.text:0000000000008344                 mov     [rsp+88h+var_40], r9
.text:0000000000008349                 mov     [rsp+88h+var_48], r10
.text:000000000000834E                 mov     [rsp+88h+var_50], r8
.text:0000000000008353                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000008358                 shl     rdx, 5          ; n
.text:000000000000835C                 call    _memcpy         ; PIC mode
.text:0000000000008361                 mov     r9, [rsp+88h+var_40]
.text:0000000000008366                 mov     r10, [rsp+88h+var_48]
.text:000000000000836B                 mov     rcx, rax
.text:000000000000836E                 mov     r8, [rsp+88h+var_50]
.text:0000000000008373                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000008378                 jmp     loc_82AE
.text:000000000000837D ; ---------------------------------------------------------------------------
.text:000000000000837D
.text:000000000000837D loc_837D:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000837D                 mov     rdi, rsi        ; size
.text:0000000000008380                 call    _malloc         ; PIC mode
.text:0000000000008385                 test    rax, rax
.text:0000000000008388                 mov     rcx, rax
.text:000000000000838B                 mov     r8, [rsp+88h+var_58]
.text:0000000000008390                 mov     r10, [rsp+88h+var_50]
.text:0000000000008395                 mov     r9, [rsp+88h+var_48]
.text:000000000000839A                 jz      loc_8489
.text:00000000000083A0
.text:00000000000083A0 loc_83A0:                               ; CODE XREF: printf_parse+351↑j
.text:00000000000083A0                 lea     rax, [rbx+rbx*4]
.text:00000000000083A4                 mov     rsi, [rsp+88h+var_60] ; src
.text:00000000000083A9                 mov     rdi, rcx        ; dest
.text:00000000000083AC                 mov     [rsp+88h+var_48], r9
.text:00000000000083B1                 mov     [rsp+88h+var_50], r10
.text:00000000000083B6                 lea     rdx, [rbx+rax*2]
.text:00000000000083BA                 mov     [rsp+88h+var_58], r8
.text:00000000000083BF                 shl     rdx, 3          ; n
.text:00000000000083C3                 call    _memcpy         ; PIC mode
.text:00000000000083C8                 mov     rbx, [r14]
.text:00000000000083CB                 mov     rcx, rax
.text:00000000000083CE                 mov     r9, [rsp+88h+var_48]
.text:00000000000083D3                 mov     r10, [rsp+88h+var_50]
.text:00000000000083D8                 mov     r8, [rsp+88h+var_58]
.text:00000000000083DD                 jmp     loc_7CF7
.text:00000000000083E2 ; ---------------------------------------------------------------------------
.text:00000000000083E2
.text:00000000000083E2 loc_83E2:                               ; CODE XREF: printf_parse+3C6↑j
.text:00000000000083E2                 mov     rax, [r15]
.text:00000000000083E5                 jmp     loc_7DE7
.text:00000000000083EA ; ---------------------------------------------------------------------------
.text:00000000000083EA
.text:00000000000083EA loc_83EA:                               ; CODE XREF: printf_parse+532↑j
.text:00000000000083EA                 cmp     edx, 5
.text:00000000000083ED                 jnz     loc_81EF
.text:00000000000083F3                 movzx   ebx, byte ptr [r11]
.text:00000000000083F7                 mov     rbp, r11
.text:00000000000083FA                 jmp     loc_7B6E
.text:00000000000083FF ; ---------------------------------------------------------------------------
.text:00000000000083FF
.text:00000000000083FF loc_83FF:                               ; CODE XREF: printf_parse+4F4↑j
.text:00000000000083FF                 add     r9, r9
.text:0000000000008402                 lea     rax, [rbx+1]
.text:0000000000008406                 cmp     r9, rbx
.text:0000000000008409                 cmovbe  r9, rax
.text:000000000000840D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000008417                 cmp     r9, rax
.text:000000000000841A                 ja      loc_862B
.text:0000000000008420                 mov     rsi, r9
.text:0000000000008423                 mov     [rsp+88h+var_40], r9
.text:0000000000008428                 mov     [rsp+88h+var_48], r10
.text:000000000000842D                 shl     rsi, 5          ; size
.text:0000000000008431                 cmp     [rsp+88h+src], rcx
.text:0000000000008436                 mov     [rsp+88h+var_50], r8
.text:000000000000843B                 mov     [rsp+88h+var_58], r11
.text:0000000000008440                 jz      loc_85FE
.text:0000000000008446                 mov     rdi, rcx        ; ptr
.text:0000000000008449                 call    _realloc        ; PIC mode
.text:000000000000844E                 mov     rdx, [r15+8]
.text:0000000000008452                 mov     r11, [rsp+88h+var_58]
.text:0000000000008457                 mov     rcx, rax
.text:000000000000845A                 mov     r8, [rsp+88h+var_50]
.text:000000000000845F                 mov     r10, [rsp+88h+var_48]
.text:0000000000008464                 mov     r9, [rsp+88h+var_40]
.text:0000000000008469
.text:0000000000008469 loc_8469:                               ; CODE XREF: printf_parse+C82↓j
.text:0000000000008469                 test    rcx, rcx
.text:000000000000846C                 jz      loc_8687
.text:0000000000008472                 cmp     [rsp+88h+src], rdx
.text:0000000000008477                 mov     rax, [r15]
.text:000000000000847A                 jz      loc_8640
.text:0000000000008480
.text:0000000000008480 loc_8480:                               ; CODE XREF: printf_parse+CE2↓j
.text:0000000000008480                 mov     [r15+8], rcx
.text:0000000000008484                 jmp     loc_7E9D
.text:0000000000008489 ; ---------------------------------------------------------------------------
.text:0000000000008489
.text:0000000000008489 loc_8489:                               ; CODE XREF: printf_parse+9FA↑j
.text:0000000000008489                 mov     rcx, [r15+8]
.text:000000000000848D                 cmp     [rsp+88h+src], rcx
.text:0000000000008492                 jz      short loc_84AC
.text:0000000000008494
.text:0000000000008494 loc_8494:                               ; CODE XREF: printf_parse+C90↓j
.text:0000000000008494                 mov     rdi, rcx        ; ptr
.text:0000000000008497                 call    _free           ; PIC mode
.text:000000000000849C
.text:000000000000849C loc_849C:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000849C                                         ; printf_parse+C96↓j
.text:000000000000849C                 mov     rdi, [r14+8]    ; ptr
.text:00000000000084A0                 cmp     [rsp+88h+var_60], rdi
.text:00000000000084A5                 jz      short loc_84AC
.text:00000000000084A7                 call    _free           ; PIC mode
.text:00000000000084AC
.text:00000000000084AC loc_84AC:                               ; CODE XREF: printf_parse+AF2↑j
.text:00000000000084AC                                         ; printf_parse+B05↑j
.text:00000000000084AC                 call    ___errno_location ; PIC mode
.text:00000000000084B1                 mov     dword ptr [rax], 0Ch
.text:00000000000084B7                 mov     eax, 0FFFFFFFFh
.text:00000000000084BC                 jmp     loc_7A42
.text:00000000000084C1 ; ---------------------------------------------------------------------------
.text:00000000000084C1
.text:00000000000084C1 loc_84C1:                               ; CODE XREF: printf_parse+408↑j
.text:00000000000084C1                 mov     rdi, rsi        ; size
.text:00000000000084C4                 call    _malloc         ; PIC mode
.text:00000000000084C9                 mov     rdx, [rsp+88h+src]
.text:00000000000084CE                 mov     rcx, rax
.text:00000000000084D1                 mov     r9, [rsp+88h+var_48]
.text:00000000000084D6                 mov     r10, [rsp+88h+var_50]
.text:00000000000084DB                 mov     r8, [rsp+88h+var_58]
.text:00000000000084E0                 jmp     loc_7DCC
.text:00000000000084E5 ; ---------------------------------------------------------------------------
.text:00000000000084E5
.text:00000000000084E5 loc_84E5:                               ; CODE XREF: printf_parse+4E7↑j
.text:00000000000084E5                 mov     rsi, [rsp+88h+var_68]
.text:00000000000084EA                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000084EE                 lea     rax, [rsi+1]
.text:00000000000084F2                 mov     [r12+40h], rsi
.text:00000000000084F7                 jz      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000084FD                 mov     rbx, [rsp+88h+var_68]
.text:0000000000008502                 mov     [rsp+88h+var_68], rax
.text:0000000000008507                 jmp     loc_7E8D
.text:000000000000850C ; ---------------------------------------------------------------------------
.text:000000000000850C
.text:000000000000850C loc_850C:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000850C                 mov     rdx, r11
.text:000000000000850F
.text:000000000000850F loc_850F:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000850F                 add     rdx, 1
.text:0000000000008513                 movzx   ecx, byte ptr [rdx]
.text:0000000000008516                 lea     esi, [rcx-30h]
.text:0000000000008519                 cmp     sil, 9
.text:000000000000851D                 jbe     short loc_850F
.text:000000000000851F                 cmp     cl, 24h ; '$'
.text:0000000000008522                 jnz     loc_7E7E
.text:0000000000008528                 xor     ecx, ecx
.text:000000000000852A
.text:000000000000852A loc_852A:                               ; CODE XREF: printf_parse+C3C↓j
.text:000000000000852A                 mov     rsi, 1999999999999999h
.text:0000000000008534                 sub     eax, 30h ; '0'
.text:0000000000008537                 mov     rdx, r8
.text:000000000000853A                 cmp     rcx, rsi
.text:000000000000853D                 cdqe
.text:000000000000853F                 ja      short loc_8548
.text:0000000000008541                 lea     rdx, [rcx+rcx*4]
.text:0000000000008545                 add     rdx, rdx
.text:0000000000008548
.text:0000000000008548 loc_8548:                               ; CODE XREF: printf_parse+B9F↑j
.text:0000000000008548                 mov     rsi, r11
.text:000000000000854B
.text:000000000000854B loc_854B:                               ; CODE XREF: printf_parse+BDC↓j
.text:000000000000854B                 xor     ebx, ebx
.text:000000000000854D                 add     rdx, rax
.text:0000000000008550                 movsx   eax, byte ptr [r11+1]
.text:0000000000008555                 setb    bl
.text:0000000000008558                 add     r11, 1
.text:000000000000855C                 mov     rcx, rdx
.text:000000000000855F                 test    rbx, rbx
.text:0000000000008562                 lea     edi, [rax-30h]
.text:0000000000008565                 jz      short loc_85D8
.text:0000000000008567                 cmp     dil, 9
.text:000000000000856B                 ja      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000008571                 sub     eax, 30h ; '0'
.text:0000000000008574                 mov     rdx, r8
.text:0000000000008577                 mov     rsi, r11
.text:000000000000857A                 cdqe
.text:000000000000857C                 jmp     short loc_854B
.text:000000000000857E ; ---------------------------------------------------------------------------
.text:000000000000857E
.text:000000000000857E loc_857E:                               ; CODE XREF: printf_parse+6D4↑j
.text:000000000000857E                 cmp     dil, 9
.text:0000000000008582                 ja      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000008588                 movsx   eax, cl
.text:000000000000858B                 mov     rbp, rdx
.text:000000000000858E                 mov     rcx, r8
.text:0000000000008591                 sub     eax, 30h ; '0'
.text:0000000000008594                 cdqe
.text:0000000000008596                 jmp     loc_8059
.text:000000000000859B ; ---------------------------------------------------------------------------
.text:000000000000859B
.text:000000000000859B loc_859B:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000859B                 mov     rsi, [rsp+88h+src] ; src
.text:00000000000085A0                 shl     rax, 5
.text:00000000000085A4                 mov     rdi, rcx        ; dest
.text:00000000000085A7                 mov     rdx, rax        ; n
.text:00000000000085AA                 mov     [rsp+88h+var_48], r9
.text:00000000000085AF                 mov     [rsp+88h+var_50], r10
.text:00000000000085B4                 mov     [rsp+88h+var_58], r8
.text:00000000000085B9                 call    _memcpy         ; PIC mode
.text:00000000000085BE                 mov     r9, [rsp+88h+var_48]
.text:00000000000085C3                 mov     rcx, rax
.text:00000000000085C6                 mov     r10, [rsp+88h+var_50]
.text:00000000000085CB                 mov     rax, [r15]
.text:00000000000085CE                 mov     r8, [rsp+88h+var_58]
.text:00000000000085D3                 jmp     loc_7DE3
.text:00000000000085D8 ; ---------------------------------------------------------------------------
.text:00000000000085D8
.text:00000000000085D8 loc_85D8:                               ; CODE XREF: printf_parse+BC5↑j
.text:00000000000085D8                 cmp     dil, 9
.text:00000000000085DC                 jbe     loc_852A
.text:00000000000085E2                 lea     rbx, [rdx-1]
.text:00000000000085E6                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:00000000000085EA                 ja      def_7BE5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000085F0                 mov     [r12+40h], rbx
.text:00000000000085F5                 lea     r11, [rsi+2]
.text:00000000000085F9                 jmp     loc_7E8D
.text:00000000000085FE ; ---------------------------------------------------------------------------
.text:00000000000085FE
.text:00000000000085FE loc_85FE:                               ; CODE XREF: printf_parse+AA0↑j
.text:00000000000085FE                 mov     rdi, rsi        ; size
.text:0000000000008601                 call    _malloc         ; PIC mode
.text:0000000000008606                 mov     rdx, [rsp+88h+src]
.text:000000000000860B                 mov     rcx, rax
.text:000000000000860E                 mov     r9, [rsp+88h+var_40]
.text:0000000000008613                 mov     r10, [rsp+88h+var_48]
.text:0000000000008618                 mov     r8, [rsp+88h+var_50]
.text:000000000000861D                 mov     r11, [rsp+88h+var_58]
.text:0000000000008622                 jmp     loc_8469
.text:0000000000008627 ; ---------------------------------------------------------------------------
.text:0000000000008627
.text:0000000000008627 loc_8627:                               ; CODE XREF: printf_parse+2DB↑j
.text:0000000000008627                                         ; printf_parse+2F1↑j ...
.text:0000000000008627                 mov     rcx, [r15+8]
.text:000000000000862B
.text:000000000000862B loc_862B:                               ; CODE XREF: printf_parse+3E7↑j
.text:000000000000862B                                         ; printf_parse+8AB↑j ...
.text:000000000000862B                 cmp     [rsp+88h+src], rcx
.text:0000000000008630                 jnz     loc_8494
.text:0000000000008636                 jmp     loc_849C
.text:0000000000008636 ; ---------------------------------------------------------------------------
.text:000000000000863B                 align 20h
.text:0000000000008640
.text:0000000000008640 loc_8640:                               ; CODE XREF: printf_parse+ADA↑j
.text:0000000000008640                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000008645                 shl     rax, 5
.text:0000000000008649                 mov     rdi, rcx        ; dest
.text:000000000000864C                 mov     rdx, rax        ; n
.text:000000000000864F                 mov     [rsp+88h+var_40], r9
.text:0000000000008654                 mov     [rsp+88h+var_48], r10
.text:0000000000008659                 mov     [rsp+88h+var_50], r8
.text:000000000000865E                 mov     [rsp+88h+var_58], r11
.text:0000000000008663                 call    _memcpy         ; PIC mode
.text:0000000000008668                 mov     r9, [rsp+88h+var_40]
.text:000000000000866D                 mov     rcx, rax
.text:0000000000008670                 mov     r10, [rsp+88h+var_48]
.text:0000000000008675                 mov     rax, [r15]
.text:0000000000008678                 mov     r8, [rsp+88h+var_50]
.text:000000000000867D                 mov     r11, [rsp+88h+var_58]
.text:0000000000008682                 jmp     loc_8480
.text:0000000000008687 ; ---------------------------------------------------------------------------
.text:0000000000008687
.text:0000000000008687 loc_8687:                               ; CODE XREF: printf_parse+42F↑j
.text:0000000000008687                                         ; printf_parse+ACC↑j
.text:0000000000008687                 mov     rcx, rdx
.text:000000000000868A                 jmp     short loc_862B
.text:000000000000868A ; } // starts at 79A0
.text:000000000000868A printf_parse    endp
.text:000000000000868A
.text:000000000000868A ; ---------------------------------------------------------------------------
.text:000000000000868C                 align 10h
.text:0000000000008690
.text:0000000000008690 ; =============== S U B R O U T I N E =======================================
.text:0000000000008690
.text:0000000000008690 ; Attributes: info_from_lumina
.text:0000000000008690
.text:0000000000008690 ; void _libc_csu_init(void)
.text:0000000000008690                 public __libc_csu_init
.text:0000000000008690 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000008690 ; __unwind {
.text:0000000000008690                 push    r15
.text:0000000000008692                 push    r14
.text:0000000000008694                 mov     r15, rdx
.text:0000000000008697                 push    r13
.text:0000000000008699                 push    r12
.text:000000000000869B                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000086A2                 push    rbp
.text:00000000000086A3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000086AA                 push    rbx
.text:00000000000086AB                 mov     r13d, edi
.text:00000000000086AE                 mov     r14, rsi
.text:00000000000086B1                 sub     rbp, r12
.text:00000000000086B4                 sub     rsp, 8
.text:00000000000086B8                 sar     rbp, 3
.text:00000000000086BC                 call    _init_proc
.text:00000000000086C1                 test    rbp, rbp
.text:00000000000086C4                 jz      short loc_86E6
.text:00000000000086C6                 xor     ebx, ebx
.text:00000000000086C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000086D0
.text:00000000000086D0 loc_86D0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000086D0                 mov     rdx, r15
.text:00000000000086D3                 mov     rsi, r14
.text:00000000000086D6                 mov     edi, r13d
.text:00000000000086D9                 call    ds:(__frame_dummy_init_array_entry - 20BA90h)[r12+rbx*8]
.text:00000000000086DD                 add     rbx, 1
.text:00000000000086E1                 cmp     rbp, rbx
.text:00000000000086E4                 jnz     short loc_86D0
.text:00000000000086E6
.text:00000000000086E6 loc_86E6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000086E6                 add     rsp, 8
.text:00000000000086EA                 pop     rbx
.text:00000000000086EB                 pop     rbp
.text:00000000000086EC                 pop     r12
.text:00000000000086EE                 pop     r13
.text:00000000000086F0                 pop     r14
.text:00000000000086F2                 pop     r15
.text:00000000000086F4                 retn
.text:00000000000086F4 ; } // starts at 8690
.text:00000000000086F4 __libc_csu_init endp
.text:00000000000086F4
.text:00000000000086F4 ; ---------------------------------------------------------------------------
.text:00000000000086F5                 align 20h
.text:0000000000008700
.text:0000000000008700 ; =============== S U B R O U T I N E =======================================
.text:0000000000008700
.text:0000000000008700
.text:0000000000008700 ; void _libc_csu_fini(void)
.text:0000000000008700                 public __libc_csu_fini
.text:0000000000008700 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000008700 ; __unwind {
.text:0000000000008700                 rep retn
.text:0000000000008700 ; } // starts at 8700
.text:0000000000008700 __libc_csu_fini endp
.text:0000000000008700
.text:0000000000008700 ; ---------------------------------------------------------------------------
.text:0000000000008702                 align 10h
.text:0000000000008710
.text:0000000000008710 ; =============== S U B R O U T I N E =======================================
.text:0000000000008710
.text:0000000000008710
.text:0000000000008710 atexit          proc near               ; CODE XREF: main+89↑p
.text:0000000000008710 ; __unwind {
.text:0000000000008710                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000008717                 xor     esi, esi        ; obj
.text:0000000000008719                 jmp     ___cxa_atexit
.text:0000000000008719 ; } // starts at 8710
.text:0000000000008719 atexit          endp
.text:0000000000008719
.text:0000000000008719 _text           ends
.text:0000000000008719
LOAD:000000000000871E ; ===========================================================================
LOAD:000000000000871E
LOAD:000000000000871E ; Segment type: Pure code
LOAD:000000000000871E ; Segment permissions: Read/Execute
LOAD:000000000000871E LOAD            segment byte public 'CODE' use64
LOAD:000000000000871E                 assume cs:LOAD
LOAD:000000000000871E                 ;org 871Eh
LOAD:000000000000871E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000871E                 align 20h
LOAD:000000000000871E LOAD            ends
LOAD:000000000000871E
.fini:0000000000008720 ; ===========================================================================
.fini:0000000000008720
.fini:0000000000008720 ; Segment type: Pure code
.fini:0000000000008720 ; Segment permissions: Read/Execute
.fini:0000000000008720 _fini           segment dword public 'CODE' use64
.fini:0000000000008720                 assume cs:_fini
.fini:0000000000008720                 ;org 8720h
.fini:0000000000008720                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000008720
.fini:0000000000008720 ; =============== S U B R O U T I N E =======================================
.fini:0000000000008720
.fini:0000000000008720
.fini:0000000000008720                 public _term_proc
.fini:0000000000008720 _term_proc      proc near
.fini:0000000000008720                 sub     rsp, 8          ; _fini
.fini:0000000000008724                 add     rsp, 8
.fini:0000000000008728                 retn
.fini:0000000000008728 _term_proc      endp
.fini:0000000000008728
.fini:0000000000008728 _fini           ends
.fini:0000000000008728
LOAD:0000000000008729 ; ===========================================================================
LOAD:0000000000008729
LOAD:0000000000008729 ; Segment type: Pure code
LOAD:0000000000008729 ; Segment permissions: Read/Execute
LOAD:0000000000008729 LOAD            segment byte public 'CODE' use64
LOAD:0000000000008729                 assume cs:LOAD
LOAD:0000000000008729                 ;org 8729h
LOAD:0000000000008729                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000008729                 align 20h
LOAD:0000000000008729 LOAD            ends
LOAD:0000000000008729
.rodata:0000000000008740 ; ===========================================================================
.rodata:0000000000008740
.rodata:0000000000008740 ; Segment type: Pure data
.rodata:0000000000008740 ; Segment permissions: Read
.rodata:0000000000008740 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000008740                 assume cs:_rodata
.rodata:0000000000008740                 ;org 8740h
.rodata:0000000000008740                 public _IO_stdin_used
.rodata:0000000000008740 _IO_stdin_used  db    1
.rodata:0000000000008741                 db    0
.rodata:0000000000008742                 db    2
.rodata:0000000000008743                 db    0
.rodata:0000000000008744 aMkdir_0        db 'mkdir',0            ; DATA XREF: main+117↑o
.rodata:0000000000008744                                         ; usage+156↑o ...
.rodata:000000000000874A asc_874A        db '[',0                ; DATA XREF: usage+162↑o
.rodata:000000000000874C aTestInvocation db 'test invocation',0  ; DATA XREF: usage+189↑o
.rodata:000000000000875C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000875C                                         ; DATA XREF: usage+1B9↑o
.rodata:000000000000875C                                         ; usage+2B4↑o ...
.rodata:0000000000008772 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1CA↑o
.rodata:000000000000877C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1D6↑o
.rodata:000000000000878B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+169↑o
.rodata:0000000000008795 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+195↑o
.rodata:000000000000879F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1AD↑o
.rodata:00000000000087A9 ; const char aSOnlineHelpS[]
.rodata:00000000000087A9 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+222↑o
.rodata:00000000000087A9                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000087C0 unk_87C0        db  47h ; G             ; DATA XREF: main+110↑o
.rodata:00000000000087C0                                         ; usage+23E↑o ...
.rodata:00000000000087C1                 db  4Eh ; N
.rodata:00000000000087C2                 db  55h ; U
.rodata:00000000000087C3                 db  20h
.rodata:00000000000087C4 ; const char domainname[]
.rodata:00000000000087C4 domainname      db 'coreutils',0        ; DATA XREF: main+6A↑o
.rodata:00000000000087C4                                         ; main+76↑o ...
.rodata:00000000000087CE ; const char s2[]
.rodata:00000000000087CE s2              db 'en_',0              ; DATA XREF: usage+265↑o
.rodata:00000000000087CE                                         ; usage+326↑o
.rodata:00000000000087D2 ; const char aFullDocumentat[]
.rodata:00000000000087D2 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000087D2                                         ; DATA XREF: usage:loc_22F1↑o
.rodata:00000000000087D2                                         ; usage:loc_23AE↑o
.rodata:00000000000087ED ; const char dirname[]
.rodata:00000000000087ED dirname         db '/usr/local/share/locale',0
.rodata:00000000000087ED                                         ; DATA XREF: main+63↑o
.rodata:0000000000008805 ; const char aCreatedDirecto[]
.rodata:0000000000008805 aCreatedDirecto db 'created directory %s',0
.rodata:0000000000008805                                         ; DATA XREF: main:loc_1C58↑o
.rodata:000000000000881A aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+109↑o
.rodata:000000000000882A ; const char shortopts[]
.rodata:000000000000882A shortopts       db 'pm:vZ',0            ; DATA XREF: main+95↑o
.rodata:0000000000008830 ; const char aMissingOperand[]
.rodata:0000000000008830 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_1D9B↑o
.rodata:0000000000008840 ; const char aInvalidModeS[]
.rodata:0000000000008840 aInvalidModeS   db 'invalid mode %s',0  ; DATA XREF: main+27C↑o
.rodata:0000000000008850 aContext        db 'context',0          ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000008858 aMode           db 'mode',0             ; DATA XREF: .data.rel.ro:000000000020BAC0↓o
.rodata:000000000000885D aParents        db 'parents',0          ; DATA XREF: .data.rel.ro:000000000020BAE0↓o
.rodata:0000000000008865 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020BB00↓o
.rodata:000000000000886D aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020BB20↓o
.rodata:0000000000008872 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020BB40↓o
.rodata:000000000000887A                 align 20h
.rodata:0000000000008880 ; const char aTrySHelpForMor[]
.rodata:0000000000008880 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000008880                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000088A7                 align 8
.rodata:00000000000088A8 ; const char aUsageSOptionDi[]
.rodata:00000000000088A8 aUsageSOptionDi db 'Usage: %s [OPTION]... DIRECTORY...',0Ah,0
.rodata:00000000000088A8                                         ; DATA XREF: usage:loc_20CD↑o
.rodata:00000000000088CC                 align 10h
.rodata:00000000000088D0 ; const char aCreateTheDirec[]
.rodata:00000000000088D0 aCreateTheDirec db 'Create the DIRECTORY(ies), if they do not already exist.',0Ah,0
.rodata:00000000000088D0                                         ; DATA XREF: usage+84↑o
.rodata:000000000000890A                 align 10h
.rodata:0000000000008910 ; const char aMandatoryArgum[]
.rodata:0000000000008910 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000008910                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000008910                 db 'ns too.',0Ah,0
.rodata:000000000000895B                 align 20h
.rodata:0000000000008960 ; const char aMModeModeSetFi[]
.rodata:0000000000008960 aMModeModeSetFi db '  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umas'
.rodata:0000000000008960                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000008960                 db 'k',0Ah
.rodata:0000000000008960                 db '  -p, --parents     no error if existing, make parent directories'
.rodata:0000000000008960                 db ' as needed',0Ah
.rodata:0000000000008960                 db '  -v, --verbose     print a message for each created directory',0Ah
.rodata:0000000000008960                 db 0
.rodata:0000000000008A2F                 align 10h
.rodata:0000000000008A30 ; const char aZSetSelinuxSec[]
.rodata:0000000000008A30 aZSetSelinuxSec db '  -Z                   set SELinux security context of each creat'
.rodata:0000000000008A30                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000008A30                 db 'ed directory',0Ah
.rodata:0000000000008A30                 db '                         to the default type',0Ah
.rodata:0000000000008A30                 db '      --context[=CTX]  like -Z, or if CTX is specified then set t'
.rodata:0000000000008A30                 db 'he SELinux',0Ah
.rodata:0000000000008A30                 db '                         or SMACK security context to CTX',0Ah,0
.rodata:0000000000008B32                 align 8
.rodata:0000000000008B38 ; const char aHelpDisplayThi[]
.rodata:0000000000008B38 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000008B38                                         ; DATA XREF: usage+118↑o
.rodata:0000000000008B65                 align 8
.rodata:0000000000008B68 ; const char aVersionOutputV[]
.rodata:0000000000008B68 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000008B68                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000008B9E                 align 20h
.rodata:0000000000008BA0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000008BA0                                         ; DATA XREF: usage+237↑o
.rodata:0000000000008BA0                                         ; usage+29B↑o ...
.rodata:0000000000008BC8 ; const char aReportAnyTrans[]
.rodata:0000000000008BC8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000008BC8                                         ; DATA XREF: usage+38F↑o
.rodata:0000000000008BC8                 db 'am/>',0Ah,0
.rodata:0000000000008C0F                 align 10h
.rodata:0000000000008C10 ; const char aOrAvailableLoc[]
.rodata:0000000000008C10 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000008C10                                         ; DATA XREF: usage:loc_2336↑o
.rodata:0000000000008C43                 align 8
.rodata:0000000000008C48 ; const char msgid[]
.rodata:0000000000008C48 msgid           db 'warning: ignoring --context; it requires an SELinux/SMACK-enabled'
.rodata:0000000000008C48                                         ; DATA XREF: main+13E↑o
.rodata:0000000000008C48                 db ' kernel',0
.rodata:0000000000008C91 asc_8C91        db ': ',0               ; DATA XREF: prog_fprintf+7D↑o
.rodata:0000000000008C94 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000008C99 ; const char aWriteError[]
.rodata:0000000000008C99 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_25B3↑o
.rodata:0000000000008CA5 ; const char format[]
.rodata:0000000000008CA5 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000008CA5                                         ; close_stdout+8F↑o ...
.rodata:0000000000008CAC asc_8CAC        db '.',0                ; DATA XREF: make_dir_parents+299↑o
.rodata:0000000000008CAC                                         ; savewd_chdir+BF↑o
.rodata:0000000000008CAE ; const char aCannotStatS[]
.rodata:0000000000008CAE aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: make_dir_parents+14F↑o
.rodata:0000000000008CBD ; const char aCannotCreateDi[]
.rodata:0000000000008CBD aCannotCreateDi db 'cannot create directory %s',0
.rodata:0000000000008CBD                                         ; DATA XREF: make_dir_parents+1A6↑o
.rodata:0000000000008CD8 ; const char aCannotChangePe[]
.rodata:0000000000008CD8 aCannotChangePe db 'cannot change permissions of %s',0
.rodata:0000000000008CD8                                         ; DATA XREF: make_dir_parents+31E↑o
.rodata:0000000000008CF8 aCannotChangeOw db 'cannot change owner and permissions of %s',0
.rodata:0000000000008CF8                                         ; DATA XREF: make_dir_parents+317↑o
.rodata:0000000000008D22                 align 4
.rodata:0000000000008D24 jpt_2C24        dd offset loc_2C30 - 8D24h
.rodata:0000000000008D24                                         ; DATA XREF: mode_compile+74↑o
.rodata:0000000000008D24                                         ; mode_compile+22C↑r
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h ; jump table for switch statement
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset loc_2CA0 - 8D24h
.rodata:0000000000008D24                 dd offset loc_2C90 - 8D24h
.rodata:0000000000008D24                 dd offset loc_2C80 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset def_2C24 - 8D24h
.rodata:0000000000008D24                 dd offset loc_2C70 - 8D24h
.rodata:0000000000008D24                 dd offset loc_2C68 - 8D24h
.rodata:0000000000008DA8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000008DA8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000008DE0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000008DE8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000008DEC unk_8DEC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000008DED                 db  80h
.rodata:0000000000008DEE                 db  98h
.rodata:0000000000008DEF                 db    0
.rodata:0000000000008DF0 unk_8DF0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000008DF1                 db  80h
.rodata:0000000000008DF2                 db  99h
.rodata:0000000000008DF3                 db    0
.rodata:0000000000008DF4 unk_8DF4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000008DF5                 db    7
.rodata:0000000000008DF6                 db  65h ; e
.rodata:0000000000008DF7                 db    0
.rodata:0000000000008DF8 unk_8DF8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000008DF9                 db 0AFh
.rodata:0000000000008DFA                 db    0
.rodata:0000000000008DFB unk_8DFB        db  22h ; "             ; DATA XREF: gettext_quote:loc_3060↑o
.rodata:0000000000008DFB                                         ; quotearg_buffer_restyled:loc_3E1B↑o ...
.rodata:0000000000008DFC                 db    0
.rodata:0000000000008DFD ; const char asc_8DFD[2]
.rodata:0000000000008DFD asc_8DFD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000008DFD                                         ; quotearg_buffer_restyled:loc_31E3↑o ...
.rodata:0000000000008DFF ; const char asc_8DFF[2]
.rodata:0000000000008DFF asc_8DFF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000008DFF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000008E01 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000008E09 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020BB88↓o
.rodata:0000000000008E0F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020BB90↓o
.rodata:0000000000008E1C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020BB98↓o
.rodata:0000000000008E1C                                         ; .data.rel.ro:000000000020BBB8↓o
.rodata:0000000000008E29 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000008E29                                         ; DATA XREF: .data.rel.ro:000000000020BBA0↓o
.rodata:0000000000008E3D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:000000000020BBA8↓o
.rodata:0000000000008E3F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020BBB0↓o
.rodata:0000000000008E47 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020BBC8↓o
.rodata:0000000000008E4F                 align 20h
.rodata:0000000000008E60 jpt_31C1        dd offset loc_3F6A - 8E60h
.rodata:0000000000008E60                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000008E60                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000008E60                 dd offset loc_31C3 - 8E60h ; jump table for switch statement
.rodata:0000000000008E60                 dd offset loc_4198 - 8E60h
.rodata:0000000000008E60                 dd offset loc_3FA4 - 8E60h
.rodata:0000000000008E60                 dd offset loc_3D94 - 8E60h
.rodata:0000000000008E60                 dd offset loc_3DF0 - 8E60h
.rodata:0000000000008E60                 dd offset loc_3E45 - 8E60h
.rodata:0000000000008E60                 dd offset loc_3E8A - 8E60h
.rodata:0000000000008E60                 dd offset loc_3EC4 - 8E60h
.rodata:0000000000008E60                 dd offset loc_3EC4 - 8E60h
.rodata:0000000000008E60                 dd offset loc_3EC4 - 8E60h
.rodata:0000000000008E8C jpt_331E        dd offset loc_3540 - 8E8Ch, offset def_331E - 8E8Ch, offset def_331E - 8E8Ch
.rodata:0000000000008E8C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000008E8C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000008E8C                 dd offset def_331E - 8E8Ch, offset def_331E - 8E8Ch, offset def_331E - 8E8Ch ; jump table for switch statement
.rodata:0000000000008E8C                 dd offset def_331E - 8E8Ch, offset loc_3580 - 8E8Ch, offset loc_3488 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3448 - 8E8Ch, offset loc_3610 - 8E8Ch, offset loc_3600 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_35F0 - 8E8Ch, offset loc_35E0 - 8E8Ch, offset def_331E - 8E8Ch
.rodata:0000000000008E8C                 dd offset def_331E - 8E8Ch, offset def_331E - 8E8Ch, offset def_331E - 8E8Ch
.rodata:0000000000008E8C                 dd offset def_331E - 8E8Ch, offset def_331E - 8E8Ch, offset def_331E - 8E8Ch
.rodata:0000000000008E8C                 dd offset def_331E - 8E8Ch, offset def_331E - 8E8Ch, offset def_331E - 8E8Ch
.rodata:0000000000008E8C                 dd offset def_331E - 8E8Ch, offset def_331E - 8E8Ch, offset def_331E - 8E8Ch
.rodata:0000000000008E8C                 dd offset def_331E - 8E8Ch, offset def_331E - 8E8Ch, offset def_331E - 8E8Ch
.rodata:0000000000008E8C                 dd offset def_331E - 8E8Ch, offset def_331E - 8E8Ch, offset loc_35D0 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_35C0 - 8E8Ch, offset loc_35C0 - 8E8Ch, offset loc_3590 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_35C0 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_35C0 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3423 - 8E8Ch, offset loc_35C0 - 8E8Ch, offset loc_35C0 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_35C0 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_35C0 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_35C0 - 8E8Ch, offset loc_35C0 - 8E8Ch, offset loc_35C0 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_33F3 - 8E8Ch, offset def_331E - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_35C0 - 8E8Ch, offset loc_3498 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_35C0 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_35C0 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch, offset loc_3568 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3323 - 8E8Ch, offset loc_35C0 - 8E8Ch, offset loc_3323 - 8E8Ch
.rodata:0000000000008E8C                 dd offset loc_3590 - 8E8Ch
.rodata:0000000000009088 jpt_36AA        dd offset loc_3710 - 9088h, offset def_36AA - 9088h, offset def_36AA - 9088h
.rodata:0000000000009088                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000009088                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000009088                 dd offset def_36AA - 9088h, offset def_36AA - 9088h, offset def_36AA - 9088h ; jump table for switch statement
.rodata:0000000000009088                 dd offset def_36AA - 9088h, offset loc_3700 - 9088h, offset loc_3850 - 9088h
.rodata:0000000000009088                 dd offset loc_3838 - 9088h, offset loc_36E8 - 9088h, offset loc_3828 - 9088h
.rodata:0000000000009088                 dd offset loc_36D0 - 9088h, offset loc_3810 - 9088h, offset def_36AA - 9088h
.rodata:0000000000009088                 dd offset def_36AA - 9088h, offset def_36AA - 9088h, offset def_36AA - 9088h
.rodata:0000000000009088                 dd offset def_36AA - 9088h, offset def_36AA - 9088h, offset def_36AA - 9088h
.rodata:0000000000009088                 dd offset def_36AA - 9088h, offset def_36AA - 9088h, offset def_36AA - 9088h
.rodata:0000000000009088                 dd offset def_36AA - 9088h, offset def_36AA - 9088h, offset def_36AA - 9088h
.rodata:0000000000009088                 dd offset def_36AA - 9088h, offset def_36AA - 9088h, offset def_36AA - 9088h
.rodata:0000000000009088                 dd offset def_36AA - 9088h, offset def_36AA - 9088h, offset loc_37F8 - 9088h
.rodata:0000000000009088                 dd offset loc_37E0 - 9088h, offset loc_37E0 - 9088h, offset loc_37C8 - 9088h
.rodata:0000000000009088                 dd offset loc_37E0 - 9088h, offset loc_37B0 - 9088h, offset loc_37E0 - 9088h
.rodata:0000000000009088                 dd offset loc_3420 - 9088h, offset loc_37E0 - 9088h, offset loc_37E0 - 9088h
.rodata:0000000000009088                 dd offset loc_37E0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37E0 - 9088h
.rodata:0000000000009088                 dd offset loc_37E0 - 9088h, offset loc_37E0 - 9088h, offset loc_37E0 - 9088h
.rodata:0000000000009088                 dd offset loc_33F0 - 9088h, offset def_36AA - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37E0 - 9088h, offset loc_36B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37E0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37E0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_37B0 - 9088h, offset loc_37B0 - 9088h, offset loc_37B0 - 9088h
.rodata:0000000000009088                 dd offset loc_3320 - 9088h, offset loc_37E0 - 9088h, offset loc_3320 - 9088h
.rodata:0000000000009088                 dd offset loc_37C8 - 9088h
.rodata:0000000000009284                 align 20h
.rodata:00000000000092A0                 public quoting_style_vals
.rodata:00000000000092A0 quoting_style_vals db    0
.rodata:00000000000092A1                 db    0
.rodata:00000000000092A2                 db    0
.rodata:00000000000092A3                 db    0
.rodata:00000000000092A4                 db    1
.rodata:00000000000092A5                 db    0
.rodata:00000000000092A6                 db    0
.rodata:00000000000092A7                 db    0
.rodata:00000000000092A8                 db    2
.rodata:00000000000092A9                 db    0
.rodata:00000000000092AA                 db    0
.rodata:00000000000092AB                 db    0
.rodata:00000000000092AC                 db    3
.rodata:00000000000092AD                 db    0
.rodata:00000000000092AE                 db    0
.rodata:00000000000092AF                 db    0
.rodata:00000000000092B0                 db    4
.rodata:00000000000092B1                 db    0
.rodata:00000000000092B2                 db    0
.rodata:00000000000092B3                 db    0
.rodata:00000000000092B4                 db    5
.rodata:00000000000092B5                 db    0
.rodata:00000000000092B6                 db    0
.rodata:00000000000092B7                 db    0
.rodata:00000000000092B8                 db    6
.rodata:00000000000092B9                 db    0
.rodata:00000000000092BA                 db    0
.rodata:00000000000092BB                 db    0
.rodata:00000000000092BC                 db    7
.rodata:00000000000092BD                 db    0
.rodata:00000000000092BE                 db    0
.rodata:00000000000092BF                 db    0
.rodata:00000000000092C0                 db    8
.rodata:00000000000092C1                 db    0
.rodata:00000000000092C2                 db    0
.rodata:00000000000092C3                 db    0
.rodata:00000000000092C4                 db    9
.rodata:00000000000092C5                 db    0
.rodata:00000000000092C6                 db    0
.rodata:00000000000092C7                 db    0
.rodata:00000000000092C8 ; const char assertion[]
.rodata:00000000000092C8 assertion       db 'wd->val.child == 0',0
.rodata:00000000000092C8                                         ; DATA XREF: savewd_chdir+1CB↑o
.rodata:00000000000092DB ; const char aErrnoLocation4[]
.rodata:00000000000092DB aErrnoLocation4 db '(*__errno_location ()) == 4',0
.rodata:00000000000092DB                                         ; DATA XREF: savewd_restore+117↑o
.rodata:00000000000092F7 ; const char aWdValChild0_0[]
.rodata:00000000000092F7 aWdValChild0_0  db 'wd->val.child < 0',0
.rodata:00000000000092F7                                         ; DATA XREF: savewd_finish+45↑o
.rodata:0000000000009309                 align 10h
.rodata:0000000000009310 ; const char file[]
.rodata:0000000000009310 file            db '../coreutils-8.31/lib/savewd.c',0
.rodata:0000000000009310                                         ; DATA XREF: savewd_chdir+1C4↑o
.rodata:0000000000009310                                         ; savewd_chdir+272↑o ...
.rodata:000000000000932F                 align 10h
.rodata:0000000000009330 jpt_4E13        dd offset def_4E13 - 9330h
.rodata:0000000000009330                                         ; DATA XREF: savewd_chdir+105↑o
.rodata:0000000000009330                                         ; savewd_chdir+10C↑r
.rodata:0000000000009330                 dd offset loc_4EA0 - 9330h ; jump table for switch statement
.rodata:0000000000009330                 dd offset loc_4D4F - 9330h
.rodata:0000000000009330                 dd offset loc_4EB0 - 9330h
.rodata:0000000000009330                 dd offset loc_4D4F - 9330h
.rodata:0000000000009330                 dd offset loc_4D4F - 9330h
.rodata:0000000000009348 jpt_4FE4        dd offset loc_5003 - 9348h
.rodata:0000000000009348                                         ; DATA XREF: savewd_restore+23↑o
.rodata:0000000000009348                                         ; savewd_restore+2D↑r
.rodata:0000000000009348                 dd offset loc_5003 - 9348h ; jump table for switch statement
.rodata:0000000000009348                 dd offset loc_5080 - 9348h
.rodata:0000000000009348                 dd offset loc_4FF0 - 9348h
.rodata:0000000000009348                 dd offset loc_5028 - 9348h
.rodata:000000000000935C jpt_5129        dd offset loc_5138 - 935Ch
.rodata:000000000000935C                                         ; DATA XREF: savewd_finish+8↑o
.rodata:000000000000935C                                         ; savewd_finish+12↑r
.rodata:000000000000935C                 dd offset loc_5130 - 935Ch ; jump table for switch statement
.rodata:000000000000935C                 dd offset loc_5130 - 935Ch
.rodata:000000000000935C                 dd offset loc_5140 - 935Ch
.rodata:000000000000935C                 dd offset loc_5138 - 935Ch
.rodata:0000000000009370 ; const char _PRETTY_FUNCTION___4491[]
.rodata:0000000000009370 __PRETTY_FUNCTION___4491 db 'savewd_finish',0
.rodata:0000000000009370                                         ; DATA XREF: savewd_finish+37↑o
.rodata:0000000000009370                                         ; savewd_finish:def_5129↑o
.rodata:000000000000937E                 align 20h
.rodata:0000000000009380 ; const char _PRETTY_FUNCTION___4477[]
.rodata:0000000000009380 __PRETTY_FUNCTION___4477 db 'savewd_restore',0
.rodata:0000000000009380                                         ; DATA XREF: savewd_restore:loc_50B9↑o
.rodata:0000000000009380                                         ; savewd_restore:def_4FE4↑o
.rodata:000000000000938F                 align 10h
.rodata:0000000000009390 ; const char _PRETTY_FUNCTION___4446[]
.rodata:0000000000009390 __PRETTY_FUNCTION___4446 db 'savewd_save',0
.rodata:0000000000009390                                         ; DATA XREF: savewd_chdir:loc_4F8A↑o
.rodata:000000000000939C                 align 20h
.rodata:00000000000093A0 ; const char _PRETTY_FUNCTION___4461[]
.rodata:00000000000093A0 __PRETTY_FUNCTION___4461 db 'savewd_chdir',0
.rodata:00000000000093A0                                         ; DATA XREF: savewd_chdir+1BD↑o
.rodata:00000000000093A0                                         ; savewd_chdir:def_4E13↑o
.rodata:00000000000093AD aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000093B9 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000093C0 ; const char aC_0[]
.rodata:00000000000093C0 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_535C↑o
.rodata:00000000000093C4 ; const char aWrittenByS[]
.rodata:00000000000093C4 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000093C4                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000093D4 ; const char aWrittenBySAndS[]
.rodata:00000000000093D4 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000093D4                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000093EB ; const char aWrittenBySSAnd[]
.rodata:00000000000093EB aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000093EB                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000009407 ; const char aReportBugsToS[]
.rodata:0000000000009407 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000009407                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000941C aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000941C                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000009432 ; const char aSHomePageS[]
.rodata:0000000000009432 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000009432                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000009446                 align 8
.rodata:0000000000009448 ; const char aLicenseGplv3Gn[]
.rodata:0000000000009448 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000009448                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000009448                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000009448                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000009448                 db '.',0Ah
.rodata:0000000000009448                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000009448                 db 0Ah,0
.rodata:0000000000009514                 align 8
.rodata:0000000000009518 ; const char aWrittenBySSSAn[]
.rodata:0000000000009518 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009518                                         ; DATA XREF: version_etc_arn:loc_55B0↑o
.rodata:0000000000009518                 db 'and %s.',0Ah,0
.rodata:0000000000009538 ; const char aWrittenBySSSSA[]
.rodata:0000000000009538 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009538                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000009538                 db '%s, and %s.',0Ah,0
.rodata:000000000000955C                 align 20h
.rodata:0000000000009560 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000009560 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009560                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000009560                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000009588 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000009588 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009588                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000009588                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000095B4                 align 8
.rodata:00000000000095B8 ; const char aWrittenBySSSSS[]
.rodata:00000000000095B8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000095B8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000095B8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000095B8                 db 'and %s.',0Ah,0
.rodata:00000000000095E8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000095E8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000095E8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000095E8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000095E8                 db '%s, and %s.',0Ah,0
.rodata:000000000000961C                 align 20h
.rodata:0000000000009620 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009620                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000009620                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009620                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000965C                 align 20h
.rodata:0000000000009660 ; const char aGeneralHelpUsi[]
.rodata:0000000000009660 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000009660                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000009660                 db 0
.rodata:00000000000096A1                 align 8
.rodata:00000000000096A8 jpt_53C4        dd offset loc_5446 - 96A8h
.rodata:00000000000096A8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000096A8                                         ; version_etc_arn+9D↑r
.rodata:00000000000096A8                 dd offset loc_54D8 - 96A8h ; jump table for switch statement
.rodata:00000000000096A8                 dd offset loc_5518 - 96A8h
.rodata:00000000000096A8                 dd offset loc_5560 - 96A8h
.rodata:00000000000096A8                 dd offset loc_55B0 - 96A8h
.rodata:00000000000096A8                 dd offset loc_5608 - 96A8h
.rodata:00000000000096A8                 dd offset loc_5638 - 96A8h
.rodata:00000000000096A8                 dd offset loc_56A0 - 96A8h
.rodata:00000000000096A8                 dd offset loc_53D0 - 96A8h
.rodata:00000000000096A8                 dd offset loc_5480 - 96A8h
.rodata:00000000000096D0                 align 20h
.rodata:00000000000096E0                 public version_etc_copyright
.rodata:00000000000096E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000096E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000970F ; const char aMemoryExhauste[]
.rodata:000000000000970F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000009720 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000009722 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5E90↑o
.rodata:0000000000009728 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000009728                                         ; locale_charset:loc_5EE0↑o
.rodata:000000000000972E                 align 10h
.rodata:0000000000009730 jpt_694B        dd offset def_694B - 9730h
.rodata:0000000000009730                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:0000000000009730                                         ; vasnprintf+554↑r
.rodata:0000000000009730                 dd offset loc_6DB0 - 9730h ; jump table for switch statement
.rodata:0000000000009730                 dd offset loc_6D80 - 9730h
.rodata:0000000000009730                 dd offset loc_6CF8 - 9730h
.rodata:0000000000009730                 dd offset loc_6CB8 - 9730h
.rodata:0000000000009730                 dd offset loc_6A88 - 9730h
.rodata:0000000000009730                 dd offset loc_6A88 - 9730h
.rodata:0000000000009730                 dd offset loc_6950 - 9730h
.rodata:0000000000009730                 dd offset loc_6950 - 9730h
.rodata:0000000000009730                 dd offset loc_6950 - 9730h
.rodata:0000000000009730                 dd offset loc_6950 - 9730h
.rodata:0000000000009730                 dd offset loc_6C38 - 9730h
.rodata:0000000000009730                 dd offset loc_6BB0 - 9730h
.rodata:0000000000009730                 dd offset loc_6A88 - 9730h
.rodata:0000000000009730                 dd offset loc_6A88 - 9730h
.rodata:0000000000009730                 dd offset loc_6950 - 9730h
.rodata:0000000000009730                 dd offset loc_6950 - 9730h
.rodata:0000000000009730                 dd offset loc_6950 - 9730h
.rodata:0000000000009778 jpt_6EF0        dd offset loc_7160 - 9778h
.rodata:0000000000009778                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000009778                                         ; vasnprintf+AF9↑r
.rodata:0000000000009778                 dd offset loc_7180 - 9778h ; jump table for switch statement
.rodata:0000000000009778                 dd offset loc_7170 - 9778h
.rodata:0000000000009778                 dd offset loc_7030 - 9778h
.rodata:0000000000009778                 dd offset loc_7030 - 9778h
.rodata:000000000000978C aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:0000000000009793                 align 20h
.rodata:00000000000097A0 jpt_77D6        dd offset def_77D6 - 97A0h
.rodata:00000000000097A0                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:00000000000097A0                                         ; printf_fetchargs+2F↑r
.rodata:00000000000097A0                 dd offset loc_785C - 97A0h ; jump table for switch statement
.rodata:00000000000097A0                 dd offset loc_785C - 97A0h
.rodata:00000000000097A0                 dd offset loc_787E - 97A0h
.rodata:00000000000097A0                 dd offset loc_787E - 97A0h
.rodata:00000000000097A0                 dd offset loc_783A - 97A0h
.rodata:00000000000097A0                 dd offset loc_783A - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097A0                 dd offset loc_78D2 - 97A0h
.rodata:00000000000097A0                 dd offset loc_77E0 - 97A0h
.rodata:00000000000097A0                 dd offset loc_783A - 97A0h
.rodata:00000000000097A0                 dd offset loc_783A - 97A0h
.rodata:00000000000097A0                 dd offset loc_78A4 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7900 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097A0                 dd offset loc_7816 - 97A0h
.rodata:00000000000097FC                 align 20h
.rodata:0000000000009800 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000009801                 db    0
.rodata:0000000000009802                 db    0
.rodata:0000000000009803                 db    0
.rodata:0000000000009804                 db  4Eh ; N
.rodata:0000000000009805                 db    0
.rodata:0000000000009806                 db    0
.rodata:0000000000009807                 db    0
.rodata:0000000000009808                 db  55h ; U
.rodata:0000000000009809                 db    0
.rodata:000000000000980A                 db    0
.rodata:000000000000980B                 db    0
.rodata:000000000000980C                 db  4Ch ; L
.rodata:000000000000980D                 db    0
.rodata:000000000000980E                 db    0
.rodata:000000000000980F                 db    0
.rodata:0000000000009810                 db  4Ch ; L
.rodata:0000000000009811                 db    0
.rodata:0000000000009812                 db    0
.rodata:0000000000009813                 db    0
.rodata:0000000000009814                 db  29h ; )
.rodata:0000000000009815                 db    0
.rodata:0000000000009816                 db    0
.rodata:0000000000009817                 db    0
.rodata:0000000000009818                 db    0
.rodata:0000000000009819                 db    0
.rodata:000000000000981A                 db    0
.rodata:000000000000981B                 db    0
.rodata:000000000000981C jpt_7BE5        dd offset loc_7C5B - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                                         ; DATA XREF: printf_parse+234↑o
.rodata:000000000000981C                                         ; printf_parse+23E↑r
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch ; jump table for switch statement
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset loc_815B - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset loc_817C - 981Ch, offset def_7BE5 - 981Ch, offset loc_815B - 981Ch
.rodata:000000000000981C                 dd offset loc_815B - 981Ch, offset loc_815B - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset loc_7BE7 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset loc_818C - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset loc_815B - 981Ch, offset def_7BE5 - 981Ch, offset loc_80E8 - 981Ch
.rodata:000000000000981C                 dd offset loc_80FB - 981Ch, offset loc_815B - 981Ch, offset loc_815B - 981Ch
.rodata:000000000000981C                 dd offset loc_815B - 981Ch, offset def_7BE5 - 981Ch, offset loc_80FB - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset loc_809C - 981Ch, offset loc_818C - 981Ch
.rodata:000000000000981C                 dd offset loc_81E0 - 981Ch, offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch
.rodata:000000000000981C                 dd offset loc_8148 - 981Ch, offset def_7BE5 - 981Ch, offset loc_818C - 981Ch
.rodata:000000000000981C                 dd offset def_7BE5 - 981Ch, offset def_7BE5 - 981Ch, offset loc_818C - 981Ch
.rodata:000000000000981C _rodata         ends
.rodata:000000000000981C
.eh_frame_hdr:000000000000996C ; ===========================================================================
.eh_frame_hdr:000000000000996C
.eh_frame_hdr:000000000000996C ; Segment type: Pure data
.eh_frame_hdr:000000000000996C ; Segment permissions: Read
.eh_frame_hdr:000000000000996C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000996C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000996C                 ;org 996Ch
.eh_frame_hdr:000000000000996C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000996D                 db  1Bh
.eh_frame_hdr:000000000000996E                 db    3
.eh_frame_hdr:000000000000996F                 db  3Bh ; ;
.eh_frame_hdr:0000000000009970                 db    8
.eh_frame_hdr:0000000000009971                 db    3
.eh_frame_hdr:0000000000009972                 db    0
.eh_frame_hdr:0000000000009973                 db    0
.eh_frame_hdr:0000000000009974                 db  60h ; `
.eh_frame_hdr:0000000000009975                 db    0
.eh_frame_hdr:0000000000009976                 db    0
.eh_frame_hdr:0000000000009977                 db    0
.eh_frame_hdr:0000000000009978                 db  94h
.eh_frame_hdr:0000000000009979                 db  7Dh ; }
.eh_frame_hdr:000000000000997A                 db 0FFh
.eh_frame_hdr:000000000000997B                 db 0FFh
.eh_frame_hdr:000000000000997C                 db  54h ; T
.eh_frame_hdr:000000000000997D                 db    3
.eh_frame_hdr:000000000000997E                 db    0
.eh_frame_hdr:000000000000997F                 db    0
.eh_frame_hdr:0000000000009980                 db  74h ; t
.eh_frame_hdr:0000000000009981                 db  81h
.eh_frame_hdr:0000000000009982                 db 0FFh
.eh_frame_hdr:0000000000009983                 db 0FFh
.eh_frame_hdr:0000000000009984                 db  7Ch ; |
.eh_frame_hdr:0000000000009985                 db    3
.eh_frame_hdr:0000000000009986                 db    0
.eh_frame_hdr:0000000000009987                 db    0
.eh_frame_hdr:0000000000009988                 db  84h
.eh_frame_hdr:0000000000009989                 db  81h
.eh_frame_hdr:000000000000998A                 db 0FFh
.eh_frame_hdr:000000000000998B                 db 0FFh
.eh_frame_hdr:000000000000998C                 db  6Ch ; l
.eh_frame_hdr:000000000000998D                 db    4
.eh_frame_hdr:000000000000998E                 db    0
.eh_frame_hdr:000000000000998F                 db    0
.eh_frame_hdr:0000000000009990                 db  64h ; d
.eh_frame_hdr:0000000000009991                 db  84h
.eh_frame_hdr:0000000000009992                 db 0FFh
.eh_frame_hdr:0000000000009993                 db 0FFh
.eh_frame_hdr:0000000000009994                 db  24h ; $
.eh_frame_hdr:0000000000009995                 db    3
.eh_frame_hdr:0000000000009996                 db    0
.eh_frame_hdr:0000000000009997                 db    0
.eh_frame_hdr:0000000000009998                 db  74h ; t
.eh_frame_hdr:0000000000009999                 db  85h
.eh_frame_hdr:000000000000999A                 db 0FFh
.eh_frame_hdr:000000000000999B                 db 0FFh
.eh_frame_hdr:000000000000999C                 db  94h
.eh_frame_hdr:000000000000999D                 db    3
.eh_frame_hdr:000000000000999E                 db    0
.eh_frame_hdr:000000000000999F                 db    0
.eh_frame_hdr:00000000000099A0                 db  14h
.eh_frame_hdr:00000000000099A1                 db  86h
.eh_frame_hdr:00000000000099A2                 db 0FFh
.eh_frame_hdr:00000000000099A3                 db 0FFh
.eh_frame_hdr:00000000000099A4                 db 0D0h
.eh_frame_hdr:00000000000099A5                 db    3
.eh_frame_hdr:00000000000099A6                 db    0
.eh_frame_hdr:00000000000099A7                 db    0
.eh_frame_hdr:00000000000099A8                 db  44h ; D
.eh_frame_hdr:00000000000099A9                 db  86h
.eh_frame_hdr:00000000000099AA                 db 0FFh
.eh_frame_hdr:00000000000099AB                 db 0FFh
.eh_frame_hdr:00000000000099AC                 db 0ECh
.eh_frame_hdr:00000000000099AD                 db    3
.eh_frame_hdr:00000000000099AE                 db    0
.eh_frame_hdr:00000000000099AF                 db    0
.eh_frame_hdr:00000000000099B0                 db  64h ; d
.eh_frame_hdr:00000000000099B1                 db  86h
.eh_frame_hdr:00000000000099B2                 db 0FFh
.eh_frame_hdr:00000000000099B3                 db 0FFh
.eh_frame_hdr:00000000000099B4                 db    0
.eh_frame_hdr:00000000000099B5                 db    4
.eh_frame_hdr:00000000000099B6                 db    0
.eh_frame_hdr:00000000000099B7                 db    0
.eh_frame_hdr:00000000000099B8                 db    4
.eh_frame_hdr:00000000000099B9                 db  87h
.eh_frame_hdr:00000000000099BA                 db 0FFh
.eh_frame_hdr:00000000000099BB                 db 0FFh
.eh_frame_hdr:00000000000099BC                 db  40h ; @
.eh_frame_hdr:00000000000099BD                 db    4
.eh_frame_hdr:00000000000099BE                 db    0
.eh_frame_hdr:00000000000099BF                 db    0
.eh_frame_hdr:00000000000099C0                 db 0C4h
.eh_frame_hdr:00000000000099C1                 db  8Ah
.eh_frame_hdr:00000000000099C2                 db 0FFh
.eh_frame_hdr:00000000000099C3                 db 0FFh
.eh_frame_hdr:00000000000099C4                 db 0B4h
.eh_frame_hdr:00000000000099C5                 db    4
.eh_frame_hdr:00000000000099C6                 db    0
.eh_frame_hdr:00000000000099C7                 db    0
.eh_frame_hdr:00000000000099C8                 db 0E4h
.eh_frame_hdr:00000000000099C9                 db  8Bh
.eh_frame_hdr:00000000000099CA                 db 0FFh
.eh_frame_hdr:00000000000099CB                 db 0FFh
.eh_frame_hdr:00000000000099CC                 db 0E4h
.eh_frame_hdr:00000000000099CD                 db    4
.eh_frame_hdr:00000000000099CE                 db    0
.eh_frame_hdr:00000000000099CF                 db    0
.eh_frame_hdr:00000000000099D0                 db 0F4h
.eh_frame_hdr:00000000000099D1                 db  8Bh
.eh_frame_hdr:00000000000099D2                 db 0FFh
.eh_frame_hdr:00000000000099D3                 db 0FFh
.eh_frame_hdr:00000000000099D4                 db 0F8h
.eh_frame_hdr:00000000000099D5                 db    4
.eh_frame_hdr:00000000000099D6                 db    0
.eh_frame_hdr:00000000000099D7                 db    0
.eh_frame_hdr:00000000000099D8                 db    4
.eh_frame_hdr:00000000000099D9                 db  8Ch
.eh_frame_hdr:00000000000099DA                 db 0FFh
.eh_frame_hdr:00000000000099DB                 db 0FFh
.eh_frame_hdr:00000000000099DC                 db  0Ch
.eh_frame_hdr:00000000000099DD                 db    5
.eh_frame_hdr:00000000000099DE                 db    0
.eh_frame_hdr:00000000000099DF                 db    0
.eh_frame_hdr:00000000000099E0                 db 0B4h
.eh_frame_hdr:00000000000099E1                 db  8Ch
.eh_frame_hdr:00000000000099E2                 db 0FFh
.eh_frame_hdr:00000000000099E3                 db 0FFh
.eh_frame_hdr:00000000000099E4                 db  3Ch ; <
.eh_frame_hdr:00000000000099E5                 db    5
.eh_frame_hdr:00000000000099E6                 db    0
.eh_frame_hdr:00000000000099E7                 db    0
.eh_frame_hdr:00000000000099E8                 db  84h
.eh_frame_hdr:00000000000099E9                 db  90h
.eh_frame_hdr:00000000000099EA                 db 0FFh
.eh_frame_hdr:00000000000099EB                 db 0FFh
.eh_frame_hdr:00000000000099EC                 db  9Ch
.eh_frame_hdr:00000000000099ED                 db    5
.eh_frame_hdr:00000000000099EE                 db    0
.eh_frame_hdr:00000000000099EF                 db    0
.eh_frame_hdr:00000000000099F0                 db  34h ; 4
.eh_frame_hdr:00000000000099F1                 db  94h
.eh_frame_hdr:00000000000099F2                 db 0FFh
.eh_frame_hdr:00000000000099F3                 db 0FFh
.eh_frame_hdr:00000000000099F4                 db 0E4h
.eh_frame_hdr:00000000000099F5                 db    5
.eh_frame_hdr:00000000000099F6                 db    0
.eh_frame_hdr:00000000000099F7                 db    0
.eh_frame_hdr:00000000000099F8                 db 0C4h
.eh_frame_hdr:00000000000099F9                 db  94h
.eh_frame_hdr:00000000000099FA                 db 0FFh
.eh_frame_hdr:00000000000099FB                 db 0FFh
.eh_frame_hdr:00000000000099FC                 db    8
.eh_frame_hdr:00000000000099FD                 db    6
.eh_frame_hdr:00000000000099FE                 db    0
.eh_frame_hdr:00000000000099FF                 db    0
.eh_frame_hdr:0000000000009A00                 db  34h ; 4
.eh_frame_hdr:0000000000009A01                 db  96h
.eh_frame_hdr:0000000000009A02                 db 0FFh
.eh_frame_hdr:0000000000009A03                 db 0FFh
.eh_frame_hdr:0000000000009A04                 db  3Ch ; <
.eh_frame_hdr:0000000000009A05                 db    6
.eh_frame_hdr:0000000000009A06                 db    0
.eh_frame_hdr:0000000000009A07                 db    0
.eh_frame_hdr:0000000000009A08                 db 0D4h
.eh_frame_hdr:0000000000009A09                 db  96h
.eh_frame_hdr:0000000000009A0A                 db 0FFh
.eh_frame_hdr:0000000000009A0B                 db 0FFh
.eh_frame_hdr:0000000000009A0C                 db  5Ch ; \
.eh_frame_hdr:0000000000009A0D                 db    6
.eh_frame_hdr:0000000000009A0E                 db    0
.eh_frame_hdr:0000000000009A0F                 db    0
.eh_frame_hdr:0000000000009A10                 db 0C4h
.eh_frame_hdr:0000000000009A11                 db  97h
.eh_frame_hdr:0000000000009A12                 db 0FFh
.eh_frame_hdr:0000000000009A13                 db 0FFh
.eh_frame_hdr:0000000000009A14                 db 0A0h
.eh_frame_hdr:0000000000009A15                 db    6
.eh_frame_hdr:0000000000009A16                 db    0
.eh_frame_hdr:0000000000009A17                 db    0
.eh_frame_hdr:0000000000009A18                 db    4
.eh_frame_hdr:0000000000009A19                 db 0AAh
.eh_frame_hdr:0000000000009A1A                 db 0FFh
.eh_frame_hdr:0000000000009A1B                 db 0FFh
.eh_frame_hdr:0000000000009A1C                 db  18h
.eh_frame_hdr:0000000000009A1D                 db    7
.eh_frame_hdr:0000000000009A1E                 db    0
.eh_frame_hdr:0000000000009A1F                 db    0
.eh_frame_hdr:0000000000009A20                 db 0B4h
.eh_frame_hdr:0000000000009A21                 db 0ABh
.eh_frame_hdr:0000000000009A22                 db 0FFh
.eh_frame_hdr:0000000000009A23                 db 0FFh
.eh_frame_hdr:0000000000009A24                 db  84h
.eh_frame_hdr:0000000000009A25                 db    7
.eh_frame_hdr:0000000000009A26                 db    0
.eh_frame_hdr:0000000000009A27                 db    0
.eh_frame_hdr:0000000000009A28                 db 0F4h
.eh_frame_hdr:0000000000009A29                 db 0ABh
.eh_frame_hdr:0000000000009A2A                 db 0FFh
.eh_frame_hdr:0000000000009A2B                 db 0FFh
.eh_frame_hdr:0000000000009A2C                 db 0B0h
.eh_frame_hdr:0000000000009A2D                 db    7
.eh_frame_hdr:0000000000009A2E                 db    0
.eh_frame_hdr:0000000000009A2F                 db    0
.eh_frame_hdr:0000000000009A30                 db  14h
.eh_frame_hdr:0000000000009A31                 db 0ACh
.eh_frame_hdr:0000000000009A32                 db 0FFh
.eh_frame_hdr:0000000000009A33                 db 0FFh
.eh_frame_hdr:0000000000009A34                 db 0C4h
.eh_frame_hdr:0000000000009A35                 db    7
.eh_frame_hdr:0000000000009A36                 db    0
.eh_frame_hdr:0000000000009A37                 db    0
.eh_frame_hdr:0000000000009A38                 db  34h ; 4
.eh_frame_hdr:0000000000009A39                 db 0ACh
.eh_frame_hdr:0000000000009A3A                 db 0FFh
.eh_frame_hdr:0000000000009A3B                 db 0FFh
.eh_frame_hdr:0000000000009A3C                 db 0D8h
.eh_frame_hdr:0000000000009A3D                 db    7
.eh_frame_hdr:0000000000009A3E                 db    0
.eh_frame_hdr:0000000000009A3F                 db    0
.eh_frame_hdr:0000000000009A40                 db  74h ; t
.eh_frame_hdr:0000000000009A41                 db 0ACh
.eh_frame_hdr:0000000000009A42                 db 0FFh
.eh_frame_hdr:0000000000009A43                 db 0FFh
.eh_frame_hdr:0000000000009A44                 db 0ECh
.eh_frame_hdr:0000000000009A45                 db    7
.eh_frame_hdr:0000000000009A46                 db    0
.eh_frame_hdr:0000000000009A47                 db    0
.eh_frame_hdr:0000000000009A48                 db  94h
.eh_frame_hdr:0000000000009A49                 db 0ACh
.eh_frame_hdr:0000000000009A4A                 db 0FFh
.eh_frame_hdr:0000000000009A4B                 db 0FFh
.eh_frame_hdr:0000000000009A4C                 db    0
.eh_frame_hdr:0000000000009A4D                 db    8
.eh_frame_hdr:0000000000009A4E                 db    0
.eh_frame_hdr:0000000000009A4F                 db    0
.eh_frame_hdr:0000000000009A50                 db 0C4h
.eh_frame_hdr:0000000000009A51                 db 0ACh
.eh_frame_hdr:0000000000009A52                 db 0FFh
.eh_frame_hdr:0000000000009A53                 db 0FFh
.eh_frame_hdr:0000000000009A54                 db  14h
.eh_frame_hdr:0000000000009A55                 db    8
.eh_frame_hdr:0000000000009A56                 db    0
.eh_frame_hdr:0000000000009A57                 db    0
.eh_frame_hdr:0000000000009A58                 db  44h ; D
.eh_frame_hdr:0000000000009A59                 db 0ADh
.eh_frame_hdr:0000000000009A5A                 db 0FFh
.eh_frame_hdr:0000000000009A5B                 db 0FFh
.eh_frame_hdr:0000000000009A5C                 db  68h ; h
.eh_frame_hdr:0000000000009A5D                 db    8
.eh_frame_hdr:0000000000009A5E                 db    0
.eh_frame_hdr:0000000000009A5F                 db    0
.eh_frame_hdr:0000000000009A60                 db  34h ; 4
.eh_frame_hdr:0000000000009A61                 db 0AEh
.eh_frame_hdr:0000000000009A62                 db 0FFh
.eh_frame_hdr:0000000000009A63                 db 0FFh
.eh_frame_hdr:0000000000009A64                 db 0D4h
.eh_frame_hdr:0000000000009A65                 db    8
.eh_frame_hdr:0000000000009A66                 db    0
.eh_frame_hdr:0000000000009A67                 db    0
.eh_frame_hdr:0000000000009A68                 db  44h ; D
.eh_frame_hdr:0000000000009A69                 db 0AEh
.eh_frame_hdr:0000000000009A6A                 db 0FFh
.eh_frame_hdr:0000000000009A6B                 db 0FFh
.eh_frame_hdr:0000000000009A6C                 db 0E8h
.eh_frame_hdr:0000000000009A6D                 db    8
.eh_frame_hdr:0000000000009A6E                 db    0
.eh_frame_hdr:0000000000009A6F                 db    0
.eh_frame_hdr:0000000000009A70                 db 0E4h
.eh_frame_hdr:0000000000009A71                 db 0AEh
.eh_frame_hdr:0000000000009A72                 db 0FFh
.eh_frame_hdr:0000000000009A73                 db 0FFh
.eh_frame_hdr:0000000000009A74                 db  14h
.eh_frame_hdr:0000000000009A75                 db    9
.eh_frame_hdr:0000000000009A76                 db    0
.eh_frame_hdr:0000000000009A77                 db    0
.eh_frame_hdr:0000000000009A78                 db    4
.eh_frame_hdr:0000000000009A79                 db 0AFh
.eh_frame_hdr:0000000000009A7A                 db 0FFh
.eh_frame_hdr:0000000000009A7B                 db 0FFh
.eh_frame_hdr:0000000000009A7C                 db  28h ; (
.eh_frame_hdr:0000000000009A7D                 db    9
.eh_frame_hdr:0000000000009A7E                 db    0
.eh_frame_hdr:0000000000009A7F                 db    0
.eh_frame_hdr:0000000000009A80                 db  14h
.eh_frame_hdr:0000000000009A81                 db 0AFh
.eh_frame_hdr:0000000000009A82                 db 0FFh
.eh_frame_hdr:0000000000009A83                 db 0FFh
.eh_frame_hdr:0000000000009A84                 db  3Ch ; <
.eh_frame_hdr:0000000000009A85                 db    9
.eh_frame_hdr:0000000000009A86                 db    0
.eh_frame_hdr:0000000000009A87                 db    0
.eh_frame_hdr:0000000000009A88                 db  34h ; 4
.eh_frame_hdr:0000000000009A89                 db 0AFh
.eh_frame_hdr:0000000000009A8A                 db 0FFh
.eh_frame_hdr:0000000000009A8B                 db 0FFh
.eh_frame_hdr:0000000000009A8C                 db  50h ; P
.eh_frame_hdr:0000000000009A8D                 db    9
.eh_frame_hdr:0000000000009A8E                 db    0
.eh_frame_hdr:0000000000009A8F                 db    0
.eh_frame_hdr:0000000000009A90                 db  54h ; T
.eh_frame_hdr:0000000000009A91                 db 0AFh
.eh_frame_hdr:0000000000009A92                 db 0FFh
.eh_frame_hdr:0000000000009A93                 db 0FFh
.eh_frame_hdr:0000000000009A94                 db  64h ; d
.eh_frame_hdr:0000000000009A95                 db    9
.eh_frame_hdr:0000000000009A96                 db    0
.eh_frame_hdr:0000000000009A97                 db    0
.eh_frame_hdr:0000000000009A98                 db 0E4h
.eh_frame_hdr:0000000000009A99                 db 0AFh
.eh_frame_hdr:0000000000009A9A                 db 0FFh
.eh_frame_hdr:0000000000009A9B                 db 0FFh
.eh_frame_hdr:0000000000009A9C                 db  80h
.eh_frame_hdr:0000000000009A9D                 db    9
.eh_frame_hdr:0000000000009A9E                 db    0
.eh_frame_hdr:0000000000009A9F                 db    0
.eh_frame_hdr:0000000000009AA0                 db  74h ; t
.eh_frame_hdr:0000000000009AA1                 db 0B0h
.eh_frame_hdr:0000000000009AA2                 db 0FFh
.eh_frame_hdr:0000000000009AA3                 db 0FFh
.eh_frame_hdr:0000000000009AA4                 db  9Ch
.eh_frame_hdr:0000000000009AA5                 db    9
.eh_frame_hdr:0000000000009AA6                 db    0
.eh_frame_hdr:0000000000009AA7                 db    0
.eh_frame_hdr:0000000000009AA8                 db  84h
.eh_frame_hdr:0000000000009AA9                 db 0B0h
.eh_frame_hdr:0000000000009AAA                 db 0FFh
.eh_frame_hdr:0000000000009AAB                 db 0FFh
.eh_frame_hdr:0000000000009AAC                 db 0B0h
.eh_frame_hdr:0000000000009AAD                 db    9
.eh_frame_hdr:0000000000009AAE                 db    0
.eh_frame_hdr:0000000000009AAF                 db    0
.eh_frame_hdr:0000000000009AB0                 db  94h
.eh_frame_hdr:0000000000009AB1                 db 0B0h
.eh_frame_hdr:0000000000009AB2                 db 0FFh
.eh_frame_hdr:0000000000009AB3                 db 0FFh
.eh_frame_hdr:0000000000009AB4                 db 0C4h
.eh_frame_hdr:0000000000009AB5                 db    9
.eh_frame_hdr:0000000000009AB6                 db    0
.eh_frame_hdr:0000000000009AB7                 db    0
.eh_frame_hdr:0000000000009AB8                 db  34h ; 4
.eh_frame_hdr:0000000000009AB9                 db 0B1h
.eh_frame_hdr:0000000000009ABA                 db 0FFh
.eh_frame_hdr:0000000000009ABB                 db 0FFh
.eh_frame_hdr:0000000000009ABC                 db 0E0h
.eh_frame_hdr:0000000000009ABD                 db    9
.eh_frame_hdr:0000000000009ABE                 db    0
.eh_frame_hdr:0000000000009ABF                 db    0
.eh_frame_hdr:0000000000009AC0                 db  44h ; D
.eh_frame_hdr:0000000000009AC1                 db 0B1h
.eh_frame_hdr:0000000000009AC2                 db 0FFh
.eh_frame_hdr:0000000000009AC3                 db 0FFh
.eh_frame_hdr:0000000000009AC4                 db 0F4h
.eh_frame_hdr:0000000000009AC5                 db    9
.eh_frame_hdr:0000000000009AC6                 db    0
.eh_frame_hdr:0000000000009AC7                 db    0
.eh_frame_hdr:0000000000009AC8                 db  64h ; d
.eh_frame_hdr:0000000000009AC9                 db 0B1h
.eh_frame_hdr:0000000000009ACA                 db 0FFh
.eh_frame_hdr:0000000000009ACB                 db 0FFh
.eh_frame_hdr:0000000000009ACC                 db    8
.eh_frame_hdr:0000000000009ACD                 db  0Ah
.eh_frame_hdr:0000000000009ACE                 db    0
.eh_frame_hdr:0000000000009ACF                 db    0
.eh_frame_hdr:0000000000009AD0                 db  74h ; t
.eh_frame_hdr:0000000000009AD1                 db 0B1h
.eh_frame_hdr:0000000000009AD2                 db 0FFh
.eh_frame_hdr:0000000000009AD3                 db 0FFh
.eh_frame_hdr:0000000000009AD4                 db  1Ch
.eh_frame_hdr:0000000000009AD5                 db  0Ah
.eh_frame_hdr:0000000000009AD6                 db    0
.eh_frame_hdr:0000000000009AD7                 db    0
.eh_frame_hdr:0000000000009AD8                 db    4
.eh_frame_hdr:0000000000009AD9                 db 0B2h
.eh_frame_hdr:0000000000009ADA                 db 0FFh
.eh_frame_hdr:0000000000009ADB                 db 0FFh
.eh_frame_hdr:0000000000009ADC                 db  38h ; 8
.eh_frame_hdr:0000000000009ADD                 db  0Ah
.eh_frame_hdr:0000000000009ADE                 db    0
.eh_frame_hdr:0000000000009ADF                 db    0
.eh_frame_hdr:0000000000009AE0                 db 0A4h
.eh_frame_hdr:0000000000009AE1                 db 0B2h
.eh_frame_hdr:0000000000009AE2                 db 0FFh
.eh_frame_hdr:0000000000009AE3                 db 0FFh
.eh_frame_hdr:0000000000009AE4                 db  54h ; T
.eh_frame_hdr:0000000000009AE5                 db  0Ah
.eh_frame_hdr:0000000000009AE6                 db    0
.eh_frame_hdr:0000000000009AE7                 db    0
.eh_frame_hdr:0000000000009AE8                 db 0B4h
.eh_frame_hdr:0000000000009AE9                 db 0B2h
.eh_frame_hdr:0000000000009AEA                 db 0FFh
.eh_frame_hdr:0000000000009AEB                 db 0FFh
.eh_frame_hdr:0000000000009AEC                 db  68h ; h
.eh_frame_hdr:0000000000009AED                 db  0Ah
.eh_frame_hdr:0000000000009AEE                 db    0
.eh_frame_hdr:0000000000009AEF                 db    0
.eh_frame_hdr:0000000000009AF0                 db 0D4h
.eh_frame_hdr:0000000000009AF1                 db 0B2h
.eh_frame_hdr:0000000000009AF2                 db 0FFh
.eh_frame_hdr:0000000000009AF3                 db 0FFh
.eh_frame_hdr:0000000000009AF4                 db  7Ch ; |
.eh_frame_hdr:0000000000009AF5                 db  0Ah
.eh_frame_hdr:0000000000009AF6                 db    0
.eh_frame_hdr:0000000000009AF7                 db    0
.eh_frame_hdr:0000000000009AF8                 db 0F4h
.eh_frame_hdr:0000000000009AF9                 db 0B2h
.eh_frame_hdr:0000000000009AFA                 db 0FFh
.eh_frame_hdr:0000000000009AFB                 db 0FFh
.eh_frame_hdr:0000000000009AFC                 db  90h
.eh_frame_hdr:0000000000009AFD                 db  0Ah
.eh_frame_hdr:0000000000009AFE                 db    0
.eh_frame_hdr:0000000000009AFF                 db    0
.eh_frame_hdr:0000000000009B00                 db    4
.eh_frame_hdr:0000000000009B01                 db 0B3h
.eh_frame_hdr:0000000000009B02                 db 0FFh
.eh_frame_hdr:0000000000009B03                 db 0FFh
.eh_frame_hdr:0000000000009B04                 db 0A4h
.eh_frame_hdr:0000000000009B05                 db  0Ah
.eh_frame_hdr:0000000000009B06                 db    0
.eh_frame_hdr:0000000000009B07                 db    0
.eh_frame_hdr:0000000000009B08                 db  24h ; $
.eh_frame_hdr:0000000000009B09                 db 0B3h
.eh_frame_hdr:0000000000009B0A                 db 0FFh
.eh_frame_hdr:0000000000009B0B                 db 0FFh
.eh_frame_hdr:0000000000009B0C                 db 0B8h
.eh_frame_hdr:0000000000009B0D                 db  0Ah
.eh_frame_hdr:0000000000009B0E                 db    0
.eh_frame_hdr:0000000000009B0F                 db    0
.eh_frame_hdr:0000000000009B10                 db  44h ; D
.eh_frame_hdr:0000000000009B11                 db 0B3h
.eh_frame_hdr:0000000000009B12                 db 0FFh
.eh_frame_hdr:0000000000009B13                 db 0FFh
.eh_frame_hdr:0000000000009B14                 db 0CCh
.eh_frame_hdr:0000000000009B15                 db  0Ah
.eh_frame_hdr:0000000000009B16                 db    0
.eh_frame_hdr:0000000000009B17                 db    0
.eh_frame_hdr:0000000000009B18                 db  64h ; d
.eh_frame_hdr:0000000000009B19                 db 0B3h
.eh_frame_hdr:0000000000009B1A                 db 0FFh
.eh_frame_hdr:0000000000009B1B                 db 0FFh
.eh_frame_hdr:0000000000009B1C                 db 0E4h
.eh_frame_hdr:0000000000009B1D                 db  0Ah
.eh_frame_hdr:0000000000009B1E                 db    0
.eh_frame_hdr:0000000000009B1F                 db    0
.eh_frame_hdr:0000000000009B20                 db  74h ; t
.eh_frame_hdr:0000000000009B21                 db 0B3h
.eh_frame_hdr:0000000000009B22                 db 0FFh
.eh_frame_hdr:0000000000009B23                 db 0FFh
.eh_frame_hdr:0000000000009B24                 db 0F8h
.eh_frame_hdr:0000000000009B25                 db  0Ah
.eh_frame_hdr:0000000000009B26                 db    0
.eh_frame_hdr:0000000000009B27                 db    0
.eh_frame_hdr:0000000000009B28                 db  94h
.eh_frame_hdr:0000000000009B29                 db 0B3h
.eh_frame_hdr:0000000000009B2A                 db 0FFh
.eh_frame_hdr:0000000000009B2B                 db 0FFh
.eh_frame_hdr:0000000000009B2C                 db  0Ch
.eh_frame_hdr:0000000000009B2D                 db  0Bh
.eh_frame_hdr:0000000000009B2E                 db    0
.eh_frame_hdr:0000000000009B2F                 db    0
.eh_frame_hdr:0000000000009B30                 db  44h ; D
.eh_frame_hdr:0000000000009B31                 db 0B6h
.eh_frame_hdr:0000000000009B32                 db 0FFh
.eh_frame_hdr:0000000000009B33                 db 0FFh
.eh_frame_hdr:0000000000009B34                 db  5Ch ; \
.eh_frame_hdr:0000000000009B35                 db  0Bh
.eh_frame_hdr:0000000000009B36                 db    0
.eh_frame_hdr:0000000000009B37                 db    0
.eh_frame_hdr:0000000000009B38                 db 0A4h
.eh_frame_hdr:0000000000009B39                 db 0B7h
.eh_frame_hdr:0000000000009B3A                 db 0FFh
.eh_frame_hdr:0000000000009B3B                 db 0FFh
.eh_frame_hdr:0000000000009B3C                 db  90h
.eh_frame_hdr:0000000000009B3D                 db  0Bh
.eh_frame_hdr:0000000000009B3E                 db    0
.eh_frame_hdr:0000000000009B3F                 db    0
.eh_frame_hdr:0000000000009B40                 db  24h ; $
.eh_frame_hdr:0000000000009B41                 db 0B8h
.eh_frame_hdr:0000000000009B42                 db 0FFh
.eh_frame_hdr:0000000000009B43                 db 0FFh
.eh_frame_hdr:0000000000009B44                 db 0ACh
.eh_frame_hdr:0000000000009B45                 db  0Bh
.eh_frame_hdr:0000000000009B46                 db    0
.eh_frame_hdr:0000000000009B47                 db    0
.eh_frame_hdr:0000000000009B48                 db 0B4h
.eh_frame_hdr:0000000000009B49                 db 0B9h
.eh_frame_hdr:0000000000009B4A                 db 0FFh
.eh_frame_hdr:0000000000009B4B                 db 0FFh
.eh_frame_hdr:0000000000009B4C                 db 0FCh
.eh_frame_hdr:0000000000009B4D                 db  0Bh
.eh_frame_hdr:0000000000009B4E                 db    0
.eh_frame_hdr:0000000000009B4F                 db    0
.eh_frame_hdr:0000000000009B50                 db 0D4h
.eh_frame_hdr:0000000000009B51                 db 0BDh
.eh_frame_hdr:0000000000009B52                 db 0FFh
.eh_frame_hdr:0000000000009B53                 db 0FFh
.eh_frame_hdr:0000000000009B54                 db  10h
.eh_frame_hdr:0000000000009B55                 db  0Dh
.eh_frame_hdr:0000000000009B56                 db    0
.eh_frame_hdr:0000000000009B57                 db    0
.eh_frame_hdr:0000000000009B58                 db 0F4h
.eh_frame_hdr:0000000000009B59                 db 0BDh
.eh_frame_hdr:0000000000009B5A                 db 0FFh
.eh_frame_hdr:0000000000009B5B                 db 0FFh
.eh_frame_hdr:0000000000009B5C                 db  24h ; $
.eh_frame_hdr:0000000000009B5D                 db  0Dh
.eh_frame_hdr:0000000000009B5E                 db    0
.eh_frame_hdr:0000000000009B5F                 db    0
.eh_frame_hdr:0000000000009B60                 db  74h ; t
.eh_frame_hdr:0000000000009B61                 db 0BEh
.eh_frame_hdr:0000000000009B62                 db 0FFh
.eh_frame_hdr:0000000000009B63                 db 0FFh
.eh_frame_hdr:0000000000009B64                 db  40h ; @
.eh_frame_hdr:0000000000009B65                 db  0Dh
.eh_frame_hdr:0000000000009B66                 db    0
.eh_frame_hdr:0000000000009B67                 db    0
.eh_frame_hdr:0000000000009B68                 db  54h ; T
.eh_frame_hdr:0000000000009B69                 db 0BFh
.eh_frame_hdr:0000000000009B6A                 db 0FFh
.eh_frame_hdr:0000000000009B6B                 db 0FFh
.eh_frame_hdr:0000000000009B6C                 db  6Ch ; l
.eh_frame_hdr:0000000000009B6D                 db  0Dh
.eh_frame_hdr:0000000000009B6E                 db    0
.eh_frame_hdr:0000000000009B6F                 db    0
.eh_frame_hdr:0000000000009B70                 db 0D4h
.eh_frame_hdr:0000000000009B71                 db 0BFh
.eh_frame_hdr:0000000000009B72                 db 0FFh
.eh_frame_hdr:0000000000009B73                 db 0FFh
.eh_frame_hdr:0000000000009B74                 db  8Ch
.eh_frame_hdr:0000000000009B75                 db  0Dh
.eh_frame_hdr:0000000000009B76                 db    0
.eh_frame_hdr:0000000000009B77                 db    0
.eh_frame_hdr:0000000000009B78                 db 0F4h
.eh_frame_hdr:0000000000009B79                 db 0BFh
.eh_frame_hdr:0000000000009B7A                 db 0FFh
.eh_frame_hdr:0000000000009B7B                 db 0FFh
.eh_frame_hdr:0000000000009B7C                 db 0A8h
.eh_frame_hdr:0000000000009B7D                 db  0Dh
.eh_frame_hdr:0000000000009B7E                 db    0
.eh_frame_hdr:0000000000009B7F                 db    0
.eh_frame_hdr:0000000000009B80                 db  24h ; $
.eh_frame_hdr:0000000000009B81                 db 0C0h
.eh_frame_hdr:0000000000009B82                 db 0FFh
.eh_frame_hdr:0000000000009B83                 db 0FFh
.eh_frame_hdr:0000000000009B84                 db 0BCh
.eh_frame_hdr:0000000000009B85                 db  0Dh
.eh_frame_hdr:0000000000009B86                 db    0
.eh_frame_hdr:0000000000009B87                 db    0
.eh_frame_hdr:0000000000009B88                 db  34h ; 4
.eh_frame_hdr:0000000000009B89                 db 0C0h
.eh_frame_hdr:0000000000009B8A                 db 0FFh
.eh_frame_hdr:0000000000009B8B                 db 0FFh
.eh_frame_hdr:0000000000009B8C                 db 0D0h
.eh_frame_hdr:0000000000009B8D                 db  0Dh
.eh_frame_hdr:0000000000009B8E                 db    0
.eh_frame_hdr:0000000000009B8F                 db    0
.eh_frame_hdr:0000000000009B90                 db  74h ; t
.eh_frame_hdr:0000000000009B91                 db 0C0h
.eh_frame_hdr:0000000000009B92                 db 0FFh
.eh_frame_hdr:0000000000009B93                 db 0FFh
.eh_frame_hdr:0000000000009B94                 db 0F4h
.eh_frame_hdr:0000000000009B95                 db  0Dh
.eh_frame_hdr:0000000000009B96                 db    0
.eh_frame_hdr:0000000000009B97                 db    0
.eh_frame_hdr:0000000000009B98                 db 0A4h
.eh_frame_hdr:0000000000009B99                 db 0C0h
.eh_frame_hdr:0000000000009B9A                 db 0FFh
.eh_frame_hdr:0000000000009B9B                 db 0FFh
.eh_frame_hdr:0000000000009B9C                 db    8
.eh_frame_hdr:0000000000009B9D                 db  0Eh
.eh_frame_hdr:0000000000009B9E                 db    0
.eh_frame_hdr:0000000000009B9F                 db    0
.eh_frame_hdr:0000000000009BA0                 db  34h ; 4
.eh_frame_hdr:0000000000009BA1                 db 0C1h
.eh_frame_hdr:0000000000009BA2                 db 0FFh
.eh_frame_hdr:0000000000009BA3                 db 0FFh
.eh_frame_hdr:0000000000009BA4                 db  20h
.eh_frame_hdr:0000000000009BA5                 db  0Eh
.eh_frame_hdr:0000000000009BA6                 db    0
.eh_frame_hdr:0000000000009BA7                 db    0
.eh_frame_hdr:0000000000009BA8                 db  84h
.eh_frame_hdr:0000000000009BA9                 db 0C1h
.eh_frame_hdr:0000000000009BAA                 db 0FFh
.eh_frame_hdr:0000000000009BAB                 db 0FFh
.eh_frame_hdr:0000000000009BAC                 db  38h ; 8
.eh_frame_hdr:0000000000009BAD                 db  0Eh
.eh_frame_hdr:0000000000009BAE                 db    0
.eh_frame_hdr:0000000000009BAF                 db    0
.eh_frame_hdr:0000000000009BB0                 db 0A4h
.eh_frame_hdr:0000000000009BB1                 db 0C1h
.eh_frame_hdr:0000000000009BB2                 db 0FFh
.eh_frame_hdr:0000000000009BB3                 db 0FFh
.eh_frame_hdr:0000000000009BB4                 db  54h ; T
.eh_frame_hdr:0000000000009BB5                 db  0Eh
.eh_frame_hdr:0000000000009BB6                 db    0
.eh_frame_hdr:0000000000009BB7                 db    0
.eh_frame_hdr:0000000000009BB8                 db 0D4h
.eh_frame_hdr:0000000000009BB9                 db 0C1h
.eh_frame_hdr:0000000000009BBA                 db 0FFh
.eh_frame_hdr:0000000000009BBB                 db 0FFh
.eh_frame_hdr:0000000000009BBC                 db  70h ; p
.eh_frame_hdr:0000000000009BBD                 db  0Eh
.eh_frame_hdr:0000000000009BBE                 db    0
.eh_frame_hdr:0000000000009BBF                 db    0
.eh_frame_hdr:0000000000009BC0                 db    4
.eh_frame_hdr:0000000000009BC1                 db 0C2h
.eh_frame_hdr:0000000000009BC2                 db 0FFh
.eh_frame_hdr:0000000000009BC3                 db 0FFh
.eh_frame_hdr:0000000000009BC4                 db  98h
.eh_frame_hdr:0000000000009BC5                 db  0Eh
.eh_frame_hdr:0000000000009BC6                 db    0
.eh_frame_hdr:0000000000009BC7                 db    0
.eh_frame_hdr:0000000000009BC8                 db  24h ; $
.eh_frame_hdr:0000000000009BC9                 db 0C2h
.eh_frame_hdr:0000000000009BCA                 db 0FFh
.eh_frame_hdr:0000000000009BCB                 db 0FFh
.eh_frame_hdr:0000000000009BCC                 db 0B4h
.eh_frame_hdr:0000000000009BCD                 db  0Eh
.eh_frame_hdr:0000000000009BCE                 db    0
.eh_frame_hdr:0000000000009BCF                 db    0
.eh_frame_hdr:0000000000009BD0                 db  64h ; d
.eh_frame_hdr:0000000000009BD1                 db 0C2h
.eh_frame_hdr:0000000000009BD2                 db 0FFh
.eh_frame_hdr:0000000000009BD3                 db 0FFh
.eh_frame_hdr:0000000000009BD4                 db 0CCh
.eh_frame_hdr:0000000000009BD5                 db  0Eh
.eh_frame_hdr:0000000000009BD6                 db    0
.eh_frame_hdr:0000000000009BD7                 db    0
.eh_frame_hdr:0000000000009BD8                 db 0F4h
.eh_frame_hdr:0000000000009BD9                 db 0C2h
.eh_frame_hdr:0000000000009BDA                 db 0FFh
.eh_frame_hdr:0000000000009BDB                 db 0FFh
.eh_frame_hdr:0000000000009BDC                 db  0Ch
.eh_frame_hdr:0000000000009BDD                 db  0Fh
.eh_frame_hdr:0000000000009BDE                 db    0
.eh_frame_hdr:0000000000009BDF                 db    0
.eh_frame_hdr:0000000000009BE0                 db 0F4h
.eh_frame_hdr:0000000000009BE1                 db 0C3h
.eh_frame_hdr:0000000000009BE2                 db 0FFh
.eh_frame_hdr:0000000000009BE3                 db 0FFh
.eh_frame_hdr:0000000000009BE4                 db  4Ch ; L
.eh_frame_hdr:0000000000009BE5                 db  0Fh
.eh_frame_hdr:0000000000009BE6                 db    0
.eh_frame_hdr:0000000000009BE7                 db    0
.eh_frame_hdr:0000000000009BE8                 db  74h ; t
.eh_frame_hdr:0000000000009BE9                 db 0C4h
.eh_frame_hdr:0000000000009BEA                 db 0FFh
.eh_frame_hdr:0000000000009BEB                 db 0FFh
.eh_frame_hdr:0000000000009BEC                 db  9Ch
.eh_frame_hdr:0000000000009BED                 db  0Fh
.eh_frame_hdr:0000000000009BEE                 db    0
.eh_frame_hdr:0000000000009BEF                 db    0
.eh_frame_hdr:0000000000009BF0                 db 0E4h
.eh_frame_hdr:0000000000009BF1                 db 0C4h
.eh_frame_hdr:0000000000009BF2                 db 0FFh
.eh_frame_hdr:0000000000009BF3                 db 0FFh
.eh_frame_hdr:0000000000009BF4                 db 0BCh
.eh_frame_hdr:0000000000009BF5                 db  0Fh
.eh_frame_hdr:0000000000009BF6                 db    0
.eh_frame_hdr:0000000000009BF7                 db    0
.eh_frame_hdr:0000000000009BF8                 db  44h ; D
.eh_frame_hdr:0000000000009BF9                 db 0C5h
.eh_frame_hdr:0000000000009BFA                 db 0FFh
.eh_frame_hdr:0000000000009BFB                 db 0FFh
.eh_frame_hdr:0000000000009BFC                 db 0DCh
.eh_frame_hdr:0000000000009BFD                 db  0Fh
.eh_frame_hdr:0000000000009BFE                 db    0
.eh_frame_hdr:0000000000009BFF                 db    0
.eh_frame_hdr:0000000000009C00                 db  84h
.eh_frame_hdr:0000000000009C01                 db 0C5h
.eh_frame_hdr:0000000000009C02                 db 0FFh
.eh_frame_hdr:0000000000009C03                 db 0FFh
.eh_frame_hdr:0000000000009C04                 db 0FCh
.eh_frame_hdr:0000000000009C05                 db  0Fh
.eh_frame_hdr:0000000000009C06                 db    0
.eh_frame_hdr:0000000000009C07                 db    0
.eh_frame_hdr:0000000000009C08                 db 0F4h
.eh_frame_hdr:0000000000009C09                 db 0C6h
.eh_frame_hdr:0000000000009C0A                 db 0FFh
.eh_frame_hdr:0000000000009C0B                 db 0FFh
.eh_frame_hdr:0000000000009C0C                 db  4Ch ; L
.eh_frame_hdr:0000000000009C0D                 db  10h
.eh_frame_hdr:0000000000009C0E                 db    0
.eh_frame_hdr:0000000000009C0F                 db    0
.eh_frame_hdr:0000000000009C10                 db  14h
.eh_frame_hdr:0000000000009C11                 db 0C9h
.eh_frame_hdr:0000000000009C12                 db 0FFh
.eh_frame_hdr:0000000000009C13                 db 0FFh
.eh_frame_hdr:0000000000009C14                 db  9Ch
.eh_frame_hdr:0000000000009C15                 db  10h
.eh_frame_hdr:0000000000009C16                 db    0
.eh_frame_hdr:0000000000009C17                 db    0
.eh_frame_hdr:0000000000009C18                 db  54h ; T
.eh_frame_hdr:0000000000009C19                 db 0C9h
.eh_frame_hdr:0000000000009C1A                 db 0FFh
.eh_frame_hdr:0000000000009C1B                 db 0FFh
.eh_frame_hdr:0000000000009C1C                 db 0D4h
.eh_frame_hdr:0000000000009C1D                 db  10h
.eh_frame_hdr:0000000000009C1E                 db    0
.eh_frame_hdr:0000000000009C1F                 db    0
.eh_frame_hdr:0000000000009C20                 db 0D4h
.eh_frame_hdr:0000000000009C21                 db 0C9h
.eh_frame_hdr:0000000000009C22                 db 0FFh
.eh_frame_hdr:0000000000009C23                 db 0FFh
.eh_frame_hdr:0000000000009C24                 db  0Ch
.eh_frame_hdr:0000000000009C25                 db  11h
.eh_frame_hdr:0000000000009C26                 db    0
.eh_frame_hdr:0000000000009C27                 db    0
.eh_frame_hdr:0000000000009C28                 db  14h
.eh_frame_hdr:0000000000009C29                 db 0CAh
.eh_frame_hdr:0000000000009C2A                 db 0FFh
.eh_frame_hdr:0000000000009C2B                 db 0FFh
.eh_frame_hdr:0000000000009C2C                 db  2Ch ; ,
.eh_frame_hdr:0000000000009C2D                 db  11h
.eh_frame_hdr:0000000000009C2E                 db    0
.eh_frame_hdr:0000000000009C2F                 db    0
.eh_frame_hdr:0000000000009C30                 db  74h ; t
.eh_frame_hdr:0000000000009C31                 db 0CAh
.eh_frame_hdr:0000000000009C32                 db 0FFh
.eh_frame_hdr:0000000000009C33                 db 0FFh
.eh_frame_hdr:0000000000009C34                 db  5Ch ; \
.eh_frame_hdr:0000000000009C35                 db  11h
.eh_frame_hdr:0000000000009C36                 db    0
.eh_frame_hdr:0000000000009C37                 db    0
.eh_frame_hdr:0000000000009C38                 db  84h
.eh_frame_hdr:0000000000009C39                 db 0CAh
.eh_frame_hdr:0000000000009C3A                 db 0FFh
.eh_frame_hdr:0000000000009C3B                 db 0FFh
.eh_frame_hdr:0000000000009C3C                 db  74h ; t
.eh_frame_hdr:0000000000009C3D                 db  11h
.eh_frame_hdr:0000000000009C3E                 db    0
.eh_frame_hdr:0000000000009C3F                 db    0
.eh_frame_hdr:0000000000009C40                 db 0A4h
.eh_frame_hdr:0000000000009C41                 db 0DBh
.eh_frame_hdr:0000000000009C42                 db 0FFh
.eh_frame_hdr:0000000000009C43                 db 0FFh
.eh_frame_hdr:0000000000009C44                 db 0A4h
.eh_frame_hdr:0000000000009C45                 db  11h
.eh_frame_hdr:0000000000009C46                 db    0
.eh_frame_hdr:0000000000009C47                 db    0
.eh_frame_hdr:0000000000009C48                 db 0B4h
.eh_frame_hdr:0000000000009C49                 db 0DBh
.eh_frame_hdr:0000000000009C4A                 db 0FFh
.eh_frame_hdr:0000000000009C4B                 db 0FFh
.eh_frame_hdr:0000000000009C4C                 db 0BCh
.eh_frame_hdr:0000000000009C4D                 db  11h
.eh_frame_hdr:0000000000009C4E                 db    0
.eh_frame_hdr:0000000000009C4F                 db    0
.eh_frame_hdr:0000000000009C50                 db  34h ; 4
.eh_frame_hdr:0000000000009C51                 db 0DEh
.eh_frame_hdr:0000000000009C52                 db 0FFh
.eh_frame_hdr:0000000000009C53                 db 0FFh
.eh_frame_hdr:0000000000009C54                 db 0F4h
.eh_frame_hdr:0000000000009C55                 db  11h
.eh_frame_hdr:0000000000009C56                 db    0
.eh_frame_hdr:0000000000009C57                 db    0
.eh_frame_hdr:0000000000009C58                 db  34h ; 4
.eh_frame_hdr:0000000000009C59                 db 0E0h
.eh_frame_hdr:0000000000009C5A                 db 0FFh
.eh_frame_hdr:0000000000009C5B                 db 0FFh
.eh_frame_hdr:0000000000009C5C                 db  0Ch
.eh_frame_hdr:0000000000009C5D                 db  12h
.eh_frame_hdr:0000000000009C5E                 db    0
.eh_frame_hdr:0000000000009C5F                 db    0
.eh_frame_hdr:0000000000009C60                 db  24h ; $
.eh_frame_hdr:0000000000009C61                 db 0EDh
.eh_frame_hdr:0000000000009C62                 db 0FFh
.eh_frame_hdr:0000000000009C63                 db 0FFh
.eh_frame_hdr:0000000000009C64                 db  5Ch ; \
.eh_frame_hdr:0000000000009C65                 db  12h
.eh_frame_hdr:0000000000009C66                 db    0
.eh_frame_hdr:0000000000009C67                 db    0
.eh_frame_hdr:0000000000009C68                 db  94h
.eh_frame_hdr:0000000000009C69                 db 0EDh
.eh_frame_hdr:0000000000009C6A                 db 0FFh
.eh_frame_hdr:0000000000009C6B                 db 0FFh
.eh_frame_hdr:0000000000009C6C                 db 0A4h
.eh_frame_hdr:0000000000009C6D                 db  12h
.eh_frame_hdr:0000000000009C6E                 db    0
.eh_frame_hdr:0000000000009C6F                 db    0
.eh_frame_hdr:0000000000009C70                 db 0A4h
.eh_frame_hdr:0000000000009C71                 db 0EDh
.eh_frame_hdr:0000000000009C72                 db 0FFh
.eh_frame_hdr:0000000000009C73                 db 0FFh
.eh_frame_hdr:0000000000009C74                 db 0BCh
.eh_frame_hdr:0000000000009C75                 db  12h
.eh_frame_hdr:0000000000009C76                 db    0
.eh_frame_hdr:0000000000009C77                 db    0
.eh_frame_hdr:0000000000009C77 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000009C77
.eh_frame:0000000000009C78 ; ===========================================================================
.eh_frame:0000000000009C78
.eh_frame:0000000000009C78 ; Segment type: Pure data
.eh_frame:0000000000009C78 ; Segment permissions: Read
.eh_frame:0000000000009C78 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000009C78                 assume cs:_eh_frame
.eh_frame:0000000000009C78                 ;org 9C78h
.eh_frame:0000000000009C78                 db  14h
.eh_frame:0000000000009C79                 db    0
.eh_frame:0000000000009C7A                 db    0
.eh_frame:0000000000009C7B                 db    0
.eh_frame:0000000000009C7C                 db    0
.eh_frame:0000000000009C7D                 db    0
.eh_frame:0000000000009C7E                 db    0
.eh_frame:0000000000009C7F                 db    0
.eh_frame:0000000000009C80                 db    1
.eh_frame:0000000000009C81                 db  7Ah ; z
.eh_frame:0000000000009C82                 db  52h ; R
.eh_frame:0000000000009C83                 db    0
.eh_frame:0000000000009C84                 db    1
.eh_frame:0000000000009C85                 db  78h ; x
.eh_frame:0000000000009C86                 db  10h
.eh_frame:0000000000009C87                 db    1
.eh_frame:0000000000009C88                 db  1Bh
.eh_frame:0000000000009C89                 db  0Ch
.eh_frame:0000000000009C8A                 db    7
.eh_frame:0000000000009C8B                 db    8
.eh_frame:0000000000009C8C                 db  90h
.eh_frame:0000000000009C8D                 db    1
.eh_frame:0000000000009C8E                 db    7
.eh_frame:0000000000009C8F                 db  10h
.eh_frame:0000000000009C90                 db  14h
.eh_frame:0000000000009C91                 db    0
.eh_frame:0000000000009C92                 db    0
.eh_frame:0000000000009C93                 db    0
.eh_frame:0000000000009C94                 db  1Ch
.eh_frame:0000000000009C95                 db    0
.eh_frame:0000000000009C96                 db    0
.eh_frame:0000000000009C97                 db    0
.eh_frame:0000000000009C98                 db  38h ; 8
.eh_frame:0000000000009C99                 db  81h
.eh_frame:0000000000009C9A                 db 0FFh
.eh_frame:0000000000009C9B                 db 0FFh
.eh_frame:0000000000009C9C                 db  2Bh ; +
.eh_frame:0000000000009C9D                 db    0
.eh_frame:0000000000009C9E                 db    0
.eh_frame:0000000000009C9F                 db    0
.eh_frame:0000000000009CA0                 db    0
.eh_frame:0000000000009CA1                 db    0
.eh_frame:0000000000009CA2                 db    0
.eh_frame:0000000000009CA3                 db    0
.eh_frame:0000000000009CA4                 db    0
.eh_frame:0000000000009CA5                 db    0
.eh_frame:0000000000009CA6                 db    0
.eh_frame:0000000000009CA7                 db    0
.eh_frame:0000000000009CA8                 db  14h
.eh_frame:0000000000009CA9                 db    0
.eh_frame:0000000000009CAA                 db    0
.eh_frame:0000000000009CAB                 db    0
.eh_frame:0000000000009CAC                 db    0
.eh_frame:0000000000009CAD                 db    0
.eh_frame:0000000000009CAE                 db    0
.eh_frame:0000000000009CAF                 db    0
.eh_frame:0000000000009CB0                 db    1
.eh_frame:0000000000009CB1                 db  7Ah ; z
.eh_frame:0000000000009CB2                 db  52h ; R
.eh_frame:0000000000009CB3                 db    0
.eh_frame:0000000000009CB4                 db    1
.eh_frame:0000000000009CB5                 db  78h ; x
.eh_frame:0000000000009CB6                 db  10h
.eh_frame:0000000000009CB7                 db    1
.eh_frame:0000000000009CB8                 db  1Bh
.eh_frame:0000000000009CB9                 db  0Ch
.eh_frame:0000000000009CBA                 db    7
.eh_frame:0000000000009CBB                 db    8
.eh_frame:0000000000009CBC                 db  90h
.eh_frame:0000000000009CBD                 db    1
.eh_frame:0000000000009CBE                 db    0
.eh_frame:0000000000009CBF                 db    0
.eh_frame:0000000000009CC0                 db  24h ; $
.eh_frame:0000000000009CC1                 db    0
.eh_frame:0000000000009CC2                 db    0
.eh_frame:0000000000009CC3                 db    0
.eh_frame:0000000000009CC4                 db  1Ch
.eh_frame:0000000000009CC5                 db    0
.eh_frame:0000000000009CC6                 db    0
.eh_frame:0000000000009CC7                 db    0
.eh_frame:0000000000009CC8                 db  38h ; 8
.eh_frame:0000000000009CC9                 db  7Ah ; z
.eh_frame:0000000000009CCA                 db 0FFh
.eh_frame:0000000000009CCB                 db 0FFh
.eh_frame:0000000000009CCC                 db 0E0h
.eh_frame:0000000000009CCD                 db    3
.eh_frame:0000000000009CCE                 db    0
.eh_frame:0000000000009CCF                 db    0
.eh_frame:0000000000009CD0                 db    0
.eh_frame:0000000000009CD1                 db  0Eh
.eh_frame:0000000000009CD2                 db  10h
.eh_frame:0000000000009CD3                 db  46h ; F
.eh_frame:0000000000009CD4                 db  0Eh
.eh_frame:0000000000009CD5                 db  18h
.eh_frame:0000000000009CD6                 db  4Ah ; J
.eh_frame:0000000000009CD7                 db  0Fh
.eh_frame:0000000000009CD8                 db  0Bh
.eh_frame:0000000000009CD9                 db  77h ; w
.eh_frame:0000000000009CDA                 db    8
.eh_frame:0000000000009CDB                 db  80h
.eh_frame:0000000000009CDC                 db    0
.eh_frame:0000000000009CDD                 db  3Fh ; ?
.eh_frame:0000000000009CDE                 db  1Ah
.eh_frame:0000000000009CDF                 db  3Bh ; ;
.eh_frame:0000000000009CE0                 db  2Ah ; *
.eh_frame:0000000000009CE1                 db  33h ; 3
.eh_frame:0000000000009CE2                 db  24h ; $
.eh_frame:0000000000009CE3                 db  22h ; "
.eh_frame:0000000000009CE4                 db    0
.eh_frame:0000000000009CE5                 db    0
.eh_frame:0000000000009CE6                 db    0
.eh_frame:0000000000009CE7                 db    0
.eh_frame:0000000000009CE8                 db  14h
.eh_frame:0000000000009CE9                 db    0
.eh_frame:0000000000009CEA                 db    0
.eh_frame:0000000000009CEB                 db    0
.eh_frame:0000000000009CEC                 db  44h ; D
.eh_frame:0000000000009CED                 db    0
.eh_frame:0000000000009CEE                 db    0
.eh_frame:0000000000009CEF                 db    0
.eh_frame:0000000000009CF0                 db 0F0h
.eh_frame:0000000000009CF1                 db  7Dh ; }
.eh_frame:0000000000009CF2                 db 0FFh
.eh_frame:0000000000009CF3                 db 0FFh
.eh_frame:0000000000009CF4                 db    8
.eh_frame:0000000000009CF5                 db    0
.eh_frame:0000000000009CF6                 db    0
.eh_frame:0000000000009CF7                 db    0
.eh_frame:0000000000009CF8                 db    0
.eh_frame:0000000000009CF9                 db    0
.eh_frame:0000000000009CFA                 db    0
.eh_frame:0000000000009CFB                 db    0
.eh_frame:0000000000009CFC                 db    0
.eh_frame:0000000000009CFD                 db    0
.eh_frame:0000000000009CFE                 db    0
.eh_frame:0000000000009CFF                 db    0
.eh_frame:0000000000009D00                 db  38h ; 8
.eh_frame:0000000000009D01                 db    0
.eh_frame:0000000000009D02                 db    0
.eh_frame:0000000000009D03                 db    0
.eh_frame:0000000000009D04                 db  5Ch ; \
.eh_frame:0000000000009D05                 db    0
.eh_frame:0000000000009D06                 db    0
.eh_frame:0000000000009D07                 db    0
.eh_frame:0000000000009D08                 db 0D8h
.eh_frame:0000000000009D09                 db  81h
.eh_frame:0000000000009D0A                 db 0FFh
.eh_frame:0000000000009D0B                 db 0FFh
.eh_frame:0000000000009D0C                 db  93h
.eh_frame:0000000000009D0D                 db    0
.eh_frame:0000000000009D0E                 db    0
.eh_frame:0000000000009D0F                 db    0
.eh_frame:0000000000009D10                 db    0
.eh_frame:0000000000009D11                 db  41h ; A
.eh_frame:0000000000009D12                 db  0Eh
.eh_frame:0000000000009D13                 db  10h
.eh_frame:0000000000009D14                 db  86h
.eh_frame:0000000000009D15                 db    2
.eh_frame:0000000000009D16                 db  41h ; A
.eh_frame:0000000000009D17                 db  0Eh
.eh_frame:0000000000009D18                 db  18h
.eh_frame:0000000000009D19                 db  83h
.eh_frame:0000000000009D1A                 db    3
.eh_frame:0000000000009D1B                 db  47h ; G
.eh_frame:0000000000009D1C                 db  0Eh
.eh_frame:0000000000009D1D                 db  40h ; @
.eh_frame:0000000000009D1E                 db  5Eh ; ^
.eh_frame:0000000000009D1F                 db  0Eh
.eh_frame:0000000000009D20                 db  48h ; H
.eh_frame:0000000000009D21                 db  42h ; B
.eh_frame:0000000000009D22                 db  0Eh
.eh_frame:0000000000009D23                 db  50h ; P
.eh_frame:0000000000009D24                 db  45h ; E
.eh_frame:0000000000009D25                 db  0Eh
.eh_frame:0000000000009D26                 db  58h ; X
.eh_frame:0000000000009D27                 db  41h ; A
.eh_frame:0000000000009D28                 db  0Eh
.eh_frame:0000000000009D29                 db  60h ; `
.eh_frame:0000000000009D2A                 db  4Ch ; L
.eh_frame:0000000000009D2B                 db  0Eh
.eh_frame:0000000000009D2C                 db  40h ; @
.eh_frame:0000000000009D2D                 db  62h ; b
.eh_frame:0000000000009D2E                 db  0Ah
.eh_frame:0000000000009D2F                 db  0Eh
.eh_frame:0000000000009D30                 db  18h
.eh_frame:0000000000009D31                 db  43h ; C
.eh_frame:0000000000009D32                 db  0Eh
.eh_frame:0000000000009D33                 db  10h
.eh_frame:0000000000009D34                 db  41h ; A
.eh_frame:0000000000009D35                 db  0Eh
.eh_frame:0000000000009D36                 db    8
.eh_frame:0000000000009D37                 db  47h ; G
.eh_frame:0000000000009D38                 db  0Bh
.eh_frame:0000000000009D39                 db    0
.eh_frame:0000000000009D3A                 db    0
.eh_frame:0000000000009D3B                 db    0
.eh_frame:0000000000009D3C                 db  18h
.eh_frame:0000000000009D3D                 db    0
.eh_frame:0000000000009D3E                 db    0
.eh_frame:0000000000009D3F                 db    0
.eh_frame:0000000000009D40                 db  98h
.eh_frame:0000000000009D41                 db    0
.eh_frame:0000000000009D42                 db    0
.eh_frame:0000000000009D43                 db    0
.eh_frame:0000000000009D44                 db  3Ch ; <
.eh_frame:0000000000009D45                 db  82h
.eh_frame:0000000000009D46                 db 0FFh
.eh_frame:0000000000009D47                 db 0FFh
.eh_frame:0000000000009D48                 db  27h ; '
.eh_frame:0000000000009D49                 db    0
.eh_frame:0000000000009D4A                 db    0
.eh_frame:0000000000009D4B                 db    0
.eh_frame:0000000000009D4C                 db    0
.eh_frame:0000000000009D4D                 db  41h ; A
.eh_frame:0000000000009D4E                 db  0Eh
.eh_frame:0000000000009D4F                 db  10h
.eh_frame:0000000000009D50                 db  83h
.eh_frame:0000000000009D51                 db    2
.eh_frame:0000000000009D52                 db  5Fh ; _
.eh_frame:0000000000009D53                 db  0Eh
.eh_frame:0000000000009D54                 db    8
.eh_frame:0000000000009D55                 db    0
.eh_frame:0000000000009D56                 db    0
.eh_frame:0000000000009D57                 db    0
.eh_frame:0000000000009D58                 db  10h
.eh_frame:0000000000009D59                 db    0
.eh_frame:0000000000009D5A                 db    0
.eh_frame:0000000000009D5B                 db    0
.eh_frame:0000000000009D5C                 db 0B4h
.eh_frame:0000000000009D5D                 db    0
.eh_frame:0000000000009D5E                 db    0
.eh_frame:0000000000009D5F                 db    0
.eh_frame:0000000000009D60                 db  50h ; P
.eh_frame:0000000000009D61                 db  82h
.eh_frame:0000000000009D62                 db 0FFh
.eh_frame:0000000000009D63                 db 0FFh
.eh_frame:0000000000009D64                 db  12h
.eh_frame:0000000000009D65                 db    0
.eh_frame:0000000000009D66                 db    0
.eh_frame:0000000000009D67                 db    0
.eh_frame:0000000000009D68                 db    0
.eh_frame:0000000000009D69                 db    0
.eh_frame:0000000000009D6A                 db    0
.eh_frame:0000000000009D6B                 db    0
.eh_frame:0000000000009D6C                 db  3Ch ; <
.eh_frame:0000000000009D6D                 db    0
.eh_frame:0000000000009D6E                 db    0
.eh_frame:0000000000009D6F                 db    0
.eh_frame:0000000000009D70                 db 0C8h
.eh_frame:0000000000009D71                 db    0
.eh_frame:0000000000009D72                 db    0
.eh_frame:0000000000009D73                 db    0
.eh_frame:0000000000009D74                 db  5Ch ; \
.eh_frame:0000000000009D75                 db  82h
.eh_frame:0000000000009D76                 db 0FFh
.eh_frame:0000000000009D77                 db 0FFh
.eh_frame:0000000000009D78                 db  99h
.eh_frame:0000000000009D79                 db    0
.eh_frame:0000000000009D7A                 db    0
.eh_frame:0000000000009D7B                 db    0
.eh_frame:0000000000009D7C                 db    0
.eh_frame:0000000000009D7D                 db  46h ; F
.eh_frame:0000000000009D7E                 db  0Eh
.eh_frame:0000000000009D7F                 db  10h
.eh_frame:0000000000009D80                 db  8Eh
.eh_frame:0000000000009D81                 db    2
.eh_frame:0000000000009D82                 db  42h ; B
.eh_frame:0000000000009D83                 db  0Eh
.eh_frame:0000000000009D84                 db  18h
.eh_frame:0000000000009D85                 db  8Dh
.eh_frame:0000000000009D86                 db    3
.eh_frame:0000000000009D87                 db  42h ; B
.eh_frame:0000000000009D88                 db  0Eh
.eh_frame:0000000000009D89                 db  20h
.eh_frame:0000000000009D8A                 db  8Ch
.eh_frame:0000000000009D8B                 db    4
.eh_frame:0000000000009D8C                 db  44h ; D
.eh_frame:0000000000009D8D                 db  0Eh
.eh_frame:0000000000009D8E                 db  28h ; (
.eh_frame:0000000000009D8F                 db  86h
.eh_frame:0000000000009D90                 db    5
.eh_frame:0000000000009D91                 db  44h ; D
.eh_frame:0000000000009D92                 db  0Eh
.eh_frame:0000000000009D93                 db  30h ; 0
.eh_frame:0000000000009D94                 db  83h
.eh_frame:0000000000009D95                 db    6
.eh_frame:0000000000009D96                 db    2
.eh_frame:0000000000009D97                 db  4Ah ; J
.eh_frame:0000000000009D98                 db  0Ah
.eh_frame:0000000000009D99                 db  0Eh
.eh_frame:0000000000009D9A                 db  28h ; (
.eh_frame:0000000000009D9B                 db  41h ; A
.eh_frame:0000000000009D9C                 db  0Eh
.eh_frame:0000000000009D9D                 db  20h
.eh_frame:0000000000009D9E                 db  42h ; B
.eh_frame:0000000000009D9F                 db  0Eh
.eh_frame:0000000000009DA0                 db  18h
.eh_frame:0000000000009DA1                 db  42h ; B
.eh_frame:0000000000009DA2                 db  0Eh
.eh_frame:0000000000009DA3                 db  10h
.eh_frame:0000000000009DA4                 db  42h ; B
.eh_frame:0000000000009DA5                 db  0Eh
.eh_frame:0000000000009DA6                 db    8
.eh_frame:0000000000009DA7                 db  45h ; E
.eh_frame:0000000000009DA8                 db  0Bh
.eh_frame:0000000000009DA9                 db    0
.eh_frame:0000000000009DAA                 db    0
.eh_frame:0000000000009DAB                 db    0
.eh_frame:0000000000009DAC                 db  28h ; (
.eh_frame:0000000000009DAD                 db    0
.eh_frame:0000000000009DAE                 db    0
.eh_frame:0000000000009DAF                 db    0
.eh_frame:0000000000009DB0                 db    8
.eh_frame:0000000000009DB1                 db    1
.eh_frame:0000000000009DB2                 db    0
.eh_frame:0000000000009DB3                 db    0
.eh_frame:0000000000009DB4                 db 0BCh
.eh_frame:0000000000009DB5                 db  82h
.eh_frame:0000000000009DB6                 db 0FFh
.eh_frame:0000000000009DB7                 db 0FFh
.eh_frame:0000000000009DB8                 db 0B2h
.eh_frame:0000000000009DB9                 db    3
.eh_frame:0000000000009DBA                 db    0
.eh_frame:0000000000009DBB                 db    0
.eh_frame:0000000000009DBC                 db    0
.eh_frame:0000000000009DBD                 db  42h ; B
.eh_frame:0000000000009DBE                 db  0Eh
.eh_frame:0000000000009DBF                 db  10h
.eh_frame:0000000000009DC0                 db  8Dh
.eh_frame:0000000000009DC1                 db    2
.eh_frame:0000000000009DC2                 db  42h ; B
.eh_frame:0000000000009DC3                 db  0Eh
.eh_frame:0000000000009DC4                 db  18h
.eh_frame:0000000000009DC5                 db  8Ch
.eh_frame:0000000000009DC6                 db    3
.eh_frame:0000000000009DC7                 db  46h ; F
.eh_frame:0000000000009DC8                 db  0Eh
.eh_frame:0000000000009DC9                 db  20h
.eh_frame:0000000000009DCA                 db  86h
.eh_frame:0000000000009DCB                 db    4
.eh_frame:0000000000009DCC                 db  41h ; A
.eh_frame:0000000000009DCD                 db  0Eh
.eh_frame:0000000000009DCE                 db  28h ; (
.eh_frame:0000000000009DCF                 db  83h
.eh_frame:0000000000009DD0                 db    5
.eh_frame:0000000000009DD1                 db  49h ; I
.eh_frame:0000000000009DD2                 db  0Eh
.eh_frame:0000000000009DD3                 db 0B0h
.eh_frame:0000000000009DD4                 db    1
.eh_frame:0000000000009DD5                 db    0
.eh_frame:0000000000009DD6                 db    0
.eh_frame:0000000000009DD7                 db    0
.eh_frame:0000000000009DD8                 db  44h ; D
.eh_frame:0000000000009DD9                 db    0
.eh_frame:0000000000009DDA                 db    0
.eh_frame:0000000000009DDB                 db    0
.eh_frame:0000000000009DDC                 db  34h ; 4
.eh_frame:0000000000009DDD                 db    1
.eh_frame:0000000000009DDE                 db    0
.eh_frame:0000000000009DDF                 db    0
.eh_frame:0000000000009DE0                 db  10h
.eh_frame:0000000000009DE1                 db  7Dh ; }
.eh_frame:0000000000009DE2                 db 0FFh
.eh_frame:0000000000009DE3                 db 0FFh
.eh_frame:0000000000009DE4                 db 0D1h
.eh_frame:0000000000009DE5                 db    2
.eh_frame:0000000000009DE6                 db    0
.eh_frame:0000000000009DE7                 db    0
.eh_frame:0000000000009DE8                 db    0
.eh_frame:0000000000009DE9                 db  42h ; B
.eh_frame:0000000000009DEA                 db  0Eh
.eh_frame:0000000000009DEB                 db  10h
.eh_frame:0000000000009DEC                 db  8Eh
.eh_frame:0000000000009DED                 db    2
.eh_frame:0000000000009DEE                 db  42h ; B
.eh_frame:0000000000009DEF                 db  0Eh
.eh_frame:0000000000009DF0                 db  18h
.eh_frame:0000000000009DF1                 db  8Dh
.eh_frame:0000000000009DF2                 db    3
.eh_frame:0000000000009DF3                 db  49h ; I
.eh_frame:0000000000009DF4                 db  0Eh
.eh_frame:0000000000009DF5                 db  20h
.eh_frame:0000000000009DF6                 db  8Ch
.eh_frame:0000000000009DF7                 db    4
.eh_frame:0000000000009DF8                 db  41h ; A
.eh_frame:0000000000009DF9                 db  0Eh
.eh_frame:0000000000009DFA                 db  28h ; (
.eh_frame:0000000000009DFB                 db  86h
.eh_frame:0000000000009DFC                 db    5
.eh_frame:0000000000009DFD                 db  43h ; C
.eh_frame:0000000000009DFE                 db  0Eh
.eh_frame:0000000000009DFF                 db  30h ; 0
.eh_frame:0000000000009E00                 db  83h
.eh_frame:0000000000009E01                 db    6
.eh_frame:0000000000009E02                 db  4Ah ; J
.eh_frame:0000000000009E03                 db  0Eh
.eh_frame:0000000000009E04                 db  60h ; `
.eh_frame:0000000000009E05                 db    3
.eh_frame:0000000000009E06                 db 0E5h
.eh_frame:0000000000009E07                 db    1
.eh_frame:0000000000009E08                 db  0Ah
.eh_frame:0000000000009E09                 db  0Eh
.eh_frame:0000000000009E0A                 db  30h ; 0
.eh_frame:0000000000009E0B                 db  41h ; A
.eh_frame:0000000000009E0C                 db  0Eh
.eh_frame:0000000000009E0D                 db  28h ; (
.eh_frame:0000000000009E0E                 db  41h ; A
.eh_frame:0000000000009E0F                 db  0Eh
.eh_frame:0000000000009E10                 db  20h
.eh_frame:0000000000009E11                 db  42h ; B
.eh_frame:0000000000009E12                 db  0Eh
.eh_frame:0000000000009E13                 db  18h
.eh_frame:0000000000009E14                 db  42h ; B
.eh_frame:0000000000009E15                 db  0Eh
.eh_frame:0000000000009E16                 db  10h
.eh_frame:0000000000009E17                 db  42h ; B
.eh_frame:0000000000009E18                 db  0Eh
.eh_frame:0000000000009E19                 db    8
.eh_frame:0000000000009E1A                 db  41h ; A
.eh_frame:0000000000009E1B                 db  0Bh
.eh_frame:0000000000009E1C                 db    0
.eh_frame:0000000000009E1D                 db    0
.eh_frame:0000000000009E1E                 db    0
.eh_frame:0000000000009E1F                 db    0
.eh_frame:0000000000009E20                 db  2Ch ; ,
.eh_frame:0000000000009E21                 db    0
.eh_frame:0000000000009E22                 db    0
.eh_frame:0000000000009E23                 db    0
.eh_frame:0000000000009E24                 db  7Ch ; |
.eh_frame:0000000000009E25                 db    1
.eh_frame:0000000000009E26                 db    0
.eh_frame:0000000000009E27                 db    0
.eh_frame:0000000000009E28                 db    8
.eh_frame:0000000000009E29                 db  86h
.eh_frame:0000000000009E2A                 db 0FFh
.eh_frame:0000000000009E2B                 db 0FFh
.eh_frame:0000000000009E2C                 db  14h
.eh_frame:0000000000009E2D                 db    1
.eh_frame:0000000000009E2E                 db    0
.eh_frame:0000000000009E2F                 db    0
.eh_frame:0000000000009E30                 db    0
.eh_frame:0000000000009E31                 db  41h ; A
.eh_frame:0000000000009E32                 db  0Eh
.eh_frame:0000000000009E33                 db  10h
.eh_frame:0000000000009E34                 db  86h
.eh_frame:0000000000009E35                 db    2
.eh_frame:0000000000009E36                 db  41h ; A
.eh_frame:0000000000009E37                 db  0Eh
.eh_frame:0000000000009E38                 db  18h
.eh_frame:0000000000009E39                 db  83h
.eh_frame:0000000000009E3A                 db    3
.eh_frame:0000000000009E3B                 db  4Dh ; M
.eh_frame:0000000000009E3C                 db  0Eh
.eh_frame:0000000000009E3D                 db 0F0h
.eh_frame:0000000000009E3E                 db    1
.eh_frame:0000000000009E3F                 db    2
.eh_frame:0000000000009E40                 db 0E7h
.eh_frame:0000000000009E41                 db  0Ah
.eh_frame:0000000000009E42                 db  0Eh
.eh_frame:0000000000009E43                 db  18h
.eh_frame:0000000000009E44                 db  41h ; A
.eh_frame:0000000000009E45                 db  0Eh
.eh_frame:0000000000009E46                 db  10h
.eh_frame:0000000000009E47                 db  41h ; A
.eh_frame:0000000000009E48                 db  0Eh
.eh_frame:0000000000009E49                 db    8
.eh_frame:0000000000009E4A                 db  48h ; H
.eh_frame:0000000000009E4B                 db  0Bh
.eh_frame:0000000000009E4C                 db    0
.eh_frame:0000000000009E4D                 db    0
.eh_frame:0000000000009E4E                 db    0
.eh_frame:0000000000009E4F                 db    0
.eh_frame:0000000000009E50                 db  10h
.eh_frame:0000000000009E51                 db    0
.eh_frame:0000000000009E52                 db    0
.eh_frame:0000000000009E53                 db    0
.eh_frame:0000000000009E54                 db 0ACh
.eh_frame:0000000000009E55                 db    1
.eh_frame:0000000000009E56                 db    0
.eh_frame:0000000000009E57                 db    0
.eh_frame:0000000000009E58                 db 0F8h
.eh_frame:0000000000009E59                 db  86h
.eh_frame:0000000000009E5A                 db 0FFh
.eh_frame:0000000000009E5B                 db 0FFh
.eh_frame:0000000000009E5C                 db    8
.eh_frame:0000000000009E5D                 db    0
.eh_frame:0000000000009E5E                 db    0
.eh_frame:0000000000009E5F                 db    0
.eh_frame:0000000000009E60                 db    0
.eh_frame:0000000000009E61                 db    0
.eh_frame:0000000000009E62                 db    0
.eh_frame:0000000000009E63                 db    0
.eh_frame:0000000000009E64                 db  10h
.eh_frame:0000000000009E65                 db    0
.eh_frame:0000000000009E66                 db    0
.eh_frame:0000000000009E67                 db    0
.eh_frame:0000000000009E68                 db 0C0h
.eh_frame:0000000000009E69                 db    1
.eh_frame:0000000000009E6A                 db    0
.eh_frame:0000000000009E6B                 db    0
.eh_frame:0000000000009E6C                 db 0F4h
.eh_frame:0000000000009E6D                 db  86h
.eh_frame:0000000000009E6E                 db 0FFh
.eh_frame:0000000000009E6F                 db 0FFh
.eh_frame:0000000000009E70                 db    8
.eh_frame:0000000000009E71                 db    0
.eh_frame:0000000000009E72                 db    0
.eh_frame:0000000000009E73                 db    0
.eh_frame:0000000000009E74                 db    0
.eh_frame:0000000000009E75                 db    0
.eh_frame:0000000000009E76                 db    0
.eh_frame:0000000000009E77                 db    0
.eh_frame:0000000000009E78                 db  2Ch ; ,
.eh_frame:0000000000009E79                 db    0
.eh_frame:0000000000009E7A                 db    0
.eh_frame:0000000000009E7B                 db    0
.eh_frame:0000000000009E7C                 db 0D4h
.eh_frame:0000000000009E7D                 db    1
.eh_frame:0000000000009E7E                 db    0
.eh_frame:0000000000009E7F                 db    0
.eh_frame:0000000000009E80                 db 0F0h
.eh_frame:0000000000009E81                 db  86h
.eh_frame:0000000000009E82                 db 0FFh
.eh_frame:0000000000009E83                 db 0FFh
.eh_frame:0000000000009E84                 db 0A4h
.eh_frame:0000000000009E85                 db    0
.eh_frame:0000000000009E86                 db    0
.eh_frame:0000000000009E87                 db    0
.eh_frame:0000000000009E88                 db    0
.eh_frame:0000000000009E89                 db  41h ; A
.eh_frame:0000000000009E8A                 db  0Eh
.eh_frame:0000000000009E8B                 db  10h
.eh_frame:0000000000009E8C                 db  86h
.eh_frame:0000000000009E8D                 db    2
.eh_frame:0000000000009E8E                 db  41h ; A
.eh_frame:0000000000009E8F                 db  0Eh
.eh_frame:0000000000009E90                 db  18h
.eh_frame:0000000000009E91                 db  83h
.eh_frame:0000000000009E92                 db    3
.eh_frame:0000000000009E93                 db  44h ; D
.eh_frame:0000000000009E94                 db  0Eh
.eh_frame:0000000000009E95                 db  20h
.eh_frame:0000000000009E96                 db  7Ah ; z
.eh_frame:0000000000009E97                 db  0Ah
.eh_frame:0000000000009E98                 db  0Eh
.eh_frame:0000000000009E99                 db  18h
.eh_frame:0000000000009E9A                 db  41h ; A
.eh_frame:0000000000009E9B                 db  0Eh
.eh_frame:0000000000009E9C                 db  10h
.eh_frame:0000000000009E9D                 db  41h ; A
.eh_frame:0000000000009E9E                 db  0Eh
.eh_frame:0000000000009E9F                 db    8
.eh_frame:0000000000009EA0                 db  41h ; A
.eh_frame:0000000000009EA1                 db  0Bh
.eh_frame:0000000000009EA2                 db    0
.eh_frame:0000000000009EA3                 db    0
.eh_frame:0000000000009EA4                 db    0
.eh_frame:0000000000009EA5                 db    0
.eh_frame:0000000000009EA6                 db    0
.eh_frame:0000000000009EA7                 db    0
.eh_frame:0000000000009EA8                 db  5Ch ; \
.eh_frame:0000000000009EA9                 db    0
.eh_frame:0000000000009EAA                 db    0
.eh_frame:0000000000009EAB                 db    0
.eh_frame:0000000000009EAC                 db    4
.eh_frame:0000000000009EAD                 db    2
.eh_frame:0000000000009EAE                 db    0
.eh_frame:0000000000009EAF                 db    0
.eh_frame:0000000000009EB0                 db  70h ; p
.eh_frame:0000000000009EB1                 db  87h
.eh_frame:0000000000009EB2                 db 0FFh
.eh_frame:0000000000009EB3                 db 0FFh
.eh_frame:0000000000009EB4                 db 0C9h
.eh_frame:0000000000009EB5                 db    3
.eh_frame:0000000000009EB6                 db    0
.eh_frame:0000000000009EB7                 db    0
.eh_frame:0000000000009EB8                 db    0
.eh_frame:0000000000009EB9                 db  42h ; B
.eh_frame:0000000000009EBA                 db  0Eh
.eh_frame:0000000000009EBB                 db  10h
.eh_frame:0000000000009EBC                 db  8Fh
.eh_frame:0000000000009EBD                 db    2
.eh_frame:0000000000009EBE                 db  42h ; B
.eh_frame:0000000000009EBF                 db  0Eh
.eh_frame:0000000000009EC0                 db  18h
.eh_frame:0000000000009EC1                 db  8Eh
.eh_frame:0000000000009EC2                 db    3
.eh_frame:0000000000009EC3                 db  45h ; E
.eh_frame:0000000000009EC4                 db  0Eh
.eh_frame:0000000000009EC5                 db  20h
.eh_frame:0000000000009EC6                 db  8Dh
.eh_frame:0000000000009EC7                 db    4
.eh_frame:0000000000009EC8                 db  42h ; B
.eh_frame:0000000000009EC9                 db  0Eh
.eh_frame:0000000000009ECA                 db  28h ; (
.eh_frame:0000000000009ECB                 db  8Ch
.eh_frame:0000000000009ECC                 db    5
.eh_frame:0000000000009ECD                 db  44h ; D
.eh_frame:0000000000009ECE                 db  0Eh
.eh_frame:0000000000009ECF                 db  30h ; 0
.eh_frame:0000000000009ED0                 db  86h
.eh_frame:0000000000009ED1                 db    6
.eh_frame:0000000000009ED2                 db  41h ; A
.eh_frame:0000000000009ED3                 db  0Eh
.eh_frame:0000000000009ED4                 db  38h ; 8
.eh_frame:0000000000009ED5                 db  83h
.eh_frame:0000000000009ED6                 db    7
.eh_frame:0000000000009ED7                 db  50h ; P
.eh_frame:0000000000009ED8                 db  0Eh
.eh_frame:0000000000009ED9                 db  80h
.eh_frame:0000000000009EDA                 db    2
.eh_frame:0000000000009EDB                 db    3
.eh_frame:0000000000009EDC                 db 0CEh
.eh_frame:0000000000009EDD                 db    1
.eh_frame:0000000000009EDE                 db  0Ah
.eh_frame:0000000000009EDF                 db  0Eh
.eh_frame:0000000000009EE0                 db  38h ; 8
.eh_frame:0000000000009EE1                 db  41h ; A
.eh_frame:0000000000009EE2                 db  0Eh
.eh_frame:0000000000009EE3                 db  30h ; 0
.eh_frame:0000000000009EE4                 db  41h ; A
.eh_frame:0000000000009EE5                 db  0Eh
.eh_frame:0000000000009EE6                 db  28h ; (
.eh_frame:0000000000009EE7                 db  42h ; B
.eh_frame:0000000000009EE8                 db  0Eh
.eh_frame:0000000000009EE9                 db  20h
.eh_frame:0000000000009EEA                 db  42h ; B
.eh_frame:0000000000009EEB                 db  0Eh
.eh_frame:0000000000009EEC                 db  18h
.eh_frame:0000000000009EED                 db  42h ; B
.eh_frame:0000000000009EEE                 db  0Eh
.eh_frame:0000000000009EEF                 db  10h
.eh_frame:0000000000009EF0                 db  42h ; B
.eh_frame:0000000000009EF1                 db  0Eh
.eh_frame:0000000000009EF2                 db    8
.eh_frame:0000000000009EF3                 db  48h ; H
.eh_frame:0000000000009EF4                 db  0Bh
.eh_frame:0000000000009EF5                 db    2
.eh_frame:0000000000009EF6                 db 0ABh
.eh_frame:0000000000009EF7                 db  0Eh
.eh_frame:0000000000009EF8                 db  88h
.eh_frame:0000000000009EF9                 db    2
.eh_frame:0000000000009EFA                 db  4Bh ; K
.eh_frame:0000000000009EFB                 db  0Eh
.eh_frame:0000000000009EFC                 db  90h
.eh_frame:0000000000009EFD                 db    2
.eh_frame:0000000000009EFE                 db  5Fh ; _
.eh_frame:0000000000009EFF                 db  0Eh
.eh_frame:0000000000009F00                 db  88h
.eh_frame:0000000000009F01                 db    2
.eh_frame:0000000000009F02                 db  41h ; A
.eh_frame:0000000000009F03                 db  0Eh
.eh_frame:0000000000009F04                 db  80h
.eh_frame:0000000000009F05                 db    2
.eh_frame:0000000000009F06                 db    0
.eh_frame:0000000000009F07                 db    0
.eh_frame:0000000000009F08                 db  44h ; D
.eh_frame:0000000000009F09                 db    0
.eh_frame:0000000000009F0A                 db    0
.eh_frame:0000000000009F0B                 db    0
.eh_frame:0000000000009F0C                 db  64h ; d
.eh_frame:0000000000009F0D                 db    2
.eh_frame:0000000000009F0E                 db    0
.eh_frame:0000000000009F0F                 db    0
.eh_frame:0000000000009F10                 db 0E0h
.eh_frame:0000000000009F11                 db  8Ah
.eh_frame:0000000000009F12                 db 0FFh
.eh_frame:0000000000009F13                 db 0FFh
.eh_frame:0000000000009F14                 db 0A9h
.eh_frame:0000000000009F15                 db    3
.eh_frame:0000000000009F16                 db    0
.eh_frame:0000000000009F17                 db    0
.eh_frame:0000000000009F18                 db    0
.eh_frame:0000000000009F19                 db  41h ; A
.eh_frame:0000000000009F1A                 db  0Eh
.eh_frame:0000000000009F1B                 db  10h
.eh_frame:0000000000009F1C                 db  86h
.eh_frame:0000000000009F1D                 db    2
.eh_frame:0000000000009F1E                 db  41h ; A
.eh_frame:0000000000009F1F                 db  0Eh
.eh_frame:0000000000009F20                 db  18h
.eh_frame:0000000000009F21                 db  83h
.eh_frame:0000000000009F22                 db    3
.eh_frame:0000000000009F23                 db  47h ; G
.eh_frame:0000000000009F24                 db  0Eh
.eh_frame:0000000000009F25                 db  20h
.eh_frame:0000000000009F26                 db    2
.eh_frame:0000000000009F27                 db 0B8h
.eh_frame:0000000000009F28                 db  0Ah
.eh_frame:0000000000009F29                 db  0Eh
.eh_frame:0000000000009F2A                 db  18h
.eh_frame:0000000000009F2B                 db  41h ; A
.eh_frame:0000000000009F2C                 db  0Eh
.eh_frame:0000000000009F2D                 db  10h
.eh_frame:0000000000009F2E                 db  41h ; A
.eh_frame:0000000000009F2F                 db  0Eh
.eh_frame:0000000000009F30                 db    8
.eh_frame:0000000000009F31                 db  45h ; E
.eh_frame:0000000000009F32                 db  0Bh
.eh_frame:0000000000009F33                 db  6Bh ; k
.eh_frame:0000000000009F34                 db  0Ah
.eh_frame:0000000000009F35                 db  0Eh
.eh_frame:0000000000009F36                 db  18h
.eh_frame:0000000000009F37                 db  43h ; C
.eh_frame:0000000000009F38                 db  0Eh
.eh_frame:0000000000009F39                 db  10h
.eh_frame:0000000000009F3A                 db  41h ; A
.eh_frame:0000000000009F3B                 db  0Eh
.eh_frame:0000000000009F3C                 db    8
.eh_frame:0000000000009F3D                 db  49h ; I
.eh_frame:0000000000009F3E                 db  0Bh
.eh_frame:0000000000009F3F                 db    3
.eh_frame:0000000000009F40                 db  6Ch ; l
.eh_frame:0000000000009F41                 db    2
.eh_frame:0000000000009F42                 db  0Ah
.eh_frame:0000000000009F43                 db  0Eh
.eh_frame:0000000000009F44                 db  18h
.eh_frame:0000000000009F45                 db  41h ; A
.eh_frame:0000000000009F46                 db  0Eh
.eh_frame:0000000000009F47                 db  10h
.eh_frame:0000000000009F48                 db  41h ; A
.eh_frame:0000000000009F49                 db  0Eh
.eh_frame:0000000000009F4A                 db    8
.eh_frame:0000000000009F4B                 db  41h ; A
.eh_frame:0000000000009F4C                 db  0Bh
.eh_frame:0000000000009F4D                 db    0
.eh_frame:0000000000009F4E                 db    0
.eh_frame:0000000000009F4F                 db    0
.eh_frame:0000000000009F50                 db  20h
.eh_frame:0000000000009F51                 db    0
.eh_frame:0000000000009F52                 db    0
.eh_frame:0000000000009F53                 db    0
.eh_frame:0000000000009F54                 db 0ACh
.eh_frame:0000000000009F55                 db    2
.eh_frame:0000000000009F56                 db    0
.eh_frame:0000000000009F57                 db    0
.eh_frame:0000000000009F58                 db  48h ; H
.eh_frame:0000000000009F59                 db  8Eh
.eh_frame:0000000000009F5A                 db 0FFh
.eh_frame:0000000000009F5B                 db 0FFh
.eh_frame:0000000000009F5C                 db  89h
.eh_frame:0000000000009F5D                 db    0
.eh_frame:0000000000009F5E                 db    0
.eh_frame:0000000000009F5F                 db    0
.eh_frame:0000000000009F60                 db    0
.eh_frame:0000000000009F61                 db  41h ; A
.eh_frame:0000000000009F62                 db  0Eh
.eh_frame:0000000000009F63                 db  10h
.eh_frame:0000000000009F64                 db  83h
.eh_frame:0000000000009F65                 db    2
.eh_frame:0000000000009F66                 db  4Fh ; O
.eh_frame:0000000000009F67                 db  0Eh
.eh_frame:0000000000009F68                 db 0B0h
.eh_frame:0000000000009F69                 db    1
.eh_frame:0000000000009F6A                 db    2
.eh_frame:0000000000009F6B                 db  64h ; d
.eh_frame:0000000000009F6C                 db  0Ah
.eh_frame:0000000000009F6D                 db  0Eh
.eh_frame:0000000000009F6E                 db  10h
.eh_frame:0000000000009F6F                 db  41h ; A
.eh_frame:0000000000009F70                 db  0Eh
.eh_frame:0000000000009F71                 db    8
.eh_frame:0000000000009F72                 db  4Bh ; K
.eh_frame:0000000000009F73                 db  0Bh
.eh_frame:0000000000009F74                 db  30h ; 0
.eh_frame:0000000000009F75                 db    0
.eh_frame:0000000000009F76                 db    0
.eh_frame:0000000000009F77                 db    0
.eh_frame:0000000000009F78                 db 0D0h
.eh_frame:0000000000009F79                 db    2
.eh_frame:0000000000009F7A                 db    0
.eh_frame:0000000000009F7B                 db    0
.eh_frame:0000000000009F7C                 db 0B4h
.eh_frame:0000000000009F7D                 db  8Eh
.eh_frame:0000000000009F7E                 db 0FFh
.eh_frame:0000000000009F7F                 db 0FFh
.eh_frame:0000000000009F80                 db  6Dh ; m
.eh_frame:0000000000009F81                 db    1
.eh_frame:0000000000009F82                 db    0
.eh_frame:0000000000009F83                 db    0
.eh_frame:0000000000009F84                 db    0
.eh_frame:0000000000009F85                 db  5Bh ; [
.eh_frame:0000000000009F86                 db  0Eh
.eh_frame:0000000000009F87                 db  10h
.eh_frame:0000000000009F88                 db  8Ch
.eh_frame:0000000000009F89                 db    2
.eh_frame:0000000000009F8A                 db  41h ; A
.eh_frame:0000000000009F8B                 db  0Eh
.eh_frame:0000000000009F8C                 db  18h
.eh_frame:0000000000009F8D                 db  86h
.eh_frame:0000000000009F8E                 db    3
.eh_frame:0000000000009F8F                 db  41h ; A
.eh_frame:0000000000009F90                 db  0Eh
.eh_frame:0000000000009F91                 db  20h
.eh_frame:0000000000009F92                 db  83h
.eh_frame:0000000000009F93                 db    4
.eh_frame:0000000000009F94                 db    3
.eh_frame:0000000000009F95                 db    8
.eh_frame:0000000000009F96                 db    1
.eh_frame:0000000000009F97                 db  0Ah
.eh_frame:0000000000009F98                 db  0Eh
.eh_frame:0000000000009F99                 db  18h
.eh_frame:0000000000009F9A                 db  41h ; A
.eh_frame:0000000000009F9B                 db  0Eh
.eh_frame:0000000000009F9C                 db  10h
.eh_frame:0000000000009F9D                 db  42h ; B
.eh_frame:0000000000009F9E                 db  0Eh
.eh_frame:0000000000009F9F                 db    8
.eh_frame:0000000000009FA0                 db  48h ; H
.eh_frame:0000000000009FA1                 db  0Bh
.eh_frame:0000000000009FA2                 db  70h ; p
.eh_frame:0000000000009FA3                 db  0Eh
.eh_frame:0000000000009FA4                 db    8
.eh_frame:0000000000009FA5                 db 0C3h
.eh_frame:0000000000009FA6                 db 0C6h
.eh_frame:0000000000009FA7                 db 0CCh
.eh_frame:0000000000009FA8                 db  1Ch
.eh_frame:0000000000009FA9                 db    0
.eh_frame:0000000000009FAA                 db    0
.eh_frame:0000000000009FAB                 db    0
.eh_frame:0000000000009FAC                 db    4
.eh_frame:0000000000009FAD                 db    3
.eh_frame:0000000000009FAE                 db    0
.eh_frame:0000000000009FAF                 db    0
.eh_frame:0000000000009FB0                 db 0F0h
.eh_frame:0000000000009FB1                 db  8Fh
.eh_frame:0000000000009FB2                 db 0FFh
.eh_frame:0000000000009FB3                 db 0FFh
.eh_frame:0000000000009FB4                 db  9Fh
.eh_frame:0000000000009FB5                 db    0
.eh_frame:0000000000009FB6                 db    0
.eh_frame:0000000000009FB7                 db    0
.eh_frame:0000000000009FB8                 db    0
.eh_frame:0000000000009FB9                 db  44h ; D
.eh_frame:0000000000009FBA                 db  0Eh
.eh_frame:0000000000009FBB                 db  10h
.eh_frame:0000000000009FBC                 db  83h
.eh_frame:0000000000009FBD                 db    2
.eh_frame:0000000000009FBE                 db    2
.eh_frame:0000000000009FBF                 db  78h ; x
.eh_frame:0000000000009FC0                 db  0Ah
.eh_frame:0000000000009FC1                 db  0Eh
.eh_frame:0000000000009FC2                 db    8
.eh_frame:0000000000009FC3                 db  41h ; A
.eh_frame:0000000000009FC4                 db  0Bh
.eh_frame:0000000000009FC5                 db    0
.eh_frame:0000000000009FC6                 db    0
.eh_frame:0000000000009FC7                 db    0
.eh_frame:0000000000009FC8                 db  40h ; @
.eh_frame:0000000000009FC9                 db    0
.eh_frame:0000000000009FCA                 db    0
.eh_frame:0000000000009FCB                 db    0
.eh_frame:0000000000009FCC                 db  24h ; $
.eh_frame:0000000000009FCD                 db    3
.eh_frame:0000000000009FCE                 db    0
.eh_frame:0000000000009FCF                 db    0
.eh_frame:0000000000009FD0                 db  70h ; p
.eh_frame:0000000000009FD1                 db  90h
.eh_frame:0000000000009FD2                 db 0FFh
.eh_frame:0000000000009FD3                 db 0FFh
.eh_frame:0000000000009FD4                 db 0E7h
.eh_frame:0000000000009FD5                 db    0
.eh_frame:0000000000009FD6                 db    0
.eh_frame:0000000000009FD7                 db    0
.eh_frame:0000000000009FD8                 db    0
.eh_frame:0000000000009FD9                 db  41h ; A
.eh_frame:0000000000009FDA                 db  0Eh
.eh_frame:0000000000009FDB                 db  10h
.eh_frame:0000000000009FDC                 db  86h
.eh_frame:0000000000009FDD                 db    2
.eh_frame:0000000000009FDE                 db  41h ; A
.eh_frame:0000000000009FDF                 db  0Eh
.eh_frame:0000000000009FE0                 db  18h
.eh_frame:0000000000009FE1                 db  83h
.eh_frame:0000000000009FE2                 db    3
.eh_frame:0000000000009FE3                 db  49h ; I
.eh_frame:0000000000009FE4                 db  0Eh
.eh_frame:0000000000009FE5                 db  20h
.eh_frame:0000000000009FE6                 db  6Eh ; n
.eh_frame:0000000000009FE7                 db  0Ah
.eh_frame:0000000000009FE8                 db  0Eh
.eh_frame:0000000000009FE9                 db  18h
.eh_frame:0000000000009FEA                 db  41h ; A
.eh_frame:0000000000009FEB                 db  0Eh
.eh_frame:0000000000009FEC                 db  10h
.eh_frame:0000000000009FED                 db  41h ; A
.eh_frame:0000000000009FEE                 db  0Eh
.eh_frame:0000000000009FEF                 db    8
.eh_frame:0000000000009FF0                 db  45h ; E
.eh_frame:0000000000009FF1                 db  0Bh
.eh_frame:0000000000009FF2                 db    2
.eh_frame:0000000000009FF3                 db  4Ah ; J
.eh_frame:0000000000009FF4                 db  0Ah
.eh_frame:0000000000009FF5                 db  0Eh
.eh_frame:0000000000009FF6                 db  18h
.eh_frame:0000000000009FF7                 db  41h ; A
.eh_frame:0000000000009FF8                 db  0Eh
.eh_frame:0000000000009FF9                 db  10h
.eh_frame:0000000000009FFA                 db  41h ; A
.eh_frame:0000000000009FFB                 db  0Eh
.eh_frame:0000000000009FFC                 db    8
.eh_frame:0000000000009FFD                 db  44h ; D
.eh_frame:0000000000009FFE                 db  0Bh
.eh_frame:0000000000009FFF                 db    2
.eh_frame:000000000000A000                 db  54h ; T
.eh_frame:000000000000A001                 db  0Eh
.eh_frame:000000000000A002                 db  18h
.eh_frame:000000000000A003                 db  41h ; A
.eh_frame:000000000000A004                 db  0Eh
.eh_frame:000000000000A005                 db  10h
.eh_frame:000000000000A006                 db  41h ; A
.eh_frame:000000000000A007                 db  0Eh
.eh_frame:000000000000A008                 db    8
.eh_frame:000000000000A009                 db    0
.eh_frame:000000000000A00A                 db    0
.eh_frame:000000000000A00B                 db    0
.eh_frame:000000000000A00C                 db  74h ; t
.eh_frame:000000000000A00D                 db    0
.eh_frame:000000000000A00E                 db    0
.eh_frame:000000000000A00F                 db    0
.eh_frame:000000000000A010                 db  68h ; h
.eh_frame:000000000000A011                 db    3
.eh_frame:000000000000A012                 db    0
.eh_frame:000000000000A013                 db    0
.eh_frame:000000000000A014                 db  1Ch
.eh_frame:000000000000A015                 db  91h
.eh_frame:000000000000A016                 db 0FFh
.eh_frame:000000000000A017                 db 0FFh
.eh_frame:000000000000A018                 db  34h ; 4
.eh_frame:000000000000A019                 db  12h
.eh_frame:000000000000A01A                 db    0
.eh_frame:000000000000A01B                 db    0
.eh_frame:000000000000A01C                 db    0
.eh_frame:000000000000A01D                 db  42h ; B
.eh_frame:000000000000A01E                 db  0Eh
.eh_frame:000000000000A01F                 db  10h
.eh_frame:000000000000A020                 db  8Fh
.eh_frame:000000000000A021                 db    2
.eh_frame:000000000000A022                 db  42h ; B
.eh_frame:000000000000A023                 db  0Eh
.eh_frame:000000000000A024                 db  18h
.eh_frame:000000000000A025                 db  8Eh
.eh_frame:000000000000A026                 db    3
.eh_frame:000000000000A027                 db  45h ; E
.eh_frame:000000000000A028                 db  0Eh
.eh_frame:000000000000A029                 db  20h
.eh_frame:000000000000A02A                 db  8Dh
.eh_frame:000000000000A02B                 db    4
.eh_frame:000000000000A02C                 db  42h ; B
.eh_frame:000000000000A02D                 db  0Eh
.eh_frame:000000000000A02E                 db  28h ; (
.eh_frame:000000000000A02F                 db  8Ch
.eh_frame:000000000000A030                 db    5
.eh_frame:000000000000A031                 db  44h ; D
.eh_frame:000000000000A032                 db  0Eh
.eh_frame:000000000000A033                 db  30h ; 0
.eh_frame:000000000000A034                 db  86h
.eh_frame:000000000000A035                 db    6
.eh_frame:000000000000A036                 db  41h ; A
.eh_frame:000000000000A037                 db  0Eh
.eh_frame:000000000000A038                 db  38h ; 8
.eh_frame:000000000000A039                 db  83h
.eh_frame:000000000000A03A                 db    7
.eh_frame:000000000000A03B                 db  53h ; S
.eh_frame:000000000000A03C                 db  0Eh
.eh_frame:000000000000A03D                 db 0F0h
.eh_frame:000000000000A03E                 db    1
.eh_frame:000000000000A03F                 db    3
.eh_frame:000000000000A040                 db  81h
.eh_frame:000000000000A041                 db  0Bh
.eh_frame:000000000000A042                 db  0Eh
.eh_frame:000000000000A043                 db 0F8h
.eh_frame:000000000000A044                 db    1
.eh_frame:000000000000A045                 db  4Ah ; J
.eh_frame:000000000000A046                 db  0Eh
.eh_frame:000000000000A047                 db  80h
.eh_frame:000000000000A048                 db    2
.eh_frame:000000000000A049                 db  44h ; D
.eh_frame:000000000000A04A                 db  0Eh
.eh_frame:000000000000A04B                 db  88h
.eh_frame:000000000000A04C                 db    2
.eh_frame:000000000000A04D                 db  45h ; E
.eh_frame:000000000000A04E                 db  0Eh
.eh_frame:000000000000A04F                 db  90h
.eh_frame:000000000000A050                 db    2
.eh_frame:000000000000A051                 db  5Fh ; _
.eh_frame:000000000000A052                 db  0Eh
.eh_frame:000000000000A053                 db 0F0h
.eh_frame:000000000000A054                 db    1
.eh_frame:000000000000A055                 db  64h ; d
.eh_frame:000000000000A056                 db  0Ah
.eh_frame:000000000000A057                 db  0Eh
.eh_frame:000000000000A058                 db  38h ; 8
.eh_frame:000000000000A059                 db  41h ; A
.eh_frame:000000000000A05A                 db  0Eh
.eh_frame:000000000000A05B                 db  30h ; 0
.eh_frame:000000000000A05C                 db  41h ; A
.eh_frame:000000000000A05D                 db  0Eh
.eh_frame:000000000000A05E                 db  28h ; (
.eh_frame:000000000000A05F                 db  42h ; B
.eh_frame:000000000000A060                 db  0Eh
.eh_frame:000000000000A061                 db  20h
.eh_frame:000000000000A062                 db  42h ; B
.eh_frame:000000000000A063                 db  0Eh
.eh_frame:000000000000A064                 db  18h
.eh_frame:000000000000A065                 db  42h ; B
.eh_frame:000000000000A066                 db  0Eh
.eh_frame:000000000000A067                 db  10h
.eh_frame:000000000000A068                 db  42h ; B
.eh_frame:000000000000A069                 db  0Eh
.eh_frame:000000000000A06A                 db    8
.eh_frame:000000000000A06B                 db  44h ; D
.eh_frame:000000000000A06C                 db  0Bh
.eh_frame:000000000000A06D                 db    3
.eh_frame:000000000000A06E                 db  99h
.eh_frame:000000000000A06F                 db    5
.eh_frame:000000000000A070                 db  0Eh
.eh_frame:000000000000A071                 db 0F8h
.eh_frame:000000000000A072                 db    1
.eh_frame:000000000000A073                 db  4Dh ; M
.eh_frame:000000000000A074                 db  0Eh
.eh_frame:000000000000A075                 db  80h
.eh_frame:000000000000A076                 db    2
.eh_frame:000000000000A077                 db  44h ; D
.eh_frame:000000000000A078                 db  0Eh
.eh_frame:000000000000A079                 db  88h
.eh_frame:000000000000A07A                 db    2
.eh_frame:000000000000A07B                 db  47h ; G
.eh_frame:000000000000A07C                 db  0Eh
.eh_frame:000000000000A07D                 db  90h
.eh_frame:000000000000A07E                 db    2
.eh_frame:000000000000A07F                 db  5Bh ; [
.eh_frame:000000000000A080                 db  0Eh
.eh_frame:000000000000A081                 db 0F0h
.eh_frame:000000000000A082                 db    1
.eh_frame:000000000000A083                 db    0
.eh_frame:000000000000A084                 db  68h ; h
.eh_frame:000000000000A085                 db    0
.eh_frame:000000000000A086                 db    0
.eh_frame:000000000000A087                 db    0
.eh_frame:000000000000A088                 db 0E0h
.eh_frame:000000000000A089                 db    3
.eh_frame:000000000000A08A                 db    0
.eh_frame:000000000000A08B                 db    0
.eh_frame:000000000000A08C                 db 0E4h
.eh_frame:000000000000A08D                 db 0A2h
.eh_frame:000000000000A08E                 db 0FFh
.eh_frame:000000000000A08F                 db 0FFh
.eh_frame:000000000000A090                 db 0ABh
.eh_frame:000000000000A091                 db    1
.eh_frame:000000000000A092                 db    0
.eh_frame:000000000000A093                 db    0
.eh_frame:000000000000A094                 db    0
.eh_frame:000000000000A095                 db  42h ; B
.eh_frame:000000000000A096                 db  0Eh
.eh_frame:000000000000A097                 db  10h
.eh_frame:000000000000A098                 db  8Fh
.eh_frame:000000000000A099                 db    2
.eh_frame:000000000000A09A                 db  42h ; B
.eh_frame:000000000000A09B                 db  0Eh
.eh_frame:000000000000A09C                 db  18h
.eh_frame:000000000000A09D                 db  8Eh
.eh_frame:000000000000A09E                 db    3
.eh_frame:000000000000A09F                 db  45h ; E
.eh_frame:000000000000A0A0                 db  0Eh
.eh_frame:000000000000A0A1                 db  20h
.eh_frame:000000000000A0A2                 db  8Dh
.eh_frame:000000000000A0A3                 db    4
.eh_frame:000000000000A0A4                 db  42h ; B
.eh_frame:000000000000A0A5                 db  0Eh
.eh_frame:000000000000A0A6                 db  28h ; (
.eh_frame:000000000000A0A7                 db  8Ch
.eh_frame:000000000000A0A8                 db    5
.eh_frame:000000000000A0A9                 db  44h ; D
.eh_frame:000000000000A0AA                 db  0Eh
.eh_frame:000000000000A0AB                 db  30h ; 0
.eh_frame:000000000000A0AC                 db  86h
.eh_frame:000000000000A0AD                 db    6
.eh_frame:000000000000A0AE                 db  41h ; A
.eh_frame:000000000000A0AF                 db  0Eh
.eh_frame:000000000000A0B0                 db  38h ; 8
.eh_frame:000000000000A0B1                 db  83h
.eh_frame:000000000000A0B2                 db    7
.eh_frame:000000000000A0B3                 db  47h ; G
.eh_frame:000000000000A0B4                 db  0Eh
.eh_frame:000000000000A0B5                 db  60h ; `
.eh_frame:000000000000A0B6                 db    2
.eh_frame:000000000000A0B7                 db  99h
.eh_frame:000000000000A0B8                 db  0Eh
.eh_frame:000000000000A0B9                 db  68h ; h
.eh_frame:000000000000A0BA                 db  5Fh ; _
.eh_frame:000000000000A0BB                 db  0Eh
.eh_frame:000000000000A0BC                 db  70h ; p
.eh_frame:000000000000A0BD                 db  46h ; F
.eh_frame:000000000000A0BE                 db  0Eh
.eh_frame:000000000000A0BF                 db  78h ; x
.eh_frame:000000000000A0C0                 db  42h ; B
.eh_frame:000000000000A0C1                 db  0Eh
.eh_frame:000000000000A0C2                 db  80h
.eh_frame:000000000000A0C3                 db    1
.eh_frame:000000000000A0C4                 db  59h ; Y
.eh_frame:000000000000A0C5                 db  0Eh
.eh_frame:000000000000A0C6                 db  60h ; `
.eh_frame:000000000000A0C7                 db    2
.eh_frame:000000000000A0C8                 db  40h ; @
.eh_frame:000000000000A0C9                 db  0Eh
.eh_frame:000000000000A0CA                 db  68h ; h
.eh_frame:000000000000A0CB                 db  4Bh ; K
.eh_frame:000000000000A0CC                 db  0Eh
.eh_frame:000000000000A0CD                 db  70h ; p
.eh_frame:000000000000A0CE                 db  43h ; C
.eh_frame:000000000000A0CF                 db  0Eh
.eh_frame:000000000000A0D0                 db  78h ; x
.eh_frame:000000000000A0D1                 db  45h ; E
.eh_frame:000000000000A0D2                 db  0Eh
.eh_frame:000000000000A0D3                 db  80h
.eh_frame:000000000000A0D4                 db    1
.eh_frame:000000000000A0D5                 db  5Eh ; ^
.eh_frame:000000000000A0D6                 db  0Eh
.eh_frame:000000000000A0D7                 db  60h ; `
.eh_frame:000000000000A0D8                 db  4Ch ; L
.eh_frame:000000000000A0D9                 db  0Ah
.eh_frame:000000000000A0DA                 db  0Eh
.eh_frame:000000000000A0DB                 db  38h ; 8
.eh_frame:000000000000A0DC                 db  44h ; D
.eh_frame:000000000000A0DD                 db  0Eh
.eh_frame:000000000000A0DE                 db  30h ; 0
.eh_frame:000000000000A0DF                 db  41h ; A
.eh_frame:000000000000A0E0                 db  0Eh
.eh_frame:000000000000A0E1                 db  28h ; (
.eh_frame:000000000000A0E2                 db  42h ; B
.eh_frame:000000000000A0E3                 db  0Eh
.eh_frame:000000000000A0E4                 db  20h
.eh_frame:000000000000A0E5                 db  42h ; B
.eh_frame:000000000000A0E6                 db  0Eh
.eh_frame:000000000000A0E7                 db  18h
.eh_frame:000000000000A0E8                 db  42h ; B
.eh_frame:000000000000A0E9                 db  0Eh
.eh_frame:000000000000A0EA                 db  10h
.eh_frame:000000000000A0EB                 db  42h ; B
.eh_frame:000000000000A0EC                 db  0Eh
.eh_frame:000000000000A0ED                 db    8
.eh_frame:000000000000A0EE                 db  46h ; F
.eh_frame:000000000000A0EF                 db  0Bh
.eh_frame:000000000000A0F0                 db  28h ; (
.eh_frame:000000000000A0F1                 db    0
.eh_frame:000000000000A0F2                 db    0
.eh_frame:000000000000A0F3                 db    0
.eh_frame:000000000000A0F4                 db  4Ch ; L
.eh_frame:000000000000A0F5                 db    4
.eh_frame:000000000000A0F6                 db    0
.eh_frame:000000000000A0F7                 db    0
.eh_frame:000000000000A0F8                 db  28h ; (
.eh_frame:000000000000A0F9                 db 0A4h
.eh_frame:000000000000A0FA                 db 0FFh
.eh_frame:000000000000A0FB                 db 0FFh
.eh_frame:000000000000A0FC                 db  36h ; 6
.eh_frame:000000000000A0FD                 db    0
.eh_frame:000000000000A0FE                 db    0
.eh_frame:000000000000A0FF                 db    0
.eh_frame:000000000000A100                 db    0
.eh_frame:000000000000A101                 db  42h ; B
.eh_frame:000000000000A102                 db  0Eh
.eh_frame:000000000000A103                 db  10h
.eh_frame:000000000000A104                 db  8Ch
.eh_frame:000000000000A105                 db    2
.eh_frame:000000000000A106                 db  41h ; A
.eh_frame:000000000000A107                 db  0Eh
.eh_frame:000000000000A108                 db  18h
.eh_frame:000000000000A109                 db  86h
.eh_frame:000000000000A10A                 db    3
.eh_frame:000000000000A10B                 db  41h ; A
.eh_frame:000000000000A10C                 db  0Eh
.eh_frame:000000000000A10D                 db  20h
.eh_frame:000000000000A10E                 db  83h
.eh_frame:000000000000A10F                 db    4
.eh_frame:000000000000A110                 db  6Eh ; n
.eh_frame:000000000000A111                 db  0Eh
.eh_frame:000000000000A112                 db  18h
.eh_frame:000000000000A113                 db  41h ; A
.eh_frame:000000000000A114                 db  0Eh
.eh_frame:000000000000A115                 db  10h
.eh_frame:000000000000A116                 db  42h ; B
.eh_frame:000000000000A117                 db  0Eh
.eh_frame:000000000000A118                 db    8
.eh_frame:000000000000A119                 db    0
.eh_frame:000000000000A11A                 db    0
.eh_frame:000000000000A11B                 db    0
.eh_frame:000000000000A11C                 db  10h
.eh_frame:000000000000A11D                 db    0
.eh_frame:000000000000A11E                 db    0
.eh_frame:000000000000A11F                 db    0
.eh_frame:000000000000A120                 db  78h ; x
.eh_frame:000000000000A121                 db    4
.eh_frame:000000000000A122                 db    0
.eh_frame:000000000000A123                 db    0
.eh_frame:000000000000A124                 db  3Ch ; <
.eh_frame:000000000000A125                 db 0A4h
.eh_frame:000000000000A126                 db 0FFh
.eh_frame:000000000000A127                 db 0FFh
.eh_frame:000000000000A128                 db  11h
.eh_frame:000000000000A129                 db    0
.eh_frame:000000000000A12A                 db    0
.eh_frame:000000000000A12B                 db    0
.eh_frame:000000000000A12C                 db    0
.eh_frame:000000000000A12D                 db    0
.eh_frame:000000000000A12E                 db    0
.eh_frame:000000000000A12F                 db    0
.eh_frame:000000000000A130                 db  10h
.eh_frame:000000000000A131                 db    0
.eh_frame:000000000000A132                 db    0
.eh_frame:000000000000A133                 db    0
.eh_frame:000000000000A134                 db  8Ch
.eh_frame:000000000000A135                 db    4
.eh_frame:000000000000A136                 db    0
.eh_frame:000000000000A137                 db    0
.eh_frame:000000000000A138                 db  48h ; H
.eh_frame:000000000000A139                 db 0A4h
.eh_frame:000000000000A13A                 db 0FFh
.eh_frame:000000000000A13B                 db 0FFh
.eh_frame:000000000000A13C                 db  11h
.eh_frame:000000000000A13D                 db    0
.eh_frame:000000000000A13E                 db    0
.eh_frame:000000000000A13F                 db    0
.eh_frame:000000000000A140                 db    0
.eh_frame:000000000000A141                 db    0
.eh_frame:000000000000A142                 db    0
.eh_frame:000000000000A143                 db    0
.eh_frame:000000000000A144                 db  10h
.eh_frame:000000000000A145                 db    0
.eh_frame:000000000000A146                 db    0
.eh_frame:000000000000A147                 db    0
.eh_frame:000000000000A148                 db 0A0h
.eh_frame:000000000000A149                 db    4
.eh_frame:000000000000A14A                 db    0
.eh_frame:000000000000A14B                 db    0
.eh_frame:000000000000A14C                 db  54h ; T
.eh_frame:000000000000A14D                 db 0A4h
.eh_frame:000000000000A14E                 db 0FFh
.eh_frame:000000000000A14F                 db 0FFh
.eh_frame:000000000000A150                 db  35h ; 5
.eh_frame:000000000000A151                 db    0
.eh_frame:000000000000A152                 db    0
.eh_frame:000000000000A153                 db    0
.eh_frame:000000000000A154                 db    0
.eh_frame:000000000000A155                 db    0
.eh_frame:000000000000A156                 db    0
.eh_frame:000000000000A157                 db    0
.eh_frame:000000000000A158                 db  10h
.eh_frame:000000000000A159                 db    0
.eh_frame:000000000000A15A                 db    0
.eh_frame:000000000000A15B                 db    0
.eh_frame:000000000000A15C                 db 0B4h
.eh_frame:000000000000A15D                 db    4
.eh_frame:000000000000A15E                 db    0
.eh_frame:000000000000A15F                 db    0
.eh_frame:000000000000A160                 db  80h
.eh_frame:000000000000A161                 db 0A4h
.eh_frame:000000000000A162                 db 0FFh
.eh_frame:000000000000A163                 db 0FFh
.eh_frame:000000000000A164                 db  15h
.eh_frame:000000000000A165                 db    0
.eh_frame:000000000000A166                 db    0
.eh_frame:000000000000A167                 db    0
.eh_frame:000000000000A168                 db    0
.eh_frame:000000000000A169                 db    0
.eh_frame:000000000000A16A                 db    0
.eh_frame:000000000000A16B                 db    0
.eh_frame:000000000000A16C                 db  10h
.eh_frame:000000000000A16D                 db    0
.eh_frame:000000000000A16E                 db    0
.eh_frame:000000000000A16F                 db    0
.eh_frame:000000000000A170                 db 0C8h
.eh_frame:000000000000A171                 db    4
.eh_frame:000000000000A172                 db    0
.eh_frame:000000000000A173                 db    0
.eh_frame:000000000000A174                 db  8Ch
.eh_frame:000000000000A175                 db 0A4h
.eh_frame:000000000000A176                 db 0FFh
.eh_frame:000000000000A177                 db 0FFh
.eh_frame:000000000000A178                 db  30h ; 0
.eh_frame:000000000000A179                 db    0
.eh_frame:000000000000A17A                 db    0
.eh_frame:000000000000A17B                 db    0
.eh_frame:000000000000A17C                 db    0
.eh_frame:000000000000A17D                 db  6Bh ; k
.eh_frame:000000000000A17E                 db  0Eh
.eh_frame:000000000000A17F                 db  10h
.eh_frame:000000000000A180                 db  50h ; P
.eh_frame:000000000000A181                 db    0
.eh_frame:000000000000A182                 db    0
.eh_frame:000000000000A183                 db    0
.eh_frame:000000000000A184                 db 0DCh
.eh_frame:000000000000A185                 db    4
.eh_frame:000000000000A186                 db    0
.eh_frame:000000000000A187                 db    0
.eh_frame:000000000000A188                 db 0A8h
.eh_frame:000000000000A189                 db 0A4h
.eh_frame:000000000000A18A                 db 0FFh
.eh_frame:000000000000A18B                 db 0FFh
.eh_frame:000000000000A18C                 db  74h ; t
.eh_frame:000000000000A18D                 db    0
.eh_frame:000000000000A18E                 db    0
.eh_frame:000000000000A18F                 db    0
.eh_frame:000000000000A190                 db    0
.eh_frame:000000000000A191                 db  42h ; B
.eh_frame:000000000000A192                 db  0Eh
.eh_frame:000000000000A193                 db  10h
.eh_frame:000000000000A194                 db  8Fh
.eh_frame:000000000000A195                 db    2
.eh_frame:000000000000A196                 db  42h ; B
.eh_frame:000000000000A197                 db  0Eh
.eh_frame:000000000000A198                 db  18h
.eh_frame:000000000000A199                 db  8Eh
.eh_frame:000000000000A19A                 db    3
.eh_frame:000000000000A19B                 db  49h ; I
.eh_frame:000000000000A19C                 db  0Eh
.eh_frame:000000000000A19D                 db  20h
.eh_frame:000000000000A19E                 db  8Dh
.eh_frame:000000000000A19F                 db    4
.eh_frame:000000000000A1A0                 db  42h ; B
.eh_frame:000000000000A1A1                 db  0Eh
.eh_frame:000000000000A1A2                 db  28h ; (
.eh_frame:000000000000A1A3                 db  8Ch
.eh_frame:000000000000A1A4                 db    5
.eh_frame:000000000000A1A5                 db  44h ; D
.eh_frame:000000000000A1A6                 db  0Eh
.eh_frame:000000000000A1A7                 db  30h ; 0
.eh_frame:000000000000A1A8                 db  86h
.eh_frame:000000000000A1A9                 db    6
.eh_frame:000000000000A1AA                 db  41h ; A
.eh_frame:000000000000A1AB                 db  0Eh
.eh_frame:000000000000A1AC                 db  38h ; 8
.eh_frame:000000000000A1AD                 db  83h
.eh_frame:000000000000A1AE                 db    7
.eh_frame:000000000000A1AF                 db  4Dh ; M
.eh_frame:000000000000A1B0                 db  0Eh
.eh_frame:000000000000A1B1                 db  50h ; P
.eh_frame:000000000000A1B2                 db  5Fh ; _
.eh_frame:000000000000A1B3                 db  0Eh
.eh_frame:000000000000A1B4                 db  58h ; X
.eh_frame:000000000000A1B5                 db  47h ; G
.eh_frame:000000000000A1B6                 db  0Eh
.eh_frame:000000000000A1B7                 db  60h ; `
.eh_frame:000000000000A1B8                 db  46h ; F
.eh_frame:000000000000A1B9                 db  0Eh
.eh_frame:000000000000A1BA                 db  68h ; h
.eh_frame:000000000000A1BB                 db  44h ; D
.eh_frame:000000000000A1BC                 db  0Eh
.eh_frame:000000000000A1BD                 db  70h ; p
.eh_frame:000000000000A1BE                 db  58h ; X
.eh_frame:000000000000A1BF                 db  0Eh
.eh_frame:000000000000A1C0                 db  38h ; 8
.eh_frame:000000000000A1C1                 db  41h ; A
.eh_frame:000000000000A1C2                 db  0Eh
.eh_frame:000000000000A1C3                 db  30h ; 0
.eh_frame:000000000000A1C4                 db  41h ; A
.eh_frame:000000000000A1C5                 db  0Eh
.eh_frame:000000000000A1C6                 db  28h ; (
.eh_frame:000000000000A1C7                 db  42h ; B
.eh_frame:000000000000A1C8                 db  0Eh
.eh_frame:000000000000A1C9                 db  20h
.eh_frame:000000000000A1CA                 db  42h ; B
.eh_frame:000000000000A1CB                 db  0Eh
.eh_frame:000000000000A1CC                 db  18h
.eh_frame:000000000000A1CD                 db  42h ; B
.eh_frame:000000000000A1CE                 db  0Eh
.eh_frame:000000000000A1CF                 db  10h
.eh_frame:000000000000A1D0                 db  42h ; B
.eh_frame:000000000000A1D1                 db  0Eh
.eh_frame:000000000000A1D2                 db    8
.eh_frame:000000000000A1D3                 db    0
.eh_frame:000000000000A1D4                 db  68h ; h
.eh_frame:000000000000A1D5                 db    0
.eh_frame:000000000000A1D6                 db    0
.eh_frame:000000000000A1D7                 db    0
.eh_frame:000000000000A1D8                 db  30h ; 0
.eh_frame:000000000000A1D9                 db    5
.eh_frame:000000000000A1DA                 db    0
.eh_frame:000000000000A1DB                 db    0
.eh_frame:000000000000A1DC                 db 0D4h
.eh_frame:000000000000A1DD                 db 0A4h
.eh_frame:000000000000A1DE                 db 0FFh
.eh_frame:000000000000A1DF                 db 0FFh
.eh_frame:000000000000A1E0                 db 0E3h
.eh_frame:000000000000A1E1                 db    0
.eh_frame:000000000000A1E2                 db    0
.eh_frame:000000000000A1E3                 db    0
.eh_frame:000000000000A1E4                 db    0
.eh_frame:000000000000A1E5                 db  42h ; B
.eh_frame:000000000000A1E6                 db  0Eh
.eh_frame:000000000000A1E7                 db  10h
.eh_frame:000000000000A1E8                 db  8Fh
.eh_frame:000000000000A1E9                 db    2
.eh_frame:000000000000A1EA                 db  42h ; B
.eh_frame:000000000000A1EB                 db  0Eh
.eh_frame:000000000000A1EC                 db  18h
.eh_frame:000000000000A1ED                 db  8Eh
.eh_frame:000000000000A1EE                 db    3
.eh_frame:000000000000A1EF                 db  49h ; I
.eh_frame:000000000000A1F0                 db  0Eh
.eh_frame:000000000000A1F1                 db  20h
.eh_frame:000000000000A1F2                 db  8Dh
.eh_frame:000000000000A1F3                 db    4
.eh_frame:000000000000A1F4                 db  42h ; B
.eh_frame:000000000000A1F5                 db  0Eh
.eh_frame:000000000000A1F6                 db  28h ; (
.eh_frame:000000000000A1F7                 db  8Ch
.eh_frame:000000000000A1F8                 db    5
.eh_frame:000000000000A1F9                 db  44h ; D
.eh_frame:000000000000A1FA                 db  0Eh
.eh_frame:000000000000A1FB                 db  30h ; 0
.eh_frame:000000000000A1FC                 db  86h
.eh_frame:000000000000A1FD                 db    6
.eh_frame:000000000000A1FE                 db  41h ; A
.eh_frame:000000000000A1FF                 db  0Eh
.eh_frame:000000000000A200                 db  38h ; 8
.eh_frame:000000000000A201                 db  83h
.eh_frame:000000000000A202                 db    7
.eh_frame:000000000000A203                 db  4Dh ; M
.eh_frame:000000000000A204                 db  0Eh
.eh_frame:000000000000A205                 db  70h ; p
.eh_frame:000000000000A206                 db  65h ; e
.eh_frame:000000000000A207                 db  0Eh
.eh_frame:000000000000A208                 db  78h ; x
.eh_frame:000000000000A209                 db  4Dh ; M
.eh_frame:000000000000A20A                 db  0Eh
.eh_frame:000000000000A20B                 db  80h
.eh_frame:000000000000A20C                 db    1
.eh_frame:000000000000A20D                 db  46h ; F
.eh_frame:000000000000A20E                 db  0Eh
.eh_frame:000000000000A20F                 db  88h
.eh_frame:000000000000A210                 db    1
.eh_frame:000000000000A211                 db  42h ; B
.eh_frame:000000000000A212                 db  0Eh
.eh_frame:000000000000A213                 db  90h
.eh_frame:000000000000A214                 db    1
.eh_frame:000000000000A215                 db  5Eh ; ^
.eh_frame:000000000000A216                 db  0Eh
.eh_frame:000000000000A217                 db  70h ; p
.eh_frame:000000000000A218                 db  56h ; V
.eh_frame:000000000000A219                 db  0Eh
.eh_frame:000000000000A21A                 db  78h ; x
.eh_frame:000000000000A21B                 db  43h ; C
.eh_frame:000000000000A21C                 db  0Eh
.eh_frame:000000000000A21D                 db  80h
.eh_frame:000000000000A21E                 db    1
.eh_frame:000000000000A21F                 db  43h ; C
.eh_frame:000000000000A220                 db  0Eh
.eh_frame:000000000000A221                 db  88h
.eh_frame:000000000000A222                 db    1
.eh_frame:000000000000A223                 db  56h ; V
.eh_frame:000000000000A224                 db  0Eh
.eh_frame:000000000000A225                 db  90h
.eh_frame:000000000000A226                 db    1
.eh_frame:000000000000A227                 db  52h ; R
.eh_frame:000000000000A228                 db  0Eh
.eh_frame:000000000000A229                 db  70h ; p
.eh_frame:000000000000A22A                 db  5Bh ; [
.eh_frame:000000000000A22B                 db  0Eh
.eh_frame:000000000000A22C                 db  38h ; 8
.eh_frame:000000000000A22D                 db  41h ; A
.eh_frame:000000000000A22E                 db  0Eh
.eh_frame:000000000000A22F                 db  30h ; 0
.eh_frame:000000000000A230                 db  41h ; A
.eh_frame:000000000000A231                 db  0Eh
.eh_frame:000000000000A232                 db  28h ; (
.eh_frame:000000000000A233                 db  42h ; B
.eh_frame:000000000000A234                 db  0Eh
.eh_frame:000000000000A235                 db  20h
.eh_frame:000000000000A236                 db  42h ; B
.eh_frame:000000000000A237                 db  0Eh
.eh_frame:000000000000A238                 db  18h
.eh_frame:000000000000A239                 db  42h ; B
.eh_frame:000000000000A23A                 db  0Eh
.eh_frame:000000000000A23B                 db  10h
.eh_frame:000000000000A23C                 db  42h ; B
.eh_frame:000000000000A23D                 db  0Eh
.eh_frame:000000000000A23E                 db    8
.eh_frame:000000000000A23F                 db    0
.eh_frame:000000000000A240                 db  10h
.eh_frame:000000000000A241                 db    0
.eh_frame:000000000000A242                 db    0
.eh_frame:000000000000A243                 db    0
.eh_frame:000000000000A244                 db  9Ch
.eh_frame:000000000000A245                 db    5
.eh_frame:000000000000A246                 db    0
.eh_frame:000000000000A247                 db    0
.eh_frame:000000000000A248                 db  58h ; X
.eh_frame:000000000000A249                 db 0A5h
.eh_frame:000000000000A24A                 db 0FFh
.eh_frame:000000000000A24B                 db 0FFh
.eh_frame:000000000000A24C                 db  0Ah
.eh_frame:000000000000A24D                 db    0
.eh_frame:000000000000A24E                 db    0
.eh_frame:000000000000A24F                 db    0
.eh_frame:000000000000A250                 db    0
.eh_frame:000000000000A251                 db    0
.eh_frame:000000000000A252                 db    0
.eh_frame:000000000000A253                 db    0
.eh_frame:000000000000A254                 db  28h ; (
.eh_frame:000000000000A255                 db    0
.eh_frame:000000000000A256                 db    0
.eh_frame:000000000000A257                 db    0
.eh_frame:000000000000A258                 db 0B0h
.eh_frame:000000000000A259                 db    5
.eh_frame:000000000000A25A                 db    0
.eh_frame:000000000000A25B                 db    0
.eh_frame:000000000000A25C                 db  54h ; T
.eh_frame:000000000000A25D                 db 0A5h
.eh_frame:000000000000A25E                 db 0FFh
.eh_frame:000000000000A25F                 db 0FFh
.eh_frame:000000000000A260                 db  93h
.eh_frame:000000000000A261                 db    0
.eh_frame:000000000000A262                 db    0
.eh_frame:000000000000A263                 db    0
.eh_frame:000000000000A264                 db    0
.eh_frame:000000000000A265                 db  48h ; H
.eh_frame:000000000000A266                 db  0Eh
.eh_frame:000000000000A267                 db  10h
.eh_frame:000000000000A268                 db  8Ch
.eh_frame:000000000000A269                 db    2
.eh_frame:000000000000A26A                 db  48h ; H
.eh_frame:000000000000A26B                 db  0Eh
.eh_frame:000000000000A26C                 db  18h
.eh_frame:000000000000A26D                 db  86h
.eh_frame:000000000000A26E                 db    3
.eh_frame:000000000000A26F                 db  41h ; A
.eh_frame:000000000000A270                 db  0Eh
.eh_frame:000000000000A271                 db  20h
.eh_frame:000000000000A272                 db  83h
.eh_frame:000000000000A273                 db    4
.eh_frame:000000000000A274                 db    2
.eh_frame:000000000000A275                 db  74h ; t
.eh_frame:000000000000A276                 db  0Eh
.eh_frame:000000000000A277                 db  18h
.eh_frame:000000000000A278                 db  4Bh ; K
.eh_frame:000000000000A279                 db  0Eh
.eh_frame:000000000000A27A                 db  10h
.eh_frame:000000000000A27B                 db  42h ; B
.eh_frame:000000000000A27C                 db  0Eh
.eh_frame:000000000000A27D                 db    8
.eh_frame:000000000000A27E                 db    0
.eh_frame:000000000000A27F                 db    0
.eh_frame:000000000000A280                 db  10h
.eh_frame:000000000000A281                 db    0
.eh_frame:000000000000A282                 db    0
.eh_frame:000000000000A283                 db    0
.eh_frame:000000000000A284                 db 0DCh
.eh_frame:000000000000A285                 db    5
.eh_frame:000000000000A286                 db    0
.eh_frame:000000000000A287                 db    0
.eh_frame:000000000000A288                 db 0C8h
.eh_frame:000000000000A289                 db 0A5h
.eh_frame:000000000000A28A                 db 0FFh
.eh_frame:000000000000A28B                 db 0FFh
.eh_frame:000000000000A28C                 db  13h
.eh_frame:000000000000A28D                 db    0
.eh_frame:000000000000A28E                 db    0
.eh_frame:000000000000A28F                 db    0
.eh_frame:000000000000A290                 db    0
.eh_frame:000000000000A291                 db    0
.eh_frame:000000000000A292                 db    0
.eh_frame:000000000000A293                 db    0
.eh_frame:000000000000A294                 db  10h
.eh_frame:000000000000A295                 db    0
.eh_frame:000000000000A296                 db    0
.eh_frame:000000000000A297                 db    0
.eh_frame:000000000000A298                 db 0F0h
.eh_frame:000000000000A299                 db    5
.eh_frame:000000000000A29A                 db    0
.eh_frame:000000000000A29B                 db    0
.eh_frame:000000000000A29C                 db 0D4h
.eh_frame:000000000000A29D                 db 0A5h
.eh_frame:000000000000A29E                 db 0FFh
.eh_frame:000000000000A29F                 db 0FFh
.eh_frame:000000000000A2A0                 db  0Ch
.eh_frame:000000000000A2A1                 db    0
.eh_frame:000000000000A2A2                 db    0
.eh_frame:000000000000A2A3                 db    0
.eh_frame:000000000000A2A4                 db    0
.eh_frame:000000000000A2A5                 db    0
.eh_frame:000000000000A2A6                 db    0
.eh_frame:000000000000A2A7                 db    0
.eh_frame:000000000000A2A8                 db  10h
.eh_frame:000000000000A2A9                 db    0
.eh_frame:000000000000A2AA                 db    0
.eh_frame:000000000000A2AB                 db    0
.eh_frame:000000000000A2AC                 db    4
.eh_frame:000000000000A2AD                 db    6
.eh_frame:000000000000A2AE                 db    0
.eh_frame:000000000000A2AF                 db    0
.eh_frame:000000000000A2B0                 db 0D0h
.eh_frame:000000000000A2B1                 db 0A5h
.eh_frame:000000000000A2B2                 db 0FFh
.eh_frame:000000000000A2B3                 db 0FFh
.eh_frame:000000000000A2B4                 db  18h
.eh_frame:000000000000A2B5                 db    0
.eh_frame:000000000000A2B6                 db    0
.eh_frame:000000000000A2B7                 db    0
.eh_frame:000000000000A2B8                 db    0
.eh_frame:000000000000A2B9                 db    0
.eh_frame:000000000000A2BA                 db    0
.eh_frame:000000000000A2BB                 db    0
.eh_frame:000000000000A2BC                 db  10h
.eh_frame:000000000000A2BD                 db    0
.eh_frame:000000000000A2BE                 db    0
.eh_frame:000000000000A2BF                 db    0
.eh_frame:000000000000A2C0                 db  18h
.eh_frame:000000000000A2C1                 db    6
.eh_frame:000000000000A2C2                 db    0
.eh_frame:000000000000A2C3                 db    0
.eh_frame:000000000000A2C4                 db 0DCh
.eh_frame:000000000000A2C5                 db 0A5h
.eh_frame:000000000000A2C6                 db 0FFh
.eh_frame:000000000000A2C7                 db 0FFh
.eh_frame:000000000000A2C8                 db  14h
.eh_frame:000000000000A2C9                 db    0
.eh_frame:000000000000A2CA                 db    0
.eh_frame:000000000000A2CB                 db    0
.eh_frame:000000000000A2CC                 db    0
.eh_frame:000000000000A2CD                 db    0
.eh_frame:000000000000A2CE                 db    0
.eh_frame:000000000000A2CF                 db    0
.eh_frame:000000000000A2D0                 db  18h
.eh_frame:000000000000A2D1                 db    0
.eh_frame:000000000000A2D2                 db    0
.eh_frame:000000000000A2D3                 db    0
.eh_frame:000000000000A2D4                 db  2Ch ; ,
.eh_frame:000000000000A2D5                 db    6
.eh_frame:000000000000A2D6                 db    0
.eh_frame:000000000000A2D7                 db    0
.eh_frame:000000000000A2D8                 db 0E8h
.eh_frame:000000000000A2D9                 db 0A5h
.eh_frame:000000000000A2DA                 db 0FFh
.eh_frame:000000000000A2DB                 db 0FFh
.eh_frame:000000000000A2DC                 db  8Eh
.eh_frame:000000000000A2DD                 db    0
.eh_frame:000000000000A2DE                 db    0
.eh_frame:000000000000A2DF                 db    0
.eh_frame:000000000000A2E0                 db    0
.eh_frame:000000000000A2E1                 db  44h ; D
.eh_frame:000000000000A2E2                 db  0Eh
.eh_frame:000000000000A2E3                 db  50h ; P
.eh_frame:000000000000A2E4                 db    2
.eh_frame:000000000000A2E5                 db  7Fh ; 
.eh_frame:000000000000A2E6                 db  0Ah
.eh_frame:000000000000A2E7                 db  0Eh
.eh_frame:000000000000A2E8                 db    8
.eh_frame:000000000000A2E9                 db  41h ; A
.eh_frame:000000000000A2EA                 db  0Bh
.eh_frame:000000000000A2EB                 db    0
.eh_frame:000000000000A2EC                 db  18h
.eh_frame:000000000000A2ED                 db    0
.eh_frame:000000000000A2EE                 db    0
.eh_frame:000000000000A2EF                 db    0
.eh_frame:000000000000A2F0                 db  48h ; H
.eh_frame:000000000000A2F1                 db    6
.eh_frame:000000000000A2F2                 db    0
.eh_frame:000000000000A2F3                 db    0
.eh_frame:000000000000A2F4                 db  5Ch ; \
.eh_frame:000000000000A2F5                 db 0A6h
.eh_frame:000000000000A2F6                 db 0FFh
.eh_frame:000000000000A2F7                 db 0FFh
.eh_frame:000000000000A2F8                 db  8Ah
.eh_frame:000000000000A2F9                 db    0
.eh_frame:000000000000A2FA                 db    0
.eh_frame:000000000000A2FB                 db    0
.eh_frame:000000000000A2FC                 db    0
.eh_frame:000000000000A2FD                 db  44h ; D
.eh_frame:000000000000A2FE                 db  0Eh
.eh_frame:000000000000A2FF                 db  50h ; P
.eh_frame:000000000000A300                 db    2
.eh_frame:000000000000A301                 db  7Bh ; {
.eh_frame:000000000000A302                 db  0Ah
.eh_frame:000000000000A303                 db  0Eh
.eh_frame:000000000000A304                 db    8
.eh_frame:000000000000A305                 db  41h ; A
.eh_frame:000000000000A306                 db  0Bh
.eh_frame:000000000000A307                 db    0
.eh_frame:000000000000A308                 db  10h
.eh_frame:000000000000A309                 db    0
.eh_frame:000000000000A30A                 db    0
.eh_frame:000000000000A30B                 db    0
.eh_frame:000000000000A30C                 db  64h ; d
.eh_frame:000000000000A30D                 db    6
.eh_frame:000000000000A30E                 db    0
.eh_frame:000000000000A30F                 db    0
.eh_frame:000000000000A310                 db 0D0h
.eh_frame:000000000000A311                 db 0A6h
.eh_frame:000000000000A312                 db 0FFh
.eh_frame:000000000000A313                 db 0FFh
.eh_frame:000000000000A314                 db  0Ch
.eh_frame:000000000000A315                 db    0
.eh_frame:000000000000A316                 db    0
.eh_frame:000000000000A317                 db    0
.eh_frame:000000000000A318                 db    0
.eh_frame:000000000000A319                 db    0
.eh_frame:000000000000A31A                 db    0
.eh_frame:000000000000A31B                 db    0
.eh_frame:000000000000A31C                 db  10h
.eh_frame:000000000000A31D                 db    0
.eh_frame:000000000000A31E                 db    0
.eh_frame:000000000000A31F                 db    0
.eh_frame:000000000000A320                 db  78h ; x
.eh_frame:000000000000A321                 db    6
.eh_frame:000000000000A322                 db    0
.eh_frame:000000000000A323                 db    0
.eh_frame:000000000000A324                 db 0CCh
.eh_frame:000000000000A325                 db 0A6h
.eh_frame:000000000000A326                 db 0FFh
.eh_frame:000000000000A327                 db 0FFh
.eh_frame:000000000000A328                 db  0Fh
.eh_frame:000000000000A329                 db    0
.eh_frame:000000000000A32A                 db    0
.eh_frame:000000000000A32B                 db    0
.eh_frame:000000000000A32C                 db    0
.eh_frame:000000000000A32D                 db    0
.eh_frame:000000000000A32E                 db    0
.eh_frame:000000000000A32F                 db    0
.eh_frame:000000000000A330                 db  18h
.eh_frame:000000000000A331                 db    0
.eh_frame:000000000000A332                 db    0
.eh_frame:000000000000A333                 db    0
.eh_frame:000000000000A334                 db  8Ch
.eh_frame:000000000000A335                 db    6
.eh_frame:000000000000A336                 db    0
.eh_frame:000000000000A337                 db    0
.eh_frame:000000000000A338                 db 0C8h
.eh_frame:000000000000A339                 db 0A6h
.eh_frame:000000000000A33A                 db 0FFh
.eh_frame:000000000000A33B                 db 0FFh
.eh_frame:000000000000A33C                 db  98h
.eh_frame:000000000000A33D                 db    0
.eh_frame:000000000000A33E                 db    0
.eh_frame:000000000000A33F                 db    0
.eh_frame:000000000000A340                 db    0
.eh_frame:000000000000A341                 db  44h ; D
.eh_frame:000000000000A342                 db  0Eh
.eh_frame:000000000000A343                 db  50h ; P
.eh_frame:000000000000A344                 db    2
.eh_frame:000000000000A345                 db  8Eh
.eh_frame:000000000000A346                 db  0Ah
.eh_frame:000000000000A347                 db  0Eh
.eh_frame:000000000000A348                 db    8
.eh_frame:000000000000A349                 db  41h ; A
.eh_frame:000000000000A34A                 db  0Bh
.eh_frame:000000000000A34B                 db    0
.eh_frame:000000000000A34C                 db  10h
.eh_frame:000000000000A34D                 db    0
.eh_frame:000000000000A34E                 db    0
.eh_frame:000000000000A34F                 db    0
.eh_frame:000000000000A350                 db 0A8h
.eh_frame:000000000000A351                 db    6
.eh_frame:000000000000A352                 db    0
.eh_frame:000000000000A353                 db    0
.eh_frame:000000000000A354                 db  4Ch ; L
.eh_frame:000000000000A355                 db 0A7h
.eh_frame:000000000000A356                 db 0FFh
.eh_frame:000000000000A357                 db 0FFh
.eh_frame:000000000000A358                 db  10h
.eh_frame:000000000000A359                 db    0
.eh_frame:000000000000A35A                 db    0
.eh_frame:000000000000A35B                 db    0
.eh_frame:000000000000A35C                 db    0
.eh_frame:000000000000A35D                 db    0
.eh_frame:000000000000A35E                 db    0
.eh_frame:000000000000A35F                 db    0
.eh_frame:000000000000A360                 db  10h
.eh_frame:000000000000A361                 db    0
.eh_frame:000000000000A362                 db    0
.eh_frame:000000000000A363                 db    0
.eh_frame:000000000000A364                 db 0BCh
.eh_frame:000000000000A365                 db    6
.eh_frame:000000000000A366                 db    0
.eh_frame:000000000000A367                 db    0
.eh_frame:000000000000A368                 db  48h ; H
.eh_frame:000000000000A369                 db 0A7h
.eh_frame:000000000000A36A                 db 0FFh
.eh_frame:000000000000A36B                 db 0FFh
.eh_frame:000000000000A36C                 db  11h
.eh_frame:000000000000A36D                 db    0
.eh_frame:000000000000A36E                 db    0
.eh_frame:000000000000A36F                 db    0
.eh_frame:000000000000A370                 db    0
.eh_frame:000000000000A371                 db    0
.eh_frame:000000000000A372                 db    0
.eh_frame:000000000000A373                 db    0
.eh_frame:000000000000A374                 db  10h
.eh_frame:000000000000A375                 db    0
.eh_frame:000000000000A376                 db    0
.eh_frame:000000000000A377                 db    0
.eh_frame:000000000000A378                 db 0D0h
.eh_frame:000000000000A379                 db    6
.eh_frame:000000000000A37A                 db    0
.eh_frame:000000000000A37B                 db    0
.eh_frame:000000000000A37C                 db  54h ; T
.eh_frame:000000000000A37D                 db 0A7h
.eh_frame:000000000000A37E                 db 0FFh
.eh_frame:000000000000A37F                 db 0FFh
.eh_frame:000000000000A380                 db  0Ah
.eh_frame:000000000000A381                 db    0
.eh_frame:000000000000A382                 db    0
.eh_frame:000000000000A383                 db    0
.eh_frame:000000000000A384                 db    0
.eh_frame:000000000000A385                 db    0
.eh_frame:000000000000A386                 db    0
.eh_frame:000000000000A387                 db    0
.eh_frame:000000000000A388                 db  18h
.eh_frame:000000000000A389                 db    0
.eh_frame:000000000000A38A                 db    0
.eh_frame:000000000000A38B                 db    0
.eh_frame:000000000000A38C                 db 0E4h
.eh_frame:000000000000A38D                 db    6
.eh_frame:000000000000A38E                 db    0
.eh_frame:000000000000A38F                 db    0
.eh_frame:000000000000A390                 db  50h ; P
.eh_frame:000000000000A391                 db 0A7h
.eh_frame:000000000000A392                 db 0FFh
.eh_frame:000000000000A393                 db 0FFh
.eh_frame:000000000000A394                 db  8Eh
.eh_frame:000000000000A395                 db    0
.eh_frame:000000000000A396                 db    0
.eh_frame:000000000000A397                 db    0
.eh_frame:000000000000A398                 db    0
.eh_frame:000000000000A399                 db  44h ; D
.eh_frame:000000000000A39A                 db  0Eh
.eh_frame:000000000000A39B                 db  50h ; P
.eh_frame:000000000000A39C                 db    2
.eh_frame:000000000000A39D                 db  7Fh ; 
.eh_frame:000000000000A39E                 db  0Ah
.eh_frame:000000000000A39F                 db  0Eh
.eh_frame:000000000000A3A0                 db    8
.eh_frame:000000000000A3A1                 db  41h ; A
.eh_frame:000000000000A3A2                 db  0Bh
.eh_frame:000000000000A3A3                 db    0
.eh_frame:000000000000A3A4                 db  18h
.eh_frame:000000000000A3A5                 db    0
.eh_frame:000000000000A3A6                 db    0
.eh_frame:000000000000A3A7                 db    0
.eh_frame:000000000000A3A8                 db    0
.eh_frame:000000000000A3A9                 db    7
.eh_frame:000000000000A3AA                 db    0
.eh_frame:000000000000A3AB                 db    0
.eh_frame:000000000000A3AC                 db 0C4h
.eh_frame:000000000000A3AD                 db 0A7h
.eh_frame:000000000000A3AE                 db 0FFh
.eh_frame:000000000000A3AF                 db 0FFh
.eh_frame:000000000000A3B0                 db  91h
.eh_frame:000000000000A3B1                 db    0
.eh_frame:000000000000A3B2                 db    0
.eh_frame:000000000000A3B3                 db    0
.eh_frame:000000000000A3B4                 db    0
.eh_frame:000000000000A3B5                 db  44h ; D
.eh_frame:000000000000A3B6                 db  0Eh
.eh_frame:000000000000A3B7                 db  50h ; P
.eh_frame:000000000000A3B8                 db    2
.eh_frame:000000000000A3B9                 db  82h
.eh_frame:000000000000A3BA                 db  0Ah
.eh_frame:000000000000A3BB                 db  0Eh
.eh_frame:000000000000A3BC                 db    8
.eh_frame:000000000000A3BD                 db  41h ; A
.eh_frame:000000000000A3BE                 db  0Bh
.eh_frame:000000000000A3BF                 db    0
.eh_frame:000000000000A3C0                 db  10h
.eh_frame:000000000000A3C1                 db    0
.eh_frame:000000000000A3C2                 db    0
.eh_frame:000000000000A3C3                 db    0
.eh_frame:000000000000A3C4                 db  1Ch
.eh_frame:000000000000A3C5                 db    7
.eh_frame:000000000000A3C6                 db    0
.eh_frame:000000000000A3C7                 db    0
.eh_frame:000000000000A3C8                 db  48h ; H
.eh_frame:000000000000A3C9                 db 0A8h
.eh_frame:000000000000A3CA                 db 0FFh
.eh_frame:000000000000A3CB                 db 0FFh
.eh_frame:000000000000A3CC                 db  0Ch
.eh_frame:000000000000A3CD                 db    0
.eh_frame:000000000000A3CE                 db    0
.eh_frame:000000000000A3CF                 db    0
.eh_frame:000000000000A3D0                 db    0
.eh_frame:000000000000A3D1                 db    0
.eh_frame:000000000000A3D2                 db    0
.eh_frame:000000000000A3D3                 db    0
.eh_frame:000000000000A3D4                 db  10h
.eh_frame:000000000000A3D5                 db    0
.eh_frame:000000000000A3D6                 db    0
.eh_frame:000000000000A3D7                 db    0
.eh_frame:000000000000A3D8                 db  30h ; 0
.eh_frame:000000000000A3D9                 db    7
.eh_frame:000000000000A3DA                 db    0
.eh_frame:000000000000A3DB                 db    0
.eh_frame:000000000000A3DC                 db  44h ; D
.eh_frame:000000000000A3DD                 db 0A8h
.eh_frame:000000000000A3DE                 db 0FFh
.eh_frame:000000000000A3DF                 db 0FFh
.eh_frame:000000000000A3E0                 db  17h
.eh_frame:000000000000A3E1                 db    0
.eh_frame:000000000000A3E2                 db    0
.eh_frame:000000000000A3E3                 db    0
.eh_frame:000000000000A3E4                 db    0
.eh_frame:000000000000A3E5                 db    0
.eh_frame:000000000000A3E6                 db    0
.eh_frame:000000000000A3E7                 db    0
.eh_frame:000000000000A3E8                 db  10h
.eh_frame:000000000000A3E9                 db    0
.eh_frame:000000000000A3EA                 db    0
.eh_frame:000000000000A3EB                 db    0
.eh_frame:000000000000A3EC                 db  44h ; D
.eh_frame:000000000000A3ED                 db    7
.eh_frame:000000000000A3EE                 db    0
.eh_frame:000000000000A3EF                 db    0
.eh_frame:000000000000A3F0                 db  50h ; P
.eh_frame:000000000000A3F1                 db 0A8h
.eh_frame:000000000000A3F2                 db 0FFh
.eh_frame:000000000000A3F3                 db 0FFh
.eh_frame:000000000000A3F4                 db  13h
.eh_frame:000000000000A3F5                 db    0
.eh_frame:000000000000A3F6                 db    0
.eh_frame:000000000000A3F7                 db    0
.eh_frame:000000000000A3F8                 db    0
.eh_frame:000000000000A3F9                 db    0
.eh_frame:000000000000A3FA                 db    0
.eh_frame:000000000000A3FB                 db    0
.eh_frame:000000000000A3FC                 db  10h
.eh_frame:000000000000A3FD                 db    0
.eh_frame:000000000000A3FE                 db    0
.eh_frame:000000000000A3FF                 db    0
.eh_frame:000000000000A400                 db  58h ; X
.eh_frame:000000000000A401                 db    7
.eh_frame:000000000000A402                 db    0
.eh_frame:000000000000A403                 db    0
.eh_frame:000000000000A404                 db  5Ch ; \
.eh_frame:000000000000A405                 db 0A8h
.eh_frame:000000000000A406                 db 0FFh
.eh_frame:000000000000A407                 db 0FFh
.eh_frame:000000000000A408                 db  0Ch
.eh_frame:000000000000A409                 db    0
.eh_frame:000000000000A40A                 db    0
.eh_frame:000000000000A40B                 db    0
.eh_frame:000000000000A40C                 db    0
.eh_frame:000000000000A40D                 db    0
.eh_frame:000000000000A40E                 db    0
.eh_frame:000000000000A40F                 db    0
.eh_frame:000000000000A410                 db  10h
.eh_frame:000000000000A411                 db    0
.eh_frame:000000000000A412                 db    0
.eh_frame:000000000000A413                 db    0
.eh_frame:000000000000A414                 db  6Ch ; l
.eh_frame:000000000000A415                 db    7
.eh_frame:000000000000A416                 db    0
.eh_frame:000000000000A417                 db    0
.eh_frame:000000000000A418                 db  58h ; X
.eh_frame:000000000000A419                 db 0A8h
.eh_frame:000000000000A41A                 db 0FFh
.eh_frame:000000000000A41B                 db 0FFh
.eh_frame:000000000000A41C                 db  14h
.eh_frame:000000000000A41D                 db    0
.eh_frame:000000000000A41E                 db    0
.eh_frame:000000000000A41F                 db    0
.eh_frame:000000000000A420                 db    0
.eh_frame:000000000000A421                 db    0
.eh_frame:000000000000A422                 db    0
.eh_frame:000000000000A423                 db    0
.eh_frame:000000000000A424                 db  10h
.eh_frame:000000000000A425                 db    0
.eh_frame:000000000000A426                 db    0
.eh_frame:000000000000A427                 db    0
.eh_frame:000000000000A428                 db  80h
.eh_frame:000000000000A429                 db    7
.eh_frame:000000000000A42A                 db    0
.eh_frame:000000000000A42B                 db    0
.eh_frame:000000000000A42C                 db  64h ; d
.eh_frame:000000000000A42D                 db 0A8h
.eh_frame:000000000000A42E                 db 0FFh
.eh_frame:000000000000A42F                 db 0FFh
.eh_frame:000000000000A430                 db  13h
.eh_frame:000000000000A431                 db    0
.eh_frame:000000000000A432                 db    0
.eh_frame:000000000000A433                 db    0
.eh_frame:000000000000A434                 db    0
.eh_frame:000000000000A435                 db    0
.eh_frame:000000000000A436                 db    0
.eh_frame:000000000000A437                 db    0
.eh_frame:000000000000A438                 db  14h
.eh_frame:000000000000A439                 db    0
.eh_frame:000000000000A43A                 db    0
.eh_frame:000000000000A43B                 db    0
.eh_frame:000000000000A43C                 db  94h
.eh_frame:000000000000A43D                 db    7
.eh_frame:000000000000A43E                 db    0
.eh_frame:000000000000A43F                 db    0
.eh_frame:000000000000A440                 db  70h ; p
.eh_frame:000000000000A441                 db 0A8h
.eh_frame:000000000000A442                 db 0FFh
.eh_frame:000000000000A443                 db 0FFh
.eh_frame:000000000000A444                 db  18h
.eh_frame:000000000000A445                 db    0
.eh_frame:000000000000A446                 db    0
.eh_frame:000000000000A447                 db    0
.eh_frame:000000000000A448                 db    0
.eh_frame:000000000000A449                 db    0
.eh_frame:000000000000A44A                 db    0
.eh_frame:000000000000A44B                 db    0
.eh_frame:000000000000A44C                 db    0
.eh_frame:000000000000A44D                 db    0
.eh_frame:000000000000A44E                 db    0
.eh_frame:000000000000A44F                 db    0
.eh_frame:000000000000A450                 db  10h
.eh_frame:000000000000A451                 db    0
.eh_frame:000000000000A452                 db    0
.eh_frame:000000000000A453                 db    0
.eh_frame:000000000000A454                 db 0ACh
.eh_frame:000000000000A455                 db    7
.eh_frame:000000000000A456                 db    0
.eh_frame:000000000000A457                 db    0
.eh_frame:000000000000A458                 db  78h ; x
.eh_frame:000000000000A459                 db 0A8h
.eh_frame:000000000000A45A                 db 0FFh
.eh_frame:000000000000A45B                 db 0FFh
.eh_frame:000000000000A45C                 db    7
.eh_frame:000000000000A45D                 db    0
.eh_frame:000000000000A45E                 db    0
.eh_frame:000000000000A45F                 db    0
.eh_frame:000000000000A460                 db    0
.eh_frame:000000000000A461                 db    0
.eh_frame:000000000000A462                 db    0
.eh_frame:000000000000A463                 db    0
.eh_frame:000000000000A464                 db  10h
.eh_frame:000000000000A465                 db    0
.eh_frame:000000000000A466                 db    0
.eh_frame:000000000000A467                 db    0
.eh_frame:000000000000A468                 db 0C0h
.eh_frame:000000000000A469                 db    7
.eh_frame:000000000000A46A                 db    0
.eh_frame:000000000000A46B                 db    0
.eh_frame:000000000000A46C                 db  74h ; t
.eh_frame:000000000000A46D                 db 0A8h
.eh_frame:000000000000A46E                 db 0FFh
.eh_frame:000000000000A46F                 db 0FFh
.eh_frame:000000000000A470                 db  14h
.eh_frame:000000000000A471                 db    0
.eh_frame:000000000000A472                 db    0
.eh_frame:000000000000A473                 db    0
.eh_frame:000000000000A474                 db    0
.eh_frame:000000000000A475                 db    0
.eh_frame:000000000000A476                 db    0
.eh_frame:000000000000A477                 db    0
.eh_frame:000000000000A478                 db  4Ch ; L
.eh_frame:000000000000A479                 db    0
.eh_frame:000000000000A47A                 db    0
.eh_frame:000000000000A47B                 db    0
.eh_frame:000000000000A47C                 db 0D4h
.eh_frame:000000000000A47D                 db    7
.eh_frame:000000000000A47E                 db    0
.eh_frame:000000000000A47F                 db    0
.eh_frame:000000000000A480                 db  80h
.eh_frame:000000000000A481                 db 0A8h
.eh_frame:000000000000A482                 db 0FFh
.eh_frame:000000000000A483                 db 0FFh
.eh_frame:000000000000A484                 db 0A9h
.eh_frame:000000000000A485                 db    2
.eh_frame:000000000000A486                 db    0
.eh_frame:000000000000A487                 db    0
.eh_frame:000000000000A488                 db    0
.eh_frame:000000000000A489                 db  45h ; E
.eh_frame:000000000000A48A                 db  0Eh
.eh_frame:000000000000A48B                 db  10h
.eh_frame:000000000000A48C                 db  8Eh
.eh_frame:000000000000A48D                 db    2
.eh_frame:000000000000A48E                 db  45h ; E
.eh_frame:000000000000A48F                 db  0Eh
.eh_frame:000000000000A490                 db  18h
.eh_frame:000000000000A491                 db  8Dh
.eh_frame:000000000000A492                 db    3
.eh_frame:000000000000A493                 db  45h ; E
.eh_frame:000000000000A494                 db  0Eh
.eh_frame:000000000000A495                 db  20h
.eh_frame:000000000000A496                 db  8Ch
.eh_frame:000000000000A497                 db    4
.eh_frame:000000000000A498                 db  44h ; D
.eh_frame:000000000000A499                 db  0Eh
.eh_frame:000000000000A49A                 db  28h ; (
.eh_frame:000000000000A49B                 db  86h
.eh_frame:000000000000A49C                 db    5
.eh_frame:000000000000A49D                 db  44h ; D
.eh_frame:000000000000A49E                 db  0Eh
.eh_frame:000000000000A49F                 db  30h ; 0
.eh_frame:000000000000A4A0                 db  83h
.eh_frame:000000000000A4A1                 db    6
.eh_frame:000000000000A4A2                 db    2
.eh_frame:000000000000A4A3                 db  60h ; `
.eh_frame:000000000000A4A4                 db  0Ah
.eh_frame:000000000000A4A5                 db  0Eh
.eh_frame:000000000000A4A6                 db  28h ; (
.eh_frame:000000000000A4A7                 db  44h ; D
.eh_frame:000000000000A4A8                 db  0Eh
.eh_frame:000000000000A4A9                 db  20h
.eh_frame:000000000000A4AA                 db  42h ; B
.eh_frame:000000000000A4AB                 db  0Eh
.eh_frame:000000000000A4AC                 db  18h
.eh_frame:000000000000A4AD                 db  42h ; B
.eh_frame:000000000000A4AE                 db  0Eh
.eh_frame:000000000000A4AF                 db  10h
.eh_frame:000000000000A4B0                 db  42h ; B
.eh_frame:000000000000A4B1                 db  0Eh
.eh_frame:000000000000A4B2                 db    8
.eh_frame:000000000000A4B3                 db  47h ; G
.eh_frame:000000000000A4B4                 db  0Bh
.eh_frame:000000000000A4B5                 db    2
.eh_frame:000000000000A4B6                 db 0A0h
.eh_frame:000000000000A4B7                 db  0Ah
.eh_frame:000000000000A4B8                 db  0Eh
.eh_frame:000000000000A4B9                 db  28h ; (
.eh_frame:000000000000A4BA                 db  44h ; D
.eh_frame:000000000000A4BB                 db  0Eh
.eh_frame:000000000000A4BC                 db  20h
.eh_frame:000000000000A4BD                 db  42h ; B
.eh_frame:000000000000A4BE                 db  0Eh
.eh_frame:000000000000A4BF                 db  18h
.eh_frame:000000000000A4C0                 db  42h ; B
.eh_frame:000000000000A4C1                 db  0Eh
.eh_frame:000000000000A4C2                 db  10h
.eh_frame:000000000000A4C3                 db  42h ; B
.eh_frame:000000000000A4C4                 db  0Eh
.eh_frame:000000000000A4C5                 db    8
.eh_frame:000000000000A4C6                 db  46h ; F
.eh_frame:000000000000A4C7                 db  0Bh
.eh_frame:000000000000A4C8                 db  30h ; 0
.eh_frame:000000000000A4C9                 db    0
.eh_frame:000000000000A4CA                 db    0
.eh_frame:000000000000A4CB                 db    0
.eh_frame:000000000000A4CC                 db  24h ; $
.eh_frame:000000000000A4CD                 db    8
.eh_frame:000000000000A4CE                 db    0
.eh_frame:000000000000A4CF                 db    0
.eh_frame:000000000000A4D0                 db 0E0h
.eh_frame:000000000000A4D1                 db 0AAh
.eh_frame:000000000000A4D2                 db 0FFh
.eh_frame:000000000000A4D3                 db 0FFh
.eh_frame:000000000000A4D4                 db  53h ; S
.eh_frame:000000000000A4D5                 db    1
.eh_frame:000000000000A4D6                 db    0
.eh_frame:000000000000A4D7                 db    0
.eh_frame:000000000000A4D8                 db    0
.eh_frame:000000000000A4D9                 db  42h ; B
.eh_frame:000000000000A4DA                 db  0Eh
.eh_frame:000000000000A4DB                 db  10h
.eh_frame:000000000000A4DC                 db  8Ch
.eh_frame:000000000000A4DD                 db    2
.eh_frame:000000000000A4DE                 db  41h ; A
.eh_frame:000000000000A4DF                 db  0Eh
.eh_frame:000000000000A4E0                 db  18h
.eh_frame:000000000000A4E1                 db  86h
.eh_frame:000000000000A4E2                 db    3
.eh_frame:000000000000A4E3                 db  41h ; A
.eh_frame:000000000000A4E4                 db  0Eh
.eh_frame:000000000000A4E5                 db  20h
.eh_frame:000000000000A4E6                 db  83h
.eh_frame:000000000000A4E7                 db    4
.eh_frame:000000000000A4E8                 db  44h ; D
.eh_frame:000000000000A4E9                 db  0Eh
.eh_frame:000000000000A4EA                 db  30h ; 0
.eh_frame:000000000000A4EB                 db    2
.eh_frame:000000000000A4EC                 db  65h ; e
.eh_frame:000000000000A4ED                 db  0Ah
.eh_frame:000000000000A4EE                 db  0Eh
.eh_frame:000000000000A4EF                 db  20h
.eh_frame:000000000000A4F0                 db  41h ; A
.eh_frame:000000000000A4F1                 db  0Eh
.eh_frame:000000000000A4F2                 db  18h
.eh_frame:000000000000A4F3                 db  41h ; A
.eh_frame:000000000000A4F4                 db  0Eh
.eh_frame:000000000000A4F5                 db  10h
.eh_frame:000000000000A4F6                 db  42h ; B
.eh_frame:000000000000A4F7                 db  0Eh
.eh_frame:000000000000A4F8                 db    8
.eh_frame:000000000000A4F9                 db  47h ; G
.eh_frame:000000000000A4FA                 db  0Bh
.eh_frame:000000000000A4FB                 db    0
.eh_frame:000000000000A4FC                 db  18h
.eh_frame:000000000000A4FD                 db    0
.eh_frame:000000000000A4FE                 db    0
.eh_frame:000000000000A4FF                 db    0
.eh_frame:000000000000A500                 db  58h ; X
.eh_frame:000000000000A501                 db    8
.eh_frame:000000000000A502                 db    0
.eh_frame:000000000000A503                 db    0
.eh_frame:000000000000A504                 db  0Ch
.eh_frame:000000000000A505                 db 0ACh
.eh_frame:000000000000A506                 db 0FFh
.eh_frame:000000000000A507                 db 0FFh
.eh_frame:000000000000A508                 db  75h ; u
.eh_frame:000000000000A509                 db    0
.eh_frame:000000000000A50A                 db    0
.eh_frame:000000000000A50B                 db    0
.eh_frame:000000000000A50C                 db    0
.eh_frame:000000000000A50D                 db  41h ; A
.eh_frame:000000000000A50E                 db  0Eh
.eh_frame:000000000000A50F                 db  10h
.eh_frame:000000000000A510                 db  83h
.eh_frame:000000000000A511                 db    2
.eh_frame:000000000000A512                 db  6Eh ; n
.eh_frame:000000000000A513                 db  0Ah
.eh_frame:000000000000A514                 db  0Eh
.eh_frame:000000000000A515                 db    8
.eh_frame:000000000000A516                 db  41h ; A
.eh_frame:000000000000A517                 db  0Bh
.eh_frame:000000000000A518                 db  4Ch ; L
.eh_frame:000000000000A519                 db    0
.eh_frame:000000000000A51A                 db    0
.eh_frame:000000000000A51B                 db    0
.eh_frame:000000000000A51C                 db  74h ; t
.eh_frame:000000000000A51D                 db    8
.eh_frame:000000000000A51E                 db    0
.eh_frame:000000000000A51F                 db    0
.eh_frame:000000000000A520                 db  70h ; p
.eh_frame:000000000000A521                 db 0ACh
.eh_frame:000000000000A522                 db 0FFh
.eh_frame:000000000000A523                 db 0FFh
.eh_frame:000000000000A524                 db  8Ch
.eh_frame:000000000000A525                 db    1
.eh_frame:000000000000A526                 db    0
.eh_frame:000000000000A527                 db    0
.eh_frame:000000000000A528                 db    0
.eh_frame:000000000000A529                 db  42h ; B
.eh_frame:000000000000A52A                 db  0Eh
.eh_frame:000000000000A52B                 db  10h
.eh_frame:000000000000A52C                 db  8Fh
.eh_frame:000000000000A52D                 db    2
.eh_frame:000000000000A52E                 db  42h ; B
.eh_frame:000000000000A52F                 db  0Eh
.eh_frame:000000000000A530                 db  18h
.eh_frame:000000000000A531                 db  8Eh
.eh_frame:000000000000A532                 db    3
.eh_frame:000000000000A533                 db  44h ; D
.eh_frame:000000000000A534                 db  0Eh
.eh_frame:000000000000A535                 db  20h
.eh_frame:000000000000A536                 db  8Dh
.eh_frame:000000000000A537                 db    4
.eh_frame:000000000000A538                 db  42h ; B
.eh_frame:000000000000A539                 db  0Eh
.eh_frame:000000000000A53A                 db  28h ; (
.eh_frame:000000000000A53B                 db  8Ch
.eh_frame:000000000000A53C                 db    5
.eh_frame:000000000000A53D                 db  44h ; D
.eh_frame:000000000000A53E                 db  0Eh
.eh_frame:000000000000A53F                 db  30h ; 0
.eh_frame:000000000000A540                 db  86h
.eh_frame:000000000000A541                 db    6
.eh_frame:000000000000A542                 db  41h ; A
.eh_frame:000000000000A543                 db  0Eh
.eh_frame:000000000000A544                 db  38h ; 8
.eh_frame:000000000000A545                 db  83h
.eh_frame:000000000000A546                 db    7
.eh_frame:000000000000A547                 db  4Ah ; J
.eh_frame:000000000000A548                 db  0Eh
.eh_frame:000000000000A549                 db  70h ; p
.eh_frame:000000000000A54A                 db    2
.eh_frame:000000000000A54B                 db 0DDh
.eh_frame:000000000000A54C                 db  0Ah
.eh_frame:000000000000A54D                 db  0Eh
.eh_frame:000000000000A54E                 db  38h ; 8
.eh_frame:000000000000A54F                 db  41h ; A
.eh_frame:000000000000A550                 db  0Eh
.eh_frame:000000000000A551                 db  30h ; 0
.eh_frame:000000000000A552                 db  41h ; A
.eh_frame:000000000000A553                 db  0Eh
.eh_frame:000000000000A554                 db  28h ; (
.eh_frame:000000000000A555                 db  42h ; B
.eh_frame:000000000000A556                 db  0Eh
.eh_frame:000000000000A557                 db  20h
.eh_frame:000000000000A558                 db  42h ; B
.eh_frame:000000000000A559                 db  0Eh
.eh_frame:000000000000A55A                 db  18h
.eh_frame:000000000000A55B                 db  42h ; B
.eh_frame:000000000000A55C                 db  0Eh
.eh_frame:000000000000A55D                 db  10h
.eh_frame:000000000000A55E                 db  42h ; B
.eh_frame:000000000000A55F                 db  0Eh
.eh_frame:000000000000A560                 db    8
.eh_frame:000000000000A561                 db  48h ; H
.eh_frame:000000000000A562                 db  0Bh
.eh_frame:000000000000A563                 db    0
.eh_frame:000000000000A564                 db    0
.eh_frame:000000000000A565                 db    0
.eh_frame:000000000000A566                 db    0
.eh_frame:000000000000A567                 db    0
.eh_frame:000000000000A568                 db  10h
.eh_frame:000000000000A569                 db    1
.eh_frame:000000000000A56A                 db    0
.eh_frame:000000000000A56B                 db    0
.eh_frame:000000000000A56C                 db 0C4h
.eh_frame:000000000000A56D                 db    8
.eh_frame:000000000000A56E                 db    0
.eh_frame:000000000000A56F                 db    0
.eh_frame:000000000000A570                 db 0B0h
.eh_frame:000000000000A571                 db 0ADh
.eh_frame:000000000000A572                 db 0FFh
.eh_frame:000000000000A573                 db 0FFh
.eh_frame:000000000000A574                 db  17h
.eh_frame:000000000000A575                 db    4
.eh_frame:000000000000A576                 db    0
.eh_frame:000000000000A577                 db    0
.eh_frame:000000000000A578                 db    0
.eh_frame:000000000000A579                 db  42h ; B
.eh_frame:000000000000A57A                 db  0Eh
.eh_frame:000000000000A57B                 db  10h
.eh_frame:000000000000A57C                 db  8Fh
.eh_frame:000000000000A57D                 db    2
.eh_frame:000000000000A57E                 db  42h ; B
.eh_frame:000000000000A57F                 db  0Eh
.eh_frame:000000000000A580                 db  18h
.eh_frame:000000000000A581                 db  8Eh
.eh_frame:000000000000A582                 db    3
.eh_frame:000000000000A583                 db  42h ; B
.eh_frame:000000000000A584                 db  0Eh
.eh_frame:000000000000A585                 db  20h
.eh_frame:000000000000A586                 db  8Dh
.eh_frame:000000000000A587                 db    4
.eh_frame:000000000000A588                 db  42h ; B
.eh_frame:000000000000A589                 db  0Eh
.eh_frame:000000000000A58A                 db  28h ; (
.eh_frame:000000000000A58B                 db  8Ch
.eh_frame:000000000000A58C                 db    5
.eh_frame:000000000000A58D                 db  44h ; D
.eh_frame:000000000000A58E                 db  0Eh
.eh_frame:000000000000A58F                 db  30h ; 0
.eh_frame:000000000000A590                 db  86h
.eh_frame:000000000000A591                 db    6
.eh_frame:000000000000A592                 db  41h ; A
.eh_frame:000000000000A593                 db  0Eh
.eh_frame:000000000000A594                 db  38h ; 8
.eh_frame:000000000000A595                 db  83h
.eh_frame:000000000000A596                 db    7
.eh_frame:000000000000A597                 db  4Ah ; J
.eh_frame:000000000000A598                 db  0Eh
.eh_frame:000000000000A599                 db  60h ; `
.eh_frame:000000000000A59A                 db    2
.eh_frame:000000000000A59B                 db 0DDh
.eh_frame:000000000000A59C                 db  0Eh
.eh_frame:000000000000A59D                 db  68h ; h
.eh_frame:000000000000A59E                 db  57h ; W
.eh_frame:000000000000A59F                 db  0Eh
.eh_frame:000000000000A5A0                 db  70h ; p
.eh_frame:000000000000A5A1                 db  42h ; B
.eh_frame:000000000000A5A2                 db  0Eh
.eh_frame:000000000000A5A3                 db  78h ; x
.eh_frame:000000000000A5A4                 db  42h ; B
.eh_frame:000000000000A5A5                 db  0Eh
.eh_frame:000000000000A5A6                 db  80h
.eh_frame:000000000000A5A7                 db    1
.eh_frame:000000000000A5A8                 db  42h ; B
.eh_frame:000000000000A5A9                 db  0Eh
.eh_frame:000000000000A5AA                 db  88h
.eh_frame:000000000000A5AB                 db    1
.eh_frame:000000000000A5AC                 db  42h ; B
.eh_frame:000000000000A5AD                 db  0Eh
.eh_frame:000000000000A5AE                 db  90h
.eh_frame:000000000000A5AF                 db    1
.eh_frame:000000000000A5B0                 db  53h ; S
.eh_frame:000000000000A5B1                 db  0Eh
.eh_frame:000000000000A5B2                 db  60h ; `
.eh_frame:000000000000A5B3                 db  44h ; D
.eh_frame:000000000000A5B4                 db  0Ah
.eh_frame:000000000000A5B5                 db  0Eh
.eh_frame:000000000000A5B6                 db  38h ; 8
.eh_frame:000000000000A5B7                 db  41h ; A
.eh_frame:000000000000A5B8                 db  0Eh
.eh_frame:000000000000A5B9                 db  30h ; 0
.eh_frame:000000000000A5BA                 db  41h ; A
.eh_frame:000000000000A5BB                 db  0Eh
.eh_frame:000000000000A5BC                 db  28h ; (
.eh_frame:000000000000A5BD                 db  42h ; B
.eh_frame:000000000000A5BE                 db  0Eh
.eh_frame:000000000000A5BF                 db  20h
.eh_frame:000000000000A5C0                 db  42h ; B
.eh_frame:000000000000A5C1                 db  0Eh
.eh_frame:000000000000A5C2                 db  18h
.eh_frame:000000000000A5C3                 db  42h ; B
.eh_frame:000000000000A5C4                 db  0Eh
.eh_frame:000000000000A5C5                 db  10h
.eh_frame:000000000000A5C6                 db  42h ; B
.eh_frame:000000000000A5C7                 db  0Eh
.eh_frame:000000000000A5C8                 db    8
.eh_frame:000000000000A5C9                 db  44h ; D
.eh_frame:000000000000A5CA                 db  0Bh
.eh_frame:000000000000A5CB                 db    2
.eh_frame:000000000000A5CC                 db  78h ; x
.eh_frame:000000000000A5CD                 db  0Ah
.eh_frame:000000000000A5CE                 db  0Eh
.eh_frame:000000000000A5CF                 db  68h ; h
.eh_frame:000000000000A5D0                 db  48h ; H
.eh_frame:000000000000A5D1                 db  0Bh
.eh_frame:000000000000A5D2                 db  5Ah ; Z
.eh_frame:000000000000A5D3                 db  0Ah
.eh_frame:000000000000A5D4                 db  0Eh
.eh_frame:000000000000A5D5                 db  38h ; 8
.eh_frame:000000000000A5D6                 db  47h ; G
.eh_frame:000000000000A5D7                 db  0Eh
.eh_frame:000000000000A5D8                 db  30h ; 0
.eh_frame:000000000000A5D9                 db  41h ; A
.eh_frame:000000000000A5DA                 db  0Eh
.eh_frame:000000000000A5DB                 db  28h ; (
.eh_frame:000000000000A5DC                 db  42h ; B
.eh_frame:000000000000A5DD                 db  0Eh
.eh_frame:000000000000A5DE                 db  20h
.eh_frame:000000000000A5DF                 db  42h ; B
.eh_frame:000000000000A5E0                 db  0Eh
.eh_frame:000000000000A5E1                 db  18h
.eh_frame:000000000000A5E2                 db  42h ; B
.eh_frame:000000000000A5E3                 db  0Eh
.eh_frame:000000000000A5E4                 db  10h
.eh_frame:000000000000A5E5                 db  42h ; B
.eh_frame:000000000000A5E6                 db  0Eh
.eh_frame:000000000000A5E7                 db    8
.eh_frame:000000000000A5E8                 db  56h ; V
.eh_frame:000000000000A5E9                 db  0Bh
.eh_frame:000000000000A5EA                 db  5Eh ; ^
.eh_frame:000000000000A5EB                 db  0Ah
.eh_frame:000000000000A5EC                 db  0Eh
.eh_frame:000000000000A5ED                 db  38h ; 8
.eh_frame:000000000000A5EE                 db  52h ; R
.eh_frame:000000000000A5EF                 db  0Eh
.eh_frame:000000000000A5F0                 db  30h ; 0
.eh_frame:000000000000A5F1                 db  41h ; A
.eh_frame:000000000000A5F2                 db  0Eh
.eh_frame:000000000000A5F3                 db  28h ; (
.eh_frame:000000000000A5F4                 db  42h ; B
.eh_frame:000000000000A5F5                 db  0Eh
.eh_frame:000000000000A5F6                 db  20h
.eh_frame:000000000000A5F7                 db  42h ; B
.eh_frame:000000000000A5F8                 db  0Eh
.eh_frame:000000000000A5F9                 db  18h
.eh_frame:000000000000A5FA                 db  42h ; B
.eh_frame:000000000000A5FB                 db  0Eh
.eh_frame:000000000000A5FC                 db  10h
.eh_frame:000000000000A5FD                 db  42h ; B
.eh_frame:000000000000A5FE                 db  0Eh
.eh_frame:000000000000A5FF                 db    8
.eh_frame:000000000000A600                 db  4Fh ; O
.eh_frame:000000000000A601                 db  0Bh
.eh_frame:000000000000A602                 db  62h ; b
.eh_frame:000000000000A603                 db  0Ah
.eh_frame:000000000000A604                 db  0Eh
.eh_frame:000000000000A605                 db  38h ; 8
.eh_frame:000000000000A606                 db  50h ; P
.eh_frame:000000000000A607                 db  0Eh
.eh_frame:000000000000A608                 db  30h ; 0
.eh_frame:000000000000A609                 db  41h ; A
.eh_frame:000000000000A60A                 db  0Eh
.eh_frame:000000000000A60B                 db  28h ; (
.eh_frame:000000000000A60C                 db  42h ; B
.eh_frame:000000000000A60D                 db  0Eh
.eh_frame:000000000000A60E                 db  20h
.eh_frame:000000000000A60F                 db  42h ; B
.eh_frame:000000000000A610                 db  0Eh
.eh_frame:000000000000A611                 db  18h
.eh_frame:000000000000A612                 db  42h ; B
.eh_frame:000000000000A613                 db  0Eh
.eh_frame:000000000000A614                 db  10h
.eh_frame:000000000000A615                 db  42h ; B
.eh_frame:000000000000A616                 db  0Eh
.eh_frame:000000000000A617                 db    8
.eh_frame:000000000000A618                 db  55h ; U
.eh_frame:000000000000A619                 db  0Bh
.eh_frame:000000000000A61A                 db  66h ; f
.eh_frame:000000000000A61B                 db  0Eh
.eh_frame:000000000000A61C                 db  68h ; h
.eh_frame:000000000000A61D                 db  42h ; B
.eh_frame:000000000000A61E                 db  0Eh
.eh_frame:000000000000A61F                 db  70h ; p
.eh_frame:000000000000A620                 db  5Ch ; \
.eh_frame:000000000000A621                 db  0Eh
.eh_frame:000000000000A622                 db  68h ; h
.eh_frame:000000000000A623                 db  41h ; A
.eh_frame:000000000000A624                 db  0Eh
.eh_frame:000000000000A625                 db  60h ; `
.eh_frame:000000000000A626                 db  44h ; D
.eh_frame:000000000000A627                 db  0Ah
.eh_frame:000000000000A628                 db  0Eh
.eh_frame:000000000000A629                 db  38h ; 8
.eh_frame:000000000000A62A                 db  41h ; A
.eh_frame:000000000000A62B                 db  0Eh
.eh_frame:000000000000A62C                 db  30h ; 0
.eh_frame:000000000000A62D                 db  41h ; A
.eh_frame:000000000000A62E                 db  0Eh
.eh_frame:000000000000A62F                 db  28h ; (
.eh_frame:000000000000A630                 db  42h ; B
.eh_frame:000000000000A631                 db  0Eh
.eh_frame:000000000000A632                 db  20h
.eh_frame:000000000000A633                 db  42h ; B
.eh_frame:000000000000A634                 db  0Eh
.eh_frame:000000000000A635                 db  18h
.eh_frame:000000000000A636                 db  42h ; B
.eh_frame:000000000000A637                 db  0Eh
.eh_frame:000000000000A638                 db  10h
.eh_frame:000000000000A639                 db  42h ; B
.eh_frame:000000000000A63A                 db  0Eh
.eh_frame:000000000000A63B                 db    8
.eh_frame:000000000000A63C                 db  45h ; E
.eh_frame:000000000000A63D                 db  0Bh
.eh_frame:000000000000A63E                 db  68h ; h
.eh_frame:000000000000A63F                 db  0Ah
.eh_frame:000000000000A640                 db  0Eh
.eh_frame:000000000000A641                 db  68h ; h
.eh_frame:000000000000A642                 db  48h ; H
.eh_frame:000000000000A643                 db  0Bh
.eh_frame:000000000000A644                 db  72h ; r
.eh_frame:000000000000A645                 db  0Eh
.eh_frame:000000000000A646                 db  68h ; h
.eh_frame:000000000000A647                 db  45h ; E
.eh_frame:000000000000A648                 db  0Eh
.eh_frame:000000000000A649                 db  70h ; p
.eh_frame:000000000000A64A                 db  42h ; B
.eh_frame:000000000000A64B                 db  0Eh
.eh_frame:000000000000A64C                 db  78h ; x
.eh_frame:000000000000A64D                 db  42h ; B
.eh_frame:000000000000A64E                 db  0Eh
.eh_frame:000000000000A64F                 db  80h
.eh_frame:000000000000A650                 db    1
.eh_frame:000000000000A651                 db  5Eh ; ^
.eh_frame:000000000000A652                 db  0Eh
.eh_frame:000000000000A653                 db  60h ; `
.eh_frame:000000000000A654                 db  44h ; D
.eh_frame:000000000000A655                 db  0Ah
.eh_frame:000000000000A656                 db  0Eh
.eh_frame:000000000000A657                 db  38h ; 8
.eh_frame:000000000000A658                 db  41h ; A
.eh_frame:000000000000A659                 db  0Eh
.eh_frame:000000000000A65A                 db  30h ; 0
.eh_frame:000000000000A65B                 db  41h ; A
.eh_frame:000000000000A65C                 db  0Eh
.eh_frame:000000000000A65D                 db  28h ; (
.eh_frame:000000000000A65E                 db  42h ; B
.eh_frame:000000000000A65F                 db  0Eh
.eh_frame:000000000000A660                 db  20h
.eh_frame:000000000000A661                 db  42h ; B
.eh_frame:000000000000A662                 db  0Eh
.eh_frame:000000000000A663                 db  18h
.eh_frame:000000000000A664                 db  42h ; B
.eh_frame:000000000000A665                 db  0Eh
.eh_frame:000000000000A666                 db  10h
.eh_frame:000000000000A667                 db  42h ; B
.eh_frame:000000000000A668                 db  0Eh
.eh_frame:000000000000A669                 db    8
.eh_frame:000000000000A66A                 db  41h ; A
.eh_frame:000000000000A66B                 db  0Bh
.eh_frame:000000000000A66C                 db  79h ; y
.eh_frame:000000000000A66D                 db  0Ah
.eh_frame:000000000000A66E                 db  0Eh
.eh_frame:000000000000A66F                 db  68h ; h
.eh_frame:000000000000A670                 db  42h ; B
.eh_frame:000000000000A671                 db  0Eh
.eh_frame:000000000000A672                 db  70h ; p
.eh_frame:000000000000A673                 db  42h ; B
.eh_frame:000000000000A674                 db  0Eh
.eh_frame:000000000000A675                 db  78h ; x
.eh_frame:000000000000A676                 db  42h ; B
.eh_frame:000000000000A677                 db  0Eh
.eh_frame:000000000000A678                 db  80h
.eh_frame:000000000000A679                 db    1
.eh_frame:000000000000A67A                 db  51h ; Q
.eh_frame:000000000000A67B                 db  0Bh
.eh_frame:000000000000A67C                 db  10h
.eh_frame:000000000000A67D                 db    0
.eh_frame:000000000000A67E                 db    0
.eh_frame:000000000000A67F                 db    0
.eh_frame:000000000000A680                 db 0D8h
.eh_frame:000000000000A681                 db    9
.eh_frame:000000000000A682                 db    0
.eh_frame:000000000000A683                 db    0
.eh_frame:000000000000A684                 db 0BCh
.eh_frame:000000000000A685                 db 0B0h
.eh_frame:000000000000A686                 db 0FFh
.eh_frame:000000000000A687                 db 0FFh
.eh_frame:000000000000A688                 db  20h
.eh_frame:000000000000A689                 db    0
.eh_frame:000000000000A68A                 db    0
.eh_frame:000000000000A68B                 db    0
.eh_frame:000000000000A68C                 db    0
.eh_frame:000000000000A68D                 db    0
.eh_frame:000000000000A68E                 db    0
.eh_frame:000000000000A68F                 db    0
.eh_frame:000000000000A690                 db  18h
.eh_frame:000000000000A691                 db    0
.eh_frame:000000000000A692                 db    0
.eh_frame:000000000000A693                 db    0
.eh_frame:000000000000A694                 db 0ECh
.eh_frame:000000000000A695                 db    9
.eh_frame:000000000000A696                 db    0
.eh_frame:000000000000A697                 db    0
.eh_frame:000000000000A698                 db 0C8h
.eh_frame:000000000000A699                 db 0B0h
.eh_frame:000000000000A69A                 db 0FFh
.eh_frame:000000000000A69B                 db 0FFh
.eh_frame:000000000000A69C                 db  78h ; x
.eh_frame:000000000000A69D                 db    0
.eh_frame:000000000000A69E                 db    0
.eh_frame:000000000000A69F                 db    0
.eh_frame:000000000000A6A0                 db    0
.eh_frame:000000000000A6A1                 db  44h ; D
.eh_frame:000000000000A6A2                 db  0Eh
.eh_frame:000000000000A6A3                 db  70h ; p
.eh_frame:000000000000A6A4                 db    2
.eh_frame:000000000000A6A5                 db  60h ; `
.eh_frame:000000000000A6A6                 db  0Ah
.eh_frame:000000000000A6A7                 db  0Eh
.eh_frame:000000000000A6A8                 db    8
.eh_frame:000000000000A6A9                 db  41h ; A
.eh_frame:000000000000A6AA                 db  0Bh
.eh_frame:000000000000A6AB                 db    0
.eh_frame:000000000000A6AC                 db  28h ; (
.eh_frame:000000000000A6AD                 db    0
.eh_frame:000000000000A6AE                 db    0
.eh_frame:000000000000A6AF                 db    0
.eh_frame:000000000000A6B0                 db    8
.eh_frame:000000000000A6B1                 db  0Ah
.eh_frame:000000000000A6B2                 db    0
.eh_frame:000000000000A6B3                 db    0
.eh_frame:000000000000A6B4                 db  2Ch ; ,
.eh_frame:000000000000A6B5                 db 0B1h
.eh_frame:000000000000A6B6                 db 0FFh
.eh_frame:000000000000A6B7                 db 0FFh
.eh_frame:000000000000A6B8                 db 0D5h
.eh_frame:000000000000A6B9                 db    0
.eh_frame:000000000000A6BA                 db    0
.eh_frame:000000000000A6BB                 db    0
.eh_frame:000000000000A6BC                 db    0
.eh_frame:000000000000A6BD                 db  41h ; A
.eh_frame:000000000000A6BE                 db  0Eh
.eh_frame:000000000000A6BF                 db  10h
.eh_frame:000000000000A6C0                 db  86h
.eh_frame:000000000000A6C1                 db    2
.eh_frame:000000000000A6C2                 db  41h ; A
.eh_frame:000000000000A6C3                 db  0Eh
.eh_frame:000000000000A6C4                 db  18h
.eh_frame:000000000000A6C5                 db  83h
.eh_frame:000000000000A6C6                 db    3
.eh_frame:000000000000A6C7                 db  50h ; P
.eh_frame:000000000000A6C8                 db  0Eh
.eh_frame:000000000000A6C9                 db 0D0h
.eh_frame:000000000000A6CA                 db    1
.eh_frame:000000000000A6CB                 db    2
.eh_frame:000000000000A6CC                 db 0ABh
.eh_frame:000000000000A6CD                 db  0Ah
.eh_frame:000000000000A6CE                 db  0Eh
.eh_frame:000000000000A6CF                 db  18h
.eh_frame:000000000000A6D0                 db  41h ; A
.eh_frame:000000000000A6D1                 db  0Eh
.eh_frame:000000000000A6D2                 db  10h
.eh_frame:000000000000A6D3                 db  41h ; A
.eh_frame:000000000000A6D4                 db  0Eh
.eh_frame:000000000000A6D5                 db    8
.eh_frame:000000000000A6D6                 db  41h ; A
.eh_frame:000000000000A6D7                 db  0Bh
.eh_frame:000000000000A6D8                 db  1Ch
.eh_frame:000000000000A6D9                 db    0
.eh_frame:000000000000A6DA                 db    0
.eh_frame:000000000000A6DB                 db    0
.eh_frame:000000000000A6DC                 db  34h ; 4
.eh_frame:000000000000A6DD                 db  0Ah
.eh_frame:000000000000A6DE                 db    0
.eh_frame:000000000000A6DF                 db    0
.eh_frame:000000000000A6E0                 db 0E0h
.eh_frame:000000000000A6E1                 db 0B1h
.eh_frame:000000000000A6E2                 db 0FFh
.eh_frame:000000000000A6E3                 db 0FFh
.eh_frame:000000000000A6E4                 db  80h
.eh_frame:000000000000A6E5                 db    0
.eh_frame:000000000000A6E6                 db    0
.eh_frame:000000000000A6E7                 db    0
.eh_frame:000000000000A6E8                 db    0
.eh_frame:000000000000A6E9                 db  41h ; A
.eh_frame:000000000000A6EA                 db  0Eh
.eh_frame:000000000000A6EB                 db  10h
.eh_frame:000000000000A6EC                 db  83h
.eh_frame:000000000000A6ED                 db    2
.eh_frame:000000000000A6EE                 db    2
.eh_frame:000000000000A6EF                 db  7Ah ; z
.eh_frame:000000000000A6F0                 db  0Eh
.eh_frame:000000000000A6F1                 db    8
.eh_frame:000000000000A6F2                 db    0
.eh_frame:000000000000A6F3                 db    0
.eh_frame:000000000000A6F4                 db    0
.eh_frame:000000000000A6F5                 db    0
.eh_frame:000000000000A6F6                 db    0
.eh_frame:000000000000A6F7                 db    0
.eh_frame:000000000000A6F8                 db  18h
.eh_frame:000000000000A6F9                 db    0
.eh_frame:000000000000A6FA                 db    0
.eh_frame:000000000000A6FB                 db    0
.eh_frame:000000000000A6FC                 db  54h ; T
.eh_frame:000000000000A6FD                 db  0Ah
.eh_frame:000000000000A6FE                 db    0
.eh_frame:000000000000A6FF                 db    0
.eh_frame:000000000000A700                 db  40h ; @
.eh_frame:000000000000A701                 db 0B2h
.eh_frame:000000000000A702                 db 0FFh
.eh_frame:000000000000A703                 db 0FFh
.eh_frame:000000000000A704                 db  1Ah
.eh_frame:000000000000A705                 db    0
.eh_frame:000000000000A706                 db    0
.eh_frame:000000000000A707                 db    0
.eh_frame:000000000000A708                 db    0
.eh_frame:000000000000A709                 db  41h ; A
.eh_frame:000000000000A70A                 db  0Eh
.eh_frame:000000000000A70B                 db  10h
.eh_frame:000000000000A70C                 db  83h
.eh_frame:000000000000A70D                 db    2
.eh_frame:000000000000A70E                 db  53h ; S
.eh_frame:000000000000A70F                 db  0Ah
.eh_frame:000000000000A710                 db  0Eh
.eh_frame:000000000000A711                 db    8
.eh_frame:000000000000A712                 db  41h ; A
.eh_frame:000000000000A713                 db  0Bh
.eh_frame:000000000000A714                 db  10h
.eh_frame:000000000000A715                 db    0
.eh_frame:000000000000A716                 db    0
.eh_frame:000000000000A717                 db    0
.eh_frame:000000000000A718                 db  70h ; p
.eh_frame:000000000000A719                 db  0Ah
.eh_frame:000000000000A71A                 db    0
.eh_frame:000000000000A71B                 db    0
.eh_frame:000000000000A71C                 db  44h ; D
.eh_frame:000000000000A71D                 db 0B2h
.eh_frame:000000000000A71E                 db 0FFh
.eh_frame:000000000000A71F                 db 0FFh
.eh_frame:000000000000A720                 db  24h ; $
.eh_frame:000000000000A721                 db    0
.eh_frame:000000000000A722                 db    0
.eh_frame:000000000000A723                 db    0
.eh_frame:000000000000A724                 db    0
.eh_frame:000000000000A725                 db  5Fh ; _
.eh_frame:000000000000A726                 db  0Eh
.eh_frame:000000000000A727                 db  10h
.eh_frame:000000000000A728                 db  10h
.eh_frame:000000000000A729                 db    0
.eh_frame:000000000000A72A                 db    0
.eh_frame:000000000000A72B                 db    0
.eh_frame:000000000000A72C                 db  84h
.eh_frame:000000000000A72D                 db  0Ah
.eh_frame:000000000000A72E                 db    0
.eh_frame:000000000000A72F                 db    0
.eh_frame:000000000000A730                 db  60h ; `
.eh_frame:000000000000A731                 db 0B2h
.eh_frame:000000000000A732                 db 0FFh
.eh_frame:000000000000A733                 db 0FFh
.eh_frame:000000000000A734                 db    2
.eh_frame:000000000000A735                 db    0
.eh_frame:000000000000A736                 db    0
.eh_frame:000000000000A737                 db    0
.eh_frame:000000000000A738                 db    0
.eh_frame:000000000000A739                 db    0
.eh_frame:000000000000A73A                 db    0
.eh_frame:000000000000A73B                 db    0
.eh_frame:000000000000A73C                 db  20h
.eh_frame:000000000000A73D                 db    0
.eh_frame:000000000000A73E                 db    0
.eh_frame:000000000000A73F                 db    0
.eh_frame:000000000000A740                 db  98h
.eh_frame:000000000000A741                 db  0Ah
.eh_frame:000000000000A742                 db    0
.eh_frame:000000000000A743                 db    0
.eh_frame:000000000000A744                 db  5Ch ; \
.eh_frame:000000000000A745                 db 0B2h
.eh_frame:000000000000A746                 db 0FFh
.eh_frame:000000000000A747                 db 0FFh
.eh_frame:000000000000A748                 db  36h ; 6
.eh_frame:000000000000A749                 db    0
.eh_frame:000000000000A74A                 db    0
.eh_frame:000000000000A74B                 db    0
.eh_frame:000000000000A74C                 db    0
.eh_frame:000000000000A74D                 db  44h ; D
.eh_frame:000000000000A74E                 db  0Eh
.eh_frame:000000000000A74F                 db  10h
.eh_frame:000000000000A750                 db  83h
.eh_frame:000000000000A751                 db    2
.eh_frame:000000000000A752                 db  5Dh ; ]
.eh_frame:000000000000A753                 db  0Ah
.eh_frame:000000000000A754                 db  0Eh
.eh_frame:000000000000A755                 db    8
.eh_frame:000000000000A756                 db  47h ; G
.eh_frame:000000000000A757                 db  0Bh
.eh_frame:000000000000A758                 db  48h ; H
.eh_frame:000000000000A759                 db  0Ah
.eh_frame:000000000000A75A                 db  0Eh
.eh_frame:000000000000A75B                 db    8
.eh_frame:000000000000A75C                 db  41h ; A
.eh_frame:000000000000A75D                 db  0Bh
.eh_frame:000000000000A75E                 db    0
.eh_frame:000000000000A75F                 db    0
.eh_frame:000000000000A760                 db  10h
.eh_frame:000000000000A761                 db    0
.eh_frame:000000000000A762                 db    0
.eh_frame:000000000000A763                 db    0
.eh_frame:000000000000A764                 db 0BCh
.eh_frame:000000000000A765                 db  0Ah
.eh_frame:000000000000A766                 db    0
.eh_frame:000000000000A767                 db    0
.eh_frame:000000000000A768                 db  78h ; x
.eh_frame:000000000000A769                 db 0B2h
.eh_frame:000000000000A76A                 db 0FFh
.eh_frame:000000000000A76B                 db 0FFh
.eh_frame:000000000000A76C                 db  24h ; $
.eh_frame:000000000000A76D                 db    0
.eh_frame:000000000000A76E                 db    0
.eh_frame:000000000000A76F                 db    0
.eh_frame:000000000000A770                 db    0
.eh_frame:000000000000A771                 db  5Fh ; _
.eh_frame:000000000000A772                 db  0Eh
.eh_frame:000000000000A773                 db  10h
.eh_frame:000000000000A774                 db  14h
.eh_frame:000000000000A775                 db    0
.eh_frame:000000000000A776                 db    0
.eh_frame:000000000000A777                 db    0
.eh_frame:000000000000A778                 db 0D0h
.eh_frame:000000000000A779                 db  0Ah
.eh_frame:000000000000A77A                 db    0
.eh_frame:000000000000A77B                 db    0
.eh_frame:000000000000A77C                 db  94h
.eh_frame:000000000000A77D                 db 0B2h
.eh_frame:000000000000A77E                 db 0FFh
.eh_frame:000000000000A77F                 db 0FFh
.eh_frame:000000000000A780                 db  82h
.eh_frame:000000000000A781                 db    0
.eh_frame:000000000000A782                 db    0
.eh_frame:000000000000A783                 db    0
.eh_frame:000000000000A784                 db    0
.eh_frame:000000000000A785                 db    2
.eh_frame:000000000000A786                 db  5Fh ; _
.eh_frame:000000000000A787                 db  0Eh
.eh_frame:000000000000A788                 db  10h
.eh_frame:000000000000A789                 db  49h ; I
.eh_frame:000000000000A78A                 db  0Eh
.eh_frame:000000000000A78B                 db    8
.eh_frame:000000000000A78C                 db  14h
.eh_frame:000000000000A78D                 db    0
.eh_frame:000000000000A78E                 db    0
.eh_frame:000000000000A78F                 db    0
.eh_frame:000000000000A790                 db 0E8h
.eh_frame:000000000000A791                 db  0Ah
.eh_frame:000000000000A792                 db    0
.eh_frame:000000000000A793                 db    0
.eh_frame:000000000000A794                 db  0Ch
.eh_frame:000000000000A795                 db 0B3h
.eh_frame:000000000000A796                 db 0FFh
.eh_frame:000000000000A797                 db 0FFh
.eh_frame:000000000000A798                 db  4Ah ; J
.eh_frame:000000000000A799                 db    0
.eh_frame:000000000000A79A                 db    0
.eh_frame:000000000000A79B                 db    0
.eh_frame:000000000000A79C                 db    0
.eh_frame:000000000000A79D                 db    2
.eh_frame:000000000000A79E                 db  45h ; E
.eh_frame:000000000000A79F                 db  0Eh
.eh_frame:000000000000A7A0                 db  10h
.eh_frame:000000000000A7A1                 db    0
.eh_frame:000000000000A7A2                 db    0
.eh_frame:000000000000A7A3                 db    0
.eh_frame:000000000000A7A4                 db  18h
.eh_frame:000000000000A7A5                 db    0
.eh_frame:000000000000A7A6                 db    0
.eh_frame:000000000000A7A7                 db    0
.eh_frame:000000000000A7A8                 db    0
.eh_frame:000000000000A7A9                 db  0Bh
.eh_frame:000000000000A7AA                 db    0
.eh_frame:000000000000A7AB                 db    0
.eh_frame:000000000000A7AC                 db  44h ; D
.eh_frame:000000000000A7AD                 db 0B3h
.eh_frame:000000000000A7AE                 db 0FFh
.eh_frame:000000000000A7AF                 db 0FFh
.eh_frame:000000000000A7B0                 db  17h
.eh_frame:000000000000A7B1                 db    0
.eh_frame:000000000000A7B2                 db    0
.eh_frame:000000000000A7B3                 db    0
.eh_frame:000000000000A7B4                 db    0
.eh_frame:000000000000A7B5                 db  41h ; A
.eh_frame:000000000000A7B6                 db  0Eh
.eh_frame:000000000000A7B7                 db  10h
.eh_frame:000000000000A7B8                 db  83h
.eh_frame:000000000000A7B9                 db    2
.eh_frame:000000000000A7BA                 db  51h ; Q
.eh_frame:000000000000A7BB                 db  0Eh
.eh_frame:000000000000A7BC                 db    8
.eh_frame:000000000000A7BD                 db    0
.eh_frame:000000000000A7BE                 db    0
.eh_frame:000000000000A7BF                 db    0
.eh_frame:000000000000A7C0                 db  18h
.eh_frame:000000000000A7C1                 db    0
.eh_frame:000000000000A7C2                 db    0
.eh_frame:000000000000A7C3                 db    0
.eh_frame:000000000000A7C4                 db  1Ch
.eh_frame:000000000000A7C5                 db  0Bh
.eh_frame:000000000000A7C6                 db    0
.eh_frame:000000000000A7C7                 db    0
.eh_frame:000000000000A7C8                 db  48h ; H
.eh_frame:000000000000A7C9                 db 0B3h
.eh_frame:000000000000A7CA                 db 0FFh
.eh_frame:000000000000A7CB                 db 0FFh
.eh_frame:000000000000A7CC                 db  2Eh ; .
.eh_frame:000000000000A7CD                 db    0
.eh_frame:000000000000A7CE                 db    0
.eh_frame:000000000000A7CF                 db    0
.eh_frame:000000000000A7D0                 db    0
.eh_frame:000000000000A7D1                 db  47h ; G
.eh_frame:000000000000A7D2                 db  0Eh
.eh_frame:000000000000A7D3                 db  10h
.eh_frame:000000000000A7D4                 db  61h ; a
.eh_frame:000000000000A7D5                 db  0Ah
.eh_frame:000000000000A7D6                 db  0Eh
.eh_frame:000000000000A7D7                 db    8
.eh_frame:000000000000A7D8                 db  41h ; A
.eh_frame:000000000000A7D9                 db  0Bh
.eh_frame:000000000000A7DA                 db    0
.eh_frame:000000000000A7DB                 db    0
.eh_frame:000000000000A7DC                 db  24h ; $
.eh_frame:000000000000A7DD                 db    0
.eh_frame:000000000000A7DE                 db    0
.eh_frame:000000000000A7DF                 db    0
.eh_frame:000000000000A7E0                 db  38h ; 8
.eh_frame:000000000000A7E1                 db  0Bh
.eh_frame:000000000000A7E2                 db    0
.eh_frame:000000000000A7E3                 db    0
.eh_frame:000000000000A7E4                 db  5Ch ; \
.eh_frame:000000000000A7E5                 db 0B3h
.eh_frame:000000000000A7E6                 db 0FFh
.eh_frame:000000000000A7E7                 db 0FFh
.eh_frame:000000000000A7E8                 db  28h ; (
.eh_frame:000000000000A7E9                 db    0
.eh_frame:000000000000A7EA                 db    0
.eh_frame:000000000000A7EB                 db    0
.eh_frame:000000000000A7EC                 db    0
.eh_frame:000000000000A7ED                 db  41h ; A
.eh_frame:000000000000A7EE                 db  0Eh
.eh_frame:000000000000A7EF                 db  10h
.eh_frame:000000000000A7F0                 db  86h
.eh_frame:000000000000A7F1                 db    2
.eh_frame:000000000000A7F2                 db  41h ; A
.eh_frame:000000000000A7F3                 db  0Eh
.eh_frame:000000000000A7F4                 db  18h
.eh_frame:000000000000A7F5                 db  83h
.eh_frame:000000000000A7F6                 db    3
.eh_frame:000000000000A7F7                 db  4Dh ; M
.eh_frame:000000000000A7F8                 db  0Eh
.eh_frame:000000000000A7F9                 db  20h
.eh_frame:000000000000A7FA                 db  49h ; I
.eh_frame:000000000000A7FB                 db  0Eh
.eh_frame:000000000000A7FC                 db  18h
.eh_frame:000000000000A7FD                 db  47h ; G
.eh_frame:000000000000A7FE                 db  0Eh
.eh_frame:000000000000A7FF                 db  10h
.eh_frame:000000000000A800                 db  41h ; A
.eh_frame:000000000000A801                 db  0Eh
.eh_frame:000000000000A802                 db    8
.eh_frame:000000000000A803                 db    0
.eh_frame:000000000000A804                 db  18h
.eh_frame:000000000000A805                 db    0
.eh_frame:000000000000A806                 db    0
.eh_frame:000000000000A807                 db    0
.eh_frame:000000000000A808                 db  60h ; `
.eh_frame:000000000000A809                 db  0Bh
.eh_frame:000000000000A80A                 db    0
.eh_frame:000000000000A80B                 db    0
.eh_frame:000000000000A80C                 db  64h ; d
.eh_frame:000000000000A80D                 db 0B3h
.eh_frame:000000000000A80E                 db 0FFh
.eh_frame:000000000000A80F                 db 0FFh
.eh_frame:000000000000A810                 db  13h
.eh_frame:000000000000A811                 db    0
.eh_frame:000000000000A812                 db    0
.eh_frame:000000000000A813                 db    0
.eh_frame:000000000000A814                 db    0
.eh_frame:000000000000A815                 db  41h ; A
.eh_frame:000000000000A816                 db  0Eh
.eh_frame:000000000000A817                 db  10h
.eh_frame:000000000000A818                 db  83h
.eh_frame:000000000000A819                 db    2
.eh_frame:000000000000A81A                 db  50h ; P
.eh_frame:000000000000A81B                 db  0Eh
.eh_frame:000000000000A81C                 db    8
.eh_frame:000000000000A81D                 db    0
.eh_frame:000000000000A81E                 db    0
.eh_frame:000000000000A81F                 db    0
.eh_frame:000000000000A820                 db  14h
.eh_frame:000000000000A821                 db    0
.eh_frame:000000000000A822                 db    0
.eh_frame:000000000000A823                 db    0
.eh_frame:000000000000A824                 db  7Ch ; |
.eh_frame:000000000000A825                 db  0Bh
.eh_frame:000000000000A826                 db    0
.eh_frame:000000000000A827                 db    0
.eh_frame:000000000000A828                 db  68h ; h
.eh_frame:000000000000A829                 db 0B3h
.eh_frame:000000000000A82A                 db 0FFh
.eh_frame:000000000000A82B                 db 0FFh
.eh_frame:000000000000A82C                 db  35h ; 5
.eh_frame:000000000000A82D                 db    0
.eh_frame:000000000000A82E                 db    0
.eh_frame:000000000000A82F                 db    0
.eh_frame:000000000000A830                 db    0
.eh_frame:000000000000A831                 db  4Bh ; K
.eh_frame:000000000000A832                 db  0Eh
.eh_frame:000000000000A833                 db  10h
.eh_frame:000000000000A834                 db    0
.eh_frame:000000000000A835                 db    0
.eh_frame:000000000000A836                 db    0
.eh_frame:000000000000A837                 db    0
.eh_frame:000000000000A838                 db  3Ch ; <
.eh_frame:000000000000A839                 db    0
.eh_frame:000000000000A83A                 db    0
.eh_frame:000000000000A83B                 db    0
.eh_frame:000000000000A83C                 db  94h
.eh_frame:000000000000A83D                 db  0Bh
.eh_frame:000000000000A83E                 db    0
.eh_frame:000000000000A83F                 db    0
.eh_frame:000000000000A840                 db  90h
.eh_frame:000000000000A841                 db 0B3h
.eh_frame:000000000000A842                 db 0FFh
.eh_frame:000000000000A843                 db 0FFh
.eh_frame:000000000000A844                 db  83h
.eh_frame:000000000000A845                 db    0
.eh_frame:000000000000A846                 db    0
.eh_frame:000000000000A847                 db    0
.eh_frame:000000000000A848                 db    0
.eh_frame:000000000000A849                 db  42h ; B
.eh_frame:000000000000A84A                 db  0Eh
.eh_frame:000000000000A84B                 db  10h
.eh_frame:000000000000A84C                 db  8Dh
.eh_frame:000000000000A84D                 db    2
.eh_frame:000000000000A84E                 db  42h ; B
.eh_frame:000000000000A84F                 db  0Eh
.eh_frame:000000000000A850                 db  18h
.eh_frame:000000000000A851                 db  8Ch
.eh_frame:000000000000A852                 db    3
.eh_frame:000000000000A853                 db  44h ; D
.eh_frame:000000000000A854                 db  0Eh
.eh_frame:000000000000A855                 db  20h
.eh_frame:000000000000A856                 db  86h
.eh_frame:000000000000A857                 db    4
.eh_frame:000000000000A858                 db  41h ; A
.eh_frame:000000000000A859                 db  0Eh
.eh_frame:000000000000A85A                 db  28h ; (
.eh_frame:000000000000A85B                 db  83h
.eh_frame:000000000000A85C                 db    5
.eh_frame:000000000000A85D                 db  4Ah ; J
.eh_frame:000000000000A85E                 db  0Eh
.eh_frame:000000000000A85F                 db  40h ; @
.eh_frame:000000000000A860                 db    2
.eh_frame:000000000000A861                 db  64h ; d
.eh_frame:000000000000A862                 db  0Ah
.eh_frame:000000000000A863                 db  0Eh
.eh_frame:000000000000A864                 db  28h ; (
.eh_frame:000000000000A865                 db  41h ; A
.eh_frame:000000000000A866                 db  0Eh
.eh_frame:000000000000A867                 db  20h
.eh_frame:000000000000A868                 db  41h ; A
.eh_frame:000000000000A869                 db  0Eh
.eh_frame:000000000000A86A                 db  18h
.eh_frame:000000000000A86B                 db  42h ; B
.eh_frame:000000000000A86C                 db  0Eh
.eh_frame:000000000000A86D                 db  10h
.eh_frame:000000000000A86E                 db  42h ; B
.eh_frame:000000000000A86F                 db  0Eh
.eh_frame:000000000000A870                 db    8
.eh_frame:000000000000A871                 db  41h ; A
.eh_frame:000000000000A872                 db  0Bh
.eh_frame:000000000000A873                 db    0
.eh_frame:000000000000A874                 db    0
.eh_frame:000000000000A875                 db    0
.eh_frame:000000000000A876                 db    0
.eh_frame:000000000000A877                 db    0
.eh_frame:000000000000A878                 db  3Ch ; <
.eh_frame:000000000000A879                 db    0
.eh_frame:000000000000A87A                 db    0
.eh_frame:000000000000A87B                 db    0
.eh_frame:000000000000A87C                 db 0D4h
.eh_frame:000000000000A87D                 db  0Bh
.eh_frame:000000000000A87E                 db    0
.eh_frame:000000000000A87F                 db    0
.eh_frame:000000000000A880                 db 0E0h
.eh_frame:000000000000A881                 db 0B3h
.eh_frame:000000000000A882                 db 0FFh
.eh_frame:000000000000A883                 db 0FFh
.eh_frame:000000000000A884                 db 0F2h
.eh_frame:000000000000A885                 db    0
.eh_frame:000000000000A886                 db    0
.eh_frame:000000000000A887                 db    0
.eh_frame:000000000000A888                 db    0
.eh_frame:000000000000A889                 db  42h ; B
.eh_frame:000000000000A88A                 db  0Eh
.eh_frame:000000000000A88B                 db  10h
.eh_frame:000000000000A88C                 db  8Dh
.eh_frame:000000000000A88D                 db    2
.eh_frame:000000000000A88E                 db  42h ; B
.eh_frame:000000000000A88F                 db  0Eh
.eh_frame:000000000000A890                 db  18h
.eh_frame:000000000000A891                 db  8Ch
.eh_frame:000000000000A892                 db    3
.eh_frame:000000000000A893                 db  44h ; D
.eh_frame:000000000000A894                 db  0Eh
.eh_frame:000000000000A895                 db  20h
.eh_frame:000000000000A896                 db  86h
.eh_frame:000000000000A897                 db    4
.eh_frame:000000000000A898                 db  41h ; A
.eh_frame:000000000000A899                 db  0Eh
.eh_frame:000000000000A89A                 db  28h ; (
.eh_frame:000000000000A89B                 db  83h
.eh_frame:000000000000A89C                 db    5
.eh_frame:000000000000A89D                 db  4Ah ; J
.eh_frame:000000000000A89E                 db  0Eh
.eh_frame:000000000000A89F                 db 0A0h
.eh_frame:000000000000A8A0                 db  10h
.eh_frame:000000000000A8A1                 db    2
.eh_frame:000000000000A8A2                 db  8Fh
.eh_frame:000000000000A8A3                 db  0Ah
.eh_frame:000000000000A8A4                 db  0Eh
.eh_frame:000000000000A8A5                 db  28h ; (
.eh_frame:000000000000A8A6                 db  41h ; A
.eh_frame:000000000000A8A7                 db  0Eh
.eh_frame:000000000000A8A8                 db  20h
.eh_frame:000000000000A8A9                 db  41h ; A
.eh_frame:000000000000A8AA                 db  0Eh
.eh_frame:000000000000A8AB                 db  18h
.eh_frame:000000000000A8AC                 db  42h ; B
.eh_frame:000000000000A8AD                 db  0Eh
.eh_frame:000000000000A8AE                 db  10h
.eh_frame:000000000000A8AF                 db  42h ; B
.eh_frame:000000000000A8B0                 db  0Eh
.eh_frame:000000000000A8B1                 db    8
.eh_frame:000000000000A8B2                 db  48h ; H
.eh_frame:000000000000A8B3                 db  0Bh
.eh_frame:000000000000A8B4                 db    0
.eh_frame:000000000000A8B5                 db    0
.eh_frame:000000000000A8B6                 db    0
.eh_frame:000000000000A8B7                 db    0
.eh_frame:000000000000A8B8                 db  4Ch ; L
.eh_frame:000000000000A8B9                 db    0
.eh_frame:000000000000A8BA                 db    0
.eh_frame:000000000000A8BB                 db    0
.eh_frame:000000000000A8BC                 db  14h
.eh_frame:000000000000A8BD                 db  0Ch
.eh_frame:000000000000A8BE                 db    0
.eh_frame:000000000000A8BF                 db    0
.eh_frame:000000000000A8C0                 db 0A0h
.eh_frame:000000000000A8C1                 db 0B4h
.eh_frame:000000000000A8C2                 db 0FFh
.eh_frame:000000000000A8C3                 db 0FFh
.eh_frame:000000000000A8C4                 db  7Dh ; }
.eh_frame:000000000000A8C5                 db    0
.eh_frame:000000000000A8C6                 db    0
.eh_frame:000000000000A8C7                 db    0
.eh_frame:000000000000A8C8                 db    0
.eh_frame:000000000000A8C9                 db  42h ; B
.eh_frame:000000000000A8CA                 db  0Eh
.eh_frame:000000000000A8CB                 db  10h
.eh_frame:000000000000A8CC                 db  8Ch
.eh_frame:000000000000A8CD                 db    2
.eh_frame:000000000000A8CE                 db  41h ; A
.eh_frame:000000000000A8CF                 db  0Eh
.eh_frame:000000000000A8D0                 db  18h
.eh_frame:000000000000A8D1                 db  86h
.eh_frame:000000000000A8D2                 db    3
.eh_frame:000000000000A8D3                 db  44h ; D
.eh_frame:000000000000A8D4                 db  0Eh
.eh_frame:000000000000A8D5                 db  20h
.eh_frame:000000000000A8D6                 db  83h
.eh_frame:000000000000A8D7                 db    4
.eh_frame:000000000000A8D8                 db  69h ; i
.eh_frame:000000000000A8D9                 db  0Ah
.eh_frame:000000000000A8DA                 db  0Eh
.eh_frame:000000000000A8DB                 db  18h
.eh_frame:000000000000A8DC                 db  41h ; A
.eh_frame:000000000000A8DD                 db  0Eh
.eh_frame:000000000000A8DE                 db  10h
.eh_frame:000000000000A8DF                 db  42h ; B
.eh_frame:000000000000A8E0                 db  0Eh
.eh_frame:000000000000A8E1                 db    8
.eh_frame:000000000000A8E2                 db  45h ; E
.eh_frame:000000000000A8E3                 db  0Bh
.eh_frame:000000000000A8E4                 db  55h ; U
.eh_frame:000000000000A8E5                 db  0Ah
.eh_frame:000000000000A8E6                 db  0Eh
.eh_frame:000000000000A8E7                 db  18h
.eh_frame:000000000000A8E8                 db  41h ; A
.eh_frame:000000000000A8E9                 db  0Eh
.eh_frame:000000000000A8EA                 db  10h
.eh_frame:000000000000A8EB                 db  42h ; B
.eh_frame:000000000000A8EC                 db  0Eh
.eh_frame:000000000000A8ED                 db    8
.eh_frame:000000000000A8EE                 db  48h ; H
.eh_frame:000000000000A8EF                 db  0Bh
.eh_frame:000000000000A8F0                 db  41h ; A
.eh_frame:000000000000A8F1                 db  0Ah
.eh_frame:000000000000A8F2                 db  0Eh
.eh_frame:000000000000A8F3                 db  18h
.eh_frame:000000000000A8F4                 db  46h ; F
.eh_frame:000000000000A8F5                 db  0Eh
.eh_frame:000000000000A8F6                 db  10h
.eh_frame:000000000000A8F7                 db  42h ; B
.eh_frame:000000000000A8F8                 db  0Eh
.eh_frame:000000000000A8F9                 db    8
.eh_frame:000000000000A8FA                 db  47h ; G
.eh_frame:000000000000A8FB                 db  0Bh
.eh_frame:000000000000A8FC                 db  49h ; I
.eh_frame:000000000000A8FD                 db  0Eh
.eh_frame:000000000000A8FE                 db  18h
.eh_frame:000000000000A8FF                 db  41h ; A
.eh_frame:000000000000A900                 db  0Eh
.eh_frame:000000000000A901                 db  10h
.eh_frame:000000000000A902                 db  42h ; B
.eh_frame:000000000000A903                 db  0Eh
.eh_frame:000000000000A904                 db    8
.eh_frame:000000000000A905                 db    0
.eh_frame:000000000000A906                 db    0
.eh_frame:000000000000A907                 db    0
.eh_frame:000000000000A908                 db  1Ch
.eh_frame:000000000000A909                 db    0
.eh_frame:000000000000A90A                 db    0
.eh_frame:000000000000A90B                 db    0
.eh_frame:000000000000A90C                 db  64h ; d
.eh_frame:000000000000A90D                 db  0Ch
.eh_frame:000000000000A90E                 db    0
.eh_frame:000000000000A90F                 db    0
.eh_frame:000000000000A910                 db 0D0h
.eh_frame:000000000000A911                 db 0B4h
.eh_frame:000000000000A912                 db 0FFh
.eh_frame:000000000000A913                 db 0FFh
.eh_frame:000000000000A914                 db  6Eh ; n
.eh_frame:000000000000A915                 db    0
.eh_frame:000000000000A916                 db    0
.eh_frame:000000000000A917                 db    0
.eh_frame:000000000000A918                 db    0
.eh_frame:000000000000A919                 db  44h ; D
.eh_frame:000000000000A91A                 db  0Eh
.eh_frame:000000000000A91B                 db  60h ; `
.eh_frame:000000000000A91C                 db  7Fh ; 
.eh_frame:000000000000A91D                 db  0Ah
.eh_frame:000000000000A91E                 db  0Eh
.eh_frame:000000000000A91F                 db    8
.eh_frame:000000000000A920                 db  45h ; E
.eh_frame:000000000000A921                 db  0Bh
.eh_frame:000000000000A922                 db    0
.eh_frame:000000000000A923                 db    0
.eh_frame:000000000000A924                 db    0
.eh_frame:000000000000A925                 db    0
.eh_frame:000000000000A926                 db    0
.eh_frame:000000000000A927                 db    0
.eh_frame:000000000000A928                 db  1Ch
.eh_frame:000000000000A929                 db    0
.eh_frame:000000000000A92A                 db    0
.eh_frame:000000000000A92B                 db    0
.eh_frame:000000000000A92C                 db  84h
.eh_frame:000000000000A92D                 db  0Ch
.eh_frame:000000000000A92E                 db    0
.eh_frame:000000000000A92F                 db    0
.eh_frame:000000000000A930                 db  20h
.eh_frame:000000000000A931                 db 0B5h
.eh_frame:000000000000A932                 db 0FFh
.eh_frame:000000000000A933                 db 0FFh
.eh_frame:000000000000A934                 db  60h ; `
.eh_frame:000000000000A935                 db    0
.eh_frame:000000000000A936                 db    0
.eh_frame:000000000000A937                 db    0
.eh_frame:000000000000A938                 db    0
.eh_frame:000000000000A939                 db  44h ; D
.eh_frame:000000000000A93A                 db  0Eh
.eh_frame:000000000000A93B                 db  10h
.eh_frame:000000000000A93C                 db  75h ; u
.eh_frame:000000000000A93D                 db  0Ah
.eh_frame:000000000000A93E                 db  0Eh
.eh_frame:000000000000A93F                 db    8
.eh_frame:000000000000A940                 db  47h ; G
.eh_frame:000000000000A941                 db  0Bh
.eh_frame:000000000000A942                 db  5Fh ; _
.eh_frame:000000000000A943                 db  0Eh
.eh_frame:000000000000A944                 db    8
.eh_frame:000000000000A945                 db    0
.eh_frame:000000000000A946                 db    0
.eh_frame:000000000000A947                 db    0
.eh_frame:000000000000A948                 db  1Ch
.eh_frame:000000000000A949                 db    0
.eh_frame:000000000000A94A                 db    0
.eh_frame:000000000000A94B                 db    0
.eh_frame:000000000000A94C                 db 0A4h
.eh_frame:000000000000A94D                 db  0Ch
.eh_frame:000000000000A94E                 db    0
.eh_frame:000000000000A94F                 db    0
.eh_frame:000000000000A950                 db  60h ; `
.eh_frame:000000000000A951                 db 0B5h
.eh_frame:000000000000A952                 db 0FFh
.eh_frame:000000000000A953                 db 0FFh
.eh_frame:000000000000A954                 db  3Ch ; <
.eh_frame:000000000000A955                 db    0
.eh_frame:000000000000A956                 db    0
.eh_frame:000000000000A957                 db    0
.eh_frame:000000000000A958                 db    0
.eh_frame:000000000000A959                 db  44h ; D
.eh_frame:000000000000A95A                 db  0Eh
.eh_frame:000000000000A95B                 db  10h
.eh_frame:000000000000A95C                 db  61h ; a
.eh_frame:000000000000A95D                 db  0Ah
.eh_frame:000000000000A95E                 db  0Eh
.eh_frame:000000000000A95F                 db    8
.eh_frame:000000000000A960                 db  4Bh ; K
.eh_frame:000000000000A961                 db  0Bh
.eh_frame:000000000000A962                 db  4Bh ; K
.eh_frame:000000000000A963                 db  0Eh
.eh_frame:000000000000A964                 db    8
.eh_frame:000000000000A965                 db    0
.eh_frame:000000000000A966                 db    0
.eh_frame:000000000000A967                 db    0
.eh_frame:000000000000A968                 db  4Ch ; L
.eh_frame:000000000000A969                 db    0
.eh_frame:000000000000A96A                 db    0
.eh_frame:000000000000A96B                 db    0
.eh_frame:000000000000A96C                 db 0C4h
.eh_frame:000000000000A96D                 db  0Ch
.eh_frame:000000000000A96E                 db    0
.eh_frame:000000000000A96F                 db    0
.eh_frame:000000000000A970                 db  80h
.eh_frame:000000000000A971                 db 0B5h
.eh_frame:000000000000A972                 db 0FFh
.eh_frame:000000000000A973                 db 0FFh
.eh_frame:000000000000A974                 db  68h ; h
.eh_frame:000000000000A975                 db    1
.eh_frame:000000000000A976                 db    0
.eh_frame:000000000000A977                 db    0
.eh_frame:000000000000A978                 db    0
.eh_frame:000000000000A979                 db  42h ; B
.eh_frame:000000000000A97A                 db  0Eh
.eh_frame:000000000000A97B                 db  10h
.eh_frame:000000000000A97C                 db  8Fh
.eh_frame:000000000000A97D                 db    2
.eh_frame:000000000000A97E                 db  42h ; B
.eh_frame:000000000000A97F                 db  0Eh
.eh_frame:000000000000A980                 db  18h
.eh_frame:000000000000A981                 db  8Eh
.eh_frame:000000000000A982                 db    3
.eh_frame:000000000000A983                 db  45h ; E
.eh_frame:000000000000A984                 db  0Eh
.eh_frame:000000000000A985                 db  20h
.eh_frame:000000000000A986                 db  8Dh
.eh_frame:000000000000A987                 db    4
.eh_frame:000000000000A988                 db  42h ; B
.eh_frame:000000000000A989                 db  0Eh
.eh_frame:000000000000A98A                 db  28h ; (
.eh_frame:000000000000A98B                 db  8Ch
.eh_frame:000000000000A98C                 db    5
.eh_frame:000000000000A98D                 db  44h ; D
.eh_frame:000000000000A98E                 db  0Eh
.eh_frame:000000000000A98F                 db  30h ; 0
.eh_frame:000000000000A990                 db  86h
.eh_frame:000000000000A991                 db    6
.eh_frame:000000000000A992                 db  41h ; A
.eh_frame:000000000000A993                 db  0Eh
.eh_frame:000000000000A994                 db  38h ; 8
.eh_frame:000000000000A995                 db  83h
.eh_frame:000000000000A996                 db    7
.eh_frame:000000000000A997                 db  4Dh ; M
.eh_frame:000000000000A998                 db  0Eh
.eh_frame:000000000000A999                 db  60h ; `
.eh_frame:000000000000A99A                 db    2
.eh_frame:000000000000A99B                 db 0C5h
.eh_frame:000000000000A99C                 db  0Ah
.eh_frame:000000000000A99D                 db  0Eh
.eh_frame:000000000000A99E                 db  38h ; 8
.eh_frame:000000000000A99F                 db  41h ; A
.eh_frame:000000000000A9A0                 db  0Eh
.eh_frame:000000000000A9A1                 db  30h ; 0
.eh_frame:000000000000A9A2                 db  41h ; A
.eh_frame:000000000000A9A3                 db  0Eh
.eh_frame:000000000000A9A4                 db  28h ; (
.eh_frame:000000000000A9A5                 db  42h ; B
.eh_frame:000000000000A9A6                 db  0Eh
.eh_frame:000000000000A9A7                 db  20h
.eh_frame:000000000000A9A8                 db  42h ; B
.eh_frame:000000000000A9A9                 db  0Eh
.eh_frame:000000000000A9AA                 db  18h
.eh_frame:000000000000A9AB                 db  42h ; B
.eh_frame:000000000000A9AC                 db  0Eh
.eh_frame:000000000000A9AD                 db  10h
.eh_frame:000000000000A9AE                 db  42h ; B
.eh_frame:000000000000A9AF                 db  0Eh
.eh_frame:000000000000A9B0                 db    8
.eh_frame:000000000000A9B1                 db  44h ; D
.eh_frame:000000000000A9B2                 db  0Bh
.eh_frame:000000000000A9B3                 db    0
.eh_frame:000000000000A9B4                 db    0
.eh_frame:000000000000A9B5                 db    0
.eh_frame:000000000000A9B6                 db    0
.eh_frame:000000000000A9B7                 db    0
.eh_frame:000000000000A9B8                 db  4Ch ; L
.eh_frame:000000000000A9B9                 db    0
.eh_frame:000000000000A9BA                 db    0
.eh_frame:000000000000A9BB                 db    0
.eh_frame:000000000000A9BC                 db  14h
.eh_frame:000000000000A9BD                 db  0Dh
.eh_frame:000000000000A9BE                 db    0
.eh_frame:000000000000A9BF                 db    0
.eh_frame:000000000000A9C0                 db 0A0h
.eh_frame:000000000000A9C1                 db 0B6h
.eh_frame:000000000000A9C2                 db 0FFh
.eh_frame:000000000000A9C3                 db 0FFh
.eh_frame:000000000000A9C4                 db  15h
.eh_frame:000000000000A9C5                 db    2
.eh_frame:000000000000A9C6                 db    0
.eh_frame:000000000000A9C7                 db    0
.eh_frame:000000000000A9C8                 db    0
.eh_frame:000000000000A9C9                 db  42h ; B
.eh_frame:000000000000A9CA                 db  0Eh
.eh_frame:000000000000A9CB                 db  10h
.eh_frame:000000000000A9CC                 db  8Fh
.eh_frame:000000000000A9CD                 db    2
.eh_frame:000000000000A9CE                 db  42h ; B
.eh_frame:000000000000A9CF                 db  0Eh
.eh_frame:000000000000A9D0                 db  18h
.eh_frame:000000000000A9D1                 db  8Eh
.eh_frame:000000000000A9D2                 db    3
.eh_frame:000000000000A9D3                 db  45h ; E
.eh_frame:000000000000A9D4                 db  0Eh
.eh_frame:000000000000A9D5                 db  20h
.eh_frame:000000000000A9D6                 db  8Dh
.eh_frame:000000000000A9D7                 db    4
.eh_frame:000000000000A9D8                 db  42h ; B
.eh_frame:000000000000A9D9                 db  0Eh
.eh_frame:000000000000A9DA                 db  28h ; (
.eh_frame:000000000000A9DB                 db  8Ch
.eh_frame:000000000000A9DC                 db    5
.eh_frame:000000000000A9DD                 db  44h ; D
.eh_frame:000000000000A9DE                 db  0Eh
.eh_frame:000000000000A9DF                 db  30h ; 0
.eh_frame:000000000000A9E0                 db  86h
.eh_frame:000000000000A9E1                 db    6
.eh_frame:000000000000A9E2                 db  41h ; A
.eh_frame:000000000000A9E3                 db  0Eh
.eh_frame:000000000000A9E4                 db  38h ; 8
.eh_frame:000000000000A9E5                 db  83h
.eh_frame:000000000000A9E6                 db    7
.eh_frame:000000000000A9E7                 db  4Fh ; O
.eh_frame:000000000000A9E8                 db  0Eh
.eh_frame:000000000000A9E9                 db 0F0h
.eh_frame:000000000000A9EA                 db    1
.eh_frame:000000000000A9EB                 db    2
.eh_frame:000000000000A9EC                 db 0E5h
.eh_frame:000000000000A9ED                 db  0Ah
.eh_frame:000000000000A9EE                 db  0Eh
.eh_frame:000000000000A9EF                 db  38h ; 8
.eh_frame:000000000000A9F0                 db  41h ; A
.eh_frame:000000000000A9F1                 db  0Eh
.eh_frame:000000000000A9F2                 db  30h ; 0
.eh_frame:000000000000A9F3                 db  41h ; A
.eh_frame:000000000000A9F4                 db  0Eh
.eh_frame:000000000000A9F5                 db  28h ; (
.eh_frame:000000000000A9F6                 db  42h ; B
.eh_frame:000000000000A9F7                 db  0Eh
.eh_frame:000000000000A9F8                 db  20h
.eh_frame:000000000000A9F9                 db  42h ; B
.eh_frame:000000000000A9FA                 db  0Eh
.eh_frame:000000000000A9FB                 db  18h
.eh_frame:000000000000A9FC                 db  42h ; B
.eh_frame:000000000000A9FD                 db  0Eh
.eh_frame:000000000000A9FE                 db  10h
.eh_frame:000000000000A9FF                 db  42h ; B
.eh_frame:000000000000AA00                 db  0Eh
.eh_frame:000000000000AA01                 db    8
.eh_frame:000000000000AA02                 db  42h ; B
.eh_frame:000000000000AA03                 db  0Bh
.eh_frame:000000000000AA04                 db    0
.eh_frame:000000000000AA05                 db    0
.eh_frame:000000000000AA06                 db    0
.eh_frame:000000000000AA07                 db    0
.eh_frame:000000000000AA08                 db  34h ; 4
.eh_frame:000000000000AA09                 db    0
.eh_frame:000000000000AA0A                 db    0
.eh_frame:000000000000AA0B                 db    0
.eh_frame:000000000000AA0C                 db  64h ; d
.eh_frame:000000000000AA0D                 db  0Dh
.eh_frame:000000000000AA0E                 db    0
.eh_frame:000000000000AA0F                 db    0
.eh_frame:000000000000AA10                 db  70h ; p
.eh_frame:000000000000AA11                 db 0B8h
.eh_frame:000000000000AA12                 db 0FFh
.eh_frame:000000000000AA13                 db 0FFh
.eh_frame:000000000000AA14                 db  3Fh ; ?
.eh_frame:000000000000AA15                 db    0
.eh_frame:000000000000AA16                 db    0
.eh_frame:000000000000AA17                 db    0
.eh_frame:000000000000AA18                 db    0
.eh_frame:000000000000AA19                 db  42h ; B
.eh_frame:000000000000AA1A                 db  0Eh
.eh_frame:000000000000AA1B                 db  10h
.eh_frame:000000000000AA1C                 db  8Dh
.eh_frame:000000000000AA1D                 db    2
.eh_frame:000000000000AA1E                 db  42h ; B
.eh_frame:000000000000AA1F                 db  0Eh
.eh_frame:000000000000AA20                 db  18h
.eh_frame:000000000000AA21                 db  8Ch
.eh_frame:000000000000AA22                 db    3
.eh_frame:000000000000AA23                 db  41h ; A
.eh_frame:000000000000AA24                 db  0Eh
.eh_frame:000000000000AA25                 db  20h
.eh_frame:000000000000AA26                 db  86h
.eh_frame:000000000000AA27                 db    4
.eh_frame:000000000000AA28                 db  41h ; A
.eh_frame:000000000000AA29                 db  0Eh
.eh_frame:000000000000AA2A                 db  28h ; (
.eh_frame:000000000000AA2B                 db  83h
.eh_frame:000000000000AA2C                 db    5
.eh_frame:000000000000AA2D                 db  46h ; F
.eh_frame:000000000000AA2E                 db  0Eh
.eh_frame:000000000000AA2F                 db  30h ; 0
.eh_frame:000000000000AA30                 db  6Ah ; j
.eh_frame:000000000000AA31                 db  0Eh
.eh_frame:000000000000AA32                 db  28h ; (
.eh_frame:000000000000AA33                 db  43h ; C
.eh_frame:000000000000AA34                 db  0Eh
.eh_frame:000000000000AA35                 db  20h
.eh_frame:000000000000AA36                 db  41h ; A
.eh_frame:000000000000AA37                 db  0Eh
.eh_frame:000000000000AA38                 db  18h
.eh_frame:000000000000AA39                 db  42h ; B
.eh_frame:000000000000AA3A                 db  0Eh
.eh_frame:000000000000AA3B                 db  10h
.eh_frame:000000000000AA3C                 db  42h ; B
.eh_frame:000000000000AA3D                 db  0Eh
.eh_frame:000000000000AA3E                 db    8
.eh_frame:000000000000AA3F                 db    0
.eh_frame:000000000000AA40                 db  34h ; 4
.eh_frame:000000000000AA41                 db    0
.eh_frame:000000000000AA42                 db    0
.eh_frame:000000000000AA43                 db    0
.eh_frame:000000000000AA44                 db  9Ch
.eh_frame:000000000000AA45                 db  0Dh
.eh_frame:000000000000AA46                 db    0
.eh_frame:000000000000AA47                 db    0
.eh_frame:000000000000AA48                 db  78h ; x
.eh_frame:000000000000AA49                 db 0B8h
.eh_frame:000000000000AA4A                 db 0FFh
.eh_frame:000000000000AA4B                 db 0FFh
.eh_frame:000000000000AA4C                 db  7Bh ; {
.eh_frame:000000000000AA4D                 db    0
.eh_frame:000000000000AA4E                 db    0
.eh_frame:000000000000AA4F                 db    0
.eh_frame:000000000000AA50                 db    0
.eh_frame:000000000000AA51                 db  42h ; B
.eh_frame:000000000000AA52                 db  0Eh
.eh_frame:000000000000AA53                 db  10h
.eh_frame:000000000000AA54                 db  8Ch
.eh_frame:000000000000AA55                 db    2
.eh_frame:000000000000AA56                 db  41h ; A
.eh_frame:000000000000AA57                 db  0Eh
.eh_frame:000000000000AA58                 db  18h
.eh_frame:000000000000AA59                 db  86h
.eh_frame:000000000000AA5A                 db    3
.eh_frame:000000000000AA5B                 db  41h ; A
.eh_frame:000000000000AA5C                 db  0Eh
.eh_frame:000000000000AA5D                 db  20h
.eh_frame:000000000000AA5E                 db  83h
.eh_frame:000000000000AA5F                 db    4
.eh_frame:000000000000AA60                 db  7Dh ; }
.eh_frame:000000000000AA61                 db  0Ah
.eh_frame:000000000000AA62                 db  0Eh
.eh_frame:000000000000AA63                 db  18h
.eh_frame:000000000000AA64                 db  41h ; A
.eh_frame:000000000000AA65                 db  0Eh
.eh_frame:000000000000AA66                 db  10h
.eh_frame:000000000000AA67                 db  42h ; B
.eh_frame:000000000000AA68                 db  0Eh
.eh_frame:000000000000AA69                 db    8
.eh_frame:000000000000AA6A                 db  44h ; D
.eh_frame:000000000000AA6B                 db  0Bh
.eh_frame:000000000000AA6C                 db  60h ; `
.eh_frame:000000000000AA6D                 db  0Ah
.eh_frame:000000000000AA6E                 db  0Eh
.eh_frame:000000000000AA6F                 db  18h
.eh_frame:000000000000AA70                 db  41h ; A
.eh_frame:000000000000AA71                 db  0Eh
.eh_frame:000000000000AA72                 db  10h
.eh_frame:000000000000AA73                 db  42h ; B
.eh_frame:000000000000AA74                 db  0Eh
.eh_frame:000000000000AA75                 db    8
.eh_frame:000000000000AA76                 db  45h ; E
.eh_frame:000000000000AA77                 db  0Bh
.eh_frame:000000000000AA78                 db  1Ch
.eh_frame:000000000000AA79                 db    0
.eh_frame:000000000000AA7A                 db    0
.eh_frame:000000000000AA7B                 db    0
.eh_frame:000000000000AA7C                 db 0D4h
.eh_frame:000000000000AA7D                 db  0Dh
.eh_frame:000000000000AA7E                 db    0
.eh_frame:000000000000AA7F                 db    0
.eh_frame:000000000000AA80                 db 0C0h
.eh_frame:000000000000AA81                 db 0B8h
.eh_frame:000000000000AA82                 db 0FFh
.eh_frame:000000000000AA83                 db 0FFh
.eh_frame:000000000000AA84                 db  40h ; @
.eh_frame:000000000000AA85                 db    0
.eh_frame:000000000000AA86                 db    0
.eh_frame:000000000000AA87                 db    0
.eh_frame:000000000000AA88                 db    0
.eh_frame:000000000000AA89                 db  44h ; D
.eh_frame:000000000000AA8A                 db  0Eh
.eh_frame:000000000000AA8B                 db  10h
.eh_frame:000000000000AA8C                 db  83h
.eh_frame:000000000000AA8D                 db    2
.eh_frame:000000000000AA8E                 db  5Ah ; Z
.eh_frame:000000000000AA8F                 db  0Ah
.eh_frame:000000000000AA90                 db  0Eh
.eh_frame:000000000000AA91                 db    8
.eh_frame:000000000000AA92                 db  4Ah ; J
.eh_frame:000000000000AA93                 db  0Bh
.eh_frame:000000000000AA94                 db  53h ; S
.eh_frame:000000000000AA95                 db  0Eh
.eh_frame:000000000000AA96                 db    8
.eh_frame:000000000000AA97                 db    0
.eh_frame:000000000000AA98                 db  2Ch ; ,
.eh_frame:000000000000AA99                 db    0
.eh_frame:000000000000AA9A                 db    0
.eh_frame:000000000000AA9B                 db    0
.eh_frame:000000000000AA9C                 db 0F4h
.eh_frame:000000000000AA9D                 db  0Dh
.eh_frame:000000000000AA9E                 db    0
.eh_frame:000000000000AA9F                 db    0
.eh_frame:000000000000AAA0                 db 0E0h
.eh_frame:000000000000AAA1                 db 0B8h
.eh_frame:000000000000AAA2                 db 0FFh
.eh_frame:000000000000AAA3                 db 0FFh
.eh_frame:000000000000AAA4                 db  57h ; W
.eh_frame:000000000000AAA5                 db    0
.eh_frame:000000000000AAA6                 db    0
.eh_frame:000000000000AAA7                 db    0
.eh_frame:000000000000AAA8                 db    0
.eh_frame:000000000000AAA9                 db  63h ; c
.eh_frame:000000000000AAAA                 db  0Eh
.eh_frame:000000000000AAAB                 db  10h
.eh_frame:000000000000AAAC                 db  8Ch
.eh_frame:000000000000AAAD                 db    2
.eh_frame:000000000000AAAE                 db  41h ; A
.eh_frame:000000000000AAAF                 db  0Eh
.eh_frame:000000000000AAB0                 db  18h
.eh_frame:000000000000AAB1                 db  86h
.eh_frame:000000000000AAB2                 db    3
.eh_frame:000000000000AAB3                 db  44h ; D
.eh_frame:000000000000AAB4                 db  0Eh
.eh_frame:000000000000AAB5                 db  20h
.eh_frame:000000000000AAB6                 db  83h
.eh_frame:000000000000AAB7                 db    4
.eh_frame:000000000000AAB8                 db  6Bh ; k
.eh_frame:000000000000AAB9                 db  0Eh
.eh_frame:000000000000AABA                 db  18h
.eh_frame:000000000000AABB                 db  41h ; A
.eh_frame:000000000000AABC                 db  0Eh
.eh_frame:000000000000AABD                 db  10h
.eh_frame:000000000000AABE                 db  42h ; B
.eh_frame:000000000000AABF                 db  0Eh
.eh_frame:000000000000AAC0                 db    8
.eh_frame:000000000000AAC1                 db    0
.eh_frame:000000000000AAC2                 db    0
.eh_frame:000000000000AAC3                 db    0
.eh_frame:000000000000AAC4                 db    0
.eh_frame:000000000000AAC5                 db    0
.eh_frame:000000000000AAC6                 db    0
.eh_frame:000000000000AAC7                 db    0
.eh_frame:000000000000AAC8                 db  14h
.eh_frame:000000000000AAC9                 db    0
.eh_frame:000000000000AACA                 db    0
.eh_frame:000000000000AACB                 db    0
.eh_frame:000000000000AACC                 db  24h ; $
.eh_frame:000000000000AACD                 db  0Eh
.eh_frame:000000000000AACE                 db    0
.eh_frame:000000000000AACF                 db    0
.eh_frame:000000000000AAD0                 db  10h
.eh_frame:000000000000AAD1                 db 0B9h
.eh_frame:000000000000AAD2                 db 0FFh
.eh_frame:000000000000AAD3                 db 0FFh
.eh_frame:000000000000AAD4                 db    4
.eh_frame:000000000000AAD5                 db    0
.eh_frame:000000000000AAD6                 db    0
.eh_frame:000000000000AAD7                 db    0
.eh_frame:000000000000AAD8                 db    0
.eh_frame:000000000000AAD9                 db    0
.eh_frame:000000000000AADA                 db    0
.eh_frame:000000000000AADB                 db    0
.eh_frame:000000000000AADC                 db    0
.eh_frame:000000000000AADD                 db    0
.eh_frame:000000000000AADE                 db    0
.eh_frame:000000000000AADF                 db    0
.eh_frame:000000000000AAE0                 db  2Ch ; ,
.eh_frame:000000000000AAE1                 db    0
.eh_frame:000000000000AAE2                 db    0
.eh_frame:000000000000AAE3                 db    0
.eh_frame:000000000000AAE4                 db  3Ch ; <
.eh_frame:000000000000AAE5                 db  0Eh
.eh_frame:000000000000AAE6                 db    0
.eh_frame:000000000000AAE7                 db    0
.eh_frame:000000000000AAE8                 db    8
.eh_frame:000000000000AAE9                 db 0B9h
.eh_frame:000000000000AAEA                 db 0FFh
.eh_frame:000000000000AAEB                 db 0FFh
.eh_frame:000000000000AAEC                 db  1Fh
.eh_frame:000000000000AAED                 db  11h
.eh_frame:000000000000AAEE                 db    0
.eh_frame:000000000000AAEF                 db    0
.eh_frame:000000000000AAF0                 db    0
.eh_frame:000000000000AAF1                 db  41h ; A
.eh_frame:000000000000AAF2                 db  0Eh
.eh_frame:000000000000AAF3                 db  10h
.eh_frame:000000000000AAF4                 db  86h
.eh_frame:000000000000AAF5                 db    2
.eh_frame:000000000000AAF6                 db  43h ; C
.eh_frame:000000000000AAF7                 db  0Dh
.eh_frame:000000000000AAF8                 db    6
.eh_frame:000000000000AAF9                 db  48h ; H
.eh_frame:000000000000AAFA                 db  8Fh
.eh_frame:000000000000AAFB                 db    3
.eh_frame:000000000000AAFC                 db  8Eh
.eh_frame:000000000000AAFD                 db    4
.eh_frame:000000000000AAFE                 db  8Dh
.eh_frame:000000000000AAFF                 db    5
.eh_frame:000000000000AB00                 db  8Ch
.eh_frame:000000000000AB01                 db    6
.eh_frame:000000000000AB02                 db  48h ; H
.eh_frame:000000000000AB03                 db  83h
.eh_frame:000000000000AB04                 db    7
.eh_frame:000000000000AB05                 db    3
.eh_frame:000000000000AB06                 db 0EFh
.eh_frame:000000000000AB07                 db    1
.eh_frame:000000000000AB08                 db  0Ah
.eh_frame:000000000000AB09                 db  0Ch
.eh_frame:000000000000AB0A                 db    7
.eh_frame:000000000000AB0B                 db    8
.eh_frame:000000000000AB0C                 db  45h ; E
.eh_frame:000000000000AB0D                 db  0Bh
.eh_frame:000000000000AB0E                 db    0
.eh_frame:000000000000AB0F                 db    0
.eh_frame:000000000000AB10                 db  14h
.eh_frame:000000000000AB11                 db    0
.eh_frame:000000000000AB12                 db    0
.eh_frame:000000000000AB13                 db    0
.eh_frame:000000000000AB14                 db  6Ch ; l
.eh_frame:000000000000AB15                 db  0Eh
.eh_frame:000000000000AB16                 db    0
.eh_frame:000000000000AB17                 db    0
.eh_frame:000000000000AB18                 db 0F8h
.eh_frame:000000000000AB19                 db 0C9h
.eh_frame:000000000000AB1A                 db 0FFh
.eh_frame:000000000000AB1B                 db 0FFh
.eh_frame:000000000000AB1C                 db  0Eh
.eh_frame:000000000000AB1D                 db    0
.eh_frame:000000000000AB1E                 db    0
.eh_frame:000000000000AB1F                 db    0
.eh_frame:000000000000AB20                 db    0
.eh_frame:000000000000AB21                 db    0
.eh_frame:000000000000AB22                 db    0
.eh_frame:000000000000AB23                 db    0
.eh_frame:000000000000AB24                 db    0
.eh_frame:000000000000AB25                 db    0
.eh_frame:000000000000AB26                 db    0
.eh_frame:000000000000AB27                 db    0
.eh_frame:000000000000AB28                 db  34h ; 4
.eh_frame:000000000000AB29                 db    0
.eh_frame:000000000000AB2A                 db    0
.eh_frame:000000000000AB2B                 db    0
.eh_frame:000000000000AB2C                 db  84h
.eh_frame:000000000000AB2D                 db  0Eh
.eh_frame:000000000000AB2E                 db    0
.eh_frame:000000000000AB2F                 db    0
.eh_frame:000000000000AB30                 db 0F0h
.eh_frame:000000000000AB31                 db 0C9h
.eh_frame:000000000000AB32                 db 0FFh
.eh_frame:000000000000AB33                 db 0FFh
.eh_frame:000000000000AB34                 db  7Eh ; ~
.eh_frame:000000000000AB35                 db    2
.eh_frame:000000000000AB36                 db    0
.eh_frame:000000000000AB37                 db    0
.eh_frame:000000000000AB38                 db    0
.eh_frame:000000000000AB39                 db  42h ; B
.eh_frame:000000000000AB3A                 db  0Eh
.eh_frame:000000000000AB3B                 db  10h
.eh_frame:000000000000AB3C                 db  8Ch
.eh_frame:000000000000AB3D                 db    2
.eh_frame:000000000000AB3E                 db  41h ; A
.eh_frame:000000000000AB3F                 db  0Eh
.eh_frame:000000000000AB40                 db  18h
.eh_frame:000000000000AB41                 db  86h
.eh_frame:000000000000AB42                 db    3
.eh_frame:000000000000AB43                 db  43h ; C
.eh_frame:000000000000AB44                 db  0Eh
.eh_frame:000000000000AB45                 db  20h
.eh_frame:000000000000AB46                 db  83h
.eh_frame:000000000000AB47                 db    4
.eh_frame:000000000000AB48                 db  44h ; D
.eh_frame:000000000000AB49                 db  0Eh
.eh_frame:000000000000AB4A                 db  70h ; p
.eh_frame:000000000000AB4B                 db    2
.eh_frame:000000000000AB4C                 db 0F0h
.eh_frame:000000000000AB4D                 db  0Ah
.eh_frame:000000000000AB4E                 db  0Eh
.eh_frame:000000000000AB4F                 db  20h
.eh_frame:000000000000AB50                 db  41h ; A
.eh_frame:000000000000AB51                 db  0Eh
.eh_frame:000000000000AB52                 db  18h
.eh_frame:000000000000AB53                 db  41h ; A
.eh_frame:000000000000AB54                 db  0Eh
.eh_frame:000000000000AB55                 db  10h
.eh_frame:000000000000AB56                 db  42h ; B
.eh_frame:000000000000AB57                 db  0Eh
.eh_frame:000000000000AB58                 db    8
.eh_frame:000000000000AB59                 db  42h ; B
.eh_frame:000000000000AB5A                 db  0Bh
.eh_frame:000000000000AB5B                 db    0
.eh_frame:000000000000AB5C                 db    0
.eh_frame:000000000000AB5D                 db    0
.eh_frame:000000000000AB5E                 db    0
.eh_frame:000000000000AB5F                 db    0
.eh_frame:000000000000AB60                 db  14h
.eh_frame:000000000000AB61                 db    0
.eh_frame:000000000000AB62                 db    0
.eh_frame:000000000000AB63                 db    0
.eh_frame:000000000000AB64                 db 0BCh
.eh_frame:000000000000AB65                 db  0Eh
.eh_frame:000000000000AB66                 db    0
.eh_frame:000000000000AB67                 db    0
.eh_frame:000000000000AB68                 db  38h ; 8
.eh_frame:000000000000AB69                 db 0CCh
.eh_frame:000000000000AB6A                 db 0FFh
.eh_frame:000000000000AB6B                 db 0FFh
.eh_frame:000000000000AB6C                 db 0FEh
.eh_frame:000000000000AB6D                 db    1
.eh_frame:000000000000AB6E                 db    0
.eh_frame:000000000000AB6F                 db    0
.eh_frame:000000000000AB70                 db    0
.eh_frame:000000000000AB71                 db    0
.eh_frame:000000000000AB72                 db    0
.eh_frame:000000000000AB73                 db    0
.eh_frame:000000000000AB74                 db    0
.eh_frame:000000000000AB75                 db    0
.eh_frame:000000000000AB76                 db    0
.eh_frame:000000000000AB77                 db    0
.eh_frame:000000000000AB78                 db  4Ch ; L
.eh_frame:000000000000AB79                 db    0
.eh_frame:000000000000AB7A                 db    0
.eh_frame:000000000000AB7B                 db    0
.eh_frame:000000000000AB7C                 db 0D4h
.eh_frame:000000000000AB7D                 db  0Eh
.eh_frame:000000000000AB7E                 db    0
.eh_frame:000000000000AB7F                 db    0
.eh_frame:000000000000AB80                 db  20h
.eh_frame:000000000000AB81                 db 0CEh
.eh_frame:000000000000AB82                 db 0FFh
.eh_frame:000000000000AB83                 db 0FFh
.eh_frame:000000000000AB84                 db 0ECh
.eh_frame:000000000000AB85                 db  0Ch
.eh_frame:000000000000AB86                 db    0
.eh_frame:000000000000AB87                 db    0
.eh_frame:000000000000AB88                 db    0
.eh_frame:000000000000AB89                 db  42h ; B
.eh_frame:000000000000AB8A                 db  0Eh
.eh_frame:000000000000AB8B                 db  10h
.eh_frame:000000000000AB8C                 db  8Fh
.eh_frame:000000000000AB8D                 db    2
.eh_frame:000000000000AB8E                 db  42h ; B
.eh_frame:000000000000AB8F                 db  0Eh
.eh_frame:000000000000AB90                 db  18h
.eh_frame:000000000000AB91                 db  8Eh
.eh_frame:000000000000AB92                 db    3
.eh_frame:000000000000AB93                 db  46h ; F
.eh_frame:000000000000AB94                 db  0Eh
.eh_frame:000000000000AB95                 db  20h
.eh_frame:000000000000AB96                 db  8Dh
.eh_frame:000000000000AB97                 db    4
.eh_frame:000000000000AB98                 db  42h ; B
.eh_frame:000000000000AB99                 db  0Eh
.eh_frame:000000000000AB9A                 db  28h ; (
.eh_frame:000000000000AB9B                 db  8Ch
.eh_frame:000000000000AB9C                 db    5
.eh_frame:000000000000AB9D                 db  45h ; E
.eh_frame:000000000000AB9E                 db  0Eh
.eh_frame:000000000000AB9F                 db  30h ; 0
.eh_frame:000000000000ABA0                 db  86h
.eh_frame:000000000000ABA1                 db    6
.eh_frame:000000000000ABA2                 db  41h ; A
.eh_frame:000000000000ABA3                 db  0Eh
.eh_frame:000000000000ABA4                 db  38h ; 8
.eh_frame:000000000000ABA5                 db  83h
.eh_frame:000000000000ABA6                 db    7
.eh_frame:000000000000ABA7                 db  52h ; R
.eh_frame:000000000000ABA8                 db  0Eh
.eh_frame:000000000000ABA9                 db  90h
.eh_frame:000000000000ABAA                 db    1
.eh_frame:000000000000ABAB                 db    2
.eh_frame:000000000000ABAC                 db  82h
.eh_frame:000000000000ABAD                 db  0Ah
.eh_frame:000000000000ABAE                 db  0Eh
.eh_frame:000000000000ABAF                 db  38h ; 8
.eh_frame:000000000000ABB0                 db  41h ; A
.eh_frame:000000000000ABB1                 db  0Eh
.eh_frame:000000000000ABB2                 db  30h ; 0
.eh_frame:000000000000ABB3                 db  41h ; A
.eh_frame:000000000000ABB4                 db  0Eh
.eh_frame:000000000000ABB5                 db  28h ; (
.eh_frame:000000000000ABB6                 db  42h ; B
.eh_frame:000000000000ABB7                 db  0Eh
.eh_frame:000000000000ABB8                 db  20h
.eh_frame:000000000000ABB9                 db  42h ; B
.eh_frame:000000000000ABBA                 db  0Eh
.eh_frame:000000000000ABBB                 db  18h
.eh_frame:000000000000ABBC                 db  42h ; B
.eh_frame:000000000000ABBD                 db  0Eh
.eh_frame:000000000000ABBE                 db  10h
.eh_frame:000000000000ABBF                 db  42h ; B
.eh_frame:000000000000ABC0                 db  0Eh
.eh_frame:000000000000ABC1                 db    8
.eh_frame:000000000000ABC2                 db  48h ; H
.eh_frame:000000000000ABC3                 db  0Bh
.eh_frame:000000000000ABC4                 db    0
.eh_frame:000000000000ABC5                 db    0
.eh_frame:000000000000ABC6                 db    0
.eh_frame:000000000000ABC7                 db    0
.eh_frame:000000000000ABC8                 db  44h ; D
.eh_frame:000000000000ABC9                 db    0
.eh_frame:000000000000ABCA                 db    0
.eh_frame:000000000000ABCB                 db    0
.eh_frame:000000000000ABCC                 db  24h ; $
.eh_frame:000000000000ABCD                 db  0Fh
.eh_frame:000000000000ABCE                 db    0
.eh_frame:000000000000ABCF                 db    0
.eh_frame:000000000000ABD0                 db 0C0h
.eh_frame:000000000000ABD1                 db 0DAh
.eh_frame:000000000000ABD2                 db 0FFh
.eh_frame:000000000000ABD3                 db 0FFh
.eh_frame:000000000000ABD4                 db  65h ; e
.eh_frame:000000000000ABD5                 db    0
.eh_frame:000000000000ABD6                 db    0
.eh_frame:000000000000ABD7                 db    0
.eh_frame:000000000000ABD8                 db    0
.eh_frame:000000000000ABD9                 db  42h ; B
.eh_frame:000000000000ABDA                 db  0Eh
.eh_frame:000000000000ABDB                 db  10h
.eh_frame:000000000000ABDC                 db  8Fh
.eh_frame:000000000000ABDD                 db    2
.eh_frame:000000000000ABDE                 db  42h ; B
.eh_frame:000000000000ABDF                 db  0Eh
.eh_frame:000000000000ABE0                 db  18h
.eh_frame:000000000000ABE1                 db  8Eh
.eh_frame:000000000000ABE2                 db    3
.eh_frame:000000000000ABE3                 db  45h ; E
.eh_frame:000000000000ABE4                 db  0Eh
.eh_frame:000000000000ABE5                 db  20h
.eh_frame:000000000000ABE6                 db  8Dh
.eh_frame:000000000000ABE7                 db    4
.eh_frame:000000000000ABE8                 db  42h ; B
.eh_frame:000000000000ABE9                 db  0Eh
.eh_frame:000000000000ABEA                 db  28h ; (
.eh_frame:000000000000ABEB                 db  8Ch
.eh_frame:000000000000ABEC                 db    5
.eh_frame:000000000000ABED                 db  48h ; H
.eh_frame:000000000000ABEE                 db  0Eh
.eh_frame:000000000000ABEF                 db  30h ; 0
.eh_frame:000000000000ABF0                 db  86h
.eh_frame:000000000000ABF1                 db    6
.eh_frame:000000000000ABF2                 db  48h ; H
.eh_frame:000000000000ABF3                 db  0Eh
.eh_frame:000000000000ABF4                 db  38h ; 8
.eh_frame:000000000000ABF5                 db  83h
.eh_frame:000000000000ABF6                 db    7
.eh_frame:000000000000ABF7                 db  4Dh ; M
.eh_frame:000000000000ABF8                 db  0Eh
.eh_frame:000000000000ABF9                 db  40h ; @
.eh_frame:000000000000ABFA                 db  72h ; r
.eh_frame:000000000000ABFB                 db  0Eh
.eh_frame:000000000000ABFC                 db  38h ; 8
.eh_frame:000000000000ABFD                 db  41h ; A
.eh_frame:000000000000ABFE                 db  0Eh
.eh_frame:000000000000ABFF                 db  30h ; 0
.eh_frame:000000000000AC00                 db  41h ; A
.eh_frame:000000000000AC01                 db  0Eh
.eh_frame:000000000000AC02                 db  28h ; (
.eh_frame:000000000000AC03                 db  42h ; B
.eh_frame:000000000000AC04                 db  0Eh
.eh_frame:000000000000AC05                 db  20h
.eh_frame:000000000000AC06                 db  42h ; B
.eh_frame:000000000000AC07                 db  0Eh
.eh_frame:000000000000AC08                 db  18h
.eh_frame:000000000000AC09                 db  42h ; B
.eh_frame:000000000000AC0A                 db  0Eh
.eh_frame:000000000000AC0B                 db  10h
.eh_frame:000000000000AC0C                 db  42h ; B
.eh_frame:000000000000AC0D                 db  0Eh
.eh_frame:000000000000AC0E                 db    8
.eh_frame:000000000000AC0F                 db    0
.eh_frame:000000000000AC10                 db  14h
.eh_frame:000000000000AC11                 db    0
.eh_frame:000000000000AC12                 db    0
.eh_frame:000000000000AC13                 db    0
.eh_frame:000000000000AC14                 db  6Ch ; l
.eh_frame:000000000000AC15                 db  0Fh
.eh_frame:000000000000AC16                 db    0
.eh_frame:000000000000AC17                 db    0
.eh_frame:000000000000AC18                 db 0E8h
.eh_frame:000000000000AC19                 db 0DAh
.eh_frame:000000000000AC1A                 db 0FFh
.eh_frame:000000000000AC1B                 db 0FFh
.eh_frame:000000000000AC1C                 db    2
.eh_frame:000000000000AC1D                 db    0
.eh_frame:000000000000AC1E                 db    0
.eh_frame:000000000000AC1F                 db    0
.eh_frame:000000000000AC20                 db    0
.eh_frame:000000000000AC21                 db    0
.eh_frame:000000000000AC22                 db    0
.eh_frame:000000000000AC23                 db    0
.eh_frame:000000000000AC24                 db    0
.eh_frame:000000000000AC25                 db    0
.eh_frame:000000000000AC26                 db    0
.eh_frame:000000000000AC27                 db    0
.eh_frame:000000000000AC28                 db  10h
.eh_frame:000000000000AC29                 db    0
.eh_frame:000000000000AC2A                 db    0
.eh_frame:000000000000AC2B                 db    0
.eh_frame:000000000000AC2C                 db  84h
.eh_frame:000000000000AC2D                 db  0Fh
.eh_frame:000000000000AC2E                 db    0
.eh_frame:000000000000AC2F                 db    0
.eh_frame:000000000000AC30                 db 0E0h
.eh_frame:000000000000AC31                 db 0DAh
.eh_frame:000000000000AC32                 db 0FFh
.eh_frame:000000000000AC33                 db 0FFh
.eh_frame:000000000000AC34                 db  0Eh
.eh_frame:000000000000AC35                 db    0
.eh_frame:000000000000AC36                 db    0
.eh_frame:000000000000AC37                 db    0
.eh_frame:000000000000AC38                 db    0
.eh_frame:000000000000AC39                 db    0
.eh_frame:000000000000AC3A                 db    0
.eh_frame:000000000000AC3B                 db    0
.eh_frame:000000000000AC3C __FRAME_END__   db    0
.eh_frame:000000000000AC3D                 db    0
.eh_frame:000000000000AC3E                 db    0
.eh_frame:000000000000AC3F                 db    0
.eh_frame:000000000000AC3F _eh_frame       ends
.eh_frame:000000000000AC3F
.init_array:000000000020BA90 ; ELF Initialization Function Table
.init_array:000000000020BA90 ; ===========================================================================
.init_array:000000000020BA90
.init_array:000000000020BA90 ; Segment type: Pure data
.init_array:000000000020BA90 ; Segment permissions: Read/Write
.init_array:000000000020BA90 _init_array     segment qword public 'DATA' use64
.init_array:000000000020BA90                 assume cs:_init_array
.init_array:000000000020BA90                 ;org 20BA90h
.init_array:000000000020BA90 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020BA90                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020BA90                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020BA90 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020BA90
.fini_array:000000000020BA98 ; ELF Termination Function Table
.fini_array:000000000020BA98 ; ===========================================================================
.fini_array:000000000020BA98
.fini_array:000000000020BA98 ; Segment type: Pure data
.fini_array:000000000020BA98 ; Segment permissions: Read/Write
.fini_array:000000000020BA98 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020BA98                 assume cs:_fini_array
.fini_array:000000000020BA98                 ;org 20BA98h
.fini_array:000000000020BA98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020BA98                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020BA98 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020BA98
.data.rel.ro:000000000020BAA0 ; ===========================================================================
.data.rel.ro:000000000020BAA0
.data.rel.ro:000000000020BAA0 ; Segment type: Pure data
.data.rel.ro:000000000020BAA0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020BAA0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020BAA0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020BAA0                 ;org 20BAA0h
.data.rel.ro:000000000020BAA0 ; struct option longopts
.data.rel.ro:000000000020BAA0 longopts        dq offset aContext      ; name
.data.rel.ro:000000000020BAA0                                         ; DATA XREF: main:loc_1B7E↑o
.data.rel.ro:000000000020BAA0                 dd 2                    ; has_arg ; "context"
.data.rel.ro:000000000020BAA0                 db 4 dup(0)
.data.rel.ro:000000000020BAA0                 dq 0                    ; flag
.data.rel.ro:000000000020BAA0                 dd 5Ah                  ; val
.data.rel.ro:000000000020BAA0                 db 4 dup(0)
.data.rel.ro:000000000020BAC0                 dq offset aMode         ; "mode"
.data.rel.ro:000000000020BAC8                 db    1
.data.rel.ro:000000000020BAC9                 db    0
.data.rel.ro:000000000020BACA                 db    0
.data.rel.ro:000000000020BACB                 db    0
.data.rel.ro:000000000020BACC                 db    0
.data.rel.ro:000000000020BACD                 db    0
.data.rel.ro:000000000020BACE                 db    0
.data.rel.ro:000000000020BACF                 db    0
.data.rel.ro:000000000020BAD0                 db    0
.data.rel.ro:000000000020BAD1                 db    0
.data.rel.ro:000000000020BAD2                 db    0
.data.rel.ro:000000000020BAD3                 db    0
.data.rel.ro:000000000020BAD4                 db    0
.data.rel.ro:000000000020BAD5                 db    0
.data.rel.ro:000000000020BAD6                 db    0
.data.rel.ro:000000000020BAD7                 db    0
.data.rel.ro:000000000020BAD8                 db  6Dh ; m
.data.rel.ro:000000000020BAD9                 db    0
.data.rel.ro:000000000020BADA                 db    0
.data.rel.ro:000000000020BADB                 db    0
.data.rel.ro:000000000020BADC                 db    0
.data.rel.ro:000000000020BADD                 db    0
.data.rel.ro:000000000020BADE                 db    0
.data.rel.ro:000000000020BADF                 db    0
.data.rel.ro:000000000020BAE0                 dq offset aParents      ; "parents"
.data.rel.ro:000000000020BAE8                 db    0
.data.rel.ro:000000000020BAE9                 db    0
.data.rel.ro:000000000020BAEA                 db    0
.data.rel.ro:000000000020BAEB                 db    0
.data.rel.ro:000000000020BAEC                 db    0
.data.rel.ro:000000000020BAED                 db    0
.data.rel.ro:000000000020BAEE                 db    0
.data.rel.ro:000000000020BAEF                 db    0
.data.rel.ro:000000000020BAF0                 db    0
.data.rel.ro:000000000020BAF1                 db    0
.data.rel.ro:000000000020BAF2                 db    0
.data.rel.ro:000000000020BAF3                 db    0
.data.rel.ro:000000000020BAF4                 db    0
.data.rel.ro:000000000020BAF5                 db    0
.data.rel.ro:000000000020BAF6                 db    0
.data.rel.ro:000000000020BAF7                 db    0
.data.rel.ro:000000000020BAF8                 db  70h ; p
.data.rel.ro:000000000020BAF9                 db    0
.data.rel.ro:000000000020BAFA                 db    0
.data.rel.ro:000000000020BAFB                 db    0
.data.rel.ro:000000000020BAFC                 db    0
.data.rel.ro:000000000020BAFD                 db    0
.data.rel.ro:000000000020BAFE                 db    0
.data.rel.ro:000000000020BAFF                 db    0
.data.rel.ro:000000000020BB00                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020BB08                 db    0
.data.rel.ro:000000000020BB09                 db    0
.data.rel.ro:000000000020BB0A                 db    0
.data.rel.ro:000000000020BB0B                 db    0
.data.rel.ro:000000000020BB0C                 db    0
.data.rel.ro:000000000020BB0D                 db    0
.data.rel.ro:000000000020BB0E                 db    0
.data.rel.ro:000000000020BB0F                 db    0
.data.rel.ro:000000000020BB10                 db    0
.data.rel.ro:000000000020BB11                 db    0
.data.rel.ro:000000000020BB12                 db    0
.data.rel.ro:000000000020BB13                 db    0
.data.rel.ro:000000000020BB14                 db    0
.data.rel.ro:000000000020BB15                 db    0
.data.rel.ro:000000000020BB16                 db    0
.data.rel.ro:000000000020BB17                 db    0
.data.rel.ro:000000000020BB18                 db  76h ; v
.data.rel.ro:000000000020BB19                 db    0
.data.rel.ro:000000000020BB1A                 db    0
.data.rel.ro:000000000020BB1B                 db    0
.data.rel.ro:000000000020BB1C                 db    0
.data.rel.ro:000000000020BB1D                 db    0
.data.rel.ro:000000000020BB1E                 db    0
.data.rel.ro:000000000020BB1F                 db    0
.data.rel.ro:000000000020BB20                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020BB28                 db    0
.data.rel.ro:000000000020BB29                 db    0
.data.rel.ro:000000000020BB2A                 db    0
.data.rel.ro:000000000020BB2B                 db    0
.data.rel.ro:000000000020BB2C                 db    0
.data.rel.ro:000000000020BB2D                 db    0
.data.rel.ro:000000000020BB2E                 db    0
.data.rel.ro:000000000020BB2F                 db    0
.data.rel.ro:000000000020BB30                 db    0
.data.rel.ro:000000000020BB31                 db    0
.data.rel.ro:000000000020BB32                 db    0
.data.rel.ro:000000000020BB33                 db    0
.data.rel.ro:000000000020BB34                 db    0
.data.rel.ro:000000000020BB35                 db    0
.data.rel.ro:000000000020BB36                 db    0
.data.rel.ro:000000000020BB37                 db    0
.data.rel.ro:000000000020BB38                 db  7Eh ; ~
.data.rel.ro:000000000020BB39                 db 0FFh
.data.rel.ro:000000000020BB3A                 db 0FFh
.data.rel.ro:000000000020BB3B                 db 0FFh
.data.rel.ro:000000000020BB3C                 db    0
.data.rel.ro:000000000020BB3D                 db    0
.data.rel.ro:000000000020BB3E                 db    0
.data.rel.ro:000000000020BB3F                 db    0
.data.rel.ro:000000000020BB40                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020BB48                 db    0
.data.rel.ro:000000000020BB49                 db    0
.data.rel.ro:000000000020BB4A                 db    0
.data.rel.ro:000000000020BB4B                 db    0
.data.rel.ro:000000000020BB4C                 db    0
.data.rel.ro:000000000020BB4D                 db    0
.data.rel.ro:000000000020BB4E                 db    0
.data.rel.ro:000000000020BB4F                 db    0
.data.rel.ro:000000000020BB50                 db    0
.data.rel.ro:000000000020BB51                 db    0
.data.rel.ro:000000000020BB52                 db    0
.data.rel.ro:000000000020BB53                 db    0
.data.rel.ro:000000000020BB54                 db    0
.data.rel.ro:000000000020BB55                 db    0
.data.rel.ro:000000000020BB56                 db    0
.data.rel.ro:000000000020BB57                 db    0
.data.rel.ro:000000000020BB58                 db  7Dh ; }
.data.rel.ro:000000000020BB59                 db 0FFh
.data.rel.ro:000000000020BB5A                 db 0FFh
.data.rel.ro:000000000020BB5B                 db 0FFh
.data.rel.ro:000000000020BB5C                 db    0
.data.rel.ro:000000000020BB5D                 db    0
.data.rel.ro:000000000020BB5E                 db    0
.data.rel.ro:000000000020BB5F                 db    0
.data.rel.ro:000000000020BB60                 db    0
.data.rel.ro:000000000020BB61                 db    0
.data.rel.ro:000000000020BB62                 db    0
.data.rel.ro:000000000020BB63                 db    0
.data.rel.ro:000000000020BB64                 db    0
.data.rel.ro:000000000020BB65                 db    0
.data.rel.ro:000000000020BB66                 db    0
.data.rel.ro:000000000020BB67                 db    0
.data.rel.ro:000000000020BB68                 db    0
.data.rel.ro:000000000020BB69                 db    0
.data.rel.ro:000000000020BB6A                 db    0
.data.rel.ro:000000000020BB6B                 db    0
.data.rel.ro:000000000020BB6C                 db    0
.data.rel.ro:000000000020BB6D                 db    0
.data.rel.ro:000000000020BB6E                 db    0
.data.rel.ro:000000000020BB6F                 db    0
.data.rel.ro:000000000020BB70                 db    0
.data.rel.ro:000000000020BB71                 db    0
.data.rel.ro:000000000020BB72                 db    0
.data.rel.ro:000000000020BB73                 db    0
.data.rel.ro:000000000020BB74                 db    0
.data.rel.ro:000000000020BB75                 db    0
.data.rel.ro:000000000020BB76                 db    0
.data.rel.ro:000000000020BB77                 db    0
.data.rel.ro:000000000020BB78                 db    0
.data.rel.ro:000000000020BB79                 db    0
.data.rel.ro:000000000020BB7A                 db    0
.data.rel.ro:000000000020BB7B                 db    0
.data.rel.ro:000000000020BB7C                 db    0
.data.rel.ro:000000000020BB7D                 db    0
.data.rel.ro:000000000020BB7E                 db    0
.data.rel.ro:000000000020BB7F                 db    0
.data.rel.ro:000000000020BB80                 public quoting_style_args
.data.rel.ro:000000000020BB80 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020BB88                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020BB90                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020BB98                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020BBA0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020BBA8                 dq offset aC_1          ; "c"
.data.rel.ro:000000000020BBB0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020BBB8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020BBC0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020BBC8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020BBD0                 db    0
.data.rel.ro:000000000020BBD1                 db    0
.data.rel.ro:000000000020BBD2                 db    0
.data.rel.ro:000000000020BBD3                 db    0
.data.rel.ro:000000000020BBD4                 db    0
.data.rel.ro:000000000020BBD5                 db    0
.data.rel.ro:000000000020BBD6                 db    0
.data.rel.ro:000000000020BBD7                 db    0
.data.rel.ro:000000000020BBD7 _data_rel_ro    ends
.data.rel.ro:000000000020BBD7
LOAD:000000000020BBD8 ; ELF Dynamic Information
LOAD:000000000020BBD8 ; ===========================================================================
LOAD:000000000020BBD8
LOAD:000000000020BBD8 ; Segment type: Pure data
LOAD:000000000020BBD8 ; Segment permissions: Read/Write
LOAD:000000000020BBD8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020BBD8                 assume cs:LOAD
LOAD:000000000020BBD8                 ;org 20BBD8h
LOAD:000000000020BBD8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020BBD8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020BBD8                                         ; DT_NEEDED libc.so.6
LOAD:000000000020BBE8                 Elf64_Dyn <0Ch, 16E0h>  ; DT_INIT
LOAD:000000000020BBF8                 Elf64_Dyn <0Dh, 8720h>  ; DT_FINI
LOAD:000000000020BC08                 Elf64_Dyn <19h, 20BA90h> ; DT_INIT_ARRAY
LOAD:000000000020BC18                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020BC28                 Elf64_Dyn <1Ah, 20BA98h> ; DT_FINI_ARRAY
LOAD:000000000020BC38                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020BC48                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020BC58                 Elf64_Dyn <5, 9E8h>     ; DT_STRTAB
LOAD:000000000020BC68                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020BC78                 Elf64_Dyn <0Ah, 321h>   ; DT_STRSZ
LOAD:000000000020BC88                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020BC98                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020BCA8                 Elf64_Dyn <3, 20BDC8h>  ; DT_PLTGOT
LOAD:000000000020BCB8                 Elf64_Dyn <2, 5B8h>     ; DT_PLTRELSZ
LOAD:000000000020BCC8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020BCD8                 Elf64_Dyn <17h, 1128h>  ; DT_JMPREL
LOAD:000000000020BCE8                 Elf64_Dyn <7, 0E10h>    ; DT_RELA
LOAD:000000000020BCF8                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:000000000020BD08                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020BD18                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020BD28                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020BD38                 Elf64_Dyn <6FFFFFFEh, 0DA0h> ; DT_VERNEED
LOAD:000000000020BD48                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020BD58                 Elf64_Dyn <6FFFFFF0h, 0D0Ah> ; DT_VERSYM
LOAD:000000000020BD68                 Elf64_Dyn <6FFFFFF9h, 16h> ; DT_RELACOUNT
LOAD:000000000020BD78                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020BD88                 db    0
LOAD:000000000020BD89                 db    0
LOAD:000000000020BD8A                 db    0
LOAD:000000000020BD8B                 db    0
LOAD:000000000020BD8C                 db    0
LOAD:000000000020BD8D                 db    0
LOAD:000000000020BD8E                 db    0
LOAD:000000000020BD8F                 db    0
LOAD:000000000020BD90                 db    0
LOAD:000000000020BD91                 db    0
LOAD:000000000020BD92                 db    0
LOAD:000000000020BD93                 db    0
LOAD:000000000020BD94                 db    0
LOAD:000000000020BD95                 db    0
LOAD:000000000020BD96                 db    0
LOAD:000000000020BD97                 db    0
LOAD:000000000020BD98                 db    0
LOAD:000000000020BD99                 db    0
LOAD:000000000020BD9A                 db    0
LOAD:000000000020BD9B                 db    0
LOAD:000000000020BD9C                 db    0
LOAD:000000000020BD9D                 db    0
LOAD:000000000020BD9E                 db    0
LOAD:000000000020BD9F                 db    0
LOAD:000000000020BDA0                 db    0
LOAD:000000000020BDA1                 db    0
LOAD:000000000020BDA2                 db    0
LOAD:000000000020BDA3                 db    0
LOAD:000000000020BDA4                 db    0
LOAD:000000000020BDA5                 db    0
LOAD:000000000020BDA6                 db    0
LOAD:000000000020BDA7                 db    0
LOAD:000000000020BDA8                 db    0
LOAD:000000000020BDA9                 db    0
LOAD:000000000020BDAA                 db    0
LOAD:000000000020BDAB                 db    0
LOAD:000000000020BDAC                 db    0
LOAD:000000000020BDAD                 db    0
LOAD:000000000020BDAE                 db    0
LOAD:000000000020BDAF                 db    0
LOAD:000000000020BDB0                 db    0
LOAD:000000000020BDB1                 db    0
LOAD:000000000020BDB2                 db    0
LOAD:000000000020BDB3                 db    0
LOAD:000000000020BDB4                 db    0
LOAD:000000000020BDB5                 db    0
LOAD:000000000020BDB6                 db    0
LOAD:000000000020BDB7                 db    0
LOAD:000000000020BDB8                 db    0
LOAD:000000000020BDB9                 db    0
LOAD:000000000020BDBA                 db    0
LOAD:000000000020BDBB                 db    0
LOAD:000000000020BDBC                 db    0
LOAD:000000000020BDBD                 db    0
LOAD:000000000020BDBE                 db    0
LOAD:000000000020BDBF                 db    0
LOAD:000000000020BDC0                 db    0
LOAD:000000000020BDC1                 db    0
LOAD:000000000020BDC2                 db    0
LOAD:000000000020BDC3                 db    0
LOAD:000000000020BDC4                 db    0
LOAD:000000000020BDC5                 db    0
LOAD:000000000020BDC6                 db    0
LOAD:000000000020BDC7                 db    0
LOAD:000000000020BDC7 LOAD            ends
LOAD:000000000020BDC7
.got:000000000020BDC8 ; ===========================================================================
.got:000000000020BDC8
.got:000000000020BDC8 ; Segment type: Pure data
.got:000000000020BDC8 ; Segment permissions: Read/Write
.got:000000000020BDC8 _got            segment qword public 'DATA' use64
.got:000000000020BDC8                 assume cs:_got
.got:000000000020BDC8                 ;org 20BDC8h
.got:000000000020BDC8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020BDD0 qword_20BDD0    dq 0                    ; DATA XREF: sub_1700↑r
.got:000000000020BDD8 qword_20BDD8    dq 0                    ; DATA XREF: sub_1700+6↑r
.got:000000000020BDE0 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000020BDE0                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000020BDE8 raise_ptr       dq offset raise         ; DATA XREF: _raise↑r
.got:000000000020BDF0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020BDF8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020BE00 __errno_location_ptr dq offset __errno_location
.got:000000000020BE00                                         ; DATA XREF: ___errno_location↑r
.got:000000000020BE08 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020BE10 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020BE18 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020BE20 mkdir_ptr       dq offset mkdir         ; DATA XREF: _mkdir↑r
.got:000000000020BE28 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020BE30 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020BE38 __open_2_ptr    dq offset __open_2      ; DATA XREF: ___open_2↑r
.got:000000000020BE40 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020BE48 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020BE48                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020BE50 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020BE58 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020BE58                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020BE60 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020BE68 chdir_ptr       dq offset chdir         ; DATA XREF: _chdir↑r
.got:000000000020BE70 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020BE70                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020BE78 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020BE80 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020BE88 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020BE90 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020BE98 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020BEA0 __assert_fail_ptr dq offset __assert_fail
.got:000000000020BEA0                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020BEA8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020BEB0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020BEB8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020BEC0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020BEC0                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020BEC8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020BED0 umask_ptr       dq offset umask         ; DATA XREF: _umask↑r
.got:000000000020BED8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020BEE0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020BEE8 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020BEF0 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020BEF8 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020BF00 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020BF08 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020BF10 lchown_ptr      dq offset lchown        ; DATA XREF: _lchown↑r
.got:000000000020BF18 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020BF20 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:000000000020BF28 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000020BF28                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000020BF30 chown_ptr       dq offset chown         ; DATA XREF: _chown↑r
.got:000000000020BF38 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020BF40 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020BF48 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020BF50 fchmod_ptr      dq offset fchmod        ; DATA XREF: _fchmod↑r
.got:000000000020BF58 chmod_ptr       dq offset chmod         ; DATA XREF: _chmod↑r
.got:000000000020BF60 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020BF68 waitpid_ptr     dq offset waitpid       ; DATA XREF: _waitpid↑r
.got:000000000020BF70 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020BF78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020BF80 fchown_ptr      dq offset fchown        ; DATA XREF: _fchown↑r
.got:000000000020BF88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020BF90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020BF98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020BFA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020BFA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020BFA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020BFB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020BFB8 fork_ptr        dq offset fork          ; DATA XREF: _fork↑r
.got:000000000020BFC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020BFC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020BFC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020BFC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020BFD0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020BFD0                                         ; DATA XREF: start+24↑r
.got:000000000020BFD8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020BFD8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020BFE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020BFE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020BFE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020BFE8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020BFE8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020BFE8 _got            ends
.got:000000000020BFE8
LOAD:000000000020BFF0 ; ===========================================================================
LOAD:000000000020BFF0
LOAD:000000000020BFF0 ; Segment type: Pure data
LOAD:000000000020BFF0 ; Segment permissions: Read/Write
LOAD:000000000020BFF0 LOAD            segment byte public 'DATA' use64
LOAD:000000000020BFF0                 assume cs:LOAD
LOAD:000000000020BFF0                 ;org 20BFF0h
LOAD:000000000020BFF0                 align 20h
LOAD:000000000020BFF0 LOAD            ends
LOAD:000000000020BFF0
.data:000000000020C000 ; ===========================================================================
.data:000000000020C000
.data:000000000020C000 ; Segment type: Pure data
.data:000000000020C000 ; Segment permissions: Read/Write
.data:000000000020C000 _data           segment align_32 public 'DATA' use64
.data:000000000020C000                 assume cs:_data
.data:000000000020C000                 ;org 20C000h
.data:000000000020C000                 public __data_start ; weak
.data:000000000020C000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020C000                                         ; data_start
.data:000000000020C001                 db    0
.data:000000000020C002                 db    0
.data:000000000020C003                 db    0
.data:000000000020C004                 db    0
.data:000000000020C005                 db    0
.data:000000000020C006                 db    0
.data:000000000020C007                 db    0
.data:000000000020C008                 public __dso_handle
.data:000000000020C008 ; void *_dso_handle
.data:000000000020C008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020C008                                         ; atexit↑r ...
.data:000000000020C010                 public Version
.data:000000000020C010 Version         dq offset a831          ; DATA XREF: main+102↑r
.data:000000000020C010                                         ; "8.31"
.data:000000000020C018                 public exit_failure
.data:000000000020C018 ; int exit_failure
.data:000000000020C018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_25F2↑r
.data:000000000020C018                                         ; xalloc_die+17↑r
.data:000000000020C01C                 align 20h
.data:000000000020C020                 public quote_quoting_options
.data:000000000020C020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020C020                                         ; quote_mem↑o ...
.data:000000000020C021                 db    0
.data:000000000020C022                 db    0
.data:000000000020C023                 db    0
.data:000000000020C024                 db    0
.data:000000000020C025                 db    0
.data:000000000020C026                 db    0
.data:000000000020C027                 db    0
.data:000000000020C028                 db    0
.data:000000000020C029                 db    0
.data:000000000020C02A                 db    0
.data:000000000020C02B                 db    0
.data:000000000020C02C                 db    0
.data:000000000020C02D                 db    0
.data:000000000020C02E                 db    0
.data:000000000020C02F                 db    0
.data:000000000020C030                 db    0
.data:000000000020C031                 db    0
.data:000000000020C032                 db    0
.data:000000000020C033                 db    0
.data:000000000020C034                 db    0
.data:000000000020C035                 db    0
.data:000000000020C036                 db    0
.data:000000000020C037                 db    0
.data:000000000020C038                 db    0
.data:000000000020C039                 db    0
.data:000000000020C03A                 db    0
.data:000000000020C03B                 db    0
.data:000000000020C03C                 db    0
.data:000000000020C03D                 db    0
.data:000000000020C03E                 db    0
.data:000000000020C03F                 db    0
.data:000000000020C040                 db    0
.data:000000000020C041                 db    0
.data:000000000020C042                 db    0
.data:000000000020C043                 db    0
.data:000000000020C044                 db    0
.data:000000000020C045                 db    0
.data:000000000020C046                 db    0
.data:000000000020C047                 db    0
.data:000000000020C048                 db    0
.data:000000000020C049                 db    0
.data:000000000020C04A                 db    0
.data:000000000020C04B                 db    0
.data:000000000020C04C                 db    0
.data:000000000020C04D                 db    0
.data:000000000020C04E                 db    0
.data:000000000020C04F                 db    0
.data:000000000020C050                 db    0
.data:000000000020C051                 db    0
.data:000000000020C052                 db    0
.data:000000000020C053                 db    0
.data:000000000020C054                 db    0
.data:000000000020C055                 db    0
.data:000000000020C056                 db    0
.data:000000000020C057                 db    0
.data:000000000020C058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020C058                                         ; quotearg_n_options:loc_43ED↑r ...
.data:000000000020C05C                 align 20h
.data:000000000020C060 ; void *slotvec
.data:000000000020C060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020C060                                         ; quotearg_n_options+76↑w ...
.data:000000000020C068                 align 10h
.data:000000000020C070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020C070                                         ; quotearg_n_options+187↑r ...
.data:000000000020C078 off_20C078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020C078 _data           ends
.data:000000000020C078
.bss:000000000020C080 ; ===========================================================================
.bss:000000000020C080
.bss:000000000020C080 ; Segment type: Uninitialized
.bss:000000000020C080 ; Segment permissions: Read/Write
.bss:000000000020C080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020C080                 assume cs:_bss
.bss:000000000020C080                 ;org 20C080h
.bss:000000000020C080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020C080                 public __bss_start ; weak
.bss:000000000020C080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000940↑o
.bss:000000000020C080                                         ; LOAD:0000000000000988↑o ...
.bss:000000000020C080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020C080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020C080                                         ; _edata
.bss:000000000020C080                                         ; Copy of shared data
.bss:000000000020C088                 public stdout@@GLIBC_2_2_5
.bss:000000000020C088 ; FILE *stdout
.bss:000000000020C088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000928↑o
.bss:000000000020C088                                         ; main+FB↑r ...
.bss:000000000020C088                                         ; Alternative name is 'stdout'
.bss:000000000020C088                                         ; Copy of shared data
.bss:000000000020C090                 public optind@@GLIBC_2_2_5
.bss:000000000020C090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000009B8↑o
.bss:000000000020C090                                         ; main:loc_1C81↑r ...
.bss:000000000020C090                                         ; Alternative name is 'optind'
.bss:000000000020C090                                         ; Copy of shared data
.bss:000000000020C094                 align 8
.bss:000000000020C098                 public optarg@@GLIBC_2_2_5
.bss:000000000020C098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009D0↑o
.bss:000000000020C098                                         ; main:loc_1BD0↑r ...
.bss:000000000020C098                                         ; Alternative name is 'optarg'
.bss:000000000020C098                                         ; Copy of shared data
.bss:000000000020C0A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020C0A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020C0A0                                         ; DATA XREF: LOAD:0000000000000958↑o
.bss:000000000020C0A0                                         ; LOAD:0000000000000970↑o ...
.bss:000000000020C0A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020C0A0                                         ; Copy of shared data
.bss:000000000020C0A8                 align 20h
.bss:000000000020C0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020C0C0 ; FILE *stderr
.bss:000000000020C0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009A0↑o
.bss:000000000020C0C0                                         ; usage+3D↑r ...
.bss:000000000020C0C0                                         ; Alternative name is 'stderr'
.bss:000000000020C0C0                                         ; Copy of shared data
.bss:000000000020C0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020C0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020C0C9                 align 10h
.bss:000000000020C0D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020C0D0                                         ; close_stdout+1B↑r
.bss:000000000020C0D1                 align 8
.bss:000000000020C0D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020C0D8                                         ; close_stdout+56↑r
.bss:000000000020C0E0                 public program_name
.bss:000000000020C0E0 ; char *program_name
.bss:000000000020C0E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020C0E0                                         ; prog_fprintf+71↑r ...
.bss:000000000020C0E8                 align 20h
.bss:000000000020C100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020C100                                         ; quotearg_free+46↑o ...
.bss:000000000020C101                 db    ? ;
.bss:000000000020C102                 db    ? ;
.bss:000000000020C103                 db    ? ;
.bss:000000000020C104                 db    ? ;
.bss:000000000020C105                 db    ? ;
.bss:000000000020C106                 db    ? ;
.bss:000000000020C107                 db    ? ;
.bss:000000000020C108                 db    ? ;
.bss:000000000020C109                 db    ? ;
.bss:000000000020C10A                 db    ? ;
.bss:000000000020C10B                 db    ? ;
.bss:000000000020C10C                 db    ? ;
.bss:000000000020C10D                 db    ? ;
.bss:000000000020C10E                 db    ? ;
.bss:000000000020C10F                 db    ? ;
.bss:000000000020C110                 db    ? ;
.bss:000000000020C111                 db    ? ;
.bss:000000000020C112                 db    ? ;
.bss:000000000020C113                 db    ? ;
.bss:000000000020C114                 db    ? ;
.bss:000000000020C115                 db    ? ;
.bss:000000000020C116                 db    ? ;
.bss:000000000020C117                 db    ? ;
.bss:000000000020C118                 db    ? ;
.bss:000000000020C119                 db    ? ;
.bss:000000000020C11A                 db    ? ;
.bss:000000000020C11B                 db    ? ;
.bss:000000000020C11C                 db    ? ;
.bss:000000000020C11D                 db    ? ;
.bss:000000000020C11E                 db    ? ;
.bss:000000000020C11F                 db    ? ;
.bss:000000000020C120                 db    ? ;
.bss:000000000020C121                 db    ? ;
.bss:000000000020C122                 db    ? ;
.bss:000000000020C123                 db    ? ;
.bss:000000000020C124                 db    ? ;
.bss:000000000020C125                 db    ? ;
.bss:000000000020C126                 db    ? ;
.bss:000000000020C127                 db    ? ;
.bss:000000000020C128                 db    ? ;
.bss:000000000020C129                 db    ? ;
.bss:000000000020C12A                 db    ? ;
.bss:000000000020C12B                 db    ? ;
.bss:000000000020C12C                 db    ? ;
.bss:000000000020C12D                 db    ? ;
.bss:000000000020C12E                 db    ? ;
.bss:000000000020C12F                 db    ? ;
.bss:000000000020C130                 db    ? ;
.bss:000000000020C131                 db    ? ;
.bss:000000000020C132                 db    ? ;
.bss:000000000020C133                 db    ? ;
.bss:000000000020C134                 db    ? ;
.bss:000000000020C135                 db    ? ;
.bss:000000000020C136                 db    ? ;
.bss:000000000020C137                 db    ? ;
.bss:000000000020C138                 db    ? ;
.bss:000000000020C139                 db    ? ;
.bss:000000000020C13A                 db    ? ;
.bss:000000000020C13B                 db    ? ;
.bss:000000000020C13C                 db    ? ;
.bss:000000000020C13D                 db    ? ;
.bss:000000000020C13E                 db    ? ;
.bss:000000000020C13F                 db    ? ;
.bss:000000000020C140                 db    ? ;
.bss:000000000020C141                 db    ? ;
.bss:000000000020C142                 db    ? ;
.bss:000000000020C143                 db    ? ;
.bss:000000000020C144                 db    ? ;
.bss:000000000020C145                 db    ? ;
.bss:000000000020C146                 db    ? ;
.bss:000000000020C147                 db    ? ;
.bss:000000000020C148                 db    ? ;
.bss:000000000020C149                 db    ? ;
.bss:000000000020C14A                 db    ? ;
.bss:000000000020C14B                 db    ? ;
.bss:000000000020C14C                 db    ? ;
.bss:000000000020C14D                 db    ? ;
.bss:000000000020C14E                 db    ? ;
.bss:000000000020C14F                 db    ? ;
.bss:000000000020C150                 db    ? ;
.bss:000000000020C151                 db    ? ;
.bss:000000000020C152                 db    ? ;
.bss:000000000020C153                 db    ? ;
.bss:000000000020C154                 db    ? ;
.bss:000000000020C155                 db    ? ;
.bss:000000000020C156                 db    ? ;
.bss:000000000020C157                 db    ? ;
.bss:000000000020C158                 db    ? ;
.bss:000000000020C159                 db    ? ;
.bss:000000000020C15A                 db    ? ;
.bss:000000000020C15B                 db    ? ;
.bss:000000000020C15C                 db    ? ;
.bss:000000000020C15D                 db    ? ;
.bss:000000000020C15E                 db    ? ;
.bss:000000000020C15F                 db    ? ;
.bss:000000000020C160                 db    ? ;
.bss:000000000020C161                 db    ? ;
.bss:000000000020C162                 db    ? ;
.bss:000000000020C163                 db    ? ;
.bss:000000000020C164                 db    ? ;
.bss:000000000020C165                 db    ? ;
.bss:000000000020C166                 db    ? ;
.bss:000000000020C167                 db    ? ;
.bss:000000000020C168                 db    ? ;
.bss:000000000020C169                 db    ? ;
.bss:000000000020C16A                 db    ? ;
.bss:000000000020C16B                 db    ? ;
.bss:000000000020C16C                 db    ? ;
.bss:000000000020C16D                 db    ? ;
.bss:000000000020C16E                 db    ? ;
.bss:000000000020C16F                 db    ? ;
.bss:000000000020C170                 db    ? ;
.bss:000000000020C171                 db    ? ;
.bss:000000000020C172                 db    ? ;
.bss:000000000020C173                 db    ? ;
.bss:000000000020C174                 db    ? ;
.bss:000000000020C175                 db    ? ;
.bss:000000000020C176                 db    ? ;
.bss:000000000020C177                 db    ? ;
.bss:000000000020C178                 db    ? ;
.bss:000000000020C179                 db    ? ;
.bss:000000000020C17A                 db    ? ;
.bss:000000000020C17B                 db    ? ;
.bss:000000000020C17C                 db    ? ;
.bss:000000000020C17D                 db    ? ;
.bss:000000000020C17E                 db    ? ;
.bss:000000000020C17F                 db    ? ;
.bss:000000000020C180                 db    ? ;
.bss:000000000020C181                 db    ? ;
.bss:000000000020C182                 db    ? ;
.bss:000000000020C183                 db    ? ;
.bss:000000000020C184                 db    ? ;
.bss:000000000020C185                 db    ? ;
.bss:000000000020C186                 db    ? ;
.bss:000000000020C187                 db    ? ;
.bss:000000000020C188                 db    ? ;
.bss:000000000020C189                 db    ? ;
.bss:000000000020C18A                 db    ? ;
.bss:000000000020C18B                 db    ? ;
.bss:000000000020C18C                 db    ? ;
.bss:000000000020C18D                 db    ? ;
.bss:000000000020C18E                 db    ? ;
.bss:000000000020C18F                 db    ? ;
.bss:000000000020C190                 db    ? ;
.bss:000000000020C191                 db    ? ;
.bss:000000000020C192                 db    ? ;
.bss:000000000020C193                 db    ? ;
.bss:000000000020C194                 db    ? ;
.bss:000000000020C195                 db    ? ;
.bss:000000000020C196                 db    ? ;
.bss:000000000020C197                 db    ? ;
.bss:000000000020C198                 db    ? ;
.bss:000000000020C199                 db    ? ;
.bss:000000000020C19A                 db    ? ;
.bss:000000000020C19B                 db    ? ;
.bss:000000000020C19C                 db    ? ;
.bss:000000000020C19D                 db    ? ;
.bss:000000000020C19E                 db    ? ;
.bss:000000000020C19F                 db    ? ;
.bss:000000000020C1A0                 db    ? ;
.bss:000000000020C1A1                 db    ? ;
.bss:000000000020C1A2                 db    ? ;
.bss:000000000020C1A3                 db    ? ;
.bss:000000000020C1A4                 db    ? ;
.bss:000000000020C1A5                 db    ? ;
.bss:000000000020C1A6                 db    ? ;
.bss:000000000020C1A7                 db    ? ;
.bss:000000000020C1A8                 db    ? ;
.bss:000000000020C1A9                 db    ? ;
.bss:000000000020C1AA                 db    ? ;
.bss:000000000020C1AB                 db    ? ;
.bss:000000000020C1AC                 db    ? ;
.bss:000000000020C1AD                 db    ? ;
.bss:000000000020C1AE                 db    ? ;
.bss:000000000020C1AF                 db    ? ;
.bss:000000000020C1B0                 db    ? ;
.bss:000000000020C1B1                 db    ? ;
.bss:000000000020C1B2                 db    ? ;
.bss:000000000020C1B3                 db    ? ;
.bss:000000000020C1B4                 db    ? ;
.bss:000000000020C1B5                 db    ? ;
.bss:000000000020C1B6                 db    ? ;
.bss:000000000020C1B7                 db    ? ;
.bss:000000000020C1B8                 db    ? ;
.bss:000000000020C1B9                 db    ? ;
.bss:000000000020C1BA                 db    ? ;
.bss:000000000020C1BB                 db    ? ;
.bss:000000000020C1BC                 db    ? ;
.bss:000000000020C1BD                 db    ? ;
.bss:000000000020C1BE                 db    ? ;
.bss:000000000020C1BF                 db    ? ;
.bss:000000000020C1C0                 db    ? ;
.bss:000000000020C1C1                 db    ? ;
.bss:000000000020C1C2                 db    ? ;
.bss:000000000020C1C3                 db    ? ;
.bss:000000000020C1C4                 db    ? ;
.bss:000000000020C1C5                 db    ? ;
.bss:000000000020C1C6                 db    ? ;
.bss:000000000020C1C7                 db    ? ;
.bss:000000000020C1C8                 db    ? ;
.bss:000000000020C1C9                 db    ? ;
.bss:000000000020C1CA                 db    ? ;
.bss:000000000020C1CB                 db    ? ;
.bss:000000000020C1CC                 db    ? ;
.bss:000000000020C1CD                 db    ? ;
.bss:000000000020C1CE                 db    ? ;
.bss:000000000020C1CF                 db    ? ;
.bss:000000000020C1D0                 db    ? ;
.bss:000000000020C1D1                 db    ? ;
.bss:000000000020C1D2                 db    ? ;
.bss:000000000020C1D3                 db    ? ;
.bss:000000000020C1D4                 db    ? ;
.bss:000000000020C1D5                 db    ? ;
.bss:000000000020C1D6                 db    ? ;
.bss:000000000020C1D7                 db    ? ;
.bss:000000000020C1D8                 db    ? ;
.bss:000000000020C1D9                 db    ? ;
.bss:000000000020C1DA                 db    ? ;
.bss:000000000020C1DB                 db    ? ;
.bss:000000000020C1DC                 db    ? ;
.bss:000000000020C1DD                 db    ? ;
.bss:000000000020C1DE                 db    ? ;
.bss:000000000020C1DF                 db    ? ;
.bss:000000000020C1E0                 db    ? ;
.bss:000000000020C1E1                 db    ? ;
.bss:000000000020C1E2                 db    ? ;
.bss:000000000020C1E3                 db    ? ;
.bss:000000000020C1E4                 db    ? ;
.bss:000000000020C1E5                 db    ? ;
.bss:000000000020C1E6                 db    ? ;
.bss:000000000020C1E7                 db    ? ;
.bss:000000000020C1E8                 db    ? ;
.bss:000000000020C1E9                 db    ? ;
.bss:000000000020C1EA                 db    ? ;
.bss:000000000020C1EB                 db    ? ;
.bss:000000000020C1EC                 db    ? ;
.bss:000000000020C1ED                 db    ? ;
.bss:000000000020C1EE                 db    ? ;
.bss:000000000020C1EF                 db    ? ;
.bss:000000000020C1F0                 db    ? ;
.bss:000000000020C1F1                 db    ? ;
.bss:000000000020C1F2                 db    ? ;
.bss:000000000020C1F3                 db    ? ;
.bss:000000000020C1F4                 db    ? ;
.bss:000000000020C1F5                 db    ? ;
.bss:000000000020C1F6                 db    ? ;
.bss:000000000020C1F7                 db    ? ;
.bss:000000000020C1F8                 db    ? ;
.bss:000000000020C1F9                 db    ? ;
.bss:000000000020C1FA                 db    ? ;
.bss:000000000020C1FB                 db    ? ;
.bss:000000000020C1FC                 db    ? ;
.bss:000000000020C1FD                 db    ? ;
.bss:000000000020C1FE                 db    ? ;
.bss:000000000020C1FF                 db    ? ;
.bss:000000000020C200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020C200                                         ; get_quoting_style↑o ...
.bss:000000000020C210 xmmword_20C210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020C210                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020C220 xmmword_20C220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020C220                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020C230 qword_20C230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020C230                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020C238 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020C238                                         ; rpl_fcntl:loc_75AF↑w ...
.bss:000000000020C23C                 align 20h
.bss:000000000020C23C _bss            ends
.bss:000000000020C23C
.prgend:000000000020C240 ; ===========================================================================
.prgend:000000000020C240
.prgend:000000000020C240 ; Segment type: Zero-length
.prgend:000000000020C240 _prgend         segment byte public '' use64
.prgend:000000000020C240 _end            label byte
.prgend:000000000020C240 _prgend         ends
.prgend:000000000020C240
extern:000000000020C248 ; ===========================================================================
extern:000000000020C248
extern:000000000020C248 ; Segment type: Externs
extern:000000000020C248 ; extern
extern:000000000020C248                 extrn __snprintf_chk:near
extern:000000000020C248                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000020C248                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000020C250 ; int raise(int sig)
extern:000000000020C250                 extrn raise:near        ; CODE XREF: _raise↑j
extern:000000000020C250                                         ; DATA XREF: .got:raise_ptr↑o
extern:000000000020C258 ; void free(void *ptr)
extern:000000000020C258                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020C258                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020C260 ; void __noreturn abort(void)
extern:000000000020C260                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020C260                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020C268 ; int *_errno_location(void)
extern:000000000020C268                 extrn __errno_location:near
extern:000000000020C268                                         ; CODE XREF: ___errno_location↑j
extern:000000000020C268                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020C270 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020C270                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020C270                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020C278 ; void __noreturn exit(int status)
extern:000000000020C278                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020C278                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020C280 ; size_t _fpending(FILE *fp)
extern:000000000020C280                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020C280                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020C288 ; int mkdir(const char *path, __mode_t mode)
extern:000000000020C288                 extrn mkdir:near        ; CODE XREF: _mkdir↑j
extern:000000000020C288                                         ; DATA XREF: .got:mkdir_ptr↑o
extern:000000000020C290 ; int fcntl(int fd, int cmd, ...)
extern:000000000020C290                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020C290                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020C298 ; char *textdomain(const char *domainname)
extern:000000000020C298                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020C298                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020C2A0                 extrn __open_2:near     ; CODE XREF: ___open_2↑j
extern:000000000020C2A0                                         ; DATA XREF: .got:__open_2_ptr↑o
extern:000000000020C2A8 ; int fclose(FILE *stream)
extern:000000000020C2A8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020C2A8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020C2B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020C2B0                 extrn bindtextdomain:near
extern:000000000020C2B0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020C2B0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020C2B8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020C2B8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020C2B8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020C2C0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020C2C0                 extrn __ctype_get_mb_cur_max:near
extern:000000000020C2C0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020C2C0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020C2C8 ; size_t strlen(const char *s)
extern:000000000020C2C8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020C2C8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020C2D0 ; int chdir(const char *path)
extern:000000000020C2D0                 extrn chdir:near        ; CODE XREF: _chdir↑j
extern:000000000020C2D0                                         ; DATA XREF: .got:chdir_ptr↑o
extern:000000000020C2D8                 extrn __stack_chk_fail:near
extern:000000000020C2D8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020C2D8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020C2E0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020C2E0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020C2E0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020C2E8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020C2E8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020C2E8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020C2F0 ; int _overflow(_IO_FILE *, int)
extern:000000000020C2F0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020C2F0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020C2F8 ; char *strrchr(const char *s, int c)
extern:000000000020C2F8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020C2F8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020C300 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020C300                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020C300                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020C308 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020C308                 extrn __assert_fail:near
extern:000000000020C308                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020C308                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020C310 ; void *memset(void *s, int c, size_t n)
extern:000000000020C310                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020C310                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020C318 ; int close(int fd)
extern:000000000020C318                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020C318                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020C320 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020C320                 extrn __libc_start_main:near
extern:000000000020C320                                         ; CODE XREF: start+24↑p
extern:000000000020C320                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020C328 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020C328                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020C328                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020C330 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020C330                 extrn fputs_unlocked:near
extern:000000000020C330                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020C330                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020C338 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020C338                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020C338                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020C340 ; __mode_t umask(__mode_t mask)
extern:000000000020C340                 extrn umask:near        ; CODE XREF: _umask↑j
extern:000000000020C340                                         ; DATA XREF: .got:umask_ptr↑o
extern:000000000020C348 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020C348                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020C348                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020C350 ; int fileno(FILE *stream)
extern:000000000020C350                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020C350                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020C358 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020C358                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020C358                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020C360 ; void *malloc(size_t size)
extern:000000000020C360                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020C360                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020C368 ; int fflush(FILE *stream)
extern:000000000020C368                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020C368                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020C370 ; char *nl_langinfo(nl_item item)
extern:000000000020C370                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020C370                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020C378 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020C378                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020C378                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020C380 ; int lchown(const char *file, __uid_t owner, __gid_t group)
extern:000000000020C380                 extrn lchown:near       ; CODE XREF: _lchown↑j
extern:000000000020C380                                         ; DATA XREF: .got:lchown_ptr↑o
extern:000000000020C388 ; int _freading(FILE *fp)
extern:000000000020C388                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020C388                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020C390 ; int fchdir(int fd)
extern:000000000020C390                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:000000000020C390                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:000000000020C398 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020C398                 extrn fwrite_unlocked:near
extern:000000000020C398                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020C398                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020C3A0 ; int chown(const char *file, __uid_t owner, __gid_t group)
extern:000000000020C3A0                 extrn chown:near        ; CODE XREF: _chown↑j
extern:000000000020C3A0                                         ; DATA XREF: .got:chown_ptr↑o
extern:000000000020C3A8 ; void *realloc(void *ptr, size_t size)
extern:000000000020C3A8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020C3A8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020C3B0 ; char *setlocale(int category, const char *locale)
extern:000000000020C3B0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020C3B0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020C3B8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020C3B8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020C3C0 ; int fchmod(int fd, __mode_t mode)
extern:000000000020C3C0                 extrn fchmod:near       ; CODE XREF: _fchmod↑j
extern:000000000020C3C0                                         ; DATA XREF: .got:fchmod_ptr↑o
extern:000000000020C3C8 ; int chmod(const char *file, __mode_t mode)
extern:000000000020C3C8                 extrn chmod:near        ; CODE XREF: _chmod↑j
extern:000000000020C3C8                                         ; DATA XREF: .got:chmod_ptr↑o
extern:000000000020C3D0 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020C3D0                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020C3D0                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020C3D8 ; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
extern:000000000020C3D8                 extrn waitpid:near      ; CODE XREF: _waitpid↑j
extern:000000000020C3D8                                         ; DATA XREF: .got:waitpid_ptr↑o
extern:000000000020C3E0 ; int open(const char *file, int oflag, ...)
extern:000000000020C3E0                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020C3E0                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020C3E8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020C3E8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020C3E8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020C3F0 ; int fchown(int fd, __uid_t owner, __gid_t group)
extern:000000000020C3F0                 extrn fchown:near       ; CODE XREF: _fchown↑j
extern:000000000020C3F0                                         ; DATA XREF: .got:fchown_ptr↑o
extern:000000000020C3F8 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020C3F8                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020C3F8                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020C400 ; void __noreturn exit(int status)
extern:000000000020C400                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020C400                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020C408 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020C408                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020C408                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020C410                 extrn __fprintf_chk:near
extern:000000000020C410                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020C410                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020C418 ; int mbsinit(const mbstate_t *ps)
extern:000000000020C418                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020C418                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020C420 ; int iswprint(wint_t wc)
extern:000000000020C420                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020C420                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020C428 ; int __fastcall __cxa_finalize(void *)
extern:000000000020C428                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020C428                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020C428                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020C430 ; __pid_t fork(void)
extern:000000000020C430                 extrn fork:near         ; CODE XREF: _fork↑j
extern:000000000020C430                                         ; DATA XREF: .got:fork_ptr↑o
extern:000000000020C438 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020C438                 extrn __ctype_b_loc:near
extern:000000000020C438                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020C438                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020C440                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020C440                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020C448                 extrn __gmon_start__:near ; weak
extern:000000000020C448                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020C448                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020C450                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020C450                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020C450
extern:000000000020C450
extern:000000000020C450                 end start
