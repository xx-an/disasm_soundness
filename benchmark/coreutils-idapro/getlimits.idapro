LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 36041F857649A9630349ECCE31F3FF7D91AD77A425EBA42817F34377F2D0CF2E
LOAD:0000000000000000 ; Input MD5    : F1767AFD7FE281A9F77FF416F2279D65
LOAD:0000000000000000 ; Input CRC32  : F0D01386
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/getlimits
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'getlimits.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dtoastr.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'ftoastr.c'
LOAD:0000000000000000 ; Source File : 'ldtoastr.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 29EA0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 74D0h                ; Size in file image
LOAD:00000000000000D8                 dq 74D0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B90h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B90h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4F0h                 ; Size in file image
LOAD:0000000000000110                 dq 6A8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C58h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 6570h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 6570h                ; Physical address
LOAD:00000000000001B0                 dq 284h                 ; Size in file image
LOAD:00000000000001B8                 dq 284h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B90h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B90h              ; Physical address
LOAD:0000000000000220                 dq 470h                 ; Size in file image
LOAD:0000000000000228                 dq 470h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 1Dh, 6Dh, 45h, 18h, 67h, 7Bh, 2Dh, 5Ah, 8, 0E3h, 66h ; Desc
LOAD:0000000000000284                 db 16h, 39h, 0F3h, 2, 9Dh, 73h, 0DAh, 2Dh, 56h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 33h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 33h, 34h, 3Ah
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aSnprintfChk - offset byte_868, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_868, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_868, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_868, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_868, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_868, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_868, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_868, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aPuts - offset byte_868, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aStrtod - offset byte_868, 12h, 0, 0, \ ; "strtod"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_868, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_868, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain - offset byte_868, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aDcgettext - offset byte_868, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_868, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrlen - offset byte_868, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStackChkFail - offset byte_868, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aGetoptLong - offset byte_868, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMbrtowc - offset byte_868, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_868, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_868, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrtof - offset byte_868, 12h, 0, 0, \ ; "strtof"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_868, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aLibcStartMain - offset byte_868, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemcmp - offset byte_868, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFputsUnlocked - offset byte_868, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aCalloc - offset byte_868, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aGmonStart - offset byte_868, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMemcpy - offset byte_868, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFileno - offset byte_868, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMalloc - offset byte_868, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFflush - offset byte_868, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aNlLanginfo - offset byte_868, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFreading - offset byte_868, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aRealloc - offset byte_868, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aSetlocale - offset byte_868, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aPrintfChk - offset byte_868, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aStrtold - offset byte_868, 12h, 0, 0, \ ; "strtold"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aError - offset byte_868, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000688                            0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFseeko - offset byte_868, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aCxaAtexit - offset byte_868, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aExit+1 - offset byte_868, 12h, 0, 0, \ ; "exit"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFwrite - offset byte_868, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFprintfChk - offset byte_868, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aItmRegistertmc - offset byte_868, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMbsinit - offset byte_868, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aIswprint - offset byte_868, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aCxaFinalize - offset byte_868, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aCtypeBLoc - offset byte_868, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aSprintfChk - offset byte_868, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aStdout - offset byte_868, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007A8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000007C0                 Elf64_Sym <offset aProgname - offset byte_868, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000007C0                            offset __bss_start, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aProgramInvocat - offset byte_868, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000007D8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aPrognameFull - offset byte_868, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007F0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_868, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000808                            offset __bss_start, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aOpterr - offset byte_868, 11h, 0, 19h, \ ; "opterr"
LOAD:0000000000000820                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:0000000000000838                 Elf64_Sym <offset aStderr - offset byte_868, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000838                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aOptind - offset byte_868, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000850                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000868 ; ELF String Table
LOAD:0000000000000868 byte_868        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000868                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000869 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B98↓o
LOAD:0000000000000873 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:000000000000087A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000887 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000891 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000899 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000008A1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:00000000000008A8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000008B0 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000008BA aError          db 'error',0            ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008C0 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000008C5 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000008D6 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000008DF aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000008E7 aStrtold        db 'strtold',0          ; DATA XREF: LOAD:0000000000000670↑o
LOAD:00000000000008EF aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000008F5 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:00000000000008F5                                         ; LOAD:00000000000006D0↑o
LOAD:00000000000008FB aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000008FB                                         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000913 aStrtod         db 'strtod',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:000000000000091A aStrtof         db 'strtof',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000921 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000921                                         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000938 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:000000000000093F aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000946 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:000000000000094D aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:000000000000095E aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000965 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000973 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:000000000000097A aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000980 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000987 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:000000000000098E aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000995 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000730↑o
LOAD:000000000000099D aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:00000000000009A9 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000009B7 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000009C2 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:00000000000009C9 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009D8 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000009E4 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009EB aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:00000000000009F2 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:00000000000009FD aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000009FD                                         ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A1B aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000A2A aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A38 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000A38                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000A47 aOpterr         db 'opterr',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000A4E aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A4E                                         ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A60 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000A67 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A76 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000A7B aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A86 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A96 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000AA3 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BA8↓o
LOAD:0000000000000AAD aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000BB8↓o
LOAD:0000000000000AB8 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000BC8↓o
LOAD:0000000000000AC2 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000BD8↓o
LOAD:0000000000000ACE aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000BE8↓o
LOAD:0000000000000ADA aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000ADA                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000AF6 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B05 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B05                                         ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B1F                 align 20h
LOAD:0000000000000B20 ; ELF GNU Symbol Version Table
LOAD:0000000000000B20                 dw 0
LOAD:0000000000000B22                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B24                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B26                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B28                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B2A                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B2C                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B2E                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B30                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B32                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000B34                 dw 2                    ; strtod@@GLIBC_2.2.5
LOAD:0000000000000B36                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B38                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B3A                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B3C                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B3E                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B40                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B42                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B44                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B46                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B48                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B4A                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B4C                 dw 2                    ; strtof@@GLIBC_2.2.5
LOAD:0000000000000B4E                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B50                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B52                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B54                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B56                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B58                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B5A                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B5C                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B5E                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000B60                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000B62                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000B6C                 dw 2                    ; strtold@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000B70                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B78                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B7A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000B7C                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000B7E                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000B84                 dw 3                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B86                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 0
LOAD:0000000000000B98 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B98                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_868, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BA8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_868, \ ; "GLIBC_2.3"
LOAD:0000000000000BA8                                10h>
LOAD:0000000000000BB8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_868, \ ; "GLIBC_2.14"
LOAD:0000000000000BB8                                10h>
LOAD:0000000000000BC8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_868, \ ; "GLIBC_2.4"
LOAD:0000000000000BC8                                10h>
LOAD:0000000000000BD8                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_868, \ ; "GLIBC_2.3.4"
LOAD:0000000000000BD8                                10h>
LOAD:0000000000000BE8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_868, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000BF8 ; ELF RELA Relocation Table
LOAD:0000000000000BF8                 Elf64_Rela <207B90h, 8, 2190h> ; R_X86_64_RELATIVE +2190h
LOAD:0000000000000C10                 Elf64_Rela <207B98h, 8, 2150h> ; R_X86_64_RELATIVE +2150h
LOAD:0000000000000C28                 Elf64_Rela <207BA0h, 8, 5CC2h> ; R_X86_64_RELATIVE +5CC2h
LOAD:0000000000000C40                 Elf64_Rela <207BC0h, 8, 5CC7h> ; R_X86_64_RELATIVE +5CC7h
LOAD:0000000000000C58                 Elf64_Rela <207C00h, 8, 5D29h> ; R_X86_64_RELATIVE +5D29h
LOAD:0000000000000C70                 Elf64_Rela <207C08h, 8, 5D31h> ; R_X86_64_RELATIVE +5D31h
LOAD:0000000000000C88                 Elf64_Rela <207C10h, 8, 5D37h> ; R_X86_64_RELATIVE +5D37h
LOAD:0000000000000CA0                 Elf64_Rela <207C18h, 8, 5D44h> ; R_X86_64_RELATIVE +5D44h
LOAD:0000000000000CB8                 Elf64_Rela <207C20h, 8, 5D51h> ; R_X86_64_RELATIVE +5D51h
LOAD:0000000000000CD0                 Elf64_Rela <207C28h, 8, 5D65h> ; R_X86_64_RELATIVE +5D65h
LOAD:0000000000000CE8                 Elf64_Rela <207C30h, 8, 5D67h> ; R_X86_64_RELATIVE +5D67h
LOAD:0000000000000D00                 Elf64_Rela <207C38h, 8, 5D4Ah> ; R_X86_64_RELATIVE +5D4Ah
LOAD:0000000000000D18                 Elf64_Rela <207C40h, 8, 580Dh> ; R_X86_64_RELATIVE +580Dh
LOAD:0000000000000D30                 Elf64_Rela <207C48h, 8, 5D6Fh> ; R_X86_64_RELATIVE +5D6Fh
LOAD:0000000000000D48                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000D60                 Elf64_Rela <208060h, 8, 208070h> ; R_X86_64_RELATIVE +208070h
LOAD:0000000000000D78                 Elf64_Rela <208078h, 8, 208100h> ; R_X86_64_RELATIVE +208100h
LOAD:0000000000000D90                 Elf64_Rela <207FC8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000DA8                 Elf64_Rela <207FD0h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000DC0                 Elf64_Rela <207FD8h, 1C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000DD8                 Elf64_Rela <207FE0h, 2D00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DF0                 Elf64_Rela <207FE8h, 3000000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E08                 Elf64_Rela <208080h, 3400000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000E20                 Elf64_Rela <208088h, 3300000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000E38                 Elf64_Rela <208090h, 3A00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E50                 Elf64_Rela <208098h, 3600000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E68                 Elf64_Rela <2080A0h, 3800000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000E80                 Elf64_Rela <2080C0h, 3900000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E98 ; ELF JMPREL Relocation Table
LOAD:0000000000000E98                 Elf64_Rela <207E60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000000EB0                 Elf64_Rela <207E68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000EC8                 Elf64_Rela <207E70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000EE0                 Elf64_Rela <207E78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000EF8                 Elf64_Rela <207E80h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000F10                 Elf64_Rela <207E88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000F28                 Elf64_Rela <207E90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000F40                 Elf64_Rela <207E98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000000F58                 Elf64_Rela <207EA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT strtod
LOAD:0000000000000F70                 Elf64_Rela <207EA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F88                 Elf64_Rela <207EB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000FA0                 Elf64_Rela <207EB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000FB8                 Elf64_Rela <207EC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000FD0                 Elf64_Rela <207EC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000FE8                 Elf64_Rela <207ED0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001000                 Elf64_Rela <207ED8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001018                 Elf64_Rela <207EE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001030                 Elf64_Rela <207EE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001048                 Elf64_Rela <207EF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001060                 Elf64_Rela <207EF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001078                 Elf64_Rela <207F00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strtof
LOAD:0000000000001090                 Elf64_Rela <207F08h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000010A8                 Elf64_Rela <207F10h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000010C0                 Elf64_Rela <207F18h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000010D8                 Elf64_Rela <207F20h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000010F0                 Elf64_Rela <207F28h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001108                 Elf64_Rela <207F30h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001120                 Elf64_Rela <207F38h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001138                 Elf64_Rela <207F40h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001150                 Elf64_Rela <207F48h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001168                 Elf64_Rela <207F50h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001180                 Elf64_Rela <207F58h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001198                 Elf64_Rela <207F60h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000011B0                 Elf64_Rela <207F68h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000011C8                 Elf64_Rela <207F70h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT strtold
LOAD:00000000000011E0                 Elf64_Rela <207F78h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000011F8                 Elf64_Rela <207F80h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001210                 Elf64_Rela <207F88h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001228                 Elf64_Rela <207F90h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001240                 Elf64_Rela <207F98h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001258                 Elf64_Rela <207FA0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001270                 Elf64_Rela <207FA8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001288                 Elf64_Rela <207FB0h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000012A0                 Elf64_Rela <207FB8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000012B8                 Elf64_Rela <207FC0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:00000000000012B8 LOAD            ends
LOAD:00000000000012B8
.init:00000000000012D0 ; ===========================================================================
.init:00000000000012D0
.init:00000000000012D0 ; Segment type: Pure code
.init:00000000000012D0 ; Segment permissions: Read/Execute
.init:00000000000012D0 _init           segment dword public 'CODE' use64
.init:00000000000012D0                 assume cs:_init
.init:00000000000012D0                 ;org 12D0h
.init:00000000000012D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000012D0
.init:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.init:00000000000012D0
.init:00000000000012D0
.init:00000000000012D0                 public _init_proc
.init:00000000000012D0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000012D0                 sub     rsp, 8          ; _init
.init:00000000000012D4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000012DB                 test    rax, rax
.init:00000000000012DE                 jz      short loc_12E2
.init:00000000000012E0                 call    rax ; __gmon_start__
.init:00000000000012E2
.init:00000000000012E2 loc_12E2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000012E2                 add     rsp, 8
.init:00000000000012E6                 retn
.init:00000000000012E6 _init_proc      endp
.init:00000000000012E6
.init:00000000000012E6 _init           ends
.init:00000000000012E6
LOAD:00000000000012E7 ; ===========================================================================
LOAD:00000000000012E7
LOAD:00000000000012E7 ; Segment type: Pure code
LOAD:00000000000012E7 ; Segment permissions: Read/Execute
LOAD:00000000000012E7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000012E7                 assume cs:LOAD
LOAD:00000000000012E7                 ;org 12E7h
LOAD:00000000000012E7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000012E7                 align 10h
LOAD:00000000000012E7 LOAD            ends
LOAD:00000000000012E7
.plt:00000000000012F0 ; ===========================================================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Segment type: Pure code
.plt:00000000000012F0 ; Segment permissions: Read/Execute
.plt:00000000000012F0 _plt            segment para public 'CODE' use64
.plt:00000000000012F0                 assume cs:_plt
.plt:00000000000012F0                 ;org 12F0h
.plt:00000000000012F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0
.plt:00000000000012F0 sub_12F0        proc near               ; CODE XREF: .plt:000000000000130B↓j
.plt:00000000000012F0                                         ; .plt:000000000000131B↓j ...
.plt:00000000000012F0 ; __unwind {
.plt:00000000000012F0                 push    cs:qword_207E50
.plt:00000000000012F6                 jmp     cs:qword_207E58
.plt:00000000000012F6 sub_12F0        endp
.plt:00000000000012F6
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012FC                 align 20h
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ___snprintf_chk proc near               ; CODE XREF: dtoastr+F7↓p
.plt:0000000000001300                                         ; ftoastr+FF↓p ...
.plt:0000000000001300                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001300 ___snprintf_chk endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    0
.plt:000000000000130B                 jmp     sub_12F0
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; void free(void *ptr)
.plt:0000000000001310 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001310                                         ; quotearg_free+37↓p ...
.plt:0000000000001310                 jmp     cs:free_ptr
.plt:0000000000001310 _free           endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    1
.plt:000000000000131B                 jmp     sub_12F0
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: noreturn thunk
.plt:0000000000001320
.plt:0000000000001320 ; void __noreturn abort(void)
.plt:0000000000001320 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001320                                         ; quotearg_buffer_restyled:def_3001↓p ...
.plt:0000000000001320                 jmp     cs:abort_ptr
.plt:0000000000001320 _abort          endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    2
.plt:000000000000132B                 jmp     sub_12F0
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; int *__errno_location(void)
.plt:0000000000001330 ___errno_location proc near             ; CODE XREF: close_stdout+16↓p
.plt:0000000000001330                                         ; quotearg_n_options+1C↓p ...
.plt:0000000000001330                 jmp     cs:__errno_location_ptr
.plt:0000000000001330 ___errno_location endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    3
.plt:000000000000133B                 jmp     sub_12F0
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001340 _strncmp        proc near               ; CODE XREF: usage+204↓p
.plt:0000000000001340                                         ; usage+2C5↓p
.plt:0000000000001340                 jmp     cs:strncmp_ptr
.plt:0000000000001340 _strncmp        endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    4
.plt:000000000000134B                 jmp     sub_12F0
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: noreturn thunk
.plt:0000000000001350
.plt:0000000000001350 ; void __noreturn _exit(int status)
.plt:0000000000001350 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001350                 jmp     cs:_exit_ptr
.plt:0000000000001350 __exit          endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    5
.plt:000000000000135B                 jmp     sub_12F0
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; size_t __fpending(FILE *fp)
.plt:0000000000001360 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001360                 jmp     cs:__fpending_ptr
.plt:0000000000001360 ___fpending     endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    6
.plt:000000000000136B                 jmp     sub_12F0
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; int puts(const char *s)
.plt:0000000000001370 _puts           proc near               ; CODE XREF: print_FLT+2F↓p
.plt:0000000000001370                                         ; print_DBL+2F↓p ...
.plt:0000000000001370                 jmp     cs:puts_ptr
.plt:0000000000001370 _puts           endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    7
.plt:000000000000137B                 jmp     sub_12F0
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; double strtod(const char *nptr, char **endptr)
.plt:0000000000001380 _strtod         proc near               ; CODE XREF: dtoastr+118↓p
.plt:0000000000001380                 jmp     cs:strtod_ptr
.plt:0000000000001380 _strtod         endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    8
.plt:000000000000138B                 jmp     sub_12F0
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; char *textdomain(const char *domainname)
.plt:0000000000001390 _textdomain     proc near               ; CODE XREF: main+4E↓p
.plt:0000000000001390                 jmp     cs:textdomain_ptr
.plt:0000000000001390 _textdomain     endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    9
.plt:000000000000139B                 jmp     sub_12F0
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; int fclose(FILE *stream)
.plt:00000000000013A0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000013A0                                         ; rpl_fclose+6B↓j
.plt:00000000000013A0                 jmp     cs:fclose_ptr
.plt:00000000000013A0 _fclose         endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    0Ah
.plt:00000000000013AB                 jmp     sub_12F0
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000013B0 _bindtextdomain proc near               ; CODE XREF: main+42↓p
.plt:00000000000013B0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000013B0 _bindtextdomain endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    0Bh
.plt:00000000000013BB                 jmp     sub_12F0
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000013C0 _dcgettext      proc near               ; CODE XREF: usage+38↓p
.plt:00000000000013C0                                         ; usage+66↓p ...
.plt:00000000000013C0                 jmp     cs:dcgettext_ptr
.plt:00000000000013C0 _dcgettext      endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    0Ch
.plt:00000000000013CB                 jmp     sub_12F0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000013D0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000013D0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000013D0 ___ctype_get_mb_cur_max endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    0Dh
.plt:00000000000013DB                 jmp     sub_12F0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; size_t strlen(const char *s)
.plt:00000000000013E0 _strlen         proc near               ; CODE XREF: decimal_absval_add_one+1B↓p
.plt:00000000000013E0                                         ; quotearg_buffer_restyled+157↓p ...
.plt:00000000000013E0                 jmp     cs:strlen_ptr
.plt:00000000000013E0 _strlen         endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    0Eh
.plt:00000000000013EB                 jmp     sub_12F0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: noreturn thunk
.plt:00000000000013F0
.plt:00000000000013F0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2084↓p
.plt:00000000000013F0                                         ; print_FLT:loc_225A↓p ...
.plt:00000000000013F0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000013F0 ___stack_chk_fail endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    0Fh
.plt:00000000000013FB                 jmp     sub_12F0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001400 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:0000000000001400                                         ; parse_gnu_standard_options_only+9A↓p
.plt:0000000000001400                 jmp     cs:getopt_long_ptr
.plt:0000000000001400 _getopt_long    endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    10h
.plt:000000000000140B                 jmp     sub_12F0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001410 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001410                 jmp     cs:mbrtowc_ptr
.plt:0000000000001410 _mbrtowc        endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    11h
.plt:000000000000141B                 jmp     sub_12F0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; char *strrchr(const char *s, int c)
.plt:0000000000001420 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001420                 jmp     cs:strrchr_ptr
.plt:0000000000001420 _strrchr        endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    12h
.plt:000000000000142B                 jmp     sub_12F0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001430 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001430                                         ; rpl_fseeko+3B↓p
.plt:0000000000001430                 jmp     cs:lseek_ptr
.plt:0000000000001430 _lseek          endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    13h
.plt:000000000000143B                 jmp     sub_12F0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; float strtof(const char *nptr, char **endptr)
.plt:0000000000001440 _strtof         proc near               ; CODE XREF: ftoastr+120↓p
.plt:0000000000001440                 jmp     cs:strtof_ptr
.plt:0000000000001440 _strtof         endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    14h
.plt:000000000000144B                 jmp     sub_12F0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001450 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001450                                         ; xzalloc+12↓j
.plt:0000000000001450                 jmp     cs:memset_ptr
.plt:0000000000001450 _memset         endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    15h
.plt:000000000000145B                 jmp     sub_12F0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001460 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001460                 jmp     cs:memcmp_ptr
.plt:0000000000001460 _memcmp         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    16h
.plt:000000000000146B                 jmp     sub_12F0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001470 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001470                                         ; usage+C2↓p ...
.plt:0000000000001470                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001470 _fputs_unlocked endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    17h
.plt:000000000000147B                 jmp     sub_12F0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001480 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001480                 jmp     cs:calloc_ptr
.plt:0000000000001480 _calloc         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    18h
.plt:000000000000148B                 jmp     sub_12F0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001490 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001490                 jmp     cs:memcpy_ptr
.plt:0000000000001490 _memcpy         endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    19h
.plt:000000000000149B                 jmp     sub_12F0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int fileno(FILE *stream)
.plt:00000000000014A0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000014A0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000014A0                 jmp     cs:fileno_ptr
.plt:00000000000014A0 _fileno         endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    1Ah
.plt:00000000000014AB                 jmp     sub_12F0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; void *malloc(size_t size)
.plt:00000000000014B0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000014B0                 jmp     cs:malloc_ptr
.plt:00000000000014B0 _malloc         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    1Bh
.plt:00000000000014BB                 jmp     sub_12F0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int fflush(FILE *stream)
.plt:00000000000014C0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000014C0                                         ; rpl_fflush+3B↓j
.plt:00000000000014C0                 jmp     cs:fflush_ptr
.plt:00000000000014C0 _fflush         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    1Ch
.plt:00000000000014CB                 jmp     sub_12F0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; char *nl_langinfo(nl_item item)
.plt:00000000000014D0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000014D0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000014D0 _nl_langinfo    endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    1Dh
.plt:00000000000014DB                 jmp     sub_12F0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int __freading(FILE *fp)
.plt:00000000000014E0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000014E0                                         ; rpl_fflush+9↓p
.plt:00000000000014E0                 jmp     cs:__freading_ptr
.plt:00000000000014E0 ___freading     endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    1Eh
.plt:00000000000014EB                 jmp     sub_12F0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000014F0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000014F0                 jmp     cs:realloc_ptr
.plt:00000000000014F0 _realloc        endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    1Fh
.plt:00000000000014FB                 jmp     sub_12F0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; char *setlocale(int category, const char *locale)
.plt:0000000000001500 _setlocale      proc near               ; CODE XREF: main+2F↓p
.plt:0000000000001500                                         ; usage+1EB↓p ...
.plt:0000000000001500                 jmp     cs:setlocale_ptr
.plt:0000000000001500 _setlocale      endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    20h ; ' '
.plt:000000000000150B                 jmp     sub_12F0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ___printf_chk   proc near               ; CODE XREF: main+CC↓p
.plt:0000000000001510                                         ; main+EA↓p ...
.plt:0000000000001510                 jmp     cs:__printf_chk_ptr
.plt:0000000000001510 ___printf_chk   endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    21h ; '!'
.plt:000000000000151B                 jmp     sub_12F0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; long double strtold(const char *nptr, char **endptr)
.plt:0000000000001520 _strtold        proc near               ; CODE XREF: ldtoastr+109↓p
.plt:0000000000001520                 jmp     cs:strtold_ptr
.plt:0000000000001520 _strtold        endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    22h ; '"'
.plt:000000000000152B                 jmp     sub_12F0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001530 _error          proc near               ; CODE XREF: close_stdout+7D↓p
.plt:0000000000001530                                         ; close_stdout+9D↓p ...
.plt:0000000000001530                 jmp     cs:error_ptr
.plt:0000000000001530 _error          endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    23h ; '#'
.plt:000000000000153B                 jmp     sub_12F0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001540 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_563A↓j
.plt:0000000000001540                 jmp     cs:fseeko_ptr
.plt:0000000000001540 _fseeko         endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    24h ; '$'
.plt:000000000000154B                 jmp     sub_12F0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001550 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001550                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001550 ___cxa_atexit   endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    25h ; '%'
.plt:000000000000155B                 jmp     sub_12F0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: noreturn thunk
.plt:0000000000001560
.plt:0000000000001560 ; void __noreturn exit(int status)
.plt:0000000000001560 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001560                                         ; parse_long_options+122↓p ...
.plt:0000000000001560                 jmp     cs:exit_ptr
.plt:0000000000001560 _exit           endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    26h ; '&'
.plt:000000000000156B                 jmp     sub_12F0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001570 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001570                 jmp     cs:fwrite_ptr
.plt:0000000000001570 _fwrite         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    27h ; '''
.plt:000000000000157B                 jmp     sub_12F0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001580                                         ; version_etc_arn+37↓p ...
.plt:0000000000001580                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001580 ___fprintf_chk  endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    28h ; '('
.plt:000000000000158B                 jmp     sub_12F0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001590 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001590                 jmp     cs:mbsinit_ptr
.plt:0000000000001590 _mbsinit        endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    29h ; ')'
.plt:000000000000159B                 jmp     sub_12F0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int iswprint(wint_t wc)
.plt:00000000000015A0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000015A0                 jmp     cs:iswprint_ptr
.plt:00000000000015A0 _iswprint       endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    2Ah ; '*'
.plt:00000000000015AB                 jmp     sub_12F0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000015B0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000015B0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000015B0 ___ctype_b_loc  endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    2Bh ; '+'
.plt:00000000000015BB                 jmp     sub_12F0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ___sprintf_chk  proc near               ; CODE XREF: main+B6↓p
.plt:00000000000015C0                                         ; main+10C↓p ...
.plt:00000000000015C0                 jmp     cs:__sprintf_chk_ptr
.plt:00000000000015C0 ___sprintf_chk  endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    2Ch ; ','
.plt:00000000000015CB                 jmp     sub_12F0
.plt:00000000000015CB ; } // starts at 12F0
.plt:00000000000015CB _plt            ends
.plt:00000000000015CB
.plt.got:00000000000015D0 ; ===========================================================================
.plt.got:00000000000015D0
.plt.got:00000000000015D0 ; Segment type: Pure code
.plt.got:00000000000015D0 ; Segment permissions: Read/Execute
.plt.got:00000000000015D0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000015D0                 assume cs:_plt_got
.plt.got:00000000000015D0                 ;org 15D0h
.plt.got:00000000000015D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000015D0
.plt.got:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000015D0
.plt.got:00000000000015D0 ; Attributes: thunk
.plt.got:00000000000015D0
.plt.got:00000000000015D0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000015D0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000015D0 ; __unwind {
.plt.got:00000000000015D0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000015D0 __cxa_finalize  endp
.plt.got:00000000000015D0
.plt.got:00000000000015D0 ; ---------------------------------------------------------------------------
.plt.got:00000000000015D6                 align 8
.plt.got:00000000000015D6 ; } // starts at 15D0
.plt.got:00000000000015D6 _plt_got        ends
.plt.got:00000000000015D6
LOAD:00000000000015D8 ; ===========================================================================
LOAD:00000000000015D8
LOAD:00000000000015D8 ; Segment type: Pure code
LOAD:00000000000015D8 ; Segment permissions: Read/Execute
LOAD:00000000000015D8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000015D8                 assume cs:LOAD
LOAD:00000000000015D8                 ;org 15D8h
LOAD:00000000000015D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000015D8                 align 20h
LOAD:00000000000015D8 LOAD            ends
LOAD:00000000000015D8
.text:00000000000015E0 ; ===========================================================================
.text:00000000000015E0
.text:00000000000015E0 ; Segment type: Pure code
.text:00000000000015E0 ; Segment permissions: Read/Execute
.text:00000000000015E0 _text           segment para public 'CODE' use64
.text:00000000000015E0                 assume cs:_text
.text:00000000000015E0                 ;org 15E0h
.text:00000000000015E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000015E0
.text:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000015E0
.text:00000000000015E0
.text:00000000000015E0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000015E0                 public main
.text:00000000000015E0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000015E0
.text:00000000000015E0 var_38          = byte ptr -38h
.text:00000000000015E0 var_20          = qword ptr -20h
.text:00000000000015E0
.text:00000000000015E0 ; __unwind {
.text:00000000000015E0                 push    rbp
.text:00000000000015E1                 push    rbx
.text:00000000000015E2                 mov     ebp, edi
.text:00000000000015E4                 mov     rbx, rsi
.text:00000000000015E7                 sub     rsp, 28h
.text:00000000000015EB                 mov     rdi, [rsi]
.text:00000000000015EE                 mov     rax, fs:28h
.text:00000000000015F7                 mov     [rsp+38h+var_20], rax
.text:00000000000015FC                 xor     eax, eax
.text:00000000000015FE                 call    set_program_name
.text:0000000000001603                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000160A                 mov     edi, 6          ; category
.text:000000000000160F                 call    _setlocale
.text:0000000000001614                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000161B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001622                 call    _bindtextdomain
.text:0000000000001627                 lea     rdi, domainname ; "coreutils"
.text:000000000000162E                 call    _textdomain
.text:0000000000001633                 lea     rdi, close_stdout
.text:000000000000163A                 call    atexit
.text:000000000000163F                 lea     rax, aPadraigBrady ; "Padraig Brady"
.text:0000000000001646                 push    0
.text:0000000000001648                 mov     edi, ebp
.text:000000000000164A                 lea     r9, usage
.text:0000000000001651                 lea     r8, a831        ; "8.31"
.text:0000000000001658                 lea     rcx, unk_57CF
.text:000000000000165F                 push    rax
.text:0000000000001660                 lea     rdx, aGetlimits ; "getlimits"
.text:0000000000001667                 mov     rsi, rbx
.text:000000000000166A                 xor     eax, eax
.text:000000000000166C                 lea     rbp, [rsp+48h+var_38]
.text:0000000000001671                 call    parse_long_options
.text:0000000000001676                 lea     rbx, [rbp+1]
.text:000000000000167A                 lea     rcx, aLu        ; "%lu"
.text:0000000000001681                 mov     r8d, 7Fh
.text:0000000000001687                 mov     edx, 15h
.text:000000000000168C                 mov     esi, 1
.text:0000000000001691                 xor     eax, eax
.text:0000000000001693                 mov     rdi, rbx
.text:0000000000001696                 call    ___sprintf_chk
.text:000000000000169B                 lea     rsi, aCharMaxS  ; "CHAR_MAX=%s\n"
.text:00000000000016A2                 mov     rdx, rbx
.text:00000000000016A5                 mov     edi, 1
.text:00000000000016AA                 xor     eax, eax
.text:00000000000016AC                 call    ___printf_chk
.text:00000000000016B1                 mov     rdi, rbp
.text:00000000000016B4                 call    decimal_absval_add_one
.text:00000000000016B9                 lea     rsi, aCharOflowS ; "CHAR_OFLOW=%s\n"
.text:00000000000016C0                 mov     rdx, rax
.text:00000000000016C3                 mov     edi, 1
.text:00000000000016C8                 xor     eax, eax
.text:00000000000016CA                 call    ___printf_chk
.text:00000000000016CF                 lea     rcx, aLd        ; "%ld"
.text:00000000000016D6                 mov     r8, 0FFFFFFFFFFFFFF80h
.text:00000000000016DD                 mov     edx, 15h
.text:00000000000016E2                 mov     esi, 1
.text:00000000000016E7                 mov     rdi, rbx
.text:00000000000016EA                 xor     eax, eax
.text:00000000000016EC                 call    ___sprintf_chk
.text:00000000000016F1                 lea     rsi, aCharMinS  ; "CHAR_MIN=%s\n"
.text:00000000000016F8                 mov     rdx, rbx
.text:00000000000016FB                 mov     edi, 1
.text:0000000000001700                 xor     eax, eax
.text:0000000000001702                 call    ___printf_chk
.text:0000000000001707                 mov     rdi, rbp
.text:000000000000170A                 call    decimal_absval_add_one
.text:000000000000170F                 lea     rsi, aCharUflowS ; "CHAR_UFLOW=%s\n"
.text:0000000000001716                 mov     rdx, rax
.text:0000000000001719                 mov     edi, 1
.text:000000000000171E                 xor     eax, eax
.text:0000000000001720                 call    ___printf_chk
.text:0000000000001725                 lea     rcx, aLu        ; "%lu"
.text:000000000000172C                 mov     r8d, 7Fh
.text:0000000000001732                 mov     edx, 15h
.text:0000000000001737                 mov     esi, 1
.text:000000000000173C                 mov     rdi, rbx
.text:000000000000173F                 xor     eax, eax
.text:0000000000001741                 call    ___sprintf_chk
.text:0000000000001746                 lea     rsi, unk_582F
.text:000000000000174D                 mov     rdx, rbx
.text:0000000000001750                 mov     edi, 1
.text:0000000000001755                 xor     eax, eax
.text:0000000000001757                 call    ___printf_chk
.text:000000000000175C                 mov     rdi, rbp
.text:000000000000175F                 call    decimal_absval_add_one
.text:0000000000001764                 lea     rsi, unk_583D
.text:000000000000176B                 mov     rdx, rax
.text:000000000000176E                 mov     edi, 1
.text:0000000000001773                 xor     eax, eax
.text:0000000000001775                 call    ___printf_chk
.text:000000000000177A                 lea     rcx, aLd        ; "%ld"
.text:0000000000001781                 mov     r8, 0FFFFFFFFFFFFFF80h
.text:0000000000001788                 mov     edx, 15h
.text:000000000000178D                 mov     esi, 1
.text:0000000000001792                 mov     rdi, rbx
.text:0000000000001795                 xor     eax, eax
.text:0000000000001797                 call    ___sprintf_chk
.text:000000000000179C                 lea     rsi, unk_584D
.text:00000000000017A3                 xor     eax, eax
.text:00000000000017A5                 mov     rdx, rbx
.text:00000000000017A8                 mov     edi, 1
.text:00000000000017AD                 call    ___printf_chk
.text:00000000000017B2                 mov     rdi, rbp
.text:00000000000017B5                 call    decimal_absval_add_one
.text:00000000000017BA                 lea     rsi, unk_585B
.text:00000000000017C1                 mov     rdx, rax
.text:00000000000017C4                 mov     edi, 1
.text:00000000000017C9                 xor     eax, eax
.text:00000000000017CB                 call    ___printf_chk
.text:00000000000017D0                 lea     rcx, aLu        ; "%lu"
.text:00000000000017D7                 mov     r8d, 0FFh
.text:00000000000017DD                 mov     edx, 15h
.text:00000000000017E2                 mov     esi, 1
.text:00000000000017E7                 mov     rdi, rbx
.text:00000000000017EA                 xor     eax, eax
.text:00000000000017EC                 call    ___sprintf_chk
.text:00000000000017F1                 lea     rsi, aUcharMaxS ; "UCHAR_MAX=%s\n"
.text:00000000000017F8                 mov     rdx, rbx
.text:00000000000017FB                 mov     edi, 1
.text:0000000000001800                 xor     eax, eax
.text:0000000000001802                 call    ___printf_chk
.text:0000000000001807                 mov     rdi, rbp
.text:000000000000180A                 call    decimal_absval_add_one
.text:000000000000180F                 lea     rsi, aUcharOflowS ; "UCHAR_OFLOW=%s\n"
.text:0000000000001816                 mov     rdx, rax
.text:0000000000001819                 mov     edi, 1
.text:000000000000181E                 xor     eax, eax
.text:0000000000001820                 call    ___printf_chk
.text:0000000000001825                 lea     rcx, aLu        ; "%lu"
.text:000000000000182C                 mov     r8d, 7FFFh
.text:0000000000001832                 mov     edx, 15h
.text:0000000000001837                 mov     esi, 1
.text:000000000000183C                 mov     rdi, rbx
.text:000000000000183F                 xor     eax, eax
.text:0000000000001841                 call    ___sprintf_chk
.text:0000000000001846                 lea     rsi, aShrtMaxS  ; "SHRT_MAX=%s\n"
.text:000000000000184D                 mov     rdx, rbx
.text:0000000000001850                 mov     edi, 1
.text:0000000000001855                 xor     eax, eax
.text:0000000000001857                 call    ___printf_chk
.text:000000000000185C                 mov     rdi, rbp
.text:000000000000185F                 call    decimal_absval_add_one
.text:0000000000001864                 lea     rsi, aShrtOflowS ; "SHRT_OFLOW=%s\n"
.text:000000000000186B                 mov     rdx, rax
.text:000000000000186E                 mov     edi, 1
.text:0000000000001873                 xor     eax, eax
.text:0000000000001875                 call    ___printf_chk
.text:000000000000187A                 lea     rcx, aLd        ; "%ld"
.text:0000000000001881                 mov     r8, 0FFFFFFFFFFFF8000h
.text:0000000000001888                 mov     edx, 15h
.text:000000000000188D                 mov     esi, 1
.text:0000000000001892                 mov     rdi, rbx
.text:0000000000001895                 xor     eax, eax
.text:0000000000001897                 call    ___sprintf_chk
.text:000000000000189C                 lea     rsi, aShrtMinS  ; "SHRT_MIN=%s\n"
.text:00000000000018A3                 mov     rdx, rbx
.text:00000000000018A6                 mov     edi, 1
.text:00000000000018AB                 xor     eax, eax
.text:00000000000018AD                 call    ___printf_chk
.text:00000000000018B2                 mov     rdi, rbp
.text:00000000000018B5                 call    decimal_absval_add_one
.text:00000000000018BA                 lea     rsi, aShrtUflowS ; "SHRT_UFLOW=%s\n"
.text:00000000000018C1                 mov     rdx, rax
.text:00000000000018C4                 mov     edi, 1
.text:00000000000018C9                 xor     eax, eax
.text:00000000000018CB                 call    ___printf_chk
.text:00000000000018D0                 lea     rcx, aLu        ; "%lu"
.text:00000000000018D7                 mov     r8d, 7FFFFFFFh
.text:00000000000018DD                 mov     edx, 15h
.text:00000000000018E2                 mov     esi, 1
.text:00000000000018E7                 mov     rdi, rbx
.text:00000000000018EA                 xor     eax, eax
.text:00000000000018EC                 call    ___sprintf_chk
.text:00000000000018F1                 lea     rsi, aIntMaxS   ; "INT_MAX=%s\n"
.text:00000000000018F8                 mov     rdx, rbx
.text:00000000000018FB                 mov     edi, 1
.text:0000000000001900                 xor     eax, eax
.text:0000000000001902                 call    ___printf_chk
.text:0000000000001907                 mov     rdi, rbp
.text:000000000000190A                 call    decimal_absval_add_one
.text:000000000000190F                 lea     rsi, aIntOflowS ; "INT_OFLOW=%s\n"
.text:0000000000001916                 mov     rdx, rax
.text:0000000000001919                 mov     edi, 1
.text:000000000000191E                 xor     eax, eax
.text:0000000000001920                 call    ___printf_chk
.text:0000000000001925                 lea     rcx, aLd        ; "%ld"
.text:000000000000192C                 mov     r8, 0FFFFFFFF80000000h
.text:0000000000001933                 mov     edx, 15h
.text:0000000000001938                 mov     esi, 1
.text:000000000000193D                 mov     rdi, rbx
.text:0000000000001940                 xor     eax, eax
.text:0000000000001942                 call    ___sprintf_chk
.text:0000000000001947                 lea     rsi, aIntMinS   ; "INT_MIN=%s\n"
.text:000000000000194E                 mov     rdx, rbx
.text:0000000000001951                 mov     edi, 1
.text:0000000000001956                 xor     eax, eax
.text:0000000000001958                 call    ___printf_chk
.text:000000000000195D                 mov     rdi, rbp
.text:0000000000001960                 call    decimal_absval_add_one
.text:0000000000001965                 lea     rsi, aIntUflowS ; "INT_UFLOW=%s\n"
.text:000000000000196C                 mov     rdx, rax
.text:000000000000196F                 mov     edi, 1
.text:0000000000001974                 xor     eax, eax
.text:0000000000001976                 call    ___printf_chk
.text:000000000000197B                 lea     rcx, aLu        ; "%lu"
.text:0000000000001982                 mov     r8d, 0FFFFFFFFh
.text:0000000000001988                 mov     edx, 15h
.text:000000000000198D                 mov     esi, 1
.text:0000000000001992                 mov     rdi, rbx
.text:0000000000001995                 xor     eax, eax
.text:0000000000001997                 call    ___sprintf_chk
.text:000000000000199C                 lea     rsi, unk_58DB
.text:00000000000019A3                 mov     rdx, rbx
.text:00000000000019A6                 mov     edi, 1
.text:00000000000019AB                 xor     eax, eax
.text:00000000000019AD                 call    ___printf_chk
.text:00000000000019B2                 mov     rdi, rbp
.text:00000000000019B5                 call    decimal_absval_add_one
.text:00000000000019BA                 lea     rsi, unk_58E8
.text:00000000000019C1                 mov     rdx, rax
.text:00000000000019C4                 mov     edi, 1
.text:00000000000019C9                 xor     eax, eax
.text:00000000000019CB                 call    ___printf_chk
.text:00000000000019D0                 lea     rcx, aLu        ; "%lu"
.text:00000000000019D7                 mov     r8, 7FFFFFFFFFFFFFFFh
.text:00000000000019E1                 mov     edx, 15h
.text:00000000000019E6                 mov     esi, 1
.text:00000000000019EB                 mov     rdi, rbx
.text:00000000000019EE                 xor     eax, eax
.text:00000000000019F0                 call    ___sprintf_chk
.text:00000000000019F5                 lea     rsi, aLongMaxS  ; "LONG_MAX=%s\n"
.text:00000000000019FC                 mov     rdx, rbx
.text:00000000000019FF                 mov     edi, 1
.text:0000000000001A04                 xor     eax, eax
.text:0000000000001A06                 call    ___printf_chk
.text:0000000000001A0B                 mov     rdi, rbp
.text:0000000000001A0E                 call    decimal_absval_add_one
.text:0000000000001A13                 lea     rsi, aLongOflowS ; "LONG_OFLOW=%s\n"
.text:0000000000001A1A                 mov     rdx, rax
.text:0000000000001A1D                 mov     edi, 1
.text:0000000000001A22                 xor     eax, eax
.text:0000000000001A24                 call    ___printf_chk
.text:0000000000001A29                 lea     rcx, aLd        ; "%ld"
.text:0000000000001A30                 mov     r8, 8000000000000000h
.text:0000000000001A3A                 mov     edx, 15h
.text:0000000000001A3F                 mov     esi, 1
.text:0000000000001A44                 mov     rdi, rbx
.text:0000000000001A47                 xor     eax, eax
.text:0000000000001A49                 call    ___sprintf_chk
.text:0000000000001A4E                 lea     rsi, aLongMinS  ; "LONG_MIN=%s\n"
.text:0000000000001A55                 mov     rdx, rbx
.text:0000000000001A58                 mov     edi, 1
.text:0000000000001A5D                 xor     eax, eax
.text:0000000000001A5F                 call    ___printf_chk
.text:0000000000001A64                 mov     rdi, rbp
.text:0000000000001A67                 call    decimal_absval_add_one
.text:0000000000001A6C                 lea     rsi, aLongUflowS ; "LONG_UFLOW=%s\n"
.text:0000000000001A73                 mov     rdx, rax
.text:0000000000001A76                 mov     edi, 1
.text:0000000000001A7B                 xor     eax, eax
.text:0000000000001A7D                 call    ___printf_chk
.text:0000000000001A82                 lea     rcx, aLu        ; "%lu"
.text:0000000000001A89                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000001A90                 mov     edx, 15h
.text:0000000000001A95                 mov     esi, 1
.text:0000000000001A9A                 mov     rdi, rbx
.text:0000000000001A9D                 xor     eax, eax
.text:0000000000001A9F                 call    ___sprintf_chk
.text:0000000000001AA4                 lea     rsi, unk_5913
.text:0000000000001AAB                 mov     rdx, rbx
.text:0000000000001AAE                 mov     edi, 1
.text:0000000000001AB3                 xor     eax, eax
.text:0000000000001AB5                 call    ___printf_chk
.text:0000000000001ABA                 mov     rdi, rbp
.text:0000000000001ABD                 call    decimal_absval_add_one
.text:0000000000001AC2                 lea     rsi, unk_5921
.text:0000000000001AC9                 mov     rdx, rax
.text:0000000000001ACC                 mov     edi, 1
.text:0000000000001AD1                 xor     eax, eax
.text:0000000000001AD3                 call    ___printf_chk
.text:0000000000001AD8                 lea     rcx, aLu        ; "%lu"
.text:0000000000001ADF                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000001AE6                 mov     edx, 15h
.text:0000000000001AEB                 mov     esi, 1
.text:0000000000001AF0                 mov     rdi, rbx
.text:0000000000001AF3                 xor     eax, eax
.text:0000000000001AF5                 call    ___sprintf_chk
.text:0000000000001AFA                 lea     rsi, aSizeMaxS  ; "SIZE_MAX=%s\n"
.text:0000000000001B01                 mov     rdx, rbx
.text:0000000000001B04                 mov     edi, 1
.text:0000000000001B09                 xor     eax, eax
.text:0000000000001B0B                 call    ___printf_chk
.text:0000000000001B10                 mov     rdi, rbp
.text:0000000000001B13                 call    decimal_absval_add_one
.text:0000000000001B18                 lea     rsi, aSizeOflowS ; "SIZE_OFLOW=%s\n"
.text:0000000000001B1F                 mov     rdx, rax
.text:0000000000001B22                 mov     edi, 1
.text:0000000000001B27                 xor     eax, eax
.text:0000000000001B29                 call    ___printf_chk
.text:0000000000001B2E                 lea     rcx, aLu        ; "%lu"
.text:0000000000001B35                 mov     r8, 7FFFFFFFFFFFFFFFh
.text:0000000000001B3F                 mov     edx, 15h
.text:0000000000001B44                 mov     esi, 1
.text:0000000000001B49                 mov     rdi, rbx
.text:0000000000001B4C                 xor     eax, eax
.text:0000000000001B4E                 call    ___sprintf_chk
.text:0000000000001B53                 lea     rsi, unk_5931
.text:0000000000001B5A                 mov     rdx, rbx
.text:0000000000001B5D                 mov     edi, 1
.text:0000000000001B62                 xor     eax, eax
.text:0000000000001B64                 call    ___printf_chk
.text:0000000000001B69                 mov     rdi, rbp
.text:0000000000001B6C                 call    decimal_absval_add_one
.text:0000000000001B71                 lea     rsi, unk_593F
.text:0000000000001B78                 mov     rdx, rax
.text:0000000000001B7B                 mov     edi, 1
.text:0000000000001B80                 xor     eax, eax
.text:0000000000001B82                 call    ___printf_chk
.text:0000000000001B87                 lea     rcx, aLd        ; "%ld"
.text:0000000000001B8E                 mov     r8, 8000000000000000h
.text:0000000000001B98                 mov     edx, 15h
.text:0000000000001B9D                 mov     esi, 1
.text:0000000000001BA2                 mov     rdi, rbx
.text:0000000000001BA5                 xor     eax, eax
.text:0000000000001BA7                 call    ___sprintf_chk
.text:0000000000001BAC                 lea     rsi, aSsizeMinS ; "SSIZE_MIN=%s\n"
.text:0000000000001BB3                 mov     rdx, rbx
.text:0000000000001BB6                 mov     edi, 1
.text:0000000000001BBB                 xor     eax, eax
.text:0000000000001BBD                 call    ___printf_chk
.text:0000000000001BC2                 mov     rdi, rbp
.text:0000000000001BC5                 call    decimal_absval_add_one
.text:0000000000001BCA                 lea     rsi, aSsizeUflowS ; "SSIZE_UFLOW=%s\n"
.text:0000000000001BD1                 mov     rdx, rax
.text:0000000000001BD4                 mov     edi, 1
.text:0000000000001BD9                 xor     eax, eax
.text:0000000000001BDB                 call    ___printf_chk
.text:0000000000001BE0                 lea     rcx, aLu        ; "%lu"
.text:0000000000001BE7                 mov     r8, 7FFFFFFFFFFFFFFFh
.text:0000000000001BF1                 mov     edx, 15h
.text:0000000000001BF6                 mov     esi, 1
.text:0000000000001BFB                 mov     rdi, rbx
.text:0000000000001BFE                 xor     eax, eax
.text:0000000000001C00                 call    ___sprintf_chk
.text:0000000000001C05                 lea     rsi, aTimeTMaxS ; "TIME_T_MAX=%s\n"
.text:0000000000001C0C                 mov     rdx, rbx
.text:0000000000001C0F                 mov     edi, 1
.text:0000000000001C14                 xor     eax, eax
.text:0000000000001C16                 call    ___printf_chk
.text:0000000000001C1B                 mov     rdi, rbp
.text:0000000000001C1E                 call    decimal_absval_add_one
.text:0000000000001C23                 lea     rsi, aTimeTOflowS ; "TIME_T_OFLOW=%s\n"
.text:0000000000001C2A                 mov     rdx, rax
.text:0000000000001C2D                 mov     edi, 1
.text:0000000000001C32                 xor     eax, eax
.text:0000000000001C34                 call    ___printf_chk
.text:0000000000001C39                 lea     rcx, aLd        ; "%ld"
.text:0000000000001C40                 xor     eax, eax
.text:0000000000001C42                 mov     r8, 8000000000000000h
.text:0000000000001C4C                 mov     edx, 15h
.text:0000000000001C51                 mov     esi, 1
.text:0000000000001C56                 mov     rdi, rbx
.text:0000000000001C59                 call    ___sprintf_chk
.text:0000000000001C5E                 lea     rsi, aTimeTMinS ; "TIME_T_MIN=%s\n"
.text:0000000000001C65                 mov     rdx, rbx
.text:0000000000001C68                 mov     edi, 1
.text:0000000000001C6D                 xor     eax, eax
.text:0000000000001C6F                 call    ___printf_chk
.text:0000000000001C74                 mov     rdi, rbp
.text:0000000000001C77                 call    decimal_absval_add_one
.text:0000000000001C7C                 lea     rsi, aTimeTUflowS ; "TIME_T_UFLOW=%s\n"
.text:0000000000001C83                 mov     rdx, rax
.text:0000000000001C86                 mov     edi, 1
.text:0000000000001C8B                 xor     eax, eax
.text:0000000000001C8D                 call    ___printf_chk
.text:0000000000001C92                 lea     rcx, aLu        ; "%lu"
.text:0000000000001C99                 mov     r8d, 0FFFFFFFFh
.text:0000000000001C9F                 mov     edx, 15h
.text:0000000000001CA4                 mov     esi, 1
.text:0000000000001CA9                 mov     rdi, rbx
.text:0000000000001CAC                 xor     eax, eax
.text:0000000000001CAE                 call    ___sprintf_chk
.text:0000000000001CB3                 lea     rsi, aUidTMaxS  ; "UID_T_MAX=%s\n"
.text:0000000000001CBA                 mov     rdx, rbx
.text:0000000000001CBD                 mov     edi, 1
.text:0000000000001CC2                 xor     eax, eax
.text:0000000000001CC4                 call    ___printf_chk
.text:0000000000001CC9                 mov     rdi, rbp
.text:0000000000001CCC                 call    decimal_absval_add_one
.text:0000000000001CD1                 lea     rsi, aUidTOflowS ; "UID_T_OFLOW=%s\n"
.text:0000000000001CD8                 mov     rdx, rax
.text:0000000000001CDB                 mov     edi, 1
.text:0000000000001CE0                 xor     eax, eax
.text:0000000000001CE2                 call    ___printf_chk
.text:0000000000001CE7                 lea     rcx, aLu        ; "%lu"
.text:0000000000001CEE                 mov     r8d, 0FFFFFFFFh
.text:0000000000001CF4                 mov     edx, 15h
.text:0000000000001CF9                 mov     esi, 1
.text:0000000000001CFE                 mov     rdi, rbx
.text:0000000000001D01                 xor     eax, eax
.text:0000000000001D03                 call    ___sprintf_chk
.text:0000000000001D08                 lea     rsi, aGidTMaxS  ; "GID_T_MAX=%s\n"
.text:0000000000001D0F                 mov     rdx, rbx
.text:0000000000001D12                 mov     edi, 1
.text:0000000000001D17                 xor     eax, eax
.text:0000000000001D19                 call    ___printf_chk
.text:0000000000001D1E                 mov     rdi, rbp
.text:0000000000001D21                 call    decimal_absval_add_one
.text:0000000000001D26                 lea     rsi, aGidTOflowS ; "GID_T_OFLOW=%s\n"
.text:0000000000001D2D                 mov     rdx, rax
.text:0000000000001D30                 mov     edi, 1
.text:0000000000001D35                 xor     eax, eax
.text:0000000000001D37                 call    ___printf_chk
.text:0000000000001D3C                 lea     rcx, aLu        ; "%lu"
.text:0000000000001D43                 mov     r8d, 7FFFFFFFh
.text:0000000000001D49                 mov     edx, 15h
.text:0000000000001D4E                 mov     esi, 1
.text:0000000000001D53                 mov     rdi, rbx
.text:0000000000001D56                 xor     eax, eax
.text:0000000000001D58                 call    ___sprintf_chk
.text:0000000000001D5D                 lea     rsi, aPidTMaxS  ; "PID_T_MAX=%s\n"
.text:0000000000001D64                 mov     rdx, rbx
.text:0000000000001D67                 mov     edi, 1
.text:0000000000001D6C                 xor     eax, eax
.text:0000000000001D6E                 call    ___printf_chk
.text:0000000000001D73                 mov     rdi, rbp
.text:0000000000001D76                 call    decimal_absval_add_one
.text:0000000000001D7B                 lea     rsi, aPidTOflowS ; "PID_T_OFLOW=%s\n"
.text:0000000000001D82                 mov     rdx, rax
.text:0000000000001D85                 mov     edi, 1
.text:0000000000001D8A                 xor     eax, eax
.text:0000000000001D8C                 call    ___printf_chk
.text:0000000000001D91                 lea     rcx, aLd        ; "%ld"
.text:0000000000001D98                 mov     r8, 0FFFFFFFF80000000h
.text:0000000000001D9F                 mov     edx, 15h
.text:0000000000001DA4                 mov     esi, 1
.text:0000000000001DA9                 mov     rdi, rbx
.text:0000000000001DAC                 xor     eax, eax
.text:0000000000001DAE                 call    ___sprintf_chk
.text:0000000000001DB3                 lea     rsi, aPidTMinS  ; "PID_T_MIN=%s\n"
.text:0000000000001DBA                 mov     rdx, rbx
.text:0000000000001DBD                 mov     edi, 1
.text:0000000000001DC2                 xor     eax, eax
.text:0000000000001DC4                 call    ___printf_chk
.text:0000000000001DC9                 mov     rdi, rbp
.text:0000000000001DCC                 call    decimal_absval_add_one
.text:0000000000001DD1                 lea     rsi, aPidTUflowS ; "PID_T_UFLOW=%s\n"
.text:0000000000001DD8                 mov     rdx, rax
.text:0000000000001DDB                 mov     edi, 1
.text:0000000000001DE0                 xor     eax, eax
.text:0000000000001DE2                 call    ___printf_chk
.text:0000000000001DE7                 lea     rcx, aLu        ; "%lu"
.text:0000000000001DEE                 mov     r8, 7FFFFFFFFFFFFFFFh
.text:0000000000001DF8                 mov     edx, 15h
.text:0000000000001DFD                 mov     esi, 1
.text:0000000000001E02                 mov     rdi, rbx
.text:0000000000001E05                 xor     eax, eax
.text:0000000000001E07                 call    ___sprintf_chk
.text:0000000000001E0C                 lea     rsi, aOffTMaxS  ; "OFF_T_MAX=%s\n"
.text:0000000000001E13                 mov     rdx, rbx
.text:0000000000001E16                 mov     edi, 1
.text:0000000000001E1B                 xor     eax, eax
.text:0000000000001E1D                 call    ___printf_chk
.text:0000000000001E22                 mov     rdi, rbp
.text:0000000000001E25                 call    decimal_absval_add_one
.text:0000000000001E2A                 lea     rsi, aOffTOflowS ; "OFF_T_OFLOW=%s\n"
.text:0000000000001E31                 mov     rdx, rax
.text:0000000000001E34                 mov     edi, 1
.text:0000000000001E39                 xor     eax, eax
.text:0000000000001E3B                 call    ___printf_chk
.text:0000000000001E40                 lea     rcx, aLd        ; "%ld"
.text:0000000000001E47                 mov     r8, 8000000000000000h
.text:0000000000001E51                 mov     edx, 15h
.text:0000000000001E56                 mov     esi, 1
.text:0000000000001E5B                 mov     rdi, rbx
.text:0000000000001E5E                 xor     eax, eax
.text:0000000000001E60                 call    ___sprintf_chk
.text:0000000000001E65                 lea     rsi, aOffTMinS  ; "OFF_T_MIN=%s\n"
.text:0000000000001E6C                 mov     rdx, rbx
.text:0000000000001E6F                 mov     edi, 1
.text:0000000000001E74                 xor     eax, eax
.text:0000000000001E76                 call    ___printf_chk
.text:0000000000001E7B                 mov     rdi, rbp
.text:0000000000001E7E                 call    decimal_absval_add_one
.text:0000000000001E83                 lea     rsi, aOffTUflowS ; "OFF_T_UFLOW=%s\n"
.text:0000000000001E8A                 mov     rdx, rax
.text:0000000000001E8D                 mov     edi, 1
.text:0000000000001E92                 xor     eax, eax
.text:0000000000001E94                 call    ___printf_chk
.text:0000000000001E99                 lea     rcx, aLu        ; "%lu"
.text:0000000000001EA0                 mov     r8, 7FFFFFFFFFFFFFFFh
.text:0000000000001EAA                 mov     edx, 15h
.text:0000000000001EAF                 mov     esi, 1
.text:0000000000001EB4                 mov     rdi, rbx
.text:0000000000001EB7                 xor     eax, eax
.text:0000000000001EB9                 call    ___sprintf_chk
.text:0000000000001EBE                 lea     rsi, aIntmaxMaxS ; "INTMAX_MAX=%s\n"
.text:0000000000001EC5                 mov     rdx, rbx
.text:0000000000001EC8                 mov     edi, 1
.text:0000000000001ECD                 xor     eax, eax
.text:0000000000001ECF                 call    ___printf_chk
.text:0000000000001ED4                 mov     rdi, rbp
.text:0000000000001ED7                 call    decimal_absval_add_one
.text:0000000000001EDC                 lea     rsi, aIntmaxOflowS ; "INTMAX_OFLOW=%s\n"
.text:0000000000001EE3                 mov     rdx, rax
.text:0000000000001EE6                 mov     edi, 1
.text:0000000000001EEB                 xor     eax, eax
.text:0000000000001EED                 call    ___printf_chk
.text:0000000000001EF2                 lea     rcx, aLd        ; "%ld"
.text:0000000000001EF9                 mov     r8, 8000000000000000h
.text:0000000000001F03                 mov     edx, 15h
.text:0000000000001F08                 mov     esi, 1
.text:0000000000001F0D                 mov     rdi, rbx
.text:0000000000001F10                 xor     eax, eax
.text:0000000000001F12                 call    ___sprintf_chk
.text:0000000000001F17                 lea     rsi, aIntmaxMinS ; "INTMAX_MIN=%s\n"
.text:0000000000001F1E                 mov     rdx, rbx
.text:0000000000001F21                 mov     edi, 1
.text:0000000000001F26                 xor     eax, eax
.text:0000000000001F28                 call    ___printf_chk
.text:0000000000001F2D                 mov     rdi, rbp
.text:0000000000001F30                 call    decimal_absval_add_one
.text:0000000000001F35                 lea     rsi, aIntmaxUflowS ; "INTMAX_UFLOW=%s\n"
.text:0000000000001F3C                 mov     rdx, rax
.text:0000000000001F3F                 mov     edi, 1
.text:0000000000001F44                 xor     eax, eax
.text:0000000000001F46                 call    ___printf_chk
.text:0000000000001F4B                 lea     rcx, aLu        ; "%lu"
.text:0000000000001F52                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000001F59                 mov     edx, 15h
.text:0000000000001F5E                 mov     esi, 1
.text:0000000000001F63                 mov     rdi, rbx
.text:0000000000001F66                 xor     eax, eax
.text:0000000000001F68                 call    ___sprintf_chk
.text:0000000000001F6D                 lea     rsi, unk_5A81
.text:0000000000001F74                 mov     rdx, rbx
.text:0000000000001F77                 mov     edi, 1
.text:0000000000001F7C                 xor     eax, eax
.text:0000000000001F7E                 call    ___printf_chk
.text:0000000000001F83                 mov     rdi, rbp
.text:0000000000001F86                 call    decimal_absval_add_one
.text:0000000000001F8B                 lea     rsi, unk_5A91
.text:0000000000001F92                 mov     rdx, rax
.text:0000000000001F95                 mov     edi, 1
.text:0000000000001F9A                 xor     eax, eax
.text:0000000000001F9C                 call    ___printf_chk
.text:0000000000001FA1                 lea     rsi, aFltMin    ; "FLT_MIN="
.text:0000000000001FA8                 mov     edi, 1
.text:0000000000001FAD                 xor     eax, eax
.text:0000000000001FAF                 call    ___printf_chk
.text:0000000000001FB4                 movss   xmm0, cs:dword_5C54
.text:0000000000001FBC                 call    print_FLT
.text:0000000000001FC1                 lea     rsi, aFltMax    ; "FLT_MAX="
.text:0000000000001FC8                 mov     edi, 1
.text:0000000000001FCD                 xor     eax, eax
.text:0000000000001FCF                 call    ___printf_chk
.text:0000000000001FD4                 movss   xmm0, cs:dword_5C58
.text:0000000000001FDC                 call    print_FLT
.text:0000000000001FE1                 lea     rsi, aDblMin    ; "DBL_MIN="
.text:0000000000001FE8                 mov     edi, 1
.text:0000000000001FED                 xor     eax, eax
.text:0000000000001FEF                 call    ___printf_chk
.text:0000000000001FF4                 movsd   xmm0, cs:qword_5C60
.text:0000000000001FFC                 call    print_DBL
.text:0000000000002001                 lea     rsi, aDblMax    ; "DBL_MAX="
.text:0000000000002008                 mov     edi, 1
.text:000000000000200D                 xor     eax, eax
.text:000000000000200F                 call    ___printf_chk
.text:0000000000002014                 movsd   xmm0, cs:qword_5C68
.text:000000000000201C                 call    print_DBL
.text:0000000000002021                 lea     rsi, unk_5AB5
.text:0000000000002028                 mov     edi, 1
.text:000000000000202D                 xor     eax, eax
.text:000000000000202F                 call    ___printf_chk
.text:0000000000002034                 mov     rax, 8000000000000000h
.text:000000000000203E                 push    1
.text:0000000000002040                 push    rax             ; _TBYTE
.text:0000000000002041                 call    print_LDBL
.text:0000000000002046                 lea     rsi, unk_5ABF
.text:000000000000204D                 add     rsp, 20h
.text:0000000000002051                 mov     edi, 1
.text:0000000000002056                 xor     eax, eax
.text:0000000000002058                 call    ___printf_chk
.text:000000000000205D                 push    7FFEh
.text:0000000000002062                 push    0FFFFFFFFFFFFFFFFh ; _TBYTE
.text:0000000000002064                 call    print_LDBL
.text:0000000000002069                 pop     rdx
.text:000000000000206A                 pop     rcx
.text:000000000000206B                 mov     rcx, [rsp+38h+var_20]
.text:0000000000002070                 xor     rcx, fs:28h
.text:0000000000002079                 jnz     short loc_2084
.text:000000000000207B                 add     rsp, 28h
.text:000000000000207F                 xor     eax, eax
.text:0000000000002081                 pop     rbx
.text:0000000000002082                 pop     rbp
.text:0000000000002083                 retn
.text:0000000000002084 ; ---------------------------------------------------------------------------
.text:0000000000002084
.text:0000000000002084 loc_2084:                               ; CODE XREF: main+A99↑j
.text:0000000000002084                 call    ___stack_chk_fail
.text:0000000000002084 ; } // starts at 15E0
.text:0000000000002084 main            endp
.text:0000000000002084
.text:0000000000002084 ; ---------------------------------------------------------------------------
.text:0000000000002089                 align 10h
.text:0000000000002090
.text:0000000000002090 ; =============== S U B R O U T I N E =======================================
.text:0000000000002090
.text:0000000000002090 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002090
.text:0000000000002090 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002090                 public start
.text:0000000000002090 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002090 ; __unwind {
.text:0000000000002090                 xor     ebp, ebp
.text:0000000000002092                 mov     r9, rdx         ; rtld_fini
.text:0000000000002095                 pop     rsi             ; argc
.text:0000000000002096                 mov     rdx, rsp        ; ubp_av
.text:0000000000002099                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000209D                 push    rax
.text:000000000000209E                 push    rsp             ; stack_end
.text:000000000000209F                 lea     r8, __libc_csu_fini ; fini
.text:00000000000020A6                 lea     rcx, __libc_csu_init ; init
.text:00000000000020AD                 lea     rdi, main       ; main
.text:00000000000020B4                 call    cs:__libc_start_main_ptr
.text:00000000000020BA                 hlt
.text:00000000000020BA ; } // starts at 2090
.text:00000000000020BA start           endp
.text:00000000000020BA
.text:00000000000020BA ; ---------------------------------------------------------------------------
.text:00000000000020BB                 align 20h
.text:00000000000020C0
.text:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020C0
.text:00000000000020C0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000020C0
.text:00000000000020C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2173↓p
.text:00000000000020C0                 lea     rdi, __bss_start
.text:00000000000020C7                 push    rbp
.text:00000000000020C8                 lea     rax, __bss_start
.text:00000000000020CF                 cmp     rax, rdi
.text:00000000000020D2                 mov     rbp, rsp
.text:00000000000020D5                 jz      short loc_20F0
.text:00000000000020D7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000020DE                 test    rax, rax
.text:00000000000020E1                 jz      short loc_20F0
.text:00000000000020E3                 pop     rbp
.text:00000000000020E4                 jmp     rax
.text:00000000000020E4 ; ---------------------------------------------------------------------------
.text:00000000000020E6                 align 10h
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000020F0                                         ; deregister_tm_clones+21↑j
.text:00000000000020F0                 pop     rbp
.text:00000000000020F1                 retn
.text:00000000000020F1 deregister_tm_clones endp
.text:00000000000020F1
.text:00000000000020F1 ; ---------------------------------------------------------------------------
.text:00000000000020F2                 align 20h
.text:0000000000002100
.text:0000000000002100 ; =============== S U B R O U T I N E =======================================
.text:0000000000002100
.text:0000000000002100 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002100
.text:0000000000002100 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002100                 lea     rdi, __bss_start
.text:0000000000002107                 lea     rsi, __bss_start
.text:000000000000210E                 push    rbp
.text:000000000000210F                 sub     rsi, rdi
.text:0000000000002112                 mov     rbp, rsp
.text:0000000000002115                 sar     rsi, 3
.text:0000000000002119                 mov     rax, rsi
.text:000000000000211C                 shr     rax, 3Fh
.text:0000000000002120                 add     rsi, rax
.text:0000000000002123                 sar     rsi, 1
.text:0000000000002126                 jz      short loc_2140
.text:0000000000002128                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000212F                 test    rax, rax
.text:0000000000002132                 jz      short loc_2140
.text:0000000000002134                 pop     rbp
.text:0000000000002135                 jmp     rax
.text:0000000000002135 ; ---------------------------------------------------------------------------
.text:0000000000002137                 align 20h
.text:0000000000002140
.text:0000000000002140 loc_2140:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002140                                         ; register_tm_clones+32↑j
.text:0000000000002140                 pop     rbp
.text:0000000000002141                 retn
.text:0000000000002141 register_tm_clones endp
.text:0000000000002141
.text:0000000000002141 ; ---------------------------------------------------------------------------
.text:0000000000002142                 align 10h
.text:0000000000002150
.text:0000000000002150 ; =============== S U B R O U T I N E =======================================
.text:0000000000002150
.text:0000000000002150 ; Attributes: info_from_lumina
.text:0000000000002150
.text:0000000000002150 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002150                 cmp     cs:completed_7697, 0
.text:0000000000002157                 jnz     short locret_2188
.text:0000000000002159                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002161                 push    rbp
.text:0000000000002162                 mov     rbp, rsp
.text:0000000000002165                 jz      short loc_2173
.text:0000000000002167                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000216E                 call    __cxa_finalize
.text:0000000000002173
.text:0000000000002173 loc_2173:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002173                 call    deregister_tm_clones
.text:0000000000002178                 mov     cs:completed_7697, 1
.text:000000000000217F                 pop     rbp
.text:0000000000002180                 retn
.text:0000000000002180 ; ---------------------------------------------------------------------------
.text:0000000000002181                 align 8
.text:0000000000002188
.text:0000000000002188 locret_2188:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002188                 rep retn
.text:0000000000002188 __do_global_dtors_aux endp
.text:0000000000002188
.text:0000000000002188 ; ---------------------------------------------------------------------------
.text:000000000000218A                 align 10h
.text:0000000000002190
.text:0000000000002190 ; =============== S U B R O U T I N E =======================================
.text:0000000000002190
.text:0000000000002190 ; Attributes: bp-based frame
.text:0000000000002190
.text:0000000000002190 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002190                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002190                 push    rbp
.text:0000000000002191                 mov     rbp, rsp
.text:0000000000002194                 pop     rbp
.text:0000000000002195                 jmp     register_tm_clones
.text:0000000000002195 frame_dummy     endp
.text:0000000000002195
.text:0000000000002195 ; ---------------------------------------------------------------------------
.text:000000000000219A                 align 20h
.text:00000000000021A0
.text:00000000000021A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021A0
.text:00000000000021A0
.text:00000000000021A0 decimal_absval_add_one proc near        ; CODE XREF: main+D4↑p
.text:00000000000021A0                                         ; main+12A↑p ...
.text:00000000000021A0 ; __unwind {
.text:00000000000021A0                 push    rbp
.text:00000000000021A1                 push    rbx
.text:00000000000021A2                 xor     eax, eax
.text:00000000000021A4                 sub     rsp, 8
.text:00000000000021A8                 movzx   ebp, byte ptr [rdi+1]
.text:00000000000021AC                 cmp     bpl, 2Dh ; '-'
.text:00000000000021B0                 setz    al
.text:00000000000021B3                 lea     rbx, [rdi+rax+1]
.text:00000000000021B8                 mov     rdi, rbx        ; s
.text:00000000000021BB                 call    _strlen
.text:00000000000021C0                 add     rax, rbx
.text:00000000000021C3                 mov     byte ptr [rbx-1], 30h ; '0'
.text:00000000000021C7                 movzx   ecx, byte ptr [rax-1]
.text:00000000000021CB                 lea     rdx, [rax-1]
.text:00000000000021CF                 cmp     cl, 39h ; '9'
.text:00000000000021D2                 jnz     short loc_21E7
.text:00000000000021D4                 nop     dword ptr [rax+00h]
.text:00000000000021D8
.text:00000000000021D8 loc_21D8:                               ; CODE XREF: decimal_absval_add_one+45↓j
.text:00000000000021D8                 mov     byte ptr [rdx], 30h ; '0'
.text:00000000000021DB                 sub     rdx, 1
.text:00000000000021DF                 movzx   ecx, byte ptr [rdx]
.text:00000000000021E2                 cmp     cl, 39h ; '9'
.text:00000000000021E5                 jz      short loc_21D8
.text:00000000000021E7
.text:00000000000021E7 loc_21E7:                               ; CODE XREF: decimal_absval_add_one+32↑j
.text:00000000000021E7                 add     ecx, 1
.text:00000000000021EA                 mov     rax, rdx
.text:00000000000021ED                 cmp     rbx, rdx
.text:00000000000021F0                 cmovbe  rax, rbx
.text:00000000000021F4                 cmp     bpl, 2Dh ; '-'
.text:00000000000021F8                 mov     [rdx], cl
.text:00000000000021FA                 jnz     short loc_2204
.text:00000000000021FC                 mov     byte ptr [rax-1], 2Dh ; '-'
.text:0000000000002200                 sub     rax, 1
.text:0000000000002204
.text:0000000000002204 loc_2204:                               ; CODE XREF: decimal_absval_add_one+5A↑j
.text:0000000000002204                 add     rsp, 8
.text:0000000000002208                 pop     rbx
.text:0000000000002209                 pop     rbp
.text:000000000000220A                 retn
.text:000000000000220A ; } // starts at 21A0
.text:000000000000220A decimal_absval_add_one endp
.text:000000000000220A
.text:000000000000220A ; ---------------------------------------------------------------------------
.text:000000000000220B                 align 10h
.text:0000000000002210
.text:0000000000002210 ; =============== S U B R O U T I N E =======================================
.text:0000000000002210
.text:0000000000002210
.text:0000000000002210 print_FLT       proc near               ; CODE XREF: main+9DC↑p
.text:0000000000002210                                         ; main+9FC↑p
.text:0000000000002210
.text:0000000000002210 var_10          = qword ptr -10h
.text:0000000000002210
.text:0000000000002210 ; __unwind {
.text:0000000000002210                 push    rbx
.text:0000000000002211                 xor     ecx, ecx
.text:0000000000002213                 mov     edx, 1
.text:0000000000002218                 mov     esi, 1Fh
.text:000000000000221D                 sub     rsp, 30h
.text:0000000000002221                 mov     rbx, rsp
.text:0000000000002224                 mov     rdi, rbx        ; nptr
.text:0000000000002227                 mov     rax, fs:28h
.text:0000000000002230                 mov     [rsp+38h+var_10], rax
.text:0000000000002235                 xor     eax, eax
.text:0000000000002237                 call    ftoastr
.text:000000000000223C                 mov     rdi, rbx        ; s
.text:000000000000223F                 call    _puts
.text:0000000000002244                 mov     rax, [rsp+38h+var_10]
.text:0000000000002249                 xor     rax, fs:28h
.text:0000000000002252                 jnz     short loc_225A
.text:0000000000002254                 add     rsp, 30h
.text:0000000000002258                 pop     rbx
.text:0000000000002259                 retn
.text:000000000000225A ; ---------------------------------------------------------------------------
.text:000000000000225A
.text:000000000000225A loc_225A:                               ; CODE XREF: print_FLT+42↑j
.text:000000000000225A                 call    ___stack_chk_fail
.text:000000000000225A ; } // starts at 2210
.text:000000000000225A print_FLT       endp
.text:000000000000225A
.text:000000000000225A ; ---------------------------------------------------------------------------
.text:000000000000225F                 align 20h
.text:0000000000002260
.text:0000000000002260 ; =============== S U B R O U T I N E =======================================
.text:0000000000002260
.text:0000000000002260
.text:0000000000002260 print_DBL       proc near               ; CODE XREF: main+A1C↑p
.text:0000000000002260                                         ; main+A3C↑p
.text:0000000000002260
.text:0000000000002260 var_10          = qword ptr -10h
.text:0000000000002260
.text:0000000000002260 ; __unwind {
.text:0000000000002260                 push    rbx
.text:0000000000002261                 xor     ecx, ecx
.text:0000000000002263                 mov     edx, 1
.text:0000000000002268                 mov     esi, 28h ; '('
.text:000000000000226D                 sub     rsp, 30h
.text:0000000000002271                 mov     rbx, rsp
.text:0000000000002274                 mov     rdi, rbx        ; nptr
.text:0000000000002277                 mov     rax, fs:28h
.text:0000000000002280                 mov     [rsp+38h+var_10], rax
.text:0000000000002285                 xor     eax, eax
.text:0000000000002287                 call    dtoastr
.text:000000000000228C                 mov     rdi, rbx        ; s
.text:000000000000228F                 call    _puts
.text:0000000000002294                 mov     rax, [rsp+38h+var_10]
.text:0000000000002299                 xor     rax, fs:28h
.text:00000000000022A2                 jnz     short loc_22AA
.text:00000000000022A4                 add     rsp, 30h
.text:00000000000022A8                 pop     rbx
.text:00000000000022A9                 retn
.text:00000000000022AA ; ---------------------------------------------------------------------------
.text:00000000000022AA
.text:00000000000022AA loc_22AA:                               ; CODE XREF: print_DBL+42↑j
.text:00000000000022AA                 call    ___stack_chk_fail
.text:00000000000022AA ; } // starts at 2260
.text:00000000000022AA print_DBL       endp
.text:00000000000022AA
.text:00000000000022AA ; ---------------------------------------------------------------------------
.text:00000000000022AF                 align 10h
.text:00000000000022B0
.text:00000000000022B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022B0
.text:00000000000022B0
.text:00000000000022B0 ; __int64 __fastcall print_LDBL(_TBYTE)
.text:00000000000022B0 print_LDBL      proc near               ; CODE XREF: main+A61↑p
.text:00000000000022B0                                         ; main+A84↑p
.text:00000000000022B0
.text:00000000000022B0 var_10          = qword ptr -10h
.text:00000000000022B0 arg_0           = tbyte ptr  8
.text:00000000000022B0
.text:00000000000022B0 ; __unwind {
.text:00000000000022B0                 push    rbx
.text:00000000000022B1                 xor     ecx, ecx
.text:00000000000022B3                 mov     edx, 1
.text:00000000000022B8                 mov     esi, 2Dh ; '-'
.text:00000000000022BD                 sub     rsp, 40h
.text:00000000000022C1                 mov     rax, fs:28h
.text:00000000000022CA                 mov     [rsp+48h+var_10], rax
.text:00000000000022CF                 xor     eax, eax
.text:00000000000022D1                 mov     rbx, rsp
.text:00000000000022D4                 push    qword ptr [rsp+48h+arg_0+8]
.text:00000000000022D8                 push    qword ptr [rsp+50h+arg_0] ; _TBYTE
.text:00000000000022DC                 mov     rdi, rbx        ; nptr
.text:00000000000022DF                 call    ldtoastr
.text:00000000000022E4                 mov     rdi, rbx        ; s
.text:00000000000022E7                 call    _puts
.text:00000000000022EC                 pop     rax
.text:00000000000022ED                 pop     rdx
.text:00000000000022EE                 mov     rax, [rsp+48h+var_10]
.text:00000000000022F3                 xor     rax, fs:28h
.text:00000000000022FC                 jnz     short loc_2304
.text:00000000000022FE                 add     rsp, 40h
.text:0000000000002302                 pop     rbx
.text:0000000000002303                 retn
.text:0000000000002304 ; ---------------------------------------------------------------------------
.text:0000000000002304
.text:0000000000002304 loc_2304:                               ; CODE XREF: print_LDBL+4C↑j
.text:0000000000002304                 call    ___stack_chk_fail
.text:0000000000002304 ; } // starts at 22B0
.text:0000000000002304 print_LDBL      endp
.text:0000000000002304
.text:0000000000002304 ; ---------------------------------------------------------------------------
.text:0000000000002309                 align 10h
.text:0000000000002310
.text:0000000000002310 ; =============== S U B R O U T I N E =======================================
.text:0000000000002310
.text:0000000000002310 ; Attributes: noreturn
.text:0000000000002310
.text:0000000000002310 ; void __fastcall __noreturn usage(int status)
.text:0000000000002310                 public usage
.text:0000000000002310 usage           proc near               ; DATA XREF: main+6A↑o
.text:0000000000002310
.text:0000000000002310 var_A8          = qword ptr -0A8h
.text:0000000000002310 var_A0          = qword ptr -0A0h
.text:0000000000002310 var_98          = qword ptr -98h
.text:0000000000002310 var_90          = qword ptr -90h
.text:0000000000002310 var_88          = qword ptr -88h
.text:0000000000002310 var_80          = qword ptr -80h
.text:0000000000002310 var_78          = qword ptr -78h
.text:0000000000002310 var_70          = qword ptr -70h
.text:0000000000002310 var_68          = qword ptr -68h
.text:0000000000002310 var_60          = qword ptr -60h
.text:0000000000002310 var_58          = qword ptr -58h
.text:0000000000002310 var_50          = qword ptr -50h
.text:0000000000002310 var_48          = qword ptr -48h
.text:0000000000002310 var_40          = qword ptr -40h
.text:0000000000002310 var_30          = qword ptr -30h
.text:0000000000002310
.text:0000000000002310 ; __unwind {
.text:0000000000002310                 push    r13
.text:0000000000002312                 push    r12
.text:0000000000002314                 mov     edx, 5          ; category
.text:0000000000002319                 push    rbp
.text:000000000000231A                 push    rbx
.text:000000000000231B                 mov     ebp, edi
.text:000000000000231D                 sub     rsp, 88h
.text:0000000000002324                 mov     rbx, cs:program_name
.text:000000000000232B                 mov     rax, fs:28h
.text:0000000000002334                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002339                 xor     eax, eax
.text:000000000000233B                 test    edi, edi
.text:000000000000233D                 jz      short loc_236D
.text:000000000000233F                 lea     rsi, msgid      ; "Try '%s --help' for more information.\n"
.text:0000000000002346                 xor     edi, edi        ; domainname
.text:0000000000002348                 call    _dcgettext
.text:000000000000234D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002354                 mov     rdx, rax
.text:0000000000002357                 mov     rcx, rbx
.text:000000000000235A                 mov     esi, 1
.text:000000000000235F                 xor     eax, eax
.text:0000000000002361                 call    ___fprintf_chk
.text:0000000000002366
.text:0000000000002366 loc_2366:                               ; CODE XREF: usage+27E↓j
.text:0000000000002366                 mov     edi, ebp        ; status
.text:0000000000002368                 call    _exit
.text:000000000000236D ; ---------------------------------------------------------------------------
.text:000000000000236D
.text:000000000000236D loc_236D:                               ; CODE XREF: usage+2D↑j
.text:000000000000236D                 lea     rsi, aUsageS    ; "Usage: %s\n"
.text:0000000000002374                 xor     edi, edi        ; domainname
.text:0000000000002376                 call    _dcgettext
.text:000000000000237B                 mov     rdx, rbx
.text:000000000000237E                 mov     rsi, rax
.text:0000000000002381                 mov     edi, 1
.text:0000000000002386                 xor     eax, eax
.text:0000000000002388                 call    ___printf_chk
.text:000000000000238D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002394                 lea     rsi, aOutputPlatform ; "Output platform dependent limits in a f"...
.text:000000000000239B                 mov     edx, 5          ; category
.text:00000000000023A0                 xor     edi, edi        ; domainname
.text:00000000000023A2                 call    _dcgettext
.text:00000000000023A7                 mov     rsi, rbx        ; stream
.text:00000000000023AA                 mov     rdi, rax        ; s
.text:00000000000023AD                 call    _fputs_unlocked
.text:00000000000023B2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000023B9                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000023C0                 mov     edx, 5          ; category
.text:00000000000023C5                 xor     edi, edi        ; domainname
.text:00000000000023C7                 call    _dcgettext
.text:00000000000023CC                 mov     rsi, rbx        ; stream
.text:00000000000023CF                 mov     rdi, rax        ; s
.text:00000000000023D2                 call    _fputs_unlocked
.text:00000000000023D7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000023DE                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000023E5                 mov     edx, 5          ; category
.text:00000000000023EA                 xor     edi, edi        ; domainname
.text:00000000000023EC                 call    _dcgettext
.text:00000000000023F1                 mov     rsi, rbx        ; stream
.text:00000000000023F4                 mov     rdi, rax        ; s
.text:00000000000023F7                 lea     rbx, aGetlimits ; "getlimits"
.text:00000000000023FE                 call    _fputs_unlocked
.text:0000000000002403                 lea     rax, asc_5759   ; "["
.text:000000000000240A                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002411                 mov     [rsp+0A8h+var_48], 0
.text:000000000000241A                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002423                 mov     rdx, rsp
.text:0000000000002426                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000242A                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002431                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002436                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000243D                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002442                 lea     rax, domainname ; "coreutils"
.text:0000000000002449                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000244E                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002455                 mov     [rsp+0A8h+var_98], rax
.text:000000000000245A                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002461                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002466                 mov     [rsp+0A8h+var_90], rax
.text:000000000000246B                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002472                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002477                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000247E                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002483                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002488                 mov     [rsp+0A8h+var_60], rax
.text:000000000000248D                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002492                 nop     word ptr [rax+rax+00h]
.text:0000000000002498
.text:0000000000002498 loc_2498:                               ; CODE XREF: usage+1A5↓j
.text:0000000000002498                 add     rdx, 10h
.text:000000000000249C                 mov     rdi, [rdx]
.text:000000000000249F                 test    rdi, rdi
.text:00000000000024A2                 jz      short loc_24B7
.text:00000000000024A4                 mov     ecx, 0Ah
.text:00000000000024A9                 mov     rsi, rbx
.text:00000000000024AC                 repe cmpsb
.text:00000000000024AE                 setnbe  al
.text:00000000000024B1                 sbb     al, 0
.text:00000000000024B3                 test    al, al
.text:00000000000024B5                 jnz     short loc_2498
.text:00000000000024B7
.text:00000000000024B7 loc_24B7:                               ; CODE XREF: usage+192↑j
.text:00000000000024B7                 mov     r12, [rdx+8]
.text:00000000000024BB                 xor     edi, edi        ; domainname
.text:00000000000024BD                 mov     edx, 5          ; category
.text:00000000000024C2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000024C9                 test    r12, r12
.text:00000000000024CC                 jz      loc_2593
.text:00000000000024D2                 call    _dcgettext
.text:00000000000024D7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000024DE                 lea     rdx, unk_57CF
.text:00000000000024E5                 mov     rsi, rax
.text:00000000000024E8                 mov     edi, 1
.text:00000000000024ED                 xor     eax, eax
.text:00000000000024EF                 call    ___printf_chk
.text:00000000000024F4                 xor     esi, esi        ; locale
.text:00000000000024F6                 mov     edi, 5          ; category
.text:00000000000024FB                 call    _setlocale
.text:0000000000002500                 test    rax, rax
.text:0000000000002503                 jz      short loc_2521
.text:0000000000002505                 lea     rsi, s2         ; "en_"
.text:000000000000250C                 mov     edx, 3          ; n
.text:0000000000002511                 mov     rdi, rax        ; s1
.text:0000000000002514                 call    _strncmp
.text:0000000000002519                 test    eax, eax
.text:000000000000251B                 jnz     loc_2628
.text:0000000000002521
.text:0000000000002521 loc_2521:                               ; CODE XREF: usage+1F3↑j
.text:0000000000002521                                         ; usage+33D↓j
.text:0000000000002521                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002528                 xor     edi, edi        ; domainname
.text:000000000000252A                 mov     edx, 5          ; category
.text:000000000000252F                 call    _dcgettext
.text:0000000000002534                 lea     rcx, aGetlimits ; "getlimits"
.text:000000000000253B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002542                 mov     rsi, rax
.text:0000000000002545                 mov     edi, 1
.text:000000000000254A                 xor     eax, eax
.text:000000000000254C                 call    ___printf_chk
.text:0000000000002551                 cmp     r12, rbx
.text:0000000000002554                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000255B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002562                 cmovz   rbx, rcx
.text:0000000000002566
.text:0000000000002566 loc_2566:                               ; CODE XREF: usage+30C↓j
.text:0000000000002566                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000256D                 xor     edi, edi        ; domainname
.text:000000000000256F                 mov     edx, 5          ; category
.text:0000000000002574                 call    _dcgettext
.text:0000000000002579                 mov     rcx, rbx
.text:000000000000257C                 mov     rsi, rax
.text:000000000000257F                 mov     rdx, r12
.text:0000000000002582                 mov     edi, 1
.text:0000000000002587                 xor     eax, eax
.text:0000000000002589                 call    ___printf_chk
.text:000000000000258E                 jmp     loc_2366
.text:0000000000002593 ; ---------------------------------------------------------------------------
.text:0000000000002593
.text:0000000000002593 loc_2593:                               ; CODE XREF: usage+1BC↑j
.text:0000000000002593                 call    _dcgettext
.text:0000000000002598                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000259F                 lea     rdx, unk_57CF
.text:00000000000025A6                 mov     rsi, rax
.text:00000000000025A9                 mov     edi, 1
.text:00000000000025AE                 xor     eax, eax
.text:00000000000025B0                 call    ___printf_chk
.text:00000000000025B5                 xor     esi, esi        ; locale
.text:00000000000025B7                 mov     edi, 5          ; category
.text:00000000000025BC                 call    _setlocale
.text:00000000000025C1                 test    rax, rax
.text:00000000000025C4                 jz      short loc_25DE
.text:00000000000025C6                 lea     rsi, s2         ; "en_"
.text:00000000000025CD                 mov     edx, 3          ; n
.text:00000000000025D2                 mov     rdi, rax        ; s1
.text:00000000000025D5                 call    _strncmp
.text:00000000000025DA                 test    eax, eax
.text:00000000000025DC                 jnz     short loc_2621
.text:00000000000025DE
.text:00000000000025DE loc_25DE:                               ; CODE XREF: usage+2B4↑j
.text:00000000000025DE                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000025E5                 mov     edx, 5          ; category
.text:00000000000025EA                 xor     edi, edi        ; domainname
.text:00000000000025EC                 lea     r12, aGetlimits ; "getlimits"
.text:00000000000025F3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000025FA                 call    _dcgettext
.text:00000000000025FF                 lea     rcx, aGetlimits ; "getlimits"
.text:0000000000002606                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000260D                 mov     rsi, rax
.text:0000000000002610                 mov     edi, 1
.text:0000000000002615                 xor     eax, eax
.text:0000000000002617                 call    ___printf_chk
.text:000000000000261C                 jmp     loc_2566
.text:0000000000002621 ; ---------------------------------------------------------------------------
.text:0000000000002621
.text:0000000000002621 loc_2621:                               ; CODE XREF: usage+2CC↑j
.text:0000000000002621                 lea     r12, aGetlimits ; "getlimits"
.text:0000000000002628
.text:0000000000002628 loc_2628:                               ; CODE XREF: usage+20B↑j
.text:0000000000002628                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000262F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002636                 xor     edi, edi        ; domainname
.text:0000000000002638                 mov     edx, 5          ; category
.text:000000000000263D                 call    _dcgettext
.text:0000000000002642                 mov     rsi, r13        ; stream
.text:0000000000002645                 mov     rdi, rax        ; s
.text:0000000000002648                 call    _fputs_unlocked
.text:000000000000264D                 jmp     loc_2521
.text:000000000000264D ; } // starts at 2310
.text:000000000000264D usage           endp
.text:000000000000264D
.text:000000000000264D ; ---------------------------------------------------------------------------
.text:0000000000002652                 align 20h
.text:0000000000002660
.text:0000000000002660 ; =============== S U B R O U T I N E =======================================
.text:0000000000002660
.text:0000000000002660
.text:0000000000002660                 public close_stdout_set_file_name
.text:0000000000002660 close_stdout_set_file_name proc near
.text:0000000000002660 ; __unwind {
.text:0000000000002660                 mov     cs:file_name, rdi
.text:0000000000002667                 retn
.text:0000000000002667 ; } // starts at 2660
.text:0000000000002667 close_stdout_set_file_name endp
.text:0000000000002667
.text:0000000000002667 ; ---------------------------------------------------------------------------
.text:0000000000002668                 align 10h
.text:0000000000002670
.text:0000000000002670 ; =============== S U B R O U T I N E =======================================
.text:0000000000002670
.text:0000000000002670
.text:0000000000002670                 public close_stdout_set_ignore_EPIPE
.text:0000000000002670 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002670 ; __unwind {
.text:0000000000002670                 mov     cs:ignore_EPIPE, dil
.text:0000000000002677                 retn
.text:0000000000002677 ; } // starts at 2670
.text:0000000000002677 close_stdout_set_ignore_EPIPE endp
.text:0000000000002677
.text:0000000000002677 ; ---------------------------------------------------------------------------
.text:0000000000002678                 align 20h
.text:0000000000002680
.text:0000000000002680 ; =============== S U B R O U T I N E =======================================
.text:0000000000002680
.text:0000000000002680 ; Attributes: info_from_lumina
.text:0000000000002680
.text:0000000000002680 ; void __cdecl close_stdout()
.text:0000000000002680                 public close_stdout
.text:0000000000002680 close_stdout    proc near               ; DATA XREF: main+53↑o
.text:0000000000002680 ; __unwind {
.text:0000000000002680                 push    rbp
.text:0000000000002681                 push    rbx
.text:0000000000002682                 sub     rsp, 8
.text:0000000000002686                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000268D                 call    close_stream
.text:0000000000002692                 test    eax, eax
.text:0000000000002694                 jz      short loc_26AC
.text:0000000000002696                 call    ___errno_location
.text:000000000000269B                 cmp     cs:ignore_EPIPE, 0
.text:00000000000026A2                 mov     rbx, rax
.text:00000000000026A5                 jz      short loc_26C3
.text:00000000000026A7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000026AA                 jnz     short loc_26C3
.text:00000000000026AC
.text:00000000000026AC loc_26AC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000026AC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000026B3                 call    close_stream
.text:00000000000026B8                 test    eax, eax
.text:00000000000026BA                 jnz     short loc_2702
.text:00000000000026BC                 add     rsp, 8
.text:00000000000026C0                 pop     rbx
.text:00000000000026C1                 pop     rbp
.text:00000000000026C2                 retn
.text:00000000000026C3 ; ---------------------------------------------------------------------------
.text:00000000000026C3
.text:00000000000026C3 loc_26C3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000026C3                                         ; close_stdout+2A↑j
.text:00000000000026C3                 lea     rsi, aWriteError ; "write error"
.text:00000000000026CA                 xor     edi, edi        ; domainname
.text:00000000000026CC                 mov     edx, 5          ; category
.text:00000000000026D1                 call    _dcgettext
.text:00000000000026D6                 mov     rdi, cs:file_name
.text:00000000000026DD                 mov     rbp, rax
.text:00000000000026E0                 test    rdi, rdi
.text:00000000000026E3                 jz      short loc_270D
.text:00000000000026E5                 call    quotearg_colon
.text:00000000000026EA                 mov     esi, [rbx]      ; errnum
.text:00000000000026EC                 lea     rdx, format     ; "%s: %s"
.text:00000000000026F3                 mov     rcx, rax
.text:00000000000026F6                 mov     r8, rbp
.text:00000000000026F9                 xor     edi, edi        ; status
.text:00000000000026FB                 xor     eax, eax
.text:00000000000026FD                 call    _error
.text:0000000000002702
.text:0000000000002702 loc_2702:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002702                                         ; close_stdout+A2↓j
.text:0000000000002702                 mov     edi, cs:exit_failure ; status
.text:0000000000002708                 call    __exit
.text:000000000000270D ; ---------------------------------------------------------------------------
.text:000000000000270D
.text:000000000000270D loc_270D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000270D                 mov     esi, [rbx]      ; errnum
.text:000000000000270F                 lea     rdx, format+4   ; format
.text:0000000000002716                 mov     rcx, rax
.text:0000000000002719                 xor     edi, edi        ; status
.text:000000000000271B                 xor     eax, eax
.text:000000000000271D                 call    _error
.text:0000000000002722                 jmp     short loc_2702
.text:0000000000002722 ; } // starts at 2680
.text:0000000000002722 close_stdout    endp
.text:0000000000002722
.text:0000000000002722 ; ---------------------------------------------------------------------------
.text:0000000000002724                 align 10h
.text:0000000000002730
.text:0000000000002730 ; =============== S U B R O U T I N E =======================================
.text:0000000000002730
.text:0000000000002730
.text:0000000000002730 ; __int64 __fastcall dtoastr(char *nptr)
.text:0000000000002730                 public dtoastr
.text:0000000000002730 dtoastr         proc near               ; CODE XREF: print_DBL+27↑p
.text:0000000000002730
.text:0000000000002730 var_68          = qword ptr -68h
.text:0000000000002730 var_5C          = dword ptr -5Ch
.text:0000000000002730 var_4B          = word ptr -4Bh
.text:0000000000002730 var_40          = qword ptr -40h
.text:0000000000002730
.text:0000000000002730 ; __unwind {
.text:0000000000002730                 push    r15
.text:0000000000002732                 push    r14
.text:0000000000002734                 mov     r14d, ecx
.text:0000000000002737                 push    r13
.text:0000000000002739                 push    r12
.text:000000000000273B                 mov     r12, rdi
.text:000000000000273E                 push    rbp
.text:000000000000273F                 push    rbx
.text:0000000000002740                 mov     rbp, rsi
.text:0000000000002743                 movapd  xmm3, xmm0
.text:0000000000002747                 sub     rsp, 38h
.text:000000000000274B                 movsd   [rsp+68h+var_68], xmm0
.text:0000000000002750                 pxor    xmm0, xmm0
.text:0000000000002754                 mov     rax, fs:28h
.text:000000000000275D                 mov     [rsp+68h+var_40], rax
.text:0000000000002762                 xor     eax, eax
.text:0000000000002764                 ucomisd xmm0, xmm3
.text:0000000000002768                 ja      loc_2880
.text:000000000000276E                 movsd   xmm0, [rsp+68h+var_68]
.text:0000000000002773
.text:0000000000002773 loc_2773:                               ; CODE XREF: dtoastr+15C↓j
.text:0000000000002773                 mov     eax, edx
.text:0000000000002775                 lea     r13, [rsp+68h+var_4B]
.text:000000000000277A                 mov     ecx, edx
.text:000000000000277C                 and     eax, 1
.text:000000000000277F                 shr     ecx, 1
.text:0000000000002781                 mov     esi, 2D25h
.text:0000000000002786                 lea     rdi, [r13+rax+1]
.text:000000000000278B                 and     ecx, 1
.text:000000000000278E                 mov     eax, edx
.text:0000000000002790                 mov     [rsp+68h+var_4B], si
.text:0000000000002795                 shr     eax, 2
.text:0000000000002798                 mov     ebx, 1
.text:000000000000279D                 lea     rsi, [rdi+rcx]
.text:00000000000027A1                 and     eax, 1
.text:00000000000027A4                 mov     byte ptr [rdi], 2Bh ; '+'
.text:00000000000027A7                 movsd   xmm1, cs:qword_5C60
.text:00000000000027AF                 mov     edi, 2E2Ah
.text:00000000000027B4                 lea     rcx, [rsi+rax]
.text:00000000000027B8                 mov     eax, edx
.text:00000000000027BA                 and     edx, 10h
.text:00000000000027BD                 shr     eax, 3
.text:00000000000027C0                 mov     byte ptr [rsi], 20h ; ' '
.text:00000000000027C3                 mov     r15, 0FFFFFFFFFFFFFFFFh
.text:00000000000027CA                 and     eax, 1
.text:00000000000027CD                 mov     byte ptr [rcx], 30h ; '0'
.text:00000000000027D0                 add     rax, rcx
.text:00000000000027D3                 cmp     edx, 1
.text:00000000000027D6                 sbb     edx, edx
.text:00000000000027D8                 mov     [rax], di
.text:00000000000027DB                 mov     byte ptr [rax+2], 2Ah ; '*'
.text:00000000000027DF                 and     edx, 20h
.text:00000000000027E2                 mov     byte ptr [rax+4], 0
.text:00000000000027E6                 add     edx, 47h ; 'G'
.text:00000000000027E9                 ucomisd xmm1, xmm0
.text:00000000000027ED                 mov     [rax+3], dl
.text:00000000000027F0                 mov     eax, 0Fh
.text:00000000000027F5                 cmovbe  ebx, eax
.text:00000000000027F8                 jmp     short loc_2803
.text:00000000000027F8 ; ---------------------------------------------------------------------------
.text:00000000000027FA                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: dtoastr+10D↓j
.text:0000000000002800                                         ; dtoastr+122↓j ...
.text:0000000000002800                 add     ebx, 1
.text:0000000000002803
.text:0000000000002803 loc_2803:                               ; CODE XREF: dtoastr+C8↑j
.text:0000000000002803                 sub     rsp, 8
.text:0000000000002807                 mov     rcx, r15
.text:000000000000280A                 mov     edx, 1
.text:000000000000280F                 push    rbx
.text:0000000000002810                 mov     r9d, r14d
.text:0000000000002813                 mov     r8, r13
.text:0000000000002816                 mov     rsi, rbp
.text:0000000000002819                 mov     rdi, r12
.text:000000000000281C                 mov     eax, 1
.text:0000000000002821                 movsd   xmm0, [rsp+78h+var_68]
.text:0000000000002827                 call    ___snprintf_chk
.text:000000000000282C                 test    eax, eax
.text:000000000000282E                 pop     rdx
.text:000000000000282F                 pop     rcx
.text:0000000000002830                 js      short loc_285A
.text:0000000000002832                 cmp     ebx, 10h
.text:0000000000002835                 jg      short loc_285A
.text:0000000000002837                 movsxd  rdx, eax
.text:000000000000283A                 cmp     rdx, rbp
.text:000000000000283D                 jnb     short loc_2800
.text:000000000000283F                 xor     esi, esi        ; endptr
.text:0000000000002841                 mov     rdi, r12        ; nptr
.text:0000000000002844                 mov     [rsp+68h+var_5C], eax
.text:0000000000002848                 call    _strtod
.text:000000000000284D                 ucomisd xmm0, [rsp+68h+var_68]
.text:0000000000002852                 jp      short loc_2800
.text:0000000000002854                 mov     eax, [rsp+68h+var_5C]
.text:0000000000002858                 jnz     short loc_2800
.text:000000000000285A
.text:000000000000285A loc_285A:                               ; CODE XREF: dtoastr+100↑j
.text:000000000000285A                                         ; dtoastr+105↑j
.text:000000000000285A                 mov     rsi, [rsp+68h+var_40]
.text:000000000000285F                 xor     rsi, fs:28h
.text:0000000000002868                 jnz     short loc_2891
.text:000000000000286A                 add     rsp, 38h
.text:000000000000286E                 pop     rbx
.text:000000000000286F                 pop     rbp
.text:0000000000002870                 pop     r12
.text:0000000000002872                 pop     r13
.text:0000000000002874                 pop     r14
.text:0000000000002876                 pop     r15
.text:0000000000002878                 retn
.text:0000000000002878 ; ---------------------------------------------------------------------------
.text:0000000000002879                 align 20h
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: dtoastr+38↑j
.text:0000000000002880                 movapd  xmm0, xmm3
.text:0000000000002884                 xorpd   xmm0, cs:xmmword_5C90
.text:000000000000288C                 jmp     loc_2773
.text:0000000000002891 ; ---------------------------------------------------------------------------
.text:0000000000002891
.text:0000000000002891 loc_2891:                               ; CODE XREF: dtoastr+138↑j
.text:0000000000002891                 call    ___stack_chk_fail
.text:0000000000002891 ; } // starts at 2730
.text:0000000000002891 dtoastr         endp
.text:0000000000002891
.text:0000000000002891 ; ---------------------------------------------------------------------------
.text:0000000000002896                 align 20h
.text:00000000000028A0
.text:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028A0
.text:00000000000028A0
.text:00000000000028A0 ; __int64 __fastcall ftoastr(char *nptr)
.text:00000000000028A0                 public ftoastr
.text:00000000000028A0 ftoastr         proc near               ; CODE XREF: print_FLT+27↑p
.text:00000000000028A0
.text:00000000000028A0 var_68          = qword ptr -68h
.text:00000000000028A0 var_60          = dword ptr -60h
.text:00000000000028A0 var_5C          = dword ptr -5Ch
.text:00000000000028A0 var_4B          = word ptr -4Bh
.text:00000000000028A0 var_40          = qword ptr -40h
.text:00000000000028A0
.text:00000000000028A0 ; __unwind {
.text:00000000000028A0                 push    r15
.text:00000000000028A2                 pxor    xmm4, xmm4
.text:00000000000028A6                 push    r14
.text:00000000000028A8                 push    r13
.text:00000000000028AA                 mov     r15d, ecx
.text:00000000000028AD                 push    r12
.text:00000000000028AF                 push    rbp
.text:00000000000028B0                 mov     r12, rdi
.text:00000000000028B3                 push    rbx
.text:00000000000028B4                 movaps  xmm3, xmm0
.text:00000000000028B7                 cvtss2sd xmm4, xmm0
.text:00000000000028BB                 mov     rbp, rsi
.text:00000000000028BE                 sub     rsp, 38h
.text:00000000000028C2                 movss   [rsp+68h+var_5C], xmm0
.text:00000000000028C8                 pxor    xmm0, xmm0
.text:00000000000028CC                 mov     rax, fs:28h
.text:00000000000028D5                 mov     [rsp+68h+var_40], rax
.text:00000000000028DA                 xor     eax, eax
.text:00000000000028DC                 movsd   [rsp+68h+var_68], xmm4
.text:00000000000028E1                 ucomiss xmm0, xmm3
.text:00000000000028E4                 ja      loc_29F8
.text:00000000000028EA                 movss   xmm0, [rsp+68h+var_5C]
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: ftoastr+162↓j
.text:00000000000028F0                 mov     eax, edx
.text:00000000000028F2                 lea     r13, [rsp+68h+var_4B]
.text:00000000000028F7                 mov     ecx, edx
.text:00000000000028F9                 and     eax, 1
.text:00000000000028FC                 shr     ecx, 1
.text:00000000000028FE                 mov     esi, 2D25h
.text:0000000000002903                 lea     rdi, [r13+rax+1]
.text:0000000000002908                 and     ecx, 1
.text:000000000000290B                 mov     eax, edx
.text:000000000000290D                 mov     [rsp+68h+var_4B], si
.text:0000000000002912                 shr     eax, 2
.text:0000000000002915                 mov     r14, 0FFFFFFFFFFFFFFFFh
.text:000000000000291C                 lea     rsi, [rdi+rcx]
.text:0000000000002920                 and     eax, 1
.text:0000000000002923                 mov     byte ptr [rdi], 2Bh ; '+'
.text:0000000000002926                 movss   xmm1, cs:dword_5C54
.text:000000000000292E                 mov     edi, 2E2Ah
.text:0000000000002933                 lea     rcx, [rsi+rax]
.text:0000000000002937                 mov     eax, edx
.text:0000000000002939                 and     edx, 10h
.text:000000000000293C                 shr     eax, 3
.text:000000000000293F                 mov     byte ptr [rsi], 20h ; ' '
.text:0000000000002942                 and     eax, 1
.text:0000000000002945                 mov     byte ptr [rcx], 30h ; '0'
.text:0000000000002948                 add     rax, rcx
.text:000000000000294B                 cmp     edx, 1
.text:000000000000294E                 sbb     edx, edx
.text:0000000000002950                 xor     ebx, ebx
.text:0000000000002952                 mov     [rax], di
.text:0000000000002955                 and     edx, 20h
.text:0000000000002958                 mov     byte ptr [rax+2], 2Ah ; '*'
.text:000000000000295C                 mov     byte ptr [rax+4], 0
.text:0000000000002960                 add     edx, 47h ; 'G'
.text:0000000000002963                 ucomiss xmm1, xmm0
.text:0000000000002966                 mov     [rax+3], dl
.text:0000000000002969                 setbe   bl
.text:000000000000296C                 lea     ebx, [rbx+rbx*4+1]
.text:0000000000002970                 jmp     short loc_297B
.text:0000000000002970 ; ---------------------------------------------------------------------------
.text:0000000000002972                 align 8
.text:0000000000002978
.text:0000000000002978 loc_2978:                               ; CODE XREF: ftoastr+115↓j
.text:0000000000002978                                         ; ftoastr+12A↓j ...
.text:0000000000002978                 add     ebx, 1
.text:000000000000297B
.text:000000000000297B loc_297B:                               ; CODE XREF: ftoastr+D0↑j
.text:000000000000297B                 sub     rsp, 8
.text:000000000000297F                 mov     rcx, r14
.text:0000000000002982                 mov     edx, 1
.text:0000000000002987                 push    rbx
.text:0000000000002988                 mov     r9d, r15d
.text:000000000000298B                 mov     r8, r13
.text:000000000000298E                 mov     rsi, rbp
.text:0000000000002991                 mov     rdi, r12
.text:0000000000002994                 mov     eax, 1
.text:0000000000002999                 movsd   xmm0, [rsp+78h+var_68]
.text:000000000000299F                 call    ___snprintf_chk
.text:00000000000029A4                 test    eax, eax
.text:00000000000029A6                 pop     rdx
.text:00000000000029A7                 pop     rcx
.text:00000000000029A8                 js      short loc_29D2
.text:00000000000029AA                 cmp     ebx, 8
.text:00000000000029AD                 jg      short loc_29D2
.text:00000000000029AF                 movsxd  rdx, eax
.text:00000000000029B2                 cmp     rdx, rbp
.text:00000000000029B5                 jnb     short loc_2978
.text:00000000000029B7                 xor     esi, esi        ; endptr
.text:00000000000029B9                 mov     rdi, r12        ; nptr
.text:00000000000029BC                 mov     [rsp+68h+var_60], eax
.text:00000000000029C0                 call    _strtof
.text:00000000000029C5                 ucomiss xmm0, [rsp+68h+var_5C]
.text:00000000000029CA                 jp      short loc_2978
.text:00000000000029CC                 mov     eax, [rsp+68h+var_60]
.text:00000000000029D0                 jnz     short loc_2978
.text:00000000000029D2
.text:00000000000029D2 loc_29D2:                               ; CODE XREF: ftoastr+108↑j
.text:00000000000029D2                                         ; ftoastr+10D↑j
.text:00000000000029D2                 mov     rsi, [rsp+68h+var_40]
.text:00000000000029D7                 xor     rsi, fs:28h
.text:00000000000029E0                 jnz     short loc_2A07
.text:00000000000029E2                 add     rsp, 38h
.text:00000000000029E6                 pop     rbx
.text:00000000000029E7                 pop     rbp
.text:00000000000029E8                 pop     r12
.text:00000000000029EA                 pop     r13
.text:00000000000029EC                 pop     r14
.text:00000000000029EE                 pop     r15
.text:00000000000029F0                 retn
.text:00000000000029F0 ; ---------------------------------------------------------------------------
.text:00000000000029F1                 align 8
.text:00000000000029F8
.text:00000000000029F8 loc_29F8:                               ; CODE XREF: ftoastr+44↑j
.text:00000000000029F8                 movaps  xmm0, xmm3
.text:00000000000029FB                 xorps   xmm0, cs:xmmword_5CA0
.text:0000000000002A02                 jmp     loc_28F0
.text:0000000000002A07 ; ---------------------------------------------------------------------------
.text:0000000000002A07
.text:0000000000002A07 loc_2A07:                               ; CODE XREF: ftoastr+140↑j
.text:0000000000002A07                 call    ___stack_chk_fail
.text:0000000000002A07 ; } // starts at 28A0
.text:0000000000002A07 ftoastr         endp
.text:0000000000002A07
.text:0000000000002A07 ; ---------------------------------------------------------------------------
.text:0000000000002A0C                 align 10h
.text:0000000000002A10
.text:0000000000002A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A10
.text:0000000000002A10
.text:0000000000002A10 ; __int64 __usercall ldtoastr@<rax>(char *nptr@<rdi>, _TBYTE)
.text:0000000000002A10                 public ldtoastr
.text:0000000000002A10 ldtoastr        proc near               ; CODE XREF: print_LDBL+2F↑p
.text:0000000000002A10
.text:0000000000002A10 var_5C          = dword ptr -5Ch
.text:0000000000002A10 var_4B          = word ptr -4Bh
.text:0000000000002A10 var_40          = qword ptr -40h
.text:0000000000002A10 arg_0           = tbyte ptr  8
.text:0000000000002A10
.text:0000000000002A10 ; __unwind {
.text:0000000000002A10                 push    r15
.text:0000000000002A12                 push    r14
.text:0000000000002A14                 fldz
.text:0000000000002A16                 push    r13
.text:0000000000002A18                 push    r12
.text:0000000000002A1A                 mov     r14d, ecx
.text:0000000000002A1D                 push    rbp
.text:0000000000002A1E                 push    rbx
.text:0000000000002A1F                 mov     r12, rdi
.text:0000000000002A22                 mov     rbp, rsi
.text:0000000000002A25                 sub     rsp, 38h
.text:0000000000002A29                 fld     [rsp+68h+arg_0]
.text:0000000000002A2D                 fxch    st(1)
.text:0000000000002A2F                 mov     rax, fs:28h
.text:0000000000002A38                 mov     [rsp+68h+var_40], rax
.text:0000000000002A3D                 xor     eax, eax
.text:0000000000002A3F                 fucomip st, st(1)
.text:0000000000002A41                 ja      loc_2B50
.text:0000000000002A47                 fstp    st
.text:0000000000002A49                 fld     [rsp+68h+arg_0]
.text:0000000000002A4D
.text:0000000000002A4D loc_2A4D:                               ; CODE XREF: ldtoastr+142↓j
.text:0000000000002A4D                 mov     eax, 2D25h
.text:0000000000002A52                 lea     r13, [rsp+68h+var_4B]
.text:0000000000002A57                 mov     ecx, edx
.text:0000000000002A59                 mov     [rsp+68h+var_4B], ax
.text:0000000000002A5E                 mov     eax, edx
.text:0000000000002A60                 shr     ecx, 1
.text:0000000000002A62                 and     eax, 1
.text:0000000000002A65                 and     ecx, 1
.text:0000000000002A68                 mov     ebx, 1
.text:0000000000002A6D                 lea     rdi, [r13+rax+1]
.text:0000000000002A72                 mov     eax, edx
.text:0000000000002A74                 mov     r15, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A7B                 shr     eax, 2
.text:0000000000002A7E                 lea     rsi, [rdi+rcx]
.text:0000000000002A82                 and     eax, 1
.text:0000000000002A85                 mov     byte ptr [rdi], 2Bh ; '+'
.text:0000000000002A88                 lea     rcx, [rsi+rax]
.text:0000000000002A8C                 mov     eax, edx
.text:0000000000002A8E                 and     edx, 10h
.text:0000000000002A91                 fld     cs:tbyte_5CB0
.text:0000000000002A97                 shr     eax, 3
.text:0000000000002A9A                 mov     byte ptr [rsi], 20h ; ' '
.text:0000000000002A9D                 mov     byte ptr [rcx], 30h ; '0'
.text:0000000000002AA0                 and     eax, 1
.text:0000000000002AA3                 add     rax, rcx
.text:0000000000002AA6                 cmp     edx, 1
.text:0000000000002AA9                 sbb     edx, edx
.text:0000000000002AAB                 mov     dword ptr [rax], 4C2A2E2Ah
.text:0000000000002AB1                 mov     byte ptr [rax+5], 0
.text:0000000000002AB5                 and     edx, 20h
.text:0000000000002AB8                 add     edx, 47h ; 'G'
.text:0000000000002ABB                 mov     [rax+4], dl
.text:0000000000002ABE                 mov     eax, 12h
.text:0000000000002AC3                 fucomip st, st(1)
.text:0000000000002AC5                 fstp    st
.text:0000000000002AC7                 cmovbe  ebx, eax
.text:0000000000002ACA                 jmp     short loc_2AD3
.text:0000000000002ACA ; ---------------------------------------------------------------------------
.text:0000000000002ACC                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: ldtoastr+FE↓j
.text:0000000000002AD0                                         ; ldtoastr+118↓j ...
.text:0000000000002AD0                 add     ebx, 1
.text:0000000000002AD3
.text:0000000000002AD3 loc_2AD3:                               ; CODE XREF: ldtoastr+BA↑j
.text:0000000000002AD3                 push    qword ptr [rsp+68h+arg_0+8]
.text:0000000000002AD7                 push    qword ptr [rsp+70h+arg_0]
.text:0000000000002ADB                 xor     eax, eax
.text:0000000000002ADD                 mov     r9d, r14d
.text:0000000000002AE0                 mov     r8, r13
.text:0000000000002AE3                 mov     rcx, r15
.text:0000000000002AE6                 sub     rsp, 8
.text:0000000000002AEA                 mov     edx, 1
.text:0000000000002AEF                 mov     rsi, rbp
.text:0000000000002AF2                 push    rbx
.text:0000000000002AF3                 mov     rdi, r12
.text:0000000000002AF6                 call    ___snprintf_chk
.text:0000000000002AFB                 add     rsp, 20h
.text:0000000000002AFF                 test    eax, eax
.text:0000000000002B01                 js      short loc_2B30
.text:0000000000002B03                 cmp     ebx, 14h
.text:0000000000002B06                 jg      short loc_2B30
.text:0000000000002B08                 movsxd  rdx, eax
.text:0000000000002B0B                 cmp     rdx, rbp
.text:0000000000002B0E                 jnb     short loc_2AD0
.text:0000000000002B10                 xor     esi, esi        ; endptr
.text:0000000000002B12                 mov     rdi, r12        ; nptr
.text:0000000000002B15                 mov     [rsp+68h+var_5C], eax
.text:0000000000002B19                 call    _strtold
.text:0000000000002B1E                 fld     [rsp+68h+arg_0]
.text:0000000000002B22                 fxch    st(1)
.text:0000000000002B24                 fucomip st, st(1)
.text:0000000000002B26                 fstp    st
.text:0000000000002B28                 jp      short loc_2AD0
.text:0000000000002B2A                 mov     eax, [rsp+68h+var_5C]
.text:0000000000002B2E                 jnz     short loc_2AD0
.text:0000000000002B30
.text:0000000000002B30 loc_2B30:                               ; CODE XREF: ldtoastr+F1↑j
.text:0000000000002B30                                         ; ldtoastr+F6↑j
.text:0000000000002B30                 mov     rsi, [rsp+68h+var_40]
.text:0000000000002B35                 xor     rsi, fs:28h
.text:0000000000002B3E                 jnz     short loc_2B57
.text:0000000000002B40                 add     rsp, 38h
.text:0000000000002B44                 pop     rbx
.text:0000000000002B45                 pop     rbp
.text:0000000000002B46                 pop     r12
.text:0000000000002B48                 pop     r13
.text:0000000000002B4A                 pop     r14
.text:0000000000002B4C                 pop     r15
.text:0000000000002B4E                 retn
.text:0000000000002B4E ; ---------------------------------------------------------------------------
.text:0000000000002B4F                 align 10h
.text:0000000000002B50
.text:0000000000002B50 loc_2B50:                               ; CODE XREF: ldtoastr+31↑j
.text:0000000000002B50                 fchs
.text:0000000000002B52                 jmp     loc_2A4D
.text:0000000000002B57 ; ---------------------------------------------------------------------------
.text:0000000000002B57
.text:0000000000002B57 loc_2B57:                               ; CODE XREF: ldtoastr+12E↑j
.text:0000000000002B57                 call    ___stack_chk_fail
.text:0000000000002B57 ; } // starts at 2A10
.text:0000000000002B57 ldtoastr        endp
.text:0000000000002B57
.text:0000000000002B57 ; ---------------------------------------------------------------------------
.text:0000000000002B5C                 align 20h
.text:0000000000002B60
.text:0000000000002B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B60
.text:0000000000002B60
.text:0000000000002B60                 public parse_long_options
.text:0000000000002B60 parse_long_options proc near            ; CODE XREF: main+91↑p
.text:0000000000002B60
.text:0000000000002B60 var_100         = qword ptr -100h
.text:0000000000002B60 var_F8          = dword ptr -0F8h
.text:0000000000002B60 var_F4          = dword ptr -0F4h
.text:0000000000002B60 var_F0          = qword ptr -0F0h
.text:0000000000002B60 var_E8          = qword ptr -0E8h
.text:0000000000002B60 var_E0          = qword ptr -0E0h
.text:0000000000002B60 var_D8          = byte ptr -0D8h
.text:0000000000002B60 var_A8          = xmmword ptr -0A8h
.text:0000000000002B60 var_98          = xmmword ptr -98h
.text:0000000000002B60 var_88          = xmmword ptr -88h
.text:0000000000002B60 var_78          = xmmword ptr -78h
.text:0000000000002B60 var_68          = xmmword ptr -68h
.text:0000000000002B60 var_58          = xmmword ptr -58h
.text:0000000000002B60 var_48          = xmmword ptr -48h
.text:0000000000002B60 var_38          = xmmword ptr -38h
.text:0000000000002B60 arg_0           = byte ptr  8
.text:0000000000002B60
.text:0000000000002B60 ; __unwind {
.text:0000000000002B60                 push    r13
.text:0000000000002B62                 push    r12
.text:0000000000002B64                 mov     r13, r8
.text:0000000000002B67                 push    rbp
.text:0000000000002B68                 push    rbx
.text:0000000000002B69                 mov     rbp, rdx
.text:0000000000002B6C                 mov     r12, rcx
.text:0000000000002B6F                 sub     rsp, 0E8h
.text:0000000000002B76                 test    al, al
.text:0000000000002B78                 jz      short loc_2BB4
.text:0000000000002B7A                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000002B7F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000002B84                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000002B8C                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000002B94                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000002B9C                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000002BA4                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000002BAC                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000002BB4
.text:0000000000002BB4 loc_2BB4:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000002BB4                 mov     rax, fs:28h
.text:0000000000002BBD                 mov     [rsp+108h+var_E0], rax
.text:0000000000002BC2                 xor     eax, eax
.text:0000000000002BC4                 cmp     edi, 2
.text:0000000000002BC7                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000002BCD                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000002BD7                 jz      short loc_2C10
.text:0000000000002BD9
.text:0000000000002BD9 loc_2BD9:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000002BD9                                         ; parse_long_options+DD↓j ...
.text:0000000000002BD9                 mov     rax, [rsp+108h+var_E0]
.text:0000000000002BDE                 xor     rax, fs:28h
.text:0000000000002BE7                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000002BED                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000002BF7                 jnz     loc_2C9A
.text:0000000000002BFD                 add     rsp, 0E8h
.text:0000000000002C04                 pop     rbx
.text:0000000000002C05                 pop     rbp
.text:0000000000002C06                 pop     r12
.text:0000000000002C08                 pop     r13
.text:0000000000002C0A                 retn
.text:0000000000002C0A ; ---------------------------------------------------------------------------
.text:0000000000002C0B                 align 10h
.text:0000000000002C10
.text:0000000000002C10 loc_2C10:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000002C10                 lea     rcx, long_options ; longopts
.text:0000000000002C17                 lea     rdx, shortopts  ; "+"
.text:0000000000002C1E                 xor     r8d, r8d        ; longind
.text:0000000000002C21                 mov     [rsp+108h+var_100], r9
.text:0000000000002C26                 call    _getopt_long
.text:0000000000002C2B                 cmp     eax, 0FFFFFFFFh
.text:0000000000002C2E                 jz      short loc_2BD9
.text:0000000000002C30                 cmp     eax, 68h ; 'h'
.text:0000000000002C33                 mov     r9, [rsp+108h+var_100]
.text:0000000000002C38                 jz      short loc_2C90
.text:0000000000002C3A                 cmp     eax, 76h ; 'v'
.text:0000000000002C3D                 jnz     short loc_2BD9
.text:0000000000002C3F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000002C47                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002C4E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000002C53                 mov     rcx, r13
.text:0000000000002C56                 mov     rdx, r12
.text:0000000000002C59                 mov     rsi, rbp
.text:0000000000002C5C                 mov     [rsp+108h+var_F0], rax
.text:0000000000002C61                 lea     rax, [rsp+108h+var_D8]
.text:0000000000002C66                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:0000000000002C6E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000002C76                 mov     [rsp+108h+var_E8], rax
.text:0000000000002C7B                 call    version_etc_va
.text:0000000000002C80                 xor     edi, edi        ; status
.text:0000000000002C82                 call    _exit
.text:0000000000002C82 ; ---------------------------------------------------------------------------
.text:0000000000002C87                 align 10h
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000002C90                 xor     edi, edi
.text:0000000000002C92                 call    r9
.text:0000000000002C95                 jmp     loc_2BD9
.text:0000000000002C9A ; ---------------------------------------------------------------------------
.text:0000000000002C9A
.text:0000000000002C9A loc_2C9A:                               ; CODE XREF: parse_long_options+97↑j
.text:0000000000002C9A                 call    ___stack_chk_fail
.text:0000000000002C9A ; } // starts at 2B60
.text:0000000000002C9A parse_long_options endp
.text:0000000000002C9A
.text:0000000000002C9A ; ---------------------------------------------------------------------------
.text:0000000000002C9F                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CA0
.text:0000000000002CA0
.text:0000000000002CA0                 public parse_gnu_standard_options_only
.text:0000000000002CA0 parse_gnu_standard_options_only proc near
.text:0000000000002CA0
.text:0000000000002CA0 var_F8          = dword ptr -0F8h
.text:0000000000002CA0 var_F4          = dword ptr -0F4h
.text:0000000000002CA0 var_F0          = qword ptr -0F0h
.text:0000000000002CA0 var_E8          = qword ptr -0E8h
.text:0000000000002CA0 var_E0          = qword ptr -0E0h
.text:0000000000002CA0 var_D8          = byte ptr -0D8h
.text:0000000000002CA0 var_A8          = xmmword ptr -0A8h
.text:0000000000002CA0 var_98          = xmmword ptr -98h
.text:0000000000002CA0 var_88          = xmmword ptr -88h
.text:0000000000002CA0 var_78          = xmmword ptr -78h
.text:0000000000002CA0 var_68          = xmmword ptr -68h
.text:0000000000002CA0 var_58          = xmmword ptr -58h
.text:0000000000002CA0 var_48          = xmmword ptr -48h
.text:0000000000002CA0 var_38          = xmmword ptr -38h
.text:0000000000002CA0 arg_0           = qword ptr  8
.text:0000000000002CA0 arg_8           = byte ptr  10h
.text:0000000000002CA0
.text:0000000000002CA0 ; __unwind {
.text:0000000000002CA0                 push    r14
.text:0000000000002CA2                 push    r13
.text:0000000000002CA4                 mov     r14, r8
.text:0000000000002CA7                 push    r12
.text:0000000000002CA9                 push    rbp
.text:0000000000002CAA                 mov     r12, rdx
.text:0000000000002CAD                 push    rbx
.text:0000000000002CAE                 mov     r13, rcx
.text:0000000000002CB1                 sub     rsp, 0D0h
.text:0000000000002CB8                 test    al, al
.text:0000000000002CBA                 mov     rbp, [rsp+0F8h+arg_0]
.text:0000000000002CC2                 jz      short loc_2CFB
.text:0000000000002CC4                 movaps  [rsp+0F8h+var_A8], xmm0
.text:0000000000002CC9                 movaps  [rsp+0F8h+var_98], xmm1
.text:0000000000002CCE                 movaps  [rsp+0F8h+var_88], xmm2
.text:0000000000002CD3                 movaps  [rsp+0F8h+var_78], xmm3
.text:0000000000002CDB                 movaps  [rsp+0F8h+var_68], xmm4
.text:0000000000002CE3                 movaps  [rsp+0F8h+var_58], xmm5
.text:0000000000002CEB                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000002CF3                 movaps  [rsp+0F8h+var_38], xmm7
.text:0000000000002CFB
.text:0000000000002CFB loc_2CFB:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:0000000000002CFB                 mov     rax, fs:28h
.text:0000000000002D04                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000002D09                 xor     eax, eax
.text:0000000000002D0B                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002D12                 lea     rax, shortopts  ; "+"
.text:0000000000002D19                 test    r9b, r9b
.text:0000000000002D1C                 lea     rcx, long_options ; longopts
.text:0000000000002D23                 cmovz   rdx, rax        ; shortopts
.text:0000000000002D27                 xor     r8d, r8d        ; longind
.text:0000000000002D2A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000002D30                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:0000000000002D3A                 call    _getopt_long
.text:0000000000002D3F                 cmp     eax, 0FFFFFFFFh
.text:0000000000002D42                 jz      short loc_2DA8
.text:0000000000002D44                 cmp     eax, 68h ; 'h'
.text:0000000000002D47                 jz      loc_2DD0
.text:0000000000002D4D                 cmp     eax, 76h ; 'v'
.text:0000000000002D50                 jnz     short loc_2DA0
.text:0000000000002D52                 lea     rax, [rsp+0F8h+arg_8]
.text:0000000000002D5A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002D61                 mov     r8, rsp
.text:0000000000002D64                 mov     rcx, r14
.text:0000000000002D67                 mov     rdx, r13
.text:0000000000002D6A                 mov     rsi, r12
.text:0000000000002D6D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000002D72                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000002D77                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:0000000000002D7E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000002D86                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000002D8B                 call    version_etc_va
.text:0000000000002D90                 xor     edi, edi        ; status
.text:0000000000002D92                 call    _exit
.text:0000000000002D92 ; ---------------------------------------------------------------------------
.text:0000000000002D97                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 loc_2DA0:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000002DA0                 mov     edi, cs:exit_failure
.text:0000000000002DA6                 call    rbp
.text:0000000000002DA8
.text:0000000000002DA8 loc_2DA8:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000002DA8                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000002DA8                 mov     rax, [rsp+0F8h+var_E0]
.text:0000000000002DAD                 xor     rax, fs:28h
.text:0000000000002DB6                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000002DBC                 jnz     short loc_2DD6
.text:0000000000002DBE                 add     rsp, 0D0h
.text:0000000000002DC5                 pop     rbx
.text:0000000000002DC6                 pop     rbp
.text:0000000000002DC7                 pop     r12
.text:0000000000002DC9                 pop     r13
.text:0000000000002DCB                 pop     r14
.text:0000000000002DCD                 retn
.text:0000000000002DCD ; ---------------------------------------------------------------------------
.text:0000000000002DCE                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000002DD0                 xor     edi, edi
.text:0000000000002DD2                 call    rbp
.text:0000000000002DD4                 jmp     short loc_2DA8
.text:0000000000002DD6 ; ---------------------------------------------------------------------------
.text:0000000000002DD6
.text:0000000000002DD6 loc_2DD6:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000002DD6                 call    ___stack_chk_fail
.text:0000000000002DD6 ; } // starts at 2CA0
.text:0000000000002DD6 parse_gnu_standard_options_only endp
.text:0000000000002DD6
.text:0000000000002DD6 ; ---------------------------------------------------------------------------
.text:0000000000002DDB                 align 20h
.text:0000000000002DE0
.text:0000000000002DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DE0
.text:0000000000002DE0
.text:0000000000002DE0                 public set_program_name
.text:0000000000002DE0 set_program_name proc near              ; CODE XREF: main+1E↑p
.text:0000000000002DE0 ; __unwind {
.text:0000000000002DE0                 test    rdi, rdi
.text:0000000000002DE3                 push    rbx
.text:0000000000002DE4                 jz      short loc_2E5D
.text:0000000000002DE6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002DEB                 mov     rbx, rdi
.text:0000000000002DEE                 call    _strrchr
.text:0000000000002DF3                 test    rax, rax
.text:0000000000002DF6                 jz      short loc_2E4D
.text:0000000000002DF8                 lea     r8, [rax+1]
.text:0000000000002DFC                 mov     rdx, r8
.text:0000000000002DFF                 sub     rdx, rbx
.text:0000000000002E02                 cmp     rdx, 6
.text:0000000000002E06                 jle     short loc_2E4D
.text:0000000000002E08                 lea     rsi, [rax-6]
.text:0000000000002E0C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002E13                 mov     ecx, 7
.text:0000000000002E18                 repe cmpsb
.text:0000000000002E1A                 setnbe  dl
.text:0000000000002E1D                 sbb     dl, 0
.text:0000000000002E20                 test    dl, dl
.text:0000000000002E22                 jnz     short loc_2E4D
.text:0000000000002E24                 lea     rdi, aLt        ; "lt-"
.text:0000000000002E2B                 mov     ecx, 3
.text:0000000000002E30                 mov     rsi, r8
.text:0000000000002E33                 mov     rbx, r8
.text:0000000000002E36                 repe cmpsb
.text:0000000000002E38                 setnbe  dl
.text:0000000000002E3B                 sbb     dl, 0
.text:0000000000002E3E                 test    dl, dl
.text:0000000000002E40                 jnz     short loc_2E4D
.text:0000000000002E42                 lea     rbx, [rax+4]
.text:0000000000002E46                 mov     cs:__bss_start, rbx
.text:0000000000002E4D
.text:0000000000002E4D loc_2E4D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002E4D                                         ; set_program_name+26↑j ...
.text:0000000000002E4D                 mov     cs:program_name, rbx
.text:0000000000002E54                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002E5B                 pop     rbx
.text:0000000000002E5C                 retn
.text:0000000000002E5D ; ---------------------------------------------------------------------------
.text:0000000000002E5D
.text:0000000000002E5D loc_2E5D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002E5D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002E64                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002E6B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002E70                 mov     esi, 1          ; size
.text:0000000000002E75                 call    _fwrite
.text:0000000000002E7A                 call    _abort
.text:0000000000002E7A ; } // starts at 2DE0
.text:0000000000002E7A set_program_name endp
.text:0000000000002E7A
.text:0000000000002E7A ; ---------------------------------------------------------------------------
.text:0000000000002E7F                 align 20h
.text:0000000000002E80
.text:0000000000002E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E80
.text:0000000000002E80 ; Attributes: info_from_lumina
.text:0000000000002E80
.text:0000000000002E80 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002E80 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002E80                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002E80 ; __unwind {
.text:0000000000002E80                 push    rbp
.text:0000000000002E81                 push    rbx
.text:0000000000002E82                 mov     rbp, rdi
.text:0000000000002E85                 mov     ebx, esi
.text:0000000000002E87                 sub     rsp, 8
.text:0000000000002E8B                 call    locale_charset
.text:0000000000002E90                 movzx   edx, byte ptr [rax]
.text:0000000000002E93                 and     edx, 0FFFFFFDFh
.text:0000000000002E96                 cmp     dl, 55h ; 'U'
.text:0000000000002E99                 jz      short loc_2F10
.text:0000000000002E9B                 cmp     dl, 47h ; 'G'
.text:0000000000002E9E                 jz      short loc_2EC0
.text:0000000000002EA0
.text:0000000000002EA0 loc_2EA0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002EA0                                         ; gettext_quote+50↓j ...
.text:0000000000002EA0                 lea     rax, unk_5D23
.text:0000000000002EA7                 lea     rdx, asc_5D25   ; "'"
.text:0000000000002EAE                 cmp     ebx, 9
.text:0000000000002EB1                 cmovnz  rax, rdx
.text:0000000000002EB5                 add     rsp, 8
.text:0000000000002EB9                 pop     rbx
.text:0000000000002EBA                 pop     rbp
.text:0000000000002EBB                 retn
.text:0000000000002EBB ; ---------------------------------------------------------------------------
.text:0000000000002EBC                 align 20h
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002EC0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002EC4                 and     edx, 0FFFFFFDFh
.text:0000000000002EC7                 cmp     dl, 42h ; 'B'
.text:0000000000002ECA                 jnz     short loc_2EA0
.text:0000000000002ECC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002ED0                 jnz     short loc_2EA0
.text:0000000000002ED2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002ED6                 jnz     short loc_2EA0
.text:0000000000002ED8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002EDC                 jnz     short loc_2EA0
.text:0000000000002EDE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002EE2                 jnz     short loc_2EA0
.text:0000000000002EE4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002EE8                 jnz     short loc_2EA0
.text:0000000000002EEA                 cmp     byte ptr [rax+7], 0
.text:0000000000002EEE                 jnz     short loc_2EA0
.text:0000000000002EF0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002EF4                 lea     rax, unk_5D1C
.text:0000000000002EFB                 lea     rdx, unk_5D20
.text:0000000000002F02                 cmovnz  rax, rdx
.text:0000000000002F06                 add     rsp, 8
.text:0000000000002F0A                 pop     rbx
.text:0000000000002F0B                 pop     rbp
.text:0000000000002F0C                 retn
.text:0000000000002F0C ; ---------------------------------------------------------------------------
.text:0000000000002F0D                 align 10h
.text:0000000000002F10
.text:0000000000002F10 loc_2F10:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002F10                 movzx   edx, byte ptr [rax+1]
.text:0000000000002F14                 and     edx, 0FFFFFFDFh
.text:0000000000002F17                 cmp     dl, 54h ; 'T'
.text:0000000000002F1A                 jnz     short loc_2EA0
.text:0000000000002F1C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002F20                 and     edx, 0FFFFFFDFh
.text:0000000000002F23                 cmp     dl, 46h ; 'F'
.text:0000000000002F26                 jnz     loc_2EA0
.text:0000000000002F2C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002F30                 jnz     loc_2EA0
.text:0000000000002F36                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002F3A                 jnz     loc_2EA0
.text:0000000000002F40                 cmp     byte ptr [rax+5], 0
.text:0000000000002F44                 jnz     loc_2EA0
.text:0000000000002F4A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002F4E                 lea     rax, unk_5D14
.text:0000000000002F55                 lea     rdx, unk_5D18
.text:0000000000002F5C                 cmovnz  rax, rdx
.text:0000000000002F60                 add     rsp, 8
.text:0000000000002F64                 pop     rbx
.text:0000000000002F65                 pop     rbp
.text:0000000000002F66                 retn
.text:0000000000002F66 ; } // starts at 2E80
.text:0000000000002F66 gettext_quote   endp
.text:0000000000002F66
.text:0000000000002F66 ; ---------------------------------------------------------------------------
.text:0000000000002F67                 align 10h
.text:0000000000002F70
.text:0000000000002F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F70
.text:0000000000002F70 ; Attributes: info_from_lumina
.text:0000000000002F70
.text:0000000000002F70 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002F70 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002F70                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002F70
.text:0000000000002F70 var_E0          = dword ptr -0E0h
.text:0000000000002F70 var_DB          = byte ptr -0DBh
.text:0000000000002F70 var_DA          = byte ptr -0DAh
.text:0000000000002F70 var_D9          = byte ptr -0D9h
.text:0000000000002F70 s               = qword ptr -0D8h
.text:0000000000002F70 n               = qword ptr -0D0h
.text:0000000000002F70 var_C8          = qword ptr -0C8h
.text:0000000000002F70 ps              = qword ptr -0C0h
.text:0000000000002F70 var_B8          = qword ptr -0B8h
.text:0000000000002F70 var_B0          = qword ptr -0B0h
.text:0000000000002F70 var_A8          = qword ptr -0A8h
.text:0000000000002F70 s2              = qword ptr -0A0h
.text:0000000000002F70 var_98          = qword ptr -98h
.text:0000000000002F70 var_90          = qword ptr -90h
.text:0000000000002F70 var_88          = qword ptr -88h
.text:0000000000002F70 var_80          = qword ptr -80h
.text:0000000000002F70 var_78          = qword ptr -78h
.text:0000000000002F70 var_70          = dword ptr -70h
.text:0000000000002F70 var_6C          = byte ptr -6Ch
.text:0000000000002F70 var_6B          = byte ptr -6Bh
.text:0000000000002F70 var_6A          = byte ptr -6Ah
.text:0000000000002F70 var_69          = byte ptr -69h
.text:0000000000002F70 var_68          = qword ptr -68h
.text:0000000000002F70 var_60          = qword ptr -60h
.text:0000000000002F70 wc              = dword ptr -4Ch
.text:0000000000002F70 var_48          = qword ptr -48h
.text:0000000000002F70 var_40          = qword ptr -40h
.text:0000000000002F70 arg_0           = qword ptr  8
.text:0000000000002F70 arg_8           = qword ptr  10h
.text:0000000000002F70 arg_10          = qword ptr  18h
.text:0000000000002F70
.text:0000000000002F70 ; __unwind {
.text:0000000000002F70                 push    r15
.text:0000000000002F72                 push    r14
.text:0000000000002F74                 mov     r15d, r8d
.text:0000000000002F77                 push    r13
.text:0000000000002F79                 push    r12
.text:0000000000002F7B                 mov     r14, rdi
.text:0000000000002F7E                 push    rbp
.text:0000000000002F7F                 push    rbx
.text:0000000000002F80                 mov     ebx, r9d
.text:0000000000002F83                 mov     r13, rsi
.text:0000000000002F86                 mov     rbp, rcx
.text:0000000000002F89                 and     ebx, 2
.text:0000000000002F8C                 sub     rsp, 0B8h
.text:0000000000002F93                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002F9B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002FA0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002FA5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002FAA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002FAF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002FB7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002FBC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002FC4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002FC9                 mov     rax, fs:28h
.text:0000000000002FD2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002FDA                 xor     eax, eax
.text:0000000000002FDC                 call    ___ctype_get_mb_cur_max
.text:0000000000002FE1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002FE5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002FEA                 ja      def_3001        ; jumptable 00000000000121F1 default case
.text:0000000000002FF0                 lea     rcx, jpt_3001
.text:0000000000002FF7                 mov     edx, r15d
.text:0000000000002FFA                 movsxd  rax, ds:(jpt_3001 - 5D80h)[rcx+rdx*4]
.text:0000000000002FFE                 add     rax, rcx
.text:0000000000003001                 jmp     rax             ; switch jump
.text:0000000000003003 ; ---------------------------------------------------------------------------
.text:0000000000003003
.text:0000000000003003 loc_3003:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003003                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003003                                         ; DATA XREF: ...
.text:0000000000003003                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003008                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000300D                 xor     r12d, r12d
.text:0000000000003010                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003019                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000301E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003023
.text:0000000000003023 loc_3023:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003023                 lea     rax, asc_5D25   ; "'"
.text:000000000000302A                 mov     [rsp+0E8h+n], 1
.text:0000000000003033                 xor     r15d, r15d
.text:0000000000003036                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000303E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003043
.text:0000000000003043 loc_3043:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003043                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003043                 xor     r11d, r11d
.text:0000000000003046                 mov     rax, rbp
.text:0000000000003049                 mov     r8d, r12d
.text:000000000000304C                 mov     rbp, r11
.text:000000000000304F                 mov     r11, rax
.text:0000000000003052                 nop     word ptr [rax+rax+00h]
.text:0000000000003058
.text:0000000000003058 loc_3058:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003058                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003058                 cmp     r11, rbp
.text:000000000000305B                 setnz   r12b
.text:000000000000305F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003063                 jnz     short loc_3072
.text:0000000000003065                 mov     rax, [rsp+0E8h+s]
.text:000000000000306A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000306E                 setnz   r12b
.text:0000000000003072
.text:0000000000003072 loc_3072:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003072                 test    r12b, r12b
.text:0000000000003075                 jz      loc_36D0
.text:000000000000307B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003080                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003085                 lea     r9, [rdi+rbp]
.text:0000000000003089                 setnz   al
.text:000000000000308C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003090                 mov     r10d, eax
.text:0000000000003093                 jz      loc_3140
.text:0000000000003099                 mov     rax, [rsp+0E8h+n]
.text:000000000000309E                 test    rax, rax
.text:00000000000030A1                 jz      loc_34D0
.text:00000000000030A7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000030AB                 lea     rbx, [rbp+rax+0]
.text:00000000000030B0                 jnz     short loc_30E0
.text:00000000000030B2                 cmp     rax, 1
.text:00000000000030B6                 jbe     short loc_30E0
.text:00000000000030B8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000030BD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000030C2                 mov     [rsp+0E8h+ps], r9
.text:00000000000030C7                 call    _strlen
.text:00000000000030CC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000030D2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000030D8                 mov     r11, rax
.text:00000000000030DB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000030E0
.text:00000000000030E0 loc_30E0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000030E0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000030E0                 cmp     rbx, r11
.text:00000000000030E3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000030E8                 ja      loc_36A0
.text:00000000000030EE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000030F3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000030F8                 mov     rdi, r9         ; s1
.text:00000000000030FB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003100                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003105                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000310A                 call    _memcmp
.text:000000000000310F                 test    eax, eax
.text:0000000000003111                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003116                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000311C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003121                 jnz     loc_36A0
.text:0000000000003127                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000312C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003132                 jnz     loc_40B5
.text:0000000000003138                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003140                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003140                 movzx   ebx, byte ptr [r9]
.text:0000000000003144                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003147                 ja      def_315E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000314D                 lea     rcx, jpt_315E
.text:0000000000003154                 movzx   edx, bl
.text:0000000000003157                 movsxd  rax, ds:(jpt_315E - 5DACh)[rcx+rdx*4]
.text:000000000000315B                 add     rax, rcx
.text:000000000000315E                 jmp     rax             ; switch jump
.text:0000000000003160 ; ---------------------------------------------------------------------------
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003160                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003160                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003163
.text:0000000000003163 loc_3163:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003163                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003163                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003167                 setnz   al
.text:000000000000316A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000316E                 jnz     short loc_317C
.text:0000000000003170                 mov     rax, [rsp+0E8h+s]
.text:0000000000003175                 cmp     byte ptr [rax+1], 0
.text:0000000000003179                 setnz   al
.text:000000000000317C
.text:000000000000317C loc_317C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000317C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003181                 setz    dl
.text:0000000000003184                 test    al, al
.text:0000000000003186                 jz      loc_33D8
.text:000000000000318C
.text:000000000000318C loc_318C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000318C                 xor     r12d, r12d
.text:000000000000318F                 xor     eax, eax
.text:0000000000003191                 nop     dword ptr [rax+00000000h]
.text:0000000000003198
.text:0000000000003198 loc_3198:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003198                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003198                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000319D                 jnz     loc_32B2
.text:00000000000031A3                 test    dl, dl
.text:00000000000031A5                 jnz     loc_32B2
.text:00000000000031AB
.text:00000000000031AB loc_31AB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000031AB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000031B0                 test    rsi, rsi
.text:00000000000031B3                 jz      short loc_31C9
.text:00000000000031B5                 mov     edx, ebx
.text:00000000000031B7                 shr     dl, 5
.text:00000000000031BA                 movzx   edx, dl
.text:00000000000031BD                 mov     edx, [rsi+rdx*4]
.text:00000000000031C0                 bt      edx, ebx
.text:00000000000031C3                 jb      loc_3313
.text:00000000000031C9
.text:00000000000031C9 loc_31C9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000031C9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000031C9                 test    r10b, r10b
.text:00000000000031CC                 jnz     loc_3313
.text:00000000000031D2                 xor     eax, 1
.text:00000000000031D5                 add     rbp, 1
.text:00000000000031D9                 and     eax, r8d
.text:00000000000031DC
.text:00000000000031DC loc_31DC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000031DC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000031DC                 test    al, al
.text:00000000000031DE                 jz      short loc_3200
.text:00000000000031E0                 cmp     r13, r15
.text:00000000000031E3                 jbe     short loc_31EA
.text:00000000000031E5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000031EA
.text:00000000000031EA loc_31EA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000031EA                 lea     rax, [r15+1]
.text:00000000000031EE                 cmp     r13, rax
.text:00000000000031F1                 jbe     short loc_31F9
.text:00000000000031F3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000031F9
.text:00000000000031F9 loc_31F9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000031F9                 add     r15, 2
.text:00000000000031FD                 xor     r8d, r8d
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003200                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003200                 cmp     r15, r13
.text:0000000000003203                 jnb     short loc_3209
.text:0000000000003205                 mov     [r14+r15], bl
.text:0000000000003209
.text:0000000000003209 loc_3209:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003209                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000320E                 add     r15, 1
.text:0000000000003212                 mov     eax, 0
.text:0000000000003217                 test    r12b, r12b
.text:000000000000321A                 cmovz   edi, eax
.text:000000000000321D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003222                 jmp     loc_3058
.text:0000000000003222 ; ---------------------------------------------------------------------------
.text:0000000000003227                 align 10h
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003230                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003230                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003233
.text:0000000000003233 loc_3233:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003233                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003233                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003237                 cmp     eax, 2
.text:000000000000323A                 jz      loc_37F8
.text:0000000000003240                 cmp     eax, 5
.text:0000000000003243                 jz      loc_37B8
.text:0000000000003249                 cmp     eax, 2
.text:000000000000324C                 mov     ebx, 3Fh ; '?'
.text:0000000000003251                 setz    dl
.text:0000000000003254                 xor     r12d, r12d
.text:0000000000003257                 xor     eax, eax
.text:0000000000003259                 jmp     loc_3198
.text:0000000000003259 ; ---------------------------------------------------------------------------
.text:000000000000325E                 align 20h
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003260                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003260                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003263
.text:0000000000003263 loc_3263:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003263                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003263                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003268                 jz      loc_3770
.text:000000000000326E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003273                 xor     edx, edx
.text:0000000000003275                 xor     eax, eax
.text:0000000000003277                 mov     ebx, 27h ; '''
.text:000000000000327C                 jmp     loc_3198
.text:000000000000327C ; ---------------------------------------------------------------------------
.text:0000000000003281                 align 8
.text:0000000000003288
.text:0000000000003288 loc_3288:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003288                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003288                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000328D                 mov     ebx, 74h ; 't'
.text:0000000000003292
.text:0000000000003292 loc_3292:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003292                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003292                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003297                 setz    al
.text:000000000000329A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000329E                 jnz     loc_33EE
.text:00000000000032A4
.text:00000000000032A4 loc_32A4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000032A4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000032A4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000032A9                 jnz     short loc_3310
.text:00000000000032AB
.text:00000000000032AB loc_32AB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000032AB                 mov     ebx, edx
.text:00000000000032AD                 xor     r12d, r12d
.text:00000000000032B0                 xor     eax, eax
.text:00000000000032B2
.text:00000000000032B2 loc_32B2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000032B2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000032B2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000032B7                 jnz     loc_31AB
.text:00000000000032BD                 jmp     loc_31C9
.text:00000000000032BD ; ---------------------------------------------------------------------------
.text:00000000000032C2                 align 8
.text:00000000000032C8
.text:00000000000032C8 loc_32C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032C8                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000032C8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000032CD                 mov     ebx, 62h ; 'b'
.text:00000000000032D2                 jmp     short loc_32A4
.text:00000000000032D2 ; ---------------------------------------------------------------------------
.text:00000000000032D4                 align 8
.text:00000000000032D8
.text:00000000000032D8 loc_32D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032D8                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000032D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000032DD                 jz      loc_36B0
.text:00000000000032E3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000032E8                 jz      loc_3500
.text:00000000000032EE
.text:00000000000032EE loc_32EE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000032EE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000032F3                 jz      loc_3500
.text:00000000000032F9                 cmp     [rsp+0E8h+n], 0
.text:00000000000032FF                 jnz     loc_36BB
.text:0000000000003305                 mov     ebx, 5Ch ; '\'
.text:000000000000330A                 nop     word ptr [rax+rax+00h]
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003310                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003310                 xor     r12d, r12d
.text:0000000000003313
.text:0000000000003313 loc_3313:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003313                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003313                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003318                 setz    dl
.text:000000000000331B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003320                 mov     eax, edx
.text:0000000000003322                 jnz     loc_3B78
.text:0000000000003328                 mov     eax, r8d
.text:000000000000332B                 xor     eax, 1
.text:000000000000332E                 and     al, dl
.text:0000000000003330                 jz      short loc_3361
.text:0000000000003332                 cmp     r13, r15
.text:0000000000003335                 jbe     short loc_333C
.text:0000000000003337                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000333C
.text:000000000000333C loc_333C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000333C                 lea     rdx, [r15+1]
.text:0000000000003340                 cmp     r13, rdx
.text:0000000000003343                 jbe     short loc_334B
.text:0000000000003345                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000334B
.text:000000000000334B loc_334B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000334B                 lea     rdx, [r15+2]
.text:000000000000334F                 cmp     r13, rdx
.text:0000000000003352                 jbe     short loc_335A
.text:0000000000003354                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000335A
.text:000000000000335A loc_335A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000335A                 add     r15, 3
.text:000000000000335E                 mov     r8d, eax
.text:0000000000003361
.text:0000000000003361 loc_3361:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003361                 cmp     r13, r15
.text:0000000000003364                 jbe     short loc_336B
.text:0000000000003366                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000336B
.text:000000000000336B loc_336B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000336B                 add     r15, 1
.text:000000000000336F                 add     rbp, 1
.text:0000000000003373                 jmp     loc_3200
.text:0000000000003373 ; ---------------------------------------------------------------------------
.text:0000000000003378                 align 20h
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003380                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003380                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003385                 jnz     loc_3553
.text:000000000000338B                 xor     edx, edx
.text:000000000000338D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003392                 jz      loc_32AB
.text:0000000000003398                 add     rbp, 1
.text:000000000000339C                 jmp     loc_3058
.text:000000000000339C ; ---------------------------------------------------------------------------
.text:00000000000033A1                 align 8
.text:00000000000033A8
.text:00000000000033A8 loc_33A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033A8                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000033A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000033AD                 setz    dl
.text:00000000000033B0                 xor     eax, eax
.text:00000000000033B2                 jmp     loc_3198
.text:00000000000033B2 ; ---------------------------------------------------------------------------
.text:00000000000033B7                 align 20h
.text:00000000000033C0
.text:00000000000033C0 loc_33C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033C0                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000033C0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000033C5                 mov     ebx, 61h ; 'a'
.text:00000000000033CA                 jmp     loc_32A4
.text:00000000000033CA ; ---------------------------------------------------------------------------
.text:00000000000033CF                 align 10h
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033D0                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000033D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000033D5                 setz    dl
.text:00000000000033D8
.text:00000000000033D8 loc_33D8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000033D8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000033D8                 test    rbp, rbp
.text:00000000000033DB                 jnz     loc_318C
.text:00000000000033E1
.text:00000000000033E1 loc_33E1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000033E1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000033E1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000033E6                 and     al, dl
.text:00000000000033E8                 jz      loc_3198
.text:00000000000033EE
.text:00000000000033EE loc_33EE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000033EE                 mov     rbp, r11
.text:00000000000033F1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033F9                 jmp     loc_3AF9
.text:00000000000033F9 ; ---------------------------------------------------------------------------
.text:00000000000033FE                 align 20h
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003400                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003400                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003405                 setz    dl
.text:0000000000003408                 xor     r12d, r12d
.text:000000000000340B                 jmp     short loc_33E1
.text:000000000000340B ; ---------------------------------------------------------------------------
.text:000000000000340D                 align 10h
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003410                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003410                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003415                 mov     ebx, 20h ; ' '
.text:000000000000341A                 setz    dl
.text:000000000000341D                 jmp     short loc_33E1
.text:000000000000341D ; ---------------------------------------------------------------------------
.text:000000000000341F                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003420                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003420                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003425                 mov     ebx, 72h ; 'r'
.text:000000000000342A                 jmp     loc_3292
.text:000000000000342A ; ---------------------------------------------------------------------------
.text:000000000000342F                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003430                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003430                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003435                 mov     ebx, 66h ; 'f'
.text:000000000000343A                 jmp     loc_32A4
.text:000000000000343A ; ---------------------------------------------------------------------------
.text:000000000000343F                 align 20h
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003440                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003440                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003445                 mov     ebx, 76h ; 'v'
.text:000000000000344A                 jmp     loc_32A4
.text:000000000000344A ; ---------------------------------------------------------------------------
.text:000000000000344F                 align 10h
.text:0000000000003450
.text:0000000000003450 loc_3450:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003450                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003450                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003455                 mov     ebx, 6Eh ; 'n'
.text:000000000000345A                 jmp     loc_3292
.text:000000000000345A ; ---------------------------------------------------------------------------
.text:000000000000345F                 align 20h
.text:0000000000003460
.text:0000000000003460 def_34EA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003460                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003460                                         ; DATA XREF: ...
.text:0000000000003460                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003463                 nop     dword ptr [rax+rax+00h]
.text:0000000000003468
.text:0000000000003468 def_315E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003468                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003468                                         ; DATA XREF: ...
.text:0000000000003468                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000346E                 jnz     loc_3818
.text:0000000000003474                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003479                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000347E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003483                 call    ___ctype_b_loc
.text:0000000000003488                 mov     rcx, [rax]
.text:000000000000348B                 movzx   edx, bl
.text:000000000000348E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003494                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000349A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000349F                 mov     edi, 1
.text:00000000000034A4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000034A8                 and     ax, 4000h
.text:00000000000034AC                 setnz   r12b
.text:00000000000034B0                 setz    al
.text:00000000000034B3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000034B7
.text:00000000000034B7 loc_34B7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000034B7                 test    al, al
.text:00000000000034B9                 jnz     loc_3E51
.text:00000000000034BF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034C4                 setz    dl
.text:00000000000034C7                 jmp     loc_3198
.text:00000000000034C7 ; ---------------------------------------------------------------------------
.text:00000000000034CC                 align 10h
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000034D0                 movzx   ebx, byte ptr [r9]
.text:00000000000034D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000034D7                 ja      short def_34EA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000034D9                 lea     rcx, jpt_34EA
.text:00000000000034E0                 movzx   edx, bl
.text:00000000000034E3                 movsxd  rax, ds:(jpt_34EA - 5FA8h)[rcx+rdx*4]
.text:00000000000034E7                 add     rax, rcx
.text:00000000000034EA                 jmp     rax             ; switch jump
.text:00000000000034EA ; ---------------------------------------------------------------------------
.text:00000000000034EC                 align 10h
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000034F0                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:00000000000034F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000034F3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000034F8                 jnz     loc_32EE
.text:00000000000034FE                 xchg    ax, ax
.text:0000000000003500
.text:0000000000003500 loc_3500:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003500                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003500                 mov     edx, 5Ch ; '\'
.text:0000000000003505                 mov     ebx, 5Ch ; '\'
.text:000000000000350A                 jmp     loc_32A4
.text:000000000000350A ; ---------------------------------------------------------------------------
.text:000000000000350F                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003510                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003510                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003515                 xor     r10d, r10d
.text:0000000000003518                 mov     ebx, 66h ; 'f'
.text:000000000000351D                 jmp     loc_32A4
.text:000000000000351D ; ---------------------------------------------------------------------------
.text:0000000000003522                 align 8
.text:0000000000003528
.text:0000000000003528 loc_3528:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003528                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003528                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000352D                 xor     r10d, r10d
.text:0000000000003530                 mov     ebx, 6Eh ; 'n'
.text:0000000000003535                 jmp     loc_3292
.text:0000000000003535 ; ---------------------------------------------------------------------------
.text:000000000000353A                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003540                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003540                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003545                 jmp     loc_3310
.text:0000000000003545 ; ---------------------------------------------------------------------------
.text:000000000000354A                 align 10h
.text:0000000000003550
.text:0000000000003550 loc_3550:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003550                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003550                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003553
.text:0000000000003553 loc_3553:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003553                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003558                 setz    dl
.text:000000000000355B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003560                 jnz     loc_40FA
.text:0000000000003566                 mov     eax, r8d
.text:0000000000003569                 mov     rcx, r15
.text:000000000000356C                 xor     eax, 1
.text:000000000000356F                 and     al, dl
.text:0000000000003571                 jz      short loc_35A0
.text:0000000000003573                 cmp     r13, r15
.text:0000000000003576                 jbe     short loc_357D
.text:0000000000003578                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000357D
.text:000000000000357D loc_357D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000357D                 lea     rcx, [r15+1]
.text:0000000000003581                 cmp     r13, rcx
.text:0000000000003584                 jbe     short loc_358C
.text:0000000000003586                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000358C
.text:000000000000358C loc_358C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000358C                 lea     rcx, [r15+2]
.text:0000000000003590                 cmp     r13, rcx
.text:0000000000003593                 ja      loc_3BC9
.text:0000000000003599
.text:0000000000003599 loc_3599:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003599                 lea     rcx, [r15+3]
.text:000000000000359D                 mov     r8d, eax
.text:00000000000035A0
.text:00000000000035A0 loc_35A0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000035A0                 cmp     r13, rcx
.text:00000000000035A3                 jbe     short loc_35AA
.text:00000000000035A5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000035AA
.text:00000000000035AA loc_35AA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000035AA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000035AF                 lea     r15, [rcx+1]
.text:00000000000035B3                 jz      loc_3BB9
.text:00000000000035B9                 lea     rax, [rbp+1]
.text:00000000000035BD                 cmp     rax, r11
.text:00000000000035C0                 jnb     short loc_35DB
.text:00000000000035C2                 mov     rax, [rsp+0E8h+s]
.text:00000000000035C7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000035CC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000035D0                 sub     eax, 30h ; '0'
.text:00000000000035D3                 cmp     al, 9
.text:00000000000035D5                 jbe     loc_3E09
.text:00000000000035DB
.text:00000000000035DB loc_35DB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000035DB                 mov     eax, r12d
.text:00000000000035DE                 mov     ebx, 30h ; '0'
.text:00000000000035E3                 xor     r12d, r12d
.text:00000000000035E6                 jmp     loc_3198
.text:00000000000035E6 ; ---------------------------------------------------------------------------
.text:00000000000035EB                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000035F0                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:00000000000035F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000035F5                 mov     r12d, r10d
.text:00000000000035F8                 setz    dl
.text:00000000000035FB                 xor     r10d, r10d
.text:00000000000035FE                 xor     eax, eax
.text:0000000000003600                 jmp     loc_3198
.text:0000000000003600 ; ---------------------------------------------------------------------------
.text:0000000000003605                 align 8
.text:0000000000003608
.text:0000000000003608 loc_3608:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003608                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003608                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000360D                 setz    dl
.text:0000000000003610                 xor     r10d, r10d
.text:0000000000003613                 jmp     loc_33D8
.text:0000000000003613 ; ---------------------------------------------------------------------------
.text:0000000000003618                 align 20h
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003620                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003620                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003625                 setz    dl
.text:0000000000003628                 xor     r10d, r10d
.text:000000000000362B                 xor     r12d, r12d
.text:000000000000362E                 jmp     loc_33E1
.text:000000000000362E ; ---------------------------------------------------------------------------
.text:0000000000003633                 align 8
.text:0000000000003638
.text:0000000000003638 loc_3638:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003638                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003638                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000363D                 mov     r12d, r10d
.text:0000000000003640                 mov     ebx, 20h ; ' '
.text:0000000000003645                 setz    dl
.text:0000000000003648                 xor     r10d, r10d
.text:000000000000364B                 jmp     loc_33E1
.text:0000000000003650 ; ---------------------------------------------------------------------------
.text:0000000000003650
.text:0000000000003650 loc_3650:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003650                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003650                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003655                 xor     r10d, r10d
.text:0000000000003658                 mov     ebx, 72h ; 'r'
.text:000000000000365D                 jmp     loc_3292
.text:000000000000365D ; ---------------------------------------------------------------------------
.text:0000000000003662                 align 8
.text:0000000000003668
.text:0000000000003668 loc_3668:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003668                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003668                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000366D                 jmp     loc_3310
.text:000000000000366D ; ---------------------------------------------------------------------------
.text:0000000000003672                 align 8
.text:0000000000003678
.text:0000000000003678 loc_3678:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003678                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003678                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000367D                 xor     r10d, r10d
.text:0000000000003680                 mov     ebx, 74h ; 't'
.text:0000000000003685                 jmp     loc_3292
.text:0000000000003685 ; ---------------------------------------------------------------------------
.text:000000000000368A                 align 10h
.text:0000000000003690
.text:0000000000003690 loc_3690:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003690                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003690                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003695                 jmp     loc_3310
.text:0000000000003695 ; ---------------------------------------------------------------------------
.text:000000000000369A                 align 20h
.text:00000000000036A0
.text:00000000000036A0 loc_36A0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000036A0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000036A0                 xor     r10d, r10d
.text:00000000000036A3                 jmp     loc_3140
.text:00000000000036A3 ; ---------------------------------------------------------------------------
.text:00000000000036A8                 align 10h
.text:00000000000036B0
.text:00000000000036B0 loc_36B0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000036B0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036B5                 jnz     loc_4020
.text:00000000000036BB
.text:00000000000036BB loc_36BB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000036BB                 add     rbp, 1
.text:00000000000036BF                 mov     eax, r8d
.text:00000000000036C2                 xor     r12d, r12d
.text:00000000000036C5                 mov     ebx, 5Ch ; '\'
.text:00000000000036CA                 jmp     loc_31DC
.text:00000000000036CA ; ---------------------------------------------------------------------------
.text:00000000000036CF                 align 10h
.text:00000000000036D0
.text:00000000000036D0 loc_36D0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000036D0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000036D5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000036DA                 mov     r12d, r8d
.text:00000000000036DD                 mov     rbp, r11
.text:00000000000036E0                 setz    dl
.text:00000000000036E3                 mov     eax, ebx
.text:00000000000036E5                 test    r15, r15
.text:00000000000036E8                 setz    cl
.text:00000000000036EB                 and     eax, edx
.text:00000000000036ED                 and     al, cl
.text:00000000000036EF                 jnz     loc_4156
.text:00000000000036F5                 mov     eax, ebx
.text:00000000000036F7                 xor     eax, 1
.text:00000000000036FA                 and     dl, al
.text:00000000000036FC                 jz      loc_406C
.text:0000000000003702                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003707                 jz      loc_406A
.text:000000000000370D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003712                 jnz     loc_410D
.text:0000000000003718                 test    r13, r13
.text:000000000000371B                 setz    al
.text:000000000000371E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003724                 setnz   dl
.text:0000000000003727                 and     al, dl
.text:0000000000003729                 jz      loc_414C
.text:000000000000372F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003734
.text:0000000000003734 loc_3734:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003734                 lea     rbx, asc_5D25   ; "'"
.text:000000000000373B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000373F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003747                 mov     r15d, 1
.text:000000000000374D                 mov     [rsp+0E8h+n], 1
.text:0000000000003756                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000375B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003760                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003764                 jmp     loc_3043
.text:0000000000003764 ; ---------------------------------------------------------------------------
.text:0000000000003769                 align 10h
.text:0000000000003770
.text:0000000000003770 loc_3770:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003770                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003775                 jnz     loc_4020
.text:000000000000377B                 test    r13, r13
.text:000000000000377E                 jz      loc_3B80
.text:0000000000003784                 xor     edx, edx
.text:0000000000003786                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000378C                 jnz     loc_3B80
.text:0000000000003792
.text:0000000000003792 loc_3792:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003792                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003792                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003797                 add     r15, 3
.text:000000000000379B                 xor     eax, eax
.text:000000000000379D                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000037A2                 xor     r8d, r8d
.text:00000000000037A5                 mov     r13, rdx
.text:00000000000037A8                 mov     ebx, 27h ; '''
.text:00000000000037AD                 jmp     loc_31C9
.text:00000000000037AD ; ---------------------------------------------------------------------------
.text:00000000000037B2                 align 8
.text:00000000000037B8
.text:00000000000037B8 loc_37B8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000037B8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000037BD                 jz      short loc_37E0
.text:00000000000037BF                 lea     rcx, [rbp+2]
.text:00000000000037C3                 cmp     rcx, r11
.text:00000000000037C6                 jnb     short loc_37E0
.text:00000000000037C8                 mov     rax, [rsp+0E8h+s]
.text:00000000000037CD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000037D2                 jz      loc_3F62
.text:00000000000037D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000037E0
.text:00000000000037E0 loc_37E0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000037E0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000037E0                 xor     edx, edx
.text:00000000000037E2                 xor     r12d, r12d
.text:00000000000037E5                 xor     eax, eax
.text:00000000000037E7                 mov     ebx, 3Fh ; '?'
.text:00000000000037EC                 jmp     loc_3198
.text:00000000000037EC ; ---------------------------------------------------------------------------
.text:00000000000037F1                 align 8
.text:00000000000037F8
.text:00000000000037F8 loc_37F8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000037F8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000037FD                 jnz     loc_4020
.text:0000000000003803                 xor     r12d, r12d
.text:0000000000003806                 xor     eax, eax
.text:0000000000003808                 mov     ebx, 3Fh ; '?'
.text:000000000000380D                 jmp     loc_31C9
.text:000000000000380D ; ---------------------------------------------------------------------------
.text:0000000000003812                 align 8
.text:0000000000003818
.text:0000000000003818 loc_3818:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003818                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003820                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003824                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003830                 mov     [rsp+0E8h+ps], rax
.text:0000000000003835                 jnz     short loc_3864
.text:0000000000003837                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000383C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003841                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003846                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000384B                 call    _strlen
.text:0000000000003850                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003856                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000385C                 mov     r11, rax
.text:000000000000385F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003864
.text:0000000000003864 loc_3864:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003864                 lea     rax, [rsp+0E8h+wc]
.text:000000000000386C                 xor     ecx, ecx
.text:000000000000386E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003872                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003877                 mov     rbx, rcx
.text:000000000000387A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003882                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003887                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000388C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003894                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003899                 mov     [rsp+0E8h+var_78], r13
.text:000000000000389E                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000038A3
.text:00000000000038A3 loc_38A3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000038A3                 mov     rax, [rsp+0E8h+s]
.text:00000000000038A8                 lea     r14, [rbp+rbx+0]
.text:00000000000038AD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000038B2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000038B7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000038BC                 lea     r13, [rax+r14]
.text:00000000000038C0                 sub     rdx, r14
.text:00000000000038C3                 mov     rsi, r13
.text:00000000000038C6                 call    rpl_mbrtowc
.text:00000000000038CB                 test    rax, rax
.text:00000000000038CE                 mov     r15, rax
.text:00000000000038D1                 jz      short loc_3921
.text:00000000000038D3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000038D7                 jz      loc_3EF5
.text:00000000000038DD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000038E1                 jz      loc_3E81
.text:00000000000038E7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038EC                 setz    al
.text:00000000000038EF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000038F3                 jnz     loc_3A90
.text:00000000000038F9
.text:00000000000038F9 loc_38F9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000038F9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000038F9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003900                 call    _iswprint
.text:0000000000003905                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000390A                 test    eax, eax
.text:000000000000390C                 mov     eax, 0
.text:0000000000003911                 cmovz   r12d, eax
.text:0000000000003915                 add     rbx, r15
.text:0000000000003918                 call    _mbsinit
.text:000000000000391D                 test    eax, eax
.text:000000000000391F                 jz      short loc_38A3
.text:0000000000003921
.text:0000000000003921 loc_3921:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003921                 mov     edx, r12d
.text:0000000000003924                 mov     rdi, rbx
.text:0000000000003927                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000392D                 xor     edx, 1
.text:0000000000003930                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003935                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000393B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000393F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003947                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000394C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003951                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003956
.text:0000000000003956 loc_3956:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003956                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003956                 cmp     rdi, 1
.text:000000000000395A                 jbe     loc_3F5B
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003960                 mov     rcx, rdi
.text:0000000000003963                 xor     esi, esi
.text:0000000000003965                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000396B                 add     rcx, rbp
.text:000000000000396E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003973                 jmp     loc_3A2E
.text:0000000000003973 ; ---------------------------------------------------------------------------
.text:0000000000003978                 align 20h
.text:0000000000003980
.text:0000000000003980 loc_3980:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003980                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003985                 setz    al
.text:0000000000003988                 test    r9b, r9b
.text:000000000000398B                 jnz     loc_3E40
.text:0000000000003991                 mov     esi, r8d
.text:0000000000003994                 xor     esi, 1
.text:0000000000003997                 and     al, sil
.text:000000000000399A                 jz      short loc_39CB
.text:000000000000399C                 cmp     r13, r15
.text:000000000000399F                 jbe     short loc_39A6
.text:00000000000039A1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000039A6
.text:00000000000039A6 loc_39A6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000039A6                 lea     rsi, [r15+1]
.text:00000000000039AA                 cmp     r13, rsi
.text:00000000000039AD                 jbe     short loc_39B5
.text:00000000000039AF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000039B5
.text:00000000000039B5 loc_39B5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000039B5                 lea     rsi, [r15+2]
.text:00000000000039B9                 cmp     r13, rsi
.text:00000000000039BC                 jbe     short loc_39C4
.text:00000000000039BE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000039C4
.text:00000000000039C4 loc_39C4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000039C4                 add     r15, 3
.text:00000000000039C8                 mov     r8d, eax
.text:00000000000039CB
.text:00000000000039CB loc_39CB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000039CB                 cmp     r13, r15
.text:00000000000039CE                 jbe     short loc_39D5
.text:00000000000039D0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000039D5
.text:00000000000039D5 loc_39D5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000039D5                 lea     rax, [r15+1]
.text:00000000000039D9                 cmp     r13, rax
.text:00000000000039DC                 jbe     short loc_39EB
.text:00000000000039DE                 mov     eax, ebx
.text:00000000000039E0                 shr     al, 6
.text:00000000000039E3                 add     eax, 30h ; '0'
.text:00000000000039E6                 mov     [r14+r15+1], al
.text:00000000000039EB
.text:00000000000039EB loc_39EB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000039EB                 lea     rax, [r15+2]
.text:00000000000039EF                 cmp     r13, rax
.text:00000000000039F2                 jbe     short loc_3A04
.text:00000000000039F4                 mov     eax, ebx
.text:00000000000039F6                 shr     al, 3
.text:00000000000039F9                 and     eax, 7
.text:00000000000039FC                 add     eax, 30h ; '0'
.text:00000000000039FF                 mov     [r14+r15+2], al
.text:0000000000003A04
.text:0000000000003A04 loc_3A04:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003A04                 and     ebx, 7
.text:0000000000003A07                 add     rbp, 1
.text:0000000000003A0B                 add     r15, 3
.text:0000000000003A0F                 add     ebx, 30h ; '0'
.text:0000000000003A12                 cmp     rbp, rcx
.text:0000000000003A15                 jnb     loc_3200
.text:0000000000003A1B                 mov     esi, edx
.text:0000000000003A1D
.text:0000000000003A1D loc_3A1D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003A1D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003A1D                 cmp     r13, r15
.text:0000000000003A20                 jbe     short loc_3A26
.text:0000000000003A22                 mov     [r14+r15], bl
.text:0000000000003A26
.text:0000000000003A26 loc_3A26:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003A26                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003A2A                 add     r15, 1
.text:0000000000003A2E
.text:0000000000003A2E loc_3A2E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003A2E                 test    dl, dl
.text:0000000000003A30                 jnz     loc_3980
.text:0000000000003A36                 mov     eax, esi
.text:0000000000003A38                 xor     eax, 1
.text:0000000000003A3B                 and     eax, r8d
.text:0000000000003A3E                 test    r10b, r10b
.text:0000000000003A41                 jz      short loc_3A51
.text:0000000000003A43                 cmp     r13, r15
.text:0000000000003A46                 jbe     short loc_3A4D
.text:0000000000003A48                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003A4D
.text:0000000000003A4D loc_3A4D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003A4D                 add     r15, 1
.text:0000000000003A51
.text:0000000000003A51 loc_3A51:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003A51                 add     rbp, 1
.text:0000000000003A55                 cmp     rbp, rcx
.text:0000000000003A58                 jnb     loc_31DC
.text:0000000000003A5E                 test    al, al
.text:0000000000003A60                 jz      loc_3E5E
.text:0000000000003A66                 cmp     r13, r15
.text:0000000000003A69                 jbe     short loc_3A70
.text:0000000000003A6B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003A70
.text:0000000000003A70 loc_3A70:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003A70                 lea     rax, [r15+1]
.text:0000000000003A74                 cmp     r13, rax
.text:0000000000003A77                 jbe     short loc_3A7F
.text:0000000000003A79                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003A7F
.text:0000000000003A7F loc_3A7F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003A7F                 add     r15, 2
.text:0000000000003A83                 xor     r10d, r10d
.text:0000000000003A86                 xor     r8d, r8d
.text:0000000000003A89                 jmp     short loc_3A1D
.text:0000000000003A89 ; ---------------------------------------------------------------------------
.text:0000000000003A8B                 align 10h
.text:0000000000003A90
.text:0000000000003A90 loc_3A90:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003A90                 cmp     r15, 1
.text:0000000000003A94                 jz      loc_38F9
.text:0000000000003A9A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003A9F                 lea     rcx, [rdi+r15]
.text:0000000000003AA3                 lea     rdx, [rdi+r14+1]
.text:0000000000003AA8                 lea     r8, [rcx+r14]
.text:0000000000003AAC                 jmp     short loc_3ABD
.text:0000000000003AAC ; ---------------------------------------------------------------------------
.text:0000000000003AAE                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003AB0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003AB0                 add     rdx, 1
.text:0000000000003AB4                 cmp     r8, rdx
.text:0000000000003AB7                 jz      loc_38F9
.text:0000000000003ABD
.text:0000000000003ABD loc_3ABD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003ABD                 movzx   ecx, byte ptr [rdx]
.text:0000000000003AC0                 sub     ecx, 5Bh ; '['
.text:0000000000003AC3                 cmp     cl, 21h ; '!'
.text:0000000000003AC6                 ja      short loc_3AB0
.text:0000000000003AC8                 mov     esi, 1
.text:0000000000003ACD                 shl     rsi, cl
.text:0000000000003AD0                 mov     rcx, rsi
.text:0000000000003AD3                 mov     rsi, 20000002Bh
.text:0000000000003ADD                 test    rcx, rsi
.text:0000000000003AE0                 jz      short loc_3AB0
.text:0000000000003AE2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003AE7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003AEC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003AF1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003AF9
.text:0000000000003AF9 loc_3AF9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003AF9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003AF9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003AFE                 jz      short loc_3B10
.text:0000000000003B00                 test    al, al
.text:0000000000003B02                 mov     eax, 4
.text:0000000000003B07                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003B0C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003B10                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003B10                 sub     rsp, 8
.text:0000000000003B14                 mov     rcx, rbp
.text:0000000000003B17                 mov     rsi, r13
.text:0000000000003B1A                 push    [rsp+0F0h+var_88]
.text:0000000000003B1E                 push    [rsp+0F8h+var_80]
.text:0000000000003B22                 mov     rdi, r14
.text:0000000000003B25                 push    0
.text:0000000000003B27                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003B2F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003B34                 mov     rdx, [rsp+108h+s]
.text:0000000000003B39                 and     r9d, 0FFFFFFFDh
.text:0000000000003B3D                 call    quotearg_buffer_restyled
.text:0000000000003B42                 add     rsp, 20h
.text:0000000000003B46                 mov     r15, rax
.text:0000000000003B49
.text:0000000000003B49 loc_3B49:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003B49                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003B49                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003B51                 xor     rbx, fs:28h
.text:0000000000003B5A                 mov     rax, r15
.text:0000000000003B5D                 jnz     loc_4163
.text:0000000000003B63                 add     rsp, 0B8h
.text:0000000000003B6A                 pop     rbx
.text:0000000000003B6B                 pop     rbp
.text:0000000000003B6C                 pop     r12
.text:0000000000003B6E                 pop     r13
.text:0000000000003B70                 pop     r14
.text:0000000000003B72                 pop     r15
.text:0000000000003B74                 retn
.text:0000000000003B74 ; ---------------------------------------------------------------------------
.text:0000000000003B75                 align 8
.text:0000000000003B78
.text:0000000000003B78 loc_3B78:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003B78                 mov     rbp, r11
.text:0000000000003B7B                 jmp     loc_3AF9
.text:0000000000003B80 ; ---------------------------------------------------------------------------
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003B80                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003B80                 cmp     r13, r15
.text:0000000000003B83                 jbe     short loc_3B8A
.text:0000000000003B85                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003B8A
.text:0000000000003B8A loc_3B8A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003B8A                 lea     rax, [r15+1]
.text:0000000000003B8E                 cmp     r13, rax
.text:0000000000003B91                 jbe     short loc_3B99
.text:0000000000003B93                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003B99
.text:0000000000003B99 loc_3B99:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003B99                 lea     rax, [r15+2]
.text:0000000000003B9D                 cmp     r13, rax
.text:0000000000003BA0                 jbe     loc_4192
.text:0000000000003BA6                 mov     rdx, r13
.text:0000000000003BA9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003BAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003BB4                 jmp     loc_3792
.text:0000000000003BB9 ; ---------------------------------------------------------------------------
.text:0000000000003BB9
.text:0000000000003BB9 loc_3BB9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003BB9                 mov     eax, r12d
.text:0000000000003BBC                 mov     ebx, 30h ; '0'
.text:0000000000003BC1                 xor     r12d, r12d
.text:0000000000003BC4                 jmp     loc_31C9
.text:0000000000003BC9 ; ---------------------------------------------------------------------------
.text:0000000000003BC9
.text:0000000000003BC9 loc_3BC9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003BC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003BCF                 jmp     loc_3599
.text:0000000000003BD4 ; ---------------------------------------------------------------------------
.text:0000000000003BD4
.text:0000000000003BD4 loc_3BD4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003BD4                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003BD4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003BD6                 jnz     loc_3003        ; jumptable 00000000000121F1 case 1
.text:0000000000003BDC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003BE1
.text:0000000000003BE1 loc_3BE1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003BE1                 test    r13, r13
.text:0000000000003BE4                 jnz     loc_417A
.text:0000000000003BEA                 lea     rax, asc_5D25   ; "'"
.text:0000000000003BF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003BFA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003BFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C04                 xor     r12d, r12d
.text:0000000000003C07                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003C0C                 mov     [rsp+0E8h+n], 1
.text:0000000000003C15                 mov     [rsp+0E8h+s2], rax
.text:0000000000003C1A                 mov     r15d, 1
.text:0000000000003C20                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003C28                 jmp     loc_3043
.text:0000000000003C28 ; ---------------------------------------------------------------------------
.text:0000000000003C2D                 align 10h
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C30                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003C30                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003C32                 jnz     loc_402D
.text:0000000000003C38                 test    r13, r13
.text:0000000000003C3B                 jz      loc_3E66
.text:0000000000003C41                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003C45                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C4A                 xor     r12d, r12d
.text:0000000000003C4D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C52                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C5B
.text:0000000000003C5B loc_3C5B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003C5B                 lea     rax, unk_5D23
.text:0000000000003C62                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003C67                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003C6C                 mov     [rsp+0E8h+n], 1
.text:0000000000003C75                 mov     r15d, 1
.text:0000000000003C7B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003C80                 jmp     loc_3043
.text:0000000000003C85 ; ---------------------------------------------------------------------------
.text:0000000000003C85
.text:0000000000003C85 loc_3C85:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C85                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003C85                 lea     rax, unk_5D23   ; jumptable 00000000000121F1 case 6
.text:0000000000003C8C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C91                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C96                 xor     r12d, r12d
.text:0000000000003C99                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CA2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003CA7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003CAC                 mov     [rsp+0E8h+n], 1
.text:0000000000003CB5                 xor     r15d, r15d
.text:0000000000003CB8                 mov     [rsp+0E8h+s2], rax
.text:0000000000003CBD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003CC5                 jmp     loc_3043
.text:0000000000003CCA ; ---------------------------------------------------------------------------
.text:0000000000003CCA
.text:0000000000003CCA loc_3CCA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003CCA                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003CCA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000003CCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CD4                 xor     r12d, r12d
.text:0000000000003CD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CE0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003CE5                 xor     r15d, r15d
.text:0000000000003CE8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003CED                 mov     [rsp+0E8h+n], 0
.text:0000000000003CF6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003CFF                 jmp     loc_3043
.text:0000000000003D04 ; ---------------------------------------------------------------------------
.text:0000000000003D04
.text:0000000000003D04 loc_3D04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003D04                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003D04                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003D09                 jz      short loc_3D61
.text:0000000000003D0B                 lea     rsi, asc_5D27   ; "`"
.text:0000000000003D12                 xor     edi, edi        ; domainname
.text:0000000000003D14                 mov     edx, 5          ; category
.text:0000000000003D19                 call    _dcgettext
.text:0000000000003D1E                 mov     rcx, rax
.text:0000000000003D21                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003D26                 lea     rax, asc_5D27   ; "`"
.text:0000000000003D2D                 cmp     rcx, rax
.text:0000000000003D30                 jz      loc_40CE
.text:0000000000003D36
.text:0000000000003D36 loc_3D36:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003D36                 lea     rsi, asc_5D25   ; "'"
.text:0000000000003D3D                 xor     edi, edi        ; domainname
.text:0000000000003D3F                 mov     edx, 5          ; category
.text:0000000000003D44                 call    _dcgettext
.text:0000000000003D49                 mov     rcx, rax
.text:0000000000003D4C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003D51                 lea     rax, asc_5D25   ; "'"
.text:0000000000003D58                 cmp     rcx, rax
.text:0000000000003D5B                 jz      loc_40E4
.text:0000000000003D61
.text:0000000000003D61 loc_3D61:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003D61                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003D61                 xor     r15d, r15d
.text:0000000000003D64                 test    ebx, ebx
.text:0000000000003D66                 jz      loc_3F2D
.text:0000000000003D6C
.text:0000000000003D6C loc_3D6C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003D6C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003D6C                 test    ebx, ebx
.text:0000000000003D6E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003D73                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003D78                 xor     r12d, r12d
.text:0000000000003D7B                 mov     rdi, rbx        ; s
.text:0000000000003D7E                 call    _strlen
.text:0000000000003D83                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003D88                 mov     [rsp+0E8h+n], rax
.text:0000000000003D8D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003D92                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DA0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003DA5                 jmp     loc_3043
.text:0000000000003DAA ; ---------------------------------------------------------------------------
.text:0000000000003DAA
.text:0000000000003DAA loc_3DAA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003DAA                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003DAA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003DAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DB4                 xor     r12d, r12d
.text:0000000000003DB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003DC5                 xor     r15d, r15d
.text:0000000000003DC8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003DCD                 mov     [rsp+0E8h+n], 0
.text:0000000000003DD6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003DDF                 jmp     loc_3043
.text:0000000000003DE4 ; ---------------------------------------------------------------------------
.text:0000000000003DE4
.text:0000000000003DE4 loc_3DE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003DE4                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003DE4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003DE9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DEE                 xor     r12d, r12d
.text:0000000000003DF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DFA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003DFF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003E04                 jmp     loc_3023
.text:0000000000003E09 ; ---------------------------------------------------------------------------
.text:0000000000003E09
.text:0000000000003E09 loc_3E09:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003E09                 cmp     r13, r15
.text:0000000000003E0C                 jbe     short loc_3E13
.text:0000000000003E0E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003E13
.text:0000000000003E13 loc_3E13:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003E13                 lea     rax, [rcx+2]
.text:0000000000003E17                 cmp     r13, rax
.text:0000000000003E1A                 jbe     short loc_3E22
.text:0000000000003E1C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003E22
.text:0000000000003E22 loc_3E22:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003E22                 mov     eax, r12d
.text:0000000000003E25                 lea     r15, [rcx+3]
.text:0000000000003E29                 xor     r12d, r12d
.text:0000000000003E2C                 mov     ebx, 30h ; '0'
.text:0000000000003E31                 jmp     loc_3198
.text:0000000000003E31 ; ---------------------------------------------------------------------------
.text:0000000000003E36                 align 20h
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003E40                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003E45                 mov     rbp, r11
.text:0000000000003E48                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003E4C                 jmp     loc_3AF9
.text:0000000000003E51 ; ---------------------------------------------------------------------------
.text:0000000000003E51
.text:0000000000003E51 loc_3E51:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003E51                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003E56                 xor     r12d, r12d
.text:0000000000003E59                 jmp     loc_3960
.text:0000000000003E5E ; ---------------------------------------------------------------------------
.text:0000000000003E5E
.text:0000000000003E5E loc_3E5E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003E5E                 xor     r10d, r10d
.text:0000000000003E61                 jmp     loc_3A1D
.text:0000000000003E66 ; ---------------------------------------------------------------------------
.text:0000000000003E66
.text:0000000000003E66 loc_3E66:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003E66                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E6F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E74                 xor     r12d, r12d
.text:0000000000003E77                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E7C                 jmp     loc_3C5B
.text:0000000000003E81 ; ---------------------------------------------------------------------------
.text:0000000000003E81
.text:0000000000003E81 loc_3E81:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003E81                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003E86                 mov     rsi, r14
.text:0000000000003E89                 mov     rcx, r13
.text:0000000000003E8C                 mov     rax, rbx
.text:0000000000003E8F                 mov     rdi, rbx
.text:0000000000003E92                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003E98                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003E9D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003EA5                 cmp     rsi, r11
.text:0000000000003EA8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003EAE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003EB6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003EBB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003EC0                 jnb     short loc_3EE8
.text:0000000000003EC2                 cmp     byte ptr [rcx], 0
.text:0000000000003EC5                 jnz     short loc_3ED7
.text:0000000000003EC7                 jmp     short loc_3EE8
.text:0000000000003EC7 ; ---------------------------------------------------------------------------
.text:0000000000003EC9                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 loc_3ED0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003ED0                 cmp     byte ptr [r9+rax], 0
.text:0000000000003ED5                 jz      short loc_3EE5
.text:0000000000003ED7
.text:0000000000003ED7 loc_3ED7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003ED7                 add     rax, 1
.text:0000000000003EDB                 lea     rdx, [rbp+rax+0]
.text:0000000000003EE0                 cmp     r11, rdx
.text:0000000000003EE3                 ja      short loc_3ED0
.text:0000000000003EE5
.text:0000000000003EE5 loc_3EE5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003EE5                 mov     rdi, rax
.text:0000000000003EE8
.text:0000000000003EE8 loc_3EE8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003EE8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003EE8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003EED                 xor     r12d, r12d
.text:0000000000003EF0                 jmp     loc_3956
.text:0000000000003EF5 ; ---------------------------------------------------------------------------
.text:0000000000003EF5
.text:0000000000003EF5 loc_3EF5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003EF5                 mov     rdi, rbx
.text:0000000000003EF8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003EFE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003F03                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003F09                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003F11                 xor     r12d, r12d
.text:0000000000003F14                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003F19                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003F1E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003F23                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003F28                 jmp     loc_3956
.text:0000000000003F2D ; ---------------------------------------------------------------------------
.text:0000000000003F2D
.text:0000000000003F2D loc_3F2D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003F2D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003F32                 movzx   eax, byte ptr [rdx]
.text:0000000000003F35                 test    al, al
.text:0000000000003F37                 jz      loc_3D6C
.text:0000000000003F3D                 nop     dword ptr [rax]
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003F40                 cmp     r13, r15
.text:0000000000003F43                 jbe     short loc_3F49
.text:0000000000003F45                 mov     [r14+r15], al
.text:0000000000003F49
.text:0000000000003F49 loc_3F49:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003F49                 add     r15, 1
.text:0000000000003F4D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003F52                 test    al, al
.text:0000000000003F54                 jnz     short loc_3F40
.text:0000000000003F56                 jmp     loc_3D6C
.text:0000000000003F5B ; ---------------------------------------------------------------------------
.text:0000000000003F5B
.text:0000000000003F5B loc_3F5B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003F5B                 mov     eax, edx
.text:0000000000003F5D                 jmp     loc_34B7
.text:0000000000003F62 ; ---------------------------------------------------------------------------
.text:0000000000003F62
.text:0000000000003F62 loc_3F62:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003F62                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003F66                 cmp     bl, 3Eh ; '>'
.text:0000000000003F69                 ja      loc_37E0
.text:0000000000003F6F                 mov     rax, 7000A38200000000h
.text:0000000000003F79                 bt      rax, rbx
.text:0000000000003F7D                 jnb     loc_37E0
.text:0000000000003F83                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003F88                 jnz     loc_4172
.text:0000000000003F8E                 cmp     r13, r15
.text:0000000000003F91                 jbe     short loc_3F98
.text:0000000000003F93                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003F98
.text:0000000000003F98 loc_3F98:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003F98                 lea     rax, [r15+1]
.text:0000000000003F9C                 cmp     r13, rax
.text:0000000000003F9F                 jbe     short loc_3FA7
.text:0000000000003FA1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003FA7
.text:0000000000003FA7 loc_3FA7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003FA7                 lea     rax, [r15+2]
.text:0000000000003FAB                 cmp     r13, rax
.text:0000000000003FAE                 jbe     short loc_3FB6
.text:0000000000003FB0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003FB6
.text:0000000000003FB6 loc_3FB6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003FB6                 lea     rax, [r15+3]
.text:0000000000003FBA                 cmp     r13, rax
.text:0000000000003FBD                 jbe     short loc_3FC5
.text:0000000000003FBF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003FC5
.text:0000000000003FC5 loc_3FC5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003FC5                 add     r15, 4
.text:0000000000003FC9                 xor     edx, edx
.text:0000000000003FCB                 xor     r12d, r12d
.text:0000000000003FCE                 xor     eax, eax
.text:0000000000003FD0                 mov     rbp, rcx
.text:0000000000003FD3                 jmp     loc_3198
.text:0000000000003FD8 ; ---------------------------------------------------------------------------
.text:0000000000003FD8
.text:0000000000003FD8 loc_3FD8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003FD8                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003FD8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003FDA                 jz      loc_4168
.text:0000000000003FE0                 lea     rax, asc_5D25   ; "'"
.text:0000000000003FE7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003FEC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003FF1                 xor     r12d, r12d
.text:0000000000003FF4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003FFD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004002                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004007                 mov     [rsp+0E8h+n], 1
.text:0000000000004010                 xor     r15d, r15d
.text:0000000000004013                 mov     [rsp+0E8h+s2], rax
.text:0000000000004018                 jmp     loc_3043
.text:0000000000004018 ; ---------------------------------------------------------------------------
.text:000000000000401D                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004020                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004020                 mov     rbp, r11
.text:0000000000004023                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004028                 jmp     loc_3AF9
.text:000000000000402D ; ---------------------------------------------------------------------------
.text:000000000000402D
.text:000000000000402D loc_402D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000402D                 lea     rax, unk_5D23
.text:0000000000004034                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004039                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000403E                 xor     r12d, r12d
.text:0000000000004041                 mov     [rsp+0E8h+var_98], 0
.text:000000000000404A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000404F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004054                 mov     [rsp+0E8h+n], 1
.text:000000000000405D                 xor     r15d, r15d
.text:0000000000004060                 mov     [rsp+0E8h+s2], rax
.text:0000000000004065                 jmp     loc_3043
.text:000000000000406A ; ---------------------------------------------------------------------------
.text:000000000000406A
.text:000000000000406A loc_406A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000406A                 mov     eax, edx
.text:000000000000406C
.text:000000000000406C loc_406C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000406C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000406C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004071                 test    rbx, rbx
.text:0000000000004074                 jz      short loc_40A2
.text:0000000000004076                 test    al, al
.text:0000000000004078                 jz      short loc_40A2
.text:000000000000407A                 movzx   ecx, byte ptr [rbx]
.text:000000000000407D                 mov     rax, rbx
.text:0000000000004080                 test    cl, cl
.text:0000000000004082                 jz      short loc_40A2
.text:0000000000004084                 mov     rdx, r15
.text:0000000000004087                 sub     rax, r15
.text:000000000000408A
.text:000000000000408A loc_408A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000408A                 cmp     r13, rdx
.text:000000000000408D                 jbe     short loc_4093
.text:000000000000408F                 mov     [r14+rdx], cl
.text:0000000000004093
.text:0000000000004093 loc_4093:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004093                 add     rdx, 1
.text:0000000000004097                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000409B                 test    cl, cl
.text:000000000000409D                 jnz     short loc_408A
.text:000000000000409F                 mov     r15, rdx
.text:00000000000040A2
.text:00000000000040A2 loc_40A2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000040A2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000040A2                 cmp     r13, r15
.text:00000000000040A5                 jbe     loc_3B49
.text:00000000000040AB                 mov     byte ptr [r14+r15], 0
.text:00000000000040B0                 jmp     loc_3B49
.text:00000000000040B5 ; ---------------------------------------------------------------------------
.text:00000000000040B5
.text:00000000000040B5 loc_40B5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000040B5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040BA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000040BF                 mov     rbp, r11
.text:00000000000040C2                 setz    al
.text:00000000000040C5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000040C9                 jmp     loc_3AF9
.text:00000000000040CE ; ---------------------------------------------------------------------------
.text:00000000000040CE
.text:00000000000040CE loc_40CE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000040CE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000040D2                 mov     rdi, rcx
.text:00000000000040D5                 call    gettext_quote
.text:00000000000040DA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000040DF                 jmp     loc_3D36
.text:00000000000040E4 ; ---------------------------------------------------------------------------
.text:00000000000040E4
.text:00000000000040E4 loc_40E4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000040E4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000040E8                 mov     rdi, rcx
.text:00000000000040EB                 call    gettext_quote
.text:00000000000040F0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000040F5                 jmp     loc_3D61
.text:00000000000040FA ; ---------------------------------------------------------------------------
.text:00000000000040FA
.text:00000000000040FA loc_40FA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000040FA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000040FF                 mov     rbp, r11
.text:0000000000004102                 mov     eax, edx
.text:0000000000004104                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004108                 jmp     loc_3AF9
.text:000000000000410D ; ---------------------------------------------------------------------------
.text:000000000000410D
.text:000000000000410D loc_410D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000410D                 sub     rsp, 8
.text:0000000000004111                 mov     r8d, 5
.text:0000000000004117                 mov     rcx, r11
.text:000000000000411A                 push    [rsp+0F0h+var_88]
.text:000000000000411E                 push    [rsp+0F8h+var_80]
.text:0000000000004122                 mov     rdi, r14
.text:0000000000004125                 push    [rsp+100h+var_C8]
.text:0000000000004129                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004131                 mov     rdx, [rsp+108h+s]
.text:0000000000004136                 mov     rsi, [rsp+108h+var_98]
.text:000000000000413B                 call    quotearg_buffer_restyled
.text:0000000000004140                 add     rsp, 20h
.text:0000000000004144                 mov     r15, rax
.text:0000000000004147                 jmp     loc_3B49
.text:000000000000414C ; ---------------------------------------------------------------------------
.text:000000000000414C
.text:000000000000414C loc_414C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000414C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004151                 jmp     loc_406C
.text:0000000000004156 ; ---------------------------------------------------------------------------
.text:0000000000004156
.text:0000000000004156 loc_4156:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004156                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000415E                 jmp     loc_3AF9
.text:0000000000004163 ; ---------------------------------------------------------------------------
.text:0000000000004163
.text:0000000000004163 loc_4163:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004163                 call    ___stack_chk_fail
.text:0000000000004168 ; ---------------------------------------------------------------------------
.text:0000000000004168
.text:0000000000004168 loc_4168:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004168                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000416D                 jmp     loc_3BE1
.text:0000000000004172 ; ---------------------------------------------------------------------------
.text:0000000000004172
.text:0000000000004172 loc_4172:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004172                 mov     rbp, r11
.text:0000000000004175                 jmp     loc_3B10
.text:000000000000417A ; ---------------------------------------------------------------------------
.text:000000000000417A
.text:000000000000417A loc_417A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000417A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000417F                 xor     eax, eax
.text:0000000000004181                 xor     r12d, r12d
.text:0000000000004184                 mov     [rsp+0E8h+var_98], 0
.text:000000000000418D                 jmp     loc_3734
.text:0000000000004192 ; ---------------------------------------------------------------------------
.text:0000000000004192
.text:0000000000004192 loc_4192:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004192                 mov     rdx, r13
.text:0000000000004195                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000419A                 jmp     loc_3792
.text:000000000000419F ; ---------------------------------------------------------------------------
.text:000000000000419F
.text:000000000000419F def_3001:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000419F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000419F ; } // starts at 2F70
.text:000000000000419F quotearg_buffer_restyled endp
.text:000000000000419F
.text:000000000000419F ; ---------------------------------------------------------------------------
.text:00000000000041A4                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0
.text:00000000000041B0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000041B0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000041B0
.text:00000000000041B0 var_50          = qword ptr -50h
.text:00000000000041B0 var_48          = qword ptr -48h
.text:00000000000041B0 var_40          = dword ptr -40h
.text:00000000000041B0 var_3C          = dword ptr -3Ch
.text:00000000000041B0
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 push    r15
.text:00000000000041B2                 push    r14
.text:00000000000041B4                 movsxd  r15, edi
.text:00000000000041B7                 push    r13
.text:00000000000041B9                 push    r12
.text:00000000000041BB                 mov     r14, rdx
.text:00000000000041BE                 push    rbp
.text:00000000000041BF                 push    rbx
.text:00000000000041C0                 mov     rbp, rcx
.text:00000000000041C3                 sub     rsp, 28h
.text:00000000000041C7                 mov     [rsp+58h+var_50], rsi
.text:00000000000041CC                 call    ___errno_location
.text:00000000000041D1                 mov     r13, rax
.text:00000000000041D4                 mov     eax, [rax]
.text:00000000000041D6                 test    r15d, r15d
.text:00000000000041D9                 mov     rbx, cs:slotvec
.text:00000000000041E0                 mov     [rsp+58h+var_40], eax
.text:00000000000041E4                 js      loc_4351
.text:00000000000041EA                 cmp     cs:nslots, r15d
.text:00000000000041F1                 jg      short loc_4255
.text:00000000000041F3                 cmp     r15d, 7FFFFFFFh
.text:00000000000041FA                 jz      loc_4356
.text:0000000000004200                 lea     r12d, [r15+1]
.text:0000000000004204                 lea     rax, slotvec0
.text:000000000000420B                 movsxd  rsi, r12d
.text:000000000000420E                 shl     rsi, 4
.text:0000000000004212                 cmp     rbx, rax
.text:0000000000004215                 jz      loc_4330
.text:000000000000421B                 mov     rdi, rbx
.text:000000000000421E                 call    xrealloc
.text:0000000000004223                 mov     rbx, rax
.text:0000000000004226                 mov     cs:slotvec, rax
.text:000000000000422D
.text:000000000000422D loc_422D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000422D                 movsxd  rdi, cs:nslots
.text:0000000000004234                 mov     edx, r12d
.text:0000000000004237                 xor     esi, esi        ; c
.text:0000000000004239                 sub     edx, edi
.text:000000000000423B                 shl     rdi, 4
.text:000000000000423F                 movsxd  rdx, edx
.text:0000000000004242                 add     rdi, rbx        ; s
.text:0000000000004245                 shl     rdx, 4          ; n
.text:0000000000004249                 call    _memset
.text:000000000000424E                 mov     cs:nslots, r12d
.text:0000000000004255
.text:0000000000004255 loc_4255:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004255                 mov     eax, [rbp+4]
.text:0000000000004258                 shl     r15, 4
.text:000000000000425C                 sub     rsp, 8
.text:0000000000004260                 add     rbx, r15
.text:0000000000004263                 lea     r15, [rbp+8]
.text:0000000000004267                 mov     r8d, [rbp+0]
.text:000000000000426B                 mov     r11, [rbx]
.text:000000000000426E                 mov     r12, [rbx+8]
.text:0000000000004272                 mov     rcx, r14
.text:0000000000004275                 or      eax, 1
.text:0000000000004278                 mov     [rsp+60h+var_3C], eax
.text:000000000000427C                 push    qword ptr [rbp+30h]
.text:000000000000427F                 mov     r9d, eax
.text:0000000000004282                 push    qword ptr [rbp+28h]
.text:0000000000004285                 push    r15
.text:0000000000004287                 mov     rsi, r11
.text:000000000000428A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000428F                 mov     rdi, r12
.text:0000000000004292                 mov     [rsp+78h+var_48], r11
.text:0000000000004297                 call    quotearg_buffer_restyled
.text:000000000000429C                 add     rsp, 20h
.text:00000000000042A0                 mov     r11, [rsp+58h+var_48]
.text:00000000000042A5                 cmp     r11, rax
.text:00000000000042A8                 ja      short loc_4311
.text:00000000000042AA                 lea     rsi, [rax+1]
.text:00000000000042AE                 lea     rax, slot0
.text:00000000000042B5                 cmp     r12, rax
.text:00000000000042B8                 mov     [rbx], rsi
.text:00000000000042BB                 jz      short loc_42CF
.text:00000000000042BD                 mov     rdi, r12        ; ptr
.text:00000000000042C0                 mov     [rsp+58h+var_48], rsi
.text:00000000000042C5                 call    _free
.text:00000000000042CA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000042CF
.text:00000000000042CF loc_42CF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000042CF                 mov     rdi, rsi
.text:00000000000042D2                 mov     [rsp+58h+var_48], rsi
.text:00000000000042D7                 call    xmalloc
.text:00000000000042DC                 sub     rsp, 8
.text:00000000000042E0                 mov     [rbx+8], rax
.text:00000000000042E4                 mov     r8d, [rbp+0]
.text:00000000000042E8                 push    qword ptr [rbp+30h]
.text:00000000000042EB                 push    qword ptr [rbp+28h]
.text:00000000000042EE                 mov     rcx, r14
.text:00000000000042F1                 push    r15
.text:00000000000042F3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000042F8                 mov     rdi, rax
.text:00000000000042FB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004300                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004305                 mov     r12, rax
.text:0000000000004308                 call    quotearg_buffer_restyled
.text:000000000000430D                 add     rsp, 20h
.text:0000000000004311
.text:0000000000004311 loc_4311:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004311                 mov     eax, [rsp+58h+var_40]
.text:0000000000004315                 mov     [r13+0], eax
.text:0000000000004319                 add     rsp, 28h
.text:000000000000431D                 mov     rax, r12
.text:0000000000004320                 pop     rbx
.text:0000000000004321                 pop     rbp
.text:0000000000004322                 pop     r12
.text:0000000000004324                 pop     r13
.text:0000000000004326                 pop     r14
.text:0000000000004328                 pop     r15
.text:000000000000432A                 retn
.text:000000000000432A ; ---------------------------------------------------------------------------
.text:000000000000432B                 align 10h
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004330                 xor     edi, edi
.text:0000000000004332                 call    xrealloc
.text:0000000000004337                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000433F                 mov     rbx, rax
.text:0000000000004342                 mov     cs:slotvec, rax
.text:0000000000004349                 movups  xmmword ptr [rax], xmm0
.text:000000000000434C                 jmp     loc_422D
.text:0000000000004351 ; ---------------------------------------------------------------------------
.text:0000000000004351
.text:0000000000004351 loc_4351:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004351                 call    _abort
.text:0000000000004356 ; ---------------------------------------------------------------------------
.text:0000000000004356
.text:0000000000004356 loc_4356:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004356                 call    xalloc_die
.text:0000000000004356 ; } // starts at 41B0
.text:0000000000004356 quotearg_n_options endp
.text:0000000000004356
.text:0000000000004356 ; ---------------------------------------------------------------------------
.text:000000000000435B                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360 ; Attributes: info_from_lumina
.text:0000000000004360
.text:0000000000004360 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004360                 public clone_quoting_options
.text:0000000000004360 clone_quoting_options proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 push    r12
.text:0000000000004362                 push    rbp
.text:0000000000004363                 push    rbx
.text:0000000000004364                 mov     rbx, rdi
.text:0000000000004367                 call    ___errno_location
.text:000000000000436C                 mov     r12d, [rax]
.text:000000000000436F                 mov     rbp, rax
.text:0000000000004372                 lea     rax, default_quoting_options
.text:0000000000004379                 test    rbx, rbx
.text:000000000000437C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004381                 cmovz   rbx, rax
.text:0000000000004385                 mov     rdi, rbx        ; src
.text:0000000000004388                 call    xmemdup
.text:000000000000438D                 mov     [rbp+0], r12d
.text:0000000000004391                 pop     rbx
.text:0000000000004392                 pop     rbp
.text:0000000000004393                 pop     r12
.text:0000000000004395                 retn
.text:0000000000004395 ; } // starts at 4360
.text:0000000000004395 clone_quoting_options endp
.text:0000000000004395
.text:0000000000004395 ; ---------------------------------------------------------------------------
.text:0000000000004396                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0
.text:00000000000043A0                 public get_quoting_style
.text:00000000000043A0 get_quoting_style proc near
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 lea     rax, default_quoting_options
.text:00000000000043A7                 test    rdi, rdi
.text:00000000000043AA                 cmovz   rdi, rax
.text:00000000000043AE                 mov     eax, [rdi]
.text:00000000000043B0                 retn
.text:00000000000043B0 ; } // starts at 43A0
.text:00000000000043B0 get_quoting_style endp
.text:00000000000043B0
.text:00000000000043B0 ; ---------------------------------------------------------------------------
.text:00000000000043B1                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0
.text:00000000000043C0                 public set_quoting_style
.text:00000000000043C0 set_quoting_style proc near
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 lea     rax, default_quoting_options
.text:00000000000043C7                 test    rdi, rdi
.text:00000000000043CA                 cmovz   rdi, rax
.text:00000000000043CE                 mov     [rdi], esi
.text:00000000000043D0                 retn
.text:00000000000043D0 ; } // starts at 43C0
.text:00000000000043D0 set_quoting_style endp
.text:00000000000043D0
.text:00000000000043D0 ; ---------------------------------------------------------------------------
.text:00000000000043D1                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0 ; Attributes: info_from_lumina
.text:00000000000043E0
.text:00000000000043E0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000043E0                 public set_char_quoting
.text:00000000000043E0 set_char_quoting proc near
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 lea     rax, default_quoting_options
.text:00000000000043E7                 test    rdi, rdi
.text:00000000000043EA                 mov     ecx, esi
.text:00000000000043EC                 cmovz   rdi, rax
.text:00000000000043F0                 mov     eax, esi
.text:00000000000043F2                 and     ecx, 1Fh
.text:00000000000043F5                 shr     al, 5
.text:00000000000043F8                 movzx   eax, al
.text:00000000000043FB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004400                 mov     esi, [rdi]
.text:0000000000004402                 mov     eax, esi
.text:0000000000004404                 shr     eax, cl
.text:0000000000004406                 xor     edx, eax
.text:0000000000004408                 and     eax, 1
.text:000000000000440B                 and     edx, 1
.text:000000000000440E                 shl     edx, cl
.text:0000000000004410                 xor     edx, esi
.text:0000000000004412                 mov     [rdi], edx
.text:0000000000004414                 retn
.text:0000000000004414 ; } // starts at 43E0
.text:0000000000004414 set_char_quoting endp
.text:0000000000004414
.text:0000000000004414 ; ---------------------------------------------------------------------------
.text:0000000000004415                 align 20h
.text:0000000000004420
.text:0000000000004420 ; =============== S U B R O U T I N E =======================================
.text:0000000000004420
.text:0000000000004420
.text:0000000000004420                 public set_quoting_flags
.text:0000000000004420 set_quoting_flags proc near
.text:0000000000004420 ; __unwind {
.text:0000000000004420                 lea     rax, default_quoting_options
.text:0000000000004427                 test    rdi, rdi
.text:000000000000442A                 cmovz   rdi, rax
.text:000000000000442E                 mov     eax, [rdi+4]
.text:0000000000004431                 mov     [rdi+4], esi
.text:0000000000004434                 retn
.text:0000000000004434 ; } // starts at 4420
.text:0000000000004434 set_quoting_flags endp
.text:0000000000004434
.text:0000000000004434 ; ---------------------------------------------------------------------------
.text:0000000000004435                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440 ; Attributes: info_from_lumina
.text:0000000000004440
.text:0000000000004440 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004440                 public set_custom_quoting
.text:0000000000004440 set_custom_quoting proc near
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 lea     rax, default_quoting_options
.text:0000000000004447                 test    rdi, rdi
.text:000000000000444A                 cmovz   rdi, rax
.text:000000000000444E                 test    rsi, rsi
.text:0000000000004451                 mov     dword ptr [rdi], 0Ah
.text:0000000000004457                 jz      short loc_4467
.text:0000000000004459                 test    rdx, rdx
.text:000000000000445C                 jz      short loc_4467
.text:000000000000445E                 mov     [rdi+28h], rsi
.text:0000000000004462                 mov     [rdi+30h], rdx
.text:0000000000004466                 retn
.text:0000000000004467 ; ---------------------------------------------------------------------------
.text:0000000000004467
.text:0000000000004467 loc_4467:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004467                                         ; set_custom_quoting+1C↑j
.text:0000000000004467                 sub     rsp, 8
.text:000000000000446B                 call    _abort
.text:000000000000446B ; } // starts at 4440
.text:000000000000446B set_custom_quoting endp
.text:000000000000446B
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470 ; Attributes: info_from_lumina
.text:0000000000004470
.text:0000000000004470 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004470                 public quotearg_buffer
.text:0000000000004470 quotearg_buffer proc near
.text:0000000000004470
.text:0000000000004470 var_40          = qword ptr -40h
.text:0000000000004470
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 push    r15
.text:0000000000004472                 push    r14
.text:0000000000004474                 lea     rax, default_quoting_options
.text:000000000000447B                 push    r13
.text:000000000000447D                 push    r12
.text:000000000000447F                 mov     r13, rdi
.text:0000000000004482                 push    rbp
.text:0000000000004483                 push    rbx
.text:0000000000004484                 mov     rbx, r8
.text:0000000000004487                 mov     r14, rsi
.text:000000000000448A                 mov     r15, rdx
.text:000000000000448D                 sub     rsp, 18h
.text:0000000000004491                 test    r8, r8
.text:0000000000004494                 cmovz   rbx, rax
.text:0000000000004498                 mov     [rsp+48h+var_40], rcx
.text:000000000000449D                 call    ___errno_location
.text:00000000000044A2                 mov     r12d, [rax]
.text:00000000000044A5                 mov     rbp, rax
.text:00000000000044A8                 lea     rax, [rbx+8]
.text:00000000000044AC                 sub     rsp, 8
.text:00000000000044B0                 mov     r9d, [rbx+4]
.text:00000000000044B4                 push    qword ptr [rbx+30h]
.text:00000000000044B7                 mov     r8d, [rbx]
.text:00000000000044BA                 push    qword ptr [rbx+28h]
.text:00000000000044BD                 mov     rdx, r15
.text:00000000000044C0                 push    rax
.text:00000000000044C1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000044C6                 mov     rsi, r14
.text:00000000000044C9                 mov     rdi, r13
.text:00000000000044CC                 call    quotearg_buffer_restyled
.text:00000000000044D1                 mov     [rbp+0], r12d
.text:00000000000044D5                 add     rsp, 38h
.text:00000000000044D9                 pop     rbx
.text:00000000000044DA                 pop     rbp
.text:00000000000044DB                 pop     r12
.text:00000000000044DD                 pop     r13
.text:00000000000044DF                 pop     r14
.text:00000000000044E1                 pop     r15
.text:00000000000044E3                 retn
.text:00000000000044E3 ; } // starts at 4470
.text:00000000000044E3 quotearg_buffer endp
.text:00000000000044E3
.text:00000000000044E3 ; ---------------------------------------------------------------------------
.text:00000000000044E4                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0 ; Attributes: info_from_lumina
.text:00000000000044F0
.text:00000000000044F0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000044F0                 public quotearg_alloc_mem
.text:00000000000044F0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000044F0
.text:00000000000044F0 var_5C          = dword ptr -5Ch
.text:00000000000044F0 var_58          = qword ptr -58h
.text:00000000000044F0 var_50          = qword ptr -50h
.text:00000000000044F0 var_48          = qword ptr -48h
.text:00000000000044F0 var_40          = qword ptr -40h
.text:00000000000044F0
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 push    r15
.text:00000000000044F2                 push    r14
.text:00000000000044F4                 lea     rax, default_quoting_options
.text:00000000000044FB                 push    r13
.text:00000000000044FD                 push    r12
.text:00000000000044FF                 mov     r12, rdx
.text:0000000000004502                 push    rbp
.text:0000000000004503                 push    rbx
.text:0000000000004504                 mov     rbx, rcx
.text:0000000000004507                 mov     r14, rdi
.text:000000000000450A                 mov     r15, rsi
.text:000000000000450D                 sub     rsp, 38h
.text:0000000000004511                 test    rcx, rcx
.text:0000000000004514                 cmovz   rbx, rax
.text:0000000000004518                 xor     ebp, ebp
.text:000000000000451A                 call    ___errno_location
.text:000000000000451F                 test    r12, r12
.text:0000000000004522                 mov     r13, rax
.text:0000000000004525                 mov     eax, [rax]
.text:0000000000004527                 setz    bpl
.text:000000000000452B                 or      ebp, [rbx+4]
.text:000000000000452E                 lea     r10, [rbx+8]
.text:0000000000004532                 sub     rsp, 8
.text:0000000000004536                 mov     r8d, [rbx]
.text:0000000000004539                 mov     rcx, r15
.text:000000000000453C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004540                 push    qword ptr [rbx+30h]
.text:0000000000004543                 mov     rdx, r14
.text:0000000000004546                 push    qword ptr [rbx+28h]
.text:0000000000004549                 push    r10
.text:000000000000454B                 xor     esi, esi
.text:000000000000454D                 mov     r9d, ebp
.text:0000000000004550                 xor     edi, edi
.text:0000000000004552                 mov     [rsp+88h+var_48], r10
.text:0000000000004557                 call    quotearg_buffer_restyled
.text:000000000000455C                 lea     rsi, [rax+1]
.text:0000000000004560                 mov     [rsp+88h+var_40], rax
.text:0000000000004565                 add     rsp, 20h
.text:0000000000004569                 mov     rdi, rsi
.text:000000000000456C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004571                 call    xmalloc
.text:0000000000004576                 mov     [rsp+68h+var_58], rax
.text:000000000000457B                 sub     rsp, 8
.text:000000000000457F                 push    qword ptr [rbx+30h]
.text:0000000000004582                 push    qword ptr [rbx+28h]
.text:0000000000004585                 mov     r10, [rsp+80h+var_48]
.text:000000000000458A                 mov     r9d, ebp
.text:000000000000458D                 mov     r8d, [rbx]
.text:0000000000004590                 mov     rcx, r15
.text:0000000000004593                 mov     rdx, r14
.text:0000000000004596                 mov     rdi, rax
.text:0000000000004599                 push    r10
.text:000000000000459B                 mov     rsi, [rsp+88h+var_50]
.text:00000000000045A0                 call    quotearg_buffer_restyled
.text:00000000000045A5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000045A9                 add     rsp, 20h
.text:00000000000045AD                 test    r12, r12
.text:00000000000045B0                 mov     [r13+0], eax
.text:00000000000045B4                 jz      short loc_45BF
.text:00000000000045B6                 mov     r11, [rsp+68h+var_40]
.text:00000000000045BB                 mov     [r12], r11
.text:00000000000045BF
.text:00000000000045BF loc_45BF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000045BF                 mov     rax, [rsp+68h+var_58]
.text:00000000000045C4                 add     rsp, 38h
.text:00000000000045C8                 pop     rbx
.text:00000000000045C9                 pop     rbp
.text:00000000000045CA                 pop     r12
.text:00000000000045CC                 pop     r13
.text:00000000000045CE                 pop     r14
.text:00000000000045D0                 pop     r15
.text:00000000000045D2                 retn
.text:00000000000045D2 ; } // starts at 44F0
.text:00000000000045D2 quotearg_alloc_mem endp
.text:00000000000045D2
.text:00000000000045D2 ; ---------------------------------------------------------------------------
.text:00000000000045D3                 align 20h
.text:00000000000045E0
.text:00000000000045E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045E0
.text:00000000000045E0
.text:00000000000045E0                 public quotearg_alloc
.text:00000000000045E0 quotearg_alloc  proc near
.text:00000000000045E0 ; __unwind {
.text:00000000000045E0                 mov     rcx, rdx
.text:00000000000045E3                 xor     edx, edx
.text:00000000000045E5                 jmp     quotearg_alloc_mem
.text:00000000000045E5 ; } // starts at 45E0
.text:00000000000045E5 quotearg_alloc  endp
.text:00000000000045E5
.text:00000000000045E5 ; ---------------------------------------------------------------------------
.text:00000000000045EA                 align 10h
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0 ; Attributes: info_from_lumina
.text:00000000000045F0
.text:00000000000045F0 ; void __cdecl quotearg_free()
.text:00000000000045F0                 public quotearg_free
.text:00000000000045F0 quotearg_free   proc near
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 mov     eax, cs:nslots
.text:00000000000045F6                 push    r12
.text:00000000000045F8                 mov     r12, cs:slotvec
.text:00000000000045FF                 push    rbp
.text:0000000000004600                 push    rbx
.text:0000000000004601                 cmp     eax, 1
.text:0000000000004604                 jle     short loc_4631
.text:0000000000004606                 sub     eax, 2
.text:0000000000004609                 lea     rbx, [r12+18h]
.text:000000000000460E                 shl     rax, 4
.text:0000000000004612                 lea     rbp, [r12+rax+28h]
.text:0000000000004617                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004620                 mov     rdi, [rbx]      ; ptr
.text:0000000000004623                 add     rbx, 10h
.text:0000000000004627                 call    _free
.text:000000000000462C                 cmp     rbx, rbp
.text:000000000000462F                 jnz     short loc_4620
.text:0000000000004631
.text:0000000000004631 loc_4631:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004631                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004636                 lea     rbx, slot0
.text:000000000000463D                 cmp     rdi, rbx
.text:0000000000004640                 jz      short loc_4659
.text:0000000000004642                 call    _free
.text:0000000000004647                 mov     cs:slotvec0, 100h
.text:0000000000004652                 mov     cs:off_208078, rbx
.text:0000000000004659
.text:0000000000004659 loc_4659:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004659                 lea     rbx, slotvec0
.text:0000000000004660                 cmp     r12, rbx
.text:0000000000004663                 jz      short loc_4674
.text:0000000000004665                 mov     rdi, r12        ; ptr
.text:0000000000004668                 call    _free
.text:000000000000466D                 mov     cs:slotvec, rbx
.text:0000000000004674
.text:0000000000004674 loc_4674:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004674                 pop     rbx
.text:0000000000004675                 mov     cs:nslots, 1
.text:000000000000467F                 pop     rbp
.text:0000000000004680                 pop     r12
.text:0000000000004682                 retn
.text:0000000000004682 ; } // starts at 45F0
.text:0000000000004682 quotearg_free   endp
.text:0000000000004682
.text:0000000000004682 ; ---------------------------------------------------------------------------
.text:0000000000004683                 align 10h
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690
.text:0000000000004690                 public quotearg_n
.text:0000000000004690 quotearg_n      proc near
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 lea     rcx, default_quoting_options
.text:0000000000004697                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000469E                 jmp     quotearg_n_options
.text:000000000000469E ; } // starts at 4690
.text:000000000000469E quotearg_n      endp
.text:000000000000469E
.text:000000000000469E ; ---------------------------------------------------------------------------
.text:00000000000046A3                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0
.text:00000000000046B0                 public quotearg_n_mem
.text:00000000000046B0 quotearg_n_mem  proc near
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 lea     rcx, default_quoting_options
.text:00000000000046B7                 jmp     quotearg_n_options
.text:00000000000046B7 ; } // starts at 46B0
.text:00000000000046B7 quotearg_n_mem  endp
.text:00000000000046B7
.text:00000000000046B7 ; ---------------------------------------------------------------------------
.text:00000000000046BC                 align 20h
.text:00000000000046C0
.text:00000000000046C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046C0
.text:00000000000046C0
.text:00000000000046C0                 public quotearg
.text:00000000000046C0 quotearg        proc near
.text:00000000000046C0 ; __unwind {
.text:00000000000046C0                 lea     rcx, default_quoting_options
.text:00000000000046C7                 mov     rsi, rdi
.text:00000000000046CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000046D1                 xor     edi, edi
.text:00000000000046D3                 jmp     quotearg_n_options
.text:00000000000046D3 ; } // starts at 46C0
.text:00000000000046D3 quotearg        endp
.text:00000000000046D3
.text:00000000000046D3 ; ---------------------------------------------------------------------------
.text:00000000000046D8                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0
.text:00000000000046E0                 public quotearg_mem
.text:00000000000046E0 quotearg_mem    proc near
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 lea     rcx, default_quoting_options
.text:00000000000046E7                 mov     rdx, rsi
.text:00000000000046EA                 mov     rsi, rdi
.text:00000000000046ED                 xor     edi, edi
.text:00000000000046EF                 jmp     quotearg_n_options
.text:00000000000046EF ; } // starts at 46E0
.text:00000000000046EF quotearg_mem    endp
.text:00000000000046EF
.text:00000000000046EF ; ---------------------------------------------------------------------------
.text:00000000000046F4                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700 ; Attributes: info_from_lumina
.text:0000000000004700
.text:0000000000004700 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004700                 public quotearg_n_style
.text:0000000000004700 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004700
.text:0000000000004700 var_48          = dword ptr -48h
.text:0000000000004700 var_44          = qword ptr -44h
.text:0000000000004700 var_3C          = qword ptr -3Ch
.text:0000000000004700 var_34          = qword ptr -34h
.text:0000000000004700 var_2C          = qword ptr -2Ch
.text:0000000000004700 var_24          = qword ptr -24h
.text:0000000000004700 var_1C          = qword ptr -1Ch
.text:0000000000004700 var_14          = dword ptr -14h
.text:0000000000004700 var_10          = qword ptr -10h
.text:0000000000004700
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 sub     rsp, 48h
.text:0000000000004704                 mov     rax, rdx
.text:0000000000004707                 mov     rdx, fs:28h
.text:0000000000004710                 mov     [rsp+48h+var_10], rdx
.text:0000000000004715                 xor     edx, edx
.text:0000000000004717                 cmp     esi, 0Ah
.text:000000000000471A                 jz      short loc_4784
.text:000000000000471C                 mov     [rsp+48h+var_48], esi
.text:000000000000471F                 mov     rcx, rsp
.text:0000000000004722                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004729                 mov     rsi, rax
.text:000000000000472C                 mov     [rsp+48h+var_44], 0
.text:0000000000004735                 mov     [rsp+48h+var_3C], 0
.text:000000000000473E                 mov     [rsp+48h+var_34], 0
.text:0000000000004747                 mov     [rsp+48h+var_2C], 0
.text:0000000000004750                 mov     [rsp+48h+var_24], 0
.text:0000000000004759                 mov     [rsp+48h+var_1C], 0
.text:0000000000004762                 mov     [rsp+48h+var_14], 0
.text:000000000000476A                 call    quotearg_n_options
.text:000000000000476F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004774                 xor     rcx, fs:28h
.text:000000000000477D                 jnz     short loc_4789
.text:000000000000477F                 add     rsp, 48h
.text:0000000000004783                 retn
.text:0000000000004784 ; ---------------------------------------------------------------------------
.text:0000000000004784
.text:0000000000004784 loc_4784:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004784                 call    _abort
.text:0000000000004789 ; ---------------------------------------------------------------------------
.text:0000000000004789
.text:0000000000004789 loc_4789:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004789                 call    ___stack_chk_fail
.text:0000000000004789 ; } // starts at 4700
.text:0000000000004789 quotearg_n_style endp
.text:0000000000004789
.text:0000000000004789 ; ---------------------------------------------------------------------------
.text:000000000000478E                 align 10h
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790 ; Attributes: info_from_lumina
.text:0000000000004790
.text:0000000000004790 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004790                 public quotearg_n_style_mem
.text:0000000000004790 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004790
.text:0000000000004790 var_48          = dword ptr -48h
.text:0000000000004790 var_44          = qword ptr -44h
.text:0000000000004790 var_3C          = qword ptr -3Ch
.text:0000000000004790 var_34          = qword ptr -34h
.text:0000000000004790 var_2C          = qword ptr -2Ch
.text:0000000000004790 var_24          = qword ptr -24h
.text:0000000000004790 var_1C          = qword ptr -1Ch
.text:0000000000004790 var_14          = dword ptr -14h
.text:0000000000004790 var_10          = qword ptr -10h
.text:0000000000004790
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 sub     rsp, 48h
.text:0000000000004794                 mov     rax, rdx
.text:0000000000004797                 mov     rdx, rcx
.text:000000000000479A                 mov     rcx, fs:28h
.text:00000000000047A3                 mov     [rsp+48h+var_10], rcx
.text:00000000000047A8                 xor     ecx, ecx
.text:00000000000047AA                 cmp     esi, 0Ah
.text:00000000000047AD                 jz      short loc_4810
.text:00000000000047AF                 mov     [rsp+48h+var_48], esi
.text:00000000000047B2                 mov     rcx, rsp
.text:00000000000047B5                 mov     rsi, rax
.text:00000000000047B8                 mov     [rsp+48h+var_44], 0
.text:00000000000047C1                 mov     [rsp+48h+var_3C], 0
.text:00000000000047CA                 mov     [rsp+48h+var_34], 0
.text:00000000000047D3                 mov     [rsp+48h+var_2C], 0
.text:00000000000047DC                 mov     [rsp+48h+var_24], 0
.text:00000000000047E5                 mov     [rsp+48h+var_1C], 0
.text:00000000000047EE                 mov     [rsp+48h+var_14], 0
.text:00000000000047F6                 call    quotearg_n_options
.text:00000000000047FB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004800                 xor     rdx, fs:28h
.text:0000000000004809                 jnz     short loc_4815
.text:000000000000480B                 add     rsp, 48h
.text:000000000000480F                 retn
.text:0000000000004810 ; ---------------------------------------------------------------------------
.text:0000000000004810
.text:0000000000004810 loc_4810:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004810                 call    _abort
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:0000000000004815
.text:0000000000004815 loc_4815:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004815                 call    ___stack_chk_fail
.text:0000000000004815 ; } // starts at 4790
.text:0000000000004815 quotearg_n_style_mem endp
.text:0000000000004815
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:000000000000481A                 align 20h
.text:0000000000004820
.text:0000000000004820 ; =============== S U B R O U T I N E =======================================
.text:0000000000004820
.text:0000000000004820
.text:0000000000004820                 public quotearg_style
.text:0000000000004820 quotearg_style  proc near
.text:0000000000004820 ; __unwind {
.text:0000000000004820                 mov     rdx, rsi
.text:0000000000004823                 mov     esi, edi
.text:0000000000004825                 xor     edi, edi
.text:0000000000004827                 jmp     quotearg_n_style
.text:0000000000004827 ; } // starts at 4820
.text:0000000000004827 quotearg_style  endp
.text:0000000000004827
.text:0000000000004827 ; ---------------------------------------------------------------------------
.text:000000000000482C                 align 10h
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830
.text:0000000000004830                 public quotearg_style_mem
.text:0000000000004830 quotearg_style_mem proc near
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 mov     rcx, rdx
.text:0000000000004833                 mov     rdx, rsi
.text:0000000000004836                 mov     esi, edi
.text:0000000000004838                 xor     edi, edi
.text:000000000000483A                 jmp     quotearg_n_style_mem
.text:000000000000483A ; } // starts at 4830
.text:000000000000483A quotearg_style_mem endp
.text:000000000000483A
.text:000000000000483A ; ---------------------------------------------------------------------------
.text:000000000000483F                 align 20h
.text:0000000000004840
.text:0000000000004840 ; =============== S U B R O U T I N E =======================================
.text:0000000000004840
.text:0000000000004840 ; Attributes: info_from_lumina
.text:0000000000004840
.text:0000000000004840 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004840                 public quotearg_char_mem
.text:0000000000004840 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004840                                         ; quotearg_colon+C↓j ...
.text:0000000000004840
.text:0000000000004840 var_48          = xmmword ptr -48h
.text:0000000000004840 var_38          = xmmword ptr -38h
.text:0000000000004840 var_28          = xmmword ptr -28h
.text:0000000000004840 var_18          = qword ptr -18h
.text:0000000000004840 var_10          = qword ptr -10h
.text:0000000000004840
.text:0000000000004840 ; __unwind {
.text:0000000000004840                 sub     rsp, 48h
.text:0000000000004844                 mov     ecx, edx
.text:0000000000004846                 mov     rax, fs:28h
.text:000000000000484F                 mov     [rsp+48h+var_10], rax
.text:0000000000004854                 xor     eax, eax
.text:0000000000004856                 mov     rax, cs:qword_208230
.text:000000000000485D                 mov     r8, rsp
.text:0000000000004860                 and     ecx, 1Fh
.text:0000000000004863                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000486B                 mov     [rsp+48h+var_18], rax
.text:0000000000004870                 mov     eax, edx
.text:0000000000004872                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004876                 shr     al, 5
.text:0000000000004879                 movzx   eax, al
.text:000000000000487C                 lea     r9, [r8+rax*4+8]
.text:0000000000004881                 movdqa  xmm0, cs:xmmword_208210
.text:0000000000004889                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000488E                 movdqa  xmm0, cs:xmmword_208220
.text:0000000000004896                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000489B                 mov     edx, [r9]
.text:000000000000489E                 mov     eax, edx
.text:00000000000048A0                 shr     eax, cl
.text:00000000000048A2                 not     eax
.text:00000000000048A4                 and     eax, 1
.text:00000000000048A7                 shl     eax, cl
.text:00000000000048A9                 mov     rcx, r8
.text:00000000000048AC                 xor     eax, edx
.text:00000000000048AE                 mov     rdx, rsi
.text:00000000000048B1                 mov     rsi, rdi
.text:00000000000048B4                 mov     [r9], eax
.text:00000000000048B7                 xor     edi, edi
.text:00000000000048B9                 call    quotearg_n_options
.text:00000000000048BE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000048C3                 xor     rsi, fs:28h
.text:00000000000048CC                 jnz     short loc_48D3
.text:00000000000048CE                 add     rsp, 48h
.text:00000000000048D2                 retn
.text:00000000000048D3 ; ---------------------------------------------------------------------------
.text:00000000000048D3
.text:00000000000048D3 loc_48D3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000048D3                 call    ___stack_chk_fail
.text:00000000000048D3 ; } // starts at 4840
.text:00000000000048D3 quotearg_char_mem endp
.text:00000000000048D3
.text:00000000000048D3 ; ---------------------------------------------------------------------------
.text:00000000000048D8                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0
.text:00000000000048E0                 public quotearg_char
.text:00000000000048E0 quotearg_char   proc near
.text:00000000000048E0 ; __unwind {
.text:00000000000048E0                 movsx   edx, sil
.text:00000000000048E4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000048EB                 jmp     quotearg_char_mem
.text:00000000000048EB ; } // starts at 48E0
.text:00000000000048EB quotearg_char   endp
.text:00000000000048EB
.text:00000000000048F0
.text:00000000000048F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048F0
.text:00000000000048F0
.text:00000000000048F0                 public quotearg_colon
.text:00000000000048F0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000048F0 ; __unwind {
.text:00000000000048F0                 mov     edx, 3Ah ; ':'
.text:00000000000048F5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000048FC                 jmp     quotearg_char_mem
.text:00000000000048FC ; } // starts at 48F0
.text:00000000000048FC quotearg_colon  endp
.text:00000000000048FC
.text:00000000000048FC ; ---------------------------------------------------------------------------
.text:0000000000004901                 align 10h
.text:0000000000004910
.text:0000000000004910 ; =============== S U B R O U T I N E =======================================
.text:0000000000004910
.text:0000000000004910
.text:0000000000004910                 public quotearg_colon_mem
.text:0000000000004910 quotearg_colon_mem proc near
.text:0000000000004910 ; __unwind {
.text:0000000000004910                 mov     edx, 3Ah ; ':'
.text:0000000000004915                 jmp     quotearg_char_mem
.text:0000000000004915 ; } // starts at 4910
.text:0000000000004915 quotearg_colon_mem endp
.text:0000000000004915
.text:0000000000004915 ; ---------------------------------------------------------------------------
.text:000000000000491A                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920 ; Attributes: info_from_lumina
.text:0000000000004920
.text:0000000000004920 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004920                 public quotearg_n_style_colon
.text:0000000000004920 quotearg_n_style_colon proc near
.text:0000000000004920
.text:0000000000004920 var_48          = dword ptr -48h
.text:0000000000004920 var_44          = qword ptr -44h
.text:0000000000004920 var_3C          = qword ptr -3Ch
.text:0000000000004920 var_34          = qword ptr -34h
.text:0000000000004920 var_2C          = qword ptr -2Ch
.text:0000000000004920 var_24          = qword ptr -24h
.text:0000000000004920 var_1C          = qword ptr -1Ch
.text:0000000000004920 var_14          = dword ptr -14h
.text:0000000000004920 var_10          = qword ptr -10h
.text:0000000000004920
.text:0000000000004920 ; __unwind {
.text:0000000000004920                 sub     rsp, 48h
.text:0000000000004924                 mov     rax, rdx
.text:0000000000004927                 mov     rdx, fs:28h
.text:0000000000004930                 mov     [rsp+48h+var_10], rdx
.text:0000000000004935                 xor     edx, edx
.text:0000000000004937                 cmp     esi, 0Ah
.text:000000000000493A                 jz      short loc_49A4
.text:000000000000493C                 mov     [rsp+48h+var_48], esi
.text:000000000000493F                 mov     rcx, rsp
.text:0000000000004942                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004949                 mov     rsi, rax
.text:000000000000494C                 mov     [rsp+48h+var_44], 0
.text:0000000000004955                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000495E                 mov     [rsp+48h+var_34], 0
.text:0000000000004967                 mov     [rsp+48h+var_2C], 0
.text:0000000000004970                 mov     [rsp+48h+var_24], 0
.text:0000000000004979                 mov     [rsp+48h+var_1C], 0
.text:0000000000004982                 mov     [rsp+48h+var_14], 0
.text:000000000000498A                 call    quotearg_n_options
.text:000000000000498F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004994                 xor     rcx, fs:28h
.text:000000000000499D                 jnz     short loc_49A9
.text:000000000000499F                 add     rsp, 48h
.text:00000000000049A3                 retn
.text:00000000000049A4 ; ---------------------------------------------------------------------------
.text:00000000000049A4
.text:00000000000049A4 loc_49A4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000049A4                 call    _abort
.text:00000000000049A9 ; ---------------------------------------------------------------------------
.text:00000000000049A9
.text:00000000000049A9 loc_49A9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000049A9                 call    ___stack_chk_fail
.text:00000000000049A9 ; } // starts at 4920
.text:00000000000049A9 quotearg_n_style_colon endp
.text:00000000000049A9
.text:00000000000049A9 ; ---------------------------------------------------------------------------
.text:00000000000049AE                 align 10h
.text:00000000000049B0
.text:00000000000049B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049B0
.text:00000000000049B0 ; Attributes: info_from_lumina
.text:00000000000049B0
.text:00000000000049B0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000049B0                 public quotearg_n_custom_mem
.text:00000000000049B0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000049B0                                         ; quotearg_custom+12↓j ...
.text:00000000000049B0
.text:00000000000049B0 var_48          = xmmword ptr -48h
.text:00000000000049B0 var_38          = xmmword ptr -38h
.text:00000000000049B0 var_28          = xmmword ptr -28h
.text:00000000000049B0 var_18          = qword ptr -18h
.text:00000000000049B0 var_10          = qword ptr -10h
.text:00000000000049B0
.text:00000000000049B0 ; __unwind {
.text:00000000000049B0                 sub     rsp, 48h
.text:00000000000049B4                 mov     r9, rcx
.text:00000000000049B7                 mov     rcx, cs:qword_208230
.text:00000000000049BE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000049C6                 mov     rax, fs:28h
.text:00000000000049CF                 mov     [rsp+48h+var_10], rax
.text:00000000000049D4                 xor     eax, eax
.text:00000000000049D6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000049DA                 test    rsi, rsi
.text:00000000000049DD                 mov     [rsp+48h+var_18], rcx
.text:00000000000049E2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000049E9                 movdqa  xmm0, cs:xmmword_208210
.text:00000000000049F1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000049F6                 movdqa  xmm0, cs:xmmword_208220
.text:00000000000049FE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004A03                 jz      short loc_4A37
.text:0000000000004A05                 test    rdx, rdx
.text:0000000000004A08                 jz      short loc_4A37
.text:0000000000004A0A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004A0F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004A14                 mov     rcx, rsp
.text:0000000000004A17                 mov     rdx, r8
.text:0000000000004A1A                 mov     rsi, r9
.text:0000000000004A1D                 call    quotearg_n_options
.text:0000000000004A22                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004A27                 xor     rdi, fs:28h
.text:0000000000004A30                 jnz     short loc_4A3C
.text:0000000000004A32                 add     rsp, 48h
.text:0000000000004A36                 retn
.text:0000000000004A37 ; ---------------------------------------------------------------------------
.text:0000000000004A37
.text:0000000000004A37 loc_4A37:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004A37                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004A37                 call    _abort
.text:0000000000004A3C ; ---------------------------------------------------------------------------
.text:0000000000004A3C
.text:0000000000004A3C loc_4A3C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004A3C                 call    ___stack_chk_fail
.text:0000000000004A3C ; } // starts at 49B0
.text:0000000000004A3C quotearg_n_custom_mem endp
.text:0000000000004A3C
.text:0000000000004A3C ; ---------------------------------------------------------------------------
.text:0000000000004A41                 align 10h
.text:0000000000004A50
.text:0000000000004A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A50
.text:0000000000004A50
.text:0000000000004A50                 public quotearg_n_custom
.text:0000000000004A50 quotearg_n_custom proc near
.text:0000000000004A50 ; __unwind {
.text:0000000000004A50                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A57                 jmp     quotearg_n_custom_mem
.text:0000000000004A57 ; } // starts at 4A50
.text:0000000000004A57 quotearg_n_custom endp
.text:0000000000004A57
.text:0000000000004A57 ; ---------------------------------------------------------------------------
.text:0000000000004A5C                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60
.text:0000000000004A60                 public quotearg_custom
.text:0000000000004A60 quotearg_custom proc near
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 mov     rcx, rdx
.text:0000000000004A63                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A6A                 mov     rdx, rsi
.text:0000000000004A6D                 mov     rsi, rdi
.text:0000000000004A70                 xor     edi, edi
.text:0000000000004A72                 jmp     quotearg_n_custom_mem
.text:0000000000004A72 ; } // starts at 4A60
.text:0000000000004A72 quotearg_custom endp
.text:0000000000004A72
.text:0000000000004A72 ; ---------------------------------------------------------------------------
.text:0000000000004A77                 align 20h
.text:0000000000004A80
.text:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A80
.text:0000000000004A80
.text:0000000000004A80                 public quotearg_custom_mem
.text:0000000000004A80 quotearg_custom_mem proc near
.text:0000000000004A80 ; __unwind {
.text:0000000000004A80                 mov     r8, rcx
.text:0000000000004A83                 mov     rcx, rdx
.text:0000000000004A86                 mov     rdx, rsi
.text:0000000000004A89                 mov     rsi, rdi
.text:0000000000004A8C                 xor     edi, edi
.text:0000000000004A8E                 jmp     quotearg_n_custom_mem
.text:0000000000004A8E ; } // starts at 4A80
.text:0000000000004A8E quotearg_custom_mem endp
.text:0000000000004A8E
.text:0000000000004A8E ; ---------------------------------------------------------------------------
.text:0000000000004A93                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AA0
.text:0000000000004AA0
.text:0000000000004AA0                 public quote_n_mem
.text:0000000000004AA0 quote_n_mem     proc near
.text:0000000000004AA0 ; __unwind {
.text:0000000000004AA0                 lea     rcx, quote_quoting_options
.text:0000000000004AA7                 jmp     quotearg_n_options
.text:0000000000004AA7 ; } // starts at 4AA0
.text:0000000000004AA7 quote_n_mem     endp
.text:0000000000004AA7
.text:0000000000004AA7 ; ---------------------------------------------------------------------------
.text:0000000000004AAC                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0
.text:0000000000004AB0                 public quote_mem
.text:0000000000004AB0 quote_mem       proc near
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 lea     rcx, quote_quoting_options
.text:0000000000004AB7                 mov     rdx, rsi
.text:0000000000004ABA                 mov     rsi, rdi
.text:0000000000004ABD                 xor     edi, edi
.text:0000000000004ABF                 jmp     quotearg_n_options
.text:0000000000004ABF ; } // starts at 4AB0
.text:0000000000004ABF quote_mem       endp
.text:0000000000004ABF
.text:0000000000004ABF ; ---------------------------------------------------------------------------
.text:0000000000004AC4                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0                 public quote_n
.text:0000000000004AD0 quote_n         proc near
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 lea     rcx, quote_quoting_options
.text:0000000000004AD7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004ADE                 jmp     quotearg_n_options
.text:0000000000004ADE ; } // starts at 4AD0
.text:0000000000004ADE quote_n         endp
.text:0000000000004ADE
.text:0000000000004ADE ; ---------------------------------------------------------------------------
.text:0000000000004AE3                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AF0
.text:0000000000004AF0
.text:0000000000004AF0                 public quote
.text:0000000000004AF0 quote           proc near
.text:0000000000004AF0 ; __unwind {
.text:0000000000004AF0                 lea     rcx, quote_quoting_options
.text:0000000000004AF7                 mov     rsi, rdi
.text:0000000000004AFA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B01                 xor     edi, edi
.text:0000000000004B03                 jmp     quotearg_n_options
.text:0000000000004B03 ; } // starts at 4AF0
.text:0000000000004B03 quote           endp
.text:0000000000004B03
.text:0000000000004B03 ; ---------------------------------------------------------------------------
.text:0000000000004B08                 align 10h
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10
.text:0000000000004B10 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004B10                 public version_etc_arn
.text:0000000000004B10 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4F4B↓j
.text:0000000000004B10                                         ; version_etc_va:loc_4F9B↓p ...
.text:0000000000004B10
.text:0000000000004B10 var_58          = qword ptr -58h
.text:0000000000004B10 var_50          = qword ptr -50h
.text:0000000000004B10 var_48          = qword ptr -48h
.text:0000000000004B10 var_40          = qword ptr -40h
.text:0000000000004B10
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 push    r15
.text:0000000000004B12                 push    r14
.text:0000000000004B14                 push    r13
.text:0000000000004B16                 push    r12
.text:0000000000004B18                 mov     r12, r9
.text:0000000000004B1B                 push    rbp
.text:0000000000004B1C                 push    rbx
.text:0000000000004B1D                 mov     rbp, rdi
.text:0000000000004B20                 mov     rbx, r8
.text:0000000000004B23                 sub     rsp, 28h
.text:0000000000004B27                 test    rsi, rsi
.text:0000000000004B2A                 jz      loc_4C48
.text:0000000000004B30                 mov     r8, rdx
.text:0000000000004B33                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004B3A                 mov     r9, rcx
.text:0000000000004B3D                 xor     eax, eax
.text:0000000000004B3F                 mov     rcx, rsi
.text:0000000000004B42                 mov     esi, 1
.text:0000000000004B47                 call    ___fprintf_chk
.text:0000000000004B4C
.text:0000000000004B4C loc_4B4C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004B4C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004B53                 xor     edi, edi        ; domainname
.text:0000000000004B55                 mov     edx, 5          ; category
.text:0000000000004B5A                 call    _dcgettext
.text:0000000000004B5F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004B66                 mov     rcx, rax
.text:0000000000004B69                 mov     r8d, 7E3h
.text:0000000000004B6F                 mov     esi, 1
.text:0000000000004B74                 mov     rdi, rbp
.text:0000000000004B77                 xor     eax, eax
.text:0000000000004B79                 call    ___fprintf_chk
.text:0000000000004B7E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004B85                 xor     edi, edi        ; domainname
.text:0000000000004B87                 mov     edx, 5          ; category
.text:0000000000004B8C                 call    _dcgettext
.text:0000000000004B91                 mov     rsi, rbp        ; stream
.text:0000000000004B94                 mov     rdi, rax        ; s
.text:0000000000004B97                 call    _fputs_unlocked
.text:0000000000004B9C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004BA0                 ja      def_4BB4        ; jumptable 0000000000004BB4 default case
.text:0000000000004BA6                 lea     rdx, jpt_4BB4
.text:0000000000004BAD                 movsxd  rax, ds:(jpt_4BB4 - 64E8h)[rdx+r12*4]
.text:0000000000004BB1                 add     rax, rdx
.text:0000000000004BB4                 jmp     rax             ; switch jump
.text:0000000000004BB4 ; ---------------------------------------------------------------------------
.text:0000000000004BB6                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 loc_4BC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004BC0                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004BC0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004BB4 case 8
.text:0000000000004BC4                 mov     rax, [rbx+10h]
.text:0000000000004BC8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004BCF                 mov     r8, [rbx+8]
.text:0000000000004BD3                 mov     edx, 5          ; category
.text:0000000000004BD8                 xor     edi, edi        ; domainname
.text:0000000000004BDA                 mov     r13, [rbx+30h]
.text:0000000000004BDE                 mov     r12, [rbx+28h]
.text:0000000000004BE2                 mov     [rsp+58h+var_48], r9
.text:0000000000004BE7                 mov     r15, [rbx+20h]
.text:0000000000004BEB                 mov     r14, [rbx+18h]
.text:0000000000004BEF                 mov     [rsp+58h+var_58], rax
.text:0000000000004BF3                 mov     [rsp+58h+var_50], r8
.text:0000000000004BF8                 mov     rbx, [rbx]
.text:0000000000004BFB                 call    _dcgettext
.text:0000000000004C00                 sub     rsp, 8
.text:0000000000004C04
.text:0000000000004C04 loc_4C04:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004C04                 mov     r9, [rsp+60h+var_48]
.text:0000000000004C09                 mov     rdx, rax
.text:0000000000004C0C                 mov     rcx, rbx
.text:0000000000004C0F                 mov     esi, 1
.text:0000000000004C14                 mov     rdi, rbp
.text:0000000000004C17                 xor     eax, eax
.text:0000000000004C19                 push    r9
.text:0000000000004C1B                 push    r13
.text:0000000000004C1D                 push    r12
.text:0000000000004C1F                 push    r15
.text:0000000000004C21                 push    r14
.text:0000000000004C23                 mov     r9, [rsp+88h+var_58]
.text:0000000000004C28                 mov     r8, [rsp+88h+var_50]
.text:0000000000004C2D                 call    ___fprintf_chk
.text:0000000000004C32                 add     rsp, 30h
.text:0000000000004C36
.text:0000000000004C36 loc_4C36:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C36                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004C36                 add     rsp, 28h        ; jumptable 0000000000004BB4 case 0
.text:0000000000004C3A                 pop     rbx
.text:0000000000004C3B                 pop     rbp
.text:0000000000004C3C                 pop     r12
.text:0000000000004C3E                 pop     r13
.text:0000000000004C40                 pop     r14
.text:0000000000004C42                 pop     r15
.text:0000000000004C44                 retn
.text:0000000000004C44 ; ---------------------------------------------------------------------------
.text:0000000000004C45                 align 8
.text:0000000000004C48
.text:0000000000004C48 loc_4C48:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004C48                 mov     r8, rcx
.text:0000000000004C4B                 mov     rcx, rdx
.text:0000000000004C4E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004C55                 mov     esi, 1
.text:0000000000004C5A                 xor     eax, eax
.text:0000000000004C5C                 call    ___fprintf_chk
.text:0000000000004C61                 jmp     loc_4B4C
.text:0000000000004C61 ; ---------------------------------------------------------------------------
.text:0000000000004C66                 align 10h
.text:0000000000004C70
.text:0000000000004C70 loc_4C70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C70                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004C70                 mov     r10, [rbx+40h]  ; jumptable 0000000000004BB4 case 9
.text:0000000000004C74                 mov     r9, [rbx+38h]
.text:0000000000004C78                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004C7F                 mov     rax, [rbx+10h]
.text:0000000000004C83                 mov     r8, [rbx+8]
.text:0000000000004C87                 mov     edx, 5          ; category
.text:0000000000004C8C                 mov     r13, [rbx+30h]
.text:0000000000004C90                 mov     r12, [rbx+28h]
.text:0000000000004C94                 mov     r15, [rbx+20h]
.text:0000000000004C98                 mov     r14, [rbx+18h]
.text:0000000000004C9C                 mov     rbx, [rbx]
.text:0000000000004C9F                 mov     [rsp+58h+var_40], r10
.text:0000000000004CA4                 mov     [rsp+58h+var_48], r9
.text:0000000000004CA9                 mov     [rsp+58h+var_58], rax
.text:0000000000004CAD                 mov     [rsp+58h+var_50], r8
.text:0000000000004CB2
.text:0000000000004CB2 loc_4CB2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004CB2                 xor     edi, edi        ; domainname
.text:0000000000004CB4                 call    _dcgettext
.text:0000000000004CB9                 mov     r10, [rsp+58h+var_40]
.text:0000000000004CBE                 push    r10
.text:0000000000004CC0                 jmp     loc_4C04
.text:0000000000004CC0 ; ---------------------------------------------------------------------------
.text:0000000000004CC5                 align 8
.text:0000000000004CC8
.text:0000000000004CC8 loc_4CC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004CC8                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004CC8                 mov     rbx, [rbx]      ; jumptable 0000000000004BB4 case 1
.text:0000000000004CCB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004CD2                 mov     edx, 5          ; category
.text:0000000000004CD7                 xor     edi, edi        ; domainname
.text:0000000000004CD9                 call    _dcgettext
.text:0000000000004CDE                 add     rsp, 28h
.text:0000000000004CE2                 mov     rcx, rbx
.text:0000000000004CE5                 mov     rdi, rbp
.text:0000000000004CE8                 pop     rbx
.text:0000000000004CE9                 pop     rbp
.text:0000000000004CEA                 pop     r12
.text:0000000000004CEC                 pop     r13
.text:0000000000004CEE                 pop     r14
.text:0000000000004CF0                 pop     r15
.text:0000000000004CF2                 mov     rdx, rax
.text:0000000000004CF5                 mov     esi, 1
.text:0000000000004CFA                 xor     eax, eax
.text:0000000000004CFC                 jmp     ___fprintf_chk
.text:0000000000004CFC ; ---------------------------------------------------------------------------
.text:0000000000004D01                 align 8
.text:0000000000004D08
.text:0000000000004D08 loc_4D08:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D08                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004D08                 mov     r12, [rbx+8]    ; jumptable 0000000000004BB4 case 2
.text:0000000000004D0C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004D13                 mov     rbx, [rbx]
.text:0000000000004D16                 mov     edx, 5          ; category
.text:0000000000004D1B                 xor     edi, edi        ; domainname
.text:0000000000004D1D                 call    _dcgettext
.text:0000000000004D22                 add     rsp, 28h
.text:0000000000004D26                 mov     r8, r12
.text:0000000000004D29                 mov     rcx, rbx
.text:0000000000004D2C                 mov     rdi, rbp
.text:0000000000004D2F                 mov     rdx, rax
.text:0000000000004D32                 mov     esi, 1
.text:0000000000004D37                 pop     rbx
.text:0000000000004D38                 pop     rbp
.text:0000000000004D39                 pop     r12
.text:0000000000004D3B                 pop     r13
.text:0000000000004D3D                 pop     r14
.text:0000000000004D3F                 pop     r15
.text:0000000000004D41                 xor     eax, eax
.text:0000000000004D43                 jmp     ___fprintf_chk
.text:0000000000004D43 ; ---------------------------------------------------------------------------
.text:0000000000004D48                 align 10h
.text:0000000000004D50
.text:0000000000004D50 loc_4D50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D50                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004D50                 mov     r13, [rbx+10h]  ; jumptable 0000000000004BB4 case 3
.text:0000000000004D54                 mov     r12, [rbx+8]
.text:0000000000004D58                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004D5F                 mov     rbx, [rbx]
.text:0000000000004D62                 mov     edx, 5          ; category
.text:0000000000004D67                 xor     edi, edi        ; domainname
.text:0000000000004D69                 call    _dcgettext
.text:0000000000004D6E                 add     rsp, 28h
.text:0000000000004D72                 mov     r9, r13
.text:0000000000004D75                 mov     r8, r12
.text:0000000000004D78                 mov     rcx, rbx
.text:0000000000004D7B                 mov     rdi, rbp
.text:0000000000004D7E                 mov     rdx, rax
.text:0000000000004D81                 pop     rbx
.text:0000000000004D82                 pop     rbp
.text:0000000000004D83                 pop     r12
.text:0000000000004D85                 pop     r13
.text:0000000000004D87                 pop     r14
.text:0000000000004D89                 pop     r15
.text:0000000000004D8B                 mov     esi, 1
.text:0000000000004D90                 xor     eax, eax
.text:0000000000004D92                 jmp     ___fprintf_chk
.text:0000000000004D92 ; ---------------------------------------------------------------------------
.text:0000000000004D97                 align 20h
.text:0000000000004DA0
.text:0000000000004DA0 loc_4DA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004DA0                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004DA0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004BB4 case 4
.text:0000000000004DA7                 mov     edx, 5          ; category
.text:0000000000004DAC                 xor     edi, edi        ; domainname
.text:0000000000004DAE                 mov     r14, [rbx+18h]
.text:0000000000004DB2                 mov     r13, [rbx+10h]
.text:0000000000004DB6                 mov     r12, [rbx+8]
.text:0000000000004DBA                 mov     rbx, [rbx]
.text:0000000000004DBD                 call    _dcgettext
.text:0000000000004DC2                 sub     rsp, 8
.text:0000000000004DC6
.text:0000000000004DC6 loc_4DC6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004DC6                 push    r14
.text:0000000000004DC8                 mov     rdx, rax
.text:0000000000004DCB                 mov     r9, r13
.text:0000000000004DCE                 mov     r8, r12
.text:0000000000004DD1                 mov     rcx, rbx
.text:0000000000004DD4                 mov     rdi, rbp
.text:0000000000004DD7                 mov     esi, 1
.text:0000000000004DDC                 xor     eax, eax
.text:0000000000004DDE                 call    ___fprintf_chk
.text:0000000000004DE3                 pop     rax
.text:0000000000004DE4                 pop     rdx
.text:0000000000004DE5                 add     rsp, 28h
.text:0000000000004DE9                 pop     rbx
.text:0000000000004DEA                 pop     rbp
.text:0000000000004DEB                 pop     r12
.text:0000000000004DED                 pop     r13
.text:0000000000004DEF                 pop     r14
.text:0000000000004DF1                 pop     r15
.text:0000000000004DF3                 retn
.text:0000000000004DF3 ; ---------------------------------------------------------------------------
.text:0000000000004DF4                 align 8
.text:0000000000004DF8
.text:0000000000004DF8 loc_4DF8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004DF8                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004DF8                 mov     r15, [rbx+20h]  ; jumptable 0000000000004BB4 case 5
.text:0000000000004DFC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004E03                 mov     edx, 5          ; category
.text:0000000000004E08                 xor     edi, edi        ; domainname
.text:0000000000004E0A                 mov     r14, [rbx+18h]
.text:0000000000004E0E                 mov     r13, [rbx+10h]
.text:0000000000004E12                 mov     r12, [rbx+8]
.text:0000000000004E16                 mov     rbx, [rbx]
.text:0000000000004E19                 call    _dcgettext
.text:0000000000004E1E                 push    r15
.text:0000000000004E20                 jmp     short loc_4DC6
.text:0000000000004E20 ; ---------------------------------------------------------------------------
.text:0000000000004E22                 align 8
.text:0000000000004E28
.text:0000000000004E28 loc_4E28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E28                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004E28                 mov     r8, [rbx+8]     ; jumptable 0000000000004BB4 case 6
.text:0000000000004E2C                 mov     r12, [rbx+28h]
.text:0000000000004E30                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004E37                 mov     r15, [rbx+20h]
.text:0000000000004E3B                 mov     r14, [rbx+18h]
.text:0000000000004E3F                 mov     edx, 5          ; category
.text:0000000000004E44                 mov     r13, [rbx+10h]
.text:0000000000004E48                 xor     edi, edi        ; domainname
.text:0000000000004E4A                 mov     rbx, [rbx]
.text:0000000000004E4D                 mov     [rsp+58h+var_58], r8
.text:0000000000004E51                 call    _dcgettext
.text:0000000000004E56                 sub     rsp, 8
.text:0000000000004E5A                 mov     r9, r13
.text:0000000000004E5D                 push    r12
.text:0000000000004E5F                 push    r15
.text:0000000000004E61                 push    r14
.text:0000000000004E63
.text:0000000000004E63 loc_4E63:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004E63                 mov     r8, [rsp+78h+var_58]
.text:0000000000004E68                 mov     rcx, rbx
.text:0000000000004E6B                 mov     rdx, rax
.text:0000000000004E6E                 mov     rdi, rbp
.text:0000000000004E71                 mov     esi, 1
.text:0000000000004E76                 xor     eax, eax
.text:0000000000004E78                 call    ___fprintf_chk
.text:0000000000004E7D                 add     rsp, 20h
.text:0000000000004E81                 add     rsp, 28h
.text:0000000000004E85                 pop     rbx
.text:0000000000004E86                 pop     rbp
.text:0000000000004E87                 pop     r12
.text:0000000000004E89                 pop     r13
.text:0000000000004E8B                 pop     r14
.text:0000000000004E8D                 pop     r15
.text:0000000000004E8F                 retn
.text:0000000000004E90 ; ---------------------------------------------------------------------------
.text:0000000000004E90
.text:0000000000004E90 loc_4E90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E90                                         ; DATA XREF: .rodata:jpt_4BB4↓o
.text:0000000000004E90                 mov     r9, [rbx+10h]   ; jumptable 0000000000004BB4 case 7
.text:0000000000004E94                 mov     r13, [rbx+30h]
.text:0000000000004E98                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004E9F                 mov     r12, [rbx+28h]
.text:0000000000004EA3                 mov     r15, [rbx+20h]
.text:0000000000004EA7                 mov     edx, 5          ; category
.text:0000000000004EAC                 mov     r14, [rbx+18h]
.text:0000000000004EB0                 mov     r8, [rbx+8]
.text:0000000000004EB4                 xor     edi, edi        ; domainname
.text:0000000000004EB6                 mov     [rsp+58h+var_50], r9
.text:0000000000004EBB                 mov     rbx, [rbx]
.text:0000000000004EBE                 mov     [rsp+58h+var_58], r8
.text:0000000000004EC2                 call    _dcgettext
.text:0000000000004EC7                 push    r13
.text:0000000000004EC9                 push    r12
.text:0000000000004ECB                 push    r15
.text:0000000000004ECD                 push    r14
.text:0000000000004ECF                 mov     r9, [rsp+78h+var_50]
.text:0000000000004ED4                 jmp     short loc_4E63
.text:0000000000004ED4 ; ---------------------------------------------------------------------------
.text:0000000000004ED6                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 def_4BB4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004EE0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004BB4 default case
.text:0000000000004EE4                 mov     r9, [rbx+38h]
.text:0000000000004EE8                 mov     edx, 5
.text:0000000000004EED                 mov     rax, [rbx+10h]
.text:0000000000004EF1                 mov     r8, [rbx+8]
.text:0000000000004EF5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004EFC                 mov     r13, [rbx+30h]
.text:0000000000004F00                 mov     r12, [rbx+28h]
.text:0000000000004F04                 mov     r15, [rbx+20h]
.text:0000000000004F08                 mov     r14, [rbx+18h]
.text:0000000000004F0C                 mov     [rsp+58h+var_40], r10
.text:0000000000004F11                 mov     [rsp+58h+var_48], r9
.text:0000000000004F16                 mov     [rsp+58h+var_58], rax
.text:0000000000004F1A                 mov     [rsp+58h+var_50], r8
.text:0000000000004F1F                 mov     rbx, [rbx]
.text:0000000000004F22                 jmp     loc_4CB2
.text:0000000000004F22 ; } // starts at 4B10
.text:0000000000004F22 version_etc_arn endp
.text:0000000000004F22
.text:0000000000004F22 ; ---------------------------------------------------------------------------
.text:0000000000004F27                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30 ; Attributes: info_from_lumina
.text:0000000000004F30
.text:0000000000004F30 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004F30                 public version_etc_ar
.text:0000000000004F30 version_etc_ar  proc near
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 xor     r9d, r9d
.text:0000000000004F33                 cmp     qword ptr [r8], 0
.text:0000000000004F37                 jz      short loc_4F4B
.text:0000000000004F39                 nop     dword ptr [rax+00000000h]
.text:0000000000004F40
.text:0000000000004F40 loc_4F40:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004F40                 add     r9, 1
.text:0000000000004F44                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004F49                 jnz     short loc_4F40
.text:0000000000004F4B
.text:0000000000004F4B loc_4F4B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004F4B                 jmp     version_etc_arn
.text:0000000000004F4B ; } // starts at 4F30
.text:0000000000004F4B version_etc_ar  endp
.text:0000000000004F4B
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50 ; Attributes: info_from_lumina
.text:0000000000004F50
.text:0000000000004F50 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004F50                 public version_etc_va
.text:0000000000004F50 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000004F50                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000004F50
.text:0000000000004F50 authtab         = qword ptr -68h
.text:0000000000004F50 var_10          = qword ptr -10h
.text:0000000000004F50
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 sub     rsp, 68h
.text:0000000000004F54                 mov     r10, r8
.text:0000000000004F57                 xor     r9d, r9d
.text:0000000000004F5A                 mov     rax, fs:28h
.text:0000000000004F63                 mov     [rsp+68h+var_10], rax
.text:0000000000004F68                 xor     eax, eax
.text:0000000000004F6A                 mov     r8, rsp
.text:0000000000004F6D                 nop     dword ptr [rax]
.text:0000000000004F70
.text:0000000000004F70 loc_4F70:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004F70                 mov     eax, [r10]
.text:0000000000004F73                 cmp     eax, 2Fh ; '/'
.text:0000000000004F76                 ja      short loc_4FBA
.text:0000000000004F78                 mov     r11d, eax
.text:0000000000004F7B                 add     r11, [r10+10h]
.text:0000000000004F7F                 add     eax, 8
.text:0000000000004F82                 mov     [r10], eax
.text:0000000000004F85
.text:0000000000004F85 loc_4F85:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004F85                 mov     rax, [r11]
.text:0000000000004F88                 test    rax, rax
.text:0000000000004F8B                 mov     [r8+r9*8], rax
.text:0000000000004F8F                 jz      short loc_4F9B
.text:0000000000004F91                 add     r9, 1
.text:0000000000004F95                 cmp     r9, 0Ah
.text:0000000000004F99                 jnz     short loc_4F70
.text:0000000000004F9B
.text:0000000000004F9B loc_4F9B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004F9B                 call    version_etc_arn
.text:0000000000004FA0                 mov     rax, [rsp+68h+var_10]
.text:0000000000004FA5                 xor     rax, fs:28h
.text:0000000000004FAE                 jnz     short loc_4FB5
.text:0000000000004FB0                 add     rsp, 68h
.text:0000000000004FB4                 retn
.text:0000000000004FB5 ; ---------------------------------------------------------------------------
.text:0000000000004FB5
.text:0000000000004FB5 loc_4FB5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004FB5                 call    ___stack_chk_fail
.text:0000000000004FBA ; ---------------------------------------------------------------------------
.text:0000000000004FBA
.text:0000000000004FBA loc_4FBA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004FBA                 mov     r11, [r10+8]
.text:0000000000004FBE                 lea     rax, [r11+8]
.text:0000000000004FC2                 mov     [r10+8], rax
.text:0000000000004FC6                 jmp     short loc_4F85
.text:0000000000004FC6 ; } // starts at 4F50
.text:0000000000004FC6 version_etc_va  endp
.text:0000000000004FC6
.text:0000000000004FC6 ; ---------------------------------------------------------------------------
.text:0000000000004FC8                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0 ; Attributes: info_from_lumina
.text:0000000000004FD0
.text:0000000000004FD0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004FD0                 public version_etc
.text:0000000000004FD0 version_etc     proc near
.text:0000000000004FD0
.text:0000000000004FD0 var_C0          = dword ptr -0C0h
.text:0000000000004FD0 var_B8          = qword ptr -0B8h
.text:0000000000004FD0 var_B0          = qword ptr -0B0h
.text:0000000000004FD0 var_A8          = byte ptr -0A8h
.text:0000000000004FD0 var_50          = qword ptr -50h
.text:0000000000004FD0 var_48          = byte ptr -48h
.text:0000000000004FD0 var_28          = qword ptr -28h
.text:0000000000004FD0 var_20          = qword ptr -20h
.text:0000000000004FD0 arg_0           = byte ptr  8
.text:0000000000004FD0
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 push    rbp
.text:0000000000004FD1                 push    rbx
.text:0000000000004FD2                 mov     r10d, 20h ; ' '
.text:0000000000004FD8                 xor     r11d, r11d
.text:0000000000004FDB                 sub     rsp, 0B8h
.text:0000000000004FE2                 mov     rax, fs:28h
.text:0000000000004FEB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004FF0                 xor     eax, eax
.text:0000000000004FF2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004FFA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005002                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000500A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000500F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005017                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000501F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005024                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000502C                 xor     r9d, r9d
.text:000000000000502F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005034                 mov     rbp, rax
.text:0000000000005037                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005040
.text:0000000000005040 loc_5040:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005040                 cmp     r10d, 2Fh ; '/'
.text:0000000000005044                 ja      short loc_509C
.text:0000000000005046                 mov     eax, r10d
.text:0000000000005049                 mov     r11d, 1
.text:000000000000504F                 add     r10d, 8
.text:0000000000005053                 add     rax, rbp
.text:0000000000005056
.text:0000000000005056 loc_5056:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005056                 mov     rax, [rax]
.text:0000000000005059                 test    rax, rax
.text:000000000000505C                 mov     [r8+r9*8], rax
.text:0000000000005060                 jz      short loc_506C
.text:0000000000005062                 add     r9, 1
.text:0000000000005066                 cmp     r9, 0Ah
.text:000000000000506A                 jnz     short loc_5040
.text:000000000000506C
.text:000000000000506C loc_506C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000506C                 test    r11b, r11b
.text:000000000000506F                 jnz     short loc_5095
.text:0000000000005071
.text:0000000000005071 loc_5071:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005071                 call    version_etc_arn
.text:0000000000005076                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000507B                 xor     rax, fs:28h
.text:0000000000005084                 jnz     short loc_5090
.text:0000000000005086                 add     rsp, 0B8h
.text:000000000000508D                 pop     rbx
.text:000000000000508E                 pop     rbp
.text:000000000000508F                 retn
.text:0000000000005090 ; ---------------------------------------------------------------------------
.text:0000000000005090
.text:0000000000005090 loc_5090:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005090                 call    ___stack_chk_fail
.text:0000000000005095 ; ---------------------------------------------------------------------------
.text:0000000000005095
.text:0000000000005095 loc_5095:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005095                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000509A                 jmp     short loc_5071
.text:000000000000509C ; ---------------------------------------------------------------------------
.text:000000000000509C
.text:000000000000509C loc_509C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000509C                 mov     rax, rbx
.text:000000000000509F                 add     rbx, 8
.text:00000000000050A3                 jmp     short loc_5056
.text:00000000000050A3 ; } // starts at 4FD0
.text:00000000000050A3 version_etc     endp
.text:00000000000050A3
.text:00000000000050A3 ; ---------------------------------------------------------------------------
.text:00000000000050A5                 align 10h
.text:00000000000050B0
.text:00000000000050B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050B0
.text:00000000000050B0 ; Attributes: info_from_lumina
.text:00000000000050B0
.text:00000000000050B0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000050B0                 public emit_bug_reporting_address
.text:00000000000050B0 emit_bug_reporting_address proc near
.text:00000000000050B0 ; __unwind {
.text:00000000000050B0                 push    rbx
.text:00000000000050B1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000050B8                 mov     edx, 5          ; category
.text:00000000000050BD                 xor     edi, edi        ; domainname
.text:00000000000050BF                 call    _dcgettext
.text:00000000000050C4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000050CB                 mov     rsi, rax
.text:00000000000050CE                 mov     edi, 1
.text:00000000000050D3                 xor     eax, eax
.text:00000000000050D5                 call    ___printf_chk
.text:00000000000050DA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000050E1                 mov     edx, 5          ; category
.text:00000000000050E6                 xor     edi, edi        ; domainname
.text:00000000000050E8                 call    _dcgettext
.text:00000000000050ED                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000050F4                 lea     rdx, unk_57CF
.text:00000000000050FB                 mov     rsi, rax
.text:00000000000050FE                 mov     edi, 1
.text:0000000000005103                 xor     eax, eax
.text:0000000000005105                 call    ___printf_chk
.text:000000000000510A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005111                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005118                 xor     edi, edi        ; domainname
.text:000000000000511A                 mov     edx, 5          ; category
.text:000000000000511F                 call    _dcgettext
.text:0000000000005124                 mov     rsi, rbx        ; stream
.text:0000000000005127                 mov     rdi, rax        ; s
.text:000000000000512A                 pop     rbx
.text:000000000000512B                 jmp     _fputs_unlocked
.text:000000000000512B ; } // starts at 50B0
.text:000000000000512B emit_bug_reporting_address endp
.text:000000000000512B
.text:0000000000005130
.text:0000000000005130 ; =============== S U B R O U T I N E =======================================
.text:0000000000005130
.text:0000000000005130
.text:0000000000005130                 public xmalloc
.text:0000000000005130 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000005130                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000005130 ; __unwind {
.text:0000000000005130                 push    rbx
.text:0000000000005131                 mov     rbx, rdi
.text:0000000000005134                 call    _malloc
.text:0000000000005139                 test    rax, rax
.text:000000000000513C                 jnz     short loc_5143
.text:000000000000513E                 test    rbx, rbx
.text:0000000000005141                 jnz     short loc_5145
.text:0000000000005143
.text:0000000000005143 loc_5143:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005143                 pop     rbx
.text:0000000000005144                 retn
.text:0000000000005145 ; ---------------------------------------------------------------------------
.text:0000000000005145
.text:0000000000005145 loc_5145:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005145                 call    xalloc_die
.text:0000000000005145 ; } // starts at 5130
.text:0000000000005145 xmalloc         endp
.text:0000000000005145
.text:0000000000005145 ; ---------------------------------------------------------------------------
.text:000000000000514A                 align 10h
.text:0000000000005150
.text:0000000000005150 ; =============== S U B R O U T I N E =======================================
.text:0000000000005150
.text:0000000000005150 ; Attributes: info_from_lumina
.text:0000000000005150
.text:0000000000005150 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005150                 public xnmalloc
.text:0000000000005150 xnmalloc        proc near
.text:0000000000005150 ; __unwind {
.text:0000000000005150                 mov     rax, rdi
.text:0000000000005153                 mul     rsi
.text:0000000000005156                 mov     rdi, rax
.text:0000000000005159                 seto    al
.text:000000000000515C                 test    rdi, rdi
.text:000000000000515F                 js      short loc_516B
.text:0000000000005161                 movzx   eax, al
.text:0000000000005164                 test    rax, rax
.text:0000000000005167                 jnz     short loc_516B
.text:0000000000005169                 jmp     short xmalloc
.text:000000000000516B ; ---------------------------------------------------------------------------
.text:000000000000516B
.text:000000000000516B loc_516B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000516B                                         ; xnmalloc+17↑j
.text:000000000000516B                 sub     rsp, 8
.text:000000000000516F                 call    xalloc_die
.text:000000000000516F ; } // starts at 5150
.text:000000000000516F xnmalloc        endp
.text:000000000000516F
.text:000000000000516F ; ---------------------------------------------------------------------------
.text:0000000000005174                 align 20h
.text:0000000000005180
.text:0000000000005180 ; =============== S U B R O U T I N E =======================================
.text:0000000000005180
.text:0000000000005180
.text:0000000000005180                 public xcharalloc
.text:0000000000005180 xcharalloc      proc near
.text:0000000000005180 ; __unwind {
.text:0000000000005180                 jmp     short xmalloc
.text:0000000000005180 ; } // starts at 5180
.text:0000000000005180 xcharalloc      endp
.text:0000000000005180
.text:0000000000005180 ; ---------------------------------------------------------------------------
.text:0000000000005182                 align 10h
.text:0000000000005190
.text:0000000000005190 ; =============== S U B R O U T I N E =======================================
.text:0000000000005190
.text:0000000000005190 ; Attributes: info_from_lumina
.text:0000000000005190
.text:0000000000005190 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005190                 public xrealloc
.text:0000000000005190 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005190                                         ; quotearg_n_options+182↑p ...
.text:0000000000005190 ; __unwind {
.text:0000000000005190                 test    rsi, rsi
.text:0000000000005193                 push    rbx
.text:0000000000005194                 mov     rbx, rsi
.text:0000000000005197                 jnz     short loc_519E
.text:0000000000005199                 test    rdi, rdi
.text:000000000000519C                 jnz     short loc_51B8
.text:000000000000519E
.text:000000000000519E loc_519E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000519E                 mov     rsi, rbx        ; size
.text:00000000000051A1                 call    _realloc
.text:00000000000051A6                 test    rax, rax
.text:00000000000051A9                 jnz     short loc_51B0
.text:00000000000051AB                 test    rbx, rbx
.text:00000000000051AE                 jnz     short loc_51C1
.text:00000000000051B0
.text:00000000000051B0 loc_51B0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000051B0                 pop     rbx
.text:00000000000051B1                 retn
.text:00000000000051B1 ; ---------------------------------------------------------------------------
.text:00000000000051B2                 align 8
.text:00000000000051B8
.text:00000000000051B8 loc_51B8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000051B8                 call    _free
.text:00000000000051BD                 xor     eax, eax
.text:00000000000051BF                 pop     rbx
.text:00000000000051C0                 retn
.text:00000000000051C1 ; ---------------------------------------------------------------------------
.text:00000000000051C1
.text:00000000000051C1 loc_51C1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000051C1                 call    xalloc_die
.text:00000000000051C1 ; } // starts at 5190
.text:00000000000051C1 xrealloc        endp
.text:00000000000051C1
.text:00000000000051C1 ; ---------------------------------------------------------------------------
.text:00000000000051C6                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0 ; Attributes: info_from_lumina
.text:00000000000051D0
.text:00000000000051D0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000051D0                 public xnrealloc
.text:00000000000051D0 xnrealloc       proc near
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 mov     rax, rsi
.text:00000000000051D3                 mul     rdx
.text:00000000000051D6                 mov     rsi, rax
.text:00000000000051D9                 seto    al
.text:00000000000051DC                 test    rsi, rsi
.text:00000000000051DF                 js      short loc_51EB
.text:00000000000051E1                 movzx   eax, al
.text:00000000000051E4                 test    rax, rax
.text:00000000000051E7                 jnz     short loc_51EB
.text:00000000000051E9                 jmp     short xrealloc
.text:00000000000051EB ; ---------------------------------------------------------------------------
.text:00000000000051EB
.text:00000000000051EB loc_51EB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000051EB                                         ; xnrealloc+17↑j
.text:00000000000051EB                 sub     rsp, 8
.text:00000000000051EF                 call    xalloc_die
.text:00000000000051EF ; } // starts at 51D0
.text:00000000000051EF xnrealloc       endp
.text:00000000000051EF
.text:00000000000051EF ; ---------------------------------------------------------------------------
.text:00000000000051F4                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200 ; Attributes: info_from_lumina
.text:0000000000005200
.text:0000000000005200 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005200                 public x2nrealloc
.text:0000000000005200 x2nrealloc      proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 test    rdi, rdi
.text:0000000000005203                 mov     r9, rdx
.text:0000000000005206                 mov     rcx, [rsi]
.text:0000000000005209                 jz      short loc_5240
.text:000000000000520B                 xor     edx, edx
.text:000000000000520D                 mov     rax, 5555555555555554h
.text:0000000000005217                 div     r9
.text:000000000000521A                 cmp     rax, rcx
.text:000000000000521D                 jbe     short loc_525B
.text:000000000000521F                 mov     rax, rcx
.text:0000000000005222                 shr     rax, 1
.text:0000000000005225                 lea     rcx, [rax+rcx+1]
.text:000000000000522A
.text:000000000000522A loc_522A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000522A                 mov     [rsi], rcx
.text:000000000000522D                 imul    rcx, r9
.text:0000000000005231                 mov     rsi, rcx
.text:0000000000005234                 jmp     xrealloc
.text:0000000000005234 ; ---------------------------------------------------------------------------
.text:0000000000005239                 align 20h
.text:0000000000005240
.text:0000000000005240 loc_5240:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005240                 test    rcx, rcx
.text:0000000000005243                 jz      short loc_5268
.text:0000000000005245
.text:0000000000005245 loc_5245:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005245                 mov     rax, rcx
.text:0000000000005248                 mul     r9
.text:000000000000524B                 seto    dl
.text:000000000000524E                 test    rax, rax
.text:0000000000005251                 movzx   edx, dl
.text:0000000000005254                 js      short loc_525B
.text:0000000000005256                 test    rdx, rdx
.text:0000000000005259                 jz      short loc_522A
.text:000000000000525B
.text:000000000000525B loc_525B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000525B                                         ; x2nrealloc+54↑j
.text:000000000000525B                 sub     rsp, 8
.text:000000000000525F                 call    xalloc_die
.text:000000000000525F ; ---------------------------------------------------------------------------
.text:0000000000005264                 align 8
.text:0000000000005268
.text:0000000000005268 loc_5268:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005268                 xor     edx, edx
.text:000000000000526A                 mov     eax, 80h
.text:000000000000526F                 xor     r8d, r8d
.text:0000000000005272                 div     r9
.text:0000000000005275                 test    rax, rax
.text:0000000000005278                 setz    r8b
.text:000000000000527C                 lea     rcx, [r8+rax]
.text:0000000000005280                 jmp     short loc_5245
.text:0000000000005280 ; } // starts at 5200
.text:0000000000005280 x2nrealloc      endp
.text:0000000000005280
.text:0000000000005280 ; ---------------------------------------------------------------------------
.text:0000000000005282                 align 10h
.text:0000000000005290
.text:0000000000005290 ; =============== S U B R O U T I N E =======================================
.text:0000000000005290
.text:0000000000005290 ; Attributes: info_from_lumina
.text:0000000000005290
.text:0000000000005290 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005290                 public x2realloc
.text:0000000000005290 x2realloc       proc near
.text:0000000000005290 ; __unwind {
.text:0000000000005290                 test    rdi, rdi
.text:0000000000005293                 mov     rax, [rsi]
.text:0000000000005296                 jz      short loc_52C0
.text:0000000000005298                 mov     rdx, 5555555555555553h
.text:00000000000052A2                 cmp     rax, rdx
.text:00000000000052A5                 ja      short loc_52D1
.text:00000000000052A7                 mov     rdx, rax
.text:00000000000052AA                 shr     rdx, 1
.text:00000000000052AD                 lea     rax, [rdx+rax+1]
.text:00000000000052B2
.text:00000000000052B2 loc_52B2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000052B2                 mov     [rsi], rax
.text:00000000000052B5                 mov     rsi, rax
.text:00000000000052B8                 jmp     xrealloc
.text:00000000000052B8 ; ---------------------------------------------------------------------------
.text:00000000000052BD                 align 20h
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000052C0                 test    rax, rax
.text:00000000000052C3                 mov     edx, 80h
.text:00000000000052C8                 cmovz   rax, rdx
.text:00000000000052CC                 test    rax, rax
.text:00000000000052CF                 jns     short loc_52B2
.text:00000000000052D1
.text:00000000000052D1 loc_52D1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000052D1                 sub     rsp, 8
.text:00000000000052D5                 call    xalloc_die
.text:00000000000052D5 ; } // starts at 5290
.text:00000000000052D5 x2realloc       endp
.text:00000000000052D5
.text:00000000000052D5 ; ---------------------------------------------------------------------------
.text:00000000000052DA                 align 20h
.text:00000000000052E0
.text:00000000000052E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052E0
.text:00000000000052E0
.text:00000000000052E0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000052E0                 public xzalloc
.text:00000000000052E0 xzalloc         proc near
.text:00000000000052E0 ; __unwind {
.text:00000000000052E0                 push    rbx
.text:00000000000052E1                 mov     rbx, rdi
.text:00000000000052E4                 call    xmalloc
.text:00000000000052E9                 mov     rdx, rbx        ; n
.text:00000000000052EC                 xor     esi, esi        ; c
.text:00000000000052EE                 mov     rdi, rax        ; s
.text:00000000000052F1                 pop     rbx
.text:00000000000052F2                 jmp     _memset
.text:00000000000052F2 ; } // starts at 52E0
.text:00000000000052F2 xzalloc         endp
.text:00000000000052F2
.text:00000000000052F2 ; ---------------------------------------------------------------------------
.text:00000000000052F7                 align 20h
.text:0000000000005300
.text:0000000000005300 ; =============== S U B R O U T I N E =======================================
.text:0000000000005300
.text:0000000000005300 ; Attributes: info_from_lumina
.text:0000000000005300
.text:0000000000005300 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005300                 public xcalloc
.text:0000000000005300 xcalloc         proc near
.text:0000000000005300 ; __unwind {
.text:0000000000005300                 mov     rax, rdi
.text:0000000000005303                 sub     rsp, 8
.text:0000000000005307                 mul     rsi
.text:000000000000530A                 seto    dl
.text:000000000000530D                 test    rax, rax
.text:0000000000005310                 js      short loc_5329
.text:0000000000005312                 movzx   edx, dl
.text:0000000000005315                 test    rdx, rdx
.text:0000000000005318                 jnz     short loc_5329
.text:000000000000531A                 call    _calloc
.text:000000000000531F                 test    rax, rax
.text:0000000000005322                 jz      short loc_5329
.text:0000000000005324                 add     rsp, 8
.text:0000000000005328                 retn
.text:0000000000005329 ; ---------------------------------------------------------------------------
.text:0000000000005329
.text:0000000000005329 loc_5329:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005329                                         ; xcalloc+18↑j ...
.text:0000000000005329                 call    xalloc_die
.text:0000000000005329 ; } // starts at 5300
.text:0000000000005329 xcalloc         endp
.text:0000000000005329
.text:0000000000005329 ; ---------------------------------------------------------------------------
.text:000000000000532E                 align 10h
.text:0000000000005330
.text:0000000000005330 ; =============== S U B R O U T I N E =======================================
.text:0000000000005330
.text:0000000000005330 ; Attributes: info_from_lumina
.text:0000000000005330
.text:0000000000005330 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005330                 public xmemdup
.text:0000000000005330 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005330                                         ; xstrdup+11↓j
.text:0000000000005330 ; __unwind {
.text:0000000000005330                 push    rbp
.text:0000000000005331                 push    rbx
.text:0000000000005332                 mov     rbp, rdi
.text:0000000000005335                 mov     rdi, rsi
.text:0000000000005338                 mov     rbx, rsi
.text:000000000000533B                 sub     rsp, 8
.text:000000000000533F                 call    xmalloc
.text:0000000000005344                 add     rsp, 8
.text:0000000000005348                 mov     rdx, rbx        ; n
.text:000000000000534B                 mov     rsi, rbp        ; src
.text:000000000000534E                 pop     rbx
.text:000000000000534F                 pop     rbp
.text:0000000000005350                 mov     rdi, rax        ; dest
.text:0000000000005353                 jmp     _memcpy
.text:0000000000005353 ; } // starts at 5330
.text:0000000000005353 xmemdup         endp
.text:0000000000005353
.text:0000000000005353 ; ---------------------------------------------------------------------------
.text:0000000000005358                 align 20h
.text:0000000000005360
.text:0000000000005360 ; =============== S U B R O U T I N E =======================================
.text:0000000000005360
.text:0000000000005360
.text:0000000000005360 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005360                 public xstrdup
.text:0000000000005360 xstrdup         proc near
.text:0000000000005360 ; __unwind {
.text:0000000000005360                 push    rbx
.text:0000000000005361                 mov     rbx, rdi
.text:0000000000005364                 call    _strlen
.text:0000000000005369                 mov     rdi, rbx        ; src
.text:000000000000536C                 lea     rsi, [rax+1]    ; n
.text:0000000000005370                 pop     rbx
.text:0000000000005371                 jmp     short xmemdup
.text:0000000000005371 ; } // starts at 5360
.text:0000000000005371 xstrdup         endp
.text:0000000000005371
.text:0000000000005371 ; ---------------------------------------------------------------------------
.text:0000000000005373                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380 ; Attributes: noreturn info_from_lumina
.text:0000000000005380
.text:0000000000005380 ; void __cdecl xalloc_die()
.text:0000000000005380                 public xalloc_die
.text:0000000000005380 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4356↑p
.text:0000000000005380                                         ; xmalloc:loc_5145↑p ...
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005387                 sub     rsp, 8
.text:000000000000538B                 mov     edx, 5          ; category
.text:0000000000005390                 xor     edi, edi        ; domainname
.text:0000000000005392                 call    _dcgettext
.text:0000000000005397                 mov     edi, cs:exit_failure ; status
.text:000000000000539D                 lea     rdx, format+4   ; format
.text:00000000000053A4                 mov     rcx, rax
.text:00000000000053A7                 xor     esi, esi        ; errnum
.text:00000000000053A9                 xor     eax, eax
.text:00000000000053AB                 call    _error
.text:00000000000053B0                 call    _abort
.text:00000000000053B0 ; } // starts at 5380
.text:00000000000053B0 xalloc_die      endp
.text:00000000000053B0
.text:00000000000053B0 ; ---------------------------------------------------------------------------
.text:00000000000053B5                 align 20h
.text:00000000000053C0
.text:00000000000053C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053C0
.text:00000000000053C0 ; Attributes: info_from_lumina
.text:00000000000053C0
.text:00000000000053C0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000053C0                 public rpl_mbrtowc
.text:00000000000053C0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000053C0
.text:00000000000053C0 pwc             = dword ptr -34h
.text:00000000000053C0 var_30          = qword ptr -30h
.text:00000000000053C0
.text:00000000000053C0 ; __unwind {
.text:00000000000053C0                 push    r13
.text:00000000000053C2                 push    r12
.text:00000000000053C4                 mov     r13, rsi
.text:00000000000053C7                 push    rbp
.text:00000000000053C8                 push    rbx
.text:00000000000053C9                 mov     rbx, rdi
.text:00000000000053CC                 mov     r12, rdx
.text:00000000000053CF                 sub     rsp, 18h
.text:00000000000053D3                 mov     rax, fs:28h
.text:00000000000053DC                 mov     [rsp+38h+var_30], rax
.text:00000000000053E1                 xor     eax, eax
.text:00000000000053E3                 lea     rax, [rsp+38h+pwc]
.text:00000000000053E8                 test    rdi, rdi
.text:00000000000053EB                 cmovz   rbx, rax
.text:00000000000053EF                 mov     rdi, rbx        ; pwc
.text:00000000000053F2                 call    _mbrtowc
.text:00000000000053F7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000053FB                 mov     rbp, rax
.text:00000000000053FE                 jbe     short loc_5420
.text:0000000000005400                 test    r12, r12
.text:0000000000005403                 jz      short loc_5420
.text:0000000000005405                 xor     edi, edi
.text:0000000000005407                 call    hard_locale
.text:000000000000540C                 test    al, al
.text:000000000000540E                 jnz     short loc_5420
.text:0000000000005410                 movzx   eax, byte ptr [r13+0]
.text:0000000000005415                 mov     ebp, 1
.text:000000000000541A                 mov     [rbx], eax
.text:000000000000541C                 nop     dword ptr [rax+00h]
.text:0000000000005420
.text:0000000000005420 loc_5420:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005420                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005420                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005425                 xor     rdx, fs:28h
.text:000000000000542E                 mov     rax, rbp
.text:0000000000005431                 jnz     short loc_543E
.text:0000000000005433                 add     rsp, 18h
.text:0000000000005437                 pop     rbx
.text:0000000000005438                 pop     rbp
.text:0000000000005439                 pop     r12
.text:000000000000543B                 pop     r13
.text:000000000000543D                 retn
.text:000000000000543E ; ---------------------------------------------------------------------------
.text:000000000000543E
.text:000000000000543E loc_543E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000543E                 call    ___stack_chk_fail
.text:000000000000543E ; } // starts at 53C0
.text:000000000000543E rpl_mbrtowc     endp
.text:000000000000543E
.text:000000000000543E ; ---------------------------------------------------------------------------
.text:0000000000005443                 align 10h
.text:0000000000005450
.text:0000000000005450 ; =============== S U B R O U T I N E =======================================
.text:0000000000005450
.text:0000000000005450 ; Attributes: info_from_lumina
.text:0000000000005450
.text:0000000000005450 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005450                 public close_stream
.text:0000000000005450 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005450                                         ; close_stdout+33↑p
.text:0000000000005450 ; __unwind {
.text:0000000000005450                 push    r12
.text:0000000000005452                 push    rbp
.text:0000000000005453                 mov     rbp, rdi
.text:0000000000005456                 push    rbx
.text:0000000000005457                 call    ___fpending
.text:000000000000545C                 mov     ebx, [rbp+0]
.text:000000000000545F                 mov     rdi, rbp        ; stream
.text:0000000000005462                 mov     r12, rax
.text:0000000000005465                 call    rpl_fclose
.text:000000000000546A                 and     ebx, 20h
.text:000000000000546D                 test    ebx, ebx
.text:000000000000546F                 jnz     short loc_5488
.text:0000000000005471                 test    eax, eax
.text:0000000000005473                 jz      short loc_547F
.text:0000000000005475                 test    r12, r12
.text:0000000000005478                 mov     eax, 0FFFFFFFFh
.text:000000000000547D                 jz      short loc_54B8
.text:000000000000547F
.text:000000000000547F loc_547F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000547F                 pop     rbx
.text:0000000000005480                 pop     rbp
.text:0000000000005481                 pop     r12
.text:0000000000005483                 retn
.text:0000000000005483 ; ---------------------------------------------------------------------------
.text:0000000000005484                 align 8
.text:0000000000005488
.text:0000000000005488 loc_5488:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005488                 test    eax, eax
.text:000000000000548A                 jnz     short loc_54A8
.text:000000000000548C                 call    ___errno_location
.text:0000000000005491                 mov     dword ptr [rax], 0
.text:0000000000005497                 mov     eax, 0FFFFFFFFh
.text:000000000000549C                 pop     rbx
.text:000000000000549D                 pop     rbp
.text:000000000000549E                 pop     r12
.text:00000000000054A0                 retn
.text:00000000000054A0 ; ---------------------------------------------------------------------------
.text:00000000000054A1                 align 8
.text:00000000000054A8
.text:00000000000054A8 loc_54A8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000054A8                 pop     rbx
.text:00000000000054A9                 mov     eax, 0FFFFFFFFh
.text:00000000000054AE                 pop     rbp
.text:00000000000054AF                 pop     r12
.text:00000000000054B1                 retn
.text:00000000000054B1 ; ---------------------------------------------------------------------------
.text:00000000000054B2                 align 8
.text:00000000000054B8
.text:00000000000054B8 loc_54B8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000054B8                 call    ___errno_location
.text:00000000000054BD                 cmp     dword ptr [rax], 9
.text:00000000000054C0                 pop     rbx
.text:00000000000054C1                 pop     rbp
.text:00000000000054C2                 pop     r12
.text:00000000000054C4                 setnz   al
.text:00000000000054C7                 movzx   eax, al
.text:00000000000054CA                 neg     eax
.text:00000000000054CC                 retn
.text:00000000000054CC ; } // starts at 5450
.text:00000000000054CC close_stream    endp
.text:00000000000054CC
.text:00000000000054CC ; ---------------------------------------------------------------------------
.text:00000000000054CD                 align 10h
.text:00000000000054D0
.text:00000000000054D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054D0
.text:00000000000054D0
.text:00000000000054D0                 public hard_locale
.text:00000000000054D0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000054D0 ; __unwind {
.text:00000000000054D0                 sub     rsp, 8
.text:00000000000054D4                 xor     esi, esi        ; locale
.text:00000000000054D6                 call    _setlocale
.text:00000000000054DB                 mov     rdx, rax
.text:00000000000054DE                 mov     eax, 1
.text:00000000000054E3                 test    rdx, rdx
.text:00000000000054E6                 jz      short loc_5505
.text:00000000000054E8                 lea     rdi, aC         ; "C"
.text:00000000000054EF                 mov     ecx, 2
.text:00000000000054F4                 mov     rsi, rdx
.text:00000000000054F7                 repe cmpsb
.text:00000000000054F9                 setnbe  cl
.text:00000000000054FC                 sbb     cl, 0
.text:00000000000054FF                 xor     eax, eax
.text:0000000000005501                 test    cl, cl
.text:0000000000005503                 jnz     short loc_5510
.text:0000000000005505
.text:0000000000005505 loc_5505:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005505                 add     rsp, 8
.text:0000000000005509                 retn
.text:0000000000005509 ; ---------------------------------------------------------------------------
.text:000000000000550A                 align 10h
.text:0000000000005510
.text:0000000000005510 loc_5510:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005510                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005517                 mov     ecx, 6
.text:000000000000551C                 mov     rsi, rdx
.text:000000000000551F                 repe cmpsb
.text:0000000000005521                 setnbe  al
.text:0000000000005524                 sbb     al, 0
.text:0000000000005526                 test    al, al
.text:0000000000005528                 setnz   al
.text:000000000000552B                 add     rsp, 8
.text:000000000000552F                 retn
.text:000000000000552F ; } // starts at 54D0
.text:000000000000552F hard_locale     endp
.text:000000000000552F
.text:0000000000005530
.text:0000000000005530 ; =============== S U B R O U T I N E =======================================
.text:0000000000005530
.text:0000000000005530
.text:0000000000005530                 public locale_charset
.text:0000000000005530 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005530 ; __unwind {
.text:0000000000005530                 sub     rsp, 8
.text:0000000000005534                 mov     edi, 0Eh        ; item
.text:0000000000005539                 call    _nl_langinfo
.text:000000000000553E                 test    rax, rax
.text:0000000000005541                 jz      short loc_5560
.text:0000000000005543                 cmp     byte ptr [rax], 0
.text:0000000000005546                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000554D                 cmovz   rax, rdx
.text:0000000000005551                 add     rsp, 8
.text:0000000000005555                 retn
.text:0000000000005555 ; ---------------------------------------------------------------------------
.text:0000000000005556                 align 20h
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005560                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005567                 add     rsp, 8
.text:000000000000556B                 retn
.text:000000000000556B ; } // starts at 5530
.text:000000000000556B locale_charset  endp
.text:000000000000556B
.text:000000000000556B ; ---------------------------------------------------------------------------
.text:000000000000556C                 align 10h
.text:0000000000005570
.text:0000000000005570 ; =============== S U B R O U T I N E =======================================
.text:0000000000005570
.text:0000000000005570 ; Attributes: info_from_lumina
.text:0000000000005570
.text:0000000000005570 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005570                 public rpl_fclose
.text:0000000000005570 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000005570 ; __unwind {
.text:0000000000005570                 push    r12
.text:0000000000005572                 push    rbp
.text:0000000000005573                 push    rbx
.text:0000000000005574                 mov     rbx, rdi
.text:0000000000005577                 call    _fileno
.text:000000000000557C                 test    eax, eax
.text:000000000000557E                 mov     rdi, rbx        ; fp
.text:0000000000005581                 js      short loc_55D7
.text:0000000000005583                 call    ___freading
.text:0000000000005588                 test    eax, eax
.text:000000000000558A                 jnz     short loc_55B8
.text:000000000000558C
.text:000000000000558C loc_558C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000558C                 mov     rdi, rbx        ; stream
.text:000000000000558F                 call    rpl_fflush
.text:0000000000005594                 test    eax, eax
.text:0000000000005596                 jz      short loc_55D4
.text:0000000000005598                 call    ___errno_location
.text:000000000000559D                 mov     r12d, [rax]
.text:00000000000055A0                 mov     rdi, rbx        ; stream
.text:00000000000055A3                 mov     rbp, rax
.text:00000000000055A6                 call    _fclose
.text:00000000000055AB                 test    r12d, r12d
.text:00000000000055AE                 jnz     short loc_55E0
.text:00000000000055B0
.text:00000000000055B0 loc_55B0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000055B0                 pop     rbx
.text:00000000000055B1                 pop     rbp
.text:00000000000055B2                 pop     r12
.text:00000000000055B4                 retn
.text:00000000000055B4 ; ---------------------------------------------------------------------------
.text:00000000000055B5                 align 8
.text:00000000000055B8
.text:00000000000055B8 loc_55B8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000055B8                 mov     rdi, rbx        ; stream
.text:00000000000055BB                 call    _fileno
.text:00000000000055C0                 xor     esi, esi        ; offset
.text:00000000000055C2                 mov     edx, 1          ; whence
.text:00000000000055C7                 mov     edi, eax        ; fd
.text:00000000000055C9                 call    _lseek
.text:00000000000055CE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000055D2                 jnz     short loc_558C
.text:00000000000055D4
.text:00000000000055D4 loc_55D4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000055D4                 mov     rdi, rbx        ; stream
.text:00000000000055D7
.text:00000000000055D7 loc_55D7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000055D7                 pop     rbx
.text:00000000000055D8                 pop     rbp
.text:00000000000055D9                 pop     r12
.text:00000000000055DB                 jmp     _fclose
.text:00000000000055E0 ; ---------------------------------------------------------------------------
.text:00000000000055E0
.text:00000000000055E0 loc_55E0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000055E0                 mov     [rbp+0], r12d
.text:00000000000055E4                 mov     eax, 0FFFFFFFFh
.text:00000000000055E9                 jmp     short loc_55B0
.text:00000000000055E9 ; } // starts at 5570
.text:00000000000055E9 rpl_fclose      endp
.text:00000000000055E9
.text:00000000000055E9 ; ---------------------------------------------------------------------------
.text:00000000000055EB                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0 ; Attributes: info_from_lumina
.text:00000000000055F0
.text:00000000000055F0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000055F0                 public rpl_fflush
.text:00000000000055F0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 test    rdi, rdi
.text:00000000000055F3                 push    rbx
.text:00000000000055F4                 mov     rbx, rdi
.text:00000000000055F7                 jz      short loc_560A
.text:00000000000055F9                 call    ___freading
.text:00000000000055FE                 test    eax, eax
.text:0000000000005600                 jz      short loc_560A
.text:0000000000005602                 test    dword ptr [rbx], 100h
.text:0000000000005608                 jnz     short loc_5618
.text:000000000000560A
.text:000000000000560A loc_560A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000560A                                         ; rpl_fflush+10↑j
.text:000000000000560A                 mov     rdi, rbx        ; stream
.text:000000000000560D                 pop     rbx
.text:000000000000560E                 jmp     _fflush
.text:000000000000560E ; ---------------------------------------------------------------------------
.text:0000000000005613                 align 8
.text:0000000000005618
.text:0000000000005618 loc_5618:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005618                 mov     rdi, rbx
.text:000000000000561B                 mov     edx, 1
.text:0000000000005620                 xor     esi, esi
.text:0000000000005622                 call    rpl_fseeko
.text:0000000000005627                 mov     rdi, rbx        ; stream
.text:000000000000562A                 pop     rbx
.text:000000000000562B                 jmp     _fflush
.text:000000000000562B ; } // starts at 55F0
.text:000000000000562B rpl_fflush      endp
.text:000000000000562B
.text:0000000000005630
.text:0000000000005630 ; =============== S U B R O U T I N E =======================================
.text:0000000000005630
.text:0000000000005630 ; Attributes: info_from_lumina
.text:0000000000005630
.text:0000000000005630 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005630                 public rpl_fseeko
.text:0000000000005630 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005630 ; __unwind {
.text:0000000000005630                 mov     rax, [rdi+8]
.text:0000000000005634                 cmp     [rdi+10h], rax
.text:0000000000005638                 jz      short loc_5640
.text:000000000000563A
.text:000000000000563A loc_563A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000563A                                         ; rpl_fseeko+1F↓j
.text:000000000000563A                 jmp     _fseeko
.text:000000000000563A ; ---------------------------------------------------------------------------
.text:000000000000563F                 align 20h
.text:0000000000005640
.text:0000000000005640 loc_5640:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005640                 mov     rax, [rdi+20h]
.text:0000000000005644                 cmp     [rdi+28h], rax
.text:0000000000005648                 jnz     short loc_563A
.text:000000000000564A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000564F                 jnz     short loc_563A
.text:0000000000005651                 push    r12
.text:0000000000005653                 push    rbp
.text:0000000000005654                 mov     r12d, edx
.text:0000000000005657                 push    rbx
.text:0000000000005658                 mov     rbp, rsi
.text:000000000000565B                 mov     rbx, rdi
.text:000000000000565E                 call    _fileno
.text:0000000000005663                 mov     edx, r12d       ; whence
.text:0000000000005666                 mov     rsi, rbp        ; offset
.text:0000000000005669                 mov     edi, eax        ; fd
.text:000000000000566B                 call    _lseek
.text:0000000000005670                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005674                 jz      short loc_5682
.text:0000000000005676                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005679                 mov     [rbx+90h], rax
.text:0000000000005680                 xor     eax, eax
.text:0000000000005682
.text:0000000000005682 loc_5682:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005682                 pop     rbx
.text:0000000000005683                 pop     rbp
.text:0000000000005684                 pop     r12
.text:0000000000005686                 retn
.text:0000000000005686 ; } // starts at 5630
.text:0000000000005686 rpl_fseeko      endp
.text:0000000000005686
.text:0000000000005686 ; ---------------------------------------------------------------------------
.text:0000000000005687                 align 10h
.text:0000000000005690
.text:0000000000005690 ; =============== S U B R O U T I N E =======================================
.text:0000000000005690
.text:0000000000005690 ; Attributes: info_from_lumina
.text:0000000000005690
.text:0000000000005690 ; void _libc_csu_init(void)
.text:0000000000005690                 public __libc_csu_init
.text:0000000000005690 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005690 ; __unwind {
.text:0000000000005690                 push    r15
.text:0000000000005692                 push    r14
.text:0000000000005694                 mov     r15, rdx
.text:0000000000005697                 push    r13
.text:0000000000005699                 push    r12
.text:000000000000569B                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000056A2                 push    rbp
.text:00000000000056A3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000056AA                 push    rbx
.text:00000000000056AB                 mov     r13d, edi
.text:00000000000056AE                 mov     r14, rsi
.text:00000000000056B1                 sub     rbp, r12
.text:00000000000056B4                 sub     rsp, 8
.text:00000000000056B8                 sar     rbp, 3
.text:00000000000056BC                 call    _init_proc
.text:00000000000056C1                 test    rbp, rbp
.text:00000000000056C4                 jz      short loc_56E6
.text:00000000000056C6                 xor     ebx, ebx
.text:00000000000056C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000056D0
.text:00000000000056D0 loc_56D0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000056D0                 mov     rdx, r15
.text:00000000000056D3                 mov     rsi, r14
.text:00000000000056D6                 mov     edi, r13d
.text:00000000000056D9                 call    ds:(__frame_dummy_init_array_entry - 207B90h)[r12+rbx*8]
.text:00000000000056DD                 add     rbx, 1
.text:00000000000056E1                 cmp     rbp, rbx
.text:00000000000056E4                 jnz     short loc_56D0
.text:00000000000056E6
.text:00000000000056E6 loc_56E6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000056E6                 add     rsp, 8
.text:00000000000056EA                 pop     rbx
.text:00000000000056EB                 pop     rbp
.text:00000000000056EC                 pop     r12
.text:00000000000056EE                 pop     r13
.text:00000000000056F0                 pop     r14
.text:00000000000056F2                 pop     r15
.text:00000000000056F4                 retn
.text:00000000000056F4 ; } // starts at 5690
.text:00000000000056F4 __libc_csu_init endp
.text:00000000000056F4
.text:00000000000056F4 ; ---------------------------------------------------------------------------
.text:00000000000056F5                 align 20h
.text:0000000000005700
.text:0000000000005700 ; =============== S U B R O U T I N E =======================================
.text:0000000000005700
.text:0000000000005700
.text:0000000000005700 ; void _libc_csu_fini(void)
.text:0000000000005700                 public __libc_csu_fini
.text:0000000000005700 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005700 ; __unwind {
.text:0000000000005700                 rep retn
.text:0000000000005700 ; } // starts at 5700
.text:0000000000005700 __libc_csu_fini endp
.text:0000000000005700
.text:0000000000005700 ; ---------------------------------------------------------------------------
.text:0000000000005702                 align 10h
.text:0000000000005710
.text:0000000000005710 ; =============== S U B R O U T I N E =======================================
.text:0000000000005710
.text:0000000000005710
.text:0000000000005710 atexit          proc near               ; CODE XREF: main+5A↑p
.text:0000000000005710 ; __unwind {
.text:0000000000005710                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005717                 xor     esi, esi        ; obj
.text:0000000000005719                 jmp     ___cxa_atexit
.text:0000000000005719 ; } // starts at 5710
.text:0000000000005719 atexit          endp
.text:0000000000005719
.text:0000000000005719 _text           ends
.text:0000000000005719
LOAD:000000000000571E ; ===========================================================================
LOAD:000000000000571E
LOAD:000000000000571E ; Segment type: Pure code
LOAD:000000000000571E ; Segment permissions: Read/Execute
LOAD:000000000000571E LOAD            segment byte public 'CODE' use64
LOAD:000000000000571E                 assume cs:LOAD
LOAD:000000000000571E                 ;org 571Eh
LOAD:000000000000571E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000571E                 align 20h
LOAD:000000000000571E LOAD            ends
LOAD:000000000000571E
.fini:0000000000005720 ; ===========================================================================
.fini:0000000000005720
.fini:0000000000005720 ; Segment type: Pure code
.fini:0000000000005720 ; Segment permissions: Read/Execute
.fini:0000000000005720 _fini           segment dword public 'CODE' use64
.fini:0000000000005720                 assume cs:_fini
.fini:0000000000005720                 ;org 5720h
.fini:0000000000005720                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005720
.fini:0000000000005720 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005720
.fini:0000000000005720
.fini:0000000000005720                 public _term_proc
.fini:0000000000005720 _term_proc      proc near
.fini:0000000000005720                 sub     rsp, 8          ; _fini
.fini:0000000000005724                 add     rsp, 8
.fini:0000000000005728                 retn
.fini:0000000000005728 _term_proc      endp
.fini:0000000000005728
.fini:0000000000005728 _fini           ends
.fini:0000000000005728
LOAD:0000000000005729 ; ===========================================================================
LOAD:0000000000005729
LOAD:0000000000005729 ; Segment type: Pure code
LOAD:0000000000005729 ; Segment permissions: Read/Execute
LOAD:0000000000005729 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005729                 assume cs:LOAD
LOAD:0000000000005729                 ;org 5729h
LOAD:0000000000005729                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005729                 align 20h
LOAD:0000000000005729 LOAD            ends
LOAD:0000000000005729
.rodata:0000000000005740 ; ===========================================================================
.rodata:0000000000005740
.rodata:0000000000005740 ; Segment type: Pure data
.rodata:0000000000005740 ; Segment permissions: Read
.rodata:0000000000005740 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005740                 assume cs:_rodata
.rodata:0000000000005740                 ;org 5740h
.rodata:0000000000005740                 public _IO_stdin_used
.rodata:0000000000005740 _IO_stdin_used  db    1
.rodata:0000000000005741                 db    0
.rodata:0000000000005742                 db    2
.rodata:0000000000005743                 db    0
.rodata:0000000000005744 aGetlimits      db 'getlimits',0        ; DATA XREF: main+80↑o
.rodata:0000000000005744                                         ; usage+E7↑o ...
.rodata:000000000000574E ; const char aUsageS[]
.rodata:000000000000574E aUsageS         db 'Usage: %s',0Ah,0    ; DATA XREF: usage:loc_236D↑o
.rodata:0000000000005759 asc_5759        db '[',0                ; DATA XREF: usage+F3↑o
.rodata:000000000000575B aTestInvocation db 'test invocation',0  ; DATA XREF: usage+11A↑o
.rodata:000000000000576B aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000576B                                         ; DATA XREF: usage+14A↑o
.rodata:000000000000576B                                         ; usage+244↑o ...
.rodata:0000000000005781 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+15B↑o
.rodata:000000000000578B aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+167↑o
.rodata:000000000000579A aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+FA↑o
.rodata:00000000000057A4 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+126↑o
.rodata:00000000000057AE aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+13E↑o
.rodata:00000000000057B8 ; const char aSOnlineHelpS[]
.rodata:00000000000057B8 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:00000000000057B8                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000057CF unk_57CF        db  47h ; G             ; DATA XREF: main+78↑o
.rodata:00000000000057CF                                         ; usage+1CE↑o ...
.rodata:00000000000057D0                 db  4Eh ; N
.rodata:00000000000057D1                 db  55h ; U
.rodata:00000000000057D2                 db  20h
.rodata:00000000000057D3 ; const char domainname[]
.rodata:00000000000057D3 domainname      db 'coreutils',0        ; DATA XREF: main+3B↑o
.rodata:00000000000057D3                                         ; main+47↑o ...
.rodata:00000000000057DD ; const char s2[]
.rodata:00000000000057DD s2              db 'en_',0              ; DATA XREF: usage+1F5↑o
.rodata:00000000000057DD                                         ; usage+2B6↑o
.rodata:00000000000057E1 ; const char aFullDocumentat[]
.rodata:00000000000057E1 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000057E1                                         ; DATA XREF: usage:loc_2521↑o
.rodata:00000000000057E1                                         ; usage:loc_25DE↑o
.rodata:00000000000057FC ; const char dirname[]
.rodata:00000000000057FC dirname         db '/usr/local/share/locale',0
.rodata:00000000000057FC                                         ; DATA XREF: main+34↑o
.rodata:0000000000005814 a831            db '8.31',0             ; DATA XREF: main+71↑o
.rodata:0000000000005819 aPadraigBrady   db 'Padraig Brady',0    ; DATA XREF: main+5F↑o
.rodata:0000000000005827 aLu             db '%lu',0              ; DATA XREF: main+9A↑o
.rodata:0000000000005827                                         ; main+145↑o ...
.rodata:000000000000582B aLd             db '%ld',0              ; DATA XREF: main+EF↑o
.rodata:000000000000582B                                         ; main+19A↑o ...
.rodata:000000000000582F unk_582F        db  53h ; S             ; DATA XREF: main+166↑o
.rodata:0000000000005830 aCharMaxS       db 'CHAR_MAX=%s',0Ah,0  ; DATA XREF: main+BB↑o
.rodata:000000000000583D unk_583D        db  53h ; S             ; DATA XREF: main+184↑o
.rodata:000000000000583E aCharOflowS     db 'CHAR_OFLOW=%s',0Ah,0
.rodata:000000000000583E                                         ; DATA XREF: main+D9↑o
.rodata:000000000000584D unk_584D        db  53h ; S             ; DATA XREF: main+1BC↑o
.rodata:000000000000584E aCharMinS       db 'CHAR_MIN=%s',0Ah,0  ; DATA XREF: main+111↑o
.rodata:000000000000585B unk_585B        db  53h ; S             ; DATA XREF: main+1DA↑o
.rodata:000000000000585C aCharUflowS     db 'CHAR_UFLOW=%s',0Ah,0
.rodata:000000000000585C                                         ; DATA XREF: main+12F↑o
.rodata:000000000000586B aUcharMaxS      db 'UCHAR_MAX=%s',0Ah,0 ; DATA XREF: main+211↑o
.rodata:0000000000005879 aUcharOflowS    db 'UCHAR_OFLOW=%s',0Ah,0
.rodata:0000000000005879                                         ; DATA XREF: main+22F↑o
.rodata:0000000000005889 aShrtMaxS       db 'SHRT_MAX=%s',0Ah,0  ; DATA XREF: main+266↑o
.rodata:0000000000005896 aShrtOflowS     db 'SHRT_OFLOW=%s',0Ah,0
.rodata:0000000000005896                                         ; DATA XREF: main+284↑o
.rodata:00000000000058A5 aShrtMinS       db 'SHRT_MIN=%s',0Ah,0  ; DATA XREF: main+2BC↑o
.rodata:00000000000058B2 aShrtUflowS     db 'SHRT_UFLOW=%s',0Ah,0
.rodata:00000000000058B2                                         ; DATA XREF: main+2DA↑o
.rodata:00000000000058C1 aIntMinS        db 'INT_MIN=%s',0Ah,0   ; DATA XREF: main+367↑o
.rodata:00000000000058CD aIntUflowS      db 'INT_UFLOW=%s',0Ah,0 ; DATA XREF: main+385↑o
.rodata:00000000000058DB unk_58DB        db  55h ; U             ; DATA XREF: main+3BC↑o
.rodata:00000000000058DC aIntMaxS        db 'INT_MAX=%s',0Ah,0   ; DATA XREF: main+311↑o
.rodata:00000000000058E8 unk_58E8        db  55h ; U             ; DATA XREF: main+3DA↑o
.rodata:00000000000058E9 aIntOflowS      db 'INT_OFLOW=%s',0Ah,0 ; DATA XREF: main+32F↑o
.rodata:00000000000058F7 aLongMinS       db 'LONG_MIN=%s',0Ah,0  ; DATA XREF: main+46E↑o
.rodata:0000000000005904 aLongUflowS     db 'LONG_UFLOW=%s',0Ah,0
.rodata:0000000000005904                                         ; DATA XREF: main+48C↑o
.rodata:0000000000005913 unk_5913        db  55h ; U             ; DATA XREF: main+4C4↑o
.rodata:0000000000005914 aLongMaxS       db 'LONG_MAX=%s',0Ah,0  ; DATA XREF: main+415↑o
.rodata:0000000000005921 unk_5921        db  55h ; U             ; DATA XREF: main+4E2↑o
.rodata:0000000000005922 aLongOflowS     db 'LONG_OFLOW=%s',0Ah,0
.rodata:0000000000005922                                         ; DATA XREF: main+433↑o
.rodata:0000000000005931 unk_5931        db  53h ; S             ; DATA XREF: main+573↑o
.rodata:0000000000005932 aSizeMaxS       db 'SIZE_MAX=%s',0Ah,0  ; DATA XREF: main+51A↑o
.rodata:000000000000593F unk_593F        db  53h ; S             ; DATA XREF: main+591↑o
.rodata:0000000000005940 aSizeOflowS     db 'SIZE_OFLOW=%s',0Ah,0
.rodata:0000000000005940                                         ; DATA XREF: main+538↑o
.rodata:000000000000594F aSsizeMinS      db 'SSIZE_MIN=%s',0Ah,0 ; DATA XREF: main+5CC↑o
.rodata:000000000000595D aSsizeUflowS    db 'SSIZE_UFLOW=%s',0Ah,0
.rodata:000000000000595D                                         ; DATA XREF: main+5EA↑o
.rodata:000000000000596D aTimeTMaxS      db 'TIME_T_MAX=%s',0Ah,0
.rodata:000000000000596D                                         ; DATA XREF: main+625↑o
.rodata:000000000000597C aTimeTOflowS    db 'TIME_T_OFLOW=%s',0Ah,0
.rodata:000000000000597C                                         ; DATA XREF: main+643↑o
.rodata:000000000000598D aTimeTMinS      db 'TIME_T_MIN=%s',0Ah,0
.rodata:000000000000598D                                         ; DATA XREF: main+67E↑o
.rodata:000000000000599C aTimeTUflowS    db 'TIME_T_UFLOW=%s',0Ah,0
.rodata:000000000000599C                                         ; DATA XREF: main+69C↑o
.rodata:00000000000059AD aUidTMaxS       db 'UID_T_MAX=%s',0Ah,0 ; DATA XREF: main+6D3↑o
.rodata:00000000000059BB aUidTOflowS     db 'UID_T_OFLOW=%s',0Ah,0
.rodata:00000000000059BB                                         ; DATA XREF: main+6F1↑o
.rodata:00000000000059CB aGidTMaxS       db 'GID_T_MAX=%s',0Ah,0 ; DATA XREF: main+728↑o
.rodata:00000000000059D9 aGidTOflowS     db 'GID_T_OFLOW=%s',0Ah,0
.rodata:00000000000059D9                                         ; DATA XREF: main+746↑o
.rodata:00000000000059E9 aPidTMaxS       db 'PID_T_MAX=%s',0Ah,0 ; DATA XREF: main+77D↑o
.rodata:00000000000059F7 aPidTOflowS     db 'PID_T_OFLOW=%s',0Ah,0
.rodata:00000000000059F7                                         ; DATA XREF: main+79B↑o
.rodata:0000000000005A07 aPidTMinS       db 'PID_T_MIN=%s',0Ah,0 ; DATA XREF: main+7D3↑o
.rodata:0000000000005A15 aPidTUflowS     db 'PID_T_UFLOW=%s',0Ah,0
.rodata:0000000000005A15                                         ; DATA XREF: main+7F1↑o
.rodata:0000000000005A25 aOffTMaxS       db 'OFF_T_MAX=%s',0Ah,0 ; DATA XREF: main+82C↑o
.rodata:0000000000005A33 aOffTOflowS     db 'OFF_T_OFLOW=%s',0Ah,0
.rodata:0000000000005A33                                         ; DATA XREF: main+84A↑o
.rodata:0000000000005A43 aOffTMinS       db 'OFF_T_MIN=%s',0Ah,0 ; DATA XREF: main+885↑o
.rodata:0000000000005A51 aOffTUflowS     db 'OFF_T_UFLOW=%s',0Ah,0
.rodata:0000000000005A51                                         ; DATA XREF: main+8A3↑o
.rodata:0000000000005A61 aIntmaxMinS     db 'INTMAX_MIN=%s',0Ah,0
.rodata:0000000000005A61                                         ; DATA XREF: main+937↑o
.rodata:0000000000005A70 aIntmaxUflowS   db 'INTMAX_UFLOW=%s',0Ah,0
.rodata:0000000000005A70                                         ; DATA XREF: main+955↑o
.rodata:0000000000005A81 unk_5A81        db  55h ; U             ; DATA XREF: main+98D↑o
.rodata:0000000000005A82 aIntmaxMaxS     db 'INTMAX_MAX=%s',0Ah,0
.rodata:0000000000005A82                                         ; DATA XREF: main+8DE↑o
.rodata:0000000000005A91 unk_5A91        db  55h ; U             ; DATA XREF: main+9AB↑o
.rodata:0000000000005A92 aIntmaxOflowS   db 'INTMAX_OFLOW=%s',0Ah,0
.rodata:0000000000005A92                                         ; DATA XREF: main+8FC↑o
.rodata:0000000000005AA3 aFltMin         db 'FLT_MIN=',0         ; DATA XREF: main+9C1↑o
.rodata:0000000000005AAC aFltMax         db 'FLT_MAX=',0         ; DATA XREF: main+9E1↑o
.rodata:0000000000005AB5 unk_5AB5        db  4Ch ; L             ; DATA XREF: main+A41↑o
.rodata:0000000000005AB6 aDblMin         db 'DBL_MIN=',0         ; DATA XREF: main+A01↑o
.rodata:0000000000005ABF unk_5ABF        db  4Ch ; L             ; DATA XREF: main+A66↑o
.rodata:0000000000005AC0 aDblMax         db 'DBL_MAX=',0         ; DATA XREF: main+A21↑o
.rodata:0000000000005AC9                 align 10h
.rodata:0000000000005AD0 ; const char msgid[]
.rodata:0000000000005AD0 msgid           db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005AD0                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005AF7                 align 8
.rodata:0000000000005AF8 ; const char aOutputPlatform[]
.rodata:0000000000005AF8 aOutputPlatform db 'Output platform dependent limits in a format useful for shell scr'
.rodata:0000000000005AF8                                         ; DATA XREF: usage+84↑o
.rodata:0000000000005AF8                 db 'ipts.',0Ah
.rodata:0000000000005AF8                 db 0Ah,0
.rodata:0000000000005B41                 align 8
.rodata:0000000000005B48 ; const char aHelpDisplayThi[]
.rodata:0000000000005B48 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005B48                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000005B75                 align 8
.rodata:0000000000005B78 ; const char aVersionOutputV[]
.rodata:0000000000005B78 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005B78                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000005BAE                 align 10h
.rodata:0000000000005BB0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005BB0                                         ; DATA XREF: usage+1C7↑o
.rodata:0000000000005BB0                                         ; usage+22B↑o ...
.rodata:0000000000005BD8 ; const char aReportAnyTrans[]
.rodata:0000000000005BD8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005BD8                                         ; DATA XREF: usage+31F↑o
.rodata:0000000000005BD8                 db 'am/>',0Ah,0
.rodata:0000000000005C1F                 align 20h
.rodata:0000000000005C20 ; const char aOrAvailableLoc[]
.rodata:0000000000005C20 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005C20                                         ; DATA XREF: usage:loc_2566↑o
.rodata:0000000000005C53                 align 4
.rodata:0000000000005C54 dword_5C54      dd 800000h              ; DATA XREF: main+9D4↑r
.rodata:0000000000005C54                                         ; ftoastr+86↑r
.rodata:0000000000005C58 dword_5C58      dd 7F7FFFFFh            ; DATA XREF: main+9F4↑r
.rodata:0000000000005C5C                 align 20h
.rodata:0000000000005C60 qword_5C60      dq 10000000000000h      ; DATA XREF: main+A14↑r
.rodata:0000000000005C60                                         ; dtoastr+77↑r
.rodata:0000000000005C68 qword_5C68      dq 7FEFFFFFFFFFFFFFh    ; DATA XREF: main+A34↑r
.rodata:0000000000005C70 ; const char aWriteError[]
.rodata:0000000000005C70 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_26C3↑o
.rodata:0000000000005C7C ; const char format[]
.rodata:0000000000005C7C format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005C7C                                         ; close_stdout+8F↑o ...
.rodata:0000000000005C83                 align 10h
.rodata:0000000000005C90 xmmword_5C90    xmmword 8000000000000000h
.rodata:0000000000005C90                                         ; DATA XREF: dtoastr+154↑r
.rodata:0000000000005CA0 xmmword_5CA0    xmmword 80000000h       ; DATA XREF: ftoastr+15B↑r
.rodata:0000000000005CB0 tbyte_5CB0      dt 3.3621031431120935063e-4932
.rodata:0000000000005CB0                                         ; DATA XREF: ldtoastr+81↑r
.rodata:0000000000005CBA                 align 20h
.rodata:0000000000005CC0 ; const char shortopts[2]
.rodata:0000000000005CC0 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000005CC0                                         ; parse_gnu_standard_options_only+72↑o
.rodata:0000000000005CC2 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000005CC7 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BC0↓o
.rodata:0000000000005CCF                 align 10h
.rodata:0000000000005CD0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005CD0                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005D08 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005D10 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000005D14 unk_5D14        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000005D15                 db  80h
.rodata:0000000000005D16                 db  98h
.rodata:0000000000005D17                 db    0
.rodata:0000000000005D18 unk_5D18        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005D19                 db  80h
.rodata:0000000000005D1A                 db  99h
.rodata:0000000000005D1B                 db    0
.rodata:0000000000005D1C unk_5D1C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005D1D                 db    7
.rodata:0000000000005D1E                 db  65h ; e
.rodata:0000000000005D1F                 db    0
.rodata:0000000000005D20 unk_5D20        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005D21                 db 0AFh
.rodata:0000000000005D22                 db    0
.rodata:0000000000005D23 unk_5D23        db  22h ; "             ; DATA XREF: gettext_quote:loc_2EA0↑o
.rodata:0000000000005D23                                         ; quotearg_buffer_restyled:loc_3C5B↑o ...
.rodata:0000000000005D24                 db    0
.rodata:0000000000005D25 ; const char asc_5D25[2]
.rodata:0000000000005D25 asc_5D25        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000005D25                                         ; quotearg_buffer_restyled:loc_3023↑o ...
.rodata:0000000000005D27 ; const char asc_5D27[2]
.rodata:0000000000005D27 asc_5D27        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000005D27                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005D29 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005D31 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:0000000000005D37 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:0000000000005D44 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005D44                                         ; .data.rel.ro:0000000000207C38↓o
.rodata:0000000000005D51 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005D51                                         ; DATA XREF: .data.rel.ro:0000000000207C20↓o
.rodata:0000000000005D65 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:0000000000005D67 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C30↓o
.rodata:0000000000005D6F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C48↓o
.rodata:0000000000005D77                 align 20h
.rodata:0000000000005D80 jpt_3001        dd offset loc_3DAA - 5D80h
.rodata:0000000000005D80                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005D80                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005D80                 dd offset loc_3003 - 5D80h ; jump table for switch statement
.rodata:0000000000005D80                 dd offset loc_3FD8 - 5D80h
.rodata:0000000000005D80                 dd offset loc_3DE4 - 5D80h
.rodata:0000000000005D80                 dd offset loc_3BD4 - 5D80h
.rodata:0000000000005D80                 dd offset loc_3C30 - 5D80h
.rodata:0000000000005D80                 dd offset loc_3C85 - 5D80h
.rodata:0000000000005D80                 dd offset loc_3CCA - 5D80h
.rodata:0000000000005D80                 dd offset loc_3D04 - 5D80h
.rodata:0000000000005D80                 dd offset loc_3D04 - 5D80h
.rodata:0000000000005D80                 dd offset loc_3D04 - 5D80h
.rodata:0000000000005DAC jpt_315E        dd offset loc_3380 - 5DACh, offset def_315E - 5DACh, offset def_315E - 5DACh
.rodata:0000000000005DAC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000005DAC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000005DAC                 dd offset def_315E - 5DACh, offset def_315E - 5DACh, offset def_315E - 5DACh ; jump table for switch statement
.rodata:0000000000005DAC                 dd offset def_315E - 5DACh, offset loc_33C0 - 5DACh, offset loc_32C8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3288 - 5DACh, offset loc_3450 - 5DACh, offset loc_3440 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3430 - 5DACh, offset loc_3420 - 5DACh, offset def_315E - 5DACh
.rodata:0000000000005DAC                 dd offset def_315E - 5DACh, offset def_315E - 5DACh, offset def_315E - 5DACh
.rodata:0000000000005DAC                 dd offset def_315E - 5DACh, offset def_315E - 5DACh, offset def_315E - 5DACh
.rodata:0000000000005DAC                 dd offset def_315E - 5DACh, offset def_315E - 5DACh, offset def_315E - 5DACh
.rodata:0000000000005DAC                 dd offset def_315E - 5DACh, offset def_315E - 5DACh, offset def_315E - 5DACh
.rodata:0000000000005DAC                 dd offset def_315E - 5DACh, offset def_315E - 5DACh, offset def_315E - 5DACh
.rodata:0000000000005DAC                 dd offset def_315E - 5DACh, offset def_315E - 5DACh, offset loc_3410 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3400 - 5DACh, offset loc_3400 - 5DACh, offset loc_33D0 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3400 - 5DACh, offset loc_33A8 - 5DACh, offset loc_3400 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3263 - 5DACh, offset loc_3400 - 5DACh, offset loc_3400 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3400 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_3400 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3400 - 5DACh, offset loc_3400 - 5DACh, offset loc_3400 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3233 - 5DACh, offset def_315E - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_3400 - 5DACh, offset loc_32D8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_3400 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3400 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh, offset loc_33A8 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_3163 - 5DACh, offset loc_3400 - 5DACh, offset loc_3163 - 5DACh
.rodata:0000000000005DAC                 dd offset loc_33D0 - 5DACh
.rodata:0000000000005FA8 jpt_34EA        dd offset loc_3550 - 5FA8h, offset def_34EA - 5FA8h, offset def_34EA - 5FA8h
.rodata:0000000000005FA8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005FA8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005FA8                 dd offset def_34EA - 5FA8h, offset def_34EA - 5FA8h, offset def_34EA - 5FA8h ; jump table for switch statement
.rodata:0000000000005FA8                 dd offset def_34EA - 5FA8h, offset loc_3540 - 5FA8h, offset loc_3690 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3678 - 5FA8h, offset loc_3528 - 5FA8h, offset loc_3668 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3510 - 5FA8h, offset loc_3650 - 5FA8h, offset def_34EA - 5FA8h
.rodata:0000000000005FA8                 dd offset def_34EA - 5FA8h, offset def_34EA - 5FA8h, offset def_34EA - 5FA8h
.rodata:0000000000005FA8                 dd offset def_34EA - 5FA8h, offset def_34EA - 5FA8h, offset def_34EA - 5FA8h
.rodata:0000000000005FA8                 dd offset def_34EA - 5FA8h, offset def_34EA - 5FA8h, offset def_34EA - 5FA8h
.rodata:0000000000005FA8                 dd offset def_34EA - 5FA8h, offset def_34EA - 5FA8h, offset def_34EA - 5FA8h
.rodata:0000000000005FA8                 dd offset def_34EA - 5FA8h, offset def_34EA - 5FA8h, offset def_34EA - 5FA8h
.rodata:0000000000005FA8                 dd offset def_34EA - 5FA8h, offset def_34EA - 5FA8h, offset loc_3638 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3620 - 5FA8h, offset loc_3620 - 5FA8h, offset loc_3608 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3620 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_3620 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3260 - 5FA8h, offset loc_3620 - 5FA8h, offset loc_3620 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3620 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_3620 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3620 - 5FA8h, offset loc_3620 - 5FA8h, offset loc_3620 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3230 - 5FA8h, offset def_34EA - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_3620 - 5FA8h, offset loc_34F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_3620 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3620 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h, offset loc_35F0 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3160 - 5FA8h, offset loc_3620 - 5FA8h, offset loc_3160 - 5FA8h
.rodata:0000000000005FA8                 dd offset loc_3608 - 5FA8h
.rodata:00000000000061A4                 align 20h
.rodata:00000000000061C0                 public quoting_style_vals
.rodata:00000000000061C0 quoting_style_vals db    0
.rodata:00000000000061C1                 db    0
.rodata:00000000000061C2                 db    0
.rodata:00000000000061C3                 db    0
.rodata:00000000000061C4                 db    1
.rodata:00000000000061C5                 db    0
.rodata:00000000000061C6                 db    0
.rodata:00000000000061C7                 db    0
.rodata:00000000000061C8                 db    2
.rodata:00000000000061C9                 db    0
.rodata:00000000000061CA                 db    0
.rodata:00000000000061CB                 db    0
.rodata:00000000000061CC                 db    3
.rodata:00000000000061CD                 db    0
.rodata:00000000000061CE                 db    0
.rodata:00000000000061CF                 db    0
.rodata:00000000000061D0                 db    4
.rodata:00000000000061D1                 db    0
.rodata:00000000000061D2                 db    0
.rodata:00000000000061D3                 db    0
.rodata:00000000000061D4                 db    5
.rodata:00000000000061D5                 db    0
.rodata:00000000000061D6                 db    0
.rodata:00000000000061D7                 db    0
.rodata:00000000000061D8                 db    6
.rodata:00000000000061D9                 db    0
.rodata:00000000000061DA                 db    0
.rodata:00000000000061DB                 db    0
.rodata:00000000000061DC                 db    7
.rodata:00000000000061DD                 db    0
.rodata:00000000000061DE                 db    0
.rodata:00000000000061DF                 db    0
.rodata:00000000000061E0                 db    8
.rodata:00000000000061E1                 db    0
.rodata:00000000000061E2                 db    0
.rodata:00000000000061E3                 db    0
.rodata:00000000000061E4                 db    9
.rodata:00000000000061E5                 db    0
.rodata:00000000000061E6                 db    0
.rodata:00000000000061E7                 db    0
.rodata:00000000000061E8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000061F4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000061FB ; const char aC_0[]
.rodata:00000000000061FB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4B4C↑o
.rodata:00000000000061FF ; const char aWrittenByS[]
.rodata:00000000000061FF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000061FF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000620F ; const char aWrittenBySAndS[]
.rodata:000000000000620F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000620F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006226 ; const char aWrittenBySSAnd[]
.rodata:0000000000006226 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006226                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006242 ; const char aReportBugsToS[]
.rodata:0000000000006242 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006242                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006257 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006257                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000626D ; const char aSHomePageS[]
.rodata:000000000000626D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000626D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006281                 align 8
.rodata:0000000000006288 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006288 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006288                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006288                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006288                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006288                 db '.',0Ah
.rodata:0000000000006288                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006288                 db 0Ah,0
.rodata:0000000000006354                 align 8
.rodata:0000000000006358 ; const char aWrittenBySSSAn[]
.rodata:0000000000006358 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006358                                         ; DATA XREF: version_etc_arn:loc_4DA0↑o
.rodata:0000000000006358                 db 'and %s.',0Ah,0
.rodata:0000000000006378 ; const char aWrittenBySSSSA[]
.rodata:0000000000006378 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006378                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000006378                 db '%s, and %s.',0Ah,0
.rodata:000000000000639C                 align 20h
.rodata:00000000000063A0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000063A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000063A0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000063A0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000063C8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000063C8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000063C8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000063C8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000063F4                 align 8
.rodata:00000000000063F8 ; const char aWrittenBySSSSS[]
.rodata:00000000000063F8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000063F8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000063F8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000063F8                 db 'and %s.',0Ah,0
.rodata:0000000000006428 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006428 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006428                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006428                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006428                 db '%s, and %s.',0Ah,0
.rodata:000000000000645C                 align 20h
.rodata:0000000000006460 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006460                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000006460                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006460                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000649C                 align 20h
.rodata:00000000000064A0 ; const char aGeneralHelpUsi[]
.rodata:00000000000064A0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000064A0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000064A0                 db 0
.rodata:00000000000064E1                 align 8
.rodata:00000000000064E8 jpt_4BB4        dd offset loc_4C36 - 64E8h
.rodata:00000000000064E8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000064E8                                         ; version_etc_arn+9D↑r
.rodata:00000000000064E8                 dd offset loc_4CC8 - 64E8h ; jump table for switch statement
.rodata:00000000000064E8                 dd offset loc_4D08 - 64E8h
.rodata:00000000000064E8                 dd offset loc_4D50 - 64E8h
.rodata:00000000000064E8                 dd offset loc_4DA0 - 64E8h
.rodata:00000000000064E8                 dd offset loc_4DF8 - 64E8h
.rodata:00000000000064E8                 dd offset loc_4E28 - 64E8h
.rodata:00000000000064E8                 dd offset loc_4E90 - 64E8h
.rodata:00000000000064E8                 dd offset loc_4BC0 - 64E8h
.rodata:00000000000064E8                 dd offset loc_4C70 - 64E8h
.rodata:0000000000006510                 align 20h
.rodata:0000000000006520                 public version_etc_copyright
.rodata:0000000000006520 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006520                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000654F ; const char aMemoryExhauste[]
.rodata:000000000000654F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000006560 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000006562 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5510↑o
.rodata:0000000000006568 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006568                                         ; locale_charset:loc_5560↑o
.rodata:0000000000006568 _rodata         ends
.rodata:0000000000006568
LOAD:000000000000656E ; ===========================================================================
LOAD:000000000000656E
LOAD:000000000000656E ; Segment type: Pure code
LOAD:000000000000656E ; Segment permissions: Read/Execute
LOAD:000000000000656E LOAD            segment byte public 'CODE' use64
LOAD:000000000000656E                 assume cs:LOAD
LOAD:000000000000656E                 ;org 656Eh
LOAD:000000000000656E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000656E                 align 10h
LOAD:000000000000656E LOAD            ends
LOAD:000000000000656E
.eh_frame_hdr:0000000000006570 ; ===========================================================================
.eh_frame_hdr:0000000000006570
.eh_frame_hdr:0000000000006570 ; Segment type: Pure data
.eh_frame_hdr:0000000000006570 ; Segment permissions: Read
.eh_frame_hdr:0000000000006570 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000006570                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000006570                 ;org 6570h
.eh_frame_hdr:0000000000006570 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000006571                 db  1Bh
.eh_frame_hdr:0000000000006572                 db    3
.eh_frame_hdr:0000000000006573                 db  3Bh ; ;
.eh_frame_hdr:0000000000006574                 db  84h
.eh_frame_hdr:0000000000006575                 db    2
.eh_frame_hdr:0000000000006576                 db    0
.eh_frame_hdr:0000000000006577                 db    0
.eh_frame_hdr:0000000000006578                 db  4Fh ; O
.eh_frame_hdr:0000000000006579                 db    0
.eh_frame_hdr:000000000000657A                 db    0
.eh_frame_hdr:000000000000657B                 db    0
.eh_frame_hdr:000000000000657C                 db  80h
.eh_frame_hdr:000000000000657D                 db 0ADh
.eh_frame_hdr:000000000000657E                 db 0FFh
.eh_frame_hdr:000000000000657F                 db 0FFh
.eh_frame_hdr:0000000000006580                 db 0D0h
.eh_frame_hdr:0000000000006581                 db    2
.eh_frame_hdr:0000000000006582                 db    0
.eh_frame_hdr:0000000000006583                 db    0
.eh_frame_hdr:0000000000006584                 db  60h ; `
.eh_frame_hdr:0000000000006585                 db 0B0h
.eh_frame_hdr:0000000000006586                 db 0FFh
.eh_frame_hdr:0000000000006587                 db 0FFh
.eh_frame_hdr:0000000000006588                 db 0F8h
.eh_frame_hdr:0000000000006589                 db    2
.eh_frame_hdr:000000000000658A                 db    0
.eh_frame_hdr:000000000000658B                 db    0
.eh_frame_hdr:000000000000658C                 db  70h ; p
.eh_frame_hdr:000000000000658D                 db 0B0h
.eh_frame_hdr:000000000000658E                 db 0FFh
.eh_frame_hdr:000000000000658F                 db 0FFh
.eh_frame_hdr:0000000000006590                 db 0DCh
.eh_frame_hdr:0000000000006591                 db    3
.eh_frame_hdr:0000000000006592                 db    0
.eh_frame_hdr:0000000000006593                 db    0
.eh_frame_hdr:0000000000006594                 db  20h
.eh_frame_hdr:0000000000006595                 db 0BBh
.eh_frame_hdr:0000000000006596                 db 0FFh
.eh_frame_hdr:0000000000006597                 db 0FFh
.eh_frame_hdr:0000000000006598                 db 0A0h
.eh_frame_hdr:0000000000006599                 db    2
.eh_frame_hdr:000000000000659A                 db    0
.eh_frame_hdr:000000000000659B                 db    0
.eh_frame_hdr:000000000000659C                 db  30h ; 0
.eh_frame_hdr:000000000000659D                 db 0BCh
.eh_frame_hdr:000000000000659E                 db 0FFh
.eh_frame_hdr:000000000000659F                 db 0FFh
.eh_frame_hdr:00000000000065A0                 db  10h
.eh_frame_hdr:00000000000065A1                 db    3
.eh_frame_hdr:00000000000065A2                 db    0
.eh_frame_hdr:00000000000065A3                 db    0
.eh_frame_hdr:00000000000065A4                 db 0A0h
.eh_frame_hdr:00000000000065A5                 db 0BCh
.eh_frame_hdr:00000000000065A6                 db 0FFh
.eh_frame_hdr:00000000000065A7                 db 0FFh
.eh_frame_hdr:00000000000065A8                 db  38h ; 8
.eh_frame_hdr:00000000000065A9                 db    3
.eh_frame_hdr:00000000000065AA                 db    0
.eh_frame_hdr:00000000000065AB                 db    0
.eh_frame_hdr:00000000000065AC                 db 0F0h
.eh_frame_hdr:00000000000065AD                 db 0BCh
.eh_frame_hdr:00000000000065AE                 db 0FFh
.eh_frame_hdr:00000000000065AF                 db 0FFh
.eh_frame_hdr:00000000000065B0                 db  5Ch ; \
.eh_frame_hdr:00000000000065B1                 db    3
.eh_frame_hdr:00000000000065B2                 db    0
.eh_frame_hdr:00000000000065B3                 db    0
.eh_frame_hdr:00000000000065B4                 db  40h ; @
.eh_frame_hdr:00000000000065B5                 db 0BDh
.eh_frame_hdr:00000000000065B6                 db 0FFh
.eh_frame_hdr:00000000000065B7                 db 0FFh
.eh_frame_hdr:00000000000065B8                 db  80h
.eh_frame_hdr:00000000000065B9                 db    3
.eh_frame_hdr:00000000000065BA                 db    0
.eh_frame_hdr:00000000000065BB                 db    0
.eh_frame_hdr:00000000000065BC                 db 0A0h
.eh_frame_hdr:00000000000065BD                 db 0BDh
.eh_frame_hdr:00000000000065BE                 db 0FFh
.eh_frame_hdr:00000000000065BF                 db 0FFh
.eh_frame_hdr:00000000000065C0                 db 0B0h
.eh_frame_hdr:00000000000065C1                 db    3
.eh_frame_hdr:00000000000065C2                 db    0
.eh_frame_hdr:00000000000065C3                 db    0
.eh_frame_hdr:00000000000065C4                 db 0F0h
.eh_frame_hdr:00000000000065C5                 db 0C0h
.eh_frame_hdr:00000000000065C6                 db 0FFh
.eh_frame_hdr:00000000000065C7                 db 0FFh
.eh_frame_hdr:00000000000065C8                 db  28h ; (
.eh_frame_hdr:00000000000065C9                 db    4
.eh_frame_hdr:00000000000065CA                 db    0
.eh_frame_hdr:00000000000065CB                 db    0
.eh_frame_hdr:00000000000065CC                 db    0
.eh_frame_hdr:00000000000065CD                 db 0C1h
.eh_frame_hdr:00000000000065CE                 db 0FFh
.eh_frame_hdr:00000000000065CF                 db 0FFh
.eh_frame_hdr:00000000000065D0                 db  3Ch ; <
.eh_frame_hdr:00000000000065D1                 db    4
.eh_frame_hdr:00000000000065D2                 db    0
.eh_frame_hdr:00000000000065D3                 db    0
.eh_frame_hdr:00000000000065D4                 db  10h
.eh_frame_hdr:00000000000065D5                 db 0C1h
.eh_frame_hdr:00000000000065D6                 db 0FFh
.eh_frame_hdr:00000000000065D7                 db 0FFh
.eh_frame_hdr:00000000000065D8                 db  50h ; P
.eh_frame_hdr:00000000000065D9                 db    4
.eh_frame_hdr:00000000000065DA                 db    0
.eh_frame_hdr:00000000000065DB                 db    0
.eh_frame_hdr:00000000000065DC                 db 0C0h
.eh_frame_hdr:00000000000065DD                 db 0C1h
.eh_frame_hdr:00000000000065DE                 db 0FFh
.eh_frame_hdr:00000000000065DF                 db 0FFh
.eh_frame_hdr:00000000000065E0                 db  80h
.eh_frame_hdr:00000000000065E1                 db    4
.eh_frame_hdr:00000000000065E2                 db    0
.eh_frame_hdr:00000000000065E3                 db    0
.eh_frame_hdr:00000000000065E4                 db  30h ; 0
.eh_frame_hdr:00000000000065E5                 db 0C3h
.eh_frame_hdr:00000000000065E6                 db 0FFh
.eh_frame_hdr:00000000000065E7                 db 0FFh
.eh_frame_hdr:00000000000065E8                 db 0D8h
.eh_frame_hdr:00000000000065E9                 db    4
.eh_frame_hdr:00000000000065EA                 db    0
.eh_frame_hdr:00000000000065EB                 db    0
.eh_frame_hdr:00000000000065EC                 db 0A0h
.eh_frame_hdr:00000000000065ED                 db 0C4h
.eh_frame_hdr:00000000000065EE                 db 0FFh
.eh_frame_hdr:00000000000065EF                 db 0FFh
.eh_frame_hdr:00000000000065F0                 db  30h ; 0
.eh_frame_hdr:00000000000065F1                 db    5
.eh_frame_hdr:00000000000065F2                 db    0
.eh_frame_hdr:00000000000065F3                 db    0
.eh_frame_hdr:00000000000065F4                 db 0F0h
.eh_frame_hdr:00000000000065F5                 db 0C5h
.eh_frame_hdr:00000000000065F6                 db 0FFh
.eh_frame_hdr:00000000000065F7                 db 0FFh
.eh_frame_hdr:00000000000065F8                 db  90h
.eh_frame_hdr:00000000000065F9                 db    5
.eh_frame_hdr:00000000000065FA                 db    0
.eh_frame_hdr:00000000000065FB                 db    0
.eh_frame_hdr:00000000000065FC                 db  30h ; 0
.eh_frame_hdr:00000000000065FD                 db 0C7h
.eh_frame_hdr:00000000000065FE                 db 0FFh
.eh_frame_hdr:00000000000065FF                 db 0FFh
.eh_frame_hdr:0000000000006600                 db 0CCh
.eh_frame_hdr:0000000000006601                 db    5
.eh_frame_hdr:0000000000006602                 db    0
.eh_frame_hdr:0000000000006603                 db    0
.eh_frame_hdr:0000000000006604                 db  70h ; p
.eh_frame_hdr:0000000000006605                 db 0C8h
.eh_frame_hdr:0000000000006606                 db 0FFh
.eh_frame_hdr:0000000000006607                 db 0FFh
.eh_frame_hdr:0000000000006608                 db  18h
.eh_frame_hdr:0000000000006609                 db    6
.eh_frame_hdr:000000000000660A                 db    0
.eh_frame_hdr:000000000000660B                 db    0
.eh_frame_hdr:000000000000660C                 db  10h
.eh_frame_hdr:000000000000660D                 db 0C9h
.eh_frame_hdr:000000000000660E                 db 0FFh
.eh_frame_hdr:000000000000660F                 db 0FFh
.eh_frame_hdr:0000000000006610                 db  38h ; 8
.eh_frame_hdr:0000000000006611                 db    6
.eh_frame_hdr:0000000000006612                 db    0
.eh_frame_hdr:0000000000006613                 db    0
.eh_frame_hdr:0000000000006614                 db    0
.eh_frame_hdr:0000000000006615                 db 0CAh
.eh_frame_hdr:0000000000006616                 db 0FFh
.eh_frame_hdr:0000000000006617                 db 0FFh
.eh_frame_hdr:0000000000006618                 db  7Ch ; |
.eh_frame_hdr:0000000000006619                 db    6
.eh_frame_hdr:000000000000661A                 db    0
.eh_frame_hdr:000000000000661B                 db    0
.eh_frame_hdr:000000000000661C                 db  40h ; @
.eh_frame_hdr:000000000000661D                 db 0DCh
.eh_frame_hdr:000000000000661E                 db 0FFh
.eh_frame_hdr:000000000000661F                 db 0FFh
.eh_frame_hdr:0000000000006620                 db 0F4h
.eh_frame_hdr:0000000000006621                 db    6
.eh_frame_hdr:0000000000006622                 db    0
.eh_frame_hdr:0000000000006623                 db    0
.eh_frame_hdr:0000000000006624                 db 0F0h
.eh_frame_hdr:0000000000006625                 db 0DDh
.eh_frame_hdr:0000000000006626                 db 0FFh
.eh_frame_hdr:0000000000006627                 db 0FFh
.eh_frame_hdr:0000000000006628                 db  60h ; `
.eh_frame_hdr:0000000000006629                 db    7
.eh_frame_hdr:000000000000662A                 db    0
.eh_frame_hdr:000000000000662B                 db    0
.eh_frame_hdr:000000000000662C                 db  30h ; 0
.eh_frame_hdr:000000000000662D                 db 0DEh
.eh_frame_hdr:000000000000662E                 db 0FFh
.eh_frame_hdr:000000000000662F                 db 0FFh
.eh_frame_hdr:0000000000006630                 db  8Ch
.eh_frame_hdr:0000000000006631                 db    7
.eh_frame_hdr:0000000000006632                 db    0
.eh_frame_hdr:0000000000006633                 db    0
.eh_frame_hdr:0000000000006634                 db  50h ; P
.eh_frame_hdr:0000000000006635                 db 0DEh
.eh_frame_hdr:0000000000006636                 db 0FFh
.eh_frame_hdr:0000000000006637                 db 0FFh
.eh_frame_hdr:0000000000006638                 db 0A0h
.eh_frame_hdr:0000000000006639                 db    7
.eh_frame_hdr:000000000000663A                 db    0
.eh_frame_hdr:000000000000663B                 db    0
.eh_frame_hdr:000000000000663C                 db  70h ; p
.eh_frame_hdr:000000000000663D                 db 0DEh
.eh_frame_hdr:000000000000663E                 db 0FFh
.eh_frame_hdr:000000000000663F                 db 0FFh
.eh_frame_hdr:0000000000006640                 db 0B4h
.eh_frame_hdr:0000000000006641                 db    7
.eh_frame_hdr:0000000000006642                 db    0
.eh_frame_hdr:0000000000006643                 db    0
.eh_frame_hdr:0000000000006644                 db 0B0h
.eh_frame_hdr:0000000000006645                 db 0DEh
.eh_frame_hdr:0000000000006646                 db 0FFh
.eh_frame_hdr:0000000000006647                 db 0FFh
.eh_frame_hdr:0000000000006648                 db 0C8h
.eh_frame_hdr:0000000000006649                 db    7
.eh_frame_hdr:000000000000664A                 db    0
.eh_frame_hdr:000000000000664B                 db    0
.eh_frame_hdr:000000000000664C                 db 0D0h
.eh_frame_hdr:000000000000664D                 db 0DEh
.eh_frame_hdr:000000000000664E                 db 0FFh
.eh_frame_hdr:000000000000664F                 db 0FFh
.eh_frame_hdr:0000000000006650                 db 0DCh
.eh_frame_hdr:0000000000006651                 db    7
.eh_frame_hdr:0000000000006652                 db    0
.eh_frame_hdr:0000000000006653                 db    0
.eh_frame_hdr:0000000000006654                 db    0
.eh_frame_hdr:0000000000006655                 db 0DFh
.eh_frame_hdr:0000000000006656                 db 0FFh
.eh_frame_hdr:0000000000006657                 db 0FFh
.eh_frame_hdr:0000000000006658                 db 0F0h
.eh_frame_hdr:0000000000006659                 db    7
.eh_frame_hdr:000000000000665A                 db    0
.eh_frame_hdr:000000000000665B                 db    0
.eh_frame_hdr:000000000000665C                 db  80h
.eh_frame_hdr:000000000000665D                 db 0DFh
.eh_frame_hdr:000000000000665E                 db 0FFh
.eh_frame_hdr:000000000000665F                 db 0FFh
.eh_frame_hdr:0000000000006660                 db  44h ; D
.eh_frame_hdr:0000000000006661                 db    8
.eh_frame_hdr:0000000000006662                 db    0
.eh_frame_hdr:0000000000006663                 db    0
.eh_frame_hdr:0000000000006664                 db  70h ; p
.eh_frame_hdr:0000000000006665                 db 0E0h
.eh_frame_hdr:0000000000006666                 db 0FFh
.eh_frame_hdr:0000000000006667                 db 0FFh
.eh_frame_hdr:0000000000006668                 db 0B0h
.eh_frame_hdr:0000000000006669                 db    8
.eh_frame_hdr:000000000000666A                 db    0
.eh_frame_hdr:000000000000666B                 db    0
.eh_frame_hdr:000000000000666C                 db  80h
.eh_frame_hdr:000000000000666D                 db 0E0h
.eh_frame_hdr:000000000000666E                 db 0FFh
.eh_frame_hdr:000000000000666F                 db 0FFh
.eh_frame_hdr:0000000000006670                 db 0C4h
.eh_frame_hdr:0000000000006671                 db    8
.eh_frame_hdr:0000000000006672                 db    0
.eh_frame_hdr:0000000000006673                 db    0
.eh_frame_hdr:0000000000006674                 db  20h
.eh_frame_hdr:0000000000006675                 db 0E1h
.eh_frame_hdr:0000000000006676                 db 0FFh
.eh_frame_hdr:0000000000006677                 db 0FFh
.eh_frame_hdr:0000000000006678                 db 0F0h
.eh_frame_hdr:0000000000006679                 db    8
.eh_frame_hdr:000000000000667A                 db    0
.eh_frame_hdr:000000000000667B                 db    0
.eh_frame_hdr:000000000000667C                 db  40h ; @
.eh_frame_hdr:000000000000667D                 db 0E1h
.eh_frame_hdr:000000000000667E                 db 0FFh
.eh_frame_hdr:000000000000667F                 db 0FFh
.eh_frame_hdr:0000000000006680                 db    4
.eh_frame_hdr:0000000000006681                 db    9
.eh_frame_hdr:0000000000006682                 db    0
.eh_frame_hdr:0000000000006683                 db    0
.eh_frame_hdr:0000000000006684                 db  50h ; P
.eh_frame_hdr:0000000000006685                 db 0E1h
.eh_frame_hdr:0000000000006686                 db 0FFh
.eh_frame_hdr:0000000000006687                 db 0FFh
.eh_frame_hdr:0000000000006688                 db  18h
.eh_frame_hdr:0000000000006689                 db    9
.eh_frame_hdr:000000000000668A                 db    0
.eh_frame_hdr:000000000000668B                 db    0
.eh_frame_hdr:000000000000668C                 db  70h ; p
.eh_frame_hdr:000000000000668D                 db 0E1h
.eh_frame_hdr:000000000000668E                 db 0FFh
.eh_frame_hdr:000000000000668F                 db 0FFh
.eh_frame_hdr:0000000000006690                 db  2Ch ; ,
.eh_frame_hdr:0000000000006691                 db    9
.eh_frame_hdr:0000000000006692                 db    0
.eh_frame_hdr:0000000000006693                 db    0
.eh_frame_hdr:0000000000006694                 db  90h
.eh_frame_hdr:0000000000006695                 db 0E1h
.eh_frame_hdr:0000000000006696                 db 0FFh
.eh_frame_hdr:0000000000006697                 db 0FFh
.eh_frame_hdr:0000000000006698                 db  40h ; @
.eh_frame_hdr:0000000000006699                 db    9
.eh_frame_hdr:000000000000669A                 db    0
.eh_frame_hdr:000000000000669B                 db    0
.eh_frame_hdr:000000000000669C                 db  20h
.eh_frame_hdr:000000000000669D                 db 0E2h
.eh_frame_hdr:000000000000669E                 db 0FFh
.eh_frame_hdr:000000000000669F                 db 0FFh
.eh_frame_hdr:00000000000066A0                 db  5Ch ; \
.eh_frame_hdr:00000000000066A1                 db    9
.eh_frame_hdr:00000000000066A2                 db    0
.eh_frame_hdr:00000000000066A3                 db    0
.eh_frame_hdr:00000000000066A4                 db 0B0h
.eh_frame_hdr:00000000000066A5                 db 0E2h
.eh_frame_hdr:00000000000066A6                 db 0FFh
.eh_frame_hdr:00000000000066A7                 db 0FFh
.eh_frame_hdr:00000000000066A8                 db  78h ; x
.eh_frame_hdr:00000000000066A9                 db    9
.eh_frame_hdr:00000000000066AA                 db    0
.eh_frame_hdr:00000000000066AB                 db    0
.eh_frame_hdr:00000000000066AC                 db 0C0h
.eh_frame_hdr:00000000000066AD                 db 0E2h
.eh_frame_hdr:00000000000066AE                 db 0FFh
.eh_frame_hdr:00000000000066AF                 db 0FFh
.eh_frame_hdr:00000000000066B0                 db  8Ch
.eh_frame_hdr:00000000000066B1                 db    9
.eh_frame_hdr:00000000000066B2                 db    0
.eh_frame_hdr:00000000000066B3                 db    0
.eh_frame_hdr:00000000000066B4                 db 0D0h
.eh_frame_hdr:00000000000066B5                 db 0E2h
.eh_frame_hdr:00000000000066B6                 db 0FFh
.eh_frame_hdr:00000000000066B7                 db 0FFh
.eh_frame_hdr:00000000000066B8                 db 0A0h
.eh_frame_hdr:00000000000066B9                 db    9
.eh_frame_hdr:00000000000066BA                 db    0
.eh_frame_hdr:00000000000066BB                 db    0
.eh_frame_hdr:00000000000066BC                 db  70h ; p
.eh_frame_hdr:00000000000066BD                 db 0E3h
.eh_frame_hdr:00000000000066BE                 db 0FFh
.eh_frame_hdr:00000000000066BF                 db 0FFh
.eh_frame_hdr:00000000000066C0                 db 0BCh
.eh_frame_hdr:00000000000066C1                 db    9
.eh_frame_hdr:00000000000066C2                 db    0
.eh_frame_hdr:00000000000066C3                 db    0
.eh_frame_hdr:00000000000066C4                 db  80h
.eh_frame_hdr:00000000000066C5                 db 0E3h
.eh_frame_hdr:00000000000066C6                 db 0FFh
.eh_frame_hdr:00000000000066C7                 db 0FFh
.eh_frame_hdr:00000000000066C8                 db 0D0h
.eh_frame_hdr:00000000000066C9                 db    9
.eh_frame_hdr:00000000000066CA                 db    0
.eh_frame_hdr:00000000000066CB                 db    0
.eh_frame_hdr:00000000000066CC                 db 0A0h
.eh_frame_hdr:00000000000066CD                 db 0E3h
.eh_frame_hdr:00000000000066CE                 db 0FFh
.eh_frame_hdr:00000000000066CF                 db 0FFh
.eh_frame_hdr:00000000000066D0                 db 0E4h
.eh_frame_hdr:00000000000066D1                 db    9
.eh_frame_hdr:00000000000066D2                 db    0
.eh_frame_hdr:00000000000066D3                 db    0
.eh_frame_hdr:00000000000066D4                 db 0B0h
.eh_frame_hdr:00000000000066D5                 db 0E3h
.eh_frame_hdr:00000000000066D6                 db 0FFh
.eh_frame_hdr:00000000000066D7                 db 0FFh
.eh_frame_hdr:00000000000066D8                 db 0F8h
.eh_frame_hdr:00000000000066D9                 db    9
.eh_frame_hdr:00000000000066DA                 db    0
.eh_frame_hdr:00000000000066DB                 db    0
.eh_frame_hdr:00000000000066DC                 db  40h ; @
.eh_frame_hdr:00000000000066DD                 db 0E4h
.eh_frame_hdr:00000000000066DE                 db 0FFh
.eh_frame_hdr:00000000000066DF                 db 0FFh
.eh_frame_hdr:00000000000066E0                 db  14h
.eh_frame_hdr:00000000000066E1                 db  0Ah
.eh_frame_hdr:00000000000066E2                 db    0
.eh_frame_hdr:00000000000066E3                 db    0
.eh_frame_hdr:00000000000066E4                 db 0E0h
.eh_frame_hdr:00000000000066E5                 db 0E4h
.eh_frame_hdr:00000000000066E6                 db 0FFh
.eh_frame_hdr:00000000000066E7                 db 0FFh
.eh_frame_hdr:00000000000066E8                 db  30h ; 0
.eh_frame_hdr:00000000000066E9                 db  0Ah
.eh_frame_hdr:00000000000066EA                 db    0
.eh_frame_hdr:00000000000066EB                 db    0
.eh_frame_hdr:00000000000066EC                 db 0F0h
.eh_frame_hdr:00000000000066ED                 db 0E4h
.eh_frame_hdr:00000000000066EE                 db 0FFh
.eh_frame_hdr:00000000000066EF                 db 0FFh
.eh_frame_hdr:00000000000066F0                 db  44h ; D
.eh_frame_hdr:00000000000066F1                 db  0Ah
.eh_frame_hdr:00000000000066F2                 db    0
.eh_frame_hdr:00000000000066F3                 db    0
.eh_frame_hdr:00000000000066F4                 db  10h
.eh_frame_hdr:00000000000066F5                 db 0E5h
.eh_frame_hdr:00000000000066F6                 db 0FFh
.eh_frame_hdr:00000000000066F7                 db 0FFh
.eh_frame_hdr:00000000000066F8                 db  58h ; X
.eh_frame_hdr:00000000000066F9                 db  0Ah
.eh_frame_hdr:00000000000066FA                 db    0
.eh_frame_hdr:00000000000066FB                 db    0
.eh_frame_hdr:00000000000066FC                 db  30h ; 0
.eh_frame_hdr:00000000000066FD                 db 0E5h
.eh_frame_hdr:00000000000066FE                 db 0FFh
.eh_frame_hdr:00000000000066FF                 db 0FFh
.eh_frame_hdr:0000000000006700                 db  6Ch ; l
.eh_frame_hdr:0000000000006701                 db  0Ah
.eh_frame_hdr:0000000000006702                 db    0
.eh_frame_hdr:0000000000006703                 db    0
.eh_frame_hdr:0000000000006704                 db  40h ; @
.eh_frame_hdr:0000000000006705                 db 0E5h
.eh_frame_hdr:0000000000006706                 db 0FFh
.eh_frame_hdr:0000000000006707                 db 0FFh
.eh_frame_hdr:0000000000006708                 db  80h
.eh_frame_hdr:0000000000006709                 db  0Ah
.eh_frame_hdr:000000000000670A                 db    0
.eh_frame_hdr:000000000000670B                 db    0
.eh_frame_hdr:000000000000670C                 db  60h ; `
.eh_frame_hdr:000000000000670D                 db 0E5h
.eh_frame_hdr:000000000000670E                 db 0FFh
.eh_frame_hdr:000000000000670F                 db 0FFh
.eh_frame_hdr:0000000000006710                 db  94h
.eh_frame_hdr:0000000000006711                 db  0Ah
.eh_frame_hdr:0000000000006712                 db    0
.eh_frame_hdr:0000000000006713                 db    0
.eh_frame_hdr:0000000000006714                 db  80h
.eh_frame_hdr:0000000000006715                 db 0E5h
.eh_frame_hdr:0000000000006716                 db 0FFh
.eh_frame_hdr:0000000000006717                 db 0FFh
.eh_frame_hdr:0000000000006718                 db 0A8h
.eh_frame_hdr:0000000000006719                 db  0Ah
.eh_frame_hdr:000000000000671A                 db    0
.eh_frame_hdr:000000000000671B                 db    0
.eh_frame_hdr:000000000000671C                 db 0A0h
.eh_frame_hdr:000000000000671D                 db 0E5h
.eh_frame_hdr:000000000000671E                 db 0FFh
.eh_frame_hdr:000000000000671F                 db 0FFh
.eh_frame_hdr:0000000000006720                 db 0C0h
.eh_frame_hdr:0000000000006721                 db  0Ah
.eh_frame_hdr:0000000000006722                 db    0
.eh_frame_hdr:0000000000006723                 db    0
.eh_frame_hdr:0000000000006724                 db 0C0h
.eh_frame_hdr:0000000000006725                 db 0E9h
.eh_frame_hdr:0000000000006726                 db 0FFh
.eh_frame_hdr:0000000000006727                 db 0FFh
.eh_frame_hdr:0000000000006728                 db 0D4h
.eh_frame_hdr:0000000000006729                 db  0Bh
.eh_frame_hdr:000000000000672A                 db    0
.eh_frame_hdr:000000000000672B                 db    0
.eh_frame_hdr:000000000000672C                 db 0E0h
.eh_frame_hdr:000000000000672D                 db 0E9h
.eh_frame_hdr:000000000000672E                 db 0FFh
.eh_frame_hdr:000000000000672F                 db 0FFh
.eh_frame_hdr:0000000000006730                 db 0E8h
.eh_frame_hdr:0000000000006731                 db  0Bh
.eh_frame_hdr:0000000000006732                 db    0
.eh_frame_hdr:0000000000006733                 db    0
.eh_frame_hdr:0000000000006734                 db  60h ; `
.eh_frame_hdr:0000000000006735                 db 0EAh
.eh_frame_hdr:0000000000006736                 db 0FFh
.eh_frame_hdr:0000000000006737                 db 0FFh
.eh_frame_hdr:0000000000006738                 db    4
.eh_frame_hdr:0000000000006739                 db  0Ch
.eh_frame_hdr:000000000000673A                 db    0
.eh_frame_hdr:000000000000673B                 db    0
.eh_frame_hdr:000000000000673C                 db  40h ; @
.eh_frame_hdr:000000000000673D                 db 0EBh
.eh_frame_hdr:000000000000673E                 db 0FFh
.eh_frame_hdr:000000000000673F                 db 0FFh
.eh_frame_hdr:0000000000006740                 db  30h ; 0
.eh_frame_hdr:0000000000006741                 db  0Ch
.eh_frame_hdr:0000000000006742                 db    0
.eh_frame_hdr:0000000000006743                 db    0
.eh_frame_hdr:0000000000006744                 db 0C0h
.eh_frame_hdr:0000000000006745                 db 0EBh
.eh_frame_hdr:0000000000006746                 db 0FFh
.eh_frame_hdr:0000000000006747                 db 0FFh
.eh_frame_hdr:0000000000006748                 db  50h ; P
.eh_frame_hdr:0000000000006749                 db  0Ch
.eh_frame_hdr:000000000000674A                 db    0
.eh_frame_hdr:000000000000674B                 db    0
.eh_frame_hdr:000000000000674C                 db 0E0h
.eh_frame_hdr:000000000000674D                 db 0EBh
.eh_frame_hdr:000000000000674E                 db 0FFh
.eh_frame_hdr:000000000000674F                 db 0FFh
.eh_frame_hdr:0000000000006750                 db  6Ch ; l
.eh_frame_hdr:0000000000006751                 db  0Ch
.eh_frame_hdr:0000000000006752                 db    0
.eh_frame_hdr:0000000000006753                 db    0
.eh_frame_hdr:0000000000006754                 db  10h
.eh_frame_hdr:0000000000006755                 db 0ECh
.eh_frame_hdr:0000000000006756                 db 0FFh
.eh_frame_hdr:0000000000006757                 db 0FFh
.eh_frame_hdr:0000000000006758                 db  80h
.eh_frame_hdr:0000000000006759                 db  0Ch
.eh_frame_hdr:000000000000675A                 db    0
.eh_frame_hdr:000000000000675B                 db    0
.eh_frame_hdr:000000000000675C                 db  20h
.eh_frame_hdr:000000000000675D                 db 0ECh
.eh_frame_hdr:000000000000675E                 db 0FFh
.eh_frame_hdr:000000000000675F                 db 0FFh
.eh_frame_hdr:0000000000006760                 db  94h
.eh_frame_hdr:0000000000006761                 db  0Ch
.eh_frame_hdr:0000000000006762                 db    0
.eh_frame_hdr:0000000000006763                 db    0
.eh_frame_hdr:0000000000006764                 db  60h ; `
.eh_frame_hdr:0000000000006765                 db 0ECh
.eh_frame_hdr:0000000000006766                 db 0FFh
.eh_frame_hdr:0000000000006767                 db 0FFh
.eh_frame_hdr:0000000000006768                 db 0B8h
.eh_frame_hdr:0000000000006769                 db  0Ch
.eh_frame_hdr:000000000000676A                 db    0
.eh_frame_hdr:000000000000676B                 db    0
.eh_frame_hdr:000000000000676C                 db  90h
.eh_frame_hdr:000000000000676D                 db 0ECh
.eh_frame_hdr:000000000000676E                 db 0FFh
.eh_frame_hdr:000000000000676F                 db 0FFh
.eh_frame_hdr:0000000000006770                 db 0CCh
.eh_frame_hdr:0000000000006771                 db  0Ch
.eh_frame_hdr:0000000000006772                 db    0
.eh_frame_hdr:0000000000006773                 db    0
.eh_frame_hdr:0000000000006774                 db  20h
.eh_frame_hdr:0000000000006775                 db 0EDh
.eh_frame_hdr:0000000000006776                 db 0FFh
.eh_frame_hdr:0000000000006777                 db 0FFh
.eh_frame_hdr:0000000000006778                 db 0E4h
.eh_frame_hdr:0000000000006779                 db  0Ch
.eh_frame_hdr:000000000000677A                 db    0
.eh_frame_hdr:000000000000677B                 db    0
.eh_frame_hdr:000000000000677C                 db  70h ; p
.eh_frame_hdr:000000000000677D                 db 0EDh
.eh_frame_hdr:000000000000677E                 db 0FFh
.eh_frame_hdr:000000000000677F                 db 0FFh
.eh_frame_hdr:0000000000006780                 db 0FCh
.eh_frame_hdr:0000000000006781                 db  0Ch
.eh_frame_hdr:0000000000006782                 db    0
.eh_frame_hdr:0000000000006783                 db    0
.eh_frame_hdr:0000000000006784                 db  90h
.eh_frame_hdr:0000000000006785                 db 0EDh
.eh_frame_hdr:0000000000006786                 db 0FFh
.eh_frame_hdr:0000000000006787                 db 0FFh
.eh_frame_hdr:0000000000006788                 db  18h
.eh_frame_hdr:0000000000006789                 db  0Dh
.eh_frame_hdr:000000000000678A                 db    0
.eh_frame_hdr:000000000000678B                 db    0
.eh_frame_hdr:000000000000678C                 db 0C0h
.eh_frame_hdr:000000000000678D                 db 0EDh
.eh_frame_hdr:000000000000678E                 db 0FFh
.eh_frame_hdr:000000000000678F                 db 0FFh
.eh_frame_hdr:0000000000006790                 db  34h ; 4
.eh_frame_hdr:0000000000006791                 db  0Dh
.eh_frame_hdr:0000000000006792                 db    0
.eh_frame_hdr:0000000000006793                 db    0
.eh_frame_hdr:0000000000006794                 db 0F0h
.eh_frame_hdr:0000000000006795                 db 0EDh
.eh_frame_hdr:0000000000006796                 db 0FFh
.eh_frame_hdr:0000000000006797                 db 0FFh
.eh_frame_hdr:0000000000006798                 db  5Ch ; \
.eh_frame_hdr:0000000000006799                 db  0Dh
.eh_frame_hdr:000000000000679A                 db    0
.eh_frame_hdr:000000000000679B                 db    0
.eh_frame_hdr:000000000000679C                 db  10h
.eh_frame_hdr:000000000000679D                 db 0EEh
.eh_frame_hdr:000000000000679E                 db 0FFh
.eh_frame_hdr:000000000000679F                 db 0FFh
.eh_frame_hdr:00000000000067A0                 db  78h ; x
.eh_frame_hdr:00000000000067A1                 db  0Dh
.eh_frame_hdr:00000000000067A2                 db    0
.eh_frame_hdr:00000000000067A3                 db    0
.eh_frame_hdr:00000000000067A4                 db  50h ; P
.eh_frame_hdr:00000000000067A5                 db 0EEh
.eh_frame_hdr:00000000000067A6                 db 0FFh
.eh_frame_hdr:00000000000067A7                 db 0FFh
.eh_frame_hdr:00000000000067A8                 db  90h
.eh_frame_hdr:00000000000067A9                 db  0Dh
.eh_frame_hdr:00000000000067AA                 db    0
.eh_frame_hdr:00000000000067AB                 db    0
.eh_frame_hdr:00000000000067AC                 db 0E0h
.eh_frame_hdr:00000000000067AD                 db 0EEh
.eh_frame_hdr:00000000000067AE                 db 0FFh
.eh_frame_hdr:00000000000067AF                 db 0FFh
.eh_frame_hdr:00000000000067B0                 db 0D0h
.eh_frame_hdr:00000000000067B1                 db  0Dh
.eh_frame_hdr:00000000000067B2                 db    0
.eh_frame_hdr:00000000000067B3                 db    0
.eh_frame_hdr:00000000000067B4                 db  60h ; `
.eh_frame_hdr:00000000000067B5                 db 0EFh
.eh_frame_hdr:00000000000067B6                 db 0FFh
.eh_frame_hdr:00000000000067B7                 db 0FFh
.eh_frame_hdr:00000000000067B8                 db  20h
.eh_frame_hdr:00000000000067B9                 db  0Eh
.eh_frame_hdr:00000000000067BA                 db    0
.eh_frame_hdr:00000000000067BB                 db    0
.eh_frame_hdr:00000000000067BC                 db 0C0h
.eh_frame_hdr:00000000000067BD                 db 0EFh
.eh_frame_hdr:00000000000067BE                 db 0FFh
.eh_frame_hdr:00000000000067BF                 db 0FFh
.eh_frame_hdr:00000000000067C0                 db  40h ; @
.eh_frame_hdr:00000000000067C1                 db  0Eh
.eh_frame_hdr:00000000000067C2                 db    0
.eh_frame_hdr:00000000000067C3                 db    0
.eh_frame_hdr:00000000000067C4                 db    0
.eh_frame_hdr:00000000000067C5                 db 0F0h
.eh_frame_hdr:00000000000067C6                 db 0FFh
.eh_frame_hdr:00000000000067C7                 db 0FFh
.eh_frame_hdr:00000000000067C8                 db  60h ; `
.eh_frame_hdr:00000000000067C9                 db  0Eh
.eh_frame_hdr:00000000000067CA                 db    0
.eh_frame_hdr:00000000000067CB                 db    0
.eh_frame_hdr:00000000000067CC                 db  80h
.eh_frame_hdr:00000000000067CD                 db 0F0h
.eh_frame_hdr:00000000000067CE                 db 0FFh
.eh_frame_hdr:00000000000067CF                 db 0FFh
.eh_frame_hdr:00000000000067D0                 db  98h
.eh_frame_hdr:00000000000067D1                 db  0Eh
.eh_frame_hdr:00000000000067D2                 db    0
.eh_frame_hdr:00000000000067D3                 db    0
.eh_frame_hdr:00000000000067D4                 db 0C0h
.eh_frame_hdr:00000000000067D5                 db 0F0h
.eh_frame_hdr:00000000000067D6                 db 0FFh
.eh_frame_hdr:00000000000067D7                 db 0FFh
.eh_frame_hdr:00000000000067D8                 db 0B8h
.eh_frame_hdr:00000000000067D9                 db  0Eh
.eh_frame_hdr:00000000000067DA                 db    0
.eh_frame_hdr:00000000000067DB                 db    0
.eh_frame_hdr:00000000000067DC                 db  20h
.eh_frame_hdr:00000000000067DD                 db 0F1h
.eh_frame_hdr:00000000000067DE                 db 0FFh
.eh_frame_hdr:00000000000067DF                 db 0FFh
.eh_frame_hdr:00000000000067E0                 db 0E8h
.eh_frame_hdr:00000000000067E1                 db  0Eh
.eh_frame_hdr:00000000000067E2                 db    0
.eh_frame_hdr:00000000000067E3                 db    0
.eh_frame_hdr:00000000000067E4                 db  90h
.eh_frame_hdr:00000000000067E5                 db 0F1h
.eh_frame_hdr:00000000000067E6                 db 0FFh
.eh_frame_hdr:00000000000067E7                 db 0FFh
.eh_frame_hdr:00000000000067E8                 db  30h ; 0
.eh_frame_hdr:00000000000067E9                 db  0Fh
.eh_frame_hdr:00000000000067EA                 db    0
.eh_frame_hdr:00000000000067EB                 db    0
.eh_frame_hdr:00000000000067EC                 db 0A0h
.eh_frame_hdr:00000000000067ED                 db 0F1h
.eh_frame_hdr:00000000000067EE                 db 0FFh
.eh_frame_hdr:00000000000067EF                 db 0FFh
.eh_frame_hdr:00000000000067F0                 db  48h ; H
.eh_frame_hdr:00000000000067F1                 db  0Fh
.eh_frame_hdr:00000000000067F2                 db    0
.eh_frame_hdr:00000000000067F3                 db    0
.eh_frame_hdr:00000000000067F3 _eh_frame_hdr   ends
.eh_frame_hdr:00000000000067F3
LOAD:00000000000067F4 ; ===========================================================================
LOAD:00000000000067F4
LOAD:00000000000067F4 ; Segment type: Pure code
LOAD:00000000000067F4 ; Segment permissions: Read/Execute
LOAD:00000000000067F4 LOAD            segment byte public 'CODE' use64
LOAD:00000000000067F4                 assume cs:LOAD
LOAD:00000000000067F4                 ;org 67F4h
LOAD:00000000000067F4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000067F4                 align 8
LOAD:00000000000067F4 LOAD            ends
LOAD:00000000000067F4
.eh_frame:00000000000067F8 ; ===========================================================================
.eh_frame:00000000000067F8
.eh_frame:00000000000067F8 ; Segment type: Pure data
.eh_frame:00000000000067F8 ; Segment permissions: Read
.eh_frame:00000000000067F8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000067F8                 assume cs:_eh_frame
.eh_frame:00000000000067F8                 ;org 67F8h
.eh_frame:00000000000067F8                 db  14h
.eh_frame:00000000000067F9                 db    0
.eh_frame:00000000000067FA                 db    0
.eh_frame:00000000000067FB                 db    0
.eh_frame:00000000000067FC                 db    0
.eh_frame:00000000000067FD                 db    0
.eh_frame:00000000000067FE                 db    0
.eh_frame:00000000000067FF                 db    0
.eh_frame:0000000000006800                 db    1
.eh_frame:0000000000006801                 db  7Ah ; z
.eh_frame:0000000000006802                 db  52h ; R
.eh_frame:0000000000006803                 db    0
.eh_frame:0000000000006804                 db    1
.eh_frame:0000000000006805                 db  78h ; x
.eh_frame:0000000000006806                 db  10h
.eh_frame:0000000000006807                 db    1
.eh_frame:0000000000006808                 db  1Bh
.eh_frame:0000000000006809                 db  0Ch
.eh_frame:000000000000680A                 db    7
.eh_frame:000000000000680B                 db    8
.eh_frame:000000000000680C                 db  90h
.eh_frame:000000000000680D                 db    1
.eh_frame:000000000000680E                 db    7
.eh_frame:000000000000680F                 db  10h
.eh_frame:0000000000006810                 db  14h
.eh_frame:0000000000006811                 db    0
.eh_frame:0000000000006812                 db    0
.eh_frame:0000000000006813                 db    0
.eh_frame:0000000000006814                 db  1Ch
.eh_frame:0000000000006815                 db    0
.eh_frame:0000000000006816                 db    0
.eh_frame:0000000000006817                 db    0
.eh_frame:0000000000006818                 db  78h ; x
.eh_frame:0000000000006819                 db 0B8h
.eh_frame:000000000000681A                 db 0FFh
.eh_frame:000000000000681B                 db 0FFh
.eh_frame:000000000000681C                 db  2Bh ; +
.eh_frame:000000000000681D                 db    0
.eh_frame:000000000000681E                 db    0
.eh_frame:000000000000681F                 db    0
.eh_frame:0000000000006820                 db    0
.eh_frame:0000000000006821                 db    0
.eh_frame:0000000000006822                 db    0
.eh_frame:0000000000006823                 db    0
.eh_frame:0000000000006824                 db    0
.eh_frame:0000000000006825                 db    0
.eh_frame:0000000000006826                 db    0
.eh_frame:0000000000006827                 db    0
.eh_frame:0000000000006828                 db  14h
.eh_frame:0000000000006829                 db    0
.eh_frame:000000000000682A                 db    0
.eh_frame:000000000000682B                 db    0
.eh_frame:000000000000682C                 db    0
.eh_frame:000000000000682D                 db    0
.eh_frame:000000000000682E                 db    0
.eh_frame:000000000000682F                 db    0
.eh_frame:0000000000006830                 db    1
.eh_frame:0000000000006831                 db  7Ah ; z
.eh_frame:0000000000006832                 db  52h ; R
.eh_frame:0000000000006833                 db    0
.eh_frame:0000000000006834                 db    1
.eh_frame:0000000000006835                 db  78h ; x
.eh_frame:0000000000006836                 db  10h
.eh_frame:0000000000006837                 db    1
.eh_frame:0000000000006838                 db  1Bh
.eh_frame:0000000000006839                 db  0Ch
.eh_frame:000000000000683A                 db    7
.eh_frame:000000000000683B                 db    8
.eh_frame:000000000000683C                 db  90h
.eh_frame:000000000000683D                 db    1
.eh_frame:000000000000683E                 db    0
.eh_frame:000000000000683F                 db    0
.eh_frame:0000000000006840                 db  24h ; $
.eh_frame:0000000000006841                 db    0
.eh_frame:0000000000006842                 db    0
.eh_frame:0000000000006843                 db    0
.eh_frame:0000000000006844                 db  1Ch
.eh_frame:0000000000006845                 db    0
.eh_frame:0000000000006846                 db    0
.eh_frame:0000000000006847                 db    0
.eh_frame:0000000000006848                 db 0A8h
.eh_frame:0000000000006849                 db 0AAh
.eh_frame:000000000000684A                 db 0FFh
.eh_frame:000000000000684B                 db 0FFh
.eh_frame:000000000000684C                 db 0E0h
.eh_frame:000000000000684D                 db    2
.eh_frame:000000000000684E                 db    0
.eh_frame:000000000000684F                 db    0
.eh_frame:0000000000006850                 db    0
.eh_frame:0000000000006851                 db  0Eh
.eh_frame:0000000000006852                 db  10h
.eh_frame:0000000000006853                 db  46h ; F
.eh_frame:0000000000006854                 db  0Eh
.eh_frame:0000000000006855                 db  18h
.eh_frame:0000000000006856                 db  4Ah ; J
.eh_frame:0000000000006857                 db  0Fh
.eh_frame:0000000000006858                 db  0Bh
.eh_frame:0000000000006859                 db  77h ; w
.eh_frame:000000000000685A                 db    8
.eh_frame:000000000000685B                 db  80h
.eh_frame:000000000000685C                 db    0
.eh_frame:000000000000685D                 db  3Fh ; ?
.eh_frame:000000000000685E                 db  1Ah
.eh_frame:000000000000685F                 db  3Bh ; ;
.eh_frame:0000000000006860                 db  2Ah ; *
.eh_frame:0000000000006861                 db  33h ; 3
.eh_frame:0000000000006862                 db  24h ; $
.eh_frame:0000000000006863                 db  22h ; "
.eh_frame:0000000000006864                 db    0
.eh_frame:0000000000006865                 db    0
.eh_frame:0000000000006866                 db    0
.eh_frame:0000000000006867                 db    0
.eh_frame:0000000000006868                 db  14h
.eh_frame:0000000000006869                 db    0
.eh_frame:000000000000686A                 db    0
.eh_frame:000000000000686B                 db    0
.eh_frame:000000000000686C                 db  44h ; D
.eh_frame:000000000000686D                 db    0
.eh_frame:000000000000686E                 db    0
.eh_frame:000000000000686F                 db    0
.eh_frame:0000000000006870                 db  60h ; `
.eh_frame:0000000000006871                 db 0ADh
.eh_frame:0000000000006872                 db 0FFh
.eh_frame:0000000000006873                 db 0FFh
.eh_frame:0000000000006874                 db    8
.eh_frame:0000000000006875                 db    0
.eh_frame:0000000000006876                 db    0
.eh_frame:0000000000006877                 db    0
.eh_frame:0000000000006878                 db    0
.eh_frame:0000000000006879                 db    0
.eh_frame:000000000000687A                 db    0
.eh_frame:000000000000687B                 db    0
.eh_frame:000000000000687C                 db    0
.eh_frame:000000000000687D                 db    0
.eh_frame:000000000000687E                 db    0
.eh_frame:000000000000687F                 db    0
.eh_frame:0000000000006880                 db  24h ; $
.eh_frame:0000000000006881                 db    0
.eh_frame:0000000000006882                 db    0
.eh_frame:0000000000006883                 db    0
.eh_frame:0000000000006884                 db  5Ch ; \
.eh_frame:0000000000006885                 db    0
.eh_frame:0000000000006886                 db    0
.eh_frame:0000000000006887                 db    0
.eh_frame:0000000000006888                 db  18h
.eh_frame:0000000000006889                 db 0B9h
.eh_frame:000000000000688A                 db 0FFh
.eh_frame:000000000000688B                 db 0FFh
.eh_frame:000000000000688C                 db  6Bh ; k
.eh_frame:000000000000688D                 db    0
.eh_frame:000000000000688E                 db    0
.eh_frame:000000000000688F                 db    0
.eh_frame:0000000000006890                 db    0
.eh_frame:0000000000006891                 db  41h ; A
.eh_frame:0000000000006892                 db  0Eh
.eh_frame:0000000000006893                 db  10h
.eh_frame:0000000000006894                 db  86h
.eh_frame:0000000000006895                 db    2
.eh_frame:0000000000006896                 db  41h ; A
.eh_frame:0000000000006897                 db  0Eh
.eh_frame:0000000000006898                 db  18h
.eh_frame:0000000000006899                 db  83h
.eh_frame:000000000000689A                 db    3
.eh_frame:000000000000689B                 db  46h ; F
.eh_frame:000000000000689C                 db  0Eh
.eh_frame:000000000000689D                 db  20h
.eh_frame:000000000000689E                 db    2
.eh_frame:000000000000689F                 db  60h ; `
.eh_frame:00000000000068A0                 db  0Eh
.eh_frame:00000000000068A1                 db  18h
.eh_frame:00000000000068A2                 db  41h ; A
.eh_frame:00000000000068A3                 db  0Eh
.eh_frame:00000000000068A4                 db  10h
.eh_frame:00000000000068A5                 db  41h ; A
.eh_frame:00000000000068A6                 db  0Eh
.eh_frame:00000000000068A7                 db    8
.eh_frame:00000000000068A8                 db  20h
.eh_frame:00000000000068A9                 db    0
.eh_frame:00000000000068AA                 db    0
.eh_frame:00000000000068AB                 db    0
.eh_frame:00000000000068AC                 db  84h
.eh_frame:00000000000068AD                 db    0
.eh_frame:00000000000068AE                 db    0
.eh_frame:00000000000068AF                 db    0
.eh_frame:00000000000068B0                 db  60h ; `
.eh_frame:00000000000068B1                 db 0B9h
.eh_frame:00000000000068B2                 db 0FFh
.eh_frame:00000000000068B3                 db 0FFh
.eh_frame:00000000000068B4                 db  4Fh ; O
.eh_frame:00000000000068B5                 db    0
.eh_frame:00000000000068B6                 db    0
.eh_frame:00000000000068B7                 db    0
.eh_frame:00000000000068B8                 db    0
.eh_frame:00000000000068B9                 db  41h ; A
.eh_frame:00000000000068BA                 db  0Eh
.eh_frame:00000000000068BB                 db  10h
.eh_frame:00000000000068BC                 db  83h
.eh_frame:00000000000068BD                 db    2
.eh_frame:00000000000068BE                 db  50h ; P
.eh_frame:00000000000068BF                 db  0Eh
.eh_frame:00000000000068C0                 db  40h ; @
.eh_frame:00000000000068C1                 db  77h ; w
.eh_frame:00000000000068C2                 db  0Ah
.eh_frame:00000000000068C3                 db  0Eh
.eh_frame:00000000000068C4                 db  10h
.eh_frame:00000000000068C5                 db  41h ; A
.eh_frame:00000000000068C6                 db  0Eh
.eh_frame:00000000000068C7                 db    8
.eh_frame:00000000000068C8                 db  41h ; A
.eh_frame:00000000000068C9                 db  0Bh
.eh_frame:00000000000068CA                 db    0
.eh_frame:00000000000068CB                 db    0
.eh_frame:00000000000068CC                 db  20h
.eh_frame:00000000000068CD                 db    0
.eh_frame:00000000000068CE                 db    0
.eh_frame:00000000000068CF                 db    0
.eh_frame:00000000000068D0                 db 0A8h
.eh_frame:00000000000068D1                 db    0
.eh_frame:00000000000068D2                 db    0
.eh_frame:00000000000068D3                 db    0
.eh_frame:00000000000068D4                 db  8Ch
.eh_frame:00000000000068D5                 db 0B9h
.eh_frame:00000000000068D6                 db 0FFh
.eh_frame:00000000000068D7                 db 0FFh
.eh_frame:00000000000068D8                 db  4Fh ; O
.eh_frame:00000000000068D9                 db    0
.eh_frame:00000000000068DA                 db    0
.eh_frame:00000000000068DB                 db    0
.eh_frame:00000000000068DC                 db    0
.eh_frame:00000000000068DD                 db  41h ; A
.eh_frame:00000000000068DE                 db  0Eh
.eh_frame:00000000000068DF                 db  10h
.eh_frame:00000000000068E0                 db  83h
.eh_frame:00000000000068E1                 db    2
.eh_frame:00000000000068E2                 db  50h ; P
.eh_frame:00000000000068E3                 db  0Eh
.eh_frame:00000000000068E4                 db  40h ; @
.eh_frame:00000000000068E5                 db  77h ; w
.eh_frame:00000000000068E6                 db  0Ah
.eh_frame:00000000000068E7                 db  0Eh
.eh_frame:00000000000068E8                 db  10h
.eh_frame:00000000000068E9                 db  41h ; A
.eh_frame:00000000000068EA                 db  0Eh
.eh_frame:00000000000068EB                 db    8
.eh_frame:00000000000068EC                 db  41h ; A
.eh_frame:00000000000068ED                 db  0Bh
.eh_frame:00000000000068EE                 db    0
.eh_frame:00000000000068EF                 db    0
.eh_frame:00000000000068F0                 db  2Ch ; ,
.eh_frame:00000000000068F1                 db    0
.eh_frame:00000000000068F2                 db    0
.eh_frame:00000000000068F3                 db    0
.eh_frame:00000000000068F4                 db 0CCh
.eh_frame:00000000000068F5                 db    0
.eh_frame:00000000000068F6                 db    0
.eh_frame:00000000000068F7                 db    0
.eh_frame:00000000000068F8                 db 0B8h
.eh_frame:00000000000068F9                 db 0B9h
.eh_frame:00000000000068FA                 db 0FFh
.eh_frame:00000000000068FB                 db 0FFh
.eh_frame:00000000000068FC                 db  59h ; Y
.eh_frame:00000000000068FD                 db    0
.eh_frame:00000000000068FE                 db    0
.eh_frame:00000000000068FF                 db    0
.eh_frame:0000000000006900                 db    0
.eh_frame:0000000000006901                 db  41h ; A
.eh_frame:0000000000006902                 db  0Eh
.eh_frame:0000000000006903                 db  10h
.eh_frame:0000000000006904                 db  83h
.eh_frame:0000000000006905                 db    2
.eh_frame:0000000000006906                 db  50h ; P
.eh_frame:0000000000006907                 db  0Eh
.eh_frame:0000000000006908                 db  50h ; P
.eh_frame:0000000000006909                 db  57h ; W
.eh_frame:000000000000690A                 db  0Eh
.eh_frame:000000000000690B                 db  58h ; X
.eh_frame:000000000000690C                 db  44h ; D
.eh_frame:000000000000690D                 db  0Eh
.eh_frame:000000000000690E                 db  60h ; `
.eh_frame:000000000000690F                 db  51h ; Q
.eh_frame:0000000000006910                 db  0Eh
.eh_frame:0000000000006911                 db  58h ; X
.eh_frame:0000000000006912                 db  41h ; A
.eh_frame:0000000000006913                 db  0Eh
.eh_frame:0000000000006914                 db  50h ; P
.eh_frame:0000000000006915                 db  54h ; T
.eh_frame:0000000000006916                 db  0Ah
.eh_frame:0000000000006917                 db  0Eh
.eh_frame:0000000000006918                 db  10h
.eh_frame:0000000000006919                 db  41h ; A
.eh_frame:000000000000691A                 db  0Eh
.eh_frame:000000000000691B                 db    8
.eh_frame:000000000000691C                 db  41h ; A
.eh_frame:000000000000691D                 db  0Bh
.eh_frame:000000000000691E                 db    0
.eh_frame:000000000000691F                 db    0
.eh_frame:0000000000006920                 db  28h ; (
.eh_frame:0000000000006921                 db    0
.eh_frame:0000000000006922                 db    0
.eh_frame:0000000000006923                 db    0
.eh_frame:0000000000006924                 db 0FCh
.eh_frame:0000000000006925                 db    0
.eh_frame:0000000000006926                 db    0
.eh_frame:0000000000006927                 db    0
.eh_frame:0000000000006928                 db 0E8h
.eh_frame:0000000000006929                 db 0B9h
.eh_frame:000000000000692A                 db 0FFh
.eh_frame:000000000000692B                 db 0FFh
.eh_frame:000000000000692C                 db  42h ; B
.eh_frame:000000000000692D                 db    3
.eh_frame:000000000000692E                 db    0
.eh_frame:000000000000692F                 db    0
.eh_frame:0000000000006930                 db    0
.eh_frame:0000000000006931                 db  42h ; B
.eh_frame:0000000000006932                 db  0Eh
.eh_frame:0000000000006933                 db  10h
.eh_frame:0000000000006934                 db  8Dh
.eh_frame:0000000000006935                 db    2
.eh_frame:0000000000006936                 db  42h ; B
.eh_frame:0000000000006937                 db  0Eh
.eh_frame:0000000000006938                 db  18h
.eh_frame:0000000000006939                 db  8Ch
.eh_frame:000000000000693A                 db    3
.eh_frame:000000000000693B                 db  46h ; F
.eh_frame:000000000000693C                 db  0Eh
.eh_frame:000000000000693D                 db  20h
.eh_frame:000000000000693E                 db  86h
.eh_frame:000000000000693F                 db    4
.eh_frame:0000000000006940                 db  41h ; A
.eh_frame:0000000000006941                 db  0Eh
.eh_frame:0000000000006942                 db  28h ; (
.eh_frame:0000000000006943                 db  83h
.eh_frame:0000000000006944                 db    5
.eh_frame:0000000000006945                 db  49h ; I
.eh_frame:0000000000006946                 db  0Eh
.eh_frame:0000000000006947                 db 0B0h
.eh_frame:0000000000006948                 db    1
.eh_frame:0000000000006949                 db    0
.eh_frame:000000000000694A                 db    0
.eh_frame:000000000000694B                 db    0
.eh_frame:000000000000694C                 db  48h ; H
.eh_frame:000000000000694D                 db    0
.eh_frame:000000000000694E                 db    0
.eh_frame:000000000000694F                 db    0
.eh_frame:0000000000006950                 db  28h ; (
.eh_frame:0000000000006951                 db    1
.eh_frame:0000000000006952                 db    0
.eh_frame:0000000000006953                 db    0
.eh_frame:0000000000006954                 db  8Ch
.eh_frame:0000000000006955                 db 0ACh
.eh_frame:0000000000006956                 db 0FFh
.eh_frame:0000000000006957                 db 0FFh
.eh_frame:0000000000006958                 db 0A9h
.eh_frame:0000000000006959                 db  0Ah
.eh_frame:000000000000695A                 db    0
.eh_frame:000000000000695B                 db    0
.eh_frame:000000000000695C                 db    0
.eh_frame:000000000000695D                 db  41h ; A
.eh_frame:000000000000695E                 db  0Eh
.eh_frame:000000000000695F                 db  10h
.eh_frame:0000000000006960                 db  86h
.eh_frame:0000000000006961                 db    2
.eh_frame:0000000000006962                 db  41h ; A
.eh_frame:0000000000006963                 db  0Eh
.eh_frame:0000000000006964                 db  18h
.eh_frame:0000000000006965                 db  83h
.eh_frame:0000000000006966                 db    3
.eh_frame:0000000000006967                 db  49h ; I
.eh_frame:0000000000006968                 db  0Eh
.eh_frame:0000000000006969                 db  40h ; @
.eh_frame:000000000000696A                 db    2
.eh_frame:000000000000696B                 db  5Dh ; ]
.eh_frame:000000000000696C                 db  0Eh
.eh_frame:000000000000696D                 db  48h ; H
.eh_frame:000000000000696E                 db  58h ; X
.eh_frame:000000000000696F                 db  0Eh
.eh_frame:0000000000006970                 db  50h ; P
.eh_frame:0000000000006971                 db    3
.eh_frame:0000000000006972                 db 0E0h
.eh_frame:0000000000006973                 db    9
.eh_frame:0000000000006974                 db  0Eh
.eh_frame:0000000000006975                 db  58h ; X
.eh_frame:0000000000006976                 db  41h ; A
.eh_frame:0000000000006977                 db  0Eh
.eh_frame:0000000000006978                 db  60h ; `
.eh_frame:0000000000006979                 db  50h ; P
.eh_frame:000000000000697A                 db  0Eh
.eh_frame:000000000000697B                 db  40h ; @
.eh_frame:000000000000697C                 db  51h ; Q
.eh_frame:000000000000697D                 db  0Eh
.eh_frame:000000000000697E                 db  48h ; H
.eh_frame:000000000000697F                 db  42h ; B
.eh_frame:0000000000006980                 db  0Eh
.eh_frame:0000000000006981                 db  50h ; P
.eh_frame:0000000000006982                 db  46h ; F
.eh_frame:0000000000006983                 db  0Eh
.eh_frame:0000000000006984                 db  48h ; H
.eh_frame:0000000000006985                 db  41h ; A
.eh_frame:0000000000006986                 db  0Eh
.eh_frame:0000000000006987                 db  40h ; @
.eh_frame:0000000000006988                 db  54h ; T
.eh_frame:0000000000006989                 db  0Ah
.eh_frame:000000000000698A                 db  0Eh
.eh_frame:000000000000698B                 db  18h
.eh_frame:000000000000698C                 db  43h ; C
.eh_frame:000000000000698D                 db  0Eh
.eh_frame:000000000000698E                 db  10h
.eh_frame:000000000000698F                 db  41h ; A
.eh_frame:0000000000006990                 db  0Eh
.eh_frame:0000000000006991                 db    8
.eh_frame:0000000000006992                 db  41h ; A
.eh_frame:0000000000006993                 db  0Bh
.eh_frame:0000000000006994                 db    0
.eh_frame:0000000000006995                 db    0
.eh_frame:0000000000006996                 db    0
.eh_frame:0000000000006997                 db    0
.eh_frame:0000000000006998                 db  10h
.eh_frame:0000000000006999                 db    0
.eh_frame:000000000000699A                 db    0
.eh_frame:000000000000699B                 db    0
.eh_frame:000000000000699C                 db  74h ; t
.eh_frame:000000000000699D                 db    1
.eh_frame:000000000000699E                 db    0
.eh_frame:000000000000699F                 db    0
.eh_frame:00000000000069A0                 db 0C0h
.eh_frame:00000000000069A1                 db 0BCh
.eh_frame:00000000000069A2                 db 0FFh
.eh_frame:00000000000069A3                 db 0FFh
.eh_frame:00000000000069A4                 db    8
.eh_frame:00000000000069A5                 db    0
.eh_frame:00000000000069A6                 db    0
.eh_frame:00000000000069A7                 db    0
.eh_frame:00000000000069A8                 db    0
.eh_frame:00000000000069A9                 db    0
.eh_frame:00000000000069AA                 db    0
.eh_frame:00000000000069AB                 db    0
.eh_frame:00000000000069AC                 db  10h
.eh_frame:00000000000069AD                 db    0
.eh_frame:00000000000069AE                 db    0
.eh_frame:00000000000069AF                 db    0
.eh_frame:00000000000069B0                 db  88h
.eh_frame:00000000000069B1                 db    1
.eh_frame:00000000000069B2                 db    0
.eh_frame:00000000000069B3                 db    0
.eh_frame:00000000000069B4                 db 0BCh
.eh_frame:00000000000069B5                 db 0BCh
.eh_frame:00000000000069B6                 db 0FFh
.eh_frame:00000000000069B7                 db 0FFh
.eh_frame:00000000000069B8                 db    8
.eh_frame:00000000000069B9                 db    0
.eh_frame:00000000000069BA                 db    0
.eh_frame:00000000000069BB                 db    0
.eh_frame:00000000000069BC                 db    0
.eh_frame:00000000000069BD                 db    0
.eh_frame:00000000000069BE                 db    0
.eh_frame:00000000000069BF                 db    0
.eh_frame:00000000000069C0                 db  2Ch ; ,
.eh_frame:00000000000069C1                 db    0
.eh_frame:00000000000069C2                 db    0
.eh_frame:00000000000069C3                 db    0
.eh_frame:00000000000069C4                 db  9Ch
.eh_frame:00000000000069C5                 db    1
.eh_frame:00000000000069C6                 db    0
.eh_frame:00000000000069C7                 db    0
.eh_frame:00000000000069C8                 db 0B8h
.eh_frame:00000000000069C9                 db 0BCh
.eh_frame:00000000000069CA                 db 0FFh
.eh_frame:00000000000069CB                 db 0FFh
.eh_frame:00000000000069CC                 db 0A4h
.eh_frame:00000000000069CD                 db    0
.eh_frame:00000000000069CE                 db    0
.eh_frame:00000000000069CF                 db    0
.eh_frame:00000000000069D0                 db    0
.eh_frame:00000000000069D1                 db  41h ; A
.eh_frame:00000000000069D2                 db  0Eh
.eh_frame:00000000000069D3                 db  10h
.eh_frame:00000000000069D4                 db  86h
.eh_frame:00000000000069D5                 db    2
.eh_frame:00000000000069D6                 db  41h ; A
.eh_frame:00000000000069D7                 db  0Eh
.eh_frame:00000000000069D8                 db  18h
.eh_frame:00000000000069D9                 db  83h
.eh_frame:00000000000069DA                 db    3
.eh_frame:00000000000069DB                 db  44h ; D
.eh_frame:00000000000069DC                 db  0Eh
.eh_frame:00000000000069DD                 db  20h
.eh_frame:00000000000069DE                 db  7Ah ; z
.eh_frame:00000000000069DF                 db  0Ah
.eh_frame:00000000000069E0                 db  0Eh
.eh_frame:00000000000069E1                 db  18h
.eh_frame:00000000000069E2                 db  41h ; A
.eh_frame:00000000000069E3                 db  0Eh
.eh_frame:00000000000069E4                 db  10h
.eh_frame:00000000000069E5                 db  41h ; A
.eh_frame:00000000000069E6                 db  0Eh
.eh_frame:00000000000069E7                 db    8
.eh_frame:00000000000069E8                 db  41h ; A
.eh_frame:00000000000069E9                 db  0Bh
.eh_frame:00000000000069EA                 db    0
.eh_frame:00000000000069EB                 db    0
.eh_frame:00000000000069EC                 db    0
.eh_frame:00000000000069ED                 db    0
.eh_frame:00000000000069EE                 db    0
.eh_frame:00000000000069EF                 db    0
.eh_frame:00000000000069F0                 db  54h ; T
.eh_frame:00000000000069F1                 db    0
.eh_frame:00000000000069F2                 db    0
.eh_frame:00000000000069F3                 db    0
.eh_frame:00000000000069F4                 db 0CCh
.eh_frame:00000000000069F5                 db    1
.eh_frame:00000000000069F6                 db    0
.eh_frame:00000000000069F7                 db    0
.eh_frame:00000000000069F8                 db  38h ; 8
.eh_frame:00000000000069F9                 db 0BDh
.eh_frame:00000000000069FA                 db 0FFh
.eh_frame:00000000000069FB                 db 0FFh
.eh_frame:00000000000069FC                 db  66h ; f
.eh_frame:00000000000069FD                 db    1
.eh_frame:00000000000069FE                 db    0
.eh_frame:00000000000069FF                 db    0
.eh_frame:0000000000006A00                 db    0
.eh_frame:0000000000006A01                 db  42h ; B
.eh_frame:0000000000006A02                 db  0Eh
.eh_frame:0000000000006A03                 db  10h
.eh_frame:0000000000006A04                 db  8Fh
.eh_frame:0000000000006A05                 db    2
.eh_frame:0000000000006A06                 db  42h ; B
.eh_frame:0000000000006A07                 db  0Eh
.eh_frame:0000000000006A08                 db  18h
.eh_frame:0000000000006A09                 db  8Eh
.eh_frame:0000000000006A0A                 db    3
.eh_frame:0000000000006A0B                 db  45h ; E
.eh_frame:0000000000006A0C                 db  0Eh
.eh_frame:0000000000006A0D                 db  20h
.eh_frame:0000000000006A0E                 db  8Dh
.eh_frame:0000000000006A0F                 db    4
.eh_frame:0000000000006A10                 db  42h ; B
.eh_frame:0000000000006A11                 db  0Eh
.eh_frame:0000000000006A12                 db  28h ; (
.eh_frame:0000000000006A13                 db  8Ch
.eh_frame:0000000000006A14                 db    5
.eh_frame:0000000000006A15                 db  44h ; D
.eh_frame:0000000000006A16                 db  0Eh
.eh_frame:0000000000006A17                 db  30h ; 0
.eh_frame:0000000000006A18                 db  86h
.eh_frame:0000000000006A19                 db    6
.eh_frame:0000000000006A1A                 db  41h ; A
.eh_frame:0000000000006A1B                 db  0Eh
.eh_frame:0000000000006A1C                 db  38h ; 8
.eh_frame:0000000000006A1D                 db  83h
.eh_frame:0000000000006A1E                 db    7
.eh_frame:0000000000006A1F                 db  4Bh ; K
.eh_frame:0000000000006A20                 db  0Eh
.eh_frame:0000000000006A21                 db  70h ; p
.eh_frame:0000000000006A22                 db    2
.eh_frame:0000000000006A23                 db 0BCh
.eh_frame:0000000000006A24                 db  0Eh
.eh_frame:0000000000006A25                 db  78h ; x
.eh_frame:0000000000006A26                 db  49h ; I
.eh_frame:0000000000006A27                 db  0Eh
.eh_frame:0000000000006A28                 db  80h
.eh_frame:0000000000006A29                 db    1
.eh_frame:0000000000006A2A                 db  5Fh ; _
.eh_frame:0000000000006A2B                 db  0Eh
.eh_frame:0000000000006A2C                 db  78h ; x
.eh_frame:0000000000006A2D                 db  41h ; A
.eh_frame:0000000000006A2E                 db  0Eh
.eh_frame:0000000000006A2F                 db  70h ; p
.eh_frame:0000000000006A30                 db  7Eh ; ~
.eh_frame:0000000000006A31                 db  0Ah
.eh_frame:0000000000006A32                 db  0Eh
.eh_frame:0000000000006A33                 db  38h ; 8
.eh_frame:0000000000006A34                 db  41h ; A
.eh_frame:0000000000006A35                 db  0Eh
.eh_frame:0000000000006A36                 db  30h ; 0
.eh_frame:0000000000006A37                 db  41h ; A
.eh_frame:0000000000006A38                 db  0Eh
.eh_frame:0000000000006A39                 db  28h ; (
.eh_frame:0000000000006A3A                 db  42h ; B
.eh_frame:0000000000006A3B                 db  0Eh
.eh_frame:0000000000006A3C                 db  20h
.eh_frame:0000000000006A3D                 db  42h ; B
.eh_frame:0000000000006A3E                 db  0Eh
.eh_frame:0000000000006A3F                 db  18h
.eh_frame:0000000000006A40                 db  42h ; B
.eh_frame:0000000000006A41                 db  0Eh
.eh_frame:0000000000006A42                 db  10h
.eh_frame:0000000000006A43                 db  42h ; B
.eh_frame:0000000000006A44                 db  0Eh
.eh_frame:0000000000006A45                 db    8
.eh_frame:0000000000006A46                 db  48h ; H
.eh_frame:0000000000006A47                 db  0Bh
.eh_frame:0000000000006A48                 db  54h ; T
.eh_frame:0000000000006A49                 db    0
.eh_frame:0000000000006A4A                 db    0
.eh_frame:0000000000006A4B                 db    0
.eh_frame:0000000000006A4C                 db  24h ; $
.eh_frame:0000000000006A4D                 db    2
.eh_frame:0000000000006A4E                 db    0
.eh_frame:0000000000006A4F                 db    0
.eh_frame:0000000000006A50                 db  50h ; P
.eh_frame:0000000000006A51                 db 0BEh
.eh_frame:0000000000006A52                 db 0FFh
.eh_frame:0000000000006A53                 db 0FFh
.eh_frame:0000000000006A54                 db  6Ch ; l
.eh_frame:0000000000006A55                 db    1
.eh_frame:0000000000006A56                 db    0
.eh_frame:0000000000006A57                 db    0
.eh_frame:0000000000006A58                 db    0
.eh_frame:0000000000006A59                 db  42h ; B
.eh_frame:0000000000006A5A                 db  0Eh
.eh_frame:0000000000006A5B                 db  10h
.eh_frame:0000000000006A5C                 db  8Fh
.eh_frame:0000000000006A5D                 db    2
.eh_frame:0000000000006A5E                 db  46h ; F
.eh_frame:0000000000006A5F                 db  0Eh
.eh_frame:0000000000006A60                 db  18h
.eh_frame:0000000000006A61                 db  8Eh
.eh_frame:0000000000006A62                 db    3
.eh_frame:0000000000006A63                 db  42h ; B
.eh_frame:0000000000006A64                 db  0Eh
.eh_frame:0000000000006A65                 db  20h
.eh_frame:0000000000006A66                 db  8Dh
.eh_frame:0000000000006A67                 db    4
.eh_frame:0000000000006A68                 db  45h ; E
.eh_frame:0000000000006A69                 db  0Eh
.eh_frame:0000000000006A6A                 db  28h ; (
.eh_frame:0000000000006A6B                 db  8Ch
.eh_frame:0000000000006A6C                 db    5
.eh_frame:0000000000006A6D                 db  41h ; A
.eh_frame:0000000000006A6E                 db  0Eh
.eh_frame:0000000000006A6F                 db  30h ; 0
.eh_frame:0000000000006A70                 db  86h
.eh_frame:0000000000006A71                 db    6
.eh_frame:0000000000006A72                 db  44h ; D
.eh_frame:0000000000006A73                 db  0Eh
.eh_frame:0000000000006A74                 db  38h ; 8
.eh_frame:0000000000006A75                 db  83h
.eh_frame:0000000000006A76                 db    7
.eh_frame:0000000000006A77                 db  4Eh ; N
.eh_frame:0000000000006A78                 db  0Eh
.eh_frame:0000000000006A79                 db  70h ; p
.eh_frame:0000000000006A7A                 db    2
.eh_frame:0000000000006A7B                 db 0BDh
.eh_frame:0000000000006A7C                 db  0Eh
.eh_frame:0000000000006A7D                 db  78h ; x
.eh_frame:0000000000006A7E                 db  49h ; I
.eh_frame:0000000000006A7F                 db  0Eh
.eh_frame:0000000000006A80                 db  80h
.eh_frame:0000000000006A81                 db    1
.eh_frame:0000000000006A82                 db  5Fh ; _
.eh_frame:0000000000006A83                 db  0Eh
.eh_frame:0000000000006A84                 db  78h ; x
.eh_frame:0000000000006A85                 db  41h ; A
.eh_frame:0000000000006A86                 db  0Eh
.eh_frame:0000000000006A87                 db  70h ; p
.eh_frame:0000000000006A88                 db  7Eh ; ~
.eh_frame:0000000000006A89                 db  0Ah
.eh_frame:0000000000006A8A                 db  0Eh
.eh_frame:0000000000006A8B                 db  38h ; 8
.eh_frame:0000000000006A8C                 db  41h ; A
.eh_frame:0000000000006A8D                 db  0Eh
.eh_frame:0000000000006A8E                 db  30h ; 0
.eh_frame:0000000000006A8F                 db  41h ; A
.eh_frame:0000000000006A90                 db  0Eh
.eh_frame:0000000000006A91                 db  28h ; (
.eh_frame:0000000000006A92                 db  42h ; B
.eh_frame:0000000000006A93                 db  0Eh
.eh_frame:0000000000006A94                 db  20h
.eh_frame:0000000000006A95                 db  42h ; B
.eh_frame:0000000000006A96                 db  0Eh
.eh_frame:0000000000006A97                 db  18h
.eh_frame:0000000000006A98                 db  42h ; B
.eh_frame:0000000000006A99                 db  0Eh
.eh_frame:0000000000006A9A                 db  10h
.eh_frame:0000000000006A9B                 db  42h ; B
.eh_frame:0000000000006A9C                 db  0Eh
.eh_frame:0000000000006A9D                 db    8
.eh_frame:0000000000006A9E                 db  48h ; H
.eh_frame:0000000000006A9F                 db  0Bh
.eh_frame:0000000000006AA0                 db  5Ch ; \
.eh_frame:0000000000006AA1                 db    0
.eh_frame:0000000000006AA2                 db    0
.eh_frame:0000000000006AA3                 db    0
.eh_frame:0000000000006AA4                 db  7Ch ; |
.eh_frame:0000000000006AA5                 db    2
.eh_frame:0000000000006AA6                 db    0
.eh_frame:0000000000006AA7                 db    0
.eh_frame:0000000000006AA8                 db  68h ; h
.eh_frame:0000000000006AA9                 db 0BFh
.eh_frame:0000000000006AAA                 db 0FFh
.eh_frame:0000000000006AAB                 db 0FFh
.eh_frame:0000000000006AAC                 db  4Ch ; L
.eh_frame:0000000000006AAD                 db    1
.eh_frame:0000000000006AAE                 db    0
.eh_frame:0000000000006AAF                 db    0
.eh_frame:0000000000006AB0                 db    0
.eh_frame:0000000000006AB1                 db  42h ; B
.eh_frame:0000000000006AB2                 db  0Eh
.eh_frame:0000000000006AB3                 db  10h
.eh_frame:0000000000006AB4                 db  8Fh
.eh_frame:0000000000006AB5                 db    2
.eh_frame:0000000000006AB6                 db  42h ; B
.eh_frame:0000000000006AB7                 db  0Eh
.eh_frame:0000000000006AB8                 db  18h
.eh_frame:0000000000006AB9                 db  8Eh
.eh_frame:0000000000006ABA                 db    3
.eh_frame:0000000000006ABB                 db  44h ; D
.eh_frame:0000000000006ABC                 db  0Eh
.eh_frame:0000000000006ABD                 db  20h
.eh_frame:0000000000006ABE                 db  8Dh
.eh_frame:0000000000006ABF                 db    4
.eh_frame:0000000000006AC0                 db  42h ; B
.eh_frame:0000000000006AC1                 db  0Eh
.eh_frame:0000000000006AC2                 db  28h ; (
.eh_frame:0000000000006AC3                 db  8Ch
.eh_frame:0000000000006AC4                 db    5
.eh_frame:0000000000006AC5                 db  44h ; D
.eh_frame:0000000000006AC6                 db  0Eh
.eh_frame:0000000000006AC7                 db  30h ; 0
.eh_frame:0000000000006AC8                 db  86h
.eh_frame:0000000000006AC9                 db    6
.eh_frame:0000000000006ACA                 db  41h ; A
.eh_frame:0000000000006ACB                 db  0Eh
.eh_frame:0000000000006ACC                 db  38h ; 8
.eh_frame:0000000000006ACD                 db  83h
.eh_frame:0000000000006ACE                 db    7
.eh_frame:0000000000006ACF                 db  4Ah ; J
.eh_frame:0000000000006AD0                 db  0Eh
.eh_frame:0000000000006AD1                 db  70h ; p
.eh_frame:0000000000006AD2                 db    2
.eh_frame:0000000000006AD3                 db 0AEh
.eh_frame:0000000000006AD4                 db  0Eh
.eh_frame:0000000000006AD5                 db  78h ; x
.eh_frame:0000000000006AD6                 db  44h ; D
.eh_frame:0000000000006AD7                 db  0Eh
.eh_frame:0000000000006AD8                 db  80h
.eh_frame:0000000000006AD9                 db    1
.eh_frame:0000000000006ADA                 db  4Fh ; O
.eh_frame:0000000000006ADB                 db  0Eh
.eh_frame:0000000000006ADC                 db  88h
.eh_frame:0000000000006ADD                 db    1
.eh_frame:0000000000006ADE                 db  49h ; I
.eh_frame:0000000000006ADF                 db  0Eh
.eh_frame:0000000000006AE0                 db  90h
.eh_frame:0000000000006AE1                 db    1
.eh_frame:0000000000006AE2                 db  4Ch ; L
.eh_frame:0000000000006AE3                 db  0Eh
.eh_frame:0000000000006AE4                 db  70h ; p
.eh_frame:0000000000006AE5                 db    2
.eh_frame:0000000000006AE6                 db  45h ; E
.eh_frame:0000000000006AE7                 db  0Ah
.eh_frame:0000000000006AE8                 db  0Eh
.eh_frame:0000000000006AE9                 db  38h ; 8
.eh_frame:0000000000006AEA                 db  41h ; A
.eh_frame:0000000000006AEB                 db  0Eh
.eh_frame:0000000000006AEC                 db  30h ; 0
.eh_frame:0000000000006AED                 db  41h ; A
.eh_frame:0000000000006AEE                 db  0Eh
.eh_frame:0000000000006AEF                 db  28h ; (
.eh_frame:0000000000006AF0                 db  42h ; B
.eh_frame:0000000000006AF1                 db  0Eh
.eh_frame:0000000000006AF2                 db  20h
.eh_frame:0000000000006AF3                 db  42h ; B
.eh_frame:0000000000006AF4                 db  0Eh
.eh_frame:0000000000006AF5                 db  18h
.eh_frame:0000000000006AF6                 db  42h ; B
.eh_frame:0000000000006AF7                 db  0Eh
.eh_frame:0000000000006AF8                 db  10h
.eh_frame:0000000000006AF9                 db  42h ; B
.eh_frame:0000000000006AFA                 db  0Eh
.eh_frame:0000000000006AFB                 db    8
.eh_frame:0000000000006AFC                 db  42h ; B
.eh_frame:0000000000006AFD                 db  0Bh
.eh_frame:0000000000006AFE                 db    0
.eh_frame:0000000000006AFF                 db    0
.eh_frame:0000000000006B00                 db  38h ; 8
.eh_frame:0000000000006B01                 db    0
.eh_frame:0000000000006B02                 db    0
.eh_frame:0000000000006B03                 db    0
.eh_frame:0000000000006B04                 db 0DCh
.eh_frame:0000000000006B05                 db    2
.eh_frame:0000000000006B06                 db    0
.eh_frame:0000000000006B07                 db    0
.eh_frame:0000000000006B08                 db  58h ; X
.eh_frame:0000000000006B09                 db 0C0h
.eh_frame:0000000000006B0A                 db 0FFh
.eh_frame:0000000000006B0B                 db 0FFh
.eh_frame:0000000000006B0C                 db  3Fh ; ?
.eh_frame:0000000000006B0D                 db    1
.eh_frame:0000000000006B0E                 db    0
.eh_frame:0000000000006B0F                 db    0
.eh_frame:0000000000006B10                 db    0
.eh_frame:0000000000006B11                 db  42h ; B
.eh_frame:0000000000006B12                 db  0Eh
.eh_frame:0000000000006B13                 db  10h
.eh_frame:0000000000006B14                 db  8Dh
.eh_frame:0000000000006B15                 db    2
.eh_frame:0000000000006B16                 db  42h ; B
.eh_frame:0000000000006B17                 db  0Eh
.eh_frame:0000000000006B18                 db  18h
.eh_frame:0000000000006B19                 db  8Ch
.eh_frame:0000000000006B1A                 db    3
.eh_frame:0000000000006B1B                 db  44h ; D
.eh_frame:0000000000006B1C                 db  0Eh
.eh_frame:0000000000006B1D                 db  20h
.eh_frame:0000000000006B1E                 db  86h
.eh_frame:0000000000006B1F                 db    4
.eh_frame:0000000000006B20                 db  41h ; A
.eh_frame:0000000000006B21                 db  0Eh
.eh_frame:0000000000006B22                 db  28h ; (
.eh_frame:0000000000006B23                 db  83h
.eh_frame:0000000000006B24                 db    5
.eh_frame:0000000000006B25                 db  4Dh ; M
.eh_frame:0000000000006B26                 db  0Eh
.eh_frame:0000000000006B27                 db  90h
.eh_frame:0000000000006B28                 db    2
.eh_frame:0000000000006B29                 db    2
.eh_frame:0000000000006B2A                 db  8Eh
.eh_frame:0000000000006B2B                 db  0Ah
.eh_frame:0000000000006B2C                 db  0Eh
.eh_frame:0000000000006B2D                 db  28h ; (
.eh_frame:0000000000006B2E                 db  41h ; A
.eh_frame:0000000000006B2F                 db  0Eh
.eh_frame:0000000000006B30                 db  20h
.eh_frame:0000000000006B31                 db  41h ; A
.eh_frame:0000000000006B32                 db  0Eh
.eh_frame:0000000000006B33                 db  18h
.eh_frame:0000000000006B34                 db  42h ; B
.eh_frame:0000000000006B35                 db  0Eh
.eh_frame:0000000000006B36                 db  10h
.eh_frame:0000000000006B37                 db  42h ; B
.eh_frame:0000000000006B38                 db  0Eh
.eh_frame:0000000000006B39                 db    8
.eh_frame:0000000000006B3A                 db  46h ; F
.eh_frame:0000000000006B3B                 db  0Bh
.eh_frame:0000000000006B3C                 db  48h ; H
.eh_frame:0000000000006B3D                 db    0
.eh_frame:0000000000006B3E                 db    0
.eh_frame:0000000000006B3F                 db    0
.eh_frame:0000000000006B40                 db  18h
.eh_frame:0000000000006B41                 db    3
.eh_frame:0000000000006B42                 db    0
.eh_frame:0000000000006B43                 db    0
.eh_frame:0000000000006B44                 db  5Ch ; \
.eh_frame:0000000000006B45                 db 0C1h
.eh_frame:0000000000006B46                 db 0FFh
.eh_frame:0000000000006B47                 db 0FFh
.eh_frame:0000000000006B48                 db  3Bh ; ;
.eh_frame:0000000000006B49                 db    1
.eh_frame:0000000000006B4A                 db    0
.eh_frame:0000000000006B4B                 db    0
.eh_frame:0000000000006B4C                 db    0
.eh_frame:0000000000006B4D                 db  42h ; B
.eh_frame:0000000000006B4E                 db  0Eh
.eh_frame:0000000000006B4F                 db  10h
.eh_frame:0000000000006B50                 db  8Eh
.eh_frame:0000000000006B51                 db    2
.eh_frame:0000000000006B52                 db  42h ; B
.eh_frame:0000000000006B53                 db  0Eh
.eh_frame:0000000000006B54                 db  18h
.eh_frame:0000000000006B55                 db  8Dh
.eh_frame:0000000000006B56                 db    3
.eh_frame:0000000000006B57                 db  45h ; E
.eh_frame:0000000000006B58                 db  0Eh
.eh_frame:0000000000006B59                 db  20h
.eh_frame:0000000000006B5A                 db  8Ch
.eh_frame:0000000000006B5B                 db    4
.eh_frame:0000000000006B5C                 db  41h ; A
.eh_frame:0000000000006B5D                 db  0Eh
.eh_frame:0000000000006B5E                 db  28h ; (
.eh_frame:0000000000006B5F                 db  86h
.eh_frame:0000000000006B60                 db    5
.eh_frame:0000000000006B61                 db  44h ; D
.eh_frame:0000000000006B62                 db  0Eh
.eh_frame:0000000000006B63                 db  30h ; 0
.eh_frame:0000000000006B64                 db  83h
.eh_frame:0000000000006B65                 db    6
.eh_frame:0000000000006B66                 db  4Ah ; J
.eh_frame:0000000000006B67                 db  0Eh
.eh_frame:0000000000006B68                 db  80h
.eh_frame:0000000000006B69                 db    2
.eh_frame:0000000000006B6A                 db    3
.eh_frame:0000000000006B6B                 db  0Dh
.eh_frame:0000000000006B6C                 db    1
.eh_frame:0000000000006B6D                 db  0Ah
.eh_frame:0000000000006B6E                 db  0Eh
.eh_frame:0000000000006B6F                 db  30h ; 0
.eh_frame:0000000000006B70                 db  41h ; A
.eh_frame:0000000000006B71                 db  0Eh
.eh_frame:0000000000006B72                 db  28h ; (
.eh_frame:0000000000006B73                 db  41h ; A
.eh_frame:0000000000006B74                 db  0Eh
.eh_frame:0000000000006B75                 db  20h
.eh_frame:0000000000006B76                 db  42h ; B
.eh_frame:0000000000006B77                 db  0Eh
.eh_frame:0000000000006B78                 db  18h
.eh_frame:0000000000006B79                 db  42h ; B
.eh_frame:0000000000006B7A                 db  0Eh
.eh_frame:0000000000006B7B                 db  10h
.eh_frame:0000000000006B7C                 db  42h ; B
.eh_frame:0000000000006B7D                 db  0Eh
.eh_frame:0000000000006B7E                 db    8
.eh_frame:0000000000006B7F                 db  43h ; C
.eh_frame:0000000000006B80                 db  0Bh
.eh_frame:0000000000006B81                 db    0
.eh_frame:0000000000006B82                 db    0
.eh_frame:0000000000006B83                 db    0
.eh_frame:0000000000006B84                 db    0
.eh_frame:0000000000006B85                 db    0
.eh_frame:0000000000006B86                 db    0
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B88                 db  1Ch
.eh_frame:0000000000006B89                 db    0
.eh_frame:0000000000006B8A                 db    0
.eh_frame:0000000000006B8B                 db    0
.eh_frame:0000000000006B8C                 db  64h ; d
.eh_frame:0000000000006B8D                 db    3
.eh_frame:0000000000006B8E                 db    0
.eh_frame:0000000000006B8F                 db    0
.eh_frame:0000000000006B90                 db  50h ; P
.eh_frame:0000000000006B91                 db 0C2h
.eh_frame:0000000000006B92                 db 0FFh
.eh_frame:0000000000006B93                 db 0FFh
.eh_frame:0000000000006B94                 db  9Fh
.eh_frame:0000000000006B95                 db    0
.eh_frame:0000000000006B96                 db    0
.eh_frame:0000000000006B97                 db    0
.eh_frame:0000000000006B98                 db    0
.eh_frame:0000000000006B99                 db  44h ; D
.eh_frame:0000000000006B9A                 db  0Eh
.eh_frame:0000000000006B9B                 db  10h
.eh_frame:0000000000006B9C                 db  83h
.eh_frame:0000000000006B9D                 db    2
.eh_frame:0000000000006B9E                 db    2
.eh_frame:0000000000006B9F                 db  78h ; x
.eh_frame:0000000000006BA0                 db  0Ah
.eh_frame:0000000000006BA1                 db  0Eh
.eh_frame:0000000000006BA2                 db    8
.eh_frame:0000000000006BA3                 db  41h ; A
.eh_frame:0000000000006BA4                 db  0Bh
.eh_frame:0000000000006BA5                 db    0
.eh_frame:0000000000006BA6                 db    0
.eh_frame:0000000000006BA7                 db    0
.eh_frame:0000000000006BA8                 db  40h ; @
.eh_frame:0000000000006BA9                 db    0
.eh_frame:0000000000006BAA                 db    0
.eh_frame:0000000000006BAB                 db    0
.eh_frame:0000000000006BAC                 db  84h
.eh_frame:0000000000006BAD                 db    3
.eh_frame:0000000000006BAE                 db    0
.eh_frame:0000000000006BAF                 db    0
.eh_frame:0000000000006BB0                 db 0D0h
.eh_frame:0000000000006BB1                 db 0C2h
.eh_frame:0000000000006BB2                 db 0FFh
.eh_frame:0000000000006BB3                 db 0FFh
.eh_frame:0000000000006BB4                 db 0E7h
.eh_frame:0000000000006BB5                 db    0
.eh_frame:0000000000006BB6                 db    0
.eh_frame:0000000000006BB7                 db    0
.eh_frame:0000000000006BB8                 db    0
.eh_frame:0000000000006BB9                 db  41h ; A
.eh_frame:0000000000006BBA                 db  0Eh
.eh_frame:0000000000006BBB                 db  10h
.eh_frame:0000000000006BBC                 db  86h
.eh_frame:0000000000006BBD                 db    2
.eh_frame:0000000000006BBE                 db  41h ; A
.eh_frame:0000000000006BBF                 db  0Eh
.eh_frame:0000000000006BC0                 db  18h
.eh_frame:0000000000006BC1                 db  83h
.eh_frame:0000000000006BC2                 db    3
.eh_frame:0000000000006BC3                 db  49h ; I
.eh_frame:0000000000006BC4                 db  0Eh
.eh_frame:0000000000006BC5                 db  20h
.eh_frame:0000000000006BC6                 db  6Eh ; n
.eh_frame:0000000000006BC7                 db  0Ah
.eh_frame:0000000000006BC8                 db  0Eh
.eh_frame:0000000000006BC9                 db  18h
.eh_frame:0000000000006BCA                 db  41h ; A
.eh_frame:0000000000006BCB                 db  0Eh
.eh_frame:0000000000006BCC                 db  10h
.eh_frame:0000000000006BCD                 db  41h ; A
.eh_frame:0000000000006BCE                 db  0Eh
.eh_frame:0000000000006BCF                 db    8
.eh_frame:0000000000006BD0                 db  45h ; E
.eh_frame:0000000000006BD1                 db  0Bh
.eh_frame:0000000000006BD2                 db    2
.eh_frame:0000000000006BD3                 db  4Ah ; J
.eh_frame:0000000000006BD4                 db  0Ah
.eh_frame:0000000000006BD5                 db  0Eh
.eh_frame:0000000000006BD6                 db  18h
.eh_frame:0000000000006BD7                 db  41h ; A
.eh_frame:0000000000006BD8                 db  0Eh
.eh_frame:0000000000006BD9                 db  10h
.eh_frame:0000000000006BDA                 db  41h ; A
.eh_frame:0000000000006BDB                 db  0Eh
.eh_frame:0000000000006BDC                 db    8
.eh_frame:0000000000006BDD                 db  44h ; D
.eh_frame:0000000000006BDE                 db  0Bh
.eh_frame:0000000000006BDF                 db    2
.eh_frame:0000000000006BE0                 db  54h ; T
.eh_frame:0000000000006BE1                 db  0Eh
.eh_frame:0000000000006BE2                 db  18h
.eh_frame:0000000000006BE3                 db  41h ; A
.eh_frame:0000000000006BE4                 db  0Eh
.eh_frame:0000000000006BE5                 db  10h
.eh_frame:0000000000006BE6                 db  41h ; A
.eh_frame:0000000000006BE7                 db  0Eh
.eh_frame:0000000000006BE8                 db    8
.eh_frame:0000000000006BE9                 db    0
.eh_frame:0000000000006BEA                 db    0
.eh_frame:0000000000006BEB                 db    0
.eh_frame:0000000000006BEC                 db  74h ; t
.eh_frame:0000000000006BED                 db    0
.eh_frame:0000000000006BEE                 db    0
.eh_frame:0000000000006BEF                 db    0
.eh_frame:0000000000006BF0                 db 0C8h
.eh_frame:0000000000006BF1                 db    3
.eh_frame:0000000000006BF2                 db    0
.eh_frame:0000000000006BF3                 db    0
.eh_frame:0000000000006BF4                 db  7Ch ; |
.eh_frame:0000000000006BF5                 db 0C3h
.eh_frame:0000000000006BF6                 db 0FFh
.eh_frame:0000000000006BF7                 db 0FFh
.eh_frame:0000000000006BF8                 db  34h ; 4
.eh_frame:0000000000006BF9                 db  12h
.eh_frame:0000000000006BFA                 db    0
.eh_frame:0000000000006BFB                 db    0
.eh_frame:0000000000006BFC                 db    0
.eh_frame:0000000000006BFD                 db  42h ; B
.eh_frame:0000000000006BFE                 db  0Eh
.eh_frame:0000000000006BFF                 db  10h
.eh_frame:0000000000006C00                 db  8Fh
.eh_frame:0000000000006C01                 db    2
.eh_frame:0000000000006C02                 db  42h ; B
.eh_frame:0000000000006C03                 db  0Eh
.eh_frame:0000000000006C04                 db  18h
.eh_frame:0000000000006C05                 db  8Eh
.eh_frame:0000000000006C06                 db    3
.eh_frame:0000000000006C07                 db  45h ; E
.eh_frame:0000000000006C08                 db  0Eh
.eh_frame:0000000000006C09                 db  20h
.eh_frame:0000000000006C0A                 db  8Dh
.eh_frame:0000000000006C0B                 db    4
.eh_frame:0000000000006C0C                 db  42h ; B
.eh_frame:0000000000006C0D                 db  0Eh
.eh_frame:0000000000006C0E                 db  28h ; (
.eh_frame:0000000000006C0F                 db  8Ch
.eh_frame:0000000000006C10                 db    5
.eh_frame:0000000000006C11                 db  44h ; D
.eh_frame:0000000000006C12                 db  0Eh
.eh_frame:0000000000006C13                 db  30h ; 0
.eh_frame:0000000000006C14                 db  86h
.eh_frame:0000000000006C15                 db    6
.eh_frame:0000000000006C16                 db  41h ; A
.eh_frame:0000000000006C17                 db  0Eh
.eh_frame:0000000000006C18                 db  38h ; 8
.eh_frame:0000000000006C19                 db  83h
.eh_frame:0000000000006C1A                 db    7
.eh_frame:0000000000006C1B                 db  53h ; S
.eh_frame:0000000000006C1C                 db  0Eh
.eh_frame:0000000000006C1D                 db 0F0h
.eh_frame:0000000000006C1E                 db    1
.eh_frame:0000000000006C1F                 db    3
.eh_frame:0000000000006C20                 db  81h
.eh_frame:0000000000006C21                 db  0Bh
.eh_frame:0000000000006C22                 db  0Eh
.eh_frame:0000000000006C23                 db 0F8h
.eh_frame:0000000000006C24                 db    1
.eh_frame:0000000000006C25                 db  4Ah ; J
.eh_frame:0000000000006C26                 db  0Eh
.eh_frame:0000000000006C27                 db  80h
.eh_frame:0000000000006C28                 db    2
.eh_frame:0000000000006C29                 db  44h ; D
.eh_frame:0000000000006C2A                 db  0Eh
.eh_frame:0000000000006C2B                 db  88h
.eh_frame:0000000000006C2C                 db    2
.eh_frame:0000000000006C2D                 db  45h ; E
.eh_frame:0000000000006C2E                 db  0Eh
.eh_frame:0000000000006C2F                 db  90h
.eh_frame:0000000000006C30                 db    2
.eh_frame:0000000000006C31                 db  5Fh ; _
.eh_frame:0000000000006C32                 db  0Eh
.eh_frame:0000000000006C33                 db 0F0h
.eh_frame:0000000000006C34                 db    1
.eh_frame:0000000000006C35                 db  64h ; d
.eh_frame:0000000000006C36                 db  0Ah
.eh_frame:0000000000006C37                 db  0Eh
.eh_frame:0000000000006C38                 db  38h ; 8
.eh_frame:0000000000006C39                 db  41h ; A
.eh_frame:0000000000006C3A                 db  0Eh
.eh_frame:0000000000006C3B                 db  30h ; 0
.eh_frame:0000000000006C3C                 db  41h ; A
.eh_frame:0000000000006C3D                 db  0Eh
.eh_frame:0000000000006C3E                 db  28h ; (
.eh_frame:0000000000006C3F                 db  42h ; B
.eh_frame:0000000000006C40                 db  0Eh
.eh_frame:0000000000006C41                 db  20h
.eh_frame:0000000000006C42                 db  42h ; B
.eh_frame:0000000000006C43                 db  0Eh
.eh_frame:0000000000006C44                 db  18h
.eh_frame:0000000000006C45                 db  42h ; B
.eh_frame:0000000000006C46                 db  0Eh
.eh_frame:0000000000006C47                 db  10h
.eh_frame:0000000000006C48                 db  42h ; B
.eh_frame:0000000000006C49                 db  0Eh
.eh_frame:0000000000006C4A                 db    8
.eh_frame:0000000000006C4B                 db  44h ; D
.eh_frame:0000000000006C4C                 db  0Bh
.eh_frame:0000000000006C4D                 db    3
.eh_frame:0000000000006C4E                 db  99h
.eh_frame:0000000000006C4F                 db    5
.eh_frame:0000000000006C50                 db  0Eh
.eh_frame:0000000000006C51                 db 0F8h
.eh_frame:0000000000006C52                 db    1
.eh_frame:0000000000006C53                 db  4Dh ; M
.eh_frame:0000000000006C54                 db  0Eh
.eh_frame:0000000000006C55                 db  80h
.eh_frame:0000000000006C56                 db    2
.eh_frame:0000000000006C57                 db  44h ; D
.eh_frame:0000000000006C58                 db  0Eh
.eh_frame:0000000000006C59                 db  88h
.eh_frame:0000000000006C5A                 db    2
.eh_frame:0000000000006C5B                 db  47h ; G
.eh_frame:0000000000006C5C                 db  0Eh
.eh_frame:0000000000006C5D                 db  90h
.eh_frame:0000000000006C5E                 db    2
.eh_frame:0000000000006C5F                 db  5Bh ; [
.eh_frame:0000000000006C60                 db  0Eh
.eh_frame:0000000000006C61                 db 0F0h
.eh_frame:0000000000006C62                 db    1
.eh_frame:0000000000006C63                 db    0
.eh_frame:0000000000006C64                 db  68h ; h
.eh_frame:0000000000006C65                 db    0
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db  40h ; @
.eh_frame:0000000000006C69                 db    4
.eh_frame:0000000000006C6A                 db    0
.eh_frame:0000000000006C6B                 db    0
.eh_frame:0000000000006C6C                 db  44h ; D
.eh_frame:0000000000006C6D                 db 0D5h
.eh_frame:0000000000006C6E                 db 0FFh
.eh_frame:0000000000006C6F                 db 0FFh
.eh_frame:0000000000006C70                 db 0ABh
.eh_frame:0000000000006C71                 db    1
.eh_frame:0000000000006C72                 db    0
.eh_frame:0000000000006C73                 db    0
.eh_frame:0000000000006C74                 db    0
.eh_frame:0000000000006C75                 db  42h ; B
.eh_frame:0000000000006C76                 db  0Eh
.eh_frame:0000000000006C77                 db  10h
.eh_frame:0000000000006C78                 db  8Fh
.eh_frame:0000000000006C79                 db    2
.eh_frame:0000000000006C7A                 db  42h ; B
.eh_frame:0000000000006C7B                 db  0Eh
.eh_frame:0000000000006C7C                 db  18h
.eh_frame:0000000000006C7D                 db  8Eh
.eh_frame:0000000000006C7E                 db    3
.eh_frame:0000000000006C7F                 db  45h ; E
.eh_frame:0000000000006C80                 db  0Eh
.eh_frame:0000000000006C81                 db  20h
.eh_frame:0000000000006C82                 db  8Dh
.eh_frame:0000000000006C83                 db    4
.eh_frame:0000000000006C84                 db  42h ; B
.eh_frame:0000000000006C85                 db  0Eh
.eh_frame:0000000000006C86                 db  28h ; (
.eh_frame:0000000000006C87                 db  8Ch
.eh_frame:0000000000006C88                 db    5
.eh_frame:0000000000006C89                 db  44h ; D
.eh_frame:0000000000006C8A                 db  0Eh
.eh_frame:0000000000006C8B                 db  30h ; 0
.eh_frame:0000000000006C8C                 db  86h
.eh_frame:0000000000006C8D                 db    6
.eh_frame:0000000000006C8E                 db  41h ; A
.eh_frame:0000000000006C8F                 db  0Eh
.eh_frame:0000000000006C90                 db  38h ; 8
.eh_frame:0000000000006C91                 db  83h
.eh_frame:0000000000006C92                 db    7
.eh_frame:0000000000006C93                 db  47h ; G
.eh_frame:0000000000006C94                 db  0Eh
.eh_frame:0000000000006C95                 db  60h ; `
.eh_frame:0000000000006C96                 db    2
.eh_frame:0000000000006C97                 db  99h
.eh_frame:0000000000006C98                 db  0Eh
.eh_frame:0000000000006C99                 db  68h ; h
.eh_frame:0000000000006C9A                 db  5Fh ; _
.eh_frame:0000000000006C9B                 db  0Eh
.eh_frame:0000000000006C9C                 db  70h ; p
.eh_frame:0000000000006C9D                 db  46h ; F
.eh_frame:0000000000006C9E                 db  0Eh
.eh_frame:0000000000006C9F                 db  78h ; x
.eh_frame:0000000000006CA0                 db  42h ; B
.eh_frame:0000000000006CA1                 db  0Eh
.eh_frame:0000000000006CA2                 db  80h
.eh_frame:0000000000006CA3                 db    1
.eh_frame:0000000000006CA4                 db  59h ; Y
.eh_frame:0000000000006CA5                 db  0Eh
.eh_frame:0000000000006CA6                 db  60h ; `
.eh_frame:0000000000006CA7                 db    2
.eh_frame:0000000000006CA8                 db  40h ; @
.eh_frame:0000000000006CA9                 db  0Eh
.eh_frame:0000000000006CAA                 db  68h ; h
.eh_frame:0000000000006CAB                 db  4Bh ; K
.eh_frame:0000000000006CAC                 db  0Eh
.eh_frame:0000000000006CAD                 db  70h ; p
.eh_frame:0000000000006CAE                 db  43h ; C
.eh_frame:0000000000006CAF                 db  0Eh
.eh_frame:0000000000006CB0                 db  78h ; x
.eh_frame:0000000000006CB1                 db  45h ; E
.eh_frame:0000000000006CB2                 db  0Eh
.eh_frame:0000000000006CB3                 db  80h
.eh_frame:0000000000006CB4                 db    1
.eh_frame:0000000000006CB5                 db  5Eh ; ^
.eh_frame:0000000000006CB6                 db  0Eh
.eh_frame:0000000000006CB7                 db  60h ; `
.eh_frame:0000000000006CB8                 db  4Ch ; L
.eh_frame:0000000000006CB9                 db  0Ah
.eh_frame:0000000000006CBA                 db  0Eh
.eh_frame:0000000000006CBB                 db  38h ; 8
.eh_frame:0000000000006CBC                 db  44h ; D
.eh_frame:0000000000006CBD                 db  0Eh
.eh_frame:0000000000006CBE                 db  30h ; 0
.eh_frame:0000000000006CBF                 db  41h ; A
.eh_frame:0000000000006CC0                 db  0Eh
.eh_frame:0000000000006CC1                 db  28h ; (
.eh_frame:0000000000006CC2                 db  42h ; B
.eh_frame:0000000000006CC3                 db  0Eh
.eh_frame:0000000000006CC4                 db  20h
.eh_frame:0000000000006CC5                 db  42h ; B
.eh_frame:0000000000006CC6                 db  0Eh
.eh_frame:0000000000006CC7                 db  18h
.eh_frame:0000000000006CC8                 db  42h ; B
.eh_frame:0000000000006CC9                 db  0Eh
.eh_frame:0000000000006CCA                 db  10h
.eh_frame:0000000000006CCB                 db  42h ; B
.eh_frame:0000000000006CCC                 db  0Eh
.eh_frame:0000000000006CCD                 db    8
.eh_frame:0000000000006CCE                 db  46h ; F
.eh_frame:0000000000006CCF                 db  0Bh
.eh_frame:0000000000006CD0                 db  28h ; (
.eh_frame:0000000000006CD1                 db    0
.eh_frame:0000000000006CD2                 db    0
.eh_frame:0000000000006CD3                 db    0
.eh_frame:0000000000006CD4                 db 0ACh
.eh_frame:0000000000006CD5                 db    4
.eh_frame:0000000000006CD6                 db    0
.eh_frame:0000000000006CD7                 db    0
.eh_frame:0000000000006CD8                 db  88h
.eh_frame:0000000000006CD9                 db 0D6h
.eh_frame:0000000000006CDA                 db 0FFh
.eh_frame:0000000000006CDB                 db 0FFh
.eh_frame:0000000000006CDC                 db  36h ; 6
.eh_frame:0000000000006CDD                 db    0
.eh_frame:0000000000006CDE                 db    0
.eh_frame:0000000000006CDF                 db    0
.eh_frame:0000000000006CE0                 db    0
.eh_frame:0000000000006CE1                 db  42h ; B
.eh_frame:0000000000006CE2                 db  0Eh
.eh_frame:0000000000006CE3                 db  10h
.eh_frame:0000000000006CE4                 db  8Ch
.eh_frame:0000000000006CE5                 db    2
.eh_frame:0000000000006CE6                 db  41h ; A
.eh_frame:0000000000006CE7                 db  0Eh
.eh_frame:0000000000006CE8                 db  18h
.eh_frame:0000000000006CE9                 db  86h
.eh_frame:0000000000006CEA                 db    3
.eh_frame:0000000000006CEB                 db  41h ; A
.eh_frame:0000000000006CEC                 db  0Eh
.eh_frame:0000000000006CED                 db  20h
.eh_frame:0000000000006CEE                 db  83h
.eh_frame:0000000000006CEF                 db    4
.eh_frame:0000000000006CF0                 db  6Eh ; n
.eh_frame:0000000000006CF1                 db  0Eh
.eh_frame:0000000000006CF2                 db  18h
.eh_frame:0000000000006CF3                 db  41h ; A
.eh_frame:0000000000006CF4                 db  0Eh
.eh_frame:0000000000006CF5                 db  10h
.eh_frame:0000000000006CF6                 db  42h ; B
.eh_frame:0000000000006CF7                 db  0Eh
.eh_frame:0000000000006CF8                 db    8
.eh_frame:0000000000006CF9                 db    0
.eh_frame:0000000000006CFA                 db    0
.eh_frame:0000000000006CFB                 db    0
.eh_frame:0000000000006CFC                 db  10h
.eh_frame:0000000000006CFD                 db    0
.eh_frame:0000000000006CFE                 db    0
.eh_frame:0000000000006CFF                 db    0
.eh_frame:0000000000006D00                 db 0D8h
.eh_frame:0000000000006D01                 db    4
.eh_frame:0000000000006D02                 db    0
.eh_frame:0000000000006D03                 db    0
.eh_frame:0000000000006D04                 db  9Ch
.eh_frame:0000000000006D05                 db 0D6h
.eh_frame:0000000000006D06                 db 0FFh
.eh_frame:0000000000006D07                 db 0FFh
.eh_frame:0000000000006D08                 db  11h
.eh_frame:0000000000006D09                 db    0
.eh_frame:0000000000006D0A                 db    0
.eh_frame:0000000000006D0B                 db    0
.eh_frame:0000000000006D0C                 db    0
.eh_frame:0000000000006D0D                 db    0
.eh_frame:0000000000006D0E                 db    0
.eh_frame:0000000000006D0F                 db    0
.eh_frame:0000000000006D10                 db  10h
.eh_frame:0000000000006D11                 db    0
.eh_frame:0000000000006D12                 db    0
.eh_frame:0000000000006D13                 db    0
.eh_frame:0000000000006D14                 db 0ECh
.eh_frame:0000000000006D15                 db    4
.eh_frame:0000000000006D16                 db    0
.eh_frame:0000000000006D17                 db    0
.eh_frame:0000000000006D18                 db 0A8h
.eh_frame:0000000000006D19                 db 0D6h
.eh_frame:0000000000006D1A                 db 0FFh
.eh_frame:0000000000006D1B                 db 0FFh
.eh_frame:0000000000006D1C                 db  11h
.eh_frame:0000000000006D1D                 db    0
.eh_frame:0000000000006D1E                 db    0
.eh_frame:0000000000006D1F                 db    0
.eh_frame:0000000000006D20                 db    0
.eh_frame:0000000000006D21                 db    0
.eh_frame:0000000000006D22                 db    0
.eh_frame:0000000000006D23                 db    0
.eh_frame:0000000000006D24                 db  10h
.eh_frame:0000000000006D25                 db    0
.eh_frame:0000000000006D26                 db    0
.eh_frame:0000000000006D27                 db    0
.eh_frame:0000000000006D28                 db    0
.eh_frame:0000000000006D29                 db    5
.eh_frame:0000000000006D2A                 db    0
.eh_frame:0000000000006D2B                 db    0
.eh_frame:0000000000006D2C                 db 0B4h
.eh_frame:0000000000006D2D                 db 0D6h
.eh_frame:0000000000006D2E                 db 0FFh
.eh_frame:0000000000006D2F                 db 0FFh
.eh_frame:0000000000006D30                 db  35h ; 5
.eh_frame:0000000000006D31                 db    0
.eh_frame:0000000000006D32                 db    0
.eh_frame:0000000000006D33                 db    0
.eh_frame:0000000000006D34                 db    0
.eh_frame:0000000000006D35                 db    0
.eh_frame:0000000000006D36                 db    0
.eh_frame:0000000000006D37                 db    0
.eh_frame:0000000000006D38                 db  10h
.eh_frame:0000000000006D39                 db    0
.eh_frame:0000000000006D3A                 db    0
.eh_frame:0000000000006D3B                 db    0
.eh_frame:0000000000006D3C                 db  14h
.eh_frame:0000000000006D3D                 db    5
.eh_frame:0000000000006D3E                 db    0
.eh_frame:0000000000006D3F                 db    0
.eh_frame:0000000000006D40                 db 0E0h
.eh_frame:0000000000006D41                 db 0D6h
.eh_frame:0000000000006D42                 db 0FFh
.eh_frame:0000000000006D43                 db 0FFh
.eh_frame:0000000000006D44                 db  15h
.eh_frame:0000000000006D45                 db    0
.eh_frame:0000000000006D46                 db    0
.eh_frame:0000000000006D47                 db    0
.eh_frame:0000000000006D48                 db    0
.eh_frame:0000000000006D49                 db    0
.eh_frame:0000000000006D4A                 db    0
.eh_frame:0000000000006D4B                 db    0
.eh_frame:0000000000006D4C                 db  10h
.eh_frame:0000000000006D4D                 db    0
.eh_frame:0000000000006D4E                 db    0
.eh_frame:0000000000006D4F                 db    0
.eh_frame:0000000000006D50                 db  28h ; (
.eh_frame:0000000000006D51                 db    5
.eh_frame:0000000000006D52                 db    0
.eh_frame:0000000000006D53                 db    0
.eh_frame:0000000000006D54                 db 0ECh
.eh_frame:0000000000006D55                 db 0D6h
.eh_frame:0000000000006D56                 db 0FFh
.eh_frame:0000000000006D57                 db 0FFh
.eh_frame:0000000000006D58                 db  30h ; 0
.eh_frame:0000000000006D59                 db    0
.eh_frame:0000000000006D5A                 db    0
.eh_frame:0000000000006D5B                 db    0
.eh_frame:0000000000006D5C                 db    0
.eh_frame:0000000000006D5D                 db  6Bh ; k
.eh_frame:0000000000006D5E                 db  0Eh
.eh_frame:0000000000006D5F                 db  10h
.eh_frame:0000000000006D60                 db  50h ; P
.eh_frame:0000000000006D61                 db    0
.eh_frame:0000000000006D62                 db    0
.eh_frame:0000000000006D63                 db    0
.eh_frame:0000000000006D64                 db  3Ch ; <
.eh_frame:0000000000006D65                 db    5
.eh_frame:0000000000006D66                 db    0
.eh_frame:0000000000006D67                 db    0
.eh_frame:0000000000006D68                 db    8
.eh_frame:0000000000006D69                 db 0D7h
.eh_frame:0000000000006D6A                 db 0FFh
.eh_frame:0000000000006D6B                 db 0FFh
.eh_frame:0000000000006D6C                 db  74h ; t
.eh_frame:0000000000006D6D                 db    0
.eh_frame:0000000000006D6E                 db    0
.eh_frame:0000000000006D6F                 db    0
.eh_frame:0000000000006D70                 db    0
.eh_frame:0000000000006D71                 db  42h ; B
.eh_frame:0000000000006D72                 db  0Eh
.eh_frame:0000000000006D73                 db  10h
.eh_frame:0000000000006D74                 db  8Fh
.eh_frame:0000000000006D75                 db    2
.eh_frame:0000000000006D76                 db  42h ; B
.eh_frame:0000000000006D77                 db  0Eh
.eh_frame:0000000000006D78                 db  18h
.eh_frame:0000000000006D79                 db  8Eh
.eh_frame:0000000000006D7A                 db    3
.eh_frame:0000000000006D7B                 db  49h ; I
.eh_frame:0000000000006D7C                 db  0Eh
.eh_frame:0000000000006D7D                 db  20h
.eh_frame:0000000000006D7E                 db  8Dh
.eh_frame:0000000000006D7F                 db    4
.eh_frame:0000000000006D80                 db  42h ; B
.eh_frame:0000000000006D81                 db  0Eh
.eh_frame:0000000000006D82                 db  28h ; (
.eh_frame:0000000000006D83                 db  8Ch
.eh_frame:0000000000006D84                 db    5
.eh_frame:0000000000006D85                 db  44h ; D
.eh_frame:0000000000006D86                 db  0Eh
.eh_frame:0000000000006D87                 db  30h ; 0
.eh_frame:0000000000006D88                 db  86h
.eh_frame:0000000000006D89                 db    6
.eh_frame:0000000000006D8A                 db  41h ; A
.eh_frame:0000000000006D8B                 db  0Eh
.eh_frame:0000000000006D8C                 db  38h ; 8
.eh_frame:0000000000006D8D                 db  83h
.eh_frame:0000000000006D8E                 db    7
.eh_frame:0000000000006D8F                 db  4Dh ; M
.eh_frame:0000000000006D90                 db  0Eh
.eh_frame:0000000000006D91                 db  50h ; P
.eh_frame:0000000000006D92                 db  5Fh ; _
.eh_frame:0000000000006D93                 db  0Eh
.eh_frame:0000000000006D94                 db  58h ; X
.eh_frame:0000000000006D95                 db  47h ; G
.eh_frame:0000000000006D96                 db  0Eh
.eh_frame:0000000000006D97                 db  60h ; `
.eh_frame:0000000000006D98                 db  46h ; F
.eh_frame:0000000000006D99                 db  0Eh
.eh_frame:0000000000006D9A                 db  68h ; h
.eh_frame:0000000000006D9B                 db  44h ; D
.eh_frame:0000000000006D9C                 db  0Eh
.eh_frame:0000000000006D9D                 db  70h ; p
.eh_frame:0000000000006D9E                 db  58h ; X
.eh_frame:0000000000006D9F                 db  0Eh
.eh_frame:0000000000006DA0                 db  38h ; 8
.eh_frame:0000000000006DA1                 db  41h ; A
.eh_frame:0000000000006DA2                 db  0Eh
.eh_frame:0000000000006DA3                 db  30h ; 0
.eh_frame:0000000000006DA4                 db  41h ; A
.eh_frame:0000000000006DA5                 db  0Eh
.eh_frame:0000000000006DA6                 db  28h ; (
.eh_frame:0000000000006DA7                 db  42h ; B
.eh_frame:0000000000006DA8                 db  0Eh
.eh_frame:0000000000006DA9                 db  20h
.eh_frame:0000000000006DAA                 db  42h ; B
.eh_frame:0000000000006DAB                 db  0Eh
.eh_frame:0000000000006DAC                 db  18h
.eh_frame:0000000000006DAD                 db  42h ; B
.eh_frame:0000000000006DAE                 db  0Eh
.eh_frame:0000000000006DAF                 db  10h
.eh_frame:0000000000006DB0                 db  42h ; B
.eh_frame:0000000000006DB1                 db  0Eh
.eh_frame:0000000000006DB2                 db    8
.eh_frame:0000000000006DB3                 db    0
.eh_frame:0000000000006DB4                 db  68h ; h
.eh_frame:0000000000006DB5                 db    0
.eh_frame:0000000000006DB6                 db    0
.eh_frame:0000000000006DB7                 db    0
.eh_frame:0000000000006DB8                 db  90h
.eh_frame:0000000000006DB9                 db    5
.eh_frame:0000000000006DBA                 db    0
.eh_frame:0000000000006DBB                 db    0
.eh_frame:0000000000006DBC                 db  34h ; 4
.eh_frame:0000000000006DBD                 db 0D7h
.eh_frame:0000000000006DBE                 db 0FFh
.eh_frame:0000000000006DBF                 db 0FFh
.eh_frame:0000000000006DC0                 db 0E3h
.eh_frame:0000000000006DC1                 db    0
.eh_frame:0000000000006DC2                 db    0
.eh_frame:0000000000006DC3                 db    0
.eh_frame:0000000000006DC4                 db    0
.eh_frame:0000000000006DC5                 db  42h ; B
.eh_frame:0000000000006DC6                 db  0Eh
.eh_frame:0000000000006DC7                 db  10h
.eh_frame:0000000000006DC8                 db  8Fh
.eh_frame:0000000000006DC9                 db    2
.eh_frame:0000000000006DCA                 db  42h ; B
.eh_frame:0000000000006DCB                 db  0Eh
.eh_frame:0000000000006DCC                 db  18h
.eh_frame:0000000000006DCD                 db  8Eh
.eh_frame:0000000000006DCE                 db    3
.eh_frame:0000000000006DCF                 db  49h ; I
.eh_frame:0000000000006DD0                 db  0Eh
.eh_frame:0000000000006DD1                 db  20h
.eh_frame:0000000000006DD2                 db  8Dh
.eh_frame:0000000000006DD3                 db    4
.eh_frame:0000000000006DD4                 db  42h ; B
.eh_frame:0000000000006DD5                 db  0Eh
.eh_frame:0000000000006DD6                 db  28h ; (
.eh_frame:0000000000006DD7                 db  8Ch
.eh_frame:0000000000006DD8                 db    5
.eh_frame:0000000000006DD9                 db  44h ; D
.eh_frame:0000000000006DDA                 db  0Eh
.eh_frame:0000000000006DDB                 db  30h ; 0
.eh_frame:0000000000006DDC                 db  86h
.eh_frame:0000000000006DDD                 db    6
.eh_frame:0000000000006DDE                 db  41h ; A
.eh_frame:0000000000006DDF                 db  0Eh
.eh_frame:0000000000006DE0                 db  38h ; 8
.eh_frame:0000000000006DE1                 db  83h
.eh_frame:0000000000006DE2                 db    7
.eh_frame:0000000000006DE3                 db  4Dh ; M
.eh_frame:0000000000006DE4                 db  0Eh
.eh_frame:0000000000006DE5                 db  70h ; p
.eh_frame:0000000000006DE6                 db  65h ; e
.eh_frame:0000000000006DE7                 db  0Eh
.eh_frame:0000000000006DE8                 db  78h ; x
.eh_frame:0000000000006DE9                 db  4Dh ; M
.eh_frame:0000000000006DEA                 db  0Eh
.eh_frame:0000000000006DEB                 db  80h
.eh_frame:0000000000006DEC                 db    1
.eh_frame:0000000000006DED                 db  46h ; F
.eh_frame:0000000000006DEE                 db  0Eh
.eh_frame:0000000000006DEF                 db  88h
.eh_frame:0000000000006DF0                 db    1
.eh_frame:0000000000006DF1                 db  42h ; B
.eh_frame:0000000000006DF2                 db  0Eh
.eh_frame:0000000000006DF3                 db  90h
.eh_frame:0000000000006DF4                 db    1
.eh_frame:0000000000006DF5                 db  5Eh ; ^
.eh_frame:0000000000006DF6                 db  0Eh
.eh_frame:0000000000006DF7                 db  70h ; p
.eh_frame:0000000000006DF8                 db  56h ; V
.eh_frame:0000000000006DF9                 db  0Eh
.eh_frame:0000000000006DFA                 db  78h ; x
.eh_frame:0000000000006DFB                 db  43h ; C
.eh_frame:0000000000006DFC                 db  0Eh
.eh_frame:0000000000006DFD                 db  80h
.eh_frame:0000000000006DFE                 db    1
.eh_frame:0000000000006DFF                 db  43h ; C
.eh_frame:0000000000006E00                 db  0Eh
.eh_frame:0000000000006E01                 db  88h
.eh_frame:0000000000006E02                 db    1
.eh_frame:0000000000006E03                 db  56h ; V
.eh_frame:0000000000006E04                 db  0Eh
.eh_frame:0000000000006E05                 db  90h
.eh_frame:0000000000006E06                 db    1
.eh_frame:0000000000006E07                 db  52h ; R
.eh_frame:0000000000006E08                 db  0Eh
.eh_frame:0000000000006E09                 db  70h ; p
.eh_frame:0000000000006E0A                 db  5Bh ; [
.eh_frame:0000000000006E0B                 db  0Eh
.eh_frame:0000000000006E0C                 db  38h ; 8
.eh_frame:0000000000006E0D                 db  41h ; A
.eh_frame:0000000000006E0E                 db  0Eh
.eh_frame:0000000000006E0F                 db  30h ; 0
.eh_frame:0000000000006E10                 db  41h ; A
.eh_frame:0000000000006E11                 db  0Eh
.eh_frame:0000000000006E12                 db  28h ; (
.eh_frame:0000000000006E13                 db  42h ; B
.eh_frame:0000000000006E14                 db  0Eh
.eh_frame:0000000000006E15                 db  20h
.eh_frame:0000000000006E16                 db  42h ; B
.eh_frame:0000000000006E17                 db  0Eh
.eh_frame:0000000000006E18                 db  18h
.eh_frame:0000000000006E19                 db  42h ; B
.eh_frame:0000000000006E1A                 db  0Eh
.eh_frame:0000000000006E1B                 db  10h
.eh_frame:0000000000006E1C                 db  42h ; B
.eh_frame:0000000000006E1D                 db  0Eh
.eh_frame:0000000000006E1E                 db    8
.eh_frame:0000000000006E1F                 db    0
.eh_frame:0000000000006E20                 db  10h
.eh_frame:0000000000006E21                 db    0
.eh_frame:0000000000006E22                 db    0
.eh_frame:0000000000006E23                 db    0
.eh_frame:0000000000006E24                 db 0FCh
.eh_frame:0000000000006E25                 db    5
.eh_frame:0000000000006E26                 db    0
.eh_frame:0000000000006E27                 db    0
.eh_frame:0000000000006E28                 db 0B8h
.eh_frame:0000000000006E29                 db 0D7h
.eh_frame:0000000000006E2A                 db 0FFh
.eh_frame:0000000000006E2B                 db 0FFh
.eh_frame:0000000000006E2C                 db  0Ah
.eh_frame:0000000000006E2D                 db    0
.eh_frame:0000000000006E2E                 db    0
.eh_frame:0000000000006E2F                 db    0
.eh_frame:0000000000006E30                 db    0
.eh_frame:0000000000006E31                 db    0
.eh_frame:0000000000006E32                 db    0
.eh_frame:0000000000006E33                 db    0
.eh_frame:0000000000006E34                 db  28h ; (
.eh_frame:0000000000006E35                 db    0
.eh_frame:0000000000006E36                 db    0
.eh_frame:0000000000006E37                 db    0
.eh_frame:0000000000006E38                 db  10h
.eh_frame:0000000000006E39                 db    6
.eh_frame:0000000000006E3A                 db    0
.eh_frame:0000000000006E3B                 db    0
.eh_frame:0000000000006E3C                 db 0B4h
.eh_frame:0000000000006E3D                 db 0D7h
.eh_frame:0000000000006E3E                 db 0FFh
.eh_frame:0000000000006E3F                 db 0FFh
.eh_frame:0000000000006E40                 db  93h
.eh_frame:0000000000006E41                 db    0
.eh_frame:0000000000006E42                 db    0
.eh_frame:0000000000006E43                 db    0
.eh_frame:0000000000006E44                 db    0
.eh_frame:0000000000006E45                 db  48h ; H
.eh_frame:0000000000006E46                 db  0Eh
.eh_frame:0000000000006E47                 db  10h
.eh_frame:0000000000006E48                 db  8Ch
.eh_frame:0000000000006E49                 db    2
.eh_frame:0000000000006E4A                 db  48h ; H
.eh_frame:0000000000006E4B                 db  0Eh
.eh_frame:0000000000006E4C                 db  18h
.eh_frame:0000000000006E4D                 db  86h
.eh_frame:0000000000006E4E                 db    3
.eh_frame:0000000000006E4F                 db  41h ; A
.eh_frame:0000000000006E50                 db  0Eh
.eh_frame:0000000000006E51                 db  20h
.eh_frame:0000000000006E52                 db  83h
.eh_frame:0000000000006E53                 db    4
.eh_frame:0000000000006E54                 db    2
.eh_frame:0000000000006E55                 db  74h ; t
.eh_frame:0000000000006E56                 db  0Eh
.eh_frame:0000000000006E57                 db  18h
.eh_frame:0000000000006E58                 db  4Bh ; K
.eh_frame:0000000000006E59                 db  0Eh
.eh_frame:0000000000006E5A                 db  10h
.eh_frame:0000000000006E5B                 db  42h ; B
.eh_frame:0000000000006E5C                 db  0Eh
.eh_frame:0000000000006E5D                 db    8
.eh_frame:0000000000006E5E                 db    0
.eh_frame:0000000000006E5F                 db    0
.eh_frame:0000000000006E60                 db  10h
.eh_frame:0000000000006E61                 db    0
.eh_frame:0000000000006E62                 db    0
.eh_frame:0000000000006E63                 db    0
.eh_frame:0000000000006E64                 db  3Ch ; <
.eh_frame:0000000000006E65                 db    6
.eh_frame:0000000000006E66                 db    0
.eh_frame:0000000000006E67                 db    0
.eh_frame:0000000000006E68                 db  28h ; (
.eh_frame:0000000000006E69                 db 0D8h
.eh_frame:0000000000006E6A                 db 0FFh
.eh_frame:0000000000006E6B                 db 0FFh
.eh_frame:0000000000006E6C                 db  13h
.eh_frame:0000000000006E6D                 db    0
.eh_frame:0000000000006E6E                 db    0
.eh_frame:0000000000006E6F                 db    0
.eh_frame:0000000000006E70                 db    0
.eh_frame:0000000000006E71                 db    0
.eh_frame:0000000000006E72                 db    0
.eh_frame:0000000000006E73                 db    0
.eh_frame:0000000000006E74                 db  10h
.eh_frame:0000000000006E75                 db    0
.eh_frame:0000000000006E76                 db    0
.eh_frame:0000000000006E77                 db    0
.eh_frame:0000000000006E78                 db  50h ; P
.eh_frame:0000000000006E79                 db    6
.eh_frame:0000000000006E7A                 db    0
.eh_frame:0000000000006E7B                 db    0
.eh_frame:0000000000006E7C                 db  34h ; 4
.eh_frame:0000000000006E7D                 db 0D8h
.eh_frame:0000000000006E7E                 db 0FFh
.eh_frame:0000000000006E7F                 db 0FFh
.eh_frame:0000000000006E80                 db  0Ch
.eh_frame:0000000000006E81                 db    0
.eh_frame:0000000000006E82                 db    0
.eh_frame:0000000000006E83                 db    0
.eh_frame:0000000000006E84                 db    0
.eh_frame:0000000000006E85                 db    0
.eh_frame:0000000000006E86                 db    0
.eh_frame:0000000000006E87                 db    0
.eh_frame:0000000000006E88                 db  10h
.eh_frame:0000000000006E89                 db    0
.eh_frame:0000000000006E8A                 db    0
.eh_frame:0000000000006E8B                 db    0
.eh_frame:0000000000006E8C                 db  64h ; d
.eh_frame:0000000000006E8D                 db    6
.eh_frame:0000000000006E8E                 db    0
.eh_frame:0000000000006E8F                 db    0
.eh_frame:0000000000006E90                 db  30h ; 0
.eh_frame:0000000000006E91                 db 0D8h
.eh_frame:0000000000006E92                 db 0FFh
.eh_frame:0000000000006E93                 db 0FFh
.eh_frame:0000000000006E94                 db  18h
.eh_frame:0000000000006E95                 db    0
.eh_frame:0000000000006E96                 db    0
.eh_frame:0000000000006E97                 db    0
.eh_frame:0000000000006E98                 db    0
.eh_frame:0000000000006E99                 db    0
.eh_frame:0000000000006E9A                 db    0
.eh_frame:0000000000006E9B                 db    0
.eh_frame:0000000000006E9C                 db  10h
.eh_frame:0000000000006E9D                 db    0
.eh_frame:0000000000006E9E                 db    0
.eh_frame:0000000000006E9F                 db    0
.eh_frame:0000000000006EA0                 db  78h ; x
.eh_frame:0000000000006EA1                 db    6
.eh_frame:0000000000006EA2                 db    0
.eh_frame:0000000000006EA3                 db    0
.eh_frame:0000000000006EA4                 db  3Ch ; <
.eh_frame:0000000000006EA5                 db 0D8h
.eh_frame:0000000000006EA6                 db 0FFh
.eh_frame:0000000000006EA7                 db 0FFh
.eh_frame:0000000000006EA8                 db  14h
.eh_frame:0000000000006EA9                 db    0
.eh_frame:0000000000006EAA                 db    0
.eh_frame:0000000000006EAB                 db    0
.eh_frame:0000000000006EAC                 db    0
.eh_frame:0000000000006EAD                 db    0
.eh_frame:0000000000006EAE                 db    0
.eh_frame:0000000000006EAF                 db    0
.eh_frame:0000000000006EB0                 db  18h
.eh_frame:0000000000006EB1                 db    0
.eh_frame:0000000000006EB2                 db    0
.eh_frame:0000000000006EB3                 db    0
.eh_frame:0000000000006EB4                 db  8Ch
.eh_frame:0000000000006EB5                 db    6
.eh_frame:0000000000006EB6                 db    0
.eh_frame:0000000000006EB7                 db    0
.eh_frame:0000000000006EB8                 db  48h ; H
.eh_frame:0000000000006EB9                 db 0D8h
.eh_frame:0000000000006EBA                 db 0FFh
.eh_frame:0000000000006EBB                 db 0FFh
.eh_frame:0000000000006EBC                 db  8Eh
.eh_frame:0000000000006EBD                 db    0
.eh_frame:0000000000006EBE                 db    0
.eh_frame:0000000000006EBF                 db    0
.eh_frame:0000000000006EC0                 db    0
.eh_frame:0000000000006EC1                 db  44h ; D
.eh_frame:0000000000006EC2                 db  0Eh
.eh_frame:0000000000006EC3                 db  50h ; P
.eh_frame:0000000000006EC4                 db    2
.eh_frame:0000000000006EC5                 db  7Fh ; 
.eh_frame:0000000000006EC6                 db  0Ah
.eh_frame:0000000000006EC7                 db  0Eh
.eh_frame:0000000000006EC8                 db    8
.eh_frame:0000000000006EC9                 db  41h ; A
.eh_frame:0000000000006ECA                 db  0Bh
.eh_frame:0000000000006ECB                 db    0
.eh_frame:0000000000006ECC                 db  18h
.eh_frame:0000000000006ECD                 db    0
.eh_frame:0000000000006ECE                 db    0
.eh_frame:0000000000006ECF                 db    0
.eh_frame:0000000000006ED0                 db 0A8h
.eh_frame:0000000000006ED1                 db    6
.eh_frame:0000000000006ED2                 db    0
.eh_frame:0000000000006ED3                 db    0
.eh_frame:0000000000006ED4                 db 0BCh
.eh_frame:0000000000006ED5                 db 0D8h
.eh_frame:0000000000006ED6                 db 0FFh
.eh_frame:0000000000006ED7                 db 0FFh
.eh_frame:0000000000006ED8                 db  8Ah
.eh_frame:0000000000006ED9                 db    0
.eh_frame:0000000000006EDA                 db    0
.eh_frame:0000000000006EDB                 db    0
.eh_frame:0000000000006EDC                 db    0
.eh_frame:0000000000006EDD                 db  44h ; D
.eh_frame:0000000000006EDE                 db  0Eh
.eh_frame:0000000000006EDF                 db  50h ; P
.eh_frame:0000000000006EE0                 db    2
.eh_frame:0000000000006EE1                 db  7Bh ; {
.eh_frame:0000000000006EE2                 db  0Ah
.eh_frame:0000000000006EE3                 db  0Eh
.eh_frame:0000000000006EE4                 db    8
.eh_frame:0000000000006EE5                 db  41h ; A
.eh_frame:0000000000006EE6                 db  0Bh
.eh_frame:0000000000006EE7                 db    0
.eh_frame:0000000000006EE8                 db  10h
.eh_frame:0000000000006EE9                 db    0
.eh_frame:0000000000006EEA                 db    0
.eh_frame:0000000000006EEB                 db    0
.eh_frame:0000000000006EEC                 db 0C4h
.eh_frame:0000000000006EED                 db    6
.eh_frame:0000000000006EEE                 db    0
.eh_frame:0000000000006EEF                 db    0
.eh_frame:0000000000006EF0                 db  30h ; 0
.eh_frame:0000000000006EF1                 db 0D9h
.eh_frame:0000000000006EF2                 db 0FFh
.eh_frame:0000000000006EF3                 db 0FFh
.eh_frame:0000000000006EF4                 db  0Ch
.eh_frame:0000000000006EF5                 db    0
.eh_frame:0000000000006EF6                 db    0
.eh_frame:0000000000006EF7                 db    0
.eh_frame:0000000000006EF8                 db    0
.eh_frame:0000000000006EF9                 db    0
.eh_frame:0000000000006EFA                 db    0
.eh_frame:0000000000006EFB                 db    0
.eh_frame:0000000000006EFC                 db  10h
.eh_frame:0000000000006EFD                 db    0
.eh_frame:0000000000006EFE                 db    0
.eh_frame:0000000000006EFF                 db    0
.eh_frame:0000000000006F00                 db 0D8h
.eh_frame:0000000000006F01                 db    6
.eh_frame:0000000000006F02                 db    0
.eh_frame:0000000000006F03                 db    0
.eh_frame:0000000000006F04                 db  2Ch ; ,
.eh_frame:0000000000006F05                 db 0D9h
.eh_frame:0000000000006F06                 db 0FFh
.eh_frame:0000000000006F07                 db 0FFh
.eh_frame:0000000000006F08                 db  0Fh
.eh_frame:0000000000006F09                 db    0
.eh_frame:0000000000006F0A                 db    0
.eh_frame:0000000000006F0B                 db    0
.eh_frame:0000000000006F0C                 db    0
.eh_frame:0000000000006F0D                 db    0
.eh_frame:0000000000006F0E                 db    0
.eh_frame:0000000000006F0F                 db    0
.eh_frame:0000000000006F10                 db  18h
.eh_frame:0000000000006F11                 db    0
.eh_frame:0000000000006F12                 db    0
.eh_frame:0000000000006F13                 db    0
.eh_frame:0000000000006F14                 db 0ECh
.eh_frame:0000000000006F15                 db    6
.eh_frame:0000000000006F16                 db    0
.eh_frame:0000000000006F17                 db    0
.eh_frame:0000000000006F18                 db  28h ; (
.eh_frame:0000000000006F19                 db 0D9h
.eh_frame:0000000000006F1A                 db 0FFh
.eh_frame:0000000000006F1B                 db 0FFh
.eh_frame:0000000000006F1C                 db  98h
.eh_frame:0000000000006F1D                 db    0
.eh_frame:0000000000006F1E                 db    0
.eh_frame:0000000000006F1F                 db    0
.eh_frame:0000000000006F20                 db    0
.eh_frame:0000000000006F21                 db  44h ; D
.eh_frame:0000000000006F22                 db  0Eh
.eh_frame:0000000000006F23                 db  50h ; P
.eh_frame:0000000000006F24                 db    2
.eh_frame:0000000000006F25                 db  8Eh
.eh_frame:0000000000006F26                 db  0Ah
.eh_frame:0000000000006F27                 db  0Eh
.eh_frame:0000000000006F28                 db    8
.eh_frame:0000000000006F29                 db  41h ; A
.eh_frame:0000000000006F2A                 db  0Bh
.eh_frame:0000000000006F2B                 db    0
.eh_frame:0000000000006F2C                 db  10h
.eh_frame:0000000000006F2D                 db    0
.eh_frame:0000000000006F2E                 db    0
.eh_frame:0000000000006F2F                 db    0
.eh_frame:0000000000006F30                 db    8
.eh_frame:0000000000006F31                 db    7
.eh_frame:0000000000006F32                 db    0
.eh_frame:0000000000006F33                 db    0
.eh_frame:0000000000006F34                 db 0ACh
.eh_frame:0000000000006F35                 db 0D9h
.eh_frame:0000000000006F36                 db 0FFh
.eh_frame:0000000000006F37                 db 0FFh
.eh_frame:0000000000006F38                 db  10h
.eh_frame:0000000000006F39                 db    0
.eh_frame:0000000000006F3A                 db    0
.eh_frame:0000000000006F3B                 db    0
.eh_frame:0000000000006F3C                 db    0
.eh_frame:0000000000006F3D                 db    0
.eh_frame:0000000000006F3E                 db    0
.eh_frame:0000000000006F3F                 db    0
.eh_frame:0000000000006F40                 db  10h
.eh_frame:0000000000006F41                 db    0
.eh_frame:0000000000006F42                 db    0
.eh_frame:0000000000006F43                 db    0
.eh_frame:0000000000006F44                 db  1Ch
.eh_frame:0000000000006F45                 db    7
.eh_frame:0000000000006F46                 db    0
.eh_frame:0000000000006F47                 db    0
.eh_frame:0000000000006F48                 db 0A8h
.eh_frame:0000000000006F49                 db 0D9h
.eh_frame:0000000000006F4A                 db 0FFh
.eh_frame:0000000000006F4B                 db 0FFh
.eh_frame:0000000000006F4C                 db  11h
.eh_frame:0000000000006F4D                 db    0
.eh_frame:0000000000006F4E                 db    0
.eh_frame:0000000000006F4F                 db    0
.eh_frame:0000000000006F50                 db    0
.eh_frame:0000000000006F51                 db    0
.eh_frame:0000000000006F52                 db    0
.eh_frame:0000000000006F53                 db    0
.eh_frame:0000000000006F54                 db  10h
.eh_frame:0000000000006F55                 db    0
.eh_frame:0000000000006F56                 db    0
.eh_frame:0000000000006F57                 db    0
.eh_frame:0000000000006F58                 db  30h ; 0
.eh_frame:0000000000006F59                 db    7
.eh_frame:0000000000006F5A                 db    0
.eh_frame:0000000000006F5B                 db    0
.eh_frame:0000000000006F5C                 db 0B4h
.eh_frame:0000000000006F5D                 db 0D9h
.eh_frame:0000000000006F5E                 db 0FFh
.eh_frame:0000000000006F5F                 db 0FFh
.eh_frame:0000000000006F60                 db  0Ah
.eh_frame:0000000000006F61                 db    0
.eh_frame:0000000000006F62                 db    0
.eh_frame:0000000000006F63                 db    0
.eh_frame:0000000000006F64                 db    0
.eh_frame:0000000000006F65                 db    0
.eh_frame:0000000000006F66                 db    0
.eh_frame:0000000000006F67                 db    0
.eh_frame:0000000000006F68                 db  18h
.eh_frame:0000000000006F69                 db    0
.eh_frame:0000000000006F6A                 db    0
.eh_frame:0000000000006F6B                 db    0
.eh_frame:0000000000006F6C                 db  44h ; D
.eh_frame:0000000000006F6D                 db    7
.eh_frame:0000000000006F6E                 db    0
.eh_frame:0000000000006F6F                 db    0
.eh_frame:0000000000006F70                 db 0B0h
.eh_frame:0000000000006F71                 db 0D9h
.eh_frame:0000000000006F72                 db 0FFh
.eh_frame:0000000000006F73                 db 0FFh
.eh_frame:0000000000006F74                 db  8Eh
.eh_frame:0000000000006F75                 db    0
.eh_frame:0000000000006F76                 db    0
.eh_frame:0000000000006F77                 db    0
.eh_frame:0000000000006F78                 db    0
.eh_frame:0000000000006F79                 db  44h ; D
.eh_frame:0000000000006F7A                 db  0Eh
.eh_frame:0000000000006F7B                 db  50h ; P
.eh_frame:0000000000006F7C                 db    2
.eh_frame:0000000000006F7D                 db  7Fh ; 
.eh_frame:0000000000006F7E                 db  0Ah
.eh_frame:0000000000006F7F                 db  0Eh
.eh_frame:0000000000006F80                 db    8
.eh_frame:0000000000006F81                 db  41h ; A
.eh_frame:0000000000006F82                 db  0Bh
.eh_frame:0000000000006F83                 db    0
.eh_frame:0000000000006F84                 db  18h
.eh_frame:0000000000006F85                 db    0
.eh_frame:0000000000006F86                 db    0
.eh_frame:0000000000006F87                 db    0
.eh_frame:0000000000006F88                 db  60h ; `
.eh_frame:0000000000006F89                 db    7
.eh_frame:0000000000006F8A                 db    0
.eh_frame:0000000000006F8B                 db    0
.eh_frame:0000000000006F8C                 db  24h ; $
.eh_frame:0000000000006F8D                 db 0DAh
.eh_frame:0000000000006F8E                 db 0FFh
.eh_frame:0000000000006F8F                 db 0FFh
.eh_frame:0000000000006F90                 db  91h
.eh_frame:0000000000006F91                 db    0
.eh_frame:0000000000006F92                 db    0
.eh_frame:0000000000006F93                 db    0
.eh_frame:0000000000006F94                 db    0
.eh_frame:0000000000006F95                 db  44h ; D
.eh_frame:0000000000006F96                 db  0Eh
.eh_frame:0000000000006F97                 db  50h ; P
.eh_frame:0000000000006F98                 db    2
.eh_frame:0000000000006F99                 db  82h
.eh_frame:0000000000006F9A                 db  0Ah
.eh_frame:0000000000006F9B                 db  0Eh
.eh_frame:0000000000006F9C                 db    8
.eh_frame:0000000000006F9D                 db  41h ; A
.eh_frame:0000000000006F9E                 db  0Bh
.eh_frame:0000000000006F9F                 db    0
.eh_frame:0000000000006FA0                 db  10h
.eh_frame:0000000000006FA1                 db    0
.eh_frame:0000000000006FA2                 db    0
.eh_frame:0000000000006FA3                 db    0
.eh_frame:0000000000006FA4                 db  7Ch ; |
.eh_frame:0000000000006FA5                 db    7
.eh_frame:0000000000006FA6                 db    0
.eh_frame:0000000000006FA7                 db    0
.eh_frame:0000000000006FA8                 db 0A8h
.eh_frame:0000000000006FA9                 db 0DAh
.eh_frame:0000000000006FAA                 db 0FFh
.eh_frame:0000000000006FAB                 db 0FFh
.eh_frame:0000000000006FAC                 db  0Ch
.eh_frame:0000000000006FAD                 db    0
.eh_frame:0000000000006FAE                 db    0
.eh_frame:0000000000006FAF                 db    0
.eh_frame:0000000000006FB0                 db    0
.eh_frame:0000000000006FB1                 db    0
.eh_frame:0000000000006FB2                 db    0
.eh_frame:0000000000006FB3                 db    0
.eh_frame:0000000000006FB4                 db  10h
.eh_frame:0000000000006FB5                 db    0
.eh_frame:0000000000006FB6                 db    0
.eh_frame:0000000000006FB7                 db    0
.eh_frame:0000000000006FB8                 db  90h
.eh_frame:0000000000006FB9                 db    7
.eh_frame:0000000000006FBA                 db    0
.eh_frame:0000000000006FBB                 db    0
.eh_frame:0000000000006FBC                 db 0A4h
.eh_frame:0000000000006FBD                 db 0DAh
.eh_frame:0000000000006FBE                 db 0FFh
.eh_frame:0000000000006FBF                 db 0FFh
.eh_frame:0000000000006FC0                 db  17h
.eh_frame:0000000000006FC1                 db    0
.eh_frame:0000000000006FC2                 db    0
.eh_frame:0000000000006FC3                 db    0
.eh_frame:0000000000006FC4                 db    0
.eh_frame:0000000000006FC5                 db    0
.eh_frame:0000000000006FC6                 db    0
.eh_frame:0000000000006FC7                 db    0
.eh_frame:0000000000006FC8                 db  10h
.eh_frame:0000000000006FC9                 db    0
.eh_frame:0000000000006FCA                 db    0
.eh_frame:0000000000006FCB                 db    0
.eh_frame:0000000000006FCC                 db 0A4h
.eh_frame:0000000000006FCD                 db    7
.eh_frame:0000000000006FCE                 db    0
.eh_frame:0000000000006FCF                 db    0
.eh_frame:0000000000006FD0                 db 0B0h
.eh_frame:0000000000006FD1                 db 0DAh
.eh_frame:0000000000006FD2                 db 0FFh
.eh_frame:0000000000006FD3                 db 0FFh
.eh_frame:0000000000006FD4                 db  13h
.eh_frame:0000000000006FD5                 db    0
.eh_frame:0000000000006FD6                 db    0
.eh_frame:0000000000006FD7                 db    0
.eh_frame:0000000000006FD8                 db    0
.eh_frame:0000000000006FD9                 db    0
.eh_frame:0000000000006FDA                 db    0
.eh_frame:0000000000006FDB                 db    0
.eh_frame:0000000000006FDC                 db  10h
.eh_frame:0000000000006FDD                 db    0
.eh_frame:0000000000006FDE                 db    0
.eh_frame:0000000000006FDF                 db    0
.eh_frame:0000000000006FE0                 db 0B8h
.eh_frame:0000000000006FE1                 db    7
.eh_frame:0000000000006FE2                 db    0
.eh_frame:0000000000006FE3                 db    0
.eh_frame:0000000000006FE4                 db 0BCh
.eh_frame:0000000000006FE5                 db 0DAh
.eh_frame:0000000000006FE6                 db 0FFh
.eh_frame:0000000000006FE7                 db 0FFh
.eh_frame:0000000000006FE8                 db  0Ch
.eh_frame:0000000000006FE9                 db    0
.eh_frame:0000000000006FEA                 db    0
.eh_frame:0000000000006FEB                 db    0
.eh_frame:0000000000006FEC                 db    0
.eh_frame:0000000000006FED                 db    0
.eh_frame:0000000000006FEE                 db    0
.eh_frame:0000000000006FEF                 db    0
.eh_frame:0000000000006FF0                 db  10h
.eh_frame:0000000000006FF1                 db    0
.eh_frame:0000000000006FF2                 db    0
.eh_frame:0000000000006FF3                 db    0
.eh_frame:0000000000006FF4                 db 0CCh
.eh_frame:0000000000006FF5                 db    7
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db 0B8h
.eh_frame:0000000000006FF9                 db 0DAh
.eh_frame:0000000000006FFA                 db 0FFh
.eh_frame:0000000000006FFB                 db 0FFh
.eh_frame:0000000000006FFC                 db  14h
.eh_frame:0000000000006FFD                 db    0
.eh_frame:0000000000006FFE                 db    0
.eh_frame:0000000000006FFF                 db    0
.eh_frame:0000000000007000                 db    0
.eh_frame:0000000000007001                 db    0
.eh_frame:0000000000007002                 db    0
.eh_frame:0000000000007003                 db    0
.eh_frame:0000000000007004                 db  10h
.eh_frame:0000000000007005                 db    0
.eh_frame:0000000000007006                 db    0
.eh_frame:0000000000007007                 db    0
.eh_frame:0000000000007008                 db 0E0h
.eh_frame:0000000000007009                 db    7
.eh_frame:000000000000700A                 db    0
.eh_frame:000000000000700B                 db    0
.eh_frame:000000000000700C                 db 0C4h
.eh_frame:000000000000700D                 db 0DAh
.eh_frame:000000000000700E                 db 0FFh
.eh_frame:000000000000700F                 db 0FFh
.eh_frame:0000000000007010                 db  13h
.eh_frame:0000000000007011                 db    0
.eh_frame:0000000000007012                 db    0
.eh_frame:0000000000007013                 db    0
.eh_frame:0000000000007014                 db    0
.eh_frame:0000000000007015                 db    0
.eh_frame:0000000000007016                 db    0
.eh_frame:0000000000007017                 db    0
.eh_frame:0000000000007018                 db  14h
.eh_frame:0000000000007019                 db    0
.eh_frame:000000000000701A                 db    0
.eh_frame:000000000000701B                 db    0
.eh_frame:000000000000701C                 db 0F4h
.eh_frame:000000000000701D                 db    7
.eh_frame:000000000000701E                 db    0
.eh_frame:000000000000701F                 db    0
.eh_frame:0000000000007020                 db 0D0h
.eh_frame:0000000000007021                 db 0DAh
.eh_frame:0000000000007022                 db 0FFh
.eh_frame:0000000000007023                 db 0FFh
.eh_frame:0000000000007024                 db  18h
.eh_frame:0000000000007025                 db    0
.eh_frame:0000000000007026                 db    0
.eh_frame:0000000000007027                 db    0
.eh_frame:0000000000007028                 db    0
.eh_frame:0000000000007029                 db    0
.eh_frame:000000000000702A                 db    0
.eh_frame:000000000000702B                 db    0
.eh_frame:000000000000702C                 db    0
.eh_frame:000000000000702D                 db    0
.eh_frame:000000000000702E                 db    0
.eh_frame:000000000000702F                 db    0
.eh_frame:0000000000007030                 db  10h
.eh_frame:0000000000007031                 db    1
.eh_frame:0000000000007032                 db    0
.eh_frame:0000000000007033                 db    0
.eh_frame:0000000000007034                 db  0Ch
.eh_frame:0000000000007035                 db    8
.eh_frame:0000000000007036                 db    0
.eh_frame:0000000000007037                 db    0
.eh_frame:0000000000007038                 db 0D8h
.eh_frame:0000000000007039                 db 0DAh
.eh_frame:000000000000703A                 db 0FFh
.eh_frame:000000000000703B                 db 0FFh
.eh_frame:000000000000703C                 db  17h
.eh_frame:000000000000703D                 db    4
.eh_frame:000000000000703E                 db    0
.eh_frame:000000000000703F                 db    0
.eh_frame:0000000000007040                 db    0
.eh_frame:0000000000007041                 db  42h ; B
.eh_frame:0000000000007042                 db  0Eh
.eh_frame:0000000000007043                 db  10h
.eh_frame:0000000000007044                 db  8Fh
.eh_frame:0000000000007045                 db    2
.eh_frame:0000000000007046                 db  42h ; B
.eh_frame:0000000000007047                 db  0Eh
.eh_frame:0000000000007048                 db  18h
.eh_frame:0000000000007049                 db  8Eh
.eh_frame:000000000000704A                 db    3
.eh_frame:000000000000704B                 db  42h ; B
.eh_frame:000000000000704C                 db  0Eh
.eh_frame:000000000000704D                 db  20h
.eh_frame:000000000000704E                 db  8Dh
.eh_frame:000000000000704F                 db    4
.eh_frame:0000000000007050                 db  42h ; B
.eh_frame:0000000000007051                 db  0Eh
.eh_frame:0000000000007052                 db  28h ; (
.eh_frame:0000000000007053                 db  8Ch
.eh_frame:0000000000007054                 db    5
.eh_frame:0000000000007055                 db  44h ; D
.eh_frame:0000000000007056                 db  0Eh
.eh_frame:0000000000007057                 db  30h ; 0
.eh_frame:0000000000007058                 db  86h
.eh_frame:0000000000007059                 db    6
.eh_frame:000000000000705A                 db  41h ; A
.eh_frame:000000000000705B                 db  0Eh
.eh_frame:000000000000705C                 db  38h ; 8
.eh_frame:000000000000705D                 db  83h
.eh_frame:000000000000705E                 db    7
.eh_frame:000000000000705F                 db  4Ah ; J
.eh_frame:0000000000007060                 db  0Eh
.eh_frame:0000000000007061                 db  60h ; `
.eh_frame:0000000000007062                 db    2
.eh_frame:0000000000007063                 db 0DDh
.eh_frame:0000000000007064                 db  0Eh
.eh_frame:0000000000007065                 db  68h ; h
.eh_frame:0000000000007066                 db  57h ; W
.eh_frame:0000000000007067                 db  0Eh
.eh_frame:0000000000007068                 db  70h ; p
.eh_frame:0000000000007069                 db  42h ; B
.eh_frame:000000000000706A                 db  0Eh
.eh_frame:000000000000706B                 db  78h ; x
.eh_frame:000000000000706C                 db  42h ; B
.eh_frame:000000000000706D                 db  0Eh
.eh_frame:000000000000706E                 db  80h
.eh_frame:000000000000706F                 db    1
.eh_frame:0000000000007070                 db  42h ; B
.eh_frame:0000000000007071                 db  0Eh
.eh_frame:0000000000007072                 db  88h
.eh_frame:0000000000007073                 db    1
.eh_frame:0000000000007074                 db  42h ; B
.eh_frame:0000000000007075                 db  0Eh
.eh_frame:0000000000007076                 db  90h
.eh_frame:0000000000007077                 db    1
.eh_frame:0000000000007078                 db  53h ; S
.eh_frame:0000000000007079                 db  0Eh
.eh_frame:000000000000707A                 db  60h ; `
.eh_frame:000000000000707B                 db  44h ; D
.eh_frame:000000000000707C                 db  0Ah
.eh_frame:000000000000707D                 db  0Eh
.eh_frame:000000000000707E                 db  38h ; 8
.eh_frame:000000000000707F                 db  41h ; A
.eh_frame:0000000000007080                 db  0Eh
.eh_frame:0000000000007081                 db  30h ; 0
.eh_frame:0000000000007082                 db  41h ; A
.eh_frame:0000000000007083                 db  0Eh
.eh_frame:0000000000007084                 db  28h ; (
.eh_frame:0000000000007085                 db  42h ; B
.eh_frame:0000000000007086                 db  0Eh
.eh_frame:0000000000007087                 db  20h
.eh_frame:0000000000007088                 db  42h ; B
.eh_frame:0000000000007089                 db  0Eh
.eh_frame:000000000000708A                 db  18h
.eh_frame:000000000000708B                 db  42h ; B
.eh_frame:000000000000708C                 db  0Eh
.eh_frame:000000000000708D                 db  10h
.eh_frame:000000000000708E                 db  42h ; B
.eh_frame:000000000000708F                 db  0Eh
.eh_frame:0000000000007090                 db    8
.eh_frame:0000000000007091                 db  44h ; D
.eh_frame:0000000000007092                 db  0Bh
.eh_frame:0000000000007093                 db    2
.eh_frame:0000000000007094                 db  78h ; x
.eh_frame:0000000000007095                 db  0Ah
.eh_frame:0000000000007096                 db  0Eh
.eh_frame:0000000000007097                 db  68h ; h
.eh_frame:0000000000007098                 db  48h ; H
.eh_frame:0000000000007099                 db  0Bh
.eh_frame:000000000000709A                 db  5Ah ; Z
.eh_frame:000000000000709B                 db  0Ah
.eh_frame:000000000000709C                 db  0Eh
.eh_frame:000000000000709D                 db  38h ; 8
.eh_frame:000000000000709E                 db  47h ; G
.eh_frame:000000000000709F                 db  0Eh
.eh_frame:00000000000070A0                 db  30h ; 0
.eh_frame:00000000000070A1                 db  41h ; A
.eh_frame:00000000000070A2                 db  0Eh
.eh_frame:00000000000070A3                 db  28h ; (
.eh_frame:00000000000070A4                 db  42h ; B
.eh_frame:00000000000070A5                 db  0Eh
.eh_frame:00000000000070A6                 db  20h
.eh_frame:00000000000070A7                 db  42h ; B
.eh_frame:00000000000070A8                 db  0Eh
.eh_frame:00000000000070A9                 db  18h
.eh_frame:00000000000070AA                 db  42h ; B
.eh_frame:00000000000070AB                 db  0Eh
.eh_frame:00000000000070AC                 db  10h
.eh_frame:00000000000070AD                 db  42h ; B
.eh_frame:00000000000070AE                 db  0Eh
.eh_frame:00000000000070AF                 db    8
.eh_frame:00000000000070B0                 db  56h ; V
.eh_frame:00000000000070B1                 db  0Bh
.eh_frame:00000000000070B2                 db  5Eh ; ^
.eh_frame:00000000000070B3                 db  0Ah
.eh_frame:00000000000070B4                 db  0Eh
.eh_frame:00000000000070B5                 db  38h ; 8
.eh_frame:00000000000070B6                 db  52h ; R
.eh_frame:00000000000070B7                 db  0Eh
.eh_frame:00000000000070B8                 db  30h ; 0
.eh_frame:00000000000070B9                 db  41h ; A
.eh_frame:00000000000070BA                 db  0Eh
.eh_frame:00000000000070BB                 db  28h ; (
.eh_frame:00000000000070BC                 db  42h ; B
.eh_frame:00000000000070BD                 db  0Eh
.eh_frame:00000000000070BE                 db  20h
.eh_frame:00000000000070BF                 db  42h ; B
.eh_frame:00000000000070C0                 db  0Eh
.eh_frame:00000000000070C1                 db  18h
.eh_frame:00000000000070C2                 db  42h ; B
.eh_frame:00000000000070C3                 db  0Eh
.eh_frame:00000000000070C4                 db  10h
.eh_frame:00000000000070C5                 db  42h ; B
.eh_frame:00000000000070C6                 db  0Eh
.eh_frame:00000000000070C7                 db    8
.eh_frame:00000000000070C8                 db  4Fh ; O
.eh_frame:00000000000070C9                 db  0Bh
.eh_frame:00000000000070CA                 db  62h ; b
.eh_frame:00000000000070CB                 db  0Ah
.eh_frame:00000000000070CC                 db  0Eh
.eh_frame:00000000000070CD                 db  38h ; 8
.eh_frame:00000000000070CE                 db  50h ; P
.eh_frame:00000000000070CF                 db  0Eh
.eh_frame:00000000000070D0                 db  30h ; 0
.eh_frame:00000000000070D1                 db  41h ; A
.eh_frame:00000000000070D2                 db  0Eh
.eh_frame:00000000000070D3                 db  28h ; (
.eh_frame:00000000000070D4                 db  42h ; B
.eh_frame:00000000000070D5                 db  0Eh
.eh_frame:00000000000070D6                 db  20h
.eh_frame:00000000000070D7                 db  42h ; B
.eh_frame:00000000000070D8                 db  0Eh
.eh_frame:00000000000070D9                 db  18h
.eh_frame:00000000000070DA                 db  42h ; B
.eh_frame:00000000000070DB                 db  0Eh
.eh_frame:00000000000070DC                 db  10h
.eh_frame:00000000000070DD                 db  42h ; B
.eh_frame:00000000000070DE                 db  0Eh
.eh_frame:00000000000070DF                 db    8
.eh_frame:00000000000070E0                 db  55h ; U
.eh_frame:00000000000070E1                 db  0Bh
.eh_frame:00000000000070E2                 db  66h ; f
.eh_frame:00000000000070E3                 db  0Eh
.eh_frame:00000000000070E4                 db  68h ; h
.eh_frame:00000000000070E5                 db  42h ; B
.eh_frame:00000000000070E6                 db  0Eh
.eh_frame:00000000000070E7                 db  70h ; p
.eh_frame:00000000000070E8                 db  5Ch ; \
.eh_frame:00000000000070E9                 db  0Eh
.eh_frame:00000000000070EA                 db  68h ; h
.eh_frame:00000000000070EB                 db  41h ; A
.eh_frame:00000000000070EC                 db  0Eh
.eh_frame:00000000000070ED                 db  60h ; `
.eh_frame:00000000000070EE                 db  44h ; D
.eh_frame:00000000000070EF                 db  0Ah
.eh_frame:00000000000070F0                 db  0Eh
.eh_frame:00000000000070F1                 db  38h ; 8
.eh_frame:00000000000070F2                 db  41h ; A
.eh_frame:00000000000070F3                 db  0Eh
.eh_frame:00000000000070F4                 db  30h ; 0
.eh_frame:00000000000070F5                 db  41h ; A
.eh_frame:00000000000070F6                 db  0Eh
.eh_frame:00000000000070F7                 db  28h ; (
.eh_frame:00000000000070F8                 db  42h ; B
.eh_frame:00000000000070F9                 db  0Eh
.eh_frame:00000000000070FA                 db  20h
.eh_frame:00000000000070FB                 db  42h ; B
.eh_frame:00000000000070FC                 db  0Eh
.eh_frame:00000000000070FD                 db  18h
.eh_frame:00000000000070FE                 db  42h ; B
.eh_frame:00000000000070FF                 db  0Eh
.eh_frame:0000000000007100                 db  10h
.eh_frame:0000000000007101                 db  42h ; B
.eh_frame:0000000000007102                 db  0Eh
.eh_frame:0000000000007103                 db    8
.eh_frame:0000000000007104                 db  45h ; E
.eh_frame:0000000000007105                 db  0Bh
.eh_frame:0000000000007106                 db  68h ; h
.eh_frame:0000000000007107                 db  0Ah
.eh_frame:0000000000007108                 db  0Eh
.eh_frame:0000000000007109                 db  68h ; h
.eh_frame:000000000000710A                 db  48h ; H
.eh_frame:000000000000710B                 db  0Bh
.eh_frame:000000000000710C                 db  72h ; r
.eh_frame:000000000000710D                 db  0Eh
.eh_frame:000000000000710E                 db  68h ; h
.eh_frame:000000000000710F                 db  45h ; E
.eh_frame:0000000000007110                 db  0Eh
.eh_frame:0000000000007111                 db  70h ; p
.eh_frame:0000000000007112                 db  42h ; B
.eh_frame:0000000000007113                 db  0Eh
.eh_frame:0000000000007114                 db  78h ; x
.eh_frame:0000000000007115                 db  42h ; B
.eh_frame:0000000000007116                 db  0Eh
.eh_frame:0000000000007117                 db  80h
.eh_frame:0000000000007118                 db    1
.eh_frame:0000000000007119                 db  5Eh ; ^
.eh_frame:000000000000711A                 db  0Eh
.eh_frame:000000000000711B                 db  60h ; `
.eh_frame:000000000000711C                 db  44h ; D
.eh_frame:000000000000711D                 db  0Ah
.eh_frame:000000000000711E                 db  0Eh
.eh_frame:000000000000711F                 db  38h ; 8
.eh_frame:0000000000007120                 db  41h ; A
.eh_frame:0000000000007121                 db  0Eh
.eh_frame:0000000000007122                 db  30h ; 0
.eh_frame:0000000000007123                 db  41h ; A
.eh_frame:0000000000007124                 db  0Eh
.eh_frame:0000000000007125                 db  28h ; (
.eh_frame:0000000000007126                 db  42h ; B
.eh_frame:0000000000007127                 db  0Eh
.eh_frame:0000000000007128                 db  20h
.eh_frame:0000000000007129                 db  42h ; B
.eh_frame:000000000000712A                 db  0Eh
.eh_frame:000000000000712B                 db  18h
.eh_frame:000000000000712C                 db  42h ; B
.eh_frame:000000000000712D                 db  0Eh
.eh_frame:000000000000712E                 db  10h
.eh_frame:000000000000712F                 db  42h ; B
.eh_frame:0000000000007130                 db  0Eh
.eh_frame:0000000000007131                 db    8
.eh_frame:0000000000007132                 db  41h ; A
.eh_frame:0000000000007133                 db  0Bh
.eh_frame:0000000000007134                 db  79h ; y
.eh_frame:0000000000007135                 db  0Ah
.eh_frame:0000000000007136                 db  0Eh
.eh_frame:0000000000007137                 db  68h ; h
.eh_frame:0000000000007138                 db  42h ; B
.eh_frame:0000000000007139                 db  0Eh
.eh_frame:000000000000713A                 db  70h ; p
.eh_frame:000000000000713B                 db  42h ; B
.eh_frame:000000000000713C                 db  0Eh
.eh_frame:000000000000713D                 db  78h ; x
.eh_frame:000000000000713E                 db  42h ; B
.eh_frame:000000000000713F                 db  0Eh
.eh_frame:0000000000007140                 db  80h
.eh_frame:0000000000007141                 db    1
.eh_frame:0000000000007142                 db  51h ; Q
.eh_frame:0000000000007143                 db  0Bh
.eh_frame:0000000000007144                 db  10h
.eh_frame:0000000000007145                 db    0
.eh_frame:0000000000007146                 db    0
.eh_frame:0000000000007147                 db    0
.eh_frame:0000000000007148                 db  20h
.eh_frame:0000000000007149                 db    9
.eh_frame:000000000000714A                 db    0
.eh_frame:000000000000714B                 db    0
.eh_frame:000000000000714C                 db 0E4h
.eh_frame:000000000000714D                 db 0DDh
.eh_frame:000000000000714E                 db 0FFh
.eh_frame:000000000000714F                 db 0FFh
.eh_frame:0000000000007150                 db  20h
.eh_frame:0000000000007151                 db    0
.eh_frame:0000000000007152                 db    0
.eh_frame:0000000000007153                 db    0
.eh_frame:0000000000007154                 db    0
.eh_frame:0000000000007155                 db    0
.eh_frame:0000000000007156                 db    0
.eh_frame:0000000000007157                 db    0
.eh_frame:0000000000007158                 db  18h
.eh_frame:0000000000007159                 db    0
.eh_frame:000000000000715A                 db    0
.eh_frame:000000000000715B                 db    0
.eh_frame:000000000000715C                 db  34h ; 4
.eh_frame:000000000000715D                 db    9
.eh_frame:000000000000715E                 db    0
.eh_frame:000000000000715F                 db    0
.eh_frame:0000000000007160                 db 0F0h
.eh_frame:0000000000007161                 db 0DDh
.eh_frame:0000000000007162                 db 0FFh
.eh_frame:0000000000007163                 db 0FFh
.eh_frame:0000000000007164                 db  78h ; x
.eh_frame:0000000000007165                 db    0
.eh_frame:0000000000007166                 db    0
.eh_frame:0000000000007167                 db    0
.eh_frame:0000000000007168                 db    0
.eh_frame:0000000000007169                 db  44h ; D
.eh_frame:000000000000716A                 db  0Eh
.eh_frame:000000000000716B                 db  70h ; p
.eh_frame:000000000000716C                 db    2
.eh_frame:000000000000716D                 db  60h ; `
.eh_frame:000000000000716E                 db  0Ah
.eh_frame:000000000000716F                 db  0Eh
.eh_frame:0000000000007170                 db    8
.eh_frame:0000000000007171                 db  41h ; A
.eh_frame:0000000000007172                 db  0Bh
.eh_frame:0000000000007173                 db    0
.eh_frame:0000000000007174                 db  28h ; (
.eh_frame:0000000000007175                 db    0
.eh_frame:0000000000007176                 db    0
.eh_frame:0000000000007177                 db    0
.eh_frame:0000000000007178                 db  50h ; P
.eh_frame:0000000000007179                 db    9
.eh_frame:000000000000717A                 db    0
.eh_frame:000000000000717B                 db    0
.eh_frame:000000000000717C                 db  54h ; T
.eh_frame:000000000000717D                 db 0DEh
.eh_frame:000000000000717E                 db 0FFh
.eh_frame:000000000000717F                 db 0FFh
.eh_frame:0000000000007180                 db 0D5h
.eh_frame:0000000000007181                 db    0
.eh_frame:0000000000007182                 db    0
.eh_frame:0000000000007183                 db    0
.eh_frame:0000000000007184                 db    0
.eh_frame:0000000000007185                 db  41h ; A
.eh_frame:0000000000007186                 db  0Eh
.eh_frame:0000000000007187                 db  10h
.eh_frame:0000000000007188                 db  86h
.eh_frame:0000000000007189                 db    2
.eh_frame:000000000000718A                 db  41h ; A
.eh_frame:000000000000718B                 db  0Eh
.eh_frame:000000000000718C                 db  18h
.eh_frame:000000000000718D                 db  83h
.eh_frame:000000000000718E                 db    3
.eh_frame:000000000000718F                 db  50h ; P
.eh_frame:0000000000007190                 db  0Eh
.eh_frame:0000000000007191                 db 0D0h
.eh_frame:0000000000007192                 db    1
.eh_frame:0000000000007193                 db    2
.eh_frame:0000000000007194                 db 0ABh
.eh_frame:0000000000007195                 db  0Ah
.eh_frame:0000000000007196                 db  0Eh
.eh_frame:0000000000007197                 db  18h
.eh_frame:0000000000007198                 db  41h ; A
.eh_frame:0000000000007199                 db  0Eh
.eh_frame:000000000000719A                 db  10h
.eh_frame:000000000000719B                 db  41h ; A
.eh_frame:000000000000719C                 db  0Eh
.eh_frame:000000000000719D                 db    8
.eh_frame:000000000000719E                 db  41h ; A
.eh_frame:000000000000719F                 db  0Bh
.eh_frame:00000000000071A0                 db  1Ch
.eh_frame:00000000000071A1                 db    0
.eh_frame:00000000000071A2                 db    0
.eh_frame:00000000000071A3                 db    0
.eh_frame:00000000000071A4                 db  7Ch ; |
.eh_frame:00000000000071A5                 db    9
.eh_frame:00000000000071A6                 db    0
.eh_frame:00000000000071A7                 db    0
.eh_frame:00000000000071A8                 db    8
.eh_frame:00000000000071A9                 db 0DFh
.eh_frame:00000000000071AA                 db 0FFh
.eh_frame:00000000000071AB                 db 0FFh
.eh_frame:00000000000071AC                 db  80h
.eh_frame:00000000000071AD                 db    0
.eh_frame:00000000000071AE                 db    0
.eh_frame:00000000000071AF                 db    0
.eh_frame:00000000000071B0                 db    0
.eh_frame:00000000000071B1                 db  41h ; A
.eh_frame:00000000000071B2                 db  0Eh
.eh_frame:00000000000071B3                 db  10h
.eh_frame:00000000000071B4                 db  83h
.eh_frame:00000000000071B5                 db    2
.eh_frame:00000000000071B6                 db    2
.eh_frame:00000000000071B7                 db  7Ah ; z
.eh_frame:00000000000071B8                 db  0Eh
.eh_frame:00000000000071B9                 db    8
.eh_frame:00000000000071BA                 db    0
.eh_frame:00000000000071BB                 db    0
.eh_frame:00000000000071BC                 db    0
.eh_frame:00000000000071BD                 db    0
.eh_frame:00000000000071BE                 db    0
.eh_frame:00000000000071BF                 db    0
.eh_frame:00000000000071C0                 db  18h
.eh_frame:00000000000071C1                 db    0
.eh_frame:00000000000071C2                 db    0
.eh_frame:00000000000071C3                 db    0
.eh_frame:00000000000071C4                 db  9Ch
.eh_frame:00000000000071C5                 db    9
.eh_frame:00000000000071C6                 db    0
.eh_frame:00000000000071C7                 db    0
.eh_frame:00000000000071C8                 db  68h ; h
.eh_frame:00000000000071C9                 db 0DFh
.eh_frame:00000000000071CA                 db 0FFh
.eh_frame:00000000000071CB                 db 0FFh
.eh_frame:00000000000071CC                 db  1Ah
.eh_frame:00000000000071CD                 db    0
.eh_frame:00000000000071CE                 db    0
.eh_frame:00000000000071CF                 db    0
.eh_frame:00000000000071D0                 db    0
.eh_frame:00000000000071D1                 db  41h ; A
.eh_frame:00000000000071D2                 db  0Eh
.eh_frame:00000000000071D3                 db  10h
.eh_frame:00000000000071D4                 db  83h
.eh_frame:00000000000071D5                 db    2
.eh_frame:00000000000071D6                 db  53h ; S
.eh_frame:00000000000071D7                 db  0Ah
.eh_frame:00000000000071D8                 db  0Eh
.eh_frame:00000000000071D9                 db    8
.eh_frame:00000000000071DA                 db  41h ; A
.eh_frame:00000000000071DB                 db  0Bh
.eh_frame:00000000000071DC                 db  10h
.eh_frame:00000000000071DD                 db    0
.eh_frame:00000000000071DE                 db    0
.eh_frame:00000000000071DF                 db    0
.eh_frame:00000000000071E0                 db 0B8h
.eh_frame:00000000000071E1                 db    9
.eh_frame:00000000000071E2                 db    0
.eh_frame:00000000000071E3                 db    0
.eh_frame:00000000000071E4                 db  6Ch ; l
.eh_frame:00000000000071E5                 db 0DFh
.eh_frame:00000000000071E6                 db 0FFh
.eh_frame:00000000000071E7                 db 0FFh
.eh_frame:00000000000071E8                 db  24h ; $
.eh_frame:00000000000071E9                 db    0
.eh_frame:00000000000071EA                 db    0
.eh_frame:00000000000071EB                 db    0
.eh_frame:00000000000071EC                 db    0
.eh_frame:00000000000071ED                 db  5Fh ; _
.eh_frame:00000000000071EE                 db  0Eh
.eh_frame:00000000000071EF                 db  10h
.eh_frame:00000000000071F0                 db  10h
.eh_frame:00000000000071F1                 db    0
.eh_frame:00000000000071F2                 db    0
.eh_frame:00000000000071F3                 db    0
.eh_frame:00000000000071F4                 db 0CCh
.eh_frame:00000000000071F5                 db    9
.eh_frame:00000000000071F6                 db    0
.eh_frame:00000000000071F7                 db    0
.eh_frame:00000000000071F8                 db  88h
.eh_frame:00000000000071F9                 db 0DFh
.eh_frame:00000000000071FA                 db 0FFh
.eh_frame:00000000000071FB                 db 0FFh
.eh_frame:00000000000071FC                 db    2
.eh_frame:00000000000071FD                 db    0
.eh_frame:00000000000071FE                 db    0
.eh_frame:00000000000071FF                 db    0
.eh_frame:0000000000007200                 db    0
.eh_frame:0000000000007201                 db    0
.eh_frame:0000000000007202                 db    0
.eh_frame:0000000000007203                 db    0
.eh_frame:0000000000007204                 db  20h
.eh_frame:0000000000007205                 db    0
.eh_frame:0000000000007206                 db    0
.eh_frame:0000000000007207                 db    0
.eh_frame:0000000000007208                 db 0E0h
.eh_frame:0000000000007209                 db    9
.eh_frame:000000000000720A                 db    0
.eh_frame:000000000000720B                 db    0
.eh_frame:000000000000720C                 db  84h
.eh_frame:000000000000720D                 db 0DFh
.eh_frame:000000000000720E                 db 0FFh
.eh_frame:000000000000720F                 db 0FFh
.eh_frame:0000000000007210                 db  36h ; 6
.eh_frame:0000000000007211                 db    0
.eh_frame:0000000000007212                 db    0
.eh_frame:0000000000007213                 db    0
.eh_frame:0000000000007214                 db    0
.eh_frame:0000000000007215                 db  44h ; D
.eh_frame:0000000000007216                 db  0Eh
.eh_frame:0000000000007217                 db  10h
.eh_frame:0000000000007218                 db  83h
.eh_frame:0000000000007219                 db    2
.eh_frame:000000000000721A                 db  5Dh ; ]
.eh_frame:000000000000721B                 db  0Ah
.eh_frame:000000000000721C                 db  0Eh
.eh_frame:000000000000721D                 db    8
.eh_frame:000000000000721E                 db  47h ; G
.eh_frame:000000000000721F                 db  0Bh
.eh_frame:0000000000007220                 db  48h ; H
.eh_frame:0000000000007221                 db  0Ah
.eh_frame:0000000000007222                 db  0Eh
.eh_frame:0000000000007223                 db    8
.eh_frame:0000000000007224                 db  41h ; A
.eh_frame:0000000000007225                 db  0Bh
.eh_frame:0000000000007226                 db    0
.eh_frame:0000000000007227                 db    0
.eh_frame:0000000000007228                 db  10h
.eh_frame:0000000000007229                 db    0
.eh_frame:000000000000722A                 db    0
.eh_frame:000000000000722B                 db    0
.eh_frame:000000000000722C                 db    4
.eh_frame:000000000000722D                 db  0Ah
.eh_frame:000000000000722E                 db    0
.eh_frame:000000000000722F                 db    0
.eh_frame:0000000000007230                 db 0A0h
.eh_frame:0000000000007231                 db 0DFh
.eh_frame:0000000000007232                 db 0FFh
.eh_frame:0000000000007233                 db 0FFh
.eh_frame:0000000000007234                 db  24h ; $
.eh_frame:0000000000007235                 db    0
.eh_frame:0000000000007236                 db    0
.eh_frame:0000000000007237                 db    0
.eh_frame:0000000000007238                 db    0
.eh_frame:0000000000007239                 db  5Fh ; _
.eh_frame:000000000000723A                 db  0Eh
.eh_frame:000000000000723B                 db  10h
.eh_frame:000000000000723C                 db  14h
.eh_frame:000000000000723D                 db    0
.eh_frame:000000000000723E                 db    0
.eh_frame:000000000000723F                 db    0
.eh_frame:0000000000007240                 db  18h
.eh_frame:0000000000007241                 db  0Ah
.eh_frame:0000000000007242                 db    0
.eh_frame:0000000000007243                 db    0
.eh_frame:0000000000007244                 db 0BCh
.eh_frame:0000000000007245                 db 0DFh
.eh_frame:0000000000007246                 db 0FFh
.eh_frame:0000000000007247                 db 0FFh
.eh_frame:0000000000007248                 db  82h
.eh_frame:0000000000007249                 db    0
.eh_frame:000000000000724A                 db    0
.eh_frame:000000000000724B                 db    0
.eh_frame:000000000000724C                 db    0
.eh_frame:000000000000724D                 db    2
.eh_frame:000000000000724E                 db  5Fh ; _
.eh_frame:000000000000724F                 db  0Eh
.eh_frame:0000000000007250                 db  10h
.eh_frame:0000000000007251                 db  49h ; I
.eh_frame:0000000000007252                 db  0Eh
.eh_frame:0000000000007253                 db    8
.eh_frame:0000000000007254                 db  14h
.eh_frame:0000000000007255                 db    0
.eh_frame:0000000000007256                 db    0
.eh_frame:0000000000007257                 db    0
.eh_frame:0000000000007258                 db  30h ; 0
.eh_frame:0000000000007259                 db  0Ah
.eh_frame:000000000000725A                 db    0
.eh_frame:000000000000725B                 db    0
.eh_frame:000000000000725C                 db  34h ; 4
.eh_frame:000000000000725D                 db 0E0h
.eh_frame:000000000000725E                 db 0FFh
.eh_frame:000000000000725F                 db 0FFh
.eh_frame:0000000000007260                 db  4Ah ; J
.eh_frame:0000000000007261                 db    0
.eh_frame:0000000000007262                 db    0
.eh_frame:0000000000007263                 db    0
.eh_frame:0000000000007264                 db    0
.eh_frame:0000000000007265                 db    2
.eh_frame:0000000000007266                 db  45h ; E
.eh_frame:0000000000007267                 db  0Eh
.eh_frame:0000000000007268                 db  10h
.eh_frame:0000000000007269                 db    0
.eh_frame:000000000000726A                 db    0
.eh_frame:000000000000726B                 db    0
.eh_frame:000000000000726C                 db  18h
.eh_frame:000000000000726D                 db    0
.eh_frame:000000000000726E                 db    0
.eh_frame:000000000000726F                 db    0
.eh_frame:0000000000007270                 db  48h ; H
.eh_frame:0000000000007271                 db  0Ah
.eh_frame:0000000000007272                 db    0
.eh_frame:0000000000007273                 db    0
.eh_frame:0000000000007274                 db  6Ch ; l
.eh_frame:0000000000007275                 db 0E0h
.eh_frame:0000000000007276                 db 0FFh
.eh_frame:0000000000007277                 db 0FFh
.eh_frame:0000000000007278                 db  17h
.eh_frame:0000000000007279                 db    0
.eh_frame:000000000000727A                 db    0
.eh_frame:000000000000727B                 db    0
.eh_frame:000000000000727C                 db    0
.eh_frame:000000000000727D                 db  41h ; A
.eh_frame:000000000000727E                 db  0Eh
.eh_frame:000000000000727F                 db  10h
.eh_frame:0000000000007280                 db  83h
.eh_frame:0000000000007281                 db    2
.eh_frame:0000000000007282                 db  51h ; Q
.eh_frame:0000000000007283                 db  0Eh
.eh_frame:0000000000007284                 db    8
.eh_frame:0000000000007285                 db    0
.eh_frame:0000000000007286                 db    0
.eh_frame:0000000000007287                 db    0
.eh_frame:0000000000007288                 db  18h
.eh_frame:0000000000007289                 db    0
.eh_frame:000000000000728A                 db    0
.eh_frame:000000000000728B                 db    0
.eh_frame:000000000000728C                 db  64h ; d
.eh_frame:000000000000728D                 db  0Ah
.eh_frame:000000000000728E                 db    0
.eh_frame:000000000000728F                 db    0
.eh_frame:0000000000007290                 db  70h ; p
.eh_frame:0000000000007291                 db 0E0h
.eh_frame:0000000000007292                 db 0FFh
.eh_frame:0000000000007293                 db 0FFh
.eh_frame:0000000000007294                 db  2Eh ; .
.eh_frame:0000000000007295                 db    0
.eh_frame:0000000000007296                 db    0
.eh_frame:0000000000007297                 db    0
.eh_frame:0000000000007298                 db    0
.eh_frame:0000000000007299                 db  47h ; G
.eh_frame:000000000000729A                 db  0Eh
.eh_frame:000000000000729B                 db  10h
.eh_frame:000000000000729C                 db  61h ; a
.eh_frame:000000000000729D                 db  0Ah
.eh_frame:000000000000729E                 db  0Eh
.eh_frame:000000000000729F                 db    8
.eh_frame:00000000000072A0                 db  41h ; A
.eh_frame:00000000000072A1                 db  0Bh
.eh_frame:00000000000072A2                 db    0
.eh_frame:00000000000072A3                 db    0
.eh_frame:00000000000072A4                 db  24h ; $
.eh_frame:00000000000072A5                 db    0
.eh_frame:00000000000072A6                 db    0
.eh_frame:00000000000072A7                 db    0
.eh_frame:00000000000072A8                 db  80h
.eh_frame:00000000000072A9                 db  0Ah
.eh_frame:00000000000072AA                 db    0
.eh_frame:00000000000072AB                 db    0
.eh_frame:00000000000072AC                 db  84h
.eh_frame:00000000000072AD                 db 0E0h
.eh_frame:00000000000072AE                 db 0FFh
.eh_frame:00000000000072AF                 db 0FFh
.eh_frame:00000000000072B0                 db  28h ; (
.eh_frame:00000000000072B1                 db    0
.eh_frame:00000000000072B2                 db    0
.eh_frame:00000000000072B3                 db    0
.eh_frame:00000000000072B4                 db    0
.eh_frame:00000000000072B5                 db  41h ; A
.eh_frame:00000000000072B6                 db  0Eh
.eh_frame:00000000000072B7                 db  10h
.eh_frame:00000000000072B8                 db  86h
.eh_frame:00000000000072B9                 db    2
.eh_frame:00000000000072BA                 db  41h ; A
.eh_frame:00000000000072BB                 db  0Eh
.eh_frame:00000000000072BC                 db  18h
.eh_frame:00000000000072BD                 db  83h
.eh_frame:00000000000072BE                 db    3
.eh_frame:00000000000072BF                 db  4Dh ; M
.eh_frame:00000000000072C0                 db  0Eh
.eh_frame:00000000000072C1                 db  20h
.eh_frame:00000000000072C2                 db  49h ; I
.eh_frame:00000000000072C3                 db  0Eh
.eh_frame:00000000000072C4                 db  18h
.eh_frame:00000000000072C5                 db  47h ; G
.eh_frame:00000000000072C6                 db  0Eh
.eh_frame:00000000000072C7                 db  10h
.eh_frame:00000000000072C8                 db  41h ; A
.eh_frame:00000000000072C9                 db  0Eh
.eh_frame:00000000000072CA                 db    8
.eh_frame:00000000000072CB                 db    0
.eh_frame:00000000000072CC                 db  18h
.eh_frame:00000000000072CD                 db    0
.eh_frame:00000000000072CE                 db    0
.eh_frame:00000000000072CF                 db    0
.eh_frame:00000000000072D0                 db 0A8h
.eh_frame:00000000000072D1                 db  0Ah
.eh_frame:00000000000072D2                 db    0
.eh_frame:00000000000072D3                 db    0
.eh_frame:00000000000072D4                 db  8Ch
.eh_frame:00000000000072D5                 db 0E0h
.eh_frame:00000000000072D6                 db 0FFh
.eh_frame:00000000000072D7                 db 0FFh
.eh_frame:00000000000072D8                 db  13h
.eh_frame:00000000000072D9                 db    0
.eh_frame:00000000000072DA                 db    0
.eh_frame:00000000000072DB                 db    0
.eh_frame:00000000000072DC                 db    0
.eh_frame:00000000000072DD                 db  41h ; A
.eh_frame:00000000000072DE                 db  0Eh
.eh_frame:00000000000072DF                 db  10h
.eh_frame:00000000000072E0                 db  83h
.eh_frame:00000000000072E1                 db    2
.eh_frame:00000000000072E2                 db  50h ; P
.eh_frame:00000000000072E3                 db  0Eh
.eh_frame:00000000000072E4                 db    8
.eh_frame:00000000000072E5                 db    0
.eh_frame:00000000000072E6                 db    0
.eh_frame:00000000000072E7                 db    0
.eh_frame:00000000000072E8                 db  14h
.eh_frame:00000000000072E9                 db    0
.eh_frame:00000000000072EA                 db    0
.eh_frame:00000000000072EB                 db    0
.eh_frame:00000000000072EC                 db 0C4h
.eh_frame:00000000000072ED                 db  0Ah
.eh_frame:00000000000072EE                 db    0
.eh_frame:00000000000072EF                 db    0
.eh_frame:00000000000072F0                 db  90h
.eh_frame:00000000000072F1                 db 0E0h
.eh_frame:00000000000072F2                 db 0FFh
.eh_frame:00000000000072F3                 db 0FFh
.eh_frame:00000000000072F4                 db  35h ; 5
.eh_frame:00000000000072F5                 db    0
.eh_frame:00000000000072F6                 db    0
.eh_frame:00000000000072F7                 db    0
.eh_frame:00000000000072F8                 db    0
.eh_frame:00000000000072F9                 db  4Bh ; K
.eh_frame:00000000000072FA                 db  0Eh
.eh_frame:00000000000072FB                 db  10h
.eh_frame:00000000000072FC                 db    0
.eh_frame:00000000000072FD                 db    0
.eh_frame:00000000000072FE                 db    0
.eh_frame:00000000000072FF                 db    0
.eh_frame:0000000000007300                 db  3Ch ; <
.eh_frame:0000000000007301                 db    0
.eh_frame:0000000000007302                 db    0
.eh_frame:0000000000007303                 db    0
.eh_frame:0000000000007304                 db 0DCh
.eh_frame:0000000000007305                 db  0Ah
.eh_frame:0000000000007306                 db    0
.eh_frame:0000000000007307                 db    0
.eh_frame:0000000000007308                 db 0B8h
.eh_frame:0000000000007309                 db 0E0h
.eh_frame:000000000000730A                 db 0FFh
.eh_frame:000000000000730B                 db 0FFh
.eh_frame:000000000000730C                 db  83h
.eh_frame:000000000000730D                 db    0
.eh_frame:000000000000730E                 db    0
.eh_frame:000000000000730F                 db    0
.eh_frame:0000000000007310                 db    0
.eh_frame:0000000000007311                 db  42h ; B
.eh_frame:0000000000007312                 db  0Eh
.eh_frame:0000000000007313                 db  10h
.eh_frame:0000000000007314                 db  8Dh
.eh_frame:0000000000007315                 db    2
.eh_frame:0000000000007316                 db  42h ; B
.eh_frame:0000000000007317                 db  0Eh
.eh_frame:0000000000007318                 db  18h
.eh_frame:0000000000007319                 db  8Ch
.eh_frame:000000000000731A                 db    3
.eh_frame:000000000000731B                 db  44h ; D
.eh_frame:000000000000731C                 db  0Eh
.eh_frame:000000000000731D                 db  20h
.eh_frame:000000000000731E                 db  86h
.eh_frame:000000000000731F                 db    4
.eh_frame:0000000000007320                 db  41h ; A
.eh_frame:0000000000007321                 db  0Eh
.eh_frame:0000000000007322                 db  28h ; (
.eh_frame:0000000000007323                 db  83h
.eh_frame:0000000000007324                 db    5
.eh_frame:0000000000007325                 db  4Ah ; J
.eh_frame:0000000000007326                 db  0Eh
.eh_frame:0000000000007327                 db  40h ; @
.eh_frame:0000000000007328                 db    2
.eh_frame:0000000000007329                 db  64h ; d
.eh_frame:000000000000732A                 db  0Ah
.eh_frame:000000000000732B                 db  0Eh
.eh_frame:000000000000732C                 db  28h ; (
.eh_frame:000000000000732D                 db  41h ; A
.eh_frame:000000000000732E                 db  0Eh
.eh_frame:000000000000732F                 db  20h
.eh_frame:0000000000007330                 db  41h ; A
.eh_frame:0000000000007331                 db  0Eh
.eh_frame:0000000000007332                 db  18h
.eh_frame:0000000000007333                 db  42h ; B
.eh_frame:0000000000007334                 db  0Eh
.eh_frame:0000000000007335                 db  10h
.eh_frame:0000000000007336                 db  42h ; B
.eh_frame:0000000000007337                 db  0Eh
.eh_frame:0000000000007338                 db    8
.eh_frame:0000000000007339                 db  41h ; A
.eh_frame:000000000000733A                 db  0Bh
.eh_frame:000000000000733B                 db    0
.eh_frame:000000000000733C                 db    0
.eh_frame:000000000000733D                 db    0
.eh_frame:000000000000733E                 db    0
.eh_frame:000000000000733F                 db    0
.eh_frame:0000000000007340                 db  4Ch ; L
.eh_frame:0000000000007341                 db    0
.eh_frame:0000000000007342                 db    0
.eh_frame:0000000000007343                 db    0
.eh_frame:0000000000007344                 db  1Ch
.eh_frame:0000000000007345                 db  0Bh
.eh_frame:0000000000007346                 db    0
.eh_frame:0000000000007347                 db    0
.eh_frame:0000000000007348                 db    8
.eh_frame:0000000000007349                 db 0E1h
.eh_frame:000000000000734A                 db 0FFh
.eh_frame:000000000000734B                 db 0FFh
.eh_frame:000000000000734C                 db  7Dh ; }
.eh_frame:000000000000734D                 db    0
.eh_frame:000000000000734E                 db    0
.eh_frame:000000000000734F                 db    0
.eh_frame:0000000000007350                 db    0
.eh_frame:0000000000007351                 db  42h ; B
.eh_frame:0000000000007352                 db  0Eh
.eh_frame:0000000000007353                 db  10h
.eh_frame:0000000000007354                 db  8Ch
.eh_frame:0000000000007355                 db    2
.eh_frame:0000000000007356                 db  41h ; A
.eh_frame:0000000000007357                 db  0Eh
.eh_frame:0000000000007358                 db  18h
.eh_frame:0000000000007359                 db  86h
.eh_frame:000000000000735A                 db    3
.eh_frame:000000000000735B                 db  44h ; D
.eh_frame:000000000000735C                 db  0Eh
.eh_frame:000000000000735D                 db  20h
.eh_frame:000000000000735E                 db  83h
.eh_frame:000000000000735F                 db    4
.eh_frame:0000000000007360                 db  69h ; i
.eh_frame:0000000000007361                 db  0Ah
.eh_frame:0000000000007362                 db  0Eh
.eh_frame:0000000000007363                 db  18h
.eh_frame:0000000000007364                 db  41h ; A
.eh_frame:0000000000007365                 db  0Eh
.eh_frame:0000000000007366                 db  10h
.eh_frame:0000000000007367                 db  42h ; B
.eh_frame:0000000000007368                 db  0Eh
.eh_frame:0000000000007369                 db    8
.eh_frame:000000000000736A                 db  45h ; E
.eh_frame:000000000000736B                 db  0Bh
.eh_frame:000000000000736C                 db  55h ; U
.eh_frame:000000000000736D                 db  0Ah
.eh_frame:000000000000736E                 db  0Eh
.eh_frame:000000000000736F                 db  18h
.eh_frame:0000000000007370                 db  41h ; A
.eh_frame:0000000000007371                 db  0Eh
.eh_frame:0000000000007372                 db  10h
.eh_frame:0000000000007373                 db  42h ; B
.eh_frame:0000000000007374                 db  0Eh
.eh_frame:0000000000007375                 db    8
.eh_frame:0000000000007376                 db  48h ; H
.eh_frame:0000000000007377                 db  0Bh
.eh_frame:0000000000007378                 db  41h ; A
.eh_frame:0000000000007379                 db  0Ah
.eh_frame:000000000000737A                 db  0Eh
.eh_frame:000000000000737B                 db  18h
.eh_frame:000000000000737C                 db  46h ; F
.eh_frame:000000000000737D                 db  0Eh
.eh_frame:000000000000737E                 db  10h
.eh_frame:000000000000737F                 db  42h ; B
.eh_frame:0000000000007380                 db  0Eh
.eh_frame:0000000000007381                 db    8
.eh_frame:0000000000007382                 db  47h ; G
.eh_frame:0000000000007383                 db  0Bh
.eh_frame:0000000000007384                 db  49h ; I
.eh_frame:0000000000007385                 db  0Eh
.eh_frame:0000000000007386                 db  18h
.eh_frame:0000000000007387                 db  41h ; A
.eh_frame:0000000000007388                 db  0Eh
.eh_frame:0000000000007389                 db  10h
.eh_frame:000000000000738A                 db  42h ; B
.eh_frame:000000000000738B                 db  0Eh
.eh_frame:000000000000738C                 db    8
.eh_frame:000000000000738D                 db    0
.eh_frame:000000000000738E                 db    0
.eh_frame:000000000000738F                 db    0
.eh_frame:0000000000007390                 db  1Ch
.eh_frame:0000000000007391                 db    0
.eh_frame:0000000000007392                 db    0
.eh_frame:0000000000007393                 db    0
.eh_frame:0000000000007394                 db  6Ch ; l
.eh_frame:0000000000007395                 db  0Bh
.eh_frame:0000000000007396                 db    0
.eh_frame:0000000000007397                 db    0
.eh_frame:0000000000007398                 db  38h ; 8
.eh_frame:0000000000007399                 db 0E1h
.eh_frame:000000000000739A                 db 0FFh
.eh_frame:000000000000739B                 db 0FFh
.eh_frame:000000000000739C                 db  60h ; `
.eh_frame:000000000000739D                 db    0
.eh_frame:000000000000739E                 db    0
.eh_frame:000000000000739F                 db    0
.eh_frame:00000000000073A0                 db    0
.eh_frame:00000000000073A1                 db  44h ; D
.eh_frame:00000000000073A2                 db  0Eh
.eh_frame:00000000000073A3                 db  10h
.eh_frame:00000000000073A4                 db  75h ; u
.eh_frame:00000000000073A5                 db  0Ah
.eh_frame:00000000000073A6                 db  0Eh
.eh_frame:00000000000073A7                 db    8
.eh_frame:00000000000073A8                 db  47h ; G
.eh_frame:00000000000073A9                 db  0Bh
.eh_frame:00000000000073AA                 db  5Fh ; _
.eh_frame:00000000000073AB                 db  0Eh
.eh_frame:00000000000073AC                 db    8
.eh_frame:00000000000073AD                 db    0
.eh_frame:00000000000073AE                 db    0
.eh_frame:00000000000073AF                 db    0
.eh_frame:00000000000073B0                 db  1Ch
.eh_frame:00000000000073B1                 db    0
.eh_frame:00000000000073B2                 db    0
.eh_frame:00000000000073B3                 db    0
.eh_frame:00000000000073B4                 db  8Ch
.eh_frame:00000000000073B5                 db  0Bh
.eh_frame:00000000000073B6                 db    0
.eh_frame:00000000000073B7                 db    0
.eh_frame:00000000000073B8                 db  78h ; x
.eh_frame:00000000000073B9                 db 0E1h
.eh_frame:00000000000073BA                 db 0FFh
.eh_frame:00000000000073BB                 db 0FFh
.eh_frame:00000000000073BC                 db  3Ch ; <
.eh_frame:00000000000073BD                 db    0
.eh_frame:00000000000073BE                 db    0
.eh_frame:00000000000073BF                 db    0
.eh_frame:00000000000073C0                 db    0
.eh_frame:00000000000073C1                 db  44h ; D
.eh_frame:00000000000073C2                 db  0Eh
.eh_frame:00000000000073C3                 db  10h
.eh_frame:00000000000073C4                 db  61h ; a
.eh_frame:00000000000073C5                 db  0Ah
.eh_frame:00000000000073C6                 db  0Eh
.eh_frame:00000000000073C7                 db    8
.eh_frame:00000000000073C8                 db  4Bh ; K
.eh_frame:00000000000073C9                 db  0Bh
.eh_frame:00000000000073CA                 db  4Bh ; K
.eh_frame:00000000000073CB                 db  0Eh
.eh_frame:00000000000073CC                 db    8
.eh_frame:00000000000073CD                 db    0
.eh_frame:00000000000073CE                 db    0
.eh_frame:00000000000073CF                 db    0
.eh_frame:00000000000073D0                 db  34h ; 4
.eh_frame:00000000000073D1                 db    0
.eh_frame:00000000000073D2                 db    0
.eh_frame:00000000000073D3                 db    0
.eh_frame:00000000000073D4                 db 0ACh
.eh_frame:00000000000073D5                 db  0Bh
.eh_frame:00000000000073D6                 db    0
.eh_frame:00000000000073D7                 db    0
.eh_frame:00000000000073D8                 db  98h
.eh_frame:00000000000073D9                 db 0E1h
.eh_frame:00000000000073DA                 db 0FFh
.eh_frame:00000000000073DB                 db 0FFh
.eh_frame:00000000000073DC                 db  7Bh ; {
.eh_frame:00000000000073DD                 db    0
.eh_frame:00000000000073DE                 db    0
.eh_frame:00000000000073DF                 db    0
.eh_frame:00000000000073E0                 db    0
.eh_frame:00000000000073E1                 db  42h ; B
.eh_frame:00000000000073E2                 db  0Eh
.eh_frame:00000000000073E3                 db  10h
.eh_frame:00000000000073E4                 db  8Ch
.eh_frame:00000000000073E5                 db    2
.eh_frame:00000000000073E6                 db  41h ; A
.eh_frame:00000000000073E7                 db  0Eh
.eh_frame:00000000000073E8                 db  18h
.eh_frame:00000000000073E9                 db  86h
.eh_frame:00000000000073EA                 db    3
.eh_frame:00000000000073EB                 db  41h ; A
.eh_frame:00000000000073EC                 db  0Eh
.eh_frame:00000000000073ED                 db  20h
.eh_frame:00000000000073EE                 db  83h
.eh_frame:00000000000073EF                 db    4
.eh_frame:00000000000073F0                 db  7Dh ; }
.eh_frame:00000000000073F1                 db  0Ah
.eh_frame:00000000000073F2                 db  0Eh
.eh_frame:00000000000073F3                 db  18h
.eh_frame:00000000000073F4                 db  41h ; A
.eh_frame:00000000000073F5                 db  0Eh
.eh_frame:00000000000073F6                 db  10h
.eh_frame:00000000000073F7                 db  42h ; B
.eh_frame:00000000000073F8                 db  0Eh
.eh_frame:00000000000073F9                 db    8
.eh_frame:00000000000073FA                 db  44h ; D
.eh_frame:00000000000073FB                 db  0Bh
.eh_frame:00000000000073FC                 db  60h ; `
.eh_frame:00000000000073FD                 db  0Ah
.eh_frame:00000000000073FE                 db  0Eh
.eh_frame:00000000000073FF                 db  18h
.eh_frame:0000000000007400                 db  41h ; A
.eh_frame:0000000000007401                 db  0Eh
.eh_frame:0000000000007402                 db  10h
.eh_frame:0000000000007403                 db  42h ; B
.eh_frame:0000000000007404                 db  0Eh
.eh_frame:0000000000007405                 db    8
.eh_frame:0000000000007406                 db  45h ; E
.eh_frame:0000000000007407                 db  0Bh
.eh_frame:0000000000007408                 db  1Ch
.eh_frame:0000000000007409                 db    0
.eh_frame:000000000000740A                 db    0
.eh_frame:000000000000740B                 db    0
.eh_frame:000000000000740C                 db 0E4h
.eh_frame:000000000000740D                 db  0Bh
.eh_frame:000000000000740E                 db    0
.eh_frame:000000000000740F                 db    0
.eh_frame:0000000000007410                 db 0E0h
.eh_frame:0000000000007411                 db 0E1h
.eh_frame:0000000000007412                 db 0FFh
.eh_frame:0000000000007413                 db 0FFh
.eh_frame:0000000000007414                 db  40h ; @
.eh_frame:0000000000007415                 db    0
.eh_frame:0000000000007416                 db    0
.eh_frame:0000000000007417                 db    0
.eh_frame:0000000000007418                 db    0
.eh_frame:0000000000007419                 db  44h ; D
.eh_frame:000000000000741A                 db  0Eh
.eh_frame:000000000000741B                 db  10h
.eh_frame:000000000000741C                 db  83h
.eh_frame:000000000000741D                 db    2
.eh_frame:000000000000741E                 db  5Ah ; Z
.eh_frame:000000000000741F                 db  0Ah
.eh_frame:0000000000007420                 db  0Eh
.eh_frame:0000000000007421                 db    8
.eh_frame:0000000000007422                 db  4Ah ; J
.eh_frame:0000000000007423                 db  0Bh
.eh_frame:0000000000007424                 db  53h ; S
.eh_frame:0000000000007425                 db  0Eh
.eh_frame:0000000000007426                 db    8
.eh_frame:0000000000007427                 db    0
.eh_frame:0000000000007428                 db  2Ch ; ,
.eh_frame:0000000000007429                 db    0
.eh_frame:000000000000742A                 db    0
.eh_frame:000000000000742B                 db    0
.eh_frame:000000000000742C                 db    4
.eh_frame:000000000000742D                 db  0Ch
.eh_frame:000000000000742E                 db    0
.eh_frame:000000000000742F                 db    0
.eh_frame:0000000000007430                 db    0
.eh_frame:0000000000007431                 db 0E2h
.eh_frame:0000000000007432                 db 0FFh
.eh_frame:0000000000007433                 db 0FFh
.eh_frame:0000000000007434                 db  57h ; W
.eh_frame:0000000000007435                 db    0
.eh_frame:0000000000007436                 db    0
.eh_frame:0000000000007437                 db    0
.eh_frame:0000000000007438                 db    0
.eh_frame:0000000000007439                 db  63h ; c
.eh_frame:000000000000743A                 db  0Eh
.eh_frame:000000000000743B                 db  10h
.eh_frame:000000000000743C                 db  8Ch
.eh_frame:000000000000743D                 db    2
.eh_frame:000000000000743E                 db  41h ; A
.eh_frame:000000000000743F                 db  0Eh
.eh_frame:0000000000007440                 db  18h
.eh_frame:0000000000007441                 db  86h
.eh_frame:0000000000007442                 db    3
.eh_frame:0000000000007443                 db  44h ; D
.eh_frame:0000000000007444                 db  0Eh
.eh_frame:0000000000007445                 db  20h
.eh_frame:0000000000007446                 db  83h
.eh_frame:0000000000007447                 db    4
.eh_frame:0000000000007448                 db  6Bh ; k
.eh_frame:0000000000007449                 db  0Eh
.eh_frame:000000000000744A                 db  18h
.eh_frame:000000000000744B                 db  41h ; A
.eh_frame:000000000000744C                 db  0Eh
.eh_frame:000000000000744D                 db  10h
.eh_frame:000000000000744E                 db  42h ; B
.eh_frame:000000000000744F                 db  0Eh
.eh_frame:0000000000007450                 db    8
.eh_frame:0000000000007451                 db    0
.eh_frame:0000000000007452                 db    0
.eh_frame:0000000000007453                 db    0
.eh_frame:0000000000007454                 db    0
.eh_frame:0000000000007455                 db    0
.eh_frame:0000000000007456                 db    0
.eh_frame:0000000000007457                 db    0
.eh_frame:0000000000007458                 db  44h ; D
.eh_frame:0000000000007459                 db    0
.eh_frame:000000000000745A                 db    0
.eh_frame:000000000000745B                 db    0
.eh_frame:000000000000745C                 db  34h ; 4
.eh_frame:000000000000745D                 db  0Ch
.eh_frame:000000000000745E                 db    0
.eh_frame:000000000000745F                 db    0
.eh_frame:0000000000007460                 db  30h ; 0
.eh_frame:0000000000007461                 db 0E2h
.eh_frame:0000000000007462                 db 0FFh
.eh_frame:0000000000007463                 db 0FFh
.eh_frame:0000000000007464                 db  65h ; e
.eh_frame:0000000000007465                 db    0
.eh_frame:0000000000007466                 db    0
.eh_frame:0000000000007467                 db    0
.eh_frame:0000000000007468                 db    0
.eh_frame:0000000000007469                 db  42h ; B
.eh_frame:000000000000746A                 db  0Eh
.eh_frame:000000000000746B                 db  10h
.eh_frame:000000000000746C                 db  8Fh
.eh_frame:000000000000746D                 db    2
.eh_frame:000000000000746E                 db  42h ; B
.eh_frame:000000000000746F                 db  0Eh
.eh_frame:0000000000007470                 db  18h
.eh_frame:0000000000007471                 db  8Eh
.eh_frame:0000000000007472                 db    3
.eh_frame:0000000000007473                 db  45h ; E
.eh_frame:0000000000007474                 db  0Eh
.eh_frame:0000000000007475                 db  20h
.eh_frame:0000000000007476                 db  8Dh
.eh_frame:0000000000007477                 db    4
.eh_frame:0000000000007478                 db  42h ; B
.eh_frame:0000000000007479                 db  0Eh
.eh_frame:000000000000747A                 db  28h ; (
.eh_frame:000000000000747B                 db  8Ch
.eh_frame:000000000000747C                 db    5
.eh_frame:000000000000747D                 db  48h ; H
.eh_frame:000000000000747E                 db  0Eh
.eh_frame:000000000000747F                 db  30h ; 0
.eh_frame:0000000000007480                 db  86h
.eh_frame:0000000000007481                 db    6
.eh_frame:0000000000007482                 db  48h ; H
.eh_frame:0000000000007483                 db  0Eh
.eh_frame:0000000000007484                 db  38h ; 8
.eh_frame:0000000000007485                 db  83h
.eh_frame:0000000000007486                 db    7
.eh_frame:0000000000007487                 db  4Dh ; M
.eh_frame:0000000000007488                 db  0Eh
.eh_frame:0000000000007489                 db  40h ; @
.eh_frame:000000000000748A                 db  72h ; r
.eh_frame:000000000000748B                 db  0Eh
.eh_frame:000000000000748C                 db  38h ; 8
.eh_frame:000000000000748D                 db  41h ; A
.eh_frame:000000000000748E                 db  0Eh
.eh_frame:000000000000748F                 db  30h ; 0
.eh_frame:0000000000007490                 db  41h ; A
.eh_frame:0000000000007491                 db  0Eh
.eh_frame:0000000000007492                 db  28h ; (
.eh_frame:0000000000007493                 db  42h ; B
.eh_frame:0000000000007494                 db  0Eh
.eh_frame:0000000000007495                 db  20h
.eh_frame:0000000000007496                 db  42h ; B
.eh_frame:0000000000007497                 db  0Eh
.eh_frame:0000000000007498                 db  18h
.eh_frame:0000000000007499                 db  42h ; B
.eh_frame:000000000000749A                 db  0Eh
.eh_frame:000000000000749B                 db  10h
.eh_frame:000000000000749C                 db  42h ; B
.eh_frame:000000000000749D                 db  0Eh
.eh_frame:000000000000749E                 db    8
.eh_frame:000000000000749F                 db    0
.eh_frame:00000000000074A0                 db  14h
.eh_frame:00000000000074A1                 db    0
.eh_frame:00000000000074A2                 db    0
.eh_frame:00000000000074A3                 db    0
.eh_frame:00000000000074A4                 db  7Ch ; |
.eh_frame:00000000000074A5                 db  0Ch
.eh_frame:00000000000074A6                 db    0
.eh_frame:00000000000074A7                 db    0
.eh_frame:00000000000074A8                 db  58h ; X
.eh_frame:00000000000074A9                 db 0E2h
.eh_frame:00000000000074AA                 db 0FFh
.eh_frame:00000000000074AB                 db 0FFh
.eh_frame:00000000000074AC                 db    2
.eh_frame:00000000000074AD                 db    0
.eh_frame:00000000000074AE                 db    0
.eh_frame:00000000000074AF                 db    0
.eh_frame:00000000000074B0                 db    0
.eh_frame:00000000000074B1                 db    0
.eh_frame:00000000000074B2                 db    0
.eh_frame:00000000000074B3                 db    0
.eh_frame:00000000000074B4                 db    0
.eh_frame:00000000000074B5                 db    0
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db  10h
.eh_frame:00000000000074B9                 db    0
.eh_frame:00000000000074BA                 db    0
.eh_frame:00000000000074BB                 db    0
.eh_frame:00000000000074BC                 db  94h
.eh_frame:00000000000074BD                 db  0Ch
.eh_frame:00000000000074BE                 db    0
.eh_frame:00000000000074BF                 db    0
.eh_frame:00000000000074C0                 db  50h ; P
.eh_frame:00000000000074C1                 db 0E2h
.eh_frame:00000000000074C2                 db 0FFh
.eh_frame:00000000000074C3                 db 0FFh
.eh_frame:00000000000074C4                 db  0Eh
.eh_frame:00000000000074C5                 db    0
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db    0
.eh_frame:00000000000074C9                 db    0
.eh_frame:00000000000074CA                 db    0
.eh_frame:00000000000074CB                 db    0
.eh_frame:00000000000074CC __FRAME_END__   db    0
.eh_frame:00000000000074CD                 db    0
.eh_frame:00000000000074CE                 db    0
.eh_frame:00000000000074CF                 db    0
.eh_frame:00000000000074CF _eh_frame       ends
.eh_frame:00000000000074CF
.init_array:0000000000207B90 ; ELF Initialization Function Table
.init_array:0000000000207B90 ; ===========================================================================
.init_array:0000000000207B90
.init_array:0000000000207B90 ; Segment type: Pure data
.init_array:0000000000207B90 ; Segment permissions: Read/Write
.init_array:0000000000207B90 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B90                 assume cs:_init_array
.init_array:0000000000207B90                 ;org 207B90h
.init_array:0000000000207B90 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B90                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B90                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B90 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B90
.fini_array:0000000000207B98 ; ELF Termination Function Table
.fini_array:0000000000207B98 ; ===========================================================================
.fini_array:0000000000207B98
.fini_array:0000000000207B98 ; Segment type: Pure data
.fini_array:0000000000207B98 ; Segment permissions: Read/Write
.fini_array:0000000000207B98 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B98                 assume cs:_fini_array
.fini_array:0000000000207B98                 ;org 207B98h
.fini_array:0000000000207B98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B98                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B98 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B98
.data.rel.ro:0000000000207BA0 ; ===========================================================================
.data.rel.ro:0000000000207BA0
.data.rel.ro:0000000000207BA0 ; Segment type: Pure data
.data.rel.ro:0000000000207BA0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207BA0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207BA0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207BA0                 ;org 207BA0h
.data.rel.ro:0000000000207BA0 ; struct option long_options
.data.rel.ro:0000000000207BA0 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000207BA0                                         ; DATA XREF: parse_long_options:loc_2C10↑o
.data.rel.ro:0000000000207BA0                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000207BA0                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000207BA0                 db 4 dup(0)
.data.rel.ro:0000000000207BA0                 dq 0                    ; flag
.data.rel.ro:0000000000207BA0                 dd 68h                  ; val
.data.rel.ro:0000000000207BA0                 db 4 dup(0)
.data.rel.ro:0000000000207BC0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db  76h ; v
.data.rel.ro:0000000000207BD9                 db    0
.data.rel.ro:0000000000207BDA                 db    0
.data.rel.ro:0000000000207BDB                 db    0
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 db    0
.data.rel.ro:0000000000207BE1                 db    0
.data.rel.ro:0000000000207BE2                 db    0
.data.rel.ro:0000000000207BE3                 db    0
.data.rel.ro:0000000000207BE4                 db    0
.data.rel.ro:0000000000207BE5                 db    0
.data.rel.ro:0000000000207BE6                 db    0
.data.rel.ro:0000000000207BE7                 db    0
.data.rel.ro:0000000000207BE8                 db    0
.data.rel.ro:0000000000207BE9                 db    0
.data.rel.ro:0000000000207BEA                 db    0
.data.rel.ro:0000000000207BEB                 db    0
.data.rel.ro:0000000000207BEC                 db    0
.data.rel.ro:0000000000207BED                 db    0
.data.rel.ro:0000000000207BEE                 db    0
.data.rel.ro:0000000000207BEF                 db    0
.data.rel.ro:0000000000207BF0                 db    0
.data.rel.ro:0000000000207BF1                 db    0
.data.rel.ro:0000000000207BF2                 db    0
.data.rel.ro:0000000000207BF3                 db    0
.data.rel.ro:0000000000207BF4                 db    0
.data.rel.ro:0000000000207BF5                 db    0
.data.rel.ro:0000000000207BF6                 db    0
.data.rel.ro:0000000000207BF7                 db    0
.data.rel.ro:0000000000207BF8                 db    0
.data.rel.ro:0000000000207BF9                 db    0
.data.rel.ro:0000000000207BFA                 db    0
.data.rel.ro:0000000000207BFB                 db    0
.data.rel.ro:0000000000207BFC                 db    0
.data.rel.ro:0000000000207BFD                 db    0
.data.rel.ro:0000000000207BFE                 db    0
.data.rel.ro:0000000000207BFF                 db    0
.data.rel.ro:0000000000207C00                 public quoting_style_args
.data.rel.ro:0000000000207C00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207C08                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207C10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C28                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C48                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C50                 db    0
.data.rel.ro:0000000000207C51                 db    0
.data.rel.ro:0000000000207C52                 db    0
.data.rel.ro:0000000000207C53                 db    0
.data.rel.ro:0000000000207C54                 db    0
.data.rel.ro:0000000000207C55                 db    0
.data.rel.ro:0000000000207C56                 db    0
.data.rel.ro:0000000000207C57                 db    0
.data.rel.ro:0000000000207C57 _data_rel_ro    ends
.data.rel.ro:0000000000207C57
LOAD:0000000000207C58 ; ELF Dynamic Information
LOAD:0000000000207C58 ; ===========================================================================
LOAD:0000000000207C58
LOAD:0000000000207C58 ; Segment type: Pure data
LOAD:0000000000207C58 ; Segment permissions: Read/Write
LOAD:0000000000207C58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C58                 assume cs:LOAD
LOAD:0000000000207C58                 ;org 207C58h
LOAD:0000000000207C58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C68                 Elf64_Dyn <0Ch, 12D0h>  ; DT_INIT
LOAD:0000000000207C78                 Elf64_Dyn <0Dh, 5720h>  ; DT_FINI
LOAD:0000000000207C88                 Elf64_Dyn <19h, 207B90h> ; DT_INIT_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <1Ah, 207B98h> ; DT_FINI_ARRAY
LOAD:0000000000207CB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CD8                 Elf64_Dyn <5, 868h>     ; DT_STRTAB
LOAD:0000000000207CE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CF8                 Elf64_Dyn <0Ah, 2B7h>   ; DT_STRSZ
LOAD:0000000000207D08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207D18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D28                 Elf64_Dyn <3, 207E48h>  ; DT_PLTGOT
LOAD:0000000000207D38                 Elf64_Dyn <2, 438h>     ; DT_PLTRELSZ
LOAD:0000000000207D48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D58                 Elf64_Dyn <17h, 0E98h>  ; DT_JMPREL
LOAD:0000000000207D68                 Elf64_Dyn <7, 0BF8h>    ; DT_RELA
LOAD:0000000000207D78                 Elf64_Dyn <8, 2A0h>     ; DT_RELASZ
LOAD:0000000000207D88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFFEh, 0B98h> ; DT_VERNEED
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DD8                 Elf64_Dyn <6FFFFFF0h, 0B20h> ; DT_VERSYM
LOAD:0000000000207DE8                 Elf64_Dyn <6FFFFFF9h, 11h> ; DT_RELACOUNT
LOAD:0000000000207DF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E28                 db    0
LOAD:0000000000207E29                 db    0
LOAD:0000000000207E2A                 db    0
LOAD:0000000000207E2B                 db    0
LOAD:0000000000207E2C                 db    0
LOAD:0000000000207E2D                 db    0
LOAD:0000000000207E2E                 db    0
LOAD:0000000000207E2F                 db    0
LOAD:0000000000207E30                 db    0
LOAD:0000000000207E31                 db    0
LOAD:0000000000207E32                 db    0
LOAD:0000000000207E33                 db    0
LOAD:0000000000207E34                 db    0
LOAD:0000000000207E35                 db    0
LOAD:0000000000207E36                 db    0
LOAD:0000000000207E37                 db    0
LOAD:0000000000207E38                 db    0
LOAD:0000000000207E39                 db    0
LOAD:0000000000207E3A                 db    0
LOAD:0000000000207E3B                 db    0
LOAD:0000000000207E3C                 db    0
LOAD:0000000000207E3D                 db    0
LOAD:0000000000207E3E                 db    0
LOAD:0000000000207E3F                 db    0
LOAD:0000000000207E40                 db    0
LOAD:0000000000207E41                 db    0
LOAD:0000000000207E42                 db    0
LOAD:0000000000207E43                 db    0
LOAD:0000000000207E44                 db    0
LOAD:0000000000207E45                 db    0
LOAD:0000000000207E46                 db    0
LOAD:0000000000207E47                 db    0
LOAD:0000000000207E47 LOAD            ends
LOAD:0000000000207E47
.got:0000000000207E48 ; ===========================================================================
.got:0000000000207E48
.got:0000000000207E48 ; Segment type: Pure data
.got:0000000000207E48 ; Segment permissions: Read/Write
.got:0000000000207E48 _got            segment qword public 'DATA' use64
.got:0000000000207E48                 assume cs:_got
.got:0000000000207E48                 ;org 207E48h
.got:0000000000207E48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E50 qword_207E50    dq 0                    ; DATA XREF: sub_12F0↑r
.got:0000000000207E58 qword_207E58    dq 0                    ; DATA XREF: sub_12F0+6↑r
.got:0000000000207E60 __snprintf_chk_ptr dq offset __snprintf_chk
.got:0000000000207E60                                         ; DATA XREF: ___snprintf_chk↑r
.got:0000000000207E68 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E70 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E78 __errno_location_ptr dq offset __errno_location
.got:0000000000207E78                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E80 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E88 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E90 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E98 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000207EA0 strtod_ptr      dq offset strtod        ; DATA XREF: _strtod↑r
.got:0000000000207EA8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207EB0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207EB8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207EB8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207EC0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EC8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EC8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207ED0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207ED8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207ED8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EE0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EE8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EF0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EF8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207F00 strtof_ptr      dq offset strtof        ; DATA XREF: _strtof↑r
.got:0000000000207F08 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207F10 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F18 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F18                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F20 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F70 strtold_ptr     dq offset strtold       ; DATA XREF: _strtold↑r
.got:0000000000207F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000207FC0                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000207FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FD0                                         ; DATA XREF: start+24↑r
.got:0000000000207FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FE8 _got            ends
.got:0000000000207FE8
LOAD:0000000000207FF0 ; ===========================================================================
LOAD:0000000000207FF0
LOAD:0000000000207FF0 ; Segment type: Pure data
LOAD:0000000000207FF0 ; Segment permissions: Read/Write
LOAD:0000000000207FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FF0                 assume cs:LOAD
LOAD:0000000000207FF0                 ;org 207FF0h
LOAD:0000000000207FF0                 align 20h
LOAD:0000000000207FF0 LOAD            ends
LOAD:0000000000207FF0
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public exit_failure
.data:0000000000208010 ; int exit_failure
.data:0000000000208010 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2702↑r
.data:0000000000208010                                         ; parse_gnu_standard_options_only:loc_2DA0↑r ...
.data:0000000000208014                 align 20h
.data:0000000000208020                 public quote_quoting_options
.data:0000000000208020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208020                                         ; quote_mem↑o ...
.data:0000000000208021                 db    0
.data:0000000000208022                 db    0
.data:0000000000208023                 db    0
.data:0000000000208024                 db    0
.data:0000000000208025                 db    0
.data:0000000000208026                 db    0
.data:0000000000208027                 db    0
.data:0000000000208028                 db    0
.data:0000000000208029                 db    0
.data:000000000020802A                 db    0
.data:000000000020802B                 db    0
.data:000000000020802C                 db    0
.data:000000000020802D                 db    0
.data:000000000020802E                 db    0
.data:000000000020802F                 db    0
.data:0000000000208030                 db    0
.data:0000000000208031                 db    0
.data:0000000000208032                 db    0
.data:0000000000208033                 db    0
.data:0000000000208034                 db    0
.data:0000000000208035                 db    0
.data:0000000000208036                 db    0
.data:0000000000208037                 db    0
.data:0000000000208038                 db    0
.data:0000000000208039                 db    0
.data:000000000020803A                 db    0
.data:000000000020803B                 db    0
.data:000000000020803C                 db    0
.data:000000000020803D                 db    0
.data:000000000020803E                 db    0
.data:000000000020803F                 db    0
.data:0000000000208040                 db    0
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208058                                         ; quotearg_n_options:loc_422D↑r ...
.data:000000000020805C                 align 20h
.data:0000000000208060 ; void *slotvec
.data:0000000000208060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208060                                         ; quotearg_n_options+76↑w ...
.data:0000000000208068                 align 10h
.data:0000000000208070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208070                                         ; quotearg_n_options+187↑r ...
.data:0000000000208078 off_208078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208078 _data           ends
.data:0000000000208078
.bss:0000000000208080 ; ===========================================================================
.bss:0000000000208080
.bss:0000000000208080 ; Segment type: Uninitialized
.bss:0000000000208080 ; Segment permissions: Read/Write
.bss:0000000000208080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000208080                 assume cs:_bss
.bss:0000000000208080                 ;org 208080h
.bss:0000000000208080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000208080                 public __bss_start ; weak
.bss:0000000000208080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000007C0↑o
.bss:0000000000208080                                         ; LOAD:0000000000000808↑o ...
.bss:0000000000208080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000208080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000208080                                         ; _edata
.bss:0000000000208080                                         ; Copy of shared data
.bss:0000000000208088                 public stdout@@GLIBC_2_2_5
.bss:0000000000208088 ; FILE *stdout
.bss:0000000000208088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007A8↑o
.bss:0000000000208088                                         ; usage+7D↑r ...
.bss:0000000000208088                                         ; Alternative name is 'stdout'
.bss:0000000000208088                                         ; Copy of shared data
.bss:0000000000208090                 public optind@@GLIBC_2_2_5
.bss:0000000000208090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000850↑o
.bss:0000000000208090                                         ; parse_long_options+8D↑w
.bss:0000000000208090                                         ; Alternative name is 'optind'
.bss:0000000000208090                                         ; Copy of shared data
.bss:0000000000208094                 align 8
.bss:0000000000208098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000208098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000208098                                         ; DATA XREF: LOAD:00000000000007D8↑o
.bss:0000000000208098                                         ; LOAD:00000000000007F0↑o ...
.bss:0000000000208098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000208098                                         ; Copy of shared data
.bss:00000000002080A0                 public opterr@@GLIBC_2_2_5
.bss:00000000002080A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:00000000002080A0                                         ; parse_long_options+67↑r ...
.bss:00000000002080A0                                         ; Alternative name is 'opterr'
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A4                 align 20h
.bss:00000000002080C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080C0 ; FILE *stderr
.bss:00000000002080C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000838↑o
.bss:00000000002080C0                                         ; usage+3D↑r ...
.bss:00000000002080C0                                         ; Alternative name is 'stderr'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080C9                 align 10h
.bss:00000000002080D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002080D0                                         ; close_stdout+1B↑r
.bss:00000000002080D1                 align 8
.bss:00000000002080D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002080D8                                         ; close_stdout+56↑r
.bss:00000000002080E0                 public program_name
.bss:00000000002080E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002080E0                                         ; set_program_name:loc_2E4D↑w
.bss:00000000002080E8                 align 20h
.bss:0000000000208100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208100                                         ; quotearg_free+46↑o ...
.bss:0000000000208101                 db    ? ;
.bss:0000000000208102                 db    ? ;
.bss:0000000000208103                 db    ? ;
.bss:0000000000208104                 db    ? ;
.bss:0000000000208105                 db    ? ;
.bss:0000000000208106                 db    ? ;
.bss:0000000000208107                 db    ? ;
.bss:0000000000208108                 db    ? ;
.bss:0000000000208109                 db    ? ;
.bss:000000000020810A                 db    ? ;
.bss:000000000020810B                 db    ? ;
.bss:000000000020810C                 db    ? ;
.bss:000000000020810D                 db    ? ;
.bss:000000000020810E                 db    ? ;
.bss:000000000020810F                 db    ? ;
.bss:0000000000208110                 db    ? ;
.bss:0000000000208111                 db    ? ;
.bss:0000000000208112                 db    ? ;
.bss:0000000000208113                 db    ? ;
.bss:0000000000208114                 db    ? ;
.bss:0000000000208115                 db    ? ;
.bss:0000000000208116                 db    ? ;
.bss:0000000000208117                 db    ? ;
.bss:0000000000208118                 db    ? ;
.bss:0000000000208119                 db    ? ;
.bss:000000000020811A                 db    ? ;
.bss:000000000020811B                 db    ? ;
.bss:000000000020811C                 db    ? ;
.bss:000000000020811D                 db    ? ;
.bss:000000000020811E                 db    ? ;
.bss:000000000020811F                 db    ? ;
.bss:0000000000208120                 db    ? ;
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208200                                         ; get_quoting_style↑o ...
.bss:0000000000208210 xmmword_208210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208220 xmmword_208220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208230 qword_208230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208230 _bss            ends
.bss:0000000000208230
.prgend:0000000000208238 ; ===========================================================================
.prgend:0000000000208238
.prgend:0000000000208238 ; Segment type: Zero-length
.prgend:0000000000208238 _prgend         segment byte public '' use64
.prgend:0000000000208238 _end            label byte
.prgend:0000000000208238 _prgend         ends
.prgend:0000000000208238
extern:0000000000208240 ; ===========================================================================
extern:0000000000208240
extern:0000000000208240 ; Segment type: Externs
extern:0000000000208240 ; extern
extern:0000000000208240                 extrn __snprintf_chk:near
extern:0000000000208240                                         ; CODE XREF: ___snprintf_chk↑j
extern:0000000000208240                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:0000000000208248 ; void free(void *ptr)
extern:0000000000208248                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208248                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208250 ; void __noreturn abort(void)
extern:0000000000208250                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208250                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208258 ; int *_errno_location(void)
extern:0000000000208258                 extrn __errno_location:near
extern:0000000000208258                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208258                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208260 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208260                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208260                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208268 ; void __noreturn exit(int status)
extern:0000000000208268                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208268                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208270 ; size_t _fpending(FILE *fp)
extern:0000000000208270                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208270                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208278 ; int puts(const char *s)
extern:0000000000208278                 extrn puts:near         ; CODE XREF: _puts↑j
extern:0000000000208278                                         ; DATA XREF: .got:puts_ptr↑o
extern:0000000000208280 ; double strtod(const char *nptr, char **endptr)
extern:0000000000208280                 extrn strtod:near       ; CODE XREF: _strtod↑j
extern:0000000000208280                                         ; DATA XREF: .got:strtod_ptr↑o
extern:0000000000208288 ; char *textdomain(const char *domainname)
extern:0000000000208288                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208288                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000208290 ; int fclose(FILE *stream)
extern:0000000000208290                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000208290                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000208298 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000208298                 extrn bindtextdomain:near
extern:0000000000208298                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000208298                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002082A0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002082A0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002082A0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002082A8 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002082A8                 extrn __ctype_get_mb_cur_max:near
extern:00000000002082A8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002082A8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002082B0 ; size_t strlen(const char *s)
extern:00000000002082B0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002082B0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082B8                 extrn __stack_chk_fail:near
extern:00000000002082B8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082B8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082C0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082C0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082C0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082C8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082C8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082C8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082D0 ; char *strrchr(const char *s, int c)
extern:00000000002082D0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082D0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002082D8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002082D8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002082D8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002082E0 ; float strtof(const char *nptr, char **endptr)
extern:00000000002082E0                 extrn strtof:near       ; CODE XREF: _strtof↑j
extern:00000000002082E0                                         ; DATA XREF: .got:strtof_ptr↑o
extern:00000000002082E8 ; void *memset(void *s, int c, size_t n)
extern:00000000002082E8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002082E8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002082F0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002082F0                 extrn __libc_start_main:near
extern:00000000002082F0                                         ; CODE XREF: start+24↑p
extern:00000000002082F0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002082F8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002082F8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002082F8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208300 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208300                 extrn fputs_unlocked:near
extern:0000000000208300                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208300                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208308 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208308                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208308                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208310 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208310                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208310                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208318 ; int fileno(FILE *stream)
extern:0000000000208318                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208318                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208320 ; void *malloc(size_t size)
extern:0000000000208320                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208320                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208328 ; int fflush(FILE *stream)
extern:0000000000208328                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208328                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208330 ; char *nl_langinfo(nl_item item)
extern:0000000000208330                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208330                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208338 ; int _freading(FILE *fp)
extern:0000000000208338                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208338                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208340 ; void *realloc(void *ptr, size_t size)
extern:0000000000208340                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208340                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208348 ; char *setlocale(int category, const char *locale)
extern:0000000000208348                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208348                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208350                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208350                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208358 ; long double strtold(const char *nptr, char **endptr)
extern:0000000000208358                 extrn strtold:near      ; CODE XREF: _strtold↑j
extern:0000000000208358                                         ; DATA XREF: .got:strtold_ptr↑o
extern:0000000000208360 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208360                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208360                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208368 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208368                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208368                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208370 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000208370                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000208370                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000208378 ; void __noreturn exit(int status)
extern:0000000000208378                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000208378                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000208380 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000208380                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000208380                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000208388                 extrn __fprintf_chk:near
extern:0000000000208388                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000208388                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000208390 ; int mbsinit(const mbstate_t *ps)
extern:0000000000208390                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000208390                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000208398 ; int iswprint(wint_t wc)
extern:0000000000208398                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000208398                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083A0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083A0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083A0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083A0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002083A8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002083A8                 extrn __ctype_b_loc:near
extern:00000000002083A8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002083A8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002083B0                 extrn __sprintf_chk:near
extern:00000000002083B0                                         ; CODE XREF: ___sprintf_chk↑j
extern:00000000002083B0                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:00000000002083B8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002083B8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002083C0                 extrn __gmon_start__:near ; weak
extern:00000000002083C0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002083C0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002083C8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002083C8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002083C8
extern:00000000002083C8
extern:00000000002083C8                 end start
