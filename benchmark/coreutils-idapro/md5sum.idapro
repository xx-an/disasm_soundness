LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : A3CDF7683885775B4DFFFDD6271A180AD1E5AD8DDA9296C1923A951EDFCA185F
LOAD:0000000000000000 ; Input MD5    : 958B33FECA38BBD1712A0D58F66DD4E9
LOAD:0000000000000000 ; Input CRC32  : 5FC29B67
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/md5sum
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'md5sum.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'md5.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 30898h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080 qword_80        dq 238h                 ; DATA XREF: .rodata:fillbuf↓o
LOAD:0000000000000080                                         ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 9350h                ; Size in file image
LOAD:00000000000000D8                 dq 9350h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 9A10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 209A10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 690h                 ; Size in file image
LOAD:0000000000000110                 dq 870h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9C18h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209C18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 82F0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 82F0h                ; Physical address
LOAD:00000000000001B0                 dq 2BCh                 ; Size in file image
LOAD:00000000000001B8                 dq 2BCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 9A10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 209A10h              ; Physical address
LOAD:0000000000000220                 dq 5F0h                 ; Size in file image
LOAD:0000000000000228                 dq 5F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0C6h, 13h, 74h, 5Eh, 2Bh, 0AAh, 0B4h, 0F4h, 0C2h, 9 ; Desc
LOAD:0000000000000284                 db 0D2h, 0E5h, 0Bh, 8Dh, 88h, 13h, 1Eh, 59h, 1Dh, 85h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Ah
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801A000614904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Ah, 3Bh, 41h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_910, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_910, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_910, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_910, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_910, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_910, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_910, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFcntl - offset byte_910, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFreadUnlocked - offset byte_910, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_910, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFclose - offset byte_910, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_910, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_910, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_910, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_910, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_910, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_910, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_910, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrchr - offset byte_910, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aOverflow - offset byte_910, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrrchr - offset byte_910, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aLseek - offset byte_910, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004F0                            0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_910, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aFclose+1 - offset byte_910, 12h, 0, 0, \ ; "close"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aPosixFadvise - offset byte_910, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aLibcStartMain - offset byte_910, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMemcmp - offset byte_910, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFputsUnlocked - offset byte_910, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aCalloc - offset byte_910, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aGetdelim - offset byte_910, 12h, 0, 0, \ ; "__getdelim"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGmonStart - offset byte_910, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcpy - offset byte_910, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFileno - offset byte_910, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMalloc - offset byte_910, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFflush - offset byte_910, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aNlLanginfo - offset byte_910, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFreading - offset byte_910, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFwriteUnlocked - offset byte_910, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aRealloc - offset byte_910, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFdopen - offset byte_910, 12h, 0, 0, \ ; "fdopen"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aSetlocale - offset byte_910, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aPrintfChk - offset byte_910, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aSetvbuf - offset byte_910, 12h, 0, 0, \ ; "setvbuf"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aError - offset byte_910, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aFseeko - offset byte_910, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFopen - offset byte_910, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000730                            0>
LOAD:0000000000000748                 Elf64_Sym <offset aDcngettext - offset byte_910, 12h, 0, 0, \ ; "dcngettext"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aCxaAtexit - offset byte_910, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aExit+1 - offset byte_910, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFwrite - offset byte_910, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFprintfChk - offset byte_910, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aItmRegistertmc - offset byte_910, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aMbsinit - offset byte_910, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aIswprint - offset byte_910, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aCxaFinalize - offset byte_910, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_910, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aCtypeBLoc - offset byte_910, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aStdout - offset byte_910, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000850                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgname - offset byte_910, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000868                            offset __bss_start, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aStdin - offset byte_910, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000880                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aProgramInvocat - offset byte_910, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000898                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aPrognameFull - offset byte_910, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000008B0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_910, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000008C8                            offset __bss_start, 8>
LOAD:00000000000008E0                 Elf64_Sym <offset aStderr - offset byte_910, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000008E0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8                 Elf64_Sym <offset aOptind - offset byte_910, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008F8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000910 ; ELF String Table
LOAD:0000000000000910 byte_910        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000910                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000911 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C98↓o
LOAD:000000000000091B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000922 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:000000000000092F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000939 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000941 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000947 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:000000000000094F aDcngettext     db 'dcngettext',0       ; DATA XREF: LOAD:0000000000000748↑o
LOAD:000000000000095A aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000961 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000969 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000973 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000979 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:000000000000098A aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000993 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000688↑o
LOAD:000000000000099B aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:00000000000009A1 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000880↑o
LOAD:00000000000009A7 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:00000000000009A7                                         ; LOAD:0000000000000778↑o
LOAD:00000000000009AD aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000009AD                                         ; DATA XREF: LOAD:0000000000000898↑o
LOAD:00000000000009C5 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000009C5                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009DC aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009EA aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:00000000000009F1 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000009F8 aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000A07 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000A0E aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000A1F aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A26 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A34 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000A3B aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000A41 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000A48 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A48                                         ; LOAD:0000000000000520↑o
LOAD:0000000000000A4F aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A56 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000A5E aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A6A aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000A78 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A83 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000A8A aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A96 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A9D aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000AA8 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000AAF aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000ABA aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000AC1 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000AC1                                         ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000ADF aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000AE6 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000AE6                                         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AFA aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000B09 aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B11 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000B17 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000B17                                         ; LOAD:00000000000003D0↑o
LOAD:0000000000000B26 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B36 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B36                                         ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B48 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B4F aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B5A aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B69 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B6E aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B79 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000B89 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000B96 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000CA8↓o
LOAD:0000000000000BA0 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000CB8↓o
LOAD:0000000000000BAC aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000CC8↓o
LOAD:0000000000000BB7 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000CD8↓o
LOAD:0000000000000BC1 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000CE8↓o
LOAD:0000000000000BCD aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000BCD                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BE9 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BF8 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BF8                                         ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000C12 ; ELF GNU Symbol Version Table
LOAD:0000000000000C12                 dw 0
LOAD:0000000000000C14                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000C16                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C18                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C1A                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C1E                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C20                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C34                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C36                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000C3A                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000C3C                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C3E                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C42                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000C46                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C48                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C4A                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C4C                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C4E                 dw 2                    ; __getdelim@@GLIBC_2.2.5
LOAD:0000000000000C50                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C52                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C54                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C56                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C58                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C5A                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C5C                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C5E                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C60                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C62                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000C64                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C66                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C68                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:0000000000000C6A                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C6C                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C6E                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000C70                 dw 2                    ; dcngettext@@GLIBC_2.2.5
LOAD:0000000000000C72                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C74                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C76                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C78                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C7A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C7C                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C7E                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C80                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C82                 dw 6                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000C84                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C86                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C88                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C8A                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000C8C                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C8E                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C90                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C92                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C94                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C96                 dw 0
LOAD:0000000000000C98 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C98                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_910, 10h, 0> ; "libc.so.6"
LOAD:0000000000000CA8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_910, \ ; "GLIBC_2.3"
LOAD:0000000000000CA8                                10h>
LOAD:0000000000000CB8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_910, \ ; "GLIBC_2.3.4"
LOAD:0000000000000CB8                                10h>
LOAD:0000000000000CC8                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_910, \ ; "GLIBC_2.14"
LOAD:0000000000000CC8                                10h>
LOAD:0000000000000CD8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_910, \ ; "GLIBC_2.4"
LOAD:0000000000000CD8                                10h>
LOAD:0000000000000CE8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_910, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000CF8 ; ELF RELA Relocation Table
LOAD:0000000000000CF8                 Elf64_Rela <209A10h, 8, 2B40h> ; R_X86_64_RELATIVE +2B40h
LOAD:0000000000000D10                 Elf64_Rela <209A18h, 8, 2B00h> ; R_X86_64_RELATIVE +2B00h
LOAD:0000000000000D28                 Elf64_Rela <209A20h, 8, 6FA6h> ; R_X86_64_RELATIVE +6FA6h
LOAD:0000000000000D40                 Elf64_Rela <209A40h, 8, 6FADh> ; R_X86_64_RELATIVE +6FADh
LOAD:0000000000000D58                 Elf64_Rela <209A60h, 8, 6FB3h> ; R_X86_64_RELATIVE +6FB3h
LOAD:0000000000000D70                 Elf64_Rela <209A80h, 8, 6FC2h> ; R_X86_64_RELATIVE +6FC2h
LOAD:0000000000000D88                 Elf64_Rela <209AA0h, 8, 6FC8h> ; R_X86_64_RELATIVE +6FC8h
LOAD:0000000000000DA0                 Elf64_Rela <209AC0h, 8, 6FCFh> ; R_X86_64_RELATIVE +6FCFh
LOAD:0000000000000DB8                 Elf64_Rela <209AE0h, 8, 6FD4h> ; R_X86_64_RELATIVE +6FD4h
LOAD:0000000000000DD0                 Elf64_Rela <209B00h, 8, 6FD9h> ; R_X86_64_RELATIVE +6FD9h
LOAD:0000000000000DE8                 Elf64_Rela <209B20h, 8, 6FE0h> ; R_X86_64_RELATIVE +6FE0h
LOAD:0000000000000E00                 Elf64_Rela <209B40h, 8, 6FE4h> ; R_X86_64_RELATIVE +6FE4h
LOAD:0000000000000E18                 Elf64_Rela <209B60h, 8, 6FE9h> ; R_X86_64_RELATIVE +6FE9h
LOAD:0000000000000E30                 Elf64_Rela <209B80h, 8, 6FEEh> ; R_X86_64_RELATIVE +6FEEh
LOAD:0000000000000E48                 Elf64_Rela <209BC0h, 8, 7A99h> ; R_X86_64_RELATIVE +7A99h
LOAD:0000000000000E60                 Elf64_Rela <209BC8h, 8, 7AA1h> ; R_X86_64_RELATIVE +7AA1h
LOAD:0000000000000E78                 Elf64_Rela <209BD0h, 8, 7AA7h> ; R_X86_64_RELATIVE +7AA7h
LOAD:0000000000000E90                 Elf64_Rela <209BD8h, 8, 7AB4h> ; R_X86_64_RELATIVE +7AB4h
LOAD:0000000000000EA8                 Elf64_Rela <209BE0h, 8, 7AC1h> ; R_X86_64_RELATIVE +7AC1h
LOAD:0000000000000EC0                 Elf64_Rela <209BE8h, 8, 7AD5h> ; R_X86_64_RELATIVE +7AD5h
LOAD:0000000000000ED8                 Elf64_Rela <209BF0h, 8, 7AD7h> ; R_X86_64_RELATIVE +7AD7h
LOAD:0000000000000EF0                 Elf64_Rela <209BF8h, 8, 7ABAh> ; R_X86_64_RELATIVE +7ABAh
LOAD:0000000000000F08                 Elf64_Rela <209C00h, 8, 6EF2h> ; R_X86_64_RELATIVE +6EF2h
LOAD:0000000000000F20                 Elf64_Rela <209C08h, 8, 7ADFh> ; R_X86_64_RELATIVE +7ADFh
LOAD:0000000000000F38                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000000F50                 Elf64_Rela <20A018h, 8, 79E0h> ; R_X86_64_RELATIVE +79E0h
LOAD:0000000000000F68                 Elf64_Rela <20A080h, 8, 20A090h> ; R_X86_64_RELATIVE +20A090h
LOAD:0000000000000F80                 Elf64_Rela <20A098h, 8, 20A140h> ; R_X86_64_RELATIVE +20A140h
LOAD:0000000000000F98                 Elf64_Rela <209FC0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000FB0                 Elf64_Rela <209FC8h, 1A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000FC8                 Elf64_Rela <209FD0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000FE0                 Elf64_Rela <209FD8h, 3400000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000FF8                 Elf64_Rela <209FE0h, 3700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001010                 Elf64_Rela <20A0A0h, 3B00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001028                 Elf64_Rela <20A0A8h, 3A00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001040                 Elf64_Rela <20A0B0h, 3C00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001058                 Elf64_Rela <20A0B8h, 4100000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001070                 Elf64_Rela <20A0C0h, 3E00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001088                 Elf64_Rela <20A0E0h, 4000000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000010A0 ; ELF JMPREL Relocation Table
LOAD:00000000000010A0                 Elf64_Rela <209E20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000010B8                 Elf64_Rela <209E28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000010D0                 Elf64_Rela <209E30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000010E8                 Elf64_Rela <209E38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001100                 Elf64_Rela <209E40h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001118                 Elf64_Rela <209E48h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001130                 Elf64_Rela <209E50h, 800000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001148                 Elf64_Rela <209E58h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:0000000000001160                 Elf64_Rela <209E60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001178                 Elf64_Rela <209E68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001190                 Elf64_Rela <209E70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000011A8                 Elf64_Rela <209E78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000011C0                 Elf64_Rela <209E80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000011D8                 Elf64_Rela <209E88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000011F0                 Elf64_Rela <209E90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001208                 Elf64_Rela <209E98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001220                 Elf64_Rela <209EA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001238                 Elf64_Rela <209EA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001250                 Elf64_Rela <209EB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001268                 Elf64_Rela <209EB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001280                 Elf64_Rela <209EC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001298                 Elf64_Rela <209EC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000012B0                 Elf64_Rela <209ED0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000012C8                 Elf64_Rela <209ED8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000012E0                 Elf64_Rela <209EE0h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000012F8                 Elf64_Rela <209EE8h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001310                 Elf64_Rela <209EF0h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001328                 Elf64_Rela <209EF8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:0000000000001340                 Elf64_Rela <209F00h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001358                 Elf64_Rela <209F08h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001370                 Elf64_Rela <209F10h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001388                 Elf64_Rela <209F18h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000013A0                 Elf64_Rela <209F20h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000013B8                 Elf64_Rela <209F28h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000013D0                 Elf64_Rela <209F30h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000013E8                 Elf64_Rela <209F38h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001400                 Elf64_Rela <209F40h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:0000000000001418                 Elf64_Rela <209F48h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001430                 Elf64_Rela <209F50h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001448                 Elf64_Rela <209F58h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001460                 Elf64_Rela <209F60h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001478                 Elf64_Rela <209F68h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001490                 Elf64_Rela <209F70h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000014A8                 Elf64_Rela <209F78h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT dcngettext
LOAD:00000000000014C0                 Elf64_Rela <209F80h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000014D8                 Elf64_Rela <209F88h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000014F0                 Elf64_Rela <209F90h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001508                 Elf64_Rela <209F98h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001520                 Elf64_Rela <209FA0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001538                 Elf64_Rela <209FA8h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001550                 Elf64_Rela <209FB0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000001568                 Elf64_Rela <209FB8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001568 LOAD            ends
LOAD:0000000000001568
.init:0000000000001580 ; ===========================================================================
.init:0000000000001580
.init:0000000000001580 ; Segment type: Pure code
.init:0000000000001580 ; Segment permissions: Read/Execute
.init:0000000000001580 _init           segment dword public 'CODE' use64
.init:0000000000001580                 assume cs:_init
.init:0000000000001580                 ;org 1580h
.init:0000000000001580                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001580
.init:0000000000001580 ; =============== S U B R O U T I N E =======================================
.init:0000000000001580
.init:0000000000001580
.init:0000000000001580                 public _init_proc
.init:0000000000001580 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001580                 sub     rsp, 8          ; _init
.init:0000000000001584                 mov     rax, cs:__gmon_start___ptr
.init:000000000000158B                 test    rax, rax
.init:000000000000158E                 jz      short loc_1592
.init:0000000000001590                 call    rax ; __gmon_start__
.init:0000000000001592
.init:0000000000001592 loc_1592:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001592                 add     rsp, 8
.init:0000000000001596                 retn
.init:0000000000001596 _init_proc      endp
.init:0000000000001596
.init:0000000000001596 _init           ends
.init:0000000000001596
LOAD:0000000000001597 ; ===========================================================================
LOAD:0000000000001597
LOAD:0000000000001597 ; Segment type: Pure code
LOAD:0000000000001597 ; Segment permissions: Read/Execute
LOAD:0000000000001597 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001597                 assume cs:LOAD
LOAD:0000000000001597                 ;org 1597h
LOAD:0000000000001597                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001597                 align 20h
LOAD:0000000000001597 LOAD            ends
LOAD:0000000000001597
.plt:00000000000015A0 ; ===========================================================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Segment type: Pure code
.plt:00000000000015A0 ; Segment permissions: Read/Execute
.plt:00000000000015A0 _plt            segment para public 'CODE' use64
.plt:00000000000015A0                 assume cs:_plt
.plt:00000000000015A0                 ;org 15A0h
.plt:00000000000015A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0
.plt:00000000000015A0 sub_15A0        proc near               ; CODE XREF: .plt:00000000000015BB↓j
.plt:00000000000015A0                                         ; .plt:00000000000015CB↓j ...
.plt:00000000000015A0 ; __unwind {
.plt:00000000000015A0                 push    cs:qword_209E10
.plt:00000000000015A6                 jmp     cs:qword_209E18
.plt:00000000000015A6 sub_15A0        endp
.plt:00000000000015A6
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015AC                 align 10h
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; void free(void *ptr)
.plt:00000000000015B0 _free           proc near               ; CODE XREF: main+7A4↓p
.plt:00000000000015B0                                         ; md5_stream+C4↓p ...
.plt:00000000000015B0                 jmp     cs:free_ptr
.plt:00000000000015B0 _free           endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    0
.plt:00000000000015BB                 jmp     sub_15A0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: noreturn thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; void __noreturn abort(void)
.plt:00000000000015C0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000015C0                                         ; quotearg_buffer_restyled:def_4461↓p ...
.plt:00000000000015C0                 jmp     cs:abort_ptr
.plt:00000000000015C0 _abort          endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    1
.plt:00000000000015CB                 jmp     sub_15A0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int *__errno_location(void)
.plt:00000000000015D0 ___errno_location proc near             ; CODE XREF: main+B46↓p
.plt:00000000000015D0                                         ; main+E2B↓p ...
.plt:00000000000015D0                 jmp     cs:__errno_location_ptr
.plt:00000000000015D0 ___errno_location endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    2
.plt:00000000000015DB                 jmp     sub_15A0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000015E0 _strncmp        proc near               ; CODE XREF: usage+31C↓p
.plt:00000000000015E0                                         ; usage+3DD↓p
.plt:00000000000015E0                 jmp     cs:strncmp_ptr
.plt:00000000000015E0 _strncmp        endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    3
.plt:00000000000015EB                 jmp     sub_15A0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: noreturn thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; void __noreturn _exit(int status)
.plt:00000000000015F0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000015F0                 jmp     cs:_exit_ptr
.plt:00000000000015F0 __exit          endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    4
.plt:00000000000015FB                 jmp     sub_15A0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; size_t __fpending(FILE *fp)
.plt:0000000000001600 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001600                 jmp     cs:__fpending_ptr
.plt:0000000000001600 ___fpending     endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    5
.plt:000000000000160B                 jmp     sub_15A0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001610 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001610                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001610                 jmp     cs:fcntl_ptr
.plt:0000000000001610 _fcntl          endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    6
.plt:000000000000161B                 jmp     sub_15A0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001620 _fread_unlocked proc near               ; CODE XREF: md5_stream+92↓p
.plt:0000000000001620                 jmp     cs:fread_unlocked_ptr
.plt:0000000000001620 _fread_unlocked endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    7
.plt:000000000000162B                 jmp     sub_15A0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; char *textdomain(const char *domainname)
.plt:0000000000001630 _textdomain     proc near               ; CODE XREF: main+62↓p
.plt:0000000000001630                 jmp     cs:textdomain_ptr
.plt:0000000000001630 _textdomain     endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    8
.plt:000000000000163B                 jmp     sub_15A0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int fclose(FILE *stream)
.plt:0000000000001640 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001640                                         ; rpl_fclose+6B↓j
.plt:0000000000001640                 jmp     cs:fclose_ptr
.plt:0000000000001640 _fclose         endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    9
.plt:000000000000164B                 jmp     sub_15A0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001650 _bindtextdomain proc near               ; CODE XREF: main+56↓p
.plt:0000000000001650                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001650 _bindtextdomain endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    0Ah
.plt:000000000000165B                 jmp     sub_15A0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001660 _dcgettext      proc near               ; CODE XREF: main+2BD↓p
.plt:0000000000001660                                         ; main+3FF↓p ...
.plt:0000000000001660                 jmp     cs:dcgettext_ptr
.plt:0000000000001660 _dcgettext      endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    0Bh
.plt:000000000000166B                 jmp     sub_15A0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001670 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001670                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001670 ___ctype_get_mb_cur_max endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    0Ch
.plt:000000000000167B                 jmp     sub_15A0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; size_t strlen(const char *s)
.plt:0000000000001680 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001680                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001680                 jmp     cs:strlen_ptr
.plt:0000000000001680 _strlen         endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    0Dh
.plt:000000000000168B                 jmp     sub_15A0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: noreturn thunk
.plt:0000000000001690
.plt:0000000000001690 ___stack_chk_fail proc near             ; CODE XREF: main:loc_29E3↓p
.plt:0000000000001690                                         ; md5_buffer:loc_4010↓p ...
.plt:0000000000001690                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001690 ___stack_chk_fail endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    0Eh
.plt:000000000000169B                 jmp     sub_15A0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000016A0 _getopt_long    proc near               ; CODE XREF: main+AF↓p
.plt:00000000000016A0                 jmp     cs:getopt_long_ptr
.plt:00000000000016A0 _getopt_long    endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    0Fh
.plt:00000000000016AB                 jmp     sub_15A0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000016B0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000016B0                 jmp     cs:mbrtowc_ptr
.plt:00000000000016B0 _mbrtowc        endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    10h
.plt:00000000000016BB                 jmp     sub_15A0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; char *strchr(const char *s, int c)
.plt:00000000000016C0 _strchr         proc near               ; CODE XREF: main+6E5↓p
.plt:00000000000016C0                                         ; main+B71↓p ...
.plt:00000000000016C0                 jmp     cs:strchr_ptr
.plt:00000000000016C0 _strchr         endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    11h
.plt:00000000000016CB                 jmp     sub_15A0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000016D0 ___overflow     proc near               ; CODE XREF: main+105A↓p
.plt:00000000000016D0                                         ; main+1069↓p ...
.plt:00000000000016D0                 jmp     cs:__overflow_ptr
.plt:00000000000016D0 ___overflow     endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    12h
.plt:00000000000016DB                 jmp     sub_15A0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; char *strrchr(const char *s, int c)
.plt:00000000000016E0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000016E0                 jmp     cs:strrchr_ptr
.plt:00000000000016E0 _strrchr        endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    13h
.plt:00000000000016EB                 jmp     sub_15A0
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000016F0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000016F0                                         ; rpl_fseeko+3B↓p
.plt:00000000000016F0                 jmp     cs:lseek_ptr
.plt:00000000000016F0 _lseek          endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    14h
.plt:00000000000016FB                 jmp     sub_15A0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001700 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001700                                         ; xzalloc+12↓j
.plt:0000000000001700                 jmp     cs:memset_ptr
.plt:0000000000001700 _memset         endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    15h
.plt:000000000000170B                 jmp     sub_15A0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int close(int fd)
.plt:0000000000001710 _close          proc near               ; CODE XREF: fopen_safer+6A↓p
.plt:0000000000001710                                         ; rpl_fcntl+1FE↓p
.plt:0000000000001710                 jmp     cs:close_ptr
.plt:0000000000001710 _close          endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    16h
.plt:000000000000171B                 jmp     sub_15A0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001720 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001720                                         ; fadvise+16↓j
.plt:0000000000001720                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001720 _posix_fadvise  endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    17h
.plt:000000000000172B                 jmp     sub_15A0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001730 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001730                 jmp     cs:memcmp_ptr
.plt:0000000000001730 _memcmp         endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    18h
.plt:000000000000173B                 jmp     sub_15A0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001740 _fputs_unlocked proc near               ; CODE XREF: print_filename+AD↓j
.plt:0000000000001740                                         ; usage+AA↓p ...
.plt:0000000000001740                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001740 _fputs_unlocked endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    19h
.plt:000000000000174B                 jmp     sub_15A0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001750 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001750                 jmp     cs:calloc_ptr
.plt:0000000000001750 _calloc         endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    1Ah
.plt:000000000000175B                 jmp     sub_15A0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000001760 ___getdelim     proc near               ; CODE XREF: main+492↓p
.plt:0000000000001760                 jmp     cs:__getdelim_ptr
.plt:0000000000001760 ___getdelim     endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    1Bh
.plt:000000000000176B                 jmp     sub_15A0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001770 _memcpy         proc near               ; CODE XREF: md5_process_bytes+F9↓p
.plt:0000000000001770                                         ; md5_process_bytes+16F↓p ...
.plt:0000000000001770                 jmp     cs:memcpy_ptr
.plt:0000000000001770 _memcpy         endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    1Ch
.plt:000000000000177B                 jmp     sub_15A0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; int fileno(FILE *stream)
.plt:0000000000001780 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001780                                         ; fopen_safer+17↓p ...
.plt:0000000000001780                 jmp     cs:fileno_ptr
.plt:0000000000001780 _fileno         endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    1Dh
.plt:000000000000178B                 jmp     sub_15A0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; void *malloc(size_t size)
.plt:0000000000001790 _malloc         proc near               ; CODE XREF: md5_stream+2F↓p
.plt:0000000000001790                                         ; xmalloc+4↓p
.plt:0000000000001790                 jmp     cs:malloc_ptr
.plt:0000000000001790 _malloc         endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    1Eh
.plt:000000000000179B                 jmp     sub_15A0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; int fflush(FILE *stream)
.plt:00000000000017A0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000017A0                                         ; rpl_fflush+3B↓j
.plt:00000000000017A0                 jmp     cs:fflush_ptr
.plt:00000000000017A0 _fflush         endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    1Fh
.plt:00000000000017AB                 jmp     sub_15A0
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; char *nl_langinfo(nl_item item)
.plt:00000000000017B0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000017B0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000017B0 _nl_langinfo    endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    20h ; ' '
.plt:00000000000017BB                 jmp     sub_15A0
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; int __freading(FILE *fp)
.plt:00000000000017C0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000017C0                                         ; rpl_fflush+9↓p
.plt:00000000000017C0                 jmp     cs:__freading_ptr
.plt:00000000000017C0 ___freading     endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    21h ; '!'
.plt:00000000000017CB                 jmp     sub_15A0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000017D0 _fwrite_unlocked proc near              ; CODE XREF: main+EAF↓p
.plt:00000000000017D0                                         ; main+ECC↓p ...
.plt:00000000000017D0                 jmp     cs:fwrite_unlocked_ptr
.plt:00000000000017D0 _fwrite_unlocked endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    22h ; '"'
.plt:00000000000017DB                 jmp     sub_15A0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000017E0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000017E0                 jmp     cs:realloc_ptr
.plt:00000000000017E0 _realloc        endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    23h ; '#'
.plt:00000000000017EB                 jmp     sub_15A0
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; FILE *fdopen(int fd, const char *modes)
.plt:00000000000017F0 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:00000000000017F0                 jmp     cs:fdopen_ptr
.plt:00000000000017F0 _fdopen         endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    24h ; '$'
.plt:00000000000017FB                 jmp     sub_15A0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; char *setlocale(int category, const char *locale)
.plt:0000000000001800 _setlocale      proc near               ; CODE XREF: main+43↓p
.plt:0000000000001800                                         ; usage+303↓p ...
.plt:0000000000001800                 jmp     cs:setlocale_ptr
.plt:0000000000001800 _setlocale      endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    25h ; '%'
.plt:000000000000180B                 jmp     sub_15A0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ___printf_chk   proc near               ; CODE XREF: main+783↓p
.plt:0000000000001810                                         ; main+BC7↓p ...
.plt:0000000000001810                 jmp     cs:__printf_chk_ptr
.plt:0000000000001810 ___printf_chk   endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    26h ; '&'
.plt:000000000000181B                 jmp     sub_15A0
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000001820 _setvbuf        proc near               ; CODE XREF: main+83↓p
.plt:0000000000001820                 jmp     cs:setvbuf_ptr
.plt:0000000000001820 _setvbuf        endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    27h ; '''
.plt:000000000000182B                 jmp     sub_15A0
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001830 _error          proc near               ; CODE XREF: main+2CB↓p
.plt:0000000000001830                                         ; main+5A0↓p ...
.plt:0000000000001830                 jmp     cs:error_ptr
.plt:0000000000001830 _error          endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    28h ; '('
.plt:000000000000183B                 jmp     sub_15A0
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001840 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_6B7A↓j
.plt:0000000000001840                 jmp     cs:fseeko_ptr
.plt:0000000000001840 _fseeko         endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    29h ; ')'
.plt:000000000000184B                 jmp     sub_15A0
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001850 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000001850                 jmp     cs:fopen_ptr
.plt:0000000000001850 _fopen          endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    2Ah ; '*'
.plt:000000000000185B                 jmp     sub_15A0
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
.plt:0000000000001860 _dcngettext     proc near               ; CODE XREF: main+7F7↓p
.plt:0000000000001860                                         ; main+833↓p ...
.plt:0000000000001860                 jmp     cs:dcngettext_ptr
.plt:0000000000001860 _dcngettext     endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    2Bh ; '+'
.plt:000000000000186B                 jmp     sub_15A0
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001870 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001870                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001870 ___cxa_atexit   endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    2Ch ; ','
.plt:000000000000187B                 jmp     sub_15A0
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: noreturn thunk
.plt:0000000000001880
.plt:0000000000001880 ; void __noreturn exit(int status)
.plt:0000000000001880 _exit           proc near               ; CODE XREF: main+198↓p
.plt:0000000000001880                                         ; usage+58↓p
.plt:0000000000001880                 jmp     cs:exit_ptr
.plt:0000000000001880 _exit           endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    2Dh ; '-'
.plt:000000000000188B                 jmp     sub_15A0
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001890 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001890                 jmp     cs:fwrite_ptr
.plt:0000000000001890 _fwrite         endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    2Eh ; '.'
.plt:000000000000189B                 jmp     sub_15A0
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000018A0                                         ; version_etc_arn+37↓p ...
.plt:00000000000018A0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000018A0 ___fprintf_chk  endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    2Fh ; '/'
.plt:00000000000018AB                 jmp     sub_15A0
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000018B0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000018B0                 jmp     cs:mbsinit_ptr
.plt:00000000000018B0 _mbsinit        endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    30h ; '0'
.plt:00000000000018BB                 jmp     sub_15A0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; int iswprint(wint_t wc)
.plt:00000000000018C0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000018C0                 jmp     cs:iswprint_ptr
.plt:00000000000018C0 _iswprint       endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    31h ; '1'
.plt:00000000000018CB                 jmp     sub_15A0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; const __int32_t **__ctype_tolower_loc(void)
.plt:00000000000018D0 ___ctype_tolower_loc proc near          ; CODE XREF: main+956↓p
.plt:00000000000018D0                 jmp     cs:__ctype_tolower_loc_ptr
.plt:00000000000018D0 ___ctype_tolower_loc endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    32h ; '2'
.plt:00000000000018DB                 jmp     sub_15A0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000018E0 ___ctype_b_loc  proc near               ; CODE XREF: hex_digits+15↓p
.plt:00000000000018E0                                         ; quotearg_buffer_restyled+513↓p
.plt:00000000000018E0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000018E0 ___ctype_b_loc  endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    33h ; '3'
.plt:00000000000018EB                 jmp     sub_15A0
.plt:00000000000018EB ; } // starts at 15A0
.plt:00000000000018EB _plt            ends
.plt:00000000000018EB
.plt.got:00000000000018F0 ; ===========================================================================
.plt.got:00000000000018F0
.plt.got:00000000000018F0 ; Segment type: Pure code
.plt.got:00000000000018F0 ; Segment permissions: Read/Execute
.plt.got:00000000000018F0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000018F0                 assume cs:_plt_got
.plt.got:00000000000018F0                 ;org 18F0h
.plt.got:00000000000018F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000018F0
.plt.got:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000018F0
.plt.got:00000000000018F0 ; Attributes: thunk
.plt.got:00000000000018F0
.plt.got:00000000000018F0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000018F0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000018F0 ; __unwind {
.plt.got:00000000000018F0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000018F0 __cxa_finalize  endp
.plt.got:00000000000018F0
.plt.got:00000000000018F0 ; ---------------------------------------------------------------------------
.plt.got:00000000000018F6                 align 8
.plt.got:00000000000018F6 ; } // starts at 18F0
.plt.got:00000000000018F6 _plt_got        ends
.plt.got:00000000000018F6
LOAD:00000000000018F8 ; ===========================================================================
LOAD:00000000000018F8
LOAD:00000000000018F8 ; Segment type: Pure code
LOAD:00000000000018F8 ; Segment permissions: Read/Execute
LOAD:00000000000018F8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000018F8                 assume cs:LOAD
LOAD:00000000000018F8                 ;org 18F8h
LOAD:00000000000018F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000018F8                 align 20h
LOAD:00000000000018F8 LOAD            ends
LOAD:00000000000018F8
.text:0000000000001900 ; ===========================================================================
.text:0000000000001900
.text:0000000000001900 ; Segment type: Pure code
.text:0000000000001900 ; Segment permissions: Read/Execute
.text:0000000000001900 _text           segment para public 'CODE' use64
.text:0000000000001900                 assume cs:_text
.text:0000000000001900                 ;org 1900h
.text:0000000000001900                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001900
.text:0000000000001900 ; =============== S U B R O U T I N E =======================================
.text:0000000000001900
.text:0000000000001900
.text:0000000000001900 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001900                 public main
.text:0000000000001900 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001900
.text:0000000000001900 lineptr         = qword ptr -110h
.text:0000000000001900 n               = qword ptr -108h
.text:0000000000001900 var_100         = qword ptr -100h
.text:0000000000001900 s               = qword ptr -0F8h
.text:0000000000001900 var_ED          = byte ptr -0EDh
.text:0000000000001900 var_EC          = dword ptr -0ECh
.text:0000000000001900 var_E8          = qword ptr -0E8h
.text:0000000000001900 var_E0          = qword ptr -0E0h
.text:0000000000001900 var_D8          = qword ptr -0D8h
.text:0000000000001900 var_D0          = qword ptr -0D0h
.text:0000000000001900 var_C8          = qword ptr -0C8h
.text:0000000000001900 var_C0          = qword ptr -0C0h
.text:0000000000001900 var_B8          = qword ptr -0B8h
.text:0000000000001900 var_B0          = qword ptr -0B0h
.text:0000000000001900 var_A8          = qword ptr -0A8h
.text:0000000000001900 var_A0          = byte ptr -0A0h
.text:0000000000001900 var_9F          = byte ptr -9Fh
.text:0000000000001900 var_9E          = byte ptr -9Eh
.text:0000000000001900 var_9D          = byte ptr -9Dh
.text:0000000000001900 var_9C          = dword ptr -9Ch
.text:0000000000001900 var_89          = byte ptr -89h
.text:0000000000001900 ptr             = qword ptr -88h
.text:0000000000001900 var_80          = qword ptr -80h
.text:0000000000001900 var_78          = byte ptr -78h
.text:0000000000001900 var_58          = byte ptr -58h
.text:0000000000001900 var_40          = qword ptr -40h
.text:0000000000001900
.text:0000000000001900 ; __unwind {
.text:0000000000001900                 push    r15
.text:0000000000001902                 push    r14
.text:0000000000001904                 push    r13
.text:0000000000001906                 push    r12
.text:0000000000001908                 mov     r12d, edi
.text:000000000000190B                 push    rbp
.text:000000000000190C                 push    rbx
.text:000000000000190D                 mov     rbx, rsi
.text:0000000000001910                 mov     ebp, 0FFFFFFFFh
.text:0000000000001915                 sub     rsp, 0E8h
.text:000000000000191C                 mov     rdi, [rsi]
.text:000000000000191F                 mov     rax, fs:28h
.text:0000000000001928                 mov     [rsp+118h+var_40], rax
.text:0000000000001930                 xor     eax, eax
.text:0000000000001932                 call    set_program_name
.text:0000000000001937                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000193E                 mov     edi, 6          ; category
.text:0000000000001943                 call    _setlocale
.text:0000000000001948                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000194F                 lea     rdi, domainname ; "coreutils"
.text:0000000000001956                 call    _bindtextdomain
.text:000000000000195B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001962                 call    _textdomain
.text:0000000000001967                 lea     rdi, close_stdout
.text:000000000000196E                 call    atexit
.text:0000000000001973                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000197A                 xor     ecx, ecx        ; n
.text:000000000000197C                 mov     edx, 1          ; modes
.text:0000000000001981                 xor     esi, esi        ; buf
.text:0000000000001983                 call    _setvbuf
.text:0000000000001988                 mov     [rsp+118h+var_A0], 0
.text:000000000000198D                 mov     [rsp+118h+var_ED], 0
.text:0000000000001992                 nop     word ptr [rax+rax+00h]
.text:0000000000001998
.text:0000000000001998 loc_1998:                               ; CODE XREF: main+FB↓j
.text:0000000000001998                                         ; main+11F↓j ...
.text:0000000000001998                 lea     rcx, long_options ; longopts
.text:000000000000199F                 lea     rdx, shortopts  ; "bctwz"
.text:00000000000019A6                 xor     r8d, r8d        ; longind
.text:00000000000019A9                 mov     rsi, rbx        ; argv
.text:00000000000019AC                 mov     edi, r12d       ; argc
.text:00000000000019AF                 call    _getopt_long
.text:00000000000019B4                 cmp     eax, 0FFFFFFFFh
.text:00000000000019B7                 jz      loc_1B3C
.text:00000000000019BD                 cmp     eax, 77h ; 'w'
.text:00000000000019C0                 jz      loc_1AA0
.text:00000000000019C6                 jle     short loc_1A00
.text:00000000000019C8                 cmp     eax, 81h
.text:00000000000019CD                 jz      loc_1AF0
.text:00000000000019D3                 jle     short loc_1A28
.text:00000000000019D5                 cmp     eax, 83h
.text:00000000000019DA                 jz      loc_1AE0
.text:00000000000019E0                 jl      loc_1AC0
.text:00000000000019E6                 cmp     eax, 84h
.text:00000000000019EB                 jnz     loc_1BD0
.text:00000000000019F1                 mov     [rsp+118h+var_A0], 1
.text:00000000000019F6                 mov     ebp, 1
.text:00000000000019FB                 jmp     short loc_1998
.text:00000000000019FB ; ---------------------------------------------------------------------------
.text:00000000000019FD                 align 20h
.text:0000000000001A00
.text:0000000000001A00 loc_1A00:                               ; CODE XREF: main+C6↑j
.text:0000000000001A00                 cmp     eax, 62h ; 'b'
.text:0000000000001A03                 jz      loc_1B20
.text:0000000000001A09                 jle     short loc_1A50
.text:0000000000001A0B                 cmp     eax, 63h ; 'c'
.text:0000000000001A0E                 jz      loc_1B10
.text:0000000000001A14                 cmp     eax, 74h ; 't'
.text:0000000000001A17                 jnz     loc_1BD0
.text:0000000000001A1D                 xor     ebp, ebp
.text:0000000000001A1F                 jmp     loc_1998
.text:0000000000001A1F ; ---------------------------------------------------------------------------
.text:0000000000001A24                 align 8
.text:0000000000001A28
.text:0000000000001A28 loc_1A28:                               ; CODE XREF: main+D3↑j
.text:0000000000001A28                 cmp     eax, 7Ah ; 'z'
.text:0000000000001A2B                 jz      loc_1B30
.text:0000000000001A31                 add     eax, 0FFFFFF80h
.text:0000000000001A34                 jnz     loc_1BD0
.text:0000000000001A3A                 mov     cs:ignore_missing, 1
.text:0000000000001A41                 jmp     loc_1998
.text:0000000000001A41 ; ---------------------------------------------------------------------------
.text:0000000000001A46                 align 10h
.text:0000000000001A50
.text:0000000000001A50 loc_1A50:                               ; CODE XREF: main+109↑j
.text:0000000000001A50                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001A55                 jnz     loc_29D1
.text:0000000000001A5B                 lea     rax, aDavidMadore ; "David Madore"
.text:0000000000001A62                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A69                 mov     rcx, cs:Version
.text:0000000000001A70                 push    0
.text:0000000000001A72                 lea     r9, aScottMiller ; "Scott Miller"
.text:0000000000001A79                 lea     r8, aUlrichDrepper ; "Ulrich Drepper"
.text:0000000000001A80                 push    rax
.text:0000000000001A81                 lea     rdx, unk_6EB4
.text:0000000000001A88                 lea     rsi, aMd5sum    ; "md5sum"
.text:0000000000001A8F                 xor     eax, eax
.text:0000000000001A91                 call    version_etc
.text:0000000000001A96                 xor     edi, edi        ; status
.text:0000000000001A98                 call    _exit
.text:0000000000001A98 ; ---------------------------------------------------------------------------
.text:0000000000001A9D                 align 20h
.text:0000000000001AA0
.text:0000000000001AA0 loc_1AA0:                               ; CODE XREF: main+C0↑j
.text:0000000000001AA0                 mov     cs:status_only, 0
.text:0000000000001AA7                 mov     cs:warn, 1
.text:0000000000001AAE                 mov     cs:quiet, 0
.text:0000000000001AB5                 jmp     loc_1998
.text:0000000000001AB5 ; ---------------------------------------------------------------------------
.text:0000000000001ABA                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 loc_1AC0:                               ; CODE XREF: main+E0↑j
.text:0000000000001AC0                 mov     cs:status_only, 0
.text:0000000000001AC7                 mov     cs:warn, 0
.text:0000000000001ACE                 mov     cs:quiet, 1
.text:0000000000001AD5                 jmp     loc_1998
.text:0000000000001AD5 ; ---------------------------------------------------------------------------
.text:0000000000001ADA                 align 20h
.text:0000000000001AE0
.text:0000000000001AE0 loc_1AE0:                               ; CODE XREF: main+DA↑j
.text:0000000000001AE0                 mov     cs:strict, 1
.text:0000000000001AE7                 jmp     loc_1998
.text:0000000000001AE7 ; ---------------------------------------------------------------------------
.text:0000000000001AEC                 align 10h
.text:0000000000001AF0
.text:0000000000001AF0 loc_1AF0:                               ; CODE XREF: main+CD↑j
.text:0000000000001AF0                 mov     cs:status_only, 1
.text:0000000000001AF7                 mov     cs:warn, 0
.text:0000000000001AFE                 mov     cs:quiet, 0
.text:0000000000001B05                 jmp     loc_1998
.text:0000000000001B05 ; ---------------------------------------------------------------------------
.text:0000000000001B0A                 align 10h
.text:0000000000001B10
.text:0000000000001B10 loc_1B10:                               ; CODE XREF: main+10E↑j
.text:0000000000001B10                 mov     [rsp+118h+var_ED], 1
.text:0000000000001B15                 jmp     loc_1998
.text:0000000000001B15 ; ---------------------------------------------------------------------------
.text:0000000000001B1A                 align 20h
.text:0000000000001B20
.text:0000000000001B20 loc_1B20:                               ; CODE XREF: main+103↑j
.text:0000000000001B20                 mov     ebp, 1
.text:0000000000001B25                 jmp     loc_1998
.text:0000000000001B25 ; ---------------------------------------------------------------------------
.text:0000000000001B2A                 align 10h
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: main+12B↑j
.text:0000000000001B30                 mov     cs:delim, 0
.text:0000000000001B37                 jmp     loc_1998
.text:0000000000001B3C ; ---------------------------------------------------------------------------
.text:0000000000001B3C
.text:0000000000001B3C loc_1B3C:                               ; CODE XREF: main+B7↑j
.text:0000000000001B3C                 test    ebp, ebp
.text:0000000000001B3E                 mov     cs:min_digest_line_length, 22h ; '"'
.text:0000000000001B49                 mov     cs:digest_hex_bytes, 20h ; ' '
.text:0000000000001B54                 setz    al
.text:0000000000001B57                 test    [rsp+118h+var_A0], al
.text:0000000000001B5B                 jnz     loc_2A1B
.text:0000000000001B61                 cmp     cs:delim, 0Ah
.text:0000000000001B68                 jz      short loc_1BDA
.text:0000000000001B6A                 cmp     [rsp+118h+var_ED], 0
.text:0000000000001B6F                 mov     edx, 5
.text:0000000000001B74                 lea     rsi, aTheZeroOptionI ; "the --zero option is not supported when"...
.text:0000000000001B7B                 jnz     short loc_1BBB
.text:0000000000001B7D                 cmp     cs:ignore_missing, 0
.text:0000000000001B84                 jnz     loc_2A2C
.text:0000000000001B8A                 cmp     cs:status_only, 0
.text:0000000000001B91                 jnz     loc_2A00
.text:0000000000001B97
.text:0000000000001B97 loc_1B97:                               ; CODE XREF: main+10EF↓j
.text:0000000000001B97                 cmp     cs:warn, 0
.text:0000000000001B9E                 jz      loc_1EA5
.text:0000000000001BA4                 cmp     [rsp+118h+var_ED], 0
.text:0000000000001BA9                 mov     edx, 5          ; category
.text:0000000000001BAE                 lea     rsi, msgid      ; "the --warn option is meaningful only wh"...
.text:0000000000001BB5                 jnz     loc_1C3D
.text:0000000000001BBB
.text:0000000000001BBB loc_1BBB:                               ; CODE XREF: main+27B↑j
.text:0000000000001BBB                                         ; main+2F2↓j ...
.text:0000000000001BBB                 xor     edi, edi        ; domainname
.text:0000000000001BBD                 call    _dcgettext
.text:0000000000001BC2                 xor     esi, esi        ; errnum
.text:0000000000001BC4                 mov     rdx, rax        ; format
.text:0000000000001BC7                 xor     edi, edi        ; status
.text:0000000000001BC9                 xor     eax, eax
.text:0000000000001BCB                 call    _error
.text:0000000000001BD0
.text:0000000000001BD0 loc_1BD0:                               ; CODE XREF: main+EB↑j
.text:0000000000001BD0                                         ; main+117↑j ...
.text:0000000000001BD0                 mov     edi, 1          ; status
.text:0000000000001BD5                 call    usage
.text:0000000000001BDA ; ---------------------------------------------------------------------------
.text:0000000000001BDA
.text:0000000000001BDA loc_1BDA:                               ; CODE XREF: main+268↑j
.text:0000000000001BDA                 cmp     [rsp+118h+var_ED], 0
.text:0000000000001BDF                 jz      short loc_1BF4
.text:0000000000001BE1                 cmp     [rsp+118h+var_A0], 0
.text:0000000000001BE6                 mov     edx, 5
.text:0000000000001BEB                 lea     rsi, aTheTagOptionIs ; "the --tag option is meaningless when ve"...
.text:0000000000001BF2                 jnz     short loc_1BBB
.text:0000000000001BF4
.text:0000000000001BF4 loc_1BF4:                               ; CODE XREF: main+2DF↑j
.text:0000000000001BF4                 test    ebp, ebp
.text:0000000000001BF6                 js      short loc_1C0B
.text:0000000000001BF8                 cmp     [rsp+118h+var_ED], 0
.text:0000000000001BFD                 mov     edx, 5
.text:0000000000001C02                 lea     rsi, aTheBinaryAndTe ; "the --binary and --text options are mea"...
.text:0000000000001C09                 jnz     short loc_1BBB
.text:0000000000001C0B
.text:0000000000001C0B loc_1C0B:                               ; CODE XREF: main+2F6↑j
.text:0000000000001C0B                 cmp     cs:ignore_missing, 0
.text:0000000000001C12                 jz      loc_29E8
.text:0000000000001C18                 cmp     [rsp+118h+var_ED], 0
.text:0000000000001C1D                 jz      loc_2A2C
.text:0000000000001C23                 cmp     cs:status_only, 0
.text:0000000000001C2A                 jz      loc_25AD
.text:0000000000001C30                 cmp     cs:warn, 0
.text:0000000000001C37                 jz      loc_1EA5
.text:0000000000001C3D
.text:0000000000001C3D loc_1C3D:                               ; CODE XREF: main+2B5↑j
.text:0000000000001C3D                                         ; main+5CC↓j ...
.text:0000000000001C3D                 cmp     ebp, 0FFFFFFFFh
.text:0000000000001C40                 jnz     short loc_1C44
.text:0000000000001C42                 xor     ebp, ebp
.text:0000000000001C44
.text:0000000000001C44 loc_1C44:                               ; CODE XREF: main+340↑j
.text:0000000000001C44                 movsxd  rax, r12d
.text:0000000000001C47                 lea     rax, [rbx+rax*8]
.text:0000000000001C4B                 mov     [rsp+118h+var_D0], rax
.text:0000000000001C50                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001C57                 cmp     eax, r12d
.text:0000000000001C5A                 jnz     short loc_1C75
.text:0000000000001C5C                 mov     rdi, [rsp+118h+var_D0]
.text:0000000000001C61                 lea     rsi, aLt+2      ; "-"
.text:0000000000001C68                 add     rdi, 8
.text:0000000000001C6C                 mov     [rdi-8], rsi
.text:0000000000001C70                 mov     [rsp+118h+var_D0], rdi
.text:0000000000001C75
.text:0000000000001C75 loc_1C75:                               ; CODE XREF: main+35A↑j
.text:0000000000001C75                 lea     rax, [rbx+rax*8]
.text:0000000000001C79                 cmp     [rsp+118h+var_D0], rax
.text:0000000000001C7E                 mov     [rsp+118h+var_100], rax
.text:0000000000001C83                 jbe     loc_2934
.text:0000000000001C89                 cmp     ebp, 1
.text:0000000000001C8C                 lea     r14, bin2hex_7139 ; "0123456789abcdef8.31"
.text:0000000000001C93                 mov     [rsp+118h+var_9F], 1
.text:0000000000001C98                 sbb     eax, eax
.text:0000000000001C9A                 and     eax, 0FFFFFFF6h
.text:0000000000001C9D                 add     eax, 2Ah ; '*'
.text:0000000000001CA0                 mov     [rsp+118h+var_9C], eax
.text:0000000000001CA4                 mov     [rsp+118h+var_9D], al
.text:0000000000001CA8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000001CB0
.text:0000000000001CB0 loc_1CB0:                               ; CODE XREF: main+A7D↓j
.text:0000000000001CB0                 mov     rax, [rsp+118h+var_100]
.text:0000000000001CB5                 cmp     [rsp+118h+var_ED], 0
.text:0000000000001CBA                 mov     rsi, [rax]
.text:0000000000001CBD                 mov     [rsp+118h+s], rsi
.text:0000000000001CC2                 jz      loc_2340
.text:0000000000001CC8                 lea     rdi, aLt+2      ; "-"
.text:0000000000001CCF                 mov     ecx, 2
.text:0000000000001CD4                 repe cmpsb
.text:0000000000001CD6                 setnbe  al
.text:0000000000001CD9                 sbb     al, 0
.text:0000000000001CDB                 movsx   eax, al
.text:0000000000001CDE                 test    eax, eax
.text:0000000000001CE0                 mov     [rsp+118h+var_EC], eax
.text:0000000000001CE4                 jnz     loc_2415
.text:0000000000001CEA                 lea     rsi, aStandardInput ; "standard input"
.text:0000000000001CF1                 mov     edx, 5          ; category
.text:0000000000001CF6                 xor     edi, edi        ; domainname
.text:0000000000001CF8                 mov     cs:have_read_stdin, 1
.text:0000000000001CFF                 call    _dcgettext
.text:0000000000001D04                 mov     r12, cs:stdin@@GLIBC_2_2_5
.text:0000000000001D0B                 mov     [rsp+118h+s], rax
.text:0000000000001D10
.text:0000000000001D10 loc_1D10:                               ; CODE XREF: main+B2C↓j
.text:0000000000001D10                 lea     rax, [rsp+118h+var_80]
.text:0000000000001D18                 mov     [rsp+118h+ptr], 0
.text:0000000000001D24                 mov     [rsp+118h+var_80], 0
.text:0000000000001D30                 mov     [rsp+118h+var_9E], 0
.text:0000000000001D35                 mov     byte ptr [rsp+118h+var_E8], 0
.text:0000000000001D3A                 xor     r13d, r13d
.text:0000000000001D3D                 mov     [rsp+118h+n], rax
.text:0000000000001D42                 lea     rax, [rsp+118h+ptr]
.text:0000000000001D4A                 mov     [rsp+118h+var_C0], 0
.text:0000000000001D53                 mov     [rsp+118h+var_C8], 0
.text:0000000000001D5C                 mov     ebp, 1
.text:0000000000001D61                 mov     [rsp+118h+lineptr], rax
.text:0000000000001D66                 lea     rax, [rsp+118h+var_89]
.text:0000000000001D6E                 mov     [rsp+118h+var_D8], rax
.text:0000000000001D73                 lea     rax, [rsp+118h+var_58]
.text:0000000000001D7B                 mov     [rsp+118h+var_E0], rax
.text:0000000000001D80
.text:0000000000001D80 loc_1D80:                               ; CODE XREF: main+564↓j
.text:0000000000001D80                 mov     rsi, [rsp+118h+n] ; n
.text:0000000000001D85                 mov     rdi, [rsp+118h+lineptr] ; lineptr
.text:0000000000001D8A                 mov     rcx, r12        ; stream
.text:0000000000001D8D                 mov     edx, 0Ah        ; delimiter
.text:0000000000001D92                 call    ___getdelim
.text:0000000000001D97                 test    rax, rax
.text:0000000000001D9A                 jle     loc_209C
.text:0000000000001DA0                 mov     rbx, [rsp+118h+ptr]
.text:0000000000001DA8                 movzx   ecx, byte ptr [rbx]
.text:0000000000001DAB                 cmp     cl, 23h ; '#'
.text:0000000000001DAE                 jz      loc_1E55
.text:0000000000001DB4                 cmp     byte ptr [rbx+rax-1], 0Ah
.text:0000000000001DB9                 mov     r15, rax
.text:0000000000001DBC                 jnz     short loc_1DD2
.text:0000000000001DBE                 sub     r15, 1
.text:0000000000001DC2                 mov     byte ptr [rbx+r15], 0
.text:0000000000001DC7                 mov     rbx, [rsp+118h+ptr]
.text:0000000000001DCF                 movzx   ecx, byte ptr [rbx]
.text:0000000000001DD2
.text:0000000000001DD2 loc_1DD2:                               ; CODE XREF: main+4BC↑j
.text:0000000000001DD2                 cmp     cl, 9
.text:0000000000001DD5                 jz      short loc_1DDE
.text:0000000000001DD7                 xor     edx, edx
.text:0000000000001DD9                 cmp     cl, 20h ; ' '
.text:0000000000001DDC                 jnz     short loc_1DF2
.text:0000000000001DDE
.text:0000000000001DDE loc_1DDE:                               ; CODE XREF: main+4D5↑j
.text:0000000000001DDE                 xor     edx, edx
.text:0000000000001DE0
.text:0000000000001DE0 loc_1DE0:                               ; CODE XREF: main+4EB↓j
.text:0000000000001DE0                                         ; main+4F0↓j
.text:0000000000001DE0                 add     rdx, 1
.text:0000000000001DE4                 movzx   ecx, byte ptr [rbx+rdx]
.text:0000000000001DE8                 cmp     cl, 20h ; ' '
.text:0000000000001DEB                 jz      short loc_1DE0
.text:0000000000001DED                 cmp     cl, 9
.text:0000000000001DF0                 jz      short loc_1DE0
.text:0000000000001DF2
.text:0000000000001DF2 loc_1DF2:                               ; CODE XREF: main+4DC↑j
.text:0000000000001DF2                 xor     r9d, r9d
.text:0000000000001DF5                 cmp     cl, 5Ch ; '\'
.text:0000000000001DF8                 jnz     short loc_1E04
.text:0000000000001DFA                 movzx   r9d, [rsp+118h+var_ED]
.text:0000000000001E00                 add     rdx, 1
.text:0000000000001E04
.text:0000000000001E04 loc_1E04:                               ; CODE XREF: main+4F8↑j
.text:0000000000001E04                 lea     r8, [rbx+rdx]
.text:0000000000001E08                 lea     rdi, aMd5       ; "MD5"
.text:0000000000001E0F                 mov     ecx, 3
.text:0000000000001E14                 mov     rsi, r8
.text:0000000000001E17                 repe cmpsb
.text:0000000000001E19                 setnbe  al
.text:0000000000001E1C                 sbb     al, 0
.text:0000000000001E1E                 test    al, al
.text:0000000000001E20                 jnz     loc_1EF0
.text:0000000000001E26                 movzx   eax, byte ptr [rbx+rdx+3]
.text:0000000000001E2B                 lea     rcx, [rdx+3]
.text:0000000000001E2F                 cmp     al, 20h ; ' '
.text:0000000000001E31                 jnz     short loc_1E3C
.text:0000000000001E33                 movzx   eax, byte ptr [rbx+rdx+4]
.text:0000000000001E38                 lea     rcx, [rdx+4]
.text:0000000000001E3C
.text:0000000000001E3C loc_1E3C:                               ; CODE XREF: main+531↑j
.text:0000000000001E3C                 cmp     al, 28h ; '('
.text:0000000000001E3E                 jz      loc_23C4
.text:0000000000001E44
.text:0000000000001E44 loc_1E44:                               ; CODE XREF: main+609↓j
.text:0000000000001E44                                         ; main+623↓j ...
.text:0000000000001E44                 add     r13, 1
.text:0000000000001E48                 cmp     cs:warn, 0
.text:0000000000001E4F                 jnz     loc_21D0
.text:0000000000001E55
.text:0000000000001E55 loc_1E55:                               ; CODE XREF: main+4AE↑j
.text:0000000000001E55                                         ; main+912↓j
.text:0000000000001E55                 test    byte ptr [r12], 30h
.text:0000000000001E5A                 jnz     loc_209C
.text:0000000000001E60
.text:0000000000001E60 loc_1E60:                               ; CODE XREF: main+796↓j
.text:0000000000001E60                 add     rbp, 1
.text:0000000000001E64                 jnz     loc_1D80
.text:0000000000001E6A                 mov     rdx, [rsp+118h+s]
.text:0000000000001E6F                 mov     esi, 3
.text:0000000000001E74                 xor     edi, edi
.text:0000000000001E76                 call    quotearg_n_style_colon
.text:0000000000001E7B                 lea     rsi, aSTooManyChecks ; "%s: too many checksum lines"
.text:0000000000001E82                 mov     rbx, rax
.text:0000000000001E85                 mov     edx, 5          ; category
.text:0000000000001E8A                 xor     edi, edi        ; domainname
.text:0000000000001E8C                 call    _dcgettext
.text:0000000000001E91                 mov     rcx, rbx
.text:0000000000001E94                 mov     rdx, rax        ; format
.text:0000000000001E97                 xor     esi, esi        ; errnum
.text:0000000000001E99                 mov     edi, 1          ; status
.text:0000000000001E9E                 xor     eax, eax
.text:0000000000001EA0                 call    _error
.text:0000000000001EA5
.text:0000000000001EA5 loc_1EA5:                               ; CODE XREF: main+29E↑j
.text:0000000000001EA5                                         ; main+337↑j
.text:0000000000001EA5                 cmp     cs:quiet, 1
.text:0000000000001EAC                 jnz     short loc_1EC5
.text:0000000000001EAE                 cmp     [rsp+118h+var_ED], 0
.text:0000000000001EB3                 mov     edx, 5
.text:0000000000001EB8                 lea     rsi, aTheQuietOption ; "the --quiet option is meaningful only w"...
.text:0000000000001EBF                 jz      loc_1BBB
.text:0000000000001EC5
.text:0000000000001EC5 loc_1EC5:                               ; CODE XREF: main+5AC↑j
.text:0000000000001EC5                                         ; main+CBA↓j
.text:0000000000001EC5                 cmp     cs:strict, 0
.text:0000000000001ECC                 jz      loc_1C3D
.text:0000000000001ED2                 cmp     [rsp+118h+var_ED], 0
.text:0000000000001ED7                 mov     edx, 5
.text:0000000000001EDC                 lea     rsi, aTheStrictOptio ; "the --strict option is meaningful only "...
.text:0000000000001EE3                 jnz     loc_1C3D
.text:0000000000001EE9                 jmp     loc_1BBB
.text:0000000000001EE9 ; ---------------------------------------------------------------------------
.text:0000000000001EEE                 align 10h
.text:0000000000001EF0
.text:0000000000001EF0 loc_1EF0:                               ; CODE XREF: main+520↑j
.text:0000000000001EF0                 mov     rcx, r15
.text:0000000000001EF3                 xor     eax, eax
.text:0000000000001EF5                 sub     rcx, rdx
.text:0000000000001EF8                 cmp     byte ptr [r8], 5Ch ; '\'
.text:0000000000001EFC                 setz    al
.text:0000000000001EFF                 add     rax, cs:min_digest_line_length
.text:0000000000001F06                 cmp     rcx, rax
.text:0000000000001F09                 jb      loc_1E44
.text:0000000000001F0F                 add     rdx, cs:digest_hex_bytes
.text:0000000000001F16                 lea     rcx, [rbx+rdx]
.text:0000000000001F1A                 movzx   eax, byte ptr [rcx]
.text:0000000000001F1D                 cmp     al, 20h ; ' '
.text:0000000000001F1F                 jz      short loc_1F29
.text:0000000000001F21                 cmp     al, 9
.text:0000000000001F23                 jnz     loc_1E44
.text:0000000000001F29
.text:0000000000001F29 loc_1F29:                               ; CODE XREF: main+61F↑j
.text:0000000000001F29                 mov     byte ptr [rcx], 0
.text:0000000000001F2C                 mov     rdi, r8
.text:0000000000001F2F                 mov     [rsp+118h+var_A8], rdx
.text:0000000000001F34                 mov     byte ptr [rsp+118h+var_B0], r9b
.text:0000000000001F39                 mov     [rsp+118h+var_B8], r8
.text:0000000000001F3E                 call    hex_digits
.text:0000000000001F43                 test    al, al
.text:0000000000001F45                 jz      loc_1E44
.text:0000000000001F4B                 mov     rdx, [rsp+118h+var_A8]
.text:0000000000001F50                 mov     rcx, r15
.text:0000000000001F53                 mov     esi, cs:bsd_reversed
.text:0000000000001F59                 mov     r8, [rsp+118h+var_B8]
.text:0000000000001F5E                 movzx   r9d, byte ptr [rsp+118h+var_B0]
.text:0000000000001F64                 lea     rax, [rdx+1]
.text:0000000000001F68                 sub     rcx, rax
.text:0000000000001F6B                 sub     rcx, 1
.text:0000000000001F6F                 jz      short loc_1F88
.text:0000000000001F71                 movzx   ecx, byte ptr [rbx+rdx+1]
.text:0000000000001F76                 cmp     cl, 20h ; ' '
.text:0000000000001F79                 jz      loc_26E4
.text:0000000000001F7F                 cmp     cl, 2Ah ; '*'
.text:0000000000001F82                 jz      loc_26E4
.text:0000000000001F88
.text:0000000000001F88 loc_1F88:                               ; CODE XREF: main+66F↑j
.text:0000000000001F88                 test    esi, esi
.text:0000000000001F8A                 jz      loc_1E44
.text:0000000000001F90                 mov     cs:bsd_reversed, 1
.text:0000000000001F9A
.text:0000000000001F9A loc_1F9A:                               ; CODE XREF: main+DE7↓j
.text:0000000000001F9A                                         ; main+DFB↓j
.text:0000000000001F9A                 add     rbx, rax
.text:0000000000001F9D                 test    r9b, r9b
.text:0000000000001FA0                 jnz     loc_2741
.text:0000000000001FA6
.text:0000000000001FA6 loc_1FA6:                               ; CODE XREF: main+E61↓j
.text:0000000000001FA6                 mov     eax, [rsp+118h+var_EC]
.text:0000000000001FAA                 test    eax, eax
.text:0000000000001FAC                 jnz     short loc_1FCC
.text:0000000000001FAE                 lea     rdi, aLt+2      ; "-"
.text:0000000000001FB5                 mov     ecx, 2
.text:0000000000001FBA                 mov     rsi, rbx
.text:0000000000001FBD                 repe cmpsb
.text:0000000000001FBF                 setnbe  al
.text:0000000000001FC2                 sbb     al, 0
.text:0000000000001FC4                 test    al, al
.text:0000000000001FC6                 jz      loc_1E44
.text:0000000000001FCC
.text:0000000000001FCC loc_1FCC:                               ; CODE XREF: main+6AC↑j
.text:0000000000001FCC                 xor     r15d, r15d
.text:0000000000001FCF                 cmp     cs:status_only, 0
.text:0000000000001FD6                 jnz     short loc_1FF9
.text:0000000000001FD8                 mov     esi, 0Ah        ; c
.text:0000000000001FDD                 mov     rdi, rbx        ; s
.text:0000000000001FE0                 mov     [rsp+118h+var_E8], r8
.text:0000000000001FE5                 call    _strchr
.text:0000000000001FEA                 mov     r8, [rsp+118h+var_E8]
.text:0000000000001FEF                 xor     r15d, r15d
.text:0000000000001FF2                 test    rax, rax
.text:0000000000001FF5                 setnz   r15b
.text:0000000000001FF9
.text:0000000000001FF9 loc_1FF9:                               ; CODE XREF: main+6D6↑j
.text:0000000000001FF9                 mov     rdx, [rsp+118h+var_D8]
.text:0000000000001FFE                 mov     rsi, [rsp+118h+var_E0]
.text:0000000000002003                 mov     rdi, rbx
.text:0000000000002006                 mov     [rsp+118h+var_E8], r8
.text:000000000000200B                 call    digest_file_isra_1
.text:0000000000002010                 test    al, al
.text:0000000000002012                 mov     r9d, eax
.text:0000000000002015                 mov     r8, [rsp+118h+var_E8]
.text:000000000000201A                 jnz     loc_2220
.text:0000000000002020                 add     [rsp+118h+var_C8], 1
.text:0000000000002026                 cmp     cs:status_only, 0
.text:000000000000202D                 jnz     short loc_2088
.text:000000000000202F                 test    r15d, r15d
.text:0000000000002032                 jz      short loc_2054
.text:0000000000002034                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000203B                 mov     rax, [rdi+28h]
.text:000000000000203F                 cmp     rax, [rdi+30h]
.text:0000000000002043                 jnb     loc_2964
.text:0000000000002049                 lea     rdx, [rax+1]
.text:000000000000204D                 mov     [rdi+28h], rdx
.text:0000000000002051                 mov     byte ptr [rax], 5Ch ; '\'
.text:0000000000002054
.text:0000000000002054 loc_2054:                               ; CODE XREF: main+732↑j
.text:0000000000002054                                         ; main+106E↓j
.text:0000000000002054                 mov     esi, r15d
.text:0000000000002057                 mov     rdi, rbx
.text:000000000000205A                 call    print_filename
.text:000000000000205F                 lea     rsi, aFailedOpenOrRe ; "FAILED open or read"
.text:0000000000002066                 mov     edx, 5          ; category
.text:000000000000206B
.text:000000000000206B loc_206B:                               ; CODE XREF: main+A39↓j
.text:000000000000206B                                         ; main+D23↓j
.text:000000000000206B                 xor     edi, edi        ; domainname
.text:000000000000206D                 call    _dcgettext
.text:0000000000002072                 lea     rsi, aS         ; ": %s\n"
.text:0000000000002079                 mov     rdx, rax
.text:000000000000207C                 mov     edi, 1
.text:0000000000002081                 xor     eax, eax
.text:0000000000002083                 call    ___printf_chk
.text:0000000000002088
.text:0000000000002088 loc_2088:                               ; CODE XREF: main+72D↑j
.text:0000000000002088                                         ; main+931↓j ...
.text:0000000000002088                 movzx   eax, [rsp+118h+var_ED]
.text:000000000000208D                 test    byte ptr [r12], 30h
.text:0000000000002092                 mov     byte ptr [rsp+118h+var_E8], al
.text:0000000000002096                 jz      loc_1E60
.text:000000000000209C
.text:000000000000209C loc_209C:                               ; CODE XREF: main+49A↑j
.text:000000000000209C                                         ; main+55A↑j
.text:000000000000209C                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:00000000000020A4                 call    _free
.text:00000000000020A9                 mov     ebx, [r12]
.text:00000000000020AD                 and     ebx, 20h
.text:00000000000020B0                 jnz     loc_256E
.text:00000000000020B6                 cmp     [rsp+118h+var_EC], 0
.text:00000000000020BB                 jnz     loc_2628
.text:00000000000020C1
.text:00000000000020C1 loc_20C1:                               ; CODE XREF: main+D32↓j
.text:00000000000020C1                 cmp     byte ptr [rsp+118h+var_E8], 0
.text:00000000000020C6                 jz      loc_2645
.text:00000000000020CC                 cmp     cs:status_only, 0
.text:00000000000020D3                 jnz     loc_255E
.text:00000000000020D9                 test    r13, r13
.text:00000000000020DC                 jz      short loc_210D
.text:00000000000020DE                 lea     rdx, msgid2     ; "WARNING: %lu lines are improperly forma"...
.text:00000000000020E5                 lea     rsi, msgid1     ; "WARNING: %lu line is improperly formatt"...
.text:00000000000020EC                 mov     rcx, r13        ; n
.text:00000000000020EF                 xor     edi, edi        ; domainname
.text:00000000000020F1                 mov     r8d, 5          ; category
.text:00000000000020F7                 call    _dcngettext
.text:00000000000020FC                 mov     rcx, r13
.text:00000000000020FF                 mov     rdx, rax        ; format
.text:0000000000002102                 xor     esi, esi        ; errnum
.text:0000000000002104                 xor     edi, edi        ; status
.text:0000000000002106                 xor     eax, eax
.text:0000000000002108                 call    _error
.text:000000000000210D
.text:000000000000210D loc_210D:                               ; CODE XREF: main+7DC↑j
.text:000000000000210D                 cmp     [rsp+118h+var_C8], 0
.text:0000000000002113                 jz      short loc_2149
.text:0000000000002115                 mov     r15, [rsp+118h+var_C8]
.text:000000000000211A                 lea     rdx, aWarningLuListe ; "WARNING: %lu listed files could not be "...
.text:0000000000002121                 lea     rsi, aWarningLuListe_0 ; "WARNING: %lu listed file could not be r"...
.text:0000000000002128                 xor     edi, edi        ; domainname
.text:000000000000212A                 mov     r8d, 5          ; category
.text:0000000000002130                 mov     rcx, r15        ; n
.text:0000000000002133                 call    _dcngettext
.text:0000000000002138                 mov     rcx, r15
.text:000000000000213B                 mov     rdx, rax        ; format
.text:000000000000213E                 xor     esi, esi        ; errnum
.text:0000000000002140                 xor     edi, edi        ; status
.text:0000000000002142                 xor     eax, eax
.text:0000000000002144                 call    _error
.text:0000000000002149
.text:0000000000002149 loc_2149:                               ; CODE XREF: main+813↑j
.text:0000000000002149                 cmp     [rsp+118h+var_C0], 0
.text:000000000000214F                 jz      short loc_2185
.text:0000000000002151                 mov     r15, [rsp+118h+var_C0]
.text:0000000000002156                 lea     rdx, aWarningLuCompu ; "WARNING: %lu computed checksums did NOT"...
.text:000000000000215D                 lea     rsi, aWarningLuCompu_0 ; "WARNING: %lu computed checksum did NOT "...
.text:0000000000002164                 xor     edi, edi        ; domainname
.text:0000000000002166                 mov     r8d, 5          ; category
.text:000000000000216C                 mov     rcx, r15        ; n
.text:000000000000216F                 call    _dcngettext
.text:0000000000002174                 mov     rcx, r15
.text:0000000000002177                 mov     rdx, rax        ; format
.text:000000000000217A                 xor     esi, esi        ; errnum
.text:000000000000217C                 xor     edi, edi        ; status
.text:000000000000217E                 xor     eax, eax
.text:0000000000002180                 call    _error
.text:0000000000002185
.text:0000000000002185 loc_2185:                               ; CODE XREF: main+84F↑j
.text:0000000000002185                 cmp     cs:ignore_missing, 0
.text:000000000000218C                 jz      loc_255E
.text:0000000000002192                 cmp     [rsp+118h+var_9E], 0
.text:0000000000002197                 jz      loc_28F7
.text:000000000000219D
.text:000000000000219D loc_219D:                               ; CODE XREF: main+C63↓j
.text:000000000000219D                 mov     rax, [rsp+118h+var_C8]
.text:00000000000021A2                 or      rax, [rsp+118h+var_C0]
.text:00000000000021A7                 jnz     short loc_21BE
.text:00000000000021A9                 movzx   eax, cs:strict
.text:00000000000021B0                 xor     eax, 1
.text:00000000000021B3                 test    r13, r13
.text:00000000000021B6                 setz    bl
.text:00000000000021B9                 or      eax, ebx
.text:00000000000021BB                 movzx   ebx, al
.text:00000000000021BE
.text:00000000000021BE loc_21BE:                               ; CODE XREF: main+8A7↑j
.text:00000000000021BE                                         ; main+C69↓j ...
.text:00000000000021BE                 mov     eax, ebx
.text:00000000000021C0                 and     eax, 1
.text:00000000000021C3
.text:00000000000021C3 loc_21C3:                               ; CODE XREF: main+B62↓j
.text:00000000000021C3                                         ; main+CA8↓j
.text:00000000000021C3                 and     [rsp+118h+var_9F], al
.text:00000000000021C7                 jmp     loc_236D
.text:00000000000021C7 ; ---------------------------------------------------------------------------
.text:00000000000021CC                 align 10h
.text:00000000000021D0
.text:00000000000021D0 loc_21D0:                               ; CODE XREF: main+54F↑j
.text:00000000000021D0                 mov     rdx, [rsp+118h+s]
.text:00000000000021D5                 xor     edi, edi
.text:00000000000021D7                 mov     esi, 3
.text:00000000000021DC                 call    quotearg_n_style_colon
.text:00000000000021E1                 lea     rsi, aSLuImproperlyF ; "%s: %lu: improperly formatted %s checks"...
.text:00000000000021E8                 xor     edi, edi        ; domainname
.text:00000000000021EA                 mov     edx, 5          ; category
.text:00000000000021EF                 mov     rbx, rax
.text:00000000000021F2                 call    _dcgettext
.text:00000000000021F7                 lea     r9, aMd5        ; "MD5"
.text:00000000000021FE                 mov     rdx, rax        ; format
.text:0000000000002201                 mov     r8, rbp
.text:0000000000002204                 mov     rcx, rbx
.text:0000000000002207                 xor     esi, esi        ; errnum
.text:0000000000002209                 xor     edi, edi        ; status
.text:000000000000220B                 xor     eax, eax
.text:000000000000220D                 call    _error
.text:0000000000002212                 jmp     loc_1E55
.text:0000000000002212 ; ---------------------------------------------------------------------------
.text:0000000000002217                 align 20h
.text:0000000000002220
.text:0000000000002220 loc_2220:                               ; CODE XREF: main+71A↑j
.text:0000000000002220                 cmp     cs:ignore_missing, 0
.text:0000000000002227                 jz      short loc_2237
.text:0000000000002229                 cmp     [rsp+118h+var_89], 0
.text:0000000000002231                 jnz     loc_2088
.text:0000000000002237
.text:0000000000002237 loc_2237:                               ; CODE XREF: main+927↑j
.text:0000000000002237                 mov     rcx, cs:digest_hex_bytes
.text:000000000000223E                 mov     [rsp+118h+var_B0], r8
.text:0000000000002243                 shr     rcx, 1
.text:0000000000002246                 jz      loc_25BF
.text:000000000000224C                 mov     [rsp+118h+var_B8], rcx
.text:0000000000002251                 mov     byte ptr [rsp+118h+var_E8], r9b
.text:0000000000002256                 call    ___ctype_tolower_loc
.text:000000000000225B                 xor     edx, edx
.text:000000000000225D                 mov     rdi, [rax]
.text:0000000000002260                 movzx   r9d, byte ptr [rsp+118h+var_E8]
.text:0000000000002266                 mov     rcx, [rsp+118h+var_B8]
.text:000000000000226B                 mov     r8, [rsp+118h+var_B0]
.text:0000000000002270                 mov     r10, [rsp+118h+var_E0]
.text:0000000000002275                 jmp     short loc_22A0
.text:0000000000002275 ; ---------------------------------------------------------------------------
.text:0000000000002277                 align 20h
.text:0000000000002280
.text:0000000000002280 loc_2280:                               ; CODE XREF: main+9BC↓j
.text:0000000000002280                 movzx   esi, byte ptr [r8+rdx*2+1]
.text:0000000000002286                 and     eax, 0Fh
.text:0000000000002289                 movsx   eax, byte ptr [r14+rax]
.text:000000000000228E                 cmp     [rdi+rsi*4], eax
.text:0000000000002291                 jnz     short loc_22BE
.text:0000000000002293                 add     rdx, 1
.text:0000000000002297                 cmp     rcx, rdx
.text:000000000000229A                 jz      loc_263D
.text:00000000000022A0
.text:00000000000022A0 loc_22A0:                               ; CODE XREF: main+975↑j
.text:00000000000022A0                 movzx   eax, byte ptr [r10+rdx]
.text:00000000000022A5                 movzx   r11d, byte ptr [r8+rdx*2]
.text:00000000000022AA                 mov     esi, eax
.text:00000000000022AC                 shr     sil, 4
.text:00000000000022B0                 and     esi, 0Fh
.text:00000000000022B3                 movsx   esi, byte ptr [r14+rsi]
.text:00000000000022B8                 cmp     [rdi+r11*4], esi
.text:00000000000022BC                 jz      short loc_2280
.text:00000000000022BE
.text:00000000000022BE loc_22BE:                               ; CODE XREF: main+991↑j
.text:00000000000022BE                 cmp     rcx, rdx
.text:00000000000022C1                 jz      loc_25C1
.text:00000000000022C7                 add     [rsp+118h+var_C0], 1
.text:00000000000022CD                 cmp     cs:status_only, 0
.text:00000000000022D4                 jnz     loc_2088
.text:00000000000022DA                 test    r15d, r15d
.text:00000000000022DD                 jz      loc_28E8
.text:00000000000022E3
.text:00000000000022E3 loc_22E3:                               ; CODE XREF: main+1116↓j
.text:00000000000022E3                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000022EA                 mov     rax, [rdi+28h]
.text:00000000000022EE                 cmp     rax, [rdi+30h]
.text:00000000000022F2                 jnb     loc_299F
.text:00000000000022F8                 lea     rsi, [rax+1]
.text:00000000000022FC                 mov     [rdi+28h], rsi
.text:0000000000002300                 mov     byte ptr [rax], 5Ch ; '\'
.text:0000000000002303
.text:0000000000002303 loc_2303:                               ; CODE XREF: main+10BD↓j
.text:0000000000002303                 mov     esi, 1
.text:0000000000002308                 mov     rdi, rbx
.text:000000000000230B                 mov     [rsp+118h+var_B8], rcx
.text:0000000000002310                 mov     [rsp+118h+var_E8], rdx
.text:0000000000002315                 call    print_filename
.text:000000000000231A                 mov     rdx, [rsp+118h+var_E8]
.text:000000000000231F                 mov     rcx, [rsp+118h+var_B8]
.text:0000000000002324                 cmp     rdx, rcx
.text:0000000000002327                 jz      loc_260A
.text:000000000000232D
.text:000000000000232D loc_232D:                               ; CODE XREF: main+FF2↓j
.text:000000000000232D                 mov     edx, 5
.text:0000000000002332                 lea     rsi, aFailed    ; "FAILED"
.text:0000000000002339                 jmp     loc_206B
.text:0000000000002339 ; ---------------------------------------------------------------------------
.text:000000000000233E                 align 20h
.text:0000000000002340
.text:0000000000002340 loc_2340:                               ; CODE XREF: main+3C2↑j
.text:0000000000002340                 lea     rax, [rsp+118h+var_80]
.text:0000000000002348                 lea     rbx, [rsp+118h+var_78]
.text:0000000000002350                 mov     rdi, [rsp+118h+s]
.text:0000000000002355                 mov     rdx, rax
.text:0000000000002358                 mov     rsi, rbx
.text:000000000000235B                 call    digest_file_isra_1
.text:0000000000002360                 test    al, al
.text:0000000000002362                 jnz     loc_2467
.text:0000000000002368                 mov     [rsp+118h+var_9F], 0
.text:000000000000236D
.text:000000000000236D loc_236D:                               ; CODE XREF: main+8C7↑j
.text:000000000000236D                                         ; main+C59↓j ...
.text:000000000000236D                 add     [rsp+118h+var_100], 8
.text:0000000000002373                 mov     rax, [rsp+118h+var_100]
.text:0000000000002378                 cmp     [rsp+118h+var_D0], rax
.text:000000000000237D                 ja      loc_1CB0
.text:0000000000002383
.text:0000000000002383 loc_2383:                               ; CODE XREF: main+1039↓j
.text:0000000000002383                 cmp     cs:have_read_stdin, 0
.text:000000000000238A                 jnz     loc_2700
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: main+E0F↓j
.text:0000000000002390                 movzx   eax, [rsp+118h+var_9F]
.text:0000000000002395                 xor     eax, 1
.text:0000000000002398                 mov     rdi, [rsp+118h+var_40]
.text:00000000000023A0                 xor     rdi, fs:28h
.text:00000000000023A9                 movzx   eax, al
.text:00000000000023AC                 jnz     loc_29E3
.text:00000000000023B2                 add     rsp, 0E8h
.text:00000000000023B9                 pop     rbx
.text:00000000000023BA                 pop     rbp
.text:00000000000023BB                 pop     r12
.text:00000000000023BD                 pop     r13
.text:00000000000023BF                 pop     r14
.text:00000000000023C1                 pop     r15
.text:00000000000023C3                 retn
.text:00000000000023C4 ; ---------------------------------------------------------------------------
.text:00000000000023C4
.text:00000000000023C4 loc_23C4:                               ; CODE XREF: main+53E↑j
.text:00000000000023C4                 add     rcx, 1
.text:00000000000023C8                 sub     r15, rcx
.text:00000000000023CB                 jz      loc_1E44
.text:00000000000023D1                 mov     r10, r15
.text:00000000000023D4                 add     rbx, rcx
.text:00000000000023D7                 sub     r10, 1
.text:00000000000023DB                 jz      short loc_2401
.text:00000000000023DD                 cmp     byte ptr [rbx+r15-1], 29h ; ')'
.text:00000000000023E3                 jnz     short loc_23FB
.text:00000000000023E5                 jmp     loc_2689
.text:00000000000023E5 ; ---------------------------------------------------------------------------
.text:00000000000023EA                 align 10h
.text:00000000000023F0
.text:00000000000023F0 loc_23F0:                               ; CODE XREF: main+AFF↓j
.text:00000000000023F0                 cmp     byte ptr [rbx+r10], 29h ; ')'
.text:00000000000023F5                 jz      loc_2689
.text:00000000000023FB
.text:00000000000023FB loc_23FB:                               ; CODE XREF: main+AE3↑j
.text:00000000000023FB                 sub     r10, 1
.text:00000000000023FF                 jnz     short loc_23F0
.text:0000000000002401
.text:0000000000002401 loc_2401:                               ; CODE XREF: main+ADB↑j
.text:0000000000002401                 cmp     byte ptr [rbx], 29h ; ')'
.text:0000000000002404                 jnz     loc_1E44
.text:000000000000240A                 mov     r11, rbx
.text:000000000000240D                 xor     r10d, r10d
.text:0000000000002410                 jmp     loc_268D
.text:0000000000002415 ; ---------------------------------------------------------------------------
.text:0000000000002415
.text:0000000000002415 loc_2415:                               ; CODE XREF: main+3E4↑j
.text:0000000000002415                 mov     rdi, [rsp+118h+s]
.text:000000000000241A                 lea     rsi, aScottMiller+0Bh ; "r"
.text:0000000000002421                 call    fopen_safer
.text:0000000000002426                 test    rax, rax
.text:0000000000002429                 mov     r12, rax
.text:000000000000242C                 jnz     loc_1D10
.text:0000000000002432
.text:0000000000002432 loc_2432:                               ; CODE XREF: main+D38↓j
.text:0000000000002432                 mov     rdx, [rsp+118h+s]
.text:0000000000002437                 mov     esi, 3
.text:000000000000243C                 xor     edi, edi
.text:000000000000243E                 call    quotearg_n_style_colon
.text:0000000000002443                 mov     rbx, rax
.text:0000000000002446                 call    ___errno_location
.text:000000000000244B                 mov     esi, [rax]      ; errnum
.text:000000000000244D                 lea     rdx, format     ; format
.text:0000000000002454                 xor     eax, eax
.text:0000000000002456                 mov     rcx, rbx
.text:0000000000002459                 xor     edi, edi        ; status
.text:000000000000245B                 call    _error
.text:0000000000002460                 xor     eax, eax
.text:0000000000002462                 jmp     loc_21C3
.text:0000000000002467 ; ---------------------------------------------------------------------------
.text:0000000000002467
.text:0000000000002467 loc_2467:                               ; CODE XREF: main+A62↑j
.text:0000000000002467                 mov     rdi, [rsp+118h+s] ; s
.text:000000000000246C                 mov     esi, 5Ch ; '\'  ; c
.text:0000000000002471                 call    _strchr
.text:0000000000002476                 test    rax, rax
.text:0000000000002479                 jz      loc_2851
.text:000000000000247F
.text:000000000000247F loc_247F:                               ; CODE XREF: main+F63↓j
.text:000000000000247F                 cmp     cs:delim, 0Ah
.text:0000000000002486                 jz      loc_276C
.text:000000000000248C
.text:000000000000248C loc_248C:                               ; CODE XREF: main+F69↓j
.text:000000000000248C                 cmp     [rsp+118h+var_A0], 0
.text:0000000000002491                 jnz     loc_286E
.text:0000000000002497                 mov     rax, cs:digest_hex_bytes
.text:000000000000249E                 xor     ebp, ebp
.text:00000000000024A0                 shr     rax, 1
.text:00000000000024A3                 jz      short loc_24E2
.text:00000000000024A5
.text:00000000000024A5 loc_24A5:                               ; CODE XREF: main+F0C↓j
.text:00000000000024A5                                         ; main+F46↓j ...
.text:00000000000024A5                 xor     r12d, r12d
.text:00000000000024A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: main+BD9↓j
.text:00000000000024B0                 movzx   edx, byte ptr [rbx+r12]
.text:00000000000024B5                 lea     rsi, a02x       ; "%02x"
.text:00000000000024BC                 xor     eax, eax
.text:00000000000024BE                 mov     edi, 1
.text:00000000000024C3                 add     r12, 1
.text:00000000000024C7                 call    ___printf_chk
.text:00000000000024CC                 mov     rax, cs:digest_hex_bytes
.text:00000000000024D3                 shr     rax, 1
.text:00000000000024D6                 cmp     rax, r12
.text:00000000000024D9                 ja      short loc_24B0
.text:00000000000024DB
.text:00000000000024DB loc_24DB:                               ; CODE XREF: main+F12↓j
.text:00000000000024DB                 cmp     [rsp+118h+var_A0], 0
.text:00000000000024E0                 jnz     short loc_2533
.text:00000000000024E2
.text:00000000000024E2 loc_24E2:                               ; CODE XREF: main+BA3↑j
.text:00000000000024E2                                         ; main+F4C↓j
.text:00000000000024E2                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000024E9                 mov     rax, [rdi+28h]
.text:00000000000024ED                 cmp     [rdi+30h], rax
.text:00000000000024F1                 jbe     loc_2990
.text:00000000000024F7                 lea     rdx, [rax+1]
.text:00000000000024FB                 mov     [rdi+28h], rdx
.text:00000000000024FF                 mov     byte ptr [rax], 20h ; ' '
.text:0000000000002502
.text:0000000000002502 loc_2502:                               ; CODE XREF: main+109A↓j
.text:0000000000002502                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002509                 mov     rax, [rdi+28h]
.text:000000000000250D                 cmp     rax, [rdi+30h]
.text:0000000000002511                 jnb     loc_2982
.text:0000000000002517                 lea     rdx, [rax+1]
.text:000000000000251B                 mov     [rdi+28h], rdx
.text:000000000000251F                 movzx   edi, [rsp+118h+var_9D]
.text:0000000000002524                 mov     [rax], dil
.text:0000000000002527
.text:0000000000002527 loc_2527:                               ; CODE XREF: main+108B↓j
.text:0000000000002527                 mov     rdi, [rsp+118h+s]
.text:000000000000252C                 mov     esi, ebp
.text:000000000000252E                 call    print_filename
.text:0000000000002533
.text:0000000000002533 loc_2533:                               ; CODE XREF: main+BE0↑j
.text:0000000000002533                                         ; main+FE3↓j
.text:0000000000002533                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000253A                 movzx   edx, cs:delim
.text:0000000000002541                 mov     rax, [rdi+28h]
.text:0000000000002545                 cmp     rax, [rdi+30h]
.text:0000000000002549                 jnb     loc_2957
.text:000000000000254F                 lea     rcx, [rax+1]
.text:0000000000002553                 mov     [rdi+28h], rcx
.text:0000000000002557                 mov     [rax], dl
.text:0000000000002559                 jmp     loc_236D
.text:000000000000255E ; ---------------------------------------------------------------------------
.text:000000000000255E
.text:000000000000255E loc_255E:                               ; CODE XREF: main+7D3↑j
.text:000000000000255E                                         ; main+88C↑j
.text:000000000000255E                 cmp     [rsp+118h+var_9E], 0
.text:0000000000002563                 jnz     loc_219D
.text:0000000000002569                 jmp     loc_21BE
.text:000000000000256E ; ---------------------------------------------------------------------------
.text:000000000000256E
.text:000000000000256E loc_256E:                               ; CODE XREF: main+7B0↑j
.text:000000000000256E                 mov     rdx, [rsp+118h+s]
.text:0000000000002573                 mov     esi, 3
.text:0000000000002578                 xor     edi, edi
.text:000000000000257A                 call    quotearg_n_style_colon
.text:000000000000257F                 lea     rsi, aSReadError ; "%s: read error"
.text:0000000000002586                 mov     rbx, rax
.text:0000000000002589                 mov     edx, 5          ; category
.text:000000000000258E                 xor     edi, edi        ; domainname
.text:0000000000002590                 call    _dcgettext
.text:0000000000002595                 mov     rcx, rbx
.text:0000000000002598                 mov     rdx, rax        ; format
.text:000000000000259B                 xor     esi, esi        ; errnum
.text:000000000000259D                 xor     eax, eax
.text:000000000000259F                 xor     edi, edi        ; status
.text:00000000000025A1                 call    _error
.text:00000000000025A6                 xor     eax, eax
.text:00000000000025A8                 jmp     loc_21C3
.text:00000000000025AD ; ---------------------------------------------------------------------------
.text:00000000000025AD
.text:00000000000025AD loc_25AD:                               ; CODE XREF: main+32A↑j
.text:00000000000025AD                                         ; main+10FA↓j
.text:00000000000025AD                 cmp     cs:warn, 0
.text:00000000000025B4                 jnz     loc_1C3D
.text:00000000000025BA                 jmp     loc_1EC5
.text:00000000000025BF ; ---------------------------------------------------------------------------
.text:00000000000025BF
.text:00000000000025BF loc_25BF:                               ; CODE XREF: main+946↑j
.text:00000000000025BF                 xor     edx, edx
.text:00000000000025C1
.text:00000000000025C1 loc_25C1:                               ; CODE XREF: main+9C1↑j
.text:00000000000025C1                                         ; main+D40↓j
.text:00000000000025C1                 movzx   eax, cs:status_only
.text:00000000000025C8                 test    al, al
.text:00000000000025CA                 mov     [rsp+118h+var_9E], al
.text:00000000000025CE                 jnz     loc_2088
.text:00000000000025D4                 movzx   eax, cs:quiet
.text:00000000000025DB                 test    al, al
.text:00000000000025DD                 mov     [rsp+118h+var_9E], al
.text:00000000000025E1                 jnz     loc_2088
.text:00000000000025E7                 test    r15d, r15d
.text:00000000000025EA                 jnz     loc_2A11
.text:00000000000025F0                 xor     esi, esi
.text:00000000000025F2                 mov     rdi, rbx
.text:00000000000025F5                 mov     byte ptr [rsp+118h+var_E8], r9b
.text:00000000000025FA                 call    print_filename
.text:00000000000025FF                 movzx   r9d, byte ptr [rsp+118h+var_E8]
.text:0000000000002605                 mov     [rsp+118h+var_9E], r9b
.text:000000000000260A
.text:000000000000260A loc_260A:                               ; CODE XREF: main+A27↑j
.text:000000000000260A                 cmp     cs:quiet, 0
.text:0000000000002611                 jnz     loc_2088
.text:0000000000002617                 mov     edx, 5
.text:000000000000261C                 lea     rsi, aOk        ; "OK"
.text:0000000000002623                 jmp     loc_206B
.text:0000000000002628 ; ---------------------------------------------------------------------------
.text:0000000000002628
.text:0000000000002628 loc_2628:                               ; CODE XREF: main+7BB↑j
.text:0000000000002628                 mov     rdi, r12        ; stream
.text:000000000000262B                 call    rpl_fclose
.text:0000000000002630                 test    eax, eax
.text:0000000000002632                 jz      loc_20C1
.text:0000000000002638                 jmp     loc_2432
.text:000000000000263D ; ---------------------------------------------------------------------------
.text:000000000000263D
.text:000000000000263D loc_263D:                               ; CODE XREF: main+99A↑j
.text:000000000000263D                 mov     rdx, rcx
.text:0000000000002640                 jmp     loc_25C1
.text:0000000000002645 ; ---------------------------------------------------------------------------
.text:0000000000002645
.text:0000000000002645 loc_2645:                               ; CODE XREF: main+7C6↑j
.text:0000000000002645                 mov     rdx, [rsp+118h+s]
.text:000000000000264A                 xor     edi, edi
.text:000000000000264C                 mov     esi, 3
.text:0000000000002651                 call    quotearg_n_style_colon
.text:0000000000002656                 lea     rsi, aSNoProperlyFor ; "%s: no properly formatted %s checksum l"...
.text:000000000000265D                 xor     edi, edi        ; domainname
.text:000000000000265F                 mov     edx, 5          ; category
.text:0000000000002664                 mov     rbp, rax
.text:0000000000002667                 call    _dcgettext
.text:000000000000266C                 lea     r8, aMd5        ; "MD5"
.text:0000000000002673                 mov     rdx, rax        ; format
.text:0000000000002676                 mov     rcx, rbp
.text:0000000000002679                 xor     esi, esi        ; errnum
.text:000000000000267B                 xor     edi, edi        ; status
.text:000000000000267D                 xor     eax, eax
.text:000000000000267F                 call    _error
.text:0000000000002684                 jmp     loc_21BE
.text:0000000000002689 ; ---------------------------------------------------------------------------
.text:0000000000002689
.text:0000000000002689 loc_2689:                               ; CODE XREF: main+AE5↑j
.text:0000000000002689                                         ; main+AF5↑j
.text:0000000000002689                 lea     r11, [rbx+r10]
.text:000000000000268D
.text:000000000000268D loc_268D:                               ; CODE XREF: main+B10↑j
.text:000000000000268D                 test    r9b, r9b
.text:0000000000002690                 jnz     loc_293E
.text:0000000000002696
.text:0000000000002696 loc_2696:                               ; CODE XREF: main+104C↓j
.text:0000000000002696                 add     r10, 1
.text:000000000000269A                 mov     byte ptr [r11], 0
.text:000000000000269E                 jmp     short loc_26A4
.text:00000000000026A0 ; ---------------------------------------------------------------------------
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: main+DAB↓j
.text:00000000000026A0                                         ; main+DAF↓j
.text:00000000000026A0                 add     r10, 1
.text:00000000000026A4
.text:00000000000026A4 loc_26A4:                               ; CODE XREF: main+D9E↑j
.text:00000000000026A4                 movzx   eax, byte ptr [rbx+r10]
.text:00000000000026A9                 cmp     al, 20h ; ' '
.text:00000000000026AB                 jz      short loc_26A0
.text:00000000000026AD                 cmp     al, 9
.text:00000000000026AF                 jz      short loc_26A0
.text:00000000000026B1                 cmp     al, 3Dh ; '='
.text:00000000000026B3                 jnz     loc_1E44
.text:00000000000026B9                 lea     rdx, [rbx+r10+1]
.text:00000000000026BE
.text:00000000000026BE loc_26BE:                               ; CODE XREF: main+DCA↓j
.text:00000000000026BE                                         ; main+DCE↓j
.text:00000000000026BE                 movzx   eax, byte ptr [rdx]
.text:00000000000026C1                 mov     r8, rdx
.text:00000000000026C4                 lea     rdx, [rdx+1]
.text:00000000000026C8                 cmp     al, 20h ; ' '
.text:00000000000026CA                 jz      short loc_26BE
.text:00000000000026CC                 cmp     al, 9
.text:00000000000026CE                 jz      short loc_26BE
.text:00000000000026D0                 mov     rdi, r8
.text:00000000000026D3                 mov     [rsp+118h+var_B8], r8
.text:00000000000026D8                 call    hex_digits
.text:00000000000026DD                 mov     r8, [rsp+118h+var_B8]
.text:00000000000026E2                 jmp     short loc_275F
.text:00000000000026E4 ; ---------------------------------------------------------------------------
.text:00000000000026E4
.text:00000000000026E4 loc_26E4:                               ; CODE XREF: main+679↑j
.text:00000000000026E4                                         ; main+682↑j
.text:00000000000026E4                 sub     esi, 1
.text:00000000000026E7                 jz      loc_1F9A
.text:00000000000026ED                 mov     cs:bsd_reversed, 0
.text:00000000000026F7                 lea     rax, [rdx+2]
.text:00000000000026FB                 jmp     loc_1F9A
.text:0000000000002700 ; ---------------------------------------------------------------------------
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: main+A8A↑j
.text:0000000000002700                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000002707                 call    rpl_fclose
.text:000000000000270C                 add     eax, 1
.text:000000000000270F                 jnz     loc_2390
.text:0000000000002715                 lea     rsi, aStandardInput ; "standard input"
.text:000000000000271C                 mov     edx, 5          ; category
.text:0000000000002721                 xor     edi, edi        ; domainname
.text:0000000000002723                 call    _dcgettext
.text:0000000000002728                 mov     rbx, rax
.text:000000000000272B                 call    ___errno_location
.text:0000000000002730                 mov     esi, [rax]      ; errnum
.text:0000000000002732                 mov     rdx, rbx        ; format
.text:0000000000002735                 mov     edi, 1          ; status
.text:000000000000273A                 xor     eax, eax
.text:000000000000273C                 call    _error
.text:0000000000002741
.text:0000000000002741 loc_2741:                               ; CODE XREF: main+6A0↑j
.text:0000000000002741                 mov     rsi, r15
.text:0000000000002744                 mov     rdi, rbx
.text:0000000000002747                 mov     [rsp+118h+var_B8], r8
.text:000000000000274C                 sub     rsi, rax
.text:000000000000274F                 call    filename_unescape
.text:0000000000002754                 mov     r8, [rsp+118h+var_B8]
.text:0000000000002759                 test    rax, rax
.text:000000000000275C                 setnz   al
.text:000000000000275F
.text:000000000000275F loc_275F:                               ; CODE XREF: main+DE2↑j
.text:000000000000275F                 test    al, al
.text:0000000000002761                 jnz     loc_1FA6
.text:0000000000002767                 jmp     loc_1E44
.text:000000000000276C ; ---------------------------------------------------------------------------
.text:000000000000276C
.text:000000000000276C loc_276C:                               ; CODE XREF: main+B86↑j
.text:000000000000276C                 cmp     [rsp+118h+var_A0], 0
.text:0000000000002771                 jz      loc_2817
.text:0000000000002777                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000277E                 mov     rax, [rdi+28h]
.text:0000000000002782                 cmp     rax, [rdi+30h]
.text:0000000000002786                 jnb     loc_29C2
.text:000000000000278C                 lea     rdx, [rax+1]
.text:0000000000002790                 mov     [rdi+28h], rdx
.text:0000000000002794                 mov     byte ptr [rax], 5Ch ; '\'
.text:0000000000002797
.text:0000000000002797 loc_2797:                               ; CODE XREF: main+10CC↓j
.text:0000000000002797                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000279E                 lea     rdi, aMd5       ; "MD5"
.text:00000000000027A5                 mov     edx, 3          ; n
.text:00000000000027AA                 mov     esi, 1          ; size
.text:00000000000027AF                 call    _fwrite_unlocked
.text:00000000000027B4                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000027BB                 lea     rdi, asc_6F9E   ; " ("
.text:00000000000027C2                 mov     edx, 2          ; n
.text:00000000000027C7                 mov     esi, 1          ; size
.text:00000000000027CC                 call    _fwrite_unlocked
.text:00000000000027D1                 mov     rdi, [rsp+118h+s]
.text:00000000000027D6                 mov     esi, 1
.text:00000000000027DB                 call    print_filename
.text:00000000000027E0                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000027E7                 lea     rdi, asc_6FA1   ; ") = "
.text:00000000000027EE                 mov     edx, 4          ; n
.text:00000000000027F3                 mov     esi, 1          ; size
.text:00000000000027F8                 call    _fwrite_unlocked
.text:00000000000027FD
.text:00000000000027FD loc_27FD:                               ; CODE XREF: main+107D↓j
.text:00000000000027FD                 mov     rax, cs:digest_hex_bytes
.text:0000000000002804                 mov     ebp, 1
.text:0000000000002809                 shr     rax, 1
.text:000000000000280C                 jnz     loc_24A5
.text:0000000000002812                 jmp     loc_24DB
.text:0000000000002817 ; ---------------------------------------------------------------------------
.text:0000000000002817
.text:0000000000002817 loc_2817:                               ; CODE XREF: main+E71↑j
.text:0000000000002817                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000281E                 mov     rax, [rdi+28h]
.text:0000000000002822                 cmp     rax, [rdi+30h]
.text:0000000000002826                 jnb     loc_2973
.text:000000000000282C                 lea     rdx, [rax+1]
.text:0000000000002830                 mov     ebp, 1
.text:0000000000002835                 mov     [rdi+28h], rdx
.text:0000000000002839                 mov     byte ptr [rax], 5Ch ; '\'
.text:000000000000283C                 mov     rax, cs:digest_hex_bytes
.text:0000000000002843                 shr     rax, 1
.text:0000000000002846                 jnz     loc_24A5
.text:000000000000284C                 jmp     loc_24E2
.text:0000000000002851 ; ---------------------------------------------------------------------------
.text:0000000000002851
.text:0000000000002851 loc_2851:                               ; CODE XREF: main+B79↑j
.text:0000000000002851                 mov     rdi, [rsp+118h+s] ; s
.text:0000000000002856                 mov     esi, 0Ah        ; c
.text:000000000000285B                 call    _strchr
.text:0000000000002860                 test    rax, rax
.text:0000000000002863                 jnz     loc_247F
.text:0000000000002869                 jmp     loc_248C
.text:000000000000286E ; ---------------------------------------------------------------------------
.text:000000000000286E
.text:000000000000286E loc_286E:                               ; CODE XREF: main+B91↑j
.text:000000000000286E                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002875                 lea     rdi, aMd5       ; "MD5"
.text:000000000000287C                 mov     edx, 3          ; n
.text:0000000000002881                 mov     esi, 1          ; size
.text:0000000000002886                 xor     ebp, ebp
.text:0000000000002888                 call    _fwrite_unlocked
.text:000000000000288D                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002894                 lea     rdi, asc_6F9E   ; " ("
.text:000000000000289B                 mov     edx, 2          ; n
.text:00000000000028A0                 mov     esi, 1          ; size
.text:00000000000028A5                 call    _fwrite_unlocked
.text:00000000000028AA                 mov     rdi, [rsp+118h+s]
.text:00000000000028AF                 xor     esi, esi
.text:00000000000028B1                 call    print_filename
.text:00000000000028B6                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000028BD                 lea     rdi, asc_6FA1   ; ") = "
.text:00000000000028C4                 mov     edx, 4          ; n
.text:00000000000028C9                 mov     esi, 1          ; size
.text:00000000000028CE                 call    _fwrite_unlocked
.text:00000000000028D3                 mov     rax, cs:digest_hex_bytes
.text:00000000000028DA                 shr     rax, 1
.text:00000000000028DD                 jnz     loc_24A5
.text:00000000000028E3                 jmp     loc_2533
.text:00000000000028E8 ; ---------------------------------------------------------------------------
.text:00000000000028E8
.text:00000000000028E8 loc_28E8:                               ; CODE XREF: main+9DD↑j
.text:00000000000028E8                 xor     esi, esi
.text:00000000000028EA                 mov     rdi, rbx
.text:00000000000028ED                 call    print_filename
.text:00000000000028F2                 jmp     loc_232D
.text:00000000000028F7 ; ---------------------------------------------------------------------------
.text:00000000000028F7
.text:00000000000028F7 loc_28F7:                               ; CODE XREF: main+897↑j
.text:00000000000028F7                 mov     rdx, [rsp+118h+s]
.text:00000000000028FC                 xor     edi, edi
.text:00000000000028FE                 mov     esi, 3
.text:0000000000002903                 call    quotearg_n_style_colon
.text:0000000000002908                 lea     rsi, aSNoFileWasVeri ; "%s: no file was verified"
.text:000000000000290F                 mov     rbp, rax
.text:0000000000002912                 xor     edi, edi        ; domainname
.text:0000000000002914                 mov     edx, 5          ; category
.text:0000000000002919                 call    _dcgettext
.text:000000000000291E                 mov     rcx, rbp
.text:0000000000002921                 mov     rdx, rax        ; format
.text:0000000000002924                 xor     esi, esi        ; errnum
.text:0000000000002926                 xor     edi, edi        ; status
.text:0000000000002928                 xor     eax, eax
.text:000000000000292A                 call    _error
.text:000000000000292F                 jmp     loc_21BE
.text:0000000000002934 ; ---------------------------------------------------------------------------
.text:0000000000002934
.text:0000000000002934 loc_2934:                               ; CODE XREF: main+383↑j
.text:0000000000002934                 mov     [rsp+118h+var_9F], 1
.text:0000000000002939                 jmp     loc_2383
.text:000000000000293E ; ---------------------------------------------------------------------------
.text:000000000000293E
.text:000000000000293E loc_293E:                               ; CODE XREF: main+D90↑j
.text:000000000000293E                 mov     rsi, r10
.text:0000000000002941                 mov     rdi, rbx
.text:0000000000002944                 call    filename_unescape
.text:0000000000002949                 test    rax, rax
.text:000000000000294C                 jnz     loc_2696
.text:0000000000002952                 jmp     loc_1E44
.text:0000000000002957 ; ---------------------------------------------------------------------------
.text:0000000000002957
.text:0000000000002957 loc_2957:                               ; CODE XREF: main+C49↑j
.text:0000000000002957                 movzx   esi, dl         ; int
.text:000000000000295A                 call    ___overflow
.text:000000000000295F                 jmp     loc_236D
.text:0000000000002964 ; ---------------------------------------------------------------------------
.text:0000000000002964
.text:0000000000002964 loc_2964:                               ; CODE XREF: main+743↑j
.text:0000000000002964                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000002969                 call    ___overflow
.text:000000000000296E                 jmp     loc_2054
.text:0000000000002973 ; ---------------------------------------------------------------------------
.text:0000000000002973
.text:0000000000002973 loc_2973:                               ; CODE XREF: main+F26↑j
.text:0000000000002973                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000002978                 call    ___overflow
.text:000000000000297D                 jmp     loc_27FD
.text:0000000000002982 ; ---------------------------------------------------------------------------
.text:0000000000002982
.text:0000000000002982 loc_2982:                               ; CODE XREF: main+C11↑j
.text:0000000000002982                 mov     esi, [rsp+118h+var_9C] ; int
.text:0000000000002986                 call    ___overflow
.text:000000000000298B                 jmp     loc_2527
.text:0000000000002990 ; ---------------------------------------------------------------------------
.text:0000000000002990
.text:0000000000002990 loc_2990:                               ; CODE XREF: main+BF1↑j
.text:0000000000002990                 mov     esi, 20h ; ' '  ; int
.text:0000000000002995                 call    ___overflow
.text:000000000000299A                 jmp     loc_2502
.text:000000000000299F ; ---------------------------------------------------------------------------
.text:000000000000299F
.text:000000000000299F loc_299F:                               ; CODE XREF: main+9F2↑j
.text:000000000000299F                 mov     esi, 5Ch ; '\'  ; int
.text:00000000000029A4                 mov     [rsp+118h+var_B8], rcx
.text:00000000000029A9                 mov     [rsp+118h+var_E8], rdx
.text:00000000000029AE                 call    ___overflow
.text:00000000000029B3                 mov     rdx, [rsp+118h+var_E8]
.text:00000000000029B8                 mov     rcx, [rsp+118h+var_B8]
.text:00000000000029BD                 jmp     loc_2303
.text:00000000000029C2 ; ---------------------------------------------------------------------------
.text:00000000000029C2
.text:00000000000029C2 loc_29C2:                               ; CODE XREF: main+E86↑j
.text:00000000000029C2                 mov     esi, 5Ch ; '\'  ; int
.text:00000000000029C7                 call    ___overflow
.text:00000000000029CC                 jmp     loc_2797
.text:00000000000029D1 ; ---------------------------------------------------------------------------
.text:00000000000029D1
.text:00000000000029D1 loc_29D1:                               ; CODE XREF: main+155↑j
.text:00000000000029D1                 cmp     eax, 0FFFFFF7Eh
.text:00000000000029D6                 jnz     loc_1BD0
.text:00000000000029DC                 xor     edi, edi        ; status
.text:00000000000029DE                 call    usage
.text:00000000000029E3 ; ---------------------------------------------------------------------------
.text:00000000000029E3
.text:00000000000029E3 loc_29E3:                               ; CODE XREF: main+AAC↑j
.text:00000000000029E3                 call    ___stack_chk_fail
.text:00000000000029E8 ; ---------------------------------------------------------------------------
.text:00000000000029E8
.text:00000000000029E8 loc_29E8:                               ; CODE XREF: main+312↑j
.text:00000000000029E8                 cmp     cs:status_only, 0
.text:00000000000029EF                 jz      loc_1B97
.text:00000000000029F5                 cmp     [rsp+118h+var_ED], 0
.text:00000000000029FA                 jnz     loc_25AD
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: main+291↑j
.text:0000000000002A00                 mov     edx, 5
.text:0000000000002A05                 lea     rsi, aTheStatusOptio ; "the --status option is meaningful only "...
.text:0000000000002A0C                 jmp     loc_1BBB
.text:0000000000002A11 ; ---------------------------------------------------------------------------
.text:0000000000002A11
.text:0000000000002A11 loc_2A11:                               ; CODE XREF: main+CEA↑j
.text:0000000000002A11                 mov     [rsp+118h+var_9E], r9b
.text:0000000000002A16                 jmp     loc_22E3
.text:0000000000002A1B ; ---------------------------------------------------------------------------
.text:0000000000002A1B
.text:0000000000002A1B loc_2A1B:                               ; CODE XREF: main+25B↑j
.text:0000000000002A1B                 mov     edx, 5
.text:0000000000002A20                 lea     rsi, aTagDoesNotSupp ; "--tag does not support --text mode"
.text:0000000000002A27                 jmp     loc_1BBB
.text:0000000000002A2C ; ---------------------------------------------------------------------------
.text:0000000000002A2C
.text:0000000000002A2C loc_2A2C:                               ; CODE XREF: main+284↑j
.text:0000000000002A2C                                         ; main+31D↑j
.text:0000000000002A2C                 mov     edx, 5
.text:0000000000002A31                 lea     rsi, aTheIgnoreMissi ; "the --ignore-missing option is meaningf"...
.text:0000000000002A38                 jmp     loc_1BBB
.text:0000000000002A38 ; } // starts at 1900
.text:0000000000002A38 main            endp
.text:0000000000002A38
.text:0000000000002A38 ; ---------------------------------------------------------------------------
.text:0000000000002A3D                 align 20h
.text:0000000000002A40
.text:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A40
.text:0000000000002A40 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002A40
.text:0000000000002A40 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002A40                 public start
.text:0000000000002A40 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002A40 ; __unwind {
.text:0000000000002A40                 xor     ebp, ebp
.text:0000000000002A42                 mov     r9, rdx         ; rtld_fini
.text:0000000000002A45                 pop     rsi             ; argc
.text:0000000000002A46                 mov     rdx, rsp        ; ubp_av
.text:0000000000002A49                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000002A4D                 push    rax
.text:0000000000002A4E                 push    rsp             ; stack_end
.text:0000000000002A4F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002A56                 lea     rcx, __libc_csu_init ; init
.text:0000000000002A5D                 lea     rdi, main       ; main
.text:0000000000002A64                 call    cs:__libc_start_main_ptr
.text:0000000000002A6A                 hlt
.text:0000000000002A6A ; } // starts at 2A40
.text:0000000000002A6A start           endp
.text:0000000000002A6A
.text:0000000000002A6A ; ---------------------------------------------------------------------------
.text:0000000000002A6B                 align 10h
.text:0000000000002A70
.text:0000000000002A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A70
.text:0000000000002A70 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002A70
.text:0000000000002A70 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2B23↓p
.text:0000000000002A70                 lea     rdi, __bss_start
.text:0000000000002A77                 push    rbp
.text:0000000000002A78                 lea     rax, __bss_start
.text:0000000000002A7F                 cmp     rax, rdi
.text:0000000000002A82                 mov     rbp, rsp
.text:0000000000002A85                 jz      short loc_2AA0
.text:0000000000002A87                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000002A8E                 test    rax, rax
.text:0000000000002A91                 jz      short loc_2AA0
.text:0000000000002A93                 pop     rbp
.text:0000000000002A94                 jmp     rax
.text:0000000000002A94 ; ---------------------------------------------------------------------------
.text:0000000000002A96                 align 20h
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002AA0                                         ; deregister_tm_clones+21↑j
.text:0000000000002AA0                 pop     rbp
.text:0000000000002AA1                 retn
.text:0000000000002AA1 deregister_tm_clones endp
.text:0000000000002AA1
.text:0000000000002AA1 ; ---------------------------------------------------------------------------
.text:0000000000002AA2                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AB0
.text:0000000000002AB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002AB0
.text:0000000000002AB0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002AB0                 lea     rdi, __bss_start
.text:0000000000002AB7                 lea     rsi, __bss_start
.text:0000000000002ABE                 push    rbp
.text:0000000000002ABF                 sub     rsi, rdi
.text:0000000000002AC2                 mov     rbp, rsp
.text:0000000000002AC5                 sar     rsi, 3
.text:0000000000002AC9                 mov     rax, rsi
.text:0000000000002ACC                 shr     rax, 3Fh
.text:0000000000002AD0                 add     rsi, rax
.text:0000000000002AD3                 sar     rsi, 1
.text:0000000000002AD6                 jz      short loc_2AF0
.text:0000000000002AD8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000002ADF                 test    rax, rax
.text:0000000000002AE2                 jz      short loc_2AF0
.text:0000000000002AE4                 pop     rbp
.text:0000000000002AE5                 jmp     rax
.text:0000000000002AE5 ; ---------------------------------------------------------------------------
.text:0000000000002AE7                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002AF0                                         ; register_tm_clones+32↑j
.text:0000000000002AF0                 pop     rbp
.text:0000000000002AF1                 retn
.text:0000000000002AF1 register_tm_clones endp
.text:0000000000002AF1
.text:0000000000002AF1 ; ---------------------------------------------------------------------------
.text:0000000000002AF2                 align 20h
.text:0000000000002B00
.text:0000000000002B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B00
.text:0000000000002B00 ; Attributes: info_from_lumina
.text:0000000000002B00
.text:0000000000002B00 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002B00                 cmp     cs:completed_7697, 0
.text:0000000000002B07                 jnz     short locret_2B38
.text:0000000000002B09                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002B11                 push    rbp
.text:0000000000002B12                 mov     rbp, rsp
.text:0000000000002B15                 jz      short loc_2B23
.text:0000000000002B17                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000002B1E                 call    __cxa_finalize
.text:0000000000002B23
.text:0000000000002B23 loc_2B23:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002B23                 call    deregister_tm_clones
.text:0000000000002B28                 mov     cs:completed_7697, 1
.text:0000000000002B2F                 pop     rbp
.text:0000000000002B30                 retn
.text:0000000000002B30 ; ---------------------------------------------------------------------------
.text:0000000000002B31                 align 8
.text:0000000000002B38
.text:0000000000002B38 locret_2B38:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002B38                 rep retn
.text:0000000000002B38 __do_global_dtors_aux endp
.text:0000000000002B38
.text:0000000000002B38 ; ---------------------------------------------------------------------------
.text:0000000000002B3A                 align 20h
.text:0000000000002B40
.text:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B40
.text:0000000000002B40 ; Attributes: bp-based frame
.text:0000000000002B40
.text:0000000000002B40 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002B40                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002B40                 push    rbp
.text:0000000000002B41                 mov     rbp, rsp
.text:0000000000002B44                 pop     rbp
.text:0000000000002B45                 jmp     register_tm_clones
.text:0000000000002B45 frame_dummy     endp
.text:0000000000002B45
.text:0000000000002B45 ; ---------------------------------------------------------------------------
.text:0000000000002B4A                 align 10h
.text:0000000000002B50
.text:0000000000002B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B50
.text:0000000000002B50
.text:0000000000002B50 filename_unescape proc near             ; CODE XREF: main+E4F↑p
.text:0000000000002B50                                         ; main+1044↑p
.text:0000000000002B50 ; __unwind {
.text:0000000000002B50                 xor     edx, edx
.text:0000000000002B52                 test    rsi, rsi
.text:0000000000002B55                 lea     rcx, [rdi+1]
.text:0000000000002B59                 lea     r8, [rsi-1]
.text:0000000000002B5D                 jz      short loc_2BB7
.text:0000000000002B5F
.text:0000000000002B5F loc_2B5F:                               ; CODE XREF: filename_unescape+59↓j
.text:0000000000002B5F                 movzx   eax, byte ptr [rdi+rdx]
.text:0000000000002B63                 test    al, al
.text:0000000000002B65                 jz      short loc_2B90
.text:0000000000002B67                 cmp     al, 5Ch ; '\'
.text:0000000000002B69                 jnz     short loc_2B98
.text:0000000000002B6B                 cmp     r8, rdx
.text:0000000000002B6E                 jz      short loc_2B90
.text:0000000000002B70                 add     rdx, 1
.text:0000000000002B74                 movzx   eax, byte ptr [rdi+rdx]
.text:0000000000002B78                 cmp     al, 5Ch ; '\'
.text:0000000000002B7A                 jz      short loc_2BC0
.text:0000000000002B7C                 cmp     al, 6Eh ; 'n'
.text:0000000000002B7E                 jnz     short loc_2B90
.text:0000000000002B80                 mov     r9, rcx
.text:0000000000002B83                 mov     byte ptr [rcx-1], 0Ah
.text:0000000000002B87                 jmp     short loc_2B9E
.text:0000000000002B87 ; ---------------------------------------------------------------------------
.text:0000000000002B89                 align 10h
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: filename_unescape+15↑j
.text:0000000000002B90                                         ; filename_unescape+1E↑j ...
.text:0000000000002B90                 xor     eax, eax
.text:0000000000002B92                 retn
.text:0000000000002B92 ; ---------------------------------------------------------------------------
.text:0000000000002B93                 align 8
.text:0000000000002B98
.text:0000000000002B98 loc_2B98:                               ; CODE XREF: filename_unescape+19↑j
.text:0000000000002B98                 mov     r9, rcx
.text:0000000000002B9B                 mov     [rcx-1], al
.text:0000000000002B9E
.text:0000000000002B9E loc_2B9E:                               ; CODE XREF: filename_unescape+37↑j
.text:0000000000002B9E                                         ; filename_unescape+77↓j
.text:0000000000002B9E                 add     rdx, 1
.text:0000000000002BA2                 add     rcx, 1
.text:0000000000002BA6                 cmp     rsi, rdx
.text:0000000000002BA9                 ja      short loc_2B5F
.text:0000000000002BAB                 add     rsi, rdi
.text:0000000000002BAE                 cmp     r9, rsi
.text:0000000000002BB1                 jnb     short loc_2BB7
.text:0000000000002BB3                 mov     byte ptr [r9], 0
.text:0000000000002BB7
.text:0000000000002BB7 loc_2BB7:                               ; CODE XREF: filename_unescape+D↑j
.text:0000000000002BB7                                         ; filename_unescape+61↑j
.text:0000000000002BB7                 mov     rax, rdi
.text:0000000000002BBA                 retn
.text:0000000000002BBA ; ---------------------------------------------------------------------------
.text:0000000000002BBB                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: filename_unescape+2A↑j
.text:0000000000002BC0                 mov     r9, rcx
.text:0000000000002BC3                 mov     byte ptr [rcx-1], 5Ch ; '\'
.text:0000000000002BC7                 jmp     short loc_2B9E
.text:0000000000002BC7 ; } // starts at 2B50
.text:0000000000002BC7 filename_unescape endp
.text:0000000000002BC7
.text:0000000000002BC7 ; ---------------------------------------------------------------------------
.text:0000000000002BC9                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BD0
.text:0000000000002BD0
.text:0000000000002BD0 hex_digits      proc near               ; CODE XREF: main+63E↑p
.text:0000000000002BD0                                         ; main+DD8↑p
.text:0000000000002BD0 ; __unwind {
.text:0000000000002BD0                 push    rbp
.text:0000000000002BD1                 push    rbx
.text:0000000000002BD2                 sub     rsp, 8
.text:0000000000002BD6                 mov     rbp, cs:digest_hex_bytes
.text:0000000000002BDD                 test    rbp, rbp
.text:0000000000002BE0                 jz      short loc_2C20
.text:0000000000002BE2                 mov     rbx, rdi
.text:0000000000002BE5                 call    ___ctype_b_loc
.text:0000000000002BEA                 mov     rcx, [rax]
.text:0000000000002BED                 mov     rax, rbx
.text:0000000000002BF0                 jmp     short loc_2C05
.text:0000000000002BF0 ; ---------------------------------------------------------------------------
.text:0000000000002BF2                 align 8
.text:0000000000002BF8
.text:0000000000002BF8 loc_2BF8:                               ; CODE XREF: hex_digits+3D↓j
.text:0000000000002BF8                 add     rax, 1
.text:0000000000002BFC                 mov     edx, eax
.text:0000000000002BFE                 sub     edx, ebx
.text:0000000000002C00                 cmp     rdx, rbp
.text:0000000000002C03                 jnb     short loc_2C23
.text:0000000000002C05
.text:0000000000002C05 loc_2C05:                               ; CODE XREF: hex_digits+20↑j
.text:0000000000002C05                 movzx   edx, byte ptr [rax]
.text:0000000000002C08                 test    byte ptr [rcx+rdx*2+1], 10h
.text:0000000000002C0D                 jnz     short loc_2BF8
.text:0000000000002C0F                 add     rsp, 8
.text:0000000000002C13                 xor     eax, eax
.text:0000000000002C15                 pop     rbx
.text:0000000000002C16                 pop     rbp
.text:0000000000002C17                 retn
.text:0000000000002C17 ; ---------------------------------------------------------------------------
.text:0000000000002C18                 align 20h
.text:0000000000002C20
.text:0000000000002C20 loc_2C20:                               ; CODE XREF: hex_digits+10↑j
.text:0000000000002C20                 mov     rax, rdi
.text:0000000000002C23
.text:0000000000002C23 loc_2C23:                               ; CODE XREF: hex_digits+33↑j
.text:0000000000002C23                 cmp     byte ptr [rax], 0
.text:0000000000002C26                 setz    al
.text:0000000000002C29                 add     rsp, 8
.text:0000000000002C2D                 pop     rbx
.text:0000000000002C2E                 pop     rbp
.text:0000000000002C2F                 retn
.text:0000000000002C2F ; } // starts at 2BD0
.text:0000000000002C2F hex_digits      endp
.text:0000000000002C2F
.text:0000000000002C30
.text:0000000000002C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C30
.text:0000000000002C30
.text:0000000000002C30 print_filename  proc near               ; CODE XREF: main+75A↑p
.text:0000000000002C30                                         ; main+A15↑p ...
.text:0000000000002C30 ; __unwind {
.text:0000000000002C30                 push    rbp
.text:0000000000002C31                 push    rbx
.text:0000000000002C32                 mov     rbx, rdi
.text:0000000000002C35                 sub     rsp, 8
.text:0000000000002C39                 test    sil, sil
.text:0000000000002C3C                 jz      loc_2CD0
.text:0000000000002C42                 movzx   esi, byte ptr [rdi]
.text:0000000000002C45                 lea     rbp, s          ; "\\n"
.text:0000000000002C4C                 test    sil, sil
.text:0000000000002C4F                 jnz     short loc_2C7A
.text:0000000000002C51                 jmp     short loc_2CAE
.text:0000000000002C51 ; ---------------------------------------------------------------------------
.text:0000000000002C53                 align 8
.text:0000000000002C58
.text:0000000000002C58 loc_2C58:                               ; CODE XREF: print_filename+5B↓j
.text:0000000000002C58                 lea     rdi, asc_6E27   ; ptr
.text:0000000000002C5F                 mov     edx, 2          ; n
.text:0000000000002C64                 mov     esi, 1          ; size
.text:0000000000002C69                 call    _fwrite_unlocked
.text:0000000000002C6E
.text:0000000000002C6E loc_2C6E:                               ; CODE XREF: print_filename+9A↓j
.text:0000000000002C6E                                         ; print_filename+C0↓j
.text:0000000000002C6E                 add     rbx, 1
.text:0000000000002C72                 movzx   esi, byte ptr [rbx] ; int
.text:0000000000002C75                 test    sil, sil
.text:0000000000002C78                 jz      short loc_2CAE
.text:0000000000002C7A
.text:0000000000002C7A loc_2C7A:                               ; CODE XREF: print_filename+1F↑j
.text:0000000000002C7A                                         ; print_filename+7C↓j
.text:0000000000002C7A                 cmp     sil, 0Ah
.text:0000000000002C7E                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002C85                 jz      short loc_2CB8
.text:0000000000002C87                 cmp     sil, 5Ch ; '\'
.text:0000000000002C8B                 jz      short loc_2C58
.text:0000000000002C8D                 mov     rax, [rcx+28h]
.text:0000000000002C91                 cmp     rax, [rcx+30h]
.text:0000000000002C95                 jnb     short loc_2CE8
.text:0000000000002C97                 lea     rdx, [rax+1]
.text:0000000000002C9B                 add     rbx, 1
.text:0000000000002C9F                 mov     [rcx+28h], rdx
.text:0000000000002CA3                 mov     [rax], sil
.text:0000000000002CA6                 movzx   esi, byte ptr [rbx]
.text:0000000000002CA9                 test    sil, sil
.text:0000000000002CAC                 jnz     short loc_2C7A
.text:0000000000002CAE
.text:0000000000002CAE loc_2CAE:                               ; CODE XREF: print_filename+21↑j
.text:0000000000002CAE                                         ; print_filename+48↑j
.text:0000000000002CAE                 add     rsp, 8
.text:0000000000002CB2                 pop     rbx
.text:0000000000002CB3                 pop     rbp
.text:0000000000002CB4                 retn
.text:0000000000002CB4 ; ---------------------------------------------------------------------------
.text:0000000000002CB5                 align 8
.text:0000000000002CB8
.text:0000000000002CB8 loc_2CB8:                               ; CODE XREF: print_filename+55↑j
.text:0000000000002CB8                 mov     edx, 2          ; n
.text:0000000000002CBD                 mov     esi, 1          ; size
.text:0000000000002CC2                 mov     rdi, rbp        ; s
.text:0000000000002CC5                 call    _fwrite_unlocked
.text:0000000000002CCA                 jmp     short loc_2C6E
.text:0000000000002CCA ; ---------------------------------------------------------------------------
.text:0000000000002CCC                 align 10h
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: print_filename+C↑j
.text:0000000000002CD0                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002CD7                 add     rsp, 8
.text:0000000000002CDB                 pop     rbx
.text:0000000000002CDC                 pop     rbp
.text:0000000000002CDD                 jmp     _fputs_unlocked
.text:0000000000002CDD ; ---------------------------------------------------------------------------
.text:0000000000002CE2                 align 8
.text:0000000000002CE8
.text:0000000000002CE8 loc_2CE8:                               ; CODE XREF: print_filename+65↑j
.text:0000000000002CE8                 mov     rdi, rcx        ; _IO_FILE *
.text:0000000000002CEB                 call    ___overflow
.text:0000000000002CF0                 jmp     loc_2C6E
.text:0000000000002CF0 ; } // starts at 2C30
.text:0000000000002CF0 print_filename  endp
.text:0000000000002CF0
.text:0000000000002CF0 ; ---------------------------------------------------------------------------
.text:0000000000002CF5                 align 20h
.text:0000000000002D00
.text:0000000000002D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D00
.text:0000000000002D00
.text:0000000000002D00 digest_file_isra_1 proc near            ; CODE XREF: main+70B↑p
.text:0000000000002D00                                         ; main+A5B↑p
.text:0000000000002D00 ; __unwind {
.text:0000000000002D00                 push    r13
.text:0000000000002D02                 push    r12
.text:0000000000002D04                 mov     ecx, 2
.text:0000000000002D09                 push    rbp
.text:0000000000002D0A                 push    rbx
.text:0000000000002D0B                 mov     rbp, rdi
.text:0000000000002D0E                 lea     rdi, aLt+2      ; "-"
.text:0000000000002D15                 mov     r12, rsi
.text:0000000000002D18                 mov     rsi, rbp
.text:0000000000002D1B                 sub     rsp, 8
.text:0000000000002D1F                 repe cmpsb
.text:0000000000002D21                 mov     byte ptr [rdx], 0
.text:0000000000002D24                 setnbe  al
.text:0000000000002D27                 sbb     al, 0
.text:0000000000002D29                 test    al, al
.text:0000000000002D2B                 jnz     loc_2DC0
.text:0000000000002D31                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:0000000000002D38                 mov     esi, 2
.text:0000000000002D3D                 mov     cs:have_read_stdin, 1
.text:0000000000002D44                 mov     rdi, rbx
.text:0000000000002D47                 call    fadvise
.text:0000000000002D4C                 mov     rsi, r12
.text:0000000000002D4F                 mov     rdi, rbx        ; stream
.text:0000000000002D52                 call    md5_stream
.text:0000000000002D57                 test    eax, eax
.text:0000000000002D59                 jnz     short loc_2D70
.text:0000000000002D5B
.text:0000000000002D5B loc_2D5B:                               ; CODE XREF: digest_file_isra_1+104↓j
.text:0000000000002D5B                 mov     r12d, 1
.text:0000000000002D61
.text:0000000000002D61 loc_2D61:                               ; CODE XREF: digest_file_isra_1+A6↓j
.text:0000000000002D61                                         ; digest_file_isra_1+139↓j ...
.text:0000000000002D61                 add     rsp, 8
.text:0000000000002D65                 mov     eax, r12d
.text:0000000000002D68                 pop     rbx
.text:0000000000002D69                 pop     rbp
.text:0000000000002D6A                 pop     r12
.text:0000000000002D6C                 pop     r13
.text:0000000000002D6E                 retn
.text:0000000000002D6E ; ---------------------------------------------------------------------------
.text:0000000000002D6F                 align 10h
.text:0000000000002D70
.text:0000000000002D70 loc_2D70:                               ; CODE XREF: digest_file_isra_1+59↑j
.text:0000000000002D70                                         ; digest_file_isra_1+F4↓j
.text:0000000000002D70                 mov     rdx, rbp
.text:0000000000002D73                 xor     edi, edi
.text:0000000000002D75                 mov     esi, 3
.text:0000000000002D7A                 call    quotearg_n_style_colon
.text:0000000000002D7F                 mov     rbp, rax
.text:0000000000002D82                 xor     r12d, r12d
.text:0000000000002D85                 call    ___errno_location
.text:0000000000002D8A                 mov     esi, [rax]      ; errnum
.text:0000000000002D8C                 lea     rdx, format     ; format
.text:0000000000002D93                 xor     edi, edi        ; status
.text:0000000000002D95                 xor     eax, eax
.text:0000000000002D97                 mov     rcx, rbp
.text:0000000000002D9A                 call    _error
.text:0000000000002D9F                 cmp     cs:stdin@@GLIBC_2_2_5, rbx
.text:0000000000002DA6                 jz      short loc_2D61
.text:0000000000002DA8                 mov     rdi, rbx        ; stream
.text:0000000000002DAB                 call    rpl_fclose
.text:0000000000002DB0                 add     rsp, 8
.text:0000000000002DB4                 mov     eax, r12d
.text:0000000000002DB7                 pop     rbx
.text:0000000000002DB8                 pop     rbp
.text:0000000000002DB9                 pop     r12
.text:0000000000002DBB                 pop     r13
.text:0000000000002DBD                 retn
.text:0000000000002DBD ; ---------------------------------------------------------------------------
.text:0000000000002DBE                 align 20h
.text:0000000000002DC0
.text:0000000000002DC0 loc_2DC0:                               ; CODE XREF: digest_file_isra_1+2B↑j
.text:0000000000002DC0                 lea     rsi, aScottMiller+0Bh ; "r"
.text:0000000000002DC7                 mov     rdi, rbp
.text:0000000000002DCA                 mov     r13, rdx
.text:0000000000002DCD                 call    fopen_safer
.text:0000000000002DD2                 test    rax, rax
.text:0000000000002DD5                 mov     rbx, rax
.text:0000000000002DD8                 jz      short loc_2E40
.text:0000000000002DDA                 mov     rdi, rax
.text:0000000000002DDD                 mov     esi, 2
.text:0000000000002DE2                 call    fadvise
.text:0000000000002DE7                 mov     rsi, r12
.text:0000000000002DEA                 mov     rdi, rbx        ; stream
.text:0000000000002DED                 call    md5_stream
.text:0000000000002DF2                 test    eax, eax
.text:0000000000002DF4                 jnz     loc_2D70
.text:0000000000002DFA                 mov     rdi, rbx        ; stream
.text:0000000000002DFD                 call    rpl_fclose
.text:0000000000002E02                 test    eax, eax
.text:0000000000002E04                 jz      loc_2D5B
.text:0000000000002E0A                 mov     rdx, rbp
.text:0000000000002E0D                 mov     esi, 3
.text:0000000000002E12                 xor     edi, edi
.text:0000000000002E14                 call    quotearg_n_style_colon
.text:0000000000002E19                 mov     rbx, rax
.text:0000000000002E1C                 xor     r12d, r12d
.text:0000000000002E1F                 call    ___errno_location
.text:0000000000002E24                 mov     esi, [rax]      ; errnum
.text:0000000000002E26                 lea     rdx, format     ; format
.text:0000000000002E2D                 mov     rcx, rbx
.text:0000000000002E30                 xor     edi, edi        ; status
.text:0000000000002E32                 xor     eax, eax
.text:0000000000002E34                 call    _error
.text:0000000000002E39                 jmp     loc_2D61
.text:0000000000002E39 ; ---------------------------------------------------------------------------
.text:0000000000002E3E                 align 20h
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: digest_file_isra_1+D8↑j
.text:0000000000002E40                 movzx   r12d, cs:ignore_missing
.text:0000000000002E48                 call    ___errno_location
.text:0000000000002E4D                 mov     rbx, rax
.text:0000000000002E50                 test    r12b, r12b
.text:0000000000002E53                 jz      short loc_2E5A
.text:0000000000002E55                 cmp     dword ptr [rax], 2
.text:0000000000002E58                 jz      short loc_2E90
.text:0000000000002E5A
.text:0000000000002E5A loc_2E5A:                               ; CODE XREF: digest_file_isra_1+153↑j
.text:0000000000002E5A                 mov     rdx, rbp
.text:0000000000002E5D                 mov     esi, 3
.text:0000000000002E62                 xor     edi, edi
.text:0000000000002E64                 call    quotearg_n_style_colon
.text:0000000000002E69                 mov     esi, [rbx]      ; errnum
.text:0000000000002E6B                 lea     rdx, format     ; format
.text:0000000000002E72                 mov     rcx, rax
.text:0000000000002E75                 xor     edi, edi        ; status
.text:0000000000002E77                 xor     eax, eax
.text:0000000000002E79                 xor     r12d, r12d
.text:0000000000002E7C                 call    _error
.text:0000000000002E81                 jmp     loc_2D61
.text:0000000000002E81 ; ---------------------------------------------------------------------------
.text:0000000000002E86                 align 10h
.text:0000000000002E90
.text:0000000000002E90 loc_2E90:                               ; CODE XREF: digest_file_isra_1+158↑j
.text:0000000000002E90                 mov     byte ptr [r13+0], 1
.text:0000000000002E95                 jmp     loc_2D61
.text:0000000000002E95 ; } // starts at 2D00
.text:0000000000002E95 digest_file_isra_1 endp
.text:0000000000002E95
.text:0000000000002E95 ; ---------------------------------------------------------------------------
.text:0000000000002E9A                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EA0
.text:0000000000002EA0 ; Attributes: noreturn
.text:0000000000002EA0
.text:0000000000002EA0 ; void __fastcall __noreturn usage(int status)
.text:0000000000002EA0                 public usage
.text:0000000000002EA0 usage           proc near               ; CODE XREF: main+2D5↑p
.text:0000000000002EA0                                         ; main+10DE↑p
.text:0000000000002EA0
.text:0000000000002EA0 var_A8          = qword ptr -0A8h
.text:0000000000002EA0 var_A0          = qword ptr -0A0h
.text:0000000000002EA0 var_98          = qword ptr -98h
.text:0000000000002EA0 var_90          = qword ptr -90h
.text:0000000000002EA0 var_88          = qword ptr -88h
.text:0000000000002EA0 var_80          = qword ptr -80h
.text:0000000000002EA0 var_78          = qword ptr -78h
.text:0000000000002EA0 var_70          = qword ptr -70h
.text:0000000000002EA0 var_68          = qword ptr -68h
.text:0000000000002EA0 var_60          = qword ptr -60h
.text:0000000000002EA0 var_58          = qword ptr -58h
.text:0000000000002EA0 var_50          = qword ptr -50h
.text:0000000000002EA0 var_48          = qword ptr -48h
.text:0000000000002EA0 var_40          = qword ptr -40h
.text:0000000000002EA0 var_30          = qword ptr -30h
.text:0000000000002EA0
.text:0000000000002EA0 ; __unwind {
.text:0000000000002EA0                 push    r13
.text:0000000000002EA2                 push    r12
.text:0000000000002EA4                 mov     edx, 5          ; category
.text:0000000000002EA9                 push    rbp
.text:0000000000002EAA                 push    rbx
.text:0000000000002EAB                 mov     ebp, edi
.text:0000000000002EAD                 sub     rsp, 88h
.text:0000000000002EB4                 mov     rbx, cs:program_name
.text:0000000000002EBB                 mov     rax, fs:28h
.text:0000000000002EC4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002EC9                 xor     eax, eax
.text:0000000000002ECB                 test    edi, edi
.text:0000000000002ECD                 jz      short loc_2EFD
.text:0000000000002ECF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002ED6                 xor     edi, edi        ; domainname
.text:0000000000002ED8                 call    _dcgettext
.text:0000000000002EDD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002EE4                 mov     rdx, rax
.text:0000000000002EE7                 mov     rcx, rbx
.text:0000000000002EEA                 mov     esi, 1
.text:0000000000002EEF                 xor     eax, eax
.text:0000000000002EF1                 call    ___fprintf_chk
.text:0000000000002EF6
.text:0000000000002EF6 loc_2EF6:                               ; CODE XREF: usage+396↓j
.text:0000000000002EF6                 mov     edi, ebp        ; status
.text:0000000000002EF8                 call    _exit
.text:0000000000002EFD ; ---------------------------------------------------------------------------
.text:0000000000002EFD
.text:0000000000002EFD loc_2EFD:                               ; CODE XREF: usage+2D↑j
.text:0000000000002EFD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\nPrint "...
.text:0000000000002F04                 xor     edi, edi        ; domainname
.text:0000000000002F06                 call    _dcgettext
.text:0000000000002F0B                 lea     rcx, aMd5       ; "MD5"
.text:0000000000002F12                 mov     r8d, 80h
.text:0000000000002F18                 mov     rdx, rbx
.text:0000000000002F1B                 mov     rsi, rax
.text:0000000000002F1E                 mov     edi, 1
.text:0000000000002F23                 xor     eax, eax
.text:0000000000002F25                 call    ___printf_chk
.text:0000000000002F2A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F31                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000002F38                 mov     edx, 5          ; category
.text:0000000000002F3D                 xor     edi, edi        ; domainname
.text:0000000000002F3F                 call    _dcgettext
.text:0000000000002F44                 mov     rsi, rbx        ; stream
.text:0000000000002F47                 mov     rdi, rax        ; s
.text:0000000000002F4A                 call    _fputs_unlocked
.text:0000000000002F4F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F56                 lea     rsi, aBBinaryReadInB ; "\n  -b, --binary         read in binary"...
.text:0000000000002F5D                 mov     edx, 5          ; category
.text:0000000000002F62                 xor     edi, edi        ; domainname
.text:0000000000002F64                 call    _dcgettext
.text:0000000000002F69                 mov     rsi, rbx        ; stream
.text:0000000000002F6C                 mov     rdi, rax        ; s
.text:0000000000002F6F                 call    _fputs_unlocked
.text:0000000000002F74                 lea     rsi, aCCheckReadSSum ; "  -c, --check          read %s sums fro"...
.text:0000000000002F7B                 xor     edi, edi        ; domainname
.text:0000000000002F7D                 mov     edx, 5          ; category
.text:0000000000002F82                 call    _dcgettext
.text:0000000000002F87                 lea     rdx, aMd5       ; "MD5"
.text:0000000000002F8E                 mov     rsi, rax
.text:0000000000002F91                 mov     edi, 1
.text:0000000000002F96                 xor     eax, eax
.text:0000000000002F98                 call    ___printf_chk
.text:0000000000002F9D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002FA4                 lea     rsi, aTagCreateABsdS ; "      --tag            create a BSD-sty"...
.text:0000000000002FAB                 mov     edx, 5          ; category
.text:0000000000002FB0                 xor     edi, edi        ; domainname
.text:0000000000002FB2                 call    _dcgettext
.text:0000000000002FB7                 mov     rsi, rbx        ; stream
.text:0000000000002FBA                 mov     rdi, rax        ; s
.text:0000000000002FBD                 call    _fputs_unlocked
.text:0000000000002FC2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002FC9                 lea     rsi, aTTextReadInTex ; "  -t, --text           read in text mod"...
.text:0000000000002FD0                 mov     edx, 5          ; category
.text:0000000000002FD5                 xor     edi, edi        ; domainname
.text:0000000000002FD7                 call    _dcgettext
.text:0000000000002FDC                 mov     rsi, rbx        ; stream
.text:0000000000002FDF                 mov     rdi, rax        ; s
.text:0000000000002FE2                 call    _fputs_unlocked
.text:0000000000002FE7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002FEE                 lea     rsi, aZZeroEndEachOu ; "  -z, --zero           end each output "...
.text:0000000000002FF5                 mov     edx, 5          ; category
.text:0000000000002FFA                 xor     edi, edi        ; domainname
.text:0000000000002FFC                 call    _dcgettext
.text:0000000000003001                 mov     rsi, rbx        ; stream
.text:0000000000003004                 mov     rdi, rax        ; s
.text:0000000000003007                 call    _fputs_unlocked
.text:000000000000300C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003013                 lea     rsi, aTheFollowingFi ; "\nThe following five options are useful"...
.text:000000000000301A                 mov     edx, 5          ; category
.text:000000000000301F                 xor     edi, edi        ; domainname
.text:0000000000003021                 call    _dcgettext
.text:0000000000003026                 mov     rsi, rbx        ; stream
.text:0000000000003029                 mov     rdi, rax        ; s
.text:000000000000302C                 call    _fputs_unlocked
.text:0000000000003031                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003038                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000303F                 mov     edx, 5          ; category
.text:0000000000003044                 xor     edi, edi        ; domainname
.text:0000000000003046                 call    _dcgettext
.text:000000000000304B                 mov     rsi, rbx        ; stream
.text:000000000000304E                 mov     rdi, rax        ; s
.text:0000000000003051                 call    _fputs_unlocked
.text:0000000000003056                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000305D                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000003064                 mov     edx, 5          ; category
.text:0000000000003069                 xor     edi, edi        ; domainname
.text:000000000000306B                 call    _dcgettext
.text:0000000000003070                 mov     rsi, rbx        ; stream
.text:0000000000003073                 mov     rdi, rax        ; s
.text:0000000000003076                 lea     rbx, aMd5sum    ; "md5sum"
.text:000000000000307D                 call    _fputs_unlocked
.text:0000000000003082                 lea     rsi, aTheSumsAreComp ; "\nThe sums are computed as described in"...
.text:0000000000003089                 xor     edi, edi        ; domainname
.text:000000000000308B                 mov     edx, 5          ; category
.text:0000000000003090                 call    _dcgettext
.text:0000000000003095                 lea     rdx, aRfc1321   ; "RFC 1321"
.text:000000000000309C                 mov     rsi, rax
.text:000000000000309F                 mov     edi, 1
.text:00000000000030A4                 xor     eax, eax
.text:00000000000030A6                 call    ___printf_chk
.text:00000000000030AB                 lea     rax, asc_6E3E   ; "["
.text:00000000000030B2                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000030B9                 mov     [rsp+0A8h+var_48], 0
.text:00000000000030C2                 mov     [rsp+0A8h+var_40], 0
.text:00000000000030CB                 mov     rdx, rsp
.text:00000000000030CE                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000030D2                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000030D9                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000030DE                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000030E5                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000030EA                 lea     rax, domainname ; "coreutils"
.text:00000000000030F1                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000030F6                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000030FD                 mov     [rsp+0A8h+var_98], rax
.text:0000000000003102                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000003109                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000310E                 mov     [rsp+0A8h+var_90], rax
.text:0000000000003113                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000311A                 mov     [rsp+0A8h+var_88], rax
.text:000000000000311F                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000003126                 mov     [rsp+0A8h+var_80], rax
.text:000000000000312B                 mov     [rsp+0A8h+var_70], rax
.text:0000000000003130                 mov     [rsp+0A8h+var_60], rax
.text:0000000000003135                 mov     [rsp+0A8h+var_50], rax
.text:000000000000313A                 nop     word ptr [rax+rax+00h]
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: usage+2BD↓j
.text:0000000000003140                 add     rdx, 10h
.text:0000000000003144                 mov     rdi, [rdx]
.text:0000000000003147                 test    rdi, rdi
.text:000000000000314A                 jz      short loc_315F
.text:000000000000314C                 mov     ecx, 7
.text:0000000000003151                 mov     rsi, rbx
.text:0000000000003154                 repe cmpsb
.text:0000000000003156                 setnbe  al
.text:0000000000003159                 sbb     al, 0
.text:000000000000315B                 test    al, al
.text:000000000000315D                 jnz     short loc_3140
.text:000000000000315F
.text:000000000000315F loc_315F:                               ; CODE XREF: usage+2AA↑j
.text:000000000000315F                 mov     r12, [rdx+8]
.text:0000000000003163                 xor     edi, edi        ; domainname
.text:0000000000003165                 mov     edx, 5          ; category
.text:000000000000316A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003171                 test    r12, r12
.text:0000000000003174                 jz      loc_323B
.text:000000000000317A                 call    _dcgettext
.text:000000000000317F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003186                 lea     rdx, unk_6EB4
.text:000000000000318D                 mov     rsi, rax
.text:0000000000003190                 mov     edi, 1
.text:0000000000003195                 xor     eax, eax
.text:0000000000003197                 call    ___printf_chk
.text:000000000000319C                 xor     esi, esi        ; locale
.text:000000000000319E                 mov     edi, 5          ; category
.text:00000000000031A3                 call    _setlocale
.text:00000000000031A8                 test    rax, rax
.text:00000000000031AB                 jz      short loc_31C9
.text:00000000000031AD                 lea     rsi, s2         ; "en_"
.text:00000000000031B4                 mov     edx, 3          ; n
.text:00000000000031B9                 mov     rdi, rax        ; s1
.text:00000000000031BC                 call    _strncmp
.text:00000000000031C1                 test    eax, eax
.text:00000000000031C3                 jnz     loc_32D0
.text:00000000000031C9
.text:00000000000031C9 loc_31C9:                               ; CODE XREF: usage+30B↑j
.text:00000000000031C9                                         ; usage+455↓j
.text:00000000000031C9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000031D0                 xor     edi, edi        ; domainname
.text:00000000000031D2                 mov     edx, 5          ; category
.text:00000000000031D7                 call    _dcgettext
.text:00000000000031DC                 lea     rcx, aMd5sum    ; "md5sum"
.text:00000000000031E3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000031EA                 mov     rsi, rax
.text:00000000000031ED                 mov     edi, 1
.text:00000000000031F2                 xor     eax, eax
.text:00000000000031F4                 call    ___printf_chk
.text:00000000000031F9                 cmp     r12, rbx
.text:00000000000031FC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003203                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000320A                 cmovz   rbx, rcx
.text:000000000000320E
.text:000000000000320E loc_320E:                               ; CODE XREF: usage+424↓j
.text:000000000000320E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003215                 xor     edi, edi        ; domainname
.text:0000000000003217                 mov     edx, 5          ; category
.text:000000000000321C                 call    _dcgettext
.text:0000000000003221                 mov     rcx, rbx
.text:0000000000003224                 mov     rsi, rax
.text:0000000000003227                 mov     rdx, r12
.text:000000000000322A                 mov     edi, 1
.text:000000000000322F                 xor     eax, eax
.text:0000000000003231                 call    ___printf_chk
.text:0000000000003236                 jmp     loc_2EF6
.text:000000000000323B ; ---------------------------------------------------------------------------
.text:000000000000323B
.text:000000000000323B loc_323B:                               ; CODE XREF: usage+2D4↑j
.text:000000000000323B                 call    _dcgettext
.text:0000000000003240                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003247                 lea     rdx, unk_6EB4
.text:000000000000324E                 mov     rsi, rax
.text:0000000000003251                 mov     edi, 1
.text:0000000000003256                 xor     eax, eax
.text:0000000000003258                 call    ___printf_chk
.text:000000000000325D                 xor     esi, esi        ; locale
.text:000000000000325F                 mov     edi, 5          ; category
.text:0000000000003264                 call    _setlocale
.text:0000000000003269                 test    rax, rax
.text:000000000000326C                 jz      short loc_3286
.text:000000000000326E                 lea     rsi, s2         ; "en_"
.text:0000000000003275                 mov     edx, 3          ; n
.text:000000000000327A                 mov     rdi, rax        ; s1
.text:000000000000327D                 call    _strncmp
.text:0000000000003282                 test    eax, eax
.text:0000000000003284                 jnz     short loc_32C9
.text:0000000000003286
.text:0000000000003286 loc_3286:                               ; CODE XREF: usage+3CC↑j
.text:0000000000003286                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000328D                 mov     edx, 5          ; category
.text:0000000000003292                 xor     edi, edi        ; domainname
.text:0000000000003294                 lea     r12, aMd5sum    ; "md5sum"
.text:000000000000329B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000032A2                 call    _dcgettext
.text:00000000000032A7                 lea     rcx, aMd5sum    ; "md5sum"
.text:00000000000032AE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000032B5                 mov     rsi, rax
.text:00000000000032B8                 mov     edi, 1
.text:00000000000032BD                 xor     eax, eax
.text:00000000000032BF                 call    ___printf_chk
.text:00000000000032C4                 jmp     loc_320E
.text:00000000000032C9 ; ---------------------------------------------------------------------------
.text:00000000000032C9
.text:00000000000032C9 loc_32C9:                               ; CODE XREF: usage+3E4↑j
.text:00000000000032C9                 lea     r12, aMd5sum    ; "md5sum"
.text:00000000000032D0
.text:00000000000032D0 loc_32D0:                               ; CODE XREF: usage+323↑j
.text:00000000000032D0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000032D7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000032DE                 xor     edi, edi        ; domainname
.text:00000000000032E0                 mov     edx, 5          ; category
.text:00000000000032E5                 call    _dcgettext
.text:00000000000032EA                 mov     rsi, r13        ; stream
.text:00000000000032ED                 mov     rdi, rax        ; s
.text:00000000000032F0                 call    _fputs_unlocked
.text:00000000000032F5                 jmp     loc_31C9
.text:00000000000032F5 ; } // starts at 2EA0
.text:00000000000032F5 usage           endp
.text:00000000000032F5
.text:00000000000032F5 ; ---------------------------------------------------------------------------
.text:00000000000032FA                 align 20h
.text:0000000000003300
.text:0000000000003300 ; =============== S U B R O U T I N E =======================================
.text:0000000000003300
.text:0000000000003300
.text:0000000000003300                 public close_stdout_set_file_name
.text:0000000000003300 close_stdout_set_file_name proc near
.text:0000000000003300 ; __unwind {
.text:0000000000003300                 mov     cs:file_name, rdi
.text:0000000000003307                 retn
.text:0000000000003307 ; } // starts at 3300
.text:0000000000003307 close_stdout_set_file_name endp
.text:0000000000003307
.text:0000000000003307 ; ---------------------------------------------------------------------------
.text:0000000000003308                 align 10h
.text:0000000000003310
.text:0000000000003310 ; =============== S U B R O U T I N E =======================================
.text:0000000000003310
.text:0000000000003310
.text:0000000000003310                 public close_stdout_set_ignore_EPIPE
.text:0000000000003310 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003310 ; __unwind {
.text:0000000000003310                 mov     cs:ignore_EPIPE, dil
.text:0000000000003317                 retn
.text:0000000000003317 ; } // starts at 3310
.text:0000000000003317 close_stdout_set_ignore_EPIPE endp
.text:0000000000003317
.text:0000000000003317 ; ---------------------------------------------------------------------------
.text:0000000000003318                 align 20h
.text:0000000000003320
.text:0000000000003320 ; =============== S U B R O U T I N E =======================================
.text:0000000000003320
.text:0000000000003320 ; Attributes: info_from_lumina
.text:0000000000003320
.text:0000000000003320 ; void __cdecl close_stdout()
.text:0000000000003320                 public close_stdout
.text:0000000000003320 close_stdout    proc near               ; DATA XREF: main+67↑o
.text:0000000000003320 ; __unwind {
.text:0000000000003320                 push    rbp
.text:0000000000003321                 push    rbx
.text:0000000000003322                 sub     rsp, 8
.text:0000000000003326                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000332D                 call    close_stream
.text:0000000000003332                 test    eax, eax
.text:0000000000003334                 jz      short loc_334C
.text:0000000000003336                 call    ___errno_location
.text:000000000000333B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003342                 mov     rbx, rax
.text:0000000000003345                 jz      short loc_3363
.text:0000000000003347                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000334A                 jnz     short loc_3363
.text:000000000000334C
.text:000000000000334C loc_334C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000334C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003353                 call    close_stream
.text:0000000000003358                 test    eax, eax
.text:000000000000335A                 jnz     short loc_33A2
.text:000000000000335C                 add     rsp, 8
.text:0000000000003360                 pop     rbx
.text:0000000000003361                 pop     rbp
.text:0000000000003362                 retn
.text:0000000000003363 ; ---------------------------------------------------------------------------
.text:0000000000003363
.text:0000000000003363 loc_3363:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003363                                         ; close_stdout+2A↑j
.text:0000000000003363                 lea     rsi, aWriteError ; "write error"
.text:000000000000336A                 xor     edi, edi        ; domainname
.text:000000000000336C                 mov     edx, 5          ; category
.text:0000000000003371                 call    _dcgettext
.text:0000000000003376                 mov     rdi, cs:file_name
.text:000000000000337D                 mov     rbp, rax
.text:0000000000003380                 test    rdi, rdi
.text:0000000000003383                 jz      short loc_33AD
.text:0000000000003385                 call    quotearg_colon
.text:000000000000338A                 mov     esi, [rbx]      ; errnum
.text:000000000000338C                 lea     rdx, aS_0       ; "%s: "
.text:0000000000003393                 mov     rcx, rax
.text:0000000000003396                 mov     r8, rbp
.text:0000000000003399                 xor     edi, edi        ; status
.text:000000000000339B                 xor     eax, eax
.text:000000000000339D                 call    _error
.text:00000000000033A2
.text:00000000000033A2 loc_33A2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000033A2                                         ; close_stdout+A2↓j
.text:00000000000033A2                 mov     edi, cs:exit_failure ; status
.text:00000000000033A8                 call    __exit
.text:00000000000033AD ; ---------------------------------------------------------------------------
.text:00000000000033AD
.text:00000000000033AD loc_33AD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000033AD                 mov     esi, [rbx]      ; errnum
.text:00000000000033AF                 lea     rdx, format     ; format
.text:00000000000033B6                 mov     rcx, rax
.text:00000000000033B9                 xor     edi, edi        ; status
.text:00000000000033BB                 xor     eax, eax
.text:00000000000033BD                 call    _error
.text:00000000000033C2                 jmp     short loc_33A2
.text:00000000000033C2 ; } // starts at 3320
.text:00000000000033C2 close_stdout    endp
.text:00000000000033C2
.text:00000000000033C2 ; ---------------------------------------------------------------------------
.text:00000000000033C4                 align 10h
.text:00000000000033D0
.text:00000000000033D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033D0
.text:00000000000033D0 ; Attributes: info_from_lumina
.text:00000000000033D0
.text:00000000000033D0 ; void __fastcall md5_init_ctx(md5_ctx *ctx)
.text:00000000000033D0                 public md5_init_ctx
.text:00000000000033D0 md5_init_ctx    proc near
.text:00000000000033D0 ; __unwind {
.text:00000000000033D0                 mov     rax, 0EFCDAB8967452301h
.text:00000000000033DA                 mov     qword ptr [rdi+10h], 0
.text:00000000000033E2                 mov     dword ptr [rdi+18h], 0
.text:00000000000033E9                 mov     [rdi], rax
.text:00000000000033EC                 mov     rax, 1032547698BADCFEh
.text:00000000000033F6                 mov     [rdi+8], rax
.text:00000000000033FA                 retn
.text:00000000000033FA ; } // starts at 33D0
.text:00000000000033FA md5_init_ctx    endp
.text:00000000000033FA
.text:00000000000033FA ; ---------------------------------------------------------------------------
.text:00000000000033FB                 align 20h
.text:0000000000003400
.text:0000000000003400 ; =============== S U B R O U T I N E =======================================
.text:0000000000003400
.text:0000000000003400
.text:0000000000003400                 public md5_read_ctx
.text:0000000000003400 md5_read_ctx    proc near               ; CODE XREF: md5_finish_ctx+F2↓j
.text:0000000000003400 ; __unwind {
.text:0000000000003400                 mov     edx, [rdi]
.text:0000000000003402                 mov     rax, rsi
.text:0000000000003405                 mov     [rsi], edx
.text:0000000000003407                 mov     edx, [rdi+4]
.text:000000000000340A                 mov     [rsi+4], edx
.text:000000000000340D                 mov     edx, [rdi+8]
.text:0000000000003410                 mov     [rsi+8], edx
.text:0000000000003413                 mov     edx, [rdi+0Ch]
.text:0000000000003416                 mov     [rsi+0Ch], edx
.text:0000000000003419                 retn
.text:0000000000003419 ; } // starts at 3400
.text:0000000000003419 md5_read_ctx    endp
.text:0000000000003419
.text:0000000000003419 ; ---------------------------------------------------------------------------
.text:000000000000341A                 align 20h
.text:0000000000003420
.text:0000000000003420 ; =============== S U B R O U T I N E =======================================
.text:0000000000003420
.text:0000000000003420 ; Attributes: info_from_lumina
.text:0000000000003420
.text:0000000000003420 ; void __fastcall md5_process_block(const void *buffer, size_t len, md5_ctx *ctx)
.text:0000000000003420                 public md5_process_block
.text:0000000000003420 md5_process_block proc near             ; CODE XREF: md5_finish_ctx+E5↓p
.text:0000000000003420                                         ; md5_process_bytes+8A↓p ...
.text:0000000000003420
.text:0000000000003420 var_74          = dword ptr -74h
.text:0000000000003420 var_70          = dword ptr -70h
.text:0000000000003420 var_6C          = dword ptr -6Ch
.text:0000000000003420 var_68          = dword ptr -68h
.text:0000000000003420 var_64          = dword ptr -64h
.text:0000000000003420 var_60          = dword ptr -60h
.text:0000000000003420 var_5C          = dword ptr -5Ch
.text:0000000000003420 var_58          = dword ptr -58h
.text:0000000000003420 var_54          = dword ptr -54h
.text:0000000000003420 var_50          = dword ptr -50h
.text:0000000000003420 var_4C          = dword ptr -4Ch
.text:0000000000003420 var_48          = dword ptr -48h
.text:0000000000003420 var_44          = dword ptr -44h
.text:0000000000003420 var_40          = qword ptr -40h
.text:0000000000003420 var_38          = qword ptr -38h
.text:0000000000003420
.text:0000000000003420 ; __unwind {
.text:0000000000003420                 mov     rax, rsi
.text:0000000000003423                 push    r15
.text:0000000000003425                 push    r14
.text:0000000000003427                 and     rax, 0FFFFFFFFFFFFFFFCh
.text:000000000000342B                 push    r13
.text:000000000000342D                 push    r12
.text:000000000000342F                 push    rbp
.text:0000000000003430                 push    rbx
.text:0000000000003431                 mov     rbx, rdi
.text:0000000000003434                 lea     rcx, [rbx+rax]
.text:0000000000003438                 mov     eax, [rdx]
.text:000000000000343A                 mov     rdi, rdx
.text:000000000000343D                 mov     r11d, [rdx+4]
.text:0000000000003441                 mov     r10d, [rdx+8]
.text:0000000000003445                 mov     [rsp+30h+var_38], rdx
.text:000000000000344A                 mov     [rsp+30h+var_40], rcx
.text:000000000000344F                 mov     [rsp+30h+var_48], eax
.text:0000000000003453                 mov     eax, [rdx+0Ch]
.text:0000000000003456                 mov     edx, esi
.text:0000000000003458                 mov     [rsp+30h+var_50], eax
.text:000000000000345C                 xor     eax, eax
.text:000000000000345E                 add     edx, [rdi+10h]
.text:0000000000003461                 setb    al
.text:0000000000003464                 shr     rsi, 20h
.text:0000000000003468                 add     esi, [rdi+14h]
.text:000000000000346B                 mov     [rdi+10h], edx
.text:000000000000346E                 add     esi, eax
.text:0000000000003470                 cmp     rbx, rcx
.text:0000000000003473                 mov     [rdi+14h], esi
.text:0000000000003476                 jnb     loc_3B6A
.text:000000000000347C                 mov     r15d, r10d
.text:000000000000347F                 nop
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: md5_process_block+741↓j
.text:0000000000003480                 mov     r14d, [rbx]
.text:0000000000003483                 mov     edi, [rsp+30h+var_50]
.text:0000000000003487                 mov     eax, [rsp+30h+var_48]
.text:000000000000348B                 mov     esi, [rbx+4]
.text:000000000000348E                 mov     r8d, [rbx+0Ch]
.text:0000000000003492                 mov     r10d, [rbx+14h]
.text:0000000000003496                 mov     ebp, [rbx+18h]
.text:0000000000003499                 mov     r13d, [rbx+1Ch]
.text:000000000000349D                 lea     edx, [r14+rax-28955B88h]
.text:00000000000034A5                 mov     eax, edi
.text:00000000000034A7                 lea     ecx, [rsi+rdi-173848AAh]
.text:00000000000034AE                 xor     eax, r15d
.text:00000000000034B1                 mov     [rsp+30h+var_74], esi
.text:00000000000034B5                 mov     [rsp+30h+var_64], r10d
.text:00000000000034BA                 and     eax, r11d
.text:00000000000034BD                 mov     r12d, [rbx+24h]
.text:00000000000034C1                 mov     [rsp+30h+var_6C], r8d
.text:00000000000034C6                 xor     eax, edi
.text:00000000000034C8                 lea     edi, [r8+r11-3E423112h]
.text:00000000000034D0                 mov     r8d, [rbx+2Ch]
.text:00000000000034D4                 add     eax, edx
.text:00000000000034D6                 mov     edx, r11d
.text:00000000000034D9                 rol     eax, 7
.text:00000000000034DC                 xor     edx, r15d
.text:00000000000034DF                 mov     [rsp+30h+var_5C], r12d
.text:00000000000034E4                 add     eax, r11d
.text:00000000000034E7                 mov     [rsp+30h+var_54], r8d
.text:00000000000034EC                 and     edx, eax
.text:00000000000034EE                 mov     r9d, eax
.text:00000000000034F1                 xor     edx, r15d
.text:00000000000034F4                 xor     r9d, r11d
.text:00000000000034F7                 add     edx, ecx
.text:00000000000034F9                 mov     ecx, [rbx+8]
.text:00000000000034FC                 rol     edx, 0Ch
.text:00000000000034FF                 add     edx, eax
.text:0000000000003501                 lea     esi, [rcx+r15+242070DBh]
.text:0000000000003509                 mov     [rsp+30h+var_70], ecx
.text:000000000000350D                 mov     ecx, r9d
.text:0000000000003510                 and     ecx, edx
.text:0000000000003512                 mov     r9d, eax
.text:0000000000003515                 xor     ecx, r11d
.text:0000000000003518                 xor     r9d, edx
.text:000000000000351B                 add     ecx, esi
.text:000000000000351D                 mov     esi, r9d
.text:0000000000003520                 mov     r9d, [rbx+10h]
.text:0000000000003524                 ror     ecx, 0Fh
.text:0000000000003527                 add     ecx, edx
.text:0000000000003529                 and     esi, ecx
.text:000000000000352B                 mov     [rsp+30h+var_68], r9d
.text:0000000000003530                 xor     esi, eax
.text:0000000000003532                 add     esi, edi
.text:0000000000003534                 lea     edi, [r9+rax-0A83F051h]
.text:000000000000353C                 mov     eax, edx
.text:000000000000353E                 ror     esi, 0Ah
.text:0000000000003541                 xor     eax, ecx
.text:0000000000003543                 mov     r9d, [rbx+3Ch]
.text:0000000000003547                 add     esi, ecx
.text:0000000000003549                 and     eax, esi
.text:000000000000354B                 xor     eax, edx
.text:000000000000354D                 add     eax, edi
.text:000000000000354F                 lea     edi, [r10+rdx+4787C62Ah]
.text:0000000000003557                 mov     edx, ecx
.text:0000000000003559                 rol     eax, 7
.text:000000000000355C                 xor     edx, esi
.text:000000000000355E                 mov     r10d, ebp
.text:0000000000003561                 add     eax, esi
.text:0000000000003563                 mov     [rsp+30h+var_4C], r10d
.text:0000000000003568                 and     edx, eax
.text:000000000000356A                 xor     edx, ecx
.text:000000000000356C                 add     edx, edi
.text:000000000000356E                 lea     edi, [rbp+rcx-57CFB9EDh]
.text:0000000000003575                 mov     ebp, esi
.text:0000000000003577                 xor     ebp, eax
.text:0000000000003579                 rol     edx, 0Ch
.text:000000000000357C                 add     edx, eax
.text:000000000000357E                 mov     ecx, ebp
.text:0000000000003580                 mov     ebp, eax
.text:0000000000003582                 and     ecx, edx
.text:0000000000003584                 xor     ebp, edx
.text:0000000000003586                 xor     ecx, esi
.text:0000000000003588                 add     ecx, edi
.text:000000000000358A                 lea     edi, [r13+rsi-2B96AFFh]
.text:0000000000003592                 mov     esi, ebp
.text:0000000000003594                 ror     ecx, 0Fh
.text:0000000000003597                 mov     ebp, [rbx+20h]
.text:000000000000359A                 add     ecx, edx
.text:000000000000359C                 and     esi, ecx
.text:000000000000359E                 xor     esi, eax
.text:00000000000035A0                 mov     [rsp+30h+var_60], ebp
.text:00000000000035A4                 add     esi, edi
.text:00000000000035A6                 lea     edi, [rbp+rax+698098D8h]
.text:00000000000035AD                 mov     eax, edx
.text:00000000000035AF                 ror     esi, 0Ah
.text:00000000000035B2                 xor     eax, ecx
.text:00000000000035B4                 mov     ebp, [rbx+30h]
.text:00000000000035B7                 add     esi, ecx
.text:00000000000035B9                 and     eax, esi
.text:00000000000035BB                 xor     eax, edx
.text:00000000000035BD                 add     eax, edi
.text:00000000000035BF                 lea     edi, [r12+rdx-74BB0851h]
.text:00000000000035C7                 mov     edx, ecx
.text:00000000000035C9                 rol     eax, 7
.text:00000000000035CC                 xor     edx, esi
.text:00000000000035CE                 mov     r12d, [rbx+38h]
.text:00000000000035D2                 add     eax, esi
.text:00000000000035D4                 and     edx, eax
.text:00000000000035D6                 xor     edx, ecx
.text:00000000000035D8                 add     edx, edi
.text:00000000000035DA                 mov     edi, [rbx+28h]
.text:00000000000035DD                 rol     edx, 0Ch
.text:00000000000035E0                 add     edx, eax
.text:00000000000035E2                 mov     [rsp+30h+var_58], edi
.text:00000000000035E6                 lea     edi, [rdi+rcx-0A44Fh]
.text:00000000000035ED                 mov     ecx, esi
.text:00000000000035EF                 xor     ecx, eax
.text:00000000000035F1                 and     ecx, edx
.text:00000000000035F3                 xor     ecx, esi
.text:00000000000035F5                 add     ecx, edi
.text:00000000000035F7                 lea     edi, [r8+rsi-76A32842h]
.text:00000000000035FF                 mov     esi, eax
.text:0000000000003601                 ror     ecx, 0Fh
.text:0000000000003604                 xor     esi, edx
.text:0000000000003606                 mov     r8d, [rbx+34h]
.text:000000000000360A                 add     ecx, edx
.text:000000000000360C                 add     rbx, 40h ; '@'
.text:0000000000003610                 and     esi, ecx
.text:0000000000003612                 xor     esi, eax
.text:0000000000003614                 add     esi, edi
.text:0000000000003616                 lea     edi, [rbp+rax+6B901122h]
.text:000000000000361D                 mov     eax, edx
.text:000000000000361F                 ror     esi, 0Ah
.text:0000000000003622                 xor     eax, ecx
.text:0000000000003624                 add     esi, ecx
.text:0000000000003626                 and     eax, esi
.text:0000000000003628                 xor     eax, edx
.text:000000000000362A                 add     eax, edi
.text:000000000000362C                 lea     edi, [r8+rdx-2678E6Dh]
.text:0000000000003634                 mov     edx, ecx
.text:0000000000003636                 rol     eax, 7
.text:0000000000003639                 xor     edx, esi
.text:000000000000363B                 add     eax, esi
.text:000000000000363D                 and     edx, eax
.text:000000000000363F                 xor     edx, ecx
.text:0000000000003641                 add     edx, edi
.text:0000000000003643                 lea     edi, [r12+rcx-5986BC72h]
.text:000000000000364B                 mov     ecx, esi
.text:000000000000364D                 rol     edx, 0Ch
.text:0000000000003650                 xor     ecx, eax
.text:0000000000003652                 add     edx, eax
.text:0000000000003654                 and     ecx, edx
.text:0000000000003656                 xor     ecx, esi
.text:0000000000003658                 add     ecx, edi
.text:000000000000365A                 lea     edi, [r9+rsi+49B40821h]
.text:0000000000003662                 mov     esi, eax
.text:0000000000003664                 ror     ecx, 0Fh
.text:0000000000003667                 xor     esi, edx
.text:0000000000003669                 add     ecx, edx
.text:000000000000366B                 and     esi, ecx
.text:000000000000366D                 xor     esi, eax
.text:000000000000366F                 add     esi, edi
.text:0000000000003671                 mov     edi, [rsp+30h+var_74]
.text:0000000000003675                 ror     esi, 0Ah
.text:0000000000003678                 add     esi, ecx
.text:000000000000367A                 lea     edi, [rdi+rax-9E1DA9Eh]
.text:0000000000003681                 mov     eax, ecx
.text:0000000000003683                 xor     eax, esi
.text:0000000000003685                 and     eax, edx
.text:0000000000003687                 xor     eax, ecx
.text:0000000000003689                 add     eax, edi
.text:000000000000368B                 lea     edi, [r10+rdx-3FBF4CC0h]
.text:0000000000003693                 mov     edx, esi
.text:0000000000003695                 rol     eax, 5
.text:0000000000003698                 add     eax, esi
.text:000000000000369A                 xor     edx, eax
.text:000000000000369C                 and     edx, ecx
.text:000000000000369E                 xor     edx, esi
.text:00000000000036A0                 add     edx, edi
.text:00000000000036A2                 mov     edi, [rsp+30h+var_54]
.text:00000000000036A6                 rol     edx, 9
.text:00000000000036A9                 add     edx, eax
.text:00000000000036AB                 lea     edi, [rdi+rcx+265E5A51h]
.text:00000000000036B2                 mov     ecx, eax
.text:00000000000036B4                 xor     ecx, edx
.text:00000000000036B6                 and     ecx, esi
.text:00000000000036B8                 xor     ecx, eax
.text:00000000000036BA                 add     ecx, edi
.text:00000000000036BC                 lea     edi, [r14+rsi-16493856h]
.text:00000000000036C4                 mov     esi, edx
.text:00000000000036C6                 rol     ecx, 0Eh
.text:00000000000036C9                 add     ecx, edx
.text:00000000000036CB                 xor     esi, ecx
.text:00000000000036CD                 and     esi, eax
.text:00000000000036CF                 xor     esi, edx
.text:00000000000036D1                 add     esi, edi
.text:00000000000036D3                 mov     edi, [rsp+30h+var_64]
.text:00000000000036D7                 ror     esi, 0Ch
.text:00000000000036DA                 add     esi, ecx
.text:00000000000036DC                 lea     edi, [rdi+rax-29D0EFA3h]
.text:00000000000036E3                 mov     eax, ecx
.text:00000000000036E5                 xor     eax, esi
.text:00000000000036E7                 and     eax, edx
.text:00000000000036E9                 xor     eax, ecx
.text:00000000000036EB                 add     eax, edi
.text:00000000000036ED                 mov     edi, [rsp+30h+var_58]
.text:00000000000036F1                 rol     eax, 5
.text:00000000000036F4                 add     eax, esi
.text:00000000000036F6                 lea     edi, [rdi+rdx+2441453h]
.text:00000000000036FD                 mov     edx, esi
.text:00000000000036FF                 xor     edx, eax
.text:0000000000003701                 and     edx, ecx
.text:0000000000003703                 xor     edx, esi
.text:0000000000003705                 add     edx, edi
.text:0000000000003707                 lea     edi, [r9+rcx-275E197Fh]
.text:000000000000370F                 mov     ecx, eax
.text:0000000000003711                 rol     edx, 9
.text:0000000000003714                 add     edx, eax
.text:0000000000003716                 xor     ecx, edx
.text:0000000000003718                 and     ecx, esi
.text:000000000000371A                 xor     ecx, eax
.text:000000000000371C                 add     ecx, edi
.text:000000000000371E                 mov     edi, [rsp+30h+var_68]
.text:0000000000003722                 mov     r10d, [rsp+30h+var_5C]
.text:0000000000003727                 rol     ecx, 0Eh
.text:000000000000372A                 add     ecx, edx
.text:000000000000372C                 lea     edi, [rdi+rsi-182C0438h]
.text:0000000000003733                 mov     esi, edx
.text:0000000000003735                 xor     esi, ecx
.text:0000000000003737                 and     esi, eax
.text:0000000000003739                 xor     esi, edx
.text:000000000000373B                 add     esi, edi
.text:000000000000373D                 lea     edi, [r10+rax+21E1CDE6h]
.text:0000000000003745                 mov     eax, ecx
.text:0000000000003747                 ror     esi, 0Ch
.text:000000000000374A                 mov     r10d, [rsp+30h+var_60]
.text:000000000000374F                 add     esi, ecx
.text:0000000000003751                 xor     eax, esi
.text:0000000000003753                 and     eax, edx
.text:0000000000003755                 xor     eax, ecx
.text:0000000000003757                 add     eax, edi
.text:0000000000003759                 lea     edi, [r12+rdx-3CC8F82Ah]
.text:0000000000003761                 mov     edx, esi
.text:0000000000003763                 rol     eax, 5
.text:0000000000003766                 add     eax, esi
.text:0000000000003768                 xor     edx, eax
.text:000000000000376A                 and     edx, ecx
.text:000000000000376C                 xor     edx, esi
.text:000000000000376E                 add     edx, edi
.text:0000000000003770                 mov     edi, [rsp+30h+var_6C]
.text:0000000000003774                 rol     edx, 9
.text:0000000000003777                 add     edx, eax
.text:0000000000003779                 lea     edi, [rdi+rcx-0B2AF279h]
.text:0000000000003780                 mov     ecx, eax
.text:0000000000003782                 xor     ecx, edx
.text:0000000000003784                 and     ecx, esi
.text:0000000000003786                 lea     esi, [r10+rsi+455A14EDh]
.text:000000000000378E                 mov     r10d, edx
.text:0000000000003791                 xor     ecx, eax
.text:0000000000003793                 add     ecx, edi
.text:0000000000003795                 rol     ecx, 0Eh
.text:0000000000003798                 add     ecx, edx
.text:000000000000379A                 xor     r10d, ecx
.text:000000000000379D                 mov     edi, r10d
.text:00000000000037A0                 and     edi, eax
.text:00000000000037A2                 xor     edi, edx
.text:00000000000037A4                 add     edi, esi
.text:00000000000037A6                 lea     esi, [r8+rax-561C16FBh]
.text:00000000000037AE                 mov     eax, ecx
.text:00000000000037B0                 ror     edi, 0Ch
.text:00000000000037B3                 add     edi, ecx
.text:00000000000037B5                 xor     eax, edi
.text:00000000000037B7                 lea     r10d, [rbp+rdi-72D5B376h]
.text:00000000000037BF                 and     eax, edx
.text:00000000000037C1                 xor     eax, ecx
.text:00000000000037C3                 mov     [rsp+30h+var_44], r10d
.text:00000000000037C8                 add     eax, esi
.text:00000000000037CA                 mov     esi, [rsp+30h+var_70]
.text:00000000000037CE                 rol     eax, 5
.text:00000000000037D1                 add     eax, edi
.text:00000000000037D3                 lea     esi, [rsi+rdx-3105C08h]
.text:00000000000037DA                 mov     edx, edi
.text:00000000000037DC                 xor     edx, eax
.text:00000000000037DE                 and     edx, ecx
.text:00000000000037E0                 lea     ecx, [r13+rcx+676F02D9h]
.text:00000000000037E8                 xor     edx, edi
.text:00000000000037EA                 add     edx, esi
.text:00000000000037EC                 mov     esi, eax
.text:00000000000037EE                 rol     edx, 9
.text:00000000000037F1                 add     edx, eax
.text:00000000000037F3                 xor     esi, edx
.text:00000000000037F5                 and     esi, edi
.text:00000000000037F7                 xor     esi, eax
.text:00000000000037F9                 add     esi, ecx
.text:00000000000037FB                 mov     ecx, edx
.text:00000000000037FD                 rol     esi, 0Eh
.text:0000000000003800                 add     esi, edx
.text:0000000000003802                 xor     ecx, esi
.text:0000000000003804                 mov     r10d, ecx
.text:0000000000003807                 and     r10d, eax
.text:000000000000380A                 mov     edi, r10d
.text:000000000000380D                 mov     r10d, [rsp+30h+var_64]
.text:0000000000003812                 xor     edi, edx
.text:0000000000003814                 add     edi, [rsp+30h+var_44]
.text:0000000000003818                 lea     eax, [r10+rax-5C6BEh]
.text:0000000000003820                 ror     edi, 0Ch
.text:0000000000003823                 add     edi, esi
.text:0000000000003825                 xor     ecx, edi
.text:0000000000003827                 add     ecx, eax
.text:0000000000003829                 mov     eax, [rsp+30h+var_60]
.text:000000000000382D                 rol     ecx, 4
.text:0000000000003830                 add     ecx, edi
.text:0000000000003832                 lea     eax, [rax+rdx-788E097Fh]
.text:0000000000003839                 mov     edx, esi
.text:000000000000383B                 xor     edx, edi
.text:000000000000383D                 xor     edx, ecx
.text:000000000000383F                 add     edx, eax
.text:0000000000003841                 mov     eax, [rsp+30h+var_54]
.text:0000000000003845                 rol     edx, 0Bh
.text:0000000000003848                 add     edx, ecx
.text:000000000000384A                 lea     eax, [rax+rsi+6D9D6122h]
.text:0000000000003851                 mov     esi, edi
.text:0000000000003853                 lea     edi, [r12+rdi-21AC7F4h]
.text:000000000000385B                 xor     esi, ecx
.text:000000000000385D                 xor     esi, edx
.text:000000000000385F                 add     esi, eax
.text:0000000000003861                 mov     eax, ecx
.text:0000000000003863                 rol     esi, 10h
.text:0000000000003866                 xor     eax, edx
.text:0000000000003868                 add     esi, edx
.text:000000000000386A                 xor     eax, esi
.text:000000000000386C                 mov     r10d, esi
.text:000000000000386F                 add     eax, edi
.text:0000000000003871                 mov     edi, [rsp+30h+var_74]
.text:0000000000003875                 ror     eax, 9
.text:0000000000003878                 add     eax, esi
.text:000000000000387A                 lea     edi, [rdi+rcx-5B4115BCh]
.text:0000000000003881                 mov     ecx, edx
.text:0000000000003883                 xor     r10d, eax
.text:0000000000003886                 xor     ecx, esi
.text:0000000000003888                 lea     esi, [r13+rsi-944B4A0h]
.text:0000000000003890                 xor     ecx, eax
.text:0000000000003892                 add     ecx, edi
.text:0000000000003894                 mov     edi, [rsp+30h+var_68]
.text:0000000000003898                 rol     ecx, 4
.text:000000000000389B                 add     ecx, eax
.text:000000000000389D                 lea     edx, [rdi+rdx+4BDECFA9h]
.text:00000000000038A4                 mov     edi, r10d
.text:00000000000038A7                 xor     edi, ecx
.text:00000000000038A9                 add     edi, edx
.text:00000000000038AB                 mov     edx, eax
.text:00000000000038AD                 rol     edi, 0Bh
.text:00000000000038B0                 xor     edx, ecx
.text:00000000000038B2                 add     edi, ecx
.text:00000000000038B4                 xor     edx, edi
.text:00000000000038B6                 add     edx, esi
.text:00000000000038B8                 mov     esi, [rsp+30h+var_58]
.text:00000000000038BC                 rol     edx, 10h
.text:00000000000038BF                 add     edx, edi
.text:00000000000038C1                 lea     eax, [rsi+rax-41404390h]
.text:00000000000038C8                 mov     esi, ecx
.text:00000000000038CA                 xor     esi, edi
.text:00000000000038CC                 xor     esi, edx
.text:00000000000038CE                 add     esi, eax
.text:00000000000038D0                 lea     eax, [r8+rcx+289B7EC6h]
.text:00000000000038D8                 mov     ecx, edi
.text:00000000000038DA                 ror     esi, 9
.text:00000000000038DD                 xor     ecx, edx
.text:00000000000038DF                 lea     edi, [r14+rdi-155ED806h]
.text:00000000000038E7                 add     esi, edx
.text:00000000000038E9                 xor     ecx, esi
.text:00000000000038EB                 mov     r10d, esi
.text:00000000000038EE                 add     ecx, eax
.text:00000000000038F0                 mov     eax, edx
.text:00000000000038F2                 rol     ecx, 4
.text:00000000000038F5                 xor     eax, esi
.text:00000000000038F7                 add     ecx, esi
.text:00000000000038F9                 xor     eax, ecx
.text:00000000000038FB                 xor     r10d, ecx
.text:00000000000038FE                 add     eax, edi
.text:0000000000003900                 mov     edi, [rsp+30h+var_6C]
.text:0000000000003904                 rol     eax, 0Bh
.text:0000000000003907                 add     eax, ecx
.text:0000000000003909                 lea     edx, [rdi+rdx-2B10CF7Bh]
.text:0000000000003910                 mov     edi, r10d
.text:0000000000003913                 xor     edi, eax
.text:0000000000003915                 add     edi, edx
.text:0000000000003917                 mov     edx, [rsp+30h+var_4C]
.text:000000000000391B                 rol     edi, 10h
.text:000000000000391E                 add     edi, eax
.text:0000000000003920                 lea     edx, [rdx+rsi+4881D05h]
.text:0000000000003927                 mov     esi, ecx
.text:0000000000003929                 xor     esi, eax
.text:000000000000392B                 xor     esi, edi
.text:000000000000392D                 add     esi, edx
.text:000000000000392F                 mov     edx, [rsp+30h+var_5C]
.text:0000000000003933                 ror     esi, 9
.text:0000000000003936                 add     esi, edi
.text:0000000000003938                 lea     ecx, [rdx+rcx-262B2FC7h]
.text:000000000000393F                 mov     edx, eax
.text:0000000000003941                 lea     eax, [rbp+rax-1924661Bh]
.text:0000000000003948                 xor     edx, edi
.text:000000000000394A                 mov     r10d, esi
.text:000000000000394D                 xor     edx, esi
.text:000000000000394F                 add     edx, ecx
.text:0000000000003951                 mov     ecx, edi
.text:0000000000003953                 rol     edx, 4
.text:0000000000003956                 add     edx, esi
.text:0000000000003958                 xor     ecx, esi
.text:000000000000395A                 xor     ecx, edx
.text:000000000000395C                 xor     r10d, edx
.text:000000000000395F                 add     ecx, eax
.text:0000000000003961                 lea     eax, [r9+rdi+1FA27CF8h]
.text:0000000000003969                 mov     edi, r10d
.text:000000000000396C                 rol     ecx, 0Bh
.text:000000000000396F                 mov     r10d, [rsp+30h+var_64]
.text:0000000000003974                 add     ecx, edx
.text:0000000000003976                 xor     edi, ecx
.text:0000000000003978                 add     edi, eax
.text:000000000000397A                 mov     eax, [rsp+30h+var_70]
.text:000000000000397E                 rol     edi, 10h
.text:0000000000003981                 add     edi, ecx
.text:0000000000003983                 lea     esi, [rax+rsi-3B53A99Bh]
.text:000000000000398A                 mov     eax, edx
.text:000000000000398C                 xor     eax, ecx
.text:000000000000398E                 xor     eax, edi
.text:0000000000003990                 add     eax, esi
.text:0000000000003992                 lea     esi, [r14+rdx-0BD6DDBCh]
.text:000000000000399A                 mov     edx, ecx
.text:000000000000399C                 ror     eax, 9
.text:000000000000399F                 not     edx
.text:00000000000039A1                 mov     r14d, [rsp+30h+var_74]
.text:00000000000039A6                 add     eax, edi
.text:00000000000039A8                 or      edx, eax
.text:00000000000039AA                 xor     edx, edi
.text:00000000000039AC                 add     edx, esi
.text:00000000000039AE                 lea     esi, [r13+rcx+432AFF97h]
.text:00000000000039B6                 mov     r13d, edi
.text:00000000000039B9                 rol     edx, 6
.text:00000000000039BC                 not     r13d
.text:00000000000039BF                 lea     edi, [r12+rdi-546BDC59h]
.text:00000000000039C7                 add     edx, eax
.text:00000000000039C9                 mov     ecx, r13d
.text:00000000000039CC                 or      ecx, edx
.text:00000000000039CE                 mov     r13d, edx
.text:00000000000039D1                 xor     ecx, eax
.text:00000000000039D3                 not     r13d
.text:00000000000039D6                 add     ecx, esi
.text:00000000000039D8                 mov     esi, eax
.text:00000000000039DA                 rol     ecx, 0Ah
.text:00000000000039DD                 not     esi
.text:00000000000039DF                 add     ecx, edx
.text:00000000000039E1                 or      esi, ecx
.text:00000000000039E3                 mov     r12d, ecx
.text:00000000000039E6                 xor     esi, edx
.text:00000000000039E8                 not     r12d
.text:00000000000039EB                 add     esi, edi
.text:00000000000039ED                 lea     edi, [r10+rax-36C5FC7h]
.text:00000000000039F5                 mov     eax, r13d
.text:00000000000039F8                 rol     esi, 0Fh
.text:00000000000039FB                 mov     r10d, [rsp+30h+var_4C]
.text:0000000000003A00                 add     esi, ecx
.text:0000000000003A02                 or      eax, esi
.text:0000000000003A04                 xor     eax, ecx
.text:0000000000003A06                 add     eax, edi
.text:0000000000003A08                 lea     edi, [rbp+rdx+655B59C3h]
.text:0000000000003A0F                 mov     ebp, [rsp+30h+var_6C]
.text:0000000000003A13                 ror     eax, 0Bh
.text:0000000000003A16                 mov     edx, r12d
.text:0000000000003A19                 add     eax, esi
.text:0000000000003A1B                 or      edx, eax
.text:0000000000003A1D                 xor     edx, esi
.text:0000000000003A1F                 add     edx, edi
.text:0000000000003A21                 lea     edi, [rbp+rcx-70F3336Eh]
.text:0000000000003A28                 mov     ebp, esi
.text:0000000000003A2A                 rol     edx, 6
.text:0000000000003A2D                 not     ebp
.text:0000000000003A2F                 add     edx, eax
.text:0000000000003A31                 mov     ecx, ebp
.text:0000000000003A33                 or      ecx, edx
.text:0000000000003A35                 mov     ebp, edx
.text:0000000000003A37                 xor     ecx, eax
.text:0000000000003A39                 not     ebp
.text:0000000000003A3B                 add     ecx, edi
.text:0000000000003A3D                 mov     edi, [rsp+30h+var_58]
.text:0000000000003A41                 rol     ecx, 0Ah
.text:0000000000003A44                 add     ecx, edx
.text:0000000000003A46                 lea     edi, [rdi+rsi-100B83h]
.text:0000000000003A4D                 mov     esi, eax
.text:0000000000003A4F                 not     esi
.text:0000000000003A51                 or      esi, ecx
.text:0000000000003A53                 xor     esi, edx
.text:0000000000003A55                 add     esi, edi
.text:0000000000003A57                 lea     edi, [r14+rax-7A7BA22Fh]
.text:0000000000003A5F                 mov     eax, ebp
.text:0000000000003A61                 rol     esi, 0Fh
.text:0000000000003A64                 mov     r14d, [rsp+30h+var_60]
.text:0000000000003A69                 mov     ebp, ecx
.text:0000000000003A6B                 add     esi, ecx
.text:0000000000003A6D                 not     ebp
.text:0000000000003A6F                 or      eax, esi
.text:0000000000003A71                 xor     eax, ecx
.text:0000000000003A73                 add     eax, edi
.text:0000000000003A75                 lea     edi, [r14+rdx+6FA87E4Fh]
.text:0000000000003A7D                 mov     edx, ebp
.text:0000000000003A7F                 ror     eax, 0Bh
.text:0000000000003A82                 mov     ebp, esi
.text:0000000000003A84                 mov     r14d, [rsp+30h+var_54]
.text:0000000000003A89                 add     eax, esi
.text:0000000000003A8B                 not     ebp
.text:0000000000003A8D                 or      edx, eax
.text:0000000000003A8F                 xor     edx, esi
.text:0000000000003A91                 add     edx, edi
.text:0000000000003A93                 lea     edi, [r9+rcx-1D31920h]
.text:0000000000003A9B                 mov     ecx, ebp
.text:0000000000003A9D                 rol     edx, 6
.text:0000000000003AA0                 mov     r9d, [rsp+30h+var_68]
.text:0000000000003AA5                 add     edx, eax
.text:0000000000003AA7                 or      ecx, edx
.text:0000000000003AA9                 xor     ecx, eax
.text:0000000000003AAB                 add     ecx, edi
.text:0000000000003AAD                 lea     edi, [r10+rsi-5CFEBCECh]
.text:0000000000003AB5                 mov     esi, eax
.text:0000000000003AB7                 rol     ecx, 0Ah
.text:0000000000003ABA                 not     esi
.text:0000000000003ABC                 lea     eax, [r8+rax+4E0811A1h]
.text:0000000000003AC4                 add     ecx, edx
.text:0000000000003AC6                 mov     r8d, edx
.text:0000000000003AC9                 mov     r10d, [rsp+30h+var_5C]
.text:0000000000003ACE                 or      esi, ecx
.text:0000000000003AD0                 not     r8d
.text:0000000000003AD3                 xor     esi, edx
.text:0000000000003AD5                 lea     edx, [r9+rdx-8AC817Eh]
.text:0000000000003ADD                 mov     r9d, ecx
.text:0000000000003AE0                 add     esi, edi
.text:0000000000003AE2                 mov     edi, r8d
.text:0000000000003AE5                 not     r9d
.text:0000000000003AE8                 rol     esi, 0Fh
.text:0000000000003AEB                 add     esi, ecx
.text:0000000000003AED                 or      edi, esi
.text:0000000000003AEF                 xor     edi, ecx
.text:0000000000003AF1                 lea     ecx, [r14+rcx-42C50DCBh]
.text:0000000000003AF9                 add     edi, eax
.text:0000000000003AFB                 mov     eax, r9d
.text:0000000000003AFE                 ror     edi, 0Bh
.text:0000000000003B01                 add     edi, esi
.text:0000000000003B03                 or      eax, edi
.text:0000000000003B05                 xor     eax, esi
.text:0000000000003B07                 add     eax, edx
.text:0000000000003B09                 mov     edx, esi
.text:0000000000003B0B                 rol     eax, 6
.text:0000000000003B0E                 not     edx
.text:0000000000003B10                 add     eax, edi
.text:0000000000003B12                 or      edx, eax
.text:0000000000003B14                 xor     edx, edi
.text:0000000000003B16                 add     edx, ecx
.text:0000000000003B18                 mov     ecx, [rsp+30h+var_70]
.text:0000000000003B1C                 rol     edx, 0Ah
.text:0000000000003B1F                 add     edx, eax
.text:0000000000003B21                 lea     esi, [rcx+rsi+2AD7D2BBh]
.text:0000000000003B28                 mov     ecx, edi
.text:0000000000003B2A                 lea     edi, [r10+rdi-14792C6Fh]
.text:0000000000003B32                 not     ecx
.text:0000000000003B34                 or      ecx, edx
.text:0000000000003B36                 xor     ecx, eax
.text:0000000000003B38                 add     ecx, esi
.text:0000000000003B3A                 mov     esi, eax
.text:0000000000003B3C                 rol     ecx, 0Fh
.text:0000000000003B3F                 not     esi
.text:0000000000003B41                 add     ecx, edx
.text:0000000000003B43                 or      esi, ecx
.text:0000000000003B45                 xor     esi, edx
.text:0000000000003B47                 add     esi, edi
.text:0000000000003B49                 ror     esi, 0Bh
.text:0000000000003B4C                 add     esi, ecx
.text:0000000000003B4E                 add     [rsp+30h+var_48], eax
.text:0000000000003B52                 add     r15d, ecx
.text:0000000000003B55                 add     r11d, esi
.text:0000000000003B58                 add     [rsp+30h+var_50], edx
.text:0000000000003B5C                 cmp     [rsp+30h+var_40], rbx
.text:0000000000003B61                 ja      loc_3480
.text:0000000000003B67                 mov     r10d, r15d
.text:0000000000003B6A
.text:0000000000003B6A loc_3B6A:                               ; CODE XREF: md5_process_block+56↑j
.text:0000000000003B6A                 mov     rax, [rsp+30h+var_38]
.text:0000000000003B6F                 mov     ebx, [rsp+30h+var_48]
.text:0000000000003B73                 mov     [rax], ebx
.text:0000000000003B75                 mov     ebx, [rsp+30h+var_50]
.text:0000000000003B79                 mov     [rax+4], r11d
.text:0000000000003B7D                 mov     [rax+8], r10d
.text:0000000000003B81                 mov     [rax+0Ch], ebx
.text:0000000000003B84                 pop     rbx
.text:0000000000003B85                 pop     rbp
.text:0000000000003B86                 pop     r12
.text:0000000000003B88                 pop     r13
.text:0000000000003B8A                 pop     r14
.text:0000000000003B8C                 pop     r15
.text:0000000000003B8E                 retn
.text:0000000000003B8E ; } // starts at 3420
.text:0000000000003B8E md5_process_block endp
.text:0000000000003B8E
.text:0000000000003B8E ; ---------------------------------------------------------------------------
.text:0000000000003B8F                 align 10h
.text:0000000000003B90
.text:0000000000003B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B90
.text:0000000000003B90
.text:0000000000003B90                 public md5_finish_ctx
.text:0000000000003B90 md5_finish_ctx  proc near               ; CODE XREF: md5_buffer+5E↓p
.text:0000000000003B90                                         ; md5_stream+BC↓p
.text:0000000000003B90 ; __unwind {
.text:0000000000003B90                 push    rbp
.text:0000000000003B91                 push    rbx
.text:0000000000003B92                 mov     rbx, rdi
.text:0000000000003B95                 mov     eax, [rdi+18h]
.text:0000000000003B98                 mov     rbp, rsi
.text:0000000000003B9B                 mov     edx, [rbx+14h]
.text:0000000000003B9E                 cmp     eax, 38h ; '8'
.text:0000000000003BA1                 mov     esi, eax
.text:0000000000003BA3                 sbb     r8, r8
.text:0000000000003BA6                 and     r8, 0FFFFFFFFFFFFFFC0h
.text:0000000000003BAA                 sub     r8, 0FFFFFFFFFFFFFF80h
.text:0000000000003BAE                 cmp     eax, 38h ; '8'
.text:0000000000003BB1                 sbb     rcx, rcx
.text:0000000000003BB4                 and     rcx, 0FFFFFFFFFFFFFFF0h
.text:0000000000003BB8                 add     rcx, 1Fh
.text:0000000000003BBC                 cmp     eax, 38h ; '8'
.text:0000000000003BBF                 sbb     rdi, rdi
.text:0000000000003BC2                 xor     r9d, r9d
.text:0000000000003BC5                 and     rdi, 0FFFFFFFFFFFFFFF0h
.text:0000000000003BC9                 add     rdi, 1Eh
.text:0000000000003BCD                 add     esi, [rbx+10h]
.text:0000000000003BD0                 setb    r9b
.text:0000000000003BD4                 mov     [rbx+10h], esi
.text:0000000000003BD7                 test    r9d, r9d
.text:0000000000003BDA                 jz      short loc_3BE2
.text:0000000000003BDC                 add     edx, 1
.text:0000000000003BDF                 mov     [rbx+14h], edx
.text:0000000000003BE2
.text:0000000000003BE2 loc_3BE2:                               ; CODE XREF: md5_finish_ctx+4A↑j
.text:0000000000003BE2                 lea     r9d, ds:0[rsi*8]
.text:0000000000003BEA                 shl     edx, 3
.text:0000000000003BED                 shr     esi, 1Dh
.text:0000000000003BF0                 or      edx, esi
.text:0000000000003BF2                 lea     rsi, fillbuf
.text:0000000000003BF9                 mov     [rbx+rdi*4+1Ch], r9d
.text:0000000000003BFE                 mov     rdi, r8
.text:0000000000003C01                 mov     [rbx+rcx*4+1Ch], edx
.text:0000000000003C05                 sub     rdi, rax
.text:0000000000003C08                 lea     r9, [rbx+1Ch]
.text:0000000000003C0C                 lea     rcx, [rdi-8]
.text:0000000000003C10                 lea     rdx, [r9+rax]
.text:0000000000003C14                 cmp     rcx, 8
.text:0000000000003C18                 jnb     short loc_3C40
.text:0000000000003C1A                 test    cl, 4
.text:0000000000003C1D                 jnz     short loc_3C90
.text:0000000000003C1F                 test    rcx, rcx
.text:0000000000003C22                 jz      short loc_3C6C
.text:0000000000003C24                 movzx   eax, byte ptr cs:fillbuf
.text:0000000000003C2B                 test    cl, 2
.text:0000000000003C2E                 mov     [rdx], al
.text:0000000000003C30                 jz      short loc_3C6C
.text:0000000000003C32                 movzx   eax, word ptr [rsi+rcx-2]
.text:0000000000003C37                 mov     [rdx+rcx-2], ax
.text:0000000000003C3C                 jmp     short loc_3C6C
.text:0000000000003C3C ; ---------------------------------------------------------------------------
.text:0000000000003C3E                 align 20h
.text:0000000000003C40
.text:0000000000003C40 loc_3C40:                               ; CODE XREF: md5_finish_ctx+88↑j
.text:0000000000003C40                 mov     rax, cs:fillbuf
.text:0000000000003C47                 lea     rdi, [rdx+8]
.text:0000000000003C4B                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000003C4F                 mov     [rdx], rax
.text:0000000000003C52                 mov     rax, [rsi+rcx-8]
.text:0000000000003C57                 mov     [rdx+rcx-8], rax
.text:0000000000003C5C                 sub     rdx, rdi
.text:0000000000003C5F                 add     rcx, rdx
.text:0000000000003C62                 sub     rsi, rdx
.text:0000000000003C65                 shr     rcx, 3
.text:0000000000003C69                 rep movsq
.text:0000000000003C6C
.text:0000000000003C6C loc_3C6C:                               ; CODE XREF: md5_finish_ctx+92↑j
.text:0000000000003C6C                                         ; md5_finish_ctx+A0↑j ...
.text:0000000000003C6C                 mov     rdx, rbx
.text:0000000000003C6F                 mov     rsi, r8
.text:0000000000003C72                 mov     rdi, r9
.text:0000000000003C75                 call    md5_process_block
.text:0000000000003C7A                 mov     rsi, rbp
.text:0000000000003C7D                 mov     rdi, rbx
.text:0000000000003C80                 pop     rbx
.text:0000000000003C81                 pop     rbp
.text:0000000000003C82                 jmp     md5_read_ctx
.text:0000000000003C82 ; ---------------------------------------------------------------------------
.text:0000000000003C87                 align 10h
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: md5_finish_ctx+8D↑j
.text:0000000000003C90                 mov     eax, dword ptr cs:fillbuf
.text:0000000000003C96                 mov     [rdx], eax
.text:0000000000003C98                 mov     eax, [rsi+rcx-4]
.text:0000000000003C9C                 mov     [rdx+rcx-4], eax
.text:0000000000003CA0                 jmp     short loc_3C6C
.text:0000000000003CA0 ; } // starts at 3B90
.text:0000000000003CA0 md5_finish_ctx  endp
.text:0000000000003CA0
.text:0000000000003CA0 ; ---------------------------------------------------------------------------
.text:0000000000003CA2                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CB0
.text:0000000000003CB0 ; Attributes: info_from_lumina
.text:0000000000003CB0
.text:0000000000003CB0 ; void __fastcall md5_process_bytes(const void *buffer, size_t len, md5_ctx_0 *ctx)
.text:0000000000003CB0                 public md5_process_bytes
.text:0000000000003CB0 md5_process_bytes proc near             ; CODE XREF: md5_buffer+53↓p
.text:0000000000003CB0                                         ; md5_stream+F9↓p
.text:0000000000003CB0 ; __unwind {
.text:0000000000003CB0                 push    r15
.text:0000000000003CB2                 push    r14
.text:0000000000003CB4                 push    r13
.text:0000000000003CB6                 push    r12
.text:0000000000003CB8                 mov     r13, rdx
.text:0000000000003CBB                 push    rbp
.text:0000000000003CBC                 push    rbx
.text:0000000000003CBD                 mov     r12, rsi
.text:0000000000003CC0                 mov     rbx, rdi
.text:0000000000003CC3                 sub     rsp, 8
.text:0000000000003CC7                 mov     eax, [rdx+18h]
.text:0000000000003CCA                 test    eax, eax
.text:0000000000003CCC                 jnz     loc_3E00
.text:0000000000003CD2
.text:0000000000003CD2 loc_3CD2:                               ; CODE XREF: md5_process_bytes+18A↓j
.text:0000000000003CD2                 cmp     r12, 3Fh ; '?'
.text:0000000000003CD6                 jbe     loc_3DE4
.text:0000000000003CDC                 test    bl, 3
.text:0000000000003CDF                 jz      loc_3DC8
.text:0000000000003CE5                 cmp     r12, 40h ; '@'
.text:0000000000003CE9                 lea     rbp, [r13+1Ch]
.text:0000000000003CED                 jz      short loc_3D50
.text:0000000000003CEF                 lea     r15, [r12-41h]
.text:0000000000003CF4                 shr     r15, 6
.text:0000000000003CF8                 lea     r14, [r15+1]
.text:0000000000003CFC                 shl     r14, 6
.text:0000000000003D00                 add     r14, rbx
.text:0000000000003D03                 nop     dword ptr [rax+rax+00h]
.text:0000000000003D08
.text:0000000000003D08 loc_3D08:                               ; CODE XREF: md5_process_bytes+92↓j
.text:0000000000003D08                 movdqu  xmm0, xmmword ptr [rbx]
.text:0000000000003D0C                 mov     rdx, r13
.text:0000000000003D0F                 mov     esi, 40h ; '@'
.text:0000000000003D14                 mov     rdi, rbp
.text:0000000000003D17                 add     rbx, 40h ; '@'
.text:0000000000003D1B                 movups  xmmword ptr [rbp+0], xmm0
.text:0000000000003D1F                 movdqu  xmm0, xmmword ptr [rbx-30h]
.text:0000000000003D24                 movups  xmmword ptr [rbp+10h], xmm0
.text:0000000000003D28                 movdqu  xmm0, xmmword ptr [rbx-20h]
.text:0000000000003D2D                 movups  xmmword ptr [rbp+20h], xmm0
.text:0000000000003D31                 movdqu  xmm0, xmmword ptr [rbx-10h]
.text:0000000000003D36                 movups  xmmword ptr [rbp+30h], xmm0
.text:0000000000003D3A                 call    md5_process_block
.text:0000000000003D3F                 cmp     rbx, r14
.text:0000000000003D42                 jnz     short loc_3D08
.text:0000000000003D44                 neg     r15
.text:0000000000003D47                 shl     r15, 6
.text:0000000000003D4B                 lea     r12, [r12+r15-40h]
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: md5_process_bytes+3D↑j
.text:0000000000003D50                                         ; md5_process_bytes+2AC↓j
.text:0000000000003D50                 mov     edi, [r13+18h]
.text:0000000000003D54                 cmp     r12d, 8
.text:0000000000003D58                 mov     eax, r12d
.text:0000000000003D5B                 lea     rcx, [rbp+rdi+0]
.text:0000000000003D60                 jnb     loc_3E40
.text:0000000000003D66                 test    r12b, 4
.text:0000000000003D6A                 jnz     loc_3F61
.text:0000000000003D70                 test    r12d, r12d
.text:0000000000003D73                 jz      short loc_3D82
.text:0000000000003D75                 movzx   edx, byte ptr [rbx]
.text:0000000000003D78                 test    al, 2
.text:0000000000003D7A                 mov     [rcx], dl
.text:0000000000003D7C                 jnz     loc_3F75
.text:0000000000003D82
.text:0000000000003D82 loc_3D82:                               ; CODE XREF: md5_process_bytes+C3↑j
.text:0000000000003D82                                         ; md5_process_bytes+1BD↓j ...
.text:0000000000003D82                 add     r12, rdi
.text:0000000000003D85                 cmp     r12, 3Fh ; '?'
.text:0000000000003D89                 jbe     short loc_3DAE
.text:0000000000003D8B                 mov     rdx, r13
.text:0000000000003D8E                 mov     esi, 40h ; '@'
.text:0000000000003D93                 mov     rdi, rbp
.text:0000000000003D96                 call    md5_process_block
.text:0000000000003D9B                 sub     r12, 40h ; '@'
.text:0000000000003D9F                 lea     rsi, [r13+5Ch]  ; src
.text:0000000000003DA3                 mov     rdi, rbp        ; dest
.text:0000000000003DA6                 mov     rdx, r12        ; n
.text:0000000000003DA9                 call    _memcpy
.text:0000000000003DAE
.text:0000000000003DAE loc_3DAE:                               ; CODE XREF: md5_process_bytes+D9↑j
.text:0000000000003DAE                 mov     [r13+18h], r12d
.text:0000000000003DB2                 add     rsp, 8
.text:0000000000003DB6                 pop     rbx
.text:0000000000003DB7                 pop     rbp
.text:0000000000003DB8                 pop     r12
.text:0000000000003DBA                 pop     r13
.text:0000000000003DBC                 pop     r14
.text:0000000000003DBE                 pop     r15
.text:0000000000003DC0                 retn
.text:0000000000003DC0 ; ---------------------------------------------------------------------------
.text:0000000000003DC1                 align 8
.text:0000000000003DC8
.text:0000000000003DC8 loc_3DC8:                               ; CODE XREF: md5_process_bytes+2F↑j
.text:0000000000003DC8                 mov     rbp, r12
.text:0000000000003DCB                 mov     rdi, rbx
.text:0000000000003DCE                 mov     rdx, r13
.text:0000000000003DD1                 and     rbp, 0FFFFFFFFFFFFFFC0h
.text:0000000000003DD5                 and     r12d, 3Fh
.text:0000000000003DD9                 mov     rsi, rbp
.text:0000000000003DDC                 add     rbx, rbp
.text:0000000000003DDF                 call    md5_process_block
.text:0000000000003DE4
.text:0000000000003DE4 loc_3DE4:                               ; CODE XREF: md5_process_bytes+26↑j
.text:0000000000003DE4                 test    r12, r12
.text:0000000000003DE7                 jnz     loc_3F58
.text:0000000000003DED                 add     rsp, 8
.text:0000000000003DF1                 pop     rbx
.text:0000000000003DF2                 pop     rbp
.text:0000000000003DF3                 pop     r12
.text:0000000000003DF5                 pop     r13
.text:0000000000003DF7                 pop     r14
.text:0000000000003DF9                 pop     r15
.text:0000000000003DFB                 retn
.text:0000000000003DFB ; ---------------------------------------------------------------------------
.text:0000000000003DFC                 align 20h
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: md5_process_bytes+1C↑j
.text:0000000000003E00                 mov     ebp, eax
.text:0000000000003E02                 mov     edx, 80h
.text:0000000000003E07                 lea     r15, [r13+1Ch]
.text:0000000000003E0B                 sub     rdx, rbp
.text:0000000000003E0E                 cmp     rdx, rsi
.text:0000000000003E11                 lea     rdi, [r15+rbp]  ; dest
.text:0000000000003E15                 cmova   rdx, rsi        ; n
.text:0000000000003E19                 mov     rsi, rbx        ; src
.text:0000000000003E1C                 mov     r14, rdx
.text:0000000000003E1F                 call    _memcpy
.text:0000000000003E24                 mov     esi, [r13+18h]
.text:0000000000003E28                 add     esi, r14d
.text:0000000000003E2B                 cmp     esi, 40h ; '@'
.text:0000000000003E2E                 mov     [r13+18h], esi
.text:0000000000003E32                 ja      short loc_3E90
.text:0000000000003E34
.text:0000000000003E34 loc_3E34:                               ; CODE XREF: md5_process_bytes+213↓j
.text:0000000000003E34                                         ; md5_process_bytes+223↓j ...
.text:0000000000003E34                 add     rbx, r14
.text:0000000000003E37                 sub     r12, r14
.text:0000000000003E3A                 jmp     loc_3CD2
.text:0000000000003E3A ; ---------------------------------------------------------------------------
.text:0000000000003E3F                 align 20h
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: md5_process_bytes+B0↑j
.text:0000000000003E40                 mov     rax, [rbx]
.text:0000000000003E43                 mov     edx, r12d
.text:0000000000003E46                 mov     [rcx], rax
.text:0000000000003E49                 mov     rax, [rbx+rdx-8]
.text:0000000000003E4E                 mov     [rcx+rdx-8], rax
.text:0000000000003E53                 lea     rdx, [rcx+8]
.text:0000000000003E57                 mov     rax, rcx
.text:0000000000003E5A                 and     rdx, 0FFFFFFFFFFFFFFF8h
.text:0000000000003E5E                 sub     rax, rdx
.text:0000000000003E61                 sub     rbx, rax
.text:0000000000003E64                 add     eax, r12d
.text:0000000000003E67                 and     eax, 0FFFFFFF8h
.text:0000000000003E6A                 cmp     eax, 8
.text:0000000000003E6D                 jb      loc_3D82
.text:0000000000003E73                 and     eax, 0FFFFFFF8h
.text:0000000000003E76                 xor     ecx, ecx
.text:0000000000003E78
.text:0000000000003E78 loc_3E78:                               ; CODE XREF: md5_process_bytes+1D7↓j
.text:0000000000003E78                 mov     esi, ecx
.text:0000000000003E7A                 add     ecx, 8
.text:0000000000003E7D                 mov     r8, [rbx+rsi]
.text:0000000000003E81                 cmp     ecx, eax
.text:0000000000003E83                 mov     [rdx+rsi], r8
.text:0000000000003E87                 jb      short loc_3E78
.text:0000000000003E89                 jmp     loc_3D82
.text:0000000000003E89 ; ---------------------------------------------------------------------------
.text:0000000000003E8E                 align 10h
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: md5_process_bytes+182↑j
.text:0000000000003E90                 and     esi, 0FFFFFFC0h
.text:0000000000003E93                 mov     rdx, r13
.text:0000000000003E96                 mov     rdi, r15
.text:0000000000003E99                 call    md5_process_block
.text:0000000000003E9E                 mov     ecx, [r13+18h]
.text:0000000000003EA2                 lea     rax, [rbp+r14+0]
.text:0000000000003EA7                 and     rax, 0FFFFFFFFFFFFFFC0h
.text:0000000000003EAB                 mov     edx, ecx
.text:0000000000003EAD                 add     rax, r15
.text:0000000000003EB0                 and     edx, 3Fh
.text:0000000000003EB3                 cmp     edx, 8
.text:0000000000003EB6                 mov     [r13+18h], edx
.text:0000000000003EBA                 jnb     short loc_3EF0
.text:0000000000003EBC                 test    cl, 4
.text:0000000000003EBF                 jnz     short loc_3F3F
.text:0000000000003EC1                 test    edx, edx
.text:0000000000003EC3                 jz      loc_3E34
.text:0000000000003EC9                 movzx   esi, byte ptr [rax]
.text:0000000000003ECC                 and     ecx, 2
.text:0000000000003ECF                 mov     [r13+1Ch], sil
.text:0000000000003ED3                 jz      loc_3E34
.text:0000000000003ED9                 movzx   eax, word ptr [rax+rdx-2]
.text:0000000000003EDE                 mov     [r15+rdx-2], ax
.text:0000000000003EE4                 jmp     loc_3E34
.text:0000000000003EE4 ; ---------------------------------------------------------------------------
.text:0000000000003EE9                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: md5_process_bytes+20A↑j
.text:0000000000003EF0                 mov     rcx, [rax]
.text:0000000000003EF3                 mov     [r13+1Ch], rcx
.text:0000000000003EF7                 mov     ecx, edx
.text:0000000000003EF9                 mov     rsi, [rax+rcx-8]
.text:0000000000003EFE                 mov     [r15+rcx-8], rsi
.text:0000000000003F03                 lea     rcx, [r13+24h]
.text:0000000000003F07                 and     rcx, 0FFFFFFFFFFFFFFF8h
.text:0000000000003F0B                 sub     r15, rcx
.text:0000000000003F0E                 sub     rax, r15
.text:0000000000003F11                 add     r15d, edx
.text:0000000000003F14                 and     r15d, 0FFFFFFF8h
.text:0000000000003F18                 cmp     r15d, 8
.text:0000000000003F1C                 jb      loc_3E34
.text:0000000000003F22                 and     r15d, 0FFFFFFF8h
.text:0000000000003F26                 xor     edx, edx
.text:0000000000003F28
.text:0000000000003F28 loc_3F28:                               ; CODE XREF: md5_process_bytes+288↓j
.text:0000000000003F28                 mov     esi, edx
.text:0000000000003F2A                 add     edx, 8
.text:0000000000003F2D                 mov     rdi, [rax+rsi]
.text:0000000000003F31                 cmp     edx, r15d
.text:0000000000003F34                 mov     [rcx+rsi], rdi
.text:0000000000003F38                 jb      short loc_3F28
.text:0000000000003F3A                 jmp     loc_3E34
.text:0000000000003F3F ; ---------------------------------------------------------------------------
.text:0000000000003F3F
.text:0000000000003F3F loc_3F3F:                               ; CODE XREF: md5_process_bytes+20F↑j
.text:0000000000003F3F                 mov     ecx, [rax]
.text:0000000000003F41                 mov     [r13+1Ch], ecx
.text:0000000000003F45                 mov     eax, [rax+rdx-4]
.text:0000000000003F49                 mov     [r15+rdx-4], eax
.text:0000000000003F4E                 jmp     loc_3E34
.text:0000000000003F4E ; ---------------------------------------------------------------------------
.text:0000000000003F53                 align 8
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: md5_process_bytes+137↑j
.text:0000000000003F58                 lea     rbp, [r13+1Ch]
.text:0000000000003F5C                 jmp     loc_3D50
.text:0000000000003F61 ; ---------------------------------------------------------------------------
.text:0000000000003F61
.text:0000000000003F61 loc_3F61:                               ; CODE XREF: md5_process_bytes+BA↑j
.text:0000000000003F61                 mov     edx, [rbx]
.text:0000000000003F63                 mov     [rcx], edx
.text:0000000000003F65                 mov     edx, r12d
.text:0000000000003F68                 mov     eax, [rbx+rdx-4]
.text:0000000000003F6C                 mov     [rcx+rdx-4], eax
.text:0000000000003F70                 jmp     loc_3D82
.text:0000000000003F75 ; ---------------------------------------------------------------------------
.text:0000000000003F75
.text:0000000000003F75 loc_3F75:                               ; CODE XREF: md5_process_bytes+CC↑j
.text:0000000000003F75                 mov     edx, r12d
.text:0000000000003F78                 movzx   eax, word ptr [rbx+rdx-2]
.text:0000000000003F7D                 mov     [rcx+rdx-2], ax
.text:0000000000003F82                 jmp     loc_3D82
.text:0000000000003F82 ; } // starts at 3CB0
.text:0000000000003F82 md5_process_bytes endp
.text:0000000000003F82
.text:0000000000003F82 ; ---------------------------------------------------------------------------
.text:0000000000003F87                 align 10h
.text:0000000000003F90
.text:0000000000003F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F90
.text:0000000000003F90 ; Attributes: info_from_lumina
.text:0000000000003F90
.text:0000000000003F90 ; void *__fastcall md5_buffer(const char *buffer, size_t len, void *resblock)
.text:0000000000003F90                 public md5_buffer
.text:0000000000003F90 md5_buffer      proc near
.text:0000000000003F90
.text:0000000000003F90 var_C8          = qword ptr -0C8h
.text:0000000000003F90 var_C0          = qword ptr -0C0h
.text:0000000000003F90 var_B8          = qword ptr -0B8h
.text:0000000000003F90 var_B0          = dword ptr -0B0h
.text:0000000000003F90 var_20          = qword ptr -20h
.text:0000000000003F90
.text:0000000000003F90 ; __unwind {
.text:0000000000003F90                 push    rbp
.text:0000000000003F91                 push    rbx
.text:0000000000003F92                 mov     rbp, rdx
.text:0000000000003F95                 sub     rsp, 0B8h
.text:0000000000003F9C                 mov     rax, fs:28h
.text:0000000000003FA5                 mov     [rsp+0C8h+var_20], rax
.text:0000000000003FAD                 xor     eax, eax
.text:0000000000003FAF                 mov     rbx, rsp
.text:0000000000003FB2                 mov     rax, 0EFCDAB8967452301h
.text:0000000000003FBC                 mov     [rsp+0C8h+var_B8], 0
.text:0000000000003FC5                 mov     [rsp+0C8h+var_C8], rax
.text:0000000000003FC9                 mov     rdx, rbx
.text:0000000000003FCC                 mov     rax, 1032547698BADCFEh
.text:0000000000003FD6                 mov     [rsp+0C8h+var_C0], rax
.text:0000000000003FDB                 mov     [rsp+0C8h+var_B0], 0
.text:0000000000003FE3                 call    md5_process_bytes
.text:0000000000003FE8                 mov     rsi, rbp
.text:0000000000003FEB                 mov     rdi, rbx
.text:0000000000003FEE                 call    md5_finish_ctx
.text:0000000000003FF3                 mov     rcx, [rsp+0C8h+var_20]
.text:0000000000003FFB                 xor     rcx, fs:28h
.text:0000000000004004                 jnz     short loc_4010
.text:0000000000004006                 add     rsp, 0B8h
.text:000000000000400D                 pop     rbx
.text:000000000000400E                 pop     rbp
.text:000000000000400F                 retn
.text:0000000000004010 ; ---------------------------------------------------------------------------
.text:0000000000004010
.text:0000000000004010 loc_4010:                               ; CODE XREF: md5_buffer+74↑j
.text:0000000000004010                 call    ___stack_chk_fail
.text:0000000000004010 ; } // starts at 3F90
.text:0000000000004010 md5_buffer      endp
.text:0000000000004010
.text:0000000000004010 ; ---------------------------------------------------------------------------
.text:0000000000004015                 align 20h
.text:0000000000004020
.text:0000000000004020 ; =============== S U B R O U T I N E =======================================
.text:0000000000004020
.text:0000000000004020
.text:0000000000004020 ; __int64 __fastcall md5_stream(FILE *stream)
.text:0000000000004020                 public md5_stream
.text:0000000000004020 md5_stream      proc near               ; CODE XREF: digest_file_isra_1+52↑p
.text:0000000000004020                                         ; digest_file_isra_1+ED↑p
.text:0000000000004020
.text:0000000000004020 var_E8          = qword ptr -0E8h
.text:0000000000004020 var_E0          = qword ptr -0E0h
.text:0000000000004020 var_D8          = qword ptr -0D8h
.text:0000000000004020 var_D0          = dword ptr -0D0h
.text:0000000000004020 var_40          = qword ptr -40h
.text:0000000000004020
.text:0000000000004020 ; __unwind {
.text:0000000000004020                 push    r15
.text:0000000000004022                 push    r14
.text:0000000000004024                 mov     r14, rsi
.text:0000000000004027                 push    r13
.text:0000000000004029                 push    r12
.text:000000000000402B                 push    rbp
.text:000000000000402C                 push    rbx
.text:000000000000402D                 mov     rbp, rdi
.text:0000000000004030                 mov     edi, 8048h      ; size
.text:0000000000004035                 sub     rsp, 0B8h
.text:000000000000403C                 mov     rax, fs:28h
.text:0000000000004045                 mov     [rsp+0E8h+var_40], rax
.text:000000000000404D                 xor     eax, eax
.text:000000000000404F                 call    _malloc
.text:0000000000004054                 mov     r12, rax
.text:0000000000004057                 mov     eax, 1
.text:000000000000405C                 test    r12, r12
.text:000000000000405F                 jz      loc_40EB
.text:0000000000004065                 mov     rax, 0EFCDAB8967452301h
.text:000000000000406F                 mov     [rsp+0E8h+var_D8], 0
.text:0000000000004078                 mov     [rsp+0E8h+var_D0], 0
.text:0000000000004080                 mov     [rsp+0E8h+var_E8], rax
.text:0000000000004084                 mov     rax, 1032547698BADCFEh
.text:000000000000408E                 mov     r13d, 8000h
.text:0000000000004094                 mov     [rsp+0E8h+var_E0], rax
.text:0000000000004099                 mov     r15, rsp
.text:000000000000409C
.text:000000000000409C loc_409C:                               ; CODE XREF: md5_stream+110↓j
.text:000000000000409C                 xor     ebx, ebx
.text:000000000000409E                 jmp     short loc_40C8
.text:00000000000040A0 ; ---------------------------------------------------------------------------
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: md5_stream+AC↓j
.text:00000000000040A0                 lea     rdi, [r12+rbx]  ; ptr
.text:00000000000040A4                 mov     rdx, r13
.text:00000000000040A7                 mov     rcx, rbp        ; stream
.text:00000000000040AA                 sub     rdx, rbx        ; n
.text:00000000000040AD                 mov     esi, 1          ; size
.text:00000000000040B2                 call    _fread_unlocked
.text:00000000000040B7                 add     rbx, rax
.text:00000000000040BA                 cmp     rbx, 8000h
.text:00000000000040C1                 jz      short loc_4120
.text:00000000000040C3                 test    rax, rax
.text:00000000000040C6                 jz      short loc_4138
.text:00000000000040C8
.text:00000000000040C8 loc_40C8:                               ; CODE XREF: md5_stream+7E↑j
.text:00000000000040C8                 test    byte ptr [rbp+0], 10h
.text:00000000000040CC                 jz      short loc_40A0
.text:00000000000040CE
.text:00000000000040CE loc_40CE:                               ; CODE XREF: md5_stream+11C↓j
.text:00000000000040CE                 test    rbx, rbx
.text:00000000000040D1                 mov     rbp, rsp
.text:00000000000040D4                 jnz     short loc_4110
.text:00000000000040D6
.text:00000000000040D6 loc_40D6:                               ; CODE XREF: md5_stream+FE↓j
.text:00000000000040D6                 mov     rsi, r14
.text:00000000000040D9                 mov     rdi, rbp
.text:00000000000040DC                 call    md5_finish_ctx
.text:00000000000040E1                 mov     rdi, r12        ; ptr
.text:00000000000040E4                 call    _free
.text:00000000000040E9                 xor     eax, eax
.text:00000000000040EB
.text:00000000000040EB loc_40EB:                               ; CODE XREF: md5_stream+3F↑j
.text:00000000000040EB                                         ; md5_stream+12B↓j
.text:00000000000040EB                 mov     rcx, [rsp+0E8h+var_40]
.text:00000000000040F3                 xor     rcx, fs:28h
.text:00000000000040FC                 jnz     short loc_414D
.text:00000000000040FE                 add     rsp, 0B8h
.text:0000000000004105                 pop     rbx
.text:0000000000004106                 pop     rbp
.text:0000000000004107                 pop     r12
.text:0000000000004109                 pop     r13
.text:000000000000410B                 pop     r14
.text:000000000000410D                 pop     r15
.text:000000000000410F                 retn
.text:0000000000004110 ; ---------------------------------------------------------------------------
.text:0000000000004110
.text:0000000000004110 loc_4110:                               ; CODE XREF: md5_stream+B4↑j
.text:0000000000004110                 mov     rdx, rbp
.text:0000000000004113                 mov     rsi, rbx        ; n
.text:0000000000004116                 mov     rdi, r12        ; src
.text:0000000000004119                 call    md5_process_bytes
.text:000000000000411E                 jmp     short loc_40D6
.text:0000000000004120 ; ---------------------------------------------------------------------------
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: md5_stream+A1↑j
.text:0000000000004120                 mov     rdx, r15
.text:0000000000004123                 mov     esi, 8000h
.text:0000000000004128                 mov     rdi, r12
.text:000000000000412B                 call    md5_process_block
.text:0000000000004130                 jmp     loc_409C
.text:0000000000004130 ; ---------------------------------------------------------------------------
.text:0000000000004135                 align 8
.text:0000000000004138
.text:0000000000004138 loc_4138:                               ; CODE XREF: md5_stream+A6↑j
.text:0000000000004138                 test    byte ptr [rbp+0], 20h
.text:000000000000413C                 jz      short loc_40CE
.text:000000000000413E                 mov     rdi, r12        ; ptr
.text:0000000000004141                 call    _free
.text:0000000000004146                 mov     eax, 1
.text:000000000000414B                 jmp     short loc_40EB
.text:000000000000414D ; ---------------------------------------------------------------------------
.text:000000000000414D
.text:000000000000414D loc_414D:                               ; CODE XREF: md5_stream+DC↑j
.text:000000000000414D                 call    ___stack_chk_fail
.text:000000000000414D ; } // starts at 4020
.text:000000000000414D md5_stream      endp
.text:000000000000414D
.text:000000000000414D ; ---------------------------------------------------------------------------
.text:0000000000004152                 align 20h
.text:0000000000004160
.text:0000000000004160 ; =============== S U B R O U T I N E =======================================
.text:0000000000004160
.text:0000000000004160
.text:0000000000004160 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000004160                 public fdadvise
.text:0000000000004160 fdadvise        proc near
.text:0000000000004160 ; __unwind {
.text:0000000000004160                 jmp     _posix_fadvise
.text:0000000000004160 ; } // starts at 4160
.text:0000000000004160 fdadvise        endp
.text:0000000000004160
.text:0000000000004160 ; ---------------------------------------------------------------------------
.text:0000000000004165                 align 10h
.text:0000000000004170
.text:0000000000004170 ; =============== S U B R O U T I N E =======================================
.text:0000000000004170
.text:0000000000004170
.text:0000000000004170                 public fadvise
.text:0000000000004170 fadvise         proc near               ; CODE XREF: digest_file_isra_1+47↑p
.text:0000000000004170                                         ; digest_file_isra_1+E2↑p
.text:0000000000004170 ; __unwind {
.text:0000000000004170                 test    rdi, rdi
.text:0000000000004173                 jz      short locret_4190
.text:0000000000004175                 push    rbx
.text:0000000000004176                 mov     ebx, esi
.text:0000000000004178                 call    _fileno
.text:000000000000417D                 mov     ecx, ebx        ; advise
.text:000000000000417F                 xor     edx, edx        ; len
.text:0000000000004181                 xor     esi, esi        ; offset
.text:0000000000004183                 pop     rbx
.text:0000000000004184                 mov     edi, eax        ; fd
.text:0000000000004186                 jmp     _posix_fadvise
.text:0000000000004186 ; ---------------------------------------------------------------------------
.text:000000000000418B                 align 10h
.text:0000000000004190
.text:0000000000004190 locret_4190:                            ; CODE XREF: fadvise+3↑j
.text:0000000000004190                 rep retn
.text:0000000000004190 ; } // starts at 4170
.text:0000000000004190 fadvise         endp
.text:0000000000004190
.text:0000000000004190 ; ---------------------------------------------------------------------------
.text:0000000000004192                 align 20h
.text:00000000000041A0
.text:00000000000041A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041A0
.text:00000000000041A0
.text:00000000000041A0                 public fopen_safer
.text:00000000000041A0 fopen_safer     proc near               ; CODE XREF: main+B21↑p
.text:00000000000041A0                                         ; digest_file_isra_1+CD↑p
.text:00000000000041A0 ; __unwind {
.text:00000000000041A0                 push    r12
.text:00000000000041A2                 push    rbp
.text:00000000000041A3                 mov     rbp, rsi
.text:00000000000041A6                 push    rbx
.text:00000000000041A7                 call    _fopen
.text:00000000000041AC                 test    rax, rax
.text:00000000000041AF                 mov     rbx, rax
.text:00000000000041B2                 jz      short loc_41C1
.text:00000000000041B4                 mov     rdi, rax        ; stream
.text:00000000000041B7                 call    _fileno
.text:00000000000041BC                 cmp     eax, 2
.text:00000000000041BF                 jbe     short loc_41D0
.text:00000000000041C1
.text:00000000000041C1 loc_41C1:                               ; CODE XREF: fopen_safer+12↑j
.text:00000000000041C1                                         ; fopen_safer+5B↓j ...
.text:00000000000041C1                 mov     rax, rbx
.text:00000000000041C4                 pop     rbx
.text:00000000000041C5                 pop     rbp
.text:00000000000041C6                 pop     r12
.text:00000000000041C8                 retn
.text:00000000000041C8 ; ---------------------------------------------------------------------------
.text:00000000000041C9                 align 10h
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: fopen_safer+1F↑j
.text:00000000000041D0                 mov     edi, eax
.text:00000000000041D2                 call    dup_safer
.text:00000000000041D7                 test    eax, eax
.text:00000000000041D9                 mov     r12d, eax
.text:00000000000041DC                 js      short loc_4218
.text:00000000000041DE                 mov     rdi, rbx        ; stream
.text:00000000000041E1                 call    rpl_fclose
.text:00000000000041E6                 test    eax, eax
.text:00000000000041E8                 jnz     short loc_41FD
.text:00000000000041EA                 mov     rsi, rbp        ; modes
.text:00000000000041ED                 mov     edi, r12d       ; fd
.text:00000000000041F0                 call    _fdopen
.text:00000000000041F5                 test    rax, rax
.text:00000000000041F8                 mov     rbx, rax
.text:00000000000041FB                 jnz     short loc_41C1
.text:00000000000041FD
.text:00000000000041FD loc_41FD:                               ; CODE XREF: fopen_safer+48↑j
.text:00000000000041FD                 call    ___errno_location
.text:0000000000004202                 mov     ebp, [rax]
.text:0000000000004204                 mov     rbx, rax
.text:0000000000004207                 mov     edi, r12d       ; fd
.text:000000000000420A                 call    _close
.text:000000000000420F                 mov     [rbx], ebp
.text:0000000000004211                 xor     ebx, ebx
.text:0000000000004213                 jmp     short loc_41C1
.text:0000000000004213 ; ---------------------------------------------------------------------------
.text:0000000000004215                 align 8
.text:0000000000004218
.text:0000000000004218 loc_4218:                               ; CODE XREF: fopen_safer+3C↑j
.text:0000000000004218                 call    ___errno_location
.text:000000000000421D                 mov     r12d, [rax]
.text:0000000000004220                 mov     rbp, rax
.text:0000000000004223                 mov     rdi, rbx        ; stream
.text:0000000000004226                 call    rpl_fclose
.text:000000000000422B                 xor     ebx, ebx
.text:000000000000422D                 mov     [rbp+0], r12d
.text:0000000000004231                 jmp     short loc_41C1
.text:0000000000004231 ; } // starts at 41A0
.text:0000000000004231 fopen_safer     endp
.text:0000000000004231
.text:0000000000004231 ; ---------------------------------------------------------------------------
.text:0000000000004233                 align 20h
.text:0000000000004240
.text:0000000000004240 ; =============== S U B R O U T I N E =======================================
.text:0000000000004240
.text:0000000000004240
.text:0000000000004240                 public set_program_name
.text:0000000000004240 set_program_name proc near              ; CODE XREF: main+32↑p
.text:0000000000004240 ; __unwind {
.text:0000000000004240                 test    rdi, rdi
.text:0000000000004243                 push    rbx
.text:0000000000004244                 jz      short loc_42BD
.text:0000000000004246                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000424B                 mov     rbx, rdi
.text:000000000000424E                 call    _strrchr
.text:0000000000004253                 test    rax, rax
.text:0000000000004256                 jz      short loc_42AD
.text:0000000000004258                 lea     r8, [rax+1]
.text:000000000000425C                 mov     rdx, r8
.text:000000000000425F                 sub     rdx, rbx
.text:0000000000004262                 cmp     rdx, 6
.text:0000000000004266                 jle     short loc_42AD
.text:0000000000004268                 lea     rsi, [rax-6]
.text:000000000000426C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000004273                 mov     ecx, 7
.text:0000000000004278                 repe cmpsb
.text:000000000000427A                 setnbe  dl
.text:000000000000427D                 sbb     dl, 0
.text:0000000000004280                 test    dl, dl
.text:0000000000004282                 jnz     short loc_42AD
.text:0000000000004284                 lea     rdi, aLt        ; "lt-"
.text:000000000000428B                 mov     ecx, 3
.text:0000000000004290                 mov     rsi, r8
.text:0000000000004293                 mov     rbx, r8
.text:0000000000004296                 repe cmpsb
.text:0000000000004298                 setnbe  dl
.text:000000000000429B                 sbb     dl, 0
.text:000000000000429E                 test    dl, dl
.text:00000000000042A0                 jnz     short loc_42AD
.text:00000000000042A2                 lea     rbx, [rax+4]
.text:00000000000042A6                 mov     cs:__bss_start, rbx
.text:00000000000042AD
.text:00000000000042AD loc_42AD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000042AD                                         ; set_program_name+26↑j ...
.text:00000000000042AD                 mov     cs:program_name, rbx
.text:00000000000042B4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000042BB                 pop     rbx
.text:00000000000042BC                 retn
.text:00000000000042BD ; ---------------------------------------------------------------------------
.text:00000000000042BD
.text:00000000000042BD loc_42BD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000042BD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000042C4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000042CB                 mov     edx, 37h ; '7'  ; n
.text:00000000000042D0                 mov     esi, 1          ; size
.text:00000000000042D5                 call    _fwrite
.text:00000000000042DA                 call    _abort
.text:00000000000042DA ; } // starts at 4240
.text:00000000000042DA set_program_name endp
.text:00000000000042DA
.text:00000000000042DA ; ---------------------------------------------------------------------------
.text:00000000000042DF                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0 ; Attributes: info_from_lumina
.text:00000000000042E0
.text:00000000000042E0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000042E0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000042E0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 push    rbp
.text:00000000000042E1                 push    rbx
.text:00000000000042E2                 mov     rbp, rdi
.text:00000000000042E5                 mov     ebx, esi
.text:00000000000042E7                 sub     rsp, 8
.text:00000000000042EB                 call    locale_charset
.text:00000000000042F0                 movzx   edx, byte ptr [rax]
.text:00000000000042F3                 and     edx, 0FFFFFFDFh
.text:00000000000042F6                 cmp     dl, 55h ; 'U'
.text:00000000000042F9                 jz      short loc_4370
.text:00000000000042FB                 cmp     dl, 47h ; 'G'
.text:00000000000042FE                 jz      short loc_4320
.text:0000000000004300
.text:0000000000004300 loc_4300:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000004300                                         ; gettext_quote+50↓j ...
.text:0000000000004300                 lea     rax, unk_7A93
.text:0000000000004307                 lea     rdx, asc_7A95   ; "'"
.text:000000000000430E                 cmp     ebx, 9
.text:0000000000004311                 cmovnz  rax, rdx
.text:0000000000004315                 add     rsp, 8
.text:0000000000004319                 pop     rbx
.text:000000000000431A                 pop     rbp
.text:000000000000431B                 retn
.text:000000000000431B ; ---------------------------------------------------------------------------
.text:000000000000431C                 align 20h
.text:0000000000004320
.text:0000000000004320 loc_4320:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000004320                 movzx   edx, byte ptr [rax+1]
.text:0000000000004324                 and     edx, 0FFFFFFDFh
.text:0000000000004327                 cmp     dl, 42h ; 'B'
.text:000000000000432A                 jnz     short loc_4300
.text:000000000000432C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000004330                 jnz     short loc_4300
.text:0000000000004332                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000004336                 jnz     short loc_4300
.text:0000000000004338                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000433C                 jnz     short loc_4300
.text:000000000000433E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000004342                 jnz     short loc_4300
.text:0000000000004344                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000004348                 jnz     short loc_4300
.text:000000000000434A                 cmp     byte ptr [rax+7], 0
.text:000000000000434E                 jnz     short loc_4300
.text:0000000000004350                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004354                 lea     rax, unk_7A8C
.text:000000000000435B                 lea     rdx, unk_7A90
.text:0000000000004362                 cmovnz  rax, rdx
.text:0000000000004366                 add     rsp, 8
.text:000000000000436A                 pop     rbx
.text:000000000000436B                 pop     rbp
.text:000000000000436C                 retn
.text:000000000000436C ; ---------------------------------------------------------------------------
.text:000000000000436D                 align 10h
.text:0000000000004370
.text:0000000000004370 loc_4370:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000004370                 movzx   edx, byte ptr [rax+1]
.text:0000000000004374                 and     edx, 0FFFFFFDFh
.text:0000000000004377                 cmp     dl, 54h ; 'T'
.text:000000000000437A                 jnz     short loc_4300
.text:000000000000437C                 movzx   edx, byte ptr [rax+2]
.text:0000000000004380                 and     edx, 0FFFFFFDFh
.text:0000000000004383                 cmp     dl, 46h ; 'F'
.text:0000000000004386                 jnz     loc_4300
.text:000000000000438C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000004390                 jnz     loc_4300
.text:0000000000004396                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000439A                 jnz     loc_4300
.text:00000000000043A0                 cmp     byte ptr [rax+5], 0
.text:00000000000043A4                 jnz     loc_4300
.text:00000000000043AA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000043AE                 lea     rax, unk_7A84
.text:00000000000043B5                 lea     rdx, unk_7A88
.text:00000000000043BC                 cmovnz  rax, rdx
.text:00000000000043C0                 add     rsp, 8
.text:00000000000043C4                 pop     rbx
.text:00000000000043C5                 pop     rbp
.text:00000000000043C6                 retn
.text:00000000000043C6 ; } // starts at 42E0
.text:00000000000043C6 gettext_quote   endp
.text:00000000000043C6
.text:00000000000043C6 ; ---------------------------------------------------------------------------
.text:00000000000043C7                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0 ; Attributes: info_from_lumina
.text:00000000000043D0
.text:00000000000043D0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000043D0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000043D0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000043D0
.text:00000000000043D0 var_E0          = dword ptr -0E0h
.text:00000000000043D0 var_DB          = byte ptr -0DBh
.text:00000000000043D0 var_DA          = byte ptr -0DAh
.text:00000000000043D0 var_D9          = byte ptr -0D9h
.text:00000000000043D0 s               = qword ptr -0D8h
.text:00000000000043D0 n               = qword ptr -0D0h
.text:00000000000043D0 var_C8          = qword ptr -0C8h
.text:00000000000043D0 ps              = qword ptr -0C0h
.text:00000000000043D0 var_B8          = qword ptr -0B8h
.text:00000000000043D0 var_B0          = qword ptr -0B0h
.text:00000000000043D0 var_A8          = qword ptr -0A8h
.text:00000000000043D0 s2              = qword ptr -0A0h
.text:00000000000043D0 var_98          = qword ptr -98h
.text:00000000000043D0 var_90          = qword ptr -90h
.text:00000000000043D0 var_88          = qword ptr -88h
.text:00000000000043D0 var_80          = qword ptr -80h
.text:00000000000043D0 var_78          = qword ptr -78h
.text:00000000000043D0 var_70          = dword ptr -70h
.text:00000000000043D0 var_6C          = byte ptr -6Ch
.text:00000000000043D0 var_6B          = byte ptr -6Bh
.text:00000000000043D0 var_6A          = byte ptr -6Ah
.text:00000000000043D0 var_69          = byte ptr -69h
.text:00000000000043D0 var_68          = qword ptr -68h
.text:00000000000043D0 var_60          = qword ptr -60h
.text:00000000000043D0 wc              = dword ptr -4Ch
.text:00000000000043D0 var_48          = qword ptr -48h
.text:00000000000043D0 var_40          = qword ptr -40h
.text:00000000000043D0 arg_0           = qword ptr  8
.text:00000000000043D0 arg_8           = qword ptr  10h
.text:00000000000043D0 arg_10          = qword ptr  18h
.text:00000000000043D0
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 push    r15
.text:00000000000043D2                 push    r14
.text:00000000000043D4                 mov     r15d, r8d
.text:00000000000043D7                 push    r13
.text:00000000000043D9                 push    r12
.text:00000000000043DB                 mov     r14, rdi
.text:00000000000043DE                 push    rbp
.text:00000000000043DF                 push    rbx
.text:00000000000043E0                 mov     ebx, r9d
.text:00000000000043E3                 mov     r13, rsi
.text:00000000000043E6                 mov     rbp, rcx
.text:00000000000043E9                 and     ebx, 2
.text:00000000000043EC                 sub     rsp, 0B8h
.text:00000000000043F3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000043FB                 mov     [rsp+0E8h+s], rdx
.text:0000000000004400                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000004405                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000440A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000440F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000004417                 mov     [rsp+0E8h+var_80], rax
.text:000000000000441C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000004424                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004429                 mov     rax, fs:28h
.text:0000000000004432                 mov     [rsp+0E8h+var_40], rax
.text:000000000000443A                 xor     eax, eax
.text:000000000000443C                 call    ___ctype_get_mb_cur_max
.text:0000000000004441                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000004445                 mov     [rsp+0E8h+var_90], rax
.text:000000000000444A                 ja      def_4461        ; jumptable 00000000000121F1 default case
.text:0000000000004450                 lea     rcx, jpt_4461
.text:0000000000004457                 mov     edx, r15d
.text:000000000000445A                 movsxd  rax, ds:(jpt_4461 - 7B00h)[rcx+rdx*4]
.text:000000000000445E                 add     rax, rcx
.text:0000000000004461                 jmp     rax             ; switch jump
.text:0000000000004463 ; ---------------------------------------------------------------------------
.text:0000000000004463
.text:0000000000004463 loc_4463:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004463                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000004463                                         ; DATA XREF: ...
.text:0000000000004463                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000004468                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000446D                 xor     r12d, r12d
.text:0000000000004470                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004479                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000447E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004483
.text:0000000000004483 loc_4483:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000004483                 lea     rax, asc_7A95   ; "'"
.text:000000000000448A                 mov     [rsp+0E8h+n], 1
.text:0000000000004493                 xor     r15d, r15d
.text:0000000000004496                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000449E                 mov     [rsp+0E8h+s2], rax
.text:00000000000044A3
.text:00000000000044A3 loc_44A3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000044A3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000044A3                 xor     r11d, r11d
.text:00000000000044A6                 mov     rax, rbp
.text:00000000000044A9                 mov     r8d, r12d
.text:00000000000044AC                 mov     rbp, r11
.text:00000000000044AF                 mov     r11, rax
.text:00000000000044B2                 nop     word ptr [rax+rax+00h]
.text:00000000000044B8
.text:00000000000044B8 loc_44B8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000044B8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000044B8                 cmp     r11, rbp
.text:00000000000044BB                 setnz   r12b
.text:00000000000044BF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000044C3                 jnz     short loc_44D2
.text:00000000000044C5                 mov     rax, [rsp+0E8h+s]
.text:00000000000044CA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000044CE                 setnz   r12b
.text:00000000000044D2
.text:00000000000044D2 loc_44D2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000044D2                 test    r12b, r12b
.text:00000000000044D5                 jz      loc_4B30
.text:00000000000044DB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000044E0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000044E5                 lea     r9, [rdi+rbp]
.text:00000000000044E9                 setnz   al
.text:00000000000044EC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000044F0                 mov     r10d, eax
.text:00000000000044F3                 jz      loc_45A0
.text:00000000000044F9                 mov     rax, [rsp+0E8h+n]
.text:00000000000044FE                 test    rax, rax
.text:0000000000004501                 jz      loc_4930
.text:0000000000004507                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000450B                 lea     rbx, [rbp+rax+0]
.text:0000000000004510                 jnz     short loc_4540
.text:0000000000004512                 cmp     rax, 1
.text:0000000000004516                 jbe     short loc_4540
.text:0000000000004518                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000451D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000004522                 mov     [rsp+0E8h+ps], r9
.text:0000000000004527                 call    _strlen
.text:000000000000452C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004532                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004538                 mov     r11, rax
.text:000000000000453B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004540
.text:0000000000004540 loc_4540:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004540                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004540                 cmp     rbx, r11
.text:0000000000004543                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004548                 ja      loc_4B00
.text:000000000000454E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004553                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004558                 mov     rdi, r9         ; s1
.text:000000000000455B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000004560                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004565                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000456A                 call    _memcmp
.text:000000000000456F                 test    eax, eax
.text:0000000000004571                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004576                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000457C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000004581                 jnz     loc_4B00
.text:0000000000004587                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000458C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004592                 jnz     loc_5515
.text:0000000000004598                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000045A0
.text:00000000000045A0 loc_45A0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000045A0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000045A0                 movzx   ebx, byte ptr [r9]
.text:00000000000045A4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000045A7                 ja      def_45BE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000045AD                 lea     rcx, jpt_45BE
.text:00000000000045B4                 movzx   edx, bl
.text:00000000000045B7                 movsxd  rax, ds:(jpt_45BE - 7B2Ch)[rcx+rdx*4]
.text:00000000000045BB                 add     rax, rcx
.text:00000000000045BE                 jmp     rax             ; switch jump
.text:00000000000045C0 ; ---------------------------------------------------------------------------
.text:00000000000045C0
.text:00000000000045C0 loc_45C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000045C0                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:00000000000045C0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000045C3
.text:00000000000045C3 loc_45C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045C3                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:00000000000045C3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000045C7                 setnz   al
.text:00000000000045CA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000045CE                 jnz     short loc_45DC
.text:00000000000045D0                 mov     rax, [rsp+0E8h+s]
.text:00000000000045D5                 cmp     byte ptr [rax+1], 0
.text:00000000000045D9                 setnz   al
.text:00000000000045DC
.text:00000000000045DC loc_45DC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000045DC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000045E1                 setz    dl
.text:00000000000045E4                 test    al, al
.text:00000000000045E6                 jz      loc_4838
.text:00000000000045EC
.text:00000000000045EC loc_45EC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000045EC                 xor     r12d, r12d
.text:00000000000045EF                 xor     eax, eax
.text:00000000000045F1                 nop     dword ptr [rax+00000000h]
.text:00000000000045F8
.text:00000000000045F8 loc_45F8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000045F8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000045F8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000045FD                 jnz     loc_4712
.text:0000000000004603                 test    dl, dl
.text:0000000000004605                 jnz     loc_4712
.text:000000000000460B
.text:000000000000460B loc_460B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000460B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000004610                 test    rsi, rsi
.text:0000000000004613                 jz      short loc_4629
.text:0000000000004615                 mov     edx, ebx
.text:0000000000004617                 shr     dl, 5
.text:000000000000461A                 movzx   edx, dl
.text:000000000000461D                 mov     edx, [rsi+rdx*4]
.text:0000000000004620                 bt      edx, ebx
.text:0000000000004623                 jb      loc_4773
.text:0000000000004629
.text:0000000000004629 loc_4629:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000004629                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000004629                 test    r10b, r10b
.text:000000000000462C                 jnz     loc_4773
.text:0000000000004632                 xor     eax, 1
.text:0000000000004635                 add     rbp, 1
.text:0000000000004639                 and     eax, r8d
.text:000000000000463C
.text:000000000000463C loc_463C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000463C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000463C                 test    al, al
.text:000000000000463E                 jz      short loc_4660
.text:0000000000004640                 cmp     r13, r15
.text:0000000000004643                 jbe     short loc_464A
.text:0000000000004645                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000464A
.text:000000000000464A loc_464A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000464A                 lea     rax, [r15+1]
.text:000000000000464E                 cmp     r13, rax
.text:0000000000004651                 jbe     short loc_4659
.text:0000000000004653                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004659
.text:0000000000004659 loc_4659:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004659                 add     r15, 2
.text:000000000000465D                 xor     r8d, r8d
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000004660                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000004660                 cmp     r15, r13
.text:0000000000004663                 jnb     short loc_4669
.text:0000000000004665                 mov     [r14+r15], bl
.text:0000000000004669
.text:0000000000004669 loc_4669:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000004669                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000466E                 add     r15, 1
.text:0000000000004672                 mov     eax, 0
.text:0000000000004677                 test    r12b, r12b
.text:000000000000467A                 cmovz   edi, eax
.text:000000000000467D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000004682                 jmp     loc_44B8
.text:0000000000004682 ; ---------------------------------------------------------------------------
.text:0000000000004687                 align 10h
.text:0000000000004690
.text:0000000000004690 loc_4690:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004690                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004690                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000004693
.text:0000000000004693 loc_4693:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004693                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004693                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000004697                 cmp     eax, 2
.text:000000000000469A                 jz      loc_4C58
.text:00000000000046A0                 cmp     eax, 5
.text:00000000000046A3                 jz      loc_4C18
.text:00000000000046A9                 cmp     eax, 2
.text:00000000000046AC                 mov     ebx, 3Fh ; '?'
.text:00000000000046B1                 setz    dl
.text:00000000000046B4                 xor     r12d, r12d
.text:00000000000046B7                 xor     eax, eax
.text:00000000000046B9                 jmp     loc_45F8
.text:00000000000046B9 ; ---------------------------------------------------------------------------
.text:00000000000046BE                 align 20h
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000046C0                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:00000000000046C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000046C3
.text:00000000000046C3 loc_46C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000046C3                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:00000000000046C3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000046C8                 jz      loc_4BD0
.text:00000000000046CE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000046D3                 xor     edx, edx
.text:00000000000046D5                 xor     eax, eax
.text:00000000000046D7                 mov     ebx, 27h ; '''
.text:00000000000046DC                 jmp     loc_45F8
.text:00000000000046DC ; ---------------------------------------------------------------------------
.text:00000000000046E1                 align 8
.text:00000000000046E8
.text:00000000000046E8 loc_46E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000046E8                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:00000000000046E8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000046ED                 mov     ebx, 74h ; 't'
.text:00000000000046F2
.text:00000000000046F2 loc_46F2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000046F2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000046F2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000046F7                 setz    al
.text:00000000000046FA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000046FE                 jnz     loc_484E
.text:0000000000004704
.text:0000000000004704 loc_4704:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000004704                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000004704                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004709                 jnz     short loc_4770
.text:000000000000470B
.text:000000000000470B loc_470B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000470B                 mov     ebx, edx
.text:000000000000470D                 xor     r12d, r12d
.text:0000000000004710                 xor     eax, eax
.text:0000000000004712
.text:0000000000004712 loc_4712:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004712                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004712                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004717                 jnz     loc_460B
.text:000000000000471D                 jmp     loc_4629
.text:000000000000471D ; ---------------------------------------------------------------------------
.text:0000000000004722                 align 8
.text:0000000000004728
.text:0000000000004728 loc_4728:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004728                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004728                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000472D                 mov     ebx, 62h ; 'b'
.text:0000000000004732                 jmp     short loc_4704
.text:0000000000004732 ; ---------------------------------------------------------------------------
.text:0000000000004734                 align 8
.text:0000000000004738
.text:0000000000004738 loc_4738:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004738                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004738                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000473D                 jz      loc_4B10
.text:0000000000004743                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004748                 jz      loc_4960
.text:000000000000474E
.text:000000000000474E loc_474E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000474E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004753                 jz      loc_4960
.text:0000000000004759                 cmp     [rsp+0E8h+n], 0
.text:000000000000475F                 jnz     loc_4B1B
.text:0000000000004765                 mov     ebx, 5Ch ; '\'
.text:000000000000476A                 nop     word ptr [rax+rax+00h]
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000004770                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000004770                 xor     r12d, r12d
.text:0000000000004773
.text:0000000000004773 loc_4773:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000004773                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000004773                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004778                 setz    dl
.text:000000000000477B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004780                 mov     eax, edx
.text:0000000000004782                 jnz     loc_4FD8
.text:0000000000004788                 mov     eax, r8d
.text:000000000000478B                 xor     eax, 1
.text:000000000000478E                 and     al, dl
.text:0000000000004790                 jz      short loc_47C1
.text:0000000000004792                 cmp     r13, r15
.text:0000000000004795                 jbe     short loc_479C
.text:0000000000004797                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000479C
.text:000000000000479C loc_479C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000479C                 lea     rdx, [r15+1]
.text:00000000000047A0                 cmp     r13, rdx
.text:00000000000047A3                 jbe     short loc_47AB
.text:00000000000047A5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000047AB
.text:00000000000047AB loc_47AB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000047AB                 lea     rdx, [r15+2]
.text:00000000000047AF                 cmp     r13, rdx
.text:00000000000047B2                 jbe     short loc_47BA
.text:00000000000047B4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000047BA
.text:00000000000047BA loc_47BA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000047BA                 add     r15, 3
.text:00000000000047BE                 mov     r8d, eax
.text:00000000000047C1
.text:00000000000047C1 loc_47C1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000047C1                 cmp     r13, r15
.text:00000000000047C4                 jbe     short loc_47CB
.text:00000000000047C6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000047CB
.text:00000000000047CB loc_47CB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000047CB                 add     r15, 1
.text:00000000000047CF                 add     rbp, 1
.text:00000000000047D3                 jmp     loc_4660
.text:00000000000047D3 ; ---------------------------------------------------------------------------
.text:00000000000047D8                 align 20h
.text:00000000000047E0
.text:00000000000047E0 loc_47E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000047E0                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:00000000000047E0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000047E5                 jnz     loc_49B3
.text:00000000000047EB                 xor     edx, edx
.text:00000000000047ED                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000047F2                 jz      loc_470B
.text:00000000000047F8                 add     rbp, 1
.text:00000000000047FC                 jmp     loc_44B8
.text:00000000000047FC ; ---------------------------------------------------------------------------
.text:0000000000004801                 align 8
.text:0000000000004808
.text:0000000000004808 loc_4808:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004808                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004808                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000480D                 setz    dl
.text:0000000000004810                 xor     eax, eax
.text:0000000000004812                 jmp     loc_45F8
.text:0000000000004812 ; ---------------------------------------------------------------------------
.text:0000000000004817                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004820                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004820                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004825                 mov     ebx, 61h ; 'a'
.text:000000000000482A                 jmp     loc_4704
.text:000000000000482A ; ---------------------------------------------------------------------------
.text:000000000000482F                 align 10h
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004830                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004830                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004835                 setz    dl
.text:0000000000004838
.text:0000000000004838 loc_4838:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004838                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004838                 test    rbp, rbp
.text:000000000000483B                 jnz     loc_45EC
.text:0000000000004841
.text:0000000000004841 loc_4841:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004841                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004841                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004846                 and     al, dl
.text:0000000000004848                 jz      loc_45F8
.text:000000000000484E
.text:000000000000484E loc_484E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000484E                 mov     rbp, r11
.text:0000000000004851                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004859                 jmp     loc_4F59
.text:0000000000004859 ; ---------------------------------------------------------------------------
.text:000000000000485E                 align 20h
.text:0000000000004860
.text:0000000000004860 loc_4860:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004860                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004860                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004865                 setz    dl
.text:0000000000004868                 xor     r12d, r12d
.text:000000000000486B                 jmp     short loc_4841
.text:000000000000486B ; ---------------------------------------------------------------------------
.text:000000000000486D                 align 10h
.text:0000000000004870
.text:0000000000004870 loc_4870:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004870                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004870                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000004875                 mov     ebx, 20h ; ' '
.text:000000000000487A                 setz    dl
.text:000000000000487D                 jmp     short loc_4841
.text:000000000000487D ; ---------------------------------------------------------------------------
.text:000000000000487F                 align 20h
.text:0000000000004880
.text:0000000000004880 loc_4880:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004880                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004880                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000004885                 mov     ebx, 72h ; 'r'
.text:000000000000488A                 jmp     loc_46F2
.text:000000000000488A ; ---------------------------------------------------------------------------
.text:000000000000488F                 align 10h
.text:0000000000004890
.text:0000000000004890 loc_4890:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004890                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:0000000000004890                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000004895                 mov     ebx, 66h ; 'f'
.text:000000000000489A                 jmp     loc_4704
.text:000000000000489A ; ---------------------------------------------------------------------------
.text:000000000000489F                 align 20h
.text:00000000000048A0
.text:00000000000048A0 loc_48A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000048A0                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:00000000000048A0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000048A5                 mov     ebx, 76h ; 'v'
.text:00000000000048AA                 jmp     loc_4704
.text:00000000000048AA ; ---------------------------------------------------------------------------
.text:00000000000048AF                 align 10h
.text:00000000000048B0
.text:00000000000048B0 loc_48B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000048B0                                         ; DATA XREF: .rodata:jpt_45BE↓o
.text:00000000000048B0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000048B5                 mov     ebx, 6Eh ; 'n'
.text:00000000000048BA                 jmp     loc_46F2
.text:00000000000048BA ; ---------------------------------------------------------------------------
.text:00000000000048BF                 align 20h
.text:00000000000048C0
.text:00000000000048C0 def_494A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000048C0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000048C0                                         ; DATA XREF: ...
.text:00000000000048C0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000048C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000048C8
.text:00000000000048C8 def_45BE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000048C8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000048C8                                         ; DATA XREF: ...
.text:00000000000048C8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000048CE                 jnz     loc_4C78
.text:00000000000048D4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000048D9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000048DE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000048E3                 call    ___ctype_b_loc
.text:00000000000048E8                 mov     rcx, [rax]
.text:00000000000048EB                 movzx   edx, bl
.text:00000000000048EE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000048F4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000048FA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000048FF                 mov     edi, 1
.text:0000000000004904                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004908                 and     ax, 4000h
.text:000000000000490C                 setnz   r12b
.text:0000000000004910                 setz    al
.text:0000000000004913                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004917
.text:0000000000004917 loc_4917:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004917                 test    al, al
.text:0000000000004919                 jnz     loc_52B1
.text:000000000000491F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004924                 setz    dl
.text:0000000000004927                 jmp     loc_45F8
.text:0000000000004927 ; ---------------------------------------------------------------------------
.text:000000000000492C                 align 10h
.text:0000000000004930
.text:0000000000004930 loc_4930:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004930                 movzx   ebx, byte ptr [r9]
.text:0000000000004934                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004937                 ja      short def_494A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004939                 lea     rcx, jpt_494A
.text:0000000000004940                 movzx   edx, bl
.text:0000000000004943                 movsxd  rax, ds:(jpt_494A - 7D28h)[rcx+rdx*4]
.text:0000000000004947                 add     rax, rcx
.text:000000000000494A                 jmp     rax             ; switch jump
.text:000000000000494A ; ---------------------------------------------------------------------------
.text:000000000000494C                 align 10h
.text:0000000000004950
.text:0000000000004950 loc_4950:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004950                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004950                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004953                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004958                 jnz     loc_474E
.text:000000000000495E                 xchg    ax, ax
.text:0000000000004960
.text:0000000000004960 loc_4960:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004960                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004960                 mov     edx, 5Ch ; '\'
.text:0000000000004965                 mov     ebx, 5Ch ; '\'
.text:000000000000496A                 jmp     loc_4704
.text:000000000000496A ; ---------------------------------------------------------------------------
.text:000000000000496F                 align 10h
.text:0000000000004970
.text:0000000000004970 loc_4970:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004970                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004970                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004975                 xor     r10d, r10d
.text:0000000000004978                 mov     ebx, 66h ; 'f'
.text:000000000000497D                 jmp     loc_4704
.text:000000000000497D ; ---------------------------------------------------------------------------
.text:0000000000004982                 align 8
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004988                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004988                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000498D                 xor     r10d, r10d
.text:0000000000004990                 mov     ebx, 6Eh ; 'n'
.text:0000000000004995                 jmp     loc_46F2
.text:0000000000004995 ; ---------------------------------------------------------------------------
.text:000000000000499A                 align 20h
.text:00000000000049A0
.text:00000000000049A0 loc_49A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000049A0                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:00000000000049A0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000049A5                 jmp     loc_4770
.text:00000000000049A5 ; ---------------------------------------------------------------------------
.text:00000000000049AA                 align 10h
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000049B0                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:00000000000049B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000049B3
.text:00000000000049B3 loc_49B3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000049B3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000049B8                 setz    dl
.text:00000000000049BB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000049C0                 jnz     loc_555A
.text:00000000000049C6                 mov     eax, r8d
.text:00000000000049C9                 mov     rcx, r15
.text:00000000000049CC                 xor     eax, 1
.text:00000000000049CF                 and     al, dl
.text:00000000000049D1                 jz      short loc_4A00
.text:00000000000049D3                 cmp     r13, r15
.text:00000000000049D6                 jbe     short loc_49DD
.text:00000000000049D8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000049DD
.text:00000000000049DD loc_49DD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000049DD                 lea     rcx, [r15+1]
.text:00000000000049E1                 cmp     r13, rcx
.text:00000000000049E4                 jbe     short loc_49EC
.text:00000000000049E6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000049EC
.text:00000000000049EC loc_49EC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000049EC                 lea     rcx, [r15+2]
.text:00000000000049F0                 cmp     r13, rcx
.text:00000000000049F3                 ja      loc_5029
.text:00000000000049F9
.text:00000000000049F9 loc_49F9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000049F9                 lea     rcx, [r15+3]
.text:00000000000049FD                 mov     r8d, eax
.text:0000000000004A00
.text:0000000000004A00 loc_4A00:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004A00                 cmp     r13, rcx
.text:0000000000004A03                 jbe     short loc_4A0A
.text:0000000000004A05                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000004A0A
.text:0000000000004A0A loc_4A0A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000004A0A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004A0F                 lea     r15, [rcx+1]
.text:0000000000004A13                 jz      loc_5019
.text:0000000000004A19                 lea     rax, [rbp+1]
.text:0000000000004A1D                 cmp     rax, r11
.text:0000000000004A20                 jnb     short loc_4A3B
.text:0000000000004A22                 mov     rax, [rsp+0E8h+s]
.text:0000000000004A27                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000004A2C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004A30                 sub     eax, 30h ; '0'
.text:0000000000004A33                 cmp     al, 9
.text:0000000000004A35                 jbe     loc_5269
.text:0000000000004A3B
.text:0000000000004A3B loc_4A3B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000004A3B                 mov     eax, r12d
.text:0000000000004A3E                 mov     ebx, 30h ; '0'
.text:0000000000004A43                 xor     r12d, r12d
.text:0000000000004A46                 jmp     loc_45F8
.text:0000000000004A46 ; ---------------------------------------------------------------------------
.text:0000000000004A4B                 align 10h
.text:0000000000004A50
.text:0000000000004A50 loc_4A50:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004A50                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004A50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004A55                 mov     r12d, r10d
.text:0000000000004A58                 setz    dl
.text:0000000000004A5B                 xor     r10d, r10d
.text:0000000000004A5E                 xor     eax, eax
.text:0000000000004A60                 jmp     loc_45F8
.text:0000000000004A60 ; ---------------------------------------------------------------------------
.text:0000000000004A65                 align 8
.text:0000000000004A68
.text:0000000000004A68 loc_4A68:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004A68                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004A68                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000004A6D                 setz    dl
.text:0000000000004A70                 xor     r10d, r10d
.text:0000000000004A73                 jmp     loc_4838
.text:0000000000004A73 ; ---------------------------------------------------------------------------
.text:0000000000004A78                 align 20h
.text:0000000000004A80
.text:0000000000004A80 loc_4A80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004A80                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004A80                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004A85                 setz    dl
.text:0000000000004A88                 xor     r10d, r10d
.text:0000000000004A8B                 xor     r12d, r12d
.text:0000000000004A8E                 jmp     loc_4841
.text:0000000000004A8E ; ---------------------------------------------------------------------------
.text:0000000000004A93                 align 8
.text:0000000000004A98
.text:0000000000004A98 loc_4A98:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004A98                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004A98                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000004A9D                 mov     r12d, r10d
.text:0000000000004AA0                 mov     ebx, 20h ; ' '
.text:0000000000004AA5                 setz    dl
.text:0000000000004AA8                 xor     r10d, r10d
.text:0000000000004AAB                 jmp     loc_4841
.text:0000000000004AB0 ; ---------------------------------------------------------------------------
.text:0000000000004AB0
.text:0000000000004AB0 loc_4AB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004AB0                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004AB0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000004AB5                 xor     r10d, r10d
.text:0000000000004AB8                 mov     ebx, 72h ; 'r'
.text:0000000000004ABD                 jmp     loc_46F2
.text:0000000000004ABD ; ---------------------------------------------------------------------------
.text:0000000000004AC2                 align 8
.text:0000000000004AC8
.text:0000000000004AC8 loc_4AC8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004AC8                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004AC8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000004ACD                 jmp     loc_4770
.text:0000000000004ACD ; ---------------------------------------------------------------------------
.text:0000000000004AD2                 align 8
.text:0000000000004AD8
.text:0000000000004AD8 loc_4AD8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004AD8                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004AD8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000004ADD                 xor     r10d, r10d
.text:0000000000004AE0                 mov     ebx, 74h ; 't'
.text:0000000000004AE5                 jmp     loc_46F2
.text:0000000000004AE5 ; ---------------------------------------------------------------------------
.text:0000000000004AEA                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 loc_4AF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004AF0                                         ; DATA XREF: .rodata:jpt_494A↓o
.text:0000000000004AF0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000004AF5                 jmp     loc_4770
.text:0000000000004AF5 ; ---------------------------------------------------------------------------
.text:0000000000004AFA                 align 20h
.text:0000000000004B00
.text:0000000000004B00 loc_4B00:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000004B00                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000004B00                 xor     r10d, r10d
.text:0000000000004B03                 jmp     loc_45A0
.text:0000000000004B03 ; ---------------------------------------------------------------------------
.text:0000000000004B08                 align 10h
.text:0000000000004B10
.text:0000000000004B10 loc_4B10:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004B10                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004B15                 jnz     loc_5480
.text:0000000000004B1B
.text:0000000000004B1B loc_4B1B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000004B1B                 add     rbp, 1
.text:0000000000004B1F                 mov     eax, r8d
.text:0000000000004B22                 xor     r12d, r12d
.text:0000000000004B25                 mov     ebx, 5Ch ; '\'
.text:0000000000004B2A                 jmp     loc_463C
.text:0000000000004B2A ; ---------------------------------------------------------------------------
.text:0000000000004B2F                 align 10h
.text:0000000000004B30
.text:0000000000004B30 loc_4B30:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004B30                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004B35                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004B3A                 mov     r12d, r8d
.text:0000000000004B3D                 mov     rbp, r11
.text:0000000000004B40                 setz    dl
.text:0000000000004B43                 mov     eax, ebx
.text:0000000000004B45                 test    r15, r15
.text:0000000000004B48                 setz    cl
.text:0000000000004B4B                 and     eax, edx
.text:0000000000004B4D                 and     al, cl
.text:0000000000004B4F                 jnz     loc_55B6
.text:0000000000004B55                 mov     eax, ebx
.text:0000000000004B57                 xor     eax, 1
.text:0000000000004B5A                 and     dl, al
.text:0000000000004B5C                 jz      loc_54CC
.text:0000000000004B62                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004B67                 jz      loc_54CA
.text:0000000000004B6D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004B72                 jnz     loc_556D
.text:0000000000004B78                 test    r13, r13
.text:0000000000004B7B                 setz    al
.text:0000000000004B7E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004B84                 setnz   dl
.text:0000000000004B87                 and     al, dl
.text:0000000000004B89                 jz      loc_55AC
.text:0000000000004B8F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004B94
.text:0000000000004B94 loc_4B94:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004B94                 lea     rbx, asc_7A95   ; "'"
.text:0000000000004B9B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000004B9F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004BA7                 mov     r15d, 1
.text:0000000000004BAD                 mov     [rsp+0E8h+n], 1
.text:0000000000004BB6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004BBB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004BC0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004BC4                 jmp     loc_44A3
.text:0000000000004BC4 ; ---------------------------------------------------------------------------
.text:0000000000004BC9                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 loc_4BD0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004BD0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004BD5                 jnz     loc_5480
.text:0000000000004BDB                 test    r13, r13
.text:0000000000004BDE                 jz      loc_4FE0
.text:0000000000004BE4                 xor     edx, edx
.text:0000000000004BE6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004BEC                 jnz     loc_4FE0
.text:0000000000004BF2
.text:0000000000004BF2 loc_4BF2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000004BF2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000004BF2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000004BF7                 add     r15, 3
.text:0000000000004BFB                 xor     eax, eax
.text:0000000000004BFD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004C02                 xor     r8d, r8d
.text:0000000000004C05                 mov     r13, rdx
.text:0000000000004C08                 mov     ebx, 27h ; '''
.text:0000000000004C0D                 jmp     loc_4629
.text:0000000000004C0D ; ---------------------------------------------------------------------------
.text:0000000000004C12                 align 8
.text:0000000000004C18
.text:0000000000004C18 loc_4C18:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004C18                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000004C1D                 jz      short loc_4C40
.text:0000000000004C1F                 lea     rcx, [rbp+2]
.text:0000000000004C23                 cmp     rcx, r11
.text:0000000000004C26                 jnb     short loc_4C40
.text:0000000000004C28                 mov     rax, [rsp+0E8h+s]
.text:0000000000004C2D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004C32                 jz      loc_53C2
.text:0000000000004C38                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004C40                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004C40                 xor     edx, edx
.text:0000000000004C42                 xor     r12d, r12d
.text:0000000000004C45                 xor     eax, eax
.text:0000000000004C47                 mov     ebx, 3Fh ; '?'
.text:0000000000004C4C                 jmp     loc_45F8
.text:0000000000004C4C ; ---------------------------------------------------------------------------
.text:0000000000004C51                 align 8
.text:0000000000004C58
.text:0000000000004C58 loc_4C58:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004C58                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004C5D                 jnz     loc_5480
.text:0000000000004C63                 xor     r12d, r12d
.text:0000000000004C66                 xor     eax, eax
.text:0000000000004C68                 mov     ebx, 3Fh ; '?'
.text:0000000000004C6D                 jmp     loc_4629
.text:0000000000004C6D ; ---------------------------------------------------------------------------
.text:0000000000004C72                 align 8
.text:0000000000004C78
.text:0000000000004C78 loc_4C78:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004C78                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004C80                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C84                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004C90                 mov     [rsp+0E8h+ps], rax
.text:0000000000004C95                 jnz     short loc_4CC4
.text:0000000000004C97                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004C9C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004CA1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004CA6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000004CAB                 call    _strlen
.text:0000000000004CB0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004CB6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004CBC                 mov     r11, rax
.text:0000000000004CBF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004CC4
.text:0000000000004CC4 loc_4CC4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004CC4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000004CCC                 xor     ecx, ecx
.text:0000000000004CCE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004CD2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004CD7                 mov     rbx, rcx
.text:0000000000004CDA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004CE2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004CE7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000004CEC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004CF4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004CF9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000004CFE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004D03
.text:0000000000004D03 loc_4D03:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004D03                 mov     rax, [rsp+0E8h+s]
.text:0000000000004D08                 lea     r14, [rbp+rbx+0]
.text:0000000000004D0D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004D12                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004D17                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000004D1C                 lea     r13, [rax+r14]
.text:0000000000004D20                 sub     rdx, r14
.text:0000000000004D23                 mov     rsi, r13
.text:0000000000004D26                 call    rpl_mbrtowc
.text:0000000000004D2B                 test    rax, rax
.text:0000000000004D2E                 mov     r15, rax
.text:0000000000004D31                 jz      short loc_4D81
.text:0000000000004D33                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D37                 jz      loc_5355
.text:0000000000004D3D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004D41                 jz      loc_52E1
.text:0000000000004D47                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004D4C                 setz    al
.text:0000000000004D4F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004D53                 jnz     loc_4EF0
.text:0000000000004D59
.text:0000000000004D59 loc_4D59:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004D59                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004D59                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004D60                 call    _iswprint
.text:0000000000004D65                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000004D6A                 test    eax, eax
.text:0000000000004D6C                 mov     eax, 0
.text:0000000000004D71                 cmovz   r12d, eax
.text:0000000000004D75                 add     rbx, r15
.text:0000000000004D78                 call    _mbsinit
.text:0000000000004D7D                 test    eax, eax
.text:0000000000004D7F                 jz      short loc_4D03
.text:0000000000004D81
.text:0000000000004D81 loc_4D81:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004D81                 mov     edx, r12d
.text:0000000000004D84                 mov     rdi, rbx
.text:0000000000004D87                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004D8D                 xor     edx, 1
.text:0000000000004D90                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004D95                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004D9B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000004D9F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004DA7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004DAC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004DB1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004DB6
.text:0000000000004DB6 loc_4DB6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004DB6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004DB6                 cmp     rdi, 1
.text:0000000000004DBA                 jbe     loc_53BB
.text:0000000000004DC0
.text:0000000000004DC0 loc_4DC0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004DC0                 mov     rcx, rdi
.text:0000000000004DC3                 xor     esi, esi
.text:0000000000004DC5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000004DCB                 add     rcx, rbp
.text:0000000000004DCE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004DD3                 jmp     loc_4E8E
.text:0000000000004DD3 ; ---------------------------------------------------------------------------
.text:0000000000004DD8                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004DE0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004DE5                 setz    al
.text:0000000000004DE8                 test    r9b, r9b
.text:0000000000004DEB                 jnz     loc_52A0
.text:0000000000004DF1                 mov     esi, r8d
.text:0000000000004DF4                 xor     esi, 1
.text:0000000000004DF7                 and     al, sil
.text:0000000000004DFA                 jz      short loc_4E2B
.text:0000000000004DFC                 cmp     r13, r15
.text:0000000000004DFF                 jbe     short loc_4E06
.text:0000000000004E01                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004E06
.text:0000000000004E06 loc_4E06:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000004E06                 lea     rsi, [r15+1]
.text:0000000000004E0A                 cmp     r13, rsi
.text:0000000000004E0D                 jbe     short loc_4E15
.text:0000000000004E0F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004E15
.text:0000000000004E15 loc_4E15:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004E15                 lea     rsi, [r15+2]
.text:0000000000004E19                 cmp     r13, rsi
.text:0000000000004E1C                 jbe     short loc_4E24
.text:0000000000004E1E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004E24
.text:0000000000004E24 loc_4E24:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004E24                 add     r15, 3
.text:0000000000004E28                 mov     r8d, eax
.text:0000000000004E2B
.text:0000000000004E2B loc_4E2B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000004E2B                 cmp     r13, r15
.text:0000000000004E2E                 jbe     short loc_4E35
.text:0000000000004E30                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004E35
.text:0000000000004E35 loc_4E35:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004E35                 lea     rax, [r15+1]
.text:0000000000004E39                 cmp     r13, rax
.text:0000000000004E3C                 jbe     short loc_4E4B
.text:0000000000004E3E                 mov     eax, ebx
.text:0000000000004E40                 shr     al, 6
.text:0000000000004E43                 add     eax, 30h ; '0'
.text:0000000000004E46                 mov     [r14+r15+1], al
.text:0000000000004E4B
.text:0000000000004E4B loc_4E4B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000004E4B                 lea     rax, [r15+2]
.text:0000000000004E4F                 cmp     r13, rax
.text:0000000000004E52                 jbe     short loc_4E64
.text:0000000000004E54                 mov     eax, ebx
.text:0000000000004E56                 shr     al, 3
.text:0000000000004E59                 and     eax, 7
.text:0000000000004E5C                 add     eax, 30h ; '0'
.text:0000000000004E5F                 mov     [r14+r15+2], al
.text:0000000000004E64
.text:0000000000004E64 loc_4E64:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004E64                 and     ebx, 7
.text:0000000000004E67                 add     rbp, 1
.text:0000000000004E6B                 add     r15, 3
.text:0000000000004E6F                 add     ebx, 30h ; '0'
.text:0000000000004E72                 cmp     rbp, rcx
.text:0000000000004E75                 jnb     loc_4660
.text:0000000000004E7B                 mov     esi, edx
.text:0000000000004E7D
.text:0000000000004E7D loc_4E7D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000004E7D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000004E7D                 cmp     r13, r15
.text:0000000000004E80                 jbe     short loc_4E86
.text:0000000000004E82                 mov     [r14+r15], bl
.text:0000000000004E86
.text:0000000000004E86 loc_4E86:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004E86                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000004E8A                 add     r15, 1
.text:0000000000004E8E
.text:0000000000004E8E loc_4E8E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000004E8E                 test    dl, dl
.text:0000000000004E90                 jnz     loc_4DE0
.text:0000000000004E96                 mov     eax, esi
.text:0000000000004E98                 xor     eax, 1
.text:0000000000004E9B                 and     eax, r8d
.text:0000000000004E9E                 test    r10b, r10b
.text:0000000000004EA1                 jz      short loc_4EB1
.text:0000000000004EA3                 cmp     r13, r15
.text:0000000000004EA6                 jbe     short loc_4EAD
.text:0000000000004EA8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004EAD
.text:0000000000004EAD loc_4EAD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000004EAD                 add     r15, 1
.text:0000000000004EB1
.text:0000000000004EB1 loc_4EB1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004EB1                 add     rbp, 1
.text:0000000000004EB5                 cmp     rbp, rcx
.text:0000000000004EB8                 jnb     loc_463C
.text:0000000000004EBE                 test    al, al
.text:0000000000004EC0                 jz      loc_52BE
.text:0000000000004EC6                 cmp     r13, r15
.text:0000000000004EC9                 jbe     short loc_4ED0
.text:0000000000004ECB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004ED0
.text:0000000000004ED0 loc_4ED0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004ED0                 lea     rax, [r15+1]
.text:0000000000004ED4                 cmp     r13, rax
.text:0000000000004ED7                 jbe     short loc_4EDF
.text:0000000000004ED9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004EDF
.text:0000000000004EDF loc_4EDF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000004EDF                 add     r15, 2
.text:0000000000004EE3                 xor     r10d, r10d
.text:0000000000004EE6                 xor     r8d, r8d
.text:0000000000004EE9                 jmp     short loc_4E7D
.text:0000000000004EE9 ; ---------------------------------------------------------------------------
.text:0000000000004EEB                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 loc_4EF0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004EF0                 cmp     r15, 1
.text:0000000000004EF4                 jz      loc_4D59
.text:0000000000004EFA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004EFF                 lea     rcx, [rdi+r15]
.text:0000000000004F03                 lea     rdx, [rdi+r14+1]
.text:0000000000004F08                 lea     r8, [rcx+r14]
.text:0000000000004F0C                 jmp     short loc_4F1D
.text:0000000000004F0C ; ---------------------------------------------------------------------------
.text:0000000000004F0E                 align 10h
.text:0000000000004F10
.text:0000000000004F10 loc_4F10:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004F10                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004F10                 add     rdx, 1
.text:0000000000004F14                 cmp     r8, rdx
.text:0000000000004F17                 jz      loc_4D59
.text:0000000000004F1D
.text:0000000000004F1D loc_4F1D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000004F1D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004F20                 sub     ecx, 5Bh ; '['
.text:0000000000004F23                 cmp     cl, 21h ; '!'
.text:0000000000004F26                 ja      short loc_4F10
.text:0000000000004F28                 mov     esi, 1
.text:0000000000004F2D                 shl     rsi, cl
.text:0000000000004F30                 mov     rcx, rsi
.text:0000000000004F33                 mov     rsi, 20000002Bh
.text:0000000000004F3D                 test    rcx, rsi
.text:0000000000004F40                 jz      short loc_4F10
.text:0000000000004F42                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004F47                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004F4C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004F51                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004F59
.text:0000000000004F59 loc_4F59:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004F59                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004F59                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004F5E                 jz      short loc_4F70
.text:0000000000004F60                 test    al, al
.text:0000000000004F62                 mov     eax, 4
.text:0000000000004F67                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000004F6C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004F70
.text:0000000000004F70 loc_4F70:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004F70                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004F70                 sub     rsp, 8
.text:0000000000004F74                 mov     rcx, rbp
.text:0000000000004F77                 mov     rsi, r13
.text:0000000000004F7A                 push    [rsp+0F0h+var_88]
.text:0000000000004F7E                 push    [rsp+0F8h+var_80]
.text:0000000000004F82                 mov     rdi, r14
.text:0000000000004F85                 push    0
.text:0000000000004F87                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004F8F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004F94                 mov     rdx, [rsp+108h+s]
.text:0000000000004F99                 and     r9d, 0FFFFFFFDh
.text:0000000000004F9D                 call    quotearg_buffer_restyled
.text:0000000000004FA2                 add     rsp, 20h
.text:0000000000004FA6                 mov     r15, rax
.text:0000000000004FA9
.text:0000000000004FA9 loc_4FA9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004FA9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004FA9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004FB1                 xor     rbx, fs:28h
.text:0000000000004FBA                 mov     rax, r15
.text:0000000000004FBD                 jnz     loc_55C3
.text:0000000000004FC3                 add     rsp, 0B8h
.text:0000000000004FCA                 pop     rbx
.text:0000000000004FCB                 pop     rbp
.text:0000000000004FCC                 pop     r12
.text:0000000000004FCE                 pop     r13
.text:0000000000004FD0                 pop     r14
.text:0000000000004FD2                 pop     r15
.text:0000000000004FD4                 retn
.text:0000000000004FD4 ; ---------------------------------------------------------------------------
.text:0000000000004FD5                 align 8
.text:0000000000004FD8
.text:0000000000004FD8 loc_4FD8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004FD8                 mov     rbp, r11
.text:0000000000004FDB                 jmp     loc_4F59
.text:0000000000004FE0 ; ---------------------------------------------------------------------------
.text:0000000000004FE0
.text:0000000000004FE0 loc_4FE0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004FE0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004FE0                 cmp     r13, r15
.text:0000000000004FE3                 jbe     short loc_4FEA
.text:0000000000004FE5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004FEA
.text:0000000000004FEA loc_4FEA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000004FEA                 lea     rax, [r15+1]
.text:0000000000004FEE                 cmp     r13, rax
.text:0000000000004FF1                 jbe     short loc_4FF9
.text:0000000000004FF3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004FF9
.text:0000000000004FF9 loc_4FF9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004FF9                 lea     rax, [r15+2]
.text:0000000000004FFD                 cmp     r13, rax
.text:0000000000005000                 jbe     loc_55F2
.text:0000000000005006                 mov     rdx, r13
.text:0000000000005009                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000500F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000005014                 jmp     loc_4BF2
.text:0000000000005019 ; ---------------------------------------------------------------------------
.text:0000000000005019
.text:0000000000005019 loc_5019:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000005019                 mov     eax, r12d
.text:000000000000501C                 mov     ebx, 30h ; '0'
.text:0000000000005021                 xor     r12d, r12d
.text:0000000000005024                 jmp     loc_4629
.text:0000000000005029 ; ---------------------------------------------------------------------------
.text:0000000000005029
.text:0000000000005029 loc_5029:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000005029                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000502F                 jmp     loc_49F9
.text:0000000000005034 ; ---------------------------------------------------------------------------
.text:0000000000005034
.text:0000000000005034 loc_5034:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005034                                         ; DATA XREF: .rodata:jpt_4461↓o
.text:0000000000005034                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000005036                 jnz     loc_4463        ; jumptable 00000000000121F1 case 1
.text:000000000000503C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005041
.text:0000000000005041 loc_5041:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000005041                 test    r13, r13
.text:0000000000005044                 jnz     loc_55DA
.text:000000000000504A                 lea     rax, asc_7A95   ; "'"
.text:0000000000005051                 mov     [rsp+0E8h+var_98], 0
.text:000000000000505A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000505F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005064                 xor     r12d, r12d
.text:0000000000005067                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000506C                 mov     [rsp+0E8h+n], 1
.text:0000000000005075                 mov     [rsp+0E8h+s2], rax
.text:000000000000507A                 mov     r15d, 1
.text:0000000000005080                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005088                 jmp     loc_44A3
.text:0000000000005088 ; ---------------------------------------------------------------------------
.text:000000000000508D                 align 10h
.text:0000000000005090
.text:0000000000005090 loc_5090:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005090                                         ; DATA XREF: .rodata:jpt_4461↓o
.text:0000000000005090                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000005092                 jnz     loc_548D
.text:0000000000005098                 test    r13, r13
.text:000000000000509B                 jz      loc_52C6
.text:00000000000050A1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000050A5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000050AA                 xor     r12d, r12d
.text:00000000000050AD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000050B2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000050BB
.text:00000000000050BB loc_50BB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000050BB                 lea     rax, unk_7A93
.text:00000000000050C2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000050C7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000050CC                 mov     [rsp+0E8h+n], 1
.text:00000000000050D5                 mov     r15d, 1
.text:00000000000050DB                 mov     [rsp+0E8h+s2], rax
.text:00000000000050E0                 jmp     loc_44A3
.text:00000000000050E5 ; ---------------------------------------------------------------------------
.text:00000000000050E5
.text:00000000000050E5 loc_50E5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000050E5                                         ; DATA XREF: .rodata:jpt_4461↓o
.text:00000000000050E5                 lea     rax, unk_7A93   ; jumptable 00000000000121F1 case 6
.text:00000000000050EC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000050F1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000050F6                 xor     r12d, r12d
.text:00000000000050F9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005102                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005107                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000510C                 mov     [rsp+0E8h+n], 1
.text:0000000000005115                 xor     r15d, r15d
.text:0000000000005118                 mov     [rsp+0E8h+s2], rax
.text:000000000000511D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000005125                 jmp     loc_44A3
.text:000000000000512A ; ---------------------------------------------------------------------------
.text:000000000000512A
.text:000000000000512A loc_512A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000512A                                         ; DATA XREF: .rodata:jpt_4461↓o
.text:000000000000512A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000512F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005134                 xor     r12d, r12d
.text:0000000000005137                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005140                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005145                 xor     r15d, r15d
.text:0000000000005148                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000514D                 mov     [rsp+0E8h+n], 0
.text:0000000000005156                 mov     [rsp+0E8h+s2], 0
.text:000000000000515F                 jmp     loc_44A3
.text:0000000000005164 ; ---------------------------------------------------------------------------
.text:0000000000005164
.text:0000000000005164 loc_5164:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005164                                         ; DATA XREF: .rodata:jpt_4461↓o
.text:0000000000005164                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000005169                 jz      short loc_51C1
.text:000000000000516B                 lea     rsi, asc_7A97   ; "`"
.text:0000000000005172                 xor     edi, edi        ; domainname
.text:0000000000005174                 mov     edx, 5          ; category
.text:0000000000005179                 call    _dcgettext
.text:000000000000517E                 mov     rcx, rax
.text:0000000000005181                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005186                 lea     rax, asc_7A97   ; "`"
.text:000000000000518D                 cmp     rcx, rax
.text:0000000000005190                 jz      loc_552E
.text:0000000000005196
.text:0000000000005196 loc_5196:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000005196                 lea     rsi, asc_7A95   ; "'"
.text:000000000000519D                 xor     edi, edi        ; domainname
.text:000000000000519F                 mov     edx, 5          ; category
.text:00000000000051A4                 call    _dcgettext
.text:00000000000051A9                 mov     rcx, rax
.text:00000000000051AC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000051B1                 lea     rax, asc_7A95   ; "'"
.text:00000000000051B8                 cmp     rcx, rax
.text:00000000000051BB                 jz      loc_5544
.text:00000000000051C1
.text:00000000000051C1 loc_51C1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000051C1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000051C1                 xor     r15d, r15d
.text:00000000000051C4                 test    ebx, ebx
.text:00000000000051C6                 jz      loc_538D
.text:00000000000051CC
.text:00000000000051CC loc_51CC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000051CC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000051CC                 test    ebx, ebx
.text:00000000000051CE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000051D3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000051D8                 xor     r12d, r12d
.text:00000000000051DB                 mov     rdi, rbx        ; s
.text:00000000000051DE                 call    _strlen
.text:00000000000051E3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000051E8                 mov     [rsp+0E8h+n], rax
.text:00000000000051ED                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000051F2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000051F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005200                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005205                 jmp     loc_44A3
.text:000000000000520A ; ---------------------------------------------------------------------------
.text:000000000000520A
.text:000000000000520A loc_520A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000520A                                         ; DATA XREF: .rodata:jpt_4461↓o
.text:000000000000520A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000520F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005214                 xor     r12d, r12d
.text:0000000000005217                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005220                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005225                 xor     r15d, r15d
.text:0000000000005228                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000522D                 mov     [rsp+0E8h+n], 0
.text:0000000000005236                 mov     [rsp+0E8h+s2], 0
.text:000000000000523F                 jmp     loc_44A3
.text:0000000000005244 ; ---------------------------------------------------------------------------
.text:0000000000005244
.text:0000000000005244 loc_5244:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005244                                         ; DATA XREF: .rodata:jpt_4461↓o
.text:0000000000005244                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000005249                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000524E                 xor     r12d, r12d
.text:0000000000005251                 mov     [rsp+0E8h+var_98], 0
.text:000000000000525A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000525F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005264                 jmp     loc_4483
.text:0000000000005269 ; ---------------------------------------------------------------------------
.text:0000000000005269
.text:0000000000005269 loc_5269:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000005269                 cmp     r13, r15
.text:000000000000526C                 jbe     short loc_5273
.text:000000000000526E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000005273
.text:0000000000005273 loc_5273:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000005273                 lea     rax, [rcx+2]
.text:0000000000005277                 cmp     r13, rax
.text:000000000000527A                 jbe     short loc_5282
.text:000000000000527C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000005282
.text:0000000000005282 loc_5282:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000005282                 mov     eax, r12d
.text:0000000000005285                 lea     r15, [rcx+3]
.text:0000000000005289                 xor     r12d, r12d
.text:000000000000528C                 mov     ebx, 30h ; '0'
.text:0000000000005291                 jmp     loc_45F8
.text:0000000000005291 ; ---------------------------------------------------------------------------
.text:0000000000005296                 align 20h
.text:00000000000052A0
.text:00000000000052A0 loc_52A0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000052A0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000052A5                 mov     rbp, r11
.text:00000000000052A8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000052AC                 jmp     loc_4F59
.text:00000000000052B1 ; ---------------------------------------------------------------------------
.text:00000000000052B1
.text:00000000000052B1 loc_52B1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000052B1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000052B6                 xor     r12d, r12d
.text:00000000000052B9                 jmp     loc_4DC0
.text:00000000000052BE ; ---------------------------------------------------------------------------
.text:00000000000052BE
.text:00000000000052BE loc_52BE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000052BE                 xor     r10d, r10d
.text:00000000000052C1                 jmp     loc_4E7D
.text:00000000000052C6 ; ---------------------------------------------------------------------------
.text:00000000000052C6
.text:00000000000052C6 loc_52C6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000052C6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000052CF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000052D4                 xor     r12d, r12d
.text:00000000000052D7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000052DC                 jmp     loc_50BB
.text:00000000000052E1 ; ---------------------------------------------------------------------------
.text:00000000000052E1
.text:00000000000052E1 loc_52E1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000052E1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000052E6                 mov     rsi, r14
.text:00000000000052E9                 mov     rcx, r13
.text:00000000000052EC                 mov     rax, rbx
.text:00000000000052EF                 mov     rdi, rbx
.text:00000000000052F2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000052F8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000052FD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000005305                 cmp     rsi, r11
.text:0000000000005308                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000530E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005316                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000531B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005320                 jnb     short loc_5348
.text:0000000000005322                 cmp     byte ptr [rcx], 0
.text:0000000000005325                 jnz     short loc_5337
.text:0000000000005327                 jmp     short loc_5348
.text:0000000000005327 ; ---------------------------------------------------------------------------
.text:0000000000005329                 align 10h
.text:0000000000005330
.text:0000000000005330 loc_5330:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000005330                 cmp     byte ptr [r9+rax], 0
.text:0000000000005335                 jz      short loc_5345
.text:0000000000005337
.text:0000000000005337 loc_5337:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000005337                 add     rax, 1
.text:000000000000533B                 lea     rdx, [rbp+rax+0]
.text:0000000000005340                 cmp     r11, rdx
.text:0000000000005343                 ja      short loc_5330
.text:0000000000005345
.text:0000000000005345 loc_5345:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000005345                 mov     rdi, rax
.text:0000000000005348
.text:0000000000005348 loc_5348:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000005348                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000005348                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000534D                 xor     r12d, r12d
.text:0000000000005350                 jmp     loc_4DB6
.text:0000000000005355 ; ---------------------------------------------------------------------------
.text:0000000000005355
.text:0000000000005355 loc_5355:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005355                 mov     rdi, rbx
.text:0000000000005358                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000535E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005363                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000005369                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005371                 xor     r12d, r12d
.text:0000000000005374                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005379                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000537E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005383                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000005388                 jmp     loc_4DB6
.text:000000000000538D ; ---------------------------------------------------------------------------
.text:000000000000538D
.text:000000000000538D loc_538D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000538D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000005392                 movzx   eax, byte ptr [rdx]
.text:0000000000005395                 test    al, al
.text:0000000000005397                 jz      loc_51CC
.text:000000000000539D                 nop     dword ptr [rax]
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000053A0                 cmp     r13, r15
.text:00000000000053A3                 jbe     short loc_53A9
.text:00000000000053A5                 mov     [r14+r15], al
.text:00000000000053A9
.text:00000000000053A9 loc_53A9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000053A9                 add     r15, 1
.text:00000000000053AD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000053B2                 test    al, al
.text:00000000000053B4                 jnz     short loc_53A0
.text:00000000000053B6                 jmp     loc_51CC
.text:00000000000053BB ; ---------------------------------------------------------------------------
.text:00000000000053BB
.text:00000000000053BB loc_53BB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000053BB                 mov     eax, edx
.text:00000000000053BD                 jmp     loc_4917
.text:00000000000053C2 ; ---------------------------------------------------------------------------
.text:00000000000053C2
.text:00000000000053C2 loc_53C2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000053C2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000053C6                 cmp     bl, 3Eh ; '>'
.text:00000000000053C9                 ja      loc_4C40
.text:00000000000053CF                 mov     rax, 7000A38200000000h
.text:00000000000053D9                 bt      rax, rbx
.text:00000000000053DD                 jnb     loc_4C40
.text:00000000000053E3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000053E8                 jnz     loc_55D2
.text:00000000000053EE                 cmp     r13, r15
.text:00000000000053F1                 jbe     short loc_53F8
.text:00000000000053F3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000053F8
.text:00000000000053F8 loc_53F8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000053F8                 lea     rax, [r15+1]
.text:00000000000053FC                 cmp     r13, rax
.text:00000000000053FF                 jbe     short loc_5407
.text:0000000000005401                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000005407
.text:0000000000005407 loc_5407:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000005407                 lea     rax, [r15+2]
.text:000000000000540B                 cmp     r13, rax
.text:000000000000540E                 jbe     short loc_5416
.text:0000000000005410                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000005416
.text:0000000000005416 loc_5416:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000005416                 lea     rax, [r15+3]
.text:000000000000541A                 cmp     r13, rax
.text:000000000000541D                 jbe     short loc_5425
.text:000000000000541F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000005425
.text:0000000000005425 loc_5425:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000005425                 add     r15, 4
.text:0000000000005429                 xor     edx, edx
.text:000000000000542B                 xor     r12d, r12d
.text:000000000000542E                 xor     eax, eax
.text:0000000000005430                 mov     rbp, rcx
.text:0000000000005433                 jmp     loc_45F8
.text:0000000000005438 ; ---------------------------------------------------------------------------
.text:0000000000005438
.text:0000000000005438 loc_5438:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005438                                         ; DATA XREF: .rodata:jpt_4461↓o
.text:0000000000005438                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000543A                 jz      loc_55C8
.text:0000000000005440                 lea     rax, asc_7A95   ; "'"
.text:0000000000005447                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000544C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005451                 xor     r12d, r12d
.text:0000000000005454                 mov     [rsp+0E8h+var_98], 0
.text:000000000000545D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005462                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005467                 mov     [rsp+0E8h+n], 1
.text:0000000000005470                 xor     r15d, r15d
.text:0000000000005473                 mov     [rsp+0E8h+s2], rax
.text:0000000000005478                 jmp     loc_44A3
.text:0000000000005478 ; ---------------------------------------------------------------------------
.text:000000000000547D                 align 20h
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000005480                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000005480                 mov     rbp, r11
.text:0000000000005483                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000005488                 jmp     loc_4F59
.text:000000000000548D ; ---------------------------------------------------------------------------
.text:000000000000548D
.text:000000000000548D loc_548D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000548D                 lea     rax, unk_7A93
.text:0000000000005494                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005499                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000549E                 xor     r12d, r12d
.text:00000000000054A1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000054AA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000054AF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000054B4                 mov     [rsp+0E8h+n], 1
.text:00000000000054BD                 xor     r15d, r15d
.text:00000000000054C0                 mov     [rsp+0E8h+s2], rax
.text:00000000000054C5                 jmp     loc_44A3
.text:00000000000054CA ; ---------------------------------------------------------------------------
.text:00000000000054CA
.text:00000000000054CA loc_54CA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000054CA                 mov     eax, edx
.text:00000000000054CC
.text:00000000000054CC loc_54CC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000054CC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000054CC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000054D1                 test    rbx, rbx
.text:00000000000054D4                 jz      short loc_5502
.text:00000000000054D6                 test    al, al
.text:00000000000054D8                 jz      short loc_5502
.text:00000000000054DA                 movzx   ecx, byte ptr [rbx]
.text:00000000000054DD                 mov     rax, rbx
.text:00000000000054E0                 test    cl, cl
.text:00000000000054E2                 jz      short loc_5502
.text:00000000000054E4                 mov     rdx, r15
.text:00000000000054E7                 sub     rax, r15
.text:00000000000054EA
.text:00000000000054EA loc_54EA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000054EA                 cmp     r13, rdx
.text:00000000000054ED                 jbe     short loc_54F3
.text:00000000000054EF                 mov     [r14+rdx], cl
.text:00000000000054F3
.text:00000000000054F3 loc_54F3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000054F3                 add     rdx, 1
.text:00000000000054F7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000054FB                 test    cl, cl
.text:00000000000054FD                 jnz     short loc_54EA
.text:00000000000054FF                 mov     r15, rdx
.text:0000000000005502
.text:0000000000005502 loc_5502:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000005502                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000005502                 cmp     r13, r15
.text:0000000000005505                 jbe     loc_4FA9
.text:000000000000550B                 mov     byte ptr [r14+r15], 0
.text:0000000000005510                 jmp     loc_4FA9
.text:0000000000005515 ; ---------------------------------------------------------------------------
.text:0000000000005515
.text:0000000000005515 loc_5515:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000005515                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000551A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000551F                 mov     rbp, r11
.text:0000000000005522                 setz    al
.text:0000000000005525                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005529                 jmp     loc_4F59
.text:000000000000552E ; ---------------------------------------------------------------------------
.text:000000000000552E
.text:000000000000552E loc_552E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000552E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005532                 mov     rdi, rcx
.text:0000000000005535                 call    gettext_quote
.text:000000000000553A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000553F                 jmp     loc_5196
.text:0000000000005544 ; ---------------------------------------------------------------------------
.text:0000000000005544
.text:0000000000005544 loc_5544:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005544                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005548                 mov     rdi, rcx
.text:000000000000554B                 call    gettext_quote
.text:0000000000005550                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005555                 jmp     loc_51C1
.text:000000000000555A ; ---------------------------------------------------------------------------
.text:000000000000555A
.text:000000000000555A loc_555A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000555A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000555F                 mov     rbp, r11
.text:0000000000005562                 mov     eax, edx
.text:0000000000005564                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005568                 jmp     loc_4F59
.text:000000000000556D ; ---------------------------------------------------------------------------
.text:000000000000556D
.text:000000000000556D loc_556D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000556D                 sub     rsp, 8
.text:0000000000005571                 mov     r8d, 5
.text:0000000000005577                 mov     rcx, r11
.text:000000000000557A                 push    [rsp+0F0h+var_88]
.text:000000000000557E                 push    [rsp+0F8h+var_80]
.text:0000000000005582                 mov     rdi, r14
.text:0000000000005585                 push    [rsp+100h+var_C8]
.text:0000000000005589                 mov     r9d, [rsp+108h+var_70]
.text:0000000000005591                 mov     rdx, [rsp+108h+s]
.text:0000000000005596                 mov     rsi, [rsp+108h+var_98]
.text:000000000000559B                 call    quotearg_buffer_restyled
.text:00000000000055A0                 add     rsp, 20h
.text:00000000000055A4                 mov     r15, rax
.text:00000000000055A7                 jmp     loc_4FA9
.text:00000000000055AC ; ---------------------------------------------------------------------------
.text:00000000000055AC
.text:00000000000055AC loc_55AC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000055AC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000055B1                 jmp     loc_54CC
.text:00000000000055B6 ; ---------------------------------------------------------------------------
.text:00000000000055B6
.text:00000000000055B6 loc_55B6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000055B6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000055BE                 jmp     loc_4F59
.text:00000000000055C3 ; ---------------------------------------------------------------------------
.text:00000000000055C3
.text:00000000000055C3 loc_55C3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000055C3                 call    ___stack_chk_fail
.text:00000000000055C8 ; ---------------------------------------------------------------------------
.text:00000000000055C8
.text:00000000000055C8 loc_55C8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000055C8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000055CD                 jmp     loc_5041
.text:00000000000055D2 ; ---------------------------------------------------------------------------
.text:00000000000055D2
.text:00000000000055D2 loc_55D2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000055D2                 mov     rbp, r11
.text:00000000000055D5                 jmp     loc_4F70
.text:00000000000055DA ; ---------------------------------------------------------------------------
.text:00000000000055DA
.text:00000000000055DA loc_55DA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000055DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000055DF                 xor     eax, eax
.text:00000000000055E1                 xor     r12d, r12d
.text:00000000000055E4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000055ED                 jmp     loc_4B94
.text:00000000000055F2 ; ---------------------------------------------------------------------------
.text:00000000000055F2
.text:00000000000055F2 loc_55F2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000055F2                 mov     rdx, r13
.text:00000000000055F5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000055FA                 jmp     loc_4BF2
.text:00000000000055FF ; ---------------------------------------------------------------------------
.text:00000000000055FF
.text:00000000000055FF def_4461:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000055FF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000055FF ; } // starts at 43D0
.text:00000000000055FF quotearg_buffer_restyled endp
.text:00000000000055FF
.text:00000000000055FF ; ---------------------------------------------------------------------------
.text:0000000000005604                 align 10h
.text:0000000000005610
.text:0000000000005610 ; =============== S U B R O U T I N E =======================================
.text:0000000000005610
.text:0000000000005610
.text:0000000000005610 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000005610                                         ; quotearg_n_mem+7↓j ...
.text:0000000000005610
.text:0000000000005610 var_50          = qword ptr -50h
.text:0000000000005610 var_48          = qword ptr -48h
.text:0000000000005610 var_40          = dword ptr -40h
.text:0000000000005610 var_3C          = dword ptr -3Ch
.text:0000000000005610
.text:0000000000005610 ; __unwind {
.text:0000000000005610                 push    r15
.text:0000000000005612                 push    r14
.text:0000000000005614                 movsxd  r15, edi
.text:0000000000005617                 push    r13
.text:0000000000005619                 push    r12
.text:000000000000561B                 mov     r14, rdx
.text:000000000000561E                 push    rbp
.text:000000000000561F                 push    rbx
.text:0000000000005620                 mov     rbp, rcx
.text:0000000000005623                 sub     rsp, 28h
.text:0000000000005627                 mov     [rsp+58h+var_50], rsi
.text:000000000000562C                 call    ___errno_location
.text:0000000000005631                 mov     r13, rax
.text:0000000000005634                 mov     eax, [rax]
.text:0000000000005636                 test    r15d, r15d
.text:0000000000005639                 mov     rbx, cs:slotvec
.text:0000000000005640                 mov     [rsp+58h+var_40], eax
.text:0000000000005644                 js      loc_57B1
.text:000000000000564A                 cmp     cs:nslots, r15d
.text:0000000000005651                 jg      short loc_56B5
.text:0000000000005653                 cmp     r15d, 7FFFFFFFh
.text:000000000000565A                 jz      loc_57B6
.text:0000000000005660                 lea     r12d, [r15+1]
.text:0000000000005664                 lea     rax, slotvec0
.text:000000000000566B                 movsxd  rsi, r12d
.text:000000000000566E                 shl     rsi, 4
.text:0000000000005672                 cmp     rbx, rax
.text:0000000000005675                 jz      loc_5790
.text:000000000000567B                 mov     rdi, rbx
.text:000000000000567E                 call    xrealloc
.text:0000000000005683                 mov     rbx, rax
.text:0000000000005686                 mov     cs:slotvec, rax
.text:000000000000568D
.text:000000000000568D loc_568D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000568D                 movsxd  rdi, cs:nslots
.text:0000000000005694                 mov     edx, r12d
.text:0000000000005697                 xor     esi, esi        ; c
.text:0000000000005699                 sub     edx, edi
.text:000000000000569B                 shl     rdi, 4
.text:000000000000569F                 movsxd  rdx, edx
.text:00000000000056A2                 add     rdi, rbx        ; s
.text:00000000000056A5                 shl     rdx, 4          ; n
.text:00000000000056A9                 call    _memset
.text:00000000000056AE                 mov     cs:nslots, r12d
.text:00000000000056B5
.text:00000000000056B5 loc_56B5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000056B5                 mov     eax, [rbp+4]
.text:00000000000056B8                 shl     r15, 4
.text:00000000000056BC                 sub     rsp, 8
.text:00000000000056C0                 add     rbx, r15
.text:00000000000056C3                 lea     r15, [rbp+8]
.text:00000000000056C7                 mov     r8d, [rbp+0]
.text:00000000000056CB                 mov     r11, [rbx]
.text:00000000000056CE                 mov     r12, [rbx+8]
.text:00000000000056D2                 mov     rcx, r14
.text:00000000000056D5                 or      eax, 1
.text:00000000000056D8                 mov     [rsp+60h+var_3C], eax
.text:00000000000056DC                 push    qword ptr [rbp+30h]
.text:00000000000056DF                 mov     r9d, eax
.text:00000000000056E2                 push    qword ptr [rbp+28h]
.text:00000000000056E5                 push    r15
.text:00000000000056E7                 mov     rsi, r11
.text:00000000000056EA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000056EF                 mov     rdi, r12
.text:00000000000056F2                 mov     [rsp+78h+var_48], r11
.text:00000000000056F7                 call    quotearg_buffer_restyled
.text:00000000000056FC                 add     rsp, 20h
.text:0000000000005700                 mov     r11, [rsp+58h+var_48]
.text:0000000000005705                 cmp     r11, rax
.text:0000000000005708                 ja      short loc_5771
.text:000000000000570A                 lea     rsi, [rax+1]
.text:000000000000570E                 lea     rax, slot0
.text:0000000000005715                 cmp     r12, rax
.text:0000000000005718                 mov     [rbx], rsi
.text:000000000000571B                 jz      short loc_572F
.text:000000000000571D                 mov     rdi, r12        ; ptr
.text:0000000000005720                 mov     [rsp+58h+var_48], rsi
.text:0000000000005725                 call    _free
.text:000000000000572A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000572F
.text:000000000000572F loc_572F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000572F                 mov     rdi, rsi
.text:0000000000005732                 mov     [rsp+58h+var_48], rsi
.text:0000000000005737                 call    xmalloc
.text:000000000000573C                 sub     rsp, 8
.text:0000000000005740                 mov     [rbx+8], rax
.text:0000000000005744                 mov     r8d, [rbp+0]
.text:0000000000005748                 push    qword ptr [rbp+30h]
.text:000000000000574B                 push    qword ptr [rbp+28h]
.text:000000000000574E                 mov     rcx, r14
.text:0000000000005751                 push    r15
.text:0000000000005753                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005758                 mov     rdi, rax
.text:000000000000575B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005760                 mov     rsi, [rsp+78h+var_48]
.text:0000000000005765                 mov     r12, rax
.text:0000000000005768                 call    quotearg_buffer_restyled
.text:000000000000576D                 add     rsp, 20h
.text:0000000000005771
.text:0000000000005771 loc_5771:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000005771                 mov     eax, [rsp+58h+var_40]
.text:0000000000005775                 mov     [r13+0], eax
.text:0000000000005779                 add     rsp, 28h
.text:000000000000577D                 mov     rax, r12
.text:0000000000005780                 pop     rbx
.text:0000000000005781                 pop     rbp
.text:0000000000005782                 pop     r12
.text:0000000000005784                 pop     r13
.text:0000000000005786                 pop     r14
.text:0000000000005788                 pop     r15
.text:000000000000578A                 retn
.text:000000000000578A ; ---------------------------------------------------------------------------
.text:000000000000578B                 align 10h
.text:0000000000005790
.text:0000000000005790 loc_5790:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000005790                 xor     edi, edi
.text:0000000000005792                 call    xrealloc
.text:0000000000005797                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000579F                 mov     rbx, rax
.text:00000000000057A2                 mov     cs:slotvec, rax
.text:00000000000057A9                 movups  xmmword ptr [rax], xmm0
.text:00000000000057AC                 jmp     loc_568D
.text:00000000000057B1 ; ---------------------------------------------------------------------------
.text:00000000000057B1
.text:00000000000057B1 loc_57B1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000057B1                 call    _abort
.text:00000000000057B6 ; ---------------------------------------------------------------------------
.text:00000000000057B6
.text:00000000000057B6 loc_57B6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000057B6                 call    xalloc_die
.text:00000000000057B6 ; } // starts at 5610
.text:00000000000057B6 quotearg_n_options endp
.text:00000000000057B6
.text:00000000000057B6 ; ---------------------------------------------------------------------------
.text:00000000000057BB                 align 20h
.text:00000000000057C0
.text:00000000000057C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057C0
.text:00000000000057C0 ; Attributes: info_from_lumina
.text:00000000000057C0
.text:00000000000057C0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000057C0                 public clone_quoting_options
.text:00000000000057C0 clone_quoting_options proc near
.text:00000000000057C0 ; __unwind {
.text:00000000000057C0                 push    r12
.text:00000000000057C2                 push    rbp
.text:00000000000057C3                 push    rbx
.text:00000000000057C4                 mov     rbx, rdi
.text:00000000000057C7                 call    ___errno_location
.text:00000000000057CC                 mov     r12d, [rax]
.text:00000000000057CF                 mov     rbp, rax
.text:00000000000057D2                 lea     rax, default_quoting_options
.text:00000000000057D9                 test    rbx, rbx
.text:00000000000057DC                 mov     esi, 38h ; '8'  ; n
.text:00000000000057E1                 cmovz   rbx, rax
.text:00000000000057E5                 mov     rdi, rbx        ; src
.text:00000000000057E8                 call    xmemdup
.text:00000000000057ED                 mov     [rbp+0], r12d
.text:00000000000057F1                 pop     rbx
.text:00000000000057F2                 pop     rbp
.text:00000000000057F3                 pop     r12
.text:00000000000057F5                 retn
.text:00000000000057F5 ; } // starts at 57C0
.text:00000000000057F5 clone_quoting_options endp
.text:00000000000057F5
.text:00000000000057F5 ; ---------------------------------------------------------------------------
.text:00000000000057F6                 align 20h
.text:0000000000005800
.text:0000000000005800 ; =============== S U B R O U T I N E =======================================
.text:0000000000005800
.text:0000000000005800
.text:0000000000005800                 public get_quoting_style
.text:0000000000005800 get_quoting_style proc near
.text:0000000000005800 ; __unwind {
.text:0000000000005800                 lea     rax, default_quoting_options
.text:0000000000005807                 test    rdi, rdi
.text:000000000000580A                 cmovz   rdi, rax
.text:000000000000580E                 mov     eax, [rdi]
.text:0000000000005810                 retn
.text:0000000000005810 ; } // starts at 5800
.text:0000000000005810 get_quoting_style endp
.text:0000000000005810
.text:0000000000005810 ; ---------------------------------------------------------------------------
.text:0000000000005811                 align 20h
.text:0000000000005820
.text:0000000000005820 ; =============== S U B R O U T I N E =======================================
.text:0000000000005820
.text:0000000000005820
.text:0000000000005820                 public set_quoting_style
.text:0000000000005820 set_quoting_style proc near
.text:0000000000005820 ; __unwind {
.text:0000000000005820                 lea     rax, default_quoting_options
.text:0000000000005827                 test    rdi, rdi
.text:000000000000582A                 cmovz   rdi, rax
.text:000000000000582E                 mov     [rdi], esi
.text:0000000000005830                 retn
.text:0000000000005830 ; } // starts at 5820
.text:0000000000005830 set_quoting_style endp
.text:0000000000005830
.text:0000000000005830 ; ---------------------------------------------------------------------------
.text:0000000000005831                 align 20h
.text:0000000000005840
.text:0000000000005840 ; =============== S U B R O U T I N E =======================================
.text:0000000000005840
.text:0000000000005840 ; Attributes: info_from_lumina
.text:0000000000005840
.text:0000000000005840 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005840                 public set_char_quoting
.text:0000000000005840 set_char_quoting proc near
.text:0000000000005840 ; __unwind {
.text:0000000000005840                 lea     rax, default_quoting_options
.text:0000000000005847                 test    rdi, rdi
.text:000000000000584A                 mov     ecx, esi
.text:000000000000584C                 cmovz   rdi, rax
.text:0000000000005850                 mov     eax, esi
.text:0000000000005852                 and     ecx, 1Fh
.text:0000000000005855                 shr     al, 5
.text:0000000000005858                 movzx   eax, al
.text:000000000000585B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000005860                 mov     esi, [rdi]
.text:0000000000005862                 mov     eax, esi
.text:0000000000005864                 shr     eax, cl
.text:0000000000005866                 xor     edx, eax
.text:0000000000005868                 and     eax, 1
.text:000000000000586B                 and     edx, 1
.text:000000000000586E                 shl     edx, cl
.text:0000000000005870                 xor     edx, esi
.text:0000000000005872                 mov     [rdi], edx
.text:0000000000005874                 retn
.text:0000000000005874 ; } // starts at 5840
.text:0000000000005874 set_char_quoting endp
.text:0000000000005874
.text:0000000000005874 ; ---------------------------------------------------------------------------
.text:0000000000005875                 align 20h
.text:0000000000005880
.text:0000000000005880 ; =============== S U B R O U T I N E =======================================
.text:0000000000005880
.text:0000000000005880
.text:0000000000005880                 public set_quoting_flags
.text:0000000000005880 set_quoting_flags proc near
.text:0000000000005880 ; __unwind {
.text:0000000000005880                 lea     rax, default_quoting_options
.text:0000000000005887                 test    rdi, rdi
.text:000000000000588A                 cmovz   rdi, rax
.text:000000000000588E                 mov     eax, [rdi+4]
.text:0000000000005891                 mov     [rdi+4], esi
.text:0000000000005894                 retn
.text:0000000000005894 ; } // starts at 5880
.text:0000000000005894 set_quoting_flags endp
.text:0000000000005894
.text:0000000000005894 ; ---------------------------------------------------------------------------
.text:0000000000005895                 align 20h
.text:00000000000058A0
.text:00000000000058A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058A0
.text:00000000000058A0 ; Attributes: info_from_lumina
.text:00000000000058A0
.text:00000000000058A0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000058A0                 public set_custom_quoting
.text:00000000000058A0 set_custom_quoting proc near
.text:00000000000058A0 ; __unwind {
.text:00000000000058A0                 lea     rax, default_quoting_options
.text:00000000000058A7                 test    rdi, rdi
.text:00000000000058AA                 cmovz   rdi, rax
.text:00000000000058AE                 test    rsi, rsi
.text:00000000000058B1                 mov     dword ptr [rdi], 0Ah
.text:00000000000058B7                 jz      short loc_58C7
.text:00000000000058B9                 test    rdx, rdx
.text:00000000000058BC                 jz      short loc_58C7
.text:00000000000058BE                 mov     [rdi+28h], rsi
.text:00000000000058C2                 mov     [rdi+30h], rdx
.text:00000000000058C6                 retn
.text:00000000000058C7 ; ---------------------------------------------------------------------------
.text:00000000000058C7
.text:00000000000058C7 loc_58C7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000058C7                                         ; set_custom_quoting+1C↑j
.text:00000000000058C7                 sub     rsp, 8
.text:00000000000058CB                 call    _abort
.text:00000000000058CB ; } // starts at 58A0
.text:00000000000058CB set_custom_quoting endp
.text:00000000000058CB
.text:00000000000058D0
.text:00000000000058D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058D0
.text:00000000000058D0 ; Attributes: info_from_lumina
.text:00000000000058D0
.text:00000000000058D0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000058D0                 public quotearg_buffer
.text:00000000000058D0 quotearg_buffer proc near
.text:00000000000058D0
.text:00000000000058D0 var_40          = qword ptr -40h
.text:00000000000058D0
.text:00000000000058D0 ; __unwind {
.text:00000000000058D0                 push    r15
.text:00000000000058D2                 push    r14
.text:00000000000058D4                 lea     rax, default_quoting_options
.text:00000000000058DB                 push    r13
.text:00000000000058DD                 push    r12
.text:00000000000058DF                 mov     r13, rdi
.text:00000000000058E2                 push    rbp
.text:00000000000058E3                 push    rbx
.text:00000000000058E4                 mov     rbx, r8
.text:00000000000058E7                 mov     r14, rsi
.text:00000000000058EA                 mov     r15, rdx
.text:00000000000058ED                 sub     rsp, 18h
.text:00000000000058F1                 test    r8, r8
.text:00000000000058F4                 cmovz   rbx, rax
.text:00000000000058F8                 mov     [rsp+48h+var_40], rcx
.text:00000000000058FD                 call    ___errno_location
.text:0000000000005902                 mov     r12d, [rax]
.text:0000000000005905                 mov     rbp, rax
.text:0000000000005908                 lea     rax, [rbx+8]
.text:000000000000590C                 sub     rsp, 8
.text:0000000000005910                 mov     r9d, [rbx+4]
.text:0000000000005914                 push    qword ptr [rbx+30h]
.text:0000000000005917                 mov     r8d, [rbx]
.text:000000000000591A                 push    qword ptr [rbx+28h]
.text:000000000000591D                 mov     rdx, r15
.text:0000000000005920                 push    rax
.text:0000000000005921                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005926                 mov     rsi, r14
.text:0000000000005929                 mov     rdi, r13
.text:000000000000592C                 call    quotearg_buffer_restyled
.text:0000000000005931                 mov     [rbp+0], r12d
.text:0000000000005935                 add     rsp, 38h
.text:0000000000005939                 pop     rbx
.text:000000000000593A                 pop     rbp
.text:000000000000593B                 pop     r12
.text:000000000000593D                 pop     r13
.text:000000000000593F                 pop     r14
.text:0000000000005941                 pop     r15
.text:0000000000005943                 retn
.text:0000000000005943 ; } // starts at 58D0
.text:0000000000005943 quotearg_buffer endp
.text:0000000000005943
.text:0000000000005943 ; ---------------------------------------------------------------------------
.text:0000000000005944                 align 10h
.text:0000000000005950
.text:0000000000005950 ; =============== S U B R O U T I N E =======================================
.text:0000000000005950
.text:0000000000005950 ; Attributes: info_from_lumina
.text:0000000000005950
.text:0000000000005950 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005950                 public quotearg_alloc_mem
.text:0000000000005950 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005950
.text:0000000000005950 var_5C          = dword ptr -5Ch
.text:0000000000005950 var_58          = qword ptr -58h
.text:0000000000005950 var_50          = qword ptr -50h
.text:0000000000005950 var_48          = qword ptr -48h
.text:0000000000005950 var_40          = qword ptr -40h
.text:0000000000005950
.text:0000000000005950 ; __unwind {
.text:0000000000005950                 push    r15
.text:0000000000005952                 push    r14
.text:0000000000005954                 lea     rax, default_quoting_options
.text:000000000000595B                 push    r13
.text:000000000000595D                 push    r12
.text:000000000000595F                 mov     r12, rdx
.text:0000000000005962                 push    rbp
.text:0000000000005963                 push    rbx
.text:0000000000005964                 mov     rbx, rcx
.text:0000000000005967                 mov     r14, rdi
.text:000000000000596A                 mov     r15, rsi
.text:000000000000596D                 sub     rsp, 38h
.text:0000000000005971                 test    rcx, rcx
.text:0000000000005974                 cmovz   rbx, rax
.text:0000000000005978                 xor     ebp, ebp
.text:000000000000597A                 call    ___errno_location
.text:000000000000597F                 test    r12, r12
.text:0000000000005982                 mov     r13, rax
.text:0000000000005985                 mov     eax, [rax]
.text:0000000000005987                 setz    bpl
.text:000000000000598B                 or      ebp, [rbx+4]
.text:000000000000598E                 lea     r10, [rbx+8]
.text:0000000000005992                 sub     rsp, 8
.text:0000000000005996                 mov     r8d, [rbx]
.text:0000000000005999                 mov     rcx, r15
.text:000000000000599C                 mov     [rsp+70h+var_5C], eax
.text:00000000000059A0                 push    qword ptr [rbx+30h]
.text:00000000000059A3                 mov     rdx, r14
.text:00000000000059A6                 push    qword ptr [rbx+28h]
.text:00000000000059A9                 push    r10
.text:00000000000059AB                 xor     esi, esi
.text:00000000000059AD                 mov     r9d, ebp
.text:00000000000059B0                 xor     edi, edi
.text:00000000000059B2                 mov     [rsp+88h+var_48], r10
.text:00000000000059B7                 call    quotearg_buffer_restyled
.text:00000000000059BC                 lea     rsi, [rax+1]
.text:00000000000059C0                 mov     [rsp+88h+var_40], rax
.text:00000000000059C5                 add     rsp, 20h
.text:00000000000059C9                 mov     rdi, rsi
.text:00000000000059CC                 mov     [rsp+68h+var_50], rsi
.text:00000000000059D1                 call    xmalloc
.text:00000000000059D6                 mov     [rsp+68h+var_58], rax
.text:00000000000059DB                 sub     rsp, 8
.text:00000000000059DF                 push    qword ptr [rbx+30h]
.text:00000000000059E2                 push    qword ptr [rbx+28h]
.text:00000000000059E5                 mov     r10, [rsp+80h+var_48]
.text:00000000000059EA                 mov     r9d, ebp
.text:00000000000059ED                 mov     r8d, [rbx]
.text:00000000000059F0                 mov     rcx, r15
.text:00000000000059F3                 mov     rdx, r14
.text:00000000000059F6                 mov     rdi, rax
.text:00000000000059F9                 push    r10
.text:00000000000059FB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005A00                 call    quotearg_buffer_restyled
.text:0000000000005A05                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005A09                 add     rsp, 20h
.text:0000000000005A0D                 test    r12, r12
.text:0000000000005A10                 mov     [r13+0], eax
.text:0000000000005A14                 jz      short loc_5A1F
.text:0000000000005A16                 mov     r11, [rsp+68h+var_40]
.text:0000000000005A1B                 mov     [r12], r11
.text:0000000000005A1F
.text:0000000000005A1F loc_5A1F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000005A1F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005A24                 add     rsp, 38h
.text:0000000000005A28                 pop     rbx
.text:0000000000005A29                 pop     rbp
.text:0000000000005A2A                 pop     r12
.text:0000000000005A2C                 pop     r13
.text:0000000000005A2E                 pop     r14
.text:0000000000005A30                 pop     r15
.text:0000000000005A32                 retn
.text:0000000000005A32 ; } // starts at 5950
.text:0000000000005A32 quotearg_alloc_mem endp
.text:0000000000005A32
.text:0000000000005A32 ; ---------------------------------------------------------------------------
.text:0000000000005A33                 align 20h
.text:0000000000005A40
.text:0000000000005A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A40
.text:0000000000005A40
.text:0000000000005A40                 public quotearg_alloc
.text:0000000000005A40 quotearg_alloc  proc near
.text:0000000000005A40 ; __unwind {
.text:0000000000005A40                 mov     rcx, rdx
.text:0000000000005A43                 xor     edx, edx
.text:0000000000005A45                 jmp     quotearg_alloc_mem
.text:0000000000005A45 ; } // starts at 5A40
.text:0000000000005A45 quotearg_alloc  endp
.text:0000000000005A45
.text:0000000000005A45 ; ---------------------------------------------------------------------------
.text:0000000000005A4A                 align 10h
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50 ; Attributes: info_from_lumina
.text:0000000000005A50
.text:0000000000005A50 ; void __cdecl quotearg_free()
.text:0000000000005A50                 public quotearg_free
.text:0000000000005A50 quotearg_free   proc near
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 mov     eax, cs:nslots
.text:0000000000005A56                 push    r12
.text:0000000000005A58                 mov     r12, cs:slotvec
.text:0000000000005A5F                 push    rbp
.text:0000000000005A60                 push    rbx
.text:0000000000005A61                 cmp     eax, 1
.text:0000000000005A64                 jle     short loc_5A91
.text:0000000000005A66                 sub     eax, 2
.text:0000000000005A69                 lea     rbx, [r12+18h]
.text:0000000000005A6E                 shl     rax, 4
.text:0000000000005A72                 lea     rbp, [r12+rax+28h]
.text:0000000000005A77                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005A80
.text:0000000000005A80 loc_5A80:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005A80                 mov     rdi, [rbx]      ; ptr
.text:0000000000005A83                 add     rbx, 10h
.text:0000000000005A87                 call    _free
.text:0000000000005A8C                 cmp     rbx, rbp
.text:0000000000005A8F                 jnz     short loc_5A80
.text:0000000000005A91
.text:0000000000005A91 loc_5A91:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005A91                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005A96                 lea     rbx, slot0
.text:0000000000005A9D                 cmp     rdi, rbx
.text:0000000000005AA0                 jz      short loc_5AB9
.text:0000000000005AA2                 call    _free
.text:0000000000005AA7                 mov     cs:slotvec0, 100h
.text:0000000000005AB2                 mov     cs:off_20A098, rbx
.text:0000000000005AB9
.text:0000000000005AB9 loc_5AB9:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000005AB9                 lea     rbx, slotvec0
.text:0000000000005AC0                 cmp     r12, rbx
.text:0000000000005AC3                 jz      short loc_5AD4
.text:0000000000005AC5                 mov     rdi, r12        ; ptr
.text:0000000000005AC8                 call    _free
.text:0000000000005ACD                 mov     cs:slotvec, rbx
.text:0000000000005AD4
.text:0000000000005AD4 loc_5AD4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000005AD4                 pop     rbx
.text:0000000000005AD5                 mov     cs:nslots, 1
.text:0000000000005ADF                 pop     rbp
.text:0000000000005AE0                 pop     r12
.text:0000000000005AE2                 retn
.text:0000000000005AE2 ; } // starts at 5A50
.text:0000000000005AE2 quotearg_free   endp
.text:0000000000005AE2
.text:0000000000005AE2 ; ---------------------------------------------------------------------------
.text:0000000000005AE3                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0
.text:0000000000005AF0                 public quotearg_n
.text:0000000000005AF0 quotearg_n      proc near
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 lea     rcx, default_quoting_options
.text:0000000000005AF7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005AFE                 jmp     quotearg_n_options
.text:0000000000005AFE ; } // starts at 5AF0
.text:0000000000005AFE quotearg_n      endp
.text:0000000000005AFE
.text:0000000000005AFE ; ---------------------------------------------------------------------------
.text:0000000000005B03                 align 10h
.text:0000000000005B10
.text:0000000000005B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B10
.text:0000000000005B10
.text:0000000000005B10                 public quotearg_n_mem
.text:0000000000005B10 quotearg_n_mem  proc near
.text:0000000000005B10 ; __unwind {
.text:0000000000005B10                 lea     rcx, default_quoting_options
.text:0000000000005B17                 jmp     quotearg_n_options
.text:0000000000005B17 ; } // starts at 5B10
.text:0000000000005B17 quotearg_n_mem  endp
.text:0000000000005B17
.text:0000000000005B17 ; ---------------------------------------------------------------------------
.text:0000000000005B1C                 align 20h
.text:0000000000005B20
.text:0000000000005B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B20
.text:0000000000005B20
.text:0000000000005B20                 public quotearg
.text:0000000000005B20 quotearg        proc near
.text:0000000000005B20 ; __unwind {
.text:0000000000005B20                 lea     rcx, default_quoting_options
.text:0000000000005B27                 mov     rsi, rdi
.text:0000000000005B2A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005B31                 xor     edi, edi
.text:0000000000005B33                 jmp     quotearg_n_options
.text:0000000000005B33 ; } // starts at 5B20
.text:0000000000005B33 quotearg        endp
.text:0000000000005B33
.text:0000000000005B33 ; ---------------------------------------------------------------------------
.text:0000000000005B38                 align 20h
.text:0000000000005B40
.text:0000000000005B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B40
.text:0000000000005B40
.text:0000000000005B40                 public quotearg_mem
.text:0000000000005B40 quotearg_mem    proc near
.text:0000000000005B40 ; __unwind {
.text:0000000000005B40                 lea     rcx, default_quoting_options
.text:0000000000005B47                 mov     rdx, rsi
.text:0000000000005B4A                 mov     rsi, rdi
.text:0000000000005B4D                 xor     edi, edi
.text:0000000000005B4F                 jmp     quotearg_n_options
.text:0000000000005B4F ; } // starts at 5B40
.text:0000000000005B4F quotearg_mem    endp
.text:0000000000005B4F
.text:0000000000005B4F ; ---------------------------------------------------------------------------
.text:0000000000005B54                 align 20h
.text:0000000000005B60
.text:0000000000005B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B60
.text:0000000000005B60 ; Attributes: info_from_lumina
.text:0000000000005B60
.text:0000000000005B60 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005B60                 public quotearg_n_style
.text:0000000000005B60 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000005B60
.text:0000000000005B60 var_48          = dword ptr -48h
.text:0000000000005B60 var_44          = qword ptr -44h
.text:0000000000005B60 var_3C          = qword ptr -3Ch
.text:0000000000005B60 var_34          = qword ptr -34h
.text:0000000000005B60 var_2C          = qword ptr -2Ch
.text:0000000000005B60 var_24          = qword ptr -24h
.text:0000000000005B60 var_1C          = qword ptr -1Ch
.text:0000000000005B60 var_14          = dword ptr -14h
.text:0000000000005B60 var_10          = qword ptr -10h
.text:0000000000005B60
.text:0000000000005B60 ; __unwind {
.text:0000000000005B60                 sub     rsp, 48h
.text:0000000000005B64                 mov     rax, rdx
.text:0000000000005B67                 mov     rdx, fs:28h
.text:0000000000005B70                 mov     [rsp+48h+var_10], rdx
.text:0000000000005B75                 xor     edx, edx
.text:0000000000005B77                 cmp     esi, 0Ah
.text:0000000000005B7A                 jz      short loc_5BE4
.text:0000000000005B7C                 mov     [rsp+48h+var_48], esi
.text:0000000000005B7F                 mov     rcx, rsp
.text:0000000000005B82                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005B89                 mov     rsi, rax
.text:0000000000005B8C                 mov     [rsp+48h+var_44], 0
.text:0000000000005B95                 mov     [rsp+48h+var_3C], 0
.text:0000000000005B9E                 mov     [rsp+48h+var_34], 0
.text:0000000000005BA7                 mov     [rsp+48h+var_2C], 0
.text:0000000000005BB0                 mov     [rsp+48h+var_24], 0
.text:0000000000005BB9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005BC2                 mov     [rsp+48h+var_14], 0
.text:0000000000005BCA                 call    quotearg_n_options
.text:0000000000005BCF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005BD4                 xor     rcx, fs:28h
.text:0000000000005BDD                 jnz     short loc_5BE9
.text:0000000000005BDF                 add     rsp, 48h
.text:0000000000005BE3                 retn
.text:0000000000005BE4 ; ---------------------------------------------------------------------------
.text:0000000000005BE4
.text:0000000000005BE4 loc_5BE4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005BE4                 call    _abort
.text:0000000000005BE9 ; ---------------------------------------------------------------------------
.text:0000000000005BE9
.text:0000000000005BE9 loc_5BE9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005BE9                 call    ___stack_chk_fail
.text:0000000000005BE9 ; } // starts at 5B60
.text:0000000000005BE9 quotearg_n_style endp
.text:0000000000005BE9
.text:0000000000005BE9 ; ---------------------------------------------------------------------------
.text:0000000000005BEE                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BF0
.text:0000000000005BF0 ; Attributes: info_from_lumina
.text:0000000000005BF0
.text:0000000000005BF0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000005BF0                 public quotearg_n_style_mem
.text:0000000000005BF0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000005BF0
.text:0000000000005BF0 var_48          = dword ptr -48h
.text:0000000000005BF0 var_44          = qword ptr -44h
.text:0000000000005BF0 var_3C          = qword ptr -3Ch
.text:0000000000005BF0 var_34          = qword ptr -34h
.text:0000000000005BF0 var_2C          = qword ptr -2Ch
.text:0000000000005BF0 var_24          = qword ptr -24h
.text:0000000000005BF0 var_1C          = qword ptr -1Ch
.text:0000000000005BF0 var_14          = dword ptr -14h
.text:0000000000005BF0 var_10          = qword ptr -10h
.text:0000000000005BF0
.text:0000000000005BF0 ; __unwind {
.text:0000000000005BF0                 sub     rsp, 48h
.text:0000000000005BF4                 mov     rax, rdx
.text:0000000000005BF7                 mov     rdx, rcx
.text:0000000000005BFA                 mov     rcx, fs:28h
.text:0000000000005C03                 mov     [rsp+48h+var_10], rcx
.text:0000000000005C08                 xor     ecx, ecx
.text:0000000000005C0A                 cmp     esi, 0Ah
.text:0000000000005C0D                 jz      short loc_5C70
.text:0000000000005C0F                 mov     [rsp+48h+var_48], esi
.text:0000000000005C12                 mov     rcx, rsp
.text:0000000000005C15                 mov     rsi, rax
.text:0000000000005C18                 mov     [rsp+48h+var_44], 0
.text:0000000000005C21                 mov     [rsp+48h+var_3C], 0
.text:0000000000005C2A                 mov     [rsp+48h+var_34], 0
.text:0000000000005C33                 mov     [rsp+48h+var_2C], 0
.text:0000000000005C3C                 mov     [rsp+48h+var_24], 0
.text:0000000000005C45                 mov     [rsp+48h+var_1C], 0
.text:0000000000005C4E                 mov     [rsp+48h+var_14], 0
.text:0000000000005C56                 call    quotearg_n_options
.text:0000000000005C5B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005C60                 xor     rdx, fs:28h
.text:0000000000005C69                 jnz     short loc_5C75
.text:0000000000005C6B                 add     rsp, 48h
.text:0000000000005C6F                 retn
.text:0000000000005C70 ; ---------------------------------------------------------------------------
.text:0000000000005C70
.text:0000000000005C70 loc_5C70:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005C70                 call    _abort
.text:0000000000005C75 ; ---------------------------------------------------------------------------
.text:0000000000005C75
.text:0000000000005C75 loc_5C75:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005C75                 call    ___stack_chk_fail
.text:0000000000005C75 ; } // starts at 5BF0
.text:0000000000005C75 quotearg_n_style_mem endp
.text:0000000000005C75
.text:0000000000005C75 ; ---------------------------------------------------------------------------
.text:0000000000005C7A                 align 20h
.text:0000000000005C80
.text:0000000000005C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C80
.text:0000000000005C80
.text:0000000000005C80                 public quotearg_style
.text:0000000000005C80 quotearg_style  proc near
.text:0000000000005C80 ; __unwind {
.text:0000000000005C80                 mov     rdx, rsi
.text:0000000000005C83                 mov     esi, edi
.text:0000000000005C85                 xor     edi, edi
.text:0000000000005C87                 jmp     quotearg_n_style
.text:0000000000005C87 ; } // starts at 5C80
.text:0000000000005C87 quotearg_style  endp
.text:0000000000005C87
.text:0000000000005C87 ; ---------------------------------------------------------------------------
.text:0000000000005C8C                 align 10h
.text:0000000000005C90
.text:0000000000005C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C90
.text:0000000000005C90
.text:0000000000005C90                 public quotearg_style_mem
.text:0000000000005C90 quotearg_style_mem proc near
.text:0000000000005C90 ; __unwind {
.text:0000000000005C90                 mov     rcx, rdx
.text:0000000000005C93                 mov     rdx, rsi
.text:0000000000005C96                 mov     esi, edi
.text:0000000000005C98                 xor     edi, edi
.text:0000000000005C9A                 jmp     quotearg_n_style_mem
.text:0000000000005C9A ; } // starts at 5C90
.text:0000000000005C9A quotearg_style_mem endp
.text:0000000000005C9A
.text:0000000000005C9A ; ---------------------------------------------------------------------------
.text:0000000000005C9F                 align 20h
.text:0000000000005CA0
.text:0000000000005CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CA0
.text:0000000000005CA0 ; Attributes: info_from_lumina
.text:0000000000005CA0
.text:0000000000005CA0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005CA0                 public quotearg_char_mem
.text:0000000000005CA0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005CA0                                         ; quotearg_colon+C↓j ...
.text:0000000000005CA0
.text:0000000000005CA0 var_48          = xmmword ptr -48h
.text:0000000000005CA0 var_38          = xmmword ptr -38h
.text:0000000000005CA0 var_28          = xmmword ptr -28h
.text:0000000000005CA0 var_18          = qword ptr -18h
.text:0000000000005CA0 var_10          = qword ptr -10h
.text:0000000000005CA0
.text:0000000000005CA0 ; __unwind {
.text:0000000000005CA0                 sub     rsp, 48h
.text:0000000000005CA4                 mov     ecx, edx
.text:0000000000005CA6                 mov     rax, fs:28h
.text:0000000000005CAF                 mov     [rsp+48h+var_10], rax
.text:0000000000005CB4                 xor     eax, eax
.text:0000000000005CB6                 mov     rax, cs:qword_20A270
.text:0000000000005CBD                 mov     r8, rsp
.text:0000000000005CC0                 and     ecx, 1Fh
.text:0000000000005CC3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005CCB                 mov     [rsp+48h+var_18], rax
.text:0000000000005CD0                 mov     eax, edx
.text:0000000000005CD2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005CD6                 shr     al, 5
.text:0000000000005CD9                 movzx   eax, al
.text:0000000000005CDC                 lea     r9, [r8+rax*4+8]
.text:0000000000005CE1                 movdqa  xmm0, cs:xmmword_20A250
.text:0000000000005CE9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005CEE                 movdqa  xmm0, cs:xmmword_20A260
.text:0000000000005CF6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005CFB                 mov     edx, [r9]
.text:0000000000005CFE                 mov     eax, edx
.text:0000000000005D00                 shr     eax, cl
.text:0000000000005D02                 not     eax
.text:0000000000005D04                 and     eax, 1
.text:0000000000005D07                 shl     eax, cl
.text:0000000000005D09                 mov     rcx, r8
.text:0000000000005D0C                 xor     eax, edx
.text:0000000000005D0E                 mov     rdx, rsi
.text:0000000000005D11                 mov     rsi, rdi
.text:0000000000005D14                 mov     [r9], eax
.text:0000000000005D17                 xor     edi, edi
.text:0000000000005D19                 call    quotearg_n_options
.text:0000000000005D1E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005D23                 xor     rsi, fs:28h
.text:0000000000005D2C                 jnz     short loc_5D33
.text:0000000000005D2E                 add     rsp, 48h
.text:0000000000005D32                 retn
.text:0000000000005D33 ; ---------------------------------------------------------------------------
.text:0000000000005D33
.text:0000000000005D33 loc_5D33:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005D33                 call    ___stack_chk_fail
.text:0000000000005D33 ; } // starts at 5CA0
.text:0000000000005D33 quotearg_char_mem endp
.text:0000000000005D33
.text:0000000000005D33 ; ---------------------------------------------------------------------------
.text:0000000000005D38                 align 20h
.text:0000000000005D40
.text:0000000000005D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D40
.text:0000000000005D40
.text:0000000000005D40                 public quotearg_char
.text:0000000000005D40 quotearg_char   proc near
.text:0000000000005D40 ; __unwind {
.text:0000000000005D40                 movsx   edx, sil
.text:0000000000005D44                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D4B                 jmp     quotearg_char_mem
.text:0000000000005D4B ; } // starts at 5D40
.text:0000000000005D4B quotearg_char   endp
.text:0000000000005D4B
.text:0000000000005D50
.text:0000000000005D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D50
.text:0000000000005D50
.text:0000000000005D50                 public quotearg_colon
.text:0000000000005D50 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005D50 ; __unwind {
.text:0000000000005D50                 mov     edx, 3Ah ; ':'
.text:0000000000005D55                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D5C                 jmp     quotearg_char_mem
.text:0000000000005D5C ; } // starts at 5D50
.text:0000000000005D5C quotearg_colon  endp
.text:0000000000005D5C
.text:0000000000005D5C ; ---------------------------------------------------------------------------
.text:0000000000005D61                 align 10h
.text:0000000000005D70
.text:0000000000005D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D70
.text:0000000000005D70
.text:0000000000005D70                 public quotearg_colon_mem
.text:0000000000005D70 quotearg_colon_mem proc near
.text:0000000000005D70 ; __unwind {
.text:0000000000005D70                 mov     edx, 3Ah ; ':'
.text:0000000000005D75                 jmp     quotearg_char_mem
.text:0000000000005D75 ; } // starts at 5D70
.text:0000000000005D75 quotearg_colon_mem endp
.text:0000000000005D75
.text:0000000000005D75 ; ---------------------------------------------------------------------------
.text:0000000000005D7A                 align 20h
.text:0000000000005D80
.text:0000000000005D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D80
.text:0000000000005D80 ; Attributes: info_from_lumina
.text:0000000000005D80
.text:0000000000005D80 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005D80                 public quotearg_n_style_colon
.text:0000000000005D80 quotearg_n_style_colon proc near        ; CODE XREF: main+576↑p
.text:0000000000005D80                                         ; main+8DC↑p ...
.text:0000000000005D80
.text:0000000000005D80 var_48          = dword ptr -48h
.text:0000000000005D80 var_44          = qword ptr -44h
.text:0000000000005D80 var_3C          = qword ptr -3Ch
.text:0000000000005D80 var_34          = qword ptr -34h
.text:0000000000005D80 var_2C          = qword ptr -2Ch
.text:0000000000005D80 var_24          = qword ptr -24h
.text:0000000000005D80 var_1C          = qword ptr -1Ch
.text:0000000000005D80 var_14          = dword ptr -14h
.text:0000000000005D80 var_10          = qword ptr -10h
.text:0000000000005D80
.text:0000000000005D80 ; __unwind {
.text:0000000000005D80                 sub     rsp, 48h
.text:0000000000005D84                 mov     rax, rdx
.text:0000000000005D87                 mov     rdx, fs:28h
.text:0000000000005D90                 mov     [rsp+48h+var_10], rdx
.text:0000000000005D95                 xor     edx, edx
.text:0000000000005D97                 cmp     esi, 0Ah
.text:0000000000005D9A                 jz      short loc_5E04
.text:0000000000005D9C                 mov     [rsp+48h+var_48], esi
.text:0000000000005D9F                 mov     rcx, rsp
.text:0000000000005DA2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DA9                 mov     rsi, rax
.text:0000000000005DAC                 mov     [rsp+48h+var_44], 0
.text:0000000000005DB5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000005DBE                 mov     [rsp+48h+var_34], 0
.text:0000000000005DC7                 mov     [rsp+48h+var_2C], 0
.text:0000000000005DD0                 mov     [rsp+48h+var_24], 0
.text:0000000000005DD9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005DE2                 mov     [rsp+48h+var_14], 0
.text:0000000000005DEA                 call    quotearg_n_options
.text:0000000000005DEF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005DF4                 xor     rcx, fs:28h
.text:0000000000005DFD                 jnz     short loc_5E09
.text:0000000000005DFF                 add     rsp, 48h
.text:0000000000005E03                 retn
.text:0000000000005E04 ; ---------------------------------------------------------------------------
.text:0000000000005E04
.text:0000000000005E04 loc_5E04:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000005E04                 call    _abort
.text:0000000000005E09 ; ---------------------------------------------------------------------------
.text:0000000000005E09
.text:0000000000005E09 loc_5E09:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000005E09                 call    ___stack_chk_fail
.text:0000000000005E09 ; } // starts at 5D80
.text:0000000000005E09 quotearg_n_style_colon endp
.text:0000000000005E09
.text:0000000000005E09 ; ---------------------------------------------------------------------------
.text:0000000000005E0E                 align 10h
.text:0000000000005E10
.text:0000000000005E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E10
.text:0000000000005E10 ; Attributes: info_from_lumina
.text:0000000000005E10
.text:0000000000005E10 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005E10                 public quotearg_n_custom_mem
.text:0000000000005E10 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005E10                                         ; quotearg_custom+12↓j ...
.text:0000000000005E10
.text:0000000000005E10 var_48          = xmmword ptr -48h
.text:0000000000005E10 var_38          = xmmword ptr -38h
.text:0000000000005E10 var_28          = xmmword ptr -28h
.text:0000000000005E10 var_18          = qword ptr -18h
.text:0000000000005E10 var_10          = qword ptr -10h
.text:0000000000005E10
.text:0000000000005E10 ; __unwind {
.text:0000000000005E10                 sub     rsp, 48h
.text:0000000000005E14                 mov     r9, rcx
.text:0000000000005E17                 mov     rcx, cs:qword_20A270
.text:0000000000005E1E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005E26                 mov     rax, fs:28h
.text:0000000000005E2F                 mov     [rsp+48h+var_10], rax
.text:0000000000005E34                 xor     eax, eax
.text:0000000000005E36                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005E3A                 test    rsi, rsi
.text:0000000000005E3D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005E42                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005E49                 movdqa  xmm0, cs:xmmword_20A250
.text:0000000000005E51                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005E56                 movdqa  xmm0, cs:xmmword_20A260
.text:0000000000005E5E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005E63                 jz      short loc_5E97
.text:0000000000005E65                 test    rdx, rdx
.text:0000000000005E68                 jz      short loc_5E97
.text:0000000000005E6A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000005E6F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005E74                 mov     rcx, rsp
.text:0000000000005E77                 mov     rdx, r8
.text:0000000000005E7A                 mov     rsi, r9
.text:0000000000005E7D                 call    quotearg_n_options
.text:0000000000005E82                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005E87                 xor     rdi, fs:28h
.text:0000000000005E90                 jnz     short loc_5E9C
.text:0000000000005E92                 add     rsp, 48h
.text:0000000000005E96                 retn
.text:0000000000005E97 ; ---------------------------------------------------------------------------
.text:0000000000005E97
.text:0000000000005E97 loc_5E97:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005E97                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005E97                 call    _abort
.text:0000000000005E9C ; ---------------------------------------------------------------------------
.text:0000000000005E9C
.text:0000000000005E9C loc_5E9C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000005E9C                 call    ___stack_chk_fail
.text:0000000000005E9C ; } // starts at 5E10
.text:0000000000005E9C quotearg_n_custom_mem endp
.text:0000000000005E9C
.text:0000000000005E9C ; ---------------------------------------------------------------------------
.text:0000000000005EA1                 align 10h
.text:0000000000005EB0
.text:0000000000005EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EB0
.text:0000000000005EB0
.text:0000000000005EB0                 public quotearg_n_custom
.text:0000000000005EB0 quotearg_n_custom proc near
.text:0000000000005EB0 ; __unwind {
.text:0000000000005EB0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005EB7                 jmp     quotearg_n_custom_mem
.text:0000000000005EB7 ; } // starts at 5EB0
.text:0000000000005EB7 quotearg_n_custom endp
.text:0000000000005EB7
.text:0000000000005EB7 ; ---------------------------------------------------------------------------
.text:0000000000005EBC                 align 20h
.text:0000000000005EC0
.text:0000000000005EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EC0
.text:0000000000005EC0
.text:0000000000005EC0                 public quotearg_custom
.text:0000000000005EC0 quotearg_custom proc near
.text:0000000000005EC0 ; __unwind {
.text:0000000000005EC0                 mov     rcx, rdx
.text:0000000000005EC3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005ECA                 mov     rdx, rsi
.text:0000000000005ECD                 mov     rsi, rdi
.text:0000000000005ED0                 xor     edi, edi
.text:0000000000005ED2                 jmp     quotearg_n_custom_mem
.text:0000000000005ED2 ; } // starts at 5EC0
.text:0000000000005ED2 quotearg_custom endp
.text:0000000000005ED2
.text:0000000000005ED2 ; ---------------------------------------------------------------------------
.text:0000000000005ED7                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EE0
.text:0000000000005EE0
.text:0000000000005EE0                 public quotearg_custom_mem
.text:0000000000005EE0 quotearg_custom_mem proc near
.text:0000000000005EE0 ; __unwind {
.text:0000000000005EE0                 mov     r8, rcx
.text:0000000000005EE3                 mov     rcx, rdx
.text:0000000000005EE6                 mov     rdx, rsi
.text:0000000000005EE9                 mov     rsi, rdi
.text:0000000000005EEC                 xor     edi, edi
.text:0000000000005EEE                 jmp     quotearg_n_custom_mem
.text:0000000000005EEE ; } // starts at 5EE0
.text:0000000000005EEE quotearg_custom_mem endp
.text:0000000000005EEE
.text:0000000000005EEE ; ---------------------------------------------------------------------------
.text:0000000000005EF3                 align 20h
.text:0000000000005F00
.text:0000000000005F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F00
.text:0000000000005F00
.text:0000000000005F00                 public quote_n_mem
.text:0000000000005F00 quote_n_mem     proc near
.text:0000000000005F00 ; __unwind {
.text:0000000000005F00                 lea     rcx, quote_quoting_options
.text:0000000000005F07                 jmp     quotearg_n_options
.text:0000000000005F07 ; } // starts at 5F00
.text:0000000000005F07 quote_n_mem     endp
.text:0000000000005F07
.text:0000000000005F07 ; ---------------------------------------------------------------------------
.text:0000000000005F0C                 align 10h
.text:0000000000005F10
.text:0000000000005F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F10
.text:0000000000005F10
.text:0000000000005F10                 public quote_mem
.text:0000000000005F10 quote_mem       proc near
.text:0000000000005F10 ; __unwind {
.text:0000000000005F10                 lea     rcx, quote_quoting_options
.text:0000000000005F17                 mov     rdx, rsi
.text:0000000000005F1A                 mov     rsi, rdi
.text:0000000000005F1D                 xor     edi, edi
.text:0000000000005F1F                 jmp     quotearg_n_options
.text:0000000000005F1F ; } // starts at 5F10
.text:0000000000005F1F quote_mem       endp
.text:0000000000005F1F
.text:0000000000005F1F ; ---------------------------------------------------------------------------
.text:0000000000005F24                 align 10h
.text:0000000000005F30
.text:0000000000005F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F30
.text:0000000000005F30
.text:0000000000005F30                 public quote_n
.text:0000000000005F30 quote_n         proc near
.text:0000000000005F30 ; __unwind {
.text:0000000000005F30                 lea     rcx, quote_quoting_options
.text:0000000000005F37                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F3E                 jmp     quotearg_n_options
.text:0000000000005F3E ; } // starts at 5F30
.text:0000000000005F3E quote_n         endp
.text:0000000000005F3E
.text:0000000000005F3E ; ---------------------------------------------------------------------------
.text:0000000000005F43                 align 10h
.text:0000000000005F50
.text:0000000000005F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F50
.text:0000000000005F50
.text:0000000000005F50                 public quote
.text:0000000000005F50 quote           proc near
.text:0000000000005F50 ; __unwind {
.text:0000000000005F50                 lea     rcx, quote_quoting_options
.text:0000000000005F57                 mov     rsi, rdi
.text:0000000000005F5A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F61                 xor     edi, edi
.text:0000000000005F63                 jmp     quotearg_n_options
.text:0000000000005F63 ; } // starts at 5F50
.text:0000000000005F63 quote           endp
.text:0000000000005F63
.text:0000000000005F63 ; ---------------------------------------------------------------------------
.text:0000000000005F68                 align 10h
.text:0000000000005F70
.text:0000000000005F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F70
.text:0000000000005F70
.text:0000000000005F70                 public dup_safer
.text:0000000000005F70 dup_safer       proc near               ; CODE XREF: fopen_safer+32↑p
.text:0000000000005F70 ; __unwind {
.text:0000000000005F70                 mov     edx, 3
.text:0000000000005F75                 xor     esi, esi
.text:0000000000005F77                 xor     eax, eax
.text:0000000000005F79                 jmp     rpl_fcntl
.text:0000000000005F79 ; } // starts at 5F70
.text:0000000000005F79 dup_safer       endp
.text:0000000000005F79
.text:0000000000005F79 ; ---------------------------------------------------------------------------
.text:0000000000005F7E                 align 20h
.text:0000000000005F80
.text:0000000000005F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F80
.text:0000000000005F80
.text:0000000000005F80 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005F80                 public version_etc_arn
.text:0000000000005F80 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_63BB↓j
.text:0000000000005F80                                         ; version_etc_va:loc_640B↓p ...
.text:0000000000005F80
.text:0000000000005F80 var_58          = qword ptr -58h
.text:0000000000005F80 var_50          = qword ptr -50h
.text:0000000000005F80 var_48          = qword ptr -48h
.text:0000000000005F80 var_40          = qword ptr -40h
.text:0000000000005F80
.text:0000000000005F80 ; __unwind {
.text:0000000000005F80                 push    r15
.text:0000000000005F82                 push    r14
.text:0000000000005F84                 push    r13
.text:0000000000005F86                 push    r12
.text:0000000000005F88                 mov     r12, r9
.text:0000000000005F8B                 push    rbp
.text:0000000000005F8C                 push    rbx
.text:0000000000005F8D                 mov     rbp, rdi
.text:0000000000005F90                 mov     rbx, r8
.text:0000000000005F93                 sub     rsp, 28h
.text:0000000000005F97                 test    rsi, rsi
.text:0000000000005F9A                 jz      loc_60B8
.text:0000000000005FA0                 mov     r8, rdx
.text:0000000000005FA3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000005FAA                 mov     r9, rcx
.text:0000000000005FAD                 xor     eax, eax
.text:0000000000005FAF                 mov     rcx, rsi
.text:0000000000005FB2                 mov     esi, 1
.text:0000000000005FB7                 call    ___fprintf_chk
.text:0000000000005FBC
.text:0000000000005FBC loc_5FBC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000005FBC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005FC3                 xor     edi, edi        ; domainname
.text:0000000000005FC5                 mov     edx, 5          ; category
.text:0000000000005FCA                 call    _dcgettext
.text:0000000000005FCF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005FD6                 mov     rcx, rax
.text:0000000000005FD9                 mov     r8d, 7E3h
.text:0000000000005FDF                 mov     esi, 1
.text:0000000000005FE4                 mov     rdi, rbp
.text:0000000000005FE7                 xor     eax, eax
.text:0000000000005FE9                 call    ___fprintf_chk
.text:0000000000005FEE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005FF5                 xor     edi, edi        ; domainname
.text:0000000000005FF7                 mov     edx, 5          ; category
.text:0000000000005FFC                 call    _dcgettext
.text:0000000000006001                 mov     rsi, rbp        ; stream
.text:0000000000006004                 mov     rdi, rax        ; s
.text:0000000000006007                 call    _fputs_unlocked
.text:000000000000600C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000006010                 ja      def_6024        ; jumptable 0000000000006024 default case
.text:0000000000006016                 lea     rdx, jpt_6024
.text:000000000000601D                 movsxd  rax, ds:(jpt_6024 - 8268h)[rdx+r12*4]
.text:0000000000006021                 add     rax, rdx
.text:0000000000006024                 jmp     rax             ; switch jump
.text:0000000000006024 ; ---------------------------------------------------------------------------
.text:0000000000006026                 align 10h
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006030                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:0000000000006030                 mov     r9, [rbx+38h]   ; jumptable 0000000000006024 case 8
.text:0000000000006034                 mov     rax, [rbx+10h]
.text:0000000000006038                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000603F                 mov     r8, [rbx+8]
.text:0000000000006043                 mov     edx, 5          ; category
.text:0000000000006048                 xor     edi, edi        ; domainname
.text:000000000000604A                 mov     r13, [rbx+30h]
.text:000000000000604E                 mov     r12, [rbx+28h]
.text:0000000000006052                 mov     [rsp+58h+var_48], r9
.text:0000000000006057                 mov     r15, [rbx+20h]
.text:000000000000605B                 mov     r14, [rbx+18h]
.text:000000000000605F                 mov     [rsp+58h+var_58], rax
.text:0000000000006063                 mov     [rsp+58h+var_50], r8
.text:0000000000006068                 mov     rbx, [rbx]
.text:000000000000606B                 call    _dcgettext
.text:0000000000006070                 sub     rsp, 8
.text:0000000000006074
.text:0000000000006074 loc_6074:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000006074                 mov     r9, [rsp+60h+var_48]
.text:0000000000006079                 mov     rdx, rax
.text:000000000000607C                 mov     rcx, rbx
.text:000000000000607F                 mov     esi, 1
.text:0000000000006084                 mov     rdi, rbp
.text:0000000000006087                 xor     eax, eax
.text:0000000000006089                 push    r9
.text:000000000000608B                 push    r13
.text:000000000000608D                 push    r12
.text:000000000000608F                 push    r15
.text:0000000000006091                 push    r14
.text:0000000000006093                 mov     r9, [rsp+88h+var_58]
.text:0000000000006098                 mov     r8, [rsp+88h+var_50]
.text:000000000000609D                 call    ___fprintf_chk
.text:00000000000060A2                 add     rsp, 30h
.text:00000000000060A6
.text:00000000000060A6 loc_60A6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000060A6                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:00000000000060A6                 add     rsp, 28h        ; jumptable 0000000000006024 case 0
.text:00000000000060AA                 pop     rbx
.text:00000000000060AB                 pop     rbp
.text:00000000000060AC                 pop     r12
.text:00000000000060AE                 pop     r13
.text:00000000000060B0                 pop     r14
.text:00000000000060B2                 pop     r15
.text:00000000000060B4                 retn
.text:00000000000060B4 ; ---------------------------------------------------------------------------
.text:00000000000060B5                 align 8
.text:00000000000060B8
.text:00000000000060B8 loc_60B8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000060B8                 mov     r8, rcx
.text:00000000000060BB                 mov     rcx, rdx
.text:00000000000060BE                 lea     rdx, aSS        ; "%s %s\n"
.text:00000000000060C5                 mov     esi, 1
.text:00000000000060CA                 xor     eax, eax
.text:00000000000060CC                 call    ___fprintf_chk
.text:00000000000060D1                 jmp     loc_5FBC
.text:00000000000060D1 ; ---------------------------------------------------------------------------
.text:00000000000060D6                 align 20h
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000060E0                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:00000000000060E0                 mov     r10, [rbx+40h]  ; jumptable 0000000000006024 case 9
.text:00000000000060E4                 mov     r9, [rbx+38h]
.text:00000000000060E8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000060EF                 mov     rax, [rbx+10h]
.text:00000000000060F3                 mov     r8, [rbx+8]
.text:00000000000060F7                 mov     edx, 5          ; category
.text:00000000000060FC                 mov     r13, [rbx+30h]
.text:0000000000006100                 mov     r12, [rbx+28h]
.text:0000000000006104                 mov     r15, [rbx+20h]
.text:0000000000006108                 mov     r14, [rbx+18h]
.text:000000000000610C                 mov     rbx, [rbx]
.text:000000000000610F                 mov     [rsp+58h+var_40], r10
.text:0000000000006114                 mov     [rsp+58h+var_48], r9
.text:0000000000006119                 mov     [rsp+58h+var_58], rax
.text:000000000000611D                 mov     [rsp+58h+var_50], r8
.text:0000000000006122
.text:0000000000006122 loc_6122:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000006122                 xor     edi, edi        ; domainname
.text:0000000000006124                 call    _dcgettext
.text:0000000000006129                 mov     r10, [rsp+58h+var_40]
.text:000000000000612E                 push    r10
.text:0000000000006130                 jmp     loc_6074
.text:0000000000006130 ; ---------------------------------------------------------------------------
.text:0000000000006135                 align 8
.text:0000000000006138
.text:0000000000006138 loc_6138:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006138                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:0000000000006138                 mov     rbx, [rbx]      ; jumptable 0000000000006024 case 1
.text:000000000000613B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000006142                 mov     edx, 5          ; category
.text:0000000000006147                 xor     edi, edi        ; domainname
.text:0000000000006149                 call    _dcgettext
.text:000000000000614E                 add     rsp, 28h
.text:0000000000006152                 mov     rcx, rbx
.text:0000000000006155                 mov     rdi, rbp
.text:0000000000006158                 pop     rbx
.text:0000000000006159                 pop     rbp
.text:000000000000615A                 pop     r12
.text:000000000000615C                 pop     r13
.text:000000000000615E                 pop     r14
.text:0000000000006160                 pop     r15
.text:0000000000006162                 mov     rdx, rax
.text:0000000000006165                 mov     esi, 1
.text:000000000000616A                 xor     eax, eax
.text:000000000000616C                 jmp     ___fprintf_chk
.text:000000000000616C ; ---------------------------------------------------------------------------
.text:0000000000006171                 align 8
.text:0000000000006178
.text:0000000000006178 loc_6178:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006178                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:0000000000006178                 mov     r12, [rbx+8]    ; jumptable 0000000000006024 case 2
.text:000000000000617C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000006183                 mov     rbx, [rbx]
.text:0000000000006186                 mov     edx, 5          ; category
.text:000000000000618B                 xor     edi, edi        ; domainname
.text:000000000000618D                 call    _dcgettext
.text:0000000000006192                 add     rsp, 28h
.text:0000000000006196                 mov     r8, r12
.text:0000000000006199                 mov     rcx, rbx
.text:000000000000619C                 mov     rdi, rbp
.text:000000000000619F                 mov     rdx, rax
.text:00000000000061A2                 mov     esi, 1
.text:00000000000061A7                 pop     rbx
.text:00000000000061A8                 pop     rbp
.text:00000000000061A9                 pop     r12
.text:00000000000061AB                 pop     r13
.text:00000000000061AD                 pop     r14
.text:00000000000061AF                 pop     r15
.text:00000000000061B1                 xor     eax, eax
.text:00000000000061B3                 jmp     ___fprintf_chk
.text:00000000000061B3 ; ---------------------------------------------------------------------------
.text:00000000000061B8                 align 20h
.text:00000000000061C0
.text:00000000000061C0 loc_61C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000061C0                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:00000000000061C0                 mov     r13, [rbx+10h]  ; jumptable 0000000000006024 case 3
.text:00000000000061C4                 mov     r12, [rbx+8]
.text:00000000000061C8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000061CF                 mov     rbx, [rbx]
.text:00000000000061D2                 mov     edx, 5          ; category
.text:00000000000061D7                 xor     edi, edi        ; domainname
.text:00000000000061D9                 call    _dcgettext
.text:00000000000061DE                 add     rsp, 28h
.text:00000000000061E2                 mov     r9, r13
.text:00000000000061E5                 mov     r8, r12
.text:00000000000061E8                 mov     rcx, rbx
.text:00000000000061EB                 mov     rdi, rbp
.text:00000000000061EE                 mov     rdx, rax
.text:00000000000061F1                 pop     rbx
.text:00000000000061F2                 pop     rbp
.text:00000000000061F3                 pop     r12
.text:00000000000061F5                 pop     r13
.text:00000000000061F7                 pop     r14
.text:00000000000061F9                 pop     r15
.text:00000000000061FB                 mov     esi, 1
.text:0000000000006200                 xor     eax, eax
.text:0000000000006202                 jmp     ___fprintf_chk
.text:0000000000006202 ; ---------------------------------------------------------------------------
.text:0000000000006207                 align 10h
.text:0000000000006210
.text:0000000000006210 loc_6210:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006210                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:0000000000006210                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000006024 case 4
.text:0000000000006217                 mov     edx, 5          ; category
.text:000000000000621C                 xor     edi, edi        ; domainname
.text:000000000000621E                 mov     r14, [rbx+18h]
.text:0000000000006222                 mov     r13, [rbx+10h]
.text:0000000000006226                 mov     r12, [rbx+8]
.text:000000000000622A                 mov     rbx, [rbx]
.text:000000000000622D                 call    _dcgettext
.text:0000000000006232                 sub     rsp, 8
.text:0000000000006236
.text:0000000000006236 loc_6236:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000006236                 push    r14
.text:0000000000006238                 mov     rdx, rax
.text:000000000000623B                 mov     r9, r13
.text:000000000000623E                 mov     r8, r12
.text:0000000000006241                 mov     rcx, rbx
.text:0000000000006244                 mov     rdi, rbp
.text:0000000000006247                 mov     esi, 1
.text:000000000000624C                 xor     eax, eax
.text:000000000000624E                 call    ___fprintf_chk
.text:0000000000006253                 pop     rax
.text:0000000000006254                 pop     rdx
.text:0000000000006255                 add     rsp, 28h
.text:0000000000006259                 pop     rbx
.text:000000000000625A                 pop     rbp
.text:000000000000625B                 pop     r12
.text:000000000000625D                 pop     r13
.text:000000000000625F                 pop     r14
.text:0000000000006261                 pop     r15
.text:0000000000006263                 retn
.text:0000000000006263 ; ---------------------------------------------------------------------------
.text:0000000000006264                 align 8
.text:0000000000006268
.text:0000000000006268 loc_6268:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006268                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:0000000000006268                 mov     r15, [rbx+20h]  ; jumptable 0000000000006024 case 5
.text:000000000000626C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000006273                 mov     edx, 5          ; category
.text:0000000000006278                 xor     edi, edi        ; domainname
.text:000000000000627A                 mov     r14, [rbx+18h]
.text:000000000000627E                 mov     r13, [rbx+10h]
.text:0000000000006282                 mov     r12, [rbx+8]
.text:0000000000006286                 mov     rbx, [rbx]
.text:0000000000006289                 call    _dcgettext
.text:000000000000628E                 push    r15
.text:0000000000006290                 jmp     short loc_6236
.text:0000000000006290 ; ---------------------------------------------------------------------------
.text:0000000000006292                 align 8
.text:0000000000006298
.text:0000000000006298 loc_6298:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006298                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:0000000000006298                 mov     r8, [rbx+8]     ; jumptable 0000000000006024 case 6
.text:000000000000629C                 mov     r12, [rbx+28h]
.text:00000000000062A0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000062A7                 mov     r15, [rbx+20h]
.text:00000000000062AB                 mov     r14, [rbx+18h]
.text:00000000000062AF                 mov     edx, 5          ; category
.text:00000000000062B4                 mov     r13, [rbx+10h]
.text:00000000000062B8                 xor     edi, edi        ; domainname
.text:00000000000062BA                 mov     rbx, [rbx]
.text:00000000000062BD                 mov     [rsp+58h+var_58], r8
.text:00000000000062C1                 call    _dcgettext
.text:00000000000062C6                 sub     rsp, 8
.text:00000000000062CA                 mov     r9, r13
.text:00000000000062CD                 push    r12
.text:00000000000062CF                 push    r15
.text:00000000000062D1                 push    r14
.text:00000000000062D3
.text:00000000000062D3 loc_62D3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000062D3                 mov     r8, [rsp+78h+var_58]
.text:00000000000062D8                 mov     rcx, rbx
.text:00000000000062DB                 mov     rdx, rax
.text:00000000000062DE                 mov     rdi, rbp
.text:00000000000062E1                 mov     esi, 1
.text:00000000000062E6                 xor     eax, eax
.text:00000000000062E8                 call    ___fprintf_chk
.text:00000000000062ED                 add     rsp, 20h
.text:00000000000062F1                 add     rsp, 28h
.text:00000000000062F5                 pop     rbx
.text:00000000000062F6                 pop     rbp
.text:00000000000062F7                 pop     r12
.text:00000000000062F9                 pop     r13
.text:00000000000062FB                 pop     r14
.text:00000000000062FD                 pop     r15
.text:00000000000062FF                 retn
.text:0000000000006300 ; ---------------------------------------------------------------------------
.text:0000000000006300
.text:0000000000006300 loc_6300:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006300                                         ; DATA XREF: .rodata:jpt_6024↓o
.text:0000000000006300                 mov     r9, [rbx+10h]   ; jumptable 0000000000006024 case 7
.text:0000000000006304                 mov     r13, [rbx+30h]
.text:0000000000006308                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000630F                 mov     r12, [rbx+28h]
.text:0000000000006313                 mov     r15, [rbx+20h]
.text:0000000000006317                 mov     edx, 5          ; category
.text:000000000000631C                 mov     r14, [rbx+18h]
.text:0000000000006320                 mov     r8, [rbx+8]
.text:0000000000006324                 xor     edi, edi        ; domainname
.text:0000000000006326                 mov     [rsp+58h+var_50], r9
.text:000000000000632B                 mov     rbx, [rbx]
.text:000000000000632E                 mov     [rsp+58h+var_58], r8
.text:0000000000006332                 call    _dcgettext
.text:0000000000006337                 push    r13
.text:0000000000006339                 push    r12
.text:000000000000633B                 push    r15
.text:000000000000633D                 push    r14
.text:000000000000633F                 mov     r9, [rsp+78h+var_50]
.text:0000000000006344                 jmp     short loc_62D3
.text:0000000000006344 ; ---------------------------------------------------------------------------
.text:0000000000006346                 align 10h
.text:0000000000006350
.text:0000000000006350 def_6024:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000006350                 mov     r10, [rbx+40h]  ; jumptable 0000000000006024 default case
.text:0000000000006354                 mov     r9, [rbx+38h]
.text:0000000000006358                 mov     edx, 5
.text:000000000000635D                 mov     rax, [rbx+10h]
.text:0000000000006361                 mov     r8, [rbx+8]
.text:0000000000006365                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000636C                 mov     r13, [rbx+30h]
.text:0000000000006370                 mov     r12, [rbx+28h]
.text:0000000000006374                 mov     r15, [rbx+20h]
.text:0000000000006378                 mov     r14, [rbx+18h]
.text:000000000000637C                 mov     [rsp+58h+var_40], r10
.text:0000000000006381                 mov     [rsp+58h+var_48], r9
.text:0000000000006386                 mov     [rsp+58h+var_58], rax
.text:000000000000638A                 mov     [rsp+58h+var_50], r8
.text:000000000000638F                 mov     rbx, [rbx]
.text:0000000000006392                 jmp     loc_6122
.text:0000000000006392 ; } // starts at 5F80
.text:0000000000006392 version_etc_arn endp
.text:0000000000006392
.text:0000000000006392 ; ---------------------------------------------------------------------------
.text:0000000000006397                 align 20h
.text:00000000000063A0
.text:00000000000063A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063A0
.text:00000000000063A0 ; Attributes: info_from_lumina
.text:00000000000063A0
.text:00000000000063A0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000063A0                 public version_etc_ar
.text:00000000000063A0 version_etc_ar  proc near
.text:00000000000063A0 ; __unwind {
.text:00000000000063A0                 xor     r9d, r9d
.text:00000000000063A3                 cmp     qword ptr [r8], 0
.text:00000000000063A7                 jz      short loc_63BB
.text:00000000000063A9                 nop     dword ptr [rax+00000000h]
.text:00000000000063B0
.text:00000000000063B0 loc_63B0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000063B0                 add     r9, 1
.text:00000000000063B4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000063B9                 jnz     short loc_63B0
.text:00000000000063BB
.text:00000000000063BB loc_63BB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000063BB                 jmp     version_etc_arn
.text:00000000000063BB ; } // starts at 63A0
.text:00000000000063BB version_etc_ar  endp
.text:00000000000063BB
.text:00000000000063C0
.text:00000000000063C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063C0
.text:00000000000063C0 ; Attributes: info_from_lumina
.text:00000000000063C0
.text:00000000000063C0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000063C0                 public version_etc_va
.text:00000000000063C0 version_etc_va  proc near
.text:00000000000063C0
.text:00000000000063C0 authtab         = qword ptr -68h
.text:00000000000063C0 var_10          = qword ptr -10h
.text:00000000000063C0
.text:00000000000063C0 ; __unwind {
.text:00000000000063C0                 sub     rsp, 68h
.text:00000000000063C4                 mov     r10, r8
.text:00000000000063C7                 xor     r9d, r9d
.text:00000000000063CA                 mov     rax, fs:28h
.text:00000000000063D3                 mov     [rsp+68h+var_10], rax
.text:00000000000063D8                 xor     eax, eax
.text:00000000000063DA                 mov     r8, rsp
.text:00000000000063DD                 nop     dword ptr [rax]
.text:00000000000063E0
.text:00000000000063E0 loc_63E0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000063E0                 mov     eax, [r10]
.text:00000000000063E3                 cmp     eax, 2Fh ; '/'
.text:00000000000063E6                 ja      short loc_642A
.text:00000000000063E8                 mov     r11d, eax
.text:00000000000063EB                 add     r11, [r10+10h]
.text:00000000000063EF                 add     eax, 8
.text:00000000000063F2                 mov     [r10], eax
.text:00000000000063F5
.text:00000000000063F5 loc_63F5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000063F5                 mov     rax, [r11]
.text:00000000000063F8                 test    rax, rax
.text:00000000000063FB                 mov     [r8+r9*8], rax
.text:00000000000063FF                 jz      short loc_640B
.text:0000000000006401                 add     r9, 1
.text:0000000000006405                 cmp     r9, 0Ah
.text:0000000000006409                 jnz     short loc_63E0
.text:000000000000640B
.text:000000000000640B loc_640B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000640B                 call    version_etc_arn
.text:0000000000006410                 mov     rax, [rsp+68h+var_10]
.text:0000000000006415                 xor     rax, fs:28h
.text:000000000000641E                 jnz     short loc_6425
.text:0000000000006420                 add     rsp, 68h
.text:0000000000006424                 retn
.text:0000000000006425 ; ---------------------------------------------------------------------------
.text:0000000000006425
.text:0000000000006425 loc_6425:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000006425                 call    ___stack_chk_fail
.text:000000000000642A ; ---------------------------------------------------------------------------
.text:000000000000642A
.text:000000000000642A loc_642A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000642A                 mov     r11, [r10+8]
.text:000000000000642E                 lea     rax, [r11+8]
.text:0000000000006432                 mov     [r10+8], rax
.text:0000000000006436                 jmp     short loc_63F5
.text:0000000000006436 ; } // starts at 63C0
.text:0000000000006436 version_etc_va  endp
.text:0000000000006436
.text:0000000000006436 ; ---------------------------------------------------------------------------
.text:0000000000006438                 align 20h
.text:0000000000006440
.text:0000000000006440 ; =============== S U B R O U T I N E =======================================
.text:0000000000006440
.text:0000000000006440 ; Attributes: info_from_lumina
.text:0000000000006440
.text:0000000000006440 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000006440                 public version_etc
.text:0000000000006440 version_etc     proc near               ; CODE XREF: main+191↑p
.text:0000000000006440
.text:0000000000006440 var_C0          = dword ptr -0C0h
.text:0000000000006440 var_B8          = qword ptr -0B8h
.text:0000000000006440 var_B0          = qword ptr -0B0h
.text:0000000000006440 var_A8          = byte ptr -0A8h
.text:0000000000006440 var_50          = qword ptr -50h
.text:0000000000006440 var_48          = byte ptr -48h
.text:0000000000006440 var_28          = qword ptr -28h
.text:0000000000006440 var_20          = qword ptr -20h
.text:0000000000006440 arg_0           = byte ptr  8
.text:0000000000006440
.text:0000000000006440 ; __unwind {
.text:0000000000006440                 push    rbp
.text:0000000000006441                 push    rbx
.text:0000000000006442                 mov     r10d, 20h ; ' '
.text:0000000000006448                 xor     r11d, r11d
.text:000000000000644B                 sub     rsp, 0B8h
.text:0000000000006452                 mov     rax, fs:28h
.text:000000000000645B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000006460                 xor     eax, eax
.text:0000000000006462                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000646A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000006472                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000647A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000647F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000006487                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000648F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000006494                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000649C                 xor     r9d, r9d
.text:000000000000649F                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000064A4                 mov     rbp, rax
.text:00000000000064A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000064B0
.text:00000000000064B0 loc_64B0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000064B0                 cmp     r10d, 2Fh ; '/'
.text:00000000000064B4                 ja      short loc_650C
.text:00000000000064B6                 mov     eax, r10d
.text:00000000000064B9                 mov     r11d, 1
.text:00000000000064BF                 add     r10d, 8
.text:00000000000064C3                 add     rax, rbp
.text:00000000000064C6
.text:00000000000064C6 loc_64C6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000064C6                 mov     rax, [rax]
.text:00000000000064C9                 test    rax, rax
.text:00000000000064CC                 mov     [r8+r9*8], rax
.text:00000000000064D0                 jz      short loc_64DC
.text:00000000000064D2                 add     r9, 1
.text:00000000000064D6                 cmp     r9, 0Ah
.text:00000000000064DA                 jnz     short loc_64B0
.text:00000000000064DC
.text:00000000000064DC loc_64DC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000064DC                 test    r11b, r11b
.text:00000000000064DF                 jnz     short loc_6505
.text:00000000000064E1
.text:00000000000064E1 loc_64E1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000064E1                 call    version_etc_arn
.text:00000000000064E6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000064EB                 xor     rax, fs:28h
.text:00000000000064F4                 jnz     short loc_6500
.text:00000000000064F6                 add     rsp, 0B8h
.text:00000000000064FD                 pop     rbx
.text:00000000000064FE                 pop     rbp
.text:00000000000064FF                 retn
.text:0000000000006500 ; ---------------------------------------------------------------------------
.text:0000000000006500
.text:0000000000006500 loc_6500:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006500                 call    ___stack_chk_fail
.text:0000000000006505 ; ---------------------------------------------------------------------------
.text:0000000000006505
.text:0000000000006505 loc_6505:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006505                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000650A                 jmp     short loc_64E1
.text:000000000000650C ; ---------------------------------------------------------------------------
.text:000000000000650C
.text:000000000000650C loc_650C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000650C                 mov     rax, rbx
.text:000000000000650F                 add     rbx, 8
.text:0000000000006513                 jmp     short loc_64C6
.text:0000000000006513 ; } // starts at 6440
.text:0000000000006513 version_etc     endp
.text:0000000000006513
.text:0000000000006513 ; ---------------------------------------------------------------------------
.text:0000000000006515                 align 20h
.text:0000000000006520
.text:0000000000006520 ; =============== S U B R O U T I N E =======================================
.text:0000000000006520
.text:0000000000006520 ; Attributes: info_from_lumina
.text:0000000000006520
.text:0000000000006520 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006520                 public emit_bug_reporting_address
.text:0000000000006520 emit_bug_reporting_address proc near
.text:0000000000006520 ; __unwind {
.text:0000000000006520                 push    rbx
.text:0000000000006521                 lea     rsi, aReportBugsTo ; "\nReport bugs to"
.text:0000000000006528                 mov     edx, 5          ; category
.text:000000000000652D                 xor     edi, edi        ; domainname
.text:000000000000652F                 call    _dcgettext
.text:0000000000006534                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000653B                 mov     rsi, rax
.text:000000000000653E                 mov     edi, 1
.text:0000000000006543                 xor     eax, eax
.text:0000000000006545                 call    ___printf_chk
.text:000000000000654A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006551                 mov     edx, 5          ; category
.text:0000000000006556                 xor     edi, edi        ; domainname
.text:0000000000006558                 call    _dcgettext
.text:000000000000655D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006564                 lea     rdx, unk_6EB4
.text:000000000000656B                 mov     rsi, rax
.text:000000000000656E                 mov     edi, 1
.text:0000000000006573                 xor     eax, eax
.text:0000000000006575                 call    ___printf_chk
.text:000000000000657A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006581                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000006588                 xor     edi, edi        ; domainname
.text:000000000000658A                 mov     edx, 5          ; category
.text:000000000000658F                 call    _dcgettext
.text:0000000000006594                 mov     rsi, rbx        ; stream
.text:0000000000006597                 mov     rdi, rax        ; s
.text:000000000000659A                 pop     rbx
.text:000000000000659B                 jmp     _fputs_unlocked
.text:000000000000659B ; } // starts at 6520
.text:000000000000659B emit_bug_reporting_address endp
.text:000000000000659B
.text:00000000000065A0
.text:00000000000065A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065A0
.text:00000000000065A0
.text:00000000000065A0                 public xmalloc
.text:00000000000065A0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000065A0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000065A0 ; __unwind {
.text:00000000000065A0                 push    rbx
.text:00000000000065A1                 mov     rbx, rdi
.text:00000000000065A4                 call    _malloc
.text:00000000000065A9                 test    rax, rax
.text:00000000000065AC                 jnz     short loc_65B3
.text:00000000000065AE                 test    rbx, rbx
.text:00000000000065B1                 jnz     short loc_65B5
.text:00000000000065B3
.text:00000000000065B3 loc_65B3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000065B3                 pop     rbx
.text:00000000000065B4                 retn
.text:00000000000065B5 ; ---------------------------------------------------------------------------
.text:00000000000065B5
.text:00000000000065B5 loc_65B5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000065B5                 call    xalloc_die
.text:00000000000065B5 ; } // starts at 65A0
.text:00000000000065B5 xmalloc         endp
.text:00000000000065B5
.text:00000000000065B5 ; ---------------------------------------------------------------------------
.text:00000000000065BA                 align 20h
.text:00000000000065C0
.text:00000000000065C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065C0
.text:00000000000065C0 ; Attributes: info_from_lumina
.text:00000000000065C0
.text:00000000000065C0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000065C0                 public xnmalloc
.text:00000000000065C0 xnmalloc        proc near
.text:00000000000065C0 ; __unwind {
.text:00000000000065C0                 mov     rax, rdi
.text:00000000000065C3                 mul     rsi
.text:00000000000065C6                 mov     rdi, rax
.text:00000000000065C9                 seto    al
.text:00000000000065CC                 test    rdi, rdi
.text:00000000000065CF                 js      short loc_65DB
.text:00000000000065D1                 movzx   eax, al
.text:00000000000065D4                 test    rax, rax
.text:00000000000065D7                 jnz     short loc_65DB
.text:00000000000065D9                 jmp     short xmalloc
.text:00000000000065DB ; ---------------------------------------------------------------------------
.text:00000000000065DB
.text:00000000000065DB loc_65DB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000065DB                                         ; xnmalloc+17↑j
.text:00000000000065DB                 sub     rsp, 8
.text:00000000000065DF                 call    xalloc_die
.text:00000000000065DF ; } // starts at 65C0
.text:00000000000065DF xnmalloc        endp
.text:00000000000065DF
.text:00000000000065DF ; ---------------------------------------------------------------------------
.text:00000000000065E4                 align 10h
.text:00000000000065F0
.text:00000000000065F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065F0
.text:00000000000065F0
.text:00000000000065F0                 public xcharalloc
.text:00000000000065F0 xcharalloc      proc near
.text:00000000000065F0 ; __unwind {
.text:00000000000065F0                 jmp     short xmalloc
.text:00000000000065F0 ; } // starts at 65F0
.text:00000000000065F0 xcharalloc      endp
.text:00000000000065F0
.text:00000000000065F0 ; ---------------------------------------------------------------------------
.text:00000000000065F2                 align 20h
.text:0000000000006600
.text:0000000000006600 ; =============== S U B R O U T I N E =======================================
.text:0000000000006600
.text:0000000000006600 ; Attributes: info_from_lumina
.text:0000000000006600
.text:0000000000006600 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006600                 public xrealloc
.text:0000000000006600 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000006600                                         ; quotearg_n_options+182↑p ...
.text:0000000000006600 ; __unwind {
.text:0000000000006600                 test    rsi, rsi
.text:0000000000006603                 push    rbx
.text:0000000000006604                 mov     rbx, rsi
.text:0000000000006607                 jnz     short loc_660E
.text:0000000000006609                 test    rdi, rdi
.text:000000000000660C                 jnz     short loc_6628
.text:000000000000660E
.text:000000000000660E loc_660E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000660E                 mov     rsi, rbx        ; size
.text:0000000000006611                 call    _realloc
.text:0000000000006616                 test    rax, rax
.text:0000000000006619                 jnz     short loc_6620
.text:000000000000661B                 test    rbx, rbx
.text:000000000000661E                 jnz     short loc_6631
.text:0000000000006620
.text:0000000000006620 loc_6620:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006620                 pop     rbx
.text:0000000000006621                 retn
.text:0000000000006621 ; ---------------------------------------------------------------------------
.text:0000000000006622                 align 8
.text:0000000000006628
.text:0000000000006628 loc_6628:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006628                 call    _free
.text:000000000000662D                 xor     eax, eax
.text:000000000000662F                 pop     rbx
.text:0000000000006630                 retn
.text:0000000000006631 ; ---------------------------------------------------------------------------
.text:0000000000006631
.text:0000000000006631 loc_6631:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000006631                 call    xalloc_die
.text:0000000000006631 ; } // starts at 6600
.text:0000000000006631 xrealloc        endp
.text:0000000000006631
.text:0000000000006631 ; ---------------------------------------------------------------------------
.text:0000000000006636                 align 20h
.text:0000000000006640
.text:0000000000006640 ; =============== S U B R O U T I N E =======================================
.text:0000000000006640
.text:0000000000006640 ; Attributes: info_from_lumina
.text:0000000000006640
.text:0000000000006640 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000006640                 public xnrealloc
.text:0000000000006640 xnrealloc       proc near
.text:0000000000006640 ; __unwind {
.text:0000000000006640                 mov     rax, rsi
.text:0000000000006643                 mul     rdx
.text:0000000000006646                 mov     rsi, rax
.text:0000000000006649                 seto    al
.text:000000000000664C                 test    rsi, rsi
.text:000000000000664F                 js      short loc_665B
.text:0000000000006651                 movzx   eax, al
.text:0000000000006654                 test    rax, rax
.text:0000000000006657                 jnz     short loc_665B
.text:0000000000006659                 jmp     short xrealloc
.text:000000000000665B ; ---------------------------------------------------------------------------
.text:000000000000665B
.text:000000000000665B loc_665B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000665B                                         ; xnrealloc+17↑j
.text:000000000000665B                 sub     rsp, 8
.text:000000000000665F                 call    xalloc_die
.text:000000000000665F ; } // starts at 6640
.text:000000000000665F xnrealloc       endp
.text:000000000000665F
.text:000000000000665F ; ---------------------------------------------------------------------------
.text:0000000000006664                 align 10h
.text:0000000000006670
.text:0000000000006670 ; =============== S U B R O U T I N E =======================================
.text:0000000000006670
.text:0000000000006670 ; Attributes: info_from_lumina
.text:0000000000006670
.text:0000000000006670 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006670                 public x2nrealloc
.text:0000000000006670 x2nrealloc      proc near
.text:0000000000006670 ; __unwind {
.text:0000000000006670                 test    rdi, rdi
.text:0000000000006673                 mov     r9, rdx
.text:0000000000006676                 mov     rcx, [rsi]
.text:0000000000006679                 jz      short loc_66B0
.text:000000000000667B                 xor     edx, edx
.text:000000000000667D                 mov     rax, 5555555555555554h
.text:0000000000006687                 div     r9
.text:000000000000668A                 cmp     rax, rcx
.text:000000000000668D                 jbe     short loc_66CB
.text:000000000000668F                 mov     rax, rcx
.text:0000000000006692                 shr     rax, 1
.text:0000000000006695                 lea     rcx, [rax+rcx+1]
.text:000000000000669A
.text:000000000000669A loc_669A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000669A                 mov     [rsi], rcx
.text:000000000000669D                 imul    rcx, r9
.text:00000000000066A1                 mov     rsi, rcx
.text:00000000000066A4                 jmp     xrealloc
.text:00000000000066A4 ; ---------------------------------------------------------------------------
.text:00000000000066A9                 align 10h
.text:00000000000066B0
.text:00000000000066B0 loc_66B0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000066B0                 test    rcx, rcx
.text:00000000000066B3                 jz      short loc_66D8
.text:00000000000066B5
.text:00000000000066B5 loc_66B5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000066B5                 mov     rax, rcx
.text:00000000000066B8                 mul     r9
.text:00000000000066BB                 seto    dl
.text:00000000000066BE                 test    rax, rax
.text:00000000000066C1                 movzx   edx, dl
.text:00000000000066C4                 js      short loc_66CB
.text:00000000000066C6                 test    rdx, rdx
.text:00000000000066C9                 jz      short loc_669A
.text:00000000000066CB
.text:00000000000066CB loc_66CB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000066CB                                         ; x2nrealloc+54↑j
.text:00000000000066CB                 sub     rsp, 8
.text:00000000000066CF                 call    xalloc_die
.text:00000000000066CF ; ---------------------------------------------------------------------------
.text:00000000000066D4                 align 8
.text:00000000000066D8
.text:00000000000066D8 loc_66D8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000066D8                 xor     edx, edx
.text:00000000000066DA                 mov     eax, 80h
.text:00000000000066DF                 xor     r8d, r8d
.text:00000000000066E2                 div     r9
.text:00000000000066E5                 test    rax, rax
.text:00000000000066E8                 setz    r8b
.text:00000000000066EC                 lea     rcx, [r8+rax]
.text:00000000000066F0                 jmp     short loc_66B5
.text:00000000000066F0 ; } // starts at 6670
.text:00000000000066F0 x2nrealloc      endp
.text:00000000000066F0
.text:00000000000066F0 ; ---------------------------------------------------------------------------
.text:00000000000066F2                 align 20h
.text:0000000000006700
.text:0000000000006700 ; =============== S U B R O U T I N E =======================================
.text:0000000000006700
.text:0000000000006700 ; Attributes: info_from_lumina
.text:0000000000006700
.text:0000000000006700 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006700                 public x2realloc
.text:0000000000006700 x2realloc       proc near
.text:0000000000006700 ; __unwind {
.text:0000000000006700                 test    rdi, rdi
.text:0000000000006703                 mov     rax, [rsi]
.text:0000000000006706                 jz      short loc_6730
.text:0000000000006708                 mov     rdx, 5555555555555553h
.text:0000000000006712                 cmp     rax, rdx
.text:0000000000006715                 ja      short loc_6741
.text:0000000000006717                 mov     rdx, rax
.text:000000000000671A                 shr     rdx, 1
.text:000000000000671D                 lea     rax, [rdx+rax+1]
.text:0000000000006722
.text:0000000000006722 loc_6722:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006722                 mov     [rsi], rax
.text:0000000000006725                 mov     rsi, rax
.text:0000000000006728                 jmp     xrealloc
.text:0000000000006728 ; ---------------------------------------------------------------------------
.text:000000000000672D                 align 10h
.text:0000000000006730
.text:0000000000006730 loc_6730:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006730                 test    rax, rax
.text:0000000000006733                 mov     edx, 80h
.text:0000000000006738                 cmovz   rax, rdx
.text:000000000000673C                 test    rax, rax
.text:000000000000673F                 jns     short loc_6722
.text:0000000000006741
.text:0000000000006741 loc_6741:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006741                 sub     rsp, 8
.text:0000000000006745                 call    xalloc_die
.text:0000000000006745 ; } // starts at 6700
.text:0000000000006745 x2realloc       endp
.text:0000000000006745
.text:0000000000006745 ; ---------------------------------------------------------------------------
.text:000000000000674A                 align 10h
.text:0000000000006750
.text:0000000000006750 ; =============== S U B R O U T I N E =======================================
.text:0000000000006750
.text:0000000000006750
.text:0000000000006750 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006750                 public xzalloc
.text:0000000000006750 xzalloc         proc near
.text:0000000000006750 ; __unwind {
.text:0000000000006750                 push    rbx
.text:0000000000006751                 mov     rbx, rdi
.text:0000000000006754                 call    xmalloc
.text:0000000000006759                 mov     rdx, rbx        ; n
.text:000000000000675C                 xor     esi, esi        ; c
.text:000000000000675E                 mov     rdi, rax        ; s
.text:0000000000006761                 pop     rbx
.text:0000000000006762                 jmp     _memset
.text:0000000000006762 ; } // starts at 6750
.text:0000000000006762 xzalloc         endp
.text:0000000000006762
.text:0000000000006762 ; ---------------------------------------------------------------------------
.text:0000000000006767                 align 10h
.text:0000000000006770
.text:0000000000006770 ; =============== S U B R O U T I N E =======================================
.text:0000000000006770
.text:0000000000006770 ; Attributes: info_from_lumina
.text:0000000000006770
.text:0000000000006770 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006770                 public xcalloc
.text:0000000000006770 xcalloc         proc near
.text:0000000000006770 ; __unwind {
.text:0000000000006770                 mov     rax, rdi
.text:0000000000006773                 sub     rsp, 8
.text:0000000000006777                 mul     rsi
.text:000000000000677A                 seto    dl
.text:000000000000677D                 test    rax, rax
.text:0000000000006780                 js      short loc_6799
.text:0000000000006782                 movzx   edx, dl
.text:0000000000006785                 test    rdx, rdx
.text:0000000000006788                 jnz     short loc_6799
.text:000000000000678A                 call    _calloc
.text:000000000000678F                 test    rax, rax
.text:0000000000006792                 jz      short loc_6799
.text:0000000000006794                 add     rsp, 8
.text:0000000000006798                 retn
.text:0000000000006799 ; ---------------------------------------------------------------------------
.text:0000000000006799
.text:0000000000006799 loc_6799:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000006799                                         ; xcalloc+18↑j ...
.text:0000000000006799                 call    xalloc_die
.text:0000000000006799 ; } // starts at 6770
.text:0000000000006799 xcalloc         endp
.text:0000000000006799
.text:0000000000006799 ; ---------------------------------------------------------------------------
.text:000000000000679E                 align 20h
.text:00000000000067A0
.text:00000000000067A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067A0
.text:00000000000067A0 ; Attributes: info_from_lumina
.text:00000000000067A0
.text:00000000000067A0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000067A0                 public xmemdup
.text:00000000000067A0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000067A0                                         ; xstrdup+11↓j
.text:00000000000067A0 ; __unwind {
.text:00000000000067A0                 push    rbp
.text:00000000000067A1                 push    rbx
.text:00000000000067A2                 mov     rbp, rdi
.text:00000000000067A5                 mov     rdi, rsi
.text:00000000000067A8                 mov     rbx, rsi
.text:00000000000067AB                 sub     rsp, 8
.text:00000000000067AF                 call    xmalloc
.text:00000000000067B4                 add     rsp, 8
.text:00000000000067B8                 mov     rdx, rbx        ; n
.text:00000000000067BB                 mov     rsi, rbp        ; src
.text:00000000000067BE                 pop     rbx
.text:00000000000067BF                 pop     rbp
.text:00000000000067C0                 mov     rdi, rax        ; dest
.text:00000000000067C3                 jmp     _memcpy
.text:00000000000067C3 ; } // starts at 67A0
.text:00000000000067C3 xmemdup         endp
.text:00000000000067C3
.text:00000000000067C3 ; ---------------------------------------------------------------------------
.text:00000000000067C8                 align 10h
.text:00000000000067D0
.text:00000000000067D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067D0
.text:00000000000067D0
.text:00000000000067D0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000067D0                 public xstrdup
.text:00000000000067D0 xstrdup         proc near
.text:00000000000067D0 ; __unwind {
.text:00000000000067D0                 push    rbx
.text:00000000000067D1                 mov     rbx, rdi
.text:00000000000067D4                 call    _strlen
.text:00000000000067D9                 mov     rdi, rbx        ; src
.text:00000000000067DC                 lea     rsi, [rax+1]    ; n
.text:00000000000067E0                 pop     rbx
.text:00000000000067E1                 jmp     short xmemdup
.text:00000000000067E1 ; } // starts at 67D0
.text:00000000000067E1 xstrdup         endp
.text:00000000000067E1
.text:00000000000067E1 ; ---------------------------------------------------------------------------
.text:00000000000067E3                 align 10h
.text:00000000000067F0
.text:00000000000067F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067F0
.text:00000000000067F0 ; Attributes: noreturn info_from_lumina
.text:00000000000067F0
.text:00000000000067F0 ; void __cdecl xalloc_die()
.text:00000000000067F0                 public xalloc_die
.text:00000000000067F0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_57B6↑p
.text:00000000000067F0                                         ; xmalloc:loc_65B5↑p ...
.text:00000000000067F0 ; __unwind {
.text:00000000000067F0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000067F7                 sub     rsp, 8
.text:00000000000067FB                 mov     edx, 5          ; category
.text:0000000000006800                 xor     edi, edi        ; domainname
.text:0000000000006802                 call    _dcgettext
.text:0000000000006807                 mov     edi, cs:exit_failure ; status
.text:000000000000680D                 lea     rdx, format     ; format
.text:0000000000006814                 mov     rcx, rax
.text:0000000000006817                 xor     esi, esi        ; errnum
.text:0000000000006819                 xor     eax, eax
.text:000000000000681B                 call    _error
.text:0000000000006820                 call    _abort
.text:0000000000006820 ; } // starts at 67F0
.text:0000000000006820 xalloc_die      endp
.text:0000000000006820
.text:0000000000006820 ; ---------------------------------------------------------------------------
.text:0000000000006825                 align 10h
.text:0000000000006830
.text:0000000000006830 ; =============== S U B R O U T I N E =======================================
.text:0000000000006830
.text:0000000000006830 ; Attributes: info_from_lumina
.text:0000000000006830
.text:0000000000006830 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006830                 public rpl_fclose
.text:0000000000006830 rpl_fclose      proc near               ; CODE XREF: main+D2B↑p
.text:0000000000006830                                         ; main+E07↑p ...
.text:0000000000006830 ; __unwind {
.text:0000000000006830                 push    r12
.text:0000000000006832                 push    rbp
.text:0000000000006833                 push    rbx
.text:0000000000006834                 mov     rbx, rdi
.text:0000000000006837                 call    _fileno
.text:000000000000683C                 test    eax, eax
.text:000000000000683E                 mov     rdi, rbx        ; fp
.text:0000000000006841                 js      short loc_6897
.text:0000000000006843                 call    ___freading
.text:0000000000006848                 test    eax, eax
.text:000000000000684A                 jnz     short loc_6878
.text:000000000000684C
.text:000000000000684C loc_684C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000684C                 mov     rdi, rbx        ; stream
.text:000000000000684F                 call    rpl_fflush
.text:0000000000006854                 test    eax, eax
.text:0000000000006856                 jz      short loc_6894
.text:0000000000006858                 call    ___errno_location
.text:000000000000685D                 mov     r12d, [rax]
.text:0000000000006860                 mov     rdi, rbx        ; stream
.text:0000000000006863                 mov     rbp, rax
.text:0000000000006866                 call    _fclose
.text:000000000000686B                 test    r12d, r12d
.text:000000000000686E                 jnz     short loc_68A0
.text:0000000000006870
.text:0000000000006870 loc_6870:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006870                 pop     rbx
.text:0000000000006871                 pop     rbp
.text:0000000000006872                 pop     r12
.text:0000000000006874                 retn
.text:0000000000006874 ; ---------------------------------------------------------------------------
.text:0000000000006875                 align 8
.text:0000000000006878
.text:0000000000006878 loc_6878:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006878                 mov     rdi, rbx        ; stream
.text:000000000000687B                 call    _fileno
.text:0000000000006880                 xor     esi, esi        ; offset
.text:0000000000006882                 mov     edx, 1          ; whence
.text:0000000000006887                 mov     edi, eax        ; fd
.text:0000000000006889                 call    _lseek
.text:000000000000688E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006892                 jnz     short loc_684C
.text:0000000000006894
.text:0000000000006894 loc_6894:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000006894                 mov     rdi, rbx        ; stream
.text:0000000000006897
.text:0000000000006897 loc_6897:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000006897                 pop     rbx
.text:0000000000006898                 pop     rbp
.text:0000000000006899                 pop     r12
.text:000000000000689B                 jmp     _fclose
.text:00000000000068A0 ; ---------------------------------------------------------------------------
.text:00000000000068A0
.text:00000000000068A0 loc_68A0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000068A0                 mov     [rbp+0], r12d
.text:00000000000068A4                 mov     eax, 0FFFFFFFFh
.text:00000000000068A9                 jmp     short loc_6870
.text:00000000000068A9 ; } // starts at 6830
.text:00000000000068A9 rpl_fclose      endp
.text:00000000000068A9
.text:00000000000068A9 ; ---------------------------------------------------------------------------
.text:00000000000068AB                 align 10h
.text:00000000000068B0
.text:00000000000068B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068B0
.text:00000000000068B0
.text:00000000000068B0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:00000000000068B0                 public rpl_fcntl
.text:00000000000068B0 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:00000000000068B0
.text:00000000000068B0 var_68          = dword ptr -68h
.text:00000000000068B0 var_60          = qword ptr -60h
.text:00000000000068B0 var_58          = qword ptr -58h
.text:00000000000068B0 var_50          = qword ptr -50h
.text:00000000000068B0 var_48          = byte ptr -48h
.text:00000000000068B0 var_38          = qword ptr -38h
.text:00000000000068B0 var_30          = qword ptr -30h
.text:00000000000068B0 var_28          = qword ptr -28h
.text:00000000000068B0 var_20          = qword ptr -20h
.text:00000000000068B0 arg_0           = byte ptr  8
.text:00000000000068B0
.text:00000000000068B0 ; __unwind {
.text:00000000000068B0                 push    r12
.text:00000000000068B2                 push    rbp
.text:00000000000068B3                 mov     ebp, edi
.text:00000000000068B5                 push    rbx
.text:00000000000068B6                 sub     rsp, 50h
.text:00000000000068BA                 mov     rax, fs:28h
.text:00000000000068C3                 mov     [rsp+68h+var_50], rax
.text:00000000000068C8                 xor     eax, eax
.text:00000000000068CA                 lea     rax, [rsp+68h+arg_0]
.text:00000000000068CF                 test    esi, esi
.text:00000000000068D1                 mov     [rsp+68h+var_38], rdx
.text:00000000000068D6                 mov     [rsp+68h+var_30], rcx
.text:00000000000068DB                 mov     [rsp+68h+var_28], r8
.text:00000000000068E0                 mov     [rsp+68h+var_60], rax
.text:00000000000068E5                 lea     rax, [rsp+68h+var_48]
.text:00000000000068EA                 mov     [rsp+68h+var_20], r9
.text:00000000000068EF                 mov     [rsp+68h+var_68], 10h
.text:00000000000068F6                 mov     [rsp+68h+var_58], rax
.text:00000000000068FB                 jz      loc_6B02
.text:0000000000006901                 cmp     esi, 406h
.text:0000000000006907                 jnz     short loc_6950
.text:0000000000006909                 mov     rax, [rsp+68h+var_58]
.text:000000000000690E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000006915                 mov     [rsp+68h+var_68], 18h
.text:000000000000691C                 mov     r12d, [rax+10h]
.text:0000000000006920                 mov     edx, r12d
.text:0000000000006923                 js      loc_6A53
.text:0000000000006929                 xor     eax, eax
.text:000000000000692B                 mov     esi, 406h       ; cmd
.text:0000000000006930                 call    _fcntl
.text:0000000000006935                 test    eax, eax
.text:0000000000006937                 mov     ebx, eax
.text:0000000000006939                 js      loc_6AC8
.text:000000000000693F
.text:000000000000693F loc_693F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000693F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000006949                 jmp     short loc_6990
.text:0000000000006949 ; ---------------------------------------------------------------------------
.text:000000000000694B                 align 10h
.text:0000000000006950
.text:0000000000006950 loc_6950:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000006950                 cmp     esi, 0Bh
.text:0000000000006953                 jz      short loc_6980
.text:0000000000006955                 jg      short loc_69B0
.text:0000000000006957                 cmp     esi, 4
.text:000000000000695A                 jz      loc_6A30
.text:0000000000006960                 jg      loc_6A20
.text:0000000000006966                 cmp     esi, 2
.text:0000000000006969                 jz      loc_6A30
.text:000000000000696F                 jg      short loc_6980
.text:0000000000006971                 cmp     esi, 1
.text:0000000000006974                 jnz     short loc_69D8
.text:0000000000006976                 db      2Eh
.text:0000000000006976                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006980
.text:0000000000006980 loc_6980:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000006980                                         ; rpl_fcntl+BF↑j ...
.text:0000000000006980                 mov     edi, ebp        ; fd
.text:0000000000006982                 xor     eax, eax
.text:0000000000006984                 call    _fcntl
.text:0000000000006989                 mov     ebx, eax
.text:000000000000698B                 nop     dword ptr [rax+rax+00h]
.text:0000000000006990
.text:0000000000006990 loc_6990:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000006990                                         ; rpl_fcntl+147↓j ...
.text:0000000000006990                 mov     rcx, [rsp+68h+var_50]
.text:0000000000006995                 xor     rcx, fs:28h
.text:000000000000699E                 mov     eax, ebx
.text:00000000000069A0                 jnz     loc_6AFD
.text:00000000000069A6                 add     rsp, 50h
.text:00000000000069AA                 pop     rbx
.text:00000000000069AB                 pop     rbp
.text:00000000000069AC                 pop     r12
.text:00000000000069AE                 retn
.text:00000000000069AE ; ---------------------------------------------------------------------------
.text:00000000000069AF                 align 10h
.text:00000000000069B0
.text:00000000000069B0 loc_69B0:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:00000000000069B0                 cmp     esi, 407h
.text:00000000000069B6                 jg      short loc_6A00
.text:00000000000069B8                 cmp     esi, 406h
.text:00000000000069BE                 jge     short loc_6A30
.text:00000000000069C0                 cmp     esi, 401h
.text:00000000000069C6                 jz      short loc_6980
.text:00000000000069C8                 cmp     esi, 402h
.text:00000000000069CE                 jz      short loc_6A30
.text:00000000000069D0                 cmp     esi, 400h
.text:00000000000069D6                 jz      short loc_6A30
.text:00000000000069D8
.text:00000000000069D8 loc_69D8:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:00000000000069D8                                         ; rpl_fcntl+164↓j ...
.text:00000000000069D8                 mov     eax, [rsp+68h+var_68]
.text:00000000000069DB                 cmp     eax, 2Fh ; '/'
.text:00000000000069DE                 ja      loc_6B1A
.text:00000000000069E4                 add     rax, [rsp+68h+var_58]
.text:00000000000069E9
.text:00000000000069E9 loc_69E9:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:00000000000069E9                 mov     rdx, [rax]
.text:00000000000069EC                 mov     edi, ebp        ; fd
.text:00000000000069EE                 xor     eax, eax
.text:00000000000069F0                 call    _fcntl
.text:00000000000069F5                 mov     ebx, eax
.text:00000000000069F7                 jmp     short loc_6990
.text:00000000000069F7 ; ---------------------------------------------------------------------------
.text:00000000000069F9                 align 20h
.text:0000000000006A00
.text:0000000000006A00 loc_6A00:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000006A00                 cmp     esi, 409h
.text:0000000000006A06                 jz      short loc_6A30
.text:0000000000006A08                 jl      loc_6980
.text:0000000000006A0E                 cmp     esi, 40Ah
.text:0000000000006A14                 jnz     short loc_69D8
.text:0000000000006A16                 jmp     loc_6980
.text:0000000000006A16 ; ---------------------------------------------------------------------------
.text:0000000000006A1B                 align 20h
.text:0000000000006A20
.text:0000000000006A20 loc_6A20:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000006A20                 cmp     esi, 9
.text:0000000000006A23                 jz      loc_6980
.text:0000000000006A29                 jg      short loc_6A30
.text:0000000000006A2B                 cmp     esi, 8
.text:0000000000006A2E                 jnz     short loc_69D8
.text:0000000000006A30
.text:0000000000006A30 loc_6A30:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000006A30                                         ; rpl_fcntl+B9↑j ...
.text:0000000000006A30                 mov     eax, [rsp+68h+var_68]
.text:0000000000006A33                 cmp     eax, 2Fh ; '/'
.text:0000000000006A36                 ja      loc_6B24
.text:0000000000006A3C                 add     rax, [rsp+68h+var_58]
.text:0000000000006A41
.text:0000000000006A41 loc_6A41:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000006A41                 mov     edx, [rax]
.text:0000000000006A43                 mov     edi, ebp        ; fd
.text:0000000000006A45                 xor     eax, eax
.text:0000000000006A47                 call    _fcntl
.text:0000000000006A4C                 mov     ebx, eax
.text:0000000000006A4E                 jmp     loc_6990
.text:0000000000006A53 ; ---------------------------------------------------------------------------
.text:0000000000006A53
.text:0000000000006A53 loc_6A53:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000006A53                 xor     esi, esi        ; cmd
.text:0000000000006A55                 xor     eax, eax
.text:0000000000006A57                 call    _fcntl
.text:0000000000006A5C                 test    eax, eax
.text:0000000000006A5E                 mov     ebx, eax
.text:0000000000006A60                 js      loc_6990
.text:0000000000006A66                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000006A6D                 jnz     loc_6990
.text:0000000000006A73
.text:0000000000006A73 loc_6A73:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000006A73                 xor     eax, eax
.text:0000000000006A75                 mov     esi, 1          ; cmd
.text:0000000000006A7A                 mov     edi, ebx        ; fd
.text:0000000000006A7C                 call    _fcntl
.text:0000000000006A81                 test    eax, eax
.text:0000000000006A83                 js      short loc_6AA1
.text:0000000000006A85                 or      eax, 1
.text:0000000000006A88                 mov     esi, 2          ; cmd
.text:0000000000006A8D                 mov     edi, ebx        ; fd
.text:0000000000006A8F                 mov     edx, eax
.text:0000000000006A91                 xor     eax, eax
.text:0000000000006A93                 call    _fcntl
.text:0000000000006A98                 cmp     eax, 0FFFFFFFFh
.text:0000000000006A9B                 jnz     loc_6990
.text:0000000000006AA1
.text:0000000000006AA1 loc_6AA1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000006AA1                 call    ___errno_location
.text:0000000000006AA6                 mov     r12d, [rax]
.text:0000000000006AA9                 mov     rbp, rax
.text:0000000000006AAC                 mov     edi, ebx        ; fd
.text:0000000000006AAE                 call    _close
.text:0000000000006AB3                 mov     ebx, 0FFFFFFFFh
.text:0000000000006AB8                 mov     [rbp+0], r12d
.text:0000000000006ABC                 jmp     loc_6990
.text:0000000000006ABC ; ---------------------------------------------------------------------------
.text:0000000000006AC1                 align 8
.text:0000000000006AC8
.text:0000000000006AC8 loc_6AC8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000006AC8                 call    ___errno_location
.text:0000000000006ACD                 cmp     dword ptr [rax], 16h
.text:0000000000006AD0                 jnz     loc_693F
.text:0000000000006AD6                 xor     esi, esi        ; cmd
.text:0000000000006AD8                 xor     eax, eax
.text:0000000000006ADA                 mov     edx, r12d
.text:0000000000006ADD                 mov     edi, ebp        ; fd
.text:0000000000006ADF                 call    _fcntl
.text:0000000000006AE4                 test    eax, eax
.text:0000000000006AE6                 mov     ebx, eax
.text:0000000000006AE8                 js      loc_6990
.text:0000000000006AEE                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000006AF8                 jmp     loc_6A73
.text:0000000000006AFD ; ---------------------------------------------------------------------------
.text:0000000000006AFD
.text:0000000000006AFD loc_6AFD:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:0000000000006AFD                 call    ___stack_chk_fail
.text:0000000000006B02 ; ---------------------------------------------------------------------------
.text:0000000000006B02
.text:0000000000006B02 loc_6B02:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000006B02                 mov     rax, [rsp+68h+var_58]
.text:0000000000006B07                 xor     esi, esi        ; cmd
.text:0000000000006B09                 mov     edx, [rax+10h]
.text:0000000000006B0C                 xor     eax, eax
.text:0000000000006B0E                 call    _fcntl
.text:0000000000006B13                 mov     ebx, eax
.text:0000000000006B15                 jmp     loc_6990
.text:0000000000006B1A ; ---------------------------------------------------------------------------
.text:0000000000006B1A
.text:0000000000006B1A loc_6B1A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:0000000000006B1A                 mov     rax, [rsp+68h+var_60]
.text:0000000000006B1F                 jmp     loc_69E9
.text:0000000000006B24 ; ---------------------------------------------------------------------------
.text:0000000000006B24
.text:0000000000006B24 loc_6B24:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000006B24                 mov     rax, [rsp+68h+var_60]
.text:0000000000006B29                 jmp     loc_6A41
.text:0000000000006B29 ; } // starts at 68B0
.text:0000000000006B29 rpl_fcntl       endp
.text:0000000000006B29
.text:0000000000006B29 ; ---------------------------------------------------------------------------
.text:0000000000006B2E                 align 10h
.text:0000000000006B30
.text:0000000000006B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B30
.text:0000000000006B30 ; Attributes: info_from_lumina
.text:0000000000006B30
.text:0000000000006B30 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000006B30                 public rpl_fflush
.text:0000000000006B30 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000006B30 ; __unwind {
.text:0000000000006B30                 test    rdi, rdi
.text:0000000000006B33                 push    rbx
.text:0000000000006B34                 mov     rbx, rdi
.text:0000000000006B37                 jz      short loc_6B4A
.text:0000000000006B39                 call    ___freading
.text:0000000000006B3E                 test    eax, eax
.text:0000000000006B40                 jz      short loc_6B4A
.text:0000000000006B42                 test    dword ptr [rbx], 100h
.text:0000000000006B48                 jnz     short loc_6B58
.text:0000000000006B4A
.text:0000000000006B4A loc_6B4A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000006B4A                                         ; rpl_fflush+10↑j
.text:0000000000006B4A                 mov     rdi, rbx        ; stream
.text:0000000000006B4D                 pop     rbx
.text:0000000000006B4E                 jmp     _fflush
.text:0000000000006B4E ; ---------------------------------------------------------------------------
.text:0000000000006B53                 align 8
.text:0000000000006B58
.text:0000000000006B58 loc_6B58:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006B58                 mov     rdi, rbx
.text:0000000000006B5B                 mov     edx, 1
.text:0000000000006B60                 xor     esi, esi
.text:0000000000006B62                 call    rpl_fseeko
.text:0000000000006B67                 mov     rdi, rbx        ; stream
.text:0000000000006B6A                 pop     rbx
.text:0000000000006B6B                 jmp     _fflush
.text:0000000000006B6B ; } // starts at 6B30
.text:0000000000006B6B rpl_fflush      endp
.text:0000000000006B6B
.text:0000000000006B70
.text:0000000000006B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B70
.text:0000000000006B70 ; Attributes: info_from_lumina
.text:0000000000006B70
.text:0000000000006B70 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006B70                 public rpl_fseeko
.text:0000000000006B70 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006B70 ; __unwind {
.text:0000000000006B70                 mov     rax, [rdi+8]
.text:0000000000006B74                 cmp     [rdi+10h], rax
.text:0000000000006B78                 jz      short loc_6B80
.text:0000000000006B7A
.text:0000000000006B7A loc_6B7A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000006B7A                                         ; rpl_fseeko+1F↓j
.text:0000000000006B7A                 jmp     _fseeko
.text:0000000000006B7A ; ---------------------------------------------------------------------------
.text:0000000000006B7F                 align 20h
.text:0000000000006B80
.text:0000000000006B80 loc_6B80:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006B80                 mov     rax, [rdi+20h]
.text:0000000000006B84                 cmp     [rdi+28h], rax
.text:0000000000006B88                 jnz     short loc_6B7A
.text:0000000000006B8A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000006B8F                 jnz     short loc_6B7A
.text:0000000000006B91                 push    r12
.text:0000000000006B93                 push    rbp
.text:0000000000006B94                 mov     r12d, edx
.text:0000000000006B97                 push    rbx
.text:0000000000006B98                 mov     rbp, rsi
.text:0000000000006B9B                 mov     rbx, rdi
.text:0000000000006B9E                 call    _fileno
.text:0000000000006BA3                 mov     edx, r12d       ; whence
.text:0000000000006BA6                 mov     rsi, rbp        ; offset
.text:0000000000006BA9                 mov     edi, eax        ; fd
.text:0000000000006BAB                 call    _lseek
.text:0000000000006BB0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006BB4                 jz      short loc_6BC2
.text:0000000000006BB6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006BB9                 mov     [rbx+90h], rax
.text:0000000000006BC0                 xor     eax, eax
.text:0000000000006BC2
.text:0000000000006BC2 loc_6BC2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006BC2                 pop     rbx
.text:0000000000006BC3                 pop     rbp
.text:0000000000006BC4                 pop     r12
.text:0000000000006BC6                 retn
.text:0000000000006BC6 ; } // starts at 6B70
.text:0000000000006BC6 rpl_fseeko      endp
.text:0000000000006BC6
.text:0000000000006BC6 ; ---------------------------------------------------------------------------
.text:0000000000006BC7                 align 10h
.text:0000000000006BD0
.text:0000000000006BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BD0
.text:0000000000006BD0 ; Attributes: info_from_lumina
.text:0000000000006BD0
.text:0000000000006BD0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000006BD0                 public rpl_mbrtowc
.text:0000000000006BD0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000006BD0
.text:0000000000006BD0 pwc             = dword ptr -34h
.text:0000000000006BD0 var_30          = qword ptr -30h
.text:0000000000006BD0
.text:0000000000006BD0 ; __unwind {
.text:0000000000006BD0                 push    r13
.text:0000000000006BD2                 push    r12
.text:0000000000006BD4                 mov     r13, rsi
.text:0000000000006BD7                 push    rbp
.text:0000000000006BD8                 push    rbx
.text:0000000000006BD9                 mov     rbx, rdi
.text:0000000000006BDC                 mov     r12, rdx
.text:0000000000006BDF                 sub     rsp, 18h
.text:0000000000006BE3                 mov     rax, fs:28h
.text:0000000000006BEC                 mov     [rsp+38h+var_30], rax
.text:0000000000006BF1                 xor     eax, eax
.text:0000000000006BF3                 lea     rax, [rsp+38h+pwc]
.text:0000000000006BF8                 test    rdi, rdi
.text:0000000000006BFB                 cmovz   rbx, rax
.text:0000000000006BFF                 mov     rdi, rbx        ; pwc
.text:0000000000006C02                 call    _mbrtowc
.text:0000000000006C07                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000006C0B                 mov     rbp, rax
.text:0000000000006C0E                 jbe     short loc_6C30
.text:0000000000006C10                 test    r12, r12
.text:0000000000006C13                 jz      short loc_6C30
.text:0000000000006C15                 xor     edi, edi
.text:0000000000006C17                 call    hard_locale
.text:0000000000006C1C                 test    al, al
.text:0000000000006C1E                 jnz     short loc_6C30
.text:0000000000006C20                 movzx   eax, byte ptr [r13+0]
.text:0000000000006C25                 mov     ebp, 1
.text:0000000000006C2A                 mov     [rbx], eax
.text:0000000000006C2C                 nop     dword ptr [rax+00h]
.text:0000000000006C30
.text:0000000000006C30 loc_6C30:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000006C30                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000006C30                 mov     rdx, [rsp+38h+var_30]
.text:0000000000006C35                 xor     rdx, fs:28h
.text:0000000000006C3E                 mov     rax, rbp
.text:0000000000006C41                 jnz     short loc_6C4E
.text:0000000000006C43                 add     rsp, 18h
.text:0000000000006C47                 pop     rbx
.text:0000000000006C48                 pop     rbp
.text:0000000000006C49                 pop     r12
.text:0000000000006C4B                 pop     r13
.text:0000000000006C4D                 retn
.text:0000000000006C4E ; ---------------------------------------------------------------------------
.text:0000000000006C4E
.text:0000000000006C4E loc_6C4E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000006C4E                 call    ___stack_chk_fail
.text:0000000000006C4E ; } // starts at 6BD0
.text:0000000000006C4E rpl_mbrtowc     endp
.text:0000000000006C4E
.text:0000000000006C4E ; ---------------------------------------------------------------------------
.text:0000000000006C53                 align 20h
.text:0000000000006C60
.text:0000000000006C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C60
.text:0000000000006C60 ; Attributes: info_from_lumina
.text:0000000000006C60
.text:0000000000006C60 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006C60                 public close_stream
.text:0000000000006C60 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006C60                                         ; close_stdout+33↑p
.text:0000000000006C60 ; __unwind {
.text:0000000000006C60                 push    r12
.text:0000000000006C62                 push    rbp
.text:0000000000006C63                 mov     rbp, rdi
.text:0000000000006C66                 push    rbx
.text:0000000000006C67                 call    ___fpending
.text:0000000000006C6C                 mov     ebx, [rbp+0]
.text:0000000000006C6F                 mov     rdi, rbp        ; stream
.text:0000000000006C72                 mov     r12, rax
.text:0000000000006C75                 call    rpl_fclose
.text:0000000000006C7A                 and     ebx, 20h
.text:0000000000006C7D                 test    ebx, ebx
.text:0000000000006C7F                 jnz     short loc_6C98
.text:0000000000006C81                 test    eax, eax
.text:0000000000006C83                 jz      short loc_6C8F
.text:0000000000006C85                 test    r12, r12
.text:0000000000006C88                 mov     eax, 0FFFFFFFFh
.text:0000000000006C8D                 jz      short loc_6CC8
.text:0000000000006C8F
.text:0000000000006C8F loc_6C8F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000006C8F                 pop     rbx
.text:0000000000006C90                 pop     rbp
.text:0000000000006C91                 pop     r12
.text:0000000000006C93                 retn
.text:0000000000006C93 ; ---------------------------------------------------------------------------
.text:0000000000006C94                 align 8
.text:0000000000006C98
.text:0000000000006C98 loc_6C98:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006C98                 test    eax, eax
.text:0000000000006C9A                 jnz     short loc_6CB8
.text:0000000000006C9C                 call    ___errno_location
.text:0000000000006CA1                 mov     dword ptr [rax], 0
.text:0000000000006CA7                 mov     eax, 0FFFFFFFFh
.text:0000000000006CAC                 pop     rbx
.text:0000000000006CAD                 pop     rbp
.text:0000000000006CAE                 pop     r12
.text:0000000000006CB0                 retn
.text:0000000000006CB0 ; ---------------------------------------------------------------------------
.text:0000000000006CB1                 align 8
.text:0000000000006CB8
.text:0000000000006CB8 loc_6CB8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006CB8                 pop     rbx
.text:0000000000006CB9                 mov     eax, 0FFFFFFFFh
.text:0000000000006CBE                 pop     rbp
.text:0000000000006CBF                 pop     r12
.text:0000000000006CC1                 retn
.text:0000000000006CC1 ; ---------------------------------------------------------------------------
.text:0000000000006CC2                 align 8
.text:0000000000006CC8
.text:0000000000006CC8 loc_6CC8:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006CC8                 call    ___errno_location
.text:0000000000006CCD                 cmp     dword ptr [rax], 9
.text:0000000000006CD0                 pop     rbx
.text:0000000000006CD1                 pop     rbp
.text:0000000000006CD2                 pop     r12
.text:0000000000006CD4                 setnz   al
.text:0000000000006CD7                 movzx   eax, al
.text:0000000000006CDA                 neg     eax
.text:0000000000006CDC                 retn
.text:0000000000006CDC ; } // starts at 6C60
.text:0000000000006CDC close_stream    endp
.text:0000000000006CDC
.text:0000000000006CDC ; ---------------------------------------------------------------------------
.text:0000000000006CDD                 align 20h
.text:0000000000006CE0
.text:0000000000006CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CE0
.text:0000000000006CE0
.text:0000000000006CE0                 public hard_locale
.text:0000000000006CE0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006CE0 ; __unwind {
.text:0000000000006CE0                 sub     rsp, 8
.text:0000000000006CE4                 xor     esi, esi        ; locale
.text:0000000000006CE6                 call    _setlocale
.text:0000000000006CEB                 mov     rdx, rax
.text:0000000000006CEE                 mov     eax, 1
.text:0000000000006CF3                 test    rdx, rdx
.text:0000000000006CF6                 jz      short loc_6D15
.text:0000000000006CF8                 lea     rdi, aC         ; "C"
.text:0000000000006CFF                 mov     ecx, 2
.text:0000000000006D04                 mov     rsi, rdx
.text:0000000000006D07                 repe cmpsb
.text:0000000000006D09                 setnbe  cl
.text:0000000000006D0C                 sbb     cl, 0
.text:0000000000006D0F                 xor     eax, eax
.text:0000000000006D11                 test    cl, cl
.text:0000000000006D13                 jnz     short loc_6D20
.text:0000000000006D15
.text:0000000000006D15 loc_6D15:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000006D15                 add     rsp, 8
.text:0000000000006D19                 retn
.text:0000000000006D19 ; ---------------------------------------------------------------------------
.text:0000000000006D1A                 align 20h
.text:0000000000006D20
.text:0000000000006D20 loc_6D20:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000006D20                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000006D27                 mov     ecx, 6
.text:0000000000006D2C                 mov     rsi, rdx
.text:0000000000006D2F                 repe cmpsb
.text:0000000000006D31                 setnbe  al
.text:0000000000006D34                 sbb     al, 0
.text:0000000000006D36                 test    al, al
.text:0000000000006D38                 setnz   al
.text:0000000000006D3B                 add     rsp, 8
.text:0000000000006D3F                 retn
.text:0000000000006D3F ; } // starts at 6CE0
.text:0000000000006D3F hard_locale     endp
.text:0000000000006D3F
.text:0000000000006D40
.text:0000000000006D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D40
.text:0000000000006D40
.text:0000000000006D40                 public locale_charset
.text:0000000000006D40 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000006D40 ; __unwind {
.text:0000000000006D40                 sub     rsp, 8
.text:0000000000006D44                 mov     edi, 0Eh        ; item
.text:0000000000006D49                 call    _nl_langinfo
.text:0000000000006D4E                 test    rax, rax
.text:0000000000006D51                 jz      short loc_6D70
.text:0000000000006D53                 cmp     byte ptr [rax], 0
.text:0000000000006D56                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000006D5D                 cmovz   rax, rdx
.text:0000000000006D61                 add     rsp, 8
.text:0000000000006D65                 retn
.text:0000000000006D65 ; ---------------------------------------------------------------------------
.text:0000000000006D66                 align 10h
.text:0000000000006D70
.text:0000000000006D70 loc_6D70:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000006D70                 lea     rax, aAscii     ; "ASCII"
.text:0000000000006D77                 add     rsp, 8
.text:0000000000006D7B                 retn
.text:0000000000006D7B ; } // starts at 6D40
.text:0000000000006D7B locale_charset  endp
.text:0000000000006D7B
.text:0000000000006D7B ; ---------------------------------------------------------------------------
.text:0000000000006D7C                 align 20h
.text:0000000000006D80
.text:0000000000006D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D80
.text:0000000000006D80 ; Attributes: info_from_lumina
.text:0000000000006D80
.text:0000000000006D80 ; void _libc_csu_init(void)
.text:0000000000006D80                 public __libc_csu_init
.text:0000000000006D80 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006D80 ; __unwind {
.text:0000000000006D80                 push    r15
.text:0000000000006D82                 push    r14
.text:0000000000006D84                 mov     r15, rdx
.text:0000000000006D87                 push    r13
.text:0000000000006D89                 push    r12
.text:0000000000006D8B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006D92                 push    rbp
.text:0000000000006D93                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000006D9A                 push    rbx
.text:0000000000006D9B                 mov     r13d, edi
.text:0000000000006D9E                 mov     r14, rsi
.text:0000000000006DA1                 sub     rbp, r12
.text:0000000000006DA4                 sub     rsp, 8
.text:0000000000006DA8                 sar     rbp, 3
.text:0000000000006DAC                 call    _init_proc
.text:0000000000006DB1                 test    rbp, rbp
.text:0000000000006DB4                 jz      short loc_6DD6
.text:0000000000006DB6                 xor     ebx, ebx
.text:0000000000006DB8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006DC0
.text:0000000000006DC0 loc_6DC0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006DC0                 mov     rdx, r15
.text:0000000000006DC3                 mov     rsi, r14
.text:0000000000006DC6                 mov     edi, r13d
.text:0000000000006DC9                 call    ds:(__frame_dummy_init_array_entry - 209A10h)[r12+rbx*8]
.text:0000000000006DCD                 add     rbx, 1
.text:0000000000006DD1                 cmp     rbp, rbx
.text:0000000000006DD4                 jnz     short loc_6DC0
.text:0000000000006DD6
.text:0000000000006DD6 loc_6DD6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000006DD6                 add     rsp, 8
.text:0000000000006DDA                 pop     rbx
.text:0000000000006DDB                 pop     rbp
.text:0000000000006DDC                 pop     r12
.text:0000000000006DDE                 pop     r13
.text:0000000000006DE0                 pop     r14
.text:0000000000006DE2                 pop     r15
.text:0000000000006DE4                 retn
.text:0000000000006DE4 ; } // starts at 6D80
.text:0000000000006DE4 __libc_csu_init endp
.text:0000000000006DE4
.text:0000000000006DE4 ; ---------------------------------------------------------------------------
.text:0000000000006DE5                 align 10h
.text:0000000000006DF0
.text:0000000000006DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DF0
.text:0000000000006DF0
.text:0000000000006DF0 ; void _libc_csu_fini(void)
.text:0000000000006DF0                 public __libc_csu_fini
.text:0000000000006DF0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000006DF0 ; __unwind {
.text:0000000000006DF0                 rep retn
.text:0000000000006DF0 ; } // starts at 6DF0
.text:0000000000006DF0 __libc_csu_fini endp
.text:0000000000006DF0
.text:0000000000006DF0 ; ---------------------------------------------------------------------------
.text:0000000000006DF2                 align 20h
.text:0000000000006E00
.text:0000000000006E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E00
.text:0000000000006E00
.text:0000000000006E00 atexit          proc near               ; CODE XREF: main+6E↑p
.text:0000000000006E00 ; __unwind {
.text:0000000000006E00                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006E07                 xor     esi, esi        ; obj
.text:0000000000006E09                 jmp     ___cxa_atexit
.text:0000000000006E09 ; } // starts at 6E00
.text:0000000000006E09 atexit          endp
.text:0000000000006E09
.text:0000000000006E09 _text           ends
.text:0000000000006E09
LOAD:0000000000006E0E ; ===========================================================================
LOAD:0000000000006E0E
LOAD:0000000000006E0E ; Segment type: Pure code
LOAD:0000000000006E0E ; Segment permissions: Read/Execute
LOAD:0000000000006E0E LOAD            segment byte public 'CODE' use64
LOAD:0000000000006E0E                 assume cs:LOAD
LOAD:0000000000006E0E                 ;org 6E0Eh
LOAD:0000000000006E0E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006E0E                 align 10h
LOAD:0000000000006E0E LOAD            ends
LOAD:0000000000006E0E
.fini:0000000000006E10 ; ===========================================================================
.fini:0000000000006E10
.fini:0000000000006E10 ; Segment type: Pure code
.fini:0000000000006E10 ; Segment permissions: Read/Execute
.fini:0000000000006E10 _fini           segment dword public 'CODE' use64
.fini:0000000000006E10                 assume cs:_fini
.fini:0000000000006E10                 ;org 6E10h
.fini:0000000000006E10                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006E10
.fini:0000000000006E10 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006E10
.fini:0000000000006E10
.fini:0000000000006E10                 public _term_proc
.fini:0000000000006E10 _term_proc      proc near
.fini:0000000000006E10                 sub     rsp, 8          ; _fini
.fini:0000000000006E14                 add     rsp, 8
.fini:0000000000006E18                 retn
.fini:0000000000006E18 _term_proc      endp
.fini:0000000000006E18
.fini:0000000000006E18 _fini           ends
.fini:0000000000006E18
LOAD:0000000000006E19 ; ===========================================================================
LOAD:0000000000006E19
LOAD:0000000000006E19 ; Segment type: Pure code
LOAD:0000000000006E19 ; Segment permissions: Read/Execute
LOAD:0000000000006E19 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006E19                 assume cs:LOAD
LOAD:0000000000006E19                 ;org 6E19h
LOAD:0000000000006E19                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006E19                 align 20h
LOAD:0000000000006E19 LOAD            ends
LOAD:0000000000006E19
.rodata:0000000000006E20 ; ===========================================================================
.rodata:0000000000006E20
.rodata:0000000000006E20 ; Segment type: Pure data
.rodata:0000000000006E20 ; Segment permissions: Read
.rodata:0000000000006E20 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006E20                 assume cs:_rodata
.rodata:0000000000006E20                 ;org 6E20h
.rodata:0000000000006E20                 public _IO_stdin_used
.rodata:0000000000006E20 _IO_stdin_used  db    1
.rodata:0000000000006E21                 db    0
.rodata:0000000000006E22                 db    2
.rodata:0000000000006E23                 db    0
.rodata:0000000000006E24 ; const char s[3]
.rodata:0000000000006E24 s               db '\n',0               ; DATA XREF: print_filename+15↑o
.rodata:0000000000006E27 asc_6E27        db '\\',0               ; DATA XREF: print_filename:loc_2C58↑o
.rodata:0000000000006E2A aMd5sum         db 'md5sum',0           ; DATA XREF: main+188↑o
.rodata:0000000000006E2A                                         ; usage+1D6↑o ...
.rodata:0000000000006E31 aMd5            db 'MD5',0              ; DATA XREF: main+508↑o
.rodata:0000000000006E31                                         ; main+8F7↑o ...
.rodata:0000000000006E35 aRfc1321        db 'RFC 1321',0         ; DATA XREF: usage+1F5↑o
.rodata:0000000000006E3E asc_6E3E        db '[',0                ; DATA XREF: usage+20B↑o
.rodata:0000000000006E40 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+232↑o
.rodata:0000000000006E50 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000006E50                                         ; DATA XREF: usage+262↑o
.rodata:0000000000006E50                                         ; usage+35C↑o ...
.rodata:0000000000006E66 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+273↑o
.rodata:0000000000006E70 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+27F↑o
.rodata:0000000000006E7F aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+212↑o
.rodata:0000000000006E89 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+23E↑o
.rodata:0000000000006E93 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+256↑o
.rodata:0000000000006E9D ; const char aSOnlineHelpS[]
.rodata:0000000000006E9D aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2CA↑o
.rodata:0000000000006E9D                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006EB4 unk_6EB4        db  47h ; G             ; DATA XREF: main+181↑o
.rodata:0000000000006EB4                                         ; usage+2E6↑o ...
.rodata:0000000000006EB5                 db  4Eh ; N
.rodata:0000000000006EB6                 db  55h ; U
.rodata:0000000000006EB7                 db  20h
.rodata:0000000000006EB8 ; const char domainname[]
.rodata:0000000000006EB8 domainname      db 'coreutils',0        ; DATA XREF: main+4F↑o
.rodata:0000000000006EB8                                         ; main+5B↑o ...
.rodata:0000000000006EC2 ; const char s2[]
.rodata:0000000000006EC2 s2              db 'en_',0              ; DATA XREF: usage+30D↑o
.rodata:0000000000006EC2                                         ; usage+3CE↑o
.rodata:0000000000006EC6 ; const char aFullDocumentat[]
.rodata:0000000000006EC6 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000006EC6                                         ; DATA XREF: usage:loc_31C9↑o
.rodata:0000000000006EC6                                         ; usage:loc_3286↑o
.rodata:0000000000006EE1 ; const char dirname[]
.rodata:0000000000006EE1 dirname         db '/usr/local/share/locale',0
.rodata:0000000000006EE1                                         ; DATA XREF: main+48↑o
.rodata:0000000000006EF9 aScottMiller    db 'Scott Miller',0     ; DATA XREF: main+172↑o
.rodata:0000000000006EF9                                         ; main+B1A↑o ...
.rodata:0000000000006F06 aUlrichDrepper  db 'Ulrich Drepper',0   ; DATA XREF: main+179↑o
.rodata:0000000000006F15 aDavidMadore    db 'David Madore',0     ; DATA XREF: main+15B↑o
.rodata:0000000000006F22 ; const char shortopts[]
.rodata:0000000000006F22 shortopts       db 'bctwz',0            ; DATA XREF: main+9F↑o
.rodata:0000000000006F28 ; const char aStandardInput[]
.rodata:0000000000006F28 aStandardInput  db 'standard input',0   ; DATA XREF: main+3EA↑o
.rodata:0000000000006F28                                         ; main+E15↑o
.rodata:0000000000006F37 ; const char aSTooManyChecks[]
.rodata:0000000000006F37 aSTooManyChecks db '%s: too many checksum lines',0
.rodata:0000000000006F37                                         ; DATA XREF: main+57B↑o
.rodata:0000000000006F53 ; const char aFailedOpenOrRe[]
.rodata:0000000000006F53 aFailedOpenOrRe db 'FAILED open or read',0
.rodata:0000000000006F53                                         ; DATA XREF: main+75F↑o
.rodata:0000000000006F67 aFailed         db 'FAILED',0           ; DATA XREF: main+A32↑o
.rodata:0000000000006F6E aOk             db 'OK',0               ; DATA XREF: main+D1C↑o
.rodata:0000000000006F71 ; const char aSReadError[]
.rodata:0000000000006F71 aSReadError     db '%s: read error',0   ; DATA XREF: main+C7F↑o
.rodata:0000000000006F80 ; const char aSNoFileWasVeri[]
.rodata:0000000000006F80 aSNoFileWasVeri db '%s: no file was verified',0
.rodata:0000000000006F80                                         ; DATA XREF: main+1008↑o
.rodata:0000000000006F99 a02x            db '%02x',0             ; DATA XREF: main+BB5↑o
.rodata:0000000000006F9E asc_6F9E        db ' (',0               ; DATA XREF: main+EBB↑o
.rodata:0000000000006F9E                                         ; main+F94↑o
.rodata:0000000000006FA1 asc_6FA1        db ') = ',0             ; DATA XREF: main+EE7↑o
.rodata:0000000000006FA1                                         ; main+FBD↑o
.rodata:0000000000006FA6 aBinary         db 'binary',0           ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000006FAD aCheck          db 'check',0            ; DATA XREF: .data.rel.ro:0000000000209A40↓o
.rodata:0000000000006FB3 aIgnoreMissing  db 'ignore-missing',0   ; DATA XREF: .data.rel.ro:0000000000209A60↓o
.rodata:0000000000006FC2 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:0000000000209A80↓o
.rodata:0000000000006FC8 aStatus         db 'status',0           ; DATA XREF: .data.rel.ro:0000000000209AA0↓o
.rodata:0000000000006FCF aText           db 'text',0             ; DATA XREF: .data.rel.ro:0000000000209AC0↓o
.rodata:0000000000006FD4 aWarn           db 'warn',0             ; DATA XREF: .data.rel.ro:0000000000209AE0↓o
.rodata:0000000000006FD9 aStrict         db 'strict',0           ; DATA XREF: .data.rel.ro:0000000000209B00↓o
.rodata:0000000000006FE0 aTag            db 'tag',0              ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:0000000000006FE4 aZero           db 'zero',0             ; DATA XREF: .data.rel.ro:0000000000209B40↓o
.rodata:0000000000006FE9 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209B60↓o
.rodata:0000000000006FEE aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209B80↓o
.rodata:0000000000006FF6                 align 8
.rodata:0000000000006FF8 ; const char aTrySHelpForMor[]
.rodata:0000000000006FF8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006FF8                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000701F                 align 20h
.rodata:0000000000007020 ; const char aUsageSOptionFi[]
.rodata:0000000000007020 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah
.rodata:0000000000007020                                         ; DATA XREF: usage:loc_2EFD↑o
.rodata:0000000000007020                 db 'Print or check %s (%d-bit) checksums.',0Ah,0
.rodata:0000000000007067                 align 8
.rodata:0000000000007068 ; const char aWithNoFileOrWh[]
.rodata:0000000000007068 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+91↑o
.rodata:0000000000007068                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:00000000000070A0 ; const char aBBinaryReadInB[]
.rodata:00000000000070A0 aBBinaryReadInB db 0Ah                  ; DATA XREF: usage+B6↑o
.rodata:00000000000070A0                 db '  -b, --binary         read in binary mode',0Ah,0
.rodata:00000000000070CD                 align 10h
.rodata:00000000000070D0 ; const char aCCheckReadSSum[]
.rodata:00000000000070D0 aCCheckReadSSum db '  -c, --check          read %s sums from the FILEs and check them'
.rodata:00000000000070D0                                         ; DATA XREF: usage+D4↑o
.rodata:00000000000070D0                 db 0Ah,0
.rodata:0000000000007113                 align 8
.rodata:0000000000007118 ; const char aTagCreateABsdS[]
.rodata:0000000000007118 aTagCreateABsdS db '      --tag            create a BSD-style checksum',0Ah,0
.rodata:0000000000007118                                         ; DATA XREF: usage+104↑o
.rodata:000000000000714C                 align 10h
.rodata:0000000000007150 ; const char aTTextReadInTex[]
.rodata:0000000000007150 aTTextReadInTex db '  -t, --text           read in text mode (default)',0Ah,0
.rodata:0000000000007150                                         ; DATA XREF: usage+129↑o
.rodata:0000000000007184                 align 8
.rodata:0000000000007188 ; const char aZZeroEndEachOu[]
.rodata:0000000000007188 aZZeroEndEachOu db '  -z, --zero           end each output line with NUL, not newline'
.rodata:0000000000007188                                         ; DATA XREF: usage+14E↑o
.rodata:0000000000007188                 db ',',0Ah
.rodata:0000000000007188                 db '                       and disable file name escaping',0Ah,0
.rodata:0000000000007202                 align 8
.rodata:0000000000007208 ; const char aTheFollowingFi[]
.rodata:0000000000007208 aTheFollowingFi db 0Ah                  ; DATA XREF: usage+173↑o
.rodata:0000000000007208                 db 'The following five options are useful only when verifying checksu'
.rodata:0000000000007208                 db 'ms:',0Ah
.rodata:0000000000007208                 db '      --ignore-missing  don',27h,'t fail or report status for mis'
.rodata:0000000000007208                 db 'sing files',0Ah
.rodata:0000000000007208                 db '      --quiet          don',27h,'t print OK for each successfully'
.rodata:0000000000007208                 db ' verified file',0Ah
.rodata:0000000000007208                 db '      --status         don',27h,'t output anything, status code s'
.rodata:0000000000007208                 db 'hows success',0Ah
.rodata:0000000000007208                 db '      --strict         exit non-zero for improperly formatted che'
.rodata:0000000000007208                 db 'cksum lines',0Ah
.rodata:0000000000007208                 db '  -w, --warn           warn about improperly formatted checksum l'
.rodata:0000000000007208                 db 'ines',0Ah
.rodata:0000000000007208                 db 0Ah,0
.rodata:00000000000073BB                 align 20h
.rodata:00000000000073C0 ; const char aHelpDisplayThi[]
.rodata:00000000000073C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000073C0                                         ; DATA XREF: usage+198↑o
.rodata:00000000000073ED                 align 10h
.rodata:00000000000073F0 ; const char aVersionOutputV[]
.rodata:00000000000073F0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000073F0                                         ; DATA XREF: usage+1BD↑o
.rodata:0000000000007426                 align 8
.rodata:0000000000007428 ; const char aTheSumsAreComp[]
.rodata:0000000000007428 aTheSumsAreComp db 0Ah                  ; DATA XREF: usage+1E2↑o
.rodata:0000000000007428                 db 'The sums are computed as described in %s.  When checking, the inp'
.rodata:0000000000007428                 db 'ut',0Ah
.rodata:0000000000007428                 db 'should be a former output of this program.  The default mode is t'
.rodata:0000000000007428                 db 'o print a',0Ah
.rodata:0000000000007428                 db 'line with checksum, a space, a character indicating input mode (',27h
.rodata:0000000000007428                 db '*',27h,' for binary,',0Ah
.rodata:0000000000007428                 db 27h,' ',27h,' for text or where binary is insignificant), and name'
.rodata:0000000000007428                 db ' for each FILE.',0Ah,0
.rodata:0000000000007551                 align 8
.rodata:0000000000007558 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000007558                                         ; DATA XREF: usage+2DF↑o
.rodata:0000000000007558                                         ; usage+343↑o ...
.rodata:0000000000007580 ; const char aReportAnyTrans[]
.rodata:0000000000007580 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000007580                                         ; DATA XREF: usage+437↑o
.rodata:0000000000007580                 db 'am/>',0Ah,0
.rodata:00000000000075C7                 align 8
.rodata:00000000000075C8 ; const char aOrAvailableLoc[]
.rodata:00000000000075C8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000075C8                                         ; DATA XREF: usage:loc_320E↑o
.rodata:00000000000075FB                 align 20h
.rodata:0000000000007600 aTagDoesNotSupp db '--tag does not support --text mode',0
.rodata:0000000000007600                                         ; DATA XREF: main+1120↑o
.rodata:0000000000007623                 align 8
.rodata:0000000000007628 aTheZeroOptionI db 'the --zero option is not supported when verifying checksums',0
.rodata:0000000000007628                                         ; DATA XREF: main+274↑o
.rodata:0000000000007664                 align 8
.rodata:0000000000007668 aTheTagOptionIs db 'the --tag option is meaningless when verifying checksums',0
.rodata:0000000000007668                                         ; DATA XREF: main+2EB↑o
.rodata:00000000000076A1                 align 8
.rodata:00000000000076A8 aTheBinaryAndTe db 'the --binary and --text options are meaningless when verifying ch'
.rodata:00000000000076A8                                         ; DATA XREF: main+302↑o
.rodata:00000000000076A8                 db 'ecksums',0
.rodata:00000000000076F1                 align 8
.rodata:00000000000076F8 aTheIgnoreMissi db 'the --ignore-missing option is meaningful only when verifying che'
.rodata:00000000000076F8                                         ; DATA XREF: main+1131↑o
.rodata:00000000000076F8                 db 'cksums',0
.rodata:0000000000007740 aTheStatusOptio db 'the --status option is meaningful only when verifying checksums',0
.rodata:0000000000007740                                         ; DATA XREF: main+1105↑o
.rodata:0000000000007780 ; const char msgid[]
.rodata:0000000000007780 msgid           db 'the --warn option is meaningful only when verifying checksums',0
.rodata:0000000000007780                                         ; DATA XREF: main+2AE↑o
.rodata:00000000000077BE                 align 20h
.rodata:00000000000077C0 aTheQuietOption db 'the --quiet option is meaningful only when verifying checksums',0
.rodata:00000000000077C0                                         ; DATA XREF: main+5B8↑o
.rodata:00000000000077FF                 align 20h
.rodata:0000000000007800 aTheStrictOptio db 'the --strict option is meaningful only when verifying checksums',0
.rodata:0000000000007800                                         ; DATA XREF: main+5DC↑o
.rodata:0000000000007840 ; const char aSLuImproperlyF[]
.rodata:0000000000007840 aSLuImproperlyF db '%s: %lu: improperly formatted %s checksum line',0
.rodata:0000000000007840                                         ; DATA XREF: main+8E1↑o
.rodata:000000000000786F                 align 10h
.rodata:0000000000007870 ; const char aSNoProperlyFor[]
.rodata:0000000000007870 aSNoProperlyFor db '%s: no properly formatted %s checksum lines found',0
.rodata:0000000000007870                                         ; DATA XREF: main+D56↑o
.rodata:00000000000078A2                 align 8
.rodata:00000000000078A8 ; const char msgid2[]
.rodata:00000000000078A8 msgid2          db 'WARNING: %lu lines are improperly formatted',0
.rodata:00000000000078A8                                         ; DATA XREF: main+7DE↑o
.rodata:00000000000078D4                 align 8
.rodata:00000000000078D8 ; const char msgid1[]
.rodata:00000000000078D8 msgid1          db 'WARNING: %lu line is improperly formatted',0
.rodata:00000000000078D8                                         ; DATA XREF: main+7E5↑o
.rodata:0000000000007902                 align 8
.rodata:0000000000007908 ; const char aWarningLuListe[]
.rodata:0000000000007908 aWarningLuListe db 'WARNING: %lu listed files could not be read',0
.rodata:0000000000007908                                         ; DATA XREF: main+81A↑o
.rodata:0000000000007934                 align 8
.rodata:0000000000007938 ; const char aWarningLuListe_0[]
.rodata:0000000000007938 aWarningLuListe_0 db 'WARNING: %lu listed file could not be read',0
.rodata:0000000000007938                                         ; DATA XREF: main+821↑o
.rodata:0000000000007963                 align 8
.rodata:0000000000007968 ; const char aWarningLuCompu[]
.rodata:0000000000007968 aWarningLuCompu db 'WARNING: %lu computed checksums did NOT match',0
.rodata:0000000000007968                                         ; DATA XREF: main+856↑o
.rodata:0000000000007996                 align 8
.rodata:0000000000007998 ; const char aWarningLuCompu_0[]
.rodata:0000000000007998 aWarningLuCompu_0 db 'WARNING: %lu computed checksum did NOT match',0
.rodata:0000000000007998                                         ; DATA XREF: main+85D↑o
.rodata:00000000000079C5                 align 10h
.rodata:00000000000079D0 bin2hex_7139    db '0123456789abcdef8.31',0
.rodata:00000000000079D0                                         ; DATA XREF: main+38C↑o
.rodata:00000000000079E5 ; const char aWriteError[]
.rodata:00000000000079E5 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3363↑o
.rodata:00000000000079F1 ; const char aS_0[4]
.rodata:00000000000079F1 aS_0            db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000079F5 ; const char format[]
.rodata:00000000000079F5 format          dd offset aTheFollowingFi+11Dh
.rodata:00000000000079F5                                         ; DATA XREF: main+B4D↑o
.rodata:00000000000079F5                                         ; digest_file_isra_1+8C↑o ...
.rodata:00000000000079F5                                         ; "\n      --strict         exit non-zero "...
.rodata:00000000000079F9                 align 20h
.rodata:0000000000007A00 fillbuf         dq offset qword_80      ; DATA XREF: md5_finish_ctx+62↑o
.rodata:0000000000007A00                                         ; md5_finish_ctx+94↑r ...
.rodata:0000000000007A08                 align 40h
.rodata:0000000000007A40 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000007A40                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000007A78 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000007A80 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007A80                                         ; main+361↑o ...
.rodata:0000000000007A84 unk_7A84        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000007A85                 db  80h
.rodata:0000000000007A86                 db  98h
.rodata:0000000000007A87                 db    0
.rodata:0000000000007A88 unk_7A88        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007A89                 db  80h
.rodata:0000000000007A8A                 db  99h
.rodata:0000000000007A8B                 db    0
.rodata:0000000000007A8C unk_7A8C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000007A8D                 db    7
.rodata:0000000000007A8E                 db  65h ; e
.rodata:0000000000007A8F                 db    0
.rodata:0000000000007A90 unk_7A90        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000007A91                 db 0AFh
.rodata:0000000000007A92                 db    0
.rodata:0000000000007A93 unk_7A93        db  22h ; "             ; DATA XREF: gettext_quote:loc_4300↑o
.rodata:0000000000007A93                                         ; quotearg_buffer_restyled:loc_50BB↑o ...
.rodata:0000000000007A94                 db    0
.rodata:0000000000007A95 ; const char asc_7A95[2]
.rodata:0000000000007A95 asc_7A95        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000007A95                                         ; quotearg_buffer_restyled:loc_4483↑o ...
.rodata:0000000000007A97 ; const char asc_7A97[2]
.rodata:0000000000007A97 asc_7A97        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000007A97                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000007A99 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007AA1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209BC8↓o
.rodata:0000000000007AA7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209BD0↓o
.rodata:0000000000007AB4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209BD8↓o
.rodata:0000000000007AB4                                         ; .data.rel.ro:0000000000209BF8↓o
.rodata:0000000000007AC1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000007AC1                                         ; DATA XREF: .data.rel.ro:0000000000209BE0↓o
.rodata:0000000000007AD5 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000209BE8↓o
.rodata:0000000000007AD7 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209BF0↓o
.rodata:0000000000007ADF aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209C08↓o
.rodata:0000000000007AE7                 align 20h
.rodata:0000000000007B00 jpt_4461        dd offset loc_520A - 7B00h
.rodata:0000000000007B00                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000007B00                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000007B00                 dd offset loc_4463 - 7B00h ; jump table for switch statement
.rodata:0000000000007B00                 dd offset loc_5438 - 7B00h
.rodata:0000000000007B00                 dd offset loc_5244 - 7B00h
.rodata:0000000000007B00                 dd offset loc_5034 - 7B00h
.rodata:0000000000007B00                 dd offset loc_5090 - 7B00h
.rodata:0000000000007B00                 dd offset loc_50E5 - 7B00h
.rodata:0000000000007B00                 dd offset loc_512A - 7B00h
.rodata:0000000000007B00                 dd offset loc_5164 - 7B00h
.rodata:0000000000007B00                 dd offset loc_5164 - 7B00h
.rodata:0000000000007B00                 dd offset loc_5164 - 7B00h
.rodata:0000000000007B2C jpt_45BE        dd offset loc_47E0 - 7B2Ch, offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch
.rodata:0000000000007B2C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000007B2C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000007B2C                 dd offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch ; jump table for switch statement
.rodata:0000000000007B2C                 dd offset def_45BE - 7B2Ch, offset loc_4820 - 7B2Ch, offset loc_4728 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_46E8 - 7B2Ch, offset loc_48B0 - 7B2Ch, offset loc_48A0 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4890 - 7B2Ch, offset loc_4880 - 7B2Ch, offset def_45BE - 7B2Ch
.rodata:0000000000007B2C                 dd offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch
.rodata:0000000000007B2C                 dd offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch
.rodata:0000000000007B2C                 dd offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch
.rodata:0000000000007B2C                 dd offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch
.rodata:0000000000007B2C                 dd offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch
.rodata:0000000000007B2C                 dd offset def_45BE - 7B2Ch, offset def_45BE - 7B2Ch, offset loc_4870 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4860 - 7B2Ch, offset loc_4860 - 7B2Ch, offset loc_4830 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4860 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4860 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_46C3 - 7B2Ch, offset loc_4860 - 7B2Ch, offset loc_4860 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4860 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4860 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4860 - 7B2Ch, offset loc_4860 - 7B2Ch, offset loc_4860 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4693 - 7B2Ch, offset def_45BE - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4860 - 7B2Ch, offset loc_4738 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4860 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4860 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch, offset loc_4808 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_45C3 - 7B2Ch, offset loc_4860 - 7B2Ch, offset loc_45C3 - 7B2Ch
.rodata:0000000000007B2C                 dd offset loc_4830 - 7B2Ch
.rodata:0000000000007D28 jpt_494A        dd offset loc_49B0 - 7D28h, offset def_494A - 7D28h, offset def_494A - 7D28h
.rodata:0000000000007D28                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007D28                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007D28                 dd offset def_494A - 7D28h, offset def_494A - 7D28h, offset def_494A - 7D28h ; jump table for switch statement
.rodata:0000000000007D28                 dd offset def_494A - 7D28h, offset loc_49A0 - 7D28h, offset loc_4AF0 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4AD8 - 7D28h, offset loc_4988 - 7D28h, offset loc_4AC8 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4970 - 7D28h, offset loc_4AB0 - 7D28h, offset def_494A - 7D28h
.rodata:0000000000007D28                 dd offset def_494A - 7D28h, offset def_494A - 7D28h, offset def_494A - 7D28h
.rodata:0000000000007D28                 dd offset def_494A - 7D28h, offset def_494A - 7D28h, offset def_494A - 7D28h
.rodata:0000000000007D28                 dd offset def_494A - 7D28h, offset def_494A - 7D28h, offset def_494A - 7D28h
.rodata:0000000000007D28                 dd offset def_494A - 7D28h, offset def_494A - 7D28h, offset def_494A - 7D28h
.rodata:0000000000007D28                 dd offset def_494A - 7D28h, offset def_494A - 7D28h, offset def_494A - 7D28h
.rodata:0000000000007D28                 dd offset def_494A - 7D28h, offset def_494A - 7D28h, offset loc_4A98 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A80 - 7D28h, offset loc_4A80 - 7D28h, offset loc_4A68 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A80 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A80 - 7D28h
.rodata:0000000000007D28                 dd offset loc_46C0 - 7D28h, offset loc_4A80 - 7D28h, offset loc_4A80 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A80 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A80 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A80 - 7D28h, offset loc_4A80 - 7D28h, offset loc_4A80 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4690 - 7D28h, offset def_494A - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A80 - 7D28h, offset loc_4950 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A80 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A80 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h, offset loc_4A50 - 7D28h
.rodata:0000000000007D28                 dd offset loc_45C0 - 7D28h, offset loc_4A80 - 7D28h, offset loc_45C0 - 7D28h
.rodata:0000000000007D28                 dd offset loc_4A68 - 7D28h
.rodata:0000000000007F24                 align 20h
.rodata:0000000000007F40                 public quoting_style_vals
.rodata:0000000000007F40 quoting_style_vals db    0
.rodata:0000000000007F41                 db    0
.rodata:0000000000007F42                 db    0
.rodata:0000000000007F43                 db    0
.rodata:0000000000007F44                 db    1
.rodata:0000000000007F45                 db    0
.rodata:0000000000007F46                 db    0
.rodata:0000000000007F47                 db    0
.rodata:0000000000007F48                 db    2
.rodata:0000000000007F49                 db    0
.rodata:0000000000007F4A                 db    0
.rodata:0000000000007F4B                 db    0
.rodata:0000000000007F4C                 db    3
.rodata:0000000000007F4D                 db    0
.rodata:0000000000007F4E                 db    0
.rodata:0000000000007F4F                 db    0
.rodata:0000000000007F50                 db    4
.rodata:0000000000007F51                 db    0
.rodata:0000000000007F52                 db    0
.rodata:0000000000007F53                 db    0
.rodata:0000000000007F54                 db    5
.rodata:0000000000007F55                 db    0
.rodata:0000000000007F56                 db    0
.rodata:0000000000007F57                 db    0
.rodata:0000000000007F58                 db    6
.rodata:0000000000007F59                 db    0
.rodata:0000000000007F5A                 db    0
.rodata:0000000000007F5B                 db    0
.rodata:0000000000007F5C                 db    7
.rodata:0000000000007F5D                 db    0
.rodata:0000000000007F5E                 db    0
.rodata:0000000000007F5F                 db    0
.rodata:0000000000007F60                 db    8
.rodata:0000000000007F61                 db    0
.rodata:0000000000007F62                 db    0
.rodata:0000000000007F63                 db    0
.rodata:0000000000007F64                 db    9
.rodata:0000000000007F65                 db    0
.rodata:0000000000007F66                 db    0
.rodata:0000000000007F67                 db    0
.rodata:0000000000007F68 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000007F74 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000007F7B ; const char aC_0[]
.rodata:0000000000007F7B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_5FBC↑o
.rodata:0000000000007F7F ; const char aWrittenByS[]
.rodata:0000000000007F7F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000007F7F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000007F8F ; const char aWrittenBySAndS[]
.rodata:0000000000007F8F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000007F8F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000007FA6 ; const char aWrittenBySSAnd[]
.rodata:0000000000007FA6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000007FA6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000007FC2 ; const char aReportBugsTo[15]
.rodata:0000000000007FC2 aReportBugsTo   db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000007FC2                 db 'Report bugs to'
.rodata:0000000000007FD1 aS              db ': %s',0Ah,0         ; DATA XREF: main+772↑o
.rodata:0000000000007FD7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000007FD7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000007FED ; const char aSHomePageS[]
.rodata:0000000000007FED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000007FED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000008001                 align 8
.rodata:0000000000008008 ; const char aLicenseGplv3Gn[]
.rodata:0000000000008008 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000008008                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000008008                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000008008                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000008008                 db '.',0Ah
.rodata:0000000000008008                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000008008                 db 0Ah,0
.rodata:00000000000080D4                 align 8
.rodata:00000000000080D8 ; const char aWrittenBySSSAn[]
.rodata:00000000000080D8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000080D8                                         ; DATA XREF: version_etc_arn:loc_6210↑o
.rodata:00000000000080D8                 db 'and %s.',0Ah,0
.rodata:00000000000080F8 ; const char aWrittenBySSSSA[]
.rodata:00000000000080F8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000080F8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000080F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000811C                 align 20h
.rodata:0000000000008120 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000008120 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008120                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000008120                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000008148 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000008148 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008148                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000008148                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000008174                 align 8
.rodata:0000000000008178 ; const char aWrittenBySSSSS[]
.rodata:0000000000008178 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008178                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000008178                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008178                 db 'and %s.',0Ah,0
.rodata:00000000000081A8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000081A8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000081A8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000081A8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000081A8                 db '%s, and %s.',0Ah,0
.rodata:00000000000081DC                 align 20h
.rodata:00000000000081E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000081E0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000081E0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000081E0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000821C                 align 20h
.rodata:0000000000008220 ; const char aGeneralHelpUsi[]
.rodata:0000000000008220 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000008220                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000008220                 db 0
.rodata:0000000000008261                 align 8
.rodata:0000000000008268 jpt_6024        dd offset loc_60A6 - 8268h
.rodata:0000000000008268                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000008268                                         ; version_etc_arn+9D↑r
.rodata:0000000000008268                 dd offset loc_6138 - 8268h ; jump table for switch statement
.rodata:0000000000008268                 dd offset loc_6178 - 8268h
.rodata:0000000000008268                 dd offset loc_61C0 - 8268h
.rodata:0000000000008268                 dd offset loc_6210 - 8268h
.rodata:0000000000008268                 dd offset loc_6268 - 8268h
.rodata:0000000000008268                 dd offset loc_6298 - 8268h
.rodata:0000000000008268                 dd offset loc_6300 - 8268h
.rodata:0000000000008268                 dd offset loc_6030 - 8268h
.rodata:0000000000008268                 dd offset loc_60E0 - 8268h
.rodata:0000000000008290                 align 20h
.rodata:00000000000082A0                 public version_etc_copyright
.rodata:00000000000082A0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000082A0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000082CF ; const char aMemoryExhauste[]
.rodata:00000000000082CF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000082E0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000082E2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_6D20↑o
.rodata:00000000000082E8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000082E8                                         ; locale_charset:loc_6D70↑o
.rodata:00000000000082E8 _rodata         ends
.rodata:00000000000082E8
LOAD:00000000000082EE ; ===========================================================================
LOAD:00000000000082EE
LOAD:00000000000082EE ; Segment type: Pure code
LOAD:00000000000082EE ; Segment permissions: Read/Execute
LOAD:00000000000082EE LOAD            segment byte public 'CODE' use64
LOAD:00000000000082EE                 assume cs:LOAD
LOAD:00000000000082EE                 ;org 82EEh
LOAD:00000000000082EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000082EE                 align 10h
LOAD:00000000000082EE LOAD            ends
LOAD:00000000000082EE
.eh_frame_hdr:00000000000082F0 ; ===========================================================================
.eh_frame_hdr:00000000000082F0
.eh_frame_hdr:00000000000082F0 ; Segment type: Pure data
.eh_frame_hdr:00000000000082F0 ; Segment permissions: Read
.eh_frame_hdr:00000000000082F0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000082F0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000082F0                 ;org 82F0h
.eh_frame_hdr:00000000000082F0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000082F1                 db  1Bh
.eh_frame_hdr:00000000000082F2                 db    3
.eh_frame_hdr:00000000000082F3                 db  3Bh ; ;
.eh_frame_hdr:00000000000082F4                 db 0BCh
.eh_frame_hdr:00000000000082F5                 db    2
.eh_frame_hdr:00000000000082F6                 db    0
.eh_frame_hdr:00000000000082F7                 db    0
.eh_frame_hdr:00000000000082F8                 db  56h ; V
.eh_frame_hdr:00000000000082F9                 db    0
.eh_frame_hdr:00000000000082FA                 db    0
.eh_frame_hdr:00000000000082FB                 db    0
.eh_frame_hdr:00000000000082FC                 db 0B0h
.eh_frame_hdr:00000000000082FD                 db  92h
.eh_frame_hdr:00000000000082FE                 db 0FFh
.eh_frame_hdr:00000000000082FF                 db 0FFh
.eh_frame_hdr:0000000000008300                 db    8
.eh_frame_hdr:0000000000008301                 db    3
.eh_frame_hdr:0000000000008302                 db    0
.eh_frame_hdr:0000000000008303                 db    0
.eh_frame_hdr:0000000000008304                 db    0
.eh_frame_hdr:0000000000008305                 db  96h
.eh_frame_hdr:0000000000008306                 db 0FFh
.eh_frame_hdr:0000000000008307                 db 0FFh
.eh_frame_hdr:0000000000008308                 db  30h ; 0
.eh_frame_hdr:0000000000008309                 db    3
.eh_frame_hdr:000000000000830A                 db    0
.eh_frame_hdr:000000000000830B                 db    0
.eh_frame_hdr:000000000000830C                 db  10h
.eh_frame_hdr:000000000000830D                 db  96h
.eh_frame_hdr:000000000000830E                 db 0FFh
.eh_frame_hdr:000000000000830F                 db 0FFh
.eh_frame_hdr:0000000000008310                 db  44h ; D
.eh_frame_hdr:0000000000008311                 db    4
.eh_frame_hdr:0000000000008312                 db    0
.eh_frame_hdr:0000000000008313                 db    0
.eh_frame_hdr:0000000000008314                 db  50h ; P
.eh_frame_hdr:0000000000008315                 db 0A7h
.eh_frame_hdr:0000000000008316                 db 0FFh
.eh_frame_hdr:0000000000008317                 db 0FFh
.eh_frame_hdr:0000000000008318                 db 0D8h
.eh_frame_hdr:0000000000008319                 db    2
.eh_frame_hdr:000000000000831A                 db    0
.eh_frame_hdr:000000000000831B                 db    0
.eh_frame_hdr:000000000000831C                 db  60h ; `
.eh_frame_hdr:000000000000831D                 db 0A8h
.eh_frame_hdr:000000000000831E                 db 0FFh
.eh_frame_hdr:000000000000831F                 db 0FFh
.eh_frame_hdr:0000000000008320                 db  48h ; H
.eh_frame_hdr:0000000000008321                 db    3
.eh_frame_hdr:0000000000008322                 db    0
.eh_frame_hdr:0000000000008323                 db    0
.eh_frame_hdr:0000000000008324                 db 0E0h
.eh_frame_hdr:0000000000008325                 db 0A8h
.eh_frame_hdr:0000000000008326                 db 0FFh
.eh_frame_hdr:0000000000008327                 db 0FFh
.eh_frame_hdr:0000000000008328                 db  5Ch ; \
.eh_frame_hdr:0000000000008329                 db    3
.eh_frame_hdr:000000000000832A                 db    0
.eh_frame_hdr:000000000000832B                 db    0
.eh_frame_hdr:000000000000832C                 db  40h ; @
.eh_frame_hdr:000000000000832D                 db 0A9h
.eh_frame_hdr:000000000000832E                 db 0FFh
.eh_frame_hdr:000000000000832F                 db 0FFh
.eh_frame_hdr:0000000000008330                 db  90h
.eh_frame_hdr:0000000000008331                 db    3
.eh_frame_hdr:0000000000008332                 db    0
.eh_frame_hdr:0000000000008333                 db    0
.eh_frame_hdr:0000000000008334                 db  10h
.eh_frame_hdr:0000000000008335                 db 0AAh
.eh_frame_hdr:0000000000008336                 db 0FFh
.eh_frame_hdr:0000000000008337                 db 0FFh
.eh_frame_hdr:0000000000008338                 db 0C8h
.eh_frame_hdr:0000000000008339                 db    3
.eh_frame_hdr:000000000000833A                 db    0
.eh_frame_hdr:000000000000833B                 db    0
.eh_frame_hdr:000000000000833C                 db 0B0h
.eh_frame_hdr:000000000000833D                 db 0ABh
.eh_frame_hdr:000000000000833E                 db 0FFh
.eh_frame_hdr:000000000000833F                 db 0FFh
.eh_frame_hdr:0000000000008340                 db  18h
.eh_frame_hdr:0000000000008341                 db    4
.eh_frame_hdr:0000000000008342                 db    0
.eh_frame_hdr:0000000000008343                 db    0
.eh_frame_hdr:0000000000008344                 db  10h
.eh_frame_hdr:0000000000008345                 db 0B0h
.eh_frame_hdr:0000000000008346                 db 0FFh
.eh_frame_hdr:0000000000008347                 db 0FFh
.eh_frame_hdr:0000000000008348                 db 0A0h
.eh_frame_hdr:0000000000008349                 db    4
.eh_frame_hdr:000000000000834A                 db    0
.eh_frame_hdr:000000000000834B                 db    0
.eh_frame_hdr:000000000000834C                 db  20h
.eh_frame_hdr:000000000000834D                 db 0B0h
.eh_frame_hdr:000000000000834E                 db 0FFh
.eh_frame_hdr:000000000000834F                 db 0FFh
.eh_frame_hdr:0000000000008350                 db 0B4h
.eh_frame_hdr:0000000000008351                 db    4
.eh_frame_hdr:0000000000008352                 db    0
.eh_frame_hdr:0000000000008353                 db    0
.eh_frame_hdr:0000000000008354                 db  30h ; 0
.eh_frame_hdr:0000000000008355                 db 0B0h
.eh_frame_hdr:0000000000008356                 db 0FFh
.eh_frame_hdr:0000000000008357                 db 0FFh
.eh_frame_hdr:0000000000008358                 db 0C8h
.eh_frame_hdr:0000000000008359                 db    4
.eh_frame_hdr:000000000000835A                 db    0
.eh_frame_hdr:000000000000835B                 db    0
.eh_frame_hdr:000000000000835C                 db 0E0h
.eh_frame_hdr:000000000000835D                 db 0B0h
.eh_frame_hdr:000000000000835E                 db 0FFh
.eh_frame_hdr:000000000000835F                 db 0FFh
.eh_frame_hdr:0000000000008360                 db 0F8h
.eh_frame_hdr:0000000000008361                 db    4
.eh_frame_hdr:0000000000008362                 db    0
.eh_frame_hdr:0000000000008363                 db    0
.eh_frame_hdr:0000000000008364                 db  10h
.eh_frame_hdr:0000000000008365                 db 0B1h
.eh_frame_hdr:0000000000008366                 db 0FFh
.eh_frame_hdr:0000000000008367                 db 0FFh
.eh_frame_hdr:0000000000008368                 db  0Ch
.eh_frame_hdr:0000000000008369                 db    5
.eh_frame_hdr:000000000000836A                 db    0
.eh_frame_hdr:000000000000836B                 db    0
.eh_frame_hdr:000000000000836C                 db  30h ; 0
.eh_frame_hdr:000000000000836D                 db 0B1h
.eh_frame_hdr:000000000000836E                 db 0FFh
.eh_frame_hdr:000000000000836F                 db 0FFh
.eh_frame_hdr:0000000000008370                 db  20h
.eh_frame_hdr:0000000000008371                 db    5
.eh_frame_hdr:0000000000008372                 db    0
.eh_frame_hdr:0000000000008373                 db    0
.eh_frame_hdr:0000000000008374                 db 0A0h
.eh_frame_hdr:0000000000008375                 db 0B8h
.eh_frame_hdr:0000000000008376                 db 0FFh
.eh_frame_hdr:0000000000008377                 db 0FFh
.eh_frame_hdr:0000000000008378                 db  64h ; d
.eh_frame_hdr:0000000000008379                 db    5
.eh_frame_hdr:000000000000837A                 db    0
.eh_frame_hdr:000000000000837B                 db    0
.eh_frame_hdr:000000000000837C                 db 0C0h
.eh_frame_hdr:000000000000837D                 db 0B9h
.eh_frame_hdr:000000000000837E                 db 0FFh
.eh_frame_hdr:000000000000837F                 db 0FFh
.eh_frame_hdr:0000000000008380                 db  8Ch
.eh_frame_hdr:0000000000008381                 db    5
.eh_frame_hdr:0000000000008382                 db    0
.eh_frame_hdr:0000000000008383                 db    0
.eh_frame_hdr:0000000000008384                 db 0A0h
.eh_frame_hdr:0000000000008385                 db 0BCh
.eh_frame_hdr:0000000000008386                 db 0FFh
.eh_frame_hdr:0000000000008387                 db 0FFh
.eh_frame_hdr:0000000000008388                 db 0F0h
.eh_frame_hdr:0000000000008389                 db    5
.eh_frame_hdr:000000000000838A                 db    0
.eh_frame_hdr:000000000000838B                 db    0
.eh_frame_hdr:000000000000838C                 db  30h ; 0
.eh_frame_hdr:000000000000838D                 db 0BDh
.eh_frame_hdr:000000000000838E                 db 0FFh
.eh_frame_hdr:000000000000838F                 db 0FFh
.eh_frame_hdr:0000000000008390                 db  1Ch
.eh_frame_hdr:0000000000008391                 db    6
.eh_frame_hdr:0000000000008392                 db    0
.eh_frame_hdr:0000000000008393                 db    0
.eh_frame_hdr:0000000000008394                 db  70h ; p
.eh_frame_hdr:0000000000008395                 db 0BEh
.eh_frame_hdr:0000000000008396                 db 0FFh
.eh_frame_hdr:0000000000008397                 db 0FFh
.eh_frame_hdr:0000000000008398                 db  68h ; h
.eh_frame_hdr:0000000000008399                 db    6
.eh_frame_hdr:000000000000839A                 db    0
.eh_frame_hdr:000000000000839B                 db    0
.eh_frame_hdr:000000000000839C                 db  80h
.eh_frame_hdr:000000000000839D                 db 0BEh
.eh_frame_hdr:000000000000839E                 db 0FFh
.eh_frame_hdr:000000000000839F                 db 0FFh
.eh_frame_hdr:00000000000083A0                 db  7Ch ; |
.eh_frame_hdr:00000000000083A1                 db    6
.eh_frame_hdr:00000000000083A2                 db    0
.eh_frame_hdr:00000000000083A3                 db    0
.eh_frame_hdr:00000000000083A4                 db 0B0h
.eh_frame_hdr:00000000000083A5                 db 0BEh
.eh_frame_hdr:00000000000083A6                 db 0FFh
.eh_frame_hdr:00000000000083A7                 db 0FFh
.eh_frame_hdr:00000000000083A8                 db  98h
.eh_frame_hdr:00000000000083A9                 db    6
.eh_frame_hdr:00000000000083AA                 db    0
.eh_frame_hdr:00000000000083AB                 db    0
.eh_frame_hdr:00000000000083AC                 db  50h ; P
.eh_frame_hdr:00000000000083AD                 db 0BFh
.eh_frame_hdr:00000000000083AE                 db 0FFh
.eh_frame_hdr:00000000000083AF                 db 0FFh
.eh_frame_hdr:00000000000083B0                 db 0C8h
.eh_frame_hdr:00000000000083B1                 db    6
.eh_frame_hdr:00000000000083B2                 db    0
.eh_frame_hdr:00000000000083B3                 db    0
.eh_frame_hdr:00000000000083B4                 db 0F0h
.eh_frame_hdr:00000000000083B5                 db 0BFh
.eh_frame_hdr:00000000000083B6                 db 0FFh
.eh_frame_hdr:00000000000083B7                 db 0FFh
.eh_frame_hdr:00000000000083B8                 db 0E8h
.eh_frame_hdr:00000000000083B9                 db    6
.eh_frame_hdr:00000000000083BA                 db    0
.eh_frame_hdr:00000000000083BB                 db    0
.eh_frame_hdr:00000000000083BC                 db 0E0h
.eh_frame_hdr:00000000000083BD                 db 0C0h
.eh_frame_hdr:00000000000083BE                 db 0FFh
.eh_frame_hdr:00000000000083BF                 db 0FFh
.eh_frame_hdr:00000000000083C0                 db  2Ch ; ,
.eh_frame_hdr:00000000000083C1                 db    7
.eh_frame_hdr:00000000000083C2                 db    0
.eh_frame_hdr:00000000000083C3                 db    0
.eh_frame_hdr:00000000000083C4                 db  20h
.eh_frame_hdr:00000000000083C5                 db 0D3h
.eh_frame_hdr:00000000000083C6                 db 0FFh
.eh_frame_hdr:00000000000083C7                 db 0FFh
.eh_frame_hdr:00000000000083C8                 db 0A4h
.eh_frame_hdr:00000000000083C9                 db    7
.eh_frame_hdr:00000000000083CA                 db    0
.eh_frame_hdr:00000000000083CB                 db    0
.eh_frame_hdr:00000000000083CC                 db 0D0h
.eh_frame_hdr:00000000000083CD                 db 0D4h
.eh_frame_hdr:00000000000083CE                 db 0FFh
.eh_frame_hdr:00000000000083CF                 db 0FFh
.eh_frame_hdr:00000000000083D0                 db  10h
.eh_frame_hdr:00000000000083D1                 db    8
.eh_frame_hdr:00000000000083D2                 db    0
.eh_frame_hdr:00000000000083D3                 db    0
.eh_frame_hdr:00000000000083D4                 db  10h
.eh_frame_hdr:00000000000083D5                 db 0D5h
.eh_frame_hdr:00000000000083D6                 db 0FFh
.eh_frame_hdr:00000000000083D7                 db 0FFh
.eh_frame_hdr:00000000000083D8                 db  3Ch ; <
.eh_frame_hdr:00000000000083D9                 db    8
.eh_frame_hdr:00000000000083DA                 db    0
.eh_frame_hdr:00000000000083DB                 db    0
.eh_frame_hdr:00000000000083DC                 db  30h ; 0
.eh_frame_hdr:00000000000083DD                 db 0D5h
.eh_frame_hdr:00000000000083DE                 db 0FFh
.eh_frame_hdr:00000000000083DF                 db 0FFh
.eh_frame_hdr:00000000000083E0                 db  50h ; P
.eh_frame_hdr:00000000000083E1                 db    8
.eh_frame_hdr:00000000000083E2                 db    0
.eh_frame_hdr:00000000000083E3                 db    0
.eh_frame_hdr:00000000000083E4                 db  50h ; P
.eh_frame_hdr:00000000000083E5                 db 0D5h
.eh_frame_hdr:00000000000083E6                 db 0FFh
.eh_frame_hdr:00000000000083E7                 db 0FFh
.eh_frame_hdr:00000000000083E8                 db  64h ; d
.eh_frame_hdr:00000000000083E9                 db    8
.eh_frame_hdr:00000000000083EA                 db    0
.eh_frame_hdr:00000000000083EB                 db    0
.eh_frame_hdr:00000000000083EC                 db  90h
.eh_frame_hdr:00000000000083ED                 db 0D5h
.eh_frame_hdr:00000000000083EE                 db 0FFh
.eh_frame_hdr:00000000000083EF                 db 0FFh
.eh_frame_hdr:00000000000083F0                 db  78h ; x
.eh_frame_hdr:00000000000083F1                 db    8
.eh_frame_hdr:00000000000083F2                 db    0
.eh_frame_hdr:00000000000083F3                 db    0
.eh_frame_hdr:00000000000083F4                 db 0B0h
.eh_frame_hdr:00000000000083F5                 db 0D5h
.eh_frame_hdr:00000000000083F6                 db 0FFh
.eh_frame_hdr:00000000000083F7                 db 0FFh
.eh_frame_hdr:00000000000083F8                 db  8Ch
.eh_frame_hdr:00000000000083F9                 db    8
.eh_frame_hdr:00000000000083FA                 db    0
.eh_frame_hdr:00000000000083FB                 db    0
.eh_frame_hdr:00000000000083FC                 db 0E0h
.eh_frame_hdr:00000000000083FD                 db 0D5h
.eh_frame_hdr:00000000000083FE                 db 0FFh
.eh_frame_hdr:00000000000083FF                 db 0FFh
.eh_frame_hdr:0000000000008400                 db 0A0h
.eh_frame_hdr:0000000000008401                 db    8
.eh_frame_hdr:0000000000008402                 db    0
.eh_frame_hdr:0000000000008403                 db    0
.eh_frame_hdr:0000000000008404                 db  60h ; `
.eh_frame_hdr:0000000000008405                 db 0D6h
.eh_frame_hdr:0000000000008406                 db 0FFh
.eh_frame_hdr:0000000000008407                 db 0FFh
.eh_frame_hdr:0000000000008408                 db 0F4h
.eh_frame_hdr:0000000000008409                 db    8
.eh_frame_hdr:000000000000840A                 db    0
.eh_frame_hdr:000000000000840B                 db    0
.eh_frame_hdr:000000000000840C                 db  50h ; P
.eh_frame_hdr:000000000000840D                 db 0D7h
.eh_frame_hdr:000000000000840E                 db 0FFh
.eh_frame_hdr:000000000000840F                 db 0FFh
.eh_frame_hdr:0000000000008410                 db  60h ; `
.eh_frame_hdr:0000000000008411                 db    9
.eh_frame_hdr:0000000000008412                 db    0
.eh_frame_hdr:0000000000008413                 db    0
.eh_frame_hdr:0000000000008414                 db  60h ; `
.eh_frame_hdr:0000000000008415                 db 0D7h
.eh_frame_hdr:0000000000008416                 db 0FFh
.eh_frame_hdr:0000000000008417                 db 0FFh
.eh_frame_hdr:0000000000008418                 db  74h ; t
.eh_frame_hdr:0000000000008419                 db    9
.eh_frame_hdr:000000000000841A                 db    0
.eh_frame_hdr:000000000000841B                 db    0
.eh_frame_hdr:000000000000841C                 db    0
.eh_frame_hdr:000000000000841D                 db 0D8h
.eh_frame_hdr:000000000000841E                 db 0FFh
.eh_frame_hdr:000000000000841F                 db 0FFh
.eh_frame_hdr:0000000000008420                 db 0A0h
.eh_frame_hdr:0000000000008421                 db    9
.eh_frame_hdr:0000000000008422                 db    0
.eh_frame_hdr:0000000000008423                 db    0
.eh_frame_hdr:0000000000008424                 db  20h
.eh_frame_hdr:0000000000008425                 db 0D8h
.eh_frame_hdr:0000000000008426                 db 0FFh
.eh_frame_hdr:0000000000008427                 db 0FFh
.eh_frame_hdr:0000000000008428                 db 0B4h
.eh_frame_hdr:0000000000008429                 db    9
.eh_frame_hdr:000000000000842A                 db    0
.eh_frame_hdr:000000000000842B                 db    0
.eh_frame_hdr:000000000000842C                 db  30h ; 0
.eh_frame_hdr:000000000000842D                 db 0D8h
.eh_frame_hdr:000000000000842E                 db 0FFh
.eh_frame_hdr:000000000000842F                 db 0FFh
.eh_frame_hdr:0000000000008430                 db 0C8h
.eh_frame_hdr:0000000000008431                 db    9
.eh_frame_hdr:0000000000008432                 db    0
.eh_frame_hdr:0000000000008433                 db    0
.eh_frame_hdr:0000000000008434                 db  50h ; P
.eh_frame_hdr:0000000000008435                 db 0D8h
.eh_frame_hdr:0000000000008436                 db 0FFh
.eh_frame_hdr:0000000000008437                 db 0FFh
.eh_frame_hdr:0000000000008438                 db 0DCh
.eh_frame_hdr:0000000000008439                 db    9
.eh_frame_hdr:000000000000843A                 db    0
.eh_frame_hdr:000000000000843B                 db    0
.eh_frame_hdr:000000000000843C                 db  70h ; p
.eh_frame_hdr:000000000000843D                 db 0D8h
.eh_frame_hdr:000000000000843E                 db 0FFh
.eh_frame_hdr:000000000000843F                 db 0FFh
.eh_frame_hdr:0000000000008440                 db 0F0h
.eh_frame_hdr:0000000000008441                 db    9
.eh_frame_hdr:0000000000008442                 db    0
.eh_frame_hdr:0000000000008443                 db    0
.eh_frame_hdr:0000000000008444                 db    0
.eh_frame_hdr:0000000000008445                 db 0D9h
.eh_frame_hdr:0000000000008446                 db 0FFh
.eh_frame_hdr:0000000000008447                 db 0FFh
.eh_frame_hdr:0000000000008448                 db  0Ch
.eh_frame_hdr:0000000000008449                 db  0Ah
.eh_frame_hdr:000000000000844A                 db    0
.eh_frame_hdr:000000000000844B                 db    0
.eh_frame_hdr:000000000000844C                 db  90h
.eh_frame_hdr:000000000000844D                 db 0D9h
.eh_frame_hdr:000000000000844E                 db 0FFh
.eh_frame_hdr:000000000000844F                 db 0FFh
.eh_frame_hdr:0000000000008450                 db  28h ; (
.eh_frame_hdr:0000000000008451                 db  0Ah
.eh_frame_hdr:0000000000008452                 db    0
.eh_frame_hdr:0000000000008453                 db    0
.eh_frame_hdr:0000000000008454                 db 0A0h
.eh_frame_hdr:0000000000008455                 db 0D9h
.eh_frame_hdr:0000000000008456                 db 0FFh
.eh_frame_hdr:0000000000008457                 db 0FFh
.eh_frame_hdr:0000000000008458                 db  3Ch ; <
.eh_frame_hdr:0000000000008459                 db  0Ah
.eh_frame_hdr:000000000000845A                 db    0
.eh_frame_hdr:000000000000845B                 db    0
.eh_frame_hdr:000000000000845C                 db 0B0h
.eh_frame_hdr:000000000000845D                 db 0D9h
.eh_frame_hdr:000000000000845E                 db 0FFh
.eh_frame_hdr:000000000000845F                 db 0FFh
.eh_frame_hdr:0000000000008460                 db  50h ; P
.eh_frame_hdr:0000000000008461                 db  0Ah
.eh_frame_hdr:0000000000008462                 db    0
.eh_frame_hdr:0000000000008463                 db    0
.eh_frame_hdr:0000000000008464                 db  50h ; P
.eh_frame_hdr:0000000000008465                 db 0DAh
.eh_frame_hdr:0000000000008466                 db 0FFh
.eh_frame_hdr:0000000000008467                 db 0FFh
.eh_frame_hdr:0000000000008468                 db  6Ch ; l
.eh_frame_hdr:0000000000008469                 db  0Ah
.eh_frame_hdr:000000000000846A                 db    0
.eh_frame_hdr:000000000000846B                 db    0
.eh_frame_hdr:000000000000846C                 db  60h ; `
.eh_frame_hdr:000000000000846D                 db 0DAh
.eh_frame_hdr:000000000000846E                 db 0FFh
.eh_frame_hdr:000000000000846F                 db 0FFh
.eh_frame_hdr:0000000000008470                 db  80h
.eh_frame_hdr:0000000000008471                 db  0Ah
.eh_frame_hdr:0000000000008472                 db    0
.eh_frame_hdr:0000000000008473                 db    0
.eh_frame_hdr:0000000000008474                 db  80h
.eh_frame_hdr:0000000000008475                 db 0DAh
.eh_frame_hdr:0000000000008476                 db 0FFh
.eh_frame_hdr:0000000000008477                 db 0FFh
.eh_frame_hdr:0000000000008478                 db  94h
.eh_frame_hdr:0000000000008479                 db  0Ah
.eh_frame_hdr:000000000000847A                 db    0
.eh_frame_hdr:000000000000847B                 db    0
.eh_frame_hdr:000000000000847C                 db  90h
.eh_frame_hdr:000000000000847D                 db 0DAh
.eh_frame_hdr:000000000000847E                 db 0FFh
.eh_frame_hdr:000000000000847F                 db 0FFh
.eh_frame_hdr:0000000000008480                 db 0A8h
.eh_frame_hdr:0000000000008481                 db  0Ah
.eh_frame_hdr:0000000000008482                 db    0
.eh_frame_hdr:0000000000008483                 db    0
.eh_frame_hdr:0000000000008484                 db  20h
.eh_frame_hdr:0000000000008485                 db 0DBh
.eh_frame_hdr:0000000000008486                 db 0FFh
.eh_frame_hdr:0000000000008487                 db 0FFh
.eh_frame_hdr:0000000000008488                 db 0C4h
.eh_frame_hdr:0000000000008489                 db  0Ah
.eh_frame_hdr:000000000000848A                 db    0
.eh_frame_hdr:000000000000848B                 db    0
.eh_frame_hdr:000000000000848C                 db 0C0h
.eh_frame_hdr:000000000000848D                 db 0DBh
.eh_frame_hdr:000000000000848E                 db 0FFh
.eh_frame_hdr:000000000000848F                 db 0FFh
.eh_frame_hdr:0000000000008490                 db 0E0h
.eh_frame_hdr:0000000000008491                 db  0Ah
.eh_frame_hdr:0000000000008492                 db    0
.eh_frame_hdr:0000000000008493                 db    0
.eh_frame_hdr:0000000000008494                 db 0D0h
.eh_frame_hdr:0000000000008495                 db 0DBh
.eh_frame_hdr:0000000000008496                 db 0FFh
.eh_frame_hdr:0000000000008497                 db 0FFh
.eh_frame_hdr:0000000000008498                 db 0F4h
.eh_frame_hdr:0000000000008499                 db  0Ah
.eh_frame_hdr:000000000000849A                 db    0
.eh_frame_hdr:000000000000849B                 db    0
.eh_frame_hdr:000000000000849C                 db 0F0h
.eh_frame_hdr:000000000000849D                 db 0DBh
.eh_frame_hdr:000000000000849E                 db 0FFh
.eh_frame_hdr:000000000000849F                 db 0FFh
.eh_frame_hdr:00000000000084A0                 db    8
.eh_frame_hdr:00000000000084A1                 db  0Bh
.eh_frame_hdr:00000000000084A2                 db    0
.eh_frame_hdr:00000000000084A3                 db    0
.eh_frame_hdr:00000000000084A4                 db  10h
.eh_frame_hdr:00000000000084A5                 db 0DCh
.eh_frame_hdr:00000000000084A6                 db 0FFh
.eh_frame_hdr:00000000000084A7                 db 0FFh
.eh_frame_hdr:00000000000084A8                 db  1Ch
.eh_frame_hdr:00000000000084A9                 db  0Bh
.eh_frame_hdr:00000000000084AA                 db    0
.eh_frame_hdr:00000000000084AB                 db    0
.eh_frame_hdr:00000000000084AC                 db  20h
.eh_frame_hdr:00000000000084AD                 db 0DCh
.eh_frame_hdr:00000000000084AE                 db 0FFh
.eh_frame_hdr:00000000000084AF                 db 0FFh
.eh_frame_hdr:00000000000084B0                 db  30h ; 0
.eh_frame_hdr:00000000000084B1                 db  0Bh
.eh_frame_hdr:00000000000084B2                 db    0
.eh_frame_hdr:00000000000084B3                 db    0
.eh_frame_hdr:00000000000084B4                 db  40h ; @
.eh_frame_hdr:00000000000084B5                 db 0DCh
.eh_frame_hdr:00000000000084B6                 db 0FFh
.eh_frame_hdr:00000000000084B7                 db 0FFh
.eh_frame_hdr:00000000000084B8                 db  44h ; D
.eh_frame_hdr:00000000000084B9                 db  0Bh
.eh_frame_hdr:00000000000084BA                 db    0
.eh_frame_hdr:00000000000084BB                 db    0
.eh_frame_hdr:00000000000084BC                 db  60h ; `
.eh_frame_hdr:00000000000084BD                 db 0DCh
.eh_frame_hdr:00000000000084BE                 db 0FFh
.eh_frame_hdr:00000000000084BF                 db 0FFh
.eh_frame_hdr:00000000000084C0                 db  58h ; X
.eh_frame_hdr:00000000000084C1                 db  0Bh
.eh_frame_hdr:00000000000084C2                 db    0
.eh_frame_hdr:00000000000084C3                 db    0
.eh_frame_hdr:00000000000084C4                 db  80h
.eh_frame_hdr:00000000000084C5                 db 0DCh
.eh_frame_hdr:00000000000084C6                 db 0FFh
.eh_frame_hdr:00000000000084C7                 db 0FFh
.eh_frame_hdr:00000000000084C8                 db  70h ; p
.eh_frame_hdr:00000000000084C9                 db  0Bh
.eh_frame_hdr:00000000000084CA                 db    0
.eh_frame_hdr:00000000000084CB                 db    0
.eh_frame_hdr:00000000000084CC                 db  90h
.eh_frame_hdr:00000000000084CD                 db 0DCh
.eh_frame_hdr:00000000000084CE                 db 0FFh
.eh_frame_hdr:00000000000084CF                 db 0FFh
.eh_frame_hdr:00000000000084D0                 db  88h
.eh_frame_hdr:00000000000084D1                 db  0Bh
.eh_frame_hdr:00000000000084D2                 db    0
.eh_frame_hdr:00000000000084D3                 db    0
.eh_frame_hdr:00000000000084D4                 db 0B0h
.eh_frame_hdr:00000000000084D5                 db 0E0h
.eh_frame_hdr:00000000000084D6                 db 0FFh
.eh_frame_hdr:00000000000084D7                 db 0FFh
.eh_frame_hdr:00000000000084D8                 db  9Ch
.eh_frame_hdr:00000000000084D9                 db  0Ch
.eh_frame_hdr:00000000000084DA                 db    0
.eh_frame_hdr:00000000000084DB                 db    0
.eh_frame_hdr:00000000000084DC                 db 0D0h
.eh_frame_hdr:00000000000084DD                 db 0E0h
.eh_frame_hdr:00000000000084DE                 db 0FFh
.eh_frame_hdr:00000000000084DF                 db 0FFh
.eh_frame_hdr:00000000000084E0                 db 0B0h
.eh_frame_hdr:00000000000084E1                 db  0Ch
.eh_frame_hdr:00000000000084E2                 db    0
.eh_frame_hdr:00000000000084E3                 db    0
.eh_frame_hdr:00000000000084E4                 db  50h ; P
.eh_frame_hdr:00000000000084E5                 db 0E1h
.eh_frame_hdr:00000000000084E6                 db 0FFh
.eh_frame_hdr:00000000000084E7                 db 0FFh
.eh_frame_hdr:00000000000084E8                 db 0CCh
.eh_frame_hdr:00000000000084E9                 db  0Ch
.eh_frame_hdr:00000000000084EA                 db    0
.eh_frame_hdr:00000000000084EB                 db    0
.eh_frame_hdr:00000000000084EC                 db  30h ; 0
.eh_frame_hdr:00000000000084ED                 db 0E2h
.eh_frame_hdr:00000000000084EE                 db 0FFh
.eh_frame_hdr:00000000000084EF                 db 0FFh
.eh_frame_hdr:00000000000084F0                 db 0F8h
.eh_frame_hdr:00000000000084F1                 db  0Ch
.eh_frame_hdr:00000000000084F2                 db    0
.eh_frame_hdr:00000000000084F3                 db    0
.eh_frame_hdr:00000000000084F4                 db 0B0h
.eh_frame_hdr:00000000000084F5                 db 0E2h
.eh_frame_hdr:00000000000084F6                 db 0FFh
.eh_frame_hdr:00000000000084F7                 db 0FFh
.eh_frame_hdr:00000000000084F8                 db  18h
.eh_frame_hdr:00000000000084F9                 db  0Dh
.eh_frame_hdr:00000000000084FA                 db    0
.eh_frame_hdr:00000000000084FB                 db    0
.eh_frame_hdr:00000000000084FC                 db 0D0h
.eh_frame_hdr:00000000000084FD                 db 0E2h
.eh_frame_hdr:00000000000084FE                 db 0FFh
.eh_frame_hdr:00000000000084FF                 db 0FFh
.eh_frame_hdr:0000000000008500                 db  34h ; 4
.eh_frame_hdr:0000000000008501                 db  0Dh
.eh_frame_hdr:0000000000008502                 db    0
.eh_frame_hdr:0000000000008503                 db    0
.eh_frame_hdr:0000000000008504                 db    0
.eh_frame_hdr:0000000000008505                 db 0E3h
.eh_frame_hdr:0000000000008506                 db 0FFh
.eh_frame_hdr:0000000000008507                 db 0FFh
.eh_frame_hdr:0000000000008508                 db  48h ; H
.eh_frame_hdr:0000000000008509                 db  0Dh
.eh_frame_hdr:000000000000850A                 db    0
.eh_frame_hdr:000000000000850B                 db    0
.eh_frame_hdr:000000000000850C                 db  10h
.eh_frame_hdr:000000000000850D                 db 0E3h
.eh_frame_hdr:000000000000850E                 db 0FFh
.eh_frame_hdr:000000000000850F                 db 0FFh
.eh_frame_hdr:0000000000008510                 db  5Ch ; \
.eh_frame_hdr:0000000000008511                 db  0Dh
.eh_frame_hdr:0000000000008512                 db    0
.eh_frame_hdr:0000000000008513                 db    0
.eh_frame_hdr:0000000000008514                 db  50h ; P
.eh_frame_hdr:0000000000008515                 db 0E3h
.eh_frame_hdr:0000000000008516                 db 0FFh
.eh_frame_hdr:0000000000008517                 db 0FFh
.eh_frame_hdr:0000000000008518                 db  80h
.eh_frame_hdr:0000000000008519                 db  0Dh
.eh_frame_hdr:000000000000851A                 db    0
.eh_frame_hdr:000000000000851B                 db    0
.eh_frame_hdr:000000000000851C                 db  80h
.eh_frame_hdr:000000000000851D                 db 0E3h
.eh_frame_hdr:000000000000851E                 db 0FFh
.eh_frame_hdr:000000000000851F                 db 0FFh
.eh_frame_hdr:0000000000008520                 db  94h
.eh_frame_hdr:0000000000008521                 db  0Dh
.eh_frame_hdr:0000000000008522                 db    0
.eh_frame_hdr:0000000000008523                 db    0
.eh_frame_hdr:0000000000008524                 db  10h
.eh_frame_hdr:0000000000008525                 db 0E4h
.eh_frame_hdr:0000000000008526                 db 0FFh
.eh_frame_hdr:0000000000008527                 db 0FFh
.eh_frame_hdr:0000000000008528                 db 0ACh
.eh_frame_hdr:0000000000008529                 db  0Dh
.eh_frame_hdr:000000000000852A                 db    0
.eh_frame_hdr:000000000000852B                 db    0
.eh_frame_hdr:000000000000852C                 db  60h ; `
.eh_frame_hdr:000000000000852D                 db 0E4h
.eh_frame_hdr:000000000000852E                 db 0FFh
.eh_frame_hdr:000000000000852F                 db 0FFh
.eh_frame_hdr:0000000000008530                 db 0C4h
.eh_frame_hdr:0000000000008531                 db  0Dh
.eh_frame_hdr:0000000000008532                 db    0
.eh_frame_hdr:0000000000008533                 db    0
.eh_frame_hdr:0000000000008534                 db  80h
.eh_frame_hdr:0000000000008535                 db 0E4h
.eh_frame_hdr:0000000000008536                 db 0FFh
.eh_frame_hdr:0000000000008537                 db 0FFh
.eh_frame_hdr:0000000000008538                 db 0E0h
.eh_frame_hdr:0000000000008539                 db  0Dh
.eh_frame_hdr:000000000000853A                 db    0
.eh_frame_hdr:000000000000853B                 db    0
.eh_frame_hdr:000000000000853C                 db 0B0h
.eh_frame_hdr:000000000000853D                 db 0E4h
.eh_frame_hdr:000000000000853E                 db 0FFh
.eh_frame_hdr:000000000000853F                 db 0FFh
.eh_frame_hdr:0000000000008540                 db 0FCh
.eh_frame_hdr:0000000000008541                 db  0Dh
.eh_frame_hdr:0000000000008542                 db    0
.eh_frame_hdr:0000000000008543                 db    0
.eh_frame_hdr:0000000000008544                 db 0E0h
.eh_frame_hdr:0000000000008545                 db 0E4h
.eh_frame_hdr:0000000000008546                 db 0FFh
.eh_frame_hdr:0000000000008547                 db 0FFh
.eh_frame_hdr:0000000000008548                 db  24h ; $
.eh_frame_hdr:0000000000008549                 db  0Eh
.eh_frame_hdr:000000000000854A                 db    0
.eh_frame_hdr:000000000000854B                 db    0
.eh_frame_hdr:000000000000854C                 db    0
.eh_frame_hdr:000000000000854D                 db 0E5h
.eh_frame_hdr:000000000000854E                 db 0FFh
.eh_frame_hdr:000000000000854F                 db 0FFh
.eh_frame_hdr:0000000000008550                 db  40h ; @
.eh_frame_hdr:0000000000008551                 db  0Eh
.eh_frame_hdr:0000000000008552                 db    0
.eh_frame_hdr:0000000000008553                 db    0
.eh_frame_hdr:0000000000008554                 db  40h ; @
.eh_frame_hdr:0000000000008555                 db 0E5h
.eh_frame_hdr:0000000000008556                 db 0FFh
.eh_frame_hdr:0000000000008557                 db 0FFh
.eh_frame_hdr:0000000000008558                 db  58h ; X
.eh_frame_hdr:0000000000008559                 db  0Eh
.eh_frame_hdr:000000000000855A                 db    0
.eh_frame_hdr:000000000000855B                 db    0
.eh_frame_hdr:000000000000855C                 db 0C0h
.eh_frame_hdr:000000000000855D                 db 0E5h
.eh_frame_hdr:000000000000855E                 db 0FFh
.eh_frame_hdr:000000000000855F                 db 0FFh
.eh_frame_hdr:0000000000008560                 db  90h
.eh_frame_hdr:0000000000008561                 db  0Eh
.eh_frame_hdr:0000000000008562                 db    0
.eh_frame_hdr:0000000000008563                 db    0
.eh_frame_hdr:0000000000008564                 db  40h ; @
.eh_frame_hdr:0000000000008565                 db 0E8h
.eh_frame_hdr:0000000000008566                 db 0FFh
.eh_frame_hdr:0000000000008567                 db 0FFh
.eh_frame_hdr:0000000000008568                 db 0C8h
.eh_frame_hdr:0000000000008569                 db  0Eh
.eh_frame_hdr:000000000000856A                 db    0
.eh_frame_hdr:000000000000856B                 db    0
.eh_frame_hdr:000000000000856C                 db  80h
.eh_frame_hdr:000000000000856D                 db 0E8h
.eh_frame_hdr:000000000000856E                 db 0FFh
.eh_frame_hdr:000000000000856F                 db 0FFh
.eh_frame_hdr:0000000000008570                 db 0E8h
.eh_frame_hdr:0000000000008571                 db  0Eh
.eh_frame_hdr:0000000000008572                 db    0
.eh_frame_hdr:0000000000008573                 db    0
.eh_frame_hdr:0000000000008574                 db 0E0h
.eh_frame_hdr:0000000000008575                 db 0E8h
.eh_frame_hdr:0000000000008576                 db 0FFh
.eh_frame_hdr:0000000000008577                 db 0FFh
.eh_frame_hdr:0000000000008578                 db  18h
.eh_frame_hdr:0000000000008579                 db  0Fh
.eh_frame_hdr:000000000000857A                 db    0
.eh_frame_hdr:000000000000857B                 db    0
.eh_frame_hdr:000000000000857C                 db  70h ; p
.eh_frame_hdr:000000000000857D                 db 0E9h
.eh_frame_hdr:000000000000857E                 db 0FFh
.eh_frame_hdr:000000000000857F                 db 0FFh
.eh_frame_hdr:0000000000008580                 db  58h ; X
.eh_frame_hdr:0000000000008581                 db  0Fh
.eh_frame_hdr:0000000000008582                 db    0
.eh_frame_hdr:0000000000008583                 db    0
.eh_frame_hdr:0000000000008584                 db 0F0h
.eh_frame_hdr:0000000000008585                 db 0E9h
.eh_frame_hdr:0000000000008586                 db 0FFh
.eh_frame_hdr:0000000000008587                 db 0FFh
.eh_frame_hdr:0000000000008588                 db 0A8h
.eh_frame_hdr:0000000000008589                 db  0Fh
.eh_frame_hdr:000000000000858A                 db    0
.eh_frame_hdr:000000000000858B                 db    0
.eh_frame_hdr:000000000000858C                 db  50h ; P
.eh_frame_hdr:000000000000858D                 db 0EAh
.eh_frame_hdr:000000000000858E                 db 0FFh
.eh_frame_hdr:000000000000858F                 db 0FFh
.eh_frame_hdr:0000000000008590                 db 0C8h
.eh_frame_hdr:0000000000008591                 db  0Fh
.eh_frame_hdr:0000000000008592                 db    0
.eh_frame_hdr:0000000000008593                 db    0
.eh_frame_hdr:0000000000008594                 db  90h
.eh_frame_hdr:0000000000008595                 db 0EAh
.eh_frame_hdr:0000000000008596                 db 0FFh
.eh_frame_hdr:0000000000008597                 db 0FFh
.eh_frame_hdr:0000000000008598                 db 0E8h
.eh_frame_hdr:0000000000008599                 db  0Fh
.eh_frame_hdr:000000000000859A                 db    0
.eh_frame_hdr:000000000000859B                 db    0
.eh_frame_hdr:000000000000859C                 db    0
.eh_frame_hdr:000000000000859D                 db 0EBh
.eh_frame_hdr:000000000000859E                 db 0FFh
.eh_frame_hdr:000000000000859F                 db 0FFh
.eh_frame_hdr:00000000000085A0                 db  30h ; 0
.eh_frame_hdr:00000000000085A1                 db  10h
.eh_frame_hdr:00000000000085A2                 db    0
.eh_frame_hdr:00000000000085A3                 db    0
.eh_frame_hdr:00000000000085A4                 db  10h
.eh_frame_hdr:00000000000085A5                 db 0EBh
.eh_frame_hdr:00000000000085A6                 db 0FFh
.eh_frame_hdr:00000000000085A7                 db 0FFh
.eh_frame_hdr:00000000000085A8                 db  48h ; H
.eh_frame_hdr:00000000000085A9                 db  10h
.eh_frame_hdr:00000000000085AA                 db    0
.eh_frame_hdr:00000000000085AB                 db    0
.eh_frame_hdr:00000000000085AB _eh_frame_hdr   ends
.eh_frame_hdr:00000000000085AB
LOAD:00000000000085AC ; ===========================================================================
LOAD:00000000000085AC
LOAD:00000000000085AC ; Segment type: Pure code
LOAD:00000000000085AC ; Segment permissions: Read/Execute
LOAD:00000000000085AC LOAD            segment byte public 'CODE' use64
LOAD:00000000000085AC                 assume cs:LOAD
LOAD:00000000000085AC                 ;org 85ACh
LOAD:00000000000085AC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000085AC                 align 10h
LOAD:00000000000085AC LOAD            ends
LOAD:00000000000085AC
.eh_frame:00000000000085B0 ; ===========================================================================
.eh_frame:00000000000085B0
.eh_frame:00000000000085B0 ; Segment type: Pure data
.eh_frame:00000000000085B0 ; Segment permissions: Read
.eh_frame:00000000000085B0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000085B0                 assume cs:_eh_frame
.eh_frame:00000000000085B0                 ;org 85B0h
.eh_frame:00000000000085B0                 db  14h
.eh_frame:00000000000085B1                 db    0
.eh_frame:00000000000085B2                 db    0
.eh_frame:00000000000085B3                 db    0
.eh_frame:00000000000085B4                 db    0
.eh_frame:00000000000085B5                 db    0
.eh_frame:00000000000085B6                 db    0
.eh_frame:00000000000085B7                 db    0
.eh_frame:00000000000085B8                 db    1
.eh_frame:00000000000085B9                 db  7Ah ; z
.eh_frame:00000000000085BA                 db  52h ; R
.eh_frame:00000000000085BB                 db    0
.eh_frame:00000000000085BC                 db    1
.eh_frame:00000000000085BD                 db  78h ; x
.eh_frame:00000000000085BE                 db  10h
.eh_frame:00000000000085BF                 db    1
.eh_frame:00000000000085C0                 db  1Bh
.eh_frame:00000000000085C1                 db  0Ch
.eh_frame:00000000000085C2                 db    7
.eh_frame:00000000000085C3                 db    8
.eh_frame:00000000000085C4                 db  90h
.eh_frame:00000000000085C5                 db    1
.eh_frame:00000000000085C6                 db    7
.eh_frame:00000000000085C7                 db  10h
.eh_frame:00000000000085C8                 db  14h
.eh_frame:00000000000085C9                 db    0
.eh_frame:00000000000085CA                 db    0
.eh_frame:00000000000085CB                 db    0
.eh_frame:00000000000085CC                 db  1Ch
.eh_frame:00000000000085CD                 db    0
.eh_frame:00000000000085CE                 db    0
.eh_frame:00000000000085CF                 db    0
.eh_frame:00000000000085D0                 db  70h ; p
.eh_frame:00000000000085D1                 db 0A4h
.eh_frame:00000000000085D2                 db 0FFh
.eh_frame:00000000000085D3                 db 0FFh
.eh_frame:00000000000085D4                 db  2Bh ; +
.eh_frame:00000000000085D5                 db    0
.eh_frame:00000000000085D6                 db    0
.eh_frame:00000000000085D7                 db    0
.eh_frame:00000000000085D8                 db    0
.eh_frame:00000000000085D9                 db    0
.eh_frame:00000000000085DA                 db    0
.eh_frame:00000000000085DB                 db    0
.eh_frame:00000000000085DC                 db    0
.eh_frame:00000000000085DD                 db    0
.eh_frame:00000000000085DE                 db    0
.eh_frame:00000000000085DF                 db    0
.eh_frame:00000000000085E0                 db  14h
.eh_frame:00000000000085E1                 db    0
.eh_frame:00000000000085E2                 db    0
.eh_frame:00000000000085E3                 db    0
.eh_frame:00000000000085E4                 db    0
.eh_frame:00000000000085E5                 db    0
.eh_frame:00000000000085E6                 db    0
.eh_frame:00000000000085E7                 db    0
.eh_frame:00000000000085E8                 db    1
.eh_frame:00000000000085E9                 db  7Ah ; z
.eh_frame:00000000000085EA                 db  52h ; R
.eh_frame:00000000000085EB                 db    0
.eh_frame:00000000000085EC                 db    1
.eh_frame:00000000000085ED                 db  78h ; x
.eh_frame:00000000000085EE                 db  10h
.eh_frame:00000000000085EF                 db    1
.eh_frame:00000000000085F0                 db  1Bh
.eh_frame:00000000000085F1                 db  0Ch
.eh_frame:00000000000085F2                 db    7
.eh_frame:00000000000085F3                 db    8
.eh_frame:00000000000085F4                 db  90h
.eh_frame:00000000000085F5                 db    1
.eh_frame:00000000000085F6                 db    0
.eh_frame:00000000000085F7                 db    0
.eh_frame:00000000000085F8                 db  24h ; $
.eh_frame:00000000000085F9                 db    0
.eh_frame:00000000000085FA                 db    0
.eh_frame:00000000000085FB                 db    0
.eh_frame:00000000000085FC                 db  1Ch
.eh_frame:00000000000085FD                 db    0
.eh_frame:00000000000085FE                 db    0
.eh_frame:00000000000085FF                 db    0
.eh_frame:0000000000008600                 db 0A0h
.eh_frame:0000000000008601                 db  8Fh
.eh_frame:0000000000008602                 db 0FFh
.eh_frame:0000000000008603                 db 0FFh
.eh_frame:0000000000008604                 db  50h ; P
.eh_frame:0000000000008605                 db    3
.eh_frame:0000000000008606                 db    0
.eh_frame:0000000000008607                 db    0
.eh_frame:0000000000008608                 db    0
.eh_frame:0000000000008609                 db  0Eh
.eh_frame:000000000000860A                 db  10h
.eh_frame:000000000000860B                 db  46h ; F
.eh_frame:000000000000860C                 db  0Eh
.eh_frame:000000000000860D                 db  18h
.eh_frame:000000000000860E                 db  4Ah ; J
.eh_frame:000000000000860F                 db  0Fh
.eh_frame:0000000000008610                 db  0Bh
.eh_frame:0000000000008611                 db  77h ; w
.eh_frame:0000000000008612                 db    8
.eh_frame:0000000000008613                 db  80h
.eh_frame:0000000000008614                 db    0
.eh_frame:0000000000008615                 db  3Fh ; ?
.eh_frame:0000000000008616                 db  1Ah
.eh_frame:0000000000008617                 db  3Bh ; ;
.eh_frame:0000000000008618                 db  2Ah ; *
.eh_frame:0000000000008619                 db  33h ; 3
.eh_frame:000000000000861A                 db  24h ; $
.eh_frame:000000000000861B                 db  22h ; "
.eh_frame:000000000000861C                 db    0
.eh_frame:000000000000861D                 db    0
.eh_frame:000000000000861E                 db    0
.eh_frame:000000000000861F                 db    0
.eh_frame:0000000000008620                 db  14h
.eh_frame:0000000000008621                 db    0
.eh_frame:0000000000008622                 db    0
.eh_frame:0000000000008623                 db    0
.eh_frame:0000000000008624                 db  44h ; D
.eh_frame:0000000000008625                 db    0
.eh_frame:0000000000008626                 db    0
.eh_frame:0000000000008627                 db    0
.eh_frame:0000000000008628                 db 0C8h
.eh_frame:0000000000008629                 db  92h
.eh_frame:000000000000862A                 db 0FFh
.eh_frame:000000000000862B                 db 0FFh
.eh_frame:000000000000862C                 db    8
.eh_frame:000000000000862D                 db    0
.eh_frame:000000000000862E                 db    0
.eh_frame:000000000000862F                 db    0
.eh_frame:0000000000008630                 db    0
.eh_frame:0000000000008631                 db    0
.eh_frame:0000000000008632                 db    0
.eh_frame:0000000000008633                 db    0
.eh_frame:0000000000008634                 db    0
.eh_frame:0000000000008635                 db    0
.eh_frame:0000000000008636                 db    0
.eh_frame:0000000000008637                 db    0
.eh_frame:0000000000008638                 db  10h
.eh_frame:0000000000008639                 db    0
.eh_frame:000000000000863A                 db    0
.eh_frame:000000000000863B                 db    0
.eh_frame:000000000000863C                 db  5Ch ; \
.eh_frame:000000000000863D                 db    0
.eh_frame:000000000000863E                 db    0
.eh_frame:000000000000863F                 db    0
.eh_frame:0000000000008640                 db  10h
.eh_frame:0000000000008641                 db 0A5h
.eh_frame:0000000000008642                 db 0FFh
.eh_frame:0000000000008643                 db 0FFh
.eh_frame:0000000000008644                 db  79h ; y
.eh_frame:0000000000008645                 db    0
.eh_frame:0000000000008646                 db    0
.eh_frame:0000000000008647                 db    0
.eh_frame:0000000000008648                 db    0
.eh_frame:0000000000008649                 db    0
.eh_frame:000000000000864A                 db    0
.eh_frame:000000000000864B                 db    0
.eh_frame:000000000000864C                 db  30h ; 0
.eh_frame:000000000000864D                 db    0
.eh_frame:000000000000864E                 db    0
.eh_frame:000000000000864F                 db    0
.eh_frame:0000000000008650                 db  70h ; p
.eh_frame:0000000000008651                 db    0
.eh_frame:0000000000008652                 db    0
.eh_frame:0000000000008653                 db    0
.eh_frame:0000000000008654                 db  7Ch ; |
.eh_frame:0000000000008655                 db 0A5h
.eh_frame:0000000000008656                 db 0FFh
.eh_frame:0000000000008657                 db 0FFh
.eh_frame:0000000000008658                 db  60h ; `
.eh_frame:0000000000008659                 db    0
.eh_frame:000000000000865A                 db    0
.eh_frame:000000000000865B                 db    0
.eh_frame:000000000000865C                 db    0
.eh_frame:000000000000865D                 db  41h ; A
.eh_frame:000000000000865E                 db  0Eh
.eh_frame:000000000000865F                 db  10h
.eh_frame:0000000000008660                 db  86h
.eh_frame:0000000000008661                 db    2
.eh_frame:0000000000008662                 db  41h ; A
.eh_frame:0000000000008663                 db  0Eh
.eh_frame:0000000000008664                 db  18h
.eh_frame:0000000000008665                 db  83h
.eh_frame:0000000000008666                 db    3
.eh_frame:0000000000008667                 db  44h ; D
.eh_frame:0000000000008668                 db  0Eh
.eh_frame:0000000000008669                 db  20h
.eh_frame:000000000000866A                 db  7Dh ; }
.eh_frame:000000000000866B                 db  0Ah
.eh_frame:000000000000866C                 db  0Eh
.eh_frame:000000000000866D                 db  18h
.eh_frame:000000000000866E                 db  43h ; C
.eh_frame:000000000000866F                 db  0Eh
.eh_frame:0000000000008670                 db  10h
.eh_frame:0000000000008671                 db  41h ; A
.eh_frame:0000000000008672                 db  0Eh
.eh_frame:0000000000008673                 db    8
.eh_frame:0000000000008674                 db  49h ; I
.eh_frame:0000000000008675                 db  0Bh
.eh_frame:0000000000008676                 db  4Dh ; M
.eh_frame:0000000000008677                 db  0Eh
.eh_frame:0000000000008678                 db  18h
.eh_frame:0000000000008679                 db  41h ; A
.eh_frame:000000000000867A                 db  0Eh
.eh_frame:000000000000867B                 db  10h
.eh_frame:000000000000867C                 db  41h ; A
.eh_frame:000000000000867D                 db  0Eh
.eh_frame:000000000000867E                 db    8
.eh_frame:000000000000867F                 db    0
.eh_frame:0000000000008680                 db  34h ; 4
.eh_frame:0000000000008681                 db    0
.eh_frame:0000000000008682                 db    0
.eh_frame:0000000000008683                 db    0
.eh_frame:0000000000008684                 db 0A4h
.eh_frame:0000000000008685                 db    0
.eh_frame:0000000000008686                 db    0
.eh_frame:0000000000008687                 db    0
.eh_frame:0000000000008688                 db 0A8h
.eh_frame:0000000000008689                 db 0A5h
.eh_frame:000000000000868A                 db 0FFh
.eh_frame:000000000000868B                 db 0FFh
.eh_frame:000000000000868C                 db 0C5h
.eh_frame:000000000000868D                 db    0
.eh_frame:000000000000868E                 db    0
.eh_frame:000000000000868F                 db    0
.eh_frame:0000000000008690                 db    0
.eh_frame:0000000000008691                 db  41h ; A
.eh_frame:0000000000008692                 db  0Eh
.eh_frame:0000000000008693                 db  10h
.eh_frame:0000000000008694                 db  86h
.eh_frame:0000000000008695                 db    2
.eh_frame:0000000000008696                 db  41h ; A
.eh_frame:0000000000008697                 db  0Eh
.eh_frame:0000000000008698                 db  18h
.eh_frame:0000000000008699                 db  83h
.eh_frame:000000000000869A                 db    3
.eh_frame:000000000000869B                 db  47h ; G
.eh_frame:000000000000869C                 db  0Eh
.eh_frame:000000000000869D                 db  20h
.eh_frame:000000000000869E                 db    2
.eh_frame:000000000000869F                 db  79h ; y
.eh_frame:00000000000086A0                 db  0Ah
.eh_frame:00000000000086A1                 db  0Eh
.eh_frame:00000000000086A2                 db  18h
.eh_frame:00000000000086A3                 db  41h ; A
.eh_frame:00000000000086A4                 db  0Eh
.eh_frame:00000000000086A5                 db  10h
.eh_frame:00000000000086A6                 db  41h ; A
.eh_frame:00000000000086A7                 db  0Eh
.eh_frame:00000000000086A8                 db    8
.eh_frame:00000000000086A9                 db  44h ; D
.eh_frame:00000000000086AA                 db  0Bh
.eh_frame:00000000000086AB                 db  63h ; c
.eh_frame:00000000000086AC                 db  0Ah
.eh_frame:00000000000086AD                 db  0Eh
.eh_frame:00000000000086AE                 db  18h
.eh_frame:00000000000086AF                 db  41h ; A
.eh_frame:00000000000086B0                 db  0Eh
.eh_frame:00000000000086B1                 db  10h
.eh_frame:00000000000086B2                 db  41h ; A
.eh_frame:00000000000086B3                 db  0Eh
.eh_frame:00000000000086B4                 db    8
.eh_frame:00000000000086B5                 db  4Bh ; K
.eh_frame:00000000000086B6                 db  0Bh
.eh_frame:00000000000086B7                 db    0
.eh_frame:00000000000086B8                 db  4Ch ; L
.eh_frame:00000000000086B9                 db    0
.eh_frame:00000000000086BA                 db    0
.eh_frame:00000000000086BB                 db    0
.eh_frame:00000000000086BC                 db 0DCh
.eh_frame:00000000000086BD                 db    0
.eh_frame:00000000000086BE                 db    0
.eh_frame:00000000000086BF                 db    0
.eh_frame:00000000000086C0                 db  40h ; @
.eh_frame:00000000000086C1                 db 0A6h
.eh_frame:00000000000086C2                 db 0FFh
.eh_frame:00000000000086C3                 db 0FFh
.eh_frame:00000000000086C4                 db  9Ah
.eh_frame:00000000000086C5                 db    1
.eh_frame:00000000000086C6                 db    0
.eh_frame:00000000000086C7                 db    0
.eh_frame:00000000000086C8                 db    0
.eh_frame:00000000000086C9                 db  42h ; B
.eh_frame:00000000000086CA                 db  0Eh
.eh_frame:00000000000086CB                 db  10h
.eh_frame:00000000000086CC                 db  8Dh
.eh_frame:00000000000086CD                 db    2
.eh_frame:00000000000086CE                 db  42h ; B
.eh_frame:00000000000086CF                 db  0Eh
.eh_frame:00000000000086D0                 db  18h
.eh_frame:00000000000086D1                 db  8Ch
.eh_frame:00000000000086D2                 db    3
.eh_frame:00000000000086D3                 db  46h ; F
.eh_frame:00000000000086D4                 db  0Eh
.eh_frame:00000000000086D5                 db  20h
.eh_frame:00000000000086D6                 db  86h
.eh_frame:00000000000086D7                 db    4
.eh_frame:00000000000086D8                 db  41h ; A
.eh_frame:00000000000086D9                 db  0Eh
.eh_frame:00000000000086DA                 db  28h ; (
.eh_frame:00000000000086DB                 db  83h
.eh_frame:00000000000086DC                 db    5
.eh_frame:00000000000086DD                 db  54h ; T
.eh_frame:00000000000086DE                 db  0Eh
.eh_frame:00000000000086DF                 db  30h ; 0
.eh_frame:00000000000086E0                 db    2
.eh_frame:00000000000086E1                 db  46h ; F
.eh_frame:00000000000086E2                 db  0Ah
.eh_frame:00000000000086E3                 db  0Eh
.eh_frame:00000000000086E4                 db  28h ; (
.eh_frame:00000000000086E5                 db  44h ; D
.eh_frame:00000000000086E6                 db  0Eh
.eh_frame:00000000000086E7                 db  20h
.eh_frame:00000000000086E8                 db  41h ; A
.eh_frame:00000000000086E9                 db  0Eh
.eh_frame:00000000000086EA                 db  18h
.eh_frame:00000000000086EB                 db  42h ; B
.eh_frame:00000000000086EC                 db  0Eh
.eh_frame:00000000000086ED                 db  10h
.eh_frame:00000000000086EE                 db  42h ; B
.eh_frame:00000000000086EF                 db  0Eh
.eh_frame:00000000000086F0                 db    8
.eh_frame:00000000000086F1                 db  42h ; B
.eh_frame:00000000000086F2                 db  0Bh
.eh_frame:00000000000086F3                 db    2
.eh_frame:00000000000086F4                 db  44h ; D
.eh_frame:00000000000086F5                 db  0Ah
.eh_frame:00000000000086F6                 db  0Eh
.eh_frame:00000000000086F7                 db  28h ; (
.eh_frame:00000000000086F8                 db  44h ; D
.eh_frame:00000000000086F9                 db  0Eh
.eh_frame:00000000000086FA                 db  20h
.eh_frame:00000000000086FB                 db  41h ; A
.eh_frame:00000000000086FC                 db  0Eh
.eh_frame:00000000000086FD                 db  18h
.eh_frame:00000000000086FE                 db  42h ; B
.eh_frame:00000000000086FF                 db  0Eh
.eh_frame:0000000000008700                 db  10h
.eh_frame:0000000000008701                 db  42h ; B
.eh_frame:0000000000008702                 db  0Eh
.eh_frame:0000000000008703                 db    8
.eh_frame:0000000000008704                 db  43h ; C
.eh_frame:0000000000008705                 db  0Bh
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db  28h ; (
.eh_frame:0000000000008709                 db    0
.eh_frame:000000000000870A                 db    0
.eh_frame:000000000000870B                 db    0
.eh_frame:000000000000870C                 db  2Ch ; ,
.eh_frame:000000000000870D                 db    1
.eh_frame:000000000000870E                 db    0
.eh_frame:000000000000870F                 db    0
.eh_frame:0000000000008710                 db  90h
.eh_frame:0000000000008711                 db 0A7h
.eh_frame:0000000000008712                 db 0FFh
.eh_frame:0000000000008713                 db 0FFh
.eh_frame:0000000000008714                 db  5Ah ; Z
.eh_frame:0000000000008715                 db    4
.eh_frame:0000000000008716                 db    0
.eh_frame:0000000000008717                 db    0
.eh_frame:0000000000008718                 db    0
.eh_frame:0000000000008719                 db  42h ; B
.eh_frame:000000000000871A                 db  0Eh
.eh_frame:000000000000871B                 db  10h
.eh_frame:000000000000871C                 db  8Dh
.eh_frame:000000000000871D                 db    2
.eh_frame:000000000000871E                 db  42h ; B
.eh_frame:000000000000871F                 db  0Eh
.eh_frame:0000000000008720                 db  18h
.eh_frame:0000000000008721                 db  8Ch
.eh_frame:0000000000008722                 db    3
.eh_frame:0000000000008723                 db  46h ; F
.eh_frame:0000000000008724                 db  0Eh
.eh_frame:0000000000008725                 db  20h
.eh_frame:0000000000008726                 db  86h
.eh_frame:0000000000008727                 db    4
.eh_frame:0000000000008728                 db  41h ; A
.eh_frame:0000000000008729                 db  0Eh
.eh_frame:000000000000872A                 db  28h ; (
.eh_frame:000000000000872B                 db  83h
.eh_frame:000000000000872C                 db    5
.eh_frame:000000000000872D                 db  49h ; I
.eh_frame:000000000000872E                 db  0Eh
.eh_frame:000000000000872F                 db 0B0h
.eh_frame:0000000000008730                 db    1
.eh_frame:0000000000008731                 db    0
.eh_frame:0000000000008732                 db    0
.eh_frame:0000000000008733                 db    0
.eh_frame:0000000000008734                 db  58h ; X
.eh_frame:0000000000008735                 db    0
.eh_frame:0000000000008736                 db    0
.eh_frame:0000000000008737                 db    0
.eh_frame:0000000000008738                 db  58h ; X
.eh_frame:0000000000008739                 db    1
.eh_frame:000000000000873A                 db    0
.eh_frame:000000000000873B                 db    0
.eh_frame:000000000000873C                 db 0C4h
.eh_frame:000000000000873D                 db  91h
.eh_frame:000000000000873E                 db 0FFh
.eh_frame:000000000000873F                 db 0FFh
.eh_frame:0000000000008740                 db  3Dh ; =
.eh_frame:0000000000008741                 db  11h
.eh_frame:0000000000008742                 db    0
.eh_frame:0000000000008743                 db    0
.eh_frame:0000000000008744                 db    0
.eh_frame:0000000000008745                 db  42h ; B
.eh_frame:0000000000008746                 db  0Eh
.eh_frame:0000000000008747                 db  10h
.eh_frame:0000000000008748                 db  8Fh
.eh_frame:0000000000008749                 db    2
.eh_frame:000000000000874A                 db  42h ; B
.eh_frame:000000000000874B                 db  0Eh
.eh_frame:000000000000874C                 db  18h
.eh_frame:000000000000874D                 db  8Eh
.eh_frame:000000000000874E                 db    3
.eh_frame:000000000000874F                 db  42h ; B
.eh_frame:0000000000008750                 db  0Eh
.eh_frame:0000000000008751                 db  20h
.eh_frame:0000000000008752                 db  8Dh
.eh_frame:0000000000008753                 db    4
.eh_frame:0000000000008754                 db  42h ; B
.eh_frame:0000000000008755                 db  0Eh
.eh_frame:0000000000008756                 db  28h ; (
.eh_frame:0000000000008757                 db  8Ch
.eh_frame:0000000000008758                 db    5
.eh_frame:0000000000008759                 db  44h ; D
.eh_frame:000000000000875A                 db  0Eh
.eh_frame:000000000000875B                 db  30h ; 0
.eh_frame:000000000000875C                 db  86h
.eh_frame:000000000000875D                 db    6
.eh_frame:000000000000875E                 db  41h ; A
.eh_frame:000000000000875F                 db  0Eh
.eh_frame:0000000000008760                 db  38h ; 8
.eh_frame:0000000000008761                 db  83h
.eh_frame:0000000000008762                 db    7
.eh_frame:0000000000008763                 db  4Fh ; O
.eh_frame:0000000000008764                 db  0Eh
.eh_frame:0000000000008765                 db 0A0h
.eh_frame:0000000000008766                 db    2
.eh_frame:0000000000008767                 db    3
.eh_frame:0000000000008768                 db  56h ; V
.eh_frame:0000000000008769                 db    1
.eh_frame:000000000000876A                 db  0Ah
.eh_frame:000000000000876B                 db  0Eh
.eh_frame:000000000000876C                 db 0A8h
.eh_frame:000000000000876D                 db    2
.eh_frame:000000000000876E                 db  4Fh ; O
.eh_frame:000000000000876F                 db  0Eh
.eh_frame:0000000000008770                 db 0B0h
.eh_frame:0000000000008771                 db    2
.eh_frame:0000000000008772                 db  5Fh ; _
.eh_frame:0000000000008773                 db  0Bh
.eh_frame:0000000000008774                 db    3
.eh_frame:0000000000008775                 db  19h
.eh_frame:0000000000008776                 db    9
.eh_frame:0000000000008777                 db  0Ah
.eh_frame:0000000000008778                 db  0Eh
.eh_frame:0000000000008779                 db  38h ; 8
.eh_frame:000000000000877A                 db  41h ; A
.eh_frame:000000000000877B                 db  0Eh
.eh_frame:000000000000877C                 db  30h ; 0
.eh_frame:000000000000877D                 db  41h ; A
.eh_frame:000000000000877E                 db  0Eh
.eh_frame:000000000000877F                 db  28h ; (
.eh_frame:0000000000008780                 db  42h ; B
.eh_frame:0000000000008781                 db  0Eh
.eh_frame:0000000000008782                 db  20h
.eh_frame:0000000000008783                 db  42h ; B
.eh_frame:0000000000008784                 db  0Eh
.eh_frame:0000000000008785                 db  18h
.eh_frame:0000000000008786                 db  42h ; B
.eh_frame:0000000000008787                 db  0Eh
.eh_frame:0000000000008788                 db  10h
.eh_frame:0000000000008789                 db  42h ; B
.eh_frame:000000000000878A                 db  0Eh
.eh_frame:000000000000878B                 db    8
.eh_frame:000000000000878C                 db  41h ; A
.eh_frame:000000000000878D                 db  0Bh
.eh_frame:000000000000878E                 db    0
.eh_frame:000000000000878F                 db    0
.eh_frame:0000000000008790                 db  10h
.eh_frame:0000000000008791                 db    0
.eh_frame:0000000000008792                 db    0
.eh_frame:0000000000008793                 db    0
.eh_frame:0000000000008794                 db 0B4h
.eh_frame:0000000000008795                 db    1
.eh_frame:0000000000008796                 db    0
.eh_frame:0000000000008797                 db    0
.eh_frame:0000000000008798                 db  68h ; h
.eh_frame:0000000000008799                 db 0ABh
.eh_frame:000000000000879A                 db 0FFh
.eh_frame:000000000000879B                 db 0FFh
.eh_frame:000000000000879C                 db    8
.eh_frame:000000000000879D                 db    0
.eh_frame:000000000000879E                 db    0
.eh_frame:000000000000879F                 db    0
.eh_frame:00000000000087A0                 db    0
.eh_frame:00000000000087A1                 db    0
.eh_frame:00000000000087A2                 db    0
.eh_frame:00000000000087A3                 db    0
.eh_frame:00000000000087A4                 db  10h
.eh_frame:00000000000087A5                 db    0
.eh_frame:00000000000087A6                 db    0
.eh_frame:00000000000087A7                 db    0
.eh_frame:00000000000087A8                 db 0C8h
.eh_frame:00000000000087A9                 db    1
.eh_frame:00000000000087AA                 db    0
.eh_frame:00000000000087AB                 db    0
.eh_frame:00000000000087AC                 db  64h ; d
.eh_frame:00000000000087AD                 db 0ABh
.eh_frame:00000000000087AE                 db 0FFh
.eh_frame:00000000000087AF                 db 0FFh
.eh_frame:00000000000087B0                 db    8
.eh_frame:00000000000087B1                 db    0
.eh_frame:00000000000087B2                 db    0
.eh_frame:00000000000087B3                 db    0
.eh_frame:00000000000087B4                 db    0
.eh_frame:00000000000087B5                 db    0
.eh_frame:00000000000087B6                 db    0
.eh_frame:00000000000087B7                 db    0
.eh_frame:00000000000087B8                 db  2Ch ; ,
.eh_frame:00000000000087B9                 db    0
.eh_frame:00000000000087BA                 db    0
.eh_frame:00000000000087BB                 db    0
.eh_frame:00000000000087BC                 db 0DCh
.eh_frame:00000000000087BD                 db    1
.eh_frame:00000000000087BE                 db    0
.eh_frame:00000000000087BF                 db    0
.eh_frame:00000000000087C0                 db  60h ; `
.eh_frame:00000000000087C1                 db 0ABh
.eh_frame:00000000000087C2                 db 0FFh
.eh_frame:00000000000087C3                 db 0FFh
.eh_frame:00000000000087C4                 db 0A4h
.eh_frame:00000000000087C5                 db    0
.eh_frame:00000000000087C6                 db    0
.eh_frame:00000000000087C7                 db    0
.eh_frame:00000000000087C8                 db    0
.eh_frame:00000000000087C9                 db  41h ; A
.eh_frame:00000000000087CA                 db  0Eh
.eh_frame:00000000000087CB                 db  10h
.eh_frame:00000000000087CC                 db  86h
.eh_frame:00000000000087CD                 db    2
.eh_frame:00000000000087CE                 db  41h ; A
.eh_frame:00000000000087CF                 db  0Eh
.eh_frame:00000000000087D0                 db  18h
.eh_frame:00000000000087D1                 db  83h
.eh_frame:00000000000087D2                 db    3
.eh_frame:00000000000087D3                 db  44h ; D
.eh_frame:00000000000087D4                 db  0Eh
.eh_frame:00000000000087D5                 db  20h
.eh_frame:00000000000087D6                 db  7Ah ; z
.eh_frame:00000000000087D7                 db  0Ah
.eh_frame:00000000000087D8                 db  0Eh
.eh_frame:00000000000087D9                 db  18h
.eh_frame:00000000000087DA                 db  41h ; A
.eh_frame:00000000000087DB                 db  0Eh
.eh_frame:00000000000087DC                 db  10h
.eh_frame:00000000000087DD                 db  41h ; A
.eh_frame:00000000000087DE                 db  0Eh
.eh_frame:00000000000087DF                 db    8
.eh_frame:00000000000087E0                 db  41h ; A
.eh_frame:00000000000087E1                 db  0Bh
.eh_frame:00000000000087E2                 db    0
.eh_frame:00000000000087E3                 db    0
.eh_frame:00000000000087E4                 db    0
.eh_frame:00000000000087E5                 db    0
.eh_frame:00000000000087E6                 db    0
.eh_frame:00000000000087E7                 db    0
.eh_frame:00000000000087E8                 db  10h
.eh_frame:00000000000087E9                 db    0
.eh_frame:00000000000087EA                 db    0
.eh_frame:00000000000087EB                 db    0
.eh_frame:00000000000087EC                 db  0Ch
.eh_frame:00000000000087ED                 db    2
.eh_frame:00000000000087EE                 db    0
.eh_frame:00000000000087EF                 db    0
.eh_frame:00000000000087F0                 db 0E0h
.eh_frame:00000000000087F1                 db 0ABh
.eh_frame:00000000000087F2                 db 0FFh
.eh_frame:00000000000087F3                 db 0FFh
.eh_frame:00000000000087F4                 db  2Bh ; +
.eh_frame:00000000000087F5                 db    0
.eh_frame:00000000000087F6                 db    0
.eh_frame:00000000000087F7                 db    0
.eh_frame:00000000000087F8                 db    0
.eh_frame:00000000000087F9                 db    0
.eh_frame:00000000000087FA                 db    0
.eh_frame:00000000000087FB                 db    0
.eh_frame:00000000000087FC                 db  10h
.eh_frame:00000000000087FD                 db    0
.eh_frame:00000000000087FE                 db    0
.eh_frame:00000000000087FF                 db    0
.eh_frame:0000000000008800                 db  20h
.eh_frame:0000000000008801                 db    2
.eh_frame:0000000000008802                 db    0
.eh_frame:0000000000008803                 db    0
.eh_frame:0000000000008804                 db 0FCh
.eh_frame:0000000000008805                 db 0ABh
.eh_frame:0000000000008806                 db 0FFh
.eh_frame:0000000000008807                 db 0FFh
.eh_frame:0000000000008808                 db  1Ah
.eh_frame:0000000000008809                 db    0
.eh_frame:000000000000880A                 db    0
.eh_frame:000000000000880B                 db    0
.eh_frame:000000000000880C                 db    0
.eh_frame:000000000000880D                 db    0
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db  40h ; @
.eh_frame:0000000000008811                 db    0
.eh_frame:0000000000008812                 db    0
.eh_frame:0000000000008813                 db    0
.eh_frame:0000000000008814                 db  34h ; 4
.eh_frame:0000000000008815                 db    2
.eh_frame:0000000000008816                 db    0
.eh_frame:0000000000008817                 db    0
.eh_frame:0000000000008818                 db    8
.eh_frame:0000000000008819                 db 0ACh
.eh_frame:000000000000881A                 db 0FFh
.eh_frame:000000000000881B                 db 0FFh
.eh_frame:000000000000881C                 db  6Fh ; o
.eh_frame:000000000000881D                 db    7
.eh_frame:000000000000881E                 db    0
.eh_frame:000000000000881F                 db    0
.eh_frame:0000000000008820                 db    0
.eh_frame:0000000000008821                 db  45h ; E
.eh_frame:0000000000008822                 db  0Eh
.eh_frame:0000000000008823                 db  10h
.eh_frame:0000000000008824                 db  8Fh
.eh_frame:0000000000008825                 db    2
.eh_frame:0000000000008826                 db  42h ; B
.eh_frame:0000000000008827                 db  0Eh
.eh_frame:0000000000008828                 db  18h
.eh_frame:0000000000008829                 db  8Eh
.eh_frame:000000000000882A                 db    3
.eh_frame:000000000000882B                 db  46h ; F
.eh_frame:000000000000882C                 db  0Eh
.eh_frame:000000000000882D                 db  20h
.eh_frame:000000000000882E                 db  8Dh
.eh_frame:000000000000882F                 db    4
.eh_frame:0000000000008830                 db  42h ; B
.eh_frame:0000000000008831                 db  0Eh
.eh_frame:0000000000008832                 db  28h ; (
.eh_frame:0000000000008833                 db  8Ch
.eh_frame:0000000000008834                 db    5
.eh_frame:0000000000008835                 db  41h ; A
.eh_frame:0000000000008836                 db  0Eh
.eh_frame:0000000000008837                 db  30h ; 0
.eh_frame:0000000000008838                 db  86h
.eh_frame:0000000000008839                 db    6
.eh_frame:000000000000883A                 db  41h ; A
.eh_frame:000000000000883B                 db  0Eh
.eh_frame:000000000000883C                 db  38h ; 8
.eh_frame:000000000000883D                 db  83h
.eh_frame:000000000000883E                 db    7
.eh_frame:000000000000883F                 db    3
.eh_frame:0000000000008840                 db  54h ; T
.eh_frame:0000000000008841                 db    7
.eh_frame:0000000000008842                 db  0Eh
.eh_frame:0000000000008843                 db  30h ; 0
.eh_frame:0000000000008844                 db  41h ; A
.eh_frame:0000000000008845                 db  0Eh
.eh_frame:0000000000008846                 db  28h ; (
.eh_frame:0000000000008847                 db  42h ; B
.eh_frame:0000000000008848                 db  0Eh
.eh_frame:0000000000008849                 db  20h
.eh_frame:000000000000884A                 db  42h ; B
.eh_frame:000000000000884B                 db  0Eh
.eh_frame:000000000000884C                 db  18h
.eh_frame:000000000000884D                 db  42h ; B
.eh_frame:000000000000884E                 db  0Eh
.eh_frame:000000000000884F                 db  10h
.eh_frame:0000000000008850                 db  42h ; B
.eh_frame:0000000000008851                 db  0Eh
.eh_frame:0000000000008852                 db    8
.eh_frame:0000000000008853                 db    0
.eh_frame:0000000000008854                 db  24h ; $
.eh_frame:0000000000008855                 db    0
.eh_frame:0000000000008856                 db    0
.eh_frame:0000000000008857                 db    0
.eh_frame:0000000000008858                 db  78h ; x
.eh_frame:0000000000008859                 db    2
.eh_frame:000000000000885A                 db    0
.eh_frame:000000000000885B                 db    0
.eh_frame:000000000000885C                 db  34h ; 4
.eh_frame:000000000000885D                 db 0B3h
.eh_frame:000000000000885E                 db 0FFh
.eh_frame:000000000000885F                 db 0FFh
.eh_frame:0000000000008860                 db  12h
.eh_frame:0000000000008861                 db    1
.eh_frame:0000000000008862                 db    0
.eh_frame:0000000000008863                 db    0
.eh_frame:0000000000008864                 db    0
.eh_frame:0000000000008865                 db  41h ; A
.eh_frame:0000000000008866                 db  0Eh
.eh_frame:0000000000008867                 db  10h
.eh_frame:0000000000008868                 db  86h
.eh_frame:0000000000008869                 db    2
.eh_frame:000000000000886A                 db  41h ; A
.eh_frame:000000000000886B                 db  0Eh
.eh_frame:000000000000886C                 db  18h
.eh_frame:000000000000886D                 db  83h
.eh_frame:000000000000886E                 db    3
.eh_frame:000000000000886F                 db    2
.eh_frame:0000000000008870                 db 0EFh
.eh_frame:0000000000008871                 db  0Ah
.eh_frame:0000000000008872                 db  0Eh
.eh_frame:0000000000008873                 db  10h
.eh_frame:0000000000008874                 db  41h ; A
.eh_frame:0000000000008875                 db  0Eh
.eh_frame:0000000000008876                 db    8
.eh_frame:0000000000008877                 db  4Eh ; N
.eh_frame:0000000000008878                 db  0Bh
.eh_frame:0000000000008879                 db    0
.eh_frame:000000000000887A                 db    0
.eh_frame:000000000000887B                 db    0
.eh_frame:000000000000887C                 db  60h ; `
.eh_frame:000000000000887D                 db    0
.eh_frame:000000000000887E                 db    0
.eh_frame:000000000000887F                 db    0
.eh_frame:0000000000008880                 db 0A0h
.eh_frame:0000000000008881                 db    2
.eh_frame:0000000000008882                 db    0
.eh_frame:0000000000008883                 db    0
.eh_frame:0000000000008884                 db  2Ch ; ,
.eh_frame:0000000000008885                 db 0B4h
.eh_frame:0000000000008886                 db 0FFh
.eh_frame:0000000000008887                 db 0FFh
.eh_frame:0000000000008888                 db 0D7h
.eh_frame:0000000000008889                 db    2
.eh_frame:000000000000888A                 db    0
.eh_frame:000000000000888B                 db    0
.eh_frame:000000000000888C                 db    0
.eh_frame:000000000000888D                 db  42h ; B
.eh_frame:000000000000888E                 db  0Eh
.eh_frame:000000000000888F                 db  10h
.eh_frame:0000000000008890                 db  8Fh
.eh_frame:0000000000008891                 db    2
.eh_frame:0000000000008892                 db  42h ; B
.eh_frame:0000000000008893                 db  0Eh
.eh_frame:0000000000008894                 db  18h
.eh_frame:0000000000008895                 db  8Eh
.eh_frame:0000000000008896                 db    3
.eh_frame:0000000000008897                 db  42h ; B
.eh_frame:0000000000008898                 db  0Eh
.eh_frame:0000000000008899                 db  20h
.eh_frame:000000000000889A                 db  8Dh
.eh_frame:000000000000889B                 db    4
.eh_frame:000000000000889C                 db  42h ; B
.eh_frame:000000000000889D                 db  0Eh
.eh_frame:000000000000889E                 db  28h ; (
.eh_frame:000000000000889F                 db  8Ch
.eh_frame:00000000000088A0                 db    5
.eh_frame:00000000000088A1                 db  44h ; D
.eh_frame:00000000000088A2                 db  0Eh
.eh_frame:00000000000088A3                 db  30h ; 0
.eh_frame:00000000000088A4                 db  86h
.eh_frame:00000000000088A5                 db    6
.eh_frame:00000000000088A6                 db  41h ; A
.eh_frame:00000000000088A7                 db  0Eh
.eh_frame:00000000000088A8                 db  38h ; 8
.eh_frame:00000000000088A9                 db  83h
.eh_frame:00000000000088AA                 db    7
.eh_frame:00000000000088AB                 db  4Ah ; J
.eh_frame:00000000000088AC                 db  0Eh
.eh_frame:00000000000088AD                 db  40h ; @
.eh_frame:00000000000088AE                 db    2
.eh_frame:00000000000088AF                 db 0EFh
.eh_frame:00000000000088B0                 db  0Ah
.eh_frame:00000000000088B1                 db  0Eh
.eh_frame:00000000000088B2                 db  38h ; 8
.eh_frame:00000000000088B3                 db  41h ; A
.eh_frame:00000000000088B4                 db  0Eh
.eh_frame:00000000000088B5                 db  30h ; 0
.eh_frame:00000000000088B6                 db  41h ; A
.eh_frame:00000000000088B7                 db  0Eh
.eh_frame:00000000000088B8                 db  28h ; (
.eh_frame:00000000000088B9                 db  42h ; B
.eh_frame:00000000000088BA                 db  0Eh
.eh_frame:00000000000088BB                 db  20h
.eh_frame:00000000000088BC                 db  42h ; B
.eh_frame:00000000000088BD                 db  0Eh
.eh_frame:00000000000088BE                 db  18h
.eh_frame:00000000000088BF                 db  42h ; B
.eh_frame:00000000000088C0                 db  0Eh
.eh_frame:00000000000088C1                 db  10h
.eh_frame:00000000000088C2                 db  42h ; B
.eh_frame:00000000000088C3                 db  0Eh
.eh_frame:00000000000088C4                 db    8
.eh_frame:00000000000088C5                 db  48h ; H
.eh_frame:00000000000088C6                 db  0Bh
.eh_frame:00000000000088C7                 db  69h ; i
.eh_frame:00000000000088C8                 db  0Ah
.eh_frame:00000000000088C9                 db  0Eh
.eh_frame:00000000000088CA                 db  38h ; 8
.eh_frame:00000000000088CB                 db  41h ; A
.eh_frame:00000000000088CC                 db  0Eh
.eh_frame:00000000000088CD                 db  30h ; 0
.eh_frame:00000000000088CE                 db  41h ; A
.eh_frame:00000000000088CF                 db  0Eh
.eh_frame:00000000000088D0                 db  28h ; (
.eh_frame:00000000000088D1                 db  42h ; B
.eh_frame:00000000000088D2                 db  0Eh
.eh_frame:00000000000088D3                 db  20h
.eh_frame:00000000000088D4                 db  42h ; B
.eh_frame:00000000000088D5                 db  0Eh
.eh_frame:00000000000088D6                 db  18h
.eh_frame:00000000000088D7                 db  42h ; B
.eh_frame:00000000000088D8                 db  0Eh
.eh_frame:00000000000088D9                 db  10h
.eh_frame:00000000000088DA                 db  42h ; B
.eh_frame:00000000000088DB                 db  0Eh
.eh_frame:00000000000088DC                 db    8
.eh_frame:00000000000088DD                 db  45h ; E
.eh_frame:00000000000088DE                 db  0Bh
.eh_frame:00000000000088DF                 db    0
.eh_frame:00000000000088E0                 db  28h ; (
.eh_frame:00000000000088E1                 db    0
.eh_frame:00000000000088E2                 db    0
.eh_frame:00000000000088E3                 db    0
.eh_frame:00000000000088E4                 db    4
.eh_frame:00000000000088E5                 db    3
.eh_frame:00000000000088E6                 db    0
.eh_frame:00000000000088E7                 db    0
.eh_frame:00000000000088E8                 db 0A8h
.eh_frame:00000000000088E9                 db 0B6h
.eh_frame:00000000000088EA                 db 0FFh
.eh_frame:00000000000088EB                 db 0FFh
.eh_frame:00000000000088EC                 db  85h
.eh_frame:00000000000088ED                 db    0
.eh_frame:00000000000088EE                 db    0
.eh_frame:00000000000088EF                 db    0
.eh_frame:00000000000088F0                 db    0
.eh_frame:00000000000088F1                 db  41h ; A
.eh_frame:00000000000088F2                 db  0Eh
.eh_frame:00000000000088F3                 db  10h
.eh_frame:00000000000088F4                 db  86h
.eh_frame:00000000000088F5                 db    2
.eh_frame:00000000000088F6                 db  41h ; A
.eh_frame:00000000000088F7                 db  0Eh
.eh_frame:00000000000088F8                 db  18h
.eh_frame:00000000000088F9                 db  83h
.eh_frame:00000000000088FA                 db    3
.eh_frame:00000000000088FB                 db  4Ah ; J
.eh_frame:00000000000088FC                 db  0Eh
.eh_frame:00000000000088FD                 db 0D0h
.eh_frame:00000000000088FE                 db    1
.eh_frame:00000000000088FF                 db    2
.eh_frame:0000000000008900                 db  71h ; q
.eh_frame:0000000000008901                 db  0Ah
.eh_frame:0000000000008902                 db  0Eh
.eh_frame:0000000000008903                 db  18h
.eh_frame:0000000000008904                 db  41h ; A
.eh_frame:0000000000008905                 db  0Eh
.eh_frame:0000000000008906                 db  10h
.eh_frame:0000000000008907                 db  41h ; A
.eh_frame:0000000000008908                 db  0Eh
.eh_frame:0000000000008909                 db    8
.eh_frame:000000000000890A                 db  41h ; A
.eh_frame:000000000000890B                 db  0Bh
.eh_frame:000000000000890C                 db  48h ; H
.eh_frame:000000000000890D                 db    0
.eh_frame:000000000000890E                 db    0
.eh_frame:000000000000890F                 db    0
.eh_frame:0000000000008910                 db  30h ; 0
.eh_frame:0000000000008911                 db    3
.eh_frame:0000000000008912                 db    0
.eh_frame:0000000000008913                 db    0
.eh_frame:0000000000008914                 db  0Ch
.eh_frame:0000000000008915                 db 0B7h
.eh_frame:0000000000008916                 db 0FFh
.eh_frame:0000000000008917                 db 0FFh
.eh_frame:0000000000008918                 db  32h ; 2
.eh_frame:0000000000008919                 db    1
.eh_frame:000000000000891A                 db    0
.eh_frame:000000000000891B                 db    0
.eh_frame:000000000000891C                 db    0
.eh_frame:000000000000891D                 db  42h ; B
.eh_frame:000000000000891E                 db  0Eh
.eh_frame:000000000000891F                 db  10h
.eh_frame:0000000000008920                 db  8Fh
.eh_frame:0000000000008921                 db    2
.eh_frame:0000000000008922                 db  42h ; B
.eh_frame:0000000000008923                 db  0Eh
.eh_frame:0000000000008924                 db  18h
.eh_frame:0000000000008925                 db  8Eh
.eh_frame:0000000000008926                 db    3
.eh_frame:0000000000008927                 db  45h ; E
.eh_frame:0000000000008928                 db  0Eh
.eh_frame:0000000000008929                 db  20h
.eh_frame:000000000000892A                 db  8Dh
.eh_frame:000000000000892B                 db    4
.eh_frame:000000000000892C                 db  42h ; B
.eh_frame:000000000000892D                 db  0Eh
.eh_frame:000000000000892E                 db  28h ; (
.eh_frame:000000000000892F                 db  8Ch
.eh_frame:0000000000008930                 db    5
.eh_frame:0000000000008931                 db  41h ; A
.eh_frame:0000000000008932                 db  0Eh
.eh_frame:0000000000008933                 db  30h ; 0
.eh_frame:0000000000008934                 db  86h
.eh_frame:0000000000008935                 db    6
.eh_frame:0000000000008936                 db  41h ; A
.eh_frame:0000000000008937                 db  0Eh
.eh_frame:0000000000008938                 db  38h ; 8
.eh_frame:0000000000008939                 db  83h
.eh_frame:000000000000893A                 db    7
.eh_frame:000000000000893B                 db  4Fh ; O
.eh_frame:000000000000893C                 db  0Eh
.eh_frame:000000000000893D                 db 0F0h
.eh_frame:000000000000893E                 db    1
.eh_frame:000000000000893F                 db    2
.eh_frame:0000000000008940                 db 0C9h
.eh_frame:0000000000008941                 db  0Ah
.eh_frame:0000000000008942                 db  0Eh
.eh_frame:0000000000008943                 db  38h ; 8
.eh_frame:0000000000008944                 db  41h ; A
.eh_frame:0000000000008945                 db  0Eh
.eh_frame:0000000000008946                 db  30h ; 0
.eh_frame:0000000000008947                 db  41h ; A
.eh_frame:0000000000008948                 db  0Eh
.eh_frame:0000000000008949                 db  28h ; (
.eh_frame:000000000000894A                 db  42h ; B
.eh_frame:000000000000894B                 db  0Eh
.eh_frame:000000000000894C                 db  20h
.eh_frame:000000000000894D                 db  42h ; B
.eh_frame:000000000000894E                 db  0Eh
.eh_frame:000000000000894F                 db  18h
.eh_frame:0000000000008950                 db  42h ; B
.eh_frame:0000000000008951                 db  0Eh
.eh_frame:0000000000008952                 db  10h
.eh_frame:0000000000008953                 db  42h ; B
.eh_frame:0000000000008954                 db  0Eh
.eh_frame:0000000000008955                 db    8
.eh_frame:0000000000008956                 db  41h ; A
.eh_frame:0000000000008957                 db  0Bh
.eh_frame:0000000000008958                 db  10h
.eh_frame:0000000000008959                 db    0
.eh_frame:000000000000895A                 db    0
.eh_frame:000000000000895B                 db    0
.eh_frame:000000000000895C                 db  7Ch ; |
.eh_frame:000000000000895D                 db    3
.eh_frame:000000000000895E                 db    0
.eh_frame:000000000000895F                 db    0
.eh_frame:0000000000008960                 db    0
.eh_frame:0000000000008961                 db 0B8h
.eh_frame:0000000000008962                 db 0FFh
.eh_frame:0000000000008963                 db 0FFh
.eh_frame:0000000000008964                 db    5
.eh_frame:0000000000008965                 db    0
.eh_frame:0000000000008966                 db    0
.eh_frame:0000000000008967                 db    0
.eh_frame:0000000000008968                 db    0
.eh_frame:0000000000008969                 db    0
.eh_frame:000000000000896A                 db    0
.eh_frame:000000000000896B                 db    0
.eh_frame:000000000000896C                 db  18h
.eh_frame:000000000000896D                 db    0
.eh_frame:000000000000896E                 db    0
.eh_frame:000000000000896F                 db    0
.eh_frame:0000000000008970                 db  90h
.eh_frame:0000000000008971                 db    3
.eh_frame:0000000000008972                 db    0
.eh_frame:0000000000008973                 db    0
.eh_frame:0000000000008974                 db 0FCh
.eh_frame:0000000000008975                 db 0B7h
.eh_frame:0000000000008976                 db 0FFh
.eh_frame:0000000000008977                 db 0FFh
.eh_frame:0000000000008978                 db  22h ; "
.eh_frame:0000000000008979                 db    0
.eh_frame:000000000000897A                 db    0
.eh_frame:000000000000897B                 db    0
.eh_frame:000000000000897C                 db    0
.eh_frame:000000000000897D                 db  46h ; F
.eh_frame:000000000000897E                 db  0Eh
.eh_frame:000000000000897F                 db  10h
.eh_frame:0000000000008980                 db  83h
.eh_frame:0000000000008981                 db    2
.eh_frame:0000000000008982                 db  4Eh ; N
.eh_frame:0000000000008983                 db 0C3h
.eh_frame:0000000000008984                 db  0Eh
.eh_frame:0000000000008985                 db    8
.eh_frame:0000000000008986                 db    0
.eh_frame:0000000000008987                 db    0
.eh_frame:0000000000008988                 db  2Ch ; ,
.eh_frame:0000000000008989                 db    0
.eh_frame:000000000000898A                 db    0
.eh_frame:000000000000898B                 db    0
.eh_frame:000000000000898C                 db 0ACh
.eh_frame:000000000000898D                 db    3
.eh_frame:000000000000898E                 db    0
.eh_frame:000000000000898F                 db    0
.eh_frame:0000000000008990                 db  10h
.eh_frame:0000000000008991                 db 0B8h
.eh_frame:0000000000008992                 db 0FFh
.eh_frame:0000000000008993                 db 0FFh
.eh_frame:0000000000008994                 db  93h
.eh_frame:0000000000008995                 db    0
.eh_frame:0000000000008996                 db    0
.eh_frame:0000000000008997                 db    0
.eh_frame:0000000000008998                 db    0
.eh_frame:0000000000008999                 db  42h ; B
.eh_frame:000000000000899A                 db  0Eh
.eh_frame:000000000000899B                 db  10h
.eh_frame:000000000000899C                 db  8Ch
.eh_frame:000000000000899D                 db    2
.eh_frame:000000000000899E                 db  41h ; A
.eh_frame:000000000000899F                 db  0Eh
.eh_frame:00000000000089A0                 db  18h
.eh_frame:00000000000089A1                 db  86h
.eh_frame:00000000000089A2                 db    3
.eh_frame:00000000000089A3                 db  44h ; D
.eh_frame:00000000000089A4                 db  0Eh
.eh_frame:00000000000089A5                 db  20h
.eh_frame:00000000000089A6                 db  83h
.eh_frame:00000000000089A7                 db    4
.eh_frame:00000000000089A8                 db  5Eh ; ^
.eh_frame:00000000000089A9                 db  0Ah
.eh_frame:00000000000089AA                 db  0Eh
.eh_frame:00000000000089AB                 db  18h
.eh_frame:00000000000089AC                 db  41h ; A
.eh_frame:00000000000089AD                 db  0Eh
.eh_frame:00000000000089AE                 db  10h
.eh_frame:00000000000089AF                 db  42h ; B
.eh_frame:00000000000089B0                 db  0Eh
.eh_frame:00000000000089B1                 db    8
.eh_frame:00000000000089B2                 db  48h ; H
.eh_frame:00000000000089B3                 db  0Bh
.eh_frame:00000000000089B4                 db    0
.eh_frame:00000000000089B5                 db    0
.eh_frame:00000000000089B6                 db    0
.eh_frame:00000000000089B7                 db    0
.eh_frame:00000000000089B8                 db  1Ch
.eh_frame:00000000000089B9                 db    0
.eh_frame:00000000000089BA                 db    0
.eh_frame:00000000000089BB                 db    0
.eh_frame:00000000000089BC                 db 0DCh
.eh_frame:00000000000089BD                 db    3
.eh_frame:00000000000089BE                 db    0
.eh_frame:00000000000089BF                 db    0
.eh_frame:00000000000089C0                 db  80h
.eh_frame:00000000000089C1                 db 0B8h
.eh_frame:00000000000089C2                 db 0FFh
.eh_frame:00000000000089C3                 db 0FFh
.eh_frame:00000000000089C4                 db  9Fh
.eh_frame:00000000000089C5                 db    0
.eh_frame:00000000000089C6                 db    0
.eh_frame:00000000000089C7                 db    0
.eh_frame:00000000000089C8                 db    0
.eh_frame:00000000000089C9                 db  44h ; D
.eh_frame:00000000000089CA                 db  0Eh
.eh_frame:00000000000089CB                 db  10h
.eh_frame:00000000000089CC                 db  83h
.eh_frame:00000000000089CD                 db    2
.eh_frame:00000000000089CE                 db    2
.eh_frame:00000000000089CF                 db  78h ; x
.eh_frame:00000000000089D0                 db  0Ah
.eh_frame:00000000000089D1                 db  0Eh
.eh_frame:00000000000089D2                 db    8
.eh_frame:00000000000089D3                 db  41h ; A
.eh_frame:00000000000089D4                 db  0Bh
.eh_frame:00000000000089D5                 db    0
.eh_frame:00000000000089D6                 db    0
.eh_frame:00000000000089D7                 db    0
.eh_frame:00000000000089D8                 db  40h ; @
.eh_frame:00000000000089D9                 db    0
.eh_frame:00000000000089DA                 db    0
.eh_frame:00000000000089DB                 db    0
.eh_frame:00000000000089DC                 db 0FCh
.eh_frame:00000000000089DD                 db    3
.eh_frame:00000000000089DE                 db    0
.eh_frame:00000000000089DF                 db    0
.eh_frame:00000000000089E0                 db    0
.eh_frame:00000000000089E1                 db 0B9h
.eh_frame:00000000000089E2                 db 0FFh
.eh_frame:00000000000089E3                 db 0FFh
.eh_frame:00000000000089E4                 db 0E7h
.eh_frame:00000000000089E5                 db    0
.eh_frame:00000000000089E6                 db    0
.eh_frame:00000000000089E7                 db    0
.eh_frame:00000000000089E8                 db    0
.eh_frame:00000000000089E9                 db  41h ; A
.eh_frame:00000000000089EA                 db  0Eh
.eh_frame:00000000000089EB                 db  10h
.eh_frame:00000000000089EC                 db  86h
.eh_frame:00000000000089ED                 db    2
.eh_frame:00000000000089EE                 db  41h ; A
.eh_frame:00000000000089EF                 db  0Eh
.eh_frame:00000000000089F0                 db  18h
.eh_frame:00000000000089F1                 db  83h
.eh_frame:00000000000089F2                 db    3
.eh_frame:00000000000089F3                 db  49h ; I
.eh_frame:00000000000089F4                 db  0Eh
.eh_frame:00000000000089F5                 db  20h
.eh_frame:00000000000089F6                 db  6Eh ; n
.eh_frame:00000000000089F7                 db  0Ah
.eh_frame:00000000000089F8                 db  0Eh
.eh_frame:00000000000089F9                 db  18h
.eh_frame:00000000000089FA                 db  41h ; A
.eh_frame:00000000000089FB                 db  0Eh
.eh_frame:00000000000089FC                 db  10h
.eh_frame:00000000000089FD                 db  41h ; A
.eh_frame:00000000000089FE                 db  0Eh
.eh_frame:00000000000089FF                 db    8
.eh_frame:0000000000008A00                 db  45h ; E
.eh_frame:0000000000008A01                 db  0Bh
.eh_frame:0000000000008A02                 db    2
.eh_frame:0000000000008A03                 db  4Ah ; J
.eh_frame:0000000000008A04                 db  0Ah
.eh_frame:0000000000008A05                 db  0Eh
.eh_frame:0000000000008A06                 db  18h
.eh_frame:0000000000008A07                 db  41h ; A
.eh_frame:0000000000008A08                 db  0Eh
.eh_frame:0000000000008A09                 db  10h
.eh_frame:0000000000008A0A                 db  41h ; A
.eh_frame:0000000000008A0B                 db  0Eh
.eh_frame:0000000000008A0C                 db    8
.eh_frame:0000000000008A0D                 db  44h ; D
.eh_frame:0000000000008A0E                 db  0Bh
.eh_frame:0000000000008A0F                 db    2
.eh_frame:0000000000008A10                 db  54h ; T
.eh_frame:0000000000008A11                 db  0Eh
.eh_frame:0000000000008A12                 db  18h
.eh_frame:0000000000008A13                 db  41h ; A
.eh_frame:0000000000008A14                 db  0Eh
.eh_frame:0000000000008A15                 db  10h
.eh_frame:0000000000008A16                 db  41h ; A
.eh_frame:0000000000008A17                 db  0Eh
.eh_frame:0000000000008A18                 db    8
.eh_frame:0000000000008A19                 db    0
.eh_frame:0000000000008A1A                 db    0
.eh_frame:0000000000008A1B                 db    0
.eh_frame:0000000000008A1C                 db  74h ; t
.eh_frame:0000000000008A1D                 db    0
.eh_frame:0000000000008A1E                 db    0
.eh_frame:0000000000008A1F                 db    0
.eh_frame:0000000000008A20                 db  40h ; @
.eh_frame:0000000000008A21                 db    4
.eh_frame:0000000000008A22                 db    0
.eh_frame:0000000000008A23                 db    0
.eh_frame:0000000000008A24                 db 0ACh
.eh_frame:0000000000008A25                 db 0B9h
.eh_frame:0000000000008A26                 db 0FFh
.eh_frame:0000000000008A27                 db 0FFh
.eh_frame:0000000000008A28                 db  34h ; 4
.eh_frame:0000000000008A29                 db  12h
.eh_frame:0000000000008A2A                 db    0
.eh_frame:0000000000008A2B                 db    0
.eh_frame:0000000000008A2C                 db    0
.eh_frame:0000000000008A2D                 db  42h ; B
.eh_frame:0000000000008A2E                 db  0Eh
.eh_frame:0000000000008A2F                 db  10h
.eh_frame:0000000000008A30                 db  8Fh
.eh_frame:0000000000008A31                 db    2
.eh_frame:0000000000008A32                 db  42h ; B
.eh_frame:0000000000008A33                 db  0Eh
.eh_frame:0000000000008A34                 db  18h
.eh_frame:0000000000008A35                 db  8Eh
.eh_frame:0000000000008A36                 db    3
.eh_frame:0000000000008A37                 db  45h ; E
.eh_frame:0000000000008A38                 db  0Eh
.eh_frame:0000000000008A39                 db  20h
.eh_frame:0000000000008A3A                 db  8Dh
.eh_frame:0000000000008A3B                 db    4
.eh_frame:0000000000008A3C                 db  42h ; B
.eh_frame:0000000000008A3D                 db  0Eh
.eh_frame:0000000000008A3E                 db  28h ; (
.eh_frame:0000000000008A3F                 db  8Ch
.eh_frame:0000000000008A40                 db    5
.eh_frame:0000000000008A41                 db  44h ; D
.eh_frame:0000000000008A42                 db  0Eh
.eh_frame:0000000000008A43                 db  30h ; 0
.eh_frame:0000000000008A44                 db  86h
.eh_frame:0000000000008A45                 db    6
.eh_frame:0000000000008A46                 db  41h ; A
.eh_frame:0000000000008A47                 db  0Eh
.eh_frame:0000000000008A48                 db  38h ; 8
.eh_frame:0000000000008A49                 db  83h
.eh_frame:0000000000008A4A                 db    7
.eh_frame:0000000000008A4B                 db  53h ; S
.eh_frame:0000000000008A4C                 db  0Eh
.eh_frame:0000000000008A4D                 db 0F0h
.eh_frame:0000000000008A4E                 db    1
.eh_frame:0000000000008A4F                 db    3
.eh_frame:0000000000008A50                 db  81h
.eh_frame:0000000000008A51                 db  0Bh
.eh_frame:0000000000008A52                 db  0Eh
.eh_frame:0000000000008A53                 db 0F8h
.eh_frame:0000000000008A54                 db    1
.eh_frame:0000000000008A55                 db  4Ah ; J
.eh_frame:0000000000008A56                 db  0Eh
.eh_frame:0000000000008A57                 db  80h
.eh_frame:0000000000008A58                 db    2
.eh_frame:0000000000008A59                 db  44h ; D
.eh_frame:0000000000008A5A                 db  0Eh
.eh_frame:0000000000008A5B                 db  88h
.eh_frame:0000000000008A5C                 db    2
.eh_frame:0000000000008A5D                 db  45h ; E
.eh_frame:0000000000008A5E                 db  0Eh
.eh_frame:0000000000008A5F                 db  90h
.eh_frame:0000000000008A60                 db    2
.eh_frame:0000000000008A61                 db  5Fh ; _
.eh_frame:0000000000008A62                 db  0Eh
.eh_frame:0000000000008A63                 db 0F0h
.eh_frame:0000000000008A64                 db    1
.eh_frame:0000000000008A65                 db  64h ; d
.eh_frame:0000000000008A66                 db  0Ah
.eh_frame:0000000000008A67                 db  0Eh
.eh_frame:0000000000008A68                 db  38h ; 8
.eh_frame:0000000000008A69                 db  41h ; A
.eh_frame:0000000000008A6A                 db  0Eh
.eh_frame:0000000000008A6B                 db  30h ; 0
.eh_frame:0000000000008A6C                 db  41h ; A
.eh_frame:0000000000008A6D                 db  0Eh
.eh_frame:0000000000008A6E                 db  28h ; (
.eh_frame:0000000000008A6F                 db  42h ; B
.eh_frame:0000000000008A70                 db  0Eh
.eh_frame:0000000000008A71                 db  20h
.eh_frame:0000000000008A72                 db  42h ; B
.eh_frame:0000000000008A73                 db  0Eh
.eh_frame:0000000000008A74                 db  18h
.eh_frame:0000000000008A75                 db  42h ; B
.eh_frame:0000000000008A76                 db  0Eh
.eh_frame:0000000000008A77                 db  10h
.eh_frame:0000000000008A78                 db  42h ; B
.eh_frame:0000000000008A79                 db  0Eh
.eh_frame:0000000000008A7A                 db    8
.eh_frame:0000000000008A7B                 db  44h ; D
.eh_frame:0000000000008A7C                 db  0Bh
.eh_frame:0000000000008A7D                 db    3
.eh_frame:0000000000008A7E                 db  99h
.eh_frame:0000000000008A7F                 db    5
.eh_frame:0000000000008A80                 db  0Eh
.eh_frame:0000000000008A81                 db 0F8h
.eh_frame:0000000000008A82                 db    1
.eh_frame:0000000000008A83                 db  4Dh ; M
.eh_frame:0000000000008A84                 db  0Eh
.eh_frame:0000000000008A85                 db  80h
.eh_frame:0000000000008A86                 db    2
.eh_frame:0000000000008A87                 db  44h ; D
.eh_frame:0000000000008A88                 db  0Eh
.eh_frame:0000000000008A89                 db  88h
.eh_frame:0000000000008A8A                 db    2
.eh_frame:0000000000008A8B                 db  47h ; G
.eh_frame:0000000000008A8C                 db  0Eh
.eh_frame:0000000000008A8D                 db  90h
.eh_frame:0000000000008A8E                 db    2
.eh_frame:0000000000008A8F                 db  5Bh ; [
.eh_frame:0000000000008A90                 db  0Eh
.eh_frame:0000000000008A91                 db 0F0h
.eh_frame:0000000000008A92                 db    1
.eh_frame:0000000000008A93                 db    0
.eh_frame:0000000000008A94                 db  68h ; h
.eh_frame:0000000000008A95                 db    0
.eh_frame:0000000000008A96                 db    0
.eh_frame:0000000000008A97                 db    0
.eh_frame:0000000000008A98                 db 0B8h
.eh_frame:0000000000008A99                 db    4
.eh_frame:0000000000008A9A                 db    0
.eh_frame:0000000000008A9B                 db    0
.eh_frame:0000000000008A9C                 db  74h ; t
.eh_frame:0000000000008A9D                 db 0CBh
.eh_frame:0000000000008A9E                 db 0FFh
.eh_frame:0000000000008A9F                 db 0FFh
.eh_frame:0000000000008AA0                 db 0ABh
.eh_frame:0000000000008AA1                 db    1
.eh_frame:0000000000008AA2                 db    0
.eh_frame:0000000000008AA3                 db    0
.eh_frame:0000000000008AA4                 db    0
.eh_frame:0000000000008AA5                 db  42h ; B
.eh_frame:0000000000008AA6                 db  0Eh
.eh_frame:0000000000008AA7                 db  10h
.eh_frame:0000000000008AA8                 db  8Fh
.eh_frame:0000000000008AA9                 db    2
.eh_frame:0000000000008AAA                 db  42h ; B
.eh_frame:0000000000008AAB                 db  0Eh
.eh_frame:0000000000008AAC                 db  18h
.eh_frame:0000000000008AAD                 db  8Eh
.eh_frame:0000000000008AAE                 db    3
.eh_frame:0000000000008AAF                 db  45h ; E
.eh_frame:0000000000008AB0                 db  0Eh
.eh_frame:0000000000008AB1                 db  20h
.eh_frame:0000000000008AB2                 db  8Dh
.eh_frame:0000000000008AB3                 db    4
.eh_frame:0000000000008AB4                 db  42h ; B
.eh_frame:0000000000008AB5                 db  0Eh
.eh_frame:0000000000008AB6                 db  28h ; (
.eh_frame:0000000000008AB7                 db  8Ch
.eh_frame:0000000000008AB8                 db    5
.eh_frame:0000000000008AB9                 db  44h ; D
.eh_frame:0000000000008ABA                 db  0Eh
.eh_frame:0000000000008ABB                 db  30h ; 0
.eh_frame:0000000000008ABC                 db  86h
.eh_frame:0000000000008ABD                 db    6
.eh_frame:0000000000008ABE                 db  41h ; A
.eh_frame:0000000000008ABF                 db  0Eh
.eh_frame:0000000000008AC0                 db  38h ; 8
.eh_frame:0000000000008AC1                 db  83h
.eh_frame:0000000000008AC2                 db    7
.eh_frame:0000000000008AC3                 db  47h ; G
.eh_frame:0000000000008AC4                 db  0Eh
.eh_frame:0000000000008AC5                 db  60h ; `
.eh_frame:0000000000008AC6                 db    2
.eh_frame:0000000000008AC7                 db  99h
.eh_frame:0000000000008AC8                 db  0Eh
.eh_frame:0000000000008AC9                 db  68h ; h
.eh_frame:0000000000008ACA                 db  5Fh ; _
.eh_frame:0000000000008ACB                 db  0Eh
.eh_frame:0000000000008ACC                 db  70h ; p
.eh_frame:0000000000008ACD                 db  46h ; F
.eh_frame:0000000000008ACE                 db  0Eh
.eh_frame:0000000000008ACF                 db  78h ; x
.eh_frame:0000000000008AD0                 db  42h ; B
.eh_frame:0000000000008AD1                 db  0Eh
.eh_frame:0000000000008AD2                 db  80h
.eh_frame:0000000000008AD3                 db    1
.eh_frame:0000000000008AD4                 db  59h ; Y
.eh_frame:0000000000008AD5                 db  0Eh
.eh_frame:0000000000008AD6                 db  60h ; `
.eh_frame:0000000000008AD7                 db    2
.eh_frame:0000000000008AD8                 db  40h ; @
.eh_frame:0000000000008AD9                 db  0Eh
.eh_frame:0000000000008ADA                 db  68h ; h
.eh_frame:0000000000008ADB                 db  4Bh ; K
.eh_frame:0000000000008ADC                 db  0Eh
.eh_frame:0000000000008ADD                 db  70h ; p
.eh_frame:0000000000008ADE                 db  43h ; C
.eh_frame:0000000000008ADF                 db  0Eh
.eh_frame:0000000000008AE0                 db  78h ; x
.eh_frame:0000000000008AE1                 db  45h ; E
.eh_frame:0000000000008AE2                 db  0Eh
.eh_frame:0000000000008AE3                 db  80h
.eh_frame:0000000000008AE4                 db    1
.eh_frame:0000000000008AE5                 db  5Eh ; ^
.eh_frame:0000000000008AE6                 db  0Eh
.eh_frame:0000000000008AE7                 db  60h ; `
.eh_frame:0000000000008AE8                 db  4Ch ; L
.eh_frame:0000000000008AE9                 db  0Ah
.eh_frame:0000000000008AEA                 db  0Eh
.eh_frame:0000000000008AEB                 db  38h ; 8
.eh_frame:0000000000008AEC                 db  44h ; D
.eh_frame:0000000000008AED                 db  0Eh
.eh_frame:0000000000008AEE                 db  30h ; 0
.eh_frame:0000000000008AEF                 db  41h ; A
.eh_frame:0000000000008AF0                 db  0Eh
.eh_frame:0000000000008AF1                 db  28h ; (
.eh_frame:0000000000008AF2                 db  42h ; B
.eh_frame:0000000000008AF3                 db  0Eh
.eh_frame:0000000000008AF4                 db  20h
.eh_frame:0000000000008AF5                 db  42h ; B
.eh_frame:0000000000008AF6                 db  0Eh
.eh_frame:0000000000008AF7                 db  18h
.eh_frame:0000000000008AF8                 db  42h ; B
.eh_frame:0000000000008AF9                 db  0Eh
.eh_frame:0000000000008AFA                 db  10h
.eh_frame:0000000000008AFB                 db  42h ; B
.eh_frame:0000000000008AFC                 db  0Eh
.eh_frame:0000000000008AFD                 db    8
.eh_frame:0000000000008AFE                 db  46h ; F
.eh_frame:0000000000008AFF                 db  0Bh
.eh_frame:0000000000008B00                 db  28h ; (
.eh_frame:0000000000008B01                 db    0
.eh_frame:0000000000008B02                 db    0
.eh_frame:0000000000008B03                 db    0
.eh_frame:0000000000008B04                 db  24h ; $
.eh_frame:0000000000008B05                 db    5
.eh_frame:0000000000008B06                 db    0
.eh_frame:0000000000008B07                 db    0
.eh_frame:0000000000008B08                 db 0B8h
.eh_frame:0000000000008B09                 db 0CCh
.eh_frame:0000000000008B0A                 db 0FFh
.eh_frame:0000000000008B0B                 db 0FFh
.eh_frame:0000000000008B0C                 db  36h ; 6
.eh_frame:0000000000008B0D                 db    0
.eh_frame:0000000000008B0E                 db    0
.eh_frame:0000000000008B0F                 db    0
.eh_frame:0000000000008B10                 db    0
.eh_frame:0000000000008B11                 db  42h ; B
.eh_frame:0000000000008B12                 db  0Eh
.eh_frame:0000000000008B13                 db  10h
.eh_frame:0000000000008B14                 db  8Ch
.eh_frame:0000000000008B15                 db    2
.eh_frame:0000000000008B16                 db  41h ; A
.eh_frame:0000000000008B17                 db  0Eh
.eh_frame:0000000000008B18                 db  18h
.eh_frame:0000000000008B19                 db  86h
.eh_frame:0000000000008B1A                 db    3
.eh_frame:0000000000008B1B                 db  41h ; A
.eh_frame:0000000000008B1C                 db  0Eh
.eh_frame:0000000000008B1D                 db  20h
.eh_frame:0000000000008B1E                 db  83h
.eh_frame:0000000000008B1F                 db    4
.eh_frame:0000000000008B20                 db  6Eh ; n
.eh_frame:0000000000008B21                 db  0Eh
.eh_frame:0000000000008B22                 db  18h
.eh_frame:0000000000008B23                 db  41h ; A
.eh_frame:0000000000008B24                 db  0Eh
.eh_frame:0000000000008B25                 db  10h
.eh_frame:0000000000008B26                 db  42h ; B
.eh_frame:0000000000008B27                 db  0Eh
.eh_frame:0000000000008B28                 db    8
.eh_frame:0000000000008B29                 db    0
.eh_frame:0000000000008B2A                 db    0
.eh_frame:0000000000008B2B                 db    0
.eh_frame:0000000000008B2C                 db  10h
.eh_frame:0000000000008B2D                 db    0
.eh_frame:0000000000008B2E                 db    0
.eh_frame:0000000000008B2F                 db    0
.eh_frame:0000000000008B30                 db  50h ; P
.eh_frame:0000000000008B31                 db    5
.eh_frame:0000000000008B32                 db    0
.eh_frame:0000000000008B33                 db    0
.eh_frame:0000000000008B34                 db 0CCh
.eh_frame:0000000000008B35                 db 0CCh
.eh_frame:0000000000008B36                 db 0FFh
.eh_frame:0000000000008B37                 db 0FFh
.eh_frame:0000000000008B38                 db  11h
.eh_frame:0000000000008B39                 db    0
.eh_frame:0000000000008B3A                 db    0
.eh_frame:0000000000008B3B                 db    0
.eh_frame:0000000000008B3C                 db    0
.eh_frame:0000000000008B3D                 db    0
.eh_frame:0000000000008B3E                 db    0
.eh_frame:0000000000008B3F                 db    0
.eh_frame:0000000000008B40                 db  10h
.eh_frame:0000000000008B41                 db    0
.eh_frame:0000000000008B42                 db    0
.eh_frame:0000000000008B43                 db    0
.eh_frame:0000000000008B44                 db  64h ; d
.eh_frame:0000000000008B45                 db    5
.eh_frame:0000000000008B46                 db    0
.eh_frame:0000000000008B47                 db    0
.eh_frame:0000000000008B48                 db 0D8h
.eh_frame:0000000000008B49                 db 0CCh
.eh_frame:0000000000008B4A                 db 0FFh
.eh_frame:0000000000008B4B                 db 0FFh
.eh_frame:0000000000008B4C                 db  11h
.eh_frame:0000000000008B4D                 db    0
.eh_frame:0000000000008B4E                 db    0
.eh_frame:0000000000008B4F                 db    0
.eh_frame:0000000000008B50                 db    0
.eh_frame:0000000000008B51                 db    0
.eh_frame:0000000000008B52                 db    0
.eh_frame:0000000000008B53                 db    0
.eh_frame:0000000000008B54                 db  10h
.eh_frame:0000000000008B55                 db    0
.eh_frame:0000000000008B56                 db    0
.eh_frame:0000000000008B57                 db    0
.eh_frame:0000000000008B58                 db  78h ; x
.eh_frame:0000000000008B59                 db    5
.eh_frame:0000000000008B5A                 db    0
.eh_frame:0000000000008B5B                 db    0
.eh_frame:0000000000008B5C                 db 0E4h
.eh_frame:0000000000008B5D                 db 0CCh
.eh_frame:0000000000008B5E                 db 0FFh
.eh_frame:0000000000008B5F                 db 0FFh
.eh_frame:0000000000008B60                 db  35h ; 5
.eh_frame:0000000000008B61                 db    0
.eh_frame:0000000000008B62                 db    0
.eh_frame:0000000000008B63                 db    0
.eh_frame:0000000000008B64                 db    0
.eh_frame:0000000000008B65                 db    0
.eh_frame:0000000000008B66                 db    0
.eh_frame:0000000000008B67                 db    0
.eh_frame:0000000000008B68                 db  10h
.eh_frame:0000000000008B69                 db    0
.eh_frame:0000000000008B6A                 db    0
.eh_frame:0000000000008B6B                 db    0
.eh_frame:0000000000008B6C                 db  8Ch
.eh_frame:0000000000008B6D                 db    5
.eh_frame:0000000000008B6E                 db    0
.eh_frame:0000000000008B6F                 db    0
.eh_frame:0000000000008B70                 db  10h
.eh_frame:0000000000008B71                 db 0CDh
.eh_frame:0000000000008B72                 db 0FFh
.eh_frame:0000000000008B73                 db 0FFh
.eh_frame:0000000000008B74                 db  15h
.eh_frame:0000000000008B75                 db    0
.eh_frame:0000000000008B76                 db    0
.eh_frame:0000000000008B77                 db    0
.eh_frame:0000000000008B78                 db    0
.eh_frame:0000000000008B79                 db    0
.eh_frame:0000000000008B7A                 db    0
.eh_frame:0000000000008B7B                 db    0
.eh_frame:0000000000008B7C                 db  10h
.eh_frame:0000000000008B7D                 db    0
.eh_frame:0000000000008B7E                 db    0
.eh_frame:0000000000008B7F                 db    0
.eh_frame:0000000000008B80                 db 0A0h
.eh_frame:0000000000008B81                 db    5
.eh_frame:0000000000008B82                 db    0
.eh_frame:0000000000008B83                 db    0
.eh_frame:0000000000008B84                 db  1Ch
.eh_frame:0000000000008B85                 db 0CDh
.eh_frame:0000000000008B86                 db 0FFh
.eh_frame:0000000000008B87                 db 0FFh
.eh_frame:0000000000008B88                 db  30h ; 0
.eh_frame:0000000000008B89                 db    0
.eh_frame:0000000000008B8A                 db    0
.eh_frame:0000000000008B8B                 db    0
.eh_frame:0000000000008B8C                 db    0
.eh_frame:0000000000008B8D                 db  6Bh ; k
.eh_frame:0000000000008B8E                 db  0Eh
.eh_frame:0000000000008B8F                 db  10h
.eh_frame:0000000000008B90                 db  50h ; P
.eh_frame:0000000000008B91                 db    0
.eh_frame:0000000000008B92                 db    0
.eh_frame:0000000000008B93                 db    0
.eh_frame:0000000000008B94                 db 0B4h
.eh_frame:0000000000008B95                 db    5
.eh_frame:0000000000008B96                 db    0
.eh_frame:0000000000008B97                 db    0
.eh_frame:0000000000008B98                 db  38h ; 8
.eh_frame:0000000000008B99                 db 0CDh
.eh_frame:0000000000008B9A                 db 0FFh
.eh_frame:0000000000008B9B                 db 0FFh
.eh_frame:0000000000008B9C                 db  74h ; t
.eh_frame:0000000000008B9D                 db    0
.eh_frame:0000000000008B9E                 db    0
.eh_frame:0000000000008B9F                 db    0
.eh_frame:0000000000008BA0                 db    0
.eh_frame:0000000000008BA1                 db  42h ; B
.eh_frame:0000000000008BA2                 db  0Eh
.eh_frame:0000000000008BA3                 db  10h
.eh_frame:0000000000008BA4                 db  8Fh
.eh_frame:0000000000008BA5                 db    2
.eh_frame:0000000000008BA6                 db  42h ; B
.eh_frame:0000000000008BA7                 db  0Eh
.eh_frame:0000000000008BA8                 db  18h
.eh_frame:0000000000008BA9                 db  8Eh
.eh_frame:0000000000008BAA                 db    3
.eh_frame:0000000000008BAB                 db  49h ; I
.eh_frame:0000000000008BAC                 db  0Eh
.eh_frame:0000000000008BAD                 db  20h
.eh_frame:0000000000008BAE                 db  8Dh
.eh_frame:0000000000008BAF                 db    4
.eh_frame:0000000000008BB0                 db  42h ; B
.eh_frame:0000000000008BB1                 db  0Eh
.eh_frame:0000000000008BB2                 db  28h ; (
.eh_frame:0000000000008BB3                 db  8Ch
.eh_frame:0000000000008BB4                 db    5
.eh_frame:0000000000008BB5                 db  44h ; D
.eh_frame:0000000000008BB6                 db  0Eh
.eh_frame:0000000000008BB7                 db  30h ; 0
.eh_frame:0000000000008BB8                 db  86h
.eh_frame:0000000000008BB9                 db    6
.eh_frame:0000000000008BBA                 db  41h ; A
.eh_frame:0000000000008BBB                 db  0Eh
.eh_frame:0000000000008BBC                 db  38h ; 8
.eh_frame:0000000000008BBD                 db  83h
.eh_frame:0000000000008BBE                 db    7
.eh_frame:0000000000008BBF                 db  4Dh ; M
.eh_frame:0000000000008BC0                 db  0Eh
.eh_frame:0000000000008BC1                 db  50h ; P
.eh_frame:0000000000008BC2                 db  5Fh ; _
.eh_frame:0000000000008BC3                 db  0Eh
.eh_frame:0000000000008BC4                 db  58h ; X
.eh_frame:0000000000008BC5                 db  47h ; G
.eh_frame:0000000000008BC6                 db  0Eh
.eh_frame:0000000000008BC7                 db  60h ; `
.eh_frame:0000000000008BC8                 db  46h ; F
.eh_frame:0000000000008BC9                 db  0Eh
.eh_frame:0000000000008BCA                 db  68h ; h
.eh_frame:0000000000008BCB                 db  44h ; D
.eh_frame:0000000000008BCC                 db  0Eh
.eh_frame:0000000000008BCD                 db  70h ; p
.eh_frame:0000000000008BCE                 db  58h ; X
.eh_frame:0000000000008BCF                 db  0Eh
.eh_frame:0000000000008BD0                 db  38h ; 8
.eh_frame:0000000000008BD1                 db  41h ; A
.eh_frame:0000000000008BD2                 db  0Eh
.eh_frame:0000000000008BD3                 db  30h ; 0
.eh_frame:0000000000008BD4                 db  41h ; A
.eh_frame:0000000000008BD5                 db  0Eh
.eh_frame:0000000000008BD6                 db  28h ; (
.eh_frame:0000000000008BD7                 db  42h ; B
.eh_frame:0000000000008BD8                 db  0Eh
.eh_frame:0000000000008BD9                 db  20h
.eh_frame:0000000000008BDA                 db  42h ; B
.eh_frame:0000000000008BDB                 db  0Eh
.eh_frame:0000000000008BDC                 db  18h
.eh_frame:0000000000008BDD                 db  42h ; B
.eh_frame:0000000000008BDE                 db  0Eh
.eh_frame:0000000000008BDF                 db  10h
.eh_frame:0000000000008BE0                 db  42h ; B
.eh_frame:0000000000008BE1                 db  0Eh
.eh_frame:0000000000008BE2                 db    8
.eh_frame:0000000000008BE3                 db    0
.eh_frame:0000000000008BE4                 db  68h ; h
.eh_frame:0000000000008BE5                 db    0
.eh_frame:0000000000008BE6                 db    0
.eh_frame:0000000000008BE7                 db    0
.eh_frame:0000000000008BE8                 db    8
.eh_frame:0000000000008BE9                 db    6
.eh_frame:0000000000008BEA                 db    0
.eh_frame:0000000000008BEB                 db    0
.eh_frame:0000000000008BEC                 db  64h ; d
.eh_frame:0000000000008BED                 db 0CDh
.eh_frame:0000000000008BEE                 db 0FFh
.eh_frame:0000000000008BEF                 db 0FFh
.eh_frame:0000000000008BF0                 db 0E3h
.eh_frame:0000000000008BF1                 db    0
.eh_frame:0000000000008BF2                 db    0
.eh_frame:0000000000008BF3                 db    0
.eh_frame:0000000000008BF4                 db    0
.eh_frame:0000000000008BF5                 db  42h ; B
.eh_frame:0000000000008BF6                 db  0Eh
.eh_frame:0000000000008BF7                 db  10h
.eh_frame:0000000000008BF8                 db  8Fh
.eh_frame:0000000000008BF9                 db    2
.eh_frame:0000000000008BFA                 db  42h ; B
.eh_frame:0000000000008BFB                 db  0Eh
.eh_frame:0000000000008BFC                 db  18h
.eh_frame:0000000000008BFD                 db  8Eh
.eh_frame:0000000000008BFE                 db    3
.eh_frame:0000000000008BFF                 db  49h ; I
.eh_frame:0000000000008C00                 db  0Eh
.eh_frame:0000000000008C01                 db  20h
.eh_frame:0000000000008C02                 db  8Dh
.eh_frame:0000000000008C03                 db    4
.eh_frame:0000000000008C04                 db  42h ; B
.eh_frame:0000000000008C05                 db  0Eh
.eh_frame:0000000000008C06                 db  28h ; (
.eh_frame:0000000000008C07                 db  8Ch
.eh_frame:0000000000008C08                 db    5
.eh_frame:0000000000008C09                 db  44h ; D
.eh_frame:0000000000008C0A                 db  0Eh
.eh_frame:0000000000008C0B                 db  30h ; 0
.eh_frame:0000000000008C0C                 db  86h
.eh_frame:0000000000008C0D                 db    6
.eh_frame:0000000000008C0E                 db  41h ; A
.eh_frame:0000000000008C0F                 db  0Eh
.eh_frame:0000000000008C10                 db  38h ; 8
.eh_frame:0000000000008C11                 db  83h
.eh_frame:0000000000008C12                 db    7
.eh_frame:0000000000008C13                 db  4Dh ; M
.eh_frame:0000000000008C14                 db  0Eh
.eh_frame:0000000000008C15                 db  70h ; p
.eh_frame:0000000000008C16                 db  65h ; e
.eh_frame:0000000000008C17                 db  0Eh
.eh_frame:0000000000008C18                 db  78h ; x
.eh_frame:0000000000008C19                 db  4Dh ; M
.eh_frame:0000000000008C1A                 db  0Eh
.eh_frame:0000000000008C1B                 db  80h
.eh_frame:0000000000008C1C                 db    1
.eh_frame:0000000000008C1D                 db  46h ; F
.eh_frame:0000000000008C1E                 db  0Eh
.eh_frame:0000000000008C1F                 db  88h
.eh_frame:0000000000008C20                 db    1
.eh_frame:0000000000008C21                 db  42h ; B
.eh_frame:0000000000008C22                 db  0Eh
.eh_frame:0000000000008C23                 db  90h
.eh_frame:0000000000008C24                 db    1
.eh_frame:0000000000008C25                 db  5Eh ; ^
.eh_frame:0000000000008C26                 db  0Eh
.eh_frame:0000000000008C27                 db  70h ; p
.eh_frame:0000000000008C28                 db  56h ; V
.eh_frame:0000000000008C29                 db  0Eh
.eh_frame:0000000000008C2A                 db  78h ; x
.eh_frame:0000000000008C2B                 db  43h ; C
.eh_frame:0000000000008C2C                 db  0Eh
.eh_frame:0000000000008C2D                 db  80h
.eh_frame:0000000000008C2E                 db    1
.eh_frame:0000000000008C2F                 db  43h ; C
.eh_frame:0000000000008C30                 db  0Eh
.eh_frame:0000000000008C31                 db  88h
.eh_frame:0000000000008C32                 db    1
.eh_frame:0000000000008C33                 db  56h ; V
.eh_frame:0000000000008C34                 db  0Eh
.eh_frame:0000000000008C35                 db  90h
.eh_frame:0000000000008C36                 db    1
.eh_frame:0000000000008C37                 db  52h ; R
.eh_frame:0000000000008C38                 db  0Eh
.eh_frame:0000000000008C39                 db  70h ; p
.eh_frame:0000000000008C3A                 db  5Bh ; [
.eh_frame:0000000000008C3B                 db  0Eh
.eh_frame:0000000000008C3C                 db  38h ; 8
.eh_frame:0000000000008C3D                 db  41h ; A
.eh_frame:0000000000008C3E                 db  0Eh
.eh_frame:0000000000008C3F                 db  30h ; 0
.eh_frame:0000000000008C40                 db  41h ; A
.eh_frame:0000000000008C41                 db  0Eh
.eh_frame:0000000000008C42                 db  28h ; (
.eh_frame:0000000000008C43                 db  42h ; B
.eh_frame:0000000000008C44                 db  0Eh
.eh_frame:0000000000008C45                 db  20h
.eh_frame:0000000000008C46                 db  42h ; B
.eh_frame:0000000000008C47                 db  0Eh
.eh_frame:0000000000008C48                 db  18h
.eh_frame:0000000000008C49                 db  42h ; B
.eh_frame:0000000000008C4A                 db  0Eh
.eh_frame:0000000000008C4B                 db  10h
.eh_frame:0000000000008C4C                 db  42h ; B
.eh_frame:0000000000008C4D                 db  0Eh
.eh_frame:0000000000008C4E                 db    8
.eh_frame:0000000000008C4F                 db    0
.eh_frame:0000000000008C50                 db  10h
.eh_frame:0000000000008C51                 db    0
.eh_frame:0000000000008C52                 db    0
.eh_frame:0000000000008C53                 db    0
.eh_frame:0000000000008C54                 db  74h ; t
.eh_frame:0000000000008C55                 db    6
.eh_frame:0000000000008C56                 db    0
.eh_frame:0000000000008C57                 db    0
.eh_frame:0000000000008C58                 db 0E8h
.eh_frame:0000000000008C59                 db 0CDh
.eh_frame:0000000000008C5A                 db 0FFh
.eh_frame:0000000000008C5B                 db 0FFh
.eh_frame:0000000000008C5C                 db  0Ah
.eh_frame:0000000000008C5D                 db    0
.eh_frame:0000000000008C5E                 db    0
.eh_frame:0000000000008C5F                 db    0
.eh_frame:0000000000008C60                 db    0
.eh_frame:0000000000008C61                 db    0
.eh_frame:0000000000008C62                 db    0
.eh_frame:0000000000008C63                 db    0
.eh_frame:0000000000008C64                 db  28h ; (
.eh_frame:0000000000008C65                 db    0
.eh_frame:0000000000008C66                 db    0
.eh_frame:0000000000008C67                 db    0
.eh_frame:0000000000008C68                 db  88h
.eh_frame:0000000000008C69                 db    6
.eh_frame:0000000000008C6A                 db    0
.eh_frame:0000000000008C6B                 db    0
.eh_frame:0000000000008C6C                 db 0E4h
.eh_frame:0000000000008C6D                 db 0CDh
.eh_frame:0000000000008C6E                 db 0FFh
.eh_frame:0000000000008C6F                 db 0FFh
.eh_frame:0000000000008C70                 db  93h
.eh_frame:0000000000008C71                 db    0
.eh_frame:0000000000008C72                 db    0
.eh_frame:0000000000008C73                 db    0
.eh_frame:0000000000008C74                 db    0
.eh_frame:0000000000008C75                 db  48h ; H
.eh_frame:0000000000008C76                 db  0Eh
.eh_frame:0000000000008C77                 db  10h
.eh_frame:0000000000008C78                 db  8Ch
.eh_frame:0000000000008C79                 db    2
.eh_frame:0000000000008C7A                 db  48h ; H
.eh_frame:0000000000008C7B                 db  0Eh
.eh_frame:0000000000008C7C                 db  18h
.eh_frame:0000000000008C7D                 db  86h
.eh_frame:0000000000008C7E                 db    3
.eh_frame:0000000000008C7F                 db  41h ; A
.eh_frame:0000000000008C80                 db  0Eh
.eh_frame:0000000000008C81                 db  20h
.eh_frame:0000000000008C82                 db  83h
.eh_frame:0000000000008C83                 db    4
.eh_frame:0000000000008C84                 db    2
.eh_frame:0000000000008C85                 db  74h ; t
.eh_frame:0000000000008C86                 db  0Eh
.eh_frame:0000000000008C87                 db  18h
.eh_frame:0000000000008C88                 db  4Bh ; K
.eh_frame:0000000000008C89                 db  0Eh
.eh_frame:0000000000008C8A                 db  10h
.eh_frame:0000000000008C8B                 db  42h ; B
.eh_frame:0000000000008C8C                 db  0Eh
.eh_frame:0000000000008C8D                 db    8
.eh_frame:0000000000008C8E                 db    0
.eh_frame:0000000000008C8F                 db    0
.eh_frame:0000000000008C90                 db  10h
.eh_frame:0000000000008C91                 db    0
.eh_frame:0000000000008C92                 db    0
.eh_frame:0000000000008C93                 db    0
.eh_frame:0000000000008C94                 db 0B4h
.eh_frame:0000000000008C95                 db    6
.eh_frame:0000000000008C96                 db    0
.eh_frame:0000000000008C97                 db    0
.eh_frame:0000000000008C98                 db  58h ; X
.eh_frame:0000000000008C99                 db 0CEh
.eh_frame:0000000000008C9A                 db 0FFh
.eh_frame:0000000000008C9B                 db 0FFh
.eh_frame:0000000000008C9C                 db  13h
.eh_frame:0000000000008C9D                 db    0
.eh_frame:0000000000008C9E                 db    0
.eh_frame:0000000000008C9F                 db    0
.eh_frame:0000000000008CA0                 db    0
.eh_frame:0000000000008CA1                 db    0
.eh_frame:0000000000008CA2                 db    0
.eh_frame:0000000000008CA3                 db    0
.eh_frame:0000000000008CA4                 db  10h
.eh_frame:0000000000008CA5                 db    0
.eh_frame:0000000000008CA6                 db    0
.eh_frame:0000000000008CA7                 db    0
.eh_frame:0000000000008CA8                 db 0C8h
.eh_frame:0000000000008CA9                 db    6
.eh_frame:0000000000008CAA                 db    0
.eh_frame:0000000000008CAB                 db    0
.eh_frame:0000000000008CAC                 db  64h ; d
.eh_frame:0000000000008CAD                 db 0CEh
.eh_frame:0000000000008CAE                 db 0FFh
.eh_frame:0000000000008CAF                 db 0FFh
.eh_frame:0000000000008CB0                 db  0Ch
.eh_frame:0000000000008CB1                 db    0
.eh_frame:0000000000008CB2                 db    0
.eh_frame:0000000000008CB3                 db    0
.eh_frame:0000000000008CB4                 db    0
.eh_frame:0000000000008CB5                 db    0
.eh_frame:0000000000008CB6                 db    0
.eh_frame:0000000000008CB7                 db    0
.eh_frame:0000000000008CB8                 db  10h
.eh_frame:0000000000008CB9                 db    0
.eh_frame:0000000000008CBA                 db    0
.eh_frame:0000000000008CBB                 db    0
.eh_frame:0000000000008CBC                 db 0DCh
.eh_frame:0000000000008CBD                 db    6
.eh_frame:0000000000008CBE                 db    0
.eh_frame:0000000000008CBF                 db    0
.eh_frame:0000000000008CC0                 db  60h ; `
.eh_frame:0000000000008CC1                 db 0CEh
.eh_frame:0000000000008CC2                 db 0FFh
.eh_frame:0000000000008CC3                 db 0FFh
.eh_frame:0000000000008CC4                 db  18h
.eh_frame:0000000000008CC5                 db    0
.eh_frame:0000000000008CC6                 db    0
.eh_frame:0000000000008CC7                 db    0
.eh_frame:0000000000008CC8                 db    0
.eh_frame:0000000000008CC9                 db    0
.eh_frame:0000000000008CCA                 db    0
.eh_frame:0000000000008CCB                 db    0
.eh_frame:0000000000008CCC                 db  10h
.eh_frame:0000000000008CCD                 db    0
.eh_frame:0000000000008CCE                 db    0
.eh_frame:0000000000008CCF                 db    0
.eh_frame:0000000000008CD0                 db 0F0h
.eh_frame:0000000000008CD1                 db    6
.eh_frame:0000000000008CD2                 db    0
.eh_frame:0000000000008CD3                 db    0
.eh_frame:0000000000008CD4                 db  6Ch ; l
.eh_frame:0000000000008CD5                 db 0CEh
.eh_frame:0000000000008CD6                 db 0FFh
.eh_frame:0000000000008CD7                 db 0FFh
.eh_frame:0000000000008CD8                 db  14h
.eh_frame:0000000000008CD9                 db    0
.eh_frame:0000000000008CDA                 db    0
.eh_frame:0000000000008CDB                 db    0
.eh_frame:0000000000008CDC                 db    0
.eh_frame:0000000000008CDD                 db    0
.eh_frame:0000000000008CDE                 db    0
.eh_frame:0000000000008CDF                 db    0
.eh_frame:0000000000008CE0                 db  18h
.eh_frame:0000000000008CE1                 db    0
.eh_frame:0000000000008CE2                 db    0
.eh_frame:0000000000008CE3                 db    0
.eh_frame:0000000000008CE4                 db    4
.eh_frame:0000000000008CE5                 db    7
.eh_frame:0000000000008CE6                 db    0
.eh_frame:0000000000008CE7                 db    0
.eh_frame:0000000000008CE8                 db  78h ; x
.eh_frame:0000000000008CE9                 db 0CEh
.eh_frame:0000000000008CEA                 db 0FFh
.eh_frame:0000000000008CEB                 db 0FFh
.eh_frame:0000000000008CEC                 db  8Eh
.eh_frame:0000000000008CED                 db    0
.eh_frame:0000000000008CEE                 db    0
.eh_frame:0000000000008CEF                 db    0
.eh_frame:0000000000008CF0                 db    0
.eh_frame:0000000000008CF1                 db  44h ; D
.eh_frame:0000000000008CF2                 db  0Eh
.eh_frame:0000000000008CF3                 db  50h ; P
.eh_frame:0000000000008CF4                 db    2
.eh_frame:0000000000008CF5                 db  7Fh ; 
.eh_frame:0000000000008CF6                 db  0Ah
.eh_frame:0000000000008CF7                 db  0Eh
.eh_frame:0000000000008CF8                 db    8
.eh_frame:0000000000008CF9                 db  41h ; A
.eh_frame:0000000000008CFA                 db  0Bh
.eh_frame:0000000000008CFB                 db    0
.eh_frame:0000000000008CFC                 db  18h
.eh_frame:0000000000008CFD                 db    0
.eh_frame:0000000000008CFE                 db    0
.eh_frame:0000000000008CFF                 db    0
.eh_frame:0000000000008D00                 db  20h
.eh_frame:0000000000008D01                 db    7
.eh_frame:0000000000008D02                 db    0
.eh_frame:0000000000008D03                 db    0
.eh_frame:0000000000008D04                 db 0ECh
.eh_frame:0000000000008D05                 db 0CEh
.eh_frame:0000000000008D06                 db 0FFh
.eh_frame:0000000000008D07                 db 0FFh
.eh_frame:0000000000008D08                 db  8Ah
.eh_frame:0000000000008D09                 db    0
.eh_frame:0000000000008D0A                 db    0
.eh_frame:0000000000008D0B                 db    0
.eh_frame:0000000000008D0C                 db    0
.eh_frame:0000000000008D0D                 db  44h ; D
.eh_frame:0000000000008D0E                 db  0Eh
.eh_frame:0000000000008D0F                 db  50h ; P
.eh_frame:0000000000008D10                 db    2
.eh_frame:0000000000008D11                 db  7Bh ; {
.eh_frame:0000000000008D12                 db  0Ah
.eh_frame:0000000000008D13                 db  0Eh
.eh_frame:0000000000008D14                 db    8
.eh_frame:0000000000008D15                 db  41h ; A
.eh_frame:0000000000008D16                 db  0Bh
.eh_frame:0000000000008D17                 db    0
.eh_frame:0000000000008D18                 db  10h
.eh_frame:0000000000008D19                 db    0
.eh_frame:0000000000008D1A                 db    0
.eh_frame:0000000000008D1B                 db    0
.eh_frame:0000000000008D1C                 db  3Ch ; <
.eh_frame:0000000000008D1D                 db    7
.eh_frame:0000000000008D1E                 db    0
.eh_frame:0000000000008D1F                 db    0
.eh_frame:0000000000008D20                 db  60h ; `
.eh_frame:0000000000008D21                 db 0CFh
.eh_frame:0000000000008D22                 db 0FFh
.eh_frame:0000000000008D23                 db 0FFh
.eh_frame:0000000000008D24                 db  0Ch
.eh_frame:0000000000008D25                 db    0
.eh_frame:0000000000008D26                 db    0
.eh_frame:0000000000008D27                 db    0
.eh_frame:0000000000008D28                 db    0
.eh_frame:0000000000008D29                 db    0
.eh_frame:0000000000008D2A                 db    0
.eh_frame:0000000000008D2B                 db    0
.eh_frame:0000000000008D2C                 db  10h
.eh_frame:0000000000008D2D                 db    0
.eh_frame:0000000000008D2E                 db    0
.eh_frame:0000000000008D2F                 db    0
.eh_frame:0000000000008D30                 db  50h ; P
.eh_frame:0000000000008D31                 db    7
.eh_frame:0000000000008D32                 db    0
.eh_frame:0000000000008D33                 db    0
.eh_frame:0000000000008D34                 db  5Ch ; \
.eh_frame:0000000000008D35                 db 0CFh
.eh_frame:0000000000008D36                 db 0FFh
.eh_frame:0000000000008D37                 db 0FFh
.eh_frame:0000000000008D38                 db  0Fh
.eh_frame:0000000000008D39                 db    0
.eh_frame:0000000000008D3A                 db    0
.eh_frame:0000000000008D3B                 db    0
.eh_frame:0000000000008D3C                 db    0
.eh_frame:0000000000008D3D                 db    0
.eh_frame:0000000000008D3E                 db    0
.eh_frame:0000000000008D3F                 db    0
.eh_frame:0000000000008D40                 db  18h
.eh_frame:0000000000008D41                 db    0
.eh_frame:0000000000008D42                 db    0
.eh_frame:0000000000008D43                 db    0
.eh_frame:0000000000008D44                 db  64h ; d
.eh_frame:0000000000008D45                 db    7
.eh_frame:0000000000008D46                 db    0
.eh_frame:0000000000008D47                 db    0
.eh_frame:0000000000008D48                 db  58h ; X
.eh_frame:0000000000008D49                 db 0CFh
.eh_frame:0000000000008D4A                 db 0FFh
.eh_frame:0000000000008D4B                 db 0FFh
.eh_frame:0000000000008D4C                 db  98h
.eh_frame:0000000000008D4D                 db    0
.eh_frame:0000000000008D4E                 db    0
.eh_frame:0000000000008D4F                 db    0
.eh_frame:0000000000008D50                 db    0
.eh_frame:0000000000008D51                 db  44h ; D
.eh_frame:0000000000008D52                 db  0Eh
.eh_frame:0000000000008D53                 db  50h ; P
.eh_frame:0000000000008D54                 db    2
.eh_frame:0000000000008D55                 db  8Eh
.eh_frame:0000000000008D56                 db  0Ah
.eh_frame:0000000000008D57                 db  0Eh
.eh_frame:0000000000008D58                 db    8
.eh_frame:0000000000008D59                 db  41h ; A
.eh_frame:0000000000008D5A                 db  0Bh
.eh_frame:0000000000008D5B                 db    0
.eh_frame:0000000000008D5C                 db  10h
.eh_frame:0000000000008D5D                 db    0
.eh_frame:0000000000008D5E                 db    0
.eh_frame:0000000000008D5F                 db    0
.eh_frame:0000000000008D60                 db  80h
.eh_frame:0000000000008D61                 db    7
.eh_frame:0000000000008D62                 db    0
.eh_frame:0000000000008D63                 db    0
.eh_frame:0000000000008D64                 db 0DCh
.eh_frame:0000000000008D65                 db 0CFh
.eh_frame:0000000000008D66                 db 0FFh
.eh_frame:0000000000008D67                 db 0FFh
.eh_frame:0000000000008D68                 db  10h
.eh_frame:0000000000008D69                 db    0
.eh_frame:0000000000008D6A                 db    0
.eh_frame:0000000000008D6B                 db    0
.eh_frame:0000000000008D6C                 db    0
.eh_frame:0000000000008D6D                 db    0
.eh_frame:0000000000008D6E                 db    0
.eh_frame:0000000000008D6F                 db    0
.eh_frame:0000000000008D70                 db  10h
.eh_frame:0000000000008D71                 db    0
.eh_frame:0000000000008D72                 db    0
.eh_frame:0000000000008D73                 db    0
.eh_frame:0000000000008D74                 db  94h
.eh_frame:0000000000008D75                 db    7
.eh_frame:0000000000008D76                 db    0
.eh_frame:0000000000008D77                 db    0
.eh_frame:0000000000008D78                 db 0D8h
.eh_frame:0000000000008D79                 db 0CFh
.eh_frame:0000000000008D7A                 db 0FFh
.eh_frame:0000000000008D7B                 db 0FFh
.eh_frame:0000000000008D7C                 db  11h
.eh_frame:0000000000008D7D                 db    0
.eh_frame:0000000000008D7E                 db    0
.eh_frame:0000000000008D7F                 db    0
.eh_frame:0000000000008D80                 db    0
.eh_frame:0000000000008D81                 db    0
.eh_frame:0000000000008D82                 db    0
.eh_frame:0000000000008D83                 db    0
.eh_frame:0000000000008D84                 db  10h
.eh_frame:0000000000008D85                 db    0
.eh_frame:0000000000008D86                 db    0
.eh_frame:0000000000008D87                 db    0
.eh_frame:0000000000008D88                 db 0A8h
.eh_frame:0000000000008D89                 db    7
.eh_frame:0000000000008D8A                 db    0
.eh_frame:0000000000008D8B                 db    0
.eh_frame:0000000000008D8C                 db 0E4h
.eh_frame:0000000000008D8D                 db 0CFh
.eh_frame:0000000000008D8E                 db 0FFh
.eh_frame:0000000000008D8F                 db 0FFh
.eh_frame:0000000000008D90                 db  0Ah
.eh_frame:0000000000008D91                 db    0
.eh_frame:0000000000008D92                 db    0
.eh_frame:0000000000008D93                 db    0
.eh_frame:0000000000008D94                 db    0
.eh_frame:0000000000008D95                 db    0
.eh_frame:0000000000008D96                 db    0
.eh_frame:0000000000008D97                 db    0
.eh_frame:0000000000008D98                 db  18h
.eh_frame:0000000000008D99                 db    0
.eh_frame:0000000000008D9A                 db    0
.eh_frame:0000000000008D9B                 db    0
.eh_frame:0000000000008D9C                 db 0BCh
.eh_frame:0000000000008D9D                 db    7
.eh_frame:0000000000008D9E                 db    0
.eh_frame:0000000000008D9F                 db    0
.eh_frame:0000000000008DA0                 db 0E0h
.eh_frame:0000000000008DA1                 db 0CFh
.eh_frame:0000000000008DA2                 db 0FFh
.eh_frame:0000000000008DA3                 db 0FFh
.eh_frame:0000000000008DA4                 db  8Eh
.eh_frame:0000000000008DA5                 db    0
.eh_frame:0000000000008DA6                 db    0
.eh_frame:0000000000008DA7                 db    0
.eh_frame:0000000000008DA8                 db    0
.eh_frame:0000000000008DA9                 db  44h ; D
.eh_frame:0000000000008DAA                 db  0Eh
.eh_frame:0000000000008DAB                 db  50h ; P
.eh_frame:0000000000008DAC                 db    2
.eh_frame:0000000000008DAD                 db  7Fh ; 
.eh_frame:0000000000008DAE                 db  0Ah
.eh_frame:0000000000008DAF                 db  0Eh
.eh_frame:0000000000008DB0                 db    8
.eh_frame:0000000000008DB1                 db  41h ; A
.eh_frame:0000000000008DB2                 db  0Bh
.eh_frame:0000000000008DB3                 db    0
.eh_frame:0000000000008DB4                 db  18h
.eh_frame:0000000000008DB5                 db    0
.eh_frame:0000000000008DB6                 db    0
.eh_frame:0000000000008DB7                 db    0
.eh_frame:0000000000008DB8                 db 0D8h
.eh_frame:0000000000008DB9                 db    7
.eh_frame:0000000000008DBA                 db    0
.eh_frame:0000000000008DBB                 db    0
.eh_frame:0000000000008DBC                 db  54h ; T
.eh_frame:0000000000008DBD                 db 0D0h
.eh_frame:0000000000008DBE                 db 0FFh
.eh_frame:0000000000008DBF                 db 0FFh
.eh_frame:0000000000008DC0                 db  91h
.eh_frame:0000000000008DC1                 db    0
.eh_frame:0000000000008DC2                 db    0
.eh_frame:0000000000008DC3                 db    0
.eh_frame:0000000000008DC4                 db    0
.eh_frame:0000000000008DC5                 db  44h ; D
.eh_frame:0000000000008DC6                 db  0Eh
.eh_frame:0000000000008DC7                 db  50h ; P
.eh_frame:0000000000008DC8                 db    2
.eh_frame:0000000000008DC9                 db  82h
.eh_frame:0000000000008DCA                 db  0Ah
.eh_frame:0000000000008DCB                 db  0Eh
.eh_frame:0000000000008DCC                 db    8
.eh_frame:0000000000008DCD                 db  41h ; A
.eh_frame:0000000000008DCE                 db  0Bh
.eh_frame:0000000000008DCF                 db    0
.eh_frame:0000000000008DD0                 db  10h
.eh_frame:0000000000008DD1                 db    0
.eh_frame:0000000000008DD2                 db    0
.eh_frame:0000000000008DD3                 db    0
.eh_frame:0000000000008DD4                 db 0F4h
.eh_frame:0000000000008DD5                 db    7
.eh_frame:0000000000008DD6                 db    0
.eh_frame:0000000000008DD7                 db    0
.eh_frame:0000000000008DD8                 db 0D8h
.eh_frame:0000000000008DD9                 db 0D0h
.eh_frame:0000000000008DDA                 db 0FFh
.eh_frame:0000000000008DDB                 db 0FFh
.eh_frame:0000000000008DDC                 db  0Ch
.eh_frame:0000000000008DDD                 db    0
.eh_frame:0000000000008DDE                 db    0
.eh_frame:0000000000008DDF                 db    0
.eh_frame:0000000000008DE0                 db    0
.eh_frame:0000000000008DE1                 db    0
.eh_frame:0000000000008DE2                 db    0
.eh_frame:0000000000008DE3                 db    0
.eh_frame:0000000000008DE4                 db  10h
.eh_frame:0000000000008DE5                 db    0
.eh_frame:0000000000008DE6                 db    0
.eh_frame:0000000000008DE7                 db    0
.eh_frame:0000000000008DE8                 db    8
.eh_frame:0000000000008DE9                 db    8
.eh_frame:0000000000008DEA                 db    0
.eh_frame:0000000000008DEB                 db    0
.eh_frame:0000000000008DEC                 db 0D4h
.eh_frame:0000000000008DED                 db 0D0h
.eh_frame:0000000000008DEE                 db 0FFh
.eh_frame:0000000000008DEF                 db 0FFh
.eh_frame:0000000000008DF0                 db  17h
.eh_frame:0000000000008DF1                 db    0
.eh_frame:0000000000008DF2                 db    0
.eh_frame:0000000000008DF3                 db    0
.eh_frame:0000000000008DF4                 db    0
.eh_frame:0000000000008DF5                 db    0
.eh_frame:0000000000008DF6                 db    0
.eh_frame:0000000000008DF7                 db    0
.eh_frame:0000000000008DF8                 db  10h
.eh_frame:0000000000008DF9                 db    0
.eh_frame:0000000000008DFA                 db    0
.eh_frame:0000000000008DFB                 db    0
.eh_frame:0000000000008DFC                 db  1Ch
.eh_frame:0000000000008DFD                 db    8
.eh_frame:0000000000008DFE                 db    0
.eh_frame:0000000000008DFF                 db    0
.eh_frame:0000000000008E00                 db 0E0h
.eh_frame:0000000000008E01                 db 0D0h
.eh_frame:0000000000008E02                 db 0FFh
.eh_frame:0000000000008E03                 db 0FFh
.eh_frame:0000000000008E04                 db  13h
.eh_frame:0000000000008E05                 db    0
.eh_frame:0000000000008E06                 db    0
.eh_frame:0000000000008E07                 db    0
.eh_frame:0000000000008E08                 db    0
.eh_frame:0000000000008E09                 db    0
.eh_frame:0000000000008E0A                 db    0
.eh_frame:0000000000008E0B                 db    0
.eh_frame:0000000000008E0C                 db  10h
.eh_frame:0000000000008E0D                 db    0
.eh_frame:0000000000008E0E                 db    0
.eh_frame:0000000000008E0F                 db    0
.eh_frame:0000000000008E10                 db  30h ; 0
.eh_frame:0000000000008E11                 db    8
.eh_frame:0000000000008E12                 db    0
.eh_frame:0000000000008E13                 db    0
.eh_frame:0000000000008E14                 db 0ECh
.eh_frame:0000000000008E15                 db 0D0h
.eh_frame:0000000000008E16                 db 0FFh
.eh_frame:0000000000008E17                 db 0FFh
.eh_frame:0000000000008E18                 db  0Ch
.eh_frame:0000000000008E19                 db    0
.eh_frame:0000000000008E1A                 db    0
.eh_frame:0000000000008E1B                 db    0
.eh_frame:0000000000008E1C                 db    0
.eh_frame:0000000000008E1D                 db    0
.eh_frame:0000000000008E1E                 db    0
.eh_frame:0000000000008E1F                 db    0
.eh_frame:0000000000008E20                 db  10h
.eh_frame:0000000000008E21                 db    0
.eh_frame:0000000000008E22                 db    0
.eh_frame:0000000000008E23                 db    0
.eh_frame:0000000000008E24                 db  44h ; D
.eh_frame:0000000000008E25                 db    8
.eh_frame:0000000000008E26                 db    0
.eh_frame:0000000000008E27                 db    0
.eh_frame:0000000000008E28                 db 0E8h
.eh_frame:0000000000008E29                 db 0D0h
.eh_frame:0000000000008E2A                 db 0FFh
.eh_frame:0000000000008E2B                 db 0FFh
.eh_frame:0000000000008E2C                 db  14h
.eh_frame:0000000000008E2D                 db    0
.eh_frame:0000000000008E2E                 db    0
.eh_frame:0000000000008E2F                 db    0
.eh_frame:0000000000008E30                 db    0
.eh_frame:0000000000008E31                 db    0
.eh_frame:0000000000008E32                 db    0
.eh_frame:0000000000008E33                 db    0
.eh_frame:0000000000008E34                 db  10h
.eh_frame:0000000000008E35                 db    0
.eh_frame:0000000000008E36                 db    0
.eh_frame:0000000000008E37                 db    0
.eh_frame:0000000000008E38                 db  58h ; X
.eh_frame:0000000000008E39                 db    8
.eh_frame:0000000000008E3A                 db    0
.eh_frame:0000000000008E3B                 db    0
.eh_frame:0000000000008E3C                 db 0F4h
.eh_frame:0000000000008E3D                 db 0D0h
.eh_frame:0000000000008E3E                 db 0FFh
.eh_frame:0000000000008E3F                 db 0FFh
.eh_frame:0000000000008E40                 db  13h
.eh_frame:0000000000008E41                 db    0
.eh_frame:0000000000008E42                 db    0
.eh_frame:0000000000008E43                 db    0
.eh_frame:0000000000008E44                 db    0
.eh_frame:0000000000008E45                 db    0
.eh_frame:0000000000008E46                 db    0
.eh_frame:0000000000008E47                 db    0
.eh_frame:0000000000008E48                 db  14h
.eh_frame:0000000000008E49                 db    0
.eh_frame:0000000000008E4A                 db    0
.eh_frame:0000000000008E4B                 db    0
.eh_frame:0000000000008E4C                 db  6Ch ; l
.eh_frame:0000000000008E4D                 db    8
.eh_frame:0000000000008E4E                 db    0
.eh_frame:0000000000008E4F                 db    0
.eh_frame:0000000000008E50                 db    0
.eh_frame:0000000000008E51                 db 0D1h
.eh_frame:0000000000008E52                 db 0FFh
.eh_frame:0000000000008E53                 db 0FFh
.eh_frame:0000000000008E54                 db  18h
.eh_frame:0000000000008E55                 db    0
.eh_frame:0000000000008E56                 db    0
.eh_frame:0000000000008E57                 db    0
.eh_frame:0000000000008E58                 db    0
.eh_frame:0000000000008E59                 db    0
.eh_frame:0000000000008E5A                 db    0
.eh_frame:0000000000008E5B                 db    0
.eh_frame:0000000000008E5C                 db    0
.eh_frame:0000000000008E5D                 db    0
.eh_frame:0000000000008E5E                 db    0
.eh_frame:0000000000008E5F                 db    0
.eh_frame:0000000000008E60                 db  14h
.eh_frame:0000000000008E61                 db    0
.eh_frame:0000000000008E62                 db    0
.eh_frame:0000000000008E63                 db    0
.eh_frame:0000000000008E64                 db  84h
.eh_frame:0000000000008E65                 db    8
.eh_frame:0000000000008E66                 db    0
.eh_frame:0000000000008E67                 db    0
.eh_frame:0000000000008E68                 db    8
.eh_frame:0000000000008E69                 db 0D1h
.eh_frame:0000000000008E6A                 db 0FFh
.eh_frame:0000000000008E6B                 db 0FFh
.eh_frame:0000000000008E6C                 db  0Eh
.eh_frame:0000000000008E6D                 db    0
.eh_frame:0000000000008E6E                 db    0
.eh_frame:0000000000008E6F                 db    0
.eh_frame:0000000000008E70                 db    0
.eh_frame:0000000000008E71                 db    0
.eh_frame:0000000000008E72                 db    0
.eh_frame:0000000000008E73                 db    0
.eh_frame:0000000000008E74                 db    0
.eh_frame:0000000000008E75                 db    0
.eh_frame:0000000000008E76                 db    0
.eh_frame:0000000000008E77                 db    0
.eh_frame:0000000000008E78                 db  10h
.eh_frame:0000000000008E79                 db    1
.eh_frame:0000000000008E7A                 db    0
.eh_frame:0000000000008E7B                 db    0
.eh_frame:0000000000008E7C                 db  9Ch
.eh_frame:0000000000008E7D                 db    8
.eh_frame:0000000000008E7E                 db    0
.eh_frame:0000000000008E7F                 db    0
.eh_frame:0000000000008E80                 db    0
.eh_frame:0000000000008E81                 db 0D1h
.eh_frame:0000000000008E82                 db 0FFh
.eh_frame:0000000000008E83                 db 0FFh
.eh_frame:0000000000008E84                 db  17h
.eh_frame:0000000000008E85                 db    4
.eh_frame:0000000000008E86                 db    0
.eh_frame:0000000000008E87                 db    0
.eh_frame:0000000000008E88                 db    0
.eh_frame:0000000000008E89                 db  42h ; B
.eh_frame:0000000000008E8A                 db  0Eh
.eh_frame:0000000000008E8B                 db  10h
.eh_frame:0000000000008E8C                 db  8Fh
.eh_frame:0000000000008E8D                 db    2
.eh_frame:0000000000008E8E                 db  42h ; B
.eh_frame:0000000000008E8F                 db  0Eh
.eh_frame:0000000000008E90                 db  18h
.eh_frame:0000000000008E91                 db  8Eh
.eh_frame:0000000000008E92                 db    3
.eh_frame:0000000000008E93                 db  42h ; B
.eh_frame:0000000000008E94                 db  0Eh
.eh_frame:0000000000008E95                 db  20h
.eh_frame:0000000000008E96                 db  8Dh
.eh_frame:0000000000008E97                 db    4
.eh_frame:0000000000008E98                 db  42h ; B
.eh_frame:0000000000008E99                 db  0Eh
.eh_frame:0000000000008E9A                 db  28h ; (
.eh_frame:0000000000008E9B                 db  8Ch
.eh_frame:0000000000008E9C                 db    5
.eh_frame:0000000000008E9D                 db  44h ; D
.eh_frame:0000000000008E9E                 db  0Eh
.eh_frame:0000000000008E9F                 db  30h ; 0
.eh_frame:0000000000008EA0                 db  86h
.eh_frame:0000000000008EA1                 db    6
.eh_frame:0000000000008EA2                 db  41h ; A
.eh_frame:0000000000008EA3                 db  0Eh
.eh_frame:0000000000008EA4                 db  38h ; 8
.eh_frame:0000000000008EA5                 db  83h
.eh_frame:0000000000008EA6                 db    7
.eh_frame:0000000000008EA7                 db  4Ah ; J
.eh_frame:0000000000008EA8                 db  0Eh
.eh_frame:0000000000008EA9                 db  60h ; `
.eh_frame:0000000000008EAA                 db    2
.eh_frame:0000000000008EAB                 db 0DDh
.eh_frame:0000000000008EAC                 db  0Eh
.eh_frame:0000000000008EAD                 db  68h ; h
.eh_frame:0000000000008EAE                 db  57h ; W
.eh_frame:0000000000008EAF                 db  0Eh
.eh_frame:0000000000008EB0                 db  70h ; p
.eh_frame:0000000000008EB1                 db  42h ; B
.eh_frame:0000000000008EB2                 db  0Eh
.eh_frame:0000000000008EB3                 db  78h ; x
.eh_frame:0000000000008EB4                 db  42h ; B
.eh_frame:0000000000008EB5                 db  0Eh
.eh_frame:0000000000008EB6                 db  80h
.eh_frame:0000000000008EB7                 db    1
.eh_frame:0000000000008EB8                 db  42h ; B
.eh_frame:0000000000008EB9                 db  0Eh
.eh_frame:0000000000008EBA                 db  88h
.eh_frame:0000000000008EBB                 db    1
.eh_frame:0000000000008EBC                 db  42h ; B
.eh_frame:0000000000008EBD                 db  0Eh
.eh_frame:0000000000008EBE                 db  90h
.eh_frame:0000000000008EBF                 db    1
.eh_frame:0000000000008EC0                 db  53h ; S
.eh_frame:0000000000008EC1                 db  0Eh
.eh_frame:0000000000008EC2                 db  60h ; `
.eh_frame:0000000000008EC3                 db  44h ; D
.eh_frame:0000000000008EC4                 db  0Ah
.eh_frame:0000000000008EC5                 db  0Eh
.eh_frame:0000000000008EC6                 db  38h ; 8
.eh_frame:0000000000008EC7                 db  41h ; A
.eh_frame:0000000000008EC8                 db  0Eh
.eh_frame:0000000000008EC9                 db  30h ; 0
.eh_frame:0000000000008ECA                 db  41h ; A
.eh_frame:0000000000008ECB                 db  0Eh
.eh_frame:0000000000008ECC                 db  28h ; (
.eh_frame:0000000000008ECD                 db  42h ; B
.eh_frame:0000000000008ECE                 db  0Eh
.eh_frame:0000000000008ECF                 db  20h
.eh_frame:0000000000008ED0                 db  42h ; B
.eh_frame:0000000000008ED1                 db  0Eh
.eh_frame:0000000000008ED2                 db  18h
.eh_frame:0000000000008ED3                 db  42h ; B
.eh_frame:0000000000008ED4                 db  0Eh
.eh_frame:0000000000008ED5                 db  10h
.eh_frame:0000000000008ED6                 db  42h ; B
.eh_frame:0000000000008ED7                 db  0Eh
.eh_frame:0000000000008ED8                 db    8
.eh_frame:0000000000008ED9                 db  44h ; D
.eh_frame:0000000000008EDA                 db  0Bh
.eh_frame:0000000000008EDB                 db    2
.eh_frame:0000000000008EDC                 db  78h ; x
.eh_frame:0000000000008EDD                 db  0Ah
.eh_frame:0000000000008EDE                 db  0Eh
.eh_frame:0000000000008EDF                 db  68h ; h
.eh_frame:0000000000008EE0                 db  48h ; H
.eh_frame:0000000000008EE1                 db  0Bh
.eh_frame:0000000000008EE2                 db  5Ah ; Z
.eh_frame:0000000000008EE3                 db  0Ah
.eh_frame:0000000000008EE4                 db  0Eh
.eh_frame:0000000000008EE5                 db  38h ; 8
.eh_frame:0000000000008EE6                 db  47h ; G
.eh_frame:0000000000008EE7                 db  0Eh
.eh_frame:0000000000008EE8                 db  30h ; 0
.eh_frame:0000000000008EE9                 db  41h ; A
.eh_frame:0000000000008EEA                 db  0Eh
.eh_frame:0000000000008EEB                 db  28h ; (
.eh_frame:0000000000008EEC                 db  42h ; B
.eh_frame:0000000000008EED                 db  0Eh
.eh_frame:0000000000008EEE                 db  20h
.eh_frame:0000000000008EEF                 db  42h ; B
.eh_frame:0000000000008EF0                 db  0Eh
.eh_frame:0000000000008EF1                 db  18h
.eh_frame:0000000000008EF2                 db  42h ; B
.eh_frame:0000000000008EF3                 db  0Eh
.eh_frame:0000000000008EF4                 db  10h
.eh_frame:0000000000008EF5                 db  42h ; B
.eh_frame:0000000000008EF6                 db  0Eh
.eh_frame:0000000000008EF7                 db    8
.eh_frame:0000000000008EF8                 db  56h ; V
.eh_frame:0000000000008EF9                 db  0Bh
.eh_frame:0000000000008EFA                 db  5Eh ; ^
.eh_frame:0000000000008EFB                 db  0Ah
.eh_frame:0000000000008EFC                 db  0Eh
.eh_frame:0000000000008EFD                 db  38h ; 8
.eh_frame:0000000000008EFE                 db  52h ; R
.eh_frame:0000000000008EFF                 db  0Eh
.eh_frame:0000000000008F00                 db  30h ; 0
.eh_frame:0000000000008F01                 db  41h ; A
.eh_frame:0000000000008F02                 db  0Eh
.eh_frame:0000000000008F03                 db  28h ; (
.eh_frame:0000000000008F04                 db  42h ; B
.eh_frame:0000000000008F05                 db  0Eh
.eh_frame:0000000000008F06                 db  20h
.eh_frame:0000000000008F07                 db  42h ; B
.eh_frame:0000000000008F08                 db  0Eh
.eh_frame:0000000000008F09                 db  18h
.eh_frame:0000000000008F0A                 db  42h ; B
.eh_frame:0000000000008F0B                 db  0Eh
.eh_frame:0000000000008F0C                 db  10h
.eh_frame:0000000000008F0D                 db  42h ; B
.eh_frame:0000000000008F0E                 db  0Eh
.eh_frame:0000000000008F0F                 db    8
.eh_frame:0000000000008F10                 db  4Fh ; O
.eh_frame:0000000000008F11                 db  0Bh
.eh_frame:0000000000008F12                 db  62h ; b
.eh_frame:0000000000008F13                 db  0Ah
.eh_frame:0000000000008F14                 db  0Eh
.eh_frame:0000000000008F15                 db  38h ; 8
.eh_frame:0000000000008F16                 db  50h ; P
.eh_frame:0000000000008F17                 db  0Eh
.eh_frame:0000000000008F18                 db  30h ; 0
.eh_frame:0000000000008F19                 db  41h ; A
.eh_frame:0000000000008F1A                 db  0Eh
.eh_frame:0000000000008F1B                 db  28h ; (
.eh_frame:0000000000008F1C                 db  42h ; B
.eh_frame:0000000000008F1D                 db  0Eh
.eh_frame:0000000000008F1E                 db  20h
.eh_frame:0000000000008F1F                 db  42h ; B
.eh_frame:0000000000008F20                 db  0Eh
.eh_frame:0000000000008F21                 db  18h
.eh_frame:0000000000008F22                 db  42h ; B
.eh_frame:0000000000008F23                 db  0Eh
.eh_frame:0000000000008F24                 db  10h
.eh_frame:0000000000008F25                 db  42h ; B
.eh_frame:0000000000008F26                 db  0Eh
.eh_frame:0000000000008F27                 db    8
.eh_frame:0000000000008F28                 db  55h ; U
.eh_frame:0000000000008F29                 db  0Bh
.eh_frame:0000000000008F2A                 db  66h ; f
.eh_frame:0000000000008F2B                 db  0Eh
.eh_frame:0000000000008F2C                 db  68h ; h
.eh_frame:0000000000008F2D                 db  42h ; B
.eh_frame:0000000000008F2E                 db  0Eh
.eh_frame:0000000000008F2F                 db  70h ; p
.eh_frame:0000000000008F30                 db  5Ch ; \
.eh_frame:0000000000008F31                 db  0Eh
.eh_frame:0000000000008F32                 db  68h ; h
.eh_frame:0000000000008F33                 db  41h ; A
.eh_frame:0000000000008F34                 db  0Eh
.eh_frame:0000000000008F35                 db  60h ; `
.eh_frame:0000000000008F36                 db  44h ; D
.eh_frame:0000000000008F37                 db  0Ah
.eh_frame:0000000000008F38                 db  0Eh
.eh_frame:0000000000008F39                 db  38h ; 8
.eh_frame:0000000000008F3A                 db  41h ; A
.eh_frame:0000000000008F3B                 db  0Eh
.eh_frame:0000000000008F3C                 db  30h ; 0
.eh_frame:0000000000008F3D                 db  41h ; A
.eh_frame:0000000000008F3E                 db  0Eh
.eh_frame:0000000000008F3F                 db  28h ; (
.eh_frame:0000000000008F40                 db  42h ; B
.eh_frame:0000000000008F41                 db  0Eh
.eh_frame:0000000000008F42                 db  20h
.eh_frame:0000000000008F43                 db  42h ; B
.eh_frame:0000000000008F44                 db  0Eh
.eh_frame:0000000000008F45                 db  18h
.eh_frame:0000000000008F46                 db  42h ; B
.eh_frame:0000000000008F47                 db  0Eh
.eh_frame:0000000000008F48                 db  10h
.eh_frame:0000000000008F49                 db  42h ; B
.eh_frame:0000000000008F4A                 db  0Eh
.eh_frame:0000000000008F4B                 db    8
.eh_frame:0000000000008F4C                 db  45h ; E
.eh_frame:0000000000008F4D                 db  0Bh
.eh_frame:0000000000008F4E                 db  68h ; h
.eh_frame:0000000000008F4F                 db  0Ah
.eh_frame:0000000000008F50                 db  0Eh
.eh_frame:0000000000008F51                 db  68h ; h
.eh_frame:0000000000008F52                 db  48h ; H
.eh_frame:0000000000008F53                 db  0Bh
.eh_frame:0000000000008F54                 db  72h ; r
.eh_frame:0000000000008F55                 db  0Eh
.eh_frame:0000000000008F56                 db  68h ; h
.eh_frame:0000000000008F57                 db  45h ; E
.eh_frame:0000000000008F58                 db  0Eh
.eh_frame:0000000000008F59                 db  70h ; p
.eh_frame:0000000000008F5A                 db  42h ; B
.eh_frame:0000000000008F5B                 db  0Eh
.eh_frame:0000000000008F5C                 db  78h ; x
.eh_frame:0000000000008F5D                 db  42h ; B
.eh_frame:0000000000008F5E                 db  0Eh
.eh_frame:0000000000008F5F                 db  80h
.eh_frame:0000000000008F60                 db    1
.eh_frame:0000000000008F61                 db  5Eh ; ^
.eh_frame:0000000000008F62                 db  0Eh
.eh_frame:0000000000008F63                 db  60h ; `
.eh_frame:0000000000008F64                 db  44h ; D
.eh_frame:0000000000008F65                 db  0Ah
.eh_frame:0000000000008F66                 db  0Eh
.eh_frame:0000000000008F67                 db  38h ; 8
.eh_frame:0000000000008F68                 db  41h ; A
.eh_frame:0000000000008F69                 db  0Eh
.eh_frame:0000000000008F6A                 db  30h ; 0
.eh_frame:0000000000008F6B                 db  41h ; A
.eh_frame:0000000000008F6C                 db  0Eh
.eh_frame:0000000000008F6D                 db  28h ; (
.eh_frame:0000000000008F6E                 db  42h ; B
.eh_frame:0000000000008F6F                 db  0Eh
.eh_frame:0000000000008F70                 db  20h
.eh_frame:0000000000008F71                 db  42h ; B
.eh_frame:0000000000008F72                 db  0Eh
.eh_frame:0000000000008F73                 db  18h
.eh_frame:0000000000008F74                 db  42h ; B
.eh_frame:0000000000008F75                 db  0Eh
.eh_frame:0000000000008F76                 db  10h
.eh_frame:0000000000008F77                 db  42h ; B
.eh_frame:0000000000008F78                 db  0Eh
.eh_frame:0000000000008F79                 db    8
.eh_frame:0000000000008F7A                 db  41h ; A
.eh_frame:0000000000008F7B                 db  0Bh
.eh_frame:0000000000008F7C                 db  79h ; y
.eh_frame:0000000000008F7D                 db  0Ah
.eh_frame:0000000000008F7E                 db  0Eh
.eh_frame:0000000000008F7F                 db  68h ; h
.eh_frame:0000000000008F80                 db  42h ; B
.eh_frame:0000000000008F81                 db  0Eh
.eh_frame:0000000000008F82                 db  70h ; p
.eh_frame:0000000000008F83                 db  42h ; B
.eh_frame:0000000000008F84                 db  0Eh
.eh_frame:0000000000008F85                 db  78h ; x
.eh_frame:0000000000008F86                 db  42h ; B
.eh_frame:0000000000008F87                 db  0Eh
.eh_frame:0000000000008F88                 db  80h
.eh_frame:0000000000008F89                 db    1
.eh_frame:0000000000008F8A                 db  51h ; Q
.eh_frame:0000000000008F8B                 db  0Bh
.eh_frame:0000000000008F8C                 db  10h
.eh_frame:0000000000008F8D                 db    0
.eh_frame:0000000000008F8E                 db    0
.eh_frame:0000000000008F8F                 db    0
.eh_frame:0000000000008F90                 db 0B0h
.eh_frame:0000000000008F91                 db    9
.eh_frame:0000000000008F92                 db    0
.eh_frame:0000000000008F93                 db    0
.eh_frame:0000000000008F94                 db  0Ch
.eh_frame:0000000000008F95                 db 0D4h
.eh_frame:0000000000008F96                 db 0FFh
.eh_frame:0000000000008F97                 db 0FFh
.eh_frame:0000000000008F98                 db  20h
.eh_frame:0000000000008F99                 db    0
.eh_frame:0000000000008F9A                 db    0
.eh_frame:0000000000008F9B                 db    0
.eh_frame:0000000000008F9C                 db    0
.eh_frame:0000000000008F9D                 db    0
.eh_frame:0000000000008F9E                 db    0
.eh_frame:0000000000008F9F                 db    0
.eh_frame:0000000000008FA0                 db  18h
.eh_frame:0000000000008FA1                 db    0
.eh_frame:0000000000008FA2                 db    0
.eh_frame:0000000000008FA3                 db    0
.eh_frame:0000000000008FA4                 db 0C4h
.eh_frame:0000000000008FA5                 db    9
.eh_frame:0000000000008FA6                 db    0
.eh_frame:0000000000008FA7                 db    0
.eh_frame:0000000000008FA8                 db  18h
.eh_frame:0000000000008FA9                 db 0D4h
.eh_frame:0000000000008FAA                 db 0FFh
.eh_frame:0000000000008FAB                 db 0FFh
.eh_frame:0000000000008FAC                 db  78h ; x
.eh_frame:0000000000008FAD                 db    0
.eh_frame:0000000000008FAE                 db    0
.eh_frame:0000000000008FAF                 db    0
.eh_frame:0000000000008FB0                 db    0
.eh_frame:0000000000008FB1                 db  44h ; D
.eh_frame:0000000000008FB2                 db  0Eh
.eh_frame:0000000000008FB3                 db  70h ; p
.eh_frame:0000000000008FB4                 db    2
.eh_frame:0000000000008FB5                 db  60h ; `
.eh_frame:0000000000008FB6                 db  0Ah
.eh_frame:0000000000008FB7                 db  0Eh
.eh_frame:0000000000008FB8                 db    8
.eh_frame:0000000000008FB9                 db  41h ; A
.eh_frame:0000000000008FBA                 db  0Bh
.eh_frame:0000000000008FBB                 db    0
.eh_frame:0000000000008FBC                 db  28h ; (
.eh_frame:0000000000008FBD                 db    0
.eh_frame:0000000000008FBE                 db    0
.eh_frame:0000000000008FBF                 db    0
.eh_frame:0000000000008FC0                 db 0E0h
.eh_frame:0000000000008FC1                 db    9
.eh_frame:0000000000008FC2                 db    0
.eh_frame:0000000000008FC3                 db    0
.eh_frame:0000000000008FC4                 db  7Ch ; |
.eh_frame:0000000000008FC5                 db 0D4h
.eh_frame:0000000000008FC6                 db 0FFh
.eh_frame:0000000000008FC7                 db 0FFh
.eh_frame:0000000000008FC8                 db 0D5h
.eh_frame:0000000000008FC9                 db    0
.eh_frame:0000000000008FCA                 db    0
.eh_frame:0000000000008FCB                 db    0
.eh_frame:0000000000008FCC                 db    0
.eh_frame:0000000000008FCD                 db  41h ; A
.eh_frame:0000000000008FCE                 db  0Eh
.eh_frame:0000000000008FCF                 db  10h
.eh_frame:0000000000008FD0                 db  86h
.eh_frame:0000000000008FD1                 db    2
.eh_frame:0000000000008FD2                 db  41h ; A
.eh_frame:0000000000008FD3                 db  0Eh
.eh_frame:0000000000008FD4                 db  18h
.eh_frame:0000000000008FD5                 db  83h
.eh_frame:0000000000008FD6                 db    3
.eh_frame:0000000000008FD7                 db  50h ; P
.eh_frame:0000000000008FD8                 db  0Eh
.eh_frame:0000000000008FD9                 db 0D0h
.eh_frame:0000000000008FDA                 db    1
.eh_frame:0000000000008FDB                 db    2
.eh_frame:0000000000008FDC                 db 0ABh
.eh_frame:0000000000008FDD                 db  0Ah
.eh_frame:0000000000008FDE                 db  0Eh
.eh_frame:0000000000008FDF                 db  18h
.eh_frame:0000000000008FE0                 db  41h ; A
.eh_frame:0000000000008FE1                 db  0Eh
.eh_frame:0000000000008FE2                 db  10h
.eh_frame:0000000000008FE3                 db  41h ; A
.eh_frame:0000000000008FE4                 db  0Eh
.eh_frame:0000000000008FE5                 db    8
.eh_frame:0000000000008FE6                 db  41h ; A
.eh_frame:0000000000008FE7                 db  0Bh
.eh_frame:0000000000008FE8                 db  1Ch
.eh_frame:0000000000008FE9                 db    0
.eh_frame:0000000000008FEA                 db    0
.eh_frame:0000000000008FEB                 db    0
.eh_frame:0000000000008FEC                 db  0Ch
.eh_frame:0000000000008FED                 db  0Ah
.eh_frame:0000000000008FEE                 db    0
.eh_frame:0000000000008FEF                 db    0
.eh_frame:0000000000008FF0                 db  30h ; 0
.eh_frame:0000000000008FF1                 db 0D5h
.eh_frame:0000000000008FF2                 db 0FFh
.eh_frame:0000000000008FF3                 db 0FFh
.eh_frame:0000000000008FF4                 db  80h
.eh_frame:0000000000008FF5                 db    0
.eh_frame:0000000000008FF6                 db    0
.eh_frame:0000000000008FF7                 db    0
.eh_frame:0000000000008FF8                 db    0
.eh_frame:0000000000008FF9                 db  41h ; A
.eh_frame:0000000000008FFA                 db  0Eh
.eh_frame:0000000000008FFB                 db  10h
.eh_frame:0000000000008FFC                 db  83h
.eh_frame:0000000000008FFD                 db    2
.eh_frame:0000000000008FFE                 db    2
.eh_frame:0000000000008FFF                 db  7Ah ; z
.eh_frame:0000000000009000                 db  0Eh
.eh_frame:0000000000009001                 db    8
.eh_frame:0000000000009002                 db    0
.eh_frame:0000000000009003                 db    0
.eh_frame:0000000000009004                 db    0
.eh_frame:0000000000009005                 db    0
.eh_frame:0000000000009006                 db    0
.eh_frame:0000000000009007                 db    0
.eh_frame:0000000000009008                 db  18h
.eh_frame:0000000000009009                 db    0
.eh_frame:000000000000900A                 db    0
.eh_frame:000000000000900B                 db    0
.eh_frame:000000000000900C                 db  2Ch ; ,
.eh_frame:000000000000900D                 db  0Ah
.eh_frame:000000000000900E                 db    0
.eh_frame:000000000000900F                 db    0
.eh_frame:0000000000009010                 db  90h
.eh_frame:0000000000009011                 db 0D5h
.eh_frame:0000000000009012                 db 0FFh
.eh_frame:0000000000009013                 db 0FFh
.eh_frame:0000000000009014                 db  1Ah
.eh_frame:0000000000009015                 db    0
.eh_frame:0000000000009016                 db    0
.eh_frame:0000000000009017                 db    0
.eh_frame:0000000000009018                 db    0
.eh_frame:0000000000009019                 db  41h ; A
.eh_frame:000000000000901A                 db  0Eh
.eh_frame:000000000000901B                 db  10h
.eh_frame:000000000000901C                 db  83h
.eh_frame:000000000000901D                 db    2
.eh_frame:000000000000901E                 db  53h ; S
.eh_frame:000000000000901F                 db  0Ah
.eh_frame:0000000000009020                 db  0Eh
.eh_frame:0000000000009021                 db    8
.eh_frame:0000000000009022                 db  41h ; A
.eh_frame:0000000000009023                 db  0Bh
.eh_frame:0000000000009024                 db  10h
.eh_frame:0000000000009025                 db    0
.eh_frame:0000000000009026                 db    0
.eh_frame:0000000000009027                 db    0
.eh_frame:0000000000009028                 db  48h ; H
.eh_frame:0000000000009029                 db  0Ah
.eh_frame:000000000000902A                 db    0
.eh_frame:000000000000902B                 db    0
.eh_frame:000000000000902C                 db  94h
.eh_frame:000000000000902D                 db 0D5h
.eh_frame:000000000000902E                 db 0FFh
.eh_frame:000000000000902F                 db 0FFh
.eh_frame:0000000000009030                 db  24h ; $
.eh_frame:0000000000009031                 db    0
.eh_frame:0000000000009032                 db    0
.eh_frame:0000000000009033                 db    0
.eh_frame:0000000000009034                 db    0
.eh_frame:0000000000009035                 db  5Fh ; _
.eh_frame:0000000000009036                 db  0Eh
.eh_frame:0000000000009037                 db  10h
.eh_frame:0000000000009038                 db  10h
.eh_frame:0000000000009039                 db    0
.eh_frame:000000000000903A                 db    0
.eh_frame:000000000000903B                 db    0
.eh_frame:000000000000903C                 db  5Ch ; \
.eh_frame:000000000000903D                 db  0Ah
.eh_frame:000000000000903E                 db    0
.eh_frame:000000000000903F                 db    0
.eh_frame:0000000000009040                 db 0B0h
.eh_frame:0000000000009041                 db 0D5h
.eh_frame:0000000000009042                 db 0FFh
.eh_frame:0000000000009043                 db 0FFh
.eh_frame:0000000000009044                 db    2
.eh_frame:0000000000009045                 db    0
.eh_frame:0000000000009046                 db    0
.eh_frame:0000000000009047                 db    0
.eh_frame:0000000000009048                 db    0
.eh_frame:0000000000009049                 db    0
.eh_frame:000000000000904A                 db    0
.eh_frame:000000000000904B                 db    0
.eh_frame:000000000000904C                 db  20h
.eh_frame:000000000000904D                 db    0
.eh_frame:000000000000904E                 db    0
.eh_frame:000000000000904F                 db    0
.eh_frame:0000000000009050                 db  70h ; p
.eh_frame:0000000000009051                 db  0Ah
.eh_frame:0000000000009052                 db    0
.eh_frame:0000000000009053                 db    0
.eh_frame:0000000000009054                 db 0ACh
.eh_frame:0000000000009055                 db 0D5h
.eh_frame:0000000000009056                 db 0FFh
.eh_frame:0000000000009057                 db 0FFh
.eh_frame:0000000000009058                 db  36h ; 6
.eh_frame:0000000000009059                 db    0
.eh_frame:000000000000905A                 db    0
.eh_frame:000000000000905B                 db    0
.eh_frame:000000000000905C                 db    0
.eh_frame:000000000000905D                 db  44h ; D
.eh_frame:000000000000905E                 db  0Eh
.eh_frame:000000000000905F                 db  10h
.eh_frame:0000000000009060                 db  83h
.eh_frame:0000000000009061                 db    2
.eh_frame:0000000000009062                 db  5Dh ; ]
.eh_frame:0000000000009063                 db  0Ah
.eh_frame:0000000000009064                 db  0Eh
.eh_frame:0000000000009065                 db    8
.eh_frame:0000000000009066                 db  47h ; G
.eh_frame:0000000000009067                 db  0Bh
.eh_frame:0000000000009068                 db  48h ; H
.eh_frame:0000000000009069                 db  0Ah
.eh_frame:000000000000906A                 db  0Eh
.eh_frame:000000000000906B                 db    8
.eh_frame:000000000000906C                 db  41h ; A
.eh_frame:000000000000906D                 db  0Bh
.eh_frame:000000000000906E                 db    0
.eh_frame:000000000000906F                 db    0
.eh_frame:0000000000009070                 db  10h
.eh_frame:0000000000009071                 db    0
.eh_frame:0000000000009072                 db    0
.eh_frame:0000000000009073                 db    0
.eh_frame:0000000000009074                 db  94h
.eh_frame:0000000000009075                 db  0Ah
.eh_frame:0000000000009076                 db    0
.eh_frame:0000000000009077                 db    0
.eh_frame:0000000000009078                 db 0C8h
.eh_frame:0000000000009079                 db 0D5h
.eh_frame:000000000000907A                 db 0FFh
.eh_frame:000000000000907B                 db 0FFh
.eh_frame:000000000000907C                 db  24h ; $
.eh_frame:000000000000907D                 db    0
.eh_frame:000000000000907E                 db    0
.eh_frame:000000000000907F                 db    0
.eh_frame:0000000000009080                 db    0
.eh_frame:0000000000009081                 db  5Fh ; _
.eh_frame:0000000000009082                 db  0Eh
.eh_frame:0000000000009083                 db  10h
.eh_frame:0000000000009084                 db  14h
.eh_frame:0000000000009085                 db    0
.eh_frame:0000000000009086                 db    0
.eh_frame:0000000000009087                 db    0
.eh_frame:0000000000009088                 db 0A8h
.eh_frame:0000000000009089                 db  0Ah
.eh_frame:000000000000908A                 db    0
.eh_frame:000000000000908B                 db    0
.eh_frame:000000000000908C                 db 0E4h
.eh_frame:000000000000908D                 db 0D5h
.eh_frame:000000000000908E                 db 0FFh
.eh_frame:000000000000908F                 db 0FFh
.eh_frame:0000000000009090                 db  82h
.eh_frame:0000000000009091                 db    0
.eh_frame:0000000000009092                 db    0
.eh_frame:0000000000009093                 db    0
.eh_frame:0000000000009094                 db    0
.eh_frame:0000000000009095                 db    2
.eh_frame:0000000000009096                 db  5Fh ; _
.eh_frame:0000000000009097                 db  0Eh
.eh_frame:0000000000009098                 db  10h
.eh_frame:0000000000009099                 db  49h ; I
.eh_frame:000000000000909A                 db  0Eh
.eh_frame:000000000000909B                 db    8
.eh_frame:000000000000909C                 db  14h
.eh_frame:000000000000909D                 db    0
.eh_frame:000000000000909E                 db    0
.eh_frame:000000000000909F                 db    0
.eh_frame:00000000000090A0                 db 0C0h
.eh_frame:00000000000090A1                 db  0Ah
.eh_frame:00000000000090A2                 db    0
.eh_frame:00000000000090A3                 db    0
.eh_frame:00000000000090A4                 db  5Ch ; \
.eh_frame:00000000000090A5                 db 0D6h
.eh_frame:00000000000090A6                 db 0FFh
.eh_frame:00000000000090A7                 db 0FFh
.eh_frame:00000000000090A8                 db  4Ah ; J
.eh_frame:00000000000090A9                 db    0
.eh_frame:00000000000090AA                 db    0
.eh_frame:00000000000090AB                 db    0
.eh_frame:00000000000090AC                 db    0
.eh_frame:00000000000090AD                 db    2
.eh_frame:00000000000090AE                 db  45h ; E
.eh_frame:00000000000090AF                 db  0Eh
.eh_frame:00000000000090B0                 db  10h
.eh_frame:00000000000090B1                 db    0
.eh_frame:00000000000090B2                 db    0
.eh_frame:00000000000090B3                 db    0
.eh_frame:00000000000090B4                 db  18h
.eh_frame:00000000000090B5                 db    0
.eh_frame:00000000000090B6                 db    0
.eh_frame:00000000000090B7                 db    0
.eh_frame:00000000000090B8                 db 0D8h
.eh_frame:00000000000090B9                 db  0Ah
.eh_frame:00000000000090BA                 db    0
.eh_frame:00000000000090BB                 db    0
.eh_frame:00000000000090BC                 db  94h
.eh_frame:00000000000090BD                 db 0D6h
.eh_frame:00000000000090BE                 db 0FFh
.eh_frame:00000000000090BF                 db 0FFh
.eh_frame:00000000000090C0                 db  17h
.eh_frame:00000000000090C1                 db    0
.eh_frame:00000000000090C2                 db    0
.eh_frame:00000000000090C3                 db    0
.eh_frame:00000000000090C4                 db    0
.eh_frame:00000000000090C5                 db  41h ; A
.eh_frame:00000000000090C6                 db  0Eh
.eh_frame:00000000000090C7                 db  10h
.eh_frame:00000000000090C8                 db  83h
.eh_frame:00000000000090C9                 db    2
.eh_frame:00000000000090CA                 db  51h ; Q
.eh_frame:00000000000090CB                 db  0Eh
.eh_frame:00000000000090CC                 db    8
.eh_frame:00000000000090CD                 db    0
.eh_frame:00000000000090CE                 db    0
.eh_frame:00000000000090CF                 db    0
.eh_frame:00000000000090D0                 db  18h
.eh_frame:00000000000090D1                 db    0
.eh_frame:00000000000090D2                 db    0
.eh_frame:00000000000090D3                 db    0
.eh_frame:00000000000090D4                 db 0F4h
.eh_frame:00000000000090D5                 db  0Ah
.eh_frame:00000000000090D6                 db    0
.eh_frame:00000000000090D7                 db    0
.eh_frame:00000000000090D8                 db  98h
.eh_frame:00000000000090D9                 db 0D6h
.eh_frame:00000000000090DA                 db 0FFh
.eh_frame:00000000000090DB                 db 0FFh
.eh_frame:00000000000090DC                 db  2Eh ; .
.eh_frame:00000000000090DD                 db    0
.eh_frame:00000000000090DE                 db    0
.eh_frame:00000000000090DF                 db    0
.eh_frame:00000000000090E0                 db    0
.eh_frame:00000000000090E1                 db  47h ; G
.eh_frame:00000000000090E2                 db  0Eh
.eh_frame:00000000000090E3                 db  10h
.eh_frame:00000000000090E4                 db  61h ; a
.eh_frame:00000000000090E5                 db  0Ah
.eh_frame:00000000000090E6                 db  0Eh
.eh_frame:00000000000090E7                 db    8
.eh_frame:00000000000090E8                 db  41h ; A
.eh_frame:00000000000090E9                 db  0Bh
.eh_frame:00000000000090EA                 db    0
.eh_frame:00000000000090EB                 db    0
.eh_frame:00000000000090EC                 db  24h ; $
.eh_frame:00000000000090ED                 db    0
.eh_frame:00000000000090EE                 db    0
.eh_frame:00000000000090EF                 db    0
.eh_frame:00000000000090F0                 db  10h
.eh_frame:00000000000090F1                 db  0Bh
.eh_frame:00000000000090F2                 db    0
.eh_frame:00000000000090F3                 db    0
.eh_frame:00000000000090F4                 db 0ACh
.eh_frame:00000000000090F5                 db 0D6h
.eh_frame:00000000000090F6                 db 0FFh
.eh_frame:00000000000090F7                 db 0FFh
.eh_frame:00000000000090F8                 db  28h ; (
.eh_frame:00000000000090F9                 db    0
.eh_frame:00000000000090FA                 db    0
.eh_frame:00000000000090FB                 db    0
.eh_frame:00000000000090FC                 db    0
.eh_frame:00000000000090FD                 db  41h ; A
.eh_frame:00000000000090FE                 db  0Eh
.eh_frame:00000000000090FF                 db  10h
.eh_frame:0000000000009100                 db  86h
.eh_frame:0000000000009101                 db    2
.eh_frame:0000000000009102                 db  41h ; A
.eh_frame:0000000000009103                 db  0Eh
.eh_frame:0000000000009104                 db  18h
.eh_frame:0000000000009105                 db  83h
.eh_frame:0000000000009106                 db    3
.eh_frame:0000000000009107                 db  4Dh ; M
.eh_frame:0000000000009108                 db  0Eh
.eh_frame:0000000000009109                 db  20h
.eh_frame:000000000000910A                 db  49h ; I
.eh_frame:000000000000910B                 db  0Eh
.eh_frame:000000000000910C                 db  18h
.eh_frame:000000000000910D                 db  47h ; G
.eh_frame:000000000000910E                 db  0Eh
.eh_frame:000000000000910F                 db  10h
.eh_frame:0000000000009110                 db  41h ; A
.eh_frame:0000000000009111                 db  0Eh
.eh_frame:0000000000009112                 db    8
.eh_frame:0000000000009113                 db    0
.eh_frame:0000000000009114                 db  18h
.eh_frame:0000000000009115                 db    0
.eh_frame:0000000000009116                 db    0
.eh_frame:0000000000009117                 db    0
.eh_frame:0000000000009118                 db  38h ; 8
.eh_frame:0000000000009119                 db  0Bh
.eh_frame:000000000000911A                 db    0
.eh_frame:000000000000911B                 db    0
.eh_frame:000000000000911C                 db 0B4h
.eh_frame:000000000000911D                 db 0D6h
.eh_frame:000000000000911E                 db 0FFh
.eh_frame:000000000000911F                 db 0FFh
.eh_frame:0000000000009120                 db  13h
.eh_frame:0000000000009121                 db    0
.eh_frame:0000000000009122                 db    0
.eh_frame:0000000000009123                 db    0
.eh_frame:0000000000009124                 db    0
.eh_frame:0000000000009125                 db  41h ; A
.eh_frame:0000000000009126                 db  0Eh
.eh_frame:0000000000009127                 db  10h
.eh_frame:0000000000009128                 db  83h
.eh_frame:0000000000009129                 db    2
.eh_frame:000000000000912A                 db  50h ; P
.eh_frame:000000000000912B                 db  0Eh
.eh_frame:000000000000912C                 db    8
.eh_frame:000000000000912D                 db    0
.eh_frame:000000000000912E                 db    0
.eh_frame:000000000000912F                 db    0
.eh_frame:0000000000009130                 db  14h
.eh_frame:0000000000009131                 db    0
.eh_frame:0000000000009132                 db    0
.eh_frame:0000000000009133                 db    0
.eh_frame:0000000000009134                 db  54h ; T
.eh_frame:0000000000009135                 db  0Bh
.eh_frame:0000000000009136                 db    0
.eh_frame:0000000000009137                 db    0
.eh_frame:0000000000009138                 db 0B8h
.eh_frame:0000000000009139                 db 0D6h
.eh_frame:000000000000913A                 db 0FFh
.eh_frame:000000000000913B                 db 0FFh
.eh_frame:000000000000913C                 db  35h ; 5
.eh_frame:000000000000913D                 db    0
.eh_frame:000000000000913E                 db    0
.eh_frame:000000000000913F                 db    0
.eh_frame:0000000000009140                 db    0
.eh_frame:0000000000009141                 db  4Bh ; K
.eh_frame:0000000000009142                 db  0Eh
.eh_frame:0000000000009143                 db  10h
.eh_frame:0000000000009144                 db    0
.eh_frame:0000000000009145                 db    0
.eh_frame:0000000000009146                 db    0
.eh_frame:0000000000009147                 db    0
.eh_frame:0000000000009148                 db  34h ; 4
.eh_frame:0000000000009149                 db    0
.eh_frame:000000000000914A                 db    0
.eh_frame:000000000000914B                 db    0
.eh_frame:000000000000914C                 db  6Ch ; l
.eh_frame:000000000000914D                 db  0Bh
.eh_frame:000000000000914E                 db    0
.eh_frame:000000000000914F                 db    0
.eh_frame:0000000000009150                 db 0E0h
.eh_frame:0000000000009151                 db 0D6h
.eh_frame:0000000000009152                 db 0FFh
.eh_frame:0000000000009153                 db 0FFh
.eh_frame:0000000000009154                 db  7Bh ; {
.eh_frame:0000000000009155                 db    0
.eh_frame:0000000000009156                 db    0
.eh_frame:0000000000009157                 db    0
.eh_frame:0000000000009158                 db    0
.eh_frame:0000000000009159                 db  42h ; B
.eh_frame:000000000000915A                 db  0Eh
.eh_frame:000000000000915B                 db  10h
.eh_frame:000000000000915C                 db  8Ch
.eh_frame:000000000000915D                 db    2
.eh_frame:000000000000915E                 db  41h ; A
.eh_frame:000000000000915F                 db  0Eh
.eh_frame:0000000000009160                 db  18h
.eh_frame:0000000000009161                 db  86h
.eh_frame:0000000000009162                 db    3
.eh_frame:0000000000009163                 db  41h ; A
.eh_frame:0000000000009164                 db  0Eh
.eh_frame:0000000000009165                 db  20h
.eh_frame:0000000000009166                 db  83h
.eh_frame:0000000000009167                 db    4
.eh_frame:0000000000009168                 db  7Dh ; }
.eh_frame:0000000000009169                 db  0Ah
.eh_frame:000000000000916A                 db  0Eh
.eh_frame:000000000000916B                 db  18h
.eh_frame:000000000000916C                 db  41h ; A
.eh_frame:000000000000916D                 db  0Eh
.eh_frame:000000000000916E                 db  10h
.eh_frame:000000000000916F                 db  42h ; B
.eh_frame:0000000000009170                 db  0Eh
.eh_frame:0000000000009171                 db    8
.eh_frame:0000000000009172                 db  44h ; D
.eh_frame:0000000000009173                 db  0Bh
.eh_frame:0000000000009174                 db  60h ; `
.eh_frame:0000000000009175                 db  0Ah
.eh_frame:0000000000009176                 db  0Eh
.eh_frame:0000000000009177                 db  18h
.eh_frame:0000000000009178                 db  41h ; A
.eh_frame:0000000000009179                 db  0Eh
.eh_frame:000000000000917A                 db  10h
.eh_frame:000000000000917B                 db  42h ; B
.eh_frame:000000000000917C                 db  0Eh
.eh_frame:000000000000917D                 db    8
.eh_frame:000000000000917E                 db  45h ; E
.eh_frame:000000000000917F                 db  0Bh
.eh_frame:0000000000009180                 db  34h ; 4
.eh_frame:0000000000009181                 db    0
.eh_frame:0000000000009182                 db    0
.eh_frame:0000000000009183                 db    0
.eh_frame:0000000000009184                 db 0A4h
.eh_frame:0000000000009185                 db  0Bh
.eh_frame:0000000000009186                 db    0
.eh_frame:0000000000009187                 db    0
.eh_frame:0000000000009188                 db  28h ; (
.eh_frame:0000000000009189                 db 0D7h
.eh_frame:000000000000918A                 db 0FFh
.eh_frame:000000000000918B                 db 0FFh
.eh_frame:000000000000918C                 db  7Eh ; ~
.eh_frame:000000000000918D                 db    2
.eh_frame:000000000000918E                 db    0
.eh_frame:000000000000918F                 db    0
.eh_frame:0000000000009190                 db    0
.eh_frame:0000000000009191                 db  42h ; B
.eh_frame:0000000000009192                 db  0Eh
.eh_frame:0000000000009193                 db  10h
.eh_frame:0000000000009194                 db  8Ch
.eh_frame:0000000000009195                 db    2
.eh_frame:0000000000009196                 db  41h ; A
.eh_frame:0000000000009197                 db  0Eh
.eh_frame:0000000000009198                 db  18h
.eh_frame:0000000000009199                 db  86h
.eh_frame:000000000000919A                 db    3
.eh_frame:000000000000919B                 db  43h ; C
.eh_frame:000000000000919C                 db  0Eh
.eh_frame:000000000000919D                 db  20h
.eh_frame:000000000000919E                 db  83h
.eh_frame:000000000000919F                 db    4
.eh_frame:00000000000091A0                 db  44h ; D
.eh_frame:00000000000091A1                 db  0Eh
.eh_frame:00000000000091A2                 db  70h ; p
.eh_frame:00000000000091A3                 db    2
.eh_frame:00000000000091A4                 db 0F0h
.eh_frame:00000000000091A5                 db  0Ah
.eh_frame:00000000000091A6                 db  0Eh
.eh_frame:00000000000091A7                 db  20h
.eh_frame:00000000000091A8                 db  41h ; A
.eh_frame:00000000000091A9                 db  0Eh
.eh_frame:00000000000091AA                 db  18h
.eh_frame:00000000000091AB                 db  41h ; A
.eh_frame:00000000000091AC                 db  0Eh
.eh_frame:00000000000091AD                 db  10h
.eh_frame:00000000000091AE                 db  42h ; B
.eh_frame:00000000000091AF                 db  0Eh
.eh_frame:00000000000091B0                 db    8
.eh_frame:00000000000091B1                 db  42h ; B
.eh_frame:00000000000091B2                 db  0Bh
.eh_frame:00000000000091B3                 db    0
.eh_frame:00000000000091B4                 db    0
.eh_frame:00000000000091B5                 db    0
.eh_frame:00000000000091B6                 db    0
.eh_frame:00000000000091B7                 db    0
.eh_frame:00000000000091B8                 db  1Ch
.eh_frame:00000000000091B9                 db    0
.eh_frame:00000000000091BA                 db    0
.eh_frame:00000000000091BB                 db    0
.eh_frame:00000000000091BC                 db 0DCh
.eh_frame:00000000000091BD                 db  0Bh
.eh_frame:00000000000091BE                 db    0
.eh_frame:00000000000091BF                 db    0
.eh_frame:00000000000091C0                 db  70h ; p
.eh_frame:00000000000091C1                 db 0D9h
.eh_frame:00000000000091C2                 db 0FFh
.eh_frame:00000000000091C3                 db 0FFh
.eh_frame:00000000000091C4                 db  40h ; @
.eh_frame:00000000000091C5                 db    0
.eh_frame:00000000000091C6                 db    0
.eh_frame:00000000000091C7                 db    0
.eh_frame:00000000000091C8                 db    0
.eh_frame:00000000000091C9                 db  44h ; D
.eh_frame:00000000000091CA                 db  0Eh
.eh_frame:00000000000091CB                 db  10h
.eh_frame:00000000000091CC                 db  83h
.eh_frame:00000000000091CD                 db    2
.eh_frame:00000000000091CE                 db  5Ah ; Z
.eh_frame:00000000000091CF                 db  0Ah
.eh_frame:00000000000091D0                 db  0Eh
.eh_frame:00000000000091D1                 db    8
.eh_frame:00000000000091D2                 db  4Ah ; J
.eh_frame:00000000000091D3                 db  0Bh
.eh_frame:00000000000091D4                 db  53h ; S
.eh_frame:00000000000091D5                 db  0Eh
.eh_frame:00000000000091D6                 db    8
.eh_frame:00000000000091D7                 db    0
.eh_frame:00000000000091D8                 db  2Ch ; ,
.eh_frame:00000000000091D9                 db    0
.eh_frame:00000000000091DA                 db    0
.eh_frame:00000000000091DB                 db    0
.eh_frame:00000000000091DC                 db 0FCh
.eh_frame:00000000000091DD                 db  0Bh
.eh_frame:00000000000091DE                 db    0
.eh_frame:00000000000091DF                 db    0
.eh_frame:00000000000091E0                 db  90h
.eh_frame:00000000000091E1                 db 0D9h
.eh_frame:00000000000091E2                 db 0FFh
.eh_frame:00000000000091E3                 db 0FFh
.eh_frame:00000000000091E4                 db  57h ; W
.eh_frame:00000000000091E5                 db    0
.eh_frame:00000000000091E6                 db    0
.eh_frame:00000000000091E7                 db    0
.eh_frame:00000000000091E8                 db    0
.eh_frame:00000000000091E9                 db  63h ; c
.eh_frame:00000000000091EA                 db  0Eh
.eh_frame:00000000000091EB                 db  10h
.eh_frame:00000000000091EC                 db  8Ch
.eh_frame:00000000000091ED                 db    2
.eh_frame:00000000000091EE                 db  41h ; A
.eh_frame:00000000000091EF                 db  0Eh
.eh_frame:00000000000091F0                 db  18h
.eh_frame:00000000000091F1                 db  86h
.eh_frame:00000000000091F2                 db    3
.eh_frame:00000000000091F3                 db  44h ; D
.eh_frame:00000000000091F4                 db  0Eh
.eh_frame:00000000000091F5                 db  20h
.eh_frame:00000000000091F6                 db  83h
.eh_frame:00000000000091F7                 db    4
.eh_frame:00000000000091F8                 db  6Bh ; k
.eh_frame:00000000000091F9                 db  0Eh
.eh_frame:00000000000091FA                 db  18h
.eh_frame:00000000000091FB                 db  41h ; A
.eh_frame:00000000000091FC                 db  0Eh
.eh_frame:00000000000091FD                 db  10h
.eh_frame:00000000000091FE                 db  42h ; B
.eh_frame:00000000000091FF                 db  0Eh
.eh_frame:0000000000009200                 db    8
.eh_frame:0000000000009201                 db    0
.eh_frame:0000000000009202                 db    0
.eh_frame:0000000000009203                 db    0
.eh_frame:0000000000009204                 db    0
.eh_frame:0000000000009205                 db    0
.eh_frame:0000000000009206                 db    0
.eh_frame:0000000000009207                 db    0
.eh_frame:0000000000009208                 db  3Ch ; <
.eh_frame:0000000000009209                 db    0
.eh_frame:000000000000920A                 db    0
.eh_frame:000000000000920B                 db    0
.eh_frame:000000000000920C                 db  2Ch ; ,
.eh_frame:000000000000920D                 db  0Ch
.eh_frame:000000000000920E                 db    0
.eh_frame:000000000000920F                 db    0
.eh_frame:0000000000009210                 db 0C0h
.eh_frame:0000000000009211                 db 0D9h
.eh_frame:0000000000009212                 db 0FFh
.eh_frame:0000000000009213                 db 0FFh
.eh_frame:0000000000009214                 db  83h
.eh_frame:0000000000009215                 db    0
.eh_frame:0000000000009216                 db    0
.eh_frame:0000000000009217                 db    0
.eh_frame:0000000000009218                 db    0
.eh_frame:0000000000009219                 db  42h ; B
.eh_frame:000000000000921A                 db  0Eh
.eh_frame:000000000000921B                 db  10h
.eh_frame:000000000000921C                 db  8Dh
.eh_frame:000000000000921D                 db    2
.eh_frame:000000000000921E                 db  42h ; B
.eh_frame:000000000000921F                 db  0Eh
.eh_frame:0000000000009220                 db  18h
.eh_frame:0000000000009221                 db  8Ch
.eh_frame:0000000000009222                 db    3
.eh_frame:0000000000009223                 db  44h ; D
.eh_frame:0000000000009224                 db  0Eh
.eh_frame:0000000000009225                 db  20h
.eh_frame:0000000000009226                 db  86h
.eh_frame:0000000000009227                 db    4
.eh_frame:0000000000009228                 db  41h ; A
.eh_frame:0000000000009229                 db  0Eh
.eh_frame:000000000000922A                 db  28h ; (
.eh_frame:000000000000922B                 db  83h
.eh_frame:000000000000922C                 db    5
.eh_frame:000000000000922D                 db  4Ah ; J
.eh_frame:000000000000922E                 db  0Eh
.eh_frame:000000000000922F                 db  40h ; @
.eh_frame:0000000000009230                 db    2
.eh_frame:0000000000009231                 db  64h ; d
.eh_frame:0000000000009232                 db  0Ah
.eh_frame:0000000000009233                 db  0Eh
.eh_frame:0000000000009234                 db  28h ; (
.eh_frame:0000000000009235                 db  41h ; A
.eh_frame:0000000000009236                 db  0Eh
.eh_frame:0000000000009237                 db  20h
.eh_frame:0000000000009238                 db  41h ; A
.eh_frame:0000000000009239                 db  0Eh
.eh_frame:000000000000923A                 db  18h
.eh_frame:000000000000923B                 db  42h ; B
.eh_frame:000000000000923C                 db  0Eh
.eh_frame:000000000000923D                 db  10h
.eh_frame:000000000000923E                 db  42h ; B
.eh_frame:000000000000923F                 db  0Eh
.eh_frame:0000000000009240                 db    8
.eh_frame:0000000000009241                 db  41h ; A
.eh_frame:0000000000009242                 db  0Bh
.eh_frame:0000000000009243                 db    0
.eh_frame:0000000000009244                 db    0
.eh_frame:0000000000009245                 db    0
.eh_frame:0000000000009246                 db    0
.eh_frame:0000000000009247                 db    0
.eh_frame:0000000000009248                 db  4Ch ; L
.eh_frame:0000000000009249                 db    0
.eh_frame:000000000000924A                 db    0
.eh_frame:000000000000924B                 db    0
.eh_frame:000000000000924C                 db  6Ch ; l
.eh_frame:000000000000924D                 db  0Ch
.eh_frame:000000000000924E                 db    0
.eh_frame:000000000000924F                 db    0
.eh_frame:0000000000009250                 db  10h
.eh_frame:0000000000009251                 db 0DAh
.eh_frame:0000000000009252                 db 0FFh
.eh_frame:0000000000009253                 db 0FFh
.eh_frame:0000000000009254                 db  7Dh ; }
.eh_frame:0000000000009255                 db    0
.eh_frame:0000000000009256                 db    0
.eh_frame:0000000000009257                 db    0
.eh_frame:0000000000009258                 db    0
.eh_frame:0000000000009259                 db  42h ; B
.eh_frame:000000000000925A                 db  0Eh
.eh_frame:000000000000925B                 db  10h
.eh_frame:000000000000925C                 db  8Ch
.eh_frame:000000000000925D                 db    2
.eh_frame:000000000000925E                 db  41h ; A
.eh_frame:000000000000925F                 db  0Eh
.eh_frame:0000000000009260                 db  18h
.eh_frame:0000000000009261                 db  86h
.eh_frame:0000000000009262                 db    3
.eh_frame:0000000000009263                 db  44h ; D
.eh_frame:0000000000009264                 db  0Eh
.eh_frame:0000000000009265                 db  20h
.eh_frame:0000000000009266                 db  83h
.eh_frame:0000000000009267                 db    4
.eh_frame:0000000000009268                 db  69h ; i
.eh_frame:0000000000009269                 db  0Ah
.eh_frame:000000000000926A                 db  0Eh
.eh_frame:000000000000926B                 db  18h
.eh_frame:000000000000926C                 db  41h ; A
.eh_frame:000000000000926D                 db  0Eh
.eh_frame:000000000000926E                 db  10h
.eh_frame:000000000000926F                 db  42h ; B
.eh_frame:0000000000009270                 db  0Eh
.eh_frame:0000000000009271                 db    8
.eh_frame:0000000000009272                 db  45h ; E
.eh_frame:0000000000009273                 db  0Bh
.eh_frame:0000000000009274                 db  55h ; U
.eh_frame:0000000000009275                 db  0Ah
.eh_frame:0000000000009276                 db  0Eh
.eh_frame:0000000000009277                 db  18h
.eh_frame:0000000000009278                 db  41h ; A
.eh_frame:0000000000009279                 db  0Eh
.eh_frame:000000000000927A                 db  10h
.eh_frame:000000000000927B                 db  42h ; B
.eh_frame:000000000000927C                 db  0Eh
.eh_frame:000000000000927D                 db    8
.eh_frame:000000000000927E                 db  48h ; H
.eh_frame:000000000000927F                 db  0Bh
.eh_frame:0000000000009280                 db  41h ; A
.eh_frame:0000000000009281                 db  0Ah
.eh_frame:0000000000009282                 db  0Eh
.eh_frame:0000000000009283                 db  18h
.eh_frame:0000000000009284                 db  46h ; F
.eh_frame:0000000000009285                 db  0Eh
.eh_frame:0000000000009286                 db  10h
.eh_frame:0000000000009287                 db  42h ; B
.eh_frame:0000000000009288                 db  0Eh
.eh_frame:0000000000009289                 db    8
.eh_frame:000000000000928A                 db  47h ; G
.eh_frame:000000000000928B                 db  0Bh
.eh_frame:000000000000928C                 db  49h ; I
.eh_frame:000000000000928D                 db  0Eh
.eh_frame:000000000000928E                 db  18h
.eh_frame:000000000000928F                 db  41h ; A
.eh_frame:0000000000009290                 db  0Eh
.eh_frame:0000000000009291                 db  10h
.eh_frame:0000000000009292                 db  42h ; B
.eh_frame:0000000000009293                 db  0Eh
.eh_frame:0000000000009294                 db    8
.eh_frame:0000000000009295                 db    0
.eh_frame:0000000000009296                 db    0
.eh_frame:0000000000009297                 db    0
.eh_frame:0000000000009298                 db  1Ch
.eh_frame:0000000000009299                 db    0
.eh_frame:000000000000929A                 db    0
.eh_frame:000000000000929B                 db    0
.eh_frame:000000000000929C                 db 0BCh
.eh_frame:000000000000929D                 db  0Ch
.eh_frame:000000000000929E                 db    0
.eh_frame:000000000000929F                 db    0
.eh_frame:00000000000092A0                 db  40h ; @
.eh_frame:00000000000092A1                 db 0DAh
.eh_frame:00000000000092A2                 db 0FFh
.eh_frame:00000000000092A3                 db 0FFh
.eh_frame:00000000000092A4                 db  60h ; `
.eh_frame:00000000000092A5                 db    0
.eh_frame:00000000000092A6                 db    0
.eh_frame:00000000000092A7                 db    0
.eh_frame:00000000000092A8                 db    0
.eh_frame:00000000000092A9                 db  44h ; D
.eh_frame:00000000000092AA                 db  0Eh
.eh_frame:00000000000092AB                 db  10h
.eh_frame:00000000000092AC                 db  75h ; u
.eh_frame:00000000000092AD                 db  0Ah
.eh_frame:00000000000092AE                 db  0Eh
.eh_frame:00000000000092AF                 db    8
.eh_frame:00000000000092B0                 db  47h ; G
.eh_frame:00000000000092B1                 db  0Bh
.eh_frame:00000000000092B2                 db  5Fh ; _
.eh_frame:00000000000092B3                 db  0Eh
.eh_frame:00000000000092B4                 db    8
.eh_frame:00000000000092B5                 db    0
.eh_frame:00000000000092B6                 db    0
.eh_frame:00000000000092B7                 db    0
.eh_frame:00000000000092B8                 db  1Ch
.eh_frame:00000000000092B9                 db    0
.eh_frame:00000000000092BA                 db    0
.eh_frame:00000000000092BB                 db    0
.eh_frame:00000000000092BC                 db 0DCh
.eh_frame:00000000000092BD                 db  0Ch
.eh_frame:00000000000092BE                 db    0
.eh_frame:00000000000092BF                 db    0
.eh_frame:00000000000092C0                 db  80h
.eh_frame:00000000000092C1                 db 0DAh
.eh_frame:00000000000092C2                 db 0FFh
.eh_frame:00000000000092C3                 db 0FFh
.eh_frame:00000000000092C4                 db  3Ch ; <
.eh_frame:00000000000092C5                 db    0
.eh_frame:00000000000092C6                 db    0
.eh_frame:00000000000092C7                 db    0
.eh_frame:00000000000092C8                 db    0
.eh_frame:00000000000092C9                 db  44h ; D
.eh_frame:00000000000092CA                 db  0Eh
.eh_frame:00000000000092CB                 db  10h
.eh_frame:00000000000092CC                 db  61h ; a
.eh_frame:00000000000092CD                 db  0Ah
.eh_frame:00000000000092CE                 db  0Eh
.eh_frame:00000000000092CF                 db    8
.eh_frame:00000000000092D0                 db  4Bh ; K
.eh_frame:00000000000092D1                 db  0Bh
.eh_frame:00000000000092D2                 db  4Bh ; K
.eh_frame:00000000000092D3                 db  0Eh
.eh_frame:00000000000092D4                 db    8
.eh_frame:00000000000092D5                 db    0
.eh_frame:00000000000092D6                 db    0
.eh_frame:00000000000092D7                 db    0
.eh_frame:00000000000092D8                 db  44h ; D
.eh_frame:00000000000092D9                 db    0
.eh_frame:00000000000092DA                 db    0
.eh_frame:00000000000092DB                 db    0
.eh_frame:00000000000092DC                 db 0FCh
.eh_frame:00000000000092DD                 db  0Ch
.eh_frame:00000000000092DE                 db    0
.eh_frame:00000000000092DF                 db    0
.eh_frame:00000000000092E0                 db 0A0h
.eh_frame:00000000000092E1                 db 0DAh
.eh_frame:00000000000092E2                 db 0FFh
.eh_frame:00000000000092E3                 db 0FFh
.eh_frame:00000000000092E4                 db  65h ; e
.eh_frame:00000000000092E5                 db    0
.eh_frame:00000000000092E6                 db    0
.eh_frame:00000000000092E7                 db    0
.eh_frame:00000000000092E8                 db    0
.eh_frame:00000000000092E9                 db  42h ; B
.eh_frame:00000000000092EA                 db  0Eh
.eh_frame:00000000000092EB                 db  10h
.eh_frame:00000000000092EC                 db  8Fh
.eh_frame:00000000000092ED                 db    2
.eh_frame:00000000000092EE                 db  42h ; B
.eh_frame:00000000000092EF                 db  0Eh
.eh_frame:00000000000092F0                 db  18h
.eh_frame:00000000000092F1                 db  8Eh
.eh_frame:00000000000092F2                 db    3
.eh_frame:00000000000092F3                 db  45h ; E
.eh_frame:00000000000092F4                 db  0Eh
.eh_frame:00000000000092F5                 db  20h
.eh_frame:00000000000092F6                 db  8Dh
.eh_frame:00000000000092F7                 db    4
.eh_frame:00000000000092F8                 db  42h ; B
.eh_frame:00000000000092F9                 db  0Eh
.eh_frame:00000000000092FA                 db  28h ; (
.eh_frame:00000000000092FB                 db  8Ch
.eh_frame:00000000000092FC                 db    5
.eh_frame:00000000000092FD                 db  48h ; H
.eh_frame:00000000000092FE                 db  0Eh
.eh_frame:00000000000092FF                 db  30h ; 0
.eh_frame:0000000000009300                 db  86h
.eh_frame:0000000000009301                 db    6
.eh_frame:0000000000009302                 db  48h ; H
.eh_frame:0000000000009303                 db  0Eh
.eh_frame:0000000000009304                 db  38h ; 8
.eh_frame:0000000000009305                 db  83h
.eh_frame:0000000000009306                 db    7
.eh_frame:0000000000009307                 db  4Dh ; M
.eh_frame:0000000000009308                 db  0Eh
.eh_frame:0000000000009309                 db  40h ; @
.eh_frame:000000000000930A                 db  72h ; r
.eh_frame:000000000000930B                 db  0Eh
.eh_frame:000000000000930C                 db  38h ; 8
.eh_frame:000000000000930D                 db  41h ; A
.eh_frame:000000000000930E                 db  0Eh
.eh_frame:000000000000930F                 db  30h ; 0
.eh_frame:0000000000009310                 db  41h ; A
.eh_frame:0000000000009311                 db  0Eh
.eh_frame:0000000000009312                 db  28h ; (
.eh_frame:0000000000009313                 db  42h ; B
.eh_frame:0000000000009314                 db  0Eh
.eh_frame:0000000000009315                 db  20h
.eh_frame:0000000000009316                 db  42h ; B
.eh_frame:0000000000009317                 db  0Eh
.eh_frame:0000000000009318                 db  18h
.eh_frame:0000000000009319                 db  42h ; B
.eh_frame:000000000000931A                 db  0Eh
.eh_frame:000000000000931B                 db  10h
.eh_frame:000000000000931C                 db  42h ; B
.eh_frame:000000000000931D                 db  0Eh
.eh_frame:000000000000931E                 db    8
.eh_frame:000000000000931F                 db    0
.eh_frame:0000000000009320                 db  14h
.eh_frame:0000000000009321                 db    0
.eh_frame:0000000000009322                 db    0
.eh_frame:0000000000009323                 db    0
.eh_frame:0000000000009324                 db  44h ; D
.eh_frame:0000000000009325                 db  0Dh
.eh_frame:0000000000009326                 db    0
.eh_frame:0000000000009327                 db    0
.eh_frame:0000000000009328                 db 0C8h
.eh_frame:0000000000009329                 db 0DAh
.eh_frame:000000000000932A                 db 0FFh
.eh_frame:000000000000932B                 db 0FFh
.eh_frame:000000000000932C                 db    2
.eh_frame:000000000000932D                 db    0
.eh_frame:000000000000932E                 db    0
.eh_frame:000000000000932F                 db    0
.eh_frame:0000000000009330                 db    0
.eh_frame:0000000000009331                 db    0
.eh_frame:0000000000009332                 db    0
.eh_frame:0000000000009333                 db    0
.eh_frame:0000000000009334                 db    0
.eh_frame:0000000000009335                 db    0
.eh_frame:0000000000009336                 db    0
.eh_frame:0000000000009337                 db    0
.eh_frame:0000000000009338                 db  10h
.eh_frame:0000000000009339                 db    0
.eh_frame:000000000000933A                 db    0
.eh_frame:000000000000933B                 db    0
.eh_frame:000000000000933C                 db  5Ch ; \
.eh_frame:000000000000933D                 db  0Dh
.eh_frame:000000000000933E                 db    0
.eh_frame:000000000000933F                 db    0
.eh_frame:0000000000009340                 db 0C0h
.eh_frame:0000000000009341                 db 0DAh
.eh_frame:0000000000009342                 db 0FFh
.eh_frame:0000000000009343                 db 0FFh
.eh_frame:0000000000009344                 db  0Eh
.eh_frame:0000000000009345                 db    0
.eh_frame:0000000000009346                 db    0
.eh_frame:0000000000009347                 db    0
.eh_frame:0000000000009348                 db    0
.eh_frame:0000000000009349                 db    0
.eh_frame:000000000000934A                 db    0
.eh_frame:000000000000934B                 db    0
.eh_frame:000000000000934C __FRAME_END__   db    0
.eh_frame:000000000000934D                 db    0
.eh_frame:000000000000934E                 db    0
.eh_frame:000000000000934F                 db    0
.eh_frame:000000000000934F _eh_frame       ends
.eh_frame:000000000000934F
.init_array:0000000000209A10 ; ELF Initialization Function Table
.init_array:0000000000209A10 ; ===========================================================================
.init_array:0000000000209A10
.init_array:0000000000209A10 ; Segment type: Pure data
.init_array:0000000000209A10 ; Segment permissions: Read/Write
.init_array:0000000000209A10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000209A10                 assume cs:_init_array
.init_array:0000000000209A10                 ;org 209A10h
.init_array:0000000000209A10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000209A10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000209A10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000209A10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000209A10
.fini_array:0000000000209A18 ; ELF Termination Function Table
.fini_array:0000000000209A18 ; ===========================================================================
.fini_array:0000000000209A18
.fini_array:0000000000209A18 ; Segment type: Pure data
.fini_array:0000000000209A18 ; Segment permissions: Read/Write
.fini_array:0000000000209A18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000209A18                 assume cs:_fini_array
.fini_array:0000000000209A18                 ;org 209A18h
.fini_array:0000000000209A18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000209A18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000209A18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000209A18
.data.rel.ro:0000000000209A20 ; ===========================================================================
.data.rel.ro:0000000000209A20
.data.rel.ro:0000000000209A20 ; Segment type: Pure data
.data.rel.ro:0000000000209A20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000209A20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000209A20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000209A20                 ;org 209A20h
.data.rel.ro:0000000000209A20 ; struct option long_options
.data.rel.ro:0000000000209A20 long_options    dq offset aBinary       ; name
.data.rel.ro:0000000000209A20                                         ; DATA XREF: main:loc_1998↑o
.data.rel.ro:0000000000209A20                 dd 0                    ; has_arg ; "binary"
.data.rel.ro:0000000000209A20                 db 4 dup(0)
.data.rel.ro:0000000000209A20                 dq 0                    ; flag
.data.rel.ro:0000000000209A20                 dd 62h                  ; val
.data.rel.ro:0000000000209A20                 db 4 dup(0)
.data.rel.ro:0000000000209A40                 dq offset aCheck        ; "check"
.data.rel.ro:0000000000209A48                 db    0
.data.rel.ro:0000000000209A49                 db    0
.data.rel.ro:0000000000209A4A                 db    0
.data.rel.ro:0000000000209A4B                 db    0
.data.rel.ro:0000000000209A4C                 db    0
.data.rel.ro:0000000000209A4D                 db    0
.data.rel.ro:0000000000209A4E                 db    0
.data.rel.ro:0000000000209A4F                 db    0
.data.rel.ro:0000000000209A50                 db    0
.data.rel.ro:0000000000209A51                 db    0
.data.rel.ro:0000000000209A52                 db    0
.data.rel.ro:0000000000209A53                 db    0
.data.rel.ro:0000000000209A54                 db    0
.data.rel.ro:0000000000209A55                 db    0
.data.rel.ro:0000000000209A56                 db    0
.data.rel.ro:0000000000209A57                 db    0
.data.rel.ro:0000000000209A58                 db  63h ; c
.data.rel.ro:0000000000209A59                 db    0
.data.rel.ro:0000000000209A5A                 db    0
.data.rel.ro:0000000000209A5B                 db    0
.data.rel.ro:0000000000209A5C                 db    0
.data.rel.ro:0000000000209A5D                 db    0
.data.rel.ro:0000000000209A5E                 db    0
.data.rel.ro:0000000000209A5F                 db    0
.data.rel.ro:0000000000209A60                 dq offset aIgnoreMissing ; "ignore-missing"
.data.rel.ro:0000000000209A68                 db    0
.data.rel.ro:0000000000209A69                 db    0
.data.rel.ro:0000000000209A6A                 db    0
.data.rel.ro:0000000000209A6B                 db    0
.data.rel.ro:0000000000209A6C                 db    0
.data.rel.ro:0000000000209A6D                 db    0
.data.rel.ro:0000000000209A6E                 db    0
.data.rel.ro:0000000000209A6F                 db    0
.data.rel.ro:0000000000209A70                 db    0
.data.rel.ro:0000000000209A71                 db    0
.data.rel.ro:0000000000209A72                 db    0
.data.rel.ro:0000000000209A73                 db    0
.data.rel.ro:0000000000209A74                 db    0
.data.rel.ro:0000000000209A75                 db    0
.data.rel.ro:0000000000209A76                 db    0
.data.rel.ro:0000000000209A77                 db    0
.data.rel.ro:0000000000209A78                 db  80h
.data.rel.ro:0000000000209A79                 db    0
.data.rel.ro:0000000000209A7A                 db    0
.data.rel.ro:0000000000209A7B                 db    0
.data.rel.ro:0000000000209A7C                 db    0
.data.rel.ro:0000000000209A7D                 db    0
.data.rel.ro:0000000000209A7E                 db    0
.data.rel.ro:0000000000209A7F                 db    0
.data.rel.ro:0000000000209A80                 dq offset aQuiet        ; "quiet"
.data.rel.ro:0000000000209A88                 db    0
.data.rel.ro:0000000000209A89                 db    0
.data.rel.ro:0000000000209A8A                 db    0
.data.rel.ro:0000000000209A8B                 db    0
.data.rel.ro:0000000000209A8C                 db    0
.data.rel.ro:0000000000209A8D                 db    0
.data.rel.ro:0000000000209A8E                 db    0
.data.rel.ro:0000000000209A8F                 db    0
.data.rel.ro:0000000000209A90                 db    0
.data.rel.ro:0000000000209A91                 db    0
.data.rel.ro:0000000000209A92                 db    0
.data.rel.ro:0000000000209A93                 db    0
.data.rel.ro:0000000000209A94                 db    0
.data.rel.ro:0000000000209A95                 db    0
.data.rel.ro:0000000000209A96                 db    0
.data.rel.ro:0000000000209A97                 db    0
.data.rel.ro:0000000000209A98                 db  82h
.data.rel.ro:0000000000209A99                 db    0
.data.rel.ro:0000000000209A9A                 db    0
.data.rel.ro:0000000000209A9B                 db    0
.data.rel.ro:0000000000209A9C                 db    0
.data.rel.ro:0000000000209A9D                 db    0
.data.rel.ro:0000000000209A9E                 db    0
.data.rel.ro:0000000000209A9F                 db    0
.data.rel.ro:0000000000209AA0                 dq offset aStatus       ; "status"
.data.rel.ro:0000000000209AA8                 db    0
.data.rel.ro:0000000000209AA9                 db    0
.data.rel.ro:0000000000209AAA                 db    0
.data.rel.ro:0000000000209AAB                 db    0
.data.rel.ro:0000000000209AAC                 db    0
.data.rel.ro:0000000000209AAD                 db    0
.data.rel.ro:0000000000209AAE                 db    0
.data.rel.ro:0000000000209AAF                 db    0
.data.rel.ro:0000000000209AB0                 db    0
.data.rel.ro:0000000000209AB1                 db    0
.data.rel.ro:0000000000209AB2                 db    0
.data.rel.ro:0000000000209AB3                 db    0
.data.rel.ro:0000000000209AB4                 db    0
.data.rel.ro:0000000000209AB5                 db    0
.data.rel.ro:0000000000209AB6                 db    0
.data.rel.ro:0000000000209AB7                 db    0
.data.rel.ro:0000000000209AB8                 db  81h
.data.rel.ro:0000000000209AB9                 db    0
.data.rel.ro:0000000000209ABA                 db    0
.data.rel.ro:0000000000209ABB                 db    0
.data.rel.ro:0000000000209ABC                 db    0
.data.rel.ro:0000000000209ABD                 db    0
.data.rel.ro:0000000000209ABE                 db    0
.data.rel.ro:0000000000209ABF                 db    0
.data.rel.ro:0000000000209AC0                 dq offset aText         ; "text"
.data.rel.ro:0000000000209AC8                 db    0
.data.rel.ro:0000000000209AC9                 db    0
.data.rel.ro:0000000000209ACA                 db    0
.data.rel.ro:0000000000209ACB                 db    0
.data.rel.ro:0000000000209ACC                 db    0
.data.rel.ro:0000000000209ACD                 db    0
.data.rel.ro:0000000000209ACE                 db    0
.data.rel.ro:0000000000209ACF                 db    0
.data.rel.ro:0000000000209AD0                 db    0
.data.rel.ro:0000000000209AD1                 db    0
.data.rel.ro:0000000000209AD2                 db    0
.data.rel.ro:0000000000209AD3                 db    0
.data.rel.ro:0000000000209AD4                 db    0
.data.rel.ro:0000000000209AD5                 db    0
.data.rel.ro:0000000000209AD6                 db    0
.data.rel.ro:0000000000209AD7                 db    0
.data.rel.ro:0000000000209AD8                 db  74h ; t
.data.rel.ro:0000000000209AD9                 db    0
.data.rel.ro:0000000000209ADA                 db    0
.data.rel.ro:0000000000209ADB                 db    0
.data.rel.ro:0000000000209ADC                 db    0
.data.rel.ro:0000000000209ADD                 db    0
.data.rel.ro:0000000000209ADE                 db    0
.data.rel.ro:0000000000209ADF                 db    0
.data.rel.ro:0000000000209AE0                 dq offset aWarn         ; "warn"
.data.rel.ro:0000000000209AE8                 db    0
.data.rel.ro:0000000000209AE9                 db    0
.data.rel.ro:0000000000209AEA                 db    0
.data.rel.ro:0000000000209AEB                 db    0
.data.rel.ro:0000000000209AEC                 db    0
.data.rel.ro:0000000000209AED                 db    0
.data.rel.ro:0000000000209AEE                 db    0
.data.rel.ro:0000000000209AEF                 db    0
.data.rel.ro:0000000000209AF0                 db    0
.data.rel.ro:0000000000209AF1                 db    0
.data.rel.ro:0000000000209AF2                 db    0
.data.rel.ro:0000000000209AF3                 db    0
.data.rel.ro:0000000000209AF4                 db    0
.data.rel.ro:0000000000209AF5                 db    0
.data.rel.ro:0000000000209AF6                 db    0
.data.rel.ro:0000000000209AF7                 db    0
.data.rel.ro:0000000000209AF8                 db  77h ; w
.data.rel.ro:0000000000209AF9                 db    0
.data.rel.ro:0000000000209AFA                 db    0
.data.rel.ro:0000000000209AFB                 db    0
.data.rel.ro:0000000000209AFC                 db    0
.data.rel.ro:0000000000209AFD                 db    0
.data.rel.ro:0000000000209AFE                 db    0
.data.rel.ro:0000000000209AFF                 db    0
.data.rel.ro:0000000000209B00                 dq offset aStrict       ; "strict"
.data.rel.ro:0000000000209B08                 db    0
.data.rel.ro:0000000000209B09                 db    0
.data.rel.ro:0000000000209B0A                 db    0
.data.rel.ro:0000000000209B0B                 db    0
.data.rel.ro:0000000000209B0C                 db    0
.data.rel.ro:0000000000209B0D                 db    0
.data.rel.ro:0000000000209B0E                 db    0
.data.rel.ro:0000000000209B0F                 db    0
.data.rel.ro:0000000000209B10                 db    0
.data.rel.ro:0000000000209B11                 db    0
.data.rel.ro:0000000000209B12                 db    0
.data.rel.ro:0000000000209B13                 db    0
.data.rel.ro:0000000000209B14                 db    0
.data.rel.ro:0000000000209B15                 db    0
.data.rel.ro:0000000000209B16                 db    0
.data.rel.ro:0000000000209B17                 db    0
.data.rel.ro:0000000000209B18                 db  83h
.data.rel.ro:0000000000209B19                 db    0
.data.rel.ro:0000000000209B1A                 db    0
.data.rel.ro:0000000000209B1B                 db    0
.data.rel.ro:0000000000209B1C                 db    0
.data.rel.ro:0000000000209B1D                 db    0
.data.rel.ro:0000000000209B1E                 db    0
.data.rel.ro:0000000000209B1F                 db    0
.data.rel.ro:0000000000209B20                 dq offset aTag          ; "tag"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  84h
.data.rel.ro:0000000000209B39                 db    0
.data.rel.ro:0000000000209B3A                 db    0
.data.rel.ro:0000000000209B3B                 db    0
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 dq offset aZero         ; "zero"
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db  7Ah ; z
.data.rel.ro:0000000000209B59                 db    0
.data.rel.ro:0000000000209B5A                 db    0
.data.rel.ro:0000000000209B5B                 db    0
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209B68                 db    0
.data.rel.ro:0000000000209B69                 db    0
.data.rel.ro:0000000000209B6A                 db    0
.data.rel.ro:0000000000209B6B                 db    0
.data.rel.ro:0000000000209B6C                 db    0
.data.rel.ro:0000000000209B6D                 db    0
.data.rel.ro:0000000000209B6E                 db    0
.data.rel.ro:0000000000209B6F                 db    0
.data.rel.ro:0000000000209B70                 db    0
.data.rel.ro:0000000000209B71                 db    0
.data.rel.ro:0000000000209B72                 db    0
.data.rel.ro:0000000000209B73                 db    0
.data.rel.ro:0000000000209B74                 db    0
.data.rel.ro:0000000000209B75                 db    0
.data.rel.ro:0000000000209B76                 db    0
.data.rel.ro:0000000000209B77                 db    0
.data.rel.ro:0000000000209B78                 db  7Eh ; ~
.data.rel.ro:0000000000209B79                 db 0FFh
.data.rel.ro:0000000000209B7A                 db 0FFh
.data.rel.ro:0000000000209B7B                 db 0FFh
.data.rel.ro:0000000000209B7C                 db    0
.data.rel.ro:0000000000209B7D                 db    0
.data.rel.ro:0000000000209B7E                 db    0
.data.rel.ro:0000000000209B7F                 db    0
.data.rel.ro:0000000000209B80                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209B88                 db    0
.data.rel.ro:0000000000209B89                 db    0
.data.rel.ro:0000000000209B8A                 db    0
.data.rel.ro:0000000000209B8B                 db    0
.data.rel.ro:0000000000209B8C                 db    0
.data.rel.ro:0000000000209B8D                 db    0
.data.rel.ro:0000000000209B8E                 db    0
.data.rel.ro:0000000000209B8F                 db    0
.data.rel.ro:0000000000209B90                 db    0
.data.rel.ro:0000000000209B91                 db    0
.data.rel.ro:0000000000209B92                 db    0
.data.rel.ro:0000000000209B93                 db    0
.data.rel.ro:0000000000209B94                 db    0
.data.rel.ro:0000000000209B95                 db    0
.data.rel.ro:0000000000209B96                 db    0
.data.rel.ro:0000000000209B97                 db    0
.data.rel.ro:0000000000209B98                 db  7Dh ; }
.data.rel.ro:0000000000209B99                 db 0FFh
.data.rel.ro:0000000000209B9A                 db 0FFh
.data.rel.ro:0000000000209B9B                 db 0FFh
.data.rel.ro:0000000000209B9C                 db    0
.data.rel.ro:0000000000209B9D                 db    0
.data.rel.ro:0000000000209B9E                 db    0
.data.rel.ro:0000000000209B9F                 db    0
.data.rel.ro:0000000000209BA0                 db    0
.data.rel.ro:0000000000209BA1                 db    0
.data.rel.ro:0000000000209BA2                 db    0
.data.rel.ro:0000000000209BA3                 db    0
.data.rel.ro:0000000000209BA4                 db    0
.data.rel.ro:0000000000209BA5                 db    0
.data.rel.ro:0000000000209BA6                 db    0
.data.rel.ro:0000000000209BA7                 db    0
.data.rel.ro:0000000000209BA8                 db    0
.data.rel.ro:0000000000209BA9                 db    0
.data.rel.ro:0000000000209BAA                 db    0
.data.rel.ro:0000000000209BAB                 db    0
.data.rel.ro:0000000000209BAC                 db    0
.data.rel.ro:0000000000209BAD                 db    0
.data.rel.ro:0000000000209BAE                 db    0
.data.rel.ro:0000000000209BAF                 db    0
.data.rel.ro:0000000000209BB0                 db    0
.data.rel.ro:0000000000209BB1                 db    0
.data.rel.ro:0000000000209BB2                 db    0
.data.rel.ro:0000000000209BB3                 db    0
.data.rel.ro:0000000000209BB4                 db    0
.data.rel.ro:0000000000209BB5                 db    0
.data.rel.ro:0000000000209BB6                 db    0
.data.rel.ro:0000000000209BB7                 db    0
.data.rel.ro:0000000000209BB8                 db    0
.data.rel.ro:0000000000209BB9                 db    0
.data.rel.ro:0000000000209BBA                 db    0
.data.rel.ro:0000000000209BBB                 db    0
.data.rel.ro:0000000000209BBC                 db    0
.data.rel.ro:0000000000209BBD                 db    0
.data.rel.ro:0000000000209BBE                 db    0
.data.rel.ro:0000000000209BBF                 db    0
.data.rel.ro:0000000000209BC0                 public quoting_style_args
.data.rel.ro:0000000000209BC0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209BC8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209BD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209BD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209BE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209BE8                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000209BF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209BF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209C00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209C08                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209C10                 db    0
.data.rel.ro:0000000000209C11                 db    0
.data.rel.ro:0000000000209C12                 db    0
.data.rel.ro:0000000000209C13                 db    0
.data.rel.ro:0000000000209C14                 db    0
.data.rel.ro:0000000000209C15                 db    0
.data.rel.ro:0000000000209C16                 db    0
.data.rel.ro:0000000000209C17                 db    0
.data.rel.ro:0000000000209C17 _data_rel_ro    ends
.data.rel.ro:0000000000209C17
LOAD:0000000000209C18 ; ELF Dynamic Information
LOAD:0000000000209C18 ; ===========================================================================
LOAD:0000000000209C18
LOAD:0000000000209C18 ; Segment type: Pure data
LOAD:0000000000209C18 ; Segment permissions: Read/Write
LOAD:0000000000209C18 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209C18                 assume cs:LOAD
LOAD:0000000000209C18                 ;org 209C18h
LOAD:0000000000209C18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209C18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209C18                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209C28                 Elf64_Dyn <0Ch, 1580h>  ; DT_INIT
LOAD:0000000000209C38                 Elf64_Dyn <0Dh, 6E10h>  ; DT_FINI
LOAD:0000000000209C48                 Elf64_Dyn <19h, 209A10h> ; DT_INIT_ARRAY
LOAD:0000000000209C58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C68                 Elf64_Dyn <1Ah, 209A18h> ; DT_FINI_ARRAY
LOAD:0000000000209C78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209C88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209C98                 Elf64_Dyn <5, 910h>     ; DT_STRTAB
LOAD:0000000000209CA8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000209CB8                 Elf64_Dyn <0Ah, 302h>   ; DT_STRSZ
LOAD:0000000000209CC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209CD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209CE8                 Elf64_Dyn <3, 209E08h>  ; DT_PLTGOT
LOAD:0000000000209CF8                 Elf64_Dyn <2, 4E0h>     ; DT_PLTRELSZ
LOAD:0000000000209D08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209D18                 Elf64_Dyn <17h, 10A0h>  ; DT_JMPREL
LOAD:0000000000209D28                 Elf64_Dyn <7, 0CF8h>    ; DT_RELA
LOAD:0000000000209D38                 Elf64_Dyn <8, 3A8h>     ; DT_RELASZ
LOAD:0000000000209D48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209D58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D78                 Elf64_Dyn <6FFFFFFEh, 0C98h> ; DT_VERNEED
LOAD:0000000000209D88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209D98                 Elf64_Dyn <6FFFFFF0h, 0C12h> ; DT_VERSYM
LOAD:0000000000209DA8                 Elf64_Dyn <6FFFFFF9h, 1Ch> ; DT_RELACOUNT
LOAD:0000000000209DB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209DC8                 db    0
LOAD:0000000000209DC9                 db    0
LOAD:0000000000209DCA                 db    0
LOAD:0000000000209DCB                 db    0
LOAD:0000000000209DCC                 db    0
LOAD:0000000000209DCD                 db    0
LOAD:0000000000209DCE                 db    0
LOAD:0000000000209DCF                 db    0
LOAD:0000000000209DD0                 db    0
LOAD:0000000000209DD1                 db    0
LOAD:0000000000209DD2                 db    0
LOAD:0000000000209DD3                 db    0
LOAD:0000000000209DD4                 db    0
LOAD:0000000000209DD5                 db    0
LOAD:0000000000209DD6                 db    0
LOAD:0000000000209DD7                 db    0
LOAD:0000000000209DD8                 db    0
LOAD:0000000000209DD9                 db    0
LOAD:0000000000209DDA                 db    0
LOAD:0000000000209DDB                 db    0
LOAD:0000000000209DDC                 db    0
LOAD:0000000000209DDD                 db    0
LOAD:0000000000209DDE                 db    0
LOAD:0000000000209DDF                 db    0
LOAD:0000000000209DE0                 db    0
LOAD:0000000000209DE1                 db    0
LOAD:0000000000209DE2                 db    0
LOAD:0000000000209DE3                 db    0
LOAD:0000000000209DE4                 db    0
LOAD:0000000000209DE5                 db    0
LOAD:0000000000209DE6                 db    0
LOAD:0000000000209DE7                 db    0
LOAD:0000000000209DE8                 db    0
LOAD:0000000000209DE9                 db    0
LOAD:0000000000209DEA                 db    0
LOAD:0000000000209DEB                 db    0
LOAD:0000000000209DEC                 db    0
LOAD:0000000000209DED                 db    0
LOAD:0000000000209DEE                 db    0
LOAD:0000000000209DEF                 db    0
LOAD:0000000000209DF0                 db    0
LOAD:0000000000209DF1                 db    0
LOAD:0000000000209DF2                 db    0
LOAD:0000000000209DF3                 db    0
LOAD:0000000000209DF4                 db    0
LOAD:0000000000209DF5                 db    0
LOAD:0000000000209DF6                 db    0
LOAD:0000000000209DF7                 db    0
LOAD:0000000000209DF8                 db    0
LOAD:0000000000209DF9                 db    0
LOAD:0000000000209DFA                 db    0
LOAD:0000000000209DFB                 db    0
LOAD:0000000000209DFC                 db    0
LOAD:0000000000209DFD                 db    0
LOAD:0000000000209DFE                 db    0
LOAD:0000000000209DFF                 db    0
LOAD:0000000000209E00                 db    0
LOAD:0000000000209E01                 db    0
LOAD:0000000000209E02                 db    0
LOAD:0000000000209E03                 db    0
LOAD:0000000000209E04                 db    0
LOAD:0000000000209E05                 db    0
LOAD:0000000000209E06                 db    0
LOAD:0000000000209E07                 db    0
LOAD:0000000000209E07 LOAD            ends
LOAD:0000000000209E07
.got:0000000000209E08 ; ===========================================================================
.got:0000000000209E08
.got:0000000000209E08 ; Segment type: Pure data
.got:0000000000209E08 ; Segment permissions: Read/Write
.got:0000000000209E08 _got            segment qword public 'DATA' use64
.got:0000000000209E08                 assume cs:_got
.got:0000000000209E08                 ;org 209E08h
.got:0000000000209E08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209E10 qword_209E10    dq 0                    ; DATA XREF: sub_15A0↑r
.got:0000000000209E18 qword_209E18    dq 0                    ; DATA XREF: sub_15A0+6↑r
.got:0000000000209E20 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000209E28 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209E30 __errno_location_ptr dq offset __errno_location
.got:0000000000209E30                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209E38 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E40 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E48 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E50 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000209E58 fread_unlocked_ptr dq offset fread_unlocked
.got:0000000000209E58                                         ; DATA XREF: _fread_unlocked↑r
.got:0000000000209E60 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E68 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E70 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E70                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E78 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E80 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E80                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209E88 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209E90 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209E90                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209E98 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209EA0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209EA8 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000209EB0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000209EB8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209EC0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209EC8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209ED0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000209ED8 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000209ED8                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000209EE0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209EE8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209EE8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209EF0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209EF8 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:0000000000209F00 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209F08 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F10 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000209F18 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F20 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F28 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F30 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000209F30                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000209F38 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F40 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:0000000000209F48 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F50 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F58 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:0000000000209F60 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F68 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F70 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000209F78 dcngettext_ptr  dq offset dcngettext    ; DATA XREF: _dcngettext↑r
.got:0000000000209F80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209F88 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209F90 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209F98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209F98                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FA0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FA8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FB0 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000209FB0                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000209FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FC8                                         ; DATA XREF: start+24↑r
.got:0000000000209FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FE0 _got            ends
.got:0000000000209FE0
LOAD:0000000000209FE8 ; ===========================================================================
LOAD:0000000000209FE8
LOAD:0000000000209FE8 ; Segment type: Pure data
LOAD:0000000000209FE8 ; Segment permissions: Read/Write
LOAD:0000000000209FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209FE8                 assume cs:LOAD
LOAD:0000000000209FE8                 ;org 209FE8h
LOAD:0000000000209FE8                 align 20h
LOAD:0000000000209FE8 LOAD            ends
LOAD:0000000000209FE8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010 delim           db 0Ah                  ; DATA XREF: main:loc_1B30↑w
.data:000000000020A010                                         ; main+261↑r ...
.data:000000000020A011                 align 4
.data:000000000020A014 bsd_reversed    dd 0FFFFFFFFh           ; DATA XREF: main+653↑r
.data:000000000020A014                                         ; main+690↑w ...
.data:000000000020A018                 public Version
.data:000000000020A018 Version         dq offset bin2hex_7139+10h
.data:000000000020A018                                         ; DATA XREF: main+169↑r
.data:000000000020A018                                         ; "8.31"
.data:000000000020A020                 public exit_failure
.data:000000000020A020 ; int exit_failure
.data:000000000020A020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_33A2↑r
.data:000000000020A020                                         ; xalloc_die+17↑r
.data:000000000020A024                 align 20h
.data:000000000020A040                 public quote_quoting_options
.data:000000000020A040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A040                                         ; quote_mem↑o ...
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058                 db    0
.data:000000000020A059                 db    0
.data:000000000020A05A                 db    0
.data:000000000020A05B                 db    0
.data:000000000020A05C                 db    0
.data:000000000020A05D                 db    0
.data:000000000020A05E                 db    0
.data:000000000020A05F                 db    0
.data:000000000020A060                 db    0
.data:000000000020A061                 db    0
.data:000000000020A062                 db    0
.data:000000000020A063                 db    0
.data:000000000020A064                 db    0
.data:000000000020A065                 db    0
.data:000000000020A066                 db    0
.data:000000000020A067                 db    0
.data:000000000020A068                 db    0
.data:000000000020A069                 db    0
.data:000000000020A06A                 db    0
.data:000000000020A06B                 db    0
.data:000000000020A06C                 db    0
.data:000000000020A06D                 db    0
.data:000000000020A06E                 db    0
.data:000000000020A06F                 db    0
.data:000000000020A070                 db    0
.data:000000000020A071                 db    0
.data:000000000020A072                 db    0
.data:000000000020A073                 db    0
.data:000000000020A074                 db    0
.data:000000000020A075                 db    0
.data:000000000020A076                 db    0
.data:000000000020A077                 db    0
.data:000000000020A078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A078                                         ; quotearg_n_options:loc_568D↑r ...
.data:000000000020A07C                 align 20h
.data:000000000020A080 ; void *slotvec
.data:000000000020A080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A080                                         ; quotearg_n_options+76↑w ...
.data:000000000020A088                 align 10h
.data:000000000020A090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A090                                         ; quotearg_n_options+187↑r ...
.data:000000000020A098 off_20A098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A098 _data           ends
.data:000000000020A098
.bss:000000000020A0A0 ; ===========================================================================
.bss:000000000020A0A0
.bss:000000000020A0A0 ; Segment type: Uninitialized
.bss:000000000020A0A0 ; Segment permissions: Read/Write
.bss:000000000020A0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A0A0                 assume cs:_bss
.bss:000000000020A0A0                 ;org 20A0A0h
.bss:000000000020A0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A0A0                 public __bss_start ; weak
.bss:000000000020A0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000868↑o
.bss:000000000020A0A0                                         ; LOAD:00000000000008C8↑o ...
.bss:000000000020A0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020A0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020A0A0                                         ; _edata
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020A0A8 ; FILE *stdout
.bss:000000000020A0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000850↑o
.bss:000000000020A0A8                                         ; main+73↑r ...
.bss:000000000020A0A8                                         ; Alternative name is 'stdout'
.bss:000000000020A0A8                                         ; Copy of shared data
.bss:000000000020A0B0                 public stdin@@GLIBC_2_2_5
.bss:000000000020A0B0 ; FILE *stdin
.bss:000000000020A0B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000880↑o
.bss:000000000020A0B0                                         ; main+404↑r ...
.bss:000000000020A0B0                                         ; Alternative name is 'stdin'
.bss:000000000020A0B0                                         ; Copy of shared data
.bss:000000000020A0B8                 public optind@@GLIBC_2_2_5
.bss:000000000020A0B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008F8↑o
.bss:000000000020A0B8                                         ; main+350↑r
.bss:000000000020A0B8                                         ; Alternative name is 'optind'
.bss:000000000020A0B8                                         ; Copy of shared data
.bss:000000000020A0BC                 align 20h
.bss:000000000020A0C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A0C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A0C0                                         ; DATA XREF: LOAD:0000000000000898↑o
.bss:000000000020A0C0                                         ; LOAD:00000000000008B0↑o ...
.bss:000000000020A0C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A0C0                                         ; Copy of shared data
.bss:000000000020A0C8                 align 20h
.bss:000000000020A0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0E0 ; FILE *stderr
.bss:000000000020A0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008E0↑o
.bss:000000000020A0E0                                         ; usage+3D↑r ...
.bss:000000000020A0E0                                         ; Alternative name is 'stderr'
.bss:000000000020A0E0                                         ; Copy of shared data
.bss:000000000020A0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0E9                 align 10h
.bss:000000000020A0F0 strict          db ?                    ; DATA XREF: main:loc_1AE0↑w
.bss:000000000020A0F0                                         ; main:loc_1EC5↑r ...
.bss:000000000020A0F1 quiet           db ?                    ; DATA XREF: main+1AE↑w
.bss:000000000020A0F1                                         ; main+1CE↑w ...
.bss:000000000020A0F2 ignore_missing  db ?                    ; DATA XREF: main+13A↑w
.bss:000000000020A0F2                                         ; main+27D↑r ...
.bss:000000000020A0F3 warn            db ?                    ; DATA XREF: main+1A7↑w
.bss:000000000020A0F3                                         ; main+1C7↑w ...
.bss:000000000020A0F4 status_only     db ?                    ; DATA XREF: main:loc_1AA0↑w
.bss:000000000020A0F4                                         ; main:loc_1AC0↑w ...
.bss:000000000020A0F5                 align 8
.bss:000000000020A0F8 digest_hex_bytes dq ?                   ; DATA XREF: main+249↑w
.bss:000000000020A0F8                                         ; main+60F↑r ...
.bss:000000000020A100 min_digest_line_length dq ?             ; DATA XREF: main+23E↑w
.bss:000000000020A100                                         ; main+5FF↑r
.bss:000000000020A108 have_read_stdin db ?                    ; DATA XREF: main+3F8↑w
.bss:000000000020A108                                         ; main:loc_2383↑r ...
.bss:000000000020A109                 align 10h
.bss:000000000020A110 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A110                                         ; close_stdout+1B↑r
.bss:000000000020A111                 align 8
.bss:000000000020A118 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A118                                         ; close_stdout+56↑r
.bss:000000000020A120                 public program_name
.bss:000000000020A120 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A120                                         ; set_program_name:loc_42AD↑w
.bss:000000000020A128                 align 20h
.bss:000000000020A140 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A140                                         ; quotearg_free+46↑o ...
.bss:000000000020A141                 db    ? ;
.bss:000000000020A142                 db    ? ;
.bss:000000000020A143                 db    ? ;
.bss:000000000020A144                 db    ? ;
.bss:000000000020A145                 db    ? ;
.bss:000000000020A146                 db    ? ;
.bss:000000000020A147                 db    ? ;
.bss:000000000020A148                 db    ? ;
.bss:000000000020A149                 db    ? ;
.bss:000000000020A14A                 db    ? ;
.bss:000000000020A14B                 db    ? ;
.bss:000000000020A14C                 db    ? ;
.bss:000000000020A14D                 db    ? ;
.bss:000000000020A14E                 db    ? ;
.bss:000000000020A14F                 db    ? ;
.bss:000000000020A150                 db    ? ;
.bss:000000000020A151                 db    ? ;
.bss:000000000020A152                 db    ? ;
.bss:000000000020A153                 db    ? ;
.bss:000000000020A154                 db    ? ;
.bss:000000000020A155                 db    ? ;
.bss:000000000020A156                 db    ? ;
.bss:000000000020A157                 db    ? ;
.bss:000000000020A158                 db    ? ;
.bss:000000000020A159                 db    ? ;
.bss:000000000020A15A                 db    ? ;
.bss:000000000020A15B                 db    ? ;
.bss:000000000020A15C                 db    ? ;
.bss:000000000020A15D                 db    ? ;
.bss:000000000020A15E                 db    ? ;
.bss:000000000020A15F                 db    ? ;
.bss:000000000020A160                 db    ? ;
.bss:000000000020A161                 db    ? ;
.bss:000000000020A162                 db    ? ;
.bss:000000000020A163                 db    ? ;
.bss:000000000020A164                 db    ? ;
.bss:000000000020A165                 db    ? ;
.bss:000000000020A166                 db    ? ;
.bss:000000000020A167                 db    ? ;
.bss:000000000020A168                 db    ? ;
.bss:000000000020A169                 db    ? ;
.bss:000000000020A16A                 db    ? ;
.bss:000000000020A16B                 db    ? ;
.bss:000000000020A16C                 db    ? ;
.bss:000000000020A16D                 db    ? ;
.bss:000000000020A16E                 db    ? ;
.bss:000000000020A16F                 db    ? ;
.bss:000000000020A170                 db    ? ;
.bss:000000000020A171                 db    ? ;
.bss:000000000020A172                 db    ? ;
.bss:000000000020A173                 db    ? ;
.bss:000000000020A174                 db    ? ;
.bss:000000000020A175                 db    ? ;
.bss:000000000020A176                 db    ? ;
.bss:000000000020A177                 db    ? ;
.bss:000000000020A178                 db    ? ;
.bss:000000000020A179                 db    ? ;
.bss:000000000020A17A                 db    ? ;
.bss:000000000020A17B                 db    ? ;
.bss:000000000020A17C                 db    ? ;
.bss:000000000020A17D                 db    ? ;
.bss:000000000020A17E                 db    ? ;
.bss:000000000020A17F                 db    ? ;
.bss:000000000020A180                 db    ? ;
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0                 db    ? ;
.bss:000000000020A1E1                 db    ? ;
.bss:000000000020A1E2                 db    ? ;
.bss:000000000020A1E3                 db    ? ;
.bss:000000000020A1E4                 db    ? ;
.bss:000000000020A1E5                 db    ? ;
.bss:000000000020A1E6                 db    ? ;
.bss:000000000020A1E7                 db    ? ;
.bss:000000000020A1E8                 db    ? ;
.bss:000000000020A1E9                 db    ? ;
.bss:000000000020A1EA                 db    ? ;
.bss:000000000020A1EB                 db    ? ;
.bss:000000000020A1EC                 db    ? ;
.bss:000000000020A1ED                 db    ? ;
.bss:000000000020A1EE                 db    ? ;
.bss:000000000020A1EF                 db    ? ;
.bss:000000000020A1F0                 db    ? ;
.bss:000000000020A1F1                 db    ? ;
.bss:000000000020A1F2                 db    ? ;
.bss:000000000020A1F3                 db    ? ;
.bss:000000000020A1F4                 db    ? ;
.bss:000000000020A1F5                 db    ? ;
.bss:000000000020A1F6                 db    ? ;
.bss:000000000020A1F7                 db    ? ;
.bss:000000000020A1F8                 db    ? ;
.bss:000000000020A1F9                 db    ? ;
.bss:000000000020A1FA                 db    ? ;
.bss:000000000020A1FB                 db    ? ;
.bss:000000000020A1FC                 db    ? ;
.bss:000000000020A1FD                 db    ? ;
.bss:000000000020A1FE                 db    ? ;
.bss:000000000020A1FF                 db    ? ;
.bss:000000000020A200                 db    ? ;
.bss:000000000020A201                 db    ? ;
.bss:000000000020A202                 db    ? ;
.bss:000000000020A203                 db    ? ;
.bss:000000000020A204                 db    ? ;
.bss:000000000020A205                 db    ? ;
.bss:000000000020A206                 db    ? ;
.bss:000000000020A207                 db    ? ;
.bss:000000000020A208                 db    ? ;
.bss:000000000020A209                 db    ? ;
.bss:000000000020A20A                 db    ? ;
.bss:000000000020A20B                 db    ? ;
.bss:000000000020A20C                 db    ? ;
.bss:000000000020A20D                 db    ? ;
.bss:000000000020A20E                 db    ? ;
.bss:000000000020A20F                 db    ? ;
.bss:000000000020A210                 db    ? ;
.bss:000000000020A211                 db    ? ;
.bss:000000000020A212                 db    ? ;
.bss:000000000020A213                 db    ? ;
.bss:000000000020A214                 db    ? ;
.bss:000000000020A215                 db    ? ;
.bss:000000000020A216                 db    ? ;
.bss:000000000020A217                 db    ? ;
.bss:000000000020A218                 db    ? ;
.bss:000000000020A219                 db    ? ;
.bss:000000000020A21A                 db    ? ;
.bss:000000000020A21B                 db    ? ;
.bss:000000000020A21C                 db    ? ;
.bss:000000000020A21D                 db    ? ;
.bss:000000000020A21E                 db    ? ;
.bss:000000000020A21F                 db    ? ;
.bss:000000000020A220                 db    ? ;
.bss:000000000020A221                 db    ? ;
.bss:000000000020A222                 db    ? ;
.bss:000000000020A223                 db    ? ;
.bss:000000000020A224                 db    ? ;
.bss:000000000020A225                 db    ? ;
.bss:000000000020A226                 db    ? ;
.bss:000000000020A227                 db    ? ;
.bss:000000000020A228                 db    ? ;
.bss:000000000020A229                 db    ? ;
.bss:000000000020A22A                 db    ? ;
.bss:000000000020A22B                 db    ? ;
.bss:000000000020A22C                 db    ? ;
.bss:000000000020A22D                 db    ? ;
.bss:000000000020A22E                 db    ? ;
.bss:000000000020A22F                 db    ? ;
.bss:000000000020A230                 db    ? ;
.bss:000000000020A231                 db    ? ;
.bss:000000000020A232                 db    ? ;
.bss:000000000020A233                 db    ? ;
.bss:000000000020A234                 db    ? ;
.bss:000000000020A235                 db    ? ;
.bss:000000000020A236                 db    ? ;
.bss:000000000020A237                 db    ? ;
.bss:000000000020A238                 db    ? ;
.bss:000000000020A239                 db    ? ;
.bss:000000000020A23A                 db    ? ;
.bss:000000000020A23B                 db    ? ;
.bss:000000000020A23C                 db    ? ;
.bss:000000000020A23D                 db    ? ;
.bss:000000000020A23E                 db    ? ;
.bss:000000000020A23F                 db    ? ;
.bss:000000000020A240 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A240                                         ; get_quoting_style↑o ...
.bss:000000000020A250 xmmword_20A250  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A250                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A260 xmmword_20A260  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A260                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A270 qword_20A270    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A270                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A278 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020A278                                         ; rpl_fcntl:loc_693F↑w ...
.bss:000000000020A27C                 align 20h
.bss:000000000020A27C _bss            ends
.bss:000000000020A27C
.prgend:000000000020A280 ; ===========================================================================
.prgend:000000000020A280
.prgend:000000000020A280 ; Segment type: Zero-length
.prgend:000000000020A280 _prgend         segment byte public '' use64
.prgend:000000000020A280 _end            label byte
.prgend:000000000020A280 _prgend         ends
.prgend:000000000020A280
extern:000000000020A288 ; ===========================================================================
extern:000000000020A288
extern:000000000020A288 ; Segment type: Externs
extern:000000000020A288 ; extern
extern:000000000020A288 ; void free(void *ptr)
extern:000000000020A288                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020A288                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A290 ; void __noreturn abort(void)
extern:000000000020A290                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A290                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A298 ; int *_errno_location(void)
extern:000000000020A298                 extrn __errno_location:near
extern:000000000020A298                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A298                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A2A0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A2A0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A2A0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A2A8 ; void __noreturn exit(int status)
extern:000000000020A2A8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A2A8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A2B0 ; size_t _fpending(FILE *fp)
extern:000000000020A2B0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A2B0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A2B8 ; int fcntl(int fd, int cmd, ...)
extern:000000000020A2B8                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020A2B8                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020A2C0 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020A2C0                 extrn fread_unlocked:near
extern:000000000020A2C0                                         ; CODE XREF: _fread_unlocked↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:000000000020A2C8 ; char *textdomain(const char *domainname)
extern:000000000020A2C8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A2D0 ; int fclose(FILE *stream)
extern:000000000020A2D0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A2D8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A2D8                 extrn bindtextdomain:near
extern:000000000020A2D8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A2E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A2E0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A2E0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A2E8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A2E8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A2E8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A2F0 ; size_t strlen(const char *s)
extern:000000000020A2F0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A2F8                 extrn __stack_chk_fail:near
extern:000000000020A2F8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A300 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A300                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A300                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A308 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A308                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A308                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A310 ; char *strchr(const char *s, int c)
extern:000000000020A310                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020A310                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020A318 ; int _overflow(_IO_FILE *, int)
extern:000000000020A318                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020A318                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020A320 ; char *strrchr(const char *s, int c)
extern:000000000020A320                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A320                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A328 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A328                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A328                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A330 ; void *memset(void *s, int c, size_t n)
extern:000000000020A330                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A330                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A338 ; int close(int fd)
extern:000000000020A338                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020A338                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020A340 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000020A340                 extrn posix_fadvise:near
extern:000000000020A340                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000020A340                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000020A348 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A348                 extrn __libc_start_main:near
extern:000000000020A348                                         ; CODE XREF: start+24↑p
extern:000000000020A348                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A350 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A350                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A350                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A358 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A358                 extrn fputs_unlocked:near
extern:000000000020A358                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A358                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A360 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A360                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A360                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A368 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:000000000020A368                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:000000000020A368                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:000000000020A370 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A370                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A370                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A378 ; int fileno(FILE *stream)
extern:000000000020A378                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A378                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A380 ; void *malloc(size_t size)
extern:000000000020A380                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020A380                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A388 ; int fflush(FILE *stream)
extern:000000000020A388                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A388                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A390 ; char *nl_langinfo(nl_item item)
extern:000000000020A390                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A390                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A398 ; int _freading(FILE *fp)
extern:000000000020A398                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A398                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A3A0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020A3A0                 extrn fwrite_unlocked:near
extern:000000000020A3A0                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020A3A8 ; void *realloc(void *ptr, size_t size)
extern:000000000020A3A8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A3B0 ; FILE *fdopen(int fd, const char *modes)
extern:000000000020A3B0                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000020A3B0                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000020A3B8 ; char *setlocale(int category, const char *locale)
extern:000000000020A3B8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A3B8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A3C0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A3C0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A3C8 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:000000000020A3C8                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:000000000020A3C8                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:000000000020A3D0 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A3D0                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A3D0                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A3D8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A3D8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A3D8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A3E0 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000020A3E0                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000020A3E0                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000020A3E8 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
extern:000000000020A3E8                 extrn dcngettext:near   ; CODE XREF: _dcngettext↑j
extern:000000000020A3E8                                         ; DATA XREF: .got:dcngettext_ptr↑o
extern:000000000020A3F0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A3F0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A3F0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A3F8 ; void __noreturn exit(int status)
extern:000000000020A3F8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A3F8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A400 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A400                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A400                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A408                 extrn __fprintf_chk:near
extern:000000000020A408                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A408                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A410 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A410                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A410                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A418 ; int iswprint(wint_t wc)
extern:000000000020A418                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A418                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A420 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A420                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A420                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A420                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A428 ; const __int32_t **_ctype_tolower_loc(void)
extern:000000000020A428                 extrn __ctype_tolower_loc:near
extern:000000000020A428                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:000000000020A428                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:000000000020A430 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A430                 extrn __ctype_b_loc:near
extern:000000000020A430                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A430                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A438                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A438                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A440                 extrn __gmon_start__:near ; weak
extern:000000000020A440                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A440                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A448                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A448                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A448
extern:000000000020A448
extern:000000000020A448                 end start
