LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 2D5B65F20670F3D34A4130654478DF54D9D0839CDBB35B9EAE99131645E1073F
LOAD:0000000000000000 ; Input MD5    : 3AE527A866908F288F023CEC1B3CC5FC
LOAD:0000000000000000 ; Input CRC32  : 49AA5ED7
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/sleep
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'sleep.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'cl-strtod.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xnanosleep.c'
LOAD:0000000000000000 ; Source File : 'xstrtod.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'nanosleep.c'
LOAD:0000000000000000 ; Source File : 'c-strtod.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'dtotimespec.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 25AF8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6870h                ; Size in file image
LOAD:00000000000000D8                 dq 6870h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6BB0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206BB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4D0h                 ; Size in file image
LOAD:0000000000000110                 dq 690h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5974h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5974h                ; Physical address
LOAD:00000000000001B0                 dq 27Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 27Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6BB0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206BB0h              ; Physical address
LOAD:0000000000000220                 dq 450h                 ; Size in file image
LOAD:0000000000000228                 dq 450h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 39h, 36h, 0C6h, 0F5h, 20h, 0B2h, 94h, 95h, 0DEh, 8Eh ; Desc
LOAD:0000000000000284                 db 19h, 33h, 35h, 0E7h, 0E1h, 64h, 25h, 2Dh, 6Bh, 78h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 31h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 31h, 32h, 38h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_838, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_838, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_838, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_838, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_838, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_838, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_838, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrtod - offset byte_838, 12h, 0, 0, \ ; "strtod"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_838, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aStrtodL - offset byte_838, 12h, 0, 0, \ ; "strtod_l"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFclose - offset byte_838, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_838, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_838, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_838, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_838, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_838, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_838, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_838, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aNewlocale - offset byte_838, 12h, 0, 0, \ ; "newlocale"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aNanosleep - offset byte_838, 12h, 0, 0, \ ; "nanosleep"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrrchr - offset byte_838, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aLseek - offset byte_838, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004F0                            0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_838, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aLibcStartMain - offset byte_838, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemcmp - offset byte_838, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFputsUnlocked - offset byte_838, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aCalloc - offset byte_838, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aGmonStart - offset byte_838, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMemcpy - offset byte_838, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFileno - offset byte_838, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMalloc - offset byte_838, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFflush - offset byte_838, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aNlLanginfo - offset byte_838, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFreading - offset byte_838, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aRealloc - offset byte_838, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aSetlocale - offset byte_838, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aPrintfChk - offset byte_838, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aError - offset byte_838, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000670                            0>
LOAD:0000000000000688                 Elf64_Sym <offset aFseeko - offset byte_838, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aCxaAtexit - offset byte_838, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aExit+1 - offset byte_838, 12h, 0, 0, \ ; "exit"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFwrite - offset byte_838, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFprintfChk - offset byte_838, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aItmRegistertmc - offset byte_838, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aMbsinit - offset byte_838, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aIswprint - offset byte_838, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aCxaFinalize - offset byte_838, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aCtypeBLoc - offset byte_838, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aStdout - offset byte_838, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000778                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000790                 Elf64_Sym <offset aProgname - offset byte_838, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000790                            offset __bss_start, 8>
LOAD:00000000000007A8                 Elf64_Sym <offset aProgramInvocat - offset byte_838, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000007A8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007C0                 Elf64_Sym <offset aPrognameFull - offset byte_838, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007C0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_838, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007D8                            offset __bss_start, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aOpterr - offset byte_838, 11h, 0, 19h, \ ; "opterr"
LOAD:00000000000007F0                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:0000000000000808                 Elf64_Sym <offset aStderr - offset byte_838, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000808                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aOptind - offset byte_838, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000820                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000838 ; ELF String Table
LOAD:0000000000000838 byte_838        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000838                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000839 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B50↓o
LOAD:0000000000000843 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:000000000000084A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000857 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000861 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000869 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000871 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000878 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000880 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:000000000000088A aNanosleep      db 'nanosleep',0        ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000894 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000670↑o
LOAD:000000000000089A aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:00000000000008AB aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000008B4 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000008BC aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:00000000000008C2 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:00000000000008C2                                         ; LOAD:00000000000006B8↑o
LOAD:00000000000008C8 aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000008C8                                         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:00000000000008E0 aStrtod         db 'strtod',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:00000000000008E7 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000008E7                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000008FE aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000905 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:000000000000090C aNewlocale      db 'newlocale',0        ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000916 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:000000000000091D aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:000000000000092E aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000935 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000943 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:000000000000094A aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000950 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000957 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:000000000000095E aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000965 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:000000000000096D aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000979 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000987 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000992 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000999 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000009A5 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009AC aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000009B3 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:00000000000009BE aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000009BE                                         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:00000000000009DC aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009EB aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:00000000000009EB                                         ; LOAD:00000000000003B8↑o
LOAD:00000000000009FA aOpterr         db 'opterr',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A01 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A01                                         ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A13 aStrtodL        db 'strtod_l',0         ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A1C aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000A23 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A32 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A37 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A42 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A52 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000A5F aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B60↓o
LOAD:0000000000000A6B aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B70↓o
LOAD:0000000000000A76 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B80↓o
LOAD:0000000000000A80 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B90↓o
LOAD:0000000000000A8A aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000BA0↓o
LOAD:0000000000000A96 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A96                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000AB2 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000AC1 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000AC1                                         ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000ADB                 align 4
LOAD:0000000000000ADC ; ELF GNU Symbol Version Table
LOAD:0000000000000ADC                 dw 0
LOAD:0000000000000ADE                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000AE2                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000AE6                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000AE8                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000AEA                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000AEC                 dw 2                    ; strtod@@GLIBC_2.2.5
LOAD:0000000000000AEE                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000AF0                 dw 3                    ; strtod_l@@GLIBC_2.3
LOAD:0000000000000AF2                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000AF4                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000AF6                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000AF8                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000AFA                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000AFC                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000AFE                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B00                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B02                 dw 3                    ; newlocale@@GLIBC_2.3
LOAD:0000000000000B04                 dw 2                    ; nanosleep@@GLIBC_2.2.5
LOAD:0000000000000B06                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B08                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B0A                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B0C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B0E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B10                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B12                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B14                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B16                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B18                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B1A                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000B1C                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000B1E                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000B20                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000B22                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000B24                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000B26                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000B28                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000B2A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000B2C                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000B2E                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B30                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B32                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B34                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000B36                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000B38                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000B3A                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000B3C                 dw 3                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000B3E                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000B40                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000B42                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000B44                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000B46                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000B48                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000B4A                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B4C                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B4E                 dw 0
LOAD:0000000000000B50 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B50                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_838, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B60                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_838, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B60                                10h>
LOAD:0000000000000B70                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_838, \ ; "GLIBC_2.14"
LOAD:0000000000000B70                                10h>
LOAD:0000000000000B80                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_838, \ ; "GLIBC_2.4"
LOAD:0000000000000B80                                10h>
LOAD:0000000000000B90                 Elf64_Vernaux <0D696913h, 0, 3, offset aGlibc23 - offset byte_838, \ ; "GLIBC_2.3"
LOAD:0000000000000B90                                10h>
LOAD:0000000000000BA0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_838, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000BB0 ; ELF RELA Relocation Table
LOAD:0000000000000BB0                 Elf64_Rela <206BB0h, 8, 18F0h> ; R_X86_64_RELATIVE +18F0h
LOAD:0000000000000BC8                 Elf64_Rela <206BB8h, 8, 18B0h> ; R_X86_64_RELATIVE +18B0h
LOAD:0000000000000BE0                 Elf64_Rela <206BC0h, 8, 509Ah> ; R_X86_64_RELATIVE +509Ah
LOAD:0000000000000BF8                 Elf64_Rela <206BE0h, 8, 509Fh> ; R_X86_64_RELATIVE +509Fh
LOAD:0000000000000C10                 Elf64_Rela <206C20h, 8, 5101h> ; R_X86_64_RELATIVE +5101h
LOAD:0000000000000C28                 Elf64_Rela <206C28h, 8, 5109h> ; R_X86_64_RELATIVE +5109h
LOAD:0000000000000C40                 Elf64_Rela <206C30h, 8, 510Fh> ; R_X86_64_RELATIVE +510Fh
LOAD:0000000000000C58                 Elf64_Rela <206C38h, 8, 511Ch> ; R_X86_64_RELATIVE +511Ch
LOAD:0000000000000C70                 Elf64_Rela <206C40h, 8, 5129h> ; R_X86_64_RELATIVE +5129h
LOAD:0000000000000C88                 Elf64_Rela <206C48h, 8, 513Dh> ; R_X86_64_RELATIVE +513Dh
LOAD:0000000000000CA0                 Elf64_Rela <206C50h, 8, 513Fh> ; R_X86_64_RELATIVE +513Fh
LOAD:0000000000000CB8                 Elf64_Rela <206C58h, 8, 5122h> ; R_X86_64_RELATIVE +5122h
LOAD:0000000000000CD0                 Elf64_Rela <206C60h, 8, 4D9Eh> ; R_X86_64_RELATIVE +4D9Eh
LOAD:0000000000000CE8                 Elf64_Rela <206C68h, 8, 5147h> ; R_X86_64_RELATIVE +5147h
LOAD:0000000000000D00                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000D18                 Elf64_Rela <207010h, 8, 5080h> ; R_X86_64_RELATIVE +5080h
LOAD:0000000000000D30                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D48                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000D60                 Elf64_Rela <206FD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D78                 Elf64_Rela <206FE0h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D90                 Elf64_Rela <206FE8h, 1C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000DA8                 Elf64_Rela <206FF0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DC0                 Elf64_Rela <206FF8h, 2F00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000DD8                 Elf64_Rela <207080h, 3200000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000DF0                 Elf64_Rela <207088h, 3100000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000E08                 Elf64_Rela <207090h, 3800000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E20                 Elf64_Rela <207098h, 3400000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E38                 Elf64_Rela <2070A0h, 3600000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000E50                 Elf64_Rela <2070C0h, 3700000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E68 ; ELF JMPREL Relocation Table
LOAD:0000000000000E68                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E80                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E98                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000EB0                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000EC8                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000EE0                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000EF8                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strtod
LOAD:0000000000000F10                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F28                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT strtod_l
LOAD:0000000000000F40                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F58                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F70                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F88                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000FA0                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000FB8                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000FD0                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000FE8                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001000                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT newlocale
LOAD:0000000000001018                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT nanosleep
LOAD:0000000000001030                 Elf64_Rela <206F18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001048                 Elf64_Rela <206F20h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001060                 Elf64_Rela <206F28h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001078                 Elf64_Rela <206F30h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001090                 Elf64_Rela <206F38h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000010A8                 Elf64_Rela <206F40h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000010C0                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000010D8                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000010F0                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001108                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001120                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001138                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001150                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001168                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001180                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001198                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000011B0                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000011C8                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000011E0                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000011F8                 Elf64_Rela <206FB0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001210                 Elf64_Rela <206FB8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001228                 Elf64_Rela <206FC0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001240                 Elf64_Rela <206FC8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001258                 Elf64_Rela <206FD0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001258 LOAD            ends
LOAD:0000000000001258
.init:0000000000001270 ; ===========================================================================
.init:0000000000001270
.init:0000000000001270 ; Segment type: Pure code
.init:0000000000001270 ; Segment permissions: Read/Execute
.init:0000000000001270 _init           segment dword public 'CODE' use64
.init:0000000000001270                 assume cs:_init
.init:0000000000001270                 ;org 1270h
.init:0000000000001270                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001270
.init:0000000000001270 ; =============== S U B R O U T I N E =======================================
.init:0000000000001270
.init:0000000000001270
.init:0000000000001270                 public _init_proc
.init:0000000000001270 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001270                 sub     rsp, 8          ; _init
.init:0000000000001274                 mov     rax, cs:__gmon_start___ptr
.init:000000000000127B                 test    rax, rax
.init:000000000000127E                 jz      short loc_1282
.init:0000000000001280                 call    rax ; __gmon_start__
.init:0000000000001282
.init:0000000000001282 loc_1282:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001282                 add     rsp, 8
.init:0000000000001286                 retn
.init:0000000000001286 _init_proc      endp
.init:0000000000001286
.init:0000000000001286 _init           ends
.init:0000000000001286
LOAD:0000000000001287 ; ===========================================================================
LOAD:0000000000001287
LOAD:0000000000001287 ; Segment type: Pure code
LOAD:0000000000001287 ; Segment permissions: Read/Execute
LOAD:0000000000001287 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001287                 assume cs:LOAD
LOAD:0000000000001287                 ;org 1287h
LOAD:0000000000001287                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001287                 align 10h
LOAD:0000000000001287 LOAD            ends
LOAD:0000000000001287
.plt:0000000000001290 ; ===========================================================================
.plt:0000000000001290
.plt:0000000000001290 ; Segment type: Pure code
.plt:0000000000001290 ; Segment permissions: Read/Execute
.plt:0000000000001290 _plt            segment para public 'CODE' use64
.plt:0000000000001290                 assume cs:_plt
.plt:0000000000001290                 ;org 1290h
.plt:0000000000001290                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290
.plt:0000000000001290 sub_1290        proc near               ; CODE XREF: .plt:00000000000012AB↓j
.plt:0000000000001290                                         ; .plt:00000000000012BB↓j ...
.plt:0000000000001290 ; __unwind {
.plt:0000000000001290                 push    cs:qword_206E70
.plt:0000000000001296                 jmp     cs:qword_206E78
.plt:0000000000001296 sub_1290        endp
.plt:0000000000001296
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:000000000000129C                 align 20h
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; void free(void *ptr)
.plt:00000000000012A0 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:00000000000012A0                                         ; quotearg_free+37↓p ...
.plt:00000000000012A0                 jmp     cs:free_ptr
.plt:00000000000012A0 _free           endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    0
.plt:00000000000012AB                 jmp     sub_1290
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: noreturn thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; void __noreturn abort(void)
.plt:00000000000012B0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000012B0                                         ; quotearg_buffer_restyled:def_2251↓p ...
.plt:00000000000012B0                 jmp     cs:abort_ptr
.plt:00000000000012B0 _abort          endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    1
.plt:00000000000012BB                 jmp     sub_1290
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; int *__errno_location(void)
.plt:00000000000012C0 ___errno_location proc near             ; CODE XREF: main:loc_1660↓p
.plt:00000000000012C0                                         ; main+243↓p ...
.plt:00000000000012C0                 jmp     cs:__errno_location_ptr
.plt:00000000000012C0 ___errno_location endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    2
.plt:00000000000012CB                 jmp     sub_1290
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000012D0 _strncmp        proc near               ; CODE XREF: usage+1DC↓p
.plt:00000000000012D0                                         ; usage+29D↓p
.plt:00000000000012D0                 jmp     cs:strncmp_ptr
.plt:00000000000012D0 _strncmp        endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    3
.plt:00000000000012DB                 jmp     sub_1290
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: noreturn thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; void __noreturn _exit(int status)
.plt:00000000000012E0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000012E0                 jmp     cs:_exit_ptr
.plt:00000000000012E0 __exit          endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    4
.plt:00000000000012EB                 jmp     sub_1290
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; size_t __fpending(FILE *fp)
.plt:00000000000012F0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000012F0                 jmp     cs:__fpending_ptr
.plt:00000000000012F0 ___fpending     endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    5
.plt:00000000000012FB                 jmp     sub_1290
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; double strtod(const char *nptr, char **endptr)
.plt:0000000000001300 _strtod         proc near               ; CODE XREF: cl_strtod+25↓p
.plt:0000000000001300                 jmp     cs:strtod_ptr
.plt:0000000000001300 _strtod         endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    6
.plt:000000000000130B                 jmp     sub_1290
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; char *textdomain(const char *domainname)
.plt:0000000000001310 _textdomain     proc near               ; CODE XREF: main+56↓p
.plt:0000000000001310                 jmp     cs:textdomain_ptr
.plt:0000000000001310 _textdomain     endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    7
.plt:000000000000131B                 jmp     sub_1290
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; double strtod_l(const char *nptr, char **endptr, __locale_t loc)
.plt:0000000000001320 _strtod_l       proc near               ; CODE XREF: c_strtod+30↓j
.plt:0000000000001320                 jmp     cs:strtod_l_ptr
.plt:0000000000001320 _strtod_l       endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    8
.plt:000000000000132B                 jmp     sub_1290
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; int fclose(FILE *stream)
.plt:0000000000001330 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001330                                         ; rpl_fclose+6B↓j
.plt:0000000000001330                 jmp     cs:fclose_ptr
.plt:0000000000001330 _fclose         endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    9
.plt:000000000000133B                 jmp     sub_1290
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001340 _bindtextdomain proc near               ; CODE XREF: main+4A↓p
.plt:0000000000001340                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001340 _bindtextdomain endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    0Ah
.plt:000000000000134B                 jmp     sub_1290
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001350 _dcgettext      proc near               ; CODE XREF: main+11F↓p
.plt:0000000000001350                                         ; main+23B↓p ...
.plt:0000000000001350                 jmp     cs:dcgettext_ptr
.plt:0000000000001350 _dcgettext      endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    0Bh
.plt:000000000000135B                 jmp     sub_1290
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001360 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001360                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001360 ___ctype_get_mb_cur_max endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    0Ch
.plt:000000000000136B                 jmp     sub_1290
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; size_t strlen(const char *s)
.plt:0000000000001370 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001370                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001370                 jmp     cs:strlen_ptr
.plt:0000000000001370 _strlen         endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    0Dh
.plt:000000000000137B                 jmp     sub_1290
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: noreturn thunk
.plt:0000000000001380
.plt:0000000000001380 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1788↓p
.plt:0000000000001380                                         ; cl_strtod:loc_1CCE↓p ...
.plt:0000000000001380                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001380 ___stack_chk_fail endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    0Eh
.plt:000000000000138B                 jmp     sub_1290
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001390 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:0000000000001390                                         ; parse_gnu_standard_options_only+9A↓p
.plt:0000000000001390                 jmp     cs:getopt_long_ptr
.plt:0000000000001390 _getopt_long    endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    0Fh
.plt:000000000000139B                 jmp     sub_1290
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000013A0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000013A0                 jmp     cs:mbrtowc_ptr
.plt:00000000000013A0 _mbrtowc        endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    10h
.plt:00000000000013AB                 jmp     sub_1290
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
.plt:00000000000013B0 _newlocale      proc near               ; CODE XREF: c_strtod+5E↓p
.plt:00000000000013B0                 jmp     cs:newlocale_ptr
.plt:00000000000013B0 _newlocale      endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    11h
.plt:00000000000013BB                 jmp     sub_1290
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; int nanosleep(const struct timespec *requested_time, struct timespec *remaining)
.plt:00000000000013C0 _nanosleep      proc near               ; CODE XREF: rpl_nanosleep+6F↓p
.plt:00000000000013C0                                         ; rpl_nanosleep+92↓p
.plt:00000000000013C0                 jmp     cs:nanosleep_ptr
.plt:00000000000013C0 _nanosleep      endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    12h
.plt:00000000000013CB                 jmp     sub_1290
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; char *strrchr(const char *s, int c)
.plt:00000000000013D0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000013D0                 jmp     cs:strrchr_ptr
.plt:00000000000013D0 _strrchr        endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    13h
.plt:00000000000013DB                 jmp     sub_1290
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000013E0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000013E0                                         ; rpl_fseeko+3B↓p
.plt:00000000000013E0                 jmp     cs:lseek_ptr
.plt:00000000000013E0 _lseek          endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    14h
.plt:00000000000013EB                 jmp     sub_1290
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000013F0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000013F0                                         ; xzalloc+12↓j
.plt:00000000000013F0                 jmp     cs:memset_ptr
.plt:00000000000013F0 _memset         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    15h
.plt:00000000000013FB                 jmp     sub_1290
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001400 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001400                 jmp     cs:memcmp_ptr
.plt:0000000000001400 _memcmp         endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    16h
.plt:000000000000140B                 jmp     sub_1290
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001410 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001410                                         ; usage+CC↓p ...
.plt:0000000000001410                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001410 _fputs_unlocked endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    17h
.plt:000000000000141B                 jmp     sub_1290
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001420 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001420                 jmp     cs:calloc_ptr
.plt:0000000000001420 _calloc         endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    18h
.plt:000000000000142B                 jmp     sub_1290
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001430 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001430                 jmp     cs:memcpy_ptr
.plt:0000000000001430 _memcpy         endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    19h
.plt:000000000000143B                 jmp     sub_1290
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; int fileno(FILE *stream)
.plt:0000000000001440 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001440                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001440                 jmp     cs:fileno_ptr
.plt:0000000000001440 _fileno         endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    1Ah
.plt:000000000000144B                 jmp     sub_1290
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; void *malloc(size_t size)
.plt:0000000000001450 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001450                 jmp     cs:malloc_ptr
.plt:0000000000001450 _malloc         endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    1Bh
.plt:000000000000145B                 jmp     sub_1290
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int fflush(FILE *stream)
.plt:0000000000001460 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001460                                         ; rpl_fflush+3B↓j
.plt:0000000000001460                 jmp     cs:fflush_ptr
.plt:0000000000001460 _fflush         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    1Ch
.plt:000000000000146B                 jmp     sub_1290
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; char *nl_langinfo(nl_item item)
.plt:0000000000001470 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001470                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001470 _nl_langinfo    endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    1Dh
.plt:000000000000147B                 jmp     sub_1290
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int __freading(FILE *fp)
.plt:0000000000001480 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001480                                         ; rpl_fflush+9↓p
.plt:0000000000001480                 jmp     cs:__freading_ptr
.plt:0000000000001480 ___freading     endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    1Eh
.plt:000000000000148B                 jmp     sub_1290
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001490 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001490                 jmp     cs:realloc_ptr
.plt:0000000000001490 _realloc        endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    1Fh
.plt:000000000000149B                 jmp     sub_1290
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; char *setlocale(int category, const char *locale)
.plt:00000000000014A0 _setlocale      proc near               ; CODE XREF: main+37↓p
.plt:00000000000014A0                                         ; usage+1C3↓p ...
.plt:00000000000014A0                 jmp     cs:setlocale_ptr
.plt:00000000000014A0 _setlocale      endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    20h ; ' '
.plt:00000000000014AB                 jmp     sub_1290
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:00000000000014B0                                         ; usage+1B7↓p ...
.plt:00000000000014B0                 jmp     cs:__printf_chk_ptr
.plt:00000000000014B0 ___printf_chk   endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    21h ; '!'
.plt:00000000000014BB                 jmp     sub_1290
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000014C0 _error          proc near               ; CODE XREF: main+133↓p
.plt:00000000000014C0                                         ; main+254↓p ...
.plt:00000000000014C0                 jmp     cs:error_ptr
.plt:00000000000014C0 _error          endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    22h ; '"'
.plt:00000000000014CB                 jmp     sub_1290
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000014D0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4BDA↓j
.plt:00000000000014D0                 jmp     cs:fseeko_ptr
.plt:00000000000014D0 _fseeko         endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    23h ; '#'
.plt:00000000000014DB                 jmp     sub_1290
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000014E0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000014E0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000014E0 ___cxa_atexit   endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    24h ; '$'
.plt:00000000000014EB                 jmp     sub_1290
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: noreturn thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; void __noreturn exit(int status)
.plt:00000000000014F0 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:00000000000014F0                                         ; parse_long_options+122↓p ...
.plt:00000000000014F0                 jmp     cs:exit_ptr
.plt:00000000000014F0 _exit           endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    25h ; '%'
.plt:00000000000014FB                 jmp     sub_1290
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001500 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001500                 jmp     cs:fwrite_ptr
.plt:0000000000001500 _fwrite         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    26h ; '&'
.plt:000000000000150B                 jmp     sub_1290
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001510                                         ; version_etc_arn+37↓p ...
.plt:0000000000001510                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001510 ___fprintf_chk  endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    27h ; '''
.plt:000000000000151B                 jmp     sub_1290
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001520 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001520                 jmp     cs:mbsinit_ptr
.plt:0000000000001520 _mbsinit        endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    28h ; '('
.plt:000000000000152B                 jmp     sub_1290
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; int iswprint(wint_t wc)
.plt:0000000000001530 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001530                 jmp     cs:iswprint_ptr
.plt:0000000000001530 _iswprint       endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    29h ; ')'
.plt:000000000000153B                 jmp     sub_1290
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001540 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001540                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001540 ___ctype_b_loc  endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    2Ah ; '*'
.plt:000000000000154B                 jmp     sub_1290
.plt:000000000000154B ; } // starts at 1290
.plt:000000000000154B _plt            ends
.plt:000000000000154B
.plt.got:0000000000001550 ; ===========================================================================
.plt.got:0000000000001550
.plt.got:0000000000001550 ; Segment type: Pure code
.plt.got:0000000000001550 ; Segment permissions: Read/Execute
.plt.got:0000000000001550 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001550                 assume cs:_plt_got
.plt.got:0000000000001550                 ;org 1550h
.plt.got:0000000000001550                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001550
.plt.got:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001550
.plt.got:0000000000001550 ; Attributes: thunk
.plt.got:0000000000001550
.plt.got:0000000000001550 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001550 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001550 ; __unwind {
.plt.got:0000000000001550                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001550 __cxa_finalize  endp
.plt.got:0000000000001550
.plt.got:0000000000001550 ; ---------------------------------------------------------------------------
.plt.got:0000000000001556                 align 8
.plt.got:0000000000001556 ; } // starts at 1550
.plt.got:0000000000001556 _plt_got        ends
.plt.got:0000000000001556
LOAD:0000000000001558 ; ===========================================================================
LOAD:0000000000001558
LOAD:0000000000001558 ; Segment type: Pure code
LOAD:0000000000001558 ; Segment permissions: Read/Execute
LOAD:0000000000001558 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001558                 assume cs:LOAD
LOAD:0000000000001558                 ;org 1558h
LOAD:0000000000001558                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001558                 align 20h
LOAD:0000000000001558 LOAD            ends
LOAD:0000000000001558
.text:0000000000001560 ; ===========================================================================
.text:0000000000001560
.text:0000000000001560 ; Segment type: Pure code
.text:0000000000001560 ; Segment permissions: Read/Execute
.text:0000000000001560 _text           segment para public 'CODE' use64
.text:0000000000001560                 assume cs:_text
.text:0000000000001560                 ;org 1560h
.text:0000000000001560                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001560
.text:0000000000001560 ; =============== S U B R O U T I N E =======================================
.text:0000000000001560
.text:0000000000001560
.text:0000000000001560 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001560                 public main
.text:0000000000001560 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001560
.text:0000000000001560 var_60          = qword ptr -60h
.text:0000000000001560 var_50          = qword ptr -50h
.text:0000000000001560 var_48          = qword ptr -48h
.text:0000000000001560 var_40          = qword ptr -40h
.text:0000000000001560
.text:0000000000001560 ; __unwind {
.text:0000000000001560                 push    r15
.text:0000000000001562                 push    r14
.text:0000000000001564                 push    r13
.text:0000000000001566                 push    r12
.text:0000000000001568                 mov     r12, rsi
.text:000000000000156B                 push    rbp
.text:000000000000156C                 push    rbx
.text:000000000000156D                 mov     ebp, edi
.text:000000000000156F                 sub     rsp, 38h
.text:0000000000001573                 mov     rdi, [rsi]
.text:0000000000001576                 mov     rax, fs:28h
.text:000000000000157F                 mov     [rsp+68h+var_40], rax
.text:0000000000001584                 xor     eax, eax
.text:0000000000001586                 call    set_program_name
.text:000000000000158B                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001592                 mov     edi, 6          ; category
.text:0000000000001597                 call    _setlocale
.text:000000000000159C                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000015A3                 lea     rdi, domainname ; "coreutils"
.text:00000000000015AA                 call    _bindtextdomain
.text:00000000000015AF                 lea     rdi, domainname ; "coreutils"
.text:00000000000015B6                 call    _textdomain
.text:00000000000015BB                 lea     rdi, close_stdout
.text:00000000000015C2                 call    atexit
.text:00000000000015C7                 lea     rax, aPaulEggert ; "Paul Eggert"
.text:00000000000015CE                 push    0
.text:00000000000015D0                 mov     r8, cs:Version
.text:00000000000015D7                 lea     rcx, unk_4D60
.text:00000000000015DE                 lea     rdx, aSleep     ; "sleep"
.text:00000000000015E5                 mov     r9d, 1
.text:00000000000015EB                 push    rax
.text:00000000000015EC                 lea     rax, aJimMeyering ; "Jim Meyering"
.text:00000000000015F3                 mov     rsi, r12
.text:00000000000015F6                 mov     edi, ebp
.text:00000000000015F8                 push    rax
.text:00000000000015F9                 lea     rax, usage
.text:0000000000001600                 push    rax
.text:0000000000001601                 xor     eax, eax
.text:0000000000001603                 call    parse_gnu_standard_options_only
.text:0000000000001608                 add     rsp, 20h
.text:000000000000160C                 cmp     ebp, 1
.text:000000000000160F                 jz      loc_17B9
.text:0000000000001615                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:000000000000161B                 cmp     ebp, eax
.text:000000000000161D                 jle     loc_1772
.text:0000000000001623                 movsxd  rdx, eax
.text:0000000000001626                 not     eax
.text:0000000000001628                 mov     r14d, 1
.text:000000000000162E                 add     eax, ebp
.text:0000000000001630                 lea     rbx, [r12+rdx*8]
.text:0000000000001634                 mov     [rsp+68h+var_60], 0
.text:000000000000163D                 add     rax, rdx
.text:0000000000001640                 lea     rbp, [rsp+68h+var_48]
.text:0000000000001645                 lea     r15, msgid      ; "invalid time interval %s"
.text:000000000000164C                 lea     r13, [r12+rax*8+8]
.text:0000000000001651                 lea     r12, [rsp+68h+var_50]
.text:0000000000001656                 jmp     short loc_16B3
.text:0000000000001656 ; ---------------------------------------------------------------------------
.text:0000000000001658                 align 20h
.text:0000000000001660
.text:0000000000001660 loc_1660:                               ; CODE XREF: main+16A↓j
.text:0000000000001660                 call    ___errno_location
.text:0000000000001665                 cmp     dword ptr [rax], 22h ; '"'
.text:0000000000001668                 jz      short loc_16CC
.text:000000000000166A
.text:000000000000166A loc_166A:                               ; CODE XREF: main+17A↓j
.text:000000000000166A                                         ; main+18C↓j ...
.text:000000000000166A                 mov     rdi, [rbx]
.text:000000000000166D                 call    quote
.text:0000000000001672                 mov     edx, 5          ; category
.text:0000000000001677                 mov     r14, rax
.text:000000000000167A                 mov     rsi, r15        ; msgid
.text:000000000000167D                 xor     edi, edi        ; domainname
.text:000000000000167F                 call    _dcgettext
.text:0000000000001684                 mov     rcx, r14
.text:0000000000001687                 mov     rdx, rax        ; format
.text:000000000000168A                 xor     esi, esi        ; errnum
.text:000000000000168C                 xor     edi, edi        ; status
.text:000000000000168E                 xor     eax, eax
.text:0000000000001690                 xor     r14d, r14d
.text:0000000000001693                 call    _error
.text:0000000000001698                 movsd   xmm0, [rsp+68h+var_50]
.text:000000000000169E
.text:000000000000169E loc_169E:                               ; CODE XREF: main+186↓j
.text:000000000000169E                                         ; main+1AA↓j ...
.text:000000000000169E                 addsd   xmm0, [rsp+68h+var_60]
.text:00000000000016A4                 add     rbx, 8
.text:00000000000016A8                 cmp     rbx, r13
.text:00000000000016AB                 movsd   [rsp+68h+var_60], xmm0
.text:00000000000016B1                 jz      short loc_1710
.text:00000000000016B3
.text:00000000000016B3 loc_16B3:                               ; CODE XREF: main+F6↑j
.text:00000000000016B3                 lea     rcx, cl_strtod
.text:00000000000016BA                 mov     rdi, [rbx]
.text:00000000000016BD                 mov     rdx, r12
.text:00000000000016C0                 mov     rsi, rbp
.text:00000000000016C3                 call    xstrtod
.text:00000000000016C8                 test    al, al
.text:00000000000016CA                 jz      short loc_1660
.text:00000000000016CC
.text:00000000000016CC loc_16CC:                               ; CODE XREF: main+108↑j
.text:00000000000016CC                 pxor    xmm2, xmm2
.text:00000000000016D0                 movsd   xmm0, [rsp+68h+var_50]
.text:00000000000016D6                 ucomisd xmm0, xmm2
.text:00000000000016DA                 jb      short loc_166A
.text:00000000000016DC                 mov     rax, [rsp+68h+var_48]
.text:00000000000016E1                 movzx   edx, byte ptr [rax]
.text:00000000000016E4                 test    dl, dl
.text:00000000000016E6                 jz      short loc_169E
.text:00000000000016E8                 cmp     byte ptr [rax+1], 0
.text:00000000000016EC                 jnz     loc_166A
.text:00000000000016F2                 cmp     dl, 68h ; 'h'
.text:00000000000016F5                 jz      short loc_1745
.text:00000000000016F7                 jg      short loc_1752
.text:00000000000016F9                 cmp     dl, 64h ; 'd'
.text:00000000000016FC                 jnz     loc_166A
.text:0000000000001702                 mulsd   xmm0, cs:qword_5078
.text:000000000000170A                 jmp     short loc_169E
.text:000000000000170A ; ---------------------------------------------------------------------------
.text:000000000000170C                 align 10h
.text:0000000000001710
.text:0000000000001710 loc_1710:                               ; CODE XREF: main+151↑j
.text:0000000000001710                 test    r14b, r14b
.text:0000000000001713                 jz      short loc_177E
.text:0000000000001715
.text:0000000000001715 loc_1715:                               ; CODE XREF: main+21C↓j
.text:0000000000001715                 movsd   xmm0, [rsp+68h+var_60]
.text:000000000000171B                 call    xnanosleep
.text:0000000000001720                 test    eax, eax
.text:0000000000001722                 jnz     short loc_178D
.text:0000000000001724                 xor     eax, eax
.text:0000000000001726                 mov     rcx, [rsp+68h+var_40]
.text:000000000000172B                 xor     rcx, fs:28h
.text:0000000000001734                 jnz     short loc_1788
.text:0000000000001736                 add     rsp, 38h
.text:000000000000173A                 pop     rbx
.text:000000000000173B                 pop     rbp
.text:000000000000173C                 pop     r12
.text:000000000000173E                 pop     r13
.text:0000000000001740                 pop     r14
.text:0000000000001742                 pop     r15
.text:0000000000001744                 retn
.text:0000000000001745 ; ---------------------------------------------------------------------------
.text:0000000000001745
.text:0000000000001745 loc_1745:                               ; CODE XREF: main+195↑j
.text:0000000000001745                 mulsd   xmm0, cs:qword_5070
.text:000000000000174D                 jmp     loc_169E
.text:0000000000001752 ; ---------------------------------------------------------------------------
.text:0000000000001752
.text:0000000000001752 loc_1752:                               ; CODE XREF: main+197↑j
.text:0000000000001752                 cmp     dl, 6Dh ; 'm'
.text:0000000000001755                 jnz     short loc_1764
.text:0000000000001757                 mulsd   xmm0, cs:qword_5068
.text:000000000000175F                 jmp     loc_169E
.text:0000000000001764 ; ---------------------------------------------------------------------------
.text:0000000000001764
.text:0000000000001764 loc_1764:                               ; CODE XREF: main+1F5↑j
.text:0000000000001764                 cmp     dl, 73h ; 's'
.text:0000000000001767                 jnz     loc_166A
.text:000000000000176D                 jmp     loc_169E
.text:0000000000001772 ; ---------------------------------------------------------------------------
.text:0000000000001772
.text:0000000000001772 loc_1772:                               ; CODE XREF: main+BD↑j
.text:0000000000001772                 pxor    xmm3, xmm3
.text:0000000000001776                 movsd   [rsp+68h+var_60], xmm3
.text:000000000000177C                 jmp     short loc_1715
.text:000000000000177E ; ---------------------------------------------------------------------------
.text:000000000000177E
.text:000000000000177E loc_177E:                               ; CODE XREF: main+1B3↑j
.text:000000000000177E                 mov     edi, 1          ; status
.text:0000000000001783                 call    usage
.text:0000000000001788 ; ---------------------------------------------------------------------------
.text:0000000000001788
.text:0000000000001788 loc_1788:                               ; CODE XREF: main+1D4↑j
.text:0000000000001788                 call    ___stack_chk_fail
.text:000000000000178D ; ---------------------------------------------------------------------------
.text:000000000000178D
.text:000000000000178D loc_178D:                               ; CODE XREF: main+1C2↑j
.text:000000000000178D                 lea     rsi, aCannotReadReal ; "cannot read realtime clock"
.text:0000000000001794                 mov     edx, 5          ; category
.text:0000000000001799                 xor     edi, edi        ; domainname
.text:000000000000179B                 call    _dcgettext
.text:00000000000017A0                 mov     rbx, rax
.text:00000000000017A3                 call    ___errno_location
.text:00000000000017A8                 mov     esi, [rax]      ; errnum
.text:00000000000017AA                 mov     rdx, rbx        ; format
.text:00000000000017AD                 mov     edi, 1          ; status
.text:00000000000017B2                 xor     eax, eax
.text:00000000000017B4                 call    _error
.text:00000000000017B9
.text:00000000000017B9 loc_17B9:                               ; CODE XREF: main+AF↑j
.text:00000000000017B9                 lea     rsi, aMissingOperand ; "missing operand"
.text:00000000000017C0                 mov     edx, 5          ; category
.text:00000000000017C5                 xor     edi, edi        ; domainname
.text:00000000000017C7                 call    _dcgettext
.text:00000000000017CC                 xor     edi, edi        ; status
.text:00000000000017CE                 mov     rdx, rax        ; format
.text:00000000000017D1                 xor     esi, esi        ; errnum
.text:00000000000017D3                 xor     eax, eax
.text:00000000000017D5                 call    _error
.text:00000000000017DA                 mov     edi, 1          ; status
.text:00000000000017DF                 call    usage
.text:00000000000017DF ; } // starts at 1560
.text:00000000000017DF main            endp
.text:00000000000017DF
.text:00000000000017DF ; ---------------------------------------------------------------------------
.text:00000000000017E4                 align 10h
.text:00000000000017F0
.text:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017F0
.text:00000000000017F0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000017F0
.text:00000000000017F0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000017F0                 public start
.text:00000000000017F0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000017F0 ; __unwind {
.text:00000000000017F0                 xor     ebp, ebp
.text:00000000000017F2                 mov     r9, rdx         ; rtld_fini
.text:00000000000017F5                 pop     rsi             ; argc
.text:00000000000017F6                 mov     rdx, rsp        ; ubp_av
.text:00000000000017F9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000017FD                 push    rax
.text:00000000000017FE                 push    rsp             ; stack_end
.text:00000000000017FF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001806                 lea     rcx, __libc_csu_init ; init
.text:000000000000180D                 lea     rdi, main       ; main
.text:0000000000001814                 call    cs:__libc_start_main_ptr
.text:000000000000181A                 hlt
.text:000000000000181A ; } // starts at 17F0
.text:000000000000181A start           endp
.text:000000000000181A
.text:000000000000181A ; ---------------------------------------------------------------------------
.text:000000000000181B                 align 20h
.text:0000000000001820
.text:0000000000001820 ; =============== S U B R O U T I N E =======================================
.text:0000000000001820
.text:0000000000001820 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001820
.text:0000000000001820 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_18D3↓p
.text:0000000000001820                 lea     rdi, __bss_start
.text:0000000000001827                 push    rbp
.text:0000000000001828                 lea     rax, __bss_start
.text:000000000000182F                 cmp     rax, rdi
.text:0000000000001832                 mov     rbp, rsp
.text:0000000000001835                 jz      short loc_1850
.text:0000000000001837                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000183E                 test    rax, rax
.text:0000000000001841                 jz      short loc_1850
.text:0000000000001843                 pop     rbp
.text:0000000000001844                 jmp     rax
.text:0000000000001844 ; ---------------------------------------------------------------------------
.text:0000000000001846                 align 10h
.text:0000000000001850
.text:0000000000001850 loc_1850:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001850                                         ; deregister_tm_clones+21↑j
.text:0000000000001850                 pop     rbp
.text:0000000000001851                 retn
.text:0000000000001851 deregister_tm_clones endp
.text:0000000000001851
.text:0000000000001851 ; ---------------------------------------------------------------------------
.text:0000000000001852                 align 20h
.text:0000000000001860
.text:0000000000001860 ; =============== S U B R O U T I N E =======================================
.text:0000000000001860
.text:0000000000001860 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001860
.text:0000000000001860 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001860                 lea     rdi, __bss_start
.text:0000000000001867                 lea     rsi, __bss_start
.text:000000000000186E                 push    rbp
.text:000000000000186F                 sub     rsi, rdi
.text:0000000000001872                 mov     rbp, rsp
.text:0000000000001875                 sar     rsi, 3
.text:0000000000001879                 mov     rax, rsi
.text:000000000000187C                 shr     rax, 3Fh
.text:0000000000001880                 add     rsi, rax
.text:0000000000001883                 sar     rsi, 1
.text:0000000000001886                 jz      short loc_18A0
.text:0000000000001888                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000188F                 test    rax, rax
.text:0000000000001892                 jz      short loc_18A0
.text:0000000000001894                 pop     rbp
.text:0000000000001895                 jmp     rax
.text:0000000000001895 ; ---------------------------------------------------------------------------
.text:0000000000001897                 align 20h
.text:00000000000018A0
.text:00000000000018A0 loc_18A0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000018A0                                         ; register_tm_clones+32↑j
.text:00000000000018A0                 pop     rbp
.text:00000000000018A1                 retn
.text:00000000000018A1 register_tm_clones endp
.text:00000000000018A1
.text:00000000000018A1 ; ---------------------------------------------------------------------------
.text:00000000000018A2                 align 10h
.text:00000000000018B0
.text:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018B0
.text:00000000000018B0 ; Attributes: info_from_lumina
.text:00000000000018B0
.text:00000000000018B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000018B0                 cmp     cs:completed_7697, 0
.text:00000000000018B7                 jnz     short locret_18E8
.text:00000000000018B9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000018C1                 push    rbp
.text:00000000000018C2                 mov     rbp, rsp
.text:00000000000018C5                 jz      short loc_18D3
.text:00000000000018C7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000018CE                 call    __cxa_finalize
.text:00000000000018D3
.text:00000000000018D3 loc_18D3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000018D3                 call    deregister_tm_clones
.text:00000000000018D8                 mov     cs:completed_7697, 1
.text:00000000000018DF                 pop     rbp
.text:00000000000018E0                 retn
.text:00000000000018E0 ; ---------------------------------------------------------------------------
.text:00000000000018E1                 align 8
.text:00000000000018E8
.text:00000000000018E8 locret_18E8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000018E8                 rep retn
.text:00000000000018E8 __do_global_dtors_aux endp
.text:00000000000018E8
.text:00000000000018E8 ; ---------------------------------------------------------------------------
.text:00000000000018EA                 align 10h
.text:00000000000018F0
.text:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018F0
.text:00000000000018F0 ; Attributes: bp-based frame
.text:00000000000018F0
.text:00000000000018F0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000018F0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000018F0                 push    rbp
.text:00000000000018F1                 mov     rbp, rsp
.text:00000000000018F4                 pop     rbp
.text:00000000000018F5                 jmp     register_tm_clones
.text:00000000000018F5 frame_dummy     endp
.text:00000000000018F5
.text:00000000000018F5 ; ---------------------------------------------------------------------------
.text:00000000000018FA                 align 20h
.text:0000000000001900
.text:0000000000001900 ; =============== S U B R O U T I N E =======================================
.text:0000000000001900
.text:0000000000001900 ; Attributes: noreturn
.text:0000000000001900
.text:0000000000001900 ; void __fastcall __noreturn usage(int status)
.text:0000000000001900                 public usage
.text:0000000000001900 usage           proc near               ; CODE XREF: main+223↑p
.text:0000000000001900                                         ; main+27F↑p
.text:0000000000001900                                         ; DATA XREF: ...
.text:0000000000001900
.text:0000000000001900 var_A8          = qword ptr -0A8h
.text:0000000000001900 var_A0          = qword ptr -0A0h
.text:0000000000001900 var_98          = qword ptr -98h
.text:0000000000001900 var_90          = qword ptr -90h
.text:0000000000001900 var_88          = qword ptr -88h
.text:0000000000001900 var_80          = qword ptr -80h
.text:0000000000001900 var_78          = qword ptr -78h
.text:0000000000001900 var_70          = qword ptr -70h
.text:0000000000001900 var_68          = qword ptr -68h
.text:0000000000001900 var_60          = qword ptr -60h
.text:0000000000001900 var_58          = qword ptr -58h
.text:0000000000001900 var_50          = qword ptr -50h
.text:0000000000001900 var_48          = qword ptr -48h
.text:0000000000001900 var_40          = qword ptr -40h
.text:0000000000001900 var_30          = qword ptr -30h
.text:0000000000001900
.text:0000000000001900 ; __unwind {
.text:0000000000001900                 push    r13
.text:0000000000001902                 push    r12
.text:0000000000001904                 mov     edx, 5          ; category
.text:0000000000001909                 push    rbp
.text:000000000000190A                 push    rbx
.text:000000000000190B                 mov     ebp, edi
.text:000000000000190D                 sub     rsp, 88h
.text:0000000000001914                 mov     rbx, cs:program_name
.text:000000000000191B                 mov     rax, fs:28h
.text:0000000000001924                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001929                 xor     eax, eax
.text:000000000000192B                 test    edi, edi
.text:000000000000192D                 jz      short loc_195D
.text:000000000000192F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001936                 xor     edi, edi        ; domainname
.text:0000000000001938                 call    _dcgettext
.text:000000000000193D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001944                 mov     rdx, rax
.text:0000000000001947                 mov     rcx, rbx
.text:000000000000194A                 mov     esi, 1
.text:000000000000194F                 xor     eax, eax
.text:0000000000001951                 call    ___fprintf_chk
.text:0000000000001956
.text:0000000000001956 loc_1956:                               ; CODE XREF: usage+256↓j
.text:0000000000001956                 mov     edi, ebp        ; status
.text:0000000000001958                 call    _exit
.text:000000000000195D ; ---------------------------------------------------------------------------
.text:000000000000195D
.text:000000000000195D loc_195D:                               ; CODE XREF: usage+2D↑j
.text:000000000000195D                 lea     rsi, aUsageSNumberSu ; "Usage: %s NUMBER[SUFFIX]...\n  or:  %s "...
.text:0000000000001964                 xor     edi, edi        ; domainname
.text:0000000000001966                 call    _dcgettext
.text:000000000000196B                 mov     rcx, rbx
.text:000000000000196E                 mov     rdx, rbx
.text:0000000000001971                 mov     rsi, rax
.text:0000000000001974                 mov     edi, 1
.text:0000000000001979                 xor     eax, eax
.text:000000000000197B                 call    ___printf_chk
.text:0000000000001980                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001987                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000198E                 mov     edx, 5          ; category
.text:0000000000001993                 xor     edi, edi        ; domainname
.text:0000000000001995                 call    _dcgettext
.text:000000000000199A                 mov     rsi, rbx        ; stream
.text:000000000000199D                 mov     rdi, rax        ; s
.text:00000000000019A0                 call    _fputs_unlocked
.text:00000000000019A5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000019AC                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000019B3                 mov     edx, 5          ; category
.text:00000000000019B8                 xor     edi, edi        ; domainname
.text:00000000000019BA                 call    _dcgettext
.text:00000000000019BF                 mov     rsi, rbx        ; stream
.text:00000000000019C2                 mov     rdi, rax        ; s
.text:00000000000019C5                 lea     rbx, aSha512sum ; "sha512sum"
.text:00000000000019CC                 call    _fputs_unlocked
.text:00000000000019D1                 lea     rax, asc_4CEA   ; "["
.text:00000000000019D8                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000019DF                 mov     [rsp+0A8h+var_58], rbx
.text:00000000000019E4                 lea     rbx, aSleep     ; "sleep"
.text:00000000000019EB                 mov     [rsp+0A8h+var_48], 0
.text:00000000000019F4                 mov     [rsp+0A8h+var_40], 0
.text:00000000000019FD                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001A01                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001A08                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001A0D                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001A14                 mov     rdx, rsp
.text:0000000000001A17                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001A1C                 lea     rax, domainname ; "coreutils"
.text:0000000000001A23                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001A28                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001A2D                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001A34                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001A39                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001A40                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001A45                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001A4C                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001A51                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001A56                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001A5B                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001A60
.text:0000000000001A60 loc_1A60:                               ; CODE XREF: usage+17D↓j
.text:0000000000001A60                 add     rdx, 10h
.text:0000000000001A64                 mov     rdi, [rdx]
.text:0000000000001A67                 test    rdi, rdi
.text:0000000000001A6A                 jz      short loc_1A7F
.text:0000000000001A6C                 mov     ecx, 6
.text:0000000000001A71                 mov     rsi, rbx
.text:0000000000001A74                 repe cmpsb
.text:0000000000001A76                 setnbe  al
.text:0000000000001A79                 sbb     al, 0
.text:0000000000001A7B                 test    al, al
.text:0000000000001A7D                 jnz     short loc_1A60
.text:0000000000001A7F
.text:0000000000001A7F loc_1A7F:                               ; CODE XREF: usage+16A↑j
.text:0000000000001A7F                 mov     r12, [rdx+8]
.text:0000000000001A83                 xor     edi, edi        ; domainname
.text:0000000000001A85                 mov     edx, 5          ; category
.text:0000000000001A8A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001A91                 test    r12, r12
.text:0000000000001A94                 jz      loc_1B5B
.text:0000000000001A9A                 call    _dcgettext
.text:0000000000001A9F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001AA6                 lea     rdx, unk_4D60
.text:0000000000001AAD                 mov     rsi, rax
.text:0000000000001AB0                 mov     edi, 1
.text:0000000000001AB5                 xor     eax, eax
.text:0000000000001AB7                 call    ___printf_chk
.text:0000000000001ABC                 xor     esi, esi        ; locale
.text:0000000000001ABE                 mov     edi, 5          ; category
.text:0000000000001AC3                 call    _setlocale
.text:0000000000001AC8                 test    rax, rax
.text:0000000000001ACB                 jz      short loc_1AE9
.text:0000000000001ACD                 lea     rsi, s2         ; "en_"
.text:0000000000001AD4                 mov     edx, 3          ; n
.text:0000000000001AD9                 mov     rdi, rax        ; s1
.text:0000000000001ADC                 call    _strncmp
.text:0000000000001AE1                 test    eax, eax
.text:0000000000001AE3                 jnz     loc_1BF0
.text:0000000000001AE9
.text:0000000000001AE9 loc_1AE9:                               ; CODE XREF: usage+1CB↑j
.text:0000000000001AE9                                         ; usage+315↓j
.text:0000000000001AE9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001AF0                 xor     edi, edi        ; domainname
.text:0000000000001AF2                 mov     edx, 5          ; category
.text:0000000000001AF7                 call    _dcgettext
.text:0000000000001AFC                 lea     rcx, aSleep     ; "sleep"
.text:0000000000001B03                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001B0A                 mov     rsi, rax
.text:0000000000001B0D                 mov     edi, 1
.text:0000000000001B12                 xor     eax, eax
.text:0000000000001B14                 call    ___printf_chk
.text:0000000000001B19                 cmp     r12, rbx
.text:0000000000001B1C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001B23                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001B2A                 cmovz   rbx, rcx
.text:0000000000001B2E
.text:0000000000001B2E loc_1B2E:                               ; CODE XREF: usage+2E4↓j
.text:0000000000001B2E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001B35                 xor     edi, edi        ; domainname
.text:0000000000001B37                 mov     edx, 5          ; category
.text:0000000000001B3C                 call    _dcgettext
.text:0000000000001B41                 mov     rcx, rbx
.text:0000000000001B44                 mov     rsi, rax
.text:0000000000001B47                 mov     rdx, r12
.text:0000000000001B4A                 mov     edi, 1
.text:0000000000001B4F                 xor     eax, eax
.text:0000000000001B51                 call    ___printf_chk
.text:0000000000001B56                 jmp     loc_1956
.text:0000000000001B5B ; ---------------------------------------------------------------------------
.text:0000000000001B5B
.text:0000000000001B5B loc_1B5B:                               ; CODE XREF: usage+194↑j
.text:0000000000001B5B                 call    _dcgettext
.text:0000000000001B60                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001B67                 lea     rdx, unk_4D60
.text:0000000000001B6E                 mov     rsi, rax
.text:0000000000001B71                 mov     edi, 1
.text:0000000000001B76                 xor     eax, eax
.text:0000000000001B78                 call    ___printf_chk
.text:0000000000001B7D                 xor     esi, esi        ; locale
.text:0000000000001B7F                 mov     edi, 5          ; category
.text:0000000000001B84                 call    _setlocale
.text:0000000000001B89                 test    rax, rax
.text:0000000000001B8C                 jz      short loc_1BA6
.text:0000000000001B8E                 lea     rsi, s2         ; "en_"
.text:0000000000001B95                 mov     edx, 3          ; n
.text:0000000000001B9A                 mov     rdi, rax        ; s1
.text:0000000000001B9D                 call    _strncmp
.text:0000000000001BA2                 test    eax, eax
.text:0000000000001BA4                 jnz     short loc_1BE9
.text:0000000000001BA6
.text:0000000000001BA6 loc_1BA6:                               ; CODE XREF: usage+28C↑j
.text:0000000000001BA6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001BAD                 mov     edx, 5          ; category
.text:0000000000001BB2                 xor     edi, edi        ; domainname
.text:0000000000001BB4                 lea     r12, aSleep     ; "sleep"
.text:0000000000001BBB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001BC2                 call    _dcgettext
.text:0000000000001BC7                 lea     rcx, aSleep     ; "sleep"
.text:0000000000001BCE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001BD5                 mov     rsi, rax
.text:0000000000001BD8                 mov     edi, 1
.text:0000000000001BDD                 xor     eax, eax
.text:0000000000001BDF                 call    ___printf_chk
.text:0000000000001BE4                 jmp     loc_1B2E
.text:0000000000001BE9 ; ---------------------------------------------------------------------------
.text:0000000000001BE9
.text:0000000000001BE9 loc_1BE9:                               ; CODE XREF: usage+2A4↑j
.text:0000000000001BE9                 lea     r12, aSleep     ; "sleep"
.text:0000000000001BF0
.text:0000000000001BF0 loc_1BF0:                               ; CODE XREF: usage+1E3↑j
.text:0000000000001BF0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BF7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001BFE                 xor     edi, edi        ; domainname
.text:0000000000001C00                 mov     edx, 5          ; category
.text:0000000000001C05                 call    _dcgettext
.text:0000000000001C0A                 mov     rsi, r13        ; stream
.text:0000000000001C0D                 mov     rdi, rax        ; s
.text:0000000000001C10                 call    _fputs_unlocked
.text:0000000000001C15                 jmp     loc_1AE9
.text:0000000000001C15 ; } // starts at 1900
.text:0000000000001C15 usage           endp
.text:0000000000001C15
.text:0000000000001C15 ; ---------------------------------------------------------------------------
.text:0000000000001C1A                 align 20h
.text:0000000000001C20
.text:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C20
.text:0000000000001C20
.text:0000000000001C20 ; __int64 __fastcall cl_strtod(char *nptr)
.text:0000000000001C20                 public cl_strtod
.text:0000000000001C20 cl_strtod       proc near               ; DATA XREF: main:loc_16B3↑o
.text:0000000000001C20
.text:0000000000001C20 var_50          = qword ptr -50h
.text:0000000000001C20 endptr          = qword ptr -40h
.text:0000000000001C20 var_38          = qword ptr -38h
.text:0000000000001C20 var_30          = qword ptr -30h
.text:0000000000001C20
.text:0000000000001C20 ; __unwind {
.text:0000000000001C20                 push    r13
.text:0000000000001C22                 push    r12
.text:0000000000001C24                 push    rbp
.text:0000000000001C25                 push    rbx
.text:0000000000001C26                 mov     rbx, rsi
.text:0000000000001C29                 mov     rbp, rdi
.text:0000000000001C2C                 sub     rsp, 38h
.text:0000000000001C30                 lea     rsi, [rsp+58h+endptr] ; endptr
.text:0000000000001C35                 mov     rax, fs:28h
.text:0000000000001C3E                 mov     [rsp+58h+var_30], rax
.text:0000000000001C43                 xor     eax, eax
.text:0000000000001C45                 call    _strtod
.text:0000000000001C4A                 mov     rax, [rsp+58h+endptr]
.text:0000000000001C4F                 movapd  xmm1, xmm0
.text:0000000000001C53                 cmp     byte ptr [rax], 0
.text:0000000000001C56                 jnz     short loc_1C88
.text:0000000000001C58
.text:0000000000001C58 loc_1C58:                               ; CODE XREF: cl_strtod+A1↓j
.text:0000000000001C58                                         ; cl_strtod+AC↓j
.text:0000000000001C58                 test    rbx, rbx
.text:0000000000001C5B                 jz      short loc_1C65
.text:0000000000001C5D                 mov     rax, [rsp+58h+endptr]
.text:0000000000001C62                 mov     [rbx], rax
.text:0000000000001C65
.text:0000000000001C65 loc_1C65:                               ; CODE XREF: cl_strtod+3B↑j
.text:0000000000001C65                 mov     rax, [rsp+58h+var_30]
.text:0000000000001C6A                 xor     rax, fs:28h
.text:0000000000001C73                 movapd  xmm0, xmm1
.text:0000000000001C77                 jnz     short loc_1CCE
.text:0000000000001C79                 add     rsp, 38h
.text:0000000000001C7D                 pop     rbx
.text:0000000000001C7E                 pop     rbp
.text:0000000000001C7F                 pop     r12
.text:0000000000001C81                 pop     r13
.text:0000000000001C83                 retn
.text:0000000000001C83 ; ---------------------------------------------------------------------------
.text:0000000000001C84                 align 8
.text:0000000000001C88
.text:0000000000001C88 loc_1C88:                               ; CODE XREF: cl_strtod+36↑j
.text:0000000000001C88                 movsd   [rsp+58h+var_50], xmm0
.text:0000000000001C8E                 call    ___errno_location
.text:0000000000001C93                 lea     rsi, [rsp+58h+var_38] ; endptr
.text:0000000000001C98                 mov     rdi, rbp        ; nptr
.text:0000000000001C9B                 mov     r12, rax
.text:0000000000001C9E                 mov     r13d, [rax]
.text:0000000000001CA1                 call    c_strtod
.text:0000000000001CA6                 mov     rax, [rsp+58h+var_38]
.text:0000000000001CAB                 cmp     [rsp+58h+endptr], rax
.text:0000000000001CB0                 movsd   xmm1, [rsp+58h+var_50]
.text:0000000000001CB6                 jnb     short loc_1CC8
.text:0000000000001CB8                 mov     [rsp+58h+endptr], rax
.text:0000000000001CBD                 movapd  xmm1, xmm0
.text:0000000000001CC1                 jmp     short loc_1C58
.text:0000000000001CC1 ; ---------------------------------------------------------------------------
.text:0000000000001CC3                 align 8
.text:0000000000001CC8
.text:0000000000001CC8 loc_1CC8:                               ; CODE XREF: cl_strtod+96↑j
.text:0000000000001CC8                 mov     [r12], r13d
.text:0000000000001CCC                 jmp     short loc_1C58
.text:0000000000001CCE ; ---------------------------------------------------------------------------
.text:0000000000001CCE
.text:0000000000001CCE loc_1CCE:                               ; CODE XREF: cl_strtod+57↑j
.text:0000000000001CCE                 call    ___stack_chk_fail
.text:0000000000001CCE ; } // starts at 1C20
.text:0000000000001CCE cl_strtod       endp
.text:0000000000001CCE
.text:0000000000001CCE ; ---------------------------------------------------------------------------
.text:0000000000001CD3                 align 20h
.text:0000000000001CE0
.text:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CE0
.text:0000000000001CE0
.text:0000000000001CE0                 public close_stdout_set_file_name
.text:0000000000001CE0 close_stdout_set_file_name proc near
.text:0000000000001CE0 ; __unwind {
.text:0000000000001CE0                 mov     cs:file_name, rdi
.text:0000000000001CE7                 retn
.text:0000000000001CE7 ; } // starts at 1CE0
.text:0000000000001CE7 close_stdout_set_file_name endp
.text:0000000000001CE7
.text:0000000000001CE7 ; ---------------------------------------------------------------------------
.text:0000000000001CE8                 align 10h
.text:0000000000001CF0
.text:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CF0
.text:0000000000001CF0
.text:0000000000001CF0                 public close_stdout_set_ignore_EPIPE
.text:0000000000001CF0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001CF0 ; __unwind {
.text:0000000000001CF0                 mov     cs:ignore_EPIPE, dil
.text:0000000000001CF7                 retn
.text:0000000000001CF7 ; } // starts at 1CF0
.text:0000000000001CF7 close_stdout_set_ignore_EPIPE endp
.text:0000000000001CF7
.text:0000000000001CF7 ; ---------------------------------------------------------------------------
.text:0000000000001CF8                 align 20h
.text:0000000000001D00
.text:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D00
.text:0000000000001D00 ; Attributes: info_from_lumina
.text:0000000000001D00
.text:0000000000001D00 ; void __cdecl close_stdout()
.text:0000000000001D00                 public close_stdout
.text:0000000000001D00 close_stdout    proc near               ; DATA XREF: main+5B↑o
.text:0000000000001D00 ; __unwind {
.text:0000000000001D00                 push    rbp
.text:0000000000001D01                 push    rbx
.text:0000000000001D02                 sub     rsp, 8
.text:0000000000001D06                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001D0D                 call    close_stream
.text:0000000000001D12                 test    eax, eax
.text:0000000000001D14                 jz      short loc_1D2C
.text:0000000000001D16                 call    ___errno_location
.text:0000000000001D1B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001D22                 mov     rbx, rax
.text:0000000000001D25                 jz      short loc_1D43
.text:0000000000001D27                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001D2A                 jnz     short loc_1D43
.text:0000000000001D2C
.text:0000000000001D2C loc_1D2C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001D2C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001D33                 call    close_stream
.text:0000000000001D38                 test    eax, eax
.text:0000000000001D3A                 jnz     short loc_1D82
.text:0000000000001D3C                 add     rsp, 8
.text:0000000000001D40                 pop     rbx
.text:0000000000001D41                 pop     rbp
.text:0000000000001D42                 retn
.text:0000000000001D43 ; ---------------------------------------------------------------------------
.text:0000000000001D43
.text:0000000000001D43 loc_1D43:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001D43                                         ; close_stdout+2A↑j
.text:0000000000001D43                 lea     rsi, aWriteError ; "write error"
.text:0000000000001D4A                 xor     edi, edi        ; domainname
.text:0000000000001D4C                 mov     edx, 5          ; category
.text:0000000000001D51                 call    _dcgettext
.text:0000000000001D56                 mov     rdi, cs:file_name
.text:0000000000001D5D                 mov     rbp, rax
.text:0000000000001D60                 test    rdi, rdi
.text:0000000000001D63                 jz      short loc_1D8D
.text:0000000000001D65                 call    quotearg_colon
.text:0000000000001D6A                 mov     esi, [rbx]      ; errnum
.text:0000000000001D6C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001D73                 mov     rcx, rax
.text:0000000000001D76                 mov     r8, rbp
.text:0000000000001D79                 xor     edi, edi        ; status
.text:0000000000001D7B                 xor     eax, eax
.text:0000000000001D7D                 call    _error
.text:0000000000001D82
.text:0000000000001D82 loc_1D82:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001D82                                         ; close_stdout+A2↓j
.text:0000000000001D82                 mov     edi, cs:exit_failure ; status
.text:0000000000001D88                 call    __exit
.text:0000000000001D8D ; ---------------------------------------------------------------------------
.text:0000000000001D8D
.text:0000000000001D8D loc_1D8D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001D8D                 mov     esi, [rbx]      ; errnum
.text:0000000000001D8F                 lea     rdx, format+4   ; format
.text:0000000000001D96                 mov     rcx, rax
.text:0000000000001D99                 xor     edi, edi        ; status
.text:0000000000001D9B                 xor     eax, eax
.text:0000000000001D9D                 call    _error
.text:0000000000001DA2                 jmp     short loc_1D82
.text:0000000000001DA2 ; } // starts at 1D00
.text:0000000000001DA2 close_stdout    endp
.text:0000000000001DA2
.text:0000000000001DA2 ; ---------------------------------------------------------------------------
.text:0000000000001DA4                 align 10h
.text:0000000000001DB0
.text:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DB0
.text:0000000000001DB0
.text:0000000000001DB0                 public parse_long_options
.text:0000000000001DB0 parse_long_options proc near
.text:0000000000001DB0
.text:0000000000001DB0 var_100         = qword ptr -100h
.text:0000000000001DB0 var_F8          = dword ptr -0F8h
.text:0000000000001DB0 var_F4          = dword ptr -0F4h
.text:0000000000001DB0 var_F0          = qword ptr -0F0h
.text:0000000000001DB0 var_E8          = qword ptr -0E8h
.text:0000000000001DB0 var_E0          = qword ptr -0E0h
.text:0000000000001DB0 var_D8          = byte ptr -0D8h
.text:0000000000001DB0 var_A8          = xmmword ptr -0A8h
.text:0000000000001DB0 var_98          = xmmword ptr -98h
.text:0000000000001DB0 var_88          = xmmword ptr -88h
.text:0000000000001DB0 var_78          = xmmword ptr -78h
.text:0000000000001DB0 var_68          = xmmword ptr -68h
.text:0000000000001DB0 var_58          = xmmword ptr -58h
.text:0000000000001DB0 var_48          = xmmword ptr -48h
.text:0000000000001DB0 var_38          = xmmword ptr -38h
.text:0000000000001DB0 arg_0           = byte ptr  8
.text:0000000000001DB0
.text:0000000000001DB0 ; __unwind {
.text:0000000000001DB0                 push    r13
.text:0000000000001DB2                 push    r12
.text:0000000000001DB4                 mov     r13, r8
.text:0000000000001DB7                 push    rbp
.text:0000000000001DB8                 push    rbx
.text:0000000000001DB9                 mov     rbp, rdx
.text:0000000000001DBC                 mov     r12, rcx
.text:0000000000001DBF                 sub     rsp, 0E8h
.text:0000000000001DC6                 test    al, al
.text:0000000000001DC8                 jz      short loc_1E04
.text:0000000000001DCA                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000001DCF                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000001DD4                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000001DDC                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000001DE4                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000001DEC                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000001DF4                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000001DFC                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000001E04
.text:0000000000001E04 loc_1E04:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000001E04                 mov     rax, fs:28h
.text:0000000000001E0D                 mov     [rsp+108h+var_E0], rax
.text:0000000000001E12                 xor     eax, eax
.text:0000000000001E14                 cmp     edi, 2
.text:0000000000001E17                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001E1D                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000001E27                 jz      short loc_1E60
.text:0000000000001E29
.text:0000000000001E29 loc_1E29:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000001E29                                         ; parse_long_options+DD↓j ...
.text:0000000000001E29                 mov     rax, [rsp+108h+var_E0]
.text:0000000000001E2E                 xor     rax, fs:28h
.text:0000000000001E37                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001E3D                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000001E47                 jnz     loc_1EEA
.text:0000000000001E4D                 add     rsp, 0E8h
.text:0000000000001E54                 pop     rbx
.text:0000000000001E55                 pop     rbp
.text:0000000000001E56                 pop     r12
.text:0000000000001E58                 pop     r13
.text:0000000000001E5A                 retn
.text:0000000000001E5A ; ---------------------------------------------------------------------------
.text:0000000000001E5B                 align 20h
.text:0000000000001E60
.text:0000000000001E60 loc_1E60:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000001E60                 lea     rcx, long_options ; longopts
.text:0000000000001E67                 lea     rdx, shortopts  ; "+"
.text:0000000000001E6E                 xor     r8d, r8d        ; longind
.text:0000000000001E71                 mov     [rsp+108h+var_100], r9
.text:0000000000001E76                 call    _getopt_long
.text:0000000000001E7B                 cmp     eax, 0FFFFFFFFh
.text:0000000000001E7E                 jz      short loc_1E29
.text:0000000000001E80                 cmp     eax, 68h ; 'h'
.text:0000000000001E83                 mov     r9, [rsp+108h+var_100]
.text:0000000000001E88                 jz      short loc_1EE0
.text:0000000000001E8A                 cmp     eax, 76h ; 'v'
.text:0000000000001E8D                 jnz     short loc_1E29
.text:0000000000001E8F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000001E97                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E9E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000001EA3                 mov     rcx, r13
.text:0000000000001EA6                 mov     rdx, r12
.text:0000000000001EA9                 mov     rsi, rbp
.text:0000000000001EAC                 mov     [rsp+108h+var_F0], rax
.text:0000000000001EB1                 lea     rax, [rsp+108h+var_D8]
.text:0000000000001EB6                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:0000000000001EBE                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000001EC6                 mov     [rsp+108h+var_E8], rax
.text:0000000000001ECB                 call    version_etc_va
.text:0000000000001ED0                 xor     edi, edi        ; status
.text:0000000000001ED2                 call    _exit
.text:0000000000001ED2 ; ---------------------------------------------------------------------------
.text:0000000000001ED7                 align 20h
.text:0000000000001EE0
.text:0000000000001EE0 loc_1EE0:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000001EE0                 xor     edi, edi
.text:0000000000001EE2                 call    r9
.text:0000000000001EE5                 jmp     loc_1E29
.text:0000000000001EEA ; ---------------------------------------------------------------------------
.text:0000000000001EEA
.text:0000000000001EEA loc_1EEA:                               ; CODE XREF: parse_long_options+97↑j
.text:0000000000001EEA                 call    ___stack_chk_fail
.text:0000000000001EEA ; } // starts at 1DB0
.text:0000000000001EEA parse_long_options endp
.text:0000000000001EEA
.text:0000000000001EEA ; ---------------------------------------------------------------------------
.text:0000000000001EEF                 align 10h
.text:0000000000001EF0
.text:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EF0
.text:0000000000001EF0
.text:0000000000001EF0                 public parse_gnu_standard_options_only
.text:0000000000001EF0 parse_gnu_standard_options_only proc near
.text:0000000000001EF0                                         ; CODE XREF: main+A3↑p
.text:0000000000001EF0
.text:0000000000001EF0 var_F8          = dword ptr -0F8h
.text:0000000000001EF0 var_F4          = dword ptr -0F4h
.text:0000000000001EF0 var_F0          = qword ptr -0F0h
.text:0000000000001EF0 var_E8          = qword ptr -0E8h
.text:0000000000001EF0 var_E0          = qword ptr -0E0h
.text:0000000000001EF0 var_D8          = byte ptr -0D8h
.text:0000000000001EF0 var_A8          = xmmword ptr -0A8h
.text:0000000000001EF0 var_98          = xmmword ptr -98h
.text:0000000000001EF0 var_88          = xmmword ptr -88h
.text:0000000000001EF0 var_78          = xmmword ptr -78h
.text:0000000000001EF0 var_68          = xmmword ptr -68h
.text:0000000000001EF0 var_58          = xmmword ptr -58h
.text:0000000000001EF0 var_48          = xmmword ptr -48h
.text:0000000000001EF0 var_38          = xmmword ptr -38h
.text:0000000000001EF0 arg_0           = qword ptr  8
.text:0000000000001EF0 arg_8           = byte ptr  10h
.text:0000000000001EF0
.text:0000000000001EF0 ; __unwind {
.text:0000000000001EF0                 push    r14
.text:0000000000001EF2                 push    r13
.text:0000000000001EF4                 mov     r14, r8
.text:0000000000001EF7                 push    r12
.text:0000000000001EF9                 push    rbp
.text:0000000000001EFA                 mov     r12, rdx
.text:0000000000001EFD                 push    rbx
.text:0000000000001EFE                 mov     r13, rcx
.text:0000000000001F01                 sub     rsp, 0D0h
.text:0000000000001F08                 test    al, al
.text:0000000000001F0A                 mov     rbp, [rsp+0F8h+arg_0]
.text:0000000000001F12                 jz      short loc_1F4B
.text:0000000000001F14                 movaps  [rsp+0F8h+var_A8], xmm0
.text:0000000000001F19                 movaps  [rsp+0F8h+var_98], xmm1
.text:0000000000001F1E                 movaps  [rsp+0F8h+var_88], xmm2
.text:0000000000001F23                 movaps  [rsp+0F8h+var_78], xmm3
.text:0000000000001F2B                 movaps  [rsp+0F8h+var_68], xmm4
.text:0000000000001F33                 movaps  [rsp+0F8h+var_58], xmm5
.text:0000000000001F3B                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000001F43                 movaps  [rsp+0F8h+var_38], xmm7
.text:0000000000001F4B
.text:0000000000001F4B loc_1F4B:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:0000000000001F4B                 mov     rax, fs:28h
.text:0000000000001F54                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000001F59                 xor     eax, eax
.text:0000000000001F5B                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001F62                 lea     rax, shortopts  ; "+"
.text:0000000000001F69                 test    r9b, r9b
.text:0000000000001F6C                 lea     rcx, long_options ; longopts
.text:0000000000001F73                 cmovz   rdx, rax        ; shortopts
.text:0000000000001F77                 xor     r8d, r8d        ; longind
.text:0000000000001F7A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001F80                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:0000000000001F8A                 call    _getopt_long
.text:0000000000001F8F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001F92                 jz      short loc_1FF8
.text:0000000000001F94                 cmp     eax, 68h ; 'h'
.text:0000000000001F97                 jz      loc_2020
.text:0000000000001F9D                 cmp     eax, 76h ; 'v'
.text:0000000000001FA0                 jnz     short loc_1FF0
.text:0000000000001FA2                 lea     rax, [rsp+0F8h+arg_8]
.text:0000000000001FAA                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FB1                 mov     r8, rsp
.text:0000000000001FB4                 mov     rcx, r14
.text:0000000000001FB7                 mov     rdx, r13
.text:0000000000001FBA                 mov     rsi, r12
.text:0000000000001FBD                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000001FC2                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000001FC7                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:0000000000001FCE                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000001FD6                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000001FDB                 call    version_etc_va
.text:0000000000001FE0                 xor     edi, edi        ; status
.text:0000000000001FE2                 call    _exit
.text:0000000000001FE2 ; ---------------------------------------------------------------------------
.text:0000000000001FE7                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000001FF0                 mov     edi, cs:exit_failure
.text:0000000000001FF6                 call    rbp
.text:0000000000001FF8
.text:0000000000001FF8 loc_1FF8:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000001FF8                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000001FF8                 mov     rax, [rsp+0F8h+var_E0]
.text:0000000000001FFD                 xor     rax, fs:28h
.text:0000000000002006                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:000000000000200C                 jnz     short loc_2026
.text:000000000000200E                 add     rsp, 0D0h
.text:0000000000002015                 pop     rbx
.text:0000000000002016                 pop     rbp
.text:0000000000002017                 pop     r12
.text:0000000000002019                 pop     r13
.text:000000000000201B                 pop     r14
.text:000000000000201D                 retn
.text:000000000000201D ; ---------------------------------------------------------------------------
.text:000000000000201E                 align 20h
.text:0000000000002020
.text:0000000000002020 loc_2020:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000002020                 xor     edi, edi
.text:0000000000002022                 call    rbp
.text:0000000000002024                 jmp     short loc_1FF8
.text:0000000000002026 ; ---------------------------------------------------------------------------
.text:0000000000002026
.text:0000000000002026 loc_2026:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000002026                 call    ___stack_chk_fail
.text:0000000000002026 ; } // starts at 1EF0
.text:0000000000002026 parse_gnu_standard_options_only endp
.text:0000000000002026
.text:0000000000002026 ; ---------------------------------------------------------------------------
.text:000000000000202B                 align 10h
.text:0000000000002030
.text:0000000000002030 ; =============== S U B R O U T I N E =======================================
.text:0000000000002030
.text:0000000000002030
.text:0000000000002030                 public set_program_name
.text:0000000000002030 set_program_name proc near              ; CODE XREF: main+26↑p
.text:0000000000002030 ; __unwind {
.text:0000000000002030                 test    rdi, rdi
.text:0000000000002033                 push    rbx
.text:0000000000002034                 jz      short loc_20AD
.text:0000000000002036                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000203B                 mov     rbx, rdi
.text:000000000000203E                 call    _strrchr
.text:0000000000002043                 test    rax, rax
.text:0000000000002046                 jz      short loc_209D
.text:0000000000002048                 lea     r8, [rax+1]
.text:000000000000204C                 mov     rdx, r8
.text:000000000000204F                 sub     rdx, rbx
.text:0000000000002052                 cmp     rdx, 6
.text:0000000000002056                 jle     short loc_209D
.text:0000000000002058                 lea     rsi, [rax-6]
.text:000000000000205C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002063                 mov     ecx, 7
.text:0000000000002068                 repe cmpsb
.text:000000000000206A                 setnbe  dl
.text:000000000000206D                 sbb     dl, 0
.text:0000000000002070                 test    dl, dl
.text:0000000000002072                 jnz     short loc_209D
.text:0000000000002074                 lea     rdi, aLt        ; "lt-"
.text:000000000000207B                 mov     ecx, 3
.text:0000000000002080                 mov     rsi, r8
.text:0000000000002083                 mov     rbx, r8
.text:0000000000002086                 repe cmpsb
.text:0000000000002088                 setnbe  dl
.text:000000000000208B                 sbb     dl, 0
.text:000000000000208E                 test    dl, dl
.text:0000000000002090                 jnz     short loc_209D
.text:0000000000002092                 lea     rbx, [rax+4]
.text:0000000000002096                 mov     cs:__bss_start, rbx
.text:000000000000209D
.text:000000000000209D loc_209D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000209D                                         ; set_program_name+26↑j ...
.text:000000000000209D                 mov     cs:program_name, rbx
.text:00000000000020A4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000020AB                 pop     rbx
.text:00000000000020AC                 retn
.text:00000000000020AD ; ---------------------------------------------------------------------------
.text:00000000000020AD
.text:00000000000020AD loc_20AD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000020AD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000020B4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000020BB                 mov     edx, 37h ; '7'  ; n
.text:00000000000020C0                 mov     esi, 1          ; size
.text:00000000000020C5                 call    _fwrite
.text:00000000000020CA                 call    _abort
.text:00000000000020CA ; } // starts at 2030
.text:00000000000020CA set_program_name endp
.text:00000000000020CA
.text:00000000000020CA ; ---------------------------------------------------------------------------
.text:00000000000020CF                 align 10h
.text:00000000000020D0
.text:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020D0
.text:00000000000020D0 ; Attributes: info_from_lumina
.text:00000000000020D0
.text:00000000000020D0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000020D0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000020D0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000020D0 ; __unwind {
.text:00000000000020D0                 push    rbp
.text:00000000000020D1                 push    rbx
.text:00000000000020D2                 mov     rbp, rdi
.text:00000000000020D5                 mov     ebx, esi
.text:00000000000020D7                 sub     rsp, 8
.text:00000000000020DB                 call    locale_charset
.text:00000000000020E0                 movzx   edx, byte ptr [rax]
.text:00000000000020E3                 and     edx, 0FFFFFFDFh
.text:00000000000020E6                 cmp     dl, 55h ; 'U'
.text:00000000000020E9                 jz      short loc_2160
.text:00000000000020EB                 cmp     dl, 47h ; 'G'
.text:00000000000020EE                 jz      short loc_2110
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000020F0                                         ; gettext_quote+50↓j ...
.text:00000000000020F0                 lea     rax, unk_50FB
.text:00000000000020F7                 lea     rdx, asc_50FD   ; "'"
.text:00000000000020FE                 cmp     ebx, 9
.text:0000000000002101                 cmovnz  rax, rdx
.text:0000000000002105                 add     rsp, 8
.text:0000000000002109                 pop     rbx
.text:000000000000210A                 pop     rbp
.text:000000000000210B                 retn
.text:000000000000210B ; ---------------------------------------------------------------------------
.text:000000000000210C                 align 10h
.text:0000000000002110
.text:0000000000002110 loc_2110:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002110                 movzx   edx, byte ptr [rax+1]
.text:0000000000002114                 and     edx, 0FFFFFFDFh
.text:0000000000002117                 cmp     dl, 42h ; 'B'
.text:000000000000211A                 jnz     short loc_20F0
.text:000000000000211C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002120                 jnz     short loc_20F0
.text:0000000000002122                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002126                 jnz     short loc_20F0
.text:0000000000002128                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000212C                 jnz     short loc_20F0
.text:000000000000212E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002132                 jnz     short loc_20F0
.text:0000000000002134                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002138                 jnz     short loc_20F0
.text:000000000000213A                 cmp     byte ptr [rax+7], 0
.text:000000000000213E                 jnz     short loc_20F0
.text:0000000000002140                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002144                 lea     rax, unk_50F4
.text:000000000000214B                 lea     rdx, unk_50F8
.text:0000000000002152                 cmovnz  rax, rdx
.text:0000000000002156                 add     rsp, 8
.text:000000000000215A                 pop     rbx
.text:000000000000215B                 pop     rbp
.text:000000000000215C                 retn
.text:000000000000215C ; ---------------------------------------------------------------------------
.text:000000000000215D                 align 20h
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002160                 movzx   edx, byte ptr [rax+1]
.text:0000000000002164                 and     edx, 0FFFFFFDFh
.text:0000000000002167                 cmp     dl, 54h ; 'T'
.text:000000000000216A                 jnz     short loc_20F0
.text:000000000000216C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002170                 and     edx, 0FFFFFFDFh
.text:0000000000002173                 cmp     dl, 46h ; 'F'
.text:0000000000002176                 jnz     loc_20F0
.text:000000000000217C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002180                 jnz     loc_20F0
.text:0000000000002186                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000218A                 jnz     loc_20F0
.text:0000000000002190                 cmp     byte ptr [rax+5], 0
.text:0000000000002194                 jnz     loc_20F0
.text:000000000000219A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000219E                 lea     rax, unk_50EC
.text:00000000000021A5                 lea     rdx, unk_50F0
.text:00000000000021AC                 cmovnz  rax, rdx
.text:00000000000021B0                 add     rsp, 8
.text:00000000000021B4                 pop     rbx
.text:00000000000021B5                 pop     rbp
.text:00000000000021B6                 retn
.text:00000000000021B6 ; } // starts at 20D0
.text:00000000000021B6 gettext_quote   endp
.text:00000000000021B6
.text:00000000000021B6 ; ---------------------------------------------------------------------------
.text:00000000000021B7                 align 20h
.text:00000000000021C0
.text:00000000000021C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021C0
.text:00000000000021C0 ; Attributes: info_from_lumina
.text:00000000000021C0
.text:00000000000021C0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000021C0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000021C0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000021C0
.text:00000000000021C0 var_E0          = dword ptr -0E0h
.text:00000000000021C0 var_DB          = byte ptr -0DBh
.text:00000000000021C0 var_DA          = byte ptr -0DAh
.text:00000000000021C0 var_D9          = byte ptr -0D9h
.text:00000000000021C0 s               = qword ptr -0D8h
.text:00000000000021C0 n               = qword ptr -0D0h
.text:00000000000021C0 var_C8          = qword ptr -0C8h
.text:00000000000021C0 ps              = qword ptr -0C0h
.text:00000000000021C0 var_B8          = qword ptr -0B8h
.text:00000000000021C0 var_B0          = qword ptr -0B0h
.text:00000000000021C0 var_A8          = qword ptr -0A8h
.text:00000000000021C0 s2              = qword ptr -0A0h
.text:00000000000021C0 var_98          = qword ptr -98h
.text:00000000000021C0 var_90          = qword ptr -90h
.text:00000000000021C0 var_88          = qword ptr -88h
.text:00000000000021C0 var_80          = qword ptr -80h
.text:00000000000021C0 var_78          = qword ptr -78h
.text:00000000000021C0 var_70          = dword ptr -70h
.text:00000000000021C0 var_6C          = byte ptr -6Ch
.text:00000000000021C0 var_6B          = byte ptr -6Bh
.text:00000000000021C0 var_6A          = byte ptr -6Ah
.text:00000000000021C0 var_69          = byte ptr -69h
.text:00000000000021C0 var_68          = qword ptr -68h
.text:00000000000021C0 var_60          = qword ptr -60h
.text:00000000000021C0 wc              = dword ptr -4Ch
.text:00000000000021C0 var_48          = qword ptr -48h
.text:00000000000021C0 var_40          = qword ptr -40h
.text:00000000000021C0 arg_0           = qword ptr  8
.text:00000000000021C0 arg_8           = qword ptr  10h
.text:00000000000021C0 arg_10          = qword ptr  18h
.text:00000000000021C0
.text:00000000000021C0 ; __unwind {
.text:00000000000021C0                 push    r15
.text:00000000000021C2                 push    r14
.text:00000000000021C4                 mov     r15d, r8d
.text:00000000000021C7                 push    r13
.text:00000000000021C9                 push    r12
.text:00000000000021CB                 mov     r14, rdi
.text:00000000000021CE                 push    rbp
.text:00000000000021CF                 push    rbx
.text:00000000000021D0                 mov     ebx, r9d
.text:00000000000021D3                 mov     r13, rsi
.text:00000000000021D6                 mov     rbp, rcx
.text:00000000000021D9                 and     ebx, 2
.text:00000000000021DC                 sub     rsp, 0B8h
.text:00000000000021E3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000021EB                 mov     [rsp+0E8h+s], rdx
.text:00000000000021F0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000021F5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000021FA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000021FF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002207                 mov     [rsp+0E8h+var_80], rax
.text:000000000000220C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002214                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002219                 mov     rax, fs:28h
.text:0000000000002222                 mov     [rsp+0E8h+var_40], rax
.text:000000000000222A                 xor     eax, eax
.text:000000000000222C                 call    ___ctype_get_mb_cur_max
.text:0000000000002231                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002235                 mov     [rsp+0E8h+var_90], rax
.text:000000000000223A                 ja      def_2251        ; jumptable 00000000000121F1 default case
.text:0000000000002240                 lea     rcx, jpt_2251
.text:0000000000002247                 mov     edx, r15d
.text:000000000000224A                 movsxd  rax, ds:(jpt_2251 - 5160h)[rcx+rdx*4]
.text:000000000000224E                 add     rax, rcx
.text:0000000000002251                 jmp     rax             ; switch jump
.text:0000000000002253 ; ---------------------------------------------------------------------------
.text:0000000000002253
.text:0000000000002253 loc_2253:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002253                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002253                                         ; DATA XREF: ...
.text:0000000000002253                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002258                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000225D                 xor     r12d, r12d
.text:0000000000002260                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002269                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000226E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002273
.text:0000000000002273 loc_2273:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002273                 lea     rax, asc_50FD   ; "'"
.text:000000000000227A                 mov     [rsp+0E8h+n], 1
.text:0000000000002283                 xor     r15d, r15d
.text:0000000000002286                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000228E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002293
.text:0000000000002293 loc_2293:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002293                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002293                 xor     r11d, r11d
.text:0000000000002296                 mov     rax, rbp
.text:0000000000002299                 mov     r8d, r12d
.text:000000000000229C                 mov     rbp, r11
.text:000000000000229F                 mov     r11, rax
.text:00000000000022A2                 nop     word ptr [rax+rax+00h]
.text:00000000000022A8
.text:00000000000022A8 loc_22A8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000022A8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000022A8                 cmp     r11, rbp
.text:00000000000022AB                 setnz   r12b
.text:00000000000022AF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000022B3                 jnz     short loc_22C2
.text:00000000000022B5                 mov     rax, [rsp+0E8h+s]
.text:00000000000022BA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000022BE                 setnz   r12b
.text:00000000000022C2
.text:00000000000022C2 loc_22C2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000022C2                 test    r12b, r12b
.text:00000000000022C5                 jz      loc_2920
.text:00000000000022CB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000022D0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000022D5                 lea     r9, [rdi+rbp]
.text:00000000000022D9                 setnz   al
.text:00000000000022DC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000022E0                 mov     r10d, eax
.text:00000000000022E3                 jz      loc_2390
.text:00000000000022E9                 mov     rax, [rsp+0E8h+n]
.text:00000000000022EE                 test    rax, rax
.text:00000000000022F1                 jz      loc_2720
.text:00000000000022F7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000022FB                 lea     rbx, [rbp+rax+0]
.text:0000000000002300                 jnz     short loc_2330
.text:0000000000002302                 cmp     rax, 1
.text:0000000000002306                 jbe     short loc_2330
.text:0000000000002308                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000230D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002312                 mov     [rsp+0E8h+ps], r9
.text:0000000000002317                 call    _strlen
.text:000000000000231C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002322                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002328                 mov     r11, rax
.text:000000000000232B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002330                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002330                 cmp     rbx, r11
.text:0000000000002333                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002338                 ja      loc_28F0
.text:000000000000233E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002343                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002348                 mov     rdi, r9         ; s1
.text:000000000000234B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002350                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002355                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000235A                 call    _memcmp
.text:000000000000235F                 test    eax, eax
.text:0000000000002361                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002366                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000236C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002371                 jnz     loc_28F0
.text:0000000000002377                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000237C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002382                 jnz     loc_3305
.text:0000000000002388                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002390                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002390                 movzx   ebx, byte ptr [r9]
.text:0000000000002394                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002397                 ja      def_23AE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000239D                 lea     rcx, jpt_23AE
.text:00000000000023A4                 movzx   edx, bl
.text:00000000000023A7                 movsxd  rax, ds:(jpt_23AE - 518Ch)[rcx+rdx*4]
.text:00000000000023AB                 add     rax, rcx
.text:00000000000023AE                 jmp     rax             ; switch jump
.text:00000000000023B0 ; ---------------------------------------------------------------------------
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000023B0                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:00000000000023B0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000023B3
.text:00000000000023B3 loc_23B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023B3                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:00000000000023B3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000023B7                 setnz   al
.text:00000000000023BA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000023BE                 jnz     short loc_23CC
.text:00000000000023C0                 mov     rax, [rsp+0E8h+s]
.text:00000000000023C5                 cmp     byte ptr [rax+1], 0
.text:00000000000023C9                 setnz   al
.text:00000000000023CC
.text:00000000000023CC loc_23CC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000023CC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000023D1                 setz    dl
.text:00000000000023D4                 test    al, al
.text:00000000000023D6                 jz      loc_2628
.text:00000000000023DC
.text:00000000000023DC loc_23DC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000023DC                 xor     r12d, r12d
.text:00000000000023DF                 xor     eax, eax
.text:00000000000023E1                 nop     dword ptr [rax+00000000h]
.text:00000000000023E8
.text:00000000000023E8 loc_23E8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000023E8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000023E8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000023ED                 jnz     loc_2502
.text:00000000000023F3                 test    dl, dl
.text:00000000000023F5                 jnz     loc_2502
.text:00000000000023FB
.text:00000000000023FB loc_23FB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000023FB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002400                 test    rsi, rsi
.text:0000000000002403                 jz      short loc_2419
.text:0000000000002405                 mov     edx, ebx
.text:0000000000002407                 shr     dl, 5
.text:000000000000240A                 movzx   edx, dl
.text:000000000000240D                 mov     edx, [rsi+rdx*4]
.text:0000000000002410                 bt      edx, ebx
.text:0000000000002413                 jb      loc_2563
.text:0000000000002419
.text:0000000000002419 loc_2419:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002419                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002419                 test    r10b, r10b
.text:000000000000241C                 jnz     loc_2563
.text:0000000000002422                 xor     eax, 1
.text:0000000000002425                 add     rbp, 1
.text:0000000000002429                 and     eax, r8d
.text:000000000000242C
.text:000000000000242C loc_242C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000242C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000242C                 test    al, al
.text:000000000000242E                 jz      short loc_2450
.text:0000000000002430                 cmp     r13, r15
.text:0000000000002433                 jbe     short loc_243A
.text:0000000000002435                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000243A
.text:000000000000243A loc_243A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000243A                 lea     rax, [r15+1]
.text:000000000000243E                 cmp     r13, rax
.text:0000000000002441                 jbe     short loc_2449
.text:0000000000002443                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002449
.text:0000000000002449 loc_2449:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002449                 add     r15, 2
.text:000000000000244D                 xor     r8d, r8d
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002450                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002450                 cmp     r15, r13
.text:0000000000002453                 jnb     short loc_2459
.text:0000000000002455                 mov     [r14+r15], bl
.text:0000000000002459
.text:0000000000002459 loc_2459:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002459                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000245E                 add     r15, 1
.text:0000000000002462                 mov     eax, 0
.text:0000000000002467                 test    r12b, r12b
.text:000000000000246A                 cmovz   edi, eax
.text:000000000000246D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002472                 jmp     loc_22A8
.text:0000000000002472 ; ---------------------------------------------------------------------------
.text:0000000000002477                 align 20h
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002480                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:0000000000002480                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002483
.text:0000000000002483 loc_2483:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002483                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002483                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002487                 cmp     eax, 2
.text:000000000000248A                 jz      loc_2A48
.text:0000000000002490                 cmp     eax, 5
.text:0000000000002493                 jz      loc_2A08
.text:0000000000002499                 cmp     eax, 2
.text:000000000000249C                 mov     ebx, 3Fh ; '?'
.text:00000000000024A1                 setz    dl
.text:00000000000024A4                 xor     r12d, r12d
.text:00000000000024A7                 xor     eax, eax
.text:00000000000024A9                 jmp     loc_23E8
.text:00000000000024A9 ; ---------------------------------------------------------------------------
.text:00000000000024AE                 align 10h
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000024B0                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:00000000000024B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000024B3
.text:00000000000024B3 loc_24B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024B3                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:00000000000024B3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000024B8                 jz      loc_29C0
.text:00000000000024BE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000024C3                 xor     edx, edx
.text:00000000000024C5                 xor     eax, eax
.text:00000000000024C7                 mov     ebx, 27h ; '''
.text:00000000000024CC                 jmp     loc_23E8
.text:00000000000024CC ; ---------------------------------------------------------------------------
.text:00000000000024D1                 align 8
.text:00000000000024D8
.text:00000000000024D8 loc_24D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024D8                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:00000000000024D8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000024DD                 mov     ebx, 74h ; 't'
.text:00000000000024E2
.text:00000000000024E2 loc_24E2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000024E2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000024E2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024E7                 setz    al
.text:00000000000024EA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000024EE                 jnz     loc_263E
.text:00000000000024F4
.text:00000000000024F4 loc_24F4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000024F4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000024F4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000024F9                 jnz     short loc_2560
.text:00000000000024FB
.text:00000000000024FB loc_24FB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000024FB                 mov     ebx, edx
.text:00000000000024FD                 xor     r12d, r12d
.text:0000000000002500                 xor     eax, eax
.text:0000000000002502
.text:0000000000002502 loc_2502:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002502                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002502                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002507                 jnz     loc_23FB
.text:000000000000250D                 jmp     loc_2419
.text:000000000000250D ; ---------------------------------------------------------------------------
.text:0000000000002512                 align 8
.text:0000000000002518
.text:0000000000002518 loc_2518:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002518                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002518                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000251D                 mov     ebx, 62h ; 'b'
.text:0000000000002522                 jmp     short loc_24F4
.text:0000000000002522 ; ---------------------------------------------------------------------------
.text:0000000000002524                 align 8
.text:0000000000002528
.text:0000000000002528 loc_2528:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002528                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002528                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000252D                 jz      loc_2900
.text:0000000000002533                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002538                 jz      loc_2750
.text:000000000000253E
.text:000000000000253E loc_253E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000253E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002543                 jz      loc_2750
.text:0000000000002549                 cmp     [rsp+0E8h+n], 0
.text:000000000000254F                 jnz     loc_290B
.text:0000000000002555                 mov     ebx, 5Ch ; '\'
.text:000000000000255A                 nop     word ptr [rax+rax+00h]
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002560                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002560                 xor     r12d, r12d
.text:0000000000002563
.text:0000000000002563 loc_2563:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002563                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002563                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002568                 setz    dl
.text:000000000000256B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002570                 mov     eax, edx
.text:0000000000002572                 jnz     loc_2DC8
.text:0000000000002578                 mov     eax, r8d
.text:000000000000257B                 xor     eax, 1
.text:000000000000257E                 and     al, dl
.text:0000000000002580                 jz      short loc_25B1
.text:0000000000002582                 cmp     r13, r15
.text:0000000000002585                 jbe     short loc_258C
.text:0000000000002587                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000258C
.text:000000000000258C loc_258C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000258C                 lea     rdx, [r15+1]
.text:0000000000002590                 cmp     r13, rdx
.text:0000000000002593                 jbe     short loc_259B
.text:0000000000002595                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000259B
.text:000000000000259B loc_259B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000259B                 lea     rdx, [r15+2]
.text:000000000000259F                 cmp     r13, rdx
.text:00000000000025A2                 jbe     short loc_25AA
.text:00000000000025A4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000025AA
.text:00000000000025AA loc_25AA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000025AA                 add     r15, 3
.text:00000000000025AE                 mov     r8d, eax
.text:00000000000025B1
.text:00000000000025B1 loc_25B1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000025B1                 cmp     r13, r15
.text:00000000000025B4                 jbe     short loc_25BB
.text:00000000000025B6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000025BB
.text:00000000000025BB loc_25BB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000025BB                 add     r15, 1
.text:00000000000025BF                 add     rbp, 1
.text:00000000000025C3                 jmp     loc_2450
.text:00000000000025C3 ; ---------------------------------------------------------------------------
.text:00000000000025C8                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025D0                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:00000000000025D0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000025D5                 jnz     loc_27A3
.text:00000000000025DB                 xor     edx, edx
.text:00000000000025DD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000025E2                 jz      loc_24FB
.text:00000000000025E8                 add     rbp, 1
.text:00000000000025EC                 jmp     loc_22A8
.text:00000000000025EC ; ---------------------------------------------------------------------------
.text:00000000000025F1                 align 8
.text:00000000000025F8
.text:00000000000025F8 loc_25F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025F8                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:00000000000025F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000025FD                 setz    dl
.text:0000000000002600                 xor     eax, eax
.text:0000000000002602                 jmp     loc_23E8
.text:0000000000002602 ; ---------------------------------------------------------------------------
.text:0000000000002607                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002610                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002610                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002615                 mov     ebx, 61h ; 'a'
.text:000000000000261A                 jmp     loc_24F4
.text:000000000000261A ; ---------------------------------------------------------------------------
.text:000000000000261F                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002620                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002620                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002625                 setz    dl
.text:0000000000002628
.text:0000000000002628 loc_2628:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002628                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002628                 test    rbp, rbp
.text:000000000000262B                 jnz     loc_23DC
.text:0000000000002631
.text:0000000000002631 loc_2631:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002631                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002631                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002636                 and     al, dl
.text:0000000000002638                 jz      loc_23E8
.text:000000000000263E
.text:000000000000263E loc_263E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000263E                 mov     rbp, r11
.text:0000000000002641                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002649                 jmp     loc_2D49
.text:0000000000002649 ; ---------------------------------------------------------------------------
.text:000000000000264E                 align 10h
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002650                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002650                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002655                 setz    dl
.text:0000000000002658                 xor     r12d, r12d
.text:000000000000265B                 jmp     short loc_2631
.text:000000000000265B ; ---------------------------------------------------------------------------
.text:000000000000265D                 align 20h
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002660                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002660                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002665                 mov     ebx, 20h ; ' '
.text:000000000000266A                 setz    dl
.text:000000000000266D                 jmp     short loc_2631
.text:000000000000266D ; ---------------------------------------------------------------------------
.text:000000000000266F                 align 10h
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002670                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002670                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002675                 mov     ebx, 72h ; 'r'
.text:000000000000267A                 jmp     loc_24E2
.text:000000000000267A ; ---------------------------------------------------------------------------
.text:000000000000267F                 align 20h
.text:0000000000002680
.text:0000000000002680 loc_2680:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002680                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002680                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002685                 mov     ebx, 66h ; 'f'
.text:000000000000268A                 jmp     loc_24F4
.text:000000000000268A ; ---------------------------------------------------------------------------
.text:000000000000268F                 align 10h
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002690                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:0000000000002690                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002695                 mov     ebx, 76h ; 'v'
.text:000000000000269A                 jmp     loc_24F4
.text:000000000000269A ; ---------------------------------------------------------------------------
.text:000000000000269F                 align 20h
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000026A0                                         ; DATA XREF: .rodata:jpt_23AE↓o
.text:00000000000026A0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000026A5                 mov     ebx, 6Eh ; 'n'
.text:00000000000026AA                 jmp     loc_24E2
.text:00000000000026AA ; ---------------------------------------------------------------------------
.text:00000000000026AF                 align 10h
.text:00000000000026B0
.text:00000000000026B0 def_273A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000026B0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000026B0                                         ; DATA XREF: ...
.text:00000000000026B0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000026B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000026B8
.text:00000000000026B8 def_23AE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000026B8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000026B8                                         ; DATA XREF: ...
.text:00000000000026B8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000026BE                 jnz     loc_2A68
.text:00000000000026C4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000026C9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000026CE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000026D3                 call    ___ctype_b_loc
.text:00000000000026D8                 mov     rcx, [rax]
.text:00000000000026DB                 movzx   edx, bl
.text:00000000000026DE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000026E4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000026EA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000026EF                 mov     edi, 1
.text:00000000000026F4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000026F8                 and     ax, 4000h
.text:00000000000026FC                 setnz   r12b
.text:0000000000002700                 setz    al
.text:0000000000002703                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002707
.text:0000000000002707 loc_2707:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002707                 test    al, al
.text:0000000000002709                 jnz     loc_30A1
.text:000000000000270F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002714                 setz    dl
.text:0000000000002717                 jmp     loc_23E8
.text:0000000000002717 ; ---------------------------------------------------------------------------
.text:000000000000271C                 align 20h
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002720                 movzx   ebx, byte ptr [r9]
.text:0000000000002724                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002727                 ja      short def_273A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002729                 lea     rcx, jpt_273A
.text:0000000000002730                 movzx   edx, bl
.text:0000000000002733                 movsxd  rax, ds:(jpt_273A - 5388h)[rcx+rdx*4]
.text:0000000000002737                 add     rax, rcx
.text:000000000000273A                 jmp     rax             ; switch jump
.text:000000000000273A ; ---------------------------------------------------------------------------
.text:000000000000273C                 align 20h
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002740                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:0000000000002740                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002743                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002748                 jnz     loc_253E
.text:000000000000274E                 xchg    ax, ax
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002750                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002750                 mov     edx, 5Ch ; '\'
.text:0000000000002755                 mov     ebx, 5Ch ; '\'
.text:000000000000275A                 jmp     loc_24F4
.text:000000000000275A ; ---------------------------------------------------------------------------
.text:000000000000275F                 align 20h
.text:0000000000002760
.text:0000000000002760 loc_2760:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002760                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:0000000000002760                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002765                 xor     r10d, r10d
.text:0000000000002768                 mov     ebx, 66h ; 'f'
.text:000000000000276D                 jmp     loc_24F4
.text:000000000000276D ; ---------------------------------------------------------------------------
.text:0000000000002772                 align 8
.text:0000000000002778
.text:0000000000002778 loc_2778:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002778                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:0000000000002778                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000277D                 xor     r10d, r10d
.text:0000000000002780                 mov     ebx, 6Eh ; 'n'
.text:0000000000002785                 jmp     loc_24E2
.text:0000000000002785 ; ---------------------------------------------------------------------------
.text:000000000000278A                 align 10h
.text:0000000000002790
.text:0000000000002790 loc_2790:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002790                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:0000000000002790                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002795                 jmp     loc_2560
.text:0000000000002795 ; ---------------------------------------------------------------------------
.text:000000000000279A                 align 20h
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027A0                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:00000000000027A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000027A3
.text:00000000000027A3 loc_27A3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000027A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000027A8                 setz    dl
.text:00000000000027AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000027B0                 jnz     loc_334A
.text:00000000000027B6                 mov     eax, r8d
.text:00000000000027B9                 mov     rcx, r15
.text:00000000000027BC                 xor     eax, 1
.text:00000000000027BF                 and     al, dl
.text:00000000000027C1                 jz      short loc_27F0
.text:00000000000027C3                 cmp     r13, r15
.text:00000000000027C6                 jbe     short loc_27CD
.text:00000000000027C8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000027CD
.text:00000000000027CD loc_27CD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000027CD                 lea     rcx, [r15+1]
.text:00000000000027D1                 cmp     r13, rcx
.text:00000000000027D4                 jbe     short loc_27DC
.text:00000000000027D6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000027DC
.text:00000000000027DC loc_27DC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000027DC                 lea     rcx, [r15+2]
.text:00000000000027E0                 cmp     r13, rcx
.text:00000000000027E3                 ja      loc_2E19
.text:00000000000027E9
.text:00000000000027E9 loc_27E9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000027E9                 lea     rcx, [r15+3]
.text:00000000000027ED                 mov     r8d, eax
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000027F0                 cmp     r13, rcx
.text:00000000000027F3                 jbe     short loc_27FA
.text:00000000000027F5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000027FA
.text:00000000000027FA loc_27FA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000027FA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000027FF                 lea     r15, [rcx+1]
.text:0000000000002803                 jz      loc_2E09
.text:0000000000002809                 lea     rax, [rbp+1]
.text:000000000000280D                 cmp     rax, r11
.text:0000000000002810                 jnb     short loc_282B
.text:0000000000002812                 mov     rax, [rsp+0E8h+s]
.text:0000000000002817                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000281C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002820                 sub     eax, 30h ; '0'
.text:0000000000002823                 cmp     al, 9
.text:0000000000002825                 jbe     loc_3059
.text:000000000000282B
.text:000000000000282B loc_282B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000282B                 mov     eax, r12d
.text:000000000000282E                 mov     ebx, 30h ; '0'
.text:0000000000002833                 xor     r12d, r12d
.text:0000000000002836                 jmp     loc_23E8
.text:0000000000002836 ; ---------------------------------------------------------------------------
.text:000000000000283B                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002840                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:0000000000002840                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002845                 mov     r12d, r10d
.text:0000000000002848                 setz    dl
.text:000000000000284B                 xor     r10d, r10d
.text:000000000000284E                 xor     eax, eax
.text:0000000000002850                 jmp     loc_23E8
.text:0000000000002850 ; ---------------------------------------------------------------------------
.text:0000000000002855                 align 8
.text:0000000000002858
.text:0000000000002858 loc_2858:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002858                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:0000000000002858                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000285D                 setz    dl
.text:0000000000002860                 xor     r10d, r10d
.text:0000000000002863                 jmp     loc_2628
.text:0000000000002863 ; ---------------------------------------------------------------------------
.text:0000000000002868                 align 10h
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002870                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:0000000000002870                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002875                 setz    dl
.text:0000000000002878                 xor     r10d, r10d
.text:000000000000287B                 xor     r12d, r12d
.text:000000000000287E                 jmp     loc_2631
.text:000000000000287E ; ---------------------------------------------------------------------------
.text:0000000000002883                 align 8
.text:0000000000002888
.text:0000000000002888 loc_2888:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002888                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:0000000000002888                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000288D                 mov     r12d, r10d
.text:0000000000002890                 mov     ebx, 20h ; ' '
.text:0000000000002895                 setz    dl
.text:0000000000002898                 xor     r10d, r10d
.text:000000000000289B                 jmp     loc_2631
.text:00000000000028A0 ; ---------------------------------------------------------------------------
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028A0                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:00000000000028A0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000028A5                 xor     r10d, r10d
.text:00000000000028A8                 mov     ebx, 72h ; 'r'
.text:00000000000028AD                 jmp     loc_24E2
.text:00000000000028AD ; ---------------------------------------------------------------------------
.text:00000000000028B2                 align 8
.text:00000000000028B8
.text:00000000000028B8 loc_28B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028B8                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:00000000000028B8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000028BD                 jmp     loc_2560
.text:00000000000028BD ; ---------------------------------------------------------------------------
.text:00000000000028C2                 align 8
.text:00000000000028C8
.text:00000000000028C8 loc_28C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028C8                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:00000000000028C8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000028CD                 xor     r10d, r10d
.text:00000000000028D0                 mov     ebx, 74h ; 't'
.text:00000000000028D5                 jmp     loc_24E2
.text:00000000000028D5 ; ---------------------------------------------------------------------------
.text:00000000000028DA                 align 20h
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028E0                                         ; DATA XREF: .rodata:jpt_273A↓o
.text:00000000000028E0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000028E5                 jmp     loc_2560
.text:00000000000028E5 ; ---------------------------------------------------------------------------
.text:00000000000028EA                 align 10h
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000028F0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000028F0                 xor     r10d, r10d
.text:00000000000028F3                 jmp     loc_2390
.text:00000000000028F3 ; ---------------------------------------------------------------------------
.text:00000000000028F8                 align 20h
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002900                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002905                 jnz     loc_3270
.text:000000000000290B
.text:000000000000290B loc_290B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000290B                 add     rbp, 1
.text:000000000000290F                 mov     eax, r8d
.text:0000000000002912                 xor     r12d, r12d
.text:0000000000002915                 mov     ebx, 5Ch ; '\'
.text:000000000000291A                 jmp     loc_242C
.text:000000000000291A ; ---------------------------------------------------------------------------
.text:000000000000291F                 align 20h
.text:0000000000002920
.text:0000000000002920 loc_2920:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002920                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002925                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000292A                 mov     r12d, r8d
.text:000000000000292D                 mov     rbp, r11
.text:0000000000002930                 setz    dl
.text:0000000000002933                 mov     eax, ebx
.text:0000000000002935                 test    r15, r15
.text:0000000000002938                 setz    cl
.text:000000000000293B                 and     eax, edx
.text:000000000000293D                 and     al, cl
.text:000000000000293F                 jnz     loc_33A6
.text:0000000000002945                 mov     eax, ebx
.text:0000000000002947                 xor     eax, 1
.text:000000000000294A                 and     dl, al
.text:000000000000294C                 jz      loc_32BC
.text:0000000000002952                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002957                 jz      loc_32BA
.text:000000000000295D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002962                 jnz     loc_335D
.text:0000000000002968                 test    r13, r13
.text:000000000000296B                 setz    al
.text:000000000000296E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002974                 setnz   dl
.text:0000000000002977                 and     al, dl
.text:0000000000002979                 jz      loc_339C
.text:000000000000297F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002984
.text:0000000000002984 loc_2984:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002984                 lea     rbx, asc_50FD   ; "'"
.text:000000000000298B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000298F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002997                 mov     r15d, 1
.text:000000000000299D                 mov     [rsp+0E8h+n], 1
.text:00000000000029A6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000029AB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000029B0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000029B4                 jmp     loc_2293
.text:00000000000029B4 ; ---------------------------------------------------------------------------
.text:00000000000029B9                 align 20h
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000029C0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000029C5                 jnz     loc_3270
.text:00000000000029CB                 test    r13, r13
.text:00000000000029CE                 jz      loc_2DD0
.text:00000000000029D4                 xor     edx, edx
.text:00000000000029D6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000029DC                 jnz     loc_2DD0
.text:00000000000029E2
.text:00000000000029E2 loc_29E2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000029E2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000029E2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000029E7                 add     r15, 3
.text:00000000000029EB                 xor     eax, eax
.text:00000000000029ED                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000029F2                 xor     r8d, r8d
.text:00000000000029F5                 mov     r13, rdx
.text:00000000000029F8                 mov     ebx, 27h ; '''
.text:00000000000029FD                 jmp     loc_2419
.text:00000000000029FD ; ---------------------------------------------------------------------------
.text:0000000000002A02                 align 8
.text:0000000000002A08
.text:0000000000002A08 loc_2A08:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002A08                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000002A0D                 jz      short loc_2A30
.text:0000000000002A0F                 lea     rcx, [rbp+2]
.text:0000000000002A13                 cmp     rcx, r11
.text:0000000000002A16                 jnb     short loc_2A30
.text:0000000000002A18                 mov     rax, [rsp+0E8h+s]
.text:0000000000002A1D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002A22                 jz      loc_31B2
.text:0000000000002A28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002A30
.text:0000000000002A30 loc_2A30:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002A30                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002A30                 xor     edx, edx
.text:0000000000002A32                 xor     r12d, r12d
.text:0000000000002A35                 xor     eax, eax
.text:0000000000002A37                 mov     ebx, 3Fh ; '?'
.text:0000000000002A3C                 jmp     loc_23E8
.text:0000000000002A3C ; ---------------------------------------------------------------------------
.text:0000000000002A41                 align 8
.text:0000000000002A48
.text:0000000000002A48 loc_2A48:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002A48                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A4D                 jnz     loc_3270
.text:0000000000002A53                 xor     r12d, r12d
.text:0000000000002A56                 xor     eax, eax
.text:0000000000002A58                 mov     ebx, 3Fh ; '?'
.text:0000000000002A5D                 jmp     loc_2419
.text:0000000000002A5D ; ---------------------------------------------------------------------------
.text:0000000000002A62                 align 8
.text:0000000000002A68
.text:0000000000002A68 loc_2A68:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002A68                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002A70                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A74                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002A80                 mov     [rsp+0E8h+ps], rax
.text:0000000000002A85                 jnz     short loc_2AB4
.text:0000000000002A87                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002A8C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002A91                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002A96                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002A9B                 call    _strlen
.text:0000000000002AA0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002AA6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002AAC                 mov     r11, rax
.text:0000000000002AAF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002AB4
.text:0000000000002AB4 loc_2AB4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002AB4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002ABC                 xor     ecx, ecx
.text:0000000000002ABE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002AC2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002AC7                 mov     rbx, rcx
.text:0000000000002ACA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002AD2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002AD7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002ADC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002AE4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002AE9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002AEE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002AF3
.text:0000000000002AF3 loc_2AF3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002AF3                 mov     rax, [rsp+0E8h+s]
.text:0000000000002AF8                 lea     r14, [rbp+rbx+0]
.text:0000000000002AFD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002B02                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002B07                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002B0C                 lea     r13, [rax+r14]
.text:0000000000002B10                 sub     rdx, r14
.text:0000000000002B13                 mov     rsi, r13
.text:0000000000002B16                 call    rpl_mbrtowc
.text:0000000000002B1B                 test    rax, rax
.text:0000000000002B1E                 mov     r15, rax
.text:0000000000002B21                 jz      short loc_2B71
.text:0000000000002B23                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B27                 jz      loc_3145
.text:0000000000002B2D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002B31                 jz      loc_30D1
.text:0000000000002B37                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B3C                 setz    al
.text:0000000000002B3F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002B43                 jnz     loc_2CE0
.text:0000000000002B49
.text:0000000000002B49 loc_2B49:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002B49                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002B49                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002B50                 call    _iswprint
.text:0000000000002B55                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002B5A                 test    eax, eax
.text:0000000000002B5C                 mov     eax, 0
.text:0000000000002B61                 cmovz   r12d, eax
.text:0000000000002B65                 add     rbx, r15
.text:0000000000002B68                 call    _mbsinit
.text:0000000000002B6D                 test    eax, eax
.text:0000000000002B6F                 jz      short loc_2AF3
.text:0000000000002B71
.text:0000000000002B71 loc_2B71:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002B71                 mov     edx, r12d
.text:0000000000002B74                 mov     rdi, rbx
.text:0000000000002B77                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002B7D                 xor     edx, 1
.text:0000000000002B80                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002B85                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002B8B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002B8F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002B97                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002B9C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002BA1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002BA6
.text:0000000000002BA6 loc_2BA6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002BA6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002BA6                 cmp     rdi, 1
.text:0000000000002BAA                 jbe     loc_31AB
.text:0000000000002BB0
.text:0000000000002BB0 loc_2BB0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002BB0                 mov     rcx, rdi
.text:0000000000002BB3                 xor     esi, esi
.text:0000000000002BB5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002BBB                 add     rcx, rbp
.text:0000000000002BBE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002BC3                 jmp     loc_2C7E
.text:0000000000002BC3 ; ---------------------------------------------------------------------------
.text:0000000000002BC8                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002BD0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002BD5                 setz    al
.text:0000000000002BD8                 test    r9b, r9b
.text:0000000000002BDB                 jnz     loc_3090
.text:0000000000002BE1                 mov     esi, r8d
.text:0000000000002BE4                 xor     esi, 1
.text:0000000000002BE7                 and     al, sil
.text:0000000000002BEA                 jz      short loc_2C1B
.text:0000000000002BEC                 cmp     r13, r15
.text:0000000000002BEF                 jbe     short loc_2BF6
.text:0000000000002BF1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002BF6
.text:0000000000002BF6 loc_2BF6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002BF6                 lea     rsi, [r15+1]
.text:0000000000002BFA                 cmp     r13, rsi
.text:0000000000002BFD                 jbe     short loc_2C05
.text:0000000000002BFF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002C05
.text:0000000000002C05 loc_2C05:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002C05                 lea     rsi, [r15+2]
.text:0000000000002C09                 cmp     r13, rsi
.text:0000000000002C0C                 jbe     short loc_2C14
.text:0000000000002C0E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002C14
.text:0000000000002C14 loc_2C14:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002C14                 add     r15, 3
.text:0000000000002C18                 mov     r8d, eax
.text:0000000000002C1B
.text:0000000000002C1B loc_2C1B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002C1B                 cmp     r13, r15
.text:0000000000002C1E                 jbe     short loc_2C25
.text:0000000000002C20                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002C25
.text:0000000000002C25 loc_2C25:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002C25                 lea     rax, [r15+1]
.text:0000000000002C29                 cmp     r13, rax
.text:0000000000002C2C                 jbe     short loc_2C3B
.text:0000000000002C2E                 mov     eax, ebx
.text:0000000000002C30                 shr     al, 6
.text:0000000000002C33                 add     eax, 30h ; '0'
.text:0000000000002C36                 mov     [r14+r15+1], al
.text:0000000000002C3B
.text:0000000000002C3B loc_2C3B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002C3B                 lea     rax, [r15+2]
.text:0000000000002C3F                 cmp     r13, rax
.text:0000000000002C42                 jbe     short loc_2C54
.text:0000000000002C44                 mov     eax, ebx
.text:0000000000002C46                 shr     al, 3
.text:0000000000002C49                 and     eax, 7
.text:0000000000002C4C                 add     eax, 30h ; '0'
.text:0000000000002C4F                 mov     [r14+r15+2], al
.text:0000000000002C54
.text:0000000000002C54 loc_2C54:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002C54                 and     ebx, 7
.text:0000000000002C57                 add     rbp, 1
.text:0000000000002C5B                 add     r15, 3
.text:0000000000002C5F                 add     ebx, 30h ; '0'
.text:0000000000002C62                 cmp     rbp, rcx
.text:0000000000002C65                 jnb     loc_2450
.text:0000000000002C6B                 mov     esi, edx
.text:0000000000002C6D
.text:0000000000002C6D loc_2C6D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002C6D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002C6D                 cmp     r13, r15
.text:0000000000002C70                 jbe     short loc_2C76
.text:0000000000002C72                 mov     [r14+r15], bl
.text:0000000000002C76
.text:0000000000002C76 loc_2C76:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002C76                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002C7A                 add     r15, 1
.text:0000000000002C7E
.text:0000000000002C7E loc_2C7E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002C7E                 test    dl, dl
.text:0000000000002C80                 jnz     loc_2BD0
.text:0000000000002C86                 mov     eax, esi
.text:0000000000002C88                 xor     eax, 1
.text:0000000000002C8B                 and     eax, r8d
.text:0000000000002C8E                 test    r10b, r10b
.text:0000000000002C91                 jz      short loc_2CA1
.text:0000000000002C93                 cmp     r13, r15
.text:0000000000002C96                 jbe     short loc_2C9D
.text:0000000000002C98                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002C9D
.text:0000000000002C9D loc_2C9D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002C9D                 add     r15, 1
.text:0000000000002CA1
.text:0000000000002CA1 loc_2CA1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002CA1                 add     rbp, 1
.text:0000000000002CA5                 cmp     rbp, rcx
.text:0000000000002CA8                 jnb     loc_242C
.text:0000000000002CAE                 test    al, al
.text:0000000000002CB0                 jz      loc_30AE
.text:0000000000002CB6                 cmp     r13, r15
.text:0000000000002CB9                 jbe     short loc_2CC0
.text:0000000000002CBB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002CC0                 lea     rax, [r15+1]
.text:0000000000002CC4                 cmp     r13, rax
.text:0000000000002CC7                 jbe     short loc_2CCF
.text:0000000000002CC9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002CCF
.text:0000000000002CCF loc_2CCF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002CCF                 add     r15, 2
.text:0000000000002CD3                 xor     r10d, r10d
.text:0000000000002CD6                 xor     r8d, r8d
.text:0000000000002CD9                 jmp     short loc_2C6D
.text:0000000000002CD9 ; ---------------------------------------------------------------------------
.text:0000000000002CDB                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002CE0                 cmp     r15, 1
.text:0000000000002CE4                 jz      loc_2B49
.text:0000000000002CEA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002CEF                 lea     rcx, [rdi+r15]
.text:0000000000002CF3                 lea     rdx, [rdi+r14+1]
.text:0000000000002CF8                 lea     r8, [rcx+r14]
.text:0000000000002CFC                 jmp     short loc_2D0D
.text:0000000000002CFC ; ---------------------------------------------------------------------------
.text:0000000000002CFE                 align 20h
.text:0000000000002D00
.text:0000000000002D00 loc_2D00:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002D00                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002D00                 add     rdx, 1
.text:0000000000002D04                 cmp     r8, rdx
.text:0000000000002D07                 jz      loc_2B49
.text:0000000000002D0D
.text:0000000000002D0D loc_2D0D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002D0D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002D10                 sub     ecx, 5Bh ; '['
.text:0000000000002D13                 cmp     cl, 21h ; '!'
.text:0000000000002D16                 ja      short loc_2D00
.text:0000000000002D18                 mov     esi, 1
.text:0000000000002D1D                 shl     rsi, cl
.text:0000000000002D20                 mov     rcx, rsi
.text:0000000000002D23                 mov     rsi, 20000002Bh
.text:0000000000002D2D                 test    rcx, rsi
.text:0000000000002D30                 jz      short loc_2D00
.text:0000000000002D32                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002D37                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002D3C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002D41                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D49
.text:0000000000002D49 loc_2D49:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002D49                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002D49                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002D4E                 jz      short loc_2D60
.text:0000000000002D50                 test    al, al
.text:0000000000002D52                 mov     eax, 4
.text:0000000000002D57                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002D5C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002D60                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002D60                 sub     rsp, 8
.text:0000000000002D64                 mov     rcx, rbp
.text:0000000000002D67                 mov     rsi, r13
.text:0000000000002D6A                 push    [rsp+0F0h+var_88]
.text:0000000000002D6E                 push    [rsp+0F8h+var_80]
.text:0000000000002D72                 mov     rdi, r14
.text:0000000000002D75                 push    0
.text:0000000000002D77                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002D7F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002D84                 mov     rdx, [rsp+108h+s]
.text:0000000000002D89                 and     r9d, 0FFFFFFFDh
.text:0000000000002D8D                 call    quotearg_buffer_restyled
.text:0000000000002D92                 add     rsp, 20h
.text:0000000000002D96                 mov     r15, rax
.text:0000000000002D99
.text:0000000000002D99 loc_2D99:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002D99                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002D99                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002DA1                 xor     rbx, fs:28h
.text:0000000000002DAA                 mov     rax, r15
.text:0000000000002DAD                 jnz     loc_33B3
.text:0000000000002DB3                 add     rsp, 0B8h
.text:0000000000002DBA                 pop     rbx
.text:0000000000002DBB                 pop     rbp
.text:0000000000002DBC                 pop     r12
.text:0000000000002DBE                 pop     r13
.text:0000000000002DC0                 pop     r14
.text:0000000000002DC2                 pop     r15
.text:0000000000002DC4                 retn
.text:0000000000002DC4 ; ---------------------------------------------------------------------------
.text:0000000000002DC5                 align 8
.text:0000000000002DC8
.text:0000000000002DC8 loc_2DC8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002DC8                 mov     rbp, r11
.text:0000000000002DCB                 jmp     loc_2D49
.text:0000000000002DD0 ; ---------------------------------------------------------------------------
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002DD0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002DD0                 cmp     r13, r15
.text:0000000000002DD3                 jbe     short loc_2DDA
.text:0000000000002DD5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002DDA
.text:0000000000002DDA loc_2DDA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002DDA                 lea     rax, [r15+1]
.text:0000000000002DDE                 cmp     r13, rax
.text:0000000000002DE1                 jbe     short loc_2DE9
.text:0000000000002DE3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002DE9
.text:0000000000002DE9 loc_2DE9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002DE9                 lea     rax, [r15+2]
.text:0000000000002DED                 cmp     r13, rax
.text:0000000000002DF0                 jbe     loc_33E2
.text:0000000000002DF6                 mov     rdx, r13
.text:0000000000002DF9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002DFF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002E04                 jmp     loc_29E2
.text:0000000000002E09 ; ---------------------------------------------------------------------------
.text:0000000000002E09
.text:0000000000002E09 loc_2E09:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002E09                 mov     eax, r12d
.text:0000000000002E0C                 mov     ebx, 30h ; '0'
.text:0000000000002E11                 xor     r12d, r12d
.text:0000000000002E14                 jmp     loc_2419
.text:0000000000002E19 ; ---------------------------------------------------------------------------
.text:0000000000002E19
.text:0000000000002E19 loc_2E19:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002E19                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002E1F                 jmp     loc_27E9
.text:0000000000002E24 ; ---------------------------------------------------------------------------
.text:0000000000002E24
.text:0000000000002E24 loc_2E24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E24                                         ; DATA XREF: .rodata:jpt_2251↓o
.text:0000000000002E24                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002E26                 jnz     loc_2253        ; jumptable 00000000000121F1 case 1
.text:0000000000002E2C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E31
.text:0000000000002E31 loc_2E31:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002E31                 test    r13, r13
.text:0000000000002E34                 jnz     loc_33CA
.text:0000000000002E3A                 lea     rax, asc_50FD   ; "'"
.text:0000000000002E41                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E4A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E54                 xor     r12d, r12d
.text:0000000000002E57                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002E5C                 mov     [rsp+0E8h+n], 1
.text:0000000000002E65                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E6A                 mov     r15d, 1
.text:0000000000002E70                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002E78                 jmp     loc_2293
.text:0000000000002E78 ; ---------------------------------------------------------------------------
.text:0000000000002E7D                 align 20h
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E80                                         ; DATA XREF: .rodata:jpt_2251↓o
.text:0000000000002E80                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002E82                 jnz     loc_327D
.text:0000000000002E88                 test    r13, r13
.text:0000000000002E8B                 jz      loc_30B6
.text:0000000000002E91                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002E95                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E9A                 xor     r12d, r12d
.text:0000000000002E9D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EA2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EAB
.text:0000000000002EAB loc_2EAB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002EAB                 lea     rax, unk_50FB
.text:0000000000002EB2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002EB7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002EBC                 mov     [rsp+0E8h+n], 1
.text:0000000000002EC5                 mov     r15d, 1
.text:0000000000002ECB                 mov     [rsp+0E8h+s2], rax
.text:0000000000002ED0                 jmp     loc_2293
.text:0000000000002ED5 ; ---------------------------------------------------------------------------
.text:0000000000002ED5
.text:0000000000002ED5 loc_2ED5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002ED5                                         ; DATA XREF: .rodata:jpt_2251↓o
.text:0000000000002ED5                 lea     rax, unk_50FB   ; jumptable 00000000000121F1 case 6
.text:0000000000002EDC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002EE1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EE6                 xor     r12d, r12d
.text:0000000000002EE9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EF2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002EF7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002EFC                 mov     [rsp+0E8h+n], 1
.text:0000000000002F05                 xor     r15d, r15d
.text:0000000000002F08                 mov     [rsp+0E8h+s2], rax
.text:0000000000002F0D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002F15                 jmp     loc_2293
.text:0000000000002F1A ; ---------------------------------------------------------------------------
.text:0000000000002F1A
.text:0000000000002F1A loc_2F1A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F1A                                         ; DATA XREF: .rodata:jpt_2251↓o
.text:0000000000002F1A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002F1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F24                 xor     r12d, r12d
.text:0000000000002F27                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F30                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002F35                 xor     r15d, r15d
.text:0000000000002F38                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F3D                 mov     [rsp+0E8h+n], 0
.text:0000000000002F46                 mov     [rsp+0E8h+s2], 0
.text:0000000000002F4F                 jmp     loc_2293
.text:0000000000002F54 ; ---------------------------------------------------------------------------
.text:0000000000002F54
.text:0000000000002F54 loc_2F54:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F54                                         ; DATA XREF: .rodata:jpt_2251↓o
.text:0000000000002F54                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002F59                 jz      short loc_2FB1
.text:0000000000002F5B                 lea     rsi, asc_50FF   ; "`"
.text:0000000000002F62                 xor     edi, edi        ; domainname
.text:0000000000002F64                 mov     edx, 5          ; category
.text:0000000000002F69                 call    _dcgettext
.text:0000000000002F6E                 mov     rcx, rax
.text:0000000000002F71                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002F76                 lea     rax, asc_50FF   ; "`"
.text:0000000000002F7D                 cmp     rcx, rax
.text:0000000000002F80                 jz      loc_331E
.text:0000000000002F86
.text:0000000000002F86 loc_2F86:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002F86                 lea     rsi, asc_50FD   ; "'"
.text:0000000000002F8D                 xor     edi, edi        ; domainname
.text:0000000000002F8F                 mov     edx, 5          ; category
.text:0000000000002F94                 call    _dcgettext
.text:0000000000002F99                 mov     rcx, rax
.text:0000000000002F9C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002FA1                 lea     rax, asc_50FD   ; "'"
.text:0000000000002FA8                 cmp     rcx, rax
.text:0000000000002FAB                 jz      loc_3334
.text:0000000000002FB1
.text:0000000000002FB1 loc_2FB1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002FB1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002FB1                 xor     r15d, r15d
.text:0000000000002FB4                 test    ebx, ebx
.text:0000000000002FB6                 jz      loc_317D
.text:0000000000002FBC
.text:0000000000002FBC loc_2FBC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002FBC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002FBC                 test    ebx, ebx
.text:0000000000002FBE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002FC3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002FC8                 xor     r12d, r12d
.text:0000000000002FCB                 mov     rdi, rbx        ; s
.text:0000000000002FCE                 call    _strlen
.text:0000000000002FD3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002FD8                 mov     [rsp+0E8h+n], rax
.text:0000000000002FDD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FE2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FE7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FF0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002FF5                 jmp     loc_2293
.text:0000000000002FFA ; ---------------------------------------------------------------------------
.text:0000000000002FFA
.text:0000000000002FFA loc_2FFA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FFA                                         ; DATA XREF: .rodata:jpt_2251↓o
.text:0000000000002FFA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002FFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003004                 xor     r12d, r12d
.text:0000000000003007                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003010                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003015                 xor     r15d, r15d
.text:0000000000003018                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000301D                 mov     [rsp+0E8h+n], 0
.text:0000000000003026                 mov     [rsp+0E8h+s2], 0
.text:000000000000302F                 jmp     loc_2293
.text:0000000000003034 ; ---------------------------------------------------------------------------
.text:0000000000003034
.text:0000000000003034 loc_3034:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003034                                         ; DATA XREF: .rodata:jpt_2251↓o
.text:0000000000003034                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003039                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000303E                 xor     r12d, r12d
.text:0000000000003041                 mov     [rsp+0E8h+var_98], 0
.text:000000000000304A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000304F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003054                 jmp     loc_2273
.text:0000000000003059 ; ---------------------------------------------------------------------------
.text:0000000000003059
.text:0000000000003059 loc_3059:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003059                 cmp     r13, r15
.text:000000000000305C                 jbe     short loc_3063
.text:000000000000305E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003063
.text:0000000000003063 loc_3063:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003063                 lea     rax, [rcx+2]
.text:0000000000003067                 cmp     r13, rax
.text:000000000000306A                 jbe     short loc_3072
.text:000000000000306C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003072
.text:0000000000003072 loc_3072:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003072                 mov     eax, r12d
.text:0000000000003075                 lea     r15, [rcx+3]
.text:0000000000003079                 xor     r12d, r12d
.text:000000000000307C                 mov     ebx, 30h ; '0'
.text:0000000000003081                 jmp     loc_23E8
.text:0000000000003081 ; ---------------------------------------------------------------------------
.text:0000000000003086                 align 10h
.text:0000000000003090
.text:0000000000003090 loc_3090:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003090                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003095                 mov     rbp, r11
.text:0000000000003098                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000309C                 jmp     loc_2D49
.text:00000000000030A1 ; ---------------------------------------------------------------------------
.text:00000000000030A1
.text:00000000000030A1 loc_30A1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000030A1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000030A6                 xor     r12d, r12d
.text:00000000000030A9                 jmp     loc_2BB0
.text:00000000000030AE ; ---------------------------------------------------------------------------
.text:00000000000030AE
.text:00000000000030AE loc_30AE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000030AE                 xor     r10d, r10d
.text:00000000000030B1                 jmp     loc_2C6D
.text:00000000000030B6 ; ---------------------------------------------------------------------------
.text:00000000000030B6
.text:00000000000030B6 loc_30B6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000030B6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030BF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000030C4                 xor     r12d, r12d
.text:00000000000030C7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000030CC                 jmp     loc_2EAB
.text:00000000000030D1 ; ---------------------------------------------------------------------------
.text:00000000000030D1
.text:00000000000030D1 loc_30D1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000030D1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000030D6                 mov     rsi, r14
.text:00000000000030D9                 mov     rcx, r13
.text:00000000000030DC                 mov     rax, rbx
.text:00000000000030DF                 mov     rdi, rbx
.text:00000000000030E2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000030E8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000030ED                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000030F5                 cmp     rsi, r11
.text:00000000000030F8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000030FE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003106                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000310B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003110                 jnb     short loc_3138
.text:0000000000003112                 cmp     byte ptr [rcx], 0
.text:0000000000003115                 jnz     short loc_3127
.text:0000000000003117                 jmp     short loc_3138
.text:0000000000003117 ; ---------------------------------------------------------------------------
.text:0000000000003119                 align 20h
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003120                 cmp     byte ptr [r9+rax], 0
.text:0000000000003125                 jz      short loc_3135
.text:0000000000003127
.text:0000000000003127 loc_3127:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003127                 add     rax, 1
.text:000000000000312B                 lea     rdx, [rbp+rax+0]
.text:0000000000003130                 cmp     r11, rdx
.text:0000000000003133                 ja      short loc_3120
.text:0000000000003135
.text:0000000000003135 loc_3135:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003135                 mov     rdi, rax
.text:0000000000003138
.text:0000000000003138 loc_3138:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003138                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003138                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000313D                 xor     r12d, r12d
.text:0000000000003140                 jmp     loc_2BA6
.text:0000000000003145 ; ---------------------------------------------------------------------------
.text:0000000000003145
.text:0000000000003145 loc_3145:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003145                 mov     rdi, rbx
.text:0000000000003148                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000314E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003153                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003159                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003161                 xor     r12d, r12d
.text:0000000000003164                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003169                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000316E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003173                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003178                 jmp     loc_2BA6
.text:000000000000317D ; ---------------------------------------------------------------------------
.text:000000000000317D
.text:000000000000317D loc_317D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000317D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003182                 movzx   eax, byte ptr [rdx]
.text:0000000000003185                 test    al, al
.text:0000000000003187                 jz      loc_2FBC
.text:000000000000318D                 nop     dword ptr [rax]
.text:0000000000003190
.text:0000000000003190 loc_3190:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003190                 cmp     r13, r15
.text:0000000000003193                 jbe     short loc_3199
.text:0000000000003195                 mov     [r14+r15], al
.text:0000000000003199
.text:0000000000003199 loc_3199:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003199                 add     r15, 1
.text:000000000000319D                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000031A2                 test    al, al
.text:00000000000031A4                 jnz     short loc_3190
.text:00000000000031A6                 jmp     loc_2FBC
.text:00000000000031AB ; ---------------------------------------------------------------------------
.text:00000000000031AB
.text:00000000000031AB loc_31AB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000031AB                 mov     eax, edx
.text:00000000000031AD                 jmp     loc_2707
.text:00000000000031B2 ; ---------------------------------------------------------------------------
.text:00000000000031B2
.text:00000000000031B2 loc_31B2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000031B2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000031B6                 cmp     bl, 3Eh ; '>'
.text:00000000000031B9                 ja      loc_2A30
.text:00000000000031BF                 mov     rax, 7000A38200000000h
.text:00000000000031C9                 bt      rax, rbx
.text:00000000000031CD                 jnb     loc_2A30
.text:00000000000031D3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000031D8                 jnz     loc_33C2
.text:00000000000031DE                 cmp     r13, r15
.text:00000000000031E1                 jbe     short loc_31E8
.text:00000000000031E3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000031E8
.text:00000000000031E8 loc_31E8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000031E8                 lea     rax, [r15+1]
.text:00000000000031EC                 cmp     r13, rax
.text:00000000000031EF                 jbe     short loc_31F7
.text:00000000000031F1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000031F7
.text:00000000000031F7 loc_31F7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000031F7                 lea     rax, [r15+2]
.text:00000000000031FB                 cmp     r13, rax
.text:00000000000031FE                 jbe     short loc_3206
.text:0000000000003200                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003206
.text:0000000000003206 loc_3206:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003206                 lea     rax, [r15+3]
.text:000000000000320A                 cmp     r13, rax
.text:000000000000320D                 jbe     short loc_3215
.text:000000000000320F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003215
.text:0000000000003215 loc_3215:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003215                 add     r15, 4
.text:0000000000003219                 xor     edx, edx
.text:000000000000321B                 xor     r12d, r12d
.text:000000000000321E                 xor     eax, eax
.text:0000000000003220                 mov     rbp, rcx
.text:0000000000003223                 jmp     loc_23E8
.text:0000000000003228 ; ---------------------------------------------------------------------------
.text:0000000000003228
.text:0000000000003228 loc_3228:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003228                                         ; DATA XREF: .rodata:jpt_2251↓o
.text:0000000000003228                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000322A                 jz      loc_33B8
.text:0000000000003230                 lea     rax, asc_50FD   ; "'"
.text:0000000000003237                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000323C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003241                 xor     r12d, r12d
.text:0000000000003244                 mov     [rsp+0E8h+var_98], 0
.text:000000000000324D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003252                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003257                 mov     [rsp+0E8h+n], 1
.text:0000000000003260                 xor     r15d, r15d
.text:0000000000003263                 mov     [rsp+0E8h+s2], rax
.text:0000000000003268                 jmp     loc_2293
.text:0000000000003268 ; ---------------------------------------------------------------------------
.text:000000000000326D                 align 10h
.text:0000000000003270
.text:0000000000003270 loc_3270:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003270                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003270                 mov     rbp, r11
.text:0000000000003273                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003278                 jmp     loc_2D49
.text:000000000000327D ; ---------------------------------------------------------------------------
.text:000000000000327D
.text:000000000000327D loc_327D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000327D                 lea     rax, unk_50FB
.text:0000000000003284                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003289                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000328E                 xor     r12d, r12d
.text:0000000000003291                 mov     [rsp+0E8h+var_98], 0
.text:000000000000329A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000329F                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000032A4                 mov     [rsp+0E8h+n], 1
.text:00000000000032AD                 xor     r15d, r15d
.text:00000000000032B0                 mov     [rsp+0E8h+s2], rax
.text:00000000000032B5                 jmp     loc_2293
.text:00000000000032BA ; ---------------------------------------------------------------------------
.text:00000000000032BA
.text:00000000000032BA loc_32BA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000032BA                 mov     eax, edx
.text:00000000000032BC
.text:00000000000032BC loc_32BC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000032BC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000032BC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000032C1                 test    rbx, rbx
.text:00000000000032C4                 jz      short loc_32F2
.text:00000000000032C6                 test    al, al
.text:00000000000032C8                 jz      short loc_32F2
.text:00000000000032CA                 movzx   ecx, byte ptr [rbx]
.text:00000000000032CD                 mov     rax, rbx
.text:00000000000032D0                 test    cl, cl
.text:00000000000032D2                 jz      short loc_32F2
.text:00000000000032D4                 mov     rdx, r15
.text:00000000000032D7                 sub     rax, r15
.text:00000000000032DA
.text:00000000000032DA loc_32DA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000032DA                 cmp     r13, rdx
.text:00000000000032DD                 jbe     short loc_32E3
.text:00000000000032DF                 mov     [r14+rdx], cl
.text:00000000000032E3
.text:00000000000032E3 loc_32E3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000032E3                 add     rdx, 1
.text:00000000000032E7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000032EB                 test    cl, cl
.text:00000000000032ED                 jnz     short loc_32DA
.text:00000000000032EF                 mov     r15, rdx
.text:00000000000032F2
.text:00000000000032F2 loc_32F2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000032F2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000032F2                 cmp     r13, r15
.text:00000000000032F5                 jbe     loc_2D99
.text:00000000000032FB                 mov     byte ptr [r14+r15], 0
.text:0000000000003300                 jmp     loc_2D99
.text:0000000000003305 ; ---------------------------------------------------------------------------
.text:0000000000003305
.text:0000000000003305 loc_3305:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003305                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000330A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000330F                 mov     rbp, r11
.text:0000000000003312                 setz    al
.text:0000000000003315                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003319                 jmp     loc_2D49
.text:000000000000331E ; ---------------------------------------------------------------------------
.text:000000000000331E
.text:000000000000331E loc_331E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000331E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003322                 mov     rdi, rcx
.text:0000000000003325                 call    gettext_quote
.text:000000000000332A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000332F                 jmp     loc_2F86
.text:0000000000003334 ; ---------------------------------------------------------------------------
.text:0000000000003334
.text:0000000000003334 loc_3334:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003334                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003338                 mov     rdi, rcx
.text:000000000000333B                 call    gettext_quote
.text:0000000000003340                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003345                 jmp     loc_2FB1
.text:000000000000334A ; ---------------------------------------------------------------------------
.text:000000000000334A
.text:000000000000334A loc_334A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000334A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000334F                 mov     rbp, r11
.text:0000000000003352                 mov     eax, edx
.text:0000000000003354                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003358                 jmp     loc_2D49
.text:000000000000335D ; ---------------------------------------------------------------------------
.text:000000000000335D
.text:000000000000335D loc_335D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000335D                 sub     rsp, 8
.text:0000000000003361                 mov     r8d, 5
.text:0000000000003367                 mov     rcx, r11
.text:000000000000336A                 push    [rsp+0F0h+var_88]
.text:000000000000336E                 push    [rsp+0F8h+var_80]
.text:0000000000003372                 mov     rdi, r14
.text:0000000000003375                 push    [rsp+100h+var_C8]
.text:0000000000003379                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003381                 mov     rdx, [rsp+108h+s]
.text:0000000000003386                 mov     rsi, [rsp+108h+var_98]
.text:000000000000338B                 call    quotearg_buffer_restyled
.text:0000000000003390                 add     rsp, 20h
.text:0000000000003394                 mov     r15, rax
.text:0000000000003397                 jmp     loc_2D99
.text:000000000000339C ; ---------------------------------------------------------------------------
.text:000000000000339C
.text:000000000000339C loc_339C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000339C                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000033A1                 jmp     loc_32BC
.text:00000000000033A6 ; ---------------------------------------------------------------------------
.text:00000000000033A6
.text:00000000000033A6 loc_33A6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000033A6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033AE                 jmp     loc_2D49
.text:00000000000033B3 ; ---------------------------------------------------------------------------
.text:00000000000033B3
.text:00000000000033B3 loc_33B3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000033B3                 call    ___stack_chk_fail
.text:00000000000033B8 ; ---------------------------------------------------------------------------
.text:00000000000033B8
.text:00000000000033B8 loc_33B8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000033B8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000033BD                 jmp     loc_2E31
.text:00000000000033C2 ; ---------------------------------------------------------------------------
.text:00000000000033C2
.text:00000000000033C2 loc_33C2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000033C2                 mov     rbp, r11
.text:00000000000033C5                 jmp     loc_2D60
.text:00000000000033CA ; ---------------------------------------------------------------------------
.text:00000000000033CA
.text:00000000000033CA loc_33CA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000033CA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000033CF                 xor     eax, eax
.text:00000000000033D1                 xor     r12d, r12d
.text:00000000000033D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033DD                 jmp     loc_2984
.text:00000000000033E2 ; ---------------------------------------------------------------------------
.text:00000000000033E2
.text:00000000000033E2 loc_33E2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000033E2                 mov     rdx, r13
.text:00000000000033E5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000033EA                 jmp     loc_29E2
.text:00000000000033EF ; ---------------------------------------------------------------------------
.text:00000000000033EF
.text:00000000000033EF def_2251:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000033EF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000033EF ; } // starts at 21C0
.text:00000000000033EF quotearg_buffer_restyled endp
.text:00000000000033EF
.text:00000000000033EF ; ---------------------------------------------------------------------------
.text:00000000000033F4                 align 20h
.text:0000000000003400
.text:0000000000003400 ; =============== S U B R O U T I N E =======================================
.text:0000000000003400
.text:0000000000003400
.text:0000000000003400 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003400                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003400
.text:0000000000003400 var_50          = qword ptr -50h
.text:0000000000003400 var_48          = qword ptr -48h
.text:0000000000003400 var_40          = dword ptr -40h
.text:0000000000003400 var_3C          = dword ptr -3Ch
.text:0000000000003400
.text:0000000000003400 ; __unwind {
.text:0000000000003400                 push    r15
.text:0000000000003402                 push    r14
.text:0000000000003404                 movsxd  r15, edi
.text:0000000000003407                 push    r13
.text:0000000000003409                 push    r12
.text:000000000000340B                 mov     r14, rdx
.text:000000000000340E                 push    rbp
.text:000000000000340F                 push    rbx
.text:0000000000003410                 mov     rbp, rcx
.text:0000000000003413                 sub     rsp, 28h
.text:0000000000003417                 mov     [rsp+58h+var_50], rsi
.text:000000000000341C                 call    ___errno_location
.text:0000000000003421                 mov     r13, rax
.text:0000000000003424                 mov     eax, [rax]
.text:0000000000003426                 test    r15d, r15d
.text:0000000000003429                 mov     rbx, cs:slotvec
.text:0000000000003430                 mov     [rsp+58h+var_40], eax
.text:0000000000003434                 js      loc_35A1
.text:000000000000343A                 cmp     cs:nslots, r15d
.text:0000000000003441                 jg      short loc_34A5
.text:0000000000003443                 cmp     r15d, 7FFFFFFFh
.text:000000000000344A                 jz      loc_35A6
.text:0000000000003450                 lea     r12d, [r15+1]
.text:0000000000003454                 lea     rax, slotvec0
.text:000000000000345B                 movsxd  rsi, r12d
.text:000000000000345E                 shl     rsi, 4
.text:0000000000003462                 cmp     rbx, rax
.text:0000000000003465                 jz      loc_3580
.text:000000000000346B                 mov     rdi, rbx
.text:000000000000346E                 call    xrealloc
.text:0000000000003473                 mov     rbx, rax
.text:0000000000003476                 mov     cs:slotvec, rax
.text:000000000000347D
.text:000000000000347D loc_347D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000347D                 movsxd  rdi, cs:nslots
.text:0000000000003484                 mov     edx, r12d
.text:0000000000003487                 xor     esi, esi        ; c
.text:0000000000003489                 sub     edx, edi
.text:000000000000348B                 shl     rdi, 4
.text:000000000000348F                 movsxd  rdx, edx
.text:0000000000003492                 add     rdi, rbx        ; s
.text:0000000000003495                 shl     rdx, 4          ; n
.text:0000000000003499                 call    _memset
.text:000000000000349E                 mov     cs:nslots, r12d
.text:00000000000034A5
.text:00000000000034A5 loc_34A5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000034A5                 mov     eax, [rbp+4]
.text:00000000000034A8                 shl     r15, 4
.text:00000000000034AC                 sub     rsp, 8
.text:00000000000034B0                 add     rbx, r15
.text:00000000000034B3                 lea     r15, [rbp+8]
.text:00000000000034B7                 mov     r8d, [rbp+0]
.text:00000000000034BB                 mov     r11, [rbx]
.text:00000000000034BE                 mov     r12, [rbx+8]
.text:00000000000034C2                 mov     rcx, r14
.text:00000000000034C5                 or      eax, 1
.text:00000000000034C8                 mov     [rsp+60h+var_3C], eax
.text:00000000000034CC                 push    qword ptr [rbp+30h]
.text:00000000000034CF                 mov     r9d, eax
.text:00000000000034D2                 push    qword ptr [rbp+28h]
.text:00000000000034D5                 push    r15
.text:00000000000034D7                 mov     rsi, r11
.text:00000000000034DA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000034DF                 mov     rdi, r12
.text:00000000000034E2                 mov     [rsp+78h+var_48], r11
.text:00000000000034E7                 call    quotearg_buffer_restyled
.text:00000000000034EC                 add     rsp, 20h
.text:00000000000034F0                 mov     r11, [rsp+58h+var_48]
.text:00000000000034F5                 cmp     r11, rax
.text:00000000000034F8                 ja      short loc_3561
.text:00000000000034FA                 lea     rsi, [rax+1]
.text:00000000000034FE                 lea     rax, slot0
.text:0000000000003505                 cmp     r12, rax
.text:0000000000003508                 mov     [rbx], rsi
.text:000000000000350B                 jz      short loc_351F
.text:000000000000350D                 mov     rdi, r12        ; ptr
.text:0000000000003510                 mov     [rsp+58h+var_48], rsi
.text:0000000000003515                 call    _free
.text:000000000000351A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000351F
.text:000000000000351F loc_351F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000351F                 mov     rdi, rsi
.text:0000000000003522                 mov     [rsp+58h+var_48], rsi
.text:0000000000003527                 call    xmalloc
.text:000000000000352C                 sub     rsp, 8
.text:0000000000003530                 mov     [rbx+8], rax
.text:0000000000003534                 mov     r8d, [rbp+0]
.text:0000000000003538                 push    qword ptr [rbp+30h]
.text:000000000000353B                 push    qword ptr [rbp+28h]
.text:000000000000353E                 mov     rcx, r14
.text:0000000000003541                 push    r15
.text:0000000000003543                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003548                 mov     rdi, rax
.text:000000000000354B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003550                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003555                 mov     r12, rax
.text:0000000000003558                 call    quotearg_buffer_restyled
.text:000000000000355D                 add     rsp, 20h
.text:0000000000003561
.text:0000000000003561 loc_3561:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003561                 mov     eax, [rsp+58h+var_40]
.text:0000000000003565                 mov     [r13+0], eax
.text:0000000000003569                 add     rsp, 28h
.text:000000000000356D                 mov     rax, r12
.text:0000000000003570                 pop     rbx
.text:0000000000003571                 pop     rbp
.text:0000000000003572                 pop     r12
.text:0000000000003574                 pop     r13
.text:0000000000003576                 pop     r14
.text:0000000000003578                 pop     r15
.text:000000000000357A                 retn
.text:000000000000357A ; ---------------------------------------------------------------------------
.text:000000000000357B                 align 20h
.text:0000000000003580
.text:0000000000003580 loc_3580:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003580                 xor     edi, edi
.text:0000000000003582                 call    xrealloc
.text:0000000000003587                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000358F                 mov     rbx, rax
.text:0000000000003592                 mov     cs:slotvec, rax
.text:0000000000003599                 movups  xmmword ptr [rax], xmm0
.text:000000000000359C                 jmp     loc_347D
.text:00000000000035A1 ; ---------------------------------------------------------------------------
.text:00000000000035A1
.text:00000000000035A1 loc_35A1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000035A1                 call    _abort
.text:00000000000035A6 ; ---------------------------------------------------------------------------
.text:00000000000035A6
.text:00000000000035A6 loc_35A6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000035A6                 call    xalloc_die
.text:00000000000035A6 ; } // starts at 3400
.text:00000000000035A6 quotearg_n_options endp
.text:00000000000035A6
.text:00000000000035A6 ; ---------------------------------------------------------------------------
.text:00000000000035AB                 align 10h
.text:00000000000035B0
.text:00000000000035B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035B0
.text:00000000000035B0 ; Attributes: info_from_lumina
.text:00000000000035B0
.text:00000000000035B0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000035B0                 public clone_quoting_options
.text:00000000000035B0 clone_quoting_options proc near
.text:00000000000035B0 ; __unwind {
.text:00000000000035B0                 push    r12
.text:00000000000035B2                 push    rbp
.text:00000000000035B3                 push    rbx
.text:00000000000035B4                 mov     rbx, rdi
.text:00000000000035B7                 call    ___errno_location
.text:00000000000035BC                 mov     r12d, [rax]
.text:00000000000035BF                 mov     rbp, rax
.text:00000000000035C2                 lea     rax, default_quoting_options
.text:00000000000035C9                 test    rbx, rbx
.text:00000000000035CC                 mov     esi, 38h ; '8'  ; n
.text:00000000000035D1                 cmovz   rbx, rax
.text:00000000000035D5                 mov     rdi, rbx        ; src
.text:00000000000035D8                 call    xmemdup
.text:00000000000035DD                 mov     [rbp+0], r12d
.text:00000000000035E1                 pop     rbx
.text:00000000000035E2                 pop     rbp
.text:00000000000035E3                 pop     r12
.text:00000000000035E5                 retn
.text:00000000000035E5 ; } // starts at 35B0
.text:00000000000035E5 clone_quoting_options endp
.text:00000000000035E5
.text:00000000000035E5 ; ---------------------------------------------------------------------------
.text:00000000000035E6                 align 10h
.text:00000000000035F0
.text:00000000000035F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035F0
.text:00000000000035F0
.text:00000000000035F0                 public get_quoting_style
.text:00000000000035F0 get_quoting_style proc near
.text:00000000000035F0 ; __unwind {
.text:00000000000035F0                 lea     rax, default_quoting_options
.text:00000000000035F7                 test    rdi, rdi
.text:00000000000035FA                 cmovz   rdi, rax
.text:00000000000035FE                 mov     eax, [rdi]
.text:0000000000003600                 retn
.text:0000000000003600 ; } // starts at 35F0
.text:0000000000003600 get_quoting_style endp
.text:0000000000003600
.text:0000000000003600 ; ---------------------------------------------------------------------------
.text:0000000000003601                 align 10h
.text:0000000000003610
.text:0000000000003610 ; =============== S U B R O U T I N E =======================================
.text:0000000000003610
.text:0000000000003610
.text:0000000000003610                 public set_quoting_style
.text:0000000000003610 set_quoting_style proc near
.text:0000000000003610 ; __unwind {
.text:0000000000003610                 lea     rax, default_quoting_options
.text:0000000000003617                 test    rdi, rdi
.text:000000000000361A                 cmovz   rdi, rax
.text:000000000000361E                 mov     [rdi], esi
.text:0000000000003620                 retn
.text:0000000000003620 ; } // starts at 3610
.text:0000000000003620 set_quoting_style endp
.text:0000000000003620
.text:0000000000003620 ; ---------------------------------------------------------------------------
.text:0000000000003621                 align 10h
.text:0000000000003630
.text:0000000000003630 ; =============== S U B R O U T I N E =======================================
.text:0000000000003630
.text:0000000000003630 ; Attributes: info_from_lumina
.text:0000000000003630
.text:0000000000003630 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003630                 public set_char_quoting
.text:0000000000003630 set_char_quoting proc near
.text:0000000000003630 ; __unwind {
.text:0000000000003630                 lea     rax, default_quoting_options
.text:0000000000003637                 test    rdi, rdi
.text:000000000000363A                 mov     ecx, esi
.text:000000000000363C                 cmovz   rdi, rax
.text:0000000000003640                 mov     eax, esi
.text:0000000000003642                 and     ecx, 1Fh
.text:0000000000003645                 shr     al, 5
.text:0000000000003648                 movzx   eax, al
.text:000000000000364B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003650                 mov     esi, [rdi]
.text:0000000000003652                 mov     eax, esi
.text:0000000000003654                 shr     eax, cl
.text:0000000000003656                 xor     edx, eax
.text:0000000000003658                 and     eax, 1
.text:000000000000365B                 and     edx, 1
.text:000000000000365E                 shl     edx, cl
.text:0000000000003660                 xor     edx, esi
.text:0000000000003662                 mov     [rdi], edx
.text:0000000000003664                 retn
.text:0000000000003664 ; } // starts at 3630
.text:0000000000003664 set_char_quoting endp
.text:0000000000003664
.text:0000000000003664 ; ---------------------------------------------------------------------------
.text:0000000000003665                 align 10h
.text:0000000000003670
.text:0000000000003670 ; =============== S U B R O U T I N E =======================================
.text:0000000000003670
.text:0000000000003670
.text:0000000000003670                 public set_quoting_flags
.text:0000000000003670 set_quoting_flags proc near
.text:0000000000003670 ; __unwind {
.text:0000000000003670                 lea     rax, default_quoting_options
.text:0000000000003677                 test    rdi, rdi
.text:000000000000367A                 cmovz   rdi, rax
.text:000000000000367E                 mov     eax, [rdi+4]
.text:0000000000003681                 mov     [rdi+4], esi
.text:0000000000003684                 retn
.text:0000000000003684 ; } // starts at 3670
.text:0000000000003684 set_quoting_flags endp
.text:0000000000003684
.text:0000000000003684 ; ---------------------------------------------------------------------------
.text:0000000000003685                 align 10h
.text:0000000000003690
.text:0000000000003690 ; =============== S U B R O U T I N E =======================================
.text:0000000000003690
.text:0000000000003690 ; Attributes: info_from_lumina
.text:0000000000003690
.text:0000000000003690 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003690                 public set_custom_quoting
.text:0000000000003690 set_custom_quoting proc near
.text:0000000000003690 ; __unwind {
.text:0000000000003690                 lea     rax, default_quoting_options
.text:0000000000003697                 test    rdi, rdi
.text:000000000000369A                 cmovz   rdi, rax
.text:000000000000369E                 test    rsi, rsi
.text:00000000000036A1                 mov     dword ptr [rdi], 0Ah
.text:00000000000036A7                 jz      short loc_36B7
.text:00000000000036A9                 test    rdx, rdx
.text:00000000000036AC                 jz      short loc_36B7
.text:00000000000036AE                 mov     [rdi+28h], rsi
.text:00000000000036B2                 mov     [rdi+30h], rdx
.text:00000000000036B6                 retn
.text:00000000000036B7 ; ---------------------------------------------------------------------------
.text:00000000000036B7
.text:00000000000036B7 loc_36B7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000036B7                                         ; set_custom_quoting+1C↑j
.text:00000000000036B7                 sub     rsp, 8
.text:00000000000036BB                 call    _abort
.text:00000000000036BB ; } // starts at 3690
.text:00000000000036BB set_custom_quoting endp
.text:00000000000036BB
.text:00000000000036C0
.text:00000000000036C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036C0
.text:00000000000036C0 ; Attributes: info_from_lumina
.text:00000000000036C0
.text:00000000000036C0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000036C0                 public quotearg_buffer
.text:00000000000036C0 quotearg_buffer proc near
.text:00000000000036C0
.text:00000000000036C0 var_40          = qword ptr -40h
.text:00000000000036C0
.text:00000000000036C0 ; __unwind {
.text:00000000000036C0                 push    r15
.text:00000000000036C2                 push    r14
.text:00000000000036C4                 lea     rax, default_quoting_options
.text:00000000000036CB                 push    r13
.text:00000000000036CD                 push    r12
.text:00000000000036CF                 mov     r13, rdi
.text:00000000000036D2                 push    rbp
.text:00000000000036D3                 push    rbx
.text:00000000000036D4                 mov     rbx, r8
.text:00000000000036D7                 mov     r14, rsi
.text:00000000000036DA                 mov     r15, rdx
.text:00000000000036DD                 sub     rsp, 18h
.text:00000000000036E1                 test    r8, r8
.text:00000000000036E4                 cmovz   rbx, rax
.text:00000000000036E8                 mov     [rsp+48h+var_40], rcx
.text:00000000000036ED                 call    ___errno_location
.text:00000000000036F2                 mov     r12d, [rax]
.text:00000000000036F5                 mov     rbp, rax
.text:00000000000036F8                 lea     rax, [rbx+8]
.text:00000000000036FC                 sub     rsp, 8
.text:0000000000003700                 mov     r9d, [rbx+4]
.text:0000000000003704                 push    qword ptr [rbx+30h]
.text:0000000000003707                 mov     r8d, [rbx]
.text:000000000000370A                 push    qword ptr [rbx+28h]
.text:000000000000370D                 mov     rdx, r15
.text:0000000000003710                 push    rax
.text:0000000000003711                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003716                 mov     rsi, r14
.text:0000000000003719                 mov     rdi, r13
.text:000000000000371C                 call    quotearg_buffer_restyled
.text:0000000000003721                 mov     [rbp+0], r12d
.text:0000000000003725                 add     rsp, 38h
.text:0000000000003729                 pop     rbx
.text:000000000000372A                 pop     rbp
.text:000000000000372B                 pop     r12
.text:000000000000372D                 pop     r13
.text:000000000000372F                 pop     r14
.text:0000000000003731                 pop     r15
.text:0000000000003733                 retn
.text:0000000000003733 ; } // starts at 36C0
.text:0000000000003733 quotearg_buffer endp
.text:0000000000003733
.text:0000000000003733 ; ---------------------------------------------------------------------------
.text:0000000000003734                 align 20h
.text:0000000000003740
.text:0000000000003740 ; =============== S U B R O U T I N E =======================================
.text:0000000000003740
.text:0000000000003740 ; Attributes: info_from_lumina
.text:0000000000003740
.text:0000000000003740 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003740                 public quotearg_alloc_mem
.text:0000000000003740 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003740
.text:0000000000003740 var_5C          = dword ptr -5Ch
.text:0000000000003740 var_58          = qword ptr -58h
.text:0000000000003740 var_50          = qword ptr -50h
.text:0000000000003740 var_48          = qword ptr -48h
.text:0000000000003740 var_40          = qword ptr -40h
.text:0000000000003740
.text:0000000000003740 ; __unwind {
.text:0000000000003740                 push    r15
.text:0000000000003742                 push    r14
.text:0000000000003744                 lea     rax, default_quoting_options
.text:000000000000374B                 push    r13
.text:000000000000374D                 push    r12
.text:000000000000374F                 mov     r12, rdx
.text:0000000000003752                 push    rbp
.text:0000000000003753                 push    rbx
.text:0000000000003754                 mov     rbx, rcx
.text:0000000000003757                 mov     r14, rdi
.text:000000000000375A                 mov     r15, rsi
.text:000000000000375D                 sub     rsp, 38h
.text:0000000000003761                 test    rcx, rcx
.text:0000000000003764                 cmovz   rbx, rax
.text:0000000000003768                 xor     ebp, ebp
.text:000000000000376A                 call    ___errno_location
.text:000000000000376F                 test    r12, r12
.text:0000000000003772                 mov     r13, rax
.text:0000000000003775                 mov     eax, [rax]
.text:0000000000003777                 setz    bpl
.text:000000000000377B                 or      ebp, [rbx+4]
.text:000000000000377E                 lea     r10, [rbx+8]
.text:0000000000003782                 sub     rsp, 8
.text:0000000000003786                 mov     r8d, [rbx]
.text:0000000000003789                 mov     rcx, r15
.text:000000000000378C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003790                 push    qword ptr [rbx+30h]
.text:0000000000003793                 mov     rdx, r14
.text:0000000000003796                 push    qword ptr [rbx+28h]
.text:0000000000003799                 push    r10
.text:000000000000379B                 xor     esi, esi
.text:000000000000379D                 mov     r9d, ebp
.text:00000000000037A0                 xor     edi, edi
.text:00000000000037A2                 mov     [rsp+88h+var_48], r10
.text:00000000000037A7                 call    quotearg_buffer_restyled
.text:00000000000037AC                 lea     rsi, [rax+1]
.text:00000000000037B0                 mov     [rsp+88h+var_40], rax
.text:00000000000037B5                 add     rsp, 20h
.text:00000000000037B9                 mov     rdi, rsi
.text:00000000000037BC                 mov     [rsp+68h+var_50], rsi
.text:00000000000037C1                 call    xmalloc
.text:00000000000037C6                 mov     [rsp+68h+var_58], rax
.text:00000000000037CB                 sub     rsp, 8
.text:00000000000037CF                 push    qword ptr [rbx+30h]
.text:00000000000037D2                 push    qword ptr [rbx+28h]
.text:00000000000037D5                 mov     r10, [rsp+80h+var_48]
.text:00000000000037DA                 mov     r9d, ebp
.text:00000000000037DD                 mov     r8d, [rbx]
.text:00000000000037E0                 mov     rcx, r15
.text:00000000000037E3                 mov     rdx, r14
.text:00000000000037E6                 mov     rdi, rax
.text:00000000000037E9                 push    r10
.text:00000000000037EB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000037F0                 call    quotearg_buffer_restyled
.text:00000000000037F5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000037F9                 add     rsp, 20h
.text:00000000000037FD                 test    r12, r12
.text:0000000000003800                 mov     [r13+0], eax
.text:0000000000003804                 jz      short loc_380F
.text:0000000000003806                 mov     r11, [rsp+68h+var_40]
.text:000000000000380B                 mov     [r12], r11
.text:000000000000380F
.text:000000000000380F loc_380F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000380F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003814                 add     rsp, 38h
.text:0000000000003818                 pop     rbx
.text:0000000000003819                 pop     rbp
.text:000000000000381A                 pop     r12
.text:000000000000381C                 pop     r13
.text:000000000000381E                 pop     r14
.text:0000000000003820                 pop     r15
.text:0000000000003822                 retn
.text:0000000000003822 ; } // starts at 3740
.text:0000000000003822 quotearg_alloc_mem endp
.text:0000000000003822
.text:0000000000003822 ; ---------------------------------------------------------------------------
.text:0000000000003823                 align 10h
.text:0000000000003830
.text:0000000000003830 ; =============== S U B R O U T I N E =======================================
.text:0000000000003830
.text:0000000000003830
.text:0000000000003830                 public quotearg_alloc
.text:0000000000003830 quotearg_alloc  proc near
.text:0000000000003830 ; __unwind {
.text:0000000000003830                 mov     rcx, rdx
.text:0000000000003833                 xor     edx, edx
.text:0000000000003835                 jmp     quotearg_alloc_mem
.text:0000000000003835 ; } // starts at 3830
.text:0000000000003835 quotearg_alloc  endp
.text:0000000000003835
.text:0000000000003835 ; ---------------------------------------------------------------------------
.text:000000000000383A                 align 20h
.text:0000000000003840
.text:0000000000003840 ; =============== S U B R O U T I N E =======================================
.text:0000000000003840
.text:0000000000003840 ; Attributes: info_from_lumina
.text:0000000000003840
.text:0000000000003840 ; void __cdecl quotearg_free()
.text:0000000000003840                 public quotearg_free
.text:0000000000003840 quotearg_free   proc near
.text:0000000000003840 ; __unwind {
.text:0000000000003840                 mov     eax, cs:nslots
.text:0000000000003846                 push    r12
.text:0000000000003848                 mov     r12, cs:slotvec
.text:000000000000384F                 push    rbp
.text:0000000000003850                 push    rbx
.text:0000000000003851                 cmp     eax, 1
.text:0000000000003854                 jle     short loc_3881
.text:0000000000003856                 sub     eax, 2
.text:0000000000003859                 lea     rbx, [r12+18h]
.text:000000000000385E                 shl     rax, 4
.text:0000000000003862                 lea     rbp, [r12+rax+28h]
.text:0000000000003867                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003870                 mov     rdi, [rbx]      ; ptr
.text:0000000000003873                 add     rbx, 10h
.text:0000000000003877                 call    _free
.text:000000000000387C                 cmp     rbx, rbp
.text:000000000000387F                 jnz     short loc_3870
.text:0000000000003881
.text:0000000000003881 loc_3881:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003881                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003886                 lea     rbx, slot0
.text:000000000000388D                 cmp     rdi, rbx
.text:0000000000003890                 jz      short loc_38A9
.text:0000000000003892                 call    _free
.text:0000000000003897                 mov     cs:slotvec0, 100h
.text:00000000000038A2                 mov     cs:off_207078, rbx
.text:00000000000038A9
.text:00000000000038A9 loc_38A9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000038A9                 lea     rbx, slotvec0
.text:00000000000038B0                 cmp     r12, rbx
.text:00000000000038B3                 jz      short loc_38C4
.text:00000000000038B5                 mov     rdi, r12        ; ptr
.text:00000000000038B8                 call    _free
.text:00000000000038BD                 mov     cs:slotvec, rbx
.text:00000000000038C4
.text:00000000000038C4 loc_38C4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000038C4                 pop     rbx
.text:00000000000038C5                 mov     cs:nslots, 1
.text:00000000000038CF                 pop     rbp
.text:00000000000038D0                 pop     r12
.text:00000000000038D2                 retn
.text:00000000000038D2 ; } // starts at 3840
.text:00000000000038D2 quotearg_free   endp
.text:00000000000038D2
.text:00000000000038D2 ; ---------------------------------------------------------------------------
.text:00000000000038D3                 align 20h
.text:00000000000038E0
.text:00000000000038E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038E0
.text:00000000000038E0
.text:00000000000038E0                 public quotearg_n
.text:00000000000038E0 quotearg_n      proc near
.text:00000000000038E0 ; __unwind {
.text:00000000000038E0                 lea     rcx, default_quoting_options
.text:00000000000038E7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000038EE                 jmp     quotearg_n_options
.text:00000000000038EE ; } // starts at 38E0
.text:00000000000038EE quotearg_n      endp
.text:00000000000038EE
.text:00000000000038EE ; ---------------------------------------------------------------------------
.text:00000000000038F3                 align 20h
.text:0000000000003900
.text:0000000000003900 ; =============== S U B R O U T I N E =======================================
.text:0000000000003900
.text:0000000000003900
.text:0000000000003900                 public quotearg_n_mem
.text:0000000000003900 quotearg_n_mem  proc near
.text:0000000000003900 ; __unwind {
.text:0000000000003900                 lea     rcx, default_quoting_options
.text:0000000000003907                 jmp     quotearg_n_options
.text:0000000000003907 ; } // starts at 3900
.text:0000000000003907 quotearg_n_mem  endp
.text:0000000000003907
.text:0000000000003907 ; ---------------------------------------------------------------------------
.text:000000000000390C                 align 10h
.text:0000000000003910
.text:0000000000003910 ; =============== S U B R O U T I N E =======================================
.text:0000000000003910
.text:0000000000003910
.text:0000000000003910                 public quotearg
.text:0000000000003910 quotearg        proc near
.text:0000000000003910 ; __unwind {
.text:0000000000003910                 lea     rcx, default_quoting_options
.text:0000000000003917                 mov     rsi, rdi
.text:000000000000391A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003921                 xor     edi, edi
.text:0000000000003923                 jmp     quotearg_n_options
.text:0000000000003923 ; } // starts at 3910
.text:0000000000003923 quotearg        endp
.text:0000000000003923
.text:0000000000003923 ; ---------------------------------------------------------------------------
.text:0000000000003928                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930
.text:0000000000003930                 public quotearg_mem
.text:0000000000003930 quotearg_mem    proc near
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 lea     rcx, default_quoting_options
.text:0000000000003937                 mov     rdx, rsi
.text:000000000000393A                 mov     rsi, rdi
.text:000000000000393D                 xor     edi, edi
.text:000000000000393F                 jmp     quotearg_n_options
.text:000000000000393F ; } // starts at 3930
.text:000000000000393F quotearg_mem    endp
.text:000000000000393F
.text:000000000000393F ; ---------------------------------------------------------------------------
.text:0000000000003944                 align 10h
.text:0000000000003950
.text:0000000000003950 ; =============== S U B R O U T I N E =======================================
.text:0000000000003950
.text:0000000000003950 ; Attributes: info_from_lumina
.text:0000000000003950
.text:0000000000003950 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003950                 public quotearg_n_style
.text:0000000000003950 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003950
.text:0000000000003950 var_48          = dword ptr -48h
.text:0000000000003950 var_44          = qword ptr -44h
.text:0000000000003950 var_3C          = qword ptr -3Ch
.text:0000000000003950 var_34          = qword ptr -34h
.text:0000000000003950 var_2C          = qword ptr -2Ch
.text:0000000000003950 var_24          = qword ptr -24h
.text:0000000000003950 var_1C          = qword ptr -1Ch
.text:0000000000003950 var_14          = dword ptr -14h
.text:0000000000003950 var_10          = qword ptr -10h
.text:0000000000003950
.text:0000000000003950 ; __unwind {
.text:0000000000003950                 sub     rsp, 48h
.text:0000000000003954                 mov     rax, rdx
.text:0000000000003957                 mov     rdx, fs:28h
.text:0000000000003960                 mov     [rsp+48h+var_10], rdx
.text:0000000000003965                 xor     edx, edx
.text:0000000000003967                 cmp     esi, 0Ah
.text:000000000000396A                 jz      short loc_39D4
.text:000000000000396C                 mov     [rsp+48h+var_48], esi
.text:000000000000396F                 mov     rcx, rsp
.text:0000000000003972                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003979                 mov     rsi, rax
.text:000000000000397C                 mov     [rsp+48h+var_44], 0
.text:0000000000003985                 mov     [rsp+48h+var_3C], 0
.text:000000000000398E                 mov     [rsp+48h+var_34], 0
.text:0000000000003997                 mov     [rsp+48h+var_2C], 0
.text:00000000000039A0                 mov     [rsp+48h+var_24], 0
.text:00000000000039A9                 mov     [rsp+48h+var_1C], 0
.text:00000000000039B2                 mov     [rsp+48h+var_14], 0
.text:00000000000039BA                 call    quotearg_n_options
.text:00000000000039BF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000039C4                 xor     rcx, fs:28h
.text:00000000000039CD                 jnz     short loc_39D9
.text:00000000000039CF                 add     rsp, 48h
.text:00000000000039D3                 retn
.text:00000000000039D4 ; ---------------------------------------------------------------------------
.text:00000000000039D4
.text:00000000000039D4 loc_39D4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000039D4                 call    _abort
.text:00000000000039D9 ; ---------------------------------------------------------------------------
.text:00000000000039D9
.text:00000000000039D9 loc_39D9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000039D9                 call    ___stack_chk_fail
.text:00000000000039D9 ; } // starts at 3950
.text:00000000000039D9 quotearg_n_style endp
.text:00000000000039D9
.text:00000000000039D9 ; ---------------------------------------------------------------------------
.text:00000000000039DE                 align 20h
.text:00000000000039E0
.text:00000000000039E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039E0
.text:00000000000039E0 ; Attributes: info_from_lumina
.text:00000000000039E0
.text:00000000000039E0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000039E0                 public quotearg_n_style_mem
.text:00000000000039E0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000039E0
.text:00000000000039E0 var_48          = dword ptr -48h
.text:00000000000039E0 var_44          = qword ptr -44h
.text:00000000000039E0 var_3C          = qword ptr -3Ch
.text:00000000000039E0 var_34          = qword ptr -34h
.text:00000000000039E0 var_2C          = qword ptr -2Ch
.text:00000000000039E0 var_24          = qword ptr -24h
.text:00000000000039E0 var_1C          = qword ptr -1Ch
.text:00000000000039E0 var_14          = dword ptr -14h
.text:00000000000039E0 var_10          = qword ptr -10h
.text:00000000000039E0
.text:00000000000039E0 ; __unwind {
.text:00000000000039E0                 sub     rsp, 48h
.text:00000000000039E4                 mov     rax, rdx
.text:00000000000039E7                 mov     rdx, rcx
.text:00000000000039EA                 mov     rcx, fs:28h
.text:00000000000039F3                 mov     [rsp+48h+var_10], rcx
.text:00000000000039F8                 xor     ecx, ecx
.text:00000000000039FA                 cmp     esi, 0Ah
.text:00000000000039FD                 jz      short loc_3A60
.text:00000000000039FF                 mov     [rsp+48h+var_48], esi
.text:0000000000003A02                 mov     rcx, rsp
.text:0000000000003A05                 mov     rsi, rax
.text:0000000000003A08                 mov     [rsp+48h+var_44], 0
.text:0000000000003A11                 mov     [rsp+48h+var_3C], 0
.text:0000000000003A1A                 mov     [rsp+48h+var_34], 0
.text:0000000000003A23                 mov     [rsp+48h+var_2C], 0
.text:0000000000003A2C                 mov     [rsp+48h+var_24], 0
.text:0000000000003A35                 mov     [rsp+48h+var_1C], 0
.text:0000000000003A3E                 mov     [rsp+48h+var_14], 0
.text:0000000000003A46                 call    quotearg_n_options
.text:0000000000003A4B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003A50                 xor     rdx, fs:28h
.text:0000000000003A59                 jnz     short loc_3A65
.text:0000000000003A5B                 add     rsp, 48h
.text:0000000000003A5F                 retn
.text:0000000000003A60 ; ---------------------------------------------------------------------------
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003A60                 call    _abort
.text:0000000000003A65 ; ---------------------------------------------------------------------------
.text:0000000000003A65
.text:0000000000003A65 loc_3A65:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003A65                 call    ___stack_chk_fail
.text:0000000000003A65 ; } // starts at 39E0
.text:0000000000003A65 quotearg_n_style_mem endp
.text:0000000000003A65
.text:0000000000003A65 ; ---------------------------------------------------------------------------
.text:0000000000003A6A                 align 10h
.text:0000000000003A70
.text:0000000000003A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A70
.text:0000000000003A70
.text:0000000000003A70                 public quotearg_style
.text:0000000000003A70 quotearg_style  proc near
.text:0000000000003A70 ; __unwind {
.text:0000000000003A70                 mov     rdx, rsi
.text:0000000000003A73                 mov     esi, edi
.text:0000000000003A75                 xor     edi, edi
.text:0000000000003A77                 jmp     quotearg_n_style
.text:0000000000003A77 ; } // starts at 3A70
.text:0000000000003A77 quotearg_style  endp
.text:0000000000003A77
.text:0000000000003A77 ; ---------------------------------------------------------------------------
.text:0000000000003A7C                 align 20h
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80
.text:0000000000003A80                 public quotearg_style_mem
.text:0000000000003A80 quotearg_style_mem proc near
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 mov     rcx, rdx
.text:0000000000003A83                 mov     rdx, rsi
.text:0000000000003A86                 mov     esi, edi
.text:0000000000003A88                 xor     edi, edi
.text:0000000000003A8A                 jmp     quotearg_n_style_mem
.text:0000000000003A8A ; } // starts at 3A80
.text:0000000000003A8A quotearg_style_mem endp
.text:0000000000003A8A
.text:0000000000003A8A ; ---------------------------------------------------------------------------
.text:0000000000003A8F                 align 10h
.text:0000000000003A90
.text:0000000000003A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A90
.text:0000000000003A90 ; Attributes: info_from_lumina
.text:0000000000003A90
.text:0000000000003A90 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003A90                 public quotearg_char_mem
.text:0000000000003A90 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003A90                                         ; quotearg_colon+C↓j ...
.text:0000000000003A90
.text:0000000000003A90 var_48          = xmmword ptr -48h
.text:0000000000003A90 var_38          = xmmword ptr -38h
.text:0000000000003A90 var_28          = xmmword ptr -28h
.text:0000000000003A90 var_18          = qword ptr -18h
.text:0000000000003A90 var_10          = qword ptr -10h
.text:0000000000003A90
.text:0000000000003A90 ; __unwind {
.text:0000000000003A90                 sub     rsp, 48h
.text:0000000000003A94                 mov     ecx, edx
.text:0000000000003A96                 mov     rax, fs:28h
.text:0000000000003A9F                 mov     [rsp+48h+var_10], rax
.text:0000000000003AA4                 xor     eax, eax
.text:0000000000003AA6                 mov     rax, cs:qword_207230
.text:0000000000003AAD                 mov     r8, rsp
.text:0000000000003AB0                 and     ecx, 1Fh
.text:0000000000003AB3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003ABB                 mov     [rsp+48h+var_18], rax
.text:0000000000003AC0                 mov     eax, edx
.text:0000000000003AC2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003AC6                 shr     al, 5
.text:0000000000003AC9                 movzx   eax, al
.text:0000000000003ACC                 lea     r9, [r8+rax*4+8]
.text:0000000000003AD1                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003AD9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003ADE                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003AE6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003AEB                 mov     edx, [r9]
.text:0000000000003AEE                 mov     eax, edx
.text:0000000000003AF0                 shr     eax, cl
.text:0000000000003AF2                 not     eax
.text:0000000000003AF4                 and     eax, 1
.text:0000000000003AF7                 shl     eax, cl
.text:0000000000003AF9                 mov     rcx, r8
.text:0000000000003AFC                 xor     eax, edx
.text:0000000000003AFE                 mov     rdx, rsi
.text:0000000000003B01                 mov     rsi, rdi
.text:0000000000003B04                 mov     [r9], eax
.text:0000000000003B07                 xor     edi, edi
.text:0000000000003B09                 call    quotearg_n_options
.text:0000000000003B0E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003B13                 xor     rsi, fs:28h
.text:0000000000003B1C                 jnz     short loc_3B23
.text:0000000000003B1E                 add     rsp, 48h
.text:0000000000003B22                 retn
.text:0000000000003B23 ; ---------------------------------------------------------------------------
.text:0000000000003B23
.text:0000000000003B23 loc_3B23:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003B23                 call    ___stack_chk_fail
.text:0000000000003B23 ; } // starts at 3A90
.text:0000000000003B23 quotearg_char_mem endp
.text:0000000000003B23
.text:0000000000003B23 ; ---------------------------------------------------------------------------
.text:0000000000003B28                 align 10h
.text:0000000000003B30
.text:0000000000003B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B30
.text:0000000000003B30
.text:0000000000003B30                 public quotearg_char
.text:0000000000003B30 quotearg_char   proc near
.text:0000000000003B30 ; __unwind {
.text:0000000000003B30                 movsx   edx, sil
.text:0000000000003B34                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B3B                 jmp     quotearg_char_mem
.text:0000000000003B3B ; } // starts at 3B30
.text:0000000000003B3B quotearg_char   endp
.text:0000000000003B3B
.text:0000000000003B40
.text:0000000000003B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B40
.text:0000000000003B40
.text:0000000000003B40                 public quotearg_colon
.text:0000000000003B40 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003B40 ; __unwind {
.text:0000000000003B40                 mov     edx, 3Ah ; ':'
.text:0000000000003B45                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B4C                 jmp     quotearg_char_mem
.text:0000000000003B4C ; } // starts at 3B40
.text:0000000000003B4C quotearg_colon  endp
.text:0000000000003B4C
.text:0000000000003B4C ; ---------------------------------------------------------------------------
.text:0000000000003B51                 align 20h
.text:0000000000003B60
.text:0000000000003B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B60
.text:0000000000003B60
.text:0000000000003B60                 public quotearg_colon_mem
.text:0000000000003B60 quotearg_colon_mem proc near
.text:0000000000003B60 ; __unwind {
.text:0000000000003B60                 mov     edx, 3Ah ; ':'
.text:0000000000003B65                 jmp     quotearg_char_mem
.text:0000000000003B65 ; } // starts at 3B60
.text:0000000000003B65 quotearg_colon_mem endp
.text:0000000000003B65
.text:0000000000003B65 ; ---------------------------------------------------------------------------
.text:0000000000003B6A                 align 10h
.text:0000000000003B70
.text:0000000000003B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B70
.text:0000000000003B70 ; Attributes: info_from_lumina
.text:0000000000003B70
.text:0000000000003B70 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003B70                 public quotearg_n_style_colon
.text:0000000000003B70 quotearg_n_style_colon proc near
.text:0000000000003B70
.text:0000000000003B70 var_48          = dword ptr -48h
.text:0000000000003B70 var_44          = qword ptr -44h
.text:0000000000003B70 var_3C          = qword ptr -3Ch
.text:0000000000003B70 var_34          = qword ptr -34h
.text:0000000000003B70 var_2C          = qword ptr -2Ch
.text:0000000000003B70 var_24          = qword ptr -24h
.text:0000000000003B70 var_1C          = qword ptr -1Ch
.text:0000000000003B70 var_14          = dword ptr -14h
.text:0000000000003B70 var_10          = qword ptr -10h
.text:0000000000003B70
.text:0000000000003B70 ; __unwind {
.text:0000000000003B70                 sub     rsp, 48h
.text:0000000000003B74                 mov     rax, rdx
.text:0000000000003B77                 mov     rdx, fs:28h
.text:0000000000003B80                 mov     [rsp+48h+var_10], rdx
.text:0000000000003B85                 xor     edx, edx
.text:0000000000003B87                 cmp     esi, 0Ah
.text:0000000000003B8A                 jz      short loc_3BF4
.text:0000000000003B8C                 mov     [rsp+48h+var_48], esi
.text:0000000000003B8F                 mov     rcx, rsp
.text:0000000000003B92                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B99                 mov     rsi, rax
.text:0000000000003B9C                 mov     [rsp+48h+var_44], 0
.text:0000000000003BA5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003BAE                 mov     [rsp+48h+var_34], 0
.text:0000000000003BB7                 mov     [rsp+48h+var_2C], 0
.text:0000000000003BC0                 mov     [rsp+48h+var_24], 0
.text:0000000000003BC9                 mov     [rsp+48h+var_1C], 0
.text:0000000000003BD2                 mov     [rsp+48h+var_14], 0
.text:0000000000003BDA                 call    quotearg_n_options
.text:0000000000003BDF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003BE4                 xor     rcx, fs:28h
.text:0000000000003BED                 jnz     short loc_3BF9
.text:0000000000003BEF                 add     rsp, 48h
.text:0000000000003BF3                 retn
.text:0000000000003BF4 ; ---------------------------------------------------------------------------
.text:0000000000003BF4
.text:0000000000003BF4 loc_3BF4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003BF4                 call    _abort
.text:0000000000003BF9 ; ---------------------------------------------------------------------------
.text:0000000000003BF9
.text:0000000000003BF9 loc_3BF9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003BF9                 call    ___stack_chk_fail
.text:0000000000003BF9 ; } // starts at 3B70
.text:0000000000003BF9 quotearg_n_style_colon endp
.text:0000000000003BF9
.text:0000000000003BF9 ; ---------------------------------------------------------------------------
.text:0000000000003BFE                 align 20h
.text:0000000000003C00
.text:0000000000003C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C00
.text:0000000000003C00 ; Attributes: info_from_lumina
.text:0000000000003C00
.text:0000000000003C00 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003C00                 public quotearg_n_custom_mem
.text:0000000000003C00 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003C00                                         ; quotearg_custom+12↓j ...
.text:0000000000003C00
.text:0000000000003C00 var_48          = xmmword ptr -48h
.text:0000000000003C00 var_38          = xmmword ptr -38h
.text:0000000000003C00 var_28          = xmmword ptr -28h
.text:0000000000003C00 var_18          = qword ptr -18h
.text:0000000000003C00 var_10          = qword ptr -10h
.text:0000000000003C00
.text:0000000000003C00 ; __unwind {
.text:0000000000003C00                 sub     rsp, 48h
.text:0000000000003C04                 mov     r9, rcx
.text:0000000000003C07                 mov     rcx, cs:qword_207230
.text:0000000000003C0E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003C16                 mov     rax, fs:28h
.text:0000000000003C1F                 mov     [rsp+48h+var_10], rax
.text:0000000000003C24                 xor     eax, eax
.text:0000000000003C26                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003C2A                 test    rsi, rsi
.text:0000000000003C2D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003C32                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003C39                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003C41                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003C46                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003C4E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003C53                 jz      short loc_3C87
.text:0000000000003C55                 test    rdx, rdx
.text:0000000000003C58                 jz      short loc_3C87
.text:0000000000003C5A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003C5F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003C64                 mov     rcx, rsp
.text:0000000000003C67                 mov     rdx, r8
.text:0000000000003C6A                 mov     rsi, r9
.text:0000000000003C6D                 call    quotearg_n_options
.text:0000000000003C72                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003C77                 xor     rdi, fs:28h
.text:0000000000003C80                 jnz     short loc_3C8C
.text:0000000000003C82                 add     rsp, 48h
.text:0000000000003C86                 retn
.text:0000000000003C87 ; ---------------------------------------------------------------------------
.text:0000000000003C87
.text:0000000000003C87 loc_3C87:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003C87                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003C87                 call    _abort
.text:0000000000003C8C ; ---------------------------------------------------------------------------
.text:0000000000003C8C
.text:0000000000003C8C loc_3C8C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003C8C                 call    ___stack_chk_fail
.text:0000000000003C8C ; } // starts at 3C00
.text:0000000000003C8C quotearg_n_custom_mem endp
.text:0000000000003C8C
.text:0000000000003C8C ; ---------------------------------------------------------------------------
.text:0000000000003C91                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0
.text:0000000000003CA0                 public quotearg_n_custom
.text:0000000000003CA0 quotearg_n_custom proc near
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CA7                 jmp     quotearg_n_custom_mem
.text:0000000000003CA7 ; } // starts at 3CA0
.text:0000000000003CA7 quotearg_n_custom endp
.text:0000000000003CA7
.text:0000000000003CA7 ; ---------------------------------------------------------------------------
.text:0000000000003CAC                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CB0
.text:0000000000003CB0
.text:0000000000003CB0                 public quotearg_custom
.text:0000000000003CB0 quotearg_custom proc near
.text:0000000000003CB0 ; __unwind {
.text:0000000000003CB0                 mov     rcx, rdx
.text:0000000000003CB3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CBA                 mov     rdx, rsi
.text:0000000000003CBD                 mov     rsi, rdi
.text:0000000000003CC0                 xor     edi, edi
.text:0000000000003CC2                 jmp     quotearg_n_custom_mem
.text:0000000000003CC2 ; } // starts at 3CB0
.text:0000000000003CC2 quotearg_custom endp
.text:0000000000003CC2
.text:0000000000003CC2 ; ---------------------------------------------------------------------------
.text:0000000000003CC7                 align 10h
.text:0000000000003CD0
.text:0000000000003CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CD0
.text:0000000000003CD0
.text:0000000000003CD0                 public quotearg_custom_mem
.text:0000000000003CD0 quotearg_custom_mem proc near
.text:0000000000003CD0 ; __unwind {
.text:0000000000003CD0                 mov     r8, rcx
.text:0000000000003CD3                 mov     rcx, rdx
.text:0000000000003CD6                 mov     rdx, rsi
.text:0000000000003CD9                 mov     rsi, rdi
.text:0000000000003CDC                 xor     edi, edi
.text:0000000000003CDE                 jmp     quotearg_n_custom_mem
.text:0000000000003CDE ; } // starts at 3CD0
.text:0000000000003CDE quotearg_custom_mem endp
.text:0000000000003CDE
.text:0000000000003CDE ; ---------------------------------------------------------------------------
.text:0000000000003CE3                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CF0
.text:0000000000003CF0
.text:0000000000003CF0                 public quote_n_mem
.text:0000000000003CF0 quote_n_mem     proc near
.text:0000000000003CF0 ; __unwind {
.text:0000000000003CF0                 lea     rcx, quote_quoting_options
.text:0000000000003CF7                 jmp     quotearg_n_options
.text:0000000000003CF7 ; } // starts at 3CF0
.text:0000000000003CF7 quote_n_mem     endp
.text:0000000000003CF7
.text:0000000000003CF7 ; ---------------------------------------------------------------------------
.text:0000000000003CFC                 align 20h
.text:0000000000003D00
.text:0000000000003D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D00
.text:0000000000003D00
.text:0000000000003D00                 public quote_mem
.text:0000000000003D00 quote_mem       proc near
.text:0000000000003D00 ; __unwind {
.text:0000000000003D00                 lea     rcx, quote_quoting_options
.text:0000000000003D07                 mov     rdx, rsi
.text:0000000000003D0A                 mov     rsi, rdi
.text:0000000000003D0D                 xor     edi, edi
.text:0000000000003D0F                 jmp     quotearg_n_options
.text:0000000000003D0F ; } // starts at 3D00
.text:0000000000003D0F quote_mem       endp
.text:0000000000003D0F
.text:0000000000003D0F ; ---------------------------------------------------------------------------
.text:0000000000003D14                 align 20h
.text:0000000000003D20
.text:0000000000003D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D20
.text:0000000000003D20
.text:0000000000003D20                 public quote_n
.text:0000000000003D20 quote_n         proc near
.text:0000000000003D20 ; __unwind {
.text:0000000000003D20                 lea     rcx, quote_quoting_options
.text:0000000000003D27                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D2E                 jmp     quotearg_n_options
.text:0000000000003D2E ; } // starts at 3D20
.text:0000000000003D2E quote_n         endp
.text:0000000000003D2E
.text:0000000000003D2E ; ---------------------------------------------------------------------------
.text:0000000000003D33                 align 20h
.text:0000000000003D40
.text:0000000000003D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D40
.text:0000000000003D40
.text:0000000000003D40                 public quote
.text:0000000000003D40 quote           proc near               ; CODE XREF: main+10D↑p
.text:0000000000003D40 ; __unwind {
.text:0000000000003D40                 lea     rcx, quote_quoting_options
.text:0000000000003D47                 mov     rsi, rdi
.text:0000000000003D4A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D51                 xor     edi, edi
.text:0000000000003D53                 jmp     quotearg_n_options
.text:0000000000003D53 ; } // starts at 3D40
.text:0000000000003D53 quote           endp
.text:0000000000003D53
.text:0000000000003D53 ; ---------------------------------------------------------------------------
.text:0000000000003D58                 align 20h
.text:0000000000003D60
.text:0000000000003D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D60
.text:0000000000003D60
.text:0000000000003D60 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003D60                 public version_etc_arn
.text:0000000000003D60 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_419B↓j
.text:0000000000003D60                                         ; version_etc_va:loc_41EB↓p ...
.text:0000000000003D60
.text:0000000000003D60 var_58          = qword ptr -58h
.text:0000000000003D60 var_50          = qword ptr -50h
.text:0000000000003D60 var_48          = qword ptr -48h
.text:0000000000003D60 var_40          = qword ptr -40h
.text:0000000000003D60
.text:0000000000003D60 ; __unwind {
.text:0000000000003D60                 push    r15
.text:0000000000003D62                 push    r14
.text:0000000000003D64                 push    r13
.text:0000000000003D66                 push    r12
.text:0000000000003D68                 mov     r12, r9
.text:0000000000003D6B                 push    rbp
.text:0000000000003D6C                 push    rbx
.text:0000000000003D6D                 mov     rbp, rdi
.text:0000000000003D70                 mov     rbx, r8
.text:0000000000003D73                 sub     rsp, 28h
.text:0000000000003D77                 test    rsi, rsi
.text:0000000000003D7A                 jz      loc_3E98
.text:0000000000003D80                 mov     r8, rdx
.text:0000000000003D83                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003D8A                 mov     r9, rcx
.text:0000000000003D8D                 xor     eax, eax
.text:0000000000003D8F                 mov     rcx, rsi
.text:0000000000003D92                 mov     esi, 1
.text:0000000000003D97                 call    ___fprintf_chk
.text:0000000000003D9C
.text:0000000000003D9C loc_3D9C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003D9C                 lea     rsi, aC         ; "(C)"
.text:0000000000003DA3                 xor     edi, edi        ; domainname
.text:0000000000003DA5                 mov     edx, 5          ; category
.text:0000000000003DAA                 call    _dcgettext
.text:0000000000003DAF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003DB6                 mov     rcx, rax
.text:0000000000003DB9                 mov     r8d, 7E3h
.text:0000000000003DBF                 mov     esi, 1
.text:0000000000003DC4                 mov     rdi, rbp
.text:0000000000003DC7                 xor     eax, eax
.text:0000000000003DC9                 call    ___fprintf_chk
.text:0000000000003DCE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003DD5                 xor     edi, edi        ; domainname
.text:0000000000003DD7                 mov     edx, 5          ; category
.text:0000000000003DDC                 call    _dcgettext
.text:0000000000003DE1                 mov     rsi, rbp        ; stream
.text:0000000000003DE4                 mov     rdi, rax        ; s
.text:0000000000003DE7                 call    _fputs_unlocked
.text:0000000000003DEC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003DF0                 ja      def_3E04        ; jumptable 0000000000003E04 default case
.text:0000000000003DF6                 lea     rdx, jpt_3E04
.text:0000000000003DFD                 movsxd  rax, ds:(jpt_3E04 - 58C8h)[rdx+r12*4]
.text:0000000000003E01                 add     rax, rdx
.text:0000000000003E04                 jmp     rax             ; switch jump
.text:0000000000003E04 ; ---------------------------------------------------------------------------
.text:0000000000003E06                 align 10h
.text:0000000000003E10
.text:0000000000003E10 loc_3E10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E10                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:0000000000003E10                 mov     r9, [rbx+38h]   ; jumptable 0000000000003E04 case 8
.text:0000000000003E14                 mov     rax, [rbx+10h]
.text:0000000000003E18                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003E1F                 mov     r8, [rbx+8]
.text:0000000000003E23                 mov     edx, 5          ; category
.text:0000000000003E28                 xor     edi, edi        ; domainname
.text:0000000000003E2A                 mov     r13, [rbx+30h]
.text:0000000000003E2E                 mov     r12, [rbx+28h]
.text:0000000000003E32                 mov     [rsp+58h+var_48], r9
.text:0000000000003E37                 mov     r15, [rbx+20h]
.text:0000000000003E3B                 mov     r14, [rbx+18h]
.text:0000000000003E3F                 mov     [rsp+58h+var_58], rax
.text:0000000000003E43                 mov     [rsp+58h+var_50], r8
.text:0000000000003E48                 mov     rbx, [rbx]
.text:0000000000003E4B                 call    _dcgettext
.text:0000000000003E50                 sub     rsp, 8
.text:0000000000003E54
.text:0000000000003E54 loc_3E54:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003E54                 mov     r9, [rsp+60h+var_48]
.text:0000000000003E59                 mov     rdx, rax
.text:0000000000003E5C                 mov     rcx, rbx
.text:0000000000003E5F                 mov     esi, 1
.text:0000000000003E64                 mov     rdi, rbp
.text:0000000000003E67                 xor     eax, eax
.text:0000000000003E69                 push    r9
.text:0000000000003E6B                 push    r13
.text:0000000000003E6D                 push    r12
.text:0000000000003E6F                 push    r15
.text:0000000000003E71                 push    r14
.text:0000000000003E73                 mov     r9, [rsp+88h+var_58]
.text:0000000000003E78                 mov     r8, [rsp+88h+var_50]
.text:0000000000003E7D                 call    ___fprintf_chk
.text:0000000000003E82                 add     rsp, 30h
.text:0000000000003E86
.text:0000000000003E86 loc_3E86:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E86                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:0000000000003E86                 add     rsp, 28h        ; jumptable 0000000000003E04 case 0
.text:0000000000003E8A                 pop     rbx
.text:0000000000003E8B                 pop     rbp
.text:0000000000003E8C                 pop     r12
.text:0000000000003E8E                 pop     r13
.text:0000000000003E90                 pop     r14
.text:0000000000003E92                 pop     r15
.text:0000000000003E94                 retn
.text:0000000000003E94 ; ---------------------------------------------------------------------------
.text:0000000000003E95                 align 8
.text:0000000000003E98
.text:0000000000003E98 loc_3E98:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003E98                 mov     r8, rcx
.text:0000000000003E9B                 mov     rcx, rdx
.text:0000000000003E9E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003EA5                 mov     esi, 1
.text:0000000000003EAA                 xor     eax, eax
.text:0000000000003EAC                 call    ___fprintf_chk
.text:0000000000003EB1                 jmp     loc_3D9C
.text:0000000000003EB1 ; ---------------------------------------------------------------------------
.text:0000000000003EB6                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 loc_3EC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003EC0                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:0000000000003EC0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003E04 case 9
.text:0000000000003EC4                 mov     r9, [rbx+38h]
.text:0000000000003EC8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003ECF                 mov     rax, [rbx+10h]
.text:0000000000003ED3                 mov     r8, [rbx+8]
.text:0000000000003ED7                 mov     edx, 5          ; category
.text:0000000000003EDC                 mov     r13, [rbx+30h]
.text:0000000000003EE0                 mov     r12, [rbx+28h]
.text:0000000000003EE4                 mov     r15, [rbx+20h]
.text:0000000000003EE8                 mov     r14, [rbx+18h]
.text:0000000000003EEC                 mov     rbx, [rbx]
.text:0000000000003EEF                 mov     [rsp+58h+var_40], r10
.text:0000000000003EF4                 mov     [rsp+58h+var_48], r9
.text:0000000000003EF9                 mov     [rsp+58h+var_58], rax
.text:0000000000003EFD                 mov     [rsp+58h+var_50], r8
.text:0000000000003F02
.text:0000000000003F02 loc_3F02:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003F02                 xor     edi, edi        ; domainname
.text:0000000000003F04                 call    _dcgettext
.text:0000000000003F09                 mov     r10, [rsp+58h+var_40]
.text:0000000000003F0E                 push    r10
.text:0000000000003F10                 jmp     loc_3E54
.text:0000000000003F10 ; ---------------------------------------------------------------------------
.text:0000000000003F15                 align 8
.text:0000000000003F18
.text:0000000000003F18 loc_3F18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F18                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:0000000000003F18                 mov     rbx, [rbx]      ; jumptable 0000000000003E04 case 1
.text:0000000000003F1B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003F22                 mov     edx, 5          ; category
.text:0000000000003F27                 xor     edi, edi        ; domainname
.text:0000000000003F29                 call    _dcgettext
.text:0000000000003F2E                 add     rsp, 28h
.text:0000000000003F32                 mov     rcx, rbx
.text:0000000000003F35                 mov     rdi, rbp
.text:0000000000003F38                 pop     rbx
.text:0000000000003F39                 pop     rbp
.text:0000000000003F3A                 pop     r12
.text:0000000000003F3C                 pop     r13
.text:0000000000003F3E                 pop     r14
.text:0000000000003F40                 pop     r15
.text:0000000000003F42                 mov     rdx, rax
.text:0000000000003F45                 mov     esi, 1
.text:0000000000003F4A                 xor     eax, eax
.text:0000000000003F4C                 jmp     ___fprintf_chk
.text:0000000000003F4C ; ---------------------------------------------------------------------------
.text:0000000000003F51                 align 8
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F58                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:0000000000003F58                 mov     r12, [rbx+8]    ; jumptable 0000000000003E04 case 2
.text:0000000000003F5C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003F63                 mov     rbx, [rbx]
.text:0000000000003F66                 mov     edx, 5          ; category
.text:0000000000003F6B                 xor     edi, edi        ; domainname
.text:0000000000003F6D                 call    _dcgettext
.text:0000000000003F72                 add     rsp, 28h
.text:0000000000003F76                 mov     r8, r12
.text:0000000000003F79                 mov     rcx, rbx
.text:0000000000003F7C                 mov     rdi, rbp
.text:0000000000003F7F                 mov     rdx, rax
.text:0000000000003F82                 mov     esi, 1
.text:0000000000003F87                 pop     rbx
.text:0000000000003F88                 pop     rbp
.text:0000000000003F89                 pop     r12
.text:0000000000003F8B                 pop     r13
.text:0000000000003F8D                 pop     r14
.text:0000000000003F8F                 pop     r15
.text:0000000000003F91                 xor     eax, eax
.text:0000000000003F93                 jmp     ___fprintf_chk
.text:0000000000003F93 ; ---------------------------------------------------------------------------
.text:0000000000003F98                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 loc_3FA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FA0                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:0000000000003FA0                 mov     r13, [rbx+10h]  ; jumptable 0000000000003E04 case 3
.text:0000000000003FA4                 mov     r12, [rbx+8]
.text:0000000000003FA8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003FAF                 mov     rbx, [rbx]
.text:0000000000003FB2                 mov     edx, 5          ; category
.text:0000000000003FB7                 xor     edi, edi        ; domainname
.text:0000000000003FB9                 call    _dcgettext
.text:0000000000003FBE                 add     rsp, 28h
.text:0000000000003FC2                 mov     r9, r13
.text:0000000000003FC5                 mov     r8, r12
.text:0000000000003FC8                 mov     rcx, rbx
.text:0000000000003FCB                 mov     rdi, rbp
.text:0000000000003FCE                 mov     rdx, rax
.text:0000000000003FD1                 pop     rbx
.text:0000000000003FD2                 pop     rbp
.text:0000000000003FD3                 pop     r12
.text:0000000000003FD5                 pop     r13
.text:0000000000003FD7                 pop     r14
.text:0000000000003FD9                 pop     r15
.text:0000000000003FDB                 mov     esi, 1
.text:0000000000003FE0                 xor     eax, eax
.text:0000000000003FE2                 jmp     ___fprintf_chk
.text:0000000000003FE2 ; ---------------------------------------------------------------------------
.text:0000000000003FE7                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FF0                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:0000000000003FF0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003E04 case 4
.text:0000000000003FF7                 mov     edx, 5          ; category
.text:0000000000003FFC                 xor     edi, edi        ; domainname
.text:0000000000003FFE                 mov     r14, [rbx+18h]
.text:0000000000004002                 mov     r13, [rbx+10h]
.text:0000000000004006                 mov     r12, [rbx+8]
.text:000000000000400A                 mov     rbx, [rbx]
.text:000000000000400D                 call    _dcgettext
.text:0000000000004012                 sub     rsp, 8
.text:0000000000004016
.text:0000000000004016 loc_4016:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004016                 push    r14
.text:0000000000004018                 mov     rdx, rax
.text:000000000000401B                 mov     r9, r13
.text:000000000000401E                 mov     r8, r12
.text:0000000000004021                 mov     rcx, rbx
.text:0000000000004024                 mov     rdi, rbp
.text:0000000000004027                 mov     esi, 1
.text:000000000000402C                 xor     eax, eax
.text:000000000000402E                 call    ___fprintf_chk
.text:0000000000004033                 pop     rax
.text:0000000000004034                 pop     rdx
.text:0000000000004035                 add     rsp, 28h
.text:0000000000004039                 pop     rbx
.text:000000000000403A                 pop     rbp
.text:000000000000403B                 pop     r12
.text:000000000000403D                 pop     r13
.text:000000000000403F                 pop     r14
.text:0000000000004041                 pop     r15
.text:0000000000004043                 retn
.text:0000000000004043 ; ---------------------------------------------------------------------------
.text:0000000000004044                 align 8
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004048                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:0000000000004048                 mov     r15, [rbx+20h]  ; jumptable 0000000000003E04 case 5
.text:000000000000404C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004053                 mov     edx, 5          ; category
.text:0000000000004058                 xor     edi, edi        ; domainname
.text:000000000000405A                 mov     r14, [rbx+18h]
.text:000000000000405E                 mov     r13, [rbx+10h]
.text:0000000000004062                 mov     r12, [rbx+8]
.text:0000000000004066                 mov     rbx, [rbx]
.text:0000000000004069                 call    _dcgettext
.text:000000000000406E                 push    r15
.text:0000000000004070                 jmp     short loc_4016
.text:0000000000004070 ; ---------------------------------------------------------------------------
.text:0000000000004072                 align 8
.text:0000000000004078
.text:0000000000004078 loc_4078:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004078                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:0000000000004078                 mov     r8, [rbx+8]     ; jumptable 0000000000003E04 case 6
.text:000000000000407C                 mov     r12, [rbx+28h]
.text:0000000000004080                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004087                 mov     r15, [rbx+20h]
.text:000000000000408B                 mov     r14, [rbx+18h]
.text:000000000000408F                 mov     edx, 5          ; category
.text:0000000000004094                 mov     r13, [rbx+10h]
.text:0000000000004098                 xor     edi, edi        ; domainname
.text:000000000000409A                 mov     rbx, [rbx]
.text:000000000000409D                 mov     [rsp+58h+var_58], r8
.text:00000000000040A1                 call    _dcgettext
.text:00000000000040A6                 sub     rsp, 8
.text:00000000000040AA                 mov     r9, r13
.text:00000000000040AD                 push    r12
.text:00000000000040AF                 push    r15
.text:00000000000040B1                 push    r14
.text:00000000000040B3
.text:00000000000040B3 loc_40B3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000040B3                 mov     r8, [rsp+78h+var_58]
.text:00000000000040B8                 mov     rcx, rbx
.text:00000000000040BB                 mov     rdx, rax
.text:00000000000040BE                 mov     rdi, rbp
.text:00000000000040C1                 mov     esi, 1
.text:00000000000040C6                 xor     eax, eax
.text:00000000000040C8                 call    ___fprintf_chk
.text:00000000000040CD                 add     rsp, 20h
.text:00000000000040D1                 add     rsp, 28h
.text:00000000000040D5                 pop     rbx
.text:00000000000040D6                 pop     rbp
.text:00000000000040D7                 pop     r12
.text:00000000000040D9                 pop     r13
.text:00000000000040DB                 pop     r14
.text:00000000000040DD                 pop     r15
.text:00000000000040DF                 retn
.text:00000000000040E0 ; ---------------------------------------------------------------------------
.text:00000000000040E0
.text:00000000000040E0 loc_40E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000040E0                                         ; DATA XREF: .rodata:jpt_3E04↓o
.text:00000000000040E0                 mov     r9, [rbx+10h]   ; jumptable 0000000000003E04 case 7
.text:00000000000040E4                 mov     r13, [rbx+30h]
.text:00000000000040E8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000040EF                 mov     r12, [rbx+28h]
.text:00000000000040F3                 mov     r15, [rbx+20h]
.text:00000000000040F7                 mov     edx, 5          ; category
.text:00000000000040FC                 mov     r14, [rbx+18h]
.text:0000000000004100                 mov     r8, [rbx+8]
.text:0000000000004104                 xor     edi, edi        ; domainname
.text:0000000000004106                 mov     [rsp+58h+var_50], r9
.text:000000000000410B                 mov     rbx, [rbx]
.text:000000000000410E                 mov     [rsp+58h+var_58], r8
.text:0000000000004112                 call    _dcgettext
.text:0000000000004117                 push    r13
.text:0000000000004119                 push    r12
.text:000000000000411B                 push    r15
.text:000000000000411D                 push    r14
.text:000000000000411F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004124                 jmp     short loc_40B3
.text:0000000000004124 ; ---------------------------------------------------------------------------
.text:0000000000004126                 align 10h
.text:0000000000004130
.text:0000000000004130 def_3E04:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004130                 mov     r10, [rbx+40h]  ; jumptable 0000000000003E04 default case
.text:0000000000004134                 mov     r9, [rbx+38h]
.text:0000000000004138                 mov     edx, 5
.text:000000000000413D                 mov     rax, [rbx+10h]
.text:0000000000004141                 mov     r8, [rbx+8]
.text:0000000000004145                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000414C                 mov     r13, [rbx+30h]
.text:0000000000004150                 mov     r12, [rbx+28h]
.text:0000000000004154                 mov     r15, [rbx+20h]
.text:0000000000004158                 mov     r14, [rbx+18h]
.text:000000000000415C                 mov     [rsp+58h+var_40], r10
.text:0000000000004161                 mov     [rsp+58h+var_48], r9
.text:0000000000004166                 mov     [rsp+58h+var_58], rax
.text:000000000000416A                 mov     [rsp+58h+var_50], r8
.text:000000000000416F                 mov     rbx, [rbx]
.text:0000000000004172                 jmp     loc_3F02
.text:0000000000004172 ; } // starts at 3D60
.text:0000000000004172 version_etc_arn endp
.text:0000000000004172
.text:0000000000004172 ; ---------------------------------------------------------------------------
.text:0000000000004177                 align 20h
.text:0000000000004180
.text:0000000000004180 ; =============== S U B R O U T I N E =======================================
.text:0000000000004180
.text:0000000000004180 ; Attributes: info_from_lumina
.text:0000000000004180
.text:0000000000004180 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004180                 public version_etc_ar
.text:0000000000004180 version_etc_ar  proc near
.text:0000000000004180 ; __unwind {
.text:0000000000004180                 xor     r9d, r9d
.text:0000000000004183                 cmp     qword ptr [r8], 0
.text:0000000000004187                 jz      short loc_419B
.text:0000000000004189                 nop     dword ptr [rax+00000000h]
.text:0000000000004190
.text:0000000000004190 loc_4190:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004190                 add     r9, 1
.text:0000000000004194                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004199                 jnz     short loc_4190
.text:000000000000419B
.text:000000000000419B loc_419B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000419B                 jmp     version_etc_arn
.text:000000000000419B ; } // starts at 4180
.text:000000000000419B version_etc_ar  endp
.text:000000000000419B
.text:00000000000041A0
.text:00000000000041A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041A0
.text:00000000000041A0 ; Attributes: info_from_lumina
.text:00000000000041A0
.text:00000000000041A0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000041A0                 public version_etc_va
.text:00000000000041A0 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:00000000000041A0                                         ; parse_gnu_standard_options_only+EB↑p
.text:00000000000041A0
.text:00000000000041A0 authtab         = qword ptr -68h
.text:00000000000041A0 var_10          = qword ptr -10h
.text:00000000000041A0
.text:00000000000041A0 ; __unwind {
.text:00000000000041A0                 sub     rsp, 68h
.text:00000000000041A4                 mov     r10, r8
.text:00000000000041A7                 xor     r9d, r9d
.text:00000000000041AA                 mov     rax, fs:28h
.text:00000000000041B3                 mov     [rsp+68h+var_10], rax
.text:00000000000041B8                 xor     eax, eax
.text:00000000000041BA                 mov     r8, rsp
.text:00000000000041BD                 nop     dword ptr [rax]
.text:00000000000041C0
.text:00000000000041C0 loc_41C0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000041C0                 mov     eax, [r10]
.text:00000000000041C3                 cmp     eax, 2Fh ; '/'
.text:00000000000041C6                 ja      short loc_420A
.text:00000000000041C8                 mov     r11d, eax
.text:00000000000041CB                 add     r11, [r10+10h]
.text:00000000000041CF                 add     eax, 8
.text:00000000000041D2                 mov     [r10], eax
.text:00000000000041D5
.text:00000000000041D5 loc_41D5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000041D5                 mov     rax, [r11]
.text:00000000000041D8                 test    rax, rax
.text:00000000000041DB                 mov     [r8+r9*8], rax
.text:00000000000041DF                 jz      short loc_41EB
.text:00000000000041E1                 add     r9, 1
.text:00000000000041E5                 cmp     r9, 0Ah
.text:00000000000041E9                 jnz     short loc_41C0
.text:00000000000041EB
.text:00000000000041EB loc_41EB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000041EB                 call    version_etc_arn
.text:00000000000041F0                 mov     rax, [rsp+68h+var_10]
.text:00000000000041F5                 xor     rax, fs:28h
.text:00000000000041FE                 jnz     short loc_4205
.text:0000000000004200                 add     rsp, 68h
.text:0000000000004204                 retn
.text:0000000000004205 ; ---------------------------------------------------------------------------
.text:0000000000004205
.text:0000000000004205 loc_4205:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004205                 call    ___stack_chk_fail
.text:000000000000420A ; ---------------------------------------------------------------------------
.text:000000000000420A
.text:000000000000420A loc_420A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000420A                 mov     r11, [r10+8]
.text:000000000000420E                 lea     rax, [r11+8]
.text:0000000000004212                 mov     [r10+8], rax
.text:0000000000004216                 jmp     short loc_41D5
.text:0000000000004216 ; } // starts at 41A0
.text:0000000000004216 version_etc_va  endp
.text:0000000000004216
.text:0000000000004216 ; ---------------------------------------------------------------------------
.text:0000000000004218                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220 ; Attributes: info_from_lumina
.text:0000000000004220
.text:0000000000004220 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004220                 public version_etc
.text:0000000000004220 version_etc     proc near
.text:0000000000004220
.text:0000000000004220 var_C0          = dword ptr -0C0h
.text:0000000000004220 var_B8          = qword ptr -0B8h
.text:0000000000004220 var_B0          = qword ptr -0B0h
.text:0000000000004220 var_A8          = byte ptr -0A8h
.text:0000000000004220 var_50          = qword ptr -50h
.text:0000000000004220 var_48          = byte ptr -48h
.text:0000000000004220 var_28          = qword ptr -28h
.text:0000000000004220 var_20          = qword ptr -20h
.text:0000000000004220 arg_0           = byte ptr  8
.text:0000000000004220
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 push    rbp
.text:0000000000004221                 push    rbx
.text:0000000000004222                 mov     r10d, 20h ; ' '
.text:0000000000004228                 xor     r11d, r11d
.text:000000000000422B                 sub     rsp, 0B8h
.text:0000000000004232                 mov     rax, fs:28h
.text:000000000000423B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004240                 xor     eax, eax
.text:0000000000004242                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000424A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004252                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000425A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000425F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004267                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000426F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004274                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000427C                 xor     r9d, r9d
.text:000000000000427F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004284                 mov     rbp, rax
.text:0000000000004287                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004290
.text:0000000000004290 loc_4290:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004290                 cmp     r10d, 2Fh ; '/'
.text:0000000000004294                 ja      short loc_42EC
.text:0000000000004296                 mov     eax, r10d
.text:0000000000004299                 mov     r11d, 1
.text:000000000000429F                 add     r10d, 8
.text:00000000000042A3                 add     rax, rbp
.text:00000000000042A6
.text:00000000000042A6 loc_42A6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000042A6                 mov     rax, [rax]
.text:00000000000042A9                 test    rax, rax
.text:00000000000042AC                 mov     [r8+r9*8], rax
.text:00000000000042B0                 jz      short loc_42BC
.text:00000000000042B2                 add     r9, 1
.text:00000000000042B6                 cmp     r9, 0Ah
.text:00000000000042BA                 jnz     short loc_4290
.text:00000000000042BC
.text:00000000000042BC loc_42BC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000042BC                 test    r11b, r11b
.text:00000000000042BF                 jnz     short loc_42E5
.text:00000000000042C1
.text:00000000000042C1 loc_42C1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000042C1                 call    version_etc_arn
.text:00000000000042C6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000042CB                 xor     rax, fs:28h
.text:00000000000042D4                 jnz     short loc_42E0
.text:00000000000042D6                 add     rsp, 0B8h
.text:00000000000042DD                 pop     rbx
.text:00000000000042DE                 pop     rbp
.text:00000000000042DF                 retn
.text:00000000000042E0 ; ---------------------------------------------------------------------------
.text:00000000000042E0
.text:00000000000042E0 loc_42E0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000042E0                 call    ___stack_chk_fail
.text:00000000000042E5 ; ---------------------------------------------------------------------------
.text:00000000000042E5
.text:00000000000042E5 loc_42E5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000042E5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000042EA                 jmp     short loc_42C1
.text:00000000000042EC ; ---------------------------------------------------------------------------
.text:00000000000042EC
.text:00000000000042EC loc_42EC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000042EC                 mov     rax, rbx
.text:00000000000042EF                 add     rbx, 8
.text:00000000000042F3                 jmp     short loc_42A6
.text:00000000000042F3 ; } // starts at 4220
.text:00000000000042F3 version_etc     endp
.text:00000000000042F3
.text:00000000000042F3 ; ---------------------------------------------------------------------------
.text:00000000000042F5                 align 20h
.text:0000000000004300
.text:0000000000004300 ; =============== S U B R O U T I N E =======================================
.text:0000000000004300
.text:0000000000004300 ; Attributes: info_from_lumina
.text:0000000000004300
.text:0000000000004300 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004300                 public emit_bug_reporting_address
.text:0000000000004300 emit_bug_reporting_address proc near
.text:0000000000004300 ; __unwind {
.text:0000000000004300                 push    rbx
.text:0000000000004301                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004308                 mov     edx, 5          ; category
.text:000000000000430D                 xor     edi, edi        ; domainname
.text:000000000000430F                 call    _dcgettext
.text:0000000000004314                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000431B                 mov     rsi, rax
.text:000000000000431E                 mov     edi, 1
.text:0000000000004323                 xor     eax, eax
.text:0000000000004325                 call    ___printf_chk
.text:000000000000432A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004331                 mov     edx, 5          ; category
.text:0000000000004336                 xor     edi, edi        ; domainname
.text:0000000000004338                 call    _dcgettext
.text:000000000000433D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004344                 lea     rdx, unk_4D60
.text:000000000000434B                 mov     rsi, rax
.text:000000000000434E                 mov     edi, 1
.text:0000000000004353                 xor     eax, eax
.text:0000000000004355                 call    ___printf_chk
.text:000000000000435A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004361                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004368                 xor     edi, edi        ; domainname
.text:000000000000436A                 mov     edx, 5          ; category
.text:000000000000436F                 call    _dcgettext
.text:0000000000004374                 mov     rsi, rbx        ; stream
.text:0000000000004377                 mov     rdi, rax        ; s
.text:000000000000437A                 pop     rbx
.text:000000000000437B                 jmp     _fputs_unlocked
.text:000000000000437B ; } // starts at 4300
.text:000000000000437B emit_bug_reporting_address endp
.text:000000000000437B
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380
.text:0000000000004380                 public xmalloc
.text:0000000000004380 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004380                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 push    rbx
.text:0000000000004381                 mov     rbx, rdi
.text:0000000000004384                 call    _malloc
.text:0000000000004389                 test    rax, rax
.text:000000000000438C                 jnz     short loc_4393
.text:000000000000438E                 test    rbx, rbx
.text:0000000000004391                 jnz     short loc_4395
.text:0000000000004393
.text:0000000000004393 loc_4393:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004393                 pop     rbx
.text:0000000000004394                 retn
.text:0000000000004395 ; ---------------------------------------------------------------------------
.text:0000000000004395
.text:0000000000004395 loc_4395:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004395                 call    xalloc_die
.text:0000000000004395 ; } // starts at 4380
.text:0000000000004395 xmalloc         endp
.text:0000000000004395
.text:0000000000004395 ; ---------------------------------------------------------------------------
.text:000000000000439A                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0 ; Attributes: info_from_lumina
.text:00000000000043A0
.text:00000000000043A0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000043A0                 public xnmalloc
.text:00000000000043A0 xnmalloc        proc near
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 mov     rax, rdi
.text:00000000000043A3                 mul     rsi
.text:00000000000043A6                 mov     rdi, rax
.text:00000000000043A9                 seto    al
.text:00000000000043AC                 test    rdi, rdi
.text:00000000000043AF                 js      short loc_43BB
.text:00000000000043B1                 movzx   eax, al
.text:00000000000043B4                 test    rax, rax
.text:00000000000043B7                 jnz     short loc_43BB
.text:00000000000043B9                 jmp     short xmalloc
.text:00000000000043BB ; ---------------------------------------------------------------------------
.text:00000000000043BB
.text:00000000000043BB loc_43BB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000043BB                                         ; xnmalloc+17↑j
.text:00000000000043BB                 sub     rsp, 8
.text:00000000000043BF                 call    xalloc_die
.text:00000000000043BF ; } // starts at 43A0
.text:00000000000043BF xnmalloc        endp
.text:00000000000043BF
.text:00000000000043BF ; ---------------------------------------------------------------------------
.text:00000000000043C4                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0
.text:00000000000043D0                 public xcharalloc
.text:00000000000043D0 xcharalloc      proc near
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 jmp     short xmalloc
.text:00000000000043D0 ; } // starts at 43D0
.text:00000000000043D0 xcharalloc      endp
.text:00000000000043D0
.text:00000000000043D0 ; ---------------------------------------------------------------------------
.text:00000000000043D2                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0 ; Attributes: info_from_lumina
.text:00000000000043E0
.text:00000000000043E0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000043E0                 public xrealloc
.text:00000000000043E0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000043E0                                         ; quotearg_n_options+182↑p ...
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 test    rsi, rsi
.text:00000000000043E3                 push    rbx
.text:00000000000043E4                 mov     rbx, rsi
.text:00000000000043E7                 jnz     short loc_43EE
.text:00000000000043E9                 test    rdi, rdi
.text:00000000000043EC                 jnz     short loc_4408
.text:00000000000043EE
.text:00000000000043EE loc_43EE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000043EE                 mov     rsi, rbx        ; size
.text:00000000000043F1                 call    _realloc
.text:00000000000043F6                 test    rax, rax
.text:00000000000043F9                 jnz     short loc_4400
.text:00000000000043FB                 test    rbx, rbx
.text:00000000000043FE                 jnz     short loc_4411
.text:0000000000004400
.text:0000000000004400 loc_4400:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004400                 pop     rbx
.text:0000000000004401                 retn
.text:0000000000004401 ; ---------------------------------------------------------------------------
.text:0000000000004402                 align 8
.text:0000000000004408
.text:0000000000004408 loc_4408:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004408                 call    _free
.text:000000000000440D                 xor     eax, eax
.text:000000000000440F                 pop     rbx
.text:0000000000004410                 retn
.text:0000000000004411 ; ---------------------------------------------------------------------------
.text:0000000000004411
.text:0000000000004411 loc_4411:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004411                 call    xalloc_die
.text:0000000000004411 ; } // starts at 43E0
.text:0000000000004411 xrealloc        endp
.text:0000000000004411
.text:0000000000004411 ; ---------------------------------------------------------------------------
.text:0000000000004416                 align 20h
.text:0000000000004420
.text:0000000000004420 ; =============== S U B R O U T I N E =======================================
.text:0000000000004420
.text:0000000000004420 ; Attributes: info_from_lumina
.text:0000000000004420
.text:0000000000004420 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004420                 public xnrealloc
.text:0000000000004420 xnrealloc       proc near
.text:0000000000004420 ; __unwind {
.text:0000000000004420                 mov     rax, rsi
.text:0000000000004423                 mul     rdx
.text:0000000000004426                 mov     rsi, rax
.text:0000000000004429                 seto    al
.text:000000000000442C                 test    rsi, rsi
.text:000000000000442F                 js      short loc_443B
.text:0000000000004431                 movzx   eax, al
.text:0000000000004434                 test    rax, rax
.text:0000000000004437                 jnz     short loc_443B
.text:0000000000004439                 jmp     short xrealloc
.text:000000000000443B ; ---------------------------------------------------------------------------
.text:000000000000443B
.text:000000000000443B loc_443B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000443B                                         ; xnrealloc+17↑j
.text:000000000000443B                 sub     rsp, 8
.text:000000000000443F                 call    xalloc_die
.text:000000000000443F ; } // starts at 4420
.text:000000000000443F xnrealloc       endp
.text:000000000000443F
.text:000000000000443F ; ---------------------------------------------------------------------------
.text:0000000000004444                 align 10h
.text:0000000000004450
.text:0000000000004450 ; =============== S U B R O U T I N E =======================================
.text:0000000000004450
.text:0000000000004450 ; Attributes: info_from_lumina
.text:0000000000004450
.text:0000000000004450 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004450                 public x2nrealloc
.text:0000000000004450 x2nrealloc      proc near
.text:0000000000004450 ; __unwind {
.text:0000000000004450                 test    rdi, rdi
.text:0000000000004453                 mov     r9, rdx
.text:0000000000004456                 mov     rcx, [rsi]
.text:0000000000004459                 jz      short loc_4490
.text:000000000000445B                 xor     edx, edx
.text:000000000000445D                 mov     rax, 5555555555555554h
.text:0000000000004467                 div     r9
.text:000000000000446A                 cmp     rax, rcx
.text:000000000000446D                 jbe     short loc_44AB
.text:000000000000446F                 mov     rax, rcx
.text:0000000000004472                 shr     rax, 1
.text:0000000000004475                 lea     rcx, [rax+rcx+1]
.text:000000000000447A
.text:000000000000447A loc_447A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000447A                 mov     [rsi], rcx
.text:000000000000447D                 imul    rcx, r9
.text:0000000000004481                 mov     rsi, rcx
.text:0000000000004484                 jmp     xrealloc
.text:0000000000004484 ; ---------------------------------------------------------------------------
.text:0000000000004489                 align 10h
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004490                 test    rcx, rcx
.text:0000000000004493                 jz      short loc_44B8
.text:0000000000004495
.text:0000000000004495 loc_4495:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004495                 mov     rax, rcx
.text:0000000000004498                 mul     r9
.text:000000000000449B                 seto    dl
.text:000000000000449E                 test    rax, rax
.text:00000000000044A1                 movzx   edx, dl
.text:00000000000044A4                 js      short loc_44AB
.text:00000000000044A6                 test    rdx, rdx
.text:00000000000044A9                 jz      short loc_447A
.text:00000000000044AB
.text:00000000000044AB loc_44AB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000044AB                                         ; x2nrealloc+54↑j
.text:00000000000044AB                 sub     rsp, 8
.text:00000000000044AF                 call    xalloc_die
.text:00000000000044AF ; ---------------------------------------------------------------------------
.text:00000000000044B4                 align 8
.text:00000000000044B8
.text:00000000000044B8 loc_44B8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000044B8                 xor     edx, edx
.text:00000000000044BA                 mov     eax, 80h
.text:00000000000044BF                 xor     r8d, r8d
.text:00000000000044C2                 div     r9
.text:00000000000044C5                 test    rax, rax
.text:00000000000044C8                 setz    r8b
.text:00000000000044CC                 lea     rcx, [r8+rax]
.text:00000000000044D0                 jmp     short loc_4495
.text:00000000000044D0 ; } // starts at 4450
.text:00000000000044D0 x2nrealloc      endp
.text:00000000000044D0
.text:00000000000044D0 ; ---------------------------------------------------------------------------
.text:00000000000044D2                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0 ; Attributes: info_from_lumina
.text:00000000000044E0
.text:00000000000044E0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000044E0                 public x2realloc
.text:00000000000044E0 x2realloc       proc near
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 test    rdi, rdi
.text:00000000000044E3                 mov     rax, [rsi]
.text:00000000000044E6                 jz      short loc_4510
.text:00000000000044E8                 mov     rdx, 5555555555555553h
.text:00000000000044F2                 cmp     rax, rdx
.text:00000000000044F5                 ja      short loc_4521
.text:00000000000044F7                 mov     rdx, rax
.text:00000000000044FA                 shr     rdx, 1
.text:00000000000044FD                 lea     rax, [rdx+rax+1]
.text:0000000000004502
.text:0000000000004502 loc_4502:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004502                 mov     [rsi], rax
.text:0000000000004505                 mov     rsi, rax
.text:0000000000004508                 jmp     xrealloc
.text:0000000000004508 ; ---------------------------------------------------------------------------
.text:000000000000450D                 align 10h
.text:0000000000004510
.text:0000000000004510 loc_4510:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004510                 test    rax, rax
.text:0000000000004513                 mov     edx, 80h
.text:0000000000004518                 cmovz   rax, rdx
.text:000000000000451C                 test    rax, rax
.text:000000000000451F                 jns     short loc_4502
.text:0000000000004521
.text:0000000000004521 loc_4521:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004521                 sub     rsp, 8
.text:0000000000004525                 call    xalloc_die
.text:0000000000004525 ; } // starts at 44E0
.text:0000000000004525 x2realloc       endp
.text:0000000000004525
.text:0000000000004525 ; ---------------------------------------------------------------------------
.text:000000000000452A                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004530                 public xzalloc
.text:0000000000004530 xzalloc         proc near
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 push    rbx
.text:0000000000004531                 mov     rbx, rdi
.text:0000000000004534                 call    xmalloc
.text:0000000000004539                 mov     rdx, rbx        ; n
.text:000000000000453C                 xor     esi, esi        ; c
.text:000000000000453E                 mov     rdi, rax        ; s
.text:0000000000004541                 pop     rbx
.text:0000000000004542                 jmp     _memset
.text:0000000000004542 ; } // starts at 4530
.text:0000000000004542 xzalloc         endp
.text:0000000000004542
.text:0000000000004542 ; ---------------------------------------------------------------------------
.text:0000000000004547                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550 ; Attributes: info_from_lumina
.text:0000000000004550
.text:0000000000004550 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004550                 public xcalloc
.text:0000000000004550 xcalloc         proc near
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 mov     rax, rdi
.text:0000000000004553                 sub     rsp, 8
.text:0000000000004557                 mul     rsi
.text:000000000000455A                 seto    dl
.text:000000000000455D                 test    rax, rax
.text:0000000000004560                 js      short loc_4579
.text:0000000000004562                 movzx   edx, dl
.text:0000000000004565                 test    rdx, rdx
.text:0000000000004568                 jnz     short loc_4579
.text:000000000000456A                 call    _calloc
.text:000000000000456F                 test    rax, rax
.text:0000000000004572                 jz      short loc_4579
.text:0000000000004574                 add     rsp, 8
.text:0000000000004578                 retn
.text:0000000000004579 ; ---------------------------------------------------------------------------
.text:0000000000004579
.text:0000000000004579 loc_4579:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004579                                         ; xcalloc+18↑j ...
.text:0000000000004579                 call    xalloc_die
.text:0000000000004579 ; } // starts at 4550
.text:0000000000004579 xcalloc         endp
.text:0000000000004579
.text:0000000000004579 ; ---------------------------------------------------------------------------
.text:000000000000457E                 align 20h
.text:0000000000004580
.text:0000000000004580 ; =============== S U B R O U T I N E =======================================
.text:0000000000004580
.text:0000000000004580 ; Attributes: info_from_lumina
.text:0000000000004580
.text:0000000000004580 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004580                 public xmemdup
.text:0000000000004580 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004580                                         ; xstrdup+11↓j
.text:0000000000004580 ; __unwind {
.text:0000000000004580                 push    rbp
.text:0000000000004581                 push    rbx
.text:0000000000004582                 mov     rbp, rdi
.text:0000000000004585                 mov     rdi, rsi
.text:0000000000004588                 mov     rbx, rsi
.text:000000000000458B                 sub     rsp, 8
.text:000000000000458F                 call    xmalloc
.text:0000000000004594                 add     rsp, 8
.text:0000000000004598                 mov     rdx, rbx        ; n
.text:000000000000459B                 mov     rsi, rbp        ; src
.text:000000000000459E                 pop     rbx
.text:000000000000459F                 pop     rbp
.text:00000000000045A0                 mov     rdi, rax        ; dest
.text:00000000000045A3                 jmp     _memcpy
.text:00000000000045A3 ; } // starts at 4580
.text:00000000000045A3 xmemdup         endp
.text:00000000000045A3
.text:00000000000045A3 ; ---------------------------------------------------------------------------
.text:00000000000045A8                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0
.text:00000000000045B0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000045B0                 public xstrdup
.text:00000000000045B0 xstrdup         proc near
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 push    rbx
.text:00000000000045B1                 mov     rbx, rdi
.text:00000000000045B4                 call    _strlen
.text:00000000000045B9                 mov     rdi, rbx        ; src
.text:00000000000045BC                 lea     rsi, [rax+1]    ; n
.text:00000000000045C0                 pop     rbx
.text:00000000000045C1                 jmp     short xmemdup
.text:00000000000045C1 ; } // starts at 45B0
.text:00000000000045C1 xstrdup         endp
.text:00000000000045C1
.text:00000000000045C1 ; ---------------------------------------------------------------------------
.text:00000000000045C3                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0 ; Attributes: noreturn info_from_lumina
.text:00000000000045D0
.text:00000000000045D0 ; void __cdecl xalloc_die()
.text:00000000000045D0                 public xalloc_die
.text:00000000000045D0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_35A6↑p
.text:00000000000045D0                                         ; xmalloc:loc_4395↑p ...
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000045D7                 sub     rsp, 8
.text:00000000000045DB                 mov     edx, 5          ; category
.text:00000000000045E0                 xor     edi, edi        ; domainname
.text:00000000000045E2                 call    _dcgettext
.text:00000000000045E7                 mov     edi, cs:exit_failure ; status
.text:00000000000045ED                 lea     rdx, format+4   ; format
.text:00000000000045F4                 mov     rcx, rax
.text:00000000000045F7                 xor     esi, esi        ; errnum
.text:00000000000045F9                 xor     eax, eax
.text:00000000000045FB                 call    _error
.text:0000000000004600                 call    _abort
.text:0000000000004600 ; } // starts at 45D0
.text:0000000000004600 xalloc_die      endp
.text:0000000000004600
.text:0000000000004600 ; ---------------------------------------------------------------------------
.text:0000000000004605                 align 10h
.text:0000000000004610
.text:0000000000004610 ; =============== S U B R O U T I N E =======================================
.text:0000000000004610
.text:0000000000004610 ; Attributes: bp-based frame
.text:0000000000004610
.text:0000000000004610                 public xnanosleep
.text:0000000000004610 xnanosleep      proc near               ; CODE XREF: main+1BB↑p
.text:0000000000004610
.text:0000000000004610 var_s0          = qword ptr  0
.text:0000000000004610 var_s8          = qword ptr  8
.text:0000000000004610 var_s18         = qword ptr  18h
.text:0000000000004610
.text:0000000000004610 ; __unwind {
.text:0000000000004610                 push    rbp
.text:0000000000004611                 push    rbx
.text:0000000000004612                 sub     rsp, 28h
.text:0000000000004616                 mov     rax, fs:28h
.text:000000000000461F                 mov     [rsp+var_s18], rax
.text:0000000000004624                 xor     eax, eax
.text:0000000000004626                 mov     rbp, rsp
.text:0000000000004629                 call    dtotimespec
.text:000000000000462E                 mov     [rsp+var_s0], rax
.text:0000000000004632                 mov     [rsp+var_s8], rdx
.text:0000000000004637                 call    ___errno_location
.text:000000000000463C                 mov     rbx, rax
.text:000000000000463F                 jmp     short loc_4650
.text:000000000000463F ; ---------------------------------------------------------------------------
.text:0000000000004641                 align 8
.text:0000000000004648
.text:0000000000004648 loc_4648:                               ; CODE XREF: xnanosleep+52↓j
.text:0000000000004648                 test    dword ptr [rbx], 0FFFFFFFBh
.text:000000000000464E                 jnz     short loc_4680
.text:0000000000004650
.text:0000000000004650 loc_4650:                               ; CODE XREF: xnanosleep+2F↑j
.text:0000000000004650                 xor     esi, esi
.text:0000000000004652                 mov     dword ptr [rbx], 0
.text:0000000000004658                 mov     rdi, rbp
.text:000000000000465B                 call    rpl_nanosleep
.text:0000000000004660                 test    eax, eax
.text:0000000000004662                 jnz     short loc_4648
.text:0000000000004664
.text:0000000000004664 loc_4664:                               ; CODE XREF: xnanosleep+75↓j
.text:0000000000004664                 mov     rdx, [rsp+var_s18]
.text:0000000000004669                 xor     rdx, fs:28h
.text:0000000000004672                 jnz     short loc_4687
.text:0000000000004674                 add     rsp, 28h
.text:0000000000004678                 pop     rbx
.text:0000000000004679                 pop     rbp
.text:000000000000467A                 retn
.text:000000000000467A ; ---------------------------------------------------------------------------
.text:000000000000467B                 align 20h
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: xnanosleep+3E↑j
.text:0000000000004680                 mov     eax, 0FFFFFFFFh
.text:0000000000004685                 jmp     short loc_4664
.text:0000000000004687 ; ---------------------------------------------------------------------------
.text:0000000000004687
.text:0000000000004687 loc_4687:                               ; CODE XREF: xnanosleep+62↑j
.text:0000000000004687                 call    ___stack_chk_fail
.text:0000000000004687 ; } // starts at 4610
.text:0000000000004687 xnanosleep      endp
.text:0000000000004687
.text:0000000000004687 ; ---------------------------------------------------------------------------
.text:000000000000468C                 align 10h
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690
.text:0000000000004690                 public xstrtod
.text:0000000000004690 xstrtod         proc near               ; CODE XREF: main+163↑p
.text:0000000000004690
.text:0000000000004690 var_38          = qword ptr -38h
.text:0000000000004690 var_30          = qword ptr -30h
.text:0000000000004690
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 push    r14
.text:0000000000004692                 push    r13
.text:0000000000004694                 mov     r14, rcx
.text:0000000000004697                 push    r12
.text:0000000000004699                 push    rbp
.text:000000000000469A                 mov     rbp, rdi
.text:000000000000469D                 push    rbx
.text:000000000000469E                 mov     r13, rdx
.text:00000000000046A1                 mov     rbx, rsi
.text:00000000000046A4                 sub     rsp, 10h
.text:00000000000046A8                 mov     rax, fs:28h
.text:00000000000046B1                 mov     [rsp+38h+var_30], rax
.text:00000000000046B6                 xor     eax, eax
.text:00000000000046B8                 call    ___errno_location
.text:00000000000046BD                 mov     rsi, rsp
.text:00000000000046C0                 mov     r12, rax
.text:00000000000046C3                 mov     dword ptr [rax], 0
.text:00000000000046C9                 mov     rdi, rbp
.text:00000000000046CC                 call    r14
.text:00000000000046CF                 mov     rcx, [rsp+38h+var_38]
.text:00000000000046D3                 cmp     rcx, rbp
.text:00000000000046D6                 jz      short loc_4748
.text:00000000000046D8                 test    rbx, rbx
.text:00000000000046DB                 jz      short loc_4728
.text:00000000000046DD                 ucomisd xmm0, cs:qword_5940
.text:00000000000046E5                 jp      short loc_46EE
.text:00000000000046E7                 mov     eax, 1
.text:00000000000046EC                 jz      short loc_46FB
.text:00000000000046EE
.text:00000000000046EE loc_46EE:                               ; CODE XREF: xstrtod+55↑j
.text:00000000000046EE                                         ; xstrtod+A7↓j ...
.text:00000000000046EE                 cmp     dword ptr [r12], 22h ; '"'
.text:00000000000046F3                 setnz   al
.text:00000000000046F6
.text:00000000000046F6 loc_46F6:                               ; CODE XREF: xstrtod+BA↓j
.text:00000000000046F6                 test    rbx, rbx
.text:00000000000046F9                 jz      short loc_46FE
.text:00000000000046FB
.text:00000000000046FB loc_46FB:                               ; CODE XREF: xstrtod+5C↑j
.text:00000000000046FB                 mov     [rbx], rcx
.text:00000000000046FE
.text:00000000000046FE loc_46FE:                               ; CODE XREF: xstrtod+69↑j
.text:00000000000046FE                                         ; xstrtod+9D↓j ...
.text:00000000000046FE                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004703                 xor     rdx, fs:28h
.text:000000000000470C                 movsd   qword ptr [r13+0], xmm0
.text:0000000000004712                 jnz     short loc_474C
.text:0000000000004714                 add     rsp, 10h
.text:0000000000004718                 pop     rbx
.text:0000000000004719                 pop     rbp
.text:000000000000471A                 pop     r12
.text:000000000000471C                 pop     r13
.text:000000000000471E                 pop     r14
.text:0000000000004720                 retn
.text:0000000000004720 ; ---------------------------------------------------------------------------
.text:0000000000004721                 align 8
.text:0000000000004728
.text:0000000000004728 loc_4728:                               ; CODE XREF: xstrtod+4B↑j
.text:0000000000004728                 xor     eax, eax
.text:000000000000472A                 cmp     byte ptr [rcx], 0
.text:000000000000472D                 jnz     short loc_46FE
.text:000000000000472F                 ucomisd xmm0, cs:qword_5940
.text:0000000000004737                 jp      short loc_46EE
.text:0000000000004739                 jnz     short loc_46EE
.text:000000000000473B                 mov     eax, 1
.text:0000000000004740                 jmp     short loc_46FE
.text:0000000000004740 ; ---------------------------------------------------------------------------
.text:0000000000004742                 align 8
.text:0000000000004748
.text:0000000000004748 loc_4748:                               ; CODE XREF: xstrtod+46↑j
.text:0000000000004748                 xor     eax, eax
.text:000000000000474A                 jmp     short loc_46F6
.text:000000000000474C ; ---------------------------------------------------------------------------
.text:000000000000474C
.text:000000000000474C loc_474C:                               ; CODE XREF: xstrtod+82↑j
.text:000000000000474C                 call    ___stack_chk_fail
.text:000000000000474C ; } // starts at 4690
.text:000000000000474C xstrtod         endp
.text:000000000000474C
.text:000000000000474C ; ---------------------------------------------------------------------------
.text:0000000000004751                 align 20h
.text:0000000000004760
.text:0000000000004760 ; =============== S U B R O U T I N E =======================================
.text:0000000000004760
.text:0000000000004760 ; Attributes: info_from_lumina
.text:0000000000004760
.text:0000000000004760 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004760                 public rpl_mbrtowc
.text:0000000000004760 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004760
.text:0000000000004760 pwc             = dword ptr -34h
.text:0000000000004760 var_30          = qword ptr -30h
.text:0000000000004760
.text:0000000000004760 ; __unwind {
.text:0000000000004760                 push    r13
.text:0000000000004762                 push    r12
.text:0000000000004764                 mov     r13, rsi
.text:0000000000004767                 push    rbp
.text:0000000000004768                 push    rbx
.text:0000000000004769                 mov     rbx, rdi
.text:000000000000476C                 mov     r12, rdx
.text:000000000000476F                 sub     rsp, 18h
.text:0000000000004773                 mov     rax, fs:28h
.text:000000000000477C                 mov     [rsp+38h+var_30], rax
.text:0000000000004781                 xor     eax, eax
.text:0000000000004783                 lea     rax, [rsp+38h+pwc]
.text:0000000000004788                 test    rdi, rdi
.text:000000000000478B                 cmovz   rbx, rax
.text:000000000000478F                 mov     rdi, rbx        ; pwc
.text:0000000000004792                 call    _mbrtowc
.text:0000000000004797                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000479B                 mov     rbp, rax
.text:000000000000479E                 jbe     short loc_47C0
.text:00000000000047A0                 test    r12, r12
.text:00000000000047A3                 jz      short loc_47C0
.text:00000000000047A5                 xor     edi, edi
.text:00000000000047A7                 call    hard_locale
.text:00000000000047AC                 test    al, al
.text:00000000000047AE                 jnz     short loc_47C0
.text:00000000000047B0                 movzx   eax, byte ptr [r13+0]
.text:00000000000047B5                 mov     ebp, 1
.text:00000000000047BA                 mov     [rbx], eax
.text:00000000000047BC                 nop     dword ptr [rax+00h]
.text:00000000000047C0
.text:00000000000047C0 loc_47C0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000047C0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000047C0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000047C5                 xor     rdx, fs:28h
.text:00000000000047CE                 mov     rax, rbp
.text:00000000000047D1                 jnz     short loc_47DE
.text:00000000000047D3                 add     rsp, 18h
.text:00000000000047D7                 pop     rbx
.text:00000000000047D8                 pop     rbp
.text:00000000000047D9                 pop     r12
.text:00000000000047DB                 pop     r13
.text:00000000000047DD                 retn
.text:00000000000047DE ; ---------------------------------------------------------------------------
.text:00000000000047DE
.text:00000000000047DE loc_47DE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000047DE                 call    ___stack_chk_fail
.text:00000000000047DE ; } // starts at 4760
.text:00000000000047DE rpl_mbrtowc     endp
.text:00000000000047DE
.text:00000000000047DE ; ---------------------------------------------------------------------------
.text:00000000000047E3                 align 10h
.text:00000000000047F0
.text:00000000000047F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047F0
.text:00000000000047F0
.text:00000000000047F0                 public rpl_nanosleep
.text:00000000000047F0 rpl_nanosleep   proc near               ; CODE XREF: xnanosleep+4B↑p
.text:00000000000047F0
.text:00000000000047F0 var_38          = qword ptr -38h
.text:00000000000047F0 var_30          = qword ptr -30h
.text:00000000000047F0 var_20          = qword ptr -20h
.text:00000000000047F0
.text:00000000000047F0 ; __unwind {
.text:00000000000047F0                 push    r12
.text:00000000000047F2                 push    rbp
.text:00000000000047F3                 push    rbx
.text:00000000000047F4                 sub     rsp, 20h
.text:00000000000047F8                 mov     rax, fs:28h
.text:0000000000004801                 mov     [rsp+38h+var_20], rax
.text:0000000000004806                 xor     eax, eax
.text:0000000000004808                 mov     rax, [rdi+8]
.text:000000000000480C                 cmp     rax, 3B9AC9FFh
.text:0000000000004812                 ja      loc_48A0
.text:0000000000004818                 mov     rbx, [rdi]
.text:000000000000481B                 mov     rbp, rsi
.text:000000000000481E                 mov     [rsp+38h+var_30], rax
.text:0000000000004823                 mov     r12, rsp
.text:0000000000004826                 cmp     rbx, 1FA400h
.text:000000000000482D                 jg      short loc_484A
.text:000000000000482F                 jmp     short loc_4878
.text:000000000000482F ; ---------------------------------------------------------------------------
.text:0000000000004831                 align 8
.text:0000000000004838
.text:0000000000004838 loc_4838:                               ; CODE XREF: rpl_nanosleep+76↓j
.text:0000000000004838                 cmp     rbx, 1FA400h
.text:000000000000483F                 mov     [rsp+38h+var_30], 0
.text:0000000000004848                 jle     short loc_4878
.text:000000000000484A
.text:000000000000484A loc_484A:                               ; CODE XREF: rpl_nanosleep+3D↑j
.text:000000000000484A                 mov     rsi, rbp        ; remaining
.text:000000000000484D                 mov     rdi, r12        ; requested_time
.text:0000000000004850                 mov     [rsp+38h+var_38], 1FA400h
.text:0000000000004858                 sub     rbx, 1FA400h
.text:000000000000485F                 call    _nanosleep
.text:0000000000004864                 test    eax, eax
.text:0000000000004866                 jz      short loc_4838
.text:0000000000004868                 test    rbp, rbp
.text:000000000000486B                 jz      short loc_4887
.text:000000000000486D                 add     [rbp+0], rbx
.text:0000000000004871                 jmp     short loc_4887
.text:0000000000004871 ; ---------------------------------------------------------------------------
.text:0000000000004873                 align 8
.text:0000000000004878
.text:0000000000004878 loc_4878:                               ; CODE XREF: rpl_nanosleep+3F↑j
.text:0000000000004878                                         ; rpl_nanosleep+58↑j
.text:0000000000004878                 mov     rsi, rbp        ; remaining
.text:000000000000487B                 mov     rdi, r12        ; requested_time
.text:000000000000487E                 mov     [rsp+38h+var_38], rbx
.text:0000000000004882                 call    _nanosleep
.text:0000000000004887
.text:0000000000004887 loc_4887:                               ; CODE XREF: rpl_nanosleep+7B↑j
.text:0000000000004887                                         ; rpl_nanosleep+81↑j ...
.text:0000000000004887                 mov     rdx, [rsp+38h+var_20]
.text:000000000000488C                 xor     rdx, fs:28h
.text:0000000000004895                 jnz     short loc_48B2
.text:0000000000004897                 add     rsp, 20h
.text:000000000000489B                 pop     rbx
.text:000000000000489C                 pop     rbp
.text:000000000000489D                 pop     r12
.text:000000000000489F                 retn
.text:00000000000048A0 ; ---------------------------------------------------------------------------
.text:00000000000048A0
.text:00000000000048A0 loc_48A0:                               ; CODE XREF: rpl_nanosleep+22↑j
.text:00000000000048A0                 call    ___errno_location
.text:00000000000048A5                 mov     dword ptr [rax], 16h
.text:00000000000048AB                 mov     eax, 0FFFFFFFFh
.text:00000000000048B0                 jmp     short loc_4887
.text:00000000000048B2 ; ---------------------------------------------------------------------------
.text:00000000000048B2
.text:00000000000048B2 loc_48B2:                               ; CODE XREF: rpl_nanosleep+A5↑j
.text:00000000000048B2                 call    ___stack_chk_fail
.text:00000000000048B2 ; } // starts at 47F0
.text:00000000000048B2 rpl_nanosleep   endp
.text:00000000000048B2
.text:00000000000048B2 ; ---------------------------------------------------------------------------
.text:00000000000048B7                 align 20h
.text:00000000000048C0
.text:00000000000048C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048C0
.text:00000000000048C0
.text:00000000000048C0 ; __int64 __fastcall c_strtod(char *nptr, char **endptr)
.text:00000000000048C0                 public c_strtod
.text:00000000000048C0 c_strtod        proc near               ; CODE XREF: cl_strtod+81↑p
.text:00000000000048C0 ; __unwind {
.text:00000000000048C0                 push    rbp
.text:00000000000048C1                 push    rbx
.text:00000000000048C2                 mov     rbp, rdi
.text:00000000000048C5                 mov     rbx, rsi
.text:00000000000048C8                 sub     rsp, 8
.text:00000000000048CC                 mov     rax, cs:c_locale_cache
.text:00000000000048D3                 test    rax, rax
.text:00000000000048D6                 jz      short loc_4910
.text:00000000000048D8
.text:00000000000048D8 loc_48D8:                               ; CODE XREF: c_strtod+6A↓j
.text:00000000000048D8                 mov     rdx, cs:c_locale_cache ; loc
.text:00000000000048DF                 test    rdx, rdx
.text:00000000000048E2                 jz      short loc_48F8
.text:00000000000048E4                 add     rsp, 8
.text:00000000000048E8                 mov     rsi, rbx        ; endptr
.text:00000000000048EB                 mov     rdi, rbp        ; nptr
.text:00000000000048EE                 pop     rbx
.text:00000000000048EF                 pop     rbp
.text:00000000000048F0                 jmp     _strtod_l
.text:00000000000048F0 ; ---------------------------------------------------------------------------
.text:00000000000048F5                 align 8
.text:00000000000048F8
.text:00000000000048F8 loc_48F8:                               ; CODE XREF: c_strtod+22↑j
.text:00000000000048F8                 test    rbx, rbx
.text:00000000000048FB                 pxor    xmm0, xmm0
.text:00000000000048FF                 jz      short loc_4908
.text:0000000000004901                 pxor    xmm0, xmm0
.text:0000000000004905                 mov     [rbx], rbp
.text:0000000000004908
.text:0000000000004908 loc_4908:                               ; CODE XREF: c_strtod+3F↑j
.text:0000000000004908                 add     rsp, 8
.text:000000000000490C                 pop     rbx
.text:000000000000490D                 pop     rbp
.text:000000000000490E                 retn
.text:000000000000490E ; ---------------------------------------------------------------------------
.text:000000000000490F                 align 10h
.text:0000000000004910
.text:0000000000004910 loc_4910:                               ; CODE XREF: c_strtod+16↑j
.text:0000000000004910                 lea     rsi, locale     ; "C"
.text:0000000000004917                 xor     edx, edx        ; base
.text:0000000000004919                 mov     edi, 1FBFh      ; category_mask
.text:000000000000491E                 call    _newlocale
.text:0000000000004923                 mov     cs:c_locale_cache, rax
.text:000000000000492A                 jmp     short loc_48D8
.text:000000000000492A ; } // starts at 48C0
.text:000000000000492A c_strtod        endp
.text:000000000000492A
.text:000000000000492A ; ---------------------------------------------------------------------------
.text:000000000000492C                 align 10h
.text:0000000000004930
.text:0000000000004930 ; =============== S U B R O U T I N E =======================================
.text:0000000000004930
.text:0000000000004930 ; Attributes: info_from_lumina
.text:0000000000004930
.text:0000000000004930 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004930                 public close_stream
.text:0000000000004930 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004930                                         ; close_stdout+33↑p
.text:0000000000004930 ; __unwind {
.text:0000000000004930                 push    r12
.text:0000000000004932                 push    rbp
.text:0000000000004933                 mov     rbp, rdi
.text:0000000000004936                 push    rbx
.text:0000000000004937                 call    ___fpending
.text:000000000000493C                 mov     ebx, [rbp+0]
.text:000000000000493F                 mov     rdi, rbp        ; stream
.text:0000000000004942                 mov     r12, rax
.text:0000000000004945                 call    rpl_fclose
.text:000000000000494A                 and     ebx, 20h
.text:000000000000494D                 test    ebx, ebx
.text:000000000000494F                 jnz     short loc_4968
.text:0000000000004951                 test    eax, eax
.text:0000000000004953                 jz      short loc_495F
.text:0000000000004955                 test    r12, r12
.text:0000000000004958                 mov     eax, 0FFFFFFFFh
.text:000000000000495D                 jz      short loc_4998
.text:000000000000495F
.text:000000000000495F loc_495F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000495F                 pop     rbx
.text:0000000000004960                 pop     rbp
.text:0000000000004961                 pop     r12
.text:0000000000004963                 retn
.text:0000000000004963 ; ---------------------------------------------------------------------------
.text:0000000000004964                 align 8
.text:0000000000004968
.text:0000000000004968 loc_4968:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004968                 test    eax, eax
.text:000000000000496A                 jnz     short loc_4988
.text:000000000000496C                 call    ___errno_location
.text:0000000000004971                 mov     dword ptr [rax], 0
.text:0000000000004977                 mov     eax, 0FFFFFFFFh
.text:000000000000497C                 pop     rbx
.text:000000000000497D                 pop     rbp
.text:000000000000497E                 pop     r12
.text:0000000000004980                 retn
.text:0000000000004980 ; ---------------------------------------------------------------------------
.text:0000000000004981                 align 8
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004988                 pop     rbx
.text:0000000000004989                 mov     eax, 0FFFFFFFFh
.text:000000000000498E                 pop     rbp
.text:000000000000498F                 pop     r12
.text:0000000000004991                 retn
.text:0000000000004991 ; ---------------------------------------------------------------------------
.text:0000000000004992                 align 8
.text:0000000000004998
.text:0000000000004998 loc_4998:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004998                 call    ___errno_location
.text:000000000000499D                 cmp     dword ptr [rax], 9
.text:00000000000049A0                 pop     rbx
.text:00000000000049A1                 pop     rbp
.text:00000000000049A2                 pop     r12
.text:00000000000049A4                 setnz   al
.text:00000000000049A7                 movzx   eax, al
.text:00000000000049AA                 neg     eax
.text:00000000000049AC                 retn
.text:00000000000049AC ; } // starts at 4930
.text:00000000000049AC close_stream    endp
.text:00000000000049AC
.text:00000000000049AC ; ---------------------------------------------------------------------------
.text:00000000000049AD                 align 10h
.text:00000000000049B0
.text:00000000000049B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049B0
.text:00000000000049B0
.text:00000000000049B0                 public dtotimespec
.text:00000000000049B0 dtotimespec     proc near               ; CODE XREF: xnanosleep+19↑p
.text:00000000000049B0 ; __unwind {
.text:00000000000049B0                 ucomisd xmm0, cs:qword_5950
.text:00000000000049B8                 jbe     loc_4A50
.text:00000000000049BE                 movsd   xmm1, cs:qword_5958
.text:00000000000049C6                 ucomisd xmm1, xmm0
.text:00000000000049CA                 jbe     short loc_4A38
.text:00000000000049CC                 cvttsd2si rsi, xmm0
.text:00000000000049D1                 pxor    xmm1, xmm1
.text:00000000000049D5                 xor     ecx, ecx
.text:00000000000049D7                 cvtsi2sd xmm1, rsi
.text:00000000000049DC                 subsd   xmm0, xmm1
.text:00000000000049E0                 pxor    xmm1, xmm1
.text:00000000000049E4                 mulsd   xmm0, cs:qword_5960
.text:00000000000049EC                 cvttsd2si rdx, xmm0
.text:00000000000049F1                 cvtsi2sd xmm1, rdx
.text:00000000000049F6                 ucomisd xmm0, xmm1
.text:00000000000049FA                 setnbe  cl
.text:00000000000049FD                 add     rcx, rdx
.text:0000000000004A00                 mov     rdx, 112E0BE826D694B3h
.text:0000000000004A0A                 mov     rax, rcx
.text:0000000000004A0D                 imul    rdx
.text:0000000000004A10                 mov     rax, rcx
.text:0000000000004A13                 sar     rax, 3Fh
.text:0000000000004A17                 sar     rdx, 1Ah
.text:0000000000004A1B                 sub     rdx, rax
.text:0000000000004A1E                 lea     rax, [rdx+rsi]
.text:0000000000004A22                 imul    rdx, 3B9ACA00h
.text:0000000000004A29                 sub     rcx, rdx
.text:0000000000004A2C                 mov     rdx, rcx
.text:0000000000004A2F                 js      short loc_4A60
.text:0000000000004A31                 rep retn
.text:0000000000004A31 ; ---------------------------------------------------------------------------
.text:0000000000004A33                 align 8
.text:0000000000004A38
.text:0000000000004A38 loc_4A38:                               ; CODE XREF: dtotimespec+1A↑j
.text:0000000000004A38                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000004A42                 mov     edx, 3B9AC9FFh
.text:0000000000004A47                 retn
.text:0000000000004A47 ; ---------------------------------------------------------------------------
.text:0000000000004A48                 align 10h
.text:0000000000004A50
.text:0000000000004A50 loc_4A50:                               ; CODE XREF: dtotimespec+8↑j
.text:0000000000004A50                 mov     rax, 8000000000000000h
.text:0000000000004A5A                 xor     edx, edx
.text:0000000000004A5C                 retn
.text:0000000000004A5C ; ---------------------------------------------------------------------------
.text:0000000000004A5D                 align 20h
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: dtotimespec+7F↑j
.text:0000000000004A60                 sub     rax, 1
.text:0000000000004A64                 add     rdx, 3B9ACA00h
.text:0000000000004A6B                 retn
.text:0000000000004A6B ; } // starts at 49B0
.text:0000000000004A6B dtotimespec     endp
.text:0000000000004A6B
.text:0000000000004A6B ; ---------------------------------------------------------------------------
.text:0000000000004A6C                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70
.text:0000000000004A70                 public hard_locale
.text:0000000000004A70 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 sub     rsp, 8
.text:0000000000004A74                 xor     esi, esi        ; locale
.text:0000000000004A76                 call    _setlocale
.text:0000000000004A7B                 mov     rdx, rax
.text:0000000000004A7E                 mov     eax, 1
.text:0000000000004A83                 test    rdx, rdx
.text:0000000000004A86                 jz      short loc_4AA5
.text:0000000000004A88                 lea     rdi, locale     ; "C"
.text:0000000000004A8F                 mov     ecx, 2
.text:0000000000004A94                 mov     rsi, rdx
.text:0000000000004A97                 repe cmpsb
.text:0000000000004A99                 setnbe  cl
.text:0000000000004A9C                 sbb     cl, 0
.text:0000000000004A9F                 xor     eax, eax
.text:0000000000004AA1                 test    cl, cl
.text:0000000000004AA3                 jnz     short loc_4AB0
.text:0000000000004AA5
.text:0000000000004AA5 loc_4AA5:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004AA5                 add     rsp, 8
.text:0000000000004AA9                 retn
.text:0000000000004AA9 ; ---------------------------------------------------------------------------
.text:0000000000004AAA                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 loc_4AB0:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004AB0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004AB7                 mov     ecx, 6
.text:0000000000004ABC                 mov     rsi, rdx
.text:0000000000004ABF                 repe cmpsb
.text:0000000000004AC1                 setnbe  al
.text:0000000000004AC4                 sbb     al, 0
.text:0000000000004AC6                 test    al, al
.text:0000000000004AC8                 setnz   al
.text:0000000000004ACB                 add     rsp, 8
.text:0000000000004ACF                 retn
.text:0000000000004ACF ; } // starts at 4A70
.text:0000000000004ACF hard_locale     endp
.text:0000000000004ACF
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0                 public locale_charset
.text:0000000000004AD0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 sub     rsp, 8
.text:0000000000004AD4                 mov     edi, 0Eh        ; item
.text:0000000000004AD9                 call    _nl_langinfo
.text:0000000000004ADE                 test    rax, rax
.text:0000000000004AE1                 jz      short loc_4B00
.text:0000000000004AE3                 cmp     byte ptr [rax], 0
.text:0000000000004AE6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000004AED                 cmovz   rax, rdx
.text:0000000000004AF1                 add     rsp, 8
.text:0000000000004AF5                 retn
.text:0000000000004AF5 ; ---------------------------------------------------------------------------
.text:0000000000004AF6                 align 20h
.text:0000000000004B00
.text:0000000000004B00 loc_4B00:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004B00                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004B07                 add     rsp, 8
.text:0000000000004B0B                 retn
.text:0000000000004B0B ; } // starts at 4AD0
.text:0000000000004B0B locale_charset  endp
.text:0000000000004B0B
.text:0000000000004B0B ; ---------------------------------------------------------------------------
.text:0000000000004B0C                 align 10h
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10 ; Attributes: info_from_lumina
.text:0000000000004B10
.text:0000000000004B10 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004B10                 public rpl_fclose
.text:0000000000004B10 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 push    r12
.text:0000000000004B12                 push    rbp
.text:0000000000004B13                 push    rbx
.text:0000000000004B14                 mov     rbx, rdi
.text:0000000000004B17                 call    _fileno
.text:0000000000004B1C                 test    eax, eax
.text:0000000000004B1E                 mov     rdi, rbx        ; fp
.text:0000000000004B21                 js      short loc_4B77
.text:0000000000004B23                 call    ___freading
.text:0000000000004B28                 test    eax, eax
.text:0000000000004B2A                 jnz     short loc_4B58
.text:0000000000004B2C
.text:0000000000004B2C loc_4B2C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004B2C                 mov     rdi, rbx        ; stream
.text:0000000000004B2F                 call    rpl_fflush
.text:0000000000004B34                 test    eax, eax
.text:0000000000004B36                 jz      short loc_4B74
.text:0000000000004B38                 call    ___errno_location
.text:0000000000004B3D                 mov     r12d, [rax]
.text:0000000000004B40                 mov     rdi, rbx        ; stream
.text:0000000000004B43                 mov     rbp, rax
.text:0000000000004B46                 call    _fclose
.text:0000000000004B4B                 test    r12d, r12d
.text:0000000000004B4E                 jnz     short loc_4B80
.text:0000000000004B50
.text:0000000000004B50 loc_4B50:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004B50                 pop     rbx
.text:0000000000004B51                 pop     rbp
.text:0000000000004B52                 pop     r12
.text:0000000000004B54                 retn
.text:0000000000004B54 ; ---------------------------------------------------------------------------
.text:0000000000004B55                 align 8
.text:0000000000004B58
.text:0000000000004B58 loc_4B58:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004B58                 mov     rdi, rbx        ; stream
.text:0000000000004B5B                 call    _fileno
.text:0000000000004B60                 xor     esi, esi        ; offset
.text:0000000000004B62                 mov     edx, 1          ; whence
.text:0000000000004B67                 mov     edi, eax        ; fd
.text:0000000000004B69                 call    _lseek
.text:0000000000004B6E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B72                 jnz     short loc_4B2C
.text:0000000000004B74
.text:0000000000004B74 loc_4B74:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004B74                 mov     rdi, rbx        ; stream
.text:0000000000004B77
.text:0000000000004B77 loc_4B77:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004B77                 pop     rbx
.text:0000000000004B78                 pop     rbp
.text:0000000000004B79                 pop     r12
.text:0000000000004B7B                 jmp     _fclose
.text:0000000000004B80 ; ---------------------------------------------------------------------------
.text:0000000000004B80
.text:0000000000004B80 loc_4B80:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004B80                 mov     [rbp+0], r12d
.text:0000000000004B84                 mov     eax, 0FFFFFFFFh
.text:0000000000004B89                 jmp     short loc_4B50
.text:0000000000004B89 ; } // starts at 4B10
.text:0000000000004B89 rpl_fclose      endp
.text:0000000000004B89
.text:0000000000004B89 ; ---------------------------------------------------------------------------
.text:0000000000004B8B                 align 10h
.text:0000000000004B90
.text:0000000000004B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B90
.text:0000000000004B90 ; Attributes: info_from_lumina
.text:0000000000004B90
.text:0000000000004B90 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004B90                 public rpl_fflush
.text:0000000000004B90 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004B90 ; __unwind {
.text:0000000000004B90                 test    rdi, rdi
.text:0000000000004B93                 push    rbx
.text:0000000000004B94                 mov     rbx, rdi
.text:0000000000004B97                 jz      short loc_4BAA
.text:0000000000004B99                 call    ___freading
.text:0000000000004B9E                 test    eax, eax
.text:0000000000004BA0                 jz      short loc_4BAA
.text:0000000000004BA2                 test    dword ptr [rbx], 100h
.text:0000000000004BA8                 jnz     short loc_4BB8
.text:0000000000004BAA
.text:0000000000004BAA loc_4BAA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004BAA                                         ; rpl_fflush+10↑j
.text:0000000000004BAA                 mov     rdi, rbx        ; stream
.text:0000000000004BAD                 pop     rbx
.text:0000000000004BAE                 jmp     _fflush
.text:0000000000004BAE ; ---------------------------------------------------------------------------
.text:0000000000004BB3                 align 8
.text:0000000000004BB8
.text:0000000000004BB8 loc_4BB8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004BB8                 mov     rdi, rbx
.text:0000000000004BBB                 mov     edx, 1
.text:0000000000004BC0                 xor     esi, esi
.text:0000000000004BC2                 call    rpl_fseeko
.text:0000000000004BC7                 mov     rdi, rbx        ; stream
.text:0000000000004BCA                 pop     rbx
.text:0000000000004BCB                 jmp     _fflush
.text:0000000000004BCB ; } // starts at 4B90
.text:0000000000004BCB rpl_fflush      endp
.text:0000000000004BCB
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0 ; Attributes: info_from_lumina
.text:0000000000004BD0
.text:0000000000004BD0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004BD0                 public rpl_fseeko
.text:0000000000004BD0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 mov     rax, [rdi+8]
.text:0000000000004BD4                 cmp     [rdi+10h], rax
.text:0000000000004BD8                 jz      short loc_4BE0
.text:0000000000004BDA
.text:0000000000004BDA loc_4BDA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004BDA                                         ; rpl_fseeko+1F↓j
.text:0000000000004BDA                 jmp     _fseeko
.text:0000000000004BDA ; ---------------------------------------------------------------------------
.text:0000000000004BDF                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004BE0                 mov     rax, [rdi+20h]
.text:0000000000004BE4                 cmp     [rdi+28h], rax
.text:0000000000004BE8                 jnz     short loc_4BDA
.text:0000000000004BEA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004BEF                 jnz     short loc_4BDA
.text:0000000000004BF1                 push    r12
.text:0000000000004BF3                 push    rbp
.text:0000000000004BF4                 mov     r12d, edx
.text:0000000000004BF7                 push    rbx
.text:0000000000004BF8                 mov     rbp, rsi
.text:0000000000004BFB                 mov     rbx, rdi
.text:0000000000004BFE                 call    _fileno
.text:0000000000004C03                 mov     edx, r12d       ; whence
.text:0000000000004C06                 mov     rsi, rbp        ; offset
.text:0000000000004C09                 mov     edi, eax        ; fd
.text:0000000000004C0B                 call    _lseek
.text:0000000000004C10                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C14                 jz      short loc_4C22
.text:0000000000004C16                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004C19                 mov     [rbx+90h], rax
.text:0000000000004C20                 xor     eax, eax
.text:0000000000004C22
.text:0000000000004C22 loc_4C22:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004C22                 pop     rbx
.text:0000000000004C23                 pop     rbp
.text:0000000000004C24                 pop     r12
.text:0000000000004C26                 retn
.text:0000000000004C26 ; } // starts at 4BD0
.text:0000000000004C26 rpl_fseeko      endp
.text:0000000000004C26
.text:0000000000004C26 ; ---------------------------------------------------------------------------
.text:0000000000004C27                 align 10h
.text:0000000000004C30
.text:0000000000004C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C30
.text:0000000000004C30 ; Attributes: info_from_lumina
.text:0000000000004C30
.text:0000000000004C30 ; void _libc_csu_init(void)
.text:0000000000004C30                 public __libc_csu_init
.text:0000000000004C30 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004C30 ; __unwind {
.text:0000000000004C30                 push    r15
.text:0000000000004C32                 push    r14
.text:0000000000004C34                 mov     r15, rdx
.text:0000000000004C37                 push    r13
.text:0000000000004C39                 push    r12
.text:0000000000004C3B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004C42                 push    rbp
.text:0000000000004C43                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000004C4A                 push    rbx
.text:0000000000004C4B                 mov     r13d, edi
.text:0000000000004C4E                 mov     r14, rsi
.text:0000000000004C51                 sub     rbp, r12
.text:0000000000004C54                 sub     rsp, 8
.text:0000000000004C58                 sar     rbp, 3
.text:0000000000004C5C                 call    _init_proc
.text:0000000000004C61                 test    rbp, rbp
.text:0000000000004C64                 jz      short loc_4C86
.text:0000000000004C66                 xor     ebx, ebx
.text:0000000000004C68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004C70
.text:0000000000004C70 loc_4C70:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004C70                 mov     rdx, r15
.text:0000000000004C73                 mov     rsi, r14
.text:0000000000004C76                 mov     edi, r13d
.text:0000000000004C79                 call    ds:(__frame_dummy_init_array_entry - 206BB0h)[r12+rbx*8]
.text:0000000000004C7D                 add     rbx, 1
.text:0000000000004C81                 cmp     rbp, rbx
.text:0000000000004C84                 jnz     short loc_4C70
.text:0000000000004C86
.text:0000000000004C86 loc_4C86:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004C86                 add     rsp, 8
.text:0000000000004C8A                 pop     rbx
.text:0000000000004C8B                 pop     rbp
.text:0000000000004C8C                 pop     r12
.text:0000000000004C8E                 pop     r13
.text:0000000000004C90                 pop     r14
.text:0000000000004C92                 pop     r15
.text:0000000000004C94                 retn
.text:0000000000004C94 ; } // starts at 4C30
.text:0000000000004C94 __libc_csu_init endp
.text:0000000000004C94
.text:0000000000004C94 ; ---------------------------------------------------------------------------
.text:0000000000004C95                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0 ; void _libc_csu_fini(void)
.text:0000000000004CA0                 public __libc_csu_fini
.text:0000000000004CA0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 rep retn
.text:0000000000004CA0 ; } // starts at 4CA0
.text:0000000000004CA0 __libc_csu_fini endp
.text:0000000000004CA0
.text:0000000000004CA0 ; ---------------------------------------------------------------------------
.text:0000000000004CA2                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0
.text:0000000000004CB0 atexit          proc near               ; CODE XREF: main+62↑p
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004CB7                 xor     esi, esi        ; obj
.text:0000000000004CB9                 jmp     ___cxa_atexit
.text:0000000000004CB9 ; } // starts at 4CB0
.text:0000000000004CB9 atexit          endp
.text:0000000000004CB9
.text:0000000000004CB9 _text           ends
.text:0000000000004CB9
LOAD:0000000000004CBE ; ===========================================================================
LOAD:0000000000004CBE
LOAD:0000000000004CBE ; Segment type: Pure code
LOAD:0000000000004CBE ; Segment permissions: Read/Execute
LOAD:0000000000004CBE LOAD            segment byte public 'CODE' use64
LOAD:0000000000004CBE                 assume cs:LOAD
LOAD:0000000000004CBE                 ;org 4CBEh
LOAD:0000000000004CBE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004CBE                 align 20h
LOAD:0000000000004CBE LOAD            ends
LOAD:0000000000004CBE
.fini:0000000000004CC0 ; ===========================================================================
.fini:0000000000004CC0
.fini:0000000000004CC0 ; Segment type: Pure code
.fini:0000000000004CC0 ; Segment permissions: Read/Execute
.fini:0000000000004CC0 _fini           segment dword public 'CODE' use64
.fini:0000000000004CC0                 assume cs:_fini
.fini:0000000000004CC0                 ;org 4CC0h
.fini:0000000000004CC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004CC0
.fini:0000000000004CC0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004CC0
.fini:0000000000004CC0
.fini:0000000000004CC0                 public _term_proc
.fini:0000000000004CC0 _term_proc      proc near
.fini:0000000000004CC0                 sub     rsp, 8          ; _fini
.fini:0000000000004CC4                 add     rsp, 8
.fini:0000000000004CC8                 retn
.fini:0000000000004CC8 _term_proc      endp
.fini:0000000000004CC8
.fini:0000000000004CC8 _fini           ends
.fini:0000000000004CC8
LOAD:0000000000004CC9 ; ===========================================================================
LOAD:0000000000004CC9
LOAD:0000000000004CC9 ; Segment type: Pure code
LOAD:0000000000004CC9 ; Segment permissions: Read/Execute
LOAD:0000000000004CC9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004CC9                 assume cs:LOAD
LOAD:0000000000004CC9                 ;org 4CC9h
LOAD:0000000000004CC9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004CC9                 align 20h
LOAD:0000000000004CC9 LOAD            ends
LOAD:0000000000004CC9
.rodata:0000000000004CE0 ; ===========================================================================
.rodata:0000000000004CE0
.rodata:0000000000004CE0 ; Segment type: Pure data
.rodata:0000000000004CE0 ; Segment permissions: Read
.rodata:0000000000004CE0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004CE0                 assume cs:_rodata
.rodata:0000000000004CE0                 ;org 4CE0h
.rodata:0000000000004CE0                 public _IO_stdin_used
.rodata:0000000000004CE0 _IO_stdin_used  db    1
.rodata:0000000000004CE1                 db    0
.rodata:0000000000004CE2                 db    2
.rodata:0000000000004CE3                 db    0
.rodata:0000000000004CE4 aSleep          db 'sleep',0            ; DATA XREF: main+7E↑o
.rodata:0000000000004CE4                                         ; usage+E4↑o ...
.rodata:0000000000004CEA asc_4CEA        db '[',0                ; DATA XREF: usage+D1↑o
.rodata:0000000000004CEC aTestInvocation db 'test invocation',0  ; DATA XREF: usage+101↑o
.rodata:0000000000004CFC aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004CFC                                         ; DATA XREF: usage+12D↑o
.rodata:0000000000004CFC                                         ; usage+21C↑o ...
.rodata:0000000000004D12 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+139↑o
.rodata:0000000000004D1C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+145↑o
.rodata:0000000000004D2B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+D8↑o
.rodata:0000000000004D35 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+10D↑o
.rodata:0000000000004D3F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+C5↑o
.rodata:0000000000004D49 ; const char aSOnlineHelpS[]
.rodata:0000000000004D49 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+18A↑o
.rodata:0000000000004D49                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004D60 unk_4D60        db  47h ; G             ; DATA XREF: main+77↑o
.rodata:0000000000004D60                                         ; usage+1A6↑o ...
.rodata:0000000000004D61                 db  4Eh ; N
.rodata:0000000000004D62                 db  55h ; U
.rodata:0000000000004D63                 db  20h
.rodata:0000000000004D64 ; const char domainname[]
.rodata:0000000000004D64 domainname      db 'coreutils',0        ; DATA XREF: main+43↑o
.rodata:0000000000004D64                                         ; main+4F↑o ...
.rodata:0000000000004D6E ; const char s2[]
.rodata:0000000000004D6E s2              db 'en_',0              ; DATA XREF: usage+1CD↑o
.rodata:0000000000004D6E                                         ; usage+28E↑o
.rodata:0000000000004D72 ; const char aFullDocumentat[]
.rodata:0000000000004D72 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004D72                                         ; DATA XREF: usage:loc_1AE9↑o
.rodata:0000000000004D72                                         ; usage:loc_1BA6↑o
.rodata:0000000000004D8D ; const char dirname[]
.rodata:0000000000004D8D dirname         db '/usr/local/share/locale',0
.rodata:0000000000004D8D                                         ; DATA XREF: main+3C↑o
.rodata:0000000000004DA5 aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: main+67↑o
.rodata:0000000000004DB1 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+8C↑o
.rodata:0000000000004DBE ; const char aMissingOperand[]
.rodata:0000000000004DBE aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_17B9↑o
.rodata:0000000000004DCE ; const char msgid[]
.rodata:0000000000004DCE msgid           db 'invalid time interval %s',0
.rodata:0000000000004DCE                                         ; DATA XREF: main+E5↑o
.rodata:0000000000004DE7 ; const char aCannotReadReal[]
.rodata:0000000000004DE7 aCannotReadReal db 'cannot read realtime clock',0
.rodata:0000000000004DE7                                         ; DATA XREF: main:loc_178D↑o
.rodata:0000000000004E02                 align 8
.rodata:0000000000004E08 ; const char aTrySHelpForMor[]
.rodata:0000000000004E08 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004E08                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004E2F                 align 10h
.rodata:0000000000004E30 ; const char aUsageSNumberSu[]
.rodata:0000000000004E30 aUsageSNumberSu db 'Usage: %s NUMBER[SUFFIX]...',0Ah
.rodata:0000000000004E30                                         ; DATA XREF: usage:loc_195D↑o
.rodata:0000000000004E30                 db '  or:  %s OPTION',0Ah
.rodata:0000000000004E30                 db 'Pause for NUMBER seconds.  SUFFIX may be ',27h,'s',27h,' for seco'
.rodata:0000000000004E30                 db 'nds (the default),',0Ah
.rodata:0000000000004E30                 db 27h,'m',27h,' for minutes, ',27h,'h',27h,' for hours or ',27h,'d',27h
.rodata:0000000000004E30                 db ' for days.  NUMBER need not be an',0Ah
.rodata:0000000000004E30                 db 'integer.  Given two or more arguments, pause for the amount of ti'
.rodata:0000000000004E30                 db 'me',0Ah
.rodata:0000000000004E30                 db 'specified by the sum of their values.',0Ah
.rodata:0000000000004E30                 db 0Ah,0
.rodata:0000000000004F58 ; const char aHelpDisplayThi[]
.rodata:0000000000004F58 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004F58                                         ; DATA XREF: usage+87↑o
.rodata:0000000000004F85                 align 8
.rodata:0000000000004F88 ; const char aVersionOutputV[]
.rodata:0000000000004F88 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004F88                                         ; DATA XREF: usage+AC↑o
.rodata:0000000000004FBE                 align 20h
.rodata:0000000000004FC0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004FC0                                         ; DATA XREF: usage+19F↑o
.rodata:0000000000004FC0                                         ; usage+203↑o ...
.rodata:0000000000004FE8 ; const char aReportAnyTrans[]
.rodata:0000000000004FE8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004FE8                                         ; DATA XREF: usage+2F7↑o
.rodata:0000000000004FE8                 db 'am/>',0Ah,0
.rodata:000000000000502F                 align 10h
.rodata:0000000000005030 ; const char aOrAvailableLoc[]
.rodata:0000000000005030 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005030                                         ; DATA XREF: usage:loc_1B2E↑o
.rodata:0000000000005063                 align 8
.rodata:0000000000005068 qword_5068      dq 404E000000000000h    ; DATA XREF: main+1F7↑r
.rodata:0000000000005070 qword_5070      dq 40AC200000000000h    ; DATA XREF: main:loc_1745↑r
.rodata:0000000000005078 qword_5078      dq 40F5180000000000h    ; DATA XREF: main+1A2↑r
.rodata:0000000000005080 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005085 ; const char aWriteError[]
.rodata:0000000000005085 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1D43↑o
.rodata:0000000000005091 ; const char format[]
.rodata:0000000000005091 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005091                                         ; close_stdout+8F↑o ...
.rodata:0000000000005098 ; const char shortopts[]
.rodata:0000000000005098 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000005098                                         ; parse_gnu_standard_options_only+72↑o
.rodata:000000000000509A aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000509F aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:00000000000050A7                 align 8
.rodata:00000000000050A8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000050A8                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000050E0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000050E8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000050EC unk_50EC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000050ED                 db  80h
.rodata:00000000000050EE                 db  98h
.rodata:00000000000050EF                 db    0
.rodata:00000000000050F0 unk_50F0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000050F1                 db  80h
.rodata:00000000000050F2                 db  99h
.rodata:00000000000050F3                 db    0
.rodata:00000000000050F4 unk_50F4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000050F5                 db    7
.rodata:00000000000050F6                 db  65h ; e
.rodata:00000000000050F7                 db    0
.rodata:00000000000050F8 unk_50F8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000050F9                 db 0AFh
.rodata:00000000000050FA                 db    0
.rodata:00000000000050FB unk_50FB        db  22h ; "             ; DATA XREF: gettext_quote:loc_20F0↑o
.rodata:00000000000050FB                                         ; quotearg_buffer_restyled:loc_2EAB↑o ...
.rodata:00000000000050FC                 db    0
.rodata:00000000000050FD ; const char asc_50FD[2]
.rodata:00000000000050FD asc_50FD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000050FD                                         ; quotearg_buffer_restyled:loc_2273↑o ...
.rodata:00000000000050FF ; const char asc_50FF[2]
.rodata:00000000000050FF asc_50FF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000050FF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005101 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005109 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:000000000000510F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:000000000000511C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:000000000000511C                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000005129 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005129                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:000000000000513D aC_0            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:000000000000513F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000005147 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:000000000000514F                 align 20h
.rodata:0000000000005160 jpt_2251        dd offset loc_2FFA - 5160h
.rodata:0000000000005160                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005160                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005160                 dd offset loc_2253 - 5160h ; jump table for switch statement
.rodata:0000000000005160                 dd offset loc_3228 - 5160h
.rodata:0000000000005160                 dd offset loc_3034 - 5160h
.rodata:0000000000005160                 dd offset loc_2E24 - 5160h
.rodata:0000000000005160                 dd offset loc_2E80 - 5160h
.rodata:0000000000005160                 dd offset loc_2ED5 - 5160h
.rodata:0000000000005160                 dd offset loc_2F1A - 5160h
.rodata:0000000000005160                 dd offset loc_2F54 - 5160h
.rodata:0000000000005160                 dd offset loc_2F54 - 5160h
.rodata:0000000000005160                 dd offset loc_2F54 - 5160h
.rodata:000000000000518C jpt_23AE        dd offset loc_25D0 - 518Ch, offset def_23AE - 518Ch, offset def_23AE - 518Ch
.rodata:000000000000518C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000518C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000518C                 dd offset def_23AE - 518Ch, offset def_23AE - 518Ch, offset def_23AE - 518Ch ; jump table for switch statement
.rodata:000000000000518C                 dd offset def_23AE - 518Ch, offset loc_2610 - 518Ch, offset loc_2518 - 518Ch
.rodata:000000000000518C                 dd offset loc_24D8 - 518Ch, offset loc_26A0 - 518Ch, offset loc_2690 - 518Ch
.rodata:000000000000518C                 dd offset loc_2680 - 518Ch, offset loc_2670 - 518Ch, offset def_23AE - 518Ch
.rodata:000000000000518C                 dd offset def_23AE - 518Ch, offset def_23AE - 518Ch, offset def_23AE - 518Ch
.rodata:000000000000518C                 dd offset def_23AE - 518Ch, offset def_23AE - 518Ch, offset def_23AE - 518Ch
.rodata:000000000000518C                 dd offset def_23AE - 518Ch, offset def_23AE - 518Ch, offset def_23AE - 518Ch
.rodata:000000000000518C                 dd offset def_23AE - 518Ch, offset def_23AE - 518Ch, offset def_23AE - 518Ch
.rodata:000000000000518C                 dd offset def_23AE - 518Ch, offset def_23AE - 518Ch, offset def_23AE - 518Ch
.rodata:000000000000518C                 dd offset def_23AE - 518Ch, offset def_23AE - 518Ch, offset loc_2660 - 518Ch
.rodata:000000000000518C                 dd offset loc_2650 - 518Ch, offset loc_2650 - 518Ch, offset loc_2620 - 518Ch
.rodata:000000000000518C                 dd offset loc_2650 - 518Ch, offset loc_25F8 - 518Ch, offset loc_2650 - 518Ch
.rodata:000000000000518C                 dd offset loc_24B3 - 518Ch, offset loc_2650 - 518Ch, offset loc_2650 - 518Ch
.rodata:000000000000518C                 dd offset loc_2650 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_2650 - 518Ch
.rodata:000000000000518C                 dd offset loc_2650 - 518Ch, offset loc_2650 - 518Ch, offset loc_2650 - 518Ch
.rodata:000000000000518C                 dd offset loc_2483 - 518Ch, offset def_23AE - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_2650 - 518Ch, offset loc_2528 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_2650 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_2650 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch, offset loc_25F8 - 518Ch
.rodata:000000000000518C                 dd offset loc_23B3 - 518Ch, offset loc_2650 - 518Ch, offset loc_23B3 - 518Ch
.rodata:000000000000518C                 dd offset loc_2620 - 518Ch
.rodata:0000000000005388 jpt_273A        dd offset loc_27A0 - 5388h, offset def_273A - 5388h, offset def_273A - 5388h
.rodata:0000000000005388                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005388                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005388                 dd offset def_273A - 5388h, offset def_273A - 5388h, offset def_273A - 5388h ; jump table for switch statement
.rodata:0000000000005388                 dd offset def_273A - 5388h, offset loc_2790 - 5388h, offset loc_28E0 - 5388h
.rodata:0000000000005388                 dd offset loc_28C8 - 5388h, offset loc_2778 - 5388h, offset loc_28B8 - 5388h
.rodata:0000000000005388                 dd offset loc_2760 - 5388h, offset loc_28A0 - 5388h, offset def_273A - 5388h
.rodata:0000000000005388                 dd offset def_273A - 5388h, offset def_273A - 5388h, offset def_273A - 5388h
.rodata:0000000000005388                 dd offset def_273A - 5388h, offset def_273A - 5388h, offset def_273A - 5388h
.rodata:0000000000005388                 dd offset def_273A - 5388h, offset def_273A - 5388h, offset def_273A - 5388h
.rodata:0000000000005388                 dd offset def_273A - 5388h, offset def_273A - 5388h, offset def_273A - 5388h
.rodata:0000000000005388                 dd offset def_273A - 5388h, offset def_273A - 5388h, offset def_273A - 5388h
.rodata:0000000000005388                 dd offset def_273A - 5388h, offset def_273A - 5388h, offset loc_2888 - 5388h
.rodata:0000000000005388                 dd offset loc_2870 - 5388h, offset loc_2870 - 5388h, offset loc_2858 - 5388h
.rodata:0000000000005388                 dd offset loc_2870 - 5388h, offset loc_2840 - 5388h, offset loc_2870 - 5388h
.rodata:0000000000005388                 dd offset loc_24B0 - 5388h, offset loc_2870 - 5388h, offset loc_2870 - 5388h
.rodata:0000000000005388                 dd offset loc_2870 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2870 - 5388h
.rodata:0000000000005388                 dd offset loc_2870 - 5388h, offset loc_2870 - 5388h, offset loc_2870 - 5388h
.rodata:0000000000005388                 dd offset loc_2480 - 5388h, offset def_273A - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2870 - 5388h, offset loc_2740 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2870 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2870 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_2840 - 5388h, offset loc_2840 - 5388h, offset loc_2840 - 5388h
.rodata:0000000000005388                 dd offset loc_23B0 - 5388h, offset loc_2870 - 5388h, offset loc_23B0 - 5388h
.rodata:0000000000005388                 dd offset loc_2858 - 5388h
.rodata:0000000000005584                 align 20h
.rodata:00000000000055A0                 public quoting_style_vals
.rodata:00000000000055A0 quoting_style_vals db    0
.rodata:00000000000055A1                 db    0
.rodata:00000000000055A2                 db    0
.rodata:00000000000055A3                 db    0
.rodata:00000000000055A4                 db    1
.rodata:00000000000055A5                 db    0
.rodata:00000000000055A6                 db    0
.rodata:00000000000055A7                 db    0
.rodata:00000000000055A8                 db    2
.rodata:00000000000055A9                 db    0
.rodata:00000000000055AA                 db    0
.rodata:00000000000055AB                 db    0
.rodata:00000000000055AC                 db    3
.rodata:00000000000055AD                 db    0
.rodata:00000000000055AE                 db    0
.rodata:00000000000055AF                 db    0
.rodata:00000000000055B0                 db    4
.rodata:00000000000055B1                 db    0
.rodata:00000000000055B2                 db    0
.rodata:00000000000055B3                 db    0
.rodata:00000000000055B4                 db    5
.rodata:00000000000055B5                 db    0
.rodata:00000000000055B6                 db    0
.rodata:00000000000055B7                 db    0
.rodata:00000000000055B8                 db    6
.rodata:00000000000055B9                 db    0
.rodata:00000000000055BA                 db    0
.rodata:00000000000055BB                 db    0
.rodata:00000000000055BC                 db    7
.rodata:00000000000055BD                 db    0
.rodata:00000000000055BE                 db    0
.rodata:00000000000055BF                 db    0
.rodata:00000000000055C0                 db    8
.rodata:00000000000055C1                 db    0
.rodata:00000000000055C2                 db    0
.rodata:00000000000055C3                 db    0
.rodata:00000000000055C4                 db    9
.rodata:00000000000055C5                 db    0
.rodata:00000000000055C6                 db    0
.rodata:00000000000055C7                 db    0
.rodata:00000000000055C8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000055D4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000055DB ; const char aC[]
.rodata:00000000000055DB aC              db '(C)',0              ; DATA XREF: version_etc_arn:loc_3D9C↑o
.rodata:00000000000055DF ; const char aWrittenByS[]
.rodata:00000000000055DF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000055DF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000055EF ; const char aWrittenBySAndS[]
.rodata:00000000000055EF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000055EF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005606 ; const char aWrittenBySSAnd[]
.rodata:0000000000005606 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005606                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005622 ; const char aReportBugsToS[]
.rodata:0000000000005622 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005622                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005637 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005637                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000564D ; const char aSHomePageS[]
.rodata:000000000000564D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000564D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005661                 align 8
.rodata:0000000000005668 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005668 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005668                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005668                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005668                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005668                 db '.',0Ah
.rodata:0000000000005668                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005668                 db 0Ah,0
.rodata:0000000000005734                 align 8
.rodata:0000000000005738 ; const char aWrittenBySSSAn[]
.rodata:0000000000005738 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005738                                         ; DATA XREF: version_etc_arn:loc_3FF0↑o
.rodata:0000000000005738                 db 'and %s.',0Ah,0
.rodata:0000000000005758 ; const char aWrittenBySSSSA[]
.rodata:0000000000005758 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005758                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005758                 db '%s, and %s.',0Ah,0
.rodata:000000000000577C                 align 20h
.rodata:0000000000005780 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005780 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005780                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005780                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000057A8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000057A8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000057A8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000057A8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000057D4                 align 8
.rodata:00000000000057D8 ; const char aWrittenBySSSSS[]
.rodata:00000000000057D8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000057D8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000057D8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000057D8                 db 'and %s.',0Ah,0
.rodata:0000000000005808 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005808 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005808                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005808                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005808                 db '%s, and %s.',0Ah,0
.rodata:000000000000583C                 align 20h
.rodata:0000000000005840 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005840                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005840                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005840                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000587C                 align 20h
.rodata:0000000000005880 ; const char aGeneralHelpUsi[]
.rodata:0000000000005880 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005880                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005880                 db 0
.rodata:00000000000058C1                 align 8
.rodata:00000000000058C8 jpt_3E04        dd offset loc_3E86 - 58C8h
.rodata:00000000000058C8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000058C8                                         ; version_etc_arn+9D↑r
.rodata:00000000000058C8                 dd offset loc_3F18 - 58C8h ; jump table for switch statement
.rodata:00000000000058C8                 dd offset loc_3F58 - 58C8h
.rodata:00000000000058C8                 dd offset loc_3FA0 - 58C8h
.rodata:00000000000058C8                 dd offset loc_3FF0 - 58C8h
.rodata:00000000000058C8                 dd offset loc_4048 - 58C8h
.rodata:00000000000058C8                 dd offset loc_4078 - 58C8h
.rodata:00000000000058C8                 dd offset loc_40E0 - 58C8h
.rodata:00000000000058C8                 dd offset loc_3E10 - 58C8h
.rodata:00000000000058C8                 dd offset loc_3EC0 - 58C8h
.rodata:00000000000058F0                 align 20h
.rodata:0000000000005900                 public version_etc_copyright
.rodata:0000000000005900 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005900                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000592F ; const char aMemoryExhauste[]
.rodata:000000000000592F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005940 qword_5940      dq 0                    ; DATA XREF: xstrtod+4D↑r
.rodata:0000000000005940                                         ; xstrtod+9F↑r
.rodata:0000000000005948 ; const char locale[2]
.rodata:0000000000005948 locale          db 'C',0                ; DATA XREF: c_strtod:loc_4910↑o
.rodata:0000000000005948                                         ; hard_locale+18↑o
.rodata:000000000000594A                 align 10h
.rodata:0000000000005950 qword_5950      dq 0C3E0000000000000h   ; DATA XREF: dtotimespec↑r
.rodata:0000000000005958 qword_5958      dq 43E0000000000000h    ; DATA XREF: dtotimespec+E↑r
.rodata:0000000000005960 qword_5960      dq 41CDCD6500000000h    ; DATA XREF: dtotimespec+34↑r
.rodata:0000000000005968 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4AB0↑o
.rodata:000000000000596E aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000596E                                         ; locale_charset:loc_4B00↑o
.rodata:000000000000596E _rodata         ends
.rodata:000000000000596E
.eh_frame_hdr:0000000000005974 ; ===========================================================================
.eh_frame_hdr:0000000000005974
.eh_frame_hdr:0000000000005974 ; Segment type: Pure data
.eh_frame_hdr:0000000000005974 ; Segment permissions: Read
.eh_frame_hdr:0000000000005974 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005974                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005974                 ;org 5974h
.eh_frame_hdr:0000000000005974 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005975                 db  1Bh
.eh_frame_hdr:0000000000005976                 db    3
.eh_frame_hdr:0000000000005977                 db  3Bh ; ;
.eh_frame_hdr:0000000000005978                 db  78h ; x
.eh_frame_hdr:0000000000005979                 db    2
.eh_frame_hdr:000000000000597A                 db    0
.eh_frame_hdr:000000000000597B                 db    0
.eh_frame_hdr:000000000000597C                 db  4Eh ; N
.eh_frame_hdr:000000000000597D                 db    0
.eh_frame_hdr:000000000000597E                 db    0
.eh_frame_hdr:000000000000597F                 db    0
.eh_frame_hdr:0000000000005980                 db  1Ch
.eh_frame_hdr:0000000000005981                 db 0B9h
.eh_frame_hdr:0000000000005982                 db 0FFh
.eh_frame_hdr:0000000000005983                 db 0FFh
.eh_frame_hdr:0000000000005984                 db 0C4h
.eh_frame_hdr:0000000000005985                 db    2
.eh_frame_hdr:0000000000005986                 db    0
.eh_frame_hdr:0000000000005987                 db    0
.eh_frame_hdr:0000000000005988                 db 0DCh
.eh_frame_hdr:0000000000005989                 db 0BBh
.eh_frame_hdr:000000000000598A                 db 0FFh
.eh_frame_hdr:000000000000598B                 db 0FFh
.eh_frame_hdr:000000000000598C                 db 0ECh
.eh_frame_hdr:000000000000598D                 db    2
.eh_frame_hdr:000000000000598E                 db    0
.eh_frame_hdr:000000000000598F                 db    0
.eh_frame_hdr:0000000000005990                 db 0ECh
.eh_frame_hdr:0000000000005991                 db 0BBh
.eh_frame_hdr:0000000000005992                 db 0FFh
.eh_frame_hdr:0000000000005993                 db 0FFh
.eh_frame_hdr:0000000000005994                 db  30h ; 0
.eh_frame_hdr:0000000000005995                 db    3
.eh_frame_hdr:0000000000005996                 db    0
.eh_frame_hdr:0000000000005997                 db    0
.eh_frame_hdr:0000000000005998                 db  7Ch ; |
.eh_frame_hdr:0000000000005999                 db 0BEh
.eh_frame_hdr:000000000000599A                 db 0FFh
.eh_frame_hdr:000000000000599B                 db 0FFh
.eh_frame_hdr:000000000000599C                 db  94h
.eh_frame_hdr:000000000000599D                 db    2
.eh_frame_hdr:000000000000599E                 db    0
.eh_frame_hdr:000000000000599F                 db    0
.eh_frame_hdr:00000000000059A0                 db  8Ch
.eh_frame_hdr:00000000000059A1                 db 0BFh
.eh_frame_hdr:00000000000059A2                 db 0FFh
.eh_frame_hdr:00000000000059A3                 db 0FFh
.eh_frame_hdr:00000000000059A4                 db    4
.eh_frame_hdr:00000000000059A5                 db    3
.eh_frame_hdr:00000000000059A6                 db    0
.eh_frame_hdr:00000000000059A7                 db    0
.eh_frame_hdr:00000000000059A8                 db 0ACh
.eh_frame_hdr:00000000000059A9                 db 0C2h
.eh_frame_hdr:00000000000059AA                 db 0FFh
.eh_frame_hdr:00000000000059AB                 db 0FFh
.eh_frame_hdr:00000000000059AC                 db  94h
.eh_frame_hdr:00000000000059AD                 db    3
.eh_frame_hdr:00000000000059AE                 db    0
.eh_frame_hdr:00000000000059AF                 db    0
.eh_frame_hdr:00000000000059B0                 db  6Ch ; l
.eh_frame_hdr:00000000000059B1                 db 0C3h
.eh_frame_hdr:00000000000059B2                 db 0FFh
.eh_frame_hdr:00000000000059B3                 db 0FFh
.eh_frame_hdr:00000000000059B4                 db 0D4h
.eh_frame_hdr:00000000000059B5                 db    3
.eh_frame_hdr:00000000000059B6                 db    0
.eh_frame_hdr:00000000000059B7                 db    0
.eh_frame_hdr:00000000000059B8                 db  7Ch ; |
.eh_frame_hdr:00000000000059B9                 db 0C3h
.eh_frame_hdr:00000000000059BA                 db 0FFh
.eh_frame_hdr:00000000000059BB                 db 0FFh
.eh_frame_hdr:00000000000059BC                 db 0E8h
.eh_frame_hdr:00000000000059BD                 db    3
.eh_frame_hdr:00000000000059BE                 db    0
.eh_frame_hdr:00000000000059BF                 db    0
.eh_frame_hdr:00000000000059C0                 db  8Ch
.eh_frame_hdr:00000000000059C1                 db 0C3h
.eh_frame_hdr:00000000000059C2                 db 0FFh
.eh_frame_hdr:00000000000059C3                 db 0FFh
.eh_frame_hdr:00000000000059C4                 db 0FCh
.eh_frame_hdr:00000000000059C5                 db    3
.eh_frame_hdr:00000000000059C6                 db    0
.eh_frame_hdr:00000000000059C7                 db    0
.eh_frame_hdr:00000000000059C8                 db  3Ch ; <
.eh_frame_hdr:00000000000059C9                 db 0C4h
.eh_frame_hdr:00000000000059CA                 db 0FFh
.eh_frame_hdr:00000000000059CB                 db 0FFh
.eh_frame_hdr:00000000000059CC                 db  2Ch ; ,
.eh_frame_hdr:00000000000059CD                 db    4
.eh_frame_hdr:00000000000059CE                 db    0
.eh_frame_hdr:00000000000059CF                 db    0
.eh_frame_hdr:00000000000059D0                 db  7Ch ; |
.eh_frame_hdr:00000000000059D1                 db 0C5h
.eh_frame_hdr:00000000000059D2                 db 0FFh
.eh_frame_hdr:00000000000059D3                 db 0FFh
.eh_frame_hdr:00000000000059D4                 db  68h ; h
.eh_frame_hdr:00000000000059D5                 db    4
.eh_frame_hdr:00000000000059D6                 db    0
.eh_frame_hdr:00000000000059D7                 db    0
.eh_frame_hdr:00000000000059D8                 db 0BCh
.eh_frame_hdr:00000000000059D9                 db 0C6h
.eh_frame_hdr:00000000000059DA                 db 0FFh
.eh_frame_hdr:00000000000059DB                 db 0FFh
.eh_frame_hdr:00000000000059DC                 db 0B4h
.eh_frame_hdr:00000000000059DD                 db    4
.eh_frame_hdr:00000000000059DE                 db    0
.eh_frame_hdr:00000000000059DF                 db    0
.eh_frame_hdr:00000000000059E0                 db  5Ch ; \
.eh_frame_hdr:00000000000059E1                 db 0C7h
.eh_frame_hdr:00000000000059E2                 db 0FFh
.eh_frame_hdr:00000000000059E3                 db 0FFh
.eh_frame_hdr:00000000000059E4                 db 0D4h
.eh_frame_hdr:00000000000059E5                 db    4
.eh_frame_hdr:00000000000059E6                 db    0
.eh_frame_hdr:00000000000059E7                 db    0
.eh_frame_hdr:00000000000059E8                 db  4Ch ; L
.eh_frame_hdr:00000000000059E9                 db 0C8h
.eh_frame_hdr:00000000000059EA                 db 0FFh
.eh_frame_hdr:00000000000059EB                 db 0FFh
.eh_frame_hdr:00000000000059EC                 db  18h
.eh_frame_hdr:00000000000059ED                 db    5
.eh_frame_hdr:00000000000059EE                 db    0
.eh_frame_hdr:00000000000059EF                 db    0
.eh_frame_hdr:00000000000059F0                 db  8Ch
.eh_frame_hdr:00000000000059F1                 db 0DAh
.eh_frame_hdr:00000000000059F2                 db 0FFh
.eh_frame_hdr:00000000000059F3                 db 0FFh
.eh_frame_hdr:00000000000059F4                 db  90h
.eh_frame_hdr:00000000000059F5                 db    5
.eh_frame_hdr:00000000000059F6                 db    0
.eh_frame_hdr:00000000000059F7                 db    0
.eh_frame_hdr:00000000000059F8                 db  3Ch ; <
.eh_frame_hdr:00000000000059F9                 db 0DCh
.eh_frame_hdr:00000000000059FA                 db 0FFh
.eh_frame_hdr:00000000000059FB                 db 0FFh
.eh_frame_hdr:00000000000059FC                 db 0FCh
.eh_frame_hdr:00000000000059FD                 db    5
.eh_frame_hdr:00000000000059FE                 db    0
.eh_frame_hdr:00000000000059FF                 db    0
.eh_frame_hdr:0000000000005A00                 db  7Ch ; |
.eh_frame_hdr:0000000000005A01                 db 0DCh
.eh_frame_hdr:0000000000005A02                 db 0FFh
.eh_frame_hdr:0000000000005A03                 db 0FFh
.eh_frame_hdr:0000000000005A04                 db  28h ; (
.eh_frame_hdr:0000000000005A05                 db    6
.eh_frame_hdr:0000000000005A06                 db    0
.eh_frame_hdr:0000000000005A07                 db    0
.eh_frame_hdr:0000000000005A08                 db  9Ch
.eh_frame_hdr:0000000000005A09                 db 0DCh
.eh_frame_hdr:0000000000005A0A                 db 0FFh
.eh_frame_hdr:0000000000005A0B                 db 0FFh
.eh_frame_hdr:0000000000005A0C                 db  3Ch ; <
.eh_frame_hdr:0000000000005A0D                 db    6
.eh_frame_hdr:0000000000005A0E                 db    0
.eh_frame_hdr:0000000000005A0F                 db    0
.eh_frame_hdr:0000000000005A10                 db 0BCh
.eh_frame_hdr:0000000000005A11                 db 0DCh
.eh_frame_hdr:0000000000005A12                 db 0FFh
.eh_frame_hdr:0000000000005A13                 db 0FFh
.eh_frame_hdr:0000000000005A14                 db  50h ; P
.eh_frame_hdr:0000000000005A15                 db    6
.eh_frame_hdr:0000000000005A16                 db    0
.eh_frame_hdr:0000000000005A17                 db    0
.eh_frame_hdr:0000000000005A18                 db 0FCh
.eh_frame_hdr:0000000000005A19                 db 0DCh
.eh_frame_hdr:0000000000005A1A                 db 0FFh
.eh_frame_hdr:0000000000005A1B                 db 0FFh
.eh_frame_hdr:0000000000005A1C                 db  64h ; d
.eh_frame_hdr:0000000000005A1D                 db    6
.eh_frame_hdr:0000000000005A1E                 db    0
.eh_frame_hdr:0000000000005A1F                 db    0
.eh_frame_hdr:0000000000005A20                 db  1Ch
.eh_frame_hdr:0000000000005A21                 db 0DDh
.eh_frame_hdr:0000000000005A22                 db 0FFh
.eh_frame_hdr:0000000000005A23                 db 0FFh
.eh_frame_hdr:0000000000005A24                 db  78h ; x
.eh_frame_hdr:0000000000005A25                 db    6
.eh_frame_hdr:0000000000005A26                 db    0
.eh_frame_hdr:0000000000005A27                 db    0
.eh_frame_hdr:0000000000005A28                 db  4Ch ; L
.eh_frame_hdr:0000000000005A29                 db 0DDh
.eh_frame_hdr:0000000000005A2A                 db 0FFh
.eh_frame_hdr:0000000000005A2B                 db 0FFh
.eh_frame_hdr:0000000000005A2C                 db  8Ch
.eh_frame_hdr:0000000000005A2D                 db    6
.eh_frame_hdr:0000000000005A2E                 db    0
.eh_frame_hdr:0000000000005A2F                 db    0
.eh_frame_hdr:0000000000005A30                 db 0CCh
.eh_frame_hdr:0000000000005A31                 db 0DDh
.eh_frame_hdr:0000000000005A32                 db 0FFh
.eh_frame_hdr:0000000000005A33                 db 0FFh
.eh_frame_hdr:0000000000005A34                 db 0E0h
.eh_frame_hdr:0000000000005A35                 db    6
.eh_frame_hdr:0000000000005A36                 db    0
.eh_frame_hdr:0000000000005A37                 db    0
.eh_frame_hdr:0000000000005A38                 db 0BCh
.eh_frame_hdr:0000000000005A39                 db 0DEh
.eh_frame_hdr:0000000000005A3A                 db 0FFh
.eh_frame_hdr:0000000000005A3B                 db 0FFh
.eh_frame_hdr:0000000000005A3C                 db  4Ch ; L
.eh_frame_hdr:0000000000005A3D                 db    7
.eh_frame_hdr:0000000000005A3E                 db    0
.eh_frame_hdr:0000000000005A3F                 db    0
.eh_frame_hdr:0000000000005A40                 db 0CCh
.eh_frame_hdr:0000000000005A41                 db 0DEh
.eh_frame_hdr:0000000000005A42                 db 0FFh
.eh_frame_hdr:0000000000005A43                 db 0FFh
.eh_frame_hdr:0000000000005A44                 db  60h ; `
.eh_frame_hdr:0000000000005A45                 db    7
.eh_frame_hdr:0000000000005A46                 db    0
.eh_frame_hdr:0000000000005A47                 db    0
.eh_frame_hdr:0000000000005A48                 db  6Ch ; l
.eh_frame_hdr:0000000000005A49                 db 0DFh
.eh_frame_hdr:0000000000005A4A                 db 0FFh
.eh_frame_hdr:0000000000005A4B                 db 0FFh
.eh_frame_hdr:0000000000005A4C                 db  8Ch
.eh_frame_hdr:0000000000005A4D                 db    7
.eh_frame_hdr:0000000000005A4E                 db    0
.eh_frame_hdr:0000000000005A4F                 db    0
.eh_frame_hdr:0000000000005A50                 db  8Ch
.eh_frame_hdr:0000000000005A51                 db 0DFh
.eh_frame_hdr:0000000000005A52                 db 0FFh
.eh_frame_hdr:0000000000005A53                 db 0FFh
.eh_frame_hdr:0000000000005A54                 db 0A0h
.eh_frame_hdr:0000000000005A55                 db    7
.eh_frame_hdr:0000000000005A56                 db    0
.eh_frame_hdr:0000000000005A57                 db    0
.eh_frame_hdr:0000000000005A58                 db  9Ch
.eh_frame_hdr:0000000000005A59                 db 0DFh
.eh_frame_hdr:0000000000005A5A                 db 0FFh
.eh_frame_hdr:0000000000005A5B                 db 0FFh
.eh_frame_hdr:0000000000005A5C                 db 0B4h
.eh_frame_hdr:0000000000005A5D                 db    7
.eh_frame_hdr:0000000000005A5E                 db    0
.eh_frame_hdr:0000000000005A5F                 db    0
.eh_frame_hdr:0000000000005A60                 db 0BCh
.eh_frame_hdr:0000000000005A61                 db 0DFh
.eh_frame_hdr:0000000000005A62                 db 0FFh
.eh_frame_hdr:0000000000005A63                 db 0FFh
.eh_frame_hdr:0000000000005A64                 db 0C8h
.eh_frame_hdr:0000000000005A65                 db    7
.eh_frame_hdr:0000000000005A66                 db    0
.eh_frame_hdr:0000000000005A67                 db    0
.eh_frame_hdr:0000000000005A68                 db 0DCh
.eh_frame_hdr:0000000000005A69                 db 0DFh
.eh_frame_hdr:0000000000005A6A                 db 0FFh
.eh_frame_hdr:0000000000005A6B                 db 0FFh
.eh_frame_hdr:0000000000005A6C                 db 0DCh
.eh_frame_hdr:0000000000005A6D                 db    7
.eh_frame_hdr:0000000000005A6E                 db    0
.eh_frame_hdr:0000000000005A6F                 db    0
.eh_frame_hdr:0000000000005A70                 db  6Ch ; l
.eh_frame_hdr:0000000000005A71                 db 0E0h
.eh_frame_hdr:0000000000005A72                 db 0FFh
.eh_frame_hdr:0000000000005A73                 db 0FFh
.eh_frame_hdr:0000000000005A74                 db 0F8h
.eh_frame_hdr:0000000000005A75                 db    7
.eh_frame_hdr:0000000000005A76                 db    0
.eh_frame_hdr:0000000000005A77                 db    0
.eh_frame_hdr:0000000000005A78                 db 0FCh
.eh_frame_hdr:0000000000005A79                 db 0E0h
.eh_frame_hdr:0000000000005A7A                 db 0FFh
.eh_frame_hdr:0000000000005A7B                 db 0FFh
.eh_frame_hdr:0000000000005A7C                 db  14h
.eh_frame_hdr:0000000000005A7D                 db    8
.eh_frame_hdr:0000000000005A7E                 db    0
.eh_frame_hdr:0000000000005A7F                 db    0
.eh_frame_hdr:0000000000005A80                 db  0Ch
.eh_frame_hdr:0000000000005A81                 db 0E1h
.eh_frame_hdr:0000000000005A82                 db 0FFh
.eh_frame_hdr:0000000000005A83                 db 0FFh
.eh_frame_hdr:0000000000005A84                 db  28h ; (
.eh_frame_hdr:0000000000005A85                 db    8
.eh_frame_hdr:0000000000005A86                 db    0
.eh_frame_hdr:0000000000005A87                 db    0
.eh_frame_hdr:0000000000005A88                 db  1Ch
.eh_frame_hdr:0000000000005A89                 db 0E1h
.eh_frame_hdr:0000000000005A8A                 db 0FFh
.eh_frame_hdr:0000000000005A8B                 db 0FFh
.eh_frame_hdr:0000000000005A8C                 db  3Ch ; <
.eh_frame_hdr:0000000000005A8D                 db    8
.eh_frame_hdr:0000000000005A8E                 db    0
.eh_frame_hdr:0000000000005A8F                 db    0
.eh_frame_hdr:0000000000005A90                 db 0BCh
.eh_frame_hdr:0000000000005A91                 db 0E1h
.eh_frame_hdr:0000000000005A92                 db 0FFh
.eh_frame_hdr:0000000000005A93                 db 0FFh
.eh_frame_hdr:0000000000005A94                 db  58h ; X
.eh_frame_hdr:0000000000005A95                 db    8
.eh_frame_hdr:0000000000005A96                 db    0
.eh_frame_hdr:0000000000005A97                 db    0
.eh_frame_hdr:0000000000005A98                 db 0CCh
.eh_frame_hdr:0000000000005A99                 db 0E1h
.eh_frame_hdr:0000000000005A9A                 db 0FFh
.eh_frame_hdr:0000000000005A9B                 db 0FFh
.eh_frame_hdr:0000000000005A9C                 db  6Ch ; l
.eh_frame_hdr:0000000000005A9D                 db    8
.eh_frame_hdr:0000000000005A9E                 db    0
.eh_frame_hdr:0000000000005A9F                 db    0
.eh_frame_hdr:0000000000005AA0                 db 0ECh
.eh_frame_hdr:0000000000005AA1                 db 0E1h
.eh_frame_hdr:0000000000005AA2                 db 0FFh
.eh_frame_hdr:0000000000005AA3                 db 0FFh
.eh_frame_hdr:0000000000005AA4                 db  80h
.eh_frame_hdr:0000000000005AA5                 db    8
.eh_frame_hdr:0000000000005AA6                 db    0
.eh_frame_hdr:0000000000005AA7                 db    0
.eh_frame_hdr:0000000000005AA8                 db 0FCh
.eh_frame_hdr:0000000000005AA9                 db 0E1h
.eh_frame_hdr:0000000000005AAA                 db 0FFh
.eh_frame_hdr:0000000000005AAB                 db 0FFh
.eh_frame_hdr:0000000000005AAC                 db  94h
.eh_frame_hdr:0000000000005AAD                 db    8
.eh_frame_hdr:0000000000005AAE                 db    0
.eh_frame_hdr:0000000000005AAF                 db    0
.eh_frame_hdr:0000000000005AB0                 db  8Ch
.eh_frame_hdr:0000000000005AB1                 db 0E2h
.eh_frame_hdr:0000000000005AB2                 db 0FFh
.eh_frame_hdr:0000000000005AB3                 db 0FFh
.eh_frame_hdr:0000000000005AB4                 db 0B0h
.eh_frame_hdr:0000000000005AB5                 db    8
.eh_frame_hdr:0000000000005AB6                 db    0
.eh_frame_hdr:0000000000005AB7                 db    0
.eh_frame_hdr:0000000000005AB8                 db  2Ch ; ,
.eh_frame_hdr:0000000000005AB9                 db 0E3h
.eh_frame_hdr:0000000000005ABA                 db 0FFh
.eh_frame_hdr:0000000000005ABB                 db 0FFh
.eh_frame_hdr:0000000000005ABC                 db 0CCh
.eh_frame_hdr:0000000000005ABD                 db    8
.eh_frame_hdr:0000000000005ABE                 db    0
.eh_frame_hdr:0000000000005ABF                 db    0
.eh_frame_hdr:0000000000005AC0                 db  3Ch ; <
.eh_frame_hdr:0000000000005AC1                 db 0E3h
.eh_frame_hdr:0000000000005AC2                 db 0FFh
.eh_frame_hdr:0000000000005AC3                 db 0FFh
.eh_frame_hdr:0000000000005AC4                 db 0E0h
.eh_frame_hdr:0000000000005AC5                 db    8
.eh_frame_hdr:0000000000005AC6                 db    0
.eh_frame_hdr:0000000000005AC7                 db    0
.eh_frame_hdr:0000000000005AC8                 db  5Ch ; \
.eh_frame_hdr:0000000000005AC9                 db 0E3h
.eh_frame_hdr:0000000000005ACA                 db 0FFh
.eh_frame_hdr:0000000000005ACB                 db 0FFh
.eh_frame_hdr:0000000000005ACC                 db 0F4h
.eh_frame_hdr:0000000000005ACD                 db    8
.eh_frame_hdr:0000000000005ACE                 db    0
.eh_frame_hdr:0000000000005ACF                 db    0
.eh_frame_hdr:0000000000005AD0                 db  7Ch ; |
.eh_frame_hdr:0000000000005AD1                 db 0E3h
.eh_frame_hdr:0000000000005AD2                 db 0FFh
.eh_frame_hdr:0000000000005AD3                 db 0FFh
.eh_frame_hdr:0000000000005AD4                 db    8
.eh_frame_hdr:0000000000005AD5                 db    9
.eh_frame_hdr:0000000000005AD6                 db    0
.eh_frame_hdr:0000000000005AD7                 db    0
.eh_frame_hdr:0000000000005AD8                 db  8Ch
.eh_frame_hdr:0000000000005AD9                 db 0E3h
.eh_frame_hdr:0000000000005ADA                 db 0FFh
.eh_frame_hdr:0000000000005ADB                 db 0FFh
.eh_frame_hdr:0000000000005ADC                 db  1Ch
.eh_frame_hdr:0000000000005ADD                 db    9
.eh_frame_hdr:0000000000005ADE                 db    0
.eh_frame_hdr:0000000000005ADF                 db    0
.eh_frame_hdr:0000000000005AE0                 db 0ACh
.eh_frame_hdr:0000000000005AE1                 db 0E3h
.eh_frame_hdr:0000000000005AE2                 db 0FFh
.eh_frame_hdr:0000000000005AE3                 db 0FFh
.eh_frame_hdr:0000000000005AE4                 db  30h ; 0
.eh_frame_hdr:0000000000005AE5                 db    9
.eh_frame_hdr:0000000000005AE6                 db    0
.eh_frame_hdr:0000000000005AE7                 db    0
.eh_frame_hdr:0000000000005AE8                 db 0CCh
.eh_frame_hdr:0000000000005AE9                 db 0E3h
.eh_frame_hdr:0000000000005AEA                 db 0FFh
.eh_frame_hdr:0000000000005AEB                 db 0FFh
.eh_frame_hdr:0000000000005AEC                 db  44h ; D
.eh_frame_hdr:0000000000005AED                 db    9
.eh_frame_hdr:0000000000005AEE                 db    0
.eh_frame_hdr:0000000000005AEF                 db    0
.eh_frame_hdr:0000000000005AF0                 db 0ECh
.eh_frame_hdr:0000000000005AF1                 db 0E3h
.eh_frame_hdr:0000000000005AF2                 db 0FFh
.eh_frame_hdr:0000000000005AF3                 db 0FFh
.eh_frame_hdr:0000000000005AF4                 db  5Ch ; \
.eh_frame_hdr:0000000000005AF5                 db    9
.eh_frame_hdr:0000000000005AF6                 db    0
.eh_frame_hdr:0000000000005AF7                 db    0
.eh_frame_hdr:0000000000005AF8                 db  0Ch
.eh_frame_hdr:0000000000005AF9                 db 0E8h
.eh_frame_hdr:0000000000005AFA                 db 0FFh
.eh_frame_hdr:0000000000005AFB                 db 0FFh
.eh_frame_hdr:0000000000005AFC                 db  70h ; p
.eh_frame_hdr:0000000000005AFD                 db  0Ah
.eh_frame_hdr:0000000000005AFE                 db    0
.eh_frame_hdr:0000000000005AFF                 db    0
.eh_frame_hdr:0000000000005B00                 db  2Ch ; ,
.eh_frame_hdr:0000000000005B01                 db 0E8h
.eh_frame_hdr:0000000000005B02                 db 0FFh
.eh_frame_hdr:0000000000005B03                 db 0FFh
.eh_frame_hdr:0000000000005B04                 db  84h
.eh_frame_hdr:0000000000005B05                 db  0Ah
.eh_frame_hdr:0000000000005B06                 db    0
.eh_frame_hdr:0000000000005B07                 db    0
.eh_frame_hdr:0000000000005B08                 db 0ACh
.eh_frame_hdr:0000000000005B09                 db 0E8h
.eh_frame_hdr:0000000000005B0A                 db 0FFh
.eh_frame_hdr:0000000000005B0B                 db 0FFh
.eh_frame_hdr:0000000000005B0C                 db 0A0h
.eh_frame_hdr:0000000000005B0D                 db  0Ah
.eh_frame_hdr:0000000000005B0E                 db    0
.eh_frame_hdr:0000000000005B0F                 db    0
.eh_frame_hdr:0000000000005B10                 db  8Ch
.eh_frame_hdr:0000000000005B11                 db 0E9h
.eh_frame_hdr:0000000000005B12                 db 0FFh
.eh_frame_hdr:0000000000005B13                 db 0FFh
.eh_frame_hdr:0000000000005B14                 db 0CCh
.eh_frame_hdr:0000000000005B15                 db  0Ah
.eh_frame_hdr:0000000000005B16                 db    0
.eh_frame_hdr:0000000000005B17                 db    0
.eh_frame_hdr:0000000000005B18                 db  0Ch
.eh_frame_hdr:0000000000005B19                 db 0EAh
.eh_frame_hdr:0000000000005B1A                 db 0FFh
.eh_frame_hdr:0000000000005B1B                 db 0FFh
.eh_frame_hdr:0000000000005B1C                 db 0ECh
.eh_frame_hdr:0000000000005B1D                 db  0Ah
.eh_frame_hdr:0000000000005B1E                 db    0
.eh_frame_hdr:0000000000005B1F                 db    0
.eh_frame_hdr:0000000000005B20                 db  2Ch ; ,
.eh_frame_hdr:0000000000005B21                 db 0EAh
.eh_frame_hdr:0000000000005B22                 db 0FFh
.eh_frame_hdr:0000000000005B23                 db 0FFh
.eh_frame_hdr:0000000000005B24                 db    8
.eh_frame_hdr:0000000000005B25                 db  0Bh
.eh_frame_hdr:0000000000005B26                 db    0
.eh_frame_hdr:0000000000005B27                 db    0
.eh_frame_hdr:0000000000005B28                 db  5Ch ; \
.eh_frame_hdr:0000000000005B29                 db 0EAh
.eh_frame_hdr:0000000000005B2A                 db 0FFh
.eh_frame_hdr:0000000000005B2B                 db 0FFh
.eh_frame_hdr:0000000000005B2C                 db  1Ch
.eh_frame_hdr:0000000000005B2D                 db  0Bh
.eh_frame_hdr:0000000000005B2E                 db    0
.eh_frame_hdr:0000000000005B2F                 db    0
.eh_frame_hdr:0000000000005B30                 db  6Ch ; l
.eh_frame_hdr:0000000000005B31                 db 0EAh
.eh_frame_hdr:0000000000005B32                 db 0FFh
.eh_frame_hdr:0000000000005B33                 db 0FFh
.eh_frame_hdr:0000000000005B34                 db  30h ; 0
.eh_frame_hdr:0000000000005B35                 db  0Bh
.eh_frame_hdr:0000000000005B36                 db    0
.eh_frame_hdr:0000000000005B37                 db    0
.eh_frame_hdr:0000000000005B38                 db 0ACh
.eh_frame_hdr:0000000000005B39                 db 0EAh
.eh_frame_hdr:0000000000005B3A                 db 0FFh
.eh_frame_hdr:0000000000005B3B                 db 0FFh
.eh_frame_hdr:0000000000005B3C                 db  54h ; T
.eh_frame_hdr:0000000000005B3D                 db  0Bh
.eh_frame_hdr:0000000000005B3E                 db    0
.eh_frame_hdr:0000000000005B3F                 db    0
.eh_frame_hdr:0000000000005B40                 db 0DCh
.eh_frame_hdr:0000000000005B41                 db 0EAh
.eh_frame_hdr:0000000000005B42                 db 0FFh
.eh_frame_hdr:0000000000005B43                 db 0FFh
.eh_frame_hdr:0000000000005B44                 db  68h ; h
.eh_frame_hdr:0000000000005B45                 db  0Bh
.eh_frame_hdr:0000000000005B46                 db    0
.eh_frame_hdr:0000000000005B47                 db    0
.eh_frame_hdr:0000000000005B48                 db  6Ch ; l
.eh_frame_hdr:0000000000005B49                 db 0EBh
.eh_frame_hdr:0000000000005B4A                 db 0FFh
.eh_frame_hdr:0000000000005B4B                 db 0FFh
.eh_frame_hdr:0000000000005B4C                 db  80h
.eh_frame_hdr:0000000000005B4D                 db  0Bh
.eh_frame_hdr:0000000000005B4E                 db    0
.eh_frame_hdr:0000000000005B4F                 db    0
.eh_frame_hdr:0000000000005B50                 db 0BCh
.eh_frame_hdr:0000000000005B51                 db 0EBh
.eh_frame_hdr:0000000000005B52                 db 0FFh
.eh_frame_hdr:0000000000005B53                 db 0FFh
.eh_frame_hdr:0000000000005B54                 db  98h
.eh_frame_hdr:0000000000005B55                 db  0Bh
.eh_frame_hdr:0000000000005B56                 db    0
.eh_frame_hdr:0000000000005B57                 db    0
.eh_frame_hdr:0000000000005B58                 db 0DCh
.eh_frame_hdr:0000000000005B59                 db 0EBh
.eh_frame_hdr:0000000000005B5A                 db 0FFh
.eh_frame_hdr:0000000000005B5B                 db 0FFh
.eh_frame_hdr:0000000000005B5C                 db 0B4h
.eh_frame_hdr:0000000000005B5D                 db  0Bh
.eh_frame_hdr:0000000000005B5E                 db    0
.eh_frame_hdr:0000000000005B5F                 db    0
.eh_frame_hdr:0000000000005B60                 db  0Ch
.eh_frame_hdr:0000000000005B61                 db 0ECh
.eh_frame_hdr:0000000000005B62                 db 0FFh
.eh_frame_hdr:0000000000005B63                 db 0FFh
.eh_frame_hdr:0000000000005B64                 db 0D0h
.eh_frame_hdr:0000000000005B65                 db  0Bh
.eh_frame_hdr:0000000000005B66                 db    0
.eh_frame_hdr:0000000000005B67                 db    0
.eh_frame_hdr:0000000000005B68                 db  3Ch ; <
.eh_frame_hdr:0000000000005B69                 db 0ECh
.eh_frame_hdr:0000000000005B6A                 db 0FFh
.eh_frame_hdr:0000000000005B6B                 db 0FFh
.eh_frame_hdr:0000000000005B6C                 db 0F8h
.eh_frame_hdr:0000000000005B6D                 db  0Bh
.eh_frame_hdr:0000000000005B6E                 db    0
.eh_frame_hdr:0000000000005B6F                 db    0
.eh_frame_hdr:0000000000005B70                 db  5Ch ; \
.eh_frame_hdr:0000000000005B71                 db 0ECh
.eh_frame_hdr:0000000000005B72                 db 0FFh
.eh_frame_hdr:0000000000005B73                 db 0FFh
.eh_frame_hdr:0000000000005B74                 db  14h
.eh_frame_hdr:0000000000005B75                 db  0Ch
.eh_frame_hdr:0000000000005B76                 db    0
.eh_frame_hdr:0000000000005B77                 db    0
.eh_frame_hdr:0000000000005B78                 db  9Ch
.eh_frame_hdr:0000000000005B79                 db 0ECh
.eh_frame_hdr:0000000000005B7A                 db 0FFh
.eh_frame_hdr:0000000000005B7B                 db 0FFh
.eh_frame_hdr:0000000000005B7C                 db  2Ch ; ,
.eh_frame_hdr:0000000000005B7D                 db  0Ch
.eh_frame_hdr:0000000000005B7E                 db    0
.eh_frame_hdr:0000000000005B7F                 db    0
.eh_frame_hdr:0000000000005B80                 db  1Ch
.eh_frame_hdr:0000000000005B81                 db 0EDh
.eh_frame_hdr:0000000000005B82                 db 0FFh
.eh_frame_hdr:0000000000005B83                 db 0FFh
.eh_frame_hdr:0000000000005B84                 db  5Ch ; \
.eh_frame_hdr:0000000000005B85                 db  0Ch
.eh_frame_hdr:0000000000005B86                 db    0
.eh_frame_hdr:0000000000005B87                 db    0
.eh_frame_hdr:0000000000005B88                 db 0ECh
.eh_frame_hdr:0000000000005B89                 db 0EDh
.eh_frame_hdr:0000000000005B8A                 db 0FFh
.eh_frame_hdr:0000000000005B8B                 db 0FFh
.eh_frame_hdr:0000000000005B8C                 db 0A4h
.eh_frame_hdr:0000000000005B8D                 db  0Ch
.eh_frame_hdr:0000000000005B8E                 db    0
.eh_frame_hdr:0000000000005B8F                 db    0
.eh_frame_hdr:0000000000005B90                 db  7Ch ; |
.eh_frame_hdr:0000000000005B91                 db 0EEh
.eh_frame_hdr:0000000000005B92                 db 0FFh
.eh_frame_hdr:0000000000005B93                 db 0FFh
.eh_frame_hdr:0000000000005B94                 db 0E4h
.eh_frame_hdr:0000000000005B95                 db  0Ch
.eh_frame_hdr:0000000000005B96                 db    0
.eh_frame_hdr:0000000000005B97                 db    0
.eh_frame_hdr:0000000000005B98                 db  4Ch ; L
.eh_frame_hdr:0000000000005B99                 db 0EFh
.eh_frame_hdr:0000000000005B9A                 db 0FFh
.eh_frame_hdr:0000000000005B9B                 db 0FFh
.eh_frame_hdr:0000000000005B9C                 db  1Ch
.eh_frame_hdr:0000000000005B9D                 db  0Dh
.eh_frame_hdr:0000000000005B9E                 db    0
.eh_frame_hdr:0000000000005B9F                 db    0
.eh_frame_hdr:0000000000005BA0                 db 0BCh
.eh_frame_hdr:0000000000005BA1                 db 0EFh
.eh_frame_hdr:0000000000005BA2                 db 0FFh
.eh_frame_hdr:0000000000005BA3                 db 0FFh
.eh_frame_hdr:0000000000005BA4                 db  54h ; T
.eh_frame_hdr:0000000000005BA5                 db  0Dh
.eh_frame_hdr:0000000000005BA6                 db    0
.eh_frame_hdr:0000000000005BA7                 db    0
.eh_frame_hdr:0000000000005BA8                 db  3Ch ; <
.eh_frame_hdr:0000000000005BA9                 db 0F0h
.eh_frame_hdr:0000000000005BAA                 db 0FFh
.eh_frame_hdr:0000000000005BAB                 db 0FFh
.eh_frame_hdr:0000000000005BAC                 db 0A4h
.eh_frame_hdr:0000000000005BAD                 db  0Dh
.eh_frame_hdr:0000000000005BAE                 db    0
.eh_frame_hdr:0000000000005BAF                 db    0
.eh_frame_hdr:0000000000005BB0                 db 0FCh
.eh_frame_hdr:0000000000005BB1                 db 0F0h
.eh_frame_hdr:0000000000005BB2                 db 0FFh
.eh_frame_hdr:0000000000005BB3                 db 0FFh
.eh_frame_hdr:0000000000005BB4                 db 0BCh
.eh_frame_hdr:0000000000005BB5                 db  0Dh
.eh_frame_hdr:0000000000005BB6                 db    0
.eh_frame_hdr:0000000000005BB7                 db    0
.eh_frame_hdr:0000000000005BB8                 db  5Ch ; \
.eh_frame_hdr:0000000000005BB9                 db 0F1h
.eh_frame_hdr:0000000000005BBA                 db 0FFh
.eh_frame_hdr:0000000000005BBB                 db 0FFh
.eh_frame_hdr:0000000000005BBC                 db 0DCh
.eh_frame_hdr:0000000000005BBD                 db  0Dh
.eh_frame_hdr:0000000000005BBE                 db    0
.eh_frame_hdr:0000000000005BBF                 db    0
.eh_frame_hdr:0000000000005BC0                 db  9Ch
.eh_frame_hdr:0000000000005BC1                 db 0F1h
.eh_frame_hdr:0000000000005BC2                 db 0FFh
.eh_frame_hdr:0000000000005BC3                 db 0FFh
.eh_frame_hdr:0000000000005BC4                 db 0FCh
.eh_frame_hdr:0000000000005BC5                 db  0Dh
.eh_frame_hdr:0000000000005BC6                 db    0
.eh_frame_hdr:0000000000005BC7                 db    0
.eh_frame_hdr:0000000000005BC8                 db  1Ch
.eh_frame_hdr:0000000000005BC9                 db 0F2h
.eh_frame_hdr:0000000000005BCA                 db 0FFh
.eh_frame_hdr:0000000000005BCB                 db 0FFh
.eh_frame_hdr:0000000000005BCC                 db  34h ; 4
.eh_frame_hdr:0000000000005BCD                 db  0Eh
.eh_frame_hdr:0000000000005BCE                 db    0
.eh_frame_hdr:0000000000005BCF                 db    0
.eh_frame_hdr:0000000000005BD0                 db  5Ch ; \
.eh_frame_hdr:0000000000005BD1                 db 0F2h
.eh_frame_hdr:0000000000005BD2                 db 0FFh
.eh_frame_hdr:0000000000005BD3                 db 0FFh
.eh_frame_hdr:0000000000005BD4                 db  54h ; T
.eh_frame_hdr:0000000000005BD5                 db  0Eh
.eh_frame_hdr:0000000000005BD6                 db    0
.eh_frame_hdr:0000000000005BD7                 db    0
.eh_frame_hdr:0000000000005BD8                 db 0BCh
.eh_frame_hdr:0000000000005BD9                 db 0F2h
.eh_frame_hdr:0000000000005BDA                 db 0FFh
.eh_frame_hdr:0000000000005BDB                 db 0FFh
.eh_frame_hdr:0000000000005BDC                 db  84h
.eh_frame_hdr:0000000000005BDD                 db  0Eh
.eh_frame_hdr:0000000000005BDE                 db    0
.eh_frame_hdr:0000000000005BDF                 db    0
.eh_frame_hdr:0000000000005BE0                 db  2Ch ; ,
.eh_frame_hdr:0000000000005BE1                 db 0F3h
.eh_frame_hdr:0000000000005BE2                 db 0FFh
.eh_frame_hdr:0000000000005BE3                 db 0FFh
.eh_frame_hdr:0000000000005BE4                 db 0CCh
.eh_frame_hdr:0000000000005BE5                 db  0Eh
.eh_frame_hdr:0000000000005BE6                 db    0
.eh_frame_hdr:0000000000005BE7                 db    0
.eh_frame_hdr:0000000000005BE8                 db  3Ch ; <
.eh_frame_hdr:0000000000005BE9                 db 0F3h
.eh_frame_hdr:0000000000005BEA                 db 0FFh
.eh_frame_hdr:0000000000005BEB                 db 0FFh
.eh_frame_hdr:0000000000005BEC                 db 0E4h
.eh_frame_hdr:0000000000005BED                 db  0Eh
.eh_frame_hdr:0000000000005BEE                 db    0
.eh_frame_hdr:0000000000005BEF                 db    0
.eh_frame_hdr:0000000000005BEF _eh_frame_hdr   ends
.eh_frame_hdr:0000000000005BEF
.eh_frame:0000000000005BF0 ; ===========================================================================
.eh_frame:0000000000005BF0
.eh_frame:0000000000005BF0 ; Segment type: Pure data
.eh_frame:0000000000005BF0 ; Segment permissions: Read
.eh_frame:0000000000005BF0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005BF0                 assume cs:_eh_frame
.eh_frame:0000000000005BF0                 ;org 5BF0h
.eh_frame:0000000000005BF0                 db  14h
.eh_frame:0000000000005BF1                 db    0
.eh_frame:0000000000005BF2                 db    0
.eh_frame:0000000000005BF3                 db    0
.eh_frame:0000000000005BF4                 db    0
.eh_frame:0000000000005BF5                 db    0
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db    1
.eh_frame:0000000000005BF9                 db  7Ah ; z
.eh_frame:0000000000005BFA                 db  52h ; R
.eh_frame:0000000000005BFB                 db    0
.eh_frame:0000000000005BFC                 db    1
.eh_frame:0000000000005BFD                 db  78h ; x
.eh_frame:0000000000005BFE                 db  10h
.eh_frame:0000000000005BFF                 db    1
.eh_frame:0000000000005C00                 db  1Bh
.eh_frame:0000000000005C01                 db  0Ch
.eh_frame:0000000000005C02                 db    7
.eh_frame:0000000000005C03                 db    8
.eh_frame:0000000000005C04                 db  90h
.eh_frame:0000000000005C05                 db    1
.eh_frame:0000000000005C06                 db    7
.eh_frame:0000000000005C07                 db  10h
.eh_frame:0000000000005C08                 db  14h
.eh_frame:0000000000005C09                 db    0
.eh_frame:0000000000005C0A                 db    0
.eh_frame:0000000000005C0B                 db    0
.eh_frame:0000000000005C0C                 db  1Ch
.eh_frame:0000000000005C0D                 db    0
.eh_frame:0000000000005C0E                 db    0
.eh_frame:0000000000005C0F                 db    0
.eh_frame:0000000000005C10                 db 0E0h
.eh_frame:0000000000005C11                 db 0BBh
.eh_frame:0000000000005C12                 db 0FFh
.eh_frame:0000000000005C13                 db 0FFh
.eh_frame:0000000000005C14                 db  2Bh ; +
.eh_frame:0000000000005C15                 db    0
.eh_frame:0000000000005C16                 db    0
.eh_frame:0000000000005C17                 db    0
.eh_frame:0000000000005C18                 db    0
.eh_frame:0000000000005C19                 db    0
.eh_frame:0000000000005C1A                 db    0
.eh_frame:0000000000005C1B                 db    0
.eh_frame:0000000000005C1C                 db    0
.eh_frame:0000000000005C1D                 db    0
.eh_frame:0000000000005C1E                 db    0
.eh_frame:0000000000005C1F                 db    0
.eh_frame:0000000000005C20                 db  14h
.eh_frame:0000000000005C21                 db    0
.eh_frame:0000000000005C22                 db    0
.eh_frame:0000000000005C23                 db    0
.eh_frame:0000000000005C24                 db    0
.eh_frame:0000000000005C25                 db    0
.eh_frame:0000000000005C26                 db    0
.eh_frame:0000000000005C27                 db    0
.eh_frame:0000000000005C28                 db    1
.eh_frame:0000000000005C29                 db  7Ah ; z
.eh_frame:0000000000005C2A                 db  52h ; R
.eh_frame:0000000000005C2B                 db    0
.eh_frame:0000000000005C2C                 db    1
.eh_frame:0000000000005C2D                 db  78h ; x
.eh_frame:0000000000005C2E                 db  10h
.eh_frame:0000000000005C2F                 db    1
.eh_frame:0000000000005C30                 db  1Bh
.eh_frame:0000000000005C31                 db  0Ch
.eh_frame:0000000000005C32                 db    7
.eh_frame:0000000000005C33                 db    8
.eh_frame:0000000000005C34                 db  90h
.eh_frame:0000000000005C35                 db    1
.eh_frame:0000000000005C36                 db    0
.eh_frame:0000000000005C37                 db    0
.eh_frame:0000000000005C38                 db  24h ; $
.eh_frame:0000000000005C39                 db    0
.eh_frame:0000000000005C3A                 db    0
.eh_frame:0000000000005C3B                 db    0
.eh_frame:0000000000005C3C                 db  1Ch
.eh_frame:0000000000005C3D                 db    0
.eh_frame:0000000000005C3E                 db    0
.eh_frame:0000000000005C3F                 db    0
.eh_frame:0000000000005C40                 db  50h ; P
.eh_frame:0000000000005C41                 db 0B6h
.eh_frame:0000000000005C42                 db 0FFh
.eh_frame:0000000000005C43                 db 0FFh
.eh_frame:0000000000005C44                 db 0C0h
.eh_frame:0000000000005C45                 db    2
.eh_frame:0000000000005C46                 db    0
.eh_frame:0000000000005C47                 db    0
.eh_frame:0000000000005C48                 db    0
.eh_frame:0000000000005C49                 db  0Eh
.eh_frame:0000000000005C4A                 db  10h
.eh_frame:0000000000005C4B                 db  46h ; F
.eh_frame:0000000000005C4C                 db  0Eh
.eh_frame:0000000000005C4D                 db  18h
.eh_frame:0000000000005C4E                 db  4Ah ; J
.eh_frame:0000000000005C4F                 db  0Fh
.eh_frame:0000000000005C50                 db  0Bh
.eh_frame:0000000000005C51                 db  77h ; w
.eh_frame:0000000000005C52                 db    8
.eh_frame:0000000000005C53                 db  80h
.eh_frame:0000000000005C54                 db    0
.eh_frame:0000000000005C55                 db  3Fh ; ?
.eh_frame:0000000000005C56                 db  1Ah
.eh_frame:0000000000005C57                 db  3Bh ; ;
.eh_frame:0000000000005C58                 db  2Ah ; *
.eh_frame:0000000000005C59                 db  33h ; 3
.eh_frame:0000000000005C5A                 db  24h ; $
.eh_frame:0000000000005C5B                 db  22h ; "
.eh_frame:0000000000005C5C                 db    0
.eh_frame:0000000000005C5D                 db    0
.eh_frame:0000000000005C5E                 db    0
.eh_frame:0000000000005C5F                 db    0
.eh_frame:0000000000005C60                 db  14h
.eh_frame:0000000000005C61                 db    0
.eh_frame:0000000000005C62                 db    0
.eh_frame:0000000000005C63                 db    0
.eh_frame:0000000000005C64                 db  44h ; D
.eh_frame:0000000000005C65                 db    0
.eh_frame:0000000000005C66                 db    0
.eh_frame:0000000000005C67                 db    0
.eh_frame:0000000000005C68                 db 0E8h
.eh_frame:0000000000005C69                 db 0B8h
.eh_frame:0000000000005C6A                 db 0FFh
.eh_frame:0000000000005C6B                 db 0FFh
.eh_frame:0000000000005C6C                 db    8
.eh_frame:0000000000005C6D                 db    0
.eh_frame:0000000000005C6E                 db    0
.eh_frame:0000000000005C6F                 db    0
.eh_frame:0000000000005C70                 db    0
.eh_frame:0000000000005C71                 db    0
.eh_frame:0000000000005C72                 db    0
.eh_frame:0000000000005C73                 db    0
.eh_frame:0000000000005C74                 db    0
.eh_frame:0000000000005C75                 db    0
.eh_frame:0000000000005C76                 db    0
.eh_frame:0000000000005C77                 db    0
.eh_frame:0000000000005C78                 db  28h ; (
.eh_frame:0000000000005C79                 db    0
.eh_frame:0000000000005C7A                 db    0
.eh_frame:0000000000005C7B                 db    0
.eh_frame:0000000000005C7C                 db  5Ch ; \
.eh_frame:0000000000005C7D                 db    0
.eh_frame:0000000000005C7E                 db    0
.eh_frame:0000000000005C7F                 db    0
.eh_frame:0000000000005C80                 db  80h
.eh_frame:0000000000005C81                 db 0BCh
.eh_frame:0000000000005C82                 db 0FFh
.eh_frame:0000000000005C83                 db 0FFh
.eh_frame:0000000000005C84                 db  1Ah
.eh_frame:0000000000005C85                 db    3
.eh_frame:0000000000005C86                 db    0
.eh_frame:0000000000005C87                 db    0
.eh_frame:0000000000005C88                 db    0
.eh_frame:0000000000005C89                 db  42h ; B
.eh_frame:0000000000005C8A                 db  0Eh
.eh_frame:0000000000005C8B                 db  10h
.eh_frame:0000000000005C8C                 db  8Dh
.eh_frame:0000000000005C8D                 db    2
.eh_frame:0000000000005C8E                 db  42h ; B
.eh_frame:0000000000005C8F                 db  0Eh
.eh_frame:0000000000005C90                 db  18h
.eh_frame:0000000000005C91                 db  8Ch
.eh_frame:0000000000005C92                 db    3
.eh_frame:0000000000005C93                 db  46h ; F
.eh_frame:0000000000005C94                 db  0Eh
.eh_frame:0000000000005C95                 db  20h
.eh_frame:0000000000005C96                 db  86h
.eh_frame:0000000000005C97                 db    4
.eh_frame:0000000000005C98                 db  41h ; A
.eh_frame:0000000000005C99                 db  0Eh
.eh_frame:0000000000005C9A                 db  28h ; (
.eh_frame:0000000000005C9B                 db  83h
.eh_frame:0000000000005C9C                 db    5
.eh_frame:0000000000005C9D                 db  49h ; I
.eh_frame:0000000000005C9E                 db  0Eh
.eh_frame:0000000000005C9F                 db 0B0h
.eh_frame:0000000000005CA0                 db    1
.eh_frame:0000000000005CA1                 db    0
.eh_frame:0000000000005CA2                 db    0
.eh_frame:0000000000005CA3                 db    0
.eh_frame:0000000000005CA4                 db  60h ; `
.eh_frame:0000000000005CA5                 db    0
.eh_frame:0000000000005CA6                 db    0
.eh_frame:0000000000005CA7                 db    0
.eh_frame:0000000000005CA8                 db  88h
.eh_frame:0000000000005CA9                 db    0
.eh_frame:0000000000005CAA                 db    0
.eh_frame:0000000000005CAB                 db    0
.eh_frame:0000000000005CAC                 db 0B4h
.eh_frame:0000000000005CAD                 db 0B8h
.eh_frame:0000000000005CAE                 db 0FFh
.eh_frame:0000000000005CAF                 db 0FFh
.eh_frame:0000000000005CB0                 db  84h
.eh_frame:0000000000005CB1                 db    2
.eh_frame:0000000000005CB2                 db    0
.eh_frame:0000000000005CB3                 db    0
.eh_frame:0000000000005CB4                 db    0
.eh_frame:0000000000005CB5                 db  42h ; B
.eh_frame:0000000000005CB6                 db  0Eh
.eh_frame:0000000000005CB7                 db  10h
.eh_frame:0000000000005CB8                 db  8Fh
.eh_frame:0000000000005CB9                 db    2
.eh_frame:0000000000005CBA                 db  42h ; B
.eh_frame:0000000000005CBB                 db  0Eh
.eh_frame:0000000000005CBC                 db  18h
.eh_frame:0000000000005CBD                 db  8Eh
.eh_frame:0000000000005CBE                 db    3
.eh_frame:0000000000005CBF                 db  42h ; B
.eh_frame:0000000000005CC0                 db  0Eh
.eh_frame:0000000000005CC1                 db  20h
.eh_frame:0000000000005CC2                 db  8Dh
.eh_frame:0000000000005CC3                 db    4
.eh_frame:0000000000005CC4                 db  42h ; B
.eh_frame:0000000000005CC5                 db  0Eh
.eh_frame:0000000000005CC6                 db  28h ; (
.eh_frame:0000000000005CC7                 db  8Ch
.eh_frame:0000000000005CC8                 db    5
.eh_frame:0000000000005CC9                 db  44h ; D
.eh_frame:0000000000005CCA                 db  0Eh
.eh_frame:0000000000005CCB                 db  30h ; 0
.eh_frame:0000000000005CCC                 db  86h
.eh_frame:0000000000005CCD                 db    6
.eh_frame:0000000000005CCE                 db  41h ; A
.eh_frame:0000000000005CCF                 db  0Eh
.eh_frame:0000000000005CD0                 db  38h ; 8
.eh_frame:0000000000005CD1                 db  83h
.eh_frame:0000000000005CD2                 db    7
.eh_frame:0000000000005CD3                 db  46h ; F
.eh_frame:0000000000005CD4                 db  0Eh
.eh_frame:0000000000005CD5                 db  70h ; p
.eh_frame:0000000000005CD6                 db    2
.eh_frame:0000000000005CD7                 db  5Dh ; ]
.eh_frame:0000000000005CD8                 db  0Eh
.eh_frame:0000000000005CD9                 db  78h ; x
.eh_frame:0000000000005CDA                 db  5Ch ; \
.eh_frame:0000000000005CDB                 db  0Eh
.eh_frame:0000000000005CDC                 db  80h
.eh_frame:0000000000005CDD                 db    1
.eh_frame:0000000000005CDE                 db  4Dh ; M
.eh_frame:0000000000005CDF                 db  0Eh
.eh_frame:0000000000005CE0                 db  88h
.eh_frame:0000000000005CE1                 db    1
.eh_frame:0000000000005CE2                 db  48h ; H
.eh_frame:0000000000005CE3                 db  0Eh
.eh_frame:0000000000005CE4                 db  90h
.eh_frame:0000000000005CE5                 db    1
.eh_frame:0000000000005CE6                 db  4Bh ; K
.eh_frame:0000000000005CE7                 db  0Eh
.eh_frame:0000000000005CE8                 db  70h ; p
.eh_frame:0000000000005CE9                 db    3
.eh_frame:0000000000005CEA                 db  2Eh ; .
.eh_frame:0000000000005CEB                 db    1
.eh_frame:0000000000005CEC                 db  0Ah
.eh_frame:0000000000005CED                 db  0Eh
.eh_frame:0000000000005CEE                 db  38h ; 8
.eh_frame:0000000000005CEF                 db  41h ; A
.eh_frame:0000000000005CF0                 db  0Eh
.eh_frame:0000000000005CF1                 db  30h ; 0
.eh_frame:0000000000005CF2                 db  41h ; A
.eh_frame:0000000000005CF3                 db  0Eh
.eh_frame:0000000000005CF4                 db  28h ; (
.eh_frame:0000000000005CF5                 db  42h ; B
.eh_frame:0000000000005CF6                 db  0Eh
.eh_frame:0000000000005CF7                 db  20h
.eh_frame:0000000000005CF8                 db  42h ; B
.eh_frame:0000000000005CF9                 db  0Eh
.eh_frame:0000000000005CFA                 db  18h
.eh_frame:0000000000005CFB                 db  42h ; B
.eh_frame:0000000000005CFC                 db  0Eh
.eh_frame:0000000000005CFD                 db  10h
.eh_frame:0000000000005CFE                 db  42h ; B
.eh_frame:0000000000005CFF                 db  0Eh
.eh_frame:0000000000005D00                 db    8
.eh_frame:0000000000005D01                 db  41h ; A
.eh_frame:0000000000005D02                 db  0Bh
.eh_frame:0000000000005D03                 db    0
.eh_frame:0000000000005D04                 db    0
.eh_frame:0000000000005D05                 db    0
.eh_frame:0000000000005D06                 db    0
.eh_frame:0000000000005D07                 db    0
.eh_frame:0000000000005D08                 db  3Ch ; <
.eh_frame:0000000000005D09                 db    0
.eh_frame:0000000000005D0A                 db    0
.eh_frame:0000000000005D0B                 db    0
.eh_frame:0000000000005D0C                 db 0ECh
.eh_frame:0000000000005D0D                 db    0
.eh_frame:0000000000005D0E                 db    0
.eh_frame:0000000000005D0F                 db    0
.eh_frame:0000000000005D10                 db  10h
.eh_frame:0000000000005D11                 db 0BFh
.eh_frame:0000000000005D12                 db 0FFh
.eh_frame:0000000000005D13                 db 0FFh
.eh_frame:0000000000005D14                 db 0B3h
.eh_frame:0000000000005D15                 db    0
.eh_frame:0000000000005D16                 db    0
.eh_frame:0000000000005D17                 db    0
.eh_frame:0000000000005D18                 db    0
.eh_frame:0000000000005D19                 db  42h ; B
.eh_frame:0000000000005D1A                 db  0Eh
.eh_frame:0000000000005D1B                 db  10h
.eh_frame:0000000000005D1C                 db  8Dh
.eh_frame:0000000000005D1D                 db    2
.eh_frame:0000000000005D1E                 db  42h ; B
.eh_frame:0000000000005D1F                 db  0Eh
.eh_frame:0000000000005D20                 db  18h
.eh_frame:0000000000005D21                 db  8Ch
.eh_frame:0000000000005D22                 db    3
.eh_frame:0000000000005D23                 db  41h ; A
.eh_frame:0000000000005D24                 db  0Eh
.eh_frame:0000000000005D25                 db  20h
.eh_frame:0000000000005D26                 db  86h
.eh_frame:0000000000005D27                 db    4
.eh_frame:0000000000005D28                 db  41h ; A
.eh_frame:0000000000005D29                 db  0Eh
.eh_frame:0000000000005D2A                 db  28h ; (
.eh_frame:0000000000005D2B                 db  83h
.eh_frame:0000000000005D2C                 db    5
.eh_frame:0000000000005D2D                 db  4Ah ; J
.eh_frame:0000000000005D2E                 db  0Eh
.eh_frame:0000000000005D2F                 db  60h ; `
.eh_frame:0000000000005D30                 db    2
.eh_frame:0000000000005D31                 db  4Dh ; M
.eh_frame:0000000000005D32                 db  0Ah
.eh_frame:0000000000005D33                 db  0Eh
.eh_frame:0000000000005D34                 db  28h ; (
.eh_frame:0000000000005D35                 db  41h ; A
.eh_frame:0000000000005D36                 db  0Eh
.eh_frame:0000000000005D37                 db  20h
.eh_frame:0000000000005D38                 db  41h ; A
.eh_frame:0000000000005D39                 db  0Eh
.eh_frame:0000000000005D3A                 db  18h
.eh_frame:0000000000005D3B                 db  42h ; B
.eh_frame:0000000000005D3C                 db  0Eh
.eh_frame:0000000000005D3D                 db  10h
.eh_frame:0000000000005D3E                 db  42h ; B
.eh_frame:0000000000005D3F                 db  0Eh
.eh_frame:0000000000005D40                 db    8
.eh_frame:0000000000005D41                 db  45h ; E
.eh_frame:0000000000005D42                 db  0Bh
.eh_frame:0000000000005D43                 db    0
.eh_frame:0000000000005D44                 db    0
.eh_frame:0000000000005D45                 db    0
.eh_frame:0000000000005D46                 db    0
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db  10h
.eh_frame:0000000000005D49                 db    0
.eh_frame:0000000000005D4A                 db    0
.eh_frame:0000000000005D4B                 db    0
.eh_frame:0000000000005D4C                 db  2Ch ; ,
.eh_frame:0000000000005D4D                 db    1
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db  90h
.eh_frame:0000000000005D51                 db 0BFh
.eh_frame:0000000000005D52                 db 0FFh
.eh_frame:0000000000005D53                 db 0FFh
.eh_frame:0000000000005D54                 db    8
.eh_frame:0000000000005D55                 db    0
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db    0
.eh_frame:0000000000005D59                 db    0
.eh_frame:0000000000005D5A                 db    0
.eh_frame:0000000000005D5B                 db    0
.eh_frame:0000000000005D5C                 db  10h
.eh_frame:0000000000005D5D                 db    0
.eh_frame:0000000000005D5E                 db    0
.eh_frame:0000000000005D5F                 db    0
.eh_frame:0000000000005D60                 db  40h ; @
.eh_frame:0000000000005D61                 db    1
.eh_frame:0000000000005D62                 db    0
.eh_frame:0000000000005D63                 db    0
.eh_frame:0000000000005D64                 db  8Ch
.eh_frame:0000000000005D65                 db 0BFh
.eh_frame:0000000000005D66                 db 0FFh
.eh_frame:0000000000005D67                 db 0FFh
.eh_frame:0000000000005D68                 db    8
.eh_frame:0000000000005D69                 db    0
.eh_frame:0000000000005D6A                 db    0
.eh_frame:0000000000005D6B                 db    0
.eh_frame:0000000000005D6C                 db    0
.eh_frame:0000000000005D6D                 db    0
.eh_frame:0000000000005D6E                 db    0
.eh_frame:0000000000005D6F                 db    0
.eh_frame:0000000000005D70                 db  2Ch ; ,
.eh_frame:0000000000005D71                 db    0
.eh_frame:0000000000005D72                 db    0
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74                 db  54h ; T
.eh_frame:0000000000005D75                 db    1
.eh_frame:0000000000005D76                 db    0
.eh_frame:0000000000005D77                 db    0
.eh_frame:0000000000005D78                 db  88h
.eh_frame:0000000000005D79                 db 0BFh
.eh_frame:0000000000005D7A                 db 0FFh
.eh_frame:0000000000005D7B                 db 0FFh
.eh_frame:0000000000005D7C                 db 0A4h
.eh_frame:0000000000005D7D                 db    0
.eh_frame:0000000000005D7E                 db    0
.eh_frame:0000000000005D7F                 db    0
.eh_frame:0000000000005D80                 db    0
.eh_frame:0000000000005D81                 db  41h ; A
.eh_frame:0000000000005D82                 db  0Eh
.eh_frame:0000000000005D83                 db  10h
.eh_frame:0000000000005D84                 db  86h
.eh_frame:0000000000005D85                 db    2
.eh_frame:0000000000005D86                 db  41h ; A
.eh_frame:0000000000005D87                 db  0Eh
.eh_frame:0000000000005D88                 db  18h
.eh_frame:0000000000005D89                 db  83h
.eh_frame:0000000000005D8A                 db    3
.eh_frame:0000000000005D8B                 db  44h ; D
.eh_frame:0000000000005D8C                 db  0Eh
.eh_frame:0000000000005D8D                 db  20h
.eh_frame:0000000000005D8E                 db  7Ah ; z
.eh_frame:0000000000005D8F                 db  0Ah
.eh_frame:0000000000005D90                 db  0Eh
.eh_frame:0000000000005D91                 db  18h
.eh_frame:0000000000005D92                 db  41h ; A
.eh_frame:0000000000005D93                 db  0Eh
.eh_frame:0000000000005D94                 db  10h
.eh_frame:0000000000005D95                 db  41h ; A
.eh_frame:0000000000005D96                 db  0Eh
.eh_frame:0000000000005D97                 db    8
.eh_frame:0000000000005D98                 db  41h ; A
.eh_frame:0000000000005D99                 db  0Bh
.eh_frame:0000000000005D9A                 db    0
.eh_frame:0000000000005D9B                 db    0
.eh_frame:0000000000005D9C                 db    0
.eh_frame:0000000000005D9D                 db    0
.eh_frame:0000000000005D9E                 db    0
.eh_frame:0000000000005D9F                 db    0
.eh_frame:0000000000005DA0                 db  38h ; 8
.eh_frame:0000000000005DA1                 db    0
.eh_frame:0000000000005DA2                 db    0
.eh_frame:0000000000005DA3                 db    0
.eh_frame:0000000000005DA4                 db  84h
.eh_frame:0000000000005DA5                 db    1
.eh_frame:0000000000005DA6                 db    0
.eh_frame:0000000000005DA7                 db    0
.eh_frame:0000000000005DA8                 db    8
.eh_frame:0000000000005DA9                 db 0C0h
.eh_frame:0000000000005DAA                 db 0FFh
.eh_frame:0000000000005DAB                 db 0FFh
.eh_frame:0000000000005DAC                 db  3Fh ; ?
.eh_frame:0000000000005DAD                 db    1
.eh_frame:0000000000005DAE                 db    0
.eh_frame:0000000000005DAF                 db    0
.eh_frame:0000000000005DB0                 db    0
.eh_frame:0000000000005DB1                 db  42h ; B
.eh_frame:0000000000005DB2                 db  0Eh
.eh_frame:0000000000005DB3                 db  10h
.eh_frame:0000000000005DB4                 db  8Dh
.eh_frame:0000000000005DB5                 db    2
.eh_frame:0000000000005DB6                 db  42h ; B
.eh_frame:0000000000005DB7                 db  0Eh
.eh_frame:0000000000005DB8                 db  18h
.eh_frame:0000000000005DB9                 db  8Ch
.eh_frame:0000000000005DBA                 db    3
.eh_frame:0000000000005DBB                 db  44h ; D
.eh_frame:0000000000005DBC                 db  0Eh
.eh_frame:0000000000005DBD                 db  20h
.eh_frame:0000000000005DBE                 db  86h
.eh_frame:0000000000005DBF                 db    4
.eh_frame:0000000000005DC0                 db  41h ; A
.eh_frame:0000000000005DC1                 db  0Eh
.eh_frame:0000000000005DC2                 db  28h ; (
.eh_frame:0000000000005DC3                 db  83h
.eh_frame:0000000000005DC4                 db    5
.eh_frame:0000000000005DC5                 db  4Dh ; M
.eh_frame:0000000000005DC6                 db  0Eh
.eh_frame:0000000000005DC7                 db  90h
.eh_frame:0000000000005DC8                 db    2
.eh_frame:0000000000005DC9                 db    2
.eh_frame:0000000000005DCA                 db  8Eh
.eh_frame:0000000000005DCB                 db  0Ah
.eh_frame:0000000000005DCC                 db  0Eh
.eh_frame:0000000000005DCD                 db  28h ; (
.eh_frame:0000000000005DCE                 db  41h ; A
.eh_frame:0000000000005DCF                 db  0Eh
.eh_frame:0000000000005DD0                 db  20h
.eh_frame:0000000000005DD1                 db  41h ; A
.eh_frame:0000000000005DD2                 db  0Eh
.eh_frame:0000000000005DD3                 db  18h
.eh_frame:0000000000005DD4                 db  42h ; B
.eh_frame:0000000000005DD5                 db  0Eh
.eh_frame:0000000000005DD6                 db  10h
.eh_frame:0000000000005DD7                 db  42h ; B
.eh_frame:0000000000005DD8                 db  0Eh
.eh_frame:0000000000005DD9                 db    8
.eh_frame:0000000000005DDA                 db  46h ; F
.eh_frame:0000000000005DDB                 db  0Bh
.eh_frame:0000000000005DDC                 db  48h ; H
.eh_frame:0000000000005DDD                 db    0
.eh_frame:0000000000005DDE                 db    0
.eh_frame:0000000000005DDF                 db    0
.eh_frame:0000000000005DE0                 db 0C0h
.eh_frame:0000000000005DE1                 db    1
.eh_frame:0000000000005DE2                 db    0
.eh_frame:0000000000005DE3                 db    0
.eh_frame:0000000000005DE4                 db  0Ch
.eh_frame:0000000000005DE5                 db 0C1h
.eh_frame:0000000000005DE6                 db 0FFh
.eh_frame:0000000000005DE7                 db 0FFh
.eh_frame:0000000000005DE8                 db  3Bh ; ;
.eh_frame:0000000000005DE9                 db    1
.eh_frame:0000000000005DEA                 db    0
.eh_frame:0000000000005DEB                 db    0
.eh_frame:0000000000005DEC                 db    0
.eh_frame:0000000000005DED                 db  42h ; B
.eh_frame:0000000000005DEE                 db  0Eh
.eh_frame:0000000000005DEF                 db  10h
.eh_frame:0000000000005DF0                 db  8Eh
.eh_frame:0000000000005DF1                 db    2
.eh_frame:0000000000005DF2                 db  42h ; B
.eh_frame:0000000000005DF3                 db  0Eh
.eh_frame:0000000000005DF4                 db  18h
.eh_frame:0000000000005DF5                 db  8Dh
.eh_frame:0000000000005DF6                 db    3
.eh_frame:0000000000005DF7                 db  45h ; E
.eh_frame:0000000000005DF8                 db  0Eh
.eh_frame:0000000000005DF9                 db  20h
.eh_frame:0000000000005DFA                 db  8Ch
.eh_frame:0000000000005DFB                 db    4
.eh_frame:0000000000005DFC                 db  41h ; A
.eh_frame:0000000000005DFD                 db  0Eh
.eh_frame:0000000000005DFE                 db  28h ; (
.eh_frame:0000000000005DFF                 db  86h
.eh_frame:0000000000005E00                 db    5
.eh_frame:0000000000005E01                 db  44h ; D
.eh_frame:0000000000005E02                 db  0Eh
.eh_frame:0000000000005E03                 db  30h ; 0
.eh_frame:0000000000005E04                 db  83h
.eh_frame:0000000000005E05                 db    6
.eh_frame:0000000000005E06                 db  4Ah ; J
.eh_frame:0000000000005E07                 db  0Eh
.eh_frame:0000000000005E08                 db  80h
.eh_frame:0000000000005E09                 db    2
.eh_frame:0000000000005E0A                 db    3
.eh_frame:0000000000005E0B                 db  0Dh
.eh_frame:0000000000005E0C                 db    1
.eh_frame:0000000000005E0D                 db  0Ah
.eh_frame:0000000000005E0E                 db  0Eh
.eh_frame:0000000000005E0F                 db  30h ; 0
.eh_frame:0000000000005E10                 db  41h ; A
.eh_frame:0000000000005E11                 db  0Eh
.eh_frame:0000000000005E12                 db  28h ; (
.eh_frame:0000000000005E13                 db  41h ; A
.eh_frame:0000000000005E14                 db  0Eh
.eh_frame:0000000000005E15                 db  20h
.eh_frame:0000000000005E16                 db  42h ; B
.eh_frame:0000000000005E17                 db  0Eh
.eh_frame:0000000000005E18                 db  18h
.eh_frame:0000000000005E19                 db  42h ; B
.eh_frame:0000000000005E1A                 db  0Eh
.eh_frame:0000000000005E1B                 db  10h
.eh_frame:0000000000005E1C                 db  42h ; B
.eh_frame:0000000000005E1D                 db  0Eh
.eh_frame:0000000000005E1E                 db    8
.eh_frame:0000000000005E1F                 db  43h ; C
.eh_frame:0000000000005E20                 db  0Bh
.eh_frame:0000000000005E21                 db    0
.eh_frame:0000000000005E22                 db    0
.eh_frame:0000000000005E23                 db    0
.eh_frame:0000000000005E24                 db    0
.eh_frame:0000000000005E25                 db    0
.eh_frame:0000000000005E26                 db    0
.eh_frame:0000000000005E27                 db    0
.eh_frame:0000000000005E28                 db  1Ch
.eh_frame:0000000000005E29                 db    0
.eh_frame:0000000000005E2A                 db    0
.eh_frame:0000000000005E2B                 db    0
.eh_frame:0000000000005E2C                 db  0Ch
.eh_frame:0000000000005E2D                 db    2
.eh_frame:0000000000005E2E                 db    0
.eh_frame:0000000000005E2F                 db    0
.eh_frame:0000000000005E30                 db    0
.eh_frame:0000000000005E31                 db 0C2h
.eh_frame:0000000000005E32                 db 0FFh
.eh_frame:0000000000005E33                 db 0FFh
.eh_frame:0000000000005E34                 db  9Fh
.eh_frame:0000000000005E35                 db    0
.eh_frame:0000000000005E36                 db    0
.eh_frame:0000000000005E37                 db    0
.eh_frame:0000000000005E38                 db    0
.eh_frame:0000000000005E39                 db  44h ; D
.eh_frame:0000000000005E3A                 db  0Eh
.eh_frame:0000000000005E3B                 db  10h
.eh_frame:0000000000005E3C                 db  83h
.eh_frame:0000000000005E3D                 db    2
.eh_frame:0000000000005E3E                 db    2
.eh_frame:0000000000005E3F                 db  78h ; x
.eh_frame:0000000000005E40                 db  0Ah
.eh_frame:0000000000005E41                 db  0Eh
.eh_frame:0000000000005E42                 db    8
.eh_frame:0000000000005E43                 db  41h ; A
.eh_frame:0000000000005E44                 db  0Bh
.eh_frame:0000000000005E45                 db    0
.eh_frame:0000000000005E46                 db    0
.eh_frame:0000000000005E47                 db    0
.eh_frame:0000000000005E48                 db  40h ; @
.eh_frame:0000000000005E49                 db    0
.eh_frame:0000000000005E4A                 db    0
.eh_frame:0000000000005E4B                 db    0
.eh_frame:0000000000005E4C                 db  2Ch ; ,
.eh_frame:0000000000005E4D                 db    2
.eh_frame:0000000000005E4E                 db    0
.eh_frame:0000000000005E4F                 db    0
.eh_frame:0000000000005E50                 db  80h
.eh_frame:0000000000005E51                 db 0C2h
.eh_frame:0000000000005E52                 db 0FFh
.eh_frame:0000000000005E53                 db 0FFh
.eh_frame:0000000000005E54                 db 0E7h
.eh_frame:0000000000005E55                 db    0
.eh_frame:0000000000005E56                 db    0
.eh_frame:0000000000005E57                 db    0
.eh_frame:0000000000005E58                 db    0
.eh_frame:0000000000005E59                 db  41h ; A
.eh_frame:0000000000005E5A                 db  0Eh
.eh_frame:0000000000005E5B                 db  10h
.eh_frame:0000000000005E5C                 db  86h
.eh_frame:0000000000005E5D                 db    2
.eh_frame:0000000000005E5E                 db  41h ; A
.eh_frame:0000000000005E5F                 db  0Eh
.eh_frame:0000000000005E60                 db  18h
.eh_frame:0000000000005E61                 db  83h
.eh_frame:0000000000005E62                 db    3
.eh_frame:0000000000005E63                 db  49h ; I
.eh_frame:0000000000005E64                 db  0Eh
.eh_frame:0000000000005E65                 db  20h
.eh_frame:0000000000005E66                 db  6Eh ; n
.eh_frame:0000000000005E67                 db  0Ah
.eh_frame:0000000000005E68                 db  0Eh
.eh_frame:0000000000005E69                 db  18h
.eh_frame:0000000000005E6A                 db  41h ; A
.eh_frame:0000000000005E6B                 db  0Eh
.eh_frame:0000000000005E6C                 db  10h
.eh_frame:0000000000005E6D                 db  41h ; A
.eh_frame:0000000000005E6E                 db  0Eh
.eh_frame:0000000000005E6F                 db    8
.eh_frame:0000000000005E70                 db  45h ; E
.eh_frame:0000000000005E71                 db  0Bh
.eh_frame:0000000000005E72                 db    2
.eh_frame:0000000000005E73                 db  4Ah ; J
.eh_frame:0000000000005E74                 db  0Ah
.eh_frame:0000000000005E75                 db  0Eh
.eh_frame:0000000000005E76                 db  18h
.eh_frame:0000000000005E77                 db  41h ; A
.eh_frame:0000000000005E78                 db  0Eh
.eh_frame:0000000000005E79                 db  10h
.eh_frame:0000000000005E7A                 db  41h ; A
.eh_frame:0000000000005E7B                 db  0Eh
.eh_frame:0000000000005E7C                 db    8
.eh_frame:0000000000005E7D                 db  44h ; D
.eh_frame:0000000000005E7E                 db  0Bh
.eh_frame:0000000000005E7F                 db    2
.eh_frame:0000000000005E80                 db  54h ; T
.eh_frame:0000000000005E81                 db  0Eh
.eh_frame:0000000000005E82                 db  18h
.eh_frame:0000000000005E83                 db  41h ; A
.eh_frame:0000000000005E84                 db  0Eh
.eh_frame:0000000000005E85                 db  10h
.eh_frame:0000000000005E86                 db  41h ; A
.eh_frame:0000000000005E87                 db  0Eh
.eh_frame:0000000000005E88                 db    8
.eh_frame:0000000000005E89                 db    0
.eh_frame:0000000000005E8A                 db    0
.eh_frame:0000000000005E8B                 db    0
.eh_frame:0000000000005E8C                 db  74h ; t
.eh_frame:0000000000005E8D                 db    0
.eh_frame:0000000000005E8E                 db    0
.eh_frame:0000000000005E8F                 db    0
.eh_frame:0000000000005E90                 db  70h ; p
.eh_frame:0000000000005E91                 db    2
.eh_frame:0000000000005E92                 db    0
.eh_frame:0000000000005E93                 db    0
.eh_frame:0000000000005E94                 db  2Ch ; ,
.eh_frame:0000000000005E95                 db 0C3h
.eh_frame:0000000000005E96                 db 0FFh
.eh_frame:0000000000005E97                 db 0FFh
.eh_frame:0000000000005E98                 db  34h ; 4
.eh_frame:0000000000005E99                 db  12h
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db    0
.eh_frame:0000000000005E9D                 db  42h ; B
.eh_frame:0000000000005E9E                 db  0Eh
.eh_frame:0000000000005E9F                 db  10h
.eh_frame:0000000000005EA0                 db  8Fh
.eh_frame:0000000000005EA1                 db    2
.eh_frame:0000000000005EA2                 db  42h ; B
.eh_frame:0000000000005EA3                 db  0Eh
.eh_frame:0000000000005EA4                 db  18h
.eh_frame:0000000000005EA5                 db  8Eh
.eh_frame:0000000000005EA6                 db    3
.eh_frame:0000000000005EA7                 db  45h ; E
.eh_frame:0000000000005EA8                 db  0Eh
.eh_frame:0000000000005EA9                 db  20h
.eh_frame:0000000000005EAA                 db  8Dh
.eh_frame:0000000000005EAB                 db    4
.eh_frame:0000000000005EAC                 db  42h ; B
.eh_frame:0000000000005EAD                 db  0Eh
.eh_frame:0000000000005EAE                 db  28h ; (
.eh_frame:0000000000005EAF                 db  8Ch
.eh_frame:0000000000005EB0                 db    5
.eh_frame:0000000000005EB1                 db  44h ; D
.eh_frame:0000000000005EB2                 db  0Eh
.eh_frame:0000000000005EB3                 db  30h ; 0
.eh_frame:0000000000005EB4                 db  86h
.eh_frame:0000000000005EB5                 db    6
.eh_frame:0000000000005EB6                 db  41h ; A
.eh_frame:0000000000005EB7                 db  0Eh
.eh_frame:0000000000005EB8                 db  38h ; 8
.eh_frame:0000000000005EB9                 db  83h
.eh_frame:0000000000005EBA                 db    7
.eh_frame:0000000000005EBB                 db  53h ; S
.eh_frame:0000000000005EBC                 db  0Eh
.eh_frame:0000000000005EBD                 db 0F0h
.eh_frame:0000000000005EBE                 db    1
.eh_frame:0000000000005EBF                 db    3
.eh_frame:0000000000005EC0                 db  81h
.eh_frame:0000000000005EC1                 db  0Bh
.eh_frame:0000000000005EC2                 db  0Eh
.eh_frame:0000000000005EC3                 db 0F8h
.eh_frame:0000000000005EC4                 db    1
.eh_frame:0000000000005EC5                 db  4Ah ; J
.eh_frame:0000000000005EC6                 db  0Eh
.eh_frame:0000000000005EC7                 db  80h
.eh_frame:0000000000005EC8                 db    2
.eh_frame:0000000000005EC9                 db  44h ; D
.eh_frame:0000000000005ECA                 db  0Eh
.eh_frame:0000000000005ECB                 db  88h
.eh_frame:0000000000005ECC                 db    2
.eh_frame:0000000000005ECD                 db  45h ; E
.eh_frame:0000000000005ECE                 db  0Eh
.eh_frame:0000000000005ECF                 db  90h
.eh_frame:0000000000005ED0                 db    2
.eh_frame:0000000000005ED1                 db  5Fh ; _
.eh_frame:0000000000005ED2                 db  0Eh
.eh_frame:0000000000005ED3                 db 0F0h
.eh_frame:0000000000005ED4                 db    1
.eh_frame:0000000000005ED5                 db  64h ; d
.eh_frame:0000000000005ED6                 db  0Ah
.eh_frame:0000000000005ED7                 db  0Eh
.eh_frame:0000000000005ED8                 db  38h ; 8
.eh_frame:0000000000005ED9                 db  41h ; A
.eh_frame:0000000000005EDA                 db  0Eh
.eh_frame:0000000000005EDB                 db  30h ; 0
.eh_frame:0000000000005EDC                 db  41h ; A
.eh_frame:0000000000005EDD                 db  0Eh
.eh_frame:0000000000005EDE                 db  28h ; (
.eh_frame:0000000000005EDF                 db  42h ; B
.eh_frame:0000000000005EE0                 db  0Eh
.eh_frame:0000000000005EE1                 db  20h
.eh_frame:0000000000005EE2                 db  42h ; B
.eh_frame:0000000000005EE3                 db  0Eh
.eh_frame:0000000000005EE4                 db  18h
.eh_frame:0000000000005EE5                 db  42h ; B
.eh_frame:0000000000005EE6                 db  0Eh
.eh_frame:0000000000005EE7                 db  10h
.eh_frame:0000000000005EE8                 db  42h ; B
.eh_frame:0000000000005EE9                 db  0Eh
.eh_frame:0000000000005EEA                 db    8
.eh_frame:0000000000005EEB                 db  44h ; D
.eh_frame:0000000000005EEC                 db  0Bh
.eh_frame:0000000000005EED                 db    3
.eh_frame:0000000000005EEE                 db  99h
.eh_frame:0000000000005EEF                 db    5
.eh_frame:0000000000005EF0                 db  0Eh
.eh_frame:0000000000005EF1                 db 0F8h
.eh_frame:0000000000005EF2                 db    1
.eh_frame:0000000000005EF3                 db  4Dh ; M
.eh_frame:0000000000005EF4                 db  0Eh
.eh_frame:0000000000005EF5                 db  80h
.eh_frame:0000000000005EF6                 db    2
.eh_frame:0000000000005EF7                 db  44h ; D
.eh_frame:0000000000005EF8                 db  0Eh
.eh_frame:0000000000005EF9                 db  88h
.eh_frame:0000000000005EFA                 db    2
.eh_frame:0000000000005EFB                 db  47h ; G
.eh_frame:0000000000005EFC                 db  0Eh
.eh_frame:0000000000005EFD                 db  90h
.eh_frame:0000000000005EFE                 db    2
.eh_frame:0000000000005EFF                 db  5Bh ; [
.eh_frame:0000000000005F00                 db  0Eh
.eh_frame:0000000000005F01                 db 0F0h
.eh_frame:0000000000005F02                 db    1
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db  68h ; h
.eh_frame:0000000000005F05                 db    0
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db 0E8h
.eh_frame:0000000000005F09                 db    2
.eh_frame:0000000000005F0A                 db    0
.eh_frame:0000000000005F0B                 db    0
.eh_frame:0000000000005F0C                 db 0F4h
.eh_frame:0000000000005F0D                 db 0D4h
.eh_frame:0000000000005F0E                 db 0FFh
.eh_frame:0000000000005F0F                 db 0FFh
.eh_frame:0000000000005F10                 db 0ABh
.eh_frame:0000000000005F11                 db    1
.eh_frame:0000000000005F12                 db    0
.eh_frame:0000000000005F13                 db    0
.eh_frame:0000000000005F14                 db    0
.eh_frame:0000000000005F15                 db  42h ; B
.eh_frame:0000000000005F16                 db  0Eh
.eh_frame:0000000000005F17                 db  10h
.eh_frame:0000000000005F18                 db  8Fh
.eh_frame:0000000000005F19                 db    2
.eh_frame:0000000000005F1A                 db  42h ; B
.eh_frame:0000000000005F1B                 db  0Eh
.eh_frame:0000000000005F1C                 db  18h
.eh_frame:0000000000005F1D                 db  8Eh
.eh_frame:0000000000005F1E                 db    3
.eh_frame:0000000000005F1F                 db  45h ; E
.eh_frame:0000000000005F20                 db  0Eh
.eh_frame:0000000000005F21                 db  20h
.eh_frame:0000000000005F22                 db  8Dh
.eh_frame:0000000000005F23                 db    4
.eh_frame:0000000000005F24                 db  42h ; B
.eh_frame:0000000000005F25                 db  0Eh
.eh_frame:0000000000005F26                 db  28h ; (
.eh_frame:0000000000005F27                 db  8Ch
.eh_frame:0000000000005F28                 db    5
.eh_frame:0000000000005F29                 db  44h ; D
.eh_frame:0000000000005F2A                 db  0Eh
.eh_frame:0000000000005F2B                 db  30h ; 0
.eh_frame:0000000000005F2C                 db  86h
.eh_frame:0000000000005F2D                 db    6
.eh_frame:0000000000005F2E                 db  41h ; A
.eh_frame:0000000000005F2F                 db  0Eh
.eh_frame:0000000000005F30                 db  38h ; 8
.eh_frame:0000000000005F31                 db  83h
.eh_frame:0000000000005F32                 db    7
.eh_frame:0000000000005F33                 db  47h ; G
.eh_frame:0000000000005F34                 db  0Eh
.eh_frame:0000000000005F35                 db  60h ; `
.eh_frame:0000000000005F36                 db    2
.eh_frame:0000000000005F37                 db  99h
.eh_frame:0000000000005F38                 db  0Eh
.eh_frame:0000000000005F39                 db  68h ; h
.eh_frame:0000000000005F3A                 db  5Fh ; _
.eh_frame:0000000000005F3B                 db  0Eh
.eh_frame:0000000000005F3C                 db  70h ; p
.eh_frame:0000000000005F3D                 db  46h ; F
.eh_frame:0000000000005F3E                 db  0Eh
.eh_frame:0000000000005F3F                 db  78h ; x
.eh_frame:0000000000005F40                 db  42h ; B
.eh_frame:0000000000005F41                 db  0Eh
.eh_frame:0000000000005F42                 db  80h
.eh_frame:0000000000005F43                 db    1
.eh_frame:0000000000005F44                 db  59h ; Y
.eh_frame:0000000000005F45                 db  0Eh
.eh_frame:0000000000005F46                 db  60h ; `
.eh_frame:0000000000005F47                 db    2
.eh_frame:0000000000005F48                 db  40h ; @
.eh_frame:0000000000005F49                 db  0Eh
.eh_frame:0000000000005F4A                 db  68h ; h
.eh_frame:0000000000005F4B                 db  4Bh ; K
.eh_frame:0000000000005F4C                 db  0Eh
.eh_frame:0000000000005F4D                 db  70h ; p
.eh_frame:0000000000005F4E                 db  43h ; C
.eh_frame:0000000000005F4F                 db  0Eh
.eh_frame:0000000000005F50                 db  78h ; x
.eh_frame:0000000000005F51                 db  45h ; E
.eh_frame:0000000000005F52                 db  0Eh
.eh_frame:0000000000005F53                 db  80h
.eh_frame:0000000000005F54                 db    1
.eh_frame:0000000000005F55                 db  5Eh ; ^
.eh_frame:0000000000005F56                 db  0Eh
.eh_frame:0000000000005F57                 db  60h ; `
.eh_frame:0000000000005F58                 db  4Ch ; L
.eh_frame:0000000000005F59                 db  0Ah
.eh_frame:0000000000005F5A                 db  0Eh
.eh_frame:0000000000005F5B                 db  38h ; 8
.eh_frame:0000000000005F5C                 db  44h ; D
.eh_frame:0000000000005F5D                 db  0Eh
.eh_frame:0000000000005F5E                 db  30h ; 0
.eh_frame:0000000000005F5F                 db  41h ; A
.eh_frame:0000000000005F60                 db  0Eh
.eh_frame:0000000000005F61                 db  28h ; (
.eh_frame:0000000000005F62                 db  42h ; B
.eh_frame:0000000000005F63                 db  0Eh
.eh_frame:0000000000005F64                 db  20h
.eh_frame:0000000000005F65                 db  42h ; B
.eh_frame:0000000000005F66                 db  0Eh
.eh_frame:0000000000005F67                 db  18h
.eh_frame:0000000000005F68                 db  42h ; B
.eh_frame:0000000000005F69                 db  0Eh
.eh_frame:0000000000005F6A                 db  10h
.eh_frame:0000000000005F6B                 db  42h ; B
.eh_frame:0000000000005F6C                 db  0Eh
.eh_frame:0000000000005F6D                 db    8
.eh_frame:0000000000005F6E                 db  46h ; F
.eh_frame:0000000000005F6F                 db  0Bh
.eh_frame:0000000000005F70                 db  28h ; (
.eh_frame:0000000000005F71                 db    0
.eh_frame:0000000000005F72                 db    0
.eh_frame:0000000000005F73                 db    0
.eh_frame:0000000000005F74                 db  54h ; T
.eh_frame:0000000000005F75                 db    3
.eh_frame:0000000000005F76                 db    0
.eh_frame:0000000000005F77                 db    0
.eh_frame:0000000000005F78                 db  38h ; 8
.eh_frame:0000000000005F79                 db 0D6h
.eh_frame:0000000000005F7A                 db 0FFh
.eh_frame:0000000000005F7B                 db 0FFh
.eh_frame:0000000000005F7C                 db  36h ; 6
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db    0
.eh_frame:0000000000005F81                 db  42h ; B
.eh_frame:0000000000005F82                 db  0Eh
.eh_frame:0000000000005F83                 db  10h
.eh_frame:0000000000005F84                 db  8Ch
.eh_frame:0000000000005F85                 db    2
.eh_frame:0000000000005F86                 db  41h ; A
.eh_frame:0000000000005F87                 db  0Eh
.eh_frame:0000000000005F88                 db  18h
.eh_frame:0000000000005F89                 db  86h
.eh_frame:0000000000005F8A                 db    3
.eh_frame:0000000000005F8B                 db  41h ; A
.eh_frame:0000000000005F8C                 db  0Eh
.eh_frame:0000000000005F8D                 db  20h
.eh_frame:0000000000005F8E                 db  83h
.eh_frame:0000000000005F8F                 db    4
.eh_frame:0000000000005F90                 db  6Eh ; n
.eh_frame:0000000000005F91                 db  0Eh
.eh_frame:0000000000005F92                 db  18h
.eh_frame:0000000000005F93                 db  41h ; A
.eh_frame:0000000000005F94                 db  0Eh
.eh_frame:0000000000005F95                 db  10h
.eh_frame:0000000000005F96                 db  42h ; B
.eh_frame:0000000000005F97                 db  0Eh
.eh_frame:0000000000005F98                 db    8
.eh_frame:0000000000005F99                 db    0
.eh_frame:0000000000005F9A                 db    0
.eh_frame:0000000000005F9B                 db    0
.eh_frame:0000000000005F9C                 db  10h
.eh_frame:0000000000005F9D                 db    0
.eh_frame:0000000000005F9E                 db    0
.eh_frame:0000000000005F9F                 db    0
.eh_frame:0000000000005FA0                 db  80h
.eh_frame:0000000000005FA1                 db    3
.eh_frame:0000000000005FA2                 db    0
.eh_frame:0000000000005FA3                 db    0
.eh_frame:0000000000005FA4                 db  4Ch ; L
.eh_frame:0000000000005FA5                 db 0D6h
.eh_frame:0000000000005FA6                 db 0FFh
.eh_frame:0000000000005FA7                 db 0FFh
.eh_frame:0000000000005FA8                 db  11h
.eh_frame:0000000000005FA9                 db    0
.eh_frame:0000000000005FAA                 db    0
.eh_frame:0000000000005FAB                 db    0
.eh_frame:0000000000005FAC                 db    0
.eh_frame:0000000000005FAD                 db    0
.eh_frame:0000000000005FAE                 db    0
.eh_frame:0000000000005FAF                 db    0
.eh_frame:0000000000005FB0                 db  10h
.eh_frame:0000000000005FB1                 db    0
.eh_frame:0000000000005FB2                 db    0
.eh_frame:0000000000005FB3                 db    0
.eh_frame:0000000000005FB4                 db  94h
.eh_frame:0000000000005FB5                 db    3
.eh_frame:0000000000005FB6                 db    0
.eh_frame:0000000000005FB7                 db    0
.eh_frame:0000000000005FB8                 db  58h ; X
.eh_frame:0000000000005FB9                 db 0D6h
.eh_frame:0000000000005FBA                 db 0FFh
.eh_frame:0000000000005FBB                 db 0FFh
.eh_frame:0000000000005FBC                 db  11h
.eh_frame:0000000000005FBD                 db    0
.eh_frame:0000000000005FBE                 db    0
.eh_frame:0000000000005FBF                 db    0
.eh_frame:0000000000005FC0                 db    0
.eh_frame:0000000000005FC1                 db    0
.eh_frame:0000000000005FC2                 db    0
.eh_frame:0000000000005FC3                 db    0
.eh_frame:0000000000005FC4                 db  10h
.eh_frame:0000000000005FC5                 db    0
.eh_frame:0000000000005FC6                 db    0
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db 0A8h
.eh_frame:0000000000005FC9                 db    3
.eh_frame:0000000000005FCA                 db    0
.eh_frame:0000000000005FCB                 db    0
.eh_frame:0000000000005FCC                 db  64h ; d
.eh_frame:0000000000005FCD                 db 0D6h
.eh_frame:0000000000005FCE                 db 0FFh
.eh_frame:0000000000005FCF                 db 0FFh
.eh_frame:0000000000005FD0                 db  35h ; 5
.eh_frame:0000000000005FD1                 db    0
.eh_frame:0000000000005FD2                 db    0
.eh_frame:0000000000005FD3                 db    0
.eh_frame:0000000000005FD4                 db    0
.eh_frame:0000000000005FD5                 db    0
.eh_frame:0000000000005FD6                 db    0
.eh_frame:0000000000005FD7                 db    0
.eh_frame:0000000000005FD8                 db  10h
.eh_frame:0000000000005FD9                 db    0
.eh_frame:0000000000005FDA                 db    0
.eh_frame:0000000000005FDB                 db    0
.eh_frame:0000000000005FDC                 db 0BCh
.eh_frame:0000000000005FDD                 db    3
.eh_frame:0000000000005FDE                 db    0
.eh_frame:0000000000005FDF                 db    0
.eh_frame:0000000000005FE0                 db  90h
.eh_frame:0000000000005FE1                 db 0D6h
.eh_frame:0000000000005FE2                 db 0FFh
.eh_frame:0000000000005FE3                 db 0FFh
.eh_frame:0000000000005FE4                 db  15h
.eh_frame:0000000000005FE5                 db    0
.eh_frame:0000000000005FE6                 db    0
.eh_frame:0000000000005FE7                 db    0
.eh_frame:0000000000005FE8                 db    0
.eh_frame:0000000000005FE9                 db    0
.eh_frame:0000000000005FEA                 db    0
.eh_frame:0000000000005FEB                 db    0
.eh_frame:0000000000005FEC                 db  10h
.eh_frame:0000000000005FED                 db    0
.eh_frame:0000000000005FEE                 db    0
.eh_frame:0000000000005FEF                 db    0
.eh_frame:0000000000005FF0                 db 0D0h
.eh_frame:0000000000005FF1                 db    3
.eh_frame:0000000000005FF2                 db    0
.eh_frame:0000000000005FF3                 db    0
.eh_frame:0000000000005FF4                 db  9Ch
.eh_frame:0000000000005FF5                 db 0D6h
.eh_frame:0000000000005FF6                 db 0FFh
.eh_frame:0000000000005FF7                 db 0FFh
.eh_frame:0000000000005FF8                 db  30h ; 0
.eh_frame:0000000000005FF9                 db    0
.eh_frame:0000000000005FFA                 db    0
.eh_frame:0000000000005FFB                 db    0
.eh_frame:0000000000005FFC                 db    0
.eh_frame:0000000000005FFD                 db  6Bh ; k
.eh_frame:0000000000005FFE                 db  0Eh
.eh_frame:0000000000005FFF                 db  10h
.eh_frame:0000000000006000                 db  50h ; P
.eh_frame:0000000000006001                 db    0
.eh_frame:0000000000006002                 db    0
.eh_frame:0000000000006003                 db    0
.eh_frame:0000000000006004                 db 0E4h
.eh_frame:0000000000006005                 db    3
.eh_frame:0000000000006006                 db    0
.eh_frame:0000000000006007                 db    0
.eh_frame:0000000000006008                 db 0B8h
.eh_frame:0000000000006009                 db 0D6h
.eh_frame:000000000000600A                 db 0FFh
.eh_frame:000000000000600B                 db 0FFh
.eh_frame:000000000000600C                 db  74h ; t
.eh_frame:000000000000600D                 db    0
.eh_frame:000000000000600E                 db    0
.eh_frame:000000000000600F                 db    0
.eh_frame:0000000000006010                 db    0
.eh_frame:0000000000006011                 db  42h ; B
.eh_frame:0000000000006012                 db  0Eh
.eh_frame:0000000000006013                 db  10h
.eh_frame:0000000000006014                 db  8Fh
.eh_frame:0000000000006015                 db    2
.eh_frame:0000000000006016                 db  42h ; B
.eh_frame:0000000000006017                 db  0Eh
.eh_frame:0000000000006018                 db  18h
.eh_frame:0000000000006019                 db  8Eh
.eh_frame:000000000000601A                 db    3
.eh_frame:000000000000601B                 db  49h ; I
.eh_frame:000000000000601C                 db  0Eh
.eh_frame:000000000000601D                 db  20h
.eh_frame:000000000000601E                 db  8Dh
.eh_frame:000000000000601F                 db    4
.eh_frame:0000000000006020                 db  42h ; B
.eh_frame:0000000000006021                 db  0Eh
.eh_frame:0000000000006022                 db  28h ; (
.eh_frame:0000000000006023                 db  8Ch
.eh_frame:0000000000006024                 db    5
.eh_frame:0000000000006025                 db  44h ; D
.eh_frame:0000000000006026                 db  0Eh
.eh_frame:0000000000006027                 db  30h ; 0
.eh_frame:0000000000006028                 db  86h
.eh_frame:0000000000006029                 db    6
.eh_frame:000000000000602A                 db  41h ; A
.eh_frame:000000000000602B                 db  0Eh
.eh_frame:000000000000602C                 db  38h ; 8
.eh_frame:000000000000602D                 db  83h
.eh_frame:000000000000602E                 db    7
.eh_frame:000000000000602F                 db  4Dh ; M
.eh_frame:0000000000006030                 db  0Eh
.eh_frame:0000000000006031                 db  50h ; P
.eh_frame:0000000000006032                 db  5Fh ; _
.eh_frame:0000000000006033                 db  0Eh
.eh_frame:0000000000006034                 db  58h ; X
.eh_frame:0000000000006035                 db  47h ; G
.eh_frame:0000000000006036                 db  0Eh
.eh_frame:0000000000006037                 db  60h ; `
.eh_frame:0000000000006038                 db  46h ; F
.eh_frame:0000000000006039                 db  0Eh
.eh_frame:000000000000603A                 db  68h ; h
.eh_frame:000000000000603B                 db  44h ; D
.eh_frame:000000000000603C                 db  0Eh
.eh_frame:000000000000603D                 db  70h ; p
.eh_frame:000000000000603E                 db  58h ; X
.eh_frame:000000000000603F                 db  0Eh
.eh_frame:0000000000006040                 db  38h ; 8
.eh_frame:0000000000006041                 db  41h ; A
.eh_frame:0000000000006042                 db  0Eh
.eh_frame:0000000000006043                 db  30h ; 0
.eh_frame:0000000000006044                 db  41h ; A
.eh_frame:0000000000006045                 db  0Eh
.eh_frame:0000000000006046                 db  28h ; (
.eh_frame:0000000000006047                 db  42h ; B
.eh_frame:0000000000006048                 db  0Eh
.eh_frame:0000000000006049                 db  20h
.eh_frame:000000000000604A                 db  42h ; B
.eh_frame:000000000000604B                 db  0Eh
.eh_frame:000000000000604C                 db  18h
.eh_frame:000000000000604D                 db  42h ; B
.eh_frame:000000000000604E                 db  0Eh
.eh_frame:000000000000604F                 db  10h
.eh_frame:0000000000006050                 db  42h ; B
.eh_frame:0000000000006051                 db  0Eh
.eh_frame:0000000000006052                 db    8
.eh_frame:0000000000006053                 db    0
.eh_frame:0000000000006054                 db  68h ; h
.eh_frame:0000000000006055                 db    0
.eh_frame:0000000000006056                 db    0
.eh_frame:0000000000006057                 db    0
.eh_frame:0000000000006058                 db  38h ; 8
.eh_frame:0000000000006059                 db    4
.eh_frame:000000000000605A                 db    0
.eh_frame:000000000000605B                 db    0
.eh_frame:000000000000605C                 db 0E4h
.eh_frame:000000000000605D                 db 0D6h
.eh_frame:000000000000605E                 db 0FFh
.eh_frame:000000000000605F                 db 0FFh
.eh_frame:0000000000006060                 db 0E3h
.eh_frame:0000000000006061                 db    0
.eh_frame:0000000000006062                 db    0
.eh_frame:0000000000006063                 db    0
.eh_frame:0000000000006064                 db    0
.eh_frame:0000000000006065                 db  42h ; B
.eh_frame:0000000000006066                 db  0Eh
.eh_frame:0000000000006067                 db  10h
.eh_frame:0000000000006068                 db  8Fh
.eh_frame:0000000000006069                 db    2
.eh_frame:000000000000606A                 db  42h ; B
.eh_frame:000000000000606B                 db  0Eh
.eh_frame:000000000000606C                 db  18h
.eh_frame:000000000000606D                 db  8Eh
.eh_frame:000000000000606E                 db    3
.eh_frame:000000000000606F                 db  49h ; I
.eh_frame:0000000000006070                 db  0Eh
.eh_frame:0000000000006071                 db  20h
.eh_frame:0000000000006072                 db  8Dh
.eh_frame:0000000000006073                 db    4
.eh_frame:0000000000006074                 db  42h ; B
.eh_frame:0000000000006075                 db  0Eh
.eh_frame:0000000000006076                 db  28h ; (
.eh_frame:0000000000006077                 db  8Ch
.eh_frame:0000000000006078                 db    5
.eh_frame:0000000000006079                 db  44h ; D
.eh_frame:000000000000607A                 db  0Eh
.eh_frame:000000000000607B                 db  30h ; 0
.eh_frame:000000000000607C                 db  86h
.eh_frame:000000000000607D                 db    6
.eh_frame:000000000000607E                 db  41h ; A
.eh_frame:000000000000607F                 db  0Eh
.eh_frame:0000000000006080                 db  38h ; 8
.eh_frame:0000000000006081                 db  83h
.eh_frame:0000000000006082                 db    7
.eh_frame:0000000000006083                 db  4Dh ; M
.eh_frame:0000000000006084                 db  0Eh
.eh_frame:0000000000006085                 db  70h ; p
.eh_frame:0000000000006086                 db  65h ; e
.eh_frame:0000000000006087                 db  0Eh
.eh_frame:0000000000006088                 db  78h ; x
.eh_frame:0000000000006089                 db  4Dh ; M
.eh_frame:000000000000608A                 db  0Eh
.eh_frame:000000000000608B                 db  80h
.eh_frame:000000000000608C                 db    1
.eh_frame:000000000000608D                 db  46h ; F
.eh_frame:000000000000608E                 db  0Eh
.eh_frame:000000000000608F                 db  88h
.eh_frame:0000000000006090                 db    1
.eh_frame:0000000000006091                 db  42h ; B
.eh_frame:0000000000006092                 db  0Eh
.eh_frame:0000000000006093                 db  90h
.eh_frame:0000000000006094                 db    1
.eh_frame:0000000000006095                 db  5Eh ; ^
.eh_frame:0000000000006096                 db  0Eh
.eh_frame:0000000000006097                 db  70h ; p
.eh_frame:0000000000006098                 db  56h ; V
.eh_frame:0000000000006099                 db  0Eh
.eh_frame:000000000000609A                 db  78h ; x
.eh_frame:000000000000609B                 db  43h ; C
.eh_frame:000000000000609C                 db  0Eh
.eh_frame:000000000000609D                 db  80h
.eh_frame:000000000000609E                 db    1
.eh_frame:000000000000609F                 db  43h ; C
.eh_frame:00000000000060A0                 db  0Eh
.eh_frame:00000000000060A1                 db  88h
.eh_frame:00000000000060A2                 db    1
.eh_frame:00000000000060A3                 db  56h ; V
.eh_frame:00000000000060A4                 db  0Eh
.eh_frame:00000000000060A5                 db  90h
.eh_frame:00000000000060A6                 db    1
.eh_frame:00000000000060A7                 db  52h ; R
.eh_frame:00000000000060A8                 db  0Eh
.eh_frame:00000000000060A9                 db  70h ; p
.eh_frame:00000000000060AA                 db  5Bh ; [
.eh_frame:00000000000060AB                 db  0Eh
.eh_frame:00000000000060AC                 db  38h ; 8
.eh_frame:00000000000060AD                 db  41h ; A
.eh_frame:00000000000060AE                 db  0Eh
.eh_frame:00000000000060AF                 db  30h ; 0
.eh_frame:00000000000060B0                 db  41h ; A
.eh_frame:00000000000060B1                 db  0Eh
.eh_frame:00000000000060B2                 db  28h ; (
.eh_frame:00000000000060B3                 db  42h ; B
.eh_frame:00000000000060B4                 db  0Eh
.eh_frame:00000000000060B5                 db  20h
.eh_frame:00000000000060B6                 db  42h ; B
.eh_frame:00000000000060B7                 db  0Eh
.eh_frame:00000000000060B8                 db  18h
.eh_frame:00000000000060B9                 db  42h ; B
.eh_frame:00000000000060BA                 db  0Eh
.eh_frame:00000000000060BB                 db  10h
.eh_frame:00000000000060BC                 db  42h ; B
.eh_frame:00000000000060BD                 db  0Eh
.eh_frame:00000000000060BE                 db    8
.eh_frame:00000000000060BF                 db    0
.eh_frame:00000000000060C0                 db  10h
.eh_frame:00000000000060C1                 db    0
.eh_frame:00000000000060C2                 db    0
.eh_frame:00000000000060C3                 db    0
.eh_frame:00000000000060C4                 db 0A4h
.eh_frame:00000000000060C5                 db    4
.eh_frame:00000000000060C6                 db    0
.eh_frame:00000000000060C7                 db    0
.eh_frame:00000000000060C8                 db  68h ; h
.eh_frame:00000000000060C9                 db 0D7h
.eh_frame:00000000000060CA                 db 0FFh
.eh_frame:00000000000060CB                 db 0FFh
.eh_frame:00000000000060CC                 db  0Ah
.eh_frame:00000000000060CD                 db    0
.eh_frame:00000000000060CE                 db    0
.eh_frame:00000000000060CF                 db    0
.eh_frame:00000000000060D0                 db    0
.eh_frame:00000000000060D1                 db    0
.eh_frame:00000000000060D2                 db    0
.eh_frame:00000000000060D3                 db    0
.eh_frame:00000000000060D4                 db  28h ; (
.eh_frame:00000000000060D5                 db    0
.eh_frame:00000000000060D6                 db    0
.eh_frame:00000000000060D7                 db    0
.eh_frame:00000000000060D8                 db 0B8h
.eh_frame:00000000000060D9                 db    4
.eh_frame:00000000000060DA                 db    0
.eh_frame:00000000000060DB                 db    0
.eh_frame:00000000000060DC                 db  64h ; d
.eh_frame:00000000000060DD                 db 0D7h
.eh_frame:00000000000060DE                 db 0FFh
.eh_frame:00000000000060DF                 db 0FFh
.eh_frame:00000000000060E0                 db  93h
.eh_frame:00000000000060E1                 db    0
.eh_frame:00000000000060E2                 db    0
.eh_frame:00000000000060E3                 db    0
.eh_frame:00000000000060E4                 db    0
.eh_frame:00000000000060E5                 db  48h ; H
.eh_frame:00000000000060E6                 db  0Eh
.eh_frame:00000000000060E7                 db  10h
.eh_frame:00000000000060E8                 db  8Ch
.eh_frame:00000000000060E9                 db    2
.eh_frame:00000000000060EA                 db  48h ; H
.eh_frame:00000000000060EB                 db  0Eh
.eh_frame:00000000000060EC                 db  18h
.eh_frame:00000000000060ED                 db  86h
.eh_frame:00000000000060EE                 db    3
.eh_frame:00000000000060EF                 db  41h ; A
.eh_frame:00000000000060F0                 db  0Eh
.eh_frame:00000000000060F1                 db  20h
.eh_frame:00000000000060F2                 db  83h
.eh_frame:00000000000060F3                 db    4
.eh_frame:00000000000060F4                 db    2
.eh_frame:00000000000060F5                 db  74h ; t
.eh_frame:00000000000060F6                 db  0Eh
.eh_frame:00000000000060F7                 db  18h
.eh_frame:00000000000060F8                 db  4Bh ; K
.eh_frame:00000000000060F9                 db  0Eh
.eh_frame:00000000000060FA                 db  10h
.eh_frame:00000000000060FB                 db  42h ; B
.eh_frame:00000000000060FC                 db  0Eh
.eh_frame:00000000000060FD                 db    8
.eh_frame:00000000000060FE                 db    0
.eh_frame:00000000000060FF                 db    0
.eh_frame:0000000000006100                 db  10h
.eh_frame:0000000000006101                 db    0
.eh_frame:0000000000006102                 db    0
.eh_frame:0000000000006103                 db    0
.eh_frame:0000000000006104                 db 0E4h
.eh_frame:0000000000006105                 db    4
.eh_frame:0000000000006106                 db    0
.eh_frame:0000000000006107                 db    0
.eh_frame:0000000000006108                 db 0D8h
.eh_frame:0000000000006109                 db 0D7h
.eh_frame:000000000000610A                 db 0FFh
.eh_frame:000000000000610B                 db 0FFh
.eh_frame:000000000000610C                 db  13h
.eh_frame:000000000000610D                 db    0
.eh_frame:000000000000610E                 db    0
.eh_frame:000000000000610F                 db    0
.eh_frame:0000000000006110                 db    0
.eh_frame:0000000000006111                 db    0
.eh_frame:0000000000006112                 db    0
.eh_frame:0000000000006113                 db    0
.eh_frame:0000000000006114                 db  10h
.eh_frame:0000000000006115                 db    0
.eh_frame:0000000000006116                 db    0
.eh_frame:0000000000006117                 db    0
.eh_frame:0000000000006118                 db 0F8h
.eh_frame:0000000000006119                 db    4
.eh_frame:000000000000611A                 db    0
.eh_frame:000000000000611B                 db    0
.eh_frame:000000000000611C                 db 0E4h
.eh_frame:000000000000611D                 db 0D7h
.eh_frame:000000000000611E                 db 0FFh
.eh_frame:000000000000611F                 db 0FFh
.eh_frame:0000000000006120                 db  0Ch
.eh_frame:0000000000006121                 db    0
.eh_frame:0000000000006122                 db    0
.eh_frame:0000000000006123                 db    0
.eh_frame:0000000000006124                 db    0
.eh_frame:0000000000006125                 db    0
.eh_frame:0000000000006126                 db    0
.eh_frame:0000000000006127                 db    0
.eh_frame:0000000000006128                 db  10h
.eh_frame:0000000000006129                 db    0
.eh_frame:000000000000612A                 db    0
.eh_frame:000000000000612B                 db    0
.eh_frame:000000000000612C                 db  0Ch
.eh_frame:000000000000612D                 db    5
.eh_frame:000000000000612E                 db    0
.eh_frame:000000000000612F                 db    0
.eh_frame:0000000000006130                 db 0E0h
.eh_frame:0000000000006131                 db 0D7h
.eh_frame:0000000000006132                 db 0FFh
.eh_frame:0000000000006133                 db 0FFh
.eh_frame:0000000000006134                 db  18h
.eh_frame:0000000000006135                 db    0
.eh_frame:0000000000006136                 db    0
.eh_frame:0000000000006137                 db    0
.eh_frame:0000000000006138                 db    0
.eh_frame:0000000000006139                 db    0
.eh_frame:000000000000613A                 db    0
.eh_frame:000000000000613B                 db    0
.eh_frame:000000000000613C                 db  10h
.eh_frame:000000000000613D                 db    0
.eh_frame:000000000000613E                 db    0
.eh_frame:000000000000613F                 db    0
.eh_frame:0000000000006140                 db  20h
.eh_frame:0000000000006141                 db    5
.eh_frame:0000000000006142                 db    0
.eh_frame:0000000000006143                 db    0
.eh_frame:0000000000006144                 db 0ECh
.eh_frame:0000000000006145                 db 0D7h
.eh_frame:0000000000006146                 db 0FFh
.eh_frame:0000000000006147                 db 0FFh
.eh_frame:0000000000006148                 db  14h
.eh_frame:0000000000006149                 db    0
.eh_frame:000000000000614A                 db    0
.eh_frame:000000000000614B                 db    0
.eh_frame:000000000000614C                 db    0
.eh_frame:000000000000614D                 db    0
.eh_frame:000000000000614E                 db    0
.eh_frame:000000000000614F                 db    0
.eh_frame:0000000000006150                 db  18h
.eh_frame:0000000000006151                 db    0
.eh_frame:0000000000006152                 db    0
.eh_frame:0000000000006153                 db    0
.eh_frame:0000000000006154                 db  34h ; 4
.eh_frame:0000000000006155                 db    5
.eh_frame:0000000000006156                 db    0
.eh_frame:0000000000006157                 db    0
.eh_frame:0000000000006158                 db 0F8h
.eh_frame:0000000000006159                 db 0D7h
.eh_frame:000000000000615A                 db 0FFh
.eh_frame:000000000000615B                 db 0FFh
.eh_frame:000000000000615C                 db  8Eh
.eh_frame:000000000000615D                 db    0
.eh_frame:000000000000615E                 db    0
.eh_frame:000000000000615F                 db    0
.eh_frame:0000000000006160                 db    0
.eh_frame:0000000000006161                 db  44h ; D
.eh_frame:0000000000006162                 db  0Eh
.eh_frame:0000000000006163                 db  50h ; P
.eh_frame:0000000000006164                 db    2
.eh_frame:0000000000006165                 db  7Fh ; 
.eh_frame:0000000000006166                 db  0Ah
.eh_frame:0000000000006167                 db  0Eh
.eh_frame:0000000000006168                 db    8
.eh_frame:0000000000006169                 db  41h ; A
.eh_frame:000000000000616A                 db  0Bh
.eh_frame:000000000000616B                 db    0
.eh_frame:000000000000616C                 db  18h
.eh_frame:000000000000616D                 db    0
.eh_frame:000000000000616E                 db    0
.eh_frame:000000000000616F                 db    0
.eh_frame:0000000000006170                 db  50h ; P
.eh_frame:0000000000006171                 db    5
.eh_frame:0000000000006172                 db    0
.eh_frame:0000000000006173                 db    0
.eh_frame:0000000000006174                 db  6Ch ; l
.eh_frame:0000000000006175                 db 0D8h
.eh_frame:0000000000006176                 db 0FFh
.eh_frame:0000000000006177                 db 0FFh
.eh_frame:0000000000006178                 db  8Ah
.eh_frame:0000000000006179                 db    0
.eh_frame:000000000000617A                 db    0
.eh_frame:000000000000617B                 db    0
.eh_frame:000000000000617C                 db    0
.eh_frame:000000000000617D                 db  44h ; D
.eh_frame:000000000000617E                 db  0Eh
.eh_frame:000000000000617F                 db  50h ; P
.eh_frame:0000000000006180                 db    2
.eh_frame:0000000000006181                 db  7Bh ; {
.eh_frame:0000000000006182                 db  0Ah
.eh_frame:0000000000006183                 db  0Eh
.eh_frame:0000000000006184                 db    8
.eh_frame:0000000000006185                 db  41h ; A
.eh_frame:0000000000006186                 db  0Bh
.eh_frame:0000000000006187                 db    0
.eh_frame:0000000000006188                 db  10h
.eh_frame:0000000000006189                 db    0
.eh_frame:000000000000618A                 db    0
.eh_frame:000000000000618B                 db    0
.eh_frame:000000000000618C                 db  6Ch ; l
.eh_frame:000000000000618D                 db    5
.eh_frame:000000000000618E                 db    0
.eh_frame:000000000000618F                 db    0
.eh_frame:0000000000006190                 db 0E0h
.eh_frame:0000000000006191                 db 0D8h
.eh_frame:0000000000006192                 db 0FFh
.eh_frame:0000000000006193                 db 0FFh
.eh_frame:0000000000006194                 db  0Ch
.eh_frame:0000000000006195                 db    0
.eh_frame:0000000000006196                 db    0
.eh_frame:0000000000006197                 db    0
.eh_frame:0000000000006198                 db    0
.eh_frame:0000000000006199                 db    0
.eh_frame:000000000000619A                 db    0
.eh_frame:000000000000619B                 db    0
.eh_frame:000000000000619C                 db  10h
.eh_frame:000000000000619D                 db    0
.eh_frame:000000000000619E                 db    0
.eh_frame:000000000000619F                 db    0
.eh_frame:00000000000061A0                 db  80h
.eh_frame:00000000000061A1                 db    5
.eh_frame:00000000000061A2                 db    0
.eh_frame:00000000000061A3                 db    0
.eh_frame:00000000000061A4                 db 0DCh
.eh_frame:00000000000061A5                 db 0D8h
.eh_frame:00000000000061A6                 db 0FFh
.eh_frame:00000000000061A7                 db 0FFh
.eh_frame:00000000000061A8                 db  0Fh
.eh_frame:00000000000061A9                 db    0
.eh_frame:00000000000061AA                 db    0
.eh_frame:00000000000061AB                 db    0
.eh_frame:00000000000061AC                 db    0
.eh_frame:00000000000061AD                 db    0
.eh_frame:00000000000061AE                 db    0
.eh_frame:00000000000061AF                 db    0
.eh_frame:00000000000061B0                 db  18h
.eh_frame:00000000000061B1                 db    0
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db  94h
.eh_frame:00000000000061B5                 db    5
.eh_frame:00000000000061B6                 db    0
.eh_frame:00000000000061B7                 db    0
.eh_frame:00000000000061B8                 db 0D8h
.eh_frame:00000000000061B9                 db 0D8h
.eh_frame:00000000000061BA                 db 0FFh
.eh_frame:00000000000061BB                 db 0FFh
.eh_frame:00000000000061BC                 db  98h
.eh_frame:00000000000061BD                 db    0
.eh_frame:00000000000061BE                 db    0
.eh_frame:00000000000061BF                 db    0
.eh_frame:00000000000061C0                 db    0
.eh_frame:00000000000061C1                 db  44h ; D
.eh_frame:00000000000061C2                 db  0Eh
.eh_frame:00000000000061C3                 db  50h ; P
.eh_frame:00000000000061C4                 db    2
.eh_frame:00000000000061C5                 db  8Eh
.eh_frame:00000000000061C6                 db  0Ah
.eh_frame:00000000000061C7                 db  0Eh
.eh_frame:00000000000061C8                 db    8
.eh_frame:00000000000061C9                 db  41h ; A
.eh_frame:00000000000061CA                 db  0Bh
.eh_frame:00000000000061CB                 db    0
.eh_frame:00000000000061CC                 db  10h
.eh_frame:00000000000061CD                 db    0
.eh_frame:00000000000061CE                 db    0
.eh_frame:00000000000061CF                 db    0
.eh_frame:00000000000061D0                 db 0B0h
.eh_frame:00000000000061D1                 db    5
.eh_frame:00000000000061D2                 db    0
.eh_frame:00000000000061D3                 db    0
.eh_frame:00000000000061D4                 db  5Ch ; \
.eh_frame:00000000000061D5                 db 0D9h
.eh_frame:00000000000061D6                 db 0FFh
.eh_frame:00000000000061D7                 db 0FFh
.eh_frame:00000000000061D8                 db  10h
.eh_frame:00000000000061D9                 db    0
.eh_frame:00000000000061DA                 db    0
.eh_frame:00000000000061DB                 db    0
.eh_frame:00000000000061DC                 db    0
.eh_frame:00000000000061DD                 db    0
.eh_frame:00000000000061DE                 db    0
.eh_frame:00000000000061DF                 db    0
.eh_frame:00000000000061E0                 db  10h
.eh_frame:00000000000061E1                 db    0
.eh_frame:00000000000061E2                 db    0
.eh_frame:00000000000061E3                 db    0
.eh_frame:00000000000061E4                 db 0C4h
.eh_frame:00000000000061E5                 db    5
.eh_frame:00000000000061E6                 db    0
.eh_frame:00000000000061E7                 db    0
.eh_frame:00000000000061E8                 db  58h ; X
.eh_frame:00000000000061E9                 db 0D9h
.eh_frame:00000000000061EA                 db 0FFh
.eh_frame:00000000000061EB                 db 0FFh
.eh_frame:00000000000061EC                 db  11h
.eh_frame:00000000000061ED                 db    0
.eh_frame:00000000000061EE                 db    0
.eh_frame:00000000000061EF                 db    0
.eh_frame:00000000000061F0                 db    0
.eh_frame:00000000000061F1                 db    0
.eh_frame:00000000000061F2                 db    0
.eh_frame:00000000000061F3                 db    0
.eh_frame:00000000000061F4                 db  10h
.eh_frame:00000000000061F5                 db    0
.eh_frame:00000000000061F6                 db    0
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db 0D8h
.eh_frame:00000000000061F9                 db    5
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db  64h ; d
.eh_frame:00000000000061FD                 db 0D9h
.eh_frame:00000000000061FE                 db 0FFh
.eh_frame:00000000000061FF                 db 0FFh
.eh_frame:0000000000006200                 db  0Ah
.eh_frame:0000000000006201                 db    0
.eh_frame:0000000000006202                 db    0
.eh_frame:0000000000006203                 db    0
.eh_frame:0000000000006204                 db    0
.eh_frame:0000000000006205                 db    0
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db  18h
.eh_frame:0000000000006209                 db    0
.eh_frame:000000000000620A                 db    0
.eh_frame:000000000000620B                 db    0
.eh_frame:000000000000620C                 db 0ECh
.eh_frame:000000000000620D                 db    5
.eh_frame:000000000000620E                 db    0
.eh_frame:000000000000620F                 db    0
.eh_frame:0000000000006210                 db  60h ; `
.eh_frame:0000000000006211                 db 0D9h
.eh_frame:0000000000006212                 db 0FFh
.eh_frame:0000000000006213                 db 0FFh
.eh_frame:0000000000006214                 db  8Eh
.eh_frame:0000000000006215                 db    0
.eh_frame:0000000000006216                 db    0
.eh_frame:0000000000006217                 db    0
.eh_frame:0000000000006218                 db    0
.eh_frame:0000000000006219                 db  44h ; D
.eh_frame:000000000000621A                 db  0Eh
.eh_frame:000000000000621B                 db  50h ; P
.eh_frame:000000000000621C                 db    2
.eh_frame:000000000000621D                 db  7Fh ; 
.eh_frame:000000000000621E                 db  0Ah
.eh_frame:000000000000621F                 db  0Eh
.eh_frame:0000000000006220                 db    8
.eh_frame:0000000000006221                 db  41h ; A
.eh_frame:0000000000006222                 db  0Bh
.eh_frame:0000000000006223                 db    0
.eh_frame:0000000000006224                 db  18h
.eh_frame:0000000000006225                 db    0
.eh_frame:0000000000006226                 db    0
.eh_frame:0000000000006227                 db    0
.eh_frame:0000000000006228                 db    8
.eh_frame:0000000000006229                 db    6
.eh_frame:000000000000622A                 db    0
.eh_frame:000000000000622B                 db    0
.eh_frame:000000000000622C                 db 0D4h
.eh_frame:000000000000622D                 db 0D9h
.eh_frame:000000000000622E                 db 0FFh
.eh_frame:000000000000622F                 db 0FFh
.eh_frame:0000000000006230                 db  91h
.eh_frame:0000000000006231                 db    0
.eh_frame:0000000000006232                 db    0
.eh_frame:0000000000006233                 db    0
.eh_frame:0000000000006234                 db    0
.eh_frame:0000000000006235                 db  44h ; D
.eh_frame:0000000000006236                 db  0Eh
.eh_frame:0000000000006237                 db  50h ; P
.eh_frame:0000000000006238                 db    2
.eh_frame:0000000000006239                 db  82h
.eh_frame:000000000000623A                 db  0Ah
.eh_frame:000000000000623B                 db  0Eh
.eh_frame:000000000000623C                 db    8
.eh_frame:000000000000623D                 db  41h ; A
.eh_frame:000000000000623E                 db  0Bh
.eh_frame:000000000000623F                 db    0
.eh_frame:0000000000006240                 db  10h
.eh_frame:0000000000006241                 db    0
.eh_frame:0000000000006242                 db    0
.eh_frame:0000000000006243                 db    0
.eh_frame:0000000000006244                 db  24h ; $
.eh_frame:0000000000006245                 db    6
.eh_frame:0000000000006246                 db    0
.eh_frame:0000000000006247                 db    0
.eh_frame:0000000000006248                 db  58h ; X
.eh_frame:0000000000006249                 db 0DAh
.eh_frame:000000000000624A                 db 0FFh
.eh_frame:000000000000624B                 db 0FFh
.eh_frame:000000000000624C                 db  0Ch
.eh_frame:000000000000624D                 db    0
.eh_frame:000000000000624E                 db    0
.eh_frame:000000000000624F                 db    0
.eh_frame:0000000000006250                 db    0
.eh_frame:0000000000006251                 db    0
.eh_frame:0000000000006252                 db    0
.eh_frame:0000000000006253                 db    0
.eh_frame:0000000000006254                 db  10h
.eh_frame:0000000000006255                 db    0
.eh_frame:0000000000006256                 db    0
.eh_frame:0000000000006257                 db    0
.eh_frame:0000000000006258                 db  38h ; 8
.eh_frame:0000000000006259                 db    6
.eh_frame:000000000000625A                 db    0
.eh_frame:000000000000625B                 db    0
.eh_frame:000000000000625C                 db  54h ; T
.eh_frame:000000000000625D                 db 0DAh
.eh_frame:000000000000625E                 db 0FFh
.eh_frame:000000000000625F                 db 0FFh
.eh_frame:0000000000006260                 db  17h
.eh_frame:0000000000006261                 db    0
.eh_frame:0000000000006262                 db    0
.eh_frame:0000000000006263                 db    0
.eh_frame:0000000000006264                 db    0
.eh_frame:0000000000006265                 db    0
.eh_frame:0000000000006266                 db    0
.eh_frame:0000000000006267                 db    0
.eh_frame:0000000000006268                 db  10h
.eh_frame:0000000000006269                 db    0
.eh_frame:000000000000626A                 db    0
.eh_frame:000000000000626B                 db    0
.eh_frame:000000000000626C                 db  4Ch ; L
.eh_frame:000000000000626D                 db    6
.eh_frame:000000000000626E                 db    0
.eh_frame:000000000000626F                 db    0
.eh_frame:0000000000006270                 db  60h ; `
.eh_frame:0000000000006271                 db 0DAh
.eh_frame:0000000000006272                 db 0FFh
.eh_frame:0000000000006273                 db 0FFh
.eh_frame:0000000000006274                 db  13h
.eh_frame:0000000000006275                 db    0
.eh_frame:0000000000006276                 db    0
.eh_frame:0000000000006277                 db    0
.eh_frame:0000000000006278                 db    0
.eh_frame:0000000000006279                 db    0
.eh_frame:000000000000627A                 db    0
.eh_frame:000000000000627B                 db    0
.eh_frame:000000000000627C                 db  10h
.eh_frame:000000000000627D                 db    0
.eh_frame:000000000000627E                 db    0
.eh_frame:000000000000627F                 db    0
.eh_frame:0000000000006280                 db  60h ; `
.eh_frame:0000000000006281                 db    6
.eh_frame:0000000000006282                 db    0
.eh_frame:0000000000006283                 db    0
.eh_frame:0000000000006284                 db  6Ch ; l
.eh_frame:0000000000006285                 db 0DAh
.eh_frame:0000000000006286                 db 0FFh
.eh_frame:0000000000006287                 db 0FFh
.eh_frame:0000000000006288                 db  0Ch
.eh_frame:0000000000006289                 db    0
.eh_frame:000000000000628A                 db    0
.eh_frame:000000000000628B                 db    0
.eh_frame:000000000000628C                 db    0
.eh_frame:000000000000628D                 db    0
.eh_frame:000000000000628E                 db    0
.eh_frame:000000000000628F                 db    0
.eh_frame:0000000000006290                 db  10h
.eh_frame:0000000000006291                 db    0
.eh_frame:0000000000006292                 db    0
.eh_frame:0000000000006293                 db    0
.eh_frame:0000000000006294                 db  74h ; t
.eh_frame:0000000000006295                 db    6
.eh_frame:0000000000006296                 db    0
.eh_frame:0000000000006297                 db    0
.eh_frame:0000000000006298                 db  68h ; h
.eh_frame:0000000000006299                 db 0DAh
.eh_frame:000000000000629A                 db 0FFh
.eh_frame:000000000000629B                 db 0FFh
.eh_frame:000000000000629C                 db  14h
.eh_frame:000000000000629D                 db    0
.eh_frame:000000000000629E                 db    0
.eh_frame:000000000000629F                 db    0
.eh_frame:00000000000062A0                 db    0
.eh_frame:00000000000062A1                 db    0
.eh_frame:00000000000062A2                 db    0
.eh_frame:00000000000062A3                 db    0
.eh_frame:00000000000062A4                 db  10h
.eh_frame:00000000000062A5                 db    0
.eh_frame:00000000000062A6                 db    0
.eh_frame:00000000000062A7                 db    0
.eh_frame:00000000000062A8                 db  88h
.eh_frame:00000000000062A9                 db    6
.eh_frame:00000000000062AA                 db    0
.eh_frame:00000000000062AB                 db    0
.eh_frame:00000000000062AC                 db  74h ; t
.eh_frame:00000000000062AD                 db 0DAh
.eh_frame:00000000000062AE                 db 0FFh
.eh_frame:00000000000062AF                 db 0FFh
.eh_frame:00000000000062B0                 db  13h
.eh_frame:00000000000062B1                 db    0
.eh_frame:00000000000062B2                 db    0
.eh_frame:00000000000062B3                 db    0
.eh_frame:00000000000062B4                 db    0
.eh_frame:00000000000062B5                 db    0
.eh_frame:00000000000062B6                 db    0
.eh_frame:00000000000062B7                 db    0
.eh_frame:00000000000062B8                 db  14h
.eh_frame:00000000000062B9                 db    0
.eh_frame:00000000000062BA                 db    0
.eh_frame:00000000000062BB                 db    0
.eh_frame:00000000000062BC                 db  9Ch
.eh_frame:00000000000062BD                 db    6
.eh_frame:00000000000062BE                 db    0
.eh_frame:00000000000062BF                 db    0
.eh_frame:00000000000062C0                 db  80h
.eh_frame:00000000000062C1                 db 0DAh
.eh_frame:00000000000062C2                 db 0FFh
.eh_frame:00000000000062C3                 db 0FFh
.eh_frame:00000000000062C4                 db  18h
.eh_frame:00000000000062C5                 db    0
.eh_frame:00000000000062C6                 db    0
.eh_frame:00000000000062C7                 db    0
.eh_frame:00000000000062C8                 db    0
.eh_frame:00000000000062C9                 db    0
.eh_frame:00000000000062CA                 db    0
.eh_frame:00000000000062CB                 db    0
.eh_frame:00000000000062CC                 db    0
.eh_frame:00000000000062CD                 db    0
.eh_frame:00000000000062CE                 db    0
.eh_frame:00000000000062CF                 db    0
.eh_frame:00000000000062D0                 db  10h
.eh_frame:00000000000062D1                 db    1
.eh_frame:00000000000062D2                 db    0
.eh_frame:00000000000062D3                 db    0
.eh_frame:00000000000062D4                 db 0B4h
.eh_frame:00000000000062D5                 db    6
.eh_frame:00000000000062D6                 db    0
.eh_frame:00000000000062D7                 db    0
.eh_frame:00000000000062D8                 db  88h
.eh_frame:00000000000062D9                 db 0DAh
.eh_frame:00000000000062DA                 db 0FFh
.eh_frame:00000000000062DB                 db 0FFh
.eh_frame:00000000000062DC                 db  17h
.eh_frame:00000000000062DD                 db    4
.eh_frame:00000000000062DE                 db    0
.eh_frame:00000000000062DF                 db    0
.eh_frame:00000000000062E0                 db    0
.eh_frame:00000000000062E1                 db  42h ; B
.eh_frame:00000000000062E2                 db  0Eh
.eh_frame:00000000000062E3                 db  10h
.eh_frame:00000000000062E4                 db  8Fh
.eh_frame:00000000000062E5                 db    2
.eh_frame:00000000000062E6                 db  42h ; B
.eh_frame:00000000000062E7                 db  0Eh
.eh_frame:00000000000062E8                 db  18h
.eh_frame:00000000000062E9                 db  8Eh
.eh_frame:00000000000062EA                 db    3
.eh_frame:00000000000062EB                 db  42h ; B
.eh_frame:00000000000062EC                 db  0Eh
.eh_frame:00000000000062ED                 db  20h
.eh_frame:00000000000062EE                 db  8Dh
.eh_frame:00000000000062EF                 db    4
.eh_frame:00000000000062F0                 db  42h ; B
.eh_frame:00000000000062F1                 db  0Eh
.eh_frame:00000000000062F2                 db  28h ; (
.eh_frame:00000000000062F3                 db  8Ch
.eh_frame:00000000000062F4                 db    5
.eh_frame:00000000000062F5                 db  44h ; D
.eh_frame:00000000000062F6                 db  0Eh
.eh_frame:00000000000062F7                 db  30h ; 0
.eh_frame:00000000000062F8                 db  86h
.eh_frame:00000000000062F9                 db    6
.eh_frame:00000000000062FA                 db  41h ; A
.eh_frame:00000000000062FB                 db  0Eh
.eh_frame:00000000000062FC                 db  38h ; 8
.eh_frame:00000000000062FD                 db  83h
.eh_frame:00000000000062FE                 db    7
.eh_frame:00000000000062FF                 db  4Ah ; J
.eh_frame:0000000000006300                 db  0Eh
.eh_frame:0000000000006301                 db  60h ; `
.eh_frame:0000000000006302                 db    2
.eh_frame:0000000000006303                 db 0DDh
.eh_frame:0000000000006304                 db  0Eh
.eh_frame:0000000000006305                 db  68h ; h
.eh_frame:0000000000006306                 db  57h ; W
.eh_frame:0000000000006307                 db  0Eh
.eh_frame:0000000000006308                 db  70h ; p
.eh_frame:0000000000006309                 db  42h ; B
.eh_frame:000000000000630A                 db  0Eh
.eh_frame:000000000000630B                 db  78h ; x
.eh_frame:000000000000630C                 db  42h ; B
.eh_frame:000000000000630D                 db  0Eh
.eh_frame:000000000000630E                 db  80h
.eh_frame:000000000000630F                 db    1
.eh_frame:0000000000006310                 db  42h ; B
.eh_frame:0000000000006311                 db  0Eh
.eh_frame:0000000000006312                 db  88h
.eh_frame:0000000000006313                 db    1
.eh_frame:0000000000006314                 db  42h ; B
.eh_frame:0000000000006315                 db  0Eh
.eh_frame:0000000000006316                 db  90h
.eh_frame:0000000000006317                 db    1
.eh_frame:0000000000006318                 db  53h ; S
.eh_frame:0000000000006319                 db  0Eh
.eh_frame:000000000000631A                 db  60h ; `
.eh_frame:000000000000631B                 db  44h ; D
.eh_frame:000000000000631C                 db  0Ah
.eh_frame:000000000000631D                 db  0Eh
.eh_frame:000000000000631E                 db  38h ; 8
.eh_frame:000000000000631F                 db  41h ; A
.eh_frame:0000000000006320                 db  0Eh
.eh_frame:0000000000006321                 db  30h ; 0
.eh_frame:0000000000006322                 db  41h ; A
.eh_frame:0000000000006323                 db  0Eh
.eh_frame:0000000000006324                 db  28h ; (
.eh_frame:0000000000006325                 db  42h ; B
.eh_frame:0000000000006326                 db  0Eh
.eh_frame:0000000000006327                 db  20h
.eh_frame:0000000000006328                 db  42h ; B
.eh_frame:0000000000006329                 db  0Eh
.eh_frame:000000000000632A                 db  18h
.eh_frame:000000000000632B                 db  42h ; B
.eh_frame:000000000000632C                 db  0Eh
.eh_frame:000000000000632D                 db  10h
.eh_frame:000000000000632E                 db  42h ; B
.eh_frame:000000000000632F                 db  0Eh
.eh_frame:0000000000006330                 db    8
.eh_frame:0000000000006331                 db  44h ; D
.eh_frame:0000000000006332                 db  0Bh
.eh_frame:0000000000006333                 db    2
.eh_frame:0000000000006334                 db  78h ; x
.eh_frame:0000000000006335                 db  0Ah
.eh_frame:0000000000006336                 db  0Eh
.eh_frame:0000000000006337                 db  68h ; h
.eh_frame:0000000000006338                 db  48h ; H
.eh_frame:0000000000006339                 db  0Bh
.eh_frame:000000000000633A                 db  5Ah ; Z
.eh_frame:000000000000633B                 db  0Ah
.eh_frame:000000000000633C                 db  0Eh
.eh_frame:000000000000633D                 db  38h ; 8
.eh_frame:000000000000633E                 db  47h ; G
.eh_frame:000000000000633F                 db  0Eh
.eh_frame:0000000000006340                 db  30h ; 0
.eh_frame:0000000000006341                 db  41h ; A
.eh_frame:0000000000006342                 db  0Eh
.eh_frame:0000000000006343                 db  28h ; (
.eh_frame:0000000000006344                 db  42h ; B
.eh_frame:0000000000006345                 db  0Eh
.eh_frame:0000000000006346                 db  20h
.eh_frame:0000000000006347                 db  42h ; B
.eh_frame:0000000000006348                 db  0Eh
.eh_frame:0000000000006349                 db  18h
.eh_frame:000000000000634A                 db  42h ; B
.eh_frame:000000000000634B                 db  0Eh
.eh_frame:000000000000634C                 db  10h
.eh_frame:000000000000634D                 db  42h ; B
.eh_frame:000000000000634E                 db  0Eh
.eh_frame:000000000000634F                 db    8
.eh_frame:0000000000006350                 db  56h ; V
.eh_frame:0000000000006351                 db  0Bh
.eh_frame:0000000000006352                 db  5Eh ; ^
.eh_frame:0000000000006353                 db  0Ah
.eh_frame:0000000000006354                 db  0Eh
.eh_frame:0000000000006355                 db  38h ; 8
.eh_frame:0000000000006356                 db  52h ; R
.eh_frame:0000000000006357                 db  0Eh
.eh_frame:0000000000006358                 db  30h ; 0
.eh_frame:0000000000006359                 db  41h ; A
.eh_frame:000000000000635A                 db  0Eh
.eh_frame:000000000000635B                 db  28h ; (
.eh_frame:000000000000635C                 db  42h ; B
.eh_frame:000000000000635D                 db  0Eh
.eh_frame:000000000000635E                 db  20h
.eh_frame:000000000000635F                 db  42h ; B
.eh_frame:0000000000006360                 db  0Eh
.eh_frame:0000000000006361                 db  18h
.eh_frame:0000000000006362                 db  42h ; B
.eh_frame:0000000000006363                 db  0Eh
.eh_frame:0000000000006364                 db  10h
.eh_frame:0000000000006365                 db  42h ; B
.eh_frame:0000000000006366                 db  0Eh
.eh_frame:0000000000006367                 db    8
.eh_frame:0000000000006368                 db  4Fh ; O
.eh_frame:0000000000006369                 db  0Bh
.eh_frame:000000000000636A                 db  62h ; b
.eh_frame:000000000000636B                 db  0Ah
.eh_frame:000000000000636C                 db  0Eh
.eh_frame:000000000000636D                 db  38h ; 8
.eh_frame:000000000000636E                 db  50h ; P
.eh_frame:000000000000636F                 db  0Eh
.eh_frame:0000000000006370                 db  30h ; 0
.eh_frame:0000000000006371                 db  41h ; A
.eh_frame:0000000000006372                 db  0Eh
.eh_frame:0000000000006373                 db  28h ; (
.eh_frame:0000000000006374                 db  42h ; B
.eh_frame:0000000000006375                 db  0Eh
.eh_frame:0000000000006376                 db  20h
.eh_frame:0000000000006377                 db  42h ; B
.eh_frame:0000000000006378                 db  0Eh
.eh_frame:0000000000006379                 db  18h
.eh_frame:000000000000637A                 db  42h ; B
.eh_frame:000000000000637B                 db  0Eh
.eh_frame:000000000000637C                 db  10h
.eh_frame:000000000000637D                 db  42h ; B
.eh_frame:000000000000637E                 db  0Eh
.eh_frame:000000000000637F                 db    8
.eh_frame:0000000000006380                 db  55h ; U
.eh_frame:0000000000006381                 db  0Bh
.eh_frame:0000000000006382                 db  66h ; f
.eh_frame:0000000000006383                 db  0Eh
.eh_frame:0000000000006384                 db  68h ; h
.eh_frame:0000000000006385                 db  42h ; B
.eh_frame:0000000000006386                 db  0Eh
.eh_frame:0000000000006387                 db  70h ; p
.eh_frame:0000000000006388                 db  5Ch ; \
.eh_frame:0000000000006389                 db  0Eh
.eh_frame:000000000000638A                 db  68h ; h
.eh_frame:000000000000638B                 db  41h ; A
.eh_frame:000000000000638C                 db  0Eh
.eh_frame:000000000000638D                 db  60h ; `
.eh_frame:000000000000638E                 db  44h ; D
.eh_frame:000000000000638F                 db  0Ah
.eh_frame:0000000000006390                 db  0Eh
.eh_frame:0000000000006391                 db  38h ; 8
.eh_frame:0000000000006392                 db  41h ; A
.eh_frame:0000000000006393                 db  0Eh
.eh_frame:0000000000006394                 db  30h ; 0
.eh_frame:0000000000006395                 db  41h ; A
.eh_frame:0000000000006396                 db  0Eh
.eh_frame:0000000000006397                 db  28h ; (
.eh_frame:0000000000006398                 db  42h ; B
.eh_frame:0000000000006399                 db  0Eh
.eh_frame:000000000000639A                 db  20h
.eh_frame:000000000000639B                 db  42h ; B
.eh_frame:000000000000639C                 db  0Eh
.eh_frame:000000000000639D                 db  18h
.eh_frame:000000000000639E                 db  42h ; B
.eh_frame:000000000000639F                 db  0Eh
.eh_frame:00000000000063A0                 db  10h
.eh_frame:00000000000063A1                 db  42h ; B
.eh_frame:00000000000063A2                 db  0Eh
.eh_frame:00000000000063A3                 db    8
.eh_frame:00000000000063A4                 db  45h ; E
.eh_frame:00000000000063A5                 db  0Bh
.eh_frame:00000000000063A6                 db  68h ; h
.eh_frame:00000000000063A7                 db  0Ah
.eh_frame:00000000000063A8                 db  0Eh
.eh_frame:00000000000063A9                 db  68h ; h
.eh_frame:00000000000063AA                 db  48h ; H
.eh_frame:00000000000063AB                 db  0Bh
.eh_frame:00000000000063AC                 db  72h ; r
.eh_frame:00000000000063AD                 db  0Eh
.eh_frame:00000000000063AE                 db  68h ; h
.eh_frame:00000000000063AF                 db  45h ; E
.eh_frame:00000000000063B0                 db  0Eh
.eh_frame:00000000000063B1                 db  70h ; p
.eh_frame:00000000000063B2                 db  42h ; B
.eh_frame:00000000000063B3                 db  0Eh
.eh_frame:00000000000063B4                 db  78h ; x
.eh_frame:00000000000063B5                 db  42h ; B
.eh_frame:00000000000063B6                 db  0Eh
.eh_frame:00000000000063B7                 db  80h
.eh_frame:00000000000063B8                 db    1
.eh_frame:00000000000063B9                 db  5Eh ; ^
.eh_frame:00000000000063BA                 db  0Eh
.eh_frame:00000000000063BB                 db  60h ; `
.eh_frame:00000000000063BC                 db  44h ; D
.eh_frame:00000000000063BD                 db  0Ah
.eh_frame:00000000000063BE                 db  0Eh
.eh_frame:00000000000063BF                 db  38h ; 8
.eh_frame:00000000000063C0                 db  41h ; A
.eh_frame:00000000000063C1                 db  0Eh
.eh_frame:00000000000063C2                 db  30h ; 0
.eh_frame:00000000000063C3                 db  41h ; A
.eh_frame:00000000000063C4                 db  0Eh
.eh_frame:00000000000063C5                 db  28h ; (
.eh_frame:00000000000063C6                 db  42h ; B
.eh_frame:00000000000063C7                 db  0Eh
.eh_frame:00000000000063C8                 db  20h
.eh_frame:00000000000063C9                 db  42h ; B
.eh_frame:00000000000063CA                 db  0Eh
.eh_frame:00000000000063CB                 db  18h
.eh_frame:00000000000063CC                 db  42h ; B
.eh_frame:00000000000063CD                 db  0Eh
.eh_frame:00000000000063CE                 db  10h
.eh_frame:00000000000063CF                 db  42h ; B
.eh_frame:00000000000063D0                 db  0Eh
.eh_frame:00000000000063D1                 db    8
.eh_frame:00000000000063D2                 db  41h ; A
.eh_frame:00000000000063D3                 db  0Bh
.eh_frame:00000000000063D4                 db  79h ; y
.eh_frame:00000000000063D5                 db  0Ah
.eh_frame:00000000000063D6                 db  0Eh
.eh_frame:00000000000063D7                 db  68h ; h
.eh_frame:00000000000063D8                 db  42h ; B
.eh_frame:00000000000063D9                 db  0Eh
.eh_frame:00000000000063DA                 db  70h ; p
.eh_frame:00000000000063DB                 db  42h ; B
.eh_frame:00000000000063DC                 db  0Eh
.eh_frame:00000000000063DD                 db  78h ; x
.eh_frame:00000000000063DE                 db  42h ; B
.eh_frame:00000000000063DF                 db  0Eh
.eh_frame:00000000000063E0                 db  80h
.eh_frame:00000000000063E1                 db    1
.eh_frame:00000000000063E2                 db  51h ; Q
.eh_frame:00000000000063E3                 db  0Bh
.eh_frame:00000000000063E4                 db  10h
.eh_frame:00000000000063E5                 db    0
.eh_frame:00000000000063E6                 db    0
.eh_frame:00000000000063E7                 db    0
.eh_frame:00000000000063E8                 db 0C8h
.eh_frame:00000000000063E9                 db    7
.eh_frame:00000000000063EA                 db    0
.eh_frame:00000000000063EB                 db    0
.eh_frame:00000000000063EC                 db  94h
.eh_frame:00000000000063ED                 db 0DDh
.eh_frame:00000000000063EE                 db 0FFh
.eh_frame:00000000000063EF                 db 0FFh
.eh_frame:00000000000063F0                 db  20h
.eh_frame:00000000000063F1                 db    0
.eh_frame:00000000000063F2                 db    0
.eh_frame:00000000000063F3                 db    0
.eh_frame:00000000000063F4                 db    0
.eh_frame:00000000000063F5                 db    0
.eh_frame:00000000000063F6                 db    0
.eh_frame:00000000000063F7                 db    0
.eh_frame:00000000000063F8                 db  18h
.eh_frame:00000000000063F9                 db    0
.eh_frame:00000000000063FA                 db    0
.eh_frame:00000000000063FB                 db    0
.eh_frame:00000000000063FC                 db 0DCh
.eh_frame:00000000000063FD                 db    7
.eh_frame:00000000000063FE                 db    0
.eh_frame:00000000000063FF                 db    0
.eh_frame:0000000000006400                 db 0A0h
.eh_frame:0000000000006401                 db 0DDh
.eh_frame:0000000000006402                 db 0FFh
.eh_frame:0000000000006403                 db 0FFh
.eh_frame:0000000000006404                 db  78h ; x
.eh_frame:0000000000006405                 db    0
.eh_frame:0000000000006406                 db    0
.eh_frame:0000000000006407                 db    0
.eh_frame:0000000000006408                 db    0
.eh_frame:0000000000006409                 db  44h ; D
.eh_frame:000000000000640A                 db  0Eh
.eh_frame:000000000000640B                 db  70h ; p
.eh_frame:000000000000640C                 db    2
.eh_frame:000000000000640D                 db  60h ; `
.eh_frame:000000000000640E                 db  0Ah
.eh_frame:000000000000640F                 db  0Eh
.eh_frame:0000000000006410                 db    8
.eh_frame:0000000000006411                 db  41h ; A
.eh_frame:0000000000006412                 db  0Bh
.eh_frame:0000000000006413                 db    0
.eh_frame:0000000000006414                 db  28h ; (
.eh_frame:0000000000006415                 db    0
.eh_frame:0000000000006416                 db    0
.eh_frame:0000000000006417                 db    0
.eh_frame:0000000000006418                 db 0F8h
.eh_frame:0000000000006419                 db    7
.eh_frame:000000000000641A                 db    0
.eh_frame:000000000000641B                 db    0
.eh_frame:000000000000641C                 db    4
.eh_frame:000000000000641D                 db 0DEh
.eh_frame:000000000000641E                 db 0FFh
.eh_frame:000000000000641F                 db 0FFh
.eh_frame:0000000000006420                 db 0D5h
.eh_frame:0000000000006421                 db    0
.eh_frame:0000000000006422                 db    0
.eh_frame:0000000000006423                 db    0
.eh_frame:0000000000006424                 db    0
.eh_frame:0000000000006425                 db  41h ; A
.eh_frame:0000000000006426                 db  0Eh
.eh_frame:0000000000006427                 db  10h
.eh_frame:0000000000006428                 db  86h
.eh_frame:0000000000006429                 db    2
.eh_frame:000000000000642A                 db  41h ; A
.eh_frame:000000000000642B                 db  0Eh
.eh_frame:000000000000642C                 db  18h
.eh_frame:000000000000642D                 db  83h
.eh_frame:000000000000642E                 db    3
.eh_frame:000000000000642F                 db  50h ; P
.eh_frame:0000000000006430                 db  0Eh
.eh_frame:0000000000006431                 db 0D0h
.eh_frame:0000000000006432                 db    1
.eh_frame:0000000000006433                 db    2
.eh_frame:0000000000006434                 db 0ABh
.eh_frame:0000000000006435                 db  0Ah
.eh_frame:0000000000006436                 db  0Eh
.eh_frame:0000000000006437                 db  18h
.eh_frame:0000000000006438                 db  41h ; A
.eh_frame:0000000000006439                 db  0Eh
.eh_frame:000000000000643A                 db  10h
.eh_frame:000000000000643B                 db  41h ; A
.eh_frame:000000000000643C                 db  0Eh
.eh_frame:000000000000643D                 db    8
.eh_frame:000000000000643E                 db  41h ; A
.eh_frame:000000000000643F                 db  0Bh
.eh_frame:0000000000006440                 db  1Ch
.eh_frame:0000000000006441                 db    0
.eh_frame:0000000000006442                 db    0
.eh_frame:0000000000006443                 db    0
.eh_frame:0000000000006444                 db  24h ; $
.eh_frame:0000000000006445                 db    8
.eh_frame:0000000000006446                 db    0
.eh_frame:0000000000006447                 db    0
.eh_frame:0000000000006448                 db 0B8h
.eh_frame:0000000000006449                 db 0DEh
.eh_frame:000000000000644A                 db 0FFh
.eh_frame:000000000000644B                 db 0FFh
.eh_frame:000000000000644C                 db  80h
.eh_frame:000000000000644D                 db    0
.eh_frame:000000000000644E                 db    0
.eh_frame:000000000000644F                 db    0
.eh_frame:0000000000006450                 db    0
.eh_frame:0000000000006451                 db  41h ; A
.eh_frame:0000000000006452                 db  0Eh
.eh_frame:0000000000006453                 db  10h
.eh_frame:0000000000006454                 db  83h
.eh_frame:0000000000006455                 db    2
.eh_frame:0000000000006456                 db    2
.eh_frame:0000000000006457                 db  7Ah ; z
.eh_frame:0000000000006458                 db  0Eh
.eh_frame:0000000000006459                 db    8
.eh_frame:000000000000645A                 db    0
.eh_frame:000000000000645B                 db    0
.eh_frame:000000000000645C                 db    0
.eh_frame:000000000000645D                 db    0
.eh_frame:000000000000645E                 db    0
.eh_frame:000000000000645F                 db    0
.eh_frame:0000000000006460                 db  18h
.eh_frame:0000000000006461                 db    0
.eh_frame:0000000000006462                 db    0
.eh_frame:0000000000006463                 db    0
.eh_frame:0000000000006464                 db  44h ; D
.eh_frame:0000000000006465                 db    8
.eh_frame:0000000000006466                 db    0
.eh_frame:0000000000006467                 db    0
.eh_frame:0000000000006468                 db  18h
.eh_frame:0000000000006469                 db 0DFh
.eh_frame:000000000000646A                 db 0FFh
.eh_frame:000000000000646B                 db 0FFh
.eh_frame:000000000000646C                 db  1Ah
.eh_frame:000000000000646D                 db    0
.eh_frame:000000000000646E                 db    0
.eh_frame:000000000000646F                 db    0
.eh_frame:0000000000006470                 db    0
.eh_frame:0000000000006471                 db  41h ; A
.eh_frame:0000000000006472                 db  0Eh
.eh_frame:0000000000006473                 db  10h
.eh_frame:0000000000006474                 db  83h
.eh_frame:0000000000006475                 db    2
.eh_frame:0000000000006476                 db  53h ; S
.eh_frame:0000000000006477                 db  0Ah
.eh_frame:0000000000006478                 db  0Eh
.eh_frame:0000000000006479                 db    8
.eh_frame:000000000000647A                 db  41h ; A
.eh_frame:000000000000647B                 db  0Bh
.eh_frame:000000000000647C                 db  10h
.eh_frame:000000000000647D                 db    0
.eh_frame:000000000000647E                 db    0
.eh_frame:000000000000647F                 db    0
.eh_frame:0000000000006480                 db  60h ; `
.eh_frame:0000000000006481                 db    8
.eh_frame:0000000000006482                 db    0
.eh_frame:0000000000006483                 db    0
.eh_frame:0000000000006484                 db  1Ch
.eh_frame:0000000000006485                 db 0DFh
.eh_frame:0000000000006486                 db 0FFh
.eh_frame:0000000000006487                 db 0FFh
.eh_frame:0000000000006488                 db  24h ; $
.eh_frame:0000000000006489                 db    0
.eh_frame:000000000000648A                 db    0
.eh_frame:000000000000648B                 db    0
.eh_frame:000000000000648C                 db    0
.eh_frame:000000000000648D                 db  5Fh ; _
.eh_frame:000000000000648E                 db  0Eh
.eh_frame:000000000000648F                 db  10h
.eh_frame:0000000000006490                 db  10h
.eh_frame:0000000000006491                 db    0
.eh_frame:0000000000006492                 db    0
.eh_frame:0000000000006493                 db    0
.eh_frame:0000000000006494                 db  74h ; t
.eh_frame:0000000000006495                 db    8
.eh_frame:0000000000006496                 db    0
.eh_frame:0000000000006497                 db    0
.eh_frame:0000000000006498                 db  38h ; 8
.eh_frame:0000000000006499                 db 0DFh
.eh_frame:000000000000649A                 db 0FFh
.eh_frame:000000000000649B                 db 0FFh
.eh_frame:000000000000649C                 db    2
.eh_frame:000000000000649D                 db    0
.eh_frame:000000000000649E                 db    0
.eh_frame:000000000000649F                 db    0
.eh_frame:00000000000064A0                 db    0
.eh_frame:00000000000064A1                 db    0
.eh_frame:00000000000064A2                 db    0
.eh_frame:00000000000064A3                 db    0
.eh_frame:00000000000064A4                 db  20h
.eh_frame:00000000000064A5                 db    0
.eh_frame:00000000000064A6                 db    0
.eh_frame:00000000000064A7                 db    0
.eh_frame:00000000000064A8                 db  88h
.eh_frame:00000000000064A9                 db    8
.eh_frame:00000000000064AA                 db    0
.eh_frame:00000000000064AB                 db    0
.eh_frame:00000000000064AC                 db  34h ; 4
.eh_frame:00000000000064AD                 db 0DFh
.eh_frame:00000000000064AE                 db 0FFh
.eh_frame:00000000000064AF                 db 0FFh
.eh_frame:00000000000064B0                 db  36h ; 6
.eh_frame:00000000000064B1                 db    0
.eh_frame:00000000000064B2                 db    0
.eh_frame:00000000000064B3                 db    0
.eh_frame:00000000000064B4                 db    0
.eh_frame:00000000000064B5                 db  44h ; D
.eh_frame:00000000000064B6                 db  0Eh
.eh_frame:00000000000064B7                 db  10h
.eh_frame:00000000000064B8                 db  83h
.eh_frame:00000000000064B9                 db    2
.eh_frame:00000000000064BA                 db  5Dh ; ]
.eh_frame:00000000000064BB                 db  0Ah
.eh_frame:00000000000064BC                 db  0Eh
.eh_frame:00000000000064BD                 db    8
.eh_frame:00000000000064BE                 db  47h ; G
.eh_frame:00000000000064BF                 db  0Bh
.eh_frame:00000000000064C0                 db  48h ; H
.eh_frame:00000000000064C1                 db  0Ah
.eh_frame:00000000000064C2                 db  0Eh
.eh_frame:00000000000064C3                 db    8
.eh_frame:00000000000064C4                 db  41h ; A
.eh_frame:00000000000064C5                 db  0Bh
.eh_frame:00000000000064C6                 db    0
.eh_frame:00000000000064C7                 db    0
.eh_frame:00000000000064C8                 db  10h
.eh_frame:00000000000064C9                 db    0
.eh_frame:00000000000064CA                 db    0
.eh_frame:00000000000064CB                 db    0
.eh_frame:00000000000064CC                 db 0ACh
.eh_frame:00000000000064CD                 db    8
.eh_frame:00000000000064CE                 db    0
.eh_frame:00000000000064CF                 db    0
.eh_frame:00000000000064D0                 db  50h ; P
.eh_frame:00000000000064D1                 db 0DFh
.eh_frame:00000000000064D2                 db 0FFh
.eh_frame:00000000000064D3                 db 0FFh
.eh_frame:00000000000064D4                 db  24h ; $
.eh_frame:00000000000064D5                 db    0
.eh_frame:00000000000064D6                 db    0
.eh_frame:00000000000064D7                 db    0
.eh_frame:00000000000064D8                 db    0
.eh_frame:00000000000064D9                 db  5Fh ; _
.eh_frame:00000000000064DA                 db  0Eh
.eh_frame:00000000000064DB                 db  10h
.eh_frame:00000000000064DC                 db  14h
.eh_frame:00000000000064DD                 db    0
.eh_frame:00000000000064DE                 db    0
.eh_frame:00000000000064DF                 db    0
.eh_frame:00000000000064E0                 db 0C0h
.eh_frame:00000000000064E1                 db    8
.eh_frame:00000000000064E2                 db    0
.eh_frame:00000000000064E3                 db    0
.eh_frame:00000000000064E4                 db  6Ch ; l
.eh_frame:00000000000064E5                 db 0DFh
.eh_frame:00000000000064E6                 db 0FFh
.eh_frame:00000000000064E7                 db 0FFh
.eh_frame:00000000000064E8                 db  82h
.eh_frame:00000000000064E9                 db    0
.eh_frame:00000000000064EA                 db    0
.eh_frame:00000000000064EB                 db    0
.eh_frame:00000000000064EC                 db    0
.eh_frame:00000000000064ED                 db    2
.eh_frame:00000000000064EE                 db  5Fh ; _
.eh_frame:00000000000064EF                 db  0Eh
.eh_frame:00000000000064F0                 db  10h
.eh_frame:00000000000064F1                 db  49h ; I
.eh_frame:00000000000064F2                 db  0Eh
.eh_frame:00000000000064F3                 db    8
.eh_frame:00000000000064F4                 db  14h
.eh_frame:00000000000064F5                 db    0
.eh_frame:00000000000064F6                 db    0
.eh_frame:00000000000064F7                 db    0
.eh_frame:00000000000064F8                 db 0D8h
.eh_frame:00000000000064F9                 db    8
.eh_frame:00000000000064FA                 db    0
.eh_frame:00000000000064FB                 db    0
.eh_frame:00000000000064FC                 db 0E4h
.eh_frame:00000000000064FD                 db 0DFh
.eh_frame:00000000000064FE                 db 0FFh
.eh_frame:00000000000064FF                 db 0FFh
.eh_frame:0000000000006500                 db  4Ah ; J
.eh_frame:0000000000006501                 db    0
.eh_frame:0000000000006502                 db    0
.eh_frame:0000000000006503                 db    0
.eh_frame:0000000000006504                 db    0
.eh_frame:0000000000006505                 db    2
.eh_frame:0000000000006506                 db  45h ; E
.eh_frame:0000000000006507                 db  0Eh
.eh_frame:0000000000006508                 db  10h
.eh_frame:0000000000006509                 db    0
.eh_frame:000000000000650A                 db    0
.eh_frame:000000000000650B                 db    0
.eh_frame:000000000000650C                 db  18h
.eh_frame:000000000000650D                 db    0
.eh_frame:000000000000650E                 db    0
.eh_frame:000000000000650F                 db    0
.eh_frame:0000000000006510                 db 0F0h
.eh_frame:0000000000006511                 db    8
.eh_frame:0000000000006512                 db    0
.eh_frame:0000000000006513                 db    0
.eh_frame:0000000000006514                 db  1Ch
.eh_frame:0000000000006515                 db 0E0h
.eh_frame:0000000000006516                 db 0FFh
.eh_frame:0000000000006517                 db 0FFh
.eh_frame:0000000000006518                 db  17h
.eh_frame:0000000000006519                 db    0
.eh_frame:000000000000651A                 db    0
.eh_frame:000000000000651B                 db    0
.eh_frame:000000000000651C                 db    0
.eh_frame:000000000000651D                 db  41h ; A
.eh_frame:000000000000651E                 db  0Eh
.eh_frame:000000000000651F                 db  10h
.eh_frame:0000000000006520                 db  83h
.eh_frame:0000000000006521                 db    2
.eh_frame:0000000000006522                 db  51h ; Q
.eh_frame:0000000000006523                 db  0Eh
.eh_frame:0000000000006524                 db    8
.eh_frame:0000000000006525                 db    0
.eh_frame:0000000000006526                 db    0
.eh_frame:0000000000006527                 db    0
.eh_frame:0000000000006528                 db  18h
.eh_frame:0000000000006529                 db    0
.eh_frame:000000000000652A                 db    0
.eh_frame:000000000000652B                 db    0
.eh_frame:000000000000652C                 db  0Ch
.eh_frame:000000000000652D                 db    9
.eh_frame:000000000000652E                 db    0
.eh_frame:000000000000652F                 db    0
.eh_frame:0000000000006530                 db  20h
.eh_frame:0000000000006531                 db 0E0h
.eh_frame:0000000000006532                 db 0FFh
.eh_frame:0000000000006533                 db 0FFh
.eh_frame:0000000000006534                 db  2Eh ; .
.eh_frame:0000000000006535                 db    0
.eh_frame:0000000000006536                 db    0
.eh_frame:0000000000006537                 db    0
.eh_frame:0000000000006538                 db    0
.eh_frame:0000000000006539                 db  47h ; G
.eh_frame:000000000000653A                 db  0Eh
.eh_frame:000000000000653B                 db  10h
.eh_frame:000000000000653C                 db  61h ; a
.eh_frame:000000000000653D                 db  0Ah
.eh_frame:000000000000653E                 db  0Eh
.eh_frame:000000000000653F                 db    8
.eh_frame:0000000000006540                 db  41h ; A
.eh_frame:0000000000006541                 db  0Bh
.eh_frame:0000000000006542                 db    0
.eh_frame:0000000000006543                 db    0
.eh_frame:0000000000006544                 db  24h ; $
.eh_frame:0000000000006545                 db    0
.eh_frame:0000000000006546                 db    0
.eh_frame:0000000000006547                 db    0
.eh_frame:0000000000006548                 db  28h ; (
.eh_frame:0000000000006549                 db    9
.eh_frame:000000000000654A                 db    0
.eh_frame:000000000000654B                 db    0
.eh_frame:000000000000654C                 db  34h ; 4
.eh_frame:000000000000654D                 db 0E0h
.eh_frame:000000000000654E                 db 0FFh
.eh_frame:000000000000654F                 db 0FFh
.eh_frame:0000000000006550                 db  28h ; (
.eh_frame:0000000000006551                 db    0
.eh_frame:0000000000006552                 db    0
.eh_frame:0000000000006553                 db    0
.eh_frame:0000000000006554                 db    0
.eh_frame:0000000000006555                 db  41h ; A
.eh_frame:0000000000006556                 db  0Eh
.eh_frame:0000000000006557                 db  10h
.eh_frame:0000000000006558                 db  86h
.eh_frame:0000000000006559                 db    2
.eh_frame:000000000000655A                 db  41h ; A
.eh_frame:000000000000655B                 db  0Eh
.eh_frame:000000000000655C                 db  18h
.eh_frame:000000000000655D                 db  83h
.eh_frame:000000000000655E                 db    3
.eh_frame:000000000000655F                 db  4Dh ; M
.eh_frame:0000000000006560                 db  0Eh
.eh_frame:0000000000006561                 db  20h
.eh_frame:0000000000006562                 db  49h ; I
.eh_frame:0000000000006563                 db  0Eh
.eh_frame:0000000000006564                 db  18h
.eh_frame:0000000000006565                 db  47h ; G
.eh_frame:0000000000006566                 db  0Eh
.eh_frame:0000000000006567                 db  10h
.eh_frame:0000000000006568                 db  41h ; A
.eh_frame:0000000000006569                 db  0Eh
.eh_frame:000000000000656A                 db    8
.eh_frame:000000000000656B                 db    0
.eh_frame:000000000000656C                 db  18h
.eh_frame:000000000000656D                 db    0
.eh_frame:000000000000656E                 db    0
.eh_frame:000000000000656F                 db    0
.eh_frame:0000000000006570                 db  50h ; P
.eh_frame:0000000000006571                 db    9
.eh_frame:0000000000006572                 db    0
.eh_frame:0000000000006573                 db    0
.eh_frame:0000000000006574                 db  3Ch ; <
.eh_frame:0000000000006575                 db 0E0h
.eh_frame:0000000000006576                 db 0FFh
.eh_frame:0000000000006577                 db 0FFh
.eh_frame:0000000000006578                 db  13h
.eh_frame:0000000000006579                 db    0
.eh_frame:000000000000657A                 db    0
.eh_frame:000000000000657B                 db    0
.eh_frame:000000000000657C                 db    0
.eh_frame:000000000000657D                 db  41h ; A
.eh_frame:000000000000657E                 db  0Eh
.eh_frame:000000000000657F                 db  10h
.eh_frame:0000000000006580                 db  83h
.eh_frame:0000000000006581                 db    2
.eh_frame:0000000000006582                 db  50h ; P
.eh_frame:0000000000006583                 db  0Eh
.eh_frame:0000000000006584                 db    8
.eh_frame:0000000000006585                 db    0
.eh_frame:0000000000006586                 db    0
.eh_frame:0000000000006587                 db    0
.eh_frame:0000000000006588                 db  14h
.eh_frame:0000000000006589                 db    0
.eh_frame:000000000000658A                 db    0
.eh_frame:000000000000658B                 db    0
.eh_frame:000000000000658C                 db  6Ch ; l
.eh_frame:000000000000658D                 db    9
.eh_frame:000000000000658E                 db    0
.eh_frame:000000000000658F                 db    0
.eh_frame:0000000000006590                 db  40h ; @
.eh_frame:0000000000006591                 db 0E0h
.eh_frame:0000000000006592                 db 0FFh
.eh_frame:0000000000006593                 db 0FFh
.eh_frame:0000000000006594                 db  35h ; 5
.eh_frame:0000000000006595                 db    0
.eh_frame:0000000000006596                 db    0
.eh_frame:0000000000006597                 db    0
.eh_frame:0000000000006598                 db    0
.eh_frame:0000000000006599                 db  4Bh ; K
.eh_frame:000000000000659A                 db  0Eh
.eh_frame:000000000000659B                 db  10h
.eh_frame:000000000000659C                 db    0
.eh_frame:000000000000659D                 db    0
.eh_frame:000000000000659E                 db    0
.eh_frame:000000000000659F                 db    0
.eh_frame:00000000000065A0                 db  2Ch ; ,
.eh_frame:00000000000065A1                 db    0
.eh_frame:00000000000065A2                 db    0
.eh_frame:00000000000065A3                 db    0
.eh_frame:00000000000065A4                 db  84h
.eh_frame:00000000000065A5                 db    9
.eh_frame:00000000000065A6                 db    0
.eh_frame:00000000000065A7                 db    0
.eh_frame:00000000000065A8                 db  68h ; h
.eh_frame:00000000000065A9                 db 0E0h
.eh_frame:00000000000065AA                 db 0FFh
.eh_frame:00000000000065AB                 db 0FFh
.eh_frame:00000000000065AC                 db  7Ch ; |
.eh_frame:00000000000065AD                 db    0
.eh_frame:00000000000065AE                 db    0
.eh_frame:00000000000065AF                 db    0
.eh_frame:00000000000065B0                 db    0
.eh_frame:00000000000065B1                 db  41h ; A
.eh_frame:00000000000065B2                 db  0Eh
.eh_frame:00000000000065B3                 db  10h
.eh_frame:00000000000065B4                 db  86h
.eh_frame:00000000000065B5                 db    2
.eh_frame:00000000000065B6                 db  41h ; A
.eh_frame:00000000000065B7                 db  0Eh
.eh_frame:00000000000065B8                 db  18h
.eh_frame:00000000000065B9                 db  83h
.eh_frame:00000000000065BA                 db    3
.eh_frame:00000000000065BB                 db  44h ; D
.eh_frame:00000000000065BC                 db  0Eh
.eh_frame:00000000000065BD                 db  40h ; @
.eh_frame:00000000000065BE                 db    2
.eh_frame:00000000000065BF                 db  62h ; b
.eh_frame:00000000000065C0                 db  0Ah
.eh_frame:00000000000065C1                 db  0Eh
.eh_frame:00000000000065C2                 db  18h
.eh_frame:00000000000065C3                 db  41h ; A
.eh_frame:00000000000065C4                 db  0Eh
.eh_frame:00000000000065C5                 db  10h
.eh_frame:00000000000065C6                 db  41h ; A
.eh_frame:00000000000065C7                 db  0Eh
.eh_frame:00000000000065C8                 db    8
.eh_frame:00000000000065C9                 db  46h ; F
.eh_frame:00000000000065CA                 db  0Bh
.eh_frame:00000000000065CB                 db    0
.eh_frame:00000000000065CC                 db    0
.eh_frame:00000000000065CD                 db    0
.eh_frame:00000000000065CE                 db    0
.eh_frame:00000000000065CF                 db    0
.eh_frame:00000000000065D0                 db  44h ; D
.eh_frame:00000000000065D1                 db    0
.eh_frame:00000000000065D2                 db    0
.eh_frame:00000000000065D3                 db    0
.eh_frame:00000000000065D4                 db 0B4h
.eh_frame:00000000000065D5                 db    9
.eh_frame:00000000000065D6                 db    0
.eh_frame:00000000000065D7                 db    0
.eh_frame:00000000000065D8                 db 0B8h
.eh_frame:00000000000065D9                 db 0E0h
.eh_frame:00000000000065DA                 db 0FFh
.eh_frame:00000000000065DB                 db 0FFh
.eh_frame:00000000000065DC                 db 0C1h
.eh_frame:00000000000065DD                 db    0
.eh_frame:00000000000065DE                 db    0
.eh_frame:00000000000065DF                 db    0
.eh_frame:00000000000065E0                 db    0
.eh_frame:00000000000065E1                 db  42h ; B
.eh_frame:00000000000065E2                 db  0Eh
.eh_frame:00000000000065E3                 db  10h
.eh_frame:00000000000065E4                 db  8Eh
.eh_frame:00000000000065E5                 db    2
.eh_frame:00000000000065E6                 db  42h ; B
.eh_frame:00000000000065E7                 db  0Eh
.eh_frame:00000000000065E8                 db  18h
.eh_frame:00000000000065E9                 db  8Dh
.eh_frame:00000000000065EA                 db    3
.eh_frame:00000000000065EB                 db  45h ; E
.eh_frame:00000000000065EC                 db  0Eh
.eh_frame:00000000000065ED                 db  20h
.eh_frame:00000000000065EE                 db  8Ch
.eh_frame:00000000000065EF                 db    4
.eh_frame:00000000000065F0                 db  41h ; A
.eh_frame:00000000000065F1                 db  0Eh
.eh_frame:00000000000065F2                 db  28h ; (
.eh_frame:00000000000065F3                 db  86h
.eh_frame:00000000000065F4                 db    5
.eh_frame:00000000000065F5                 db  44h ; D
.eh_frame:00000000000065F6                 db  0Eh
.eh_frame:00000000000065F7                 db  30h ; 0
.eh_frame:00000000000065F8                 db  83h
.eh_frame:00000000000065F9                 db    6
.eh_frame:00000000000065FA                 db  4Ah ; J
.eh_frame:00000000000065FB                 db  0Eh
.eh_frame:00000000000065FC                 db  40h ; @
.eh_frame:00000000000065FD                 db    2
.eh_frame:00000000000065FE                 db  70h ; p
.eh_frame:00000000000065FF                 db  0Ah
.eh_frame:0000000000006600                 db  0Eh
.eh_frame:0000000000006601                 db  30h ; 0
.eh_frame:0000000000006602                 db  41h ; A
.eh_frame:0000000000006603                 db  0Eh
.eh_frame:0000000000006604                 db  28h ; (
.eh_frame:0000000000006605                 db  41h ; A
.eh_frame:0000000000006606                 db  0Eh
.eh_frame:0000000000006607                 db  20h
.eh_frame:0000000000006608                 db  42h ; B
.eh_frame:0000000000006609                 db  0Eh
.eh_frame:000000000000660A                 db  18h
.eh_frame:000000000000660B                 db  42h ; B
.eh_frame:000000000000660C                 db  0Eh
.eh_frame:000000000000660D                 db  10h
.eh_frame:000000000000660E                 db  42h ; B
.eh_frame:000000000000660F                 db  0Eh
.eh_frame:0000000000006610                 db    8
.eh_frame:0000000000006611                 db  48h ; H
.eh_frame:0000000000006612                 db  0Bh
.eh_frame:0000000000006613                 db    0
.eh_frame:0000000000006614                 db    0
.eh_frame:0000000000006615                 db    0
.eh_frame:0000000000006616                 db    0
.eh_frame:0000000000006617                 db    0
.eh_frame:0000000000006618                 db  3Ch ; <
.eh_frame:0000000000006619                 db    0
.eh_frame:000000000000661A                 db    0
.eh_frame:000000000000661B                 db    0
.eh_frame:000000000000661C                 db 0FCh
.eh_frame:000000000000661D                 db    9
.eh_frame:000000000000661E                 db    0
.eh_frame:000000000000661F                 db    0
.eh_frame:0000000000006620                 db  40h ; @
.eh_frame:0000000000006621                 db 0E1h
.eh_frame:0000000000006622                 db 0FFh
.eh_frame:0000000000006623                 db 0FFh
.eh_frame:0000000000006624                 db  83h
.eh_frame:0000000000006625                 db    0
.eh_frame:0000000000006626                 db    0
.eh_frame:0000000000006627                 db    0
.eh_frame:0000000000006628                 db    0
.eh_frame:0000000000006629                 db  42h ; B
.eh_frame:000000000000662A                 db  0Eh
.eh_frame:000000000000662B                 db  10h
.eh_frame:000000000000662C                 db  8Dh
.eh_frame:000000000000662D                 db    2
.eh_frame:000000000000662E                 db  42h ; B
.eh_frame:000000000000662F                 db  0Eh
.eh_frame:0000000000006630                 db  18h
.eh_frame:0000000000006631                 db  8Ch
.eh_frame:0000000000006632                 db    3
.eh_frame:0000000000006633                 db  44h ; D
.eh_frame:0000000000006634                 db  0Eh
.eh_frame:0000000000006635                 db  20h
.eh_frame:0000000000006636                 db  86h
.eh_frame:0000000000006637                 db    4
.eh_frame:0000000000006638                 db  41h ; A
.eh_frame:0000000000006639                 db  0Eh
.eh_frame:000000000000663A                 db  28h ; (
.eh_frame:000000000000663B                 db  83h
.eh_frame:000000000000663C                 db    5
.eh_frame:000000000000663D                 db  4Ah ; J
.eh_frame:000000000000663E                 db  0Eh
.eh_frame:000000000000663F                 db  40h ; @
.eh_frame:0000000000006640                 db    2
.eh_frame:0000000000006641                 db  64h ; d
.eh_frame:0000000000006642                 db  0Ah
.eh_frame:0000000000006643                 db  0Eh
.eh_frame:0000000000006644                 db  28h ; (
.eh_frame:0000000000006645                 db  41h ; A
.eh_frame:0000000000006646                 db  0Eh
.eh_frame:0000000000006647                 db  20h
.eh_frame:0000000000006648                 db  41h ; A
.eh_frame:0000000000006649                 db  0Eh
.eh_frame:000000000000664A                 db  18h
.eh_frame:000000000000664B                 db  42h ; B
.eh_frame:000000000000664C                 db  0Eh
.eh_frame:000000000000664D                 db  10h
.eh_frame:000000000000664E                 db  42h ; B
.eh_frame:000000000000664F                 db  0Eh
.eh_frame:0000000000006650                 db    8
.eh_frame:0000000000006651                 db  41h ; A
.eh_frame:0000000000006652                 db  0Bh
.eh_frame:0000000000006653                 db    0
.eh_frame:0000000000006654                 db    0
.eh_frame:0000000000006655                 db    0
.eh_frame:0000000000006656                 db    0
.eh_frame:0000000000006657                 db    0
.eh_frame:0000000000006658                 db  34h ; 4
.eh_frame:0000000000006659                 db    0
.eh_frame:000000000000665A                 db    0
.eh_frame:000000000000665B                 db    0
.eh_frame:000000000000665C                 db  3Ch ; <
.eh_frame:000000000000665D                 db  0Ah
.eh_frame:000000000000665E                 db    0
.eh_frame:000000000000665F                 db    0
.eh_frame:0000000000006660                 db  90h
.eh_frame:0000000000006661                 db 0E1h
.eh_frame:0000000000006662                 db 0FFh
.eh_frame:0000000000006663                 db 0FFh
.eh_frame:0000000000006664                 db 0C7h
.eh_frame:0000000000006665                 db    0
.eh_frame:0000000000006666                 db    0
.eh_frame:0000000000006667                 db    0
.eh_frame:0000000000006668                 db    0
.eh_frame:0000000000006669                 db  42h ; B
.eh_frame:000000000000666A                 db  0Eh
.eh_frame:000000000000666B                 db  10h
.eh_frame:000000000000666C                 db  8Ch
.eh_frame:000000000000666D                 db    2
.eh_frame:000000000000666E                 db  41h ; A
.eh_frame:000000000000666F                 db  0Eh
.eh_frame:0000000000006670                 db  18h
.eh_frame:0000000000006671                 db  86h
.eh_frame:0000000000006672                 db    3
.eh_frame:0000000000006673                 db  41h ; A
.eh_frame:0000000000006674                 db  0Eh
.eh_frame:0000000000006675                 db  20h
.eh_frame:0000000000006676                 db  83h
.eh_frame:0000000000006677                 db    4
.eh_frame:0000000000006678                 db  44h ; D
.eh_frame:0000000000006679                 db  0Eh
.eh_frame:000000000000667A                 db  40h ; @
.eh_frame:000000000000667B                 db    2
.eh_frame:000000000000667C                 db 0A3h
.eh_frame:000000000000667D                 db  0Ah
.eh_frame:000000000000667E                 db  0Eh
.eh_frame:000000000000667F                 db  20h
.eh_frame:0000000000006680                 db  41h ; A
.eh_frame:0000000000006681                 db  0Eh
.eh_frame:0000000000006682                 db  18h
.eh_frame:0000000000006683                 db  41h ; A
.eh_frame:0000000000006684                 db  0Eh
.eh_frame:0000000000006685                 db  10h
.eh_frame:0000000000006686                 db  42h ; B
.eh_frame:0000000000006687                 db  0Eh
.eh_frame:0000000000006688                 db    8
.eh_frame:0000000000006689                 db  41h ; A
.eh_frame:000000000000668A                 db  0Bh
.eh_frame:000000000000668B                 db    0
.eh_frame:000000000000668C                 db    0
.eh_frame:000000000000668D                 db    0
.eh_frame:000000000000668E                 db    0
.eh_frame:000000000000668F                 db    0
.eh_frame:0000000000006690                 db  34h ; 4
.eh_frame:0000000000006691                 db    0
.eh_frame:0000000000006692                 db    0
.eh_frame:0000000000006693                 db    0
.eh_frame:0000000000006694                 db  74h ; t
.eh_frame:0000000000006695                 db  0Ah
.eh_frame:0000000000006696                 db    0
.eh_frame:0000000000006697                 db    0
.eh_frame:0000000000006698                 db  28h ; (
.eh_frame:0000000000006699                 db 0E2h
.eh_frame:000000000000669A                 db 0FFh
.eh_frame:000000000000669B                 db 0FFh
.eh_frame:000000000000669C                 db  6Ch ; l
.eh_frame:000000000000669D                 db    0
.eh_frame:000000000000669E                 db    0
.eh_frame:000000000000669F                 db    0
.eh_frame:00000000000066A0                 db    0
.eh_frame:00000000000066A1                 db  41h ; A
.eh_frame:00000000000066A2                 db  0Eh
.eh_frame:00000000000066A3                 db  10h
.eh_frame:00000000000066A4                 db  86h
.eh_frame:00000000000066A5                 db    2
.eh_frame:00000000000066A6                 db  41h ; A
.eh_frame:00000000000066A7                 db  0Eh
.eh_frame:00000000000066A8                 db  18h
.eh_frame:00000000000066A9                 db  83h
.eh_frame:00000000000066AA                 db    3
.eh_frame:00000000000066AB                 db  4Ah ; J
.eh_frame:00000000000066AC                 db  0Eh
.eh_frame:00000000000066AD                 db  20h
.eh_frame:00000000000066AE                 db  5Ch ; \
.eh_frame:00000000000066AF                 db  0Ah
.eh_frame:00000000000066B0                 db  0Eh
.eh_frame:00000000000066B1                 db  18h
.eh_frame:00000000000066B2                 db  47h ; G
.eh_frame:00000000000066B3                 db  0Eh
.eh_frame:00000000000066B4                 db  10h
.eh_frame:00000000000066B5                 db  41h ; A
.eh_frame:00000000000066B6                 db  0Eh
.eh_frame:00000000000066B7                 db    8
.eh_frame:00000000000066B8                 db  48h ; H
.eh_frame:00000000000066B9                 db  0Bh
.eh_frame:00000000000066BA                 db  54h ; T
.eh_frame:00000000000066BB                 db  0Ah
.eh_frame:00000000000066BC                 db  0Eh
.eh_frame:00000000000066BD                 db  18h
.eh_frame:00000000000066BE                 db  41h ; A
.eh_frame:00000000000066BF                 db  0Eh
.eh_frame:00000000000066C0                 db  10h
.eh_frame:00000000000066C1                 db  41h ; A
.eh_frame:00000000000066C2                 db  0Eh
.eh_frame:00000000000066C3                 db    8
.eh_frame:00000000000066C4                 db  42h ; B
.eh_frame:00000000000066C5                 db  0Bh
.eh_frame:00000000000066C6                 db    0
.eh_frame:00000000000066C7                 db    0
.eh_frame:00000000000066C8                 db  4Ch ; L
.eh_frame:00000000000066C9                 db    0
.eh_frame:00000000000066CA                 db    0
.eh_frame:00000000000066CB                 db    0
.eh_frame:00000000000066CC                 db 0ACh
.eh_frame:00000000000066CD                 db  0Ah
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db  60h ; `
.eh_frame:00000000000066D1                 db 0E2h
.eh_frame:00000000000066D2                 db 0FFh
.eh_frame:00000000000066D3                 db 0FFh
.eh_frame:00000000000066D4                 db  7Dh ; }
.eh_frame:00000000000066D5                 db    0
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db    0
.eh_frame:00000000000066D9                 db  42h ; B
.eh_frame:00000000000066DA                 db  0Eh
.eh_frame:00000000000066DB                 db  10h
.eh_frame:00000000000066DC                 db  8Ch
.eh_frame:00000000000066DD                 db    2
.eh_frame:00000000000066DE                 db  41h ; A
.eh_frame:00000000000066DF                 db  0Eh
.eh_frame:00000000000066E0                 db  18h
.eh_frame:00000000000066E1                 db  86h
.eh_frame:00000000000066E2                 db    3
.eh_frame:00000000000066E3                 db  44h ; D
.eh_frame:00000000000066E4                 db  0Eh
.eh_frame:00000000000066E5                 db  20h
.eh_frame:00000000000066E6                 db  83h
.eh_frame:00000000000066E7                 db    4
.eh_frame:00000000000066E8                 db  69h ; i
.eh_frame:00000000000066E9                 db  0Ah
.eh_frame:00000000000066EA                 db  0Eh
.eh_frame:00000000000066EB                 db  18h
.eh_frame:00000000000066EC                 db  41h ; A
.eh_frame:00000000000066ED                 db  0Eh
.eh_frame:00000000000066EE                 db  10h
.eh_frame:00000000000066EF                 db  42h ; B
.eh_frame:00000000000066F0                 db  0Eh
.eh_frame:00000000000066F1                 db    8
.eh_frame:00000000000066F2                 db  45h ; E
.eh_frame:00000000000066F3                 db  0Bh
.eh_frame:00000000000066F4                 db  55h ; U
.eh_frame:00000000000066F5                 db  0Ah
.eh_frame:00000000000066F6                 db  0Eh
.eh_frame:00000000000066F7                 db  18h
.eh_frame:00000000000066F8                 db  41h ; A
.eh_frame:00000000000066F9                 db  0Eh
.eh_frame:00000000000066FA                 db  10h
.eh_frame:00000000000066FB                 db  42h ; B
.eh_frame:00000000000066FC                 db  0Eh
.eh_frame:00000000000066FD                 db    8
.eh_frame:00000000000066FE                 db  48h ; H
.eh_frame:00000000000066FF                 db  0Bh
.eh_frame:0000000000006700                 db  41h ; A
.eh_frame:0000000000006701                 db  0Ah
.eh_frame:0000000000006702                 db  0Eh
.eh_frame:0000000000006703                 db  18h
.eh_frame:0000000000006704                 db  46h ; F
.eh_frame:0000000000006705                 db  0Eh
.eh_frame:0000000000006706                 db  10h
.eh_frame:0000000000006707                 db  42h ; B
.eh_frame:0000000000006708                 db  0Eh
.eh_frame:0000000000006709                 db    8
.eh_frame:000000000000670A                 db  47h ; G
.eh_frame:000000000000670B                 db  0Bh
.eh_frame:000000000000670C                 db  49h ; I
.eh_frame:000000000000670D                 db  0Eh
.eh_frame:000000000000670E                 db  18h
.eh_frame:000000000000670F                 db  41h ; A
.eh_frame:0000000000006710                 db  0Eh
.eh_frame:0000000000006711                 db  10h
.eh_frame:0000000000006712                 db  42h ; B
.eh_frame:0000000000006713                 db  0Eh
.eh_frame:0000000000006714                 db    8
.eh_frame:0000000000006715                 db    0
.eh_frame:0000000000006716                 db    0
.eh_frame:0000000000006717                 db    0
.eh_frame:0000000000006718                 db  14h
.eh_frame:0000000000006719                 db    0
.eh_frame:000000000000671A                 db    0
.eh_frame:000000000000671B                 db    0
.eh_frame:000000000000671C                 db 0FCh
.eh_frame:000000000000671D                 db  0Ah
.eh_frame:000000000000671E                 db    0
.eh_frame:000000000000671F                 db    0
.eh_frame:0000000000006720                 db  90h
.eh_frame:0000000000006721                 db 0E2h
.eh_frame:0000000000006722                 db 0FFh
.eh_frame:0000000000006723                 db 0FFh
.eh_frame:0000000000006724                 db 0BCh
.eh_frame:0000000000006725                 db    0
.eh_frame:0000000000006726                 db    0
.eh_frame:0000000000006727                 db    0
.eh_frame:0000000000006728                 db    0
.eh_frame:0000000000006729                 db    0
.eh_frame:000000000000672A                 db    0
.eh_frame:000000000000672B                 db    0
.eh_frame:000000000000672C                 db    0
.eh_frame:000000000000672D                 db    0
.eh_frame:000000000000672E                 db    0
.eh_frame:000000000000672F                 db    0
.eh_frame:0000000000006730                 db  1Ch
.eh_frame:0000000000006731                 db    0
.eh_frame:0000000000006732                 db    0
.eh_frame:0000000000006733                 db    0
.eh_frame:0000000000006734                 db  14h
.eh_frame:0000000000006735                 db  0Bh
.eh_frame:0000000000006736                 db    0
.eh_frame:0000000000006737                 db    0
.eh_frame:0000000000006738                 db  38h ; 8
.eh_frame:0000000000006739                 db 0E3h
.eh_frame:000000000000673A                 db 0FFh
.eh_frame:000000000000673B                 db 0FFh
.eh_frame:000000000000673C                 db  60h ; `
.eh_frame:000000000000673D                 db    0
.eh_frame:000000000000673E                 db    0
.eh_frame:000000000000673F                 db    0
.eh_frame:0000000000006740                 db    0
.eh_frame:0000000000006741                 db  44h ; D
.eh_frame:0000000000006742                 db  0Eh
.eh_frame:0000000000006743                 db  10h
.eh_frame:0000000000006744                 db  75h ; u
.eh_frame:0000000000006745                 db  0Ah
.eh_frame:0000000000006746                 db  0Eh
.eh_frame:0000000000006747                 db    8
.eh_frame:0000000000006748                 db  47h ; G
.eh_frame:0000000000006749                 db  0Bh
.eh_frame:000000000000674A                 db  5Fh ; _
.eh_frame:000000000000674B                 db  0Eh
.eh_frame:000000000000674C                 db    8
.eh_frame:000000000000674D                 db    0
.eh_frame:000000000000674E                 db    0
.eh_frame:000000000000674F                 db    0
.eh_frame:0000000000006750                 db  1Ch
.eh_frame:0000000000006751                 db    0
.eh_frame:0000000000006752                 db    0
.eh_frame:0000000000006753                 db    0
.eh_frame:0000000000006754                 db  34h ; 4
.eh_frame:0000000000006755                 db  0Bh
.eh_frame:0000000000006756                 db    0
.eh_frame:0000000000006757                 db    0
.eh_frame:0000000000006758                 db  78h ; x
.eh_frame:0000000000006759                 db 0E3h
.eh_frame:000000000000675A                 db 0FFh
.eh_frame:000000000000675B                 db 0FFh
.eh_frame:000000000000675C                 db  3Ch ; <
.eh_frame:000000000000675D                 db    0
.eh_frame:000000000000675E                 db    0
.eh_frame:000000000000675F                 db    0
.eh_frame:0000000000006760                 db    0
.eh_frame:0000000000006761                 db  44h ; D
.eh_frame:0000000000006762                 db  0Eh
.eh_frame:0000000000006763                 db  10h
.eh_frame:0000000000006764                 db  61h ; a
.eh_frame:0000000000006765                 db  0Ah
.eh_frame:0000000000006766                 db  0Eh
.eh_frame:0000000000006767                 db    8
.eh_frame:0000000000006768                 db  4Bh ; K
.eh_frame:0000000000006769                 db  0Bh
.eh_frame:000000000000676A                 db  4Bh ; K
.eh_frame:000000000000676B                 db  0Eh
.eh_frame:000000000000676C                 db    8
.eh_frame:000000000000676D                 db    0
.eh_frame:000000000000676E                 db    0
.eh_frame:000000000000676F                 db    0
.eh_frame:0000000000006770                 db  34h ; 4
.eh_frame:0000000000006771                 db    0
.eh_frame:0000000000006772                 db    0
.eh_frame:0000000000006773                 db    0
.eh_frame:0000000000006774                 db  54h ; T
.eh_frame:0000000000006775                 db  0Bh
.eh_frame:0000000000006776                 db    0
.eh_frame:0000000000006777                 db    0
.eh_frame:0000000000006778                 db  98h
.eh_frame:0000000000006779                 db 0E3h
.eh_frame:000000000000677A                 db 0FFh
.eh_frame:000000000000677B                 db 0FFh
.eh_frame:000000000000677C                 db  7Bh ; {
.eh_frame:000000000000677D                 db    0
.eh_frame:000000000000677E                 db    0
.eh_frame:000000000000677F                 db    0
.eh_frame:0000000000006780                 db    0
.eh_frame:0000000000006781                 db  42h ; B
.eh_frame:0000000000006782                 db  0Eh
.eh_frame:0000000000006783                 db  10h
.eh_frame:0000000000006784                 db  8Ch
.eh_frame:0000000000006785                 db    2
.eh_frame:0000000000006786                 db  41h ; A
.eh_frame:0000000000006787                 db  0Eh
.eh_frame:0000000000006788                 db  18h
.eh_frame:0000000000006789                 db  86h
.eh_frame:000000000000678A                 db    3
.eh_frame:000000000000678B                 db  41h ; A
.eh_frame:000000000000678C                 db  0Eh
.eh_frame:000000000000678D                 db  20h
.eh_frame:000000000000678E                 db  83h
.eh_frame:000000000000678F                 db    4
.eh_frame:0000000000006790                 db  7Dh ; }
.eh_frame:0000000000006791                 db  0Ah
.eh_frame:0000000000006792                 db  0Eh
.eh_frame:0000000000006793                 db  18h
.eh_frame:0000000000006794                 db  41h ; A
.eh_frame:0000000000006795                 db  0Eh
.eh_frame:0000000000006796                 db  10h
.eh_frame:0000000000006797                 db  42h ; B
.eh_frame:0000000000006798                 db  0Eh
.eh_frame:0000000000006799                 db    8
.eh_frame:000000000000679A                 db  44h ; D
.eh_frame:000000000000679B                 db  0Bh
.eh_frame:000000000000679C                 db  60h ; `
.eh_frame:000000000000679D                 db  0Ah
.eh_frame:000000000000679E                 db  0Eh
.eh_frame:000000000000679F                 db  18h
.eh_frame:00000000000067A0                 db  41h ; A
.eh_frame:00000000000067A1                 db  0Eh
.eh_frame:00000000000067A2                 db  10h
.eh_frame:00000000000067A3                 db  42h ; B
.eh_frame:00000000000067A4                 db  0Eh
.eh_frame:00000000000067A5                 db    8
.eh_frame:00000000000067A6                 db  45h ; E
.eh_frame:00000000000067A7                 db  0Bh
.eh_frame:00000000000067A8                 db  1Ch
.eh_frame:00000000000067A9                 db    0
.eh_frame:00000000000067AA                 db    0
.eh_frame:00000000000067AB                 db    0
.eh_frame:00000000000067AC                 db  8Ch
.eh_frame:00000000000067AD                 db  0Bh
.eh_frame:00000000000067AE                 db    0
.eh_frame:00000000000067AF                 db    0
.eh_frame:00000000000067B0                 db 0E0h
.eh_frame:00000000000067B1                 db 0E3h
.eh_frame:00000000000067B2                 db 0FFh
.eh_frame:00000000000067B3                 db 0FFh
.eh_frame:00000000000067B4                 db  40h ; @
.eh_frame:00000000000067B5                 db    0
.eh_frame:00000000000067B6                 db    0
.eh_frame:00000000000067B7                 db    0
.eh_frame:00000000000067B8                 db    0
.eh_frame:00000000000067B9                 db  44h ; D
.eh_frame:00000000000067BA                 db  0Eh
.eh_frame:00000000000067BB                 db  10h
.eh_frame:00000000000067BC                 db  83h
.eh_frame:00000000000067BD                 db    2
.eh_frame:00000000000067BE                 db  5Ah ; Z
.eh_frame:00000000000067BF                 db  0Ah
.eh_frame:00000000000067C0                 db  0Eh
.eh_frame:00000000000067C1                 db    8
.eh_frame:00000000000067C2                 db  4Ah ; J
.eh_frame:00000000000067C3                 db  0Bh
.eh_frame:00000000000067C4                 db  53h ; S
.eh_frame:00000000000067C5                 db  0Eh
.eh_frame:00000000000067C6                 db    8
.eh_frame:00000000000067C7                 db    0
.eh_frame:00000000000067C8                 db  2Ch ; ,
.eh_frame:00000000000067C9                 db    0
.eh_frame:00000000000067CA                 db    0
.eh_frame:00000000000067CB                 db    0
.eh_frame:00000000000067CC                 db 0ACh
.eh_frame:00000000000067CD                 db  0Bh
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db    0
.eh_frame:00000000000067D1                 db 0E4h
.eh_frame:00000000000067D2                 db 0FFh
.eh_frame:00000000000067D3                 db 0FFh
.eh_frame:00000000000067D4                 db  57h ; W
.eh_frame:00000000000067D5                 db    0
.eh_frame:00000000000067D6                 db    0
.eh_frame:00000000000067D7                 db    0
.eh_frame:00000000000067D8                 db    0
.eh_frame:00000000000067D9                 db  63h ; c
.eh_frame:00000000000067DA                 db  0Eh
.eh_frame:00000000000067DB                 db  10h
.eh_frame:00000000000067DC                 db  8Ch
.eh_frame:00000000000067DD                 db    2
.eh_frame:00000000000067DE                 db  41h ; A
.eh_frame:00000000000067DF                 db  0Eh
.eh_frame:00000000000067E0                 db  18h
.eh_frame:00000000000067E1                 db  86h
.eh_frame:00000000000067E2                 db    3
.eh_frame:00000000000067E3                 db  44h ; D
.eh_frame:00000000000067E4                 db  0Eh
.eh_frame:00000000000067E5                 db  20h
.eh_frame:00000000000067E6                 db  83h
.eh_frame:00000000000067E7                 db    4
.eh_frame:00000000000067E8                 db  6Bh ; k
.eh_frame:00000000000067E9                 db  0Eh
.eh_frame:00000000000067EA                 db  18h
.eh_frame:00000000000067EB                 db  41h ; A
.eh_frame:00000000000067EC                 db  0Eh
.eh_frame:00000000000067ED                 db  10h
.eh_frame:00000000000067EE                 db  42h ; B
.eh_frame:00000000000067EF                 db  0Eh
.eh_frame:00000000000067F0                 db    8
.eh_frame:00000000000067F1                 db    0
.eh_frame:00000000000067F2                 db    0
.eh_frame:00000000000067F3                 db    0
.eh_frame:00000000000067F4                 db    0
.eh_frame:00000000000067F5                 db    0
.eh_frame:00000000000067F6                 db    0
.eh_frame:00000000000067F7                 db    0
.eh_frame:00000000000067F8                 db  44h ; D
.eh_frame:00000000000067F9                 db    0
.eh_frame:00000000000067FA                 db    0
.eh_frame:00000000000067FB                 db    0
.eh_frame:00000000000067FC                 db 0DCh
.eh_frame:00000000000067FD                 db  0Bh
.eh_frame:00000000000067FE                 db    0
.eh_frame:00000000000067FF                 db    0
.eh_frame:0000000000006800                 db  30h ; 0
.eh_frame:0000000000006801                 db 0E4h
.eh_frame:0000000000006802                 db 0FFh
.eh_frame:0000000000006803                 db 0FFh
.eh_frame:0000000000006804                 db  65h ; e
.eh_frame:0000000000006805                 db    0
.eh_frame:0000000000006806                 db    0
.eh_frame:0000000000006807                 db    0
.eh_frame:0000000000006808                 db    0
.eh_frame:0000000000006809                 db  42h ; B
.eh_frame:000000000000680A                 db  0Eh
.eh_frame:000000000000680B                 db  10h
.eh_frame:000000000000680C                 db  8Fh
.eh_frame:000000000000680D                 db    2
.eh_frame:000000000000680E                 db  42h ; B
.eh_frame:000000000000680F                 db  0Eh
.eh_frame:0000000000006810                 db  18h
.eh_frame:0000000000006811                 db  8Eh
.eh_frame:0000000000006812                 db    3
.eh_frame:0000000000006813                 db  45h ; E
.eh_frame:0000000000006814                 db  0Eh
.eh_frame:0000000000006815                 db  20h
.eh_frame:0000000000006816                 db  8Dh
.eh_frame:0000000000006817                 db    4
.eh_frame:0000000000006818                 db  42h ; B
.eh_frame:0000000000006819                 db  0Eh
.eh_frame:000000000000681A                 db  28h ; (
.eh_frame:000000000000681B                 db  8Ch
.eh_frame:000000000000681C                 db    5
.eh_frame:000000000000681D                 db  48h ; H
.eh_frame:000000000000681E                 db  0Eh
.eh_frame:000000000000681F                 db  30h ; 0
.eh_frame:0000000000006820                 db  86h
.eh_frame:0000000000006821                 db    6
.eh_frame:0000000000006822                 db  48h ; H
.eh_frame:0000000000006823                 db  0Eh
.eh_frame:0000000000006824                 db  38h ; 8
.eh_frame:0000000000006825                 db  83h
.eh_frame:0000000000006826                 db    7
.eh_frame:0000000000006827                 db  4Dh ; M
.eh_frame:0000000000006828                 db  0Eh
.eh_frame:0000000000006829                 db  40h ; @
.eh_frame:000000000000682A                 db  72h ; r
.eh_frame:000000000000682B                 db  0Eh
.eh_frame:000000000000682C                 db  38h ; 8
.eh_frame:000000000000682D                 db  41h ; A
.eh_frame:000000000000682E                 db  0Eh
.eh_frame:000000000000682F                 db  30h ; 0
.eh_frame:0000000000006830                 db  41h ; A
.eh_frame:0000000000006831                 db  0Eh
.eh_frame:0000000000006832                 db  28h ; (
.eh_frame:0000000000006833                 db  42h ; B
.eh_frame:0000000000006834                 db  0Eh
.eh_frame:0000000000006835                 db  20h
.eh_frame:0000000000006836                 db  42h ; B
.eh_frame:0000000000006837                 db  0Eh
.eh_frame:0000000000006838                 db  18h
.eh_frame:0000000000006839                 db  42h ; B
.eh_frame:000000000000683A                 db  0Eh
.eh_frame:000000000000683B                 db  10h
.eh_frame:000000000000683C                 db  42h ; B
.eh_frame:000000000000683D                 db  0Eh
.eh_frame:000000000000683E                 db    8
.eh_frame:000000000000683F                 db    0
.eh_frame:0000000000006840                 db  14h
.eh_frame:0000000000006841                 db    0
.eh_frame:0000000000006842                 db    0
.eh_frame:0000000000006843                 db    0
.eh_frame:0000000000006844                 db  24h ; $
.eh_frame:0000000000006845                 db  0Ch
.eh_frame:0000000000006846                 db    0
.eh_frame:0000000000006847                 db    0
.eh_frame:0000000000006848                 db  58h ; X
.eh_frame:0000000000006849                 db 0E4h
.eh_frame:000000000000684A                 db 0FFh
.eh_frame:000000000000684B                 db 0FFh
.eh_frame:000000000000684C                 db    2
.eh_frame:000000000000684D                 db    0
.eh_frame:000000000000684E                 db    0
.eh_frame:000000000000684F                 db    0
.eh_frame:0000000000006850                 db    0
.eh_frame:0000000000006851                 db    0
.eh_frame:0000000000006852                 db    0
.eh_frame:0000000000006853                 db    0
.eh_frame:0000000000006854                 db    0
.eh_frame:0000000000006855                 db    0
.eh_frame:0000000000006856                 db    0
.eh_frame:0000000000006857                 db    0
.eh_frame:0000000000006858                 db  10h
.eh_frame:0000000000006859                 db    0
.eh_frame:000000000000685A                 db    0
.eh_frame:000000000000685B                 db    0
.eh_frame:000000000000685C                 db  3Ch ; <
.eh_frame:000000000000685D                 db  0Ch
.eh_frame:000000000000685E                 db    0
.eh_frame:000000000000685F                 db    0
.eh_frame:0000000000006860                 db  50h ; P
.eh_frame:0000000000006861                 db 0E4h
.eh_frame:0000000000006862                 db 0FFh
.eh_frame:0000000000006863                 db 0FFh
.eh_frame:0000000000006864                 db  0Eh
.eh_frame:0000000000006865                 db    0
.eh_frame:0000000000006866                 db    0
.eh_frame:0000000000006867                 db    0
.eh_frame:0000000000006868                 db    0
.eh_frame:0000000000006869                 db    0
.eh_frame:000000000000686A                 db    0
.eh_frame:000000000000686B                 db    0
.eh_frame:000000000000686C __FRAME_END__   db    0
.eh_frame:000000000000686D                 db    0
.eh_frame:000000000000686E                 db    0
.eh_frame:000000000000686F                 db    0
.eh_frame:000000000000686F _eh_frame       ends
.eh_frame:000000000000686F
.init_array:0000000000206BB0 ; ELF Initialization Function Table
.init_array:0000000000206BB0 ; ===========================================================================
.init_array:0000000000206BB0
.init_array:0000000000206BB0 ; Segment type: Pure data
.init_array:0000000000206BB0 ; Segment permissions: Read/Write
.init_array:0000000000206BB0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206BB0                 assume cs:_init_array
.init_array:0000000000206BB0                 ;org 206BB0h
.init_array:0000000000206BB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206BB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206BB0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206BB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206BB0
.fini_array:0000000000206BB8 ; ELF Termination Function Table
.fini_array:0000000000206BB8 ; ===========================================================================
.fini_array:0000000000206BB8
.fini_array:0000000000206BB8 ; Segment type: Pure data
.fini_array:0000000000206BB8 ; Segment permissions: Read/Write
.fini_array:0000000000206BB8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206BB8                 assume cs:_fini_array
.fini_array:0000000000206BB8                 ;org 206BB8h
.fini_array:0000000000206BB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206BB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206BB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206BB8
.data.rel.ro:0000000000206BC0 ; ===========================================================================
.data.rel.ro:0000000000206BC0
.data.rel.ro:0000000000206BC0 ; Segment type: Pure data
.data.rel.ro:0000000000206BC0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206BC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206BC0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206BC0                 ;org 206BC0h
.data.rel.ro:0000000000206BC0 ; struct option long_options
.data.rel.ro:0000000000206BC0 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000206BC0                                         ; DATA XREF: parse_long_options:loc_1E60↑o
.data.rel.ro:0000000000206BC0                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000206BC0                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BC0                 dq 0                    ; flag
.data.rel.ro:0000000000206BC0                 dd 68h                  ; val
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  76h ; v
.data.rel.ro:0000000000206BF9                 db    0
.data.rel.ro:0000000000206BFA                 db    0
.data.rel.ro:0000000000206BFB                 db    0
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_0          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 1270h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4CC0h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206BB0h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206BB8h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 838h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 2A3h>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 408h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E68h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0BB0h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0B50h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0ADCh> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_1290↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_1290+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 strtod_ptr      dq offset strtod        ; DATA XREF: _strtod↑r
.got:0000000000206EB8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EC0 strtod_l_ptr    dq offset strtod_l      ; DATA XREF: _strtod_l↑r
.got:0000000000206EC8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206ED0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206ED0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206ED8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206EE0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206EE0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EE8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EF0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EF0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EF8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206F00 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206F08 newlocale_ptr   dq offset newlocale     ; DATA XREF: _newlocale↑r
.got:0000000000206F10 nanosleep_ptr   dq offset nanosleep     ; DATA XREF: _nanosleep↑r
.got:0000000000206F18 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F20 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F28 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F30 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F38 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F38                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F40 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F48 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F50 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F58 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F60 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F68 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F70 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F78 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F80 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F88 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F90 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F98 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FE0                                         ; DATA XREF: start+24↑r
.got:0000000000206FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF8 _got            ends
.got:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+70↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1D82↑r
.data:0000000000207018                                         ; parse_gnu_standard_options_only:loc_1FF0↑r ...
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_347D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000790↑o
.bss:0000000000207080                                         ; LOAD:00000000000007D8↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000778↑o
.bss:0000000000207088                                         ; usage+80↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:0000000000207090                                         ; main+B5↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:00000000000007A8↑o
.bss:0000000000207098                                         ; LOAD:00000000000007C0↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public opterr@@GLIBC_2_2_5
.bss:00000000002070A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:00000000002070A0                                         ; parse_long_options+67↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'opterr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A4                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000808↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_209D↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207238 ; __locale_t c_locale_cache
.bss:0000000000207238 c_locale_cache  dq ?                    ; DATA XREF: c_strtod+C↑r
.bss:0000000000207238                                         ; c_strtod:loc_48D8↑r ...
.bss:0000000000207238 _bss            ends
.bss:0000000000207238
.prgend:0000000000207240 ; ===========================================================================
.prgend:0000000000207240
.prgend:0000000000207240 ; Segment type: Zero-length
.prgend:0000000000207240 _prgend         segment byte public '' use64
.prgend:0000000000207240 _end            label byte
.prgend:0000000000207240 _prgend         ends
.prgend:0000000000207240
extern:0000000000207248 ; ===========================================================================
extern:0000000000207248
extern:0000000000207248 ; Segment type: Externs
extern:0000000000207248 ; extern
extern:0000000000207248 ; void free(void *ptr)
extern:0000000000207248                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207248                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207250 ; void __noreturn abort(void)
extern:0000000000207250                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207250                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207258 ; int *_errno_location(void)
extern:0000000000207258                 extrn __errno_location:near
extern:0000000000207258                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207258                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207260 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207260                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207260                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207268 ; void __noreturn exit(int status)
extern:0000000000207268                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207268                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207270 ; size_t _fpending(FILE *fp)
extern:0000000000207270                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207270                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207278 ; double strtod(const char *nptr, char **endptr)
extern:0000000000207278                 extrn strtod:near       ; CODE XREF: _strtod↑j
extern:0000000000207278                                         ; DATA XREF: .got:strtod_ptr↑o
extern:0000000000207280 ; char *textdomain(const char *domainname)
extern:0000000000207280                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207280                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207288 ; double strtod_l(const char *nptr, char **endptr, __locale_t loc)
extern:0000000000207288                 extrn strtod_l:near     ; CODE XREF: _strtod_l↑j
extern:0000000000207288                                         ; DATA XREF: .got:strtod_l_ptr↑o
extern:0000000000207290 ; int fclose(FILE *stream)
extern:0000000000207290                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207290                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207298 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207298                 extrn bindtextdomain:near
extern:0000000000207298                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207298                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002072A0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002072A0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002072A0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002072A8 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002072A8                 extrn __ctype_get_mb_cur_max:near
extern:00000000002072A8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002072A8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002072B0 ; size_t strlen(const char *s)
extern:00000000002072B0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002072B0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072B8                 extrn __stack_chk_fail:near
extern:00000000002072B8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072B8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072C0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072C0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072C0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072C8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072C8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072C8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072D0 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
extern:00000000002072D0                 extrn newlocale:near    ; CODE XREF: _newlocale↑j
extern:00000000002072D0                                         ; DATA XREF: .got:newlocale_ptr↑o
extern:00000000002072D8 ; int nanosleep(const struct timespec *requested_time, struct timespec *remaining)
extern:00000000002072D8                 extrn nanosleep:near    ; CODE XREF: _nanosleep↑j
extern:00000000002072D8                                         ; DATA XREF: .got:nanosleep_ptr↑o
extern:00000000002072E0 ; char *strrchr(const char *s, int c)
extern:00000000002072E0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072E0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072E8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072E8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072E8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072F0 ; void *memset(void *s, int c, size_t n)
extern:00000000002072F0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072F0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072F8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072F8                 extrn __libc_start_main:near
extern:00000000002072F8                                         ; CODE XREF: start+24↑p
extern:00000000002072F8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000207300 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000207300                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000207300                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000207308 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000207308                 extrn fputs_unlocked:near
extern:0000000000207308                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000207308                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000207310 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000207310                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000207310                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000207318 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000207318                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000207318                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207320 ; int fileno(FILE *stream)
extern:0000000000207320                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207320                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207328 ; void *malloc(size_t size)
extern:0000000000207328                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207328                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207330 ; int fflush(FILE *stream)
extern:0000000000207330                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207330                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207338 ; char *nl_langinfo(nl_item item)
extern:0000000000207338                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207338                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207340 ; int _freading(FILE *fp)
extern:0000000000207340                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207340                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207348 ; void *realloc(void *ptr, size_t size)
extern:0000000000207348                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207348                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207350 ; char *setlocale(int category, const char *locale)
extern:0000000000207350                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207350                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207358                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207358                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207360 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207360                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207360                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207368 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207368                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207368                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207370 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207370                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207370                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207378 ; void __noreturn exit(int status)
extern:0000000000207378                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207378                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207380 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207380                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207380                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207388                 extrn __fprintf_chk:near
extern:0000000000207388                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207388                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207390 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207390                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207390                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207398 ; int iswprint(wint_t wc)
extern:0000000000207398                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207398                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002073A0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002073A0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002073A0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002073A0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002073A8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002073A8                 extrn __ctype_b_loc:near
extern:00000000002073A8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002073A8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002073B0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002073B0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073B8                 extrn __gmon_start__:near ; weak
extern:00000000002073B8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073B8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073C0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073C0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073C0
extern:00000000002073C0
extern:00000000002073C0                 end start
