LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : A9C0E9B5D76116BC79A12B45487B29CCF5F91BDEE6CB8C7A9B9F095B64D89F4E
LOAD:0000000000000000 ; Input MD5    : 12E85F59CA3163F215543376EC7A95D0
LOAD:0000000000000000 ; Input CRC32  : 3C8C4C33
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/whoami
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'whoami.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 22818h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6038h                ; Size in file image
LOAD:00000000000000D8                 dq 6038h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6BB0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206BB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4D0h                 ; Size in file image
LOAD:0000000000000110                 dq 688h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 52D0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 52D0h                ; Physical address
LOAD:00000000000001B0                 dq 24Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 24Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6BB0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206BB0h              ; Physical address
LOAD:0000000000000220                 dq 450h                 ; Size in file image
LOAD:0000000000000228                 dq 450h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0CFh, 3Eh, 2, 0B6h, 16h, 0D9h, 0BCh, 0C7h, 0E5h, 6Fh ; Desc
LOAD:0000000000000284                 db 42h, 0CFh, 0E5h, 8Eh, 0E9h, 2Ch, 57h, 8Dh, 29h, 0D9h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 30h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 30h, 31h, 37h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_820, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_820, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_820, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_820, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_820, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_820, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_820, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aPuts - offset byte_820, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_820, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_820, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aGetpwuid - offset byte_820, 12h, 0, 0, \ ; "getpwuid"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_820, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_820, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_820, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_820, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_820, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_820, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_820, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrrchr - offset byte_820, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aLseek - offset byte_820, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004C0                            0>
LOAD:00000000000004D8                 Elf64_Sym <offset aMemset - offset byte_820, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aGeteuid - offset byte_820, 12h, 0, 0, \ ; "geteuid"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLibcStartMain - offset byte_820, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMemcmp - offset byte_820, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aFputsUnlocked - offset byte_820, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aCalloc - offset byte_820, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aGmonStart - offset byte_820, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcpy - offset byte_820, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFileno - offset byte_820, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMalloc - offset byte_820, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFflush - offset byte_820, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aNlLanginfo - offset byte_820, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFreading - offset byte_820, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aRealloc - offset byte_820, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aSetlocale - offset byte_820, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aPrintfChk - offset byte_820, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aError - offset byte_820, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000658                            0>
LOAD:0000000000000670                 Elf64_Sym <offset aFseeko - offset byte_820, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aCxaAtexit - offset byte_820, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aExit+1 - offset byte_820, 12h, 0, 0, \ ; "exit"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFwrite - offset byte_820, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFprintfChk - offset byte_820, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aItmRegistertmc - offset byte_820, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aMbsinit - offset byte_820, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aIswprint - offset byte_820, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aCxaFinalize - offset byte_820, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aCtypeBLoc - offset byte_820, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aStdout - offset byte_820, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000760                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000778                 Elf64_Sym <offset aProgname - offset byte_820, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000778                            offset __bss_start, 8>
LOAD:0000000000000790                 Elf64_Sym <offset aProgramInvocat - offset byte_820, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000790                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007A8                 Elf64_Sym <offset aPrognameFull - offset byte_820, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007A8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007C0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_820, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007C0                            offset __bss_start, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aOpterr - offset byte_820, 11h, 0, 19h, \ ; "opterr"
LOAD:00000000000007D8                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:00000000000007F0                 Elf64_Sym <offset aStderr - offset byte_820, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007F0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aOptind - offset byte_820, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000808                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000820 ; ELF String Table
LOAD:0000000000000820 byte_820        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000820                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000821 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B28↓o
LOAD:000000000000082B aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000832 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000640↑o
LOAD:000000000000083F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000849 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000851 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000859 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000860 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000868 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000872 aGetpwuid       db 'getpwuid',0         ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:000000000000087B aError          db 'error',0            ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000881 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000886 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000897 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000718↑o
LOAD:00000000000008A0 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000008A8 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:00000000000008AE aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:00000000000008AE                                         ; LOAD:00000000000006A0↑o
LOAD:00000000000008B4 aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000008B4                                         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:00000000000008CC aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000008CC                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000008E3 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000008EA aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000008F1 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000008F8 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000909 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000910 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:000000000000091E aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000925 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:000000000000092B aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000932 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000939 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000940 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000948 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000954 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000962 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:000000000000096D aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000974 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000980 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000987 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:000000000000098E aGeteuid        db 'geteuid',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000996 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:00000000000009A1 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000009A1                                         ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:00000000000009BF aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000009CE aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:00000000000009CE                                         ; LOAD:00000000000003B8↑o
LOAD:00000000000009DD aOpterr         db 'opterr',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:00000000000009E4 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000009E4                                         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009F6 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:00000000000009FD aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A0C aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A11 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A1C aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A2C aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000A39 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B38↓o
LOAD:0000000000000A43 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B48↓o
LOAD:0000000000000A4F aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B58↓o
LOAD:0000000000000A5A aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B68↓o
LOAD:0000000000000A64 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B78↓o
LOAD:0000000000000A70 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A70                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000A8C aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A9B aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A9B                                         ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AB5                 align 2
LOAD:0000000000000AB6 ; ELF GNU Symbol Version Table
LOAD:0000000000000AB6                 dw 0
LOAD:0000000000000AB8                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000AC2                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000AC4                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000ACA                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000ACC                 dw 2                    ; getpwuid@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000AD0                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000AD2                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000AD8                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000AE2                 dw 2                    ; geteuid@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000AE6                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AE8                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AEA                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AEC                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AEE                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AF0                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AF2                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AF4                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AF6                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000AF8                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000AFA                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000AFC                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000AFE                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000B00                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000B02                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000B04                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000B06                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B08                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B0A                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B0C                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000B0E                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000B10                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000B12                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000B14                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000B16                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000B18                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000B1A                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000B1C                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000B1E                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000B20                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000B22                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B24                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B26                 dw 0
LOAD:0000000000000B28 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B28                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_820, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B38                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_820, \ ; "GLIBC_2.3"
LOAD:0000000000000B38                                10h>
LOAD:0000000000000B48                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_820, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B48                                10h>
LOAD:0000000000000B58                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_820, \ ; "GLIBC_2.14"
LOAD:0000000000000B58                                10h>
LOAD:0000000000000B68                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_820, \ ; "GLIBC_2.4"
LOAD:0000000000000B68                                10h>
LOAD:0000000000000B78                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_820, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B88 ; ELF RELA Relocation Table
LOAD:0000000000000B88                 Elf64_Rela <206BB0h, 8, 1750h> ; R_X86_64_RELATIVE +1750h
LOAD:0000000000000BA0                 Elf64_Rela <206BB8h, 8, 1710h> ; R_X86_64_RELATIVE +1710h
LOAD:0000000000000BB8                 Elf64_Rela <206BC0h, 8, 4A2Bh> ; R_X86_64_RELATIVE +4A2Bh
LOAD:0000000000000BD0                 Elf64_Rela <206BE0h, 8, 4A30h> ; R_X86_64_RELATIVE +4A30h
LOAD:0000000000000BE8                 Elf64_Rela <206C20h, 8, 4A91h> ; R_X86_64_RELATIVE +4A91h
LOAD:0000000000000C00                 Elf64_Rela <206C28h, 8, 4A99h> ; R_X86_64_RELATIVE +4A99h
LOAD:0000000000000C18                 Elf64_Rela <206C30h, 8, 4A9Fh> ; R_X86_64_RELATIVE +4A9Fh
LOAD:0000000000000C30                 Elf64_Rela <206C38h, 8, 4AACh> ; R_X86_64_RELATIVE +4AACh
LOAD:0000000000000C48                 Elf64_Rela <206C40h, 8, 4AB9h> ; R_X86_64_RELATIVE +4AB9h
LOAD:0000000000000C60                 Elf64_Rela <206C48h, 8, 4ACDh> ; R_X86_64_RELATIVE +4ACDh
LOAD:0000000000000C78                 Elf64_Rela <206C50h, 8, 4ACFh> ; R_X86_64_RELATIVE +4ACFh
LOAD:0000000000000C90                 Elf64_Rela <206C58h, 8, 4AB2h> ; R_X86_64_RELATIVE +4AB2h
LOAD:0000000000000CA8                 Elf64_Rela <206C60h, 8, 4836h> ; R_X86_64_RELATIVE +4836h
LOAD:0000000000000CC0                 Elf64_Rela <206C68h, 8, 4AD7h> ; R_X86_64_RELATIVE +4AD7h
LOAD:0000000000000CD8                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000CF0                 Elf64_Rela <207010h, 8, 4A11h> ; R_X86_64_RELATIVE +4A11h
LOAD:0000000000000D08                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D20                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000D38                 Elf64_Rela <206FD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D50                 Elf64_Rela <206FD8h, 1700000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D68                 Elf64_Rela <206FE0h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D80                 Elf64_Rela <206FE8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000D98                 Elf64_Rela <206FF0h, 2E00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000DB0                 Elf64_Rela <207080h, 3100000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000DC8                 Elf64_Rela <207088h, 3000000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000DE0                 Elf64_Rela <207090h, 3700000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000DF8                 Elf64_Rela <207098h, 3300000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E10                 Elf64_Rela <2070A0h, 3500000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000E28                 Elf64_Rela <2070C0h, 3600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E40 ; ELF JMPREL Relocation Table
LOAD:0000000000000E40                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E58                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E70                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000E88                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000EA0                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000EB8                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000ED0                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000000EE8                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F00                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F18                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT getpwuid
LOAD:0000000000000F30                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F48                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F60                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F78                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F90                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000FA8                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000FC0                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000FD8                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000FF0                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001008                 Elf64_Rela <206F18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001020                 Elf64_Rela <206F20h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT geteuid
LOAD:0000000000001038                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001050                 Elf64_Rela <206F30h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001068                 Elf64_Rela <206F38h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001080                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001098                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000010B0                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000010C8                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000010E0                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000010F8                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001110                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001128                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001140                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001158                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001170                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001188                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000011A0                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000011B8                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000011D0                 Elf64_Rela <206FB0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000011E8                 Elf64_Rela <206FB8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001200                 Elf64_Rela <206FC0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001218                 Elf64_Rela <206FC8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001218 LOAD            ends
LOAD:0000000000001218
.init:0000000000001230 ; ===========================================================================
.init:0000000000001230
.init:0000000000001230 ; Segment type: Pure code
.init:0000000000001230 ; Segment permissions: Read/Execute
.init:0000000000001230 _init           segment dword public 'CODE' use64
.init:0000000000001230                 assume cs:_init
.init:0000000000001230                 ;org 1230h
.init:0000000000001230                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001230
.init:0000000000001230 ; =============== S U B R O U T I N E =======================================
.init:0000000000001230
.init:0000000000001230
.init:0000000000001230                 public _init_proc
.init:0000000000001230 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001230                 sub     rsp, 8          ; _init
.init:0000000000001234                 mov     rax, cs:__gmon_start___ptr
.init:000000000000123B                 test    rax, rax
.init:000000000000123E                 jz      short loc_1242
.init:0000000000001240                 call    rax ; __gmon_start__
.init:0000000000001242
.init:0000000000001242 loc_1242:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001242                 add     rsp, 8
.init:0000000000001246                 retn
.init:0000000000001246 _init_proc      endp
.init:0000000000001246
.init:0000000000001246 _init           ends
.init:0000000000001246
LOAD:0000000000001247 ; ===========================================================================
LOAD:0000000000001247
LOAD:0000000000001247 ; Segment type: Pure code
LOAD:0000000000001247 ; Segment permissions: Read/Execute
LOAD:0000000000001247 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001247                 assume cs:LOAD
LOAD:0000000000001247                 ;org 1247h
LOAD:0000000000001247                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001247                 align 10h
LOAD:0000000000001247 LOAD            ends
LOAD:0000000000001247
.plt:0000000000001250 ; ===========================================================================
.plt:0000000000001250
.plt:0000000000001250 ; Segment type: Pure code
.plt:0000000000001250 ; Segment permissions: Read/Execute
.plt:0000000000001250 _plt            segment para public 'CODE' use64
.plt:0000000000001250                 assume cs:_plt
.plt:0000000000001250                 ;org 1250h
.plt:0000000000001250                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250
.plt:0000000000001250 sub_1250        proc near               ; CODE XREF: .plt:000000000000126B↓j
.plt:0000000000001250                                         ; .plt:000000000000127B↓j ...
.plt:0000000000001250 ; __unwind {
.plt:0000000000001250                 push    cs:qword_206E70
.plt:0000000000001256                 jmp     cs:qword_206E78
.plt:0000000000001256 sub_1250        endp
.plt:0000000000001256
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:000000000000125C                 align 20h
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: thunk
.plt:0000000000001260
.plt:0000000000001260 ; void free(void *ptr)
.plt:0000000000001260 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001260                                         ; quotearg_free+37↓p ...
.plt:0000000000001260                 jmp     cs:free_ptr
.plt:0000000000001260 _free           endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    0
.plt:000000000000126B                 jmp     sub_1250
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: noreturn thunk
.plt:0000000000001270
.plt:0000000000001270 ; void __noreturn abort(void)
.plt:0000000000001270 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001270                                         ; quotearg_buffer_restyled:def_2021↓p ...
.plt:0000000000001270                 jmp     cs:abort_ptr
.plt:0000000000001270 _abort          endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    1
.plt:000000000000127B                 jmp     sub_1250
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: thunk
.plt:0000000000001280
.plt:0000000000001280 ; int *__errno_location(void)
.plt:0000000000001280 ___errno_location proc near             ; CODE XREF: main+9B↓p
.plt:0000000000001280                                         ; close_stdout+16↓p ...
.plt:0000000000001280                 jmp     cs:__errno_location_ptr
.plt:0000000000001280 ___errno_location endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    2
.plt:000000000000128B                 jmp     sub_1250
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001290 _strncmp        proc near               ; CODE XREF: usage+204↓p
.plt:0000000000001290                                         ; usage+2C5↓p
.plt:0000000000001290                 jmp     cs:strncmp_ptr
.plt:0000000000001290 _strncmp        endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    3
.plt:000000000000129B                 jmp     sub_1250
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: noreturn thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; void __noreturn _exit(int status)
.plt:00000000000012A0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000012A0                 jmp     cs:_exit_ptr
.plt:00000000000012A0 __exit          endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    4
.plt:00000000000012AB                 jmp     sub_1250
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; size_t __fpending(FILE *fp)
.plt:00000000000012B0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000012B0                 jmp     cs:__fpending_ptr
.plt:00000000000012B0 ___fpending     endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    5
.plt:00000000000012BB                 jmp     sub_1250
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; int puts(const char *s)
.plt:00000000000012C0 _puts           proc near               ; CODE XREF: main+CA↓p
.plt:00000000000012C0                 jmp     cs:puts_ptr
.plt:00000000000012C0 _puts           endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    6
.plt:00000000000012CB                 jmp     sub_1250
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; char *textdomain(const char *domainname)
.plt:00000000000012D0 _textdomain     proc near               ; CODE XREF: main+3E↓p
.plt:00000000000012D0                 jmp     cs:textdomain_ptr
.plt:00000000000012D0 _textdomain     endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    7
.plt:00000000000012DB                 jmp     sub_1250
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; int fclose(FILE *stream)
.plt:00000000000012E0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000012E0                                         ; rpl_fclose+6B↓j
.plt:00000000000012E0                 jmp     cs:fclose_ptr
.plt:00000000000012E0 _fclose         endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    8
.plt:00000000000012EB                 jmp     sub_1250
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; struct passwd *getpwuid(__uid_t uid)
.plt:00000000000012F0 _getpwuid       proc near               ; CODE XREF: main+BD↓p
.plt:00000000000012F0                 jmp     cs:getpwuid_ptr
.plt:00000000000012F0 _getpwuid       endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    9
.plt:00000000000012FB                 jmp     sub_1250
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001300 _bindtextdomain proc near               ; CODE XREF: main+32↓p
.plt:0000000000001300                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001300 _bindtextdomain endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    0Ah
.plt:000000000000130B                 jmp     sub_1250
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001310 _dcgettext      proc near               ; CODE XREF: main+E6↓p
.plt:0000000000001310                                         ; main+119↓p ...
.plt:0000000000001310                 jmp     cs:dcgettext_ptr
.plt:0000000000001310 _dcgettext      endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    0Bh
.plt:000000000000131B                 jmp     sub_1250
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001320 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001320                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001320 ___ctype_get_mb_cur_max endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    0Ch
.plt:000000000000132B                 jmp     sub_1250
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; size_t strlen(const char *s)
.plt:0000000000001330 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001330                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001330                 jmp     cs:strlen_ptr
.plt:0000000000001330 _strlen         endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    0Dh
.plt:000000000000133B                 jmp     sub_1250
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: noreturn thunk
.plt:0000000000001340
.plt:0000000000001340 ___stack_chk_fail proc near             ; CODE XREF: parse_long_options:loc_1CBA↓p
.plt:0000000000001340                                         ; parse_gnu_standard_options_only:loc_1DF6↓p ...
.plt:0000000000001340                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001340 ___stack_chk_fail endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    0Eh
.plt:000000000000134B                 jmp     sub_1250
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001350 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:0000000000001350                                         ; parse_gnu_standard_options_only+9A↓p
.plt:0000000000001350                 jmp     cs:getopt_long_ptr
.plt:0000000000001350 _getopt_long    endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    0Fh
.plt:000000000000135B                 jmp     sub_1250
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001360 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001360                 jmp     cs:mbrtowc_ptr
.plt:0000000000001360 _mbrtowc        endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    10h
.plt:000000000000136B                 jmp     sub_1250
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; char *strrchr(const char *s, int c)
.plt:0000000000001370 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001370                 jmp     cs:strrchr_ptr
.plt:0000000000001370 _strrchr        endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    11h
.plt:000000000000137B                 jmp     sub_1250
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001380 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001380                                         ; rpl_fseeko+3B↓p
.plt:0000000000001380                 jmp     cs:lseek_ptr
.plt:0000000000001380 _lseek          endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    12h
.plt:000000000000138B                 jmp     sub_1250
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001390 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001390                                         ; xzalloc+12↓j
.plt:0000000000001390                 jmp     cs:memset_ptr
.plt:0000000000001390 _memset         endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    13h
.plt:000000000000139B                 jmp     sub_1250
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; __uid_t geteuid(void)
.plt:00000000000013A0 _geteuid        proc near               ; CODE XREF: main+A9↓p
.plt:00000000000013A0                 jmp     cs:geteuid_ptr
.plt:00000000000013A0 _geteuid        endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    14h
.plt:00000000000013AB                 jmp     sub_1250
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000013B0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000013B0                 jmp     cs:memcmp_ptr
.plt:00000000000013B0 _memcmp         endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    15h
.plt:00000000000013BB                 jmp     sub_1250
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000013C0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000013C0                                         ; usage+C2↓p ...
.plt:00000000000013C0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000013C0 _fputs_unlocked endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    16h
.plt:00000000000013CB                 jmp     sub_1250
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000013D0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000013D0                 jmp     cs:calloc_ptr
.plt:00000000000013D0 _calloc         endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    17h
.plt:00000000000013DB                 jmp     sub_1250
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000013E0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000013E0                 jmp     cs:memcpy_ptr
.plt:00000000000013E0 _memcpy         endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    18h
.plt:00000000000013EB                 jmp     sub_1250
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int fileno(FILE *stream)
.plt:00000000000013F0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000013F0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000013F0                 jmp     cs:fileno_ptr
.plt:00000000000013F0 _fileno         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    19h
.plt:00000000000013FB                 jmp     sub_1250
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; void *malloc(size_t size)
.plt:0000000000001400 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001400                 jmp     cs:malloc_ptr
.plt:0000000000001400 _malloc         endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    1Ah
.plt:000000000000140B                 jmp     sub_1250
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int fflush(FILE *stream)
.plt:0000000000001410 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001410                                         ; rpl_fflush+3B↓j
.plt:0000000000001410                 jmp     cs:fflush_ptr
.plt:0000000000001410 _fflush         endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    1Bh
.plt:000000000000141B                 jmp     sub_1250
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; char *nl_langinfo(nl_item item)
.plt:0000000000001420 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001420                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001420 _nl_langinfo    endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    1Ch
.plt:000000000000142B                 jmp     sub_1250
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int __freading(FILE *fp)
.plt:0000000000001430 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001430                                         ; rpl_fflush+9↓p
.plt:0000000000001430                 jmp     cs:__freading_ptr
.plt:0000000000001430 ___freading     endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    1Dh
.plt:000000000000143B                 jmp     sub_1250
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001440 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001440                 jmp     cs:realloc_ptr
.plt:0000000000001440 _realloc        endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    1Eh
.plt:000000000000144B                 jmp     sub_1250
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; char *setlocale(int category, const char *locale)
.plt:0000000000001450 _setlocale      proc near               ; CODE XREF: main+1F↓p
.plt:0000000000001450                                         ; usage+1EB↓p ...
.plt:0000000000001450                 jmp     cs:setlocale_ptr
.plt:0000000000001450 _setlocale      endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    1Fh
.plt:000000000000145B                 jmp     sub_1250
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001460                                         ; usage+1DF↓p ...
.plt:0000000000001460                 jmp     cs:__printf_chk_ptr
.plt:0000000000001460 ___printf_chk   endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    20h ; ' '
.plt:000000000000146B                 jmp     sub_1250
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001470 _error          proc near               ; CODE XREF: main+FA↓p
.plt:0000000000001470                                         ; main+12A↓p ...
.plt:0000000000001470                 jmp     cs:error_ptr
.plt:0000000000001470 _error          endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    21h ; '!'
.plt:000000000000147B                 jmp     sub_1250
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001480 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_465A↓j
.plt:0000000000001480                 jmp     cs:fseeko_ptr
.plt:0000000000001480 _fseeko         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    22h ; '"'
.plt:000000000000148B                 jmp     sub_1250
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001490 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001490                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001490 ___cxa_atexit   endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    23h ; '#'
.plt:000000000000149B                 jmp     sub_1250
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: noreturn thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; void __noreturn exit(int status)
.plt:00000000000014A0 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:00000000000014A0                                         ; parse_long_options+122↓p ...
.plt:00000000000014A0                 jmp     cs:exit_ptr
.plt:00000000000014A0 _exit           endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    24h ; '$'
.plt:00000000000014AB                 jmp     sub_1250
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000014B0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000014B0                 jmp     cs:fwrite_ptr
.plt:00000000000014B0 _fwrite         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    25h ; '%'
.plt:00000000000014BB                 jmp     sub_1250
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000014C0                                         ; version_etc_arn+37↓p ...
.plt:00000000000014C0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000014C0 ___fprintf_chk  endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    26h ; '&'
.plt:00000000000014CB                 jmp     sub_1250
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000014D0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000014D0                 jmp     cs:mbsinit_ptr
.plt:00000000000014D0 _mbsinit        endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    27h ; '''
.plt:00000000000014DB                 jmp     sub_1250
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int iswprint(wint_t wc)
.plt:00000000000014E0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000014E0                 jmp     cs:iswprint_ptr
.plt:00000000000014E0 _iswprint       endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    28h ; '('
.plt:00000000000014EB                 jmp     sub_1250
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000014F0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000014F0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000014F0 ___ctype_b_loc  endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    29h ; ')'
.plt:00000000000014FB                 jmp     sub_1250
.plt:00000000000014FB ; } // starts at 1250
.plt:00000000000014FB _plt            ends
.plt:00000000000014FB
.plt.got:0000000000001500 ; ===========================================================================
.plt.got:0000000000001500
.plt.got:0000000000001500 ; Segment type: Pure code
.plt.got:0000000000001500 ; Segment permissions: Read/Execute
.plt.got:0000000000001500 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001500                 assume cs:_plt_got
.plt.got:0000000000001500                 ;org 1500h
.plt.got:0000000000001500                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001500
.plt.got:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001500
.plt.got:0000000000001500 ; Attributes: thunk
.plt.got:0000000000001500
.plt.got:0000000000001500 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001500 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001500 ; __unwind {
.plt.got:0000000000001500                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001500 __cxa_finalize  endp
.plt.got:0000000000001500
.plt.got:0000000000001500 ; ---------------------------------------------------------------------------
.plt.got:0000000000001506                 align 8
.plt.got:0000000000001506 ; } // starts at 1500
.plt.got:0000000000001506 _plt_got        ends
.plt.got:0000000000001506
LOAD:0000000000001508 ; ===========================================================================
LOAD:0000000000001508
LOAD:0000000000001508 ; Segment type: Pure code
LOAD:0000000000001508 ; Segment permissions: Read/Execute
LOAD:0000000000001508 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001508                 assume cs:LOAD
LOAD:0000000000001508                 ;org 1508h
LOAD:0000000000001508                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001508                 align 10h
LOAD:0000000000001508 LOAD            ends
LOAD:0000000000001508
.text:0000000000001510 ; ===========================================================================
.text:0000000000001510
.text:0000000000001510 ; Segment type: Pure code
.text:0000000000001510 ; Segment permissions: Read/Execute
.text:0000000000001510 _text           segment para public 'CODE' use64
.text:0000000000001510                 assume cs:_text
.text:0000000000001510                 ;org 1510h
.text:0000000000001510                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001510
.text:0000000000001510 ; =============== S U B R O U T I N E =======================================
.text:0000000000001510
.text:0000000000001510
.text:0000000000001510 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001510                 public main
.text:0000000000001510 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001510 ; __unwind {
.text:0000000000001510                 push    rbp
.text:0000000000001511                 push    rbx
.text:0000000000001512                 mov     ebp, edi
.text:0000000000001514                 mov     rbx, rsi
.text:0000000000001517                 sub     rsp, 8
.text:000000000000151B                 mov     rdi, [rsi]
.text:000000000000151E                 call    set_program_name
.text:0000000000001523                 lea     rsi, aUsageSOption+16h ; locale
.text:000000000000152A                 mov     edi, 6          ; category
.text:000000000000152F                 call    _setlocale
.text:0000000000001534                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000153B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001542                 call    _bindtextdomain
.text:0000000000001547                 lea     rdi, domainname ; "coreutils"
.text:000000000000154E                 call    _textdomain
.text:0000000000001553                 lea     rdi, close_stdout
.text:000000000000155A                 call    atexit
.text:000000000000155F                 lea     rax, aRichardMlynari ; "Richard Mlynarik"
.text:0000000000001566                 sub     rsp, 8
.text:000000000000156A                 mov     r8, cs:Version
.text:0000000000001571                 push    0
.text:0000000000001573                 lea     rcx, unk_47F8
.text:000000000000157A                 lea     rdx, aWhoami    ; "whoami"
.text:0000000000001581                 push    rax
.text:0000000000001582                 lea     rax, usage
.text:0000000000001589                 mov     r9d, 1
.text:000000000000158F                 mov     rsi, rbx
.text:0000000000001592                 mov     edi, ebp
.text:0000000000001594                 push    rax
.text:0000000000001595                 xor     eax, eax
.text:0000000000001597                 call    parse_gnu_standard_options_only
.text:000000000000159C                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000015A3                 add     rsp, 20h
.text:00000000000015A7                 cmp     eax, ebp
.text:00000000000015A9                 jnz     short loc_160F
.text:00000000000015AB                 call    ___errno_location
.text:00000000000015B0                 mov     dword ptr [rax], 0
.text:00000000000015B6                 mov     rbp, rax
.text:00000000000015B9                 call    _geteuid
.text:00000000000015BE                 cmp     eax, 0FFFFFFFFh
.text:00000000000015C1                 mov     ebx, eax
.text:00000000000015C3                 jnz     short loc_15CB
.text:00000000000015C5                 cmp     dword ptr [rbp+0], 0
.text:00000000000015C9                 jnz     short loc_15E8
.text:00000000000015CB
.text:00000000000015CB loc_15CB:                               ; CODE XREF: main+B3↑j
.text:00000000000015CB                 mov     edi, ebx        ; uid
.text:00000000000015CD                 call    _getpwuid
.text:00000000000015D2                 test    rax, rax
.text:00000000000015D5                 jz      short loc_15E8
.text:00000000000015D7                 mov     rdi, [rax]      ; s
.text:00000000000015DA                 call    _puts
.text:00000000000015DF                 add     rsp, 8
.text:00000000000015E3                 xor     eax, eax
.text:00000000000015E5                 pop     rbx
.text:00000000000015E6                 pop     rbp
.text:00000000000015E7                 retn
.text:00000000000015E8 ; ---------------------------------------------------------------------------
.text:00000000000015E8
.text:00000000000015E8 loc_15E8:                               ; CODE XREF: main+B9↑j
.text:00000000000015E8                                         ; main+C5↑j
.text:00000000000015E8                 lea     rsi, msgid      ; "cannot find name for user ID %lu"
.text:00000000000015EF                 mov     edx, 5          ; category
.text:00000000000015F4                 xor     edi, edi        ; domainname
.text:00000000000015F6                 call    _dcgettext
.text:00000000000015FB                 mov     esi, [rbp+0]    ; errnum
.text:00000000000015FE                 mov     rdx, rax        ; format
.text:0000000000001601                 mov     ecx, ebx
.text:0000000000001603                 mov     edi, 1          ; status
.text:0000000000001608                 xor     eax, eax
.text:000000000000160A                 call    _error
.text:000000000000160F
.text:000000000000160F loc_160F:                               ; CODE XREF: main+99↑j
.text:000000000000160F                 mov     rdi, [rbx+rax*8]
.text:0000000000001613                 call    quote
.text:0000000000001618                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:000000000000161F                 mov     rbx, rax
.text:0000000000001622                 mov     edx, 5          ; category
.text:0000000000001627                 xor     edi, edi        ; domainname
.text:0000000000001629                 call    _dcgettext
.text:000000000000162E                 xor     edi, edi        ; status
.text:0000000000001630                 mov     rdx, rax        ; format
.text:0000000000001633                 mov     rcx, rbx
.text:0000000000001636                 xor     esi, esi        ; errnum
.text:0000000000001638                 xor     eax, eax
.text:000000000000163A                 call    _error
.text:000000000000163F                 mov     edi, 1          ; status
.text:0000000000001644                 call    usage
.text:0000000000001644 ; } // starts at 1510
.text:0000000000001644 main            endp
.text:0000000000001644
.text:0000000000001644 ; ---------------------------------------------------------------------------
.text:0000000000001649                 align 10h
.text:0000000000001650
.text:0000000000001650 ; =============== S U B R O U T I N E =======================================
.text:0000000000001650
.text:0000000000001650 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001650
.text:0000000000001650 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001650                 public start
.text:0000000000001650 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001650 ; __unwind {
.text:0000000000001650                 xor     ebp, ebp
.text:0000000000001652                 mov     r9, rdx         ; rtld_fini
.text:0000000000001655                 pop     rsi             ; argc
.text:0000000000001656                 mov     rdx, rsp        ; ubp_av
.text:0000000000001659                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000165D                 push    rax
.text:000000000000165E                 push    rsp             ; stack_end
.text:000000000000165F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001666                 lea     rcx, __libc_csu_init ; init
.text:000000000000166D                 lea     rdi, main       ; main
.text:0000000000001674                 call    cs:__libc_start_main_ptr
.text:000000000000167A                 hlt
.text:000000000000167A ; } // starts at 1650
.text:000000000000167A start           endp
.text:000000000000167A
.text:000000000000167A ; ---------------------------------------------------------------------------
.text:000000000000167B                 align 20h
.text:0000000000001680
.text:0000000000001680 ; =============== S U B R O U T I N E =======================================
.text:0000000000001680
.text:0000000000001680 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001680
.text:0000000000001680 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1733↓p
.text:0000000000001680                 lea     rdi, __bss_start
.text:0000000000001687                 push    rbp
.text:0000000000001688                 lea     rax, __bss_start
.text:000000000000168F                 cmp     rax, rdi
.text:0000000000001692                 mov     rbp, rsp
.text:0000000000001695                 jz      short loc_16B0
.text:0000000000001697                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000169E                 test    rax, rax
.text:00000000000016A1                 jz      short loc_16B0
.text:00000000000016A3                 pop     rbp
.text:00000000000016A4                 jmp     rax
.text:00000000000016A4 ; ---------------------------------------------------------------------------
.text:00000000000016A6                 align 10h
.text:00000000000016B0
.text:00000000000016B0 loc_16B0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000016B0                                         ; deregister_tm_clones+21↑j
.text:00000000000016B0                 pop     rbp
.text:00000000000016B1                 retn
.text:00000000000016B1 deregister_tm_clones endp
.text:00000000000016B1
.text:00000000000016B1 ; ---------------------------------------------------------------------------
.text:00000000000016B2                 align 20h
.text:00000000000016C0
.text:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016C0
.text:00000000000016C0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000016C0
.text:00000000000016C0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000016C0                 lea     rdi, __bss_start
.text:00000000000016C7                 lea     rsi, __bss_start
.text:00000000000016CE                 push    rbp
.text:00000000000016CF                 sub     rsi, rdi
.text:00000000000016D2                 mov     rbp, rsp
.text:00000000000016D5                 sar     rsi, 3
.text:00000000000016D9                 mov     rax, rsi
.text:00000000000016DC                 shr     rax, 3Fh
.text:00000000000016E0                 add     rsi, rax
.text:00000000000016E3                 sar     rsi, 1
.text:00000000000016E6                 jz      short loc_1700
.text:00000000000016E8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000016EF                 test    rax, rax
.text:00000000000016F2                 jz      short loc_1700
.text:00000000000016F4                 pop     rbp
.text:00000000000016F5                 jmp     rax
.text:00000000000016F5 ; ---------------------------------------------------------------------------
.text:00000000000016F7                 align 20h
.text:0000000000001700
.text:0000000000001700 loc_1700:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001700                                         ; register_tm_clones+32↑j
.text:0000000000001700                 pop     rbp
.text:0000000000001701                 retn
.text:0000000000001701 register_tm_clones endp
.text:0000000000001701
.text:0000000000001701 ; ---------------------------------------------------------------------------
.text:0000000000001702                 align 10h
.text:0000000000001710
.text:0000000000001710 ; =============== S U B R O U T I N E =======================================
.text:0000000000001710
.text:0000000000001710 ; Attributes: info_from_lumina
.text:0000000000001710
.text:0000000000001710 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001710                 cmp     cs:completed_7697, 0
.text:0000000000001717                 jnz     short locret_1748
.text:0000000000001719                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001721                 push    rbp
.text:0000000000001722                 mov     rbp, rsp
.text:0000000000001725                 jz      short loc_1733
.text:0000000000001727                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000172E                 call    __cxa_finalize
.text:0000000000001733
.text:0000000000001733 loc_1733:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001733                 call    deregister_tm_clones
.text:0000000000001738                 mov     cs:completed_7697, 1
.text:000000000000173F                 pop     rbp
.text:0000000000001740                 retn
.text:0000000000001740 ; ---------------------------------------------------------------------------
.text:0000000000001741                 align 8
.text:0000000000001748
.text:0000000000001748 locret_1748:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001748                 rep retn
.text:0000000000001748 __do_global_dtors_aux endp
.text:0000000000001748
.text:0000000000001748 ; ---------------------------------------------------------------------------
.text:000000000000174A                 align 10h
.text:0000000000001750
.text:0000000000001750 ; =============== S U B R O U T I N E =======================================
.text:0000000000001750
.text:0000000000001750 ; Attributes: bp-based frame
.text:0000000000001750
.text:0000000000001750 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001750                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001750                 push    rbp
.text:0000000000001751                 mov     rbp, rsp
.text:0000000000001754                 pop     rbp
.text:0000000000001755                 jmp     register_tm_clones
.text:0000000000001755 frame_dummy     endp
.text:0000000000001755
.text:0000000000001755 ; ---------------------------------------------------------------------------
.text:000000000000175A                 align 20h
.text:0000000000001760
.text:0000000000001760 ; =============== S U B R O U T I N E =======================================
.text:0000000000001760
.text:0000000000001760 ; Attributes: noreturn
.text:0000000000001760
.text:0000000000001760 ; void __fastcall __noreturn usage(int status)
.text:0000000000001760                 public usage
.text:0000000000001760 usage           proc near               ; CODE XREF: main+134↑p
.text:0000000000001760                                         ; DATA XREF: main+72↑o
.text:0000000000001760
.text:0000000000001760 var_A8          = qword ptr -0A8h
.text:0000000000001760 var_A0          = qword ptr -0A0h
.text:0000000000001760 var_98          = qword ptr -98h
.text:0000000000001760 var_90          = qword ptr -90h
.text:0000000000001760 var_88          = qword ptr -88h
.text:0000000000001760 var_80          = qword ptr -80h
.text:0000000000001760 var_78          = qword ptr -78h
.text:0000000000001760 var_70          = qword ptr -70h
.text:0000000000001760 var_68          = qword ptr -68h
.text:0000000000001760 var_60          = qword ptr -60h
.text:0000000000001760 var_58          = qword ptr -58h
.text:0000000000001760 var_50          = qword ptr -50h
.text:0000000000001760 var_48          = qword ptr -48h
.text:0000000000001760 var_40          = qword ptr -40h
.text:0000000000001760 var_30          = qword ptr -30h
.text:0000000000001760
.text:0000000000001760 ; __unwind {
.text:0000000000001760                 push    r13
.text:0000000000001762                 push    r12
.text:0000000000001764                 mov     edx, 5          ; category
.text:0000000000001769                 push    rbp
.text:000000000000176A                 push    rbx
.text:000000000000176B                 mov     ebp, edi
.text:000000000000176D                 sub     rsp, 88h
.text:0000000000001774                 mov     rbx, cs:program_name
.text:000000000000177B                 mov     rax, fs:28h
.text:0000000000001784                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001789                 xor     eax, eax
.text:000000000000178B                 test    edi, edi
.text:000000000000178D                 jz      short loc_17BD
.text:000000000000178F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001796                 xor     edi, edi        ; domainname
.text:0000000000001798                 call    _dcgettext
.text:000000000000179D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000017A4                 mov     rdx, rax
.text:00000000000017A7                 mov     rcx, rbx
.text:00000000000017AA                 mov     esi, 1
.text:00000000000017AF                 xor     eax, eax
.text:00000000000017B1                 call    ___fprintf_chk
.text:00000000000017B6
.text:00000000000017B6 loc_17B6:                               ; CODE XREF: usage+27E↓j
.text:00000000000017B6                 mov     edi, ebp        ; status
.text:00000000000017B8                 call    _exit
.text:00000000000017BD ; ---------------------------------------------------------------------------
.text:00000000000017BD
.text:00000000000017BD loc_17BD:                               ; CODE XREF: usage+2D↑j
.text:00000000000017BD                 lea     rsi, aUsageSOption ; "Usage: %s [OPTION]...\n"
.text:00000000000017C4                 xor     edi, edi        ; domainname
.text:00000000000017C6                 call    _dcgettext
.text:00000000000017CB                 mov     rdx, rbx
.text:00000000000017CE                 mov     rsi, rax
.text:00000000000017D1                 mov     edi, 1
.text:00000000000017D6                 xor     eax, eax
.text:00000000000017D8                 call    ___printf_chk
.text:00000000000017DD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000017E4                 lea     rsi, aPrintTheUserNa ; "Print the user name associated with the"...
.text:00000000000017EB                 mov     edx, 5          ; category
.text:00000000000017F0                 xor     edi, edi        ; domainname
.text:00000000000017F2                 call    _dcgettext
.text:00000000000017F7                 mov     rsi, rbx        ; stream
.text:00000000000017FA                 mov     rdi, rax        ; s
.text:00000000000017FD                 call    _fputs_unlocked
.text:0000000000001802                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001809                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001810                 mov     edx, 5          ; category
.text:0000000000001815                 xor     edi, edi        ; domainname
.text:0000000000001817                 call    _dcgettext
.text:000000000000181C                 mov     rsi, rbx        ; stream
.text:000000000000181F                 mov     rdi, rax        ; s
.text:0000000000001822                 call    _fputs_unlocked
.text:0000000000001827                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000182E                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001835                 mov     edx, 5          ; category
.text:000000000000183A                 xor     edi, edi        ; domainname
.text:000000000000183C                 call    _dcgettext
.text:0000000000001841                 mov     rsi, rbx        ; stream
.text:0000000000001844                 mov     rdi, rax        ; s
.text:0000000000001847                 lea     rbx, aWhoami    ; "whoami"
.text:000000000000184E                 call    _fputs_unlocked
.text:0000000000001853                 lea     rax, asc_4782   ; "["
.text:000000000000185A                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001861                 mov     [rsp+0A8h+var_48], 0
.text:000000000000186A                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001873                 mov     rdx, rsp
.text:0000000000001876                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000187A                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001881                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001886                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000188D                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001892                 lea     rax, domainname ; "coreutils"
.text:0000000000001899                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000189E                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000018A5                 mov     [rsp+0A8h+var_98], rax
.text:00000000000018AA                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000018B1                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000018B6                 mov     [rsp+0A8h+var_90], rax
.text:00000000000018BB                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000018C2                 mov     [rsp+0A8h+var_88], rax
.text:00000000000018C7                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000018CE                 mov     [rsp+0A8h+var_80], rax
.text:00000000000018D3                 mov     [rsp+0A8h+var_70], rax
.text:00000000000018D8                 mov     [rsp+0A8h+var_60], rax
.text:00000000000018DD                 mov     [rsp+0A8h+var_50], rax
.text:00000000000018E2                 nop     word ptr [rax+rax+00h]
.text:00000000000018E8
.text:00000000000018E8 loc_18E8:                               ; CODE XREF: usage+1A5↓j
.text:00000000000018E8                 add     rdx, 10h
.text:00000000000018EC                 mov     rdi, [rdx]
.text:00000000000018EF                 test    rdi, rdi
.text:00000000000018F2                 jz      short loc_1907
.text:00000000000018F4                 mov     ecx, 7
.text:00000000000018F9                 mov     rsi, rbx
.text:00000000000018FC                 repe cmpsb
.text:00000000000018FE                 setnbe  al
.text:0000000000001901                 sbb     al, 0
.text:0000000000001903                 test    al, al
.text:0000000000001905                 jnz     short loc_18E8
.text:0000000000001907
.text:0000000000001907 loc_1907:                               ; CODE XREF: usage+192↑j
.text:0000000000001907                 mov     r12, [rdx+8]
.text:000000000000190B                 xor     edi, edi        ; domainname
.text:000000000000190D                 mov     edx, 5          ; category
.text:0000000000001912                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001919                 test    r12, r12
.text:000000000000191C                 jz      loc_19E3
.text:0000000000001922                 call    _dcgettext
.text:0000000000001927                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000192E                 lea     rdx, unk_47F8
.text:0000000000001935                 mov     rsi, rax
.text:0000000000001938                 mov     edi, 1
.text:000000000000193D                 xor     eax, eax
.text:000000000000193F                 call    ___printf_chk
.text:0000000000001944                 xor     esi, esi        ; locale
.text:0000000000001946                 mov     edi, 5          ; category
.text:000000000000194B                 call    _setlocale
.text:0000000000001950                 test    rax, rax
.text:0000000000001953                 jz      short loc_1971
.text:0000000000001955                 lea     rsi, s2         ; "en_"
.text:000000000000195C                 mov     edx, 3          ; n
.text:0000000000001961                 mov     rdi, rax        ; s1
.text:0000000000001964                 call    _strncmp
.text:0000000000001969                 test    eax, eax
.text:000000000000196B                 jnz     loc_1A78
.text:0000000000001971
.text:0000000000001971 loc_1971:                               ; CODE XREF: usage+1F3↑j
.text:0000000000001971                                         ; usage+33D↓j
.text:0000000000001971                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001978                 xor     edi, edi        ; domainname
.text:000000000000197A                 mov     edx, 5          ; category
.text:000000000000197F                 call    _dcgettext
.text:0000000000001984                 lea     rcx, aWhoami    ; "whoami"
.text:000000000000198B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001992                 mov     rsi, rax
.text:0000000000001995                 mov     edi, 1
.text:000000000000199A                 xor     eax, eax
.text:000000000000199C                 call    ___printf_chk
.text:00000000000019A1                 cmp     r12, rbx
.text:00000000000019A4                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000019AB                 lea     rbx, aUsageSOption+16h ; ""
.text:00000000000019B2                 cmovz   rbx, rcx
.text:00000000000019B6
.text:00000000000019B6 loc_19B6:                               ; CODE XREF: usage+30C↓j
.text:00000000000019B6                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000019BD                 xor     edi, edi        ; domainname
.text:00000000000019BF                 mov     edx, 5          ; category
.text:00000000000019C4                 call    _dcgettext
.text:00000000000019C9                 mov     rcx, rbx
.text:00000000000019CC                 mov     rsi, rax
.text:00000000000019CF                 mov     rdx, r12
.text:00000000000019D2                 mov     edi, 1
.text:00000000000019D7                 xor     eax, eax
.text:00000000000019D9                 call    ___printf_chk
.text:00000000000019DE                 jmp     loc_17B6
.text:00000000000019E3 ; ---------------------------------------------------------------------------
.text:00000000000019E3
.text:00000000000019E3 loc_19E3:                               ; CODE XREF: usage+1BC↑j
.text:00000000000019E3                 call    _dcgettext
.text:00000000000019E8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000019EF                 lea     rdx, unk_47F8
.text:00000000000019F6                 mov     rsi, rax
.text:00000000000019F9                 mov     edi, 1
.text:00000000000019FE                 xor     eax, eax
.text:0000000000001A00                 call    ___printf_chk
.text:0000000000001A05                 xor     esi, esi        ; locale
.text:0000000000001A07                 mov     edi, 5          ; category
.text:0000000000001A0C                 call    _setlocale
.text:0000000000001A11                 test    rax, rax
.text:0000000000001A14                 jz      short loc_1A2E
.text:0000000000001A16                 lea     rsi, s2         ; "en_"
.text:0000000000001A1D                 mov     edx, 3          ; n
.text:0000000000001A22                 mov     rdi, rax        ; s1
.text:0000000000001A25                 call    _strncmp
.text:0000000000001A2A                 test    eax, eax
.text:0000000000001A2C                 jnz     short loc_1A71
.text:0000000000001A2E
.text:0000000000001A2E loc_1A2E:                               ; CODE XREF: usage+2B4↑j
.text:0000000000001A2E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001A35                 mov     edx, 5          ; category
.text:0000000000001A3A                 xor     edi, edi        ; domainname
.text:0000000000001A3C                 lea     r12, aWhoami    ; "whoami"
.text:0000000000001A43                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001A4A                 call    _dcgettext
.text:0000000000001A4F                 lea     rcx, aWhoami    ; "whoami"
.text:0000000000001A56                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001A5D                 mov     rsi, rax
.text:0000000000001A60                 mov     edi, 1
.text:0000000000001A65                 xor     eax, eax
.text:0000000000001A67                 call    ___printf_chk
.text:0000000000001A6C                 jmp     loc_19B6
.text:0000000000001A71 ; ---------------------------------------------------------------------------
.text:0000000000001A71
.text:0000000000001A71 loc_1A71:                               ; CODE XREF: usage+2CC↑j
.text:0000000000001A71                 lea     r12, aWhoami    ; "whoami"
.text:0000000000001A78
.text:0000000000001A78 loc_1A78:                               ; CODE XREF: usage+20B↑j
.text:0000000000001A78                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A7F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001A86                 xor     edi, edi        ; domainname
.text:0000000000001A88                 mov     edx, 5          ; category
.text:0000000000001A8D                 call    _dcgettext
.text:0000000000001A92                 mov     rsi, r13        ; stream
.text:0000000000001A95                 mov     rdi, rax        ; s
.text:0000000000001A98                 call    _fputs_unlocked
.text:0000000000001A9D                 jmp     loc_1971
.text:0000000000001A9D ; } // starts at 1760
.text:0000000000001A9D usage           endp
.text:0000000000001A9D
.text:0000000000001A9D ; ---------------------------------------------------------------------------
.text:0000000000001AA2                 align 10h
.text:0000000000001AB0
.text:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AB0
.text:0000000000001AB0
.text:0000000000001AB0                 public close_stdout_set_file_name
.text:0000000000001AB0 close_stdout_set_file_name proc near
.text:0000000000001AB0 ; __unwind {
.text:0000000000001AB0                 mov     cs:file_name, rdi
.text:0000000000001AB7                 retn
.text:0000000000001AB7 ; } // starts at 1AB0
.text:0000000000001AB7 close_stdout_set_file_name endp
.text:0000000000001AB7
.text:0000000000001AB7 ; ---------------------------------------------------------------------------
.text:0000000000001AB8                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AC0
.text:0000000000001AC0
.text:0000000000001AC0                 public close_stdout_set_ignore_EPIPE
.text:0000000000001AC0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001AC0 ; __unwind {
.text:0000000000001AC0                 mov     cs:ignore_EPIPE, dil
.text:0000000000001AC7                 retn
.text:0000000000001AC7 ; } // starts at 1AC0
.text:0000000000001AC7 close_stdout_set_ignore_EPIPE endp
.text:0000000000001AC7
.text:0000000000001AC7 ; ---------------------------------------------------------------------------
.text:0000000000001AC8                 align 10h
.text:0000000000001AD0
.text:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AD0
.text:0000000000001AD0 ; Attributes: info_from_lumina
.text:0000000000001AD0
.text:0000000000001AD0 ; void __cdecl close_stdout()
.text:0000000000001AD0                 public close_stdout
.text:0000000000001AD0 close_stdout    proc near               ; DATA XREF: main+43↑o
.text:0000000000001AD0 ; __unwind {
.text:0000000000001AD0                 push    rbp
.text:0000000000001AD1                 push    rbx
.text:0000000000001AD2                 sub     rsp, 8
.text:0000000000001AD6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001ADD                 call    close_stream
.text:0000000000001AE2                 test    eax, eax
.text:0000000000001AE4                 jz      short loc_1AFC
.text:0000000000001AE6                 call    ___errno_location
.text:0000000000001AEB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001AF2                 mov     rbx, rax
.text:0000000000001AF5                 jz      short loc_1B13
.text:0000000000001AF7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001AFA                 jnz     short loc_1B13
.text:0000000000001AFC
.text:0000000000001AFC loc_1AFC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001AFC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001B03                 call    close_stream
.text:0000000000001B08                 test    eax, eax
.text:0000000000001B0A                 jnz     short loc_1B52
.text:0000000000001B0C                 add     rsp, 8
.text:0000000000001B10                 pop     rbx
.text:0000000000001B11                 pop     rbp
.text:0000000000001B12                 retn
.text:0000000000001B13 ; ---------------------------------------------------------------------------
.text:0000000000001B13
.text:0000000000001B13 loc_1B13:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001B13                                         ; close_stdout+2A↑j
.text:0000000000001B13                 lea     rsi, aWriteError ; "write error"
.text:0000000000001B1A                 xor     edi, edi        ; domainname
.text:0000000000001B1C                 mov     edx, 5          ; category
.text:0000000000001B21                 call    _dcgettext
.text:0000000000001B26                 mov     rdi, cs:file_name
.text:0000000000001B2D                 mov     rbp, rax
.text:0000000000001B30                 test    rdi, rdi
.text:0000000000001B33                 jz      short loc_1B5D
.text:0000000000001B35                 call    quotearg_colon
.text:0000000000001B3A                 mov     esi, [rbx]      ; errnum
.text:0000000000001B3C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001B43                 mov     rcx, rax
.text:0000000000001B46                 mov     r8, rbp
.text:0000000000001B49                 xor     edi, edi        ; status
.text:0000000000001B4B                 xor     eax, eax
.text:0000000000001B4D                 call    _error
.text:0000000000001B52
.text:0000000000001B52 loc_1B52:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001B52                                         ; close_stdout+A2↓j
.text:0000000000001B52                 mov     edi, cs:exit_failure ; status
.text:0000000000001B58                 call    __exit
.text:0000000000001B5D ; ---------------------------------------------------------------------------
.text:0000000000001B5D
.text:0000000000001B5D loc_1B5D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001B5D                 mov     esi, [rbx]      ; errnum
.text:0000000000001B5F                 lea     rdx, format+4   ; format
.text:0000000000001B66                 mov     rcx, rax
.text:0000000000001B69                 xor     edi, edi        ; status
.text:0000000000001B6B                 xor     eax, eax
.text:0000000000001B6D                 call    _error
.text:0000000000001B72                 jmp     short loc_1B52
.text:0000000000001B72 ; } // starts at 1AD0
.text:0000000000001B72 close_stdout    endp
.text:0000000000001B72
.text:0000000000001B72 ; ---------------------------------------------------------------------------
.text:0000000000001B74                 align 20h
.text:0000000000001B80
.text:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B80
.text:0000000000001B80
.text:0000000000001B80                 public parse_long_options
.text:0000000000001B80 parse_long_options proc near
.text:0000000000001B80
.text:0000000000001B80 var_100         = qword ptr -100h
.text:0000000000001B80 var_F8          = dword ptr -0F8h
.text:0000000000001B80 var_F4          = dword ptr -0F4h
.text:0000000000001B80 var_F0          = qword ptr -0F0h
.text:0000000000001B80 var_E8          = qword ptr -0E8h
.text:0000000000001B80 var_E0          = qword ptr -0E0h
.text:0000000000001B80 var_D8          = byte ptr -0D8h
.text:0000000000001B80 var_A8          = xmmword ptr -0A8h
.text:0000000000001B80 var_98          = xmmword ptr -98h
.text:0000000000001B80 var_88          = xmmword ptr -88h
.text:0000000000001B80 var_78          = xmmword ptr -78h
.text:0000000000001B80 var_68          = xmmword ptr -68h
.text:0000000000001B80 var_58          = xmmword ptr -58h
.text:0000000000001B80 var_48          = xmmword ptr -48h
.text:0000000000001B80 var_38          = xmmword ptr -38h
.text:0000000000001B80 arg_0           = byte ptr  8
.text:0000000000001B80
.text:0000000000001B80 ; __unwind {
.text:0000000000001B80                 push    r13
.text:0000000000001B82                 push    r12
.text:0000000000001B84                 mov     r13, r8
.text:0000000000001B87                 push    rbp
.text:0000000000001B88                 push    rbx
.text:0000000000001B89                 mov     rbp, rdx
.text:0000000000001B8C                 mov     r12, rcx
.text:0000000000001B8F                 sub     rsp, 0E8h
.text:0000000000001B96                 test    al, al
.text:0000000000001B98                 jz      short loc_1BD4
.text:0000000000001B9A                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000001B9F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000001BA4                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000001BAC                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000001BB4                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000001BBC                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000001BC4                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000001BCC                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000001BD4
.text:0000000000001BD4 loc_1BD4:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000001BD4                 mov     rax, fs:28h
.text:0000000000001BDD                 mov     [rsp+108h+var_E0], rax
.text:0000000000001BE2                 xor     eax, eax
.text:0000000000001BE4                 cmp     edi, 2
.text:0000000000001BE7                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001BED                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000001BF7                 jz      short loc_1C30
.text:0000000000001BF9
.text:0000000000001BF9 loc_1BF9:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000001BF9                                         ; parse_long_options+DD↓j ...
.text:0000000000001BF9                 mov     rax, [rsp+108h+var_E0]
.text:0000000000001BFE                 xor     rax, fs:28h
.text:0000000000001C07                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001C0D                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000001C17                 jnz     loc_1CBA
.text:0000000000001C1D                 add     rsp, 0E8h
.text:0000000000001C24                 pop     rbx
.text:0000000000001C25                 pop     rbp
.text:0000000000001C26                 pop     r12
.text:0000000000001C28                 pop     r13
.text:0000000000001C2A                 retn
.text:0000000000001C2A ; ---------------------------------------------------------------------------
.text:0000000000001C2B                 align 10h
.text:0000000000001C30
.text:0000000000001C30 loc_1C30:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000001C30                 lea     rcx, long_options ; longopts
.text:0000000000001C37                 lea     rdx, shortopts  ; "+"
.text:0000000000001C3E                 xor     r8d, r8d        ; longind
.text:0000000000001C41                 mov     [rsp+108h+var_100], r9
.text:0000000000001C46                 call    _getopt_long
.text:0000000000001C4B                 cmp     eax, 0FFFFFFFFh
.text:0000000000001C4E                 jz      short loc_1BF9
.text:0000000000001C50                 cmp     eax, 68h ; 'h'
.text:0000000000001C53                 mov     r9, [rsp+108h+var_100]
.text:0000000000001C58                 jz      short loc_1CB0
.text:0000000000001C5A                 cmp     eax, 76h ; 'v'
.text:0000000000001C5D                 jnz     short loc_1BF9
.text:0000000000001C5F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000001C67                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C6E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000001C73                 mov     rcx, r13
.text:0000000000001C76                 mov     rdx, r12
.text:0000000000001C79                 mov     rsi, rbp
.text:0000000000001C7C                 mov     [rsp+108h+var_F0], rax
.text:0000000000001C81                 lea     rax, [rsp+108h+var_D8]
.text:0000000000001C86                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:0000000000001C8E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000001C96                 mov     [rsp+108h+var_E8], rax
.text:0000000000001C9B                 call    version_etc_va
.text:0000000000001CA0                 xor     edi, edi        ; status
.text:0000000000001CA2                 call    _exit
.text:0000000000001CA2 ; ---------------------------------------------------------------------------
.text:0000000000001CA7                 align 10h
.text:0000000000001CB0
.text:0000000000001CB0 loc_1CB0:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000001CB0                 xor     edi, edi
.text:0000000000001CB2                 call    r9
.text:0000000000001CB5                 jmp     loc_1BF9
.text:0000000000001CBA ; ---------------------------------------------------------------------------
.text:0000000000001CBA
.text:0000000000001CBA loc_1CBA:                               ; CODE XREF: parse_long_options+97↑j
.text:0000000000001CBA                 call    ___stack_chk_fail
.text:0000000000001CBA ; } // starts at 1B80
.text:0000000000001CBA parse_long_options endp
.text:0000000000001CBA
.text:0000000000001CBA ; ---------------------------------------------------------------------------
.text:0000000000001CBF                 align 20h
.text:0000000000001CC0
.text:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CC0
.text:0000000000001CC0
.text:0000000000001CC0                 public parse_gnu_standard_options_only
.text:0000000000001CC0 parse_gnu_standard_options_only proc near
.text:0000000000001CC0                                         ; CODE XREF: main+87↑p
.text:0000000000001CC0
.text:0000000000001CC0 var_F8          = dword ptr -0F8h
.text:0000000000001CC0 var_F4          = dword ptr -0F4h
.text:0000000000001CC0 var_F0          = qword ptr -0F0h
.text:0000000000001CC0 var_E8          = qword ptr -0E8h
.text:0000000000001CC0 var_E0          = qword ptr -0E0h
.text:0000000000001CC0 var_D8          = byte ptr -0D8h
.text:0000000000001CC0 var_A8          = xmmword ptr -0A8h
.text:0000000000001CC0 var_98          = xmmword ptr -98h
.text:0000000000001CC0 var_88          = xmmword ptr -88h
.text:0000000000001CC0 var_78          = xmmword ptr -78h
.text:0000000000001CC0 var_68          = xmmword ptr -68h
.text:0000000000001CC0 var_58          = xmmword ptr -58h
.text:0000000000001CC0 var_48          = xmmword ptr -48h
.text:0000000000001CC0 var_38          = xmmword ptr -38h
.text:0000000000001CC0 arg_0           = qword ptr  8
.text:0000000000001CC0 arg_8           = byte ptr  10h
.text:0000000000001CC0
.text:0000000000001CC0 ; __unwind {
.text:0000000000001CC0                 push    r14
.text:0000000000001CC2                 push    r13
.text:0000000000001CC4                 mov     r14, r8
.text:0000000000001CC7                 push    r12
.text:0000000000001CC9                 push    rbp
.text:0000000000001CCA                 mov     r12, rdx
.text:0000000000001CCD                 push    rbx
.text:0000000000001CCE                 mov     r13, rcx
.text:0000000000001CD1                 sub     rsp, 0D0h
.text:0000000000001CD8                 test    al, al
.text:0000000000001CDA                 mov     rbp, [rsp+0F8h+arg_0]
.text:0000000000001CE2                 jz      short loc_1D1B
.text:0000000000001CE4                 movaps  [rsp+0F8h+var_A8], xmm0
.text:0000000000001CE9                 movaps  [rsp+0F8h+var_98], xmm1
.text:0000000000001CEE                 movaps  [rsp+0F8h+var_88], xmm2
.text:0000000000001CF3                 movaps  [rsp+0F8h+var_78], xmm3
.text:0000000000001CFB                 movaps  [rsp+0F8h+var_68], xmm4
.text:0000000000001D03                 movaps  [rsp+0F8h+var_58], xmm5
.text:0000000000001D0B                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000001D13                 movaps  [rsp+0F8h+var_38], xmm7
.text:0000000000001D1B
.text:0000000000001D1B loc_1D1B:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:0000000000001D1B                 mov     rax, fs:28h
.text:0000000000001D24                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000001D29                 xor     eax, eax
.text:0000000000001D2B                 lea     rdx, aUsageSOption+16h ; ""
.text:0000000000001D32                 lea     rax, shortopts  ; "+"
.text:0000000000001D39                 test    r9b, r9b
.text:0000000000001D3C                 lea     rcx, long_options ; longopts
.text:0000000000001D43                 cmovz   rdx, rax        ; shortopts
.text:0000000000001D47                 xor     r8d, r8d        ; longind
.text:0000000000001D4A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001D50                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:0000000000001D5A                 call    _getopt_long
.text:0000000000001D5F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D62                 jz      short loc_1DC8
.text:0000000000001D64                 cmp     eax, 68h ; 'h'
.text:0000000000001D67                 jz      loc_1DF0
.text:0000000000001D6D                 cmp     eax, 76h ; 'v'
.text:0000000000001D70                 jnz     short loc_1DC0
.text:0000000000001D72                 lea     rax, [rsp+0F8h+arg_8]
.text:0000000000001D7A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D81                 mov     r8, rsp
.text:0000000000001D84                 mov     rcx, r14
.text:0000000000001D87                 mov     rdx, r13
.text:0000000000001D8A                 mov     rsi, r12
.text:0000000000001D8D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000001D92                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000001D97                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:0000000000001D9E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000001DA6                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000001DAB                 call    version_etc_va
.text:0000000000001DB0                 xor     edi, edi        ; status
.text:0000000000001DB2                 call    _exit
.text:0000000000001DB2 ; ---------------------------------------------------------------------------
.text:0000000000001DB7                 align 20h
.text:0000000000001DC0
.text:0000000000001DC0 loc_1DC0:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000001DC0                 mov     edi, cs:exit_failure
.text:0000000000001DC6                 call    rbp
.text:0000000000001DC8
.text:0000000000001DC8 loc_1DC8:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000001DC8                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000001DC8                 mov     rax, [rsp+0F8h+var_E0]
.text:0000000000001DCD                 xor     rax, fs:28h
.text:0000000000001DD6                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001DDC                 jnz     short loc_1DF6
.text:0000000000001DDE                 add     rsp, 0D0h
.text:0000000000001DE5                 pop     rbx
.text:0000000000001DE6                 pop     rbp
.text:0000000000001DE7                 pop     r12
.text:0000000000001DE9                 pop     r13
.text:0000000000001DEB                 pop     r14
.text:0000000000001DED                 retn
.text:0000000000001DED ; ---------------------------------------------------------------------------
.text:0000000000001DEE                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 loc_1DF0:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000001DF0                 xor     edi, edi
.text:0000000000001DF2                 call    rbp
.text:0000000000001DF4                 jmp     short loc_1DC8
.text:0000000000001DF6 ; ---------------------------------------------------------------------------
.text:0000000000001DF6
.text:0000000000001DF6 loc_1DF6:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000001DF6                 call    ___stack_chk_fail
.text:0000000000001DF6 ; } // starts at 1CC0
.text:0000000000001DF6 parse_gnu_standard_options_only endp
.text:0000000000001DF6
.text:0000000000001DF6 ; ---------------------------------------------------------------------------
.text:0000000000001DFB                 align 20h
.text:0000000000001E00
.text:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E00
.text:0000000000001E00
.text:0000000000001E00                 public set_program_name
.text:0000000000001E00 set_program_name proc near              ; CODE XREF: main+E↑p
.text:0000000000001E00 ; __unwind {
.text:0000000000001E00                 test    rdi, rdi
.text:0000000000001E03                 push    rbx
.text:0000000000001E04                 jz      short loc_1E7D
.text:0000000000001E06                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001E0B                 mov     rbx, rdi
.text:0000000000001E0E                 call    _strrchr
.text:0000000000001E13                 test    rax, rax
.text:0000000000001E16                 jz      short loc_1E6D
.text:0000000000001E18                 lea     r8, [rax+1]
.text:0000000000001E1C                 mov     rdx, r8
.text:0000000000001E1F                 sub     rdx, rbx
.text:0000000000001E22                 cmp     rdx, 6
.text:0000000000001E26                 jle     short loc_1E6D
.text:0000000000001E28                 lea     rsi, [rax-6]
.text:0000000000001E2C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001E33                 mov     ecx, 7
.text:0000000000001E38                 repe cmpsb
.text:0000000000001E3A                 setnbe  dl
.text:0000000000001E3D                 sbb     dl, 0
.text:0000000000001E40                 test    dl, dl
.text:0000000000001E42                 jnz     short loc_1E6D
.text:0000000000001E44                 lea     rdi, aLt        ; "lt-"
.text:0000000000001E4B                 mov     ecx, 3
.text:0000000000001E50                 mov     rsi, r8
.text:0000000000001E53                 mov     rbx, r8
.text:0000000000001E56                 repe cmpsb
.text:0000000000001E58                 setnbe  dl
.text:0000000000001E5B                 sbb     dl, 0
.text:0000000000001E5E                 test    dl, dl
.text:0000000000001E60                 jnz     short loc_1E6D
.text:0000000000001E62                 lea     rbx, [rax+4]
.text:0000000000001E66                 mov     cs:__bss_start, rbx
.text:0000000000001E6D
.text:0000000000001E6D loc_1E6D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001E6D                                         ; set_program_name+26↑j ...
.text:0000000000001E6D                 mov     cs:program_name, rbx
.text:0000000000001E74                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001E7B                 pop     rbx
.text:0000000000001E7C                 retn
.text:0000000000001E7D ; ---------------------------------------------------------------------------
.text:0000000000001E7D
.text:0000000000001E7D loc_1E7D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001E7D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001E84                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001E8B                 mov     edx, 37h ; '7'  ; n
.text:0000000000001E90                 mov     esi, 1          ; size
.text:0000000000001E95                 call    _fwrite
.text:0000000000001E9A                 call    _abort
.text:0000000000001E9A ; } // starts at 1E00
.text:0000000000001E9A set_program_name endp
.text:0000000000001E9A
.text:0000000000001E9A ; ---------------------------------------------------------------------------
.text:0000000000001E9F                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EA0
.text:0000000000001EA0 ; Attributes: info_from_lumina
.text:0000000000001EA0
.text:0000000000001EA0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001EA0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001EA0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001EA0 ; __unwind {
.text:0000000000001EA0                 push    rbp
.text:0000000000001EA1                 push    rbx
.text:0000000000001EA2                 mov     rbp, rdi
.text:0000000000001EA5                 mov     ebx, esi
.text:0000000000001EA7                 sub     rsp, 8
.text:0000000000001EAB                 call    locale_charset
.text:0000000000001EB0                 movzx   edx, byte ptr [rax]
.text:0000000000001EB3                 and     edx, 0FFFFFFDFh
.text:0000000000001EB6                 cmp     dl, 55h ; 'U'
.text:0000000000001EB9                 jz      short loc_1F30
.text:0000000000001EBB                 cmp     dl, 47h ; 'G'
.text:0000000000001EBE                 jz      short loc_1EE0
.text:0000000000001EC0
.text:0000000000001EC0 loc_1EC0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001EC0                                         ; gettext_quote+50↓j ...
.text:0000000000001EC0                 lea     rax, unk_4A8B
.text:0000000000001EC7                 lea     rdx, asc_4A8D   ; "'"
.text:0000000000001ECE                 cmp     ebx, 9
.text:0000000000001ED1                 cmovnz  rax, rdx
.text:0000000000001ED5                 add     rsp, 8
.text:0000000000001ED9                 pop     rbx
.text:0000000000001EDA                 pop     rbp
.text:0000000000001EDB                 retn
.text:0000000000001EDB ; ---------------------------------------------------------------------------
.text:0000000000001EDC                 align 20h
.text:0000000000001EE0
.text:0000000000001EE0 loc_1EE0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001EE0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001EE4                 and     edx, 0FFFFFFDFh
.text:0000000000001EE7                 cmp     dl, 42h ; 'B'
.text:0000000000001EEA                 jnz     short loc_1EC0
.text:0000000000001EEC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001EF0                 jnz     short loc_1EC0
.text:0000000000001EF2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001EF6                 jnz     short loc_1EC0
.text:0000000000001EF8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001EFC                 jnz     short loc_1EC0
.text:0000000000001EFE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001F02                 jnz     short loc_1EC0
.text:0000000000001F04                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001F08                 jnz     short loc_1EC0
.text:0000000000001F0A                 cmp     byte ptr [rax+7], 0
.text:0000000000001F0E                 jnz     short loc_1EC0
.text:0000000000001F10                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001F14                 lea     rax, unk_4A84
.text:0000000000001F1B                 lea     rdx, unk_4A88
.text:0000000000001F22                 cmovnz  rax, rdx
.text:0000000000001F26                 add     rsp, 8
.text:0000000000001F2A                 pop     rbx
.text:0000000000001F2B                 pop     rbp
.text:0000000000001F2C                 retn
.text:0000000000001F2C ; ---------------------------------------------------------------------------
.text:0000000000001F2D                 align 10h
.text:0000000000001F30
.text:0000000000001F30 loc_1F30:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001F30                 movzx   edx, byte ptr [rax+1]
.text:0000000000001F34                 and     edx, 0FFFFFFDFh
.text:0000000000001F37                 cmp     dl, 54h ; 'T'
.text:0000000000001F3A                 jnz     short loc_1EC0
.text:0000000000001F3C                 movzx   edx, byte ptr [rax+2]
.text:0000000000001F40                 and     edx, 0FFFFFFDFh
.text:0000000000001F43                 cmp     dl, 46h ; 'F'
.text:0000000000001F46                 jnz     loc_1EC0
.text:0000000000001F4C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000001F50                 jnz     loc_1EC0
.text:0000000000001F56                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000001F5A                 jnz     loc_1EC0
.text:0000000000001F60                 cmp     byte ptr [rax+5], 0
.text:0000000000001F64                 jnz     loc_1EC0
.text:0000000000001F6A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001F6E                 lea     rax, unk_4A7C
.text:0000000000001F75                 lea     rdx, unk_4A80
.text:0000000000001F7C                 cmovnz  rax, rdx
.text:0000000000001F80                 add     rsp, 8
.text:0000000000001F84                 pop     rbx
.text:0000000000001F85                 pop     rbp
.text:0000000000001F86                 retn
.text:0000000000001F86 ; } // starts at 1EA0
.text:0000000000001F86 gettext_quote   endp
.text:0000000000001F86
.text:0000000000001F86 ; ---------------------------------------------------------------------------
.text:0000000000001F87                 align 10h
.text:0000000000001F90
.text:0000000000001F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F90
.text:0000000000001F90 ; Attributes: info_from_lumina
.text:0000000000001F90
.text:0000000000001F90 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000001F90 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000001F90                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000001F90
.text:0000000000001F90 var_E0          = dword ptr -0E0h
.text:0000000000001F90 var_DB          = byte ptr -0DBh
.text:0000000000001F90 var_DA          = byte ptr -0DAh
.text:0000000000001F90 var_D9          = byte ptr -0D9h
.text:0000000000001F90 s               = qword ptr -0D8h
.text:0000000000001F90 n               = qword ptr -0D0h
.text:0000000000001F90 var_C8          = qword ptr -0C8h
.text:0000000000001F90 ps              = qword ptr -0C0h
.text:0000000000001F90 var_B8          = qword ptr -0B8h
.text:0000000000001F90 var_B0          = qword ptr -0B0h
.text:0000000000001F90 var_A8          = qword ptr -0A8h
.text:0000000000001F90 s2              = qword ptr -0A0h
.text:0000000000001F90 var_98          = qword ptr -98h
.text:0000000000001F90 var_90          = qword ptr -90h
.text:0000000000001F90 var_88          = qword ptr -88h
.text:0000000000001F90 var_80          = qword ptr -80h
.text:0000000000001F90 var_78          = qword ptr -78h
.text:0000000000001F90 var_70          = dword ptr -70h
.text:0000000000001F90 var_6C          = byte ptr -6Ch
.text:0000000000001F90 var_6B          = byte ptr -6Bh
.text:0000000000001F90 var_6A          = byte ptr -6Ah
.text:0000000000001F90 var_69          = byte ptr -69h
.text:0000000000001F90 var_68          = qword ptr -68h
.text:0000000000001F90 var_60          = qword ptr -60h
.text:0000000000001F90 wc              = dword ptr -4Ch
.text:0000000000001F90 var_48          = qword ptr -48h
.text:0000000000001F90 var_40          = qword ptr -40h
.text:0000000000001F90 arg_0           = qword ptr  8
.text:0000000000001F90 arg_8           = qword ptr  10h
.text:0000000000001F90 arg_10          = qword ptr  18h
.text:0000000000001F90
.text:0000000000001F90 ; __unwind {
.text:0000000000001F90                 push    r15
.text:0000000000001F92                 push    r14
.text:0000000000001F94                 mov     r15d, r8d
.text:0000000000001F97                 push    r13
.text:0000000000001F99                 push    r12
.text:0000000000001F9B                 mov     r14, rdi
.text:0000000000001F9E                 push    rbp
.text:0000000000001F9F                 push    rbx
.text:0000000000001FA0                 mov     ebx, r9d
.text:0000000000001FA3                 mov     r13, rsi
.text:0000000000001FA6                 mov     rbp, rcx
.text:0000000000001FA9                 and     ebx, 2
.text:0000000000001FAC                 sub     rsp, 0B8h
.text:0000000000001FB3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000001FBB                 mov     [rsp+0E8h+s], rdx
.text:0000000000001FC0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000001FC5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000001FCA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000001FCF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000001FD7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000001FDC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000001FE4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000001FE9                 mov     rax, fs:28h
.text:0000000000001FF2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000001FFA                 xor     eax, eax
.text:0000000000001FFC                 call    ___ctype_get_mb_cur_max
.text:0000000000002001                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002005                 mov     [rsp+0E8h+var_90], rax
.text:000000000000200A                 ja      def_2021        ; jumptable 00000000000121F1 default case
.text:0000000000002010                 lea     rcx, jpt_2021
.text:0000000000002017                 mov     edx, r15d
.text:000000000000201A                 movsxd  rax, ds:(jpt_2021 - 4AE0h)[rcx+rdx*4]
.text:000000000000201E                 add     rax, rcx
.text:0000000000002021                 jmp     rax             ; switch jump
.text:0000000000002023 ; ---------------------------------------------------------------------------
.text:0000000000002023
.text:0000000000002023 loc_2023:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002023                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002023                                         ; DATA XREF: ...
.text:0000000000002023                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002028                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000202D                 xor     r12d, r12d
.text:0000000000002030                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002039                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000203E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002043
.text:0000000000002043 loc_2043:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002043                 lea     rax, asc_4A8D   ; "'"
.text:000000000000204A                 mov     [rsp+0E8h+n], 1
.text:0000000000002053                 xor     r15d, r15d
.text:0000000000002056                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000205E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002063
.text:0000000000002063 loc_2063:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002063                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002063                 xor     r11d, r11d
.text:0000000000002066                 mov     rax, rbp
.text:0000000000002069                 mov     r8d, r12d
.text:000000000000206C                 mov     rbp, r11
.text:000000000000206F                 mov     r11, rax
.text:0000000000002072                 nop     word ptr [rax+rax+00h]
.text:0000000000002078
.text:0000000000002078 loc_2078:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002078                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002078                 cmp     r11, rbp
.text:000000000000207B                 setnz   r12b
.text:000000000000207F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002083                 jnz     short loc_2092
.text:0000000000002085                 mov     rax, [rsp+0E8h+s]
.text:000000000000208A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000208E                 setnz   r12b
.text:0000000000002092
.text:0000000000002092 loc_2092:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002092                 test    r12b, r12b
.text:0000000000002095                 jz      loc_26F0
.text:000000000000209B                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000020A0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000020A5                 lea     r9, [rdi+rbp]
.text:00000000000020A9                 setnz   al
.text:00000000000020AC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000020B0                 mov     r10d, eax
.text:00000000000020B3                 jz      loc_2160
.text:00000000000020B9                 mov     rax, [rsp+0E8h+n]
.text:00000000000020BE                 test    rax, rax
.text:00000000000020C1                 jz      loc_24F0
.text:00000000000020C7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000020CB                 lea     rbx, [rbp+rax+0]
.text:00000000000020D0                 jnz     short loc_2100
.text:00000000000020D2                 cmp     rax, 1
.text:00000000000020D6                 jbe     short loc_2100
.text:00000000000020D8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000020DD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000020E2                 mov     [rsp+0E8h+ps], r9
.text:00000000000020E7                 call    _strlen
.text:00000000000020EC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000020F2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000020F8                 mov     r11, rax
.text:00000000000020FB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002100
.text:0000000000002100 loc_2100:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002100                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002100                 cmp     rbx, r11
.text:0000000000002103                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002108                 ja      loc_26C0
.text:000000000000210E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002113                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002118                 mov     rdi, r9         ; s1
.text:000000000000211B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002120                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002125                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000212A                 call    _memcmp
.text:000000000000212F                 test    eax, eax
.text:0000000000002131                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002136                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000213C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002141                 jnz     loc_26C0
.text:0000000000002147                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000214C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002152                 jnz     loc_30D5
.text:0000000000002158                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002160                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002160                 movzx   ebx, byte ptr [r9]
.text:0000000000002164                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002167                 ja      def_217E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000216D                 lea     rcx, jpt_217E
.text:0000000000002174                 movzx   edx, bl
.text:0000000000002177                 movsxd  rax, ds:(jpt_217E - 4B0Ch)[rcx+rdx*4]
.text:000000000000217B                 add     rax, rcx
.text:000000000000217E                 jmp     rax             ; switch jump
.text:0000000000002180 ; ---------------------------------------------------------------------------
.text:0000000000002180
.text:0000000000002180 loc_2180:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002180                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002180                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002183
.text:0000000000002183 loc_2183:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002183                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:0000000000002183                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002187                 setnz   al
.text:000000000000218A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000218E                 jnz     short loc_219C
.text:0000000000002190                 mov     rax, [rsp+0E8h+s]
.text:0000000000002195                 cmp     byte ptr [rax+1], 0
.text:0000000000002199                 setnz   al
.text:000000000000219C
.text:000000000000219C loc_219C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000219C                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000021A1                 setz    dl
.text:00000000000021A4                 test    al, al
.text:00000000000021A6                 jz      loc_23F8
.text:00000000000021AC
.text:00000000000021AC loc_21AC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000021AC                 xor     r12d, r12d
.text:00000000000021AF                 xor     eax, eax
.text:00000000000021B1                 nop     dword ptr [rax+00000000h]
.text:00000000000021B8
.text:00000000000021B8 loc_21B8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000021B8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000021B8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000021BD                 jnz     loc_22D2
.text:00000000000021C3                 test    dl, dl
.text:00000000000021C5                 jnz     loc_22D2
.text:00000000000021CB
.text:00000000000021CB loc_21CB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000021CB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000021D0                 test    rsi, rsi
.text:00000000000021D3                 jz      short loc_21E9
.text:00000000000021D5                 mov     edx, ebx
.text:00000000000021D7                 shr     dl, 5
.text:00000000000021DA                 movzx   edx, dl
.text:00000000000021DD                 mov     edx, [rsi+rdx*4]
.text:00000000000021E0                 bt      edx, ebx
.text:00000000000021E3                 jb      loc_2333
.text:00000000000021E9
.text:00000000000021E9 loc_21E9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000021E9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000021E9                 test    r10b, r10b
.text:00000000000021EC                 jnz     loc_2333
.text:00000000000021F2                 xor     eax, 1
.text:00000000000021F5                 add     rbp, 1
.text:00000000000021F9                 and     eax, r8d
.text:00000000000021FC
.text:00000000000021FC loc_21FC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000021FC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000021FC                 test    al, al
.text:00000000000021FE                 jz      short loc_2220
.text:0000000000002200                 cmp     r13, r15
.text:0000000000002203                 jbe     short loc_220A
.text:0000000000002205                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000220A
.text:000000000000220A loc_220A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000220A                 lea     rax, [r15+1]
.text:000000000000220E                 cmp     r13, rax
.text:0000000000002211                 jbe     short loc_2219
.text:0000000000002213                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002219
.text:0000000000002219 loc_2219:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002219                 add     r15, 2
.text:000000000000221D                 xor     r8d, r8d
.text:0000000000002220
.text:0000000000002220 loc_2220:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002220                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002220                 cmp     r15, r13
.text:0000000000002223                 jnb     short loc_2229
.text:0000000000002225                 mov     [r14+r15], bl
.text:0000000000002229
.text:0000000000002229 loc_2229:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002229                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000222E                 add     r15, 1
.text:0000000000002232                 mov     eax, 0
.text:0000000000002237                 test    r12b, r12b
.text:000000000000223A                 cmovz   edi, eax
.text:000000000000223D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002242                 jmp     loc_2078
.text:0000000000002242 ; ---------------------------------------------------------------------------
.text:0000000000002247                 align 10h
.text:0000000000002250
.text:0000000000002250 loc_2250:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002250                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002250                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002253
.text:0000000000002253 loc_2253:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002253                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:0000000000002253                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002257                 cmp     eax, 2
.text:000000000000225A                 jz      loc_2818
.text:0000000000002260                 cmp     eax, 5
.text:0000000000002263                 jz      loc_27D8
.text:0000000000002269                 cmp     eax, 2
.text:000000000000226C                 mov     ebx, 3Fh ; '?'
.text:0000000000002271                 setz    dl
.text:0000000000002274                 xor     r12d, r12d
.text:0000000000002277                 xor     eax, eax
.text:0000000000002279                 jmp     loc_21B8
.text:0000000000002279 ; ---------------------------------------------------------------------------
.text:000000000000227E                 align 20h
.text:0000000000002280
.text:0000000000002280 loc_2280:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002280                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002280                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002283
.text:0000000000002283 loc_2283:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002283                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:0000000000002283                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002288                 jz      loc_2790
.text:000000000000228E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002293                 xor     edx, edx
.text:0000000000002295                 xor     eax, eax
.text:0000000000002297                 mov     ebx, 27h ; '''
.text:000000000000229C                 jmp     loc_21B8
.text:000000000000229C ; ---------------------------------------------------------------------------
.text:00000000000022A1                 align 8
.text:00000000000022A8
.text:00000000000022A8 loc_22A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022A8                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:00000000000022A8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000022AD                 mov     ebx, 74h ; 't'
.text:00000000000022B2
.text:00000000000022B2 loc_22B2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000022B2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000022B2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000022B7                 setz    al
.text:00000000000022BA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000022BE                 jnz     loc_240E
.text:00000000000022C4
.text:00000000000022C4 loc_22C4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000022C4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000022C4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000022C9                 jnz     short loc_2330
.text:00000000000022CB
.text:00000000000022CB loc_22CB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000022CB                 mov     ebx, edx
.text:00000000000022CD                 xor     r12d, r12d
.text:00000000000022D0                 xor     eax, eax
.text:00000000000022D2
.text:00000000000022D2 loc_22D2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000022D2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000022D2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000022D7                 jnz     loc_21CB
.text:00000000000022DD                 jmp     loc_21E9
.text:00000000000022DD ; ---------------------------------------------------------------------------
.text:00000000000022E2                 align 8
.text:00000000000022E8
.text:00000000000022E8 loc_22E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022E8                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:00000000000022E8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000022ED                 mov     ebx, 62h ; 'b'
.text:00000000000022F2                 jmp     short loc_22C4
.text:00000000000022F2 ; ---------------------------------------------------------------------------
.text:00000000000022F4                 align 8
.text:00000000000022F8
.text:00000000000022F8 loc_22F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022F8                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:00000000000022F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000022FD                 jz      loc_26D0
.text:0000000000002303                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002308                 jz      loc_2520
.text:000000000000230E
.text:000000000000230E loc_230E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000230E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002313                 jz      loc_2520
.text:0000000000002319                 cmp     [rsp+0E8h+n], 0
.text:000000000000231F                 jnz     loc_26DB
.text:0000000000002325                 mov     ebx, 5Ch ; '\'
.text:000000000000232A                 nop     word ptr [rax+rax+00h]
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002330                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002330                 xor     r12d, r12d
.text:0000000000002333
.text:0000000000002333 loc_2333:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002333                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002333                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002338                 setz    dl
.text:000000000000233B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002340                 mov     eax, edx
.text:0000000000002342                 jnz     loc_2B98
.text:0000000000002348                 mov     eax, r8d
.text:000000000000234B                 xor     eax, 1
.text:000000000000234E                 and     al, dl
.text:0000000000002350                 jz      short loc_2381
.text:0000000000002352                 cmp     r13, r15
.text:0000000000002355                 jbe     short loc_235C
.text:0000000000002357                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000235C
.text:000000000000235C loc_235C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000235C                 lea     rdx, [r15+1]
.text:0000000000002360                 cmp     r13, rdx
.text:0000000000002363                 jbe     short loc_236B
.text:0000000000002365                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000236B
.text:000000000000236B loc_236B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000236B                 lea     rdx, [r15+2]
.text:000000000000236F                 cmp     r13, rdx
.text:0000000000002372                 jbe     short loc_237A
.text:0000000000002374                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000237A
.text:000000000000237A loc_237A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000237A                 add     r15, 3
.text:000000000000237E                 mov     r8d, eax
.text:0000000000002381
.text:0000000000002381 loc_2381:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002381                 cmp     r13, r15
.text:0000000000002384                 jbe     short loc_238B
.text:0000000000002386                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000238B
.text:000000000000238B loc_238B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000238B                 add     r15, 1
.text:000000000000238F                 add     rbp, 1
.text:0000000000002393                 jmp     loc_2220
.text:0000000000002393 ; ---------------------------------------------------------------------------
.text:0000000000002398                 align 20h
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023A0                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:00000000000023A0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000023A5                 jnz     loc_2573
.text:00000000000023AB                 xor     edx, edx
.text:00000000000023AD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000023B2                 jz      loc_22CB
.text:00000000000023B8                 add     rbp, 1
.text:00000000000023BC                 jmp     loc_2078
.text:00000000000023BC ; ---------------------------------------------------------------------------
.text:00000000000023C1                 align 8
.text:00000000000023C8
.text:00000000000023C8 loc_23C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023C8                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:00000000000023C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000023CD                 setz    dl
.text:00000000000023D0                 xor     eax, eax
.text:00000000000023D2                 jmp     loc_21B8
.text:00000000000023D2 ; ---------------------------------------------------------------------------
.text:00000000000023D7                 align 20h
.text:00000000000023E0
.text:00000000000023E0 loc_23E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023E0                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:00000000000023E0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000023E5                 mov     ebx, 61h ; 'a'
.text:00000000000023EA                 jmp     loc_22C4
.text:00000000000023EA ; ---------------------------------------------------------------------------
.text:00000000000023EF                 align 10h
.text:00000000000023F0
.text:00000000000023F0 loc_23F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023F0                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:00000000000023F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000023F5                 setz    dl
.text:00000000000023F8
.text:00000000000023F8 loc_23F8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000023F8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000023F8                 test    rbp, rbp
.text:00000000000023FB                 jnz     loc_21AC
.text:0000000000002401
.text:0000000000002401 loc_2401:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002401                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002401                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002406                 and     al, dl
.text:0000000000002408                 jz      loc_21B8
.text:000000000000240E
.text:000000000000240E loc_240E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000240E                 mov     rbp, r11
.text:0000000000002411                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002419                 jmp     loc_2B19
.text:0000000000002419 ; ---------------------------------------------------------------------------
.text:000000000000241E                 align 20h
.text:0000000000002420
.text:0000000000002420 loc_2420:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002420                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:0000000000002420                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002425                 setz    dl
.text:0000000000002428                 xor     r12d, r12d
.text:000000000000242B                 jmp     short loc_2401
.text:000000000000242B ; ---------------------------------------------------------------------------
.text:000000000000242D                 align 10h
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002430                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:0000000000002430                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002435                 mov     ebx, 20h ; ' '
.text:000000000000243A                 setz    dl
.text:000000000000243D                 jmp     short loc_2401
.text:000000000000243D ; ---------------------------------------------------------------------------
.text:000000000000243F                 align 20h
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002440                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:0000000000002440                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002445                 mov     ebx, 72h ; 'r'
.text:000000000000244A                 jmp     loc_22B2
.text:000000000000244A ; ---------------------------------------------------------------------------
.text:000000000000244F                 align 10h
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002450                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:0000000000002450                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002455                 mov     ebx, 66h ; 'f'
.text:000000000000245A                 jmp     loc_22C4
.text:000000000000245A ; ---------------------------------------------------------------------------
.text:000000000000245F                 align 20h
.text:0000000000002460
.text:0000000000002460 loc_2460:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002460                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:0000000000002460                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002465                 mov     ebx, 76h ; 'v'
.text:000000000000246A                 jmp     loc_22C4
.text:000000000000246A ; ---------------------------------------------------------------------------
.text:000000000000246F                 align 10h
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002470                                         ; DATA XREF: .rodata:jpt_217E↓o
.text:0000000000002470                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002475                 mov     ebx, 6Eh ; 'n'
.text:000000000000247A                 jmp     loc_22B2
.text:000000000000247A ; ---------------------------------------------------------------------------
.text:000000000000247F                 align 20h
.text:0000000000002480
.text:0000000000002480 def_250A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002480                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002480                                         ; DATA XREF: ...
.text:0000000000002480                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002483                 nop     dword ptr [rax+rax+00h]
.text:0000000000002488
.text:0000000000002488 def_217E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002488                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002488                                         ; DATA XREF: ...
.text:0000000000002488                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000248E                 jnz     loc_2838
.text:0000000000002494                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002499                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000249E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000024A3                 call    ___ctype_b_loc
.text:00000000000024A8                 mov     rcx, [rax]
.text:00000000000024AB                 movzx   edx, bl
.text:00000000000024AE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000024B4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000024BA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000024BF                 mov     edi, 1
.text:00000000000024C4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000024C8                 and     ax, 4000h
.text:00000000000024CC                 setnz   r12b
.text:00000000000024D0                 setz    al
.text:00000000000024D3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000024D7
.text:00000000000024D7 loc_24D7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000024D7                 test    al, al
.text:00000000000024D9                 jnz     loc_2E71
.text:00000000000024DF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024E4                 setz    dl
.text:00000000000024E7                 jmp     loc_21B8
.text:00000000000024E7 ; ---------------------------------------------------------------------------
.text:00000000000024EC                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000024F0                 movzx   ebx, byte ptr [r9]
.text:00000000000024F4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000024F7                 ja      short def_250A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000024F9                 lea     rcx, jpt_250A
.text:0000000000002500                 movzx   edx, bl
.text:0000000000002503                 movsxd  rax, ds:(jpt_250A - 4D08h)[rcx+rdx*4]
.text:0000000000002507                 add     rax, rcx
.text:000000000000250A                 jmp     rax             ; switch jump
.text:000000000000250A ; ---------------------------------------------------------------------------
.text:000000000000250C                 align 10h
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002510                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002510                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002513                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002518                 jnz     loc_230E
.text:000000000000251E                 xchg    ax, ax
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002520                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002520                 mov     edx, 5Ch ; '\'
.text:0000000000002525                 mov     ebx, 5Ch ; '\'
.text:000000000000252A                 jmp     loc_22C4
.text:000000000000252A ; ---------------------------------------------------------------------------
.text:000000000000252F                 align 10h
.text:0000000000002530
.text:0000000000002530 loc_2530:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002530                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002530                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002535                 xor     r10d, r10d
.text:0000000000002538                 mov     ebx, 66h ; 'f'
.text:000000000000253D                 jmp     loc_22C4
.text:000000000000253D ; ---------------------------------------------------------------------------
.text:0000000000002542                 align 8
.text:0000000000002548
.text:0000000000002548 loc_2548:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002548                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002548                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000254D                 xor     r10d, r10d
.text:0000000000002550                 mov     ebx, 6Eh ; 'n'
.text:0000000000002555                 jmp     loc_22B2
.text:0000000000002555 ; ---------------------------------------------------------------------------
.text:000000000000255A                 align 20h
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002560                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002560                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002565                 jmp     loc_2330
.text:0000000000002565 ; ---------------------------------------------------------------------------
.text:000000000000256A                 align 10h
.text:0000000000002570
.text:0000000000002570 loc_2570:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002570                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002570                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002573
.text:0000000000002573 loc_2573:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002573                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002578                 setz    dl
.text:000000000000257B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002580                 jnz     loc_311A
.text:0000000000002586                 mov     eax, r8d
.text:0000000000002589                 mov     rcx, r15
.text:000000000000258C                 xor     eax, 1
.text:000000000000258F                 and     al, dl
.text:0000000000002591                 jz      short loc_25C0
.text:0000000000002593                 cmp     r13, r15
.text:0000000000002596                 jbe     short loc_259D
.text:0000000000002598                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000259D
.text:000000000000259D loc_259D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000259D                 lea     rcx, [r15+1]
.text:00000000000025A1                 cmp     r13, rcx
.text:00000000000025A4                 jbe     short loc_25AC
.text:00000000000025A6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000025AC
.text:00000000000025AC loc_25AC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000025AC                 lea     rcx, [r15+2]
.text:00000000000025B0                 cmp     r13, rcx
.text:00000000000025B3                 ja      loc_2BE9
.text:00000000000025B9
.text:00000000000025B9 loc_25B9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000025B9                 lea     rcx, [r15+3]
.text:00000000000025BD                 mov     r8d, eax
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000025C0                 cmp     r13, rcx
.text:00000000000025C3                 jbe     short loc_25CA
.text:00000000000025C5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000025CA
.text:00000000000025CA loc_25CA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000025CA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000025CF                 lea     r15, [rcx+1]
.text:00000000000025D3                 jz      loc_2BD9
.text:00000000000025D9                 lea     rax, [rbp+1]
.text:00000000000025DD                 cmp     rax, r11
.text:00000000000025E0                 jnb     short loc_25FB
.text:00000000000025E2                 mov     rax, [rsp+0E8h+s]
.text:00000000000025E7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000025EC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000025F0                 sub     eax, 30h ; '0'
.text:00000000000025F3                 cmp     al, 9
.text:00000000000025F5                 jbe     loc_2E29
.text:00000000000025FB
.text:00000000000025FB loc_25FB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000025FB                 mov     eax, r12d
.text:00000000000025FE                 mov     ebx, 30h ; '0'
.text:0000000000002603                 xor     r12d, r12d
.text:0000000000002606                 jmp     loc_21B8
.text:0000000000002606 ; ---------------------------------------------------------------------------
.text:000000000000260B                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002610                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002610                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002615                 mov     r12d, r10d
.text:0000000000002618                 setz    dl
.text:000000000000261B                 xor     r10d, r10d
.text:000000000000261E                 xor     eax, eax
.text:0000000000002620                 jmp     loc_21B8
.text:0000000000002620 ; ---------------------------------------------------------------------------
.text:0000000000002625                 align 8
.text:0000000000002628
.text:0000000000002628 loc_2628:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002628                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002628                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000262D                 setz    dl
.text:0000000000002630                 xor     r10d, r10d
.text:0000000000002633                 jmp     loc_23F8
.text:0000000000002633 ; ---------------------------------------------------------------------------
.text:0000000000002638                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002640                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002640                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002645                 setz    dl
.text:0000000000002648                 xor     r10d, r10d
.text:000000000000264B                 xor     r12d, r12d
.text:000000000000264E                 jmp     loc_2401
.text:000000000000264E ; ---------------------------------------------------------------------------
.text:0000000000002653                 align 8
.text:0000000000002658
.text:0000000000002658 loc_2658:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002658                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002658                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000265D                 mov     r12d, r10d
.text:0000000000002660                 mov     ebx, 20h ; ' '
.text:0000000000002665                 setz    dl
.text:0000000000002668                 xor     r10d, r10d
.text:000000000000266B                 jmp     loc_2401
.text:0000000000002670 ; ---------------------------------------------------------------------------
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002670                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002670                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002675                 xor     r10d, r10d
.text:0000000000002678                 mov     ebx, 72h ; 'r'
.text:000000000000267D                 jmp     loc_22B2
.text:000000000000267D ; ---------------------------------------------------------------------------
.text:0000000000002682                 align 8
.text:0000000000002688
.text:0000000000002688 loc_2688:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002688                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002688                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000268D                 jmp     loc_2330
.text:000000000000268D ; ---------------------------------------------------------------------------
.text:0000000000002692                 align 8
.text:0000000000002698
.text:0000000000002698 loc_2698:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002698                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:0000000000002698                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000269D                 xor     r10d, r10d
.text:00000000000026A0                 mov     ebx, 74h ; 't'
.text:00000000000026A5                 jmp     loc_22B2
.text:00000000000026A5 ; ---------------------------------------------------------------------------
.text:00000000000026AA                 align 10h
.text:00000000000026B0
.text:00000000000026B0 loc_26B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026B0                                         ; DATA XREF: .rodata:jpt_250A↓o
.text:00000000000026B0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000026B5                 jmp     loc_2330
.text:00000000000026B5 ; ---------------------------------------------------------------------------
.text:00000000000026BA                 align 20h
.text:00000000000026C0
.text:00000000000026C0 loc_26C0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000026C0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000026C0                 xor     r10d, r10d
.text:00000000000026C3                 jmp     loc_2160
.text:00000000000026C3 ; ---------------------------------------------------------------------------
.text:00000000000026C8                 align 10h
.text:00000000000026D0
.text:00000000000026D0 loc_26D0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000026D0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026D5                 jnz     loc_3040
.text:00000000000026DB
.text:00000000000026DB loc_26DB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000026DB                 add     rbp, 1
.text:00000000000026DF                 mov     eax, r8d
.text:00000000000026E2                 xor     r12d, r12d
.text:00000000000026E5                 mov     ebx, 5Ch ; '\'
.text:00000000000026EA                 jmp     loc_21FC
.text:00000000000026EA ; ---------------------------------------------------------------------------
.text:00000000000026EF                 align 10h
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000026F0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026F5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000026FA                 mov     r12d, r8d
.text:00000000000026FD                 mov     rbp, r11
.text:0000000000002700                 setz    dl
.text:0000000000002703                 mov     eax, ebx
.text:0000000000002705                 test    r15, r15
.text:0000000000002708                 setz    cl
.text:000000000000270B                 and     eax, edx
.text:000000000000270D                 and     al, cl
.text:000000000000270F                 jnz     loc_3176
.text:0000000000002715                 mov     eax, ebx
.text:0000000000002717                 xor     eax, 1
.text:000000000000271A                 and     dl, al
.text:000000000000271C                 jz      loc_308C
.text:0000000000002722                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002727                 jz      loc_308A
.text:000000000000272D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002732                 jnz     loc_312D
.text:0000000000002738                 test    r13, r13
.text:000000000000273B                 setz    al
.text:000000000000273E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002744                 setnz   dl
.text:0000000000002747                 and     al, dl
.text:0000000000002749                 jz      loc_316C
.text:000000000000274F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002754
.text:0000000000002754 loc_2754:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002754                 lea     rbx, asc_4A8D   ; "'"
.text:000000000000275B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000275F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002767                 mov     r15d, 1
.text:000000000000276D                 mov     [rsp+0E8h+n], 1
.text:0000000000002776                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000277B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002780                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002784                 jmp     loc_2063
.text:0000000000002784 ; ---------------------------------------------------------------------------
.text:0000000000002789                 align 10h
.text:0000000000002790
.text:0000000000002790 loc_2790:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002790                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002795                 jnz     loc_3040
.text:000000000000279B                 test    r13, r13
.text:000000000000279E                 jz      loc_2BA0
.text:00000000000027A4                 xor     edx, edx
.text:00000000000027A6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000027AC                 jnz     loc_2BA0
.text:00000000000027B2
.text:00000000000027B2 loc_27B2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000027B2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000027B2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000027B7                 add     r15, 3
.text:00000000000027BB                 xor     eax, eax
.text:00000000000027BD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000027C2                 xor     r8d, r8d
.text:00000000000027C5                 mov     r13, rdx
.text:00000000000027C8                 mov     ebx, 27h ; '''
.text:00000000000027CD                 jmp     loc_21E9
.text:00000000000027CD ; ---------------------------------------------------------------------------
.text:00000000000027D2                 align 8
.text:00000000000027D8
.text:00000000000027D8 loc_27D8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000027D8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000027DD                 jz      short loc_2800
.text:00000000000027DF                 lea     rcx, [rbp+2]
.text:00000000000027E3                 cmp     rcx, r11
.text:00000000000027E6                 jnb     short loc_2800
.text:00000000000027E8                 mov     rax, [rsp+0E8h+s]
.text:00000000000027ED                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000027F2                 jz      loc_2F82
.text:00000000000027F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002800                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002800                 xor     edx, edx
.text:0000000000002802                 xor     r12d, r12d
.text:0000000000002805                 xor     eax, eax
.text:0000000000002807                 mov     ebx, 3Fh ; '?'
.text:000000000000280C                 jmp     loc_21B8
.text:000000000000280C ; ---------------------------------------------------------------------------
.text:0000000000002811                 align 8
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002818                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000281D                 jnz     loc_3040
.text:0000000000002823                 xor     r12d, r12d
.text:0000000000002826                 xor     eax, eax
.text:0000000000002828                 mov     ebx, 3Fh ; '?'
.text:000000000000282D                 jmp     loc_21E9
.text:000000000000282D ; ---------------------------------------------------------------------------
.text:0000000000002832                 align 8
.text:0000000000002838
.text:0000000000002838 loc_2838:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002838                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002840                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002844                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002850                 mov     [rsp+0E8h+ps], rax
.text:0000000000002855                 jnz     short loc_2884
.text:0000000000002857                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000285C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002861                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002866                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000286B                 call    _strlen
.text:0000000000002870                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002876                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000287C                 mov     r11, rax
.text:000000000000287F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002884
.text:0000000000002884 loc_2884:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002884                 lea     rax, [rsp+0E8h+wc]
.text:000000000000288C                 xor     ecx, ecx
.text:000000000000288E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002892                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002897                 mov     rbx, rcx
.text:000000000000289A                 mov     [rsp+0E8h+var_60], r9
.text:00000000000028A2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000028A7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000028AC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000028B4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000028B9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000028BE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000028C3
.text:00000000000028C3 loc_28C3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000028C3                 mov     rax, [rsp+0E8h+s]
.text:00000000000028C8                 lea     r14, [rbp+rbx+0]
.text:00000000000028CD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000028D2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000028D7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000028DC                 lea     r13, [rax+r14]
.text:00000000000028E0                 sub     rdx, r14
.text:00000000000028E3                 mov     rsi, r13
.text:00000000000028E6                 call    rpl_mbrtowc
.text:00000000000028EB                 test    rax, rax
.text:00000000000028EE                 mov     r15, rax
.text:00000000000028F1                 jz      short loc_2941
.text:00000000000028F3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000028F7                 jz      loc_2F15
.text:00000000000028FD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002901                 jz      loc_2EA1
.text:0000000000002907                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000290C                 setz    al
.text:000000000000290F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002913                 jnz     loc_2AB0
.text:0000000000002919
.text:0000000000002919 loc_2919:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002919                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002919                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002920                 call    _iswprint
.text:0000000000002925                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000292A                 test    eax, eax
.text:000000000000292C                 mov     eax, 0
.text:0000000000002931                 cmovz   r12d, eax
.text:0000000000002935                 add     rbx, r15
.text:0000000000002938                 call    _mbsinit
.text:000000000000293D                 test    eax, eax
.text:000000000000293F                 jz      short loc_28C3
.text:0000000000002941
.text:0000000000002941 loc_2941:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002941                 mov     edx, r12d
.text:0000000000002944                 mov     rdi, rbx
.text:0000000000002947                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000294D                 xor     edx, 1
.text:0000000000002950                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002955                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000295B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000295F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002967                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000296C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002971                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002976
.text:0000000000002976 loc_2976:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002976                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002976                 cmp     rdi, 1
.text:000000000000297A                 jbe     loc_2F7B
.text:0000000000002980
.text:0000000000002980 loc_2980:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002980                 mov     rcx, rdi
.text:0000000000002983                 xor     esi, esi
.text:0000000000002985                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000298B                 add     rcx, rbp
.text:000000000000298E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002993                 jmp     loc_2A4E
.text:0000000000002993 ; ---------------------------------------------------------------------------
.text:0000000000002998                 align 20h
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000029A0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000029A5                 setz    al
.text:00000000000029A8                 test    r9b, r9b
.text:00000000000029AB                 jnz     loc_2E60
.text:00000000000029B1                 mov     esi, r8d
.text:00000000000029B4                 xor     esi, 1
.text:00000000000029B7                 and     al, sil
.text:00000000000029BA                 jz      short loc_29EB
.text:00000000000029BC                 cmp     r13, r15
.text:00000000000029BF                 jbe     short loc_29C6
.text:00000000000029C1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000029C6
.text:00000000000029C6 loc_29C6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000029C6                 lea     rsi, [r15+1]
.text:00000000000029CA                 cmp     r13, rsi
.text:00000000000029CD                 jbe     short loc_29D5
.text:00000000000029CF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000029D5
.text:00000000000029D5 loc_29D5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000029D5                 lea     rsi, [r15+2]
.text:00000000000029D9                 cmp     r13, rsi
.text:00000000000029DC                 jbe     short loc_29E4
.text:00000000000029DE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000029E4
.text:00000000000029E4 loc_29E4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000029E4                 add     r15, 3
.text:00000000000029E8                 mov     r8d, eax
.text:00000000000029EB
.text:00000000000029EB loc_29EB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000029EB                 cmp     r13, r15
.text:00000000000029EE                 jbe     short loc_29F5
.text:00000000000029F0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000029F5
.text:00000000000029F5 loc_29F5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000029F5                 lea     rax, [r15+1]
.text:00000000000029F9                 cmp     r13, rax
.text:00000000000029FC                 jbe     short loc_2A0B
.text:00000000000029FE                 mov     eax, ebx
.text:0000000000002A00                 shr     al, 6
.text:0000000000002A03                 add     eax, 30h ; '0'
.text:0000000000002A06                 mov     [r14+r15+1], al
.text:0000000000002A0B
.text:0000000000002A0B loc_2A0B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002A0B                 lea     rax, [r15+2]
.text:0000000000002A0F                 cmp     r13, rax
.text:0000000000002A12                 jbe     short loc_2A24
.text:0000000000002A14                 mov     eax, ebx
.text:0000000000002A16                 shr     al, 3
.text:0000000000002A19                 and     eax, 7
.text:0000000000002A1C                 add     eax, 30h ; '0'
.text:0000000000002A1F                 mov     [r14+r15+2], al
.text:0000000000002A24
.text:0000000000002A24 loc_2A24:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002A24                 and     ebx, 7
.text:0000000000002A27                 add     rbp, 1
.text:0000000000002A2B                 add     r15, 3
.text:0000000000002A2F                 add     ebx, 30h ; '0'
.text:0000000000002A32                 cmp     rbp, rcx
.text:0000000000002A35                 jnb     loc_2220
.text:0000000000002A3B                 mov     esi, edx
.text:0000000000002A3D
.text:0000000000002A3D loc_2A3D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002A3D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002A3D                 cmp     r13, r15
.text:0000000000002A40                 jbe     short loc_2A46
.text:0000000000002A42                 mov     [r14+r15], bl
.text:0000000000002A46
.text:0000000000002A46 loc_2A46:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002A46                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002A4A                 add     r15, 1
.text:0000000000002A4E
.text:0000000000002A4E loc_2A4E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002A4E                 test    dl, dl
.text:0000000000002A50                 jnz     loc_29A0
.text:0000000000002A56                 mov     eax, esi
.text:0000000000002A58                 xor     eax, 1
.text:0000000000002A5B                 and     eax, r8d
.text:0000000000002A5E                 test    r10b, r10b
.text:0000000000002A61                 jz      short loc_2A71
.text:0000000000002A63                 cmp     r13, r15
.text:0000000000002A66                 jbe     short loc_2A6D
.text:0000000000002A68                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002A6D
.text:0000000000002A6D loc_2A6D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002A6D                 add     r15, 1
.text:0000000000002A71
.text:0000000000002A71 loc_2A71:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002A71                 add     rbp, 1
.text:0000000000002A75                 cmp     rbp, rcx
.text:0000000000002A78                 jnb     loc_21FC
.text:0000000000002A7E                 test    al, al
.text:0000000000002A80                 jz      loc_2E7E
.text:0000000000002A86                 cmp     r13, r15
.text:0000000000002A89                 jbe     short loc_2A90
.text:0000000000002A8B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002A90
.text:0000000000002A90 loc_2A90:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002A90                 lea     rax, [r15+1]
.text:0000000000002A94                 cmp     r13, rax
.text:0000000000002A97                 jbe     short loc_2A9F
.text:0000000000002A99                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002A9F
.text:0000000000002A9F loc_2A9F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002A9F                 add     r15, 2
.text:0000000000002AA3                 xor     r10d, r10d
.text:0000000000002AA6                 xor     r8d, r8d
.text:0000000000002AA9                 jmp     short loc_2A3D
.text:0000000000002AA9 ; ---------------------------------------------------------------------------
.text:0000000000002AAB                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002AB0                 cmp     r15, 1
.text:0000000000002AB4                 jz      loc_2919
.text:0000000000002ABA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002ABF                 lea     rcx, [rdi+r15]
.text:0000000000002AC3                 lea     rdx, [rdi+r14+1]
.text:0000000000002AC8                 lea     r8, [rcx+r14]
.text:0000000000002ACC                 jmp     short loc_2ADD
.text:0000000000002ACC ; ---------------------------------------------------------------------------
.text:0000000000002ACE                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002AD0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002AD0                 add     rdx, 1
.text:0000000000002AD4                 cmp     r8, rdx
.text:0000000000002AD7                 jz      loc_2919
.text:0000000000002ADD
.text:0000000000002ADD loc_2ADD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002ADD                 movzx   ecx, byte ptr [rdx]
.text:0000000000002AE0                 sub     ecx, 5Bh ; '['
.text:0000000000002AE3                 cmp     cl, 21h ; '!'
.text:0000000000002AE6                 ja      short loc_2AD0
.text:0000000000002AE8                 mov     esi, 1
.text:0000000000002AED                 shl     rsi, cl
.text:0000000000002AF0                 mov     rcx, rsi
.text:0000000000002AF3                 mov     rsi, 20000002Bh
.text:0000000000002AFD                 test    rcx, rsi
.text:0000000000002B00                 jz      short loc_2AD0
.text:0000000000002B02                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002B07                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002B0C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002B11                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002B19
.text:0000000000002B19 loc_2B19:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002B19                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002B19                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002B1E                 jz      short loc_2B30
.text:0000000000002B20                 test    al, al
.text:0000000000002B22                 mov     eax, 4
.text:0000000000002B27                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002B2C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002B30
.text:0000000000002B30 loc_2B30:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002B30                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002B30                 sub     rsp, 8
.text:0000000000002B34                 mov     rcx, rbp
.text:0000000000002B37                 mov     rsi, r13
.text:0000000000002B3A                 push    [rsp+0F0h+var_88]
.text:0000000000002B3E                 push    [rsp+0F8h+var_80]
.text:0000000000002B42                 mov     rdi, r14
.text:0000000000002B45                 push    0
.text:0000000000002B47                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002B4F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002B54                 mov     rdx, [rsp+108h+s]
.text:0000000000002B59                 and     r9d, 0FFFFFFFDh
.text:0000000000002B5D                 call    quotearg_buffer_restyled
.text:0000000000002B62                 add     rsp, 20h
.text:0000000000002B66                 mov     r15, rax
.text:0000000000002B69
.text:0000000000002B69 loc_2B69:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002B69                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002B69                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002B71                 xor     rbx, fs:28h
.text:0000000000002B7A                 mov     rax, r15
.text:0000000000002B7D                 jnz     loc_3183
.text:0000000000002B83                 add     rsp, 0B8h
.text:0000000000002B8A                 pop     rbx
.text:0000000000002B8B                 pop     rbp
.text:0000000000002B8C                 pop     r12
.text:0000000000002B8E                 pop     r13
.text:0000000000002B90                 pop     r14
.text:0000000000002B92                 pop     r15
.text:0000000000002B94                 retn
.text:0000000000002B94 ; ---------------------------------------------------------------------------
.text:0000000000002B95                 align 8
.text:0000000000002B98
.text:0000000000002B98 loc_2B98:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002B98                 mov     rbp, r11
.text:0000000000002B9B                 jmp     loc_2B19
.text:0000000000002BA0 ; ---------------------------------------------------------------------------
.text:0000000000002BA0
.text:0000000000002BA0 loc_2BA0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002BA0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002BA0                 cmp     r13, r15
.text:0000000000002BA3                 jbe     short loc_2BAA
.text:0000000000002BA5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002BAA
.text:0000000000002BAA loc_2BAA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002BAA                 lea     rax, [r15+1]
.text:0000000000002BAE                 cmp     r13, rax
.text:0000000000002BB1                 jbe     short loc_2BB9
.text:0000000000002BB3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002BB9
.text:0000000000002BB9 loc_2BB9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002BB9                 lea     rax, [r15+2]
.text:0000000000002BBD                 cmp     r13, rax
.text:0000000000002BC0                 jbe     loc_31B2
.text:0000000000002BC6                 mov     rdx, r13
.text:0000000000002BC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002BCF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002BD4                 jmp     loc_27B2
.text:0000000000002BD9 ; ---------------------------------------------------------------------------
.text:0000000000002BD9
.text:0000000000002BD9 loc_2BD9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002BD9                 mov     eax, r12d
.text:0000000000002BDC                 mov     ebx, 30h ; '0'
.text:0000000000002BE1                 xor     r12d, r12d
.text:0000000000002BE4                 jmp     loc_21E9
.text:0000000000002BE9 ; ---------------------------------------------------------------------------
.text:0000000000002BE9
.text:0000000000002BE9 loc_2BE9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002BE9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002BEF                 jmp     loc_25B9
.text:0000000000002BF4 ; ---------------------------------------------------------------------------
.text:0000000000002BF4
.text:0000000000002BF4 loc_2BF4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BF4                                         ; DATA XREF: .rodata:jpt_2021↓o
.text:0000000000002BF4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002BF6                 jnz     loc_2023        ; jumptable 00000000000121F1 case 1
.text:0000000000002BFC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C01
.text:0000000000002C01 loc_2C01:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002C01                 test    r13, r13
.text:0000000000002C04                 jnz     loc_319A
.text:0000000000002C0A                 lea     rax, asc_4A8D   ; "'"
.text:0000000000002C11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C1A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002C1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C24                 xor     r12d, r12d
.text:0000000000002C27                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C2C                 mov     [rsp+0E8h+n], 1
.text:0000000000002C35                 mov     [rsp+0E8h+s2], rax
.text:0000000000002C3A                 mov     r15d, 1
.text:0000000000002C40                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002C48                 jmp     loc_2063
.text:0000000000002C48 ; ---------------------------------------------------------------------------
.text:0000000000002C4D                 align 10h
.text:0000000000002C50
.text:0000000000002C50 loc_2C50:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C50                                         ; DATA XREF: .rodata:jpt_2021↓o
.text:0000000000002C50                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002C52                 jnz     loc_304D
.text:0000000000002C58                 test    r13, r13
.text:0000000000002C5B                 jz      loc_2E86
.text:0000000000002C61                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002C65                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002C6A                 xor     r12d, r12d
.text:0000000000002C6D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C72                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C7B
.text:0000000000002C7B loc_2C7B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002C7B                 lea     rax, unk_4A8B
.text:0000000000002C82                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C87                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C8C                 mov     [rsp+0E8h+n], 1
.text:0000000000002C95                 mov     r15d, 1
.text:0000000000002C9B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002CA0                 jmp     loc_2063
.text:0000000000002CA5 ; ---------------------------------------------------------------------------
.text:0000000000002CA5
.text:0000000000002CA5 loc_2CA5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CA5                                         ; DATA XREF: .rodata:jpt_2021↓o
.text:0000000000002CA5                 lea     rax, unk_4A8B   ; jumptable 00000000000121F1 case 6
.text:0000000000002CAC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002CB1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CB6                 xor     r12d, r12d
.text:0000000000002CB9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CC2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002CC7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002CCC                 mov     [rsp+0E8h+n], 1
.text:0000000000002CD5                 xor     r15d, r15d
.text:0000000000002CD8                 mov     [rsp+0E8h+s2], rax
.text:0000000000002CDD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002CE5                 jmp     loc_2063
.text:0000000000002CEA ; ---------------------------------------------------------------------------
.text:0000000000002CEA
.text:0000000000002CEA loc_2CEA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CEA                                         ; DATA XREF: .rodata:jpt_2021↓o
.text:0000000000002CEA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002CEF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CF4                 xor     r12d, r12d
.text:0000000000002CF7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D00                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D05                 xor     r15d, r15d
.text:0000000000002D08                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D0D                 mov     [rsp+0E8h+n], 0
.text:0000000000002D16                 mov     [rsp+0E8h+s2], 0
.text:0000000000002D1F                 jmp     loc_2063
.text:0000000000002D24 ; ---------------------------------------------------------------------------
.text:0000000000002D24
.text:0000000000002D24 loc_2D24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D24                                         ; DATA XREF: .rodata:jpt_2021↓o
.text:0000000000002D24                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002D29                 jz      short loc_2D81
.text:0000000000002D2B                 lea     rsi, asc_4A8F   ; "`"
.text:0000000000002D32                 xor     edi, edi        ; domainname
.text:0000000000002D34                 mov     edx, 5          ; category
.text:0000000000002D39                 call    _dcgettext
.text:0000000000002D3E                 mov     rcx, rax
.text:0000000000002D41                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002D46                 lea     rax, asc_4A8F   ; "`"
.text:0000000000002D4D                 cmp     rcx, rax
.text:0000000000002D50                 jz      loc_30EE
.text:0000000000002D56
.text:0000000000002D56 loc_2D56:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002D56                 lea     rsi, asc_4A8D   ; "'"
.text:0000000000002D5D                 xor     edi, edi        ; domainname
.text:0000000000002D5F                 mov     edx, 5          ; category
.text:0000000000002D64                 call    _dcgettext
.text:0000000000002D69                 mov     rcx, rax
.text:0000000000002D6C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002D71                 lea     rax, asc_4A8D   ; "'"
.text:0000000000002D78                 cmp     rcx, rax
.text:0000000000002D7B                 jz      loc_3104
.text:0000000000002D81
.text:0000000000002D81 loc_2D81:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002D81                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002D81                 xor     r15d, r15d
.text:0000000000002D84                 test    ebx, ebx
.text:0000000000002D86                 jz      loc_2F4D
.text:0000000000002D8C
.text:0000000000002D8C loc_2D8C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002D8C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002D8C                 test    ebx, ebx
.text:0000000000002D8E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002D93                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002D98                 xor     r12d, r12d
.text:0000000000002D9B                 mov     rdi, rbx        ; s
.text:0000000000002D9E                 call    _strlen
.text:0000000000002DA3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002DA8                 mov     [rsp+0E8h+n], rax
.text:0000000000002DAD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002DB2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DC0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DC5                 jmp     loc_2063
.text:0000000000002DCA ; ---------------------------------------------------------------------------
.text:0000000000002DCA
.text:0000000000002DCA loc_2DCA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DCA                                         ; DATA XREF: .rodata:jpt_2021↓o
.text:0000000000002DCA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002DCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DD4                 xor     r12d, r12d
.text:0000000000002DD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DE0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002DE5                 xor     r15d, r15d
.text:0000000000002DE8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002DED                 mov     [rsp+0E8h+n], 0
.text:0000000000002DF6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002DFF                 jmp     loc_2063
.text:0000000000002E04 ; ---------------------------------------------------------------------------
.text:0000000000002E04
.text:0000000000002E04 loc_2E04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E04                                         ; DATA XREF: .rodata:jpt_2021↓o
.text:0000000000002E04                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002E09                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E0E                 xor     r12d, r12d
.text:0000000000002E11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E1A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002E1F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E24                 jmp     loc_2043
.text:0000000000002E29 ; ---------------------------------------------------------------------------
.text:0000000000002E29
.text:0000000000002E29 loc_2E29:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002E29                 cmp     r13, r15
.text:0000000000002E2C                 jbe     short loc_2E33
.text:0000000000002E2E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002E33
.text:0000000000002E33 loc_2E33:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002E33                 lea     rax, [rcx+2]
.text:0000000000002E37                 cmp     r13, rax
.text:0000000000002E3A                 jbe     short loc_2E42
.text:0000000000002E3C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002E42
.text:0000000000002E42 loc_2E42:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002E42                 mov     eax, r12d
.text:0000000000002E45                 lea     r15, [rcx+3]
.text:0000000000002E49                 xor     r12d, r12d
.text:0000000000002E4C                 mov     ebx, 30h ; '0'
.text:0000000000002E51                 jmp     loc_21B8
.text:0000000000002E51 ; ---------------------------------------------------------------------------
.text:0000000000002E56                 align 20h
.text:0000000000002E60
.text:0000000000002E60 loc_2E60:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002E60                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002E65                 mov     rbp, r11
.text:0000000000002E68                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002E6C                 jmp     loc_2B19
.text:0000000000002E71 ; ---------------------------------------------------------------------------
.text:0000000000002E71
.text:0000000000002E71 loc_2E71:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002E71                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E76                 xor     r12d, r12d
.text:0000000000002E79                 jmp     loc_2980
.text:0000000000002E7E ; ---------------------------------------------------------------------------
.text:0000000000002E7E
.text:0000000000002E7E loc_2E7E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002E7E                 xor     r10d, r10d
.text:0000000000002E81                 jmp     loc_2A3D
.text:0000000000002E86 ; ---------------------------------------------------------------------------
.text:0000000000002E86
.text:0000000000002E86 loc_2E86:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002E86                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E8F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E94                 xor     r12d, r12d
.text:0000000000002E97                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E9C                 jmp     loc_2C7B
.text:0000000000002EA1 ; ---------------------------------------------------------------------------
.text:0000000000002EA1
.text:0000000000002EA1 loc_2EA1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002EA1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002EA6                 mov     rsi, r14
.text:0000000000002EA9                 mov     rcx, r13
.text:0000000000002EAC                 mov     rax, rbx
.text:0000000000002EAF                 mov     rdi, rbx
.text:0000000000002EB2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002EB8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002EBD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002EC5                 cmp     rsi, r11
.text:0000000000002EC8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002ECE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002ED6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002EDB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002EE0                 jnb     short loc_2F08
.text:0000000000002EE2                 cmp     byte ptr [rcx], 0
.text:0000000000002EE5                 jnz     short loc_2EF7
.text:0000000000002EE7                 jmp     short loc_2F08
.text:0000000000002EE7 ; ---------------------------------------------------------------------------
.text:0000000000002EE9                 align 10h
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002EF0                 cmp     byte ptr [r9+rax], 0
.text:0000000000002EF5                 jz      short loc_2F05
.text:0000000000002EF7
.text:0000000000002EF7 loc_2EF7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002EF7                 add     rax, 1
.text:0000000000002EFB                 lea     rdx, [rbp+rax+0]
.text:0000000000002F00                 cmp     r11, rdx
.text:0000000000002F03                 ja      short loc_2EF0
.text:0000000000002F05
.text:0000000000002F05 loc_2F05:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002F05                 mov     rdi, rax
.text:0000000000002F08
.text:0000000000002F08 loc_2F08:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002F08                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002F08                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002F0D                 xor     r12d, r12d
.text:0000000000002F10                 jmp     loc_2976
.text:0000000000002F15 ; ---------------------------------------------------------------------------
.text:0000000000002F15
.text:0000000000002F15 loc_2F15:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002F15                 mov     rdi, rbx
.text:0000000000002F18                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002F1E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002F23                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002F29                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002F31                 xor     r12d, r12d
.text:0000000000002F34                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002F39                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002F3E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002F43                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002F48                 jmp     loc_2976
.text:0000000000002F4D ; ---------------------------------------------------------------------------
.text:0000000000002F4D
.text:0000000000002F4D loc_2F4D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000002F4D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000002F52                 movzx   eax, byte ptr [rdx]
.text:0000000000002F55                 test    al, al
.text:0000000000002F57                 jz      loc_2D8C
.text:0000000000002F5D                 nop     dword ptr [rax]
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000002F60                 cmp     r13, r15
.text:0000000000002F63                 jbe     short loc_2F69
.text:0000000000002F65                 mov     [r14+r15], al
.text:0000000000002F69
.text:0000000000002F69 loc_2F69:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000002F69                 add     r15, 1
.text:0000000000002F6D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000002F72                 test    al, al
.text:0000000000002F74                 jnz     short loc_2F60
.text:0000000000002F76                 jmp     loc_2D8C
.text:0000000000002F7B ; ---------------------------------------------------------------------------
.text:0000000000002F7B
.text:0000000000002F7B loc_2F7B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000002F7B                 mov     eax, edx
.text:0000000000002F7D                 jmp     loc_24D7
.text:0000000000002F82 ; ---------------------------------------------------------------------------
.text:0000000000002F82
.text:0000000000002F82 loc_2F82:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000002F82                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000002F86                 cmp     bl, 3Eh ; '>'
.text:0000000000002F89                 ja      loc_2800
.text:0000000000002F8F                 mov     rax, 7000A38200000000h
.text:0000000000002F99                 bt      rax, rbx
.text:0000000000002F9D                 jnb     loc_2800
.text:0000000000002FA3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FA8                 jnz     loc_3192
.text:0000000000002FAE                 cmp     r13, r15
.text:0000000000002FB1                 jbe     short loc_2FB8
.text:0000000000002FB3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000002FB8
.text:0000000000002FB8 loc_2FB8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000002FB8                 lea     rax, [r15+1]
.text:0000000000002FBC                 cmp     r13, rax
.text:0000000000002FBF                 jbe     short loc_2FC7
.text:0000000000002FC1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000002FC7
.text:0000000000002FC7 loc_2FC7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000002FC7                 lea     rax, [r15+2]
.text:0000000000002FCB                 cmp     r13, rax
.text:0000000000002FCE                 jbe     short loc_2FD6
.text:0000000000002FD0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000002FD6
.text:0000000000002FD6 loc_2FD6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000002FD6                 lea     rax, [r15+3]
.text:0000000000002FDA                 cmp     r13, rax
.text:0000000000002FDD                 jbe     short loc_2FE5
.text:0000000000002FDF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000002FE5
.text:0000000000002FE5 loc_2FE5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000002FE5                 add     r15, 4
.text:0000000000002FE9                 xor     edx, edx
.text:0000000000002FEB                 xor     r12d, r12d
.text:0000000000002FEE                 xor     eax, eax
.text:0000000000002FF0                 mov     rbp, rcx
.text:0000000000002FF3                 jmp     loc_21B8
.text:0000000000002FF8 ; ---------------------------------------------------------------------------
.text:0000000000002FF8
.text:0000000000002FF8 loc_2FF8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FF8                                         ; DATA XREF: .rodata:jpt_2021↓o
.text:0000000000002FF8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000002FFA                 jz      loc_3188
.text:0000000000003000                 lea     rax, asc_4A8D   ; "'"
.text:0000000000003007                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000300C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003011                 xor     r12d, r12d
.text:0000000000003014                 mov     [rsp+0E8h+var_98], 0
.text:000000000000301D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003022                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003027                 mov     [rsp+0E8h+n], 1
.text:0000000000003030                 xor     r15d, r15d
.text:0000000000003033                 mov     [rsp+0E8h+s2], rax
.text:0000000000003038                 jmp     loc_2063
.text:0000000000003038 ; ---------------------------------------------------------------------------
.text:000000000000303D                 align 20h
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003040                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003040                 mov     rbp, r11
.text:0000000000003043                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003048                 jmp     loc_2B19
.text:000000000000304D ; ---------------------------------------------------------------------------
.text:000000000000304D
.text:000000000000304D loc_304D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000304D                 lea     rax, unk_4A8B
.text:0000000000003054                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003059                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000305E                 xor     r12d, r12d
.text:0000000000003061                 mov     [rsp+0E8h+var_98], 0
.text:000000000000306A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000306F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003074                 mov     [rsp+0E8h+n], 1
.text:000000000000307D                 xor     r15d, r15d
.text:0000000000003080                 mov     [rsp+0E8h+s2], rax
.text:0000000000003085                 jmp     loc_2063
.text:000000000000308A ; ---------------------------------------------------------------------------
.text:000000000000308A
.text:000000000000308A loc_308A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000308A                 mov     eax, edx
.text:000000000000308C
.text:000000000000308C loc_308C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000308C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000308C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003091                 test    rbx, rbx
.text:0000000000003094                 jz      short loc_30C2
.text:0000000000003096                 test    al, al
.text:0000000000003098                 jz      short loc_30C2
.text:000000000000309A                 movzx   ecx, byte ptr [rbx]
.text:000000000000309D                 mov     rax, rbx
.text:00000000000030A0                 test    cl, cl
.text:00000000000030A2                 jz      short loc_30C2
.text:00000000000030A4                 mov     rdx, r15
.text:00000000000030A7                 sub     rax, r15
.text:00000000000030AA
.text:00000000000030AA loc_30AA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000030AA                 cmp     r13, rdx
.text:00000000000030AD                 jbe     short loc_30B3
.text:00000000000030AF                 mov     [r14+rdx], cl
.text:00000000000030B3
.text:00000000000030B3 loc_30B3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000030B3                 add     rdx, 1
.text:00000000000030B7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000030BB                 test    cl, cl
.text:00000000000030BD                 jnz     short loc_30AA
.text:00000000000030BF                 mov     r15, rdx
.text:00000000000030C2
.text:00000000000030C2 loc_30C2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000030C2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000030C2                 cmp     r13, r15
.text:00000000000030C5                 jbe     loc_2B69
.text:00000000000030CB                 mov     byte ptr [r14+r15], 0
.text:00000000000030D0                 jmp     loc_2B69
.text:00000000000030D5 ; ---------------------------------------------------------------------------
.text:00000000000030D5
.text:00000000000030D5 loc_30D5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000030D5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000030DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000030DF                 mov     rbp, r11
.text:00000000000030E2                 setz    al
.text:00000000000030E5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000030E9                 jmp     loc_2B19
.text:00000000000030EE ; ---------------------------------------------------------------------------
.text:00000000000030EE
.text:00000000000030EE loc_30EE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000030EE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000030F2                 mov     rdi, rcx
.text:00000000000030F5                 call    gettext_quote
.text:00000000000030FA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000030FF                 jmp     loc_2D56
.text:0000000000003104 ; ---------------------------------------------------------------------------
.text:0000000000003104
.text:0000000000003104 loc_3104:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003104                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003108                 mov     rdi, rcx
.text:000000000000310B                 call    gettext_quote
.text:0000000000003110                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003115                 jmp     loc_2D81
.text:000000000000311A ; ---------------------------------------------------------------------------
.text:000000000000311A
.text:000000000000311A loc_311A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000311A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000311F                 mov     rbp, r11
.text:0000000000003122                 mov     eax, edx
.text:0000000000003124                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003128                 jmp     loc_2B19
.text:000000000000312D ; ---------------------------------------------------------------------------
.text:000000000000312D
.text:000000000000312D loc_312D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000312D                 sub     rsp, 8
.text:0000000000003131                 mov     r8d, 5
.text:0000000000003137                 mov     rcx, r11
.text:000000000000313A                 push    [rsp+0F0h+var_88]
.text:000000000000313E                 push    [rsp+0F8h+var_80]
.text:0000000000003142                 mov     rdi, r14
.text:0000000000003145                 push    [rsp+100h+var_C8]
.text:0000000000003149                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003151                 mov     rdx, [rsp+108h+s]
.text:0000000000003156                 mov     rsi, [rsp+108h+var_98]
.text:000000000000315B                 call    quotearg_buffer_restyled
.text:0000000000003160                 add     rsp, 20h
.text:0000000000003164                 mov     r15, rax
.text:0000000000003167                 jmp     loc_2B69
.text:000000000000316C ; ---------------------------------------------------------------------------
.text:000000000000316C
.text:000000000000316C loc_316C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000316C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003171                 jmp     loc_308C
.text:0000000000003176 ; ---------------------------------------------------------------------------
.text:0000000000003176
.text:0000000000003176 loc_3176:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003176                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000317E                 jmp     loc_2B19
.text:0000000000003183 ; ---------------------------------------------------------------------------
.text:0000000000003183
.text:0000000000003183 loc_3183:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003183                 call    ___stack_chk_fail
.text:0000000000003188 ; ---------------------------------------------------------------------------
.text:0000000000003188
.text:0000000000003188 loc_3188:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003188                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000318D                 jmp     loc_2C01
.text:0000000000003192 ; ---------------------------------------------------------------------------
.text:0000000000003192
.text:0000000000003192 loc_3192:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003192                 mov     rbp, r11
.text:0000000000003195                 jmp     loc_2B30
.text:000000000000319A ; ---------------------------------------------------------------------------
.text:000000000000319A
.text:000000000000319A loc_319A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000319A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000319F                 xor     eax, eax
.text:00000000000031A1                 xor     r12d, r12d
.text:00000000000031A4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031AD                 jmp     loc_2754
.text:00000000000031B2 ; ---------------------------------------------------------------------------
.text:00000000000031B2
.text:00000000000031B2 loc_31B2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000031B2                 mov     rdx, r13
.text:00000000000031B5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000031BA                 jmp     loc_27B2
.text:00000000000031BF ; ---------------------------------------------------------------------------
.text:00000000000031BF
.text:00000000000031BF def_2021:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000031BF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000031BF ; } // starts at 1F90
.text:00000000000031BF quotearg_buffer_restyled endp
.text:00000000000031BF
.text:00000000000031BF ; ---------------------------------------------------------------------------
.text:00000000000031C4                 align 10h
.text:00000000000031D0
.text:00000000000031D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031D0
.text:00000000000031D0
.text:00000000000031D0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000031D0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000031D0
.text:00000000000031D0 var_50          = qword ptr -50h
.text:00000000000031D0 var_48          = qword ptr -48h
.text:00000000000031D0 var_40          = dword ptr -40h
.text:00000000000031D0 var_3C          = dword ptr -3Ch
.text:00000000000031D0
.text:00000000000031D0 ; __unwind {
.text:00000000000031D0                 push    r15
.text:00000000000031D2                 push    r14
.text:00000000000031D4                 movsxd  r15, edi
.text:00000000000031D7                 push    r13
.text:00000000000031D9                 push    r12
.text:00000000000031DB                 mov     r14, rdx
.text:00000000000031DE                 push    rbp
.text:00000000000031DF                 push    rbx
.text:00000000000031E0                 mov     rbp, rcx
.text:00000000000031E3                 sub     rsp, 28h
.text:00000000000031E7                 mov     [rsp+58h+var_50], rsi
.text:00000000000031EC                 call    ___errno_location
.text:00000000000031F1                 mov     r13, rax
.text:00000000000031F4                 mov     eax, [rax]
.text:00000000000031F6                 test    r15d, r15d
.text:00000000000031F9                 mov     rbx, cs:slotvec
.text:0000000000003200                 mov     [rsp+58h+var_40], eax
.text:0000000000003204                 js      loc_3371
.text:000000000000320A                 cmp     cs:nslots, r15d
.text:0000000000003211                 jg      short loc_3275
.text:0000000000003213                 cmp     r15d, 7FFFFFFFh
.text:000000000000321A                 jz      loc_3376
.text:0000000000003220                 lea     r12d, [r15+1]
.text:0000000000003224                 lea     rax, slotvec0
.text:000000000000322B                 movsxd  rsi, r12d
.text:000000000000322E                 shl     rsi, 4
.text:0000000000003232                 cmp     rbx, rax
.text:0000000000003235                 jz      loc_3350
.text:000000000000323B                 mov     rdi, rbx
.text:000000000000323E                 call    xrealloc
.text:0000000000003243                 mov     rbx, rax
.text:0000000000003246                 mov     cs:slotvec, rax
.text:000000000000324D
.text:000000000000324D loc_324D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000324D                 movsxd  rdi, cs:nslots
.text:0000000000003254                 mov     edx, r12d
.text:0000000000003257                 xor     esi, esi        ; c
.text:0000000000003259                 sub     edx, edi
.text:000000000000325B                 shl     rdi, 4
.text:000000000000325F                 movsxd  rdx, edx
.text:0000000000003262                 add     rdi, rbx        ; s
.text:0000000000003265                 shl     rdx, 4          ; n
.text:0000000000003269                 call    _memset
.text:000000000000326E                 mov     cs:nslots, r12d
.text:0000000000003275
.text:0000000000003275 loc_3275:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003275                 mov     eax, [rbp+4]
.text:0000000000003278                 shl     r15, 4
.text:000000000000327C                 sub     rsp, 8
.text:0000000000003280                 add     rbx, r15
.text:0000000000003283                 lea     r15, [rbp+8]
.text:0000000000003287                 mov     r8d, [rbp+0]
.text:000000000000328B                 mov     r11, [rbx]
.text:000000000000328E                 mov     r12, [rbx+8]
.text:0000000000003292                 mov     rcx, r14
.text:0000000000003295                 or      eax, 1
.text:0000000000003298                 mov     [rsp+60h+var_3C], eax
.text:000000000000329C                 push    qword ptr [rbp+30h]
.text:000000000000329F                 mov     r9d, eax
.text:00000000000032A2                 push    qword ptr [rbp+28h]
.text:00000000000032A5                 push    r15
.text:00000000000032A7                 mov     rsi, r11
.text:00000000000032AA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000032AF                 mov     rdi, r12
.text:00000000000032B2                 mov     [rsp+78h+var_48], r11
.text:00000000000032B7                 call    quotearg_buffer_restyled
.text:00000000000032BC                 add     rsp, 20h
.text:00000000000032C0                 mov     r11, [rsp+58h+var_48]
.text:00000000000032C5                 cmp     r11, rax
.text:00000000000032C8                 ja      short loc_3331
.text:00000000000032CA                 lea     rsi, [rax+1]
.text:00000000000032CE                 lea     rax, slot0
.text:00000000000032D5                 cmp     r12, rax
.text:00000000000032D8                 mov     [rbx], rsi
.text:00000000000032DB                 jz      short loc_32EF
.text:00000000000032DD                 mov     rdi, r12        ; ptr
.text:00000000000032E0                 mov     [rsp+58h+var_48], rsi
.text:00000000000032E5                 call    _free
.text:00000000000032EA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000032EF
.text:00000000000032EF loc_32EF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000032EF                 mov     rdi, rsi
.text:00000000000032F2                 mov     [rsp+58h+var_48], rsi
.text:00000000000032F7                 call    xmalloc
.text:00000000000032FC                 sub     rsp, 8
.text:0000000000003300                 mov     [rbx+8], rax
.text:0000000000003304                 mov     r8d, [rbp+0]
.text:0000000000003308                 push    qword ptr [rbp+30h]
.text:000000000000330B                 push    qword ptr [rbp+28h]
.text:000000000000330E                 mov     rcx, r14
.text:0000000000003311                 push    r15
.text:0000000000003313                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003318                 mov     rdi, rax
.text:000000000000331B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003320                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003325                 mov     r12, rax
.text:0000000000003328                 call    quotearg_buffer_restyled
.text:000000000000332D                 add     rsp, 20h
.text:0000000000003331
.text:0000000000003331 loc_3331:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003331                 mov     eax, [rsp+58h+var_40]
.text:0000000000003335                 mov     [r13+0], eax
.text:0000000000003339                 add     rsp, 28h
.text:000000000000333D                 mov     rax, r12
.text:0000000000003340                 pop     rbx
.text:0000000000003341                 pop     rbp
.text:0000000000003342                 pop     r12
.text:0000000000003344                 pop     r13
.text:0000000000003346                 pop     r14
.text:0000000000003348                 pop     r15
.text:000000000000334A                 retn
.text:000000000000334A ; ---------------------------------------------------------------------------
.text:000000000000334B                 align 10h
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003350                 xor     edi, edi
.text:0000000000003352                 call    xrealloc
.text:0000000000003357                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000335F                 mov     rbx, rax
.text:0000000000003362                 mov     cs:slotvec, rax
.text:0000000000003369                 movups  xmmword ptr [rax], xmm0
.text:000000000000336C                 jmp     loc_324D
.text:0000000000003371 ; ---------------------------------------------------------------------------
.text:0000000000003371
.text:0000000000003371 loc_3371:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003371                 call    _abort
.text:0000000000003376 ; ---------------------------------------------------------------------------
.text:0000000000003376
.text:0000000000003376 loc_3376:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003376                 call    xalloc_die
.text:0000000000003376 ; } // starts at 31D0
.text:0000000000003376 quotearg_n_options endp
.text:0000000000003376
.text:0000000000003376 ; ---------------------------------------------------------------------------
.text:000000000000337B                 align 20h
.text:0000000000003380
.text:0000000000003380 ; =============== S U B R O U T I N E =======================================
.text:0000000000003380
.text:0000000000003380 ; Attributes: info_from_lumina
.text:0000000000003380
.text:0000000000003380 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003380                 public clone_quoting_options
.text:0000000000003380 clone_quoting_options proc near
.text:0000000000003380 ; __unwind {
.text:0000000000003380                 push    r12
.text:0000000000003382                 push    rbp
.text:0000000000003383                 push    rbx
.text:0000000000003384                 mov     rbx, rdi
.text:0000000000003387                 call    ___errno_location
.text:000000000000338C                 mov     r12d, [rax]
.text:000000000000338F                 mov     rbp, rax
.text:0000000000003392                 lea     rax, default_quoting_options
.text:0000000000003399                 test    rbx, rbx
.text:000000000000339C                 mov     esi, 38h ; '8'  ; n
.text:00000000000033A1                 cmovz   rbx, rax
.text:00000000000033A5                 mov     rdi, rbx        ; src
.text:00000000000033A8                 call    xmemdup
.text:00000000000033AD                 mov     [rbp+0], r12d
.text:00000000000033B1                 pop     rbx
.text:00000000000033B2                 pop     rbp
.text:00000000000033B3                 pop     r12
.text:00000000000033B5                 retn
.text:00000000000033B5 ; } // starts at 3380
.text:00000000000033B5 clone_quoting_options endp
.text:00000000000033B5
.text:00000000000033B5 ; ---------------------------------------------------------------------------
.text:00000000000033B6                 align 20h
.text:00000000000033C0
.text:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033C0
.text:00000000000033C0
.text:00000000000033C0                 public get_quoting_style
.text:00000000000033C0 get_quoting_style proc near
.text:00000000000033C0 ; __unwind {
.text:00000000000033C0                 lea     rax, default_quoting_options
.text:00000000000033C7                 test    rdi, rdi
.text:00000000000033CA                 cmovz   rdi, rax
.text:00000000000033CE                 mov     eax, [rdi]
.text:00000000000033D0                 retn
.text:00000000000033D0 ; } // starts at 33C0
.text:00000000000033D0 get_quoting_style endp
.text:00000000000033D0
.text:00000000000033D0 ; ---------------------------------------------------------------------------
.text:00000000000033D1                 align 20h
.text:00000000000033E0
.text:00000000000033E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033E0
.text:00000000000033E0
.text:00000000000033E0                 public set_quoting_style
.text:00000000000033E0 set_quoting_style proc near
.text:00000000000033E0 ; __unwind {
.text:00000000000033E0                 lea     rax, default_quoting_options
.text:00000000000033E7                 test    rdi, rdi
.text:00000000000033EA                 cmovz   rdi, rax
.text:00000000000033EE                 mov     [rdi], esi
.text:00000000000033F0                 retn
.text:00000000000033F0 ; } // starts at 33E0
.text:00000000000033F0 set_quoting_style endp
.text:00000000000033F0
.text:00000000000033F0 ; ---------------------------------------------------------------------------
.text:00000000000033F1                 align 20h
.text:0000000000003400
.text:0000000000003400 ; =============== S U B R O U T I N E =======================================
.text:0000000000003400
.text:0000000000003400 ; Attributes: info_from_lumina
.text:0000000000003400
.text:0000000000003400 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003400                 public set_char_quoting
.text:0000000000003400 set_char_quoting proc near
.text:0000000000003400 ; __unwind {
.text:0000000000003400                 lea     rax, default_quoting_options
.text:0000000000003407                 test    rdi, rdi
.text:000000000000340A                 mov     ecx, esi
.text:000000000000340C                 cmovz   rdi, rax
.text:0000000000003410                 mov     eax, esi
.text:0000000000003412                 and     ecx, 1Fh
.text:0000000000003415                 shr     al, 5
.text:0000000000003418                 movzx   eax, al
.text:000000000000341B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003420                 mov     esi, [rdi]
.text:0000000000003422                 mov     eax, esi
.text:0000000000003424                 shr     eax, cl
.text:0000000000003426                 xor     edx, eax
.text:0000000000003428                 and     eax, 1
.text:000000000000342B                 and     edx, 1
.text:000000000000342E                 shl     edx, cl
.text:0000000000003430                 xor     edx, esi
.text:0000000000003432                 mov     [rdi], edx
.text:0000000000003434                 retn
.text:0000000000003434 ; } // starts at 3400
.text:0000000000003434 set_char_quoting endp
.text:0000000000003434
.text:0000000000003434 ; ---------------------------------------------------------------------------
.text:0000000000003435                 align 20h
.text:0000000000003440
.text:0000000000003440 ; =============== S U B R O U T I N E =======================================
.text:0000000000003440
.text:0000000000003440
.text:0000000000003440                 public set_quoting_flags
.text:0000000000003440 set_quoting_flags proc near
.text:0000000000003440 ; __unwind {
.text:0000000000003440                 lea     rax, default_quoting_options
.text:0000000000003447                 test    rdi, rdi
.text:000000000000344A                 cmovz   rdi, rax
.text:000000000000344E                 mov     eax, [rdi+4]
.text:0000000000003451                 mov     [rdi+4], esi
.text:0000000000003454                 retn
.text:0000000000003454 ; } // starts at 3440
.text:0000000000003454 set_quoting_flags endp
.text:0000000000003454
.text:0000000000003454 ; ---------------------------------------------------------------------------
.text:0000000000003455                 align 20h
.text:0000000000003460
.text:0000000000003460 ; =============== S U B R O U T I N E =======================================
.text:0000000000003460
.text:0000000000003460 ; Attributes: info_from_lumina
.text:0000000000003460
.text:0000000000003460 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003460                 public set_custom_quoting
.text:0000000000003460 set_custom_quoting proc near
.text:0000000000003460 ; __unwind {
.text:0000000000003460                 lea     rax, default_quoting_options
.text:0000000000003467                 test    rdi, rdi
.text:000000000000346A                 cmovz   rdi, rax
.text:000000000000346E                 test    rsi, rsi
.text:0000000000003471                 mov     dword ptr [rdi], 0Ah
.text:0000000000003477                 jz      short loc_3487
.text:0000000000003479                 test    rdx, rdx
.text:000000000000347C                 jz      short loc_3487
.text:000000000000347E                 mov     [rdi+28h], rsi
.text:0000000000003482                 mov     [rdi+30h], rdx
.text:0000000000003486                 retn
.text:0000000000003487 ; ---------------------------------------------------------------------------
.text:0000000000003487
.text:0000000000003487 loc_3487:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003487                                         ; set_custom_quoting+1C↑j
.text:0000000000003487                 sub     rsp, 8
.text:000000000000348B                 call    _abort
.text:000000000000348B ; } // starts at 3460
.text:000000000000348B set_custom_quoting endp
.text:000000000000348B
.text:0000000000003490
.text:0000000000003490 ; =============== S U B R O U T I N E =======================================
.text:0000000000003490
.text:0000000000003490 ; Attributes: info_from_lumina
.text:0000000000003490
.text:0000000000003490 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003490                 public quotearg_buffer
.text:0000000000003490 quotearg_buffer proc near
.text:0000000000003490
.text:0000000000003490 var_40          = qword ptr -40h
.text:0000000000003490
.text:0000000000003490 ; __unwind {
.text:0000000000003490                 push    r15
.text:0000000000003492                 push    r14
.text:0000000000003494                 lea     rax, default_quoting_options
.text:000000000000349B                 push    r13
.text:000000000000349D                 push    r12
.text:000000000000349F                 mov     r13, rdi
.text:00000000000034A2                 push    rbp
.text:00000000000034A3                 push    rbx
.text:00000000000034A4                 mov     rbx, r8
.text:00000000000034A7                 mov     r14, rsi
.text:00000000000034AA                 mov     r15, rdx
.text:00000000000034AD                 sub     rsp, 18h
.text:00000000000034B1                 test    r8, r8
.text:00000000000034B4                 cmovz   rbx, rax
.text:00000000000034B8                 mov     [rsp+48h+var_40], rcx
.text:00000000000034BD                 call    ___errno_location
.text:00000000000034C2                 mov     r12d, [rax]
.text:00000000000034C5                 mov     rbp, rax
.text:00000000000034C8                 lea     rax, [rbx+8]
.text:00000000000034CC                 sub     rsp, 8
.text:00000000000034D0                 mov     r9d, [rbx+4]
.text:00000000000034D4                 push    qword ptr [rbx+30h]
.text:00000000000034D7                 mov     r8d, [rbx]
.text:00000000000034DA                 push    qword ptr [rbx+28h]
.text:00000000000034DD                 mov     rdx, r15
.text:00000000000034E0                 push    rax
.text:00000000000034E1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000034E6                 mov     rsi, r14
.text:00000000000034E9                 mov     rdi, r13
.text:00000000000034EC                 call    quotearg_buffer_restyled
.text:00000000000034F1                 mov     [rbp+0], r12d
.text:00000000000034F5                 add     rsp, 38h
.text:00000000000034F9                 pop     rbx
.text:00000000000034FA                 pop     rbp
.text:00000000000034FB                 pop     r12
.text:00000000000034FD                 pop     r13
.text:00000000000034FF                 pop     r14
.text:0000000000003501                 pop     r15
.text:0000000000003503                 retn
.text:0000000000003503 ; } // starts at 3490
.text:0000000000003503 quotearg_buffer endp
.text:0000000000003503
.text:0000000000003503 ; ---------------------------------------------------------------------------
.text:0000000000003504                 align 10h
.text:0000000000003510
.text:0000000000003510 ; =============== S U B R O U T I N E =======================================
.text:0000000000003510
.text:0000000000003510 ; Attributes: info_from_lumina
.text:0000000000003510
.text:0000000000003510 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003510                 public quotearg_alloc_mem
.text:0000000000003510 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003510
.text:0000000000003510 var_5C          = dword ptr -5Ch
.text:0000000000003510 var_58          = qword ptr -58h
.text:0000000000003510 var_50          = qword ptr -50h
.text:0000000000003510 var_48          = qword ptr -48h
.text:0000000000003510 var_40          = qword ptr -40h
.text:0000000000003510
.text:0000000000003510 ; __unwind {
.text:0000000000003510                 push    r15
.text:0000000000003512                 push    r14
.text:0000000000003514                 lea     rax, default_quoting_options
.text:000000000000351B                 push    r13
.text:000000000000351D                 push    r12
.text:000000000000351F                 mov     r12, rdx
.text:0000000000003522                 push    rbp
.text:0000000000003523                 push    rbx
.text:0000000000003524                 mov     rbx, rcx
.text:0000000000003527                 mov     r14, rdi
.text:000000000000352A                 mov     r15, rsi
.text:000000000000352D                 sub     rsp, 38h
.text:0000000000003531                 test    rcx, rcx
.text:0000000000003534                 cmovz   rbx, rax
.text:0000000000003538                 xor     ebp, ebp
.text:000000000000353A                 call    ___errno_location
.text:000000000000353F                 test    r12, r12
.text:0000000000003542                 mov     r13, rax
.text:0000000000003545                 mov     eax, [rax]
.text:0000000000003547                 setz    bpl
.text:000000000000354B                 or      ebp, [rbx+4]
.text:000000000000354E                 lea     r10, [rbx+8]
.text:0000000000003552                 sub     rsp, 8
.text:0000000000003556                 mov     r8d, [rbx]
.text:0000000000003559                 mov     rcx, r15
.text:000000000000355C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003560                 push    qword ptr [rbx+30h]
.text:0000000000003563                 mov     rdx, r14
.text:0000000000003566                 push    qword ptr [rbx+28h]
.text:0000000000003569                 push    r10
.text:000000000000356B                 xor     esi, esi
.text:000000000000356D                 mov     r9d, ebp
.text:0000000000003570                 xor     edi, edi
.text:0000000000003572                 mov     [rsp+88h+var_48], r10
.text:0000000000003577                 call    quotearg_buffer_restyled
.text:000000000000357C                 lea     rsi, [rax+1]
.text:0000000000003580                 mov     [rsp+88h+var_40], rax
.text:0000000000003585                 add     rsp, 20h
.text:0000000000003589                 mov     rdi, rsi
.text:000000000000358C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003591                 call    xmalloc
.text:0000000000003596                 mov     [rsp+68h+var_58], rax
.text:000000000000359B                 sub     rsp, 8
.text:000000000000359F                 push    qword ptr [rbx+30h]
.text:00000000000035A2                 push    qword ptr [rbx+28h]
.text:00000000000035A5                 mov     r10, [rsp+80h+var_48]
.text:00000000000035AA                 mov     r9d, ebp
.text:00000000000035AD                 mov     r8d, [rbx]
.text:00000000000035B0                 mov     rcx, r15
.text:00000000000035B3                 mov     rdx, r14
.text:00000000000035B6                 mov     rdi, rax
.text:00000000000035B9                 push    r10
.text:00000000000035BB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000035C0                 call    quotearg_buffer_restyled
.text:00000000000035C5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000035C9                 add     rsp, 20h
.text:00000000000035CD                 test    r12, r12
.text:00000000000035D0                 mov     [r13+0], eax
.text:00000000000035D4                 jz      short loc_35DF
.text:00000000000035D6                 mov     r11, [rsp+68h+var_40]
.text:00000000000035DB                 mov     [r12], r11
.text:00000000000035DF
.text:00000000000035DF loc_35DF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000035DF                 mov     rax, [rsp+68h+var_58]
.text:00000000000035E4                 add     rsp, 38h
.text:00000000000035E8                 pop     rbx
.text:00000000000035E9                 pop     rbp
.text:00000000000035EA                 pop     r12
.text:00000000000035EC                 pop     r13
.text:00000000000035EE                 pop     r14
.text:00000000000035F0                 pop     r15
.text:00000000000035F2                 retn
.text:00000000000035F2 ; } // starts at 3510
.text:00000000000035F2 quotearg_alloc_mem endp
.text:00000000000035F2
.text:00000000000035F2 ; ---------------------------------------------------------------------------
.text:00000000000035F3                 align 20h
.text:0000000000003600
.text:0000000000003600 ; =============== S U B R O U T I N E =======================================
.text:0000000000003600
.text:0000000000003600
.text:0000000000003600                 public quotearg_alloc
.text:0000000000003600 quotearg_alloc  proc near
.text:0000000000003600 ; __unwind {
.text:0000000000003600                 mov     rcx, rdx
.text:0000000000003603                 xor     edx, edx
.text:0000000000003605                 jmp     quotearg_alloc_mem
.text:0000000000003605 ; } // starts at 3600
.text:0000000000003605 quotearg_alloc  endp
.text:0000000000003605
.text:0000000000003605 ; ---------------------------------------------------------------------------
.text:000000000000360A                 align 10h
.text:0000000000003610
.text:0000000000003610 ; =============== S U B R O U T I N E =======================================
.text:0000000000003610
.text:0000000000003610 ; Attributes: info_from_lumina
.text:0000000000003610
.text:0000000000003610 ; void __cdecl quotearg_free()
.text:0000000000003610                 public quotearg_free
.text:0000000000003610 quotearg_free   proc near
.text:0000000000003610 ; __unwind {
.text:0000000000003610                 mov     eax, cs:nslots
.text:0000000000003616                 push    r12
.text:0000000000003618                 mov     r12, cs:slotvec
.text:000000000000361F                 push    rbp
.text:0000000000003620                 push    rbx
.text:0000000000003621                 cmp     eax, 1
.text:0000000000003624                 jle     short loc_3651
.text:0000000000003626                 sub     eax, 2
.text:0000000000003629                 lea     rbx, [r12+18h]
.text:000000000000362E                 shl     rax, 4
.text:0000000000003632                 lea     rbp, [r12+rax+28h]
.text:0000000000003637                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003640                 mov     rdi, [rbx]      ; ptr
.text:0000000000003643                 add     rbx, 10h
.text:0000000000003647                 call    _free
.text:000000000000364C                 cmp     rbx, rbp
.text:000000000000364F                 jnz     short loc_3640
.text:0000000000003651
.text:0000000000003651 loc_3651:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003651                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003656                 lea     rbx, slot0
.text:000000000000365D                 cmp     rdi, rbx
.text:0000000000003660                 jz      short loc_3679
.text:0000000000003662                 call    _free
.text:0000000000003667                 mov     cs:slotvec0, 100h
.text:0000000000003672                 mov     cs:off_207078, rbx
.text:0000000000003679
.text:0000000000003679 loc_3679:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003679                 lea     rbx, slotvec0
.text:0000000000003680                 cmp     r12, rbx
.text:0000000000003683                 jz      short loc_3694
.text:0000000000003685                 mov     rdi, r12        ; ptr
.text:0000000000003688                 call    _free
.text:000000000000368D                 mov     cs:slotvec, rbx
.text:0000000000003694
.text:0000000000003694 loc_3694:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003694                 pop     rbx
.text:0000000000003695                 mov     cs:nslots, 1
.text:000000000000369F                 pop     rbp
.text:00000000000036A0                 pop     r12
.text:00000000000036A2                 retn
.text:00000000000036A2 ; } // starts at 3610
.text:00000000000036A2 quotearg_free   endp
.text:00000000000036A2
.text:00000000000036A2 ; ---------------------------------------------------------------------------
.text:00000000000036A3                 align 10h
.text:00000000000036B0
.text:00000000000036B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036B0
.text:00000000000036B0
.text:00000000000036B0                 public quotearg_n
.text:00000000000036B0 quotearg_n      proc near
.text:00000000000036B0 ; __unwind {
.text:00000000000036B0                 lea     rcx, default_quoting_options
.text:00000000000036B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000036BE                 jmp     quotearg_n_options
.text:00000000000036BE ; } // starts at 36B0
.text:00000000000036BE quotearg_n      endp
.text:00000000000036BE
.text:00000000000036BE ; ---------------------------------------------------------------------------
.text:00000000000036C3                 align 10h
.text:00000000000036D0
.text:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036D0
.text:00000000000036D0
.text:00000000000036D0                 public quotearg_n_mem
.text:00000000000036D0 quotearg_n_mem  proc near
.text:00000000000036D0 ; __unwind {
.text:00000000000036D0                 lea     rcx, default_quoting_options
.text:00000000000036D7                 jmp     quotearg_n_options
.text:00000000000036D7 ; } // starts at 36D0
.text:00000000000036D7 quotearg_n_mem  endp
.text:00000000000036D7
.text:00000000000036D7 ; ---------------------------------------------------------------------------
.text:00000000000036DC                 align 20h
.text:00000000000036E0
.text:00000000000036E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036E0
.text:00000000000036E0
.text:00000000000036E0                 public quotearg
.text:00000000000036E0 quotearg        proc near
.text:00000000000036E0 ; __unwind {
.text:00000000000036E0                 lea     rcx, default_quoting_options
.text:00000000000036E7                 mov     rsi, rdi
.text:00000000000036EA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000036F1                 xor     edi, edi
.text:00000000000036F3                 jmp     quotearg_n_options
.text:00000000000036F3 ; } // starts at 36E0
.text:00000000000036F3 quotearg        endp
.text:00000000000036F3
.text:00000000000036F3 ; ---------------------------------------------------------------------------
.text:00000000000036F8                 align 20h
.text:0000000000003700
.text:0000000000003700 ; =============== S U B R O U T I N E =======================================
.text:0000000000003700
.text:0000000000003700
.text:0000000000003700                 public quotearg_mem
.text:0000000000003700 quotearg_mem    proc near
.text:0000000000003700 ; __unwind {
.text:0000000000003700                 lea     rcx, default_quoting_options
.text:0000000000003707                 mov     rdx, rsi
.text:000000000000370A                 mov     rsi, rdi
.text:000000000000370D                 xor     edi, edi
.text:000000000000370F                 jmp     quotearg_n_options
.text:000000000000370F ; } // starts at 3700
.text:000000000000370F quotearg_mem    endp
.text:000000000000370F
.text:000000000000370F ; ---------------------------------------------------------------------------
.text:0000000000003714                 align 20h
.text:0000000000003720
.text:0000000000003720 ; =============== S U B R O U T I N E =======================================
.text:0000000000003720
.text:0000000000003720 ; Attributes: info_from_lumina
.text:0000000000003720
.text:0000000000003720 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003720                 public quotearg_n_style
.text:0000000000003720 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003720
.text:0000000000003720 var_48          = dword ptr -48h
.text:0000000000003720 var_44          = qword ptr -44h
.text:0000000000003720 var_3C          = qword ptr -3Ch
.text:0000000000003720 var_34          = qword ptr -34h
.text:0000000000003720 var_2C          = qword ptr -2Ch
.text:0000000000003720 var_24          = qword ptr -24h
.text:0000000000003720 var_1C          = qword ptr -1Ch
.text:0000000000003720 var_14          = dword ptr -14h
.text:0000000000003720 var_10          = qword ptr -10h
.text:0000000000003720
.text:0000000000003720 ; __unwind {
.text:0000000000003720                 sub     rsp, 48h
.text:0000000000003724                 mov     rax, rdx
.text:0000000000003727                 mov     rdx, fs:28h
.text:0000000000003730                 mov     [rsp+48h+var_10], rdx
.text:0000000000003735                 xor     edx, edx
.text:0000000000003737                 cmp     esi, 0Ah
.text:000000000000373A                 jz      short loc_37A4
.text:000000000000373C                 mov     [rsp+48h+var_48], esi
.text:000000000000373F                 mov     rcx, rsp
.text:0000000000003742                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003749                 mov     rsi, rax
.text:000000000000374C                 mov     [rsp+48h+var_44], 0
.text:0000000000003755                 mov     [rsp+48h+var_3C], 0
.text:000000000000375E                 mov     [rsp+48h+var_34], 0
.text:0000000000003767                 mov     [rsp+48h+var_2C], 0
.text:0000000000003770                 mov     [rsp+48h+var_24], 0
.text:0000000000003779                 mov     [rsp+48h+var_1C], 0
.text:0000000000003782                 mov     [rsp+48h+var_14], 0
.text:000000000000378A                 call    quotearg_n_options
.text:000000000000378F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003794                 xor     rcx, fs:28h
.text:000000000000379D                 jnz     short loc_37A9
.text:000000000000379F                 add     rsp, 48h
.text:00000000000037A3                 retn
.text:00000000000037A4 ; ---------------------------------------------------------------------------
.text:00000000000037A4
.text:00000000000037A4 loc_37A4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000037A4                 call    _abort
.text:00000000000037A9 ; ---------------------------------------------------------------------------
.text:00000000000037A9
.text:00000000000037A9 loc_37A9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000037A9                 call    ___stack_chk_fail
.text:00000000000037A9 ; } // starts at 3720
.text:00000000000037A9 quotearg_n_style endp
.text:00000000000037A9
.text:00000000000037A9 ; ---------------------------------------------------------------------------
.text:00000000000037AE                 align 10h
.text:00000000000037B0
.text:00000000000037B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037B0
.text:00000000000037B0 ; Attributes: info_from_lumina
.text:00000000000037B0
.text:00000000000037B0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000037B0                 public quotearg_n_style_mem
.text:00000000000037B0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000037B0
.text:00000000000037B0 var_48          = dword ptr -48h
.text:00000000000037B0 var_44          = qword ptr -44h
.text:00000000000037B0 var_3C          = qword ptr -3Ch
.text:00000000000037B0 var_34          = qword ptr -34h
.text:00000000000037B0 var_2C          = qword ptr -2Ch
.text:00000000000037B0 var_24          = qword ptr -24h
.text:00000000000037B0 var_1C          = qword ptr -1Ch
.text:00000000000037B0 var_14          = dword ptr -14h
.text:00000000000037B0 var_10          = qword ptr -10h
.text:00000000000037B0
.text:00000000000037B0 ; __unwind {
.text:00000000000037B0                 sub     rsp, 48h
.text:00000000000037B4                 mov     rax, rdx
.text:00000000000037B7                 mov     rdx, rcx
.text:00000000000037BA                 mov     rcx, fs:28h
.text:00000000000037C3                 mov     [rsp+48h+var_10], rcx
.text:00000000000037C8                 xor     ecx, ecx
.text:00000000000037CA                 cmp     esi, 0Ah
.text:00000000000037CD                 jz      short loc_3830
.text:00000000000037CF                 mov     [rsp+48h+var_48], esi
.text:00000000000037D2                 mov     rcx, rsp
.text:00000000000037D5                 mov     rsi, rax
.text:00000000000037D8                 mov     [rsp+48h+var_44], 0
.text:00000000000037E1                 mov     [rsp+48h+var_3C], 0
.text:00000000000037EA                 mov     [rsp+48h+var_34], 0
.text:00000000000037F3                 mov     [rsp+48h+var_2C], 0
.text:00000000000037FC                 mov     [rsp+48h+var_24], 0
.text:0000000000003805                 mov     [rsp+48h+var_1C], 0
.text:000000000000380E                 mov     [rsp+48h+var_14], 0
.text:0000000000003816                 call    quotearg_n_options
.text:000000000000381B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003820                 xor     rdx, fs:28h
.text:0000000000003829                 jnz     short loc_3835
.text:000000000000382B                 add     rsp, 48h
.text:000000000000382F                 retn
.text:0000000000003830 ; ---------------------------------------------------------------------------
.text:0000000000003830
.text:0000000000003830 loc_3830:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003830                 call    _abort
.text:0000000000003835 ; ---------------------------------------------------------------------------
.text:0000000000003835
.text:0000000000003835 loc_3835:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003835                 call    ___stack_chk_fail
.text:0000000000003835 ; } // starts at 37B0
.text:0000000000003835 quotearg_n_style_mem endp
.text:0000000000003835
.text:0000000000003835 ; ---------------------------------------------------------------------------
.text:000000000000383A                 align 20h
.text:0000000000003840
.text:0000000000003840 ; =============== S U B R O U T I N E =======================================
.text:0000000000003840
.text:0000000000003840
.text:0000000000003840                 public quotearg_style
.text:0000000000003840 quotearg_style  proc near
.text:0000000000003840 ; __unwind {
.text:0000000000003840                 mov     rdx, rsi
.text:0000000000003843                 mov     esi, edi
.text:0000000000003845                 xor     edi, edi
.text:0000000000003847                 jmp     quotearg_n_style
.text:0000000000003847 ; } // starts at 3840
.text:0000000000003847 quotearg_style  endp
.text:0000000000003847
.text:0000000000003847 ; ---------------------------------------------------------------------------
.text:000000000000384C                 align 10h
.text:0000000000003850
.text:0000000000003850 ; =============== S U B R O U T I N E =======================================
.text:0000000000003850
.text:0000000000003850
.text:0000000000003850                 public quotearg_style_mem
.text:0000000000003850 quotearg_style_mem proc near
.text:0000000000003850 ; __unwind {
.text:0000000000003850                 mov     rcx, rdx
.text:0000000000003853                 mov     rdx, rsi
.text:0000000000003856                 mov     esi, edi
.text:0000000000003858                 xor     edi, edi
.text:000000000000385A                 jmp     quotearg_n_style_mem
.text:000000000000385A ; } // starts at 3850
.text:000000000000385A quotearg_style_mem endp
.text:000000000000385A
.text:000000000000385A ; ---------------------------------------------------------------------------
.text:000000000000385F                 align 20h
.text:0000000000003860
.text:0000000000003860 ; =============== S U B R O U T I N E =======================================
.text:0000000000003860
.text:0000000000003860 ; Attributes: info_from_lumina
.text:0000000000003860
.text:0000000000003860 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003860                 public quotearg_char_mem
.text:0000000000003860 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003860                                         ; quotearg_colon+C↓j ...
.text:0000000000003860
.text:0000000000003860 var_48          = xmmword ptr -48h
.text:0000000000003860 var_38          = xmmword ptr -38h
.text:0000000000003860 var_28          = xmmword ptr -28h
.text:0000000000003860 var_18          = qword ptr -18h
.text:0000000000003860 var_10          = qword ptr -10h
.text:0000000000003860
.text:0000000000003860 ; __unwind {
.text:0000000000003860                 sub     rsp, 48h
.text:0000000000003864                 mov     ecx, edx
.text:0000000000003866                 mov     rax, fs:28h
.text:000000000000386F                 mov     [rsp+48h+var_10], rax
.text:0000000000003874                 xor     eax, eax
.text:0000000000003876                 mov     rax, cs:qword_207230
.text:000000000000387D                 mov     r8, rsp
.text:0000000000003880                 and     ecx, 1Fh
.text:0000000000003883                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000388B                 mov     [rsp+48h+var_18], rax
.text:0000000000003890                 mov     eax, edx
.text:0000000000003892                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003896                 shr     al, 5
.text:0000000000003899                 movzx   eax, al
.text:000000000000389C                 lea     r9, [r8+rax*4+8]
.text:00000000000038A1                 movdqa  xmm0, cs:xmmword_207210
.text:00000000000038A9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000038AE                 movdqa  xmm0, cs:xmmword_207220
.text:00000000000038B6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000038BB                 mov     edx, [r9]
.text:00000000000038BE                 mov     eax, edx
.text:00000000000038C0                 shr     eax, cl
.text:00000000000038C2                 not     eax
.text:00000000000038C4                 and     eax, 1
.text:00000000000038C7                 shl     eax, cl
.text:00000000000038C9                 mov     rcx, r8
.text:00000000000038CC                 xor     eax, edx
.text:00000000000038CE                 mov     rdx, rsi
.text:00000000000038D1                 mov     rsi, rdi
.text:00000000000038D4                 mov     [r9], eax
.text:00000000000038D7                 xor     edi, edi
.text:00000000000038D9                 call    quotearg_n_options
.text:00000000000038DE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000038E3                 xor     rsi, fs:28h
.text:00000000000038EC                 jnz     short loc_38F3
.text:00000000000038EE                 add     rsp, 48h
.text:00000000000038F2                 retn
.text:00000000000038F3 ; ---------------------------------------------------------------------------
.text:00000000000038F3
.text:00000000000038F3 loc_38F3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000038F3                 call    ___stack_chk_fail
.text:00000000000038F3 ; } // starts at 3860
.text:00000000000038F3 quotearg_char_mem endp
.text:00000000000038F3
.text:00000000000038F3 ; ---------------------------------------------------------------------------
.text:00000000000038F8                 align 20h
.text:0000000000003900
.text:0000000000003900 ; =============== S U B R O U T I N E =======================================
.text:0000000000003900
.text:0000000000003900
.text:0000000000003900                 public quotearg_char
.text:0000000000003900 quotearg_char   proc near
.text:0000000000003900 ; __unwind {
.text:0000000000003900                 movsx   edx, sil
.text:0000000000003904                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000390B                 jmp     quotearg_char_mem
.text:000000000000390B ; } // starts at 3900
.text:000000000000390B quotearg_char   endp
.text:000000000000390B
.text:0000000000003910
.text:0000000000003910 ; =============== S U B R O U T I N E =======================================
.text:0000000000003910
.text:0000000000003910
.text:0000000000003910                 public quotearg_colon
.text:0000000000003910 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003910 ; __unwind {
.text:0000000000003910                 mov     edx, 3Ah ; ':'
.text:0000000000003915                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000391C                 jmp     quotearg_char_mem
.text:000000000000391C ; } // starts at 3910
.text:000000000000391C quotearg_colon  endp
.text:000000000000391C
.text:000000000000391C ; ---------------------------------------------------------------------------
.text:0000000000003921                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930
.text:0000000000003930                 public quotearg_colon_mem
.text:0000000000003930 quotearg_colon_mem proc near
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 mov     edx, 3Ah ; ':'
.text:0000000000003935                 jmp     quotearg_char_mem
.text:0000000000003935 ; } // starts at 3930
.text:0000000000003935 quotearg_colon_mem endp
.text:0000000000003935
.text:0000000000003935 ; ---------------------------------------------------------------------------
.text:000000000000393A                 align 20h
.text:0000000000003940
.text:0000000000003940 ; =============== S U B R O U T I N E =======================================
.text:0000000000003940
.text:0000000000003940 ; Attributes: info_from_lumina
.text:0000000000003940
.text:0000000000003940 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003940                 public quotearg_n_style_colon
.text:0000000000003940 quotearg_n_style_colon proc near
.text:0000000000003940
.text:0000000000003940 var_48          = dword ptr -48h
.text:0000000000003940 var_44          = qword ptr -44h
.text:0000000000003940 var_3C          = qword ptr -3Ch
.text:0000000000003940 var_34          = qword ptr -34h
.text:0000000000003940 var_2C          = qword ptr -2Ch
.text:0000000000003940 var_24          = qword ptr -24h
.text:0000000000003940 var_1C          = qword ptr -1Ch
.text:0000000000003940 var_14          = dword ptr -14h
.text:0000000000003940 var_10          = qword ptr -10h
.text:0000000000003940
.text:0000000000003940 ; __unwind {
.text:0000000000003940                 sub     rsp, 48h
.text:0000000000003944                 mov     rax, rdx
.text:0000000000003947                 mov     rdx, fs:28h
.text:0000000000003950                 mov     [rsp+48h+var_10], rdx
.text:0000000000003955                 xor     edx, edx
.text:0000000000003957                 cmp     esi, 0Ah
.text:000000000000395A                 jz      short loc_39C4
.text:000000000000395C                 mov     [rsp+48h+var_48], esi
.text:000000000000395F                 mov     rcx, rsp
.text:0000000000003962                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003969                 mov     rsi, rax
.text:000000000000396C                 mov     [rsp+48h+var_44], 0
.text:0000000000003975                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000397E                 mov     [rsp+48h+var_34], 0
.text:0000000000003987                 mov     [rsp+48h+var_2C], 0
.text:0000000000003990                 mov     [rsp+48h+var_24], 0
.text:0000000000003999                 mov     [rsp+48h+var_1C], 0
.text:00000000000039A2                 mov     [rsp+48h+var_14], 0
.text:00000000000039AA                 call    quotearg_n_options
.text:00000000000039AF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000039B4                 xor     rcx, fs:28h
.text:00000000000039BD                 jnz     short loc_39C9
.text:00000000000039BF                 add     rsp, 48h
.text:00000000000039C3                 retn
.text:00000000000039C4 ; ---------------------------------------------------------------------------
.text:00000000000039C4
.text:00000000000039C4 loc_39C4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000039C4                 call    _abort
.text:00000000000039C9 ; ---------------------------------------------------------------------------
.text:00000000000039C9
.text:00000000000039C9 loc_39C9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000039C9                 call    ___stack_chk_fail
.text:00000000000039C9 ; } // starts at 3940
.text:00000000000039C9 quotearg_n_style_colon endp
.text:00000000000039C9
.text:00000000000039C9 ; ---------------------------------------------------------------------------
.text:00000000000039CE                 align 10h
.text:00000000000039D0
.text:00000000000039D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039D0
.text:00000000000039D0 ; Attributes: info_from_lumina
.text:00000000000039D0
.text:00000000000039D0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000039D0                 public quotearg_n_custom_mem
.text:00000000000039D0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000039D0                                         ; quotearg_custom+12↓j ...
.text:00000000000039D0
.text:00000000000039D0 var_48          = xmmword ptr -48h
.text:00000000000039D0 var_38          = xmmword ptr -38h
.text:00000000000039D0 var_28          = xmmword ptr -28h
.text:00000000000039D0 var_18          = qword ptr -18h
.text:00000000000039D0 var_10          = qword ptr -10h
.text:00000000000039D0
.text:00000000000039D0 ; __unwind {
.text:00000000000039D0                 sub     rsp, 48h
.text:00000000000039D4                 mov     r9, rcx
.text:00000000000039D7                 mov     rcx, cs:qword_207230
.text:00000000000039DE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000039E6                 mov     rax, fs:28h
.text:00000000000039EF                 mov     [rsp+48h+var_10], rax
.text:00000000000039F4                 xor     eax, eax
.text:00000000000039F6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000039FA                 test    rsi, rsi
.text:00000000000039FD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003A02                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003A09                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003A11                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003A16                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003A1E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003A23                 jz      short loc_3A57
.text:0000000000003A25                 test    rdx, rdx
.text:0000000000003A28                 jz      short loc_3A57
.text:0000000000003A2A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003A2F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003A34                 mov     rcx, rsp
.text:0000000000003A37                 mov     rdx, r8
.text:0000000000003A3A                 mov     rsi, r9
.text:0000000000003A3D                 call    quotearg_n_options
.text:0000000000003A42                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003A47                 xor     rdi, fs:28h
.text:0000000000003A50                 jnz     short loc_3A5C
.text:0000000000003A52                 add     rsp, 48h
.text:0000000000003A56                 retn
.text:0000000000003A57 ; ---------------------------------------------------------------------------
.text:0000000000003A57
.text:0000000000003A57 loc_3A57:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003A57                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003A57                 call    _abort
.text:0000000000003A5C ; ---------------------------------------------------------------------------
.text:0000000000003A5C
.text:0000000000003A5C loc_3A5C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003A5C                 call    ___stack_chk_fail
.text:0000000000003A5C ; } // starts at 39D0
.text:0000000000003A5C quotearg_n_custom_mem endp
.text:0000000000003A5C
.text:0000000000003A5C ; ---------------------------------------------------------------------------
.text:0000000000003A61                 align 10h
.text:0000000000003A70
.text:0000000000003A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A70
.text:0000000000003A70
.text:0000000000003A70                 public quotearg_n_custom
.text:0000000000003A70 quotearg_n_custom proc near
.text:0000000000003A70 ; __unwind {
.text:0000000000003A70                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A77                 jmp     quotearg_n_custom_mem
.text:0000000000003A77 ; } // starts at 3A70
.text:0000000000003A77 quotearg_n_custom endp
.text:0000000000003A77
.text:0000000000003A77 ; ---------------------------------------------------------------------------
.text:0000000000003A7C                 align 20h
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80
.text:0000000000003A80                 public quotearg_custom
.text:0000000000003A80 quotearg_custom proc near
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 mov     rcx, rdx
.text:0000000000003A83                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A8A                 mov     rdx, rsi
.text:0000000000003A8D                 mov     rsi, rdi
.text:0000000000003A90                 xor     edi, edi
.text:0000000000003A92                 jmp     quotearg_n_custom_mem
.text:0000000000003A92 ; } // starts at 3A80
.text:0000000000003A92 quotearg_custom endp
.text:0000000000003A92
.text:0000000000003A92 ; ---------------------------------------------------------------------------
.text:0000000000003A97                 align 20h
.text:0000000000003AA0
.text:0000000000003AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AA0
.text:0000000000003AA0
.text:0000000000003AA0                 public quotearg_custom_mem
.text:0000000000003AA0 quotearg_custom_mem proc near
.text:0000000000003AA0 ; __unwind {
.text:0000000000003AA0                 mov     r8, rcx
.text:0000000000003AA3                 mov     rcx, rdx
.text:0000000000003AA6                 mov     rdx, rsi
.text:0000000000003AA9                 mov     rsi, rdi
.text:0000000000003AAC                 xor     edi, edi
.text:0000000000003AAE                 jmp     quotearg_n_custom_mem
.text:0000000000003AAE ; } // starts at 3AA0
.text:0000000000003AAE quotearg_custom_mem endp
.text:0000000000003AAE
.text:0000000000003AAE ; ---------------------------------------------------------------------------
.text:0000000000003AB3                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AC0
.text:0000000000003AC0
.text:0000000000003AC0                 public quote_n_mem
.text:0000000000003AC0 quote_n_mem     proc near
.text:0000000000003AC0 ; __unwind {
.text:0000000000003AC0                 lea     rcx, quote_quoting_options
.text:0000000000003AC7                 jmp     quotearg_n_options
.text:0000000000003AC7 ; } // starts at 3AC0
.text:0000000000003AC7 quote_n_mem     endp
.text:0000000000003AC7
.text:0000000000003AC7 ; ---------------------------------------------------------------------------
.text:0000000000003ACC                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AD0
.text:0000000000003AD0
.text:0000000000003AD0                 public quote_mem
.text:0000000000003AD0 quote_mem       proc near
.text:0000000000003AD0 ; __unwind {
.text:0000000000003AD0                 lea     rcx, quote_quoting_options
.text:0000000000003AD7                 mov     rdx, rsi
.text:0000000000003ADA                 mov     rsi, rdi
.text:0000000000003ADD                 xor     edi, edi
.text:0000000000003ADF                 jmp     quotearg_n_options
.text:0000000000003ADF ; } // starts at 3AD0
.text:0000000000003ADF quote_mem       endp
.text:0000000000003ADF
.text:0000000000003ADF ; ---------------------------------------------------------------------------
.text:0000000000003AE4                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AF0
.text:0000000000003AF0
.text:0000000000003AF0                 public quote_n
.text:0000000000003AF0 quote_n         proc near
.text:0000000000003AF0 ; __unwind {
.text:0000000000003AF0                 lea     rcx, quote_quoting_options
.text:0000000000003AF7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AFE                 jmp     quotearg_n_options
.text:0000000000003AFE ; } // starts at 3AF0
.text:0000000000003AFE quote_n         endp
.text:0000000000003AFE
.text:0000000000003AFE ; ---------------------------------------------------------------------------
.text:0000000000003B03                 align 10h
.text:0000000000003B10
.text:0000000000003B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B10
.text:0000000000003B10
.text:0000000000003B10                 public quote
.text:0000000000003B10 quote           proc near               ; CODE XREF: main+103↑p
.text:0000000000003B10 ; __unwind {
.text:0000000000003B10                 lea     rcx, quote_quoting_options
.text:0000000000003B17                 mov     rsi, rdi
.text:0000000000003B1A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B21                 xor     edi, edi
.text:0000000000003B23                 jmp     quotearg_n_options
.text:0000000000003B23 ; } // starts at 3B10
.text:0000000000003B23 quote           endp
.text:0000000000003B23
.text:0000000000003B23 ; ---------------------------------------------------------------------------
.text:0000000000003B28                 align 10h
.text:0000000000003B30
.text:0000000000003B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B30
.text:0000000000003B30
.text:0000000000003B30 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003B30                 public version_etc_arn
.text:0000000000003B30 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_3F6B↓j
.text:0000000000003B30                                         ; version_etc_va:loc_3FBB↓p ...
.text:0000000000003B30
.text:0000000000003B30 var_58          = qword ptr -58h
.text:0000000000003B30 var_50          = qword ptr -50h
.text:0000000000003B30 var_48          = qword ptr -48h
.text:0000000000003B30 var_40          = qword ptr -40h
.text:0000000000003B30
.text:0000000000003B30 ; __unwind {
.text:0000000000003B30                 push    r15
.text:0000000000003B32                 push    r14
.text:0000000000003B34                 push    r13
.text:0000000000003B36                 push    r12
.text:0000000000003B38                 mov     r12, r9
.text:0000000000003B3B                 push    rbp
.text:0000000000003B3C                 push    rbx
.text:0000000000003B3D                 mov     rbp, rdi
.text:0000000000003B40                 mov     rbx, r8
.text:0000000000003B43                 sub     rsp, 28h
.text:0000000000003B47                 test    rsi, rsi
.text:0000000000003B4A                 jz      loc_3C68
.text:0000000000003B50                 mov     r8, rdx
.text:0000000000003B53                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003B5A                 mov     r9, rcx
.text:0000000000003B5D                 xor     eax, eax
.text:0000000000003B5F                 mov     rcx, rsi
.text:0000000000003B62                 mov     esi, 1
.text:0000000000003B67                 call    ___fprintf_chk
.text:0000000000003B6C
.text:0000000000003B6C loc_3B6C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003B6C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003B73                 xor     edi, edi        ; domainname
.text:0000000000003B75                 mov     edx, 5          ; category
.text:0000000000003B7A                 call    _dcgettext
.text:0000000000003B7F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003B86                 mov     rcx, rax
.text:0000000000003B89                 mov     r8d, 7E3h
.text:0000000000003B8F                 mov     esi, 1
.text:0000000000003B94                 mov     rdi, rbp
.text:0000000000003B97                 xor     eax, eax
.text:0000000000003B99                 call    ___fprintf_chk
.text:0000000000003B9E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003BA5                 xor     edi, edi        ; domainname
.text:0000000000003BA7                 mov     edx, 5          ; category
.text:0000000000003BAC                 call    _dcgettext
.text:0000000000003BB1                 mov     rsi, rbp        ; stream
.text:0000000000003BB4                 mov     rdi, rax        ; s
.text:0000000000003BB7                 call    _fputs_unlocked
.text:0000000000003BBC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003BC0                 ja      def_3BD4        ; jumptable 0000000000003BD4 default case
.text:0000000000003BC6                 lea     rdx, jpt_3BD4
.text:0000000000003BCD                 movsxd  rax, ds:(jpt_3BD4 - 5248h)[rdx+r12*4]
.text:0000000000003BD1                 add     rax, rdx
.text:0000000000003BD4                 jmp     rax             ; switch jump
.text:0000000000003BD4 ; ---------------------------------------------------------------------------
.text:0000000000003BD6                 align 20h
.text:0000000000003BE0
.text:0000000000003BE0 loc_3BE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BE0                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003BE0                 mov     r9, [rbx+38h]   ; jumptable 0000000000003BD4 case 8
.text:0000000000003BE4                 mov     rax, [rbx+10h]
.text:0000000000003BE8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003BEF                 mov     r8, [rbx+8]
.text:0000000000003BF3                 mov     edx, 5          ; category
.text:0000000000003BF8                 xor     edi, edi        ; domainname
.text:0000000000003BFA                 mov     r13, [rbx+30h]
.text:0000000000003BFE                 mov     r12, [rbx+28h]
.text:0000000000003C02                 mov     [rsp+58h+var_48], r9
.text:0000000000003C07                 mov     r15, [rbx+20h]
.text:0000000000003C0B                 mov     r14, [rbx+18h]
.text:0000000000003C0F                 mov     [rsp+58h+var_58], rax
.text:0000000000003C13                 mov     [rsp+58h+var_50], r8
.text:0000000000003C18                 mov     rbx, [rbx]
.text:0000000000003C1B                 call    _dcgettext
.text:0000000000003C20                 sub     rsp, 8
.text:0000000000003C24
.text:0000000000003C24 loc_3C24:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003C24                 mov     r9, [rsp+60h+var_48]
.text:0000000000003C29                 mov     rdx, rax
.text:0000000000003C2C                 mov     rcx, rbx
.text:0000000000003C2F                 mov     esi, 1
.text:0000000000003C34                 mov     rdi, rbp
.text:0000000000003C37                 xor     eax, eax
.text:0000000000003C39                 push    r9
.text:0000000000003C3B                 push    r13
.text:0000000000003C3D                 push    r12
.text:0000000000003C3F                 push    r15
.text:0000000000003C41                 push    r14
.text:0000000000003C43                 mov     r9, [rsp+88h+var_58]
.text:0000000000003C48                 mov     r8, [rsp+88h+var_50]
.text:0000000000003C4D                 call    ___fprintf_chk
.text:0000000000003C52                 add     rsp, 30h
.text:0000000000003C56
.text:0000000000003C56 loc_3C56:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C56                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003C56                 add     rsp, 28h        ; jumptable 0000000000003BD4 case 0
.text:0000000000003C5A                 pop     rbx
.text:0000000000003C5B                 pop     rbp
.text:0000000000003C5C                 pop     r12
.text:0000000000003C5E                 pop     r13
.text:0000000000003C60                 pop     r14
.text:0000000000003C62                 pop     r15
.text:0000000000003C64                 retn
.text:0000000000003C64 ; ---------------------------------------------------------------------------
.text:0000000000003C65                 align 8
.text:0000000000003C68
.text:0000000000003C68 loc_3C68:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003C68                 mov     r8, rcx
.text:0000000000003C6B                 mov     rcx, rdx
.text:0000000000003C6E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003C75                 mov     esi, 1
.text:0000000000003C7A                 xor     eax, eax
.text:0000000000003C7C                 call    ___fprintf_chk
.text:0000000000003C81                 jmp     loc_3B6C
.text:0000000000003C81 ; ---------------------------------------------------------------------------
.text:0000000000003C86                 align 10h
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C90                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003C90                 mov     r10, [rbx+40h]  ; jumptable 0000000000003BD4 case 9
.text:0000000000003C94                 mov     r9, [rbx+38h]
.text:0000000000003C98                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003C9F                 mov     rax, [rbx+10h]
.text:0000000000003CA3                 mov     r8, [rbx+8]
.text:0000000000003CA7                 mov     edx, 5          ; category
.text:0000000000003CAC                 mov     r13, [rbx+30h]
.text:0000000000003CB0                 mov     r12, [rbx+28h]
.text:0000000000003CB4                 mov     r15, [rbx+20h]
.text:0000000000003CB8                 mov     r14, [rbx+18h]
.text:0000000000003CBC                 mov     rbx, [rbx]
.text:0000000000003CBF                 mov     [rsp+58h+var_40], r10
.text:0000000000003CC4                 mov     [rsp+58h+var_48], r9
.text:0000000000003CC9                 mov     [rsp+58h+var_58], rax
.text:0000000000003CCD                 mov     [rsp+58h+var_50], r8
.text:0000000000003CD2
.text:0000000000003CD2 loc_3CD2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003CD2                 xor     edi, edi        ; domainname
.text:0000000000003CD4                 call    _dcgettext
.text:0000000000003CD9                 mov     r10, [rsp+58h+var_40]
.text:0000000000003CDE                 push    r10
.text:0000000000003CE0                 jmp     loc_3C24
.text:0000000000003CE0 ; ---------------------------------------------------------------------------
.text:0000000000003CE5                 align 8
.text:0000000000003CE8
.text:0000000000003CE8 loc_3CE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003CE8                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003CE8                 mov     rbx, [rbx]      ; jumptable 0000000000003BD4 case 1
.text:0000000000003CEB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003CF2                 mov     edx, 5          ; category
.text:0000000000003CF7                 xor     edi, edi        ; domainname
.text:0000000000003CF9                 call    _dcgettext
.text:0000000000003CFE                 add     rsp, 28h
.text:0000000000003D02                 mov     rcx, rbx
.text:0000000000003D05                 mov     rdi, rbp
.text:0000000000003D08                 pop     rbx
.text:0000000000003D09                 pop     rbp
.text:0000000000003D0A                 pop     r12
.text:0000000000003D0C                 pop     r13
.text:0000000000003D0E                 pop     r14
.text:0000000000003D10                 pop     r15
.text:0000000000003D12                 mov     rdx, rax
.text:0000000000003D15                 mov     esi, 1
.text:0000000000003D1A                 xor     eax, eax
.text:0000000000003D1C                 jmp     ___fprintf_chk
.text:0000000000003D1C ; ---------------------------------------------------------------------------
.text:0000000000003D21                 align 8
.text:0000000000003D28
.text:0000000000003D28 loc_3D28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D28                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003D28                 mov     r12, [rbx+8]    ; jumptable 0000000000003BD4 case 2
.text:0000000000003D2C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003D33                 mov     rbx, [rbx]
.text:0000000000003D36                 mov     edx, 5          ; category
.text:0000000000003D3B                 xor     edi, edi        ; domainname
.text:0000000000003D3D                 call    _dcgettext
.text:0000000000003D42                 add     rsp, 28h
.text:0000000000003D46                 mov     r8, r12
.text:0000000000003D49                 mov     rcx, rbx
.text:0000000000003D4C                 mov     rdi, rbp
.text:0000000000003D4F                 mov     rdx, rax
.text:0000000000003D52                 mov     esi, 1
.text:0000000000003D57                 pop     rbx
.text:0000000000003D58                 pop     rbp
.text:0000000000003D59                 pop     r12
.text:0000000000003D5B                 pop     r13
.text:0000000000003D5D                 pop     r14
.text:0000000000003D5F                 pop     r15
.text:0000000000003D61                 xor     eax, eax
.text:0000000000003D63                 jmp     ___fprintf_chk
.text:0000000000003D63 ; ---------------------------------------------------------------------------
.text:0000000000003D68                 align 10h
.text:0000000000003D70
.text:0000000000003D70 loc_3D70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D70                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003D70                 mov     r13, [rbx+10h]  ; jumptable 0000000000003BD4 case 3
.text:0000000000003D74                 mov     r12, [rbx+8]
.text:0000000000003D78                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003D7F                 mov     rbx, [rbx]
.text:0000000000003D82                 mov     edx, 5          ; category
.text:0000000000003D87                 xor     edi, edi        ; domainname
.text:0000000000003D89                 call    _dcgettext
.text:0000000000003D8E                 add     rsp, 28h
.text:0000000000003D92                 mov     r9, r13
.text:0000000000003D95                 mov     r8, r12
.text:0000000000003D98                 mov     rcx, rbx
.text:0000000000003D9B                 mov     rdi, rbp
.text:0000000000003D9E                 mov     rdx, rax
.text:0000000000003DA1                 pop     rbx
.text:0000000000003DA2                 pop     rbp
.text:0000000000003DA3                 pop     r12
.text:0000000000003DA5                 pop     r13
.text:0000000000003DA7                 pop     r14
.text:0000000000003DA9                 pop     r15
.text:0000000000003DAB                 mov     esi, 1
.text:0000000000003DB0                 xor     eax, eax
.text:0000000000003DB2                 jmp     ___fprintf_chk
.text:0000000000003DB2 ; ---------------------------------------------------------------------------
.text:0000000000003DB7                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DC0                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003DC0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003BD4 case 4
.text:0000000000003DC7                 mov     edx, 5          ; category
.text:0000000000003DCC                 xor     edi, edi        ; domainname
.text:0000000000003DCE                 mov     r14, [rbx+18h]
.text:0000000000003DD2                 mov     r13, [rbx+10h]
.text:0000000000003DD6                 mov     r12, [rbx+8]
.text:0000000000003DDA                 mov     rbx, [rbx]
.text:0000000000003DDD                 call    _dcgettext
.text:0000000000003DE2                 sub     rsp, 8
.text:0000000000003DE6
.text:0000000000003DE6 loc_3DE6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003DE6                 push    r14
.text:0000000000003DE8                 mov     rdx, rax
.text:0000000000003DEB                 mov     r9, r13
.text:0000000000003DEE                 mov     r8, r12
.text:0000000000003DF1                 mov     rcx, rbx
.text:0000000000003DF4                 mov     rdi, rbp
.text:0000000000003DF7                 mov     esi, 1
.text:0000000000003DFC                 xor     eax, eax
.text:0000000000003DFE                 call    ___fprintf_chk
.text:0000000000003E03                 pop     rax
.text:0000000000003E04                 pop     rdx
.text:0000000000003E05                 add     rsp, 28h
.text:0000000000003E09                 pop     rbx
.text:0000000000003E0A                 pop     rbp
.text:0000000000003E0B                 pop     r12
.text:0000000000003E0D                 pop     r13
.text:0000000000003E0F                 pop     r14
.text:0000000000003E11                 pop     r15
.text:0000000000003E13                 retn
.text:0000000000003E13 ; ---------------------------------------------------------------------------
.text:0000000000003E14                 align 8
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E18                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003E18                 mov     r15, [rbx+20h]  ; jumptable 0000000000003BD4 case 5
.text:0000000000003E1C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003E23                 mov     edx, 5          ; category
.text:0000000000003E28                 xor     edi, edi        ; domainname
.text:0000000000003E2A                 mov     r14, [rbx+18h]
.text:0000000000003E2E                 mov     r13, [rbx+10h]
.text:0000000000003E32                 mov     r12, [rbx+8]
.text:0000000000003E36                 mov     rbx, [rbx]
.text:0000000000003E39                 call    _dcgettext
.text:0000000000003E3E                 push    r15
.text:0000000000003E40                 jmp     short loc_3DE6
.text:0000000000003E40 ; ---------------------------------------------------------------------------
.text:0000000000003E42                 align 8
.text:0000000000003E48
.text:0000000000003E48 loc_3E48:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E48                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003E48                 mov     r8, [rbx+8]     ; jumptable 0000000000003BD4 case 6
.text:0000000000003E4C                 mov     r12, [rbx+28h]
.text:0000000000003E50                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003E57                 mov     r15, [rbx+20h]
.text:0000000000003E5B                 mov     r14, [rbx+18h]
.text:0000000000003E5F                 mov     edx, 5          ; category
.text:0000000000003E64                 mov     r13, [rbx+10h]
.text:0000000000003E68                 xor     edi, edi        ; domainname
.text:0000000000003E6A                 mov     rbx, [rbx]
.text:0000000000003E6D                 mov     [rsp+58h+var_58], r8
.text:0000000000003E71                 call    _dcgettext
.text:0000000000003E76                 sub     rsp, 8
.text:0000000000003E7A                 mov     r9, r13
.text:0000000000003E7D                 push    r12
.text:0000000000003E7F                 push    r15
.text:0000000000003E81                 push    r14
.text:0000000000003E83
.text:0000000000003E83 loc_3E83:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003E83                 mov     r8, [rsp+78h+var_58]
.text:0000000000003E88                 mov     rcx, rbx
.text:0000000000003E8B                 mov     rdx, rax
.text:0000000000003E8E                 mov     rdi, rbp
.text:0000000000003E91                 mov     esi, 1
.text:0000000000003E96                 xor     eax, eax
.text:0000000000003E98                 call    ___fprintf_chk
.text:0000000000003E9D                 add     rsp, 20h
.text:0000000000003EA1                 add     rsp, 28h
.text:0000000000003EA5                 pop     rbx
.text:0000000000003EA6                 pop     rbp
.text:0000000000003EA7                 pop     r12
.text:0000000000003EA9                 pop     r13
.text:0000000000003EAB                 pop     r14
.text:0000000000003EAD                 pop     r15
.text:0000000000003EAF                 retn
.text:0000000000003EB0 ; ---------------------------------------------------------------------------
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003EB0                                         ; DATA XREF: .rodata:jpt_3BD4↓o
.text:0000000000003EB0                 mov     r9, [rbx+10h]   ; jumptable 0000000000003BD4 case 7
.text:0000000000003EB4                 mov     r13, [rbx+30h]
.text:0000000000003EB8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003EBF                 mov     r12, [rbx+28h]
.text:0000000000003EC3                 mov     r15, [rbx+20h]
.text:0000000000003EC7                 mov     edx, 5          ; category
.text:0000000000003ECC                 mov     r14, [rbx+18h]
.text:0000000000003ED0                 mov     r8, [rbx+8]
.text:0000000000003ED4                 xor     edi, edi        ; domainname
.text:0000000000003ED6                 mov     [rsp+58h+var_50], r9
.text:0000000000003EDB                 mov     rbx, [rbx]
.text:0000000000003EDE                 mov     [rsp+58h+var_58], r8
.text:0000000000003EE2                 call    _dcgettext
.text:0000000000003EE7                 push    r13
.text:0000000000003EE9                 push    r12
.text:0000000000003EEB                 push    r15
.text:0000000000003EED                 push    r14
.text:0000000000003EEF                 mov     r9, [rsp+78h+var_50]
.text:0000000000003EF4                 jmp     short loc_3E83
.text:0000000000003EF4 ; ---------------------------------------------------------------------------
.text:0000000000003EF6                 align 20h
.text:0000000000003F00
.text:0000000000003F00 def_3BD4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003F00                 mov     r10, [rbx+40h]  ; jumptable 0000000000003BD4 default case
.text:0000000000003F04                 mov     r9, [rbx+38h]
.text:0000000000003F08                 mov     edx, 5
.text:0000000000003F0D                 mov     rax, [rbx+10h]
.text:0000000000003F11                 mov     r8, [rbx+8]
.text:0000000000003F15                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003F1C                 mov     r13, [rbx+30h]
.text:0000000000003F20                 mov     r12, [rbx+28h]
.text:0000000000003F24                 mov     r15, [rbx+20h]
.text:0000000000003F28                 mov     r14, [rbx+18h]
.text:0000000000003F2C                 mov     [rsp+58h+var_40], r10
.text:0000000000003F31                 mov     [rsp+58h+var_48], r9
.text:0000000000003F36                 mov     [rsp+58h+var_58], rax
.text:0000000000003F3A                 mov     [rsp+58h+var_50], r8
.text:0000000000003F3F                 mov     rbx, [rbx]
.text:0000000000003F42                 jmp     loc_3CD2
.text:0000000000003F42 ; } // starts at 3B30
.text:0000000000003F42 version_etc_arn endp
.text:0000000000003F42
.text:0000000000003F42 ; ---------------------------------------------------------------------------
.text:0000000000003F47                 align 10h
.text:0000000000003F50
.text:0000000000003F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F50
.text:0000000000003F50 ; Attributes: info_from_lumina
.text:0000000000003F50
.text:0000000000003F50 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000003F50                 public version_etc_ar
.text:0000000000003F50 version_etc_ar  proc near
.text:0000000000003F50 ; __unwind {
.text:0000000000003F50                 xor     r9d, r9d
.text:0000000000003F53                 cmp     qword ptr [r8], 0
.text:0000000000003F57                 jz      short loc_3F6B
.text:0000000000003F59                 nop     dword ptr [rax+00000000h]
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000003F60                 add     r9, 1
.text:0000000000003F64                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000003F69                 jnz     short loc_3F60
.text:0000000000003F6B
.text:0000000000003F6B loc_3F6B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000003F6B                 jmp     version_etc_arn
.text:0000000000003F6B ; } // starts at 3F50
.text:0000000000003F6B version_etc_ar  endp
.text:0000000000003F6B
.text:0000000000003F70
.text:0000000000003F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F70
.text:0000000000003F70 ; Attributes: info_from_lumina
.text:0000000000003F70
.text:0000000000003F70 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000003F70                 public version_etc_va
.text:0000000000003F70 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000003F70                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000003F70
.text:0000000000003F70 authtab         = qword ptr -68h
.text:0000000000003F70 var_10          = qword ptr -10h
.text:0000000000003F70
.text:0000000000003F70 ; __unwind {
.text:0000000000003F70                 sub     rsp, 68h
.text:0000000000003F74                 mov     r10, r8
.text:0000000000003F77                 xor     r9d, r9d
.text:0000000000003F7A                 mov     rax, fs:28h
.text:0000000000003F83                 mov     [rsp+68h+var_10], rax
.text:0000000000003F88                 xor     eax, eax
.text:0000000000003F8A                 mov     r8, rsp
.text:0000000000003F8D                 nop     dword ptr [rax]
.text:0000000000003F90
.text:0000000000003F90 loc_3F90:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000003F90                 mov     eax, [r10]
.text:0000000000003F93                 cmp     eax, 2Fh ; '/'
.text:0000000000003F96                 ja      short loc_3FDA
.text:0000000000003F98                 mov     r11d, eax
.text:0000000000003F9B                 add     r11, [r10+10h]
.text:0000000000003F9F                 add     eax, 8
.text:0000000000003FA2                 mov     [r10], eax
.text:0000000000003FA5
.text:0000000000003FA5 loc_3FA5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000003FA5                 mov     rax, [r11]
.text:0000000000003FA8                 test    rax, rax
.text:0000000000003FAB                 mov     [r8+r9*8], rax
.text:0000000000003FAF                 jz      short loc_3FBB
.text:0000000000003FB1                 add     r9, 1
.text:0000000000003FB5                 cmp     r9, 0Ah
.text:0000000000003FB9                 jnz     short loc_3F90
.text:0000000000003FBB
.text:0000000000003FBB loc_3FBB:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000003FBB                 call    version_etc_arn
.text:0000000000003FC0                 mov     rax, [rsp+68h+var_10]
.text:0000000000003FC5                 xor     rax, fs:28h
.text:0000000000003FCE                 jnz     short loc_3FD5
.text:0000000000003FD0                 add     rsp, 68h
.text:0000000000003FD4                 retn
.text:0000000000003FD5 ; ---------------------------------------------------------------------------
.text:0000000000003FD5
.text:0000000000003FD5 loc_3FD5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000003FD5                 call    ___stack_chk_fail
.text:0000000000003FDA ; ---------------------------------------------------------------------------
.text:0000000000003FDA
.text:0000000000003FDA loc_3FDA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000003FDA                 mov     r11, [r10+8]
.text:0000000000003FDE                 lea     rax, [r11+8]
.text:0000000000003FE2                 mov     [r10+8], rax
.text:0000000000003FE6                 jmp     short loc_3FA5
.text:0000000000003FE6 ; } // starts at 3F70
.text:0000000000003FE6 version_etc_va  endp
.text:0000000000003FE6
.text:0000000000003FE6 ; ---------------------------------------------------------------------------
.text:0000000000003FE8                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FF0
.text:0000000000003FF0 ; Attributes: info_from_lumina
.text:0000000000003FF0
.text:0000000000003FF0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000003FF0                 public version_etc
.text:0000000000003FF0 version_etc     proc near
.text:0000000000003FF0
.text:0000000000003FF0 var_C0          = dword ptr -0C0h
.text:0000000000003FF0 var_B8          = qword ptr -0B8h
.text:0000000000003FF0 var_B0          = qword ptr -0B0h
.text:0000000000003FF0 var_A8          = byte ptr -0A8h
.text:0000000000003FF0 var_50          = qword ptr -50h
.text:0000000000003FF0 var_48          = byte ptr -48h
.text:0000000000003FF0 var_28          = qword ptr -28h
.text:0000000000003FF0 var_20          = qword ptr -20h
.text:0000000000003FF0 arg_0           = byte ptr  8
.text:0000000000003FF0
.text:0000000000003FF0 ; __unwind {
.text:0000000000003FF0                 push    rbp
.text:0000000000003FF1                 push    rbx
.text:0000000000003FF2                 mov     r10d, 20h ; ' '
.text:0000000000003FF8                 xor     r11d, r11d
.text:0000000000003FFB                 sub     rsp, 0B8h
.text:0000000000004002                 mov     rax, fs:28h
.text:000000000000400B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004010                 xor     eax, eax
.text:0000000000004012                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000401A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004022                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000402A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000402F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004037                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000403F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004044                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000404C                 xor     r9d, r9d
.text:000000000000404F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004054                 mov     rbp, rax
.text:0000000000004057                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004060
.text:0000000000004060 loc_4060:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004060                 cmp     r10d, 2Fh ; '/'
.text:0000000000004064                 ja      short loc_40BC
.text:0000000000004066                 mov     eax, r10d
.text:0000000000004069                 mov     r11d, 1
.text:000000000000406F                 add     r10d, 8
.text:0000000000004073                 add     rax, rbp
.text:0000000000004076
.text:0000000000004076 loc_4076:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004076                 mov     rax, [rax]
.text:0000000000004079                 test    rax, rax
.text:000000000000407C                 mov     [r8+r9*8], rax
.text:0000000000004080                 jz      short loc_408C
.text:0000000000004082                 add     r9, 1
.text:0000000000004086                 cmp     r9, 0Ah
.text:000000000000408A                 jnz     short loc_4060
.text:000000000000408C
.text:000000000000408C loc_408C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000408C                 test    r11b, r11b
.text:000000000000408F                 jnz     short loc_40B5
.text:0000000000004091
.text:0000000000004091 loc_4091:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004091                 call    version_etc_arn
.text:0000000000004096                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000409B                 xor     rax, fs:28h
.text:00000000000040A4                 jnz     short loc_40B0
.text:00000000000040A6                 add     rsp, 0B8h
.text:00000000000040AD                 pop     rbx
.text:00000000000040AE                 pop     rbp
.text:00000000000040AF                 retn
.text:00000000000040B0 ; ---------------------------------------------------------------------------
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000040B0                 call    ___stack_chk_fail
.text:00000000000040B5 ; ---------------------------------------------------------------------------
.text:00000000000040B5
.text:00000000000040B5 loc_40B5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000040B5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000040BA                 jmp     short loc_4091
.text:00000000000040BC ; ---------------------------------------------------------------------------
.text:00000000000040BC
.text:00000000000040BC loc_40BC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000040BC                 mov     rax, rbx
.text:00000000000040BF                 add     rbx, 8
.text:00000000000040C3                 jmp     short loc_4076
.text:00000000000040C3 ; } // starts at 3FF0
.text:00000000000040C3 version_etc     endp
.text:00000000000040C3
.text:00000000000040C3 ; ---------------------------------------------------------------------------
.text:00000000000040C5                 align 10h
.text:00000000000040D0
.text:00000000000040D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040D0
.text:00000000000040D0 ; Attributes: info_from_lumina
.text:00000000000040D0
.text:00000000000040D0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000040D0                 public emit_bug_reporting_address
.text:00000000000040D0 emit_bug_reporting_address proc near
.text:00000000000040D0 ; __unwind {
.text:00000000000040D0                 push    rbx
.text:00000000000040D1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000040D8                 mov     edx, 5          ; category
.text:00000000000040DD                 xor     edi, edi        ; domainname
.text:00000000000040DF                 call    _dcgettext
.text:00000000000040E4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000040EB                 mov     rsi, rax
.text:00000000000040EE                 mov     edi, 1
.text:00000000000040F3                 xor     eax, eax
.text:00000000000040F5                 call    ___printf_chk
.text:00000000000040FA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004101                 mov     edx, 5          ; category
.text:0000000000004106                 xor     edi, edi        ; domainname
.text:0000000000004108                 call    _dcgettext
.text:000000000000410D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004114                 lea     rdx, unk_47F8
.text:000000000000411B                 mov     rsi, rax
.text:000000000000411E                 mov     edi, 1
.text:0000000000004123                 xor     eax, eax
.text:0000000000004125                 call    ___printf_chk
.text:000000000000412A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004131                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004138                 xor     edi, edi        ; domainname
.text:000000000000413A                 mov     edx, 5          ; category
.text:000000000000413F                 call    _dcgettext
.text:0000000000004144                 mov     rsi, rbx        ; stream
.text:0000000000004147                 mov     rdi, rax        ; s
.text:000000000000414A                 pop     rbx
.text:000000000000414B                 jmp     _fputs_unlocked
.text:000000000000414B ; } // starts at 40D0
.text:000000000000414B emit_bug_reporting_address endp
.text:000000000000414B
.text:0000000000004150
.text:0000000000004150 ; =============== S U B R O U T I N E =======================================
.text:0000000000004150
.text:0000000000004150
.text:0000000000004150                 public xmalloc
.text:0000000000004150 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004150                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004150 ; __unwind {
.text:0000000000004150                 push    rbx
.text:0000000000004151                 mov     rbx, rdi
.text:0000000000004154                 call    _malloc
.text:0000000000004159                 test    rax, rax
.text:000000000000415C                 jnz     short loc_4163
.text:000000000000415E                 test    rbx, rbx
.text:0000000000004161                 jnz     short loc_4165
.text:0000000000004163
.text:0000000000004163 loc_4163:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004163                 pop     rbx
.text:0000000000004164                 retn
.text:0000000000004165 ; ---------------------------------------------------------------------------
.text:0000000000004165
.text:0000000000004165 loc_4165:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004165                 call    xalloc_die
.text:0000000000004165 ; } // starts at 4150
.text:0000000000004165 xmalloc         endp
.text:0000000000004165
.text:0000000000004165 ; ---------------------------------------------------------------------------
.text:000000000000416A                 align 10h
.text:0000000000004170
.text:0000000000004170 ; =============== S U B R O U T I N E =======================================
.text:0000000000004170
.text:0000000000004170 ; Attributes: info_from_lumina
.text:0000000000004170
.text:0000000000004170 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004170                 public xnmalloc
.text:0000000000004170 xnmalloc        proc near
.text:0000000000004170 ; __unwind {
.text:0000000000004170                 mov     rax, rdi
.text:0000000000004173                 mul     rsi
.text:0000000000004176                 mov     rdi, rax
.text:0000000000004179                 seto    al
.text:000000000000417C                 test    rdi, rdi
.text:000000000000417F                 js      short loc_418B
.text:0000000000004181                 movzx   eax, al
.text:0000000000004184                 test    rax, rax
.text:0000000000004187                 jnz     short loc_418B
.text:0000000000004189                 jmp     short xmalloc
.text:000000000000418B ; ---------------------------------------------------------------------------
.text:000000000000418B
.text:000000000000418B loc_418B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000418B                                         ; xnmalloc+17↑j
.text:000000000000418B                 sub     rsp, 8
.text:000000000000418F                 call    xalloc_die
.text:000000000000418F ; } // starts at 4170
.text:000000000000418F xnmalloc        endp
.text:000000000000418F
.text:000000000000418F ; ---------------------------------------------------------------------------
.text:0000000000004194                 align 20h
.text:00000000000041A0
.text:00000000000041A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041A0
.text:00000000000041A0
.text:00000000000041A0                 public xcharalloc
.text:00000000000041A0 xcharalloc      proc near
.text:00000000000041A0 ; __unwind {
.text:00000000000041A0                 jmp     short xmalloc
.text:00000000000041A0 ; } // starts at 41A0
.text:00000000000041A0 xcharalloc      endp
.text:00000000000041A0
.text:00000000000041A0 ; ---------------------------------------------------------------------------
.text:00000000000041A2                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0 ; Attributes: info_from_lumina
.text:00000000000041B0
.text:00000000000041B0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000041B0                 public xrealloc
.text:00000000000041B0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000041B0                                         ; quotearg_n_options+182↑p ...
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 test    rsi, rsi
.text:00000000000041B3                 push    rbx
.text:00000000000041B4                 mov     rbx, rsi
.text:00000000000041B7                 jnz     short loc_41BE
.text:00000000000041B9                 test    rdi, rdi
.text:00000000000041BC                 jnz     short loc_41D8
.text:00000000000041BE
.text:00000000000041BE loc_41BE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000041BE                 mov     rsi, rbx        ; size
.text:00000000000041C1                 call    _realloc
.text:00000000000041C6                 test    rax, rax
.text:00000000000041C9                 jnz     short loc_41D0
.text:00000000000041CB                 test    rbx, rbx
.text:00000000000041CE                 jnz     short loc_41E1
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000041D0                 pop     rbx
.text:00000000000041D1                 retn
.text:00000000000041D1 ; ---------------------------------------------------------------------------
.text:00000000000041D2                 align 8
.text:00000000000041D8
.text:00000000000041D8 loc_41D8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000041D8                 call    _free
.text:00000000000041DD                 xor     eax, eax
.text:00000000000041DF                 pop     rbx
.text:00000000000041E0                 retn
.text:00000000000041E1 ; ---------------------------------------------------------------------------
.text:00000000000041E1
.text:00000000000041E1 loc_41E1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000041E1                 call    xalloc_die
.text:00000000000041E1 ; } // starts at 41B0
.text:00000000000041E1 xrealloc        endp
.text:00000000000041E1
.text:00000000000041E1 ; ---------------------------------------------------------------------------
.text:00000000000041E6                 align 10h
.text:00000000000041F0
.text:00000000000041F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041F0
.text:00000000000041F0 ; Attributes: info_from_lumina
.text:00000000000041F0
.text:00000000000041F0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000041F0                 public xnrealloc
.text:00000000000041F0 xnrealloc       proc near
.text:00000000000041F0 ; __unwind {
.text:00000000000041F0                 mov     rax, rsi
.text:00000000000041F3                 mul     rdx
.text:00000000000041F6                 mov     rsi, rax
.text:00000000000041F9                 seto    al
.text:00000000000041FC                 test    rsi, rsi
.text:00000000000041FF                 js      short loc_420B
.text:0000000000004201                 movzx   eax, al
.text:0000000000004204                 test    rax, rax
.text:0000000000004207                 jnz     short loc_420B
.text:0000000000004209                 jmp     short xrealloc
.text:000000000000420B ; ---------------------------------------------------------------------------
.text:000000000000420B
.text:000000000000420B loc_420B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000420B                                         ; xnrealloc+17↑j
.text:000000000000420B                 sub     rsp, 8
.text:000000000000420F                 call    xalloc_die
.text:000000000000420F ; } // starts at 41F0
.text:000000000000420F xnrealloc       endp
.text:000000000000420F
.text:000000000000420F ; ---------------------------------------------------------------------------
.text:0000000000004214                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220 ; Attributes: info_from_lumina
.text:0000000000004220
.text:0000000000004220 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004220                 public x2nrealloc
.text:0000000000004220 x2nrealloc      proc near
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 test    rdi, rdi
.text:0000000000004223                 mov     r9, rdx
.text:0000000000004226                 mov     rcx, [rsi]
.text:0000000000004229                 jz      short loc_4260
.text:000000000000422B                 xor     edx, edx
.text:000000000000422D                 mov     rax, 5555555555555554h
.text:0000000000004237                 div     r9
.text:000000000000423A                 cmp     rax, rcx
.text:000000000000423D                 jbe     short loc_427B
.text:000000000000423F                 mov     rax, rcx
.text:0000000000004242                 shr     rax, 1
.text:0000000000004245                 lea     rcx, [rax+rcx+1]
.text:000000000000424A
.text:000000000000424A loc_424A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000424A                 mov     [rsi], rcx
.text:000000000000424D                 imul    rcx, r9
.text:0000000000004251                 mov     rsi, rcx
.text:0000000000004254                 jmp     xrealloc
.text:0000000000004254 ; ---------------------------------------------------------------------------
.text:0000000000004259                 align 20h
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004260                 test    rcx, rcx
.text:0000000000004263                 jz      short loc_4288
.text:0000000000004265
.text:0000000000004265 loc_4265:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004265                 mov     rax, rcx
.text:0000000000004268                 mul     r9
.text:000000000000426B                 seto    dl
.text:000000000000426E                 test    rax, rax
.text:0000000000004271                 movzx   edx, dl
.text:0000000000004274                 js      short loc_427B
.text:0000000000004276                 test    rdx, rdx
.text:0000000000004279                 jz      short loc_424A
.text:000000000000427B
.text:000000000000427B loc_427B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000427B                                         ; x2nrealloc+54↑j
.text:000000000000427B                 sub     rsp, 8
.text:000000000000427F                 call    xalloc_die
.text:000000000000427F ; ---------------------------------------------------------------------------
.text:0000000000004284                 align 8
.text:0000000000004288
.text:0000000000004288 loc_4288:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004288                 xor     edx, edx
.text:000000000000428A                 mov     eax, 80h
.text:000000000000428F                 xor     r8d, r8d
.text:0000000000004292                 div     r9
.text:0000000000004295                 test    rax, rax
.text:0000000000004298                 setz    r8b
.text:000000000000429C                 lea     rcx, [r8+rax]
.text:00000000000042A0                 jmp     short loc_4265
.text:00000000000042A0 ; } // starts at 4220
.text:00000000000042A0 x2nrealloc      endp
.text:00000000000042A0
.text:00000000000042A0 ; ---------------------------------------------------------------------------
.text:00000000000042A2                 align 10h
.text:00000000000042B0
.text:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042B0
.text:00000000000042B0 ; Attributes: info_from_lumina
.text:00000000000042B0
.text:00000000000042B0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000042B0                 public x2realloc
.text:00000000000042B0 x2realloc       proc near
.text:00000000000042B0 ; __unwind {
.text:00000000000042B0                 test    rdi, rdi
.text:00000000000042B3                 mov     rax, [rsi]
.text:00000000000042B6                 jz      short loc_42E0
.text:00000000000042B8                 mov     rdx, 5555555555555553h
.text:00000000000042C2                 cmp     rax, rdx
.text:00000000000042C5                 ja      short loc_42F1
.text:00000000000042C7                 mov     rdx, rax
.text:00000000000042CA                 shr     rdx, 1
.text:00000000000042CD                 lea     rax, [rdx+rax+1]
.text:00000000000042D2
.text:00000000000042D2 loc_42D2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000042D2                 mov     [rsi], rax
.text:00000000000042D5                 mov     rsi, rax
.text:00000000000042D8                 jmp     xrealloc
.text:00000000000042D8 ; ---------------------------------------------------------------------------
.text:00000000000042DD                 align 20h
.text:00000000000042E0
.text:00000000000042E0 loc_42E0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000042E0                 test    rax, rax
.text:00000000000042E3                 mov     edx, 80h
.text:00000000000042E8                 cmovz   rax, rdx
.text:00000000000042EC                 test    rax, rax
.text:00000000000042EF                 jns     short loc_42D2
.text:00000000000042F1
.text:00000000000042F1 loc_42F1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000042F1                 sub     rsp, 8
.text:00000000000042F5                 call    xalloc_die
.text:00000000000042F5 ; } // starts at 42B0
.text:00000000000042F5 x2realloc       endp
.text:00000000000042F5
.text:00000000000042F5 ; ---------------------------------------------------------------------------
.text:00000000000042FA                 align 20h
.text:0000000000004300
.text:0000000000004300 ; =============== S U B R O U T I N E =======================================
.text:0000000000004300
.text:0000000000004300
.text:0000000000004300 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004300                 public xzalloc
.text:0000000000004300 xzalloc         proc near
.text:0000000000004300 ; __unwind {
.text:0000000000004300                 push    rbx
.text:0000000000004301                 mov     rbx, rdi
.text:0000000000004304                 call    xmalloc
.text:0000000000004309                 mov     rdx, rbx        ; n
.text:000000000000430C                 xor     esi, esi        ; c
.text:000000000000430E                 mov     rdi, rax        ; s
.text:0000000000004311                 pop     rbx
.text:0000000000004312                 jmp     _memset
.text:0000000000004312 ; } // starts at 4300
.text:0000000000004312 xzalloc         endp
.text:0000000000004312
.text:0000000000004312 ; ---------------------------------------------------------------------------
.text:0000000000004317                 align 20h
.text:0000000000004320
.text:0000000000004320 ; =============== S U B R O U T I N E =======================================
.text:0000000000004320
.text:0000000000004320 ; Attributes: info_from_lumina
.text:0000000000004320
.text:0000000000004320 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004320                 public xcalloc
.text:0000000000004320 xcalloc         proc near
.text:0000000000004320 ; __unwind {
.text:0000000000004320                 mov     rax, rdi
.text:0000000000004323                 sub     rsp, 8
.text:0000000000004327                 mul     rsi
.text:000000000000432A                 seto    dl
.text:000000000000432D                 test    rax, rax
.text:0000000000004330                 js      short loc_4349
.text:0000000000004332                 movzx   edx, dl
.text:0000000000004335                 test    rdx, rdx
.text:0000000000004338                 jnz     short loc_4349
.text:000000000000433A                 call    _calloc
.text:000000000000433F                 test    rax, rax
.text:0000000000004342                 jz      short loc_4349
.text:0000000000004344                 add     rsp, 8
.text:0000000000004348                 retn
.text:0000000000004349 ; ---------------------------------------------------------------------------
.text:0000000000004349
.text:0000000000004349 loc_4349:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004349                                         ; xcalloc+18↑j ...
.text:0000000000004349                 call    xalloc_die
.text:0000000000004349 ; } // starts at 4320
.text:0000000000004349 xcalloc         endp
.text:0000000000004349
.text:0000000000004349 ; ---------------------------------------------------------------------------
.text:000000000000434E                 align 10h
.text:0000000000004350
.text:0000000000004350 ; =============== S U B R O U T I N E =======================================
.text:0000000000004350
.text:0000000000004350 ; Attributes: info_from_lumina
.text:0000000000004350
.text:0000000000004350 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004350                 public xmemdup
.text:0000000000004350 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004350                                         ; xstrdup+11↓j
.text:0000000000004350 ; __unwind {
.text:0000000000004350                 push    rbp
.text:0000000000004351                 push    rbx
.text:0000000000004352                 mov     rbp, rdi
.text:0000000000004355                 mov     rdi, rsi
.text:0000000000004358                 mov     rbx, rsi
.text:000000000000435B                 sub     rsp, 8
.text:000000000000435F                 call    xmalloc
.text:0000000000004364                 add     rsp, 8
.text:0000000000004368                 mov     rdx, rbx        ; n
.text:000000000000436B                 mov     rsi, rbp        ; src
.text:000000000000436E                 pop     rbx
.text:000000000000436F                 pop     rbp
.text:0000000000004370                 mov     rdi, rax        ; dest
.text:0000000000004373                 jmp     _memcpy
.text:0000000000004373 ; } // starts at 4350
.text:0000000000004373 xmemdup         endp
.text:0000000000004373
.text:0000000000004373 ; ---------------------------------------------------------------------------
.text:0000000000004378                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380
.text:0000000000004380 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004380                 public xstrdup
.text:0000000000004380 xstrdup         proc near
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 push    rbx
.text:0000000000004381                 mov     rbx, rdi
.text:0000000000004384                 call    _strlen
.text:0000000000004389                 mov     rdi, rbx        ; src
.text:000000000000438C                 lea     rsi, [rax+1]    ; n
.text:0000000000004390                 pop     rbx
.text:0000000000004391                 jmp     short xmemdup
.text:0000000000004391 ; } // starts at 4380
.text:0000000000004391 xstrdup         endp
.text:0000000000004391
.text:0000000000004391 ; ---------------------------------------------------------------------------
.text:0000000000004393                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0 ; Attributes: noreturn info_from_lumina
.text:00000000000043A0
.text:00000000000043A0 ; void __cdecl xalloc_die()
.text:00000000000043A0                 public xalloc_die
.text:00000000000043A0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3376↑p
.text:00000000000043A0                                         ; xmalloc:loc_4165↑p ...
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000043A7                 sub     rsp, 8
.text:00000000000043AB                 mov     edx, 5          ; category
.text:00000000000043B0                 xor     edi, edi        ; domainname
.text:00000000000043B2                 call    _dcgettext
.text:00000000000043B7                 mov     edi, cs:exit_failure ; status
.text:00000000000043BD                 lea     rdx, format+4   ; format
.text:00000000000043C4                 mov     rcx, rax
.text:00000000000043C7                 xor     esi, esi        ; errnum
.text:00000000000043C9                 xor     eax, eax
.text:00000000000043CB                 call    _error
.text:00000000000043D0                 call    _abort
.text:00000000000043D0 ; } // starts at 43A0
.text:00000000000043D0 xalloc_die      endp
.text:00000000000043D0
.text:00000000000043D0 ; ---------------------------------------------------------------------------
.text:00000000000043D5                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0 ; Attributes: info_from_lumina
.text:00000000000043E0
.text:00000000000043E0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000043E0                 public rpl_mbrtowc
.text:00000000000043E0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000043E0
.text:00000000000043E0 pwc             = dword ptr -34h
.text:00000000000043E0 var_30          = qword ptr -30h
.text:00000000000043E0
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 push    r13
.text:00000000000043E2                 push    r12
.text:00000000000043E4                 mov     r13, rsi
.text:00000000000043E7                 push    rbp
.text:00000000000043E8                 push    rbx
.text:00000000000043E9                 mov     rbx, rdi
.text:00000000000043EC                 mov     r12, rdx
.text:00000000000043EF                 sub     rsp, 18h
.text:00000000000043F3                 mov     rax, fs:28h
.text:00000000000043FC                 mov     [rsp+38h+var_30], rax
.text:0000000000004401                 xor     eax, eax
.text:0000000000004403                 lea     rax, [rsp+38h+pwc]
.text:0000000000004408                 test    rdi, rdi
.text:000000000000440B                 cmovz   rbx, rax
.text:000000000000440F                 mov     rdi, rbx        ; pwc
.text:0000000000004412                 call    _mbrtowc
.text:0000000000004417                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000441B                 mov     rbp, rax
.text:000000000000441E                 jbe     short loc_4440
.text:0000000000004420                 test    r12, r12
.text:0000000000004423                 jz      short loc_4440
.text:0000000000004425                 xor     edi, edi
.text:0000000000004427                 call    hard_locale
.text:000000000000442C                 test    al, al
.text:000000000000442E                 jnz     short loc_4440
.text:0000000000004430                 movzx   eax, byte ptr [r13+0]
.text:0000000000004435                 mov     ebp, 1
.text:000000000000443A                 mov     [rbx], eax
.text:000000000000443C                 nop     dword ptr [rax+00h]
.text:0000000000004440
.text:0000000000004440 loc_4440:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004440                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004440                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004445                 xor     rdx, fs:28h
.text:000000000000444E                 mov     rax, rbp
.text:0000000000004451                 jnz     short loc_445E
.text:0000000000004453                 add     rsp, 18h
.text:0000000000004457                 pop     rbx
.text:0000000000004458                 pop     rbp
.text:0000000000004459                 pop     r12
.text:000000000000445B                 pop     r13
.text:000000000000445D                 retn
.text:000000000000445E ; ---------------------------------------------------------------------------
.text:000000000000445E
.text:000000000000445E loc_445E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000445E                 call    ___stack_chk_fail
.text:000000000000445E ; } // starts at 43E0
.text:000000000000445E rpl_mbrtowc     endp
.text:000000000000445E
.text:000000000000445E ; ---------------------------------------------------------------------------
.text:0000000000004463                 align 10h
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470 ; Attributes: info_from_lumina
.text:0000000000004470
.text:0000000000004470 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004470                 public close_stream
.text:0000000000004470 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004470                                         ; close_stdout+33↑p
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 push    r12
.text:0000000000004472                 push    rbp
.text:0000000000004473                 mov     rbp, rdi
.text:0000000000004476                 push    rbx
.text:0000000000004477                 call    ___fpending
.text:000000000000447C                 mov     ebx, [rbp+0]
.text:000000000000447F                 mov     rdi, rbp        ; stream
.text:0000000000004482                 mov     r12, rax
.text:0000000000004485                 call    rpl_fclose
.text:000000000000448A                 and     ebx, 20h
.text:000000000000448D                 test    ebx, ebx
.text:000000000000448F                 jnz     short loc_44A8
.text:0000000000004491                 test    eax, eax
.text:0000000000004493                 jz      short loc_449F
.text:0000000000004495                 test    r12, r12
.text:0000000000004498                 mov     eax, 0FFFFFFFFh
.text:000000000000449D                 jz      short loc_44D8
.text:000000000000449F
.text:000000000000449F loc_449F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000449F                 pop     rbx
.text:00000000000044A0                 pop     rbp
.text:00000000000044A1                 pop     r12
.text:00000000000044A3                 retn
.text:00000000000044A3 ; ---------------------------------------------------------------------------
.text:00000000000044A4                 align 8
.text:00000000000044A8
.text:00000000000044A8 loc_44A8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000044A8                 test    eax, eax
.text:00000000000044AA                 jnz     short loc_44C8
.text:00000000000044AC                 call    ___errno_location
.text:00000000000044B1                 mov     dword ptr [rax], 0
.text:00000000000044B7                 mov     eax, 0FFFFFFFFh
.text:00000000000044BC                 pop     rbx
.text:00000000000044BD                 pop     rbp
.text:00000000000044BE                 pop     r12
.text:00000000000044C0                 retn
.text:00000000000044C0 ; ---------------------------------------------------------------------------
.text:00000000000044C1                 align 8
.text:00000000000044C8
.text:00000000000044C8 loc_44C8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000044C8                 pop     rbx
.text:00000000000044C9                 mov     eax, 0FFFFFFFFh
.text:00000000000044CE                 pop     rbp
.text:00000000000044CF                 pop     r12
.text:00000000000044D1                 retn
.text:00000000000044D1 ; ---------------------------------------------------------------------------
.text:00000000000044D2                 align 8
.text:00000000000044D8
.text:00000000000044D8 loc_44D8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000044D8                 call    ___errno_location
.text:00000000000044DD                 cmp     dword ptr [rax], 9
.text:00000000000044E0                 pop     rbx
.text:00000000000044E1                 pop     rbp
.text:00000000000044E2                 pop     r12
.text:00000000000044E4                 setnz   al
.text:00000000000044E7                 movzx   eax, al
.text:00000000000044EA                 neg     eax
.text:00000000000044EC                 retn
.text:00000000000044EC ; } // starts at 4470
.text:00000000000044EC close_stream    endp
.text:00000000000044EC
.text:00000000000044EC ; ---------------------------------------------------------------------------
.text:00000000000044ED                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0
.text:00000000000044F0                 public hard_locale
.text:00000000000044F0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 sub     rsp, 8
.text:00000000000044F4                 xor     esi, esi        ; locale
.text:00000000000044F6                 call    _setlocale
.text:00000000000044FB                 mov     rdx, rax
.text:00000000000044FE                 mov     eax, 1
.text:0000000000004503                 test    rdx, rdx
.text:0000000000004506                 jz      short loc_4525
.text:0000000000004508                 lea     rdi, aC         ; "C"
.text:000000000000450F                 mov     ecx, 2
.text:0000000000004514                 mov     rsi, rdx
.text:0000000000004517                 repe cmpsb
.text:0000000000004519                 setnbe  cl
.text:000000000000451C                 sbb     cl, 0
.text:000000000000451F                 xor     eax, eax
.text:0000000000004521                 test    cl, cl
.text:0000000000004523                 jnz     short loc_4530
.text:0000000000004525
.text:0000000000004525 loc_4525:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004525                 add     rsp, 8
.text:0000000000004529                 retn
.text:0000000000004529 ; ---------------------------------------------------------------------------
.text:000000000000452A                 align 10h
.text:0000000000004530
.text:0000000000004530 loc_4530:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004530                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004537                 mov     ecx, 6
.text:000000000000453C                 mov     rsi, rdx
.text:000000000000453F                 repe cmpsb
.text:0000000000004541                 setnbe  al
.text:0000000000004544                 sbb     al, 0
.text:0000000000004546                 test    al, al
.text:0000000000004548                 setnz   al
.text:000000000000454B                 add     rsp, 8
.text:000000000000454F                 retn
.text:000000000000454F ; } // starts at 44F0
.text:000000000000454F hard_locale     endp
.text:000000000000454F
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550                 public locale_charset
.text:0000000000004550 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 sub     rsp, 8
.text:0000000000004554                 mov     edi, 0Eh        ; item
.text:0000000000004559                 call    _nl_langinfo
.text:000000000000455E                 test    rax, rax
.text:0000000000004561                 jz      short loc_4580
.text:0000000000004563                 cmp     byte ptr [rax], 0
.text:0000000000004566                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000456D                 cmovz   rax, rdx
.text:0000000000004571                 add     rsp, 8
.text:0000000000004575                 retn
.text:0000000000004575 ; ---------------------------------------------------------------------------
.text:0000000000004576                 align 20h
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004580                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004587                 add     rsp, 8
.text:000000000000458B                 retn
.text:000000000000458B ; } // starts at 4550
.text:000000000000458B locale_charset  endp
.text:000000000000458B
.text:000000000000458B ; ---------------------------------------------------------------------------
.text:000000000000458C                 align 10h
.text:0000000000004590
.text:0000000000004590 ; =============== S U B R O U T I N E =======================================
.text:0000000000004590
.text:0000000000004590 ; Attributes: info_from_lumina
.text:0000000000004590
.text:0000000000004590 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004590                 public rpl_fclose
.text:0000000000004590 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004590 ; __unwind {
.text:0000000000004590                 push    r12
.text:0000000000004592                 push    rbp
.text:0000000000004593                 push    rbx
.text:0000000000004594                 mov     rbx, rdi
.text:0000000000004597                 call    _fileno
.text:000000000000459C                 test    eax, eax
.text:000000000000459E                 mov     rdi, rbx        ; fp
.text:00000000000045A1                 js      short loc_45F7
.text:00000000000045A3                 call    ___freading
.text:00000000000045A8                 test    eax, eax
.text:00000000000045AA                 jnz     short loc_45D8
.text:00000000000045AC
.text:00000000000045AC loc_45AC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000045AC                 mov     rdi, rbx        ; stream
.text:00000000000045AF                 call    rpl_fflush
.text:00000000000045B4                 test    eax, eax
.text:00000000000045B6                 jz      short loc_45F4
.text:00000000000045B8                 call    ___errno_location
.text:00000000000045BD                 mov     r12d, [rax]
.text:00000000000045C0                 mov     rdi, rbx        ; stream
.text:00000000000045C3                 mov     rbp, rax
.text:00000000000045C6                 call    _fclose
.text:00000000000045CB                 test    r12d, r12d
.text:00000000000045CE                 jnz     short loc_4600
.text:00000000000045D0
.text:00000000000045D0 loc_45D0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000045D0                 pop     rbx
.text:00000000000045D1                 pop     rbp
.text:00000000000045D2                 pop     r12
.text:00000000000045D4                 retn
.text:00000000000045D4 ; ---------------------------------------------------------------------------
.text:00000000000045D5                 align 8
.text:00000000000045D8
.text:00000000000045D8 loc_45D8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000045D8                 mov     rdi, rbx        ; stream
.text:00000000000045DB                 call    _fileno
.text:00000000000045E0                 xor     esi, esi        ; offset
.text:00000000000045E2                 mov     edx, 1          ; whence
.text:00000000000045E7                 mov     edi, eax        ; fd
.text:00000000000045E9                 call    _lseek
.text:00000000000045EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000045F2                 jnz     short loc_45AC
.text:00000000000045F4
.text:00000000000045F4 loc_45F4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000045F4                 mov     rdi, rbx        ; stream
.text:00000000000045F7
.text:00000000000045F7 loc_45F7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000045F7                 pop     rbx
.text:00000000000045F8                 pop     rbp
.text:00000000000045F9                 pop     r12
.text:00000000000045FB                 jmp     _fclose
.text:0000000000004600 ; ---------------------------------------------------------------------------
.text:0000000000004600
.text:0000000000004600 loc_4600:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004600                 mov     [rbp+0], r12d
.text:0000000000004604                 mov     eax, 0FFFFFFFFh
.text:0000000000004609                 jmp     short loc_45D0
.text:0000000000004609 ; } // starts at 4590
.text:0000000000004609 rpl_fclose      endp
.text:0000000000004609
.text:0000000000004609 ; ---------------------------------------------------------------------------
.text:000000000000460B                 align 10h
.text:0000000000004610
.text:0000000000004610 ; =============== S U B R O U T I N E =======================================
.text:0000000000004610
.text:0000000000004610 ; Attributes: info_from_lumina
.text:0000000000004610
.text:0000000000004610 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004610                 public rpl_fflush
.text:0000000000004610 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004610 ; __unwind {
.text:0000000000004610                 test    rdi, rdi
.text:0000000000004613                 push    rbx
.text:0000000000004614                 mov     rbx, rdi
.text:0000000000004617                 jz      short loc_462A
.text:0000000000004619                 call    ___freading
.text:000000000000461E                 test    eax, eax
.text:0000000000004620                 jz      short loc_462A
.text:0000000000004622                 test    dword ptr [rbx], 100h
.text:0000000000004628                 jnz     short loc_4638
.text:000000000000462A
.text:000000000000462A loc_462A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000462A                                         ; rpl_fflush+10↑j
.text:000000000000462A                 mov     rdi, rbx        ; stream
.text:000000000000462D                 pop     rbx
.text:000000000000462E                 jmp     _fflush
.text:000000000000462E ; ---------------------------------------------------------------------------
.text:0000000000004633                 align 8
.text:0000000000004638
.text:0000000000004638 loc_4638:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004638                 mov     rdi, rbx
.text:000000000000463B                 mov     edx, 1
.text:0000000000004640                 xor     esi, esi
.text:0000000000004642                 call    rpl_fseeko
.text:0000000000004647                 mov     rdi, rbx        ; stream
.text:000000000000464A                 pop     rbx
.text:000000000000464B                 jmp     _fflush
.text:000000000000464B ; } // starts at 4610
.text:000000000000464B rpl_fflush      endp
.text:000000000000464B
.text:0000000000004650
.text:0000000000004650 ; =============== S U B R O U T I N E =======================================
.text:0000000000004650
.text:0000000000004650 ; Attributes: info_from_lumina
.text:0000000000004650
.text:0000000000004650 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004650                 public rpl_fseeko
.text:0000000000004650 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004650 ; __unwind {
.text:0000000000004650                 mov     rax, [rdi+8]
.text:0000000000004654                 cmp     [rdi+10h], rax
.text:0000000000004658                 jz      short loc_4660
.text:000000000000465A
.text:000000000000465A loc_465A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000465A                                         ; rpl_fseeko+1F↓j
.text:000000000000465A                 jmp     _fseeko
.text:000000000000465A ; ---------------------------------------------------------------------------
.text:000000000000465F                 align 20h
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004660                 mov     rax, [rdi+20h]
.text:0000000000004664                 cmp     [rdi+28h], rax
.text:0000000000004668                 jnz     short loc_465A
.text:000000000000466A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000466F                 jnz     short loc_465A
.text:0000000000004671                 push    r12
.text:0000000000004673                 push    rbp
.text:0000000000004674                 mov     r12d, edx
.text:0000000000004677                 push    rbx
.text:0000000000004678                 mov     rbp, rsi
.text:000000000000467B                 mov     rbx, rdi
.text:000000000000467E                 call    _fileno
.text:0000000000004683                 mov     edx, r12d       ; whence
.text:0000000000004686                 mov     rsi, rbp        ; offset
.text:0000000000004689                 mov     edi, eax        ; fd
.text:000000000000468B                 call    _lseek
.text:0000000000004690                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004694                 jz      short loc_46A2
.text:0000000000004696                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004699                 mov     [rbx+90h], rax
.text:00000000000046A0                 xor     eax, eax
.text:00000000000046A2
.text:00000000000046A2 loc_46A2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000046A2                 pop     rbx
.text:00000000000046A3                 pop     rbp
.text:00000000000046A4                 pop     r12
.text:00000000000046A6                 retn
.text:00000000000046A6 ; } // starts at 4650
.text:00000000000046A6 rpl_fseeko      endp
.text:00000000000046A6
.text:00000000000046A6 ; ---------------------------------------------------------------------------
.text:00000000000046A7                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0 ; Attributes: info_from_lumina
.text:00000000000046B0
.text:00000000000046B0 ; void _libc_csu_init(void)
.text:00000000000046B0                 public __libc_csu_init
.text:00000000000046B0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 push    r15
.text:00000000000046B2                 push    r14
.text:00000000000046B4                 mov     r15, rdx
.text:00000000000046B7                 push    r13
.text:00000000000046B9                 push    r12
.text:00000000000046BB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000046C2                 push    rbp
.text:00000000000046C3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000046CA                 push    rbx
.text:00000000000046CB                 mov     r13d, edi
.text:00000000000046CE                 mov     r14, rsi
.text:00000000000046D1                 sub     rbp, r12
.text:00000000000046D4                 sub     rsp, 8
.text:00000000000046D8                 sar     rbp, 3
.text:00000000000046DC                 call    _init_proc
.text:00000000000046E1                 test    rbp, rbp
.text:00000000000046E4                 jz      short loc_4706
.text:00000000000046E6                 xor     ebx, ebx
.text:00000000000046E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000046F0                 mov     rdx, r15
.text:00000000000046F3                 mov     rsi, r14
.text:00000000000046F6                 mov     edi, r13d
.text:00000000000046F9                 call    ds:(__frame_dummy_init_array_entry - 206BB0h)[r12+rbx*8]
.text:00000000000046FD                 add     rbx, 1
.text:0000000000004701                 cmp     rbp, rbx
.text:0000000000004704                 jnz     short loc_46F0
.text:0000000000004706
.text:0000000000004706 loc_4706:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004706                 add     rsp, 8
.text:000000000000470A                 pop     rbx
.text:000000000000470B                 pop     rbp
.text:000000000000470C                 pop     r12
.text:000000000000470E                 pop     r13
.text:0000000000004710                 pop     r14
.text:0000000000004712                 pop     r15
.text:0000000000004714                 retn
.text:0000000000004714 ; } // starts at 46B0
.text:0000000000004714 __libc_csu_init endp
.text:0000000000004714
.text:0000000000004714 ; ---------------------------------------------------------------------------
.text:0000000000004715                 align 20h
.text:0000000000004720
.text:0000000000004720 ; =============== S U B R O U T I N E =======================================
.text:0000000000004720
.text:0000000000004720
.text:0000000000004720 ; void _libc_csu_fini(void)
.text:0000000000004720                 public __libc_csu_fini
.text:0000000000004720 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004720 ; __unwind {
.text:0000000000004720                 rep retn
.text:0000000000004720 ; } // starts at 4720
.text:0000000000004720 __libc_csu_fini endp
.text:0000000000004720
.text:0000000000004720 ; ---------------------------------------------------------------------------
.text:0000000000004722                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730
.text:0000000000004730 atexit          proc near               ; CODE XREF: main+4A↑p
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004737                 xor     esi, esi        ; obj
.text:0000000000004739                 jmp     ___cxa_atexit
.text:0000000000004739 ; } // starts at 4730
.text:0000000000004739 atexit          endp
.text:0000000000004739
.text:0000000000004739 _text           ends
.text:0000000000004739
LOAD:000000000000473E ; ===========================================================================
LOAD:000000000000473E
LOAD:000000000000473E ; Segment type: Pure code
LOAD:000000000000473E ; Segment permissions: Read/Execute
LOAD:000000000000473E LOAD            segment byte public 'CODE' use64
LOAD:000000000000473E                 assume cs:LOAD
LOAD:000000000000473E                 ;org 473Eh
LOAD:000000000000473E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000473E                 align 20h
LOAD:000000000000473E LOAD            ends
LOAD:000000000000473E
.fini:0000000000004740 ; ===========================================================================
.fini:0000000000004740
.fini:0000000000004740 ; Segment type: Pure code
.fini:0000000000004740 ; Segment permissions: Read/Execute
.fini:0000000000004740 _fini           segment dword public 'CODE' use64
.fini:0000000000004740                 assume cs:_fini
.fini:0000000000004740                 ;org 4740h
.fini:0000000000004740                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004740
.fini:0000000000004740 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004740
.fini:0000000000004740
.fini:0000000000004740                 public _term_proc
.fini:0000000000004740 _term_proc      proc near
.fini:0000000000004740                 sub     rsp, 8          ; _fini
.fini:0000000000004744                 add     rsp, 8
.fini:0000000000004748                 retn
.fini:0000000000004748 _term_proc      endp
.fini:0000000000004748
.fini:0000000000004748 _fini           ends
.fini:0000000000004748
LOAD:0000000000004749 ; ===========================================================================
LOAD:0000000000004749
LOAD:0000000000004749 ; Segment type: Pure code
LOAD:0000000000004749 ; Segment permissions: Read/Execute
LOAD:0000000000004749 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004749                 assume cs:LOAD
LOAD:0000000000004749                 ;org 4749h
LOAD:0000000000004749                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004749                 align 20h
LOAD:0000000000004749 LOAD            ends
LOAD:0000000000004749
.rodata:0000000000004760 ; ===========================================================================
.rodata:0000000000004760
.rodata:0000000000004760 ; Segment type: Pure data
.rodata:0000000000004760 ; Segment permissions: Read
.rodata:0000000000004760 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004760                 assume cs:_rodata
.rodata:0000000000004760                 ;org 4760h
.rodata:0000000000004760                 public _IO_stdin_used
.rodata:0000000000004760 _IO_stdin_used  db    1
.rodata:0000000000004761                 db    0
.rodata:0000000000004762                 db    2
.rodata:0000000000004763                 db    0
.rodata:0000000000004764 aWhoami         db 'whoami',0           ; DATA XREF: main+6A↑o
.rodata:0000000000004764                                         ; usage+E7↑o ...
.rodata:000000000000476B ; const char aUsageSOption[]
.rodata:000000000000476B aUsageSOption   db 'Usage: %s [OPTION]...',0Ah,0
.rodata:000000000000476B                                         ; DATA XREF: usage:loc_17BD↑o
.rodata:0000000000004782 asc_4782        db '[',0                ; DATA XREF: usage+F3↑o
.rodata:0000000000004784 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+11A↑o
.rodata:0000000000004794 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004794                                         ; DATA XREF: usage+14A↑o
.rodata:0000000000004794                                         ; usage+244↑o ...
.rodata:00000000000047AA aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+15B↑o
.rodata:00000000000047B4 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+167↑o
.rodata:00000000000047C3 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+FA↑o
.rodata:00000000000047CD aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+126↑o
.rodata:00000000000047D7 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+13E↑o
.rodata:00000000000047E1 ; const char aSOnlineHelpS[]
.rodata:00000000000047E1 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:00000000000047E1                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000047F8 unk_47F8        db  47h ; G             ; DATA XREF: main+63↑o
.rodata:00000000000047F8                                         ; usage+1CE↑o ...
.rodata:00000000000047F9                 db  4Eh ; N
.rodata:00000000000047FA                 db  55h ; U
.rodata:00000000000047FB                 db  20h
.rodata:00000000000047FC ; const char domainname[]
.rodata:00000000000047FC domainname      db 'coreutils',0        ; DATA XREF: main+2B↑o
.rodata:00000000000047FC                                         ; main+37↑o ...
.rodata:0000000000004806 ; const char s2[]
.rodata:0000000000004806 s2              db 'en_',0              ; DATA XREF: usage+1F5↑o
.rodata:0000000000004806                                         ; usage+2B6↑o
.rodata:000000000000480A ; const char aFullDocumentat[]
.rodata:000000000000480A aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000480A                                         ; DATA XREF: usage:loc_1971↑o
.rodata:000000000000480A                                         ; usage:loc_1A2E↑o
.rodata:0000000000004825 ; const char dirname[]
.rodata:0000000000004825 dirname         db '/usr/local/share/locale',0
.rodata:0000000000004825                                         ; DATA XREF: main+24↑o
.rodata:000000000000483D aRichardMlynari db 'Richard Mlynarik',0 ; DATA XREF: main+4F↑o
.rodata:000000000000484E ; const char aExtraOperandS[]
.rodata:000000000000484E aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+108↑o
.rodata:000000000000485F                 align 20h
.rodata:0000000000004860 ; const char aTrySHelpForMor[]
.rodata:0000000000004860 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004860                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004887                 align 8
.rodata:0000000000004888 ; const char aPrintTheUserNa[]
.rodata:0000000000004888 aPrintTheUserNa db 'Print the user name associated with the current effective user ID'
.rodata:0000000000004888                                         ; DATA XREF: usage+84↑o
.rodata:0000000000004888                 db '.',0Ah
.rodata:0000000000004888                 db 'Same as id -un.',0Ah
.rodata:0000000000004888                 db 0Ah,0
.rodata:00000000000048DD                 align 20h
.rodata:00000000000048E0 ; const char aHelpDisplayThi[]
.rodata:00000000000048E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000048E0                                         ; DATA XREF: usage+A9↑o
.rodata:000000000000490D                 align 10h
.rodata:0000000000004910 ; const char aVersionOutputV[]
.rodata:0000000000004910 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004910                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000004946                 align 8
.rodata:0000000000004948 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004948                                         ; DATA XREF: usage+1C7↑o
.rodata:0000000000004948                                         ; usage+22B↑o ...
.rodata:0000000000004970 ; const char aReportAnyTrans[]
.rodata:0000000000004970 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004970                                         ; DATA XREF: usage+31F↑o
.rodata:0000000000004970                 db 'am/>',0Ah,0
.rodata:00000000000049B7                 align 8
.rodata:00000000000049B8 ; const char aOrAvailableLoc[]
.rodata:00000000000049B8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000049B8                                         ; DATA XREF: usage:loc_19B6↑o
.rodata:00000000000049EB                 align 10h
.rodata:00000000000049F0 ; const char msgid[]
.rodata:00000000000049F0 msgid           db 'cannot find name for user ID %lu',0
.rodata:00000000000049F0                                         ; DATA XREF: main:loc_15E8↑o
.rodata:0000000000004A11 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004A16 ; const char aWriteError[]
.rodata:0000000000004A16 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1B13↑o
.rodata:0000000000004A22 ; const char format[]
.rodata:0000000000004A22 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004A22                                         ; close_stdout+8F↑o ...
.rodata:0000000000004A29 ; const char shortopts[]
.rodata:0000000000004A29 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000004A29                                         ; parse_gnu_standard_options_only+72↑o
.rodata:0000000000004A2B aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000004A30 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:0000000000004A38 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004A38                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004A70 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004A78 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004A7C unk_4A7C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004A7D                 db  80h
.rodata:0000000000004A7E                 db  98h
.rodata:0000000000004A7F                 db    0
.rodata:0000000000004A80 unk_4A80        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004A81                 db  80h
.rodata:0000000000004A82                 db  99h
.rodata:0000000000004A83                 db    0
.rodata:0000000000004A84 unk_4A84        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004A85                 db    7
.rodata:0000000000004A86                 db  65h ; e
.rodata:0000000000004A87                 db    0
.rodata:0000000000004A88 unk_4A88        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004A89                 db 0AFh
.rodata:0000000000004A8A                 db    0
.rodata:0000000000004A8B unk_4A8B        db  22h ; "             ; DATA XREF: gettext_quote:loc_1EC0↑o
.rodata:0000000000004A8B                                         ; quotearg_buffer_restyled:loc_2C7B↑o ...
.rodata:0000000000004A8C                 db    0
.rodata:0000000000004A8D ; const char asc_4A8D[2]
.rodata:0000000000004A8D asc_4A8D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004A8D                                         ; quotearg_buffer_restyled:loc_2043↑o ...
.rodata:0000000000004A8F ; const char asc_4A8F[2]
.rodata:0000000000004A8F asc_4A8F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004A8F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004A91 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004A99 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:0000000000004A9F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000004AAC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:0000000000004AAC                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004AB9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004AB9                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000004ACD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000004ACF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000004AD7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000004ADF                 align 20h
.rodata:0000000000004AE0 jpt_2021        dd offset loc_2DCA - 4AE0h
.rodata:0000000000004AE0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000004AE0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000004AE0                 dd offset loc_2023 - 4AE0h ; jump table for switch statement
.rodata:0000000000004AE0                 dd offset loc_2FF8 - 4AE0h
.rodata:0000000000004AE0                 dd offset loc_2E04 - 4AE0h
.rodata:0000000000004AE0                 dd offset loc_2BF4 - 4AE0h
.rodata:0000000000004AE0                 dd offset loc_2C50 - 4AE0h
.rodata:0000000000004AE0                 dd offset loc_2CA5 - 4AE0h
.rodata:0000000000004AE0                 dd offset loc_2CEA - 4AE0h
.rodata:0000000000004AE0                 dd offset loc_2D24 - 4AE0h
.rodata:0000000000004AE0                 dd offset loc_2D24 - 4AE0h
.rodata:0000000000004AE0                 dd offset loc_2D24 - 4AE0h
.rodata:0000000000004B0C jpt_217E        dd offset loc_23A0 - 4B0Ch, offset def_217E - 4B0Ch, offset def_217E - 4B0Ch
.rodata:0000000000004B0C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000004B0C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000004B0C                 dd offset def_217E - 4B0Ch, offset def_217E - 4B0Ch, offset def_217E - 4B0Ch ; jump table for switch statement
.rodata:0000000000004B0C                 dd offset def_217E - 4B0Ch, offset loc_23E0 - 4B0Ch, offset loc_22E8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_22A8 - 4B0Ch, offset loc_2470 - 4B0Ch, offset loc_2460 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_2450 - 4B0Ch, offset loc_2440 - 4B0Ch, offset def_217E - 4B0Ch
.rodata:0000000000004B0C                 dd offset def_217E - 4B0Ch, offset def_217E - 4B0Ch, offset def_217E - 4B0Ch
.rodata:0000000000004B0C                 dd offset def_217E - 4B0Ch, offset def_217E - 4B0Ch, offset def_217E - 4B0Ch
.rodata:0000000000004B0C                 dd offset def_217E - 4B0Ch, offset def_217E - 4B0Ch, offset def_217E - 4B0Ch
.rodata:0000000000004B0C                 dd offset def_217E - 4B0Ch, offset def_217E - 4B0Ch, offset def_217E - 4B0Ch
.rodata:0000000000004B0C                 dd offset def_217E - 4B0Ch, offset def_217E - 4B0Ch, offset def_217E - 4B0Ch
.rodata:0000000000004B0C                 dd offset def_217E - 4B0Ch, offset def_217E - 4B0Ch, offset loc_2430 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_2420 - 4B0Ch, offset loc_2420 - 4B0Ch, offset loc_23F0 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_2420 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_2420 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_2283 - 4B0Ch, offset loc_2420 - 4B0Ch, offset loc_2420 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_2420 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_2420 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_2420 - 4B0Ch, offset loc_2420 - 4B0Ch, offset loc_2420 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_2253 - 4B0Ch, offset def_217E - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_2420 - 4B0Ch, offset loc_22F8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_2420 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_2420 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch, offset loc_23C8 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_2183 - 4B0Ch, offset loc_2420 - 4B0Ch, offset loc_2183 - 4B0Ch
.rodata:0000000000004B0C                 dd offset loc_23F0 - 4B0Ch
.rodata:0000000000004D08 jpt_250A        dd offset loc_2570 - 4D08h, offset def_250A - 4D08h, offset def_250A - 4D08h
.rodata:0000000000004D08                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000004D08                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000004D08                 dd offset def_250A - 4D08h, offset def_250A - 4D08h, offset def_250A - 4D08h ; jump table for switch statement
.rodata:0000000000004D08                 dd offset def_250A - 4D08h, offset loc_2560 - 4D08h, offset loc_26B0 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2698 - 4D08h, offset loc_2548 - 4D08h, offset loc_2688 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2530 - 4D08h, offset loc_2670 - 4D08h, offset def_250A - 4D08h
.rodata:0000000000004D08                 dd offset def_250A - 4D08h, offset def_250A - 4D08h, offset def_250A - 4D08h
.rodata:0000000000004D08                 dd offset def_250A - 4D08h, offset def_250A - 4D08h, offset def_250A - 4D08h
.rodata:0000000000004D08                 dd offset def_250A - 4D08h, offset def_250A - 4D08h, offset def_250A - 4D08h
.rodata:0000000000004D08                 dd offset def_250A - 4D08h, offset def_250A - 4D08h, offset def_250A - 4D08h
.rodata:0000000000004D08                 dd offset def_250A - 4D08h, offset def_250A - 4D08h, offset def_250A - 4D08h
.rodata:0000000000004D08                 dd offset def_250A - 4D08h, offset def_250A - 4D08h, offset loc_2658 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2640 - 4D08h, offset loc_2640 - 4D08h, offset loc_2628 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2640 - 4D08h, offset loc_2610 - 4D08h, offset loc_2640 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2280 - 4D08h, offset loc_2640 - 4D08h, offset loc_2640 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2640 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2640 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2640 - 4D08h, offset loc_2640 - 4D08h, offset loc_2640 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2250 - 4D08h, offset def_250A - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2640 - 4D08h, offset loc_2510 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2640 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2640 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2610 - 4D08h, offset loc_2610 - 4D08h, offset loc_2610 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2180 - 4D08h, offset loc_2640 - 4D08h, offset loc_2180 - 4D08h
.rodata:0000000000004D08                 dd offset loc_2628 - 4D08h
.rodata:0000000000004F04                 align 20h
.rodata:0000000000004F20                 public quoting_style_vals
.rodata:0000000000004F20 quoting_style_vals db    0
.rodata:0000000000004F21                 db    0
.rodata:0000000000004F22                 db    0
.rodata:0000000000004F23                 db    0
.rodata:0000000000004F24                 db    1
.rodata:0000000000004F25                 db    0
.rodata:0000000000004F26                 db    0
.rodata:0000000000004F27                 db    0
.rodata:0000000000004F28                 db    2
.rodata:0000000000004F29                 db    0
.rodata:0000000000004F2A                 db    0
.rodata:0000000000004F2B                 db    0
.rodata:0000000000004F2C                 db    3
.rodata:0000000000004F2D                 db    0
.rodata:0000000000004F2E                 db    0
.rodata:0000000000004F2F                 db    0
.rodata:0000000000004F30                 db    4
.rodata:0000000000004F31                 db    0
.rodata:0000000000004F32                 db    0
.rodata:0000000000004F33                 db    0
.rodata:0000000000004F34                 db    5
.rodata:0000000000004F35                 db    0
.rodata:0000000000004F36                 db    0
.rodata:0000000000004F37                 db    0
.rodata:0000000000004F38                 db    6
.rodata:0000000000004F39                 db    0
.rodata:0000000000004F3A                 db    0
.rodata:0000000000004F3B                 db    0
.rodata:0000000000004F3C                 db    7
.rodata:0000000000004F3D                 db    0
.rodata:0000000000004F3E                 db    0
.rodata:0000000000004F3F                 db    0
.rodata:0000000000004F40                 db    8
.rodata:0000000000004F41                 db    0
.rodata:0000000000004F42                 db    0
.rodata:0000000000004F43                 db    0
.rodata:0000000000004F44                 db    9
.rodata:0000000000004F45                 db    0
.rodata:0000000000004F46                 db    0
.rodata:0000000000004F47                 db    0
.rodata:0000000000004F48 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000004F54 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000004F5B ; const char aC_0[]
.rodata:0000000000004F5B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3B6C↑o
.rodata:0000000000004F5F ; const char aWrittenByS[]
.rodata:0000000000004F5F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000004F5F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000004F6F ; const char aWrittenBySAndS[]
.rodata:0000000000004F6F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000004F6F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000004F86 ; const char aWrittenBySSAnd[]
.rodata:0000000000004F86 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000004F86                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000004FA2 ; const char aReportBugsToS[]
.rodata:0000000000004FA2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000004FA2                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000004FB7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000004FB7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000004FCD ; const char aSHomePageS[]
.rodata:0000000000004FCD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000004FCD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000004FE1                 align 8
.rodata:0000000000004FE8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000004FE8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000004FE8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000004FE8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000004FE8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000004FE8                 db '.',0Ah
.rodata:0000000000004FE8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000004FE8                 db 0Ah,0
.rodata:00000000000050B4                 align 8
.rodata:00000000000050B8 ; const char aWrittenBySSSAn[]
.rodata:00000000000050B8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000050B8                                         ; DATA XREF: version_etc_arn:loc_3DC0↑o
.rodata:00000000000050B8                 db 'and %s.',0Ah,0
.rodata:00000000000050D8 ; const char aWrittenBySSSSA[]
.rodata:00000000000050D8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000050D8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000050D8                 db '%s, and %s.',0Ah,0
.rodata:00000000000050FC                 align 20h
.rodata:0000000000005100 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005100 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005100                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005100                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005128 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005128 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005128                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005128                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005154                 align 8
.rodata:0000000000005158 ; const char aWrittenBySSSSS[]
.rodata:0000000000005158 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005158                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005158                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005158                 db 'and %s.',0Ah,0
.rodata:0000000000005188 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005188 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005188                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005188                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005188                 db '%s, and %s.',0Ah,0
.rodata:00000000000051BC                 align 20h
.rodata:00000000000051C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000051C0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000051C0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000051C0                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000051FC                 align 20h
.rodata:0000000000005200 ; const char aGeneralHelpUsi[]
.rodata:0000000000005200 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005200                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005200                 db 0
.rodata:0000000000005241                 align 8
.rodata:0000000000005248 jpt_3BD4        dd offset loc_3C56 - 5248h
.rodata:0000000000005248                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005248                                         ; version_etc_arn+9D↑r
.rodata:0000000000005248                 dd offset loc_3CE8 - 5248h ; jump table for switch statement
.rodata:0000000000005248                 dd offset loc_3D28 - 5248h
.rodata:0000000000005248                 dd offset loc_3D70 - 5248h
.rodata:0000000000005248                 dd offset loc_3DC0 - 5248h
.rodata:0000000000005248                 dd offset loc_3E18 - 5248h
.rodata:0000000000005248                 dd offset loc_3E48 - 5248h
.rodata:0000000000005248                 dd offset loc_3EB0 - 5248h
.rodata:0000000000005248                 dd offset loc_3BE0 - 5248h
.rodata:0000000000005248                 dd offset loc_3C90 - 5248h
.rodata:0000000000005270                 align 20h
.rodata:0000000000005280                 public version_etc_copyright
.rodata:0000000000005280 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005280                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000052AF ; const char aMemoryExhauste[]
.rodata:00000000000052AF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000052C0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000052C2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4530↑o
.rodata:00000000000052C8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000052C8                                         ; locale_charset:loc_4580↑o
.rodata:00000000000052C8 _rodata         ends
.rodata:00000000000052C8
LOAD:00000000000052CE ; ===========================================================================
LOAD:00000000000052CE
LOAD:00000000000052CE ; Segment type: Pure code
LOAD:00000000000052CE ; Segment permissions: Read/Execute
LOAD:00000000000052CE LOAD            segment byte public 'CODE' use64
LOAD:00000000000052CE                 assume cs:LOAD
LOAD:00000000000052CE                 ;org 52CEh
LOAD:00000000000052CE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000052CE                 align 10h
LOAD:00000000000052CE LOAD            ends
LOAD:00000000000052CE
.eh_frame_hdr:00000000000052D0 ; ===========================================================================
.eh_frame_hdr:00000000000052D0
.eh_frame_hdr:00000000000052D0 ; Segment type: Pure data
.eh_frame_hdr:00000000000052D0 ; Segment permissions: Read
.eh_frame_hdr:00000000000052D0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000052D0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000052D0                 ;org 52D0h
.eh_frame_hdr:00000000000052D0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000052D1                 db  1Bh
.eh_frame_hdr:00000000000052D2                 db    3
.eh_frame_hdr:00000000000052D3                 db  3Bh ; ;
.eh_frame_hdr:00000000000052D4                 db  4Ch ; L
.eh_frame_hdr:00000000000052D5                 db    2
.eh_frame_hdr:00000000000052D6                 db    0
.eh_frame_hdr:00000000000052D7                 db    0
.eh_frame_hdr:00000000000052D8                 db  48h ; H
.eh_frame_hdr:00000000000052D9                 db    0
.eh_frame_hdr:00000000000052DA                 db    0
.eh_frame_hdr:00000000000052DB                 db    0
.eh_frame_hdr:00000000000052DC                 db  80h
.eh_frame_hdr:00000000000052DD                 db 0BFh
.eh_frame_hdr:00000000000052DE                 db 0FFh
.eh_frame_hdr:00000000000052DF                 db 0FFh
.eh_frame_hdr:00000000000052E0                 db  98h
.eh_frame_hdr:00000000000052E1                 db    2
.eh_frame_hdr:00000000000052E2                 db    0
.eh_frame_hdr:00000000000052E3                 db    0
.eh_frame_hdr:00000000000052E4                 db  30h ; 0
.eh_frame_hdr:00000000000052E5                 db 0C2h
.eh_frame_hdr:00000000000052E6                 db 0FFh
.eh_frame_hdr:00000000000052E7                 db 0FFh
.eh_frame_hdr:00000000000052E8                 db 0C0h
.eh_frame_hdr:00000000000052E9                 db    2
.eh_frame_hdr:00000000000052EA                 db    0
.eh_frame_hdr:00000000000052EB                 db    0
.eh_frame_hdr:00000000000052EC                 db  40h ; @
.eh_frame_hdr:00000000000052ED                 db 0C2h
.eh_frame_hdr:00000000000052EE                 db 0FFh
.eh_frame_hdr:00000000000052EF                 db 0FFh
.eh_frame_hdr:00000000000052F0                 db    4
.eh_frame_hdr:00000000000052F1                 db    3
.eh_frame_hdr:00000000000052F2                 db    0
.eh_frame_hdr:00000000000052F3                 db    0
.eh_frame_hdr:00000000000052F4                 db  80h
.eh_frame_hdr:00000000000052F5                 db 0C3h
.eh_frame_hdr:00000000000052F6                 db 0FFh
.eh_frame_hdr:00000000000052F7                 db 0FFh
.eh_frame_hdr:00000000000052F8                 db  68h ; h
.eh_frame_hdr:00000000000052F9                 db    2
.eh_frame_hdr:00000000000052FA                 db    0
.eh_frame_hdr:00000000000052FB                 db    0
.eh_frame_hdr:00000000000052FC                 db  90h
.eh_frame_hdr:00000000000052FD                 db 0C4h
.eh_frame_hdr:00000000000052FE                 db 0FFh
.eh_frame_hdr:00000000000052FF                 db 0FFh
.eh_frame_hdr:0000000000005300                 db 0D8h
.eh_frame_hdr:0000000000005301                 db    2
.eh_frame_hdr:0000000000005302                 db    0
.eh_frame_hdr:0000000000005303                 db    0
.eh_frame_hdr:0000000000005304                 db 0E0h
.eh_frame_hdr:0000000000005305                 db 0C7h
.eh_frame_hdr:0000000000005306                 db 0FFh
.eh_frame_hdr:0000000000005307                 db 0FFh
.eh_frame_hdr:0000000000005308                 db  40h ; @
.eh_frame_hdr:0000000000005309                 db    3
.eh_frame_hdr:000000000000530A                 db    0
.eh_frame_hdr:000000000000530B                 db    0
.eh_frame_hdr:000000000000530C                 db 0F0h
.eh_frame_hdr:000000000000530D                 db 0C7h
.eh_frame_hdr:000000000000530E                 db 0FFh
.eh_frame_hdr:000000000000530F                 db 0FFh
.eh_frame_hdr:0000000000005310                 db  54h ; T
.eh_frame_hdr:0000000000005311                 db    3
.eh_frame_hdr:0000000000005312                 db    0
.eh_frame_hdr:0000000000005313                 db    0
.eh_frame_hdr:0000000000005314                 db    0
.eh_frame_hdr:0000000000005315                 db 0C8h
.eh_frame_hdr:0000000000005316                 db 0FFh
.eh_frame_hdr:0000000000005317                 db 0FFh
.eh_frame_hdr:0000000000005318                 db  68h ; h
.eh_frame_hdr:0000000000005319                 db    3
.eh_frame_hdr:000000000000531A                 db    0
.eh_frame_hdr:000000000000531B                 db    0
.eh_frame_hdr:000000000000531C                 db 0B0h
.eh_frame_hdr:000000000000531D                 db 0C8h
.eh_frame_hdr:000000000000531E                 db 0FFh
.eh_frame_hdr:000000000000531F                 db 0FFh
.eh_frame_hdr:0000000000005320                 db  98h
.eh_frame_hdr:0000000000005321                 db    3
.eh_frame_hdr:0000000000005322                 db    0
.eh_frame_hdr:0000000000005323                 db    0
.eh_frame_hdr:0000000000005324                 db 0F0h
.eh_frame_hdr:0000000000005325                 db 0C9h
.eh_frame_hdr:0000000000005326                 db 0FFh
.eh_frame_hdr:0000000000005327                 db 0FFh
.eh_frame_hdr:0000000000005328                 db 0D4h
.eh_frame_hdr:0000000000005329                 db    3
.eh_frame_hdr:000000000000532A                 db    0
.eh_frame_hdr:000000000000532B                 db    0
.eh_frame_hdr:000000000000532C                 db  30h ; 0
.eh_frame_hdr:000000000000532D                 db 0CBh
.eh_frame_hdr:000000000000532E                 db 0FFh
.eh_frame_hdr:000000000000532F                 db 0FFh
.eh_frame_hdr:0000000000005330                 db  20h
.eh_frame_hdr:0000000000005331                 db    4
.eh_frame_hdr:0000000000005332                 db    0
.eh_frame_hdr:0000000000005333                 db    0
.eh_frame_hdr:0000000000005334                 db 0D0h
.eh_frame_hdr:0000000000005335                 db 0CBh
.eh_frame_hdr:0000000000005336                 db 0FFh
.eh_frame_hdr:0000000000005337                 db 0FFh
.eh_frame_hdr:0000000000005338                 db  40h ; @
.eh_frame_hdr:0000000000005339                 db    4
.eh_frame_hdr:000000000000533A                 db    0
.eh_frame_hdr:000000000000533B                 db    0
.eh_frame_hdr:000000000000533C                 db 0C0h
.eh_frame_hdr:000000000000533D                 db 0CCh
.eh_frame_hdr:000000000000533E                 db 0FFh
.eh_frame_hdr:000000000000533F                 db 0FFh
.eh_frame_hdr:0000000000005340                 db  84h
.eh_frame_hdr:0000000000005341                 db    4
.eh_frame_hdr:0000000000005342                 db    0
.eh_frame_hdr:0000000000005343                 db    0
.eh_frame_hdr:0000000000005344                 db    0
.eh_frame_hdr:0000000000005345                 db 0DFh
.eh_frame_hdr:0000000000005346                 db 0FFh
.eh_frame_hdr:0000000000005347                 db 0FFh
.eh_frame_hdr:0000000000005348                 db 0FCh
.eh_frame_hdr:0000000000005349                 db    4
.eh_frame_hdr:000000000000534A                 db    0
.eh_frame_hdr:000000000000534B                 db    0
.eh_frame_hdr:000000000000534C                 db 0B0h
.eh_frame_hdr:000000000000534D                 db 0E0h
.eh_frame_hdr:000000000000534E                 db 0FFh
.eh_frame_hdr:000000000000534F                 db 0FFh
.eh_frame_hdr:0000000000005350                 db  68h ; h
.eh_frame_hdr:0000000000005351                 db    5
.eh_frame_hdr:0000000000005352                 db    0
.eh_frame_hdr:0000000000005353                 db    0
.eh_frame_hdr:0000000000005354                 db 0F0h
.eh_frame_hdr:0000000000005355                 db 0E0h
.eh_frame_hdr:0000000000005356                 db 0FFh
.eh_frame_hdr:0000000000005357                 db 0FFh
.eh_frame_hdr:0000000000005358                 db  94h
.eh_frame_hdr:0000000000005359                 db    5
.eh_frame_hdr:000000000000535A                 db    0
.eh_frame_hdr:000000000000535B                 db    0
.eh_frame_hdr:000000000000535C                 db  10h
.eh_frame_hdr:000000000000535D                 db 0E1h
.eh_frame_hdr:000000000000535E                 db 0FFh
.eh_frame_hdr:000000000000535F                 db 0FFh
.eh_frame_hdr:0000000000005360                 db 0A8h
.eh_frame_hdr:0000000000005361                 db    5
.eh_frame_hdr:0000000000005362                 db    0
.eh_frame_hdr:0000000000005363                 db    0
.eh_frame_hdr:0000000000005364                 db  30h ; 0
.eh_frame_hdr:0000000000005365                 db 0E1h
.eh_frame_hdr:0000000000005366                 db 0FFh
.eh_frame_hdr:0000000000005367                 db 0FFh
.eh_frame_hdr:0000000000005368                 db 0BCh
.eh_frame_hdr:0000000000005369                 db    5
.eh_frame_hdr:000000000000536A                 db    0
.eh_frame_hdr:000000000000536B                 db    0
.eh_frame_hdr:000000000000536C                 db  70h ; p
.eh_frame_hdr:000000000000536D                 db 0E1h
.eh_frame_hdr:000000000000536E                 db 0FFh
.eh_frame_hdr:000000000000536F                 db 0FFh
.eh_frame_hdr:0000000000005370                 db 0D0h
.eh_frame_hdr:0000000000005371                 db    5
.eh_frame_hdr:0000000000005372                 db    0
.eh_frame_hdr:0000000000005373                 db    0
.eh_frame_hdr:0000000000005374                 db  90h
.eh_frame_hdr:0000000000005375                 db 0E1h
.eh_frame_hdr:0000000000005376                 db 0FFh
.eh_frame_hdr:0000000000005377                 db 0FFh
.eh_frame_hdr:0000000000005378                 db 0E4h
.eh_frame_hdr:0000000000005379                 db    5
.eh_frame_hdr:000000000000537A                 db    0
.eh_frame_hdr:000000000000537B                 db    0
.eh_frame_hdr:000000000000537C                 db 0C0h
.eh_frame_hdr:000000000000537D                 db 0E1h
.eh_frame_hdr:000000000000537E                 db 0FFh
.eh_frame_hdr:000000000000537F                 db 0FFh
.eh_frame_hdr:0000000000005380                 db 0F8h
.eh_frame_hdr:0000000000005381                 db    5
.eh_frame_hdr:0000000000005382                 db    0
.eh_frame_hdr:0000000000005383                 db    0
.eh_frame_hdr:0000000000005384                 db  40h ; @
.eh_frame_hdr:0000000000005385                 db 0E2h
.eh_frame_hdr:0000000000005386                 db 0FFh
.eh_frame_hdr:0000000000005387                 db 0FFh
.eh_frame_hdr:0000000000005388                 db  4Ch ; L
.eh_frame_hdr:0000000000005389                 db    6
.eh_frame_hdr:000000000000538A                 db    0
.eh_frame_hdr:000000000000538B                 db    0
.eh_frame_hdr:000000000000538C                 db  30h ; 0
.eh_frame_hdr:000000000000538D                 db 0E3h
.eh_frame_hdr:000000000000538E                 db 0FFh
.eh_frame_hdr:000000000000538F                 db 0FFh
.eh_frame_hdr:0000000000005390                 db 0B8h
.eh_frame_hdr:0000000000005391                 db    6
.eh_frame_hdr:0000000000005392                 db    0
.eh_frame_hdr:0000000000005393                 db    0
.eh_frame_hdr:0000000000005394                 db  40h ; @
.eh_frame_hdr:0000000000005395                 db 0E3h
.eh_frame_hdr:0000000000005396                 db 0FFh
.eh_frame_hdr:0000000000005397                 db 0FFh
.eh_frame_hdr:0000000000005398                 db 0CCh
.eh_frame_hdr:0000000000005399                 db    6
.eh_frame_hdr:000000000000539A                 db    0
.eh_frame_hdr:000000000000539B                 db    0
.eh_frame_hdr:000000000000539C                 db 0E0h
.eh_frame_hdr:000000000000539D                 db 0E3h
.eh_frame_hdr:000000000000539E                 db 0FFh
.eh_frame_hdr:000000000000539F                 db 0FFh
.eh_frame_hdr:00000000000053A0                 db 0F8h
.eh_frame_hdr:00000000000053A1                 db    6
.eh_frame_hdr:00000000000053A2                 db    0
.eh_frame_hdr:00000000000053A3                 db    0
.eh_frame_hdr:00000000000053A4                 db    0
.eh_frame_hdr:00000000000053A5                 db 0E4h
.eh_frame_hdr:00000000000053A6                 db 0FFh
.eh_frame_hdr:00000000000053A7                 db 0FFh
.eh_frame_hdr:00000000000053A8                 db  0Ch
.eh_frame_hdr:00000000000053A9                 db    7
.eh_frame_hdr:00000000000053AA                 db    0
.eh_frame_hdr:00000000000053AB                 db    0
.eh_frame_hdr:00000000000053AC                 db  10h
.eh_frame_hdr:00000000000053AD                 db 0E4h
.eh_frame_hdr:00000000000053AE                 db 0FFh
.eh_frame_hdr:00000000000053AF                 db 0FFh
.eh_frame_hdr:00000000000053B0                 db  20h
.eh_frame_hdr:00000000000053B1                 db    7
.eh_frame_hdr:00000000000053B2                 db    0
.eh_frame_hdr:00000000000053B3                 db    0
.eh_frame_hdr:00000000000053B4                 db  30h ; 0
.eh_frame_hdr:00000000000053B5                 db 0E4h
.eh_frame_hdr:00000000000053B6                 db 0FFh
.eh_frame_hdr:00000000000053B7                 db 0FFh
.eh_frame_hdr:00000000000053B8                 db  34h ; 4
.eh_frame_hdr:00000000000053B9                 db    7
.eh_frame_hdr:00000000000053BA                 db    0
.eh_frame_hdr:00000000000053BB                 db    0
.eh_frame_hdr:00000000000053BC                 db  50h ; P
.eh_frame_hdr:00000000000053BD                 db 0E4h
.eh_frame_hdr:00000000000053BE                 db 0FFh
.eh_frame_hdr:00000000000053BF                 db 0FFh
.eh_frame_hdr:00000000000053C0                 db  48h ; H
.eh_frame_hdr:00000000000053C1                 db    7
.eh_frame_hdr:00000000000053C2                 db    0
.eh_frame_hdr:00000000000053C3                 db    0
.eh_frame_hdr:00000000000053C4                 db 0E0h
.eh_frame_hdr:00000000000053C5                 db 0E4h
.eh_frame_hdr:00000000000053C6                 db 0FFh
.eh_frame_hdr:00000000000053C7                 db 0FFh
.eh_frame_hdr:00000000000053C8                 db  64h ; d
.eh_frame_hdr:00000000000053C9                 db    7
.eh_frame_hdr:00000000000053CA                 db    0
.eh_frame_hdr:00000000000053CB                 db    0
.eh_frame_hdr:00000000000053CC                 db  70h ; p
.eh_frame_hdr:00000000000053CD                 db 0E5h
.eh_frame_hdr:00000000000053CE                 db 0FFh
.eh_frame_hdr:00000000000053CF                 db 0FFh
.eh_frame_hdr:00000000000053D0                 db  80h
.eh_frame_hdr:00000000000053D1                 db    7
.eh_frame_hdr:00000000000053D2                 db    0
.eh_frame_hdr:00000000000053D3                 db    0
.eh_frame_hdr:00000000000053D4                 db  80h
.eh_frame_hdr:00000000000053D5                 db 0E5h
.eh_frame_hdr:00000000000053D6                 db 0FFh
.eh_frame_hdr:00000000000053D7                 db 0FFh
.eh_frame_hdr:00000000000053D8                 db  94h
.eh_frame_hdr:00000000000053D9                 db    7
.eh_frame_hdr:00000000000053DA                 db    0
.eh_frame_hdr:00000000000053DB                 db    0
.eh_frame_hdr:00000000000053DC                 db  90h
.eh_frame_hdr:00000000000053DD                 db 0E5h
.eh_frame_hdr:00000000000053DE                 db 0FFh
.eh_frame_hdr:00000000000053DF                 db 0FFh
.eh_frame_hdr:00000000000053E0                 db 0A8h
.eh_frame_hdr:00000000000053E1                 db    7
.eh_frame_hdr:00000000000053E2                 db    0
.eh_frame_hdr:00000000000053E3                 db    0
.eh_frame_hdr:00000000000053E4                 db  30h ; 0
.eh_frame_hdr:00000000000053E5                 db 0E6h
.eh_frame_hdr:00000000000053E6                 db 0FFh
.eh_frame_hdr:00000000000053E7                 db 0FFh
.eh_frame_hdr:00000000000053E8                 db 0C4h
.eh_frame_hdr:00000000000053E9                 db    7
.eh_frame_hdr:00000000000053EA                 db    0
.eh_frame_hdr:00000000000053EB                 db    0
.eh_frame_hdr:00000000000053EC                 db  40h ; @
.eh_frame_hdr:00000000000053ED                 db 0E6h
.eh_frame_hdr:00000000000053EE                 db 0FFh
.eh_frame_hdr:00000000000053EF                 db 0FFh
.eh_frame_hdr:00000000000053F0                 db 0D8h
.eh_frame_hdr:00000000000053F1                 db    7
.eh_frame_hdr:00000000000053F2                 db    0
.eh_frame_hdr:00000000000053F3                 db    0
.eh_frame_hdr:00000000000053F4                 db  60h ; `
.eh_frame_hdr:00000000000053F5                 db 0E6h
.eh_frame_hdr:00000000000053F6                 db 0FFh
.eh_frame_hdr:00000000000053F7                 db 0FFh
.eh_frame_hdr:00000000000053F8                 db 0ECh
.eh_frame_hdr:00000000000053F9                 db    7
.eh_frame_hdr:00000000000053FA                 db    0
.eh_frame_hdr:00000000000053FB                 db    0
.eh_frame_hdr:00000000000053FC                 db  70h ; p
.eh_frame_hdr:00000000000053FD                 db 0E6h
.eh_frame_hdr:00000000000053FE                 db 0FFh
.eh_frame_hdr:00000000000053FF                 db 0FFh
.eh_frame_hdr:0000000000005400                 db    0
.eh_frame_hdr:0000000000005401                 db    8
.eh_frame_hdr:0000000000005402                 db    0
.eh_frame_hdr:0000000000005403                 db    0
.eh_frame_hdr:0000000000005404                 db    0
.eh_frame_hdr:0000000000005405                 db 0E7h
.eh_frame_hdr:0000000000005406                 db 0FFh
.eh_frame_hdr:0000000000005407                 db 0FFh
.eh_frame_hdr:0000000000005408                 db  1Ch
.eh_frame_hdr:0000000000005409                 db    8
.eh_frame_hdr:000000000000540A                 db    0
.eh_frame_hdr:000000000000540B                 db    0
.eh_frame_hdr:000000000000540C                 db 0A0h
.eh_frame_hdr:000000000000540D                 db 0E7h
.eh_frame_hdr:000000000000540E                 db 0FFh
.eh_frame_hdr:000000000000540F                 db 0FFh
.eh_frame_hdr:0000000000005410                 db  38h ; 8
.eh_frame_hdr:0000000000005411                 db    8
.eh_frame_hdr:0000000000005412                 db    0
.eh_frame_hdr:0000000000005413                 db    0
.eh_frame_hdr:0000000000005414                 db 0B0h
.eh_frame_hdr:0000000000005415                 db 0E7h
.eh_frame_hdr:0000000000005416                 db 0FFh
.eh_frame_hdr:0000000000005417                 db 0FFh
.eh_frame_hdr:0000000000005418                 db  4Ch ; L
.eh_frame_hdr:0000000000005419                 db    8
.eh_frame_hdr:000000000000541A                 db    0
.eh_frame_hdr:000000000000541B                 db    0
.eh_frame_hdr:000000000000541C                 db 0D0h
.eh_frame_hdr:000000000000541D                 db 0E7h
.eh_frame_hdr:000000000000541E                 db 0FFh
.eh_frame_hdr:000000000000541F                 db 0FFh
.eh_frame_hdr:0000000000005420                 db  60h ; `
.eh_frame_hdr:0000000000005421                 db    8
.eh_frame_hdr:0000000000005422                 db    0
.eh_frame_hdr:0000000000005423                 db    0
.eh_frame_hdr:0000000000005424                 db 0F0h
.eh_frame_hdr:0000000000005425                 db 0E7h
.eh_frame_hdr:0000000000005426                 db 0FFh
.eh_frame_hdr:0000000000005427                 db 0FFh
.eh_frame_hdr:0000000000005428                 db  74h ; t
.eh_frame_hdr:0000000000005429                 db    8
.eh_frame_hdr:000000000000542A                 db    0
.eh_frame_hdr:000000000000542B                 db    0
.eh_frame_hdr:000000000000542C                 db    0
.eh_frame_hdr:000000000000542D                 db 0E8h
.eh_frame_hdr:000000000000542E                 db 0FFh
.eh_frame_hdr:000000000000542F                 db 0FFh
.eh_frame_hdr:0000000000005430                 db  88h
.eh_frame_hdr:0000000000005431                 db    8
.eh_frame_hdr:0000000000005432                 db    0
.eh_frame_hdr:0000000000005433                 db    0
.eh_frame_hdr:0000000000005434                 db  20h
.eh_frame_hdr:0000000000005435                 db 0E8h
.eh_frame_hdr:0000000000005436                 db 0FFh
.eh_frame_hdr:0000000000005437                 db 0FFh
.eh_frame_hdr:0000000000005438                 db  9Ch
.eh_frame_hdr:0000000000005439                 db    8
.eh_frame_hdr:000000000000543A                 db    0
.eh_frame_hdr:000000000000543B                 db    0
.eh_frame_hdr:000000000000543C                 db  40h ; @
.eh_frame_hdr:000000000000543D                 db 0E8h
.eh_frame_hdr:000000000000543E                 db 0FFh
.eh_frame_hdr:000000000000543F                 db 0FFh
.eh_frame_hdr:0000000000005440                 db 0B0h
.eh_frame_hdr:0000000000005441                 db    8
.eh_frame_hdr:0000000000005442                 db    0
.eh_frame_hdr:0000000000005443                 db    0
.eh_frame_hdr:0000000000005444                 db  60h ; `
.eh_frame_hdr:0000000000005445                 db 0E8h
.eh_frame_hdr:0000000000005446                 db 0FFh
.eh_frame_hdr:0000000000005447                 db 0FFh
.eh_frame_hdr:0000000000005448                 db 0C8h
.eh_frame_hdr:0000000000005449                 db    8
.eh_frame_hdr:000000000000544A                 db    0
.eh_frame_hdr:000000000000544B                 db    0
.eh_frame_hdr:000000000000544C                 db  80h
.eh_frame_hdr:000000000000544D                 db 0ECh
.eh_frame_hdr:000000000000544E                 db 0FFh
.eh_frame_hdr:000000000000544F                 db 0FFh
.eh_frame_hdr:0000000000005450                 db 0DCh
.eh_frame_hdr:0000000000005451                 db    9
.eh_frame_hdr:0000000000005452                 db    0
.eh_frame_hdr:0000000000005453                 db    0
.eh_frame_hdr:0000000000005454                 db 0A0h
.eh_frame_hdr:0000000000005455                 db 0ECh
.eh_frame_hdr:0000000000005456                 db 0FFh
.eh_frame_hdr:0000000000005457                 db 0FFh
.eh_frame_hdr:0000000000005458                 db 0F0h
.eh_frame_hdr:0000000000005459                 db    9
.eh_frame_hdr:000000000000545A                 db    0
.eh_frame_hdr:000000000000545B                 db    0
.eh_frame_hdr:000000000000545C                 db  20h
.eh_frame_hdr:000000000000545D                 db 0EDh
.eh_frame_hdr:000000000000545E                 db 0FFh
.eh_frame_hdr:000000000000545F                 db 0FFh
.eh_frame_hdr:0000000000005460                 db  0Ch
.eh_frame_hdr:0000000000005461                 db  0Ah
.eh_frame_hdr:0000000000005462                 db    0
.eh_frame_hdr:0000000000005463                 db    0
.eh_frame_hdr:0000000000005464                 db    0
.eh_frame_hdr:0000000000005465                 db 0EEh
.eh_frame_hdr:0000000000005466                 db 0FFh
.eh_frame_hdr:0000000000005467                 db 0FFh
.eh_frame_hdr:0000000000005468                 db  38h ; 8
.eh_frame_hdr:0000000000005469                 db  0Ah
.eh_frame_hdr:000000000000546A                 db    0
.eh_frame_hdr:000000000000546B                 db    0
.eh_frame_hdr:000000000000546C                 db  80h
.eh_frame_hdr:000000000000546D                 db 0EEh
.eh_frame_hdr:000000000000546E                 db 0FFh
.eh_frame_hdr:000000000000546F                 db 0FFh
.eh_frame_hdr:0000000000005470                 db  58h ; X
.eh_frame_hdr:0000000000005471                 db  0Ah
.eh_frame_hdr:0000000000005472                 db    0
.eh_frame_hdr:0000000000005473                 db    0
.eh_frame_hdr:0000000000005474                 db 0A0h
.eh_frame_hdr:0000000000005475                 db 0EEh
.eh_frame_hdr:0000000000005476                 db 0FFh
.eh_frame_hdr:0000000000005477                 db 0FFh
.eh_frame_hdr:0000000000005478                 db  74h ; t
.eh_frame_hdr:0000000000005479                 db  0Ah
.eh_frame_hdr:000000000000547A                 db    0
.eh_frame_hdr:000000000000547B                 db    0
.eh_frame_hdr:000000000000547C                 db 0D0h
.eh_frame_hdr:000000000000547D                 db 0EEh
.eh_frame_hdr:000000000000547E                 db 0FFh
.eh_frame_hdr:000000000000547F                 db 0FFh
.eh_frame_hdr:0000000000005480                 db  88h
.eh_frame_hdr:0000000000005481                 db  0Ah
.eh_frame_hdr:0000000000005482                 db    0
.eh_frame_hdr:0000000000005483                 db    0
.eh_frame_hdr:0000000000005484                 db 0E0h
.eh_frame_hdr:0000000000005485                 db 0EEh
.eh_frame_hdr:0000000000005486                 db 0FFh
.eh_frame_hdr:0000000000005487                 db 0FFh
.eh_frame_hdr:0000000000005488                 db  9Ch
.eh_frame_hdr:0000000000005489                 db  0Ah
.eh_frame_hdr:000000000000548A                 db    0
.eh_frame_hdr:000000000000548B                 db    0
.eh_frame_hdr:000000000000548C                 db  20h
.eh_frame_hdr:000000000000548D                 db 0EFh
.eh_frame_hdr:000000000000548E                 db 0FFh
.eh_frame_hdr:000000000000548F                 db 0FFh
.eh_frame_hdr:0000000000005490                 db 0C0h
.eh_frame_hdr:0000000000005491                 db  0Ah
.eh_frame_hdr:0000000000005492                 db    0
.eh_frame_hdr:0000000000005493                 db    0
.eh_frame_hdr:0000000000005494                 db  50h ; P
.eh_frame_hdr:0000000000005495                 db 0EFh
.eh_frame_hdr:0000000000005496                 db 0FFh
.eh_frame_hdr:0000000000005497                 db 0FFh
.eh_frame_hdr:0000000000005498                 db 0D4h
.eh_frame_hdr:0000000000005499                 db  0Ah
.eh_frame_hdr:000000000000549A                 db    0
.eh_frame_hdr:000000000000549B                 db    0
.eh_frame_hdr:000000000000549C                 db 0E0h
.eh_frame_hdr:000000000000549D                 db 0EFh
.eh_frame_hdr:000000000000549E                 db 0FFh
.eh_frame_hdr:000000000000549F                 db 0FFh
.eh_frame_hdr:00000000000054A0                 db 0ECh
.eh_frame_hdr:00000000000054A1                 db  0Ah
.eh_frame_hdr:00000000000054A2                 db    0
.eh_frame_hdr:00000000000054A3                 db    0
.eh_frame_hdr:00000000000054A4                 db  30h ; 0
.eh_frame_hdr:00000000000054A5                 db 0F0h
.eh_frame_hdr:00000000000054A6                 db 0FFh
.eh_frame_hdr:00000000000054A7                 db 0FFh
.eh_frame_hdr:00000000000054A8                 db    4
.eh_frame_hdr:00000000000054A9                 db  0Bh
.eh_frame_hdr:00000000000054AA                 db    0
.eh_frame_hdr:00000000000054AB                 db    0
.eh_frame_hdr:00000000000054AC                 db  50h ; P
.eh_frame_hdr:00000000000054AD                 db 0F0h
.eh_frame_hdr:00000000000054AE                 db 0FFh
.eh_frame_hdr:00000000000054AF                 db 0FFh
.eh_frame_hdr:00000000000054B0                 db  20h
.eh_frame_hdr:00000000000054B1                 db  0Bh
.eh_frame_hdr:00000000000054B2                 db    0
.eh_frame_hdr:00000000000054B3                 db    0
.eh_frame_hdr:00000000000054B4                 db  80h
.eh_frame_hdr:00000000000054B5                 db 0F0h
.eh_frame_hdr:00000000000054B6                 db 0FFh
.eh_frame_hdr:00000000000054B7                 db 0FFh
.eh_frame_hdr:00000000000054B8                 db  3Ch ; <
.eh_frame_hdr:00000000000054B9                 db  0Bh
.eh_frame_hdr:00000000000054BA                 db    0
.eh_frame_hdr:00000000000054BB                 db    0
.eh_frame_hdr:00000000000054BC                 db 0B0h
.eh_frame_hdr:00000000000054BD                 db 0F0h
.eh_frame_hdr:00000000000054BE                 db 0FFh
.eh_frame_hdr:00000000000054BF                 db 0FFh
.eh_frame_hdr:00000000000054C0                 db  64h ; d
.eh_frame_hdr:00000000000054C1                 db  0Bh
.eh_frame_hdr:00000000000054C2                 db    0
.eh_frame_hdr:00000000000054C3                 db    0
.eh_frame_hdr:00000000000054C4                 db 0D0h
.eh_frame_hdr:00000000000054C5                 db 0F0h
.eh_frame_hdr:00000000000054C6                 db 0FFh
.eh_frame_hdr:00000000000054C7                 db 0FFh
.eh_frame_hdr:00000000000054C8                 db  80h
.eh_frame_hdr:00000000000054C9                 db  0Bh
.eh_frame_hdr:00000000000054CA                 db    0
.eh_frame_hdr:00000000000054CB                 db    0
.eh_frame_hdr:00000000000054CC                 db  10h
.eh_frame_hdr:00000000000054CD                 db 0F1h
.eh_frame_hdr:00000000000054CE                 db 0FFh
.eh_frame_hdr:00000000000054CF                 db 0FFh
.eh_frame_hdr:00000000000054D0                 db  98h
.eh_frame_hdr:00000000000054D1                 db  0Bh
.eh_frame_hdr:00000000000054D2                 db    0
.eh_frame_hdr:00000000000054D3                 db    0
.eh_frame_hdr:00000000000054D4                 db 0A0h
.eh_frame_hdr:00000000000054D5                 db 0F1h
.eh_frame_hdr:00000000000054D6                 db 0FFh
.eh_frame_hdr:00000000000054D7                 db 0FFh
.eh_frame_hdr:00000000000054D8                 db 0D8h
.eh_frame_hdr:00000000000054D9                 db  0Bh
.eh_frame_hdr:00000000000054DA                 db    0
.eh_frame_hdr:00000000000054DB                 db    0
.eh_frame_hdr:00000000000054DC                 db  20h
.eh_frame_hdr:00000000000054DD                 db 0F2h
.eh_frame_hdr:00000000000054DE                 db 0FFh
.eh_frame_hdr:00000000000054DF                 db 0FFh
.eh_frame_hdr:00000000000054E0                 db  28h ; (
.eh_frame_hdr:00000000000054E1                 db  0Ch
.eh_frame_hdr:00000000000054E2                 db    0
.eh_frame_hdr:00000000000054E3                 db    0
.eh_frame_hdr:00000000000054E4                 db  80h
.eh_frame_hdr:00000000000054E5                 db 0F2h
.eh_frame_hdr:00000000000054E6                 db 0FFh
.eh_frame_hdr:00000000000054E7                 db 0FFh
.eh_frame_hdr:00000000000054E8                 db  48h ; H
.eh_frame_hdr:00000000000054E9                 db  0Ch
.eh_frame_hdr:00000000000054EA                 db    0
.eh_frame_hdr:00000000000054EB                 db    0
.eh_frame_hdr:00000000000054EC                 db 0C0h
.eh_frame_hdr:00000000000054ED                 db 0F2h
.eh_frame_hdr:00000000000054EE                 db 0FFh
.eh_frame_hdr:00000000000054EF                 db 0FFh
.eh_frame_hdr:00000000000054F0                 db  68h ; h
.eh_frame_hdr:00000000000054F1                 db  0Ch
.eh_frame_hdr:00000000000054F2                 db    0
.eh_frame_hdr:00000000000054F3                 db    0
.eh_frame_hdr:00000000000054F4                 db  40h ; @
.eh_frame_hdr:00000000000054F5                 db 0F3h
.eh_frame_hdr:00000000000054F6                 db 0FFh
.eh_frame_hdr:00000000000054F7                 db 0FFh
.eh_frame_hdr:00000000000054F8                 db 0A0h
.eh_frame_hdr:00000000000054F9                 db  0Ch
.eh_frame_hdr:00000000000054FA                 db    0
.eh_frame_hdr:00000000000054FB                 db    0
.eh_frame_hdr:00000000000054FC                 db  80h
.eh_frame_hdr:00000000000054FD                 db 0F3h
.eh_frame_hdr:00000000000054FE                 db 0FFh
.eh_frame_hdr:00000000000054FF                 db 0FFh
.eh_frame_hdr:0000000000005500                 db 0C0h
.eh_frame_hdr:0000000000005501                 db  0Ch
.eh_frame_hdr:0000000000005502                 db    0
.eh_frame_hdr:0000000000005503                 db    0
.eh_frame_hdr:0000000000005504                 db 0E0h
.eh_frame_hdr:0000000000005505                 db 0F3h
.eh_frame_hdr:0000000000005506                 db 0FFh
.eh_frame_hdr:0000000000005507                 db 0FFh
.eh_frame_hdr:0000000000005508                 db 0F0h
.eh_frame_hdr:0000000000005509                 db  0Ch
.eh_frame_hdr:000000000000550A                 db    0
.eh_frame_hdr:000000000000550B                 db    0
.eh_frame_hdr:000000000000550C                 db  50h ; P
.eh_frame_hdr:000000000000550D                 db 0F4h
.eh_frame_hdr:000000000000550E                 db 0FFh
.eh_frame_hdr:000000000000550F                 db 0FFh
.eh_frame_hdr:0000000000005510                 db  38h ; 8
.eh_frame_hdr:0000000000005511                 db  0Dh
.eh_frame_hdr:0000000000005512                 db    0
.eh_frame_hdr:0000000000005513                 db    0
.eh_frame_hdr:0000000000005514                 db  60h ; `
.eh_frame_hdr:0000000000005515                 db 0F4h
.eh_frame_hdr:0000000000005516                 db 0FFh
.eh_frame_hdr:0000000000005517                 db 0FFh
.eh_frame_hdr:0000000000005518                 db  50h ; P
.eh_frame_hdr:0000000000005519                 db  0Dh
.eh_frame_hdr:000000000000551A                 db    0
.eh_frame_hdr:000000000000551B                 db    0
.eh_frame_hdr:000000000000551B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000551B
LOAD:000000000000551C ; ===========================================================================
LOAD:000000000000551C
LOAD:000000000000551C ; Segment type: Pure code
LOAD:000000000000551C ; Segment permissions: Read/Execute
LOAD:000000000000551C LOAD            segment byte public 'CODE' use64
LOAD:000000000000551C                 assume cs:LOAD
LOAD:000000000000551C                 ;org 551Ch
LOAD:000000000000551C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000551C                 align 20h
LOAD:000000000000551C LOAD            ends
LOAD:000000000000551C
.eh_frame:0000000000005520 ; ===========================================================================
.eh_frame:0000000000005520
.eh_frame:0000000000005520 ; Segment type: Pure data
.eh_frame:0000000000005520 ; Segment permissions: Read
.eh_frame:0000000000005520 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005520                 assume cs:_eh_frame
.eh_frame:0000000000005520                 ;org 5520h
.eh_frame:0000000000005520                 db  14h
.eh_frame:0000000000005521                 db    0
.eh_frame:0000000000005522                 db    0
.eh_frame:0000000000005523                 db    0
.eh_frame:0000000000005524                 db    0
.eh_frame:0000000000005525                 db    0
.eh_frame:0000000000005526                 db    0
.eh_frame:0000000000005527                 db    0
.eh_frame:0000000000005528                 db    1
.eh_frame:0000000000005529                 db  7Ah ; z
.eh_frame:000000000000552A                 db  52h ; R
.eh_frame:000000000000552B                 db    0
.eh_frame:000000000000552C                 db    1
.eh_frame:000000000000552D                 db  78h ; x
.eh_frame:000000000000552E                 db  10h
.eh_frame:000000000000552F                 db    1
.eh_frame:0000000000005530                 db  1Bh
.eh_frame:0000000000005531                 db  0Ch
.eh_frame:0000000000005532                 db    7
.eh_frame:0000000000005533                 db    8
.eh_frame:0000000000005534                 db  90h
.eh_frame:0000000000005535                 db    1
.eh_frame:0000000000005536                 db    7
.eh_frame:0000000000005537                 db  10h
.eh_frame:0000000000005538                 db  14h
.eh_frame:0000000000005539                 db    0
.eh_frame:000000000000553A                 db    0
.eh_frame:000000000000553B                 db    0
.eh_frame:000000000000553C                 db  1Ch
.eh_frame:000000000000553D                 db    0
.eh_frame:000000000000553E                 db    0
.eh_frame:000000000000553F                 db    0
.eh_frame:0000000000005540                 db  10h
.eh_frame:0000000000005541                 db 0C1h
.eh_frame:0000000000005542                 db 0FFh
.eh_frame:0000000000005543                 db 0FFh
.eh_frame:0000000000005544                 db  2Bh ; +
.eh_frame:0000000000005545                 db    0
.eh_frame:0000000000005546                 db    0
.eh_frame:0000000000005547                 db    0
.eh_frame:0000000000005548                 db    0
.eh_frame:0000000000005549                 db    0
.eh_frame:000000000000554A                 db    0
.eh_frame:000000000000554B                 db    0
.eh_frame:000000000000554C                 db    0
.eh_frame:000000000000554D                 db    0
.eh_frame:000000000000554E                 db    0
.eh_frame:000000000000554F                 db    0
.eh_frame:0000000000005550                 db  14h
.eh_frame:0000000000005551                 db    0
.eh_frame:0000000000005552                 db    0
.eh_frame:0000000000005553                 db    0
.eh_frame:0000000000005554                 db    0
.eh_frame:0000000000005555                 db    0
.eh_frame:0000000000005556                 db    0
.eh_frame:0000000000005557                 db    0
.eh_frame:0000000000005558                 db    1
.eh_frame:0000000000005559                 db  7Ah ; z
.eh_frame:000000000000555A                 db  52h ; R
.eh_frame:000000000000555B                 db    0
.eh_frame:000000000000555C                 db    1
.eh_frame:000000000000555D                 db  78h ; x
.eh_frame:000000000000555E                 db  10h
.eh_frame:000000000000555F                 db    1
.eh_frame:0000000000005560                 db  1Bh
.eh_frame:0000000000005561                 db  0Ch
.eh_frame:0000000000005562                 db    7
.eh_frame:0000000000005563                 db    8
.eh_frame:0000000000005564                 db  90h
.eh_frame:0000000000005565                 db    1
.eh_frame:0000000000005566                 db    0
.eh_frame:0000000000005567                 db    0
.eh_frame:0000000000005568                 db  24h ; $
.eh_frame:0000000000005569                 db    0
.eh_frame:000000000000556A                 db    0
.eh_frame:000000000000556B                 db    0
.eh_frame:000000000000556C                 db  1Ch
.eh_frame:000000000000556D                 db    0
.eh_frame:000000000000556E                 db    0
.eh_frame:000000000000556F                 db    0
.eh_frame:0000000000005570                 db 0E0h
.eh_frame:0000000000005571                 db 0BCh
.eh_frame:0000000000005572                 db 0FFh
.eh_frame:0000000000005573                 db 0FFh
.eh_frame:0000000000005574                 db 0B0h
.eh_frame:0000000000005575                 db    2
.eh_frame:0000000000005576                 db    0
.eh_frame:0000000000005577                 db    0
.eh_frame:0000000000005578                 db    0
.eh_frame:0000000000005579                 db  0Eh
.eh_frame:000000000000557A                 db  10h
.eh_frame:000000000000557B                 db  46h ; F
.eh_frame:000000000000557C                 db  0Eh
.eh_frame:000000000000557D                 db  18h
.eh_frame:000000000000557E                 db  4Ah ; J
.eh_frame:000000000000557F                 db  0Fh
.eh_frame:0000000000005580                 db  0Bh
.eh_frame:0000000000005581                 db  77h ; w
.eh_frame:0000000000005582                 db    8
.eh_frame:0000000000005583                 db  80h
.eh_frame:0000000000005584                 db    0
.eh_frame:0000000000005585                 db  3Fh ; ?
.eh_frame:0000000000005586                 db  1Ah
.eh_frame:0000000000005587                 db  3Bh ; ;
.eh_frame:0000000000005588                 db  2Ah ; *
.eh_frame:0000000000005589                 db  33h ; 3
.eh_frame:000000000000558A                 db  24h ; $
.eh_frame:000000000000558B                 db  22h ; "
.eh_frame:000000000000558C                 db    0
.eh_frame:000000000000558D                 db    0
.eh_frame:000000000000558E                 db    0
.eh_frame:000000000000558F                 db    0
.eh_frame:0000000000005590                 db  14h
.eh_frame:0000000000005591                 db    0
.eh_frame:0000000000005592                 db    0
.eh_frame:0000000000005593                 db    0
.eh_frame:0000000000005594                 db  44h ; D
.eh_frame:0000000000005595                 db    0
.eh_frame:0000000000005596                 db    0
.eh_frame:0000000000005597                 db    0
.eh_frame:0000000000005598                 db  68h ; h
.eh_frame:0000000000005599                 db 0BFh
.eh_frame:000000000000559A                 db 0FFh
.eh_frame:000000000000559B                 db 0FFh
.eh_frame:000000000000559C                 db    8
.eh_frame:000000000000559D                 db    0
.eh_frame:000000000000559E                 db    0
.eh_frame:000000000000559F                 db    0
.eh_frame:00000000000055A0                 db    0
.eh_frame:00000000000055A1                 db    0
.eh_frame:00000000000055A2                 db    0
.eh_frame:00000000000055A3                 db    0
.eh_frame:00000000000055A4                 db    0
.eh_frame:00000000000055A5                 db    0
.eh_frame:00000000000055A6                 db    0
.eh_frame:00000000000055A7                 db    0
.eh_frame:00000000000055A8                 db  28h ; (
.eh_frame:00000000000055A9                 db    0
.eh_frame:00000000000055AA                 db    0
.eh_frame:00000000000055AB                 db    0
.eh_frame:00000000000055AC                 db  5Ch ; \
.eh_frame:00000000000055AD                 db    0
.eh_frame:00000000000055AE                 db    0
.eh_frame:00000000000055AF                 db    0
.eh_frame:00000000000055B0                 db 0B0h
.eh_frame:00000000000055B1                 db 0C1h
.eh_frame:00000000000055B2                 db 0FFh
.eh_frame:00000000000055B3                 db 0FFh
.eh_frame:00000000000055B4                 db  42h ; B
.eh_frame:00000000000055B5                 db    3
.eh_frame:00000000000055B6                 db    0
.eh_frame:00000000000055B7                 db    0
.eh_frame:00000000000055B8                 db    0
.eh_frame:00000000000055B9                 db  42h ; B
.eh_frame:00000000000055BA                 db  0Eh
.eh_frame:00000000000055BB                 db  10h
.eh_frame:00000000000055BC                 db  8Dh
.eh_frame:00000000000055BD                 db    2
.eh_frame:00000000000055BE                 db  42h ; B
.eh_frame:00000000000055BF                 db  0Eh
.eh_frame:00000000000055C0                 db  18h
.eh_frame:00000000000055C1                 db  8Ch
.eh_frame:00000000000055C2                 db    3
.eh_frame:00000000000055C3                 db  46h ; F
.eh_frame:00000000000055C4                 db  0Eh
.eh_frame:00000000000055C5                 db  20h
.eh_frame:00000000000055C6                 db  86h
.eh_frame:00000000000055C7                 db    4
.eh_frame:00000000000055C8                 db  41h ; A
.eh_frame:00000000000055C9                 db  0Eh
.eh_frame:00000000000055CA                 db  28h ; (
.eh_frame:00000000000055CB                 db  83h
.eh_frame:00000000000055CC                 db    5
.eh_frame:00000000000055CD                 db  49h ; I
.eh_frame:00000000000055CE                 db  0Eh
.eh_frame:00000000000055CF                 db 0B0h
.eh_frame:00000000000055D0                 db    1
.eh_frame:00000000000055D1                 db    0
.eh_frame:00000000000055D2                 db    0
.eh_frame:00000000000055D3                 db    0
.eh_frame:00000000000055D4                 db  38h ; 8
.eh_frame:00000000000055D5                 db    0
.eh_frame:00000000000055D6                 db    0
.eh_frame:00000000000055D7                 db    0
.eh_frame:00000000000055D8                 db  88h
.eh_frame:00000000000055D9                 db    0
.eh_frame:00000000000055DA                 db    0
.eh_frame:00000000000055DB                 db    0
.eh_frame:00000000000055DC                 db  34h ; 4
.eh_frame:00000000000055DD                 db 0BFh
.eh_frame:00000000000055DE                 db 0FFh
.eh_frame:00000000000055DF                 db 0FFh
.eh_frame:00000000000055E0                 db  39h ; 9
.eh_frame:00000000000055E1                 db    1
.eh_frame:00000000000055E2                 db    0
.eh_frame:00000000000055E3                 db    0
.eh_frame:00000000000055E4                 db    0
.eh_frame:00000000000055E5                 db  41h ; A
.eh_frame:00000000000055E6                 db  0Eh
.eh_frame:00000000000055E7                 db  10h
.eh_frame:00000000000055E8                 db  86h
.eh_frame:00000000000055E9                 db    2
.eh_frame:00000000000055EA                 db  41h ; A
.eh_frame:00000000000055EB                 db  0Eh
.eh_frame:00000000000055EC                 db  18h
.eh_frame:00000000000055ED                 db  83h
.eh_frame:00000000000055EE                 db    3
.eh_frame:00000000000055EF                 db  49h ; I
.eh_frame:00000000000055F0                 db  0Eh
.eh_frame:00000000000055F1                 db  20h
.eh_frame:00000000000055F2                 db    2
.eh_frame:00000000000055F3                 db  4Fh ; O
.eh_frame:00000000000055F4                 db  0Eh
.eh_frame:00000000000055F5                 db  28h ; (
.eh_frame:00000000000055F6                 db  49h ; I
.eh_frame:00000000000055F7                 db  0Eh
.eh_frame:00000000000055F8                 db  30h ; 0
.eh_frame:00000000000055F9                 db  4Fh ; O
.eh_frame:00000000000055FA                 db  0Eh
.eh_frame:00000000000055FB                 db  38h ; 8
.eh_frame:00000000000055FC                 db  53h ; S
.eh_frame:00000000000055FD                 db  0Eh
.eh_frame:00000000000055FE                 db  40h ; @
.eh_frame:00000000000055FF                 db  52h ; R
.eh_frame:0000000000005600                 db  0Eh
.eh_frame:0000000000005601                 db  20h
.eh_frame:0000000000005602                 db  7Ch ; |
.eh_frame:0000000000005603                 db  0Ah
.eh_frame:0000000000005604                 db  0Eh
.eh_frame:0000000000005605                 db  18h
.eh_frame:0000000000005606                 db  43h ; C
.eh_frame:0000000000005607                 db  0Eh
.eh_frame:0000000000005608                 db  10h
.eh_frame:0000000000005609                 db  41h ; A
.eh_frame:000000000000560A                 db  0Eh
.eh_frame:000000000000560B                 db    8
.eh_frame:000000000000560C                 db  41h ; A
.eh_frame:000000000000560D                 db  0Bh
.eh_frame:000000000000560E                 db    0
.eh_frame:000000000000560F                 db    0
.eh_frame:0000000000005610                 db  10h
.eh_frame:0000000000005611                 db    0
.eh_frame:0000000000005612                 db    0
.eh_frame:0000000000005613                 db    0
.eh_frame:0000000000005614                 db 0C4h
.eh_frame:0000000000005615                 db    0
.eh_frame:0000000000005616                 db    0
.eh_frame:0000000000005617                 db    0
.eh_frame:0000000000005618                 db  98h
.eh_frame:0000000000005619                 db 0C4h
.eh_frame:000000000000561A                 db 0FFh
.eh_frame:000000000000561B                 db 0FFh
.eh_frame:000000000000561C                 db    8
.eh_frame:000000000000561D                 db    0
.eh_frame:000000000000561E                 db    0
.eh_frame:000000000000561F                 db    0
.eh_frame:0000000000005620                 db    0
.eh_frame:0000000000005621                 db    0
.eh_frame:0000000000005622                 db    0
.eh_frame:0000000000005623                 db    0
.eh_frame:0000000000005624                 db  10h
.eh_frame:0000000000005625                 db    0
.eh_frame:0000000000005626                 db    0
.eh_frame:0000000000005627                 db    0
.eh_frame:0000000000005628                 db 0D8h
.eh_frame:0000000000005629                 db    0
.eh_frame:000000000000562A                 db    0
.eh_frame:000000000000562B                 db    0
.eh_frame:000000000000562C                 db  94h
.eh_frame:000000000000562D                 db 0C4h
.eh_frame:000000000000562E                 db 0FFh
.eh_frame:000000000000562F                 db 0FFh
.eh_frame:0000000000005630                 db    8
.eh_frame:0000000000005631                 db    0
.eh_frame:0000000000005632                 db    0
.eh_frame:0000000000005633                 db    0
.eh_frame:0000000000005634                 db    0
.eh_frame:0000000000005635                 db    0
.eh_frame:0000000000005636                 db    0
.eh_frame:0000000000005637                 db    0
.eh_frame:0000000000005638                 db  2Ch ; ,
.eh_frame:0000000000005639                 db    0
.eh_frame:000000000000563A                 db    0
.eh_frame:000000000000563B                 db    0
.eh_frame:000000000000563C                 db 0ECh
.eh_frame:000000000000563D                 db    0
.eh_frame:000000000000563E                 db    0
.eh_frame:000000000000563F                 db    0
.eh_frame:0000000000005640                 db  90h
.eh_frame:0000000000005641                 db 0C4h
.eh_frame:0000000000005642                 db 0FFh
.eh_frame:0000000000005643                 db 0FFh
.eh_frame:0000000000005644                 db 0A4h
.eh_frame:0000000000005645                 db    0
.eh_frame:0000000000005646                 db    0
.eh_frame:0000000000005647                 db    0
.eh_frame:0000000000005648                 db    0
.eh_frame:0000000000005649                 db  41h ; A
.eh_frame:000000000000564A                 db  0Eh
.eh_frame:000000000000564B                 db  10h
.eh_frame:000000000000564C                 db  86h
.eh_frame:000000000000564D                 db    2
.eh_frame:000000000000564E                 db  41h ; A
.eh_frame:000000000000564F                 db  0Eh
.eh_frame:0000000000005650                 db  18h
.eh_frame:0000000000005651                 db  83h
.eh_frame:0000000000005652                 db    3
.eh_frame:0000000000005653                 db  44h ; D
.eh_frame:0000000000005654                 db  0Eh
.eh_frame:0000000000005655                 db  20h
.eh_frame:0000000000005656                 db  7Ah ; z
.eh_frame:0000000000005657                 db  0Ah
.eh_frame:0000000000005658                 db  0Eh
.eh_frame:0000000000005659                 db  18h
.eh_frame:000000000000565A                 db  41h ; A
.eh_frame:000000000000565B                 db  0Eh
.eh_frame:000000000000565C                 db  10h
.eh_frame:000000000000565D                 db  41h ; A
.eh_frame:000000000000565E                 db  0Eh
.eh_frame:000000000000565F                 db    8
.eh_frame:0000000000005660                 db  41h ; A
.eh_frame:0000000000005661                 db  0Bh
.eh_frame:0000000000005662                 db    0
.eh_frame:0000000000005663                 db    0
.eh_frame:0000000000005664                 db    0
.eh_frame:0000000000005665                 db    0
.eh_frame:0000000000005666                 db    0
.eh_frame:0000000000005667                 db    0
.eh_frame:0000000000005668                 db  38h ; 8
.eh_frame:0000000000005669                 db    0
.eh_frame:000000000000566A                 db    0
.eh_frame:000000000000566B                 db    0
.eh_frame:000000000000566C                 db  1Ch
.eh_frame:000000000000566D                 db    1
.eh_frame:000000000000566E                 db    0
.eh_frame:000000000000566F                 db    0
.eh_frame:0000000000005670                 db  10h
.eh_frame:0000000000005671                 db 0C5h
.eh_frame:0000000000005672                 db 0FFh
.eh_frame:0000000000005673                 db 0FFh
.eh_frame:0000000000005674                 db  3Fh ; ?
.eh_frame:0000000000005675                 db    1
.eh_frame:0000000000005676                 db    0
.eh_frame:0000000000005677                 db    0
.eh_frame:0000000000005678                 db    0
.eh_frame:0000000000005679                 db  42h ; B
.eh_frame:000000000000567A                 db  0Eh
.eh_frame:000000000000567B                 db  10h
.eh_frame:000000000000567C                 db  8Dh
.eh_frame:000000000000567D                 db    2
.eh_frame:000000000000567E                 db  42h ; B
.eh_frame:000000000000567F                 db  0Eh
.eh_frame:0000000000005680                 db  18h
.eh_frame:0000000000005681                 db  8Ch
.eh_frame:0000000000005682                 db    3
.eh_frame:0000000000005683                 db  44h ; D
.eh_frame:0000000000005684                 db  0Eh
.eh_frame:0000000000005685                 db  20h
.eh_frame:0000000000005686                 db  86h
.eh_frame:0000000000005687                 db    4
.eh_frame:0000000000005688                 db  41h ; A
.eh_frame:0000000000005689                 db  0Eh
.eh_frame:000000000000568A                 db  28h ; (
.eh_frame:000000000000568B                 db  83h
.eh_frame:000000000000568C                 db    5
.eh_frame:000000000000568D                 db  4Dh ; M
.eh_frame:000000000000568E                 db  0Eh
.eh_frame:000000000000568F                 db  90h
.eh_frame:0000000000005690                 db    2
.eh_frame:0000000000005691                 db    2
.eh_frame:0000000000005692                 db  8Eh
.eh_frame:0000000000005693                 db  0Ah
.eh_frame:0000000000005694                 db  0Eh
.eh_frame:0000000000005695                 db  28h ; (
.eh_frame:0000000000005696                 db  41h ; A
.eh_frame:0000000000005697                 db  0Eh
.eh_frame:0000000000005698                 db  20h
.eh_frame:0000000000005699                 db  41h ; A
.eh_frame:000000000000569A                 db  0Eh
.eh_frame:000000000000569B                 db  18h
.eh_frame:000000000000569C                 db  42h ; B
.eh_frame:000000000000569D                 db  0Eh
.eh_frame:000000000000569E                 db  10h
.eh_frame:000000000000569F                 db  42h ; B
.eh_frame:00000000000056A0                 db  0Eh
.eh_frame:00000000000056A1                 db    8
.eh_frame:00000000000056A2                 db  46h ; F
.eh_frame:00000000000056A3                 db  0Bh
.eh_frame:00000000000056A4                 db  48h ; H
.eh_frame:00000000000056A5                 db    0
.eh_frame:00000000000056A6                 db    0
.eh_frame:00000000000056A7                 db    0
.eh_frame:00000000000056A8                 db  58h ; X
.eh_frame:00000000000056A9                 db    1
.eh_frame:00000000000056AA                 db    0
.eh_frame:00000000000056AB                 db    0
.eh_frame:00000000000056AC                 db  14h
.eh_frame:00000000000056AD                 db 0C6h
.eh_frame:00000000000056AE                 db 0FFh
.eh_frame:00000000000056AF                 db 0FFh
.eh_frame:00000000000056B0                 db  3Bh ; ;
.eh_frame:00000000000056B1                 db    1
.eh_frame:00000000000056B2                 db    0
.eh_frame:00000000000056B3                 db    0
.eh_frame:00000000000056B4                 db    0
.eh_frame:00000000000056B5                 db  42h ; B
.eh_frame:00000000000056B6                 db  0Eh
.eh_frame:00000000000056B7                 db  10h
.eh_frame:00000000000056B8                 db  8Eh
.eh_frame:00000000000056B9                 db    2
.eh_frame:00000000000056BA                 db  42h ; B
.eh_frame:00000000000056BB                 db  0Eh
.eh_frame:00000000000056BC                 db  18h
.eh_frame:00000000000056BD                 db  8Dh
.eh_frame:00000000000056BE                 db    3
.eh_frame:00000000000056BF                 db  45h ; E
.eh_frame:00000000000056C0                 db  0Eh
.eh_frame:00000000000056C1                 db  20h
.eh_frame:00000000000056C2                 db  8Ch
.eh_frame:00000000000056C3                 db    4
.eh_frame:00000000000056C4                 db  41h ; A
.eh_frame:00000000000056C5                 db  0Eh
.eh_frame:00000000000056C6                 db  28h ; (
.eh_frame:00000000000056C7                 db  86h
.eh_frame:00000000000056C8                 db    5
.eh_frame:00000000000056C9                 db  44h ; D
.eh_frame:00000000000056CA                 db  0Eh
.eh_frame:00000000000056CB                 db  30h ; 0
.eh_frame:00000000000056CC                 db  83h
.eh_frame:00000000000056CD                 db    6
.eh_frame:00000000000056CE                 db  4Ah ; J
.eh_frame:00000000000056CF                 db  0Eh
.eh_frame:00000000000056D0                 db  80h
.eh_frame:00000000000056D1                 db    2
.eh_frame:00000000000056D2                 db    3
.eh_frame:00000000000056D3                 db  0Dh
.eh_frame:00000000000056D4                 db    1
.eh_frame:00000000000056D5                 db  0Ah
.eh_frame:00000000000056D6                 db  0Eh
.eh_frame:00000000000056D7                 db  30h ; 0
.eh_frame:00000000000056D8                 db  41h ; A
.eh_frame:00000000000056D9                 db  0Eh
.eh_frame:00000000000056DA                 db  28h ; (
.eh_frame:00000000000056DB                 db  41h ; A
.eh_frame:00000000000056DC                 db  0Eh
.eh_frame:00000000000056DD                 db  20h
.eh_frame:00000000000056DE                 db  42h ; B
.eh_frame:00000000000056DF                 db  0Eh
.eh_frame:00000000000056E0                 db  18h
.eh_frame:00000000000056E1                 db  42h ; B
.eh_frame:00000000000056E2                 db  0Eh
.eh_frame:00000000000056E3                 db  10h
.eh_frame:00000000000056E4                 db  42h ; B
.eh_frame:00000000000056E5                 db  0Eh
.eh_frame:00000000000056E6                 db    8
.eh_frame:00000000000056E7                 db  43h ; C
.eh_frame:00000000000056E8                 db  0Bh
.eh_frame:00000000000056E9                 db    0
.eh_frame:00000000000056EA                 db    0
.eh_frame:00000000000056EB                 db    0
.eh_frame:00000000000056EC                 db    0
.eh_frame:00000000000056ED                 db    0
.eh_frame:00000000000056EE                 db    0
.eh_frame:00000000000056EF                 db    0
.eh_frame:00000000000056F0                 db  1Ch
.eh_frame:00000000000056F1                 db    0
.eh_frame:00000000000056F2                 db    0
.eh_frame:00000000000056F3                 db    0
.eh_frame:00000000000056F4                 db 0A4h
.eh_frame:00000000000056F5                 db    1
.eh_frame:00000000000056F6                 db    0
.eh_frame:00000000000056F7                 db    0
.eh_frame:00000000000056F8                 db    8
.eh_frame:00000000000056F9                 db 0C7h
.eh_frame:00000000000056FA                 db 0FFh
.eh_frame:00000000000056FB                 db 0FFh
.eh_frame:00000000000056FC                 db  9Fh
.eh_frame:00000000000056FD                 db    0
.eh_frame:00000000000056FE                 db    0
.eh_frame:00000000000056FF                 db    0
.eh_frame:0000000000005700                 db    0
.eh_frame:0000000000005701                 db  44h ; D
.eh_frame:0000000000005702                 db  0Eh
.eh_frame:0000000000005703                 db  10h
.eh_frame:0000000000005704                 db  83h
.eh_frame:0000000000005705                 db    2
.eh_frame:0000000000005706                 db    2
.eh_frame:0000000000005707                 db  78h ; x
.eh_frame:0000000000005708                 db  0Ah
.eh_frame:0000000000005709                 db  0Eh
.eh_frame:000000000000570A                 db    8
.eh_frame:000000000000570B                 db  41h ; A
.eh_frame:000000000000570C                 db  0Bh
.eh_frame:000000000000570D                 db    0
.eh_frame:000000000000570E                 db    0
.eh_frame:000000000000570F                 db    0
.eh_frame:0000000000005710                 db  40h ; @
.eh_frame:0000000000005711                 db    0
.eh_frame:0000000000005712                 db    0
.eh_frame:0000000000005713                 db    0
.eh_frame:0000000000005714                 db 0C4h
.eh_frame:0000000000005715                 db    1
.eh_frame:0000000000005716                 db    0
.eh_frame:0000000000005717                 db    0
.eh_frame:0000000000005718                 db  88h
.eh_frame:0000000000005719                 db 0C7h
.eh_frame:000000000000571A                 db 0FFh
.eh_frame:000000000000571B                 db 0FFh
.eh_frame:000000000000571C                 db 0E7h
.eh_frame:000000000000571D                 db    0
.eh_frame:000000000000571E                 db    0
.eh_frame:000000000000571F                 db    0
.eh_frame:0000000000005720                 db    0
.eh_frame:0000000000005721                 db  41h ; A
.eh_frame:0000000000005722                 db  0Eh
.eh_frame:0000000000005723                 db  10h
.eh_frame:0000000000005724                 db  86h
.eh_frame:0000000000005725                 db    2
.eh_frame:0000000000005726                 db  41h ; A
.eh_frame:0000000000005727                 db  0Eh
.eh_frame:0000000000005728                 db  18h
.eh_frame:0000000000005729                 db  83h
.eh_frame:000000000000572A                 db    3
.eh_frame:000000000000572B                 db  49h ; I
.eh_frame:000000000000572C                 db  0Eh
.eh_frame:000000000000572D                 db  20h
.eh_frame:000000000000572E                 db  6Eh ; n
.eh_frame:000000000000572F                 db  0Ah
.eh_frame:0000000000005730                 db  0Eh
.eh_frame:0000000000005731                 db  18h
.eh_frame:0000000000005732                 db  41h ; A
.eh_frame:0000000000005733                 db  0Eh
.eh_frame:0000000000005734                 db  10h
.eh_frame:0000000000005735                 db  41h ; A
.eh_frame:0000000000005736                 db  0Eh
.eh_frame:0000000000005737                 db    8
.eh_frame:0000000000005738                 db  45h ; E
.eh_frame:0000000000005739                 db  0Bh
.eh_frame:000000000000573A                 db    2
.eh_frame:000000000000573B                 db  4Ah ; J
.eh_frame:000000000000573C                 db  0Ah
.eh_frame:000000000000573D                 db  0Eh
.eh_frame:000000000000573E                 db  18h
.eh_frame:000000000000573F                 db  41h ; A
.eh_frame:0000000000005740                 db  0Eh
.eh_frame:0000000000005741                 db  10h
.eh_frame:0000000000005742                 db  41h ; A
.eh_frame:0000000000005743                 db  0Eh
.eh_frame:0000000000005744                 db    8
.eh_frame:0000000000005745                 db  44h ; D
.eh_frame:0000000000005746                 db  0Bh
.eh_frame:0000000000005747                 db    2
.eh_frame:0000000000005748                 db  54h ; T
.eh_frame:0000000000005749                 db  0Eh
.eh_frame:000000000000574A                 db  18h
.eh_frame:000000000000574B                 db  41h ; A
.eh_frame:000000000000574C                 db  0Eh
.eh_frame:000000000000574D                 db  10h
.eh_frame:000000000000574E                 db  41h ; A
.eh_frame:000000000000574F                 db  0Eh
.eh_frame:0000000000005750                 db    8
.eh_frame:0000000000005751                 db    0
.eh_frame:0000000000005752                 db    0
.eh_frame:0000000000005753                 db    0
.eh_frame:0000000000005754                 db  74h ; t
.eh_frame:0000000000005755                 db    0
.eh_frame:0000000000005756                 db    0
.eh_frame:0000000000005757                 db    0
.eh_frame:0000000000005758                 db    8
.eh_frame:0000000000005759                 db    2
.eh_frame:000000000000575A                 db    0
.eh_frame:000000000000575B                 db    0
.eh_frame:000000000000575C                 db  34h ; 4
.eh_frame:000000000000575D                 db 0C8h
.eh_frame:000000000000575E                 db 0FFh
.eh_frame:000000000000575F                 db 0FFh
.eh_frame:0000000000005760                 db  34h ; 4
.eh_frame:0000000000005761                 db  12h
.eh_frame:0000000000005762                 db    0
.eh_frame:0000000000005763                 db    0
.eh_frame:0000000000005764                 db    0
.eh_frame:0000000000005765                 db  42h ; B
.eh_frame:0000000000005766                 db  0Eh
.eh_frame:0000000000005767                 db  10h
.eh_frame:0000000000005768                 db  8Fh
.eh_frame:0000000000005769                 db    2
.eh_frame:000000000000576A                 db  42h ; B
.eh_frame:000000000000576B                 db  0Eh
.eh_frame:000000000000576C                 db  18h
.eh_frame:000000000000576D                 db  8Eh
.eh_frame:000000000000576E                 db    3
.eh_frame:000000000000576F                 db  45h ; E
.eh_frame:0000000000005770                 db  0Eh
.eh_frame:0000000000005771                 db  20h
.eh_frame:0000000000005772                 db  8Dh
.eh_frame:0000000000005773                 db    4
.eh_frame:0000000000005774                 db  42h ; B
.eh_frame:0000000000005775                 db  0Eh
.eh_frame:0000000000005776                 db  28h ; (
.eh_frame:0000000000005777                 db  8Ch
.eh_frame:0000000000005778                 db    5
.eh_frame:0000000000005779                 db  44h ; D
.eh_frame:000000000000577A                 db  0Eh
.eh_frame:000000000000577B                 db  30h ; 0
.eh_frame:000000000000577C                 db  86h
.eh_frame:000000000000577D                 db    6
.eh_frame:000000000000577E                 db  41h ; A
.eh_frame:000000000000577F                 db  0Eh
.eh_frame:0000000000005780                 db  38h ; 8
.eh_frame:0000000000005781                 db  83h
.eh_frame:0000000000005782                 db    7
.eh_frame:0000000000005783                 db  53h ; S
.eh_frame:0000000000005784                 db  0Eh
.eh_frame:0000000000005785                 db 0F0h
.eh_frame:0000000000005786                 db    1
.eh_frame:0000000000005787                 db    3
.eh_frame:0000000000005788                 db  81h
.eh_frame:0000000000005789                 db  0Bh
.eh_frame:000000000000578A                 db  0Eh
.eh_frame:000000000000578B                 db 0F8h
.eh_frame:000000000000578C                 db    1
.eh_frame:000000000000578D                 db  4Ah ; J
.eh_frame:000000000000578E                 db  0Eh
.eh_frame:000000000000578F                 db  80h
.eh_frame:0000000000005790                 db    2
.eh_frame:0000000000005791                 db  44h ; D
.eh_frame:0000000000005792                 db  0Eh
.eh_frame:0000000000005793                 db  88h
.eh_frame:0000000000005794                 db    2
.eh_frame:0000000000005795                 db  45h ; E
.eh_frame:0000000000005796                 db  0Eh
.eh_frame:0000000000005797                 db  90h
.eh_frame:0000000000005798                 db    2
.eh_frame:0000000000005799                 db  5Fh ; _
.eh_frame:000000000000579A                 db  0Eh
.eh_frame:000000000000579B                 db 0F0h
.eh_frame:000000000000579C                 db    1
.eh_frame:000000000000579D                 db  64h ; d
.eh_frame:000000000000579E                 db  0Ah
.eh_frame:000000000000579F                 db  0Eh
.eh_frame:00000000000057A0                 db  38h ; 8
.eh_frame:00000000000057A1                 db  41h ; A
.eh_frame:00000000000057A2                 db  0Eh
.eh_frame:00000000000057A3                 db  30h ; 0
.eh_frame:00000000000057A4                 db  41h ; A
.eh_frame:00000000000057A5                 db  0Eh
.eh_frame:00000000000057A6                 db  28h ; (
.eh_frame:00000000000057A7                 db  42h ; B
.eh_frame:00000000000057A8                 db  0Eh
.eh_frame:00000000000057A9                 db  20h
.eh_frame:00000000000057AA                 db  42h ; B
.eh_frame:00000000000057AB                 db  0Eh
.eh_frame:00000000000057AC                 db  18h
.eh_frame:00000000000057AD                 db  42h ; B
.eh_frame:00000000000057AE                 db  0Eh
.eh_frame:00000000000057AF                 db  10h
.eh_frame:00000000000057B0                 db  42h ; B
.eh_frame:00000000000057B1                 db  0Eh
.eh_frame:00000000000057B2                 db    8
.eh_frame:00000000000057B3                 db  44h ; D
.eh_frame:00000000000057B4                 db  0Bh
.eh_frame:00000000000057B5                 db    3
.eh_frame:00000000000057B6                 db  99h
.eh_frame:00000000000057B7                 db    5
.eh_frame:00000000000057B8                 db  0Eh
.eh_frame:00000000000057B9                 db 0F8h
.eh_frame:00000000000057BA                 db    1
.eh_frame:00000000000057BB                 db  4Dh ; M
.eh_frame:00000000000057BC                 db  0Eh
.eh_frame:00000000000057BD                 db  80h
.eh_frame:00000000000057BE                 db    2
.eh_frame:00000000000057BF                 db  44h ; D
.eh_frame:00000000000057C0                 db  0Eh
.eh_frame:00000000000057C1                 db  88h
.eh_frame:00000000000057C2                 db    2
.eh_frame:00000000000057C3                 db  47h ; G
.eh_frame:00000000000057C4                 db  0Eh
.eh_frame:00000000000057C5                 db  90h
.eh_frame:00000000000057C6                 db    2
.eh_frame:00000000000057C7                 db  5Bh ; [
.eh_frame:00000000000057C8                 db  0Eh
.eh_frame:00000000000057C9                 db 0F0h
.eh_frame:00000000000057CA                 db    1
.eh_frame:00000000000057CB                 db    0
.eh_frame:00000000000057CC                 db  68h ; h
.eh_frame:00000000000057CD                 db    0
.eh_frame:00000000000057CE                 db    0
.eh_frame:00000000000057CF                 db    0
.eh_frame:00000000000057D0                 db  80h
.eh_frame:00000000000057D1                 db    2
.eh_frame:00000000000057D2                 db    0
.eh_frame:00000000000057D3                 db    0
.eh_frame:00000000000057D4                 db 0FCh
.eh_frame:00000000000057D5                 db 0D9h
.eh_frame:00000000000057D6                 db 0FFh
.eh_frame:00000000000057D7                 db 0FFh
.eh_frame:00000000000057D8                 db 0ABh
.eh_frame:00000000000057D9                 db    1
.eh_frame:00000000000057DA                 db    0
.eh_frame:00000000000057DB                 db    0
.eh_frame:00000000000057DC                 db    0
.eh_frame:00000000000057DD                 db  42h ; B
.eh_frame:00000000000057DE                 db  0Eh
.eh_frame:00000000000057DF                 db  10h
.eh_frame:00000000000057E0                 db  8Fh
.eh_frame:00000000000057E1                 db    2
.eh_frame:00000000000057E2                 db  42h ; B
.eh_frame:00000000000057E3                 db  0Eh
.eh_frame:00000000000057E4                 db  18h
.eh_frame:00000000000057E5                 db  8Eh
.eh_frame:00000000000057E6                 db    3
.eh_frame:00000000000057E7                 db  45h ; E
.eh_frame:00000000000057E8                 db  0Eh
.eh_frame:00000000000057E9                 db  20h
.eh_frame:00000000000057EA                 db  8Dh
.eh_frame:00000000000057EB                 db    4
.eh_frame:00000000000057EC                 db  42h ; B
.eh_frame:00000000000057ED                 db  0Eh
.eh_frame:00000000000057EE                 db  28h ; (
.eh_frame:00000000000057EF                 db  8Ch
.eh_frame:00000000000057F0                 db    5
.eh_frame:00000000000057F1                 db  44h ; D
.eh_frame:00000000000057F2                 db  0Eh
.eh_frame:00000000000057F3                 db  30h ; 0
.eh_frame:00000000000057F4                 db  86h
.eh_frame:00000000000057F5                 db    6
.eh_frame:00000000000057F6                 db  41h ; A
.eh_frame:00000000000057F7                 db  0Eh
.eh_frame:00000000000057F8                 db  38h ; 8
.eh_frame:00000000000057F9                 db  83h
.eh_frame:00000000000057FA                 db    7
.eh_frame:00000000000057FB                 db  47h ; G
.eh_frame:00000000000057FC                 db  0Eh
.eh_frame:00000000000057FD                 db  60h ; `
.eh_frame:00000000000057FE                 db    2
.eh_frame:00000000000057FF                 db  99h
.eh_frame:0000000000005800                 db  0Eh
.eh_frame:0000000000005801                 db  68h ; h
.eh_frame:0000000000005802                 db  5Fh ; _
.eh_frame:0000000000005803                 db  0Eh
.eh_frame:0000000000005804                 db  70h ; p
.eh_frame:0000000000005805                 db  46h ; F
.eh_frame:0000000000005806                 db  0Eh
.eh_frame:0000000000005807                 db  78h ; x
.eh_frame:0000000000005808                 db  42h ; B
.eh_frame:0000000000005809                 db  0Eh
.eh_frame:000000000000580A                 db  80h
.eh_frame:000000000000580B                 db    1
.eh_frame:000000000000580C                 db  59h ; Y
.eh_frame:000000000000580D                 db  0Eh
.eh_frame:000000000000580E                 db  60h ; `
.eh_frame:000000000000580F                 db    2
.eh_frame:0000000000005810                 db  40h ; @
.eh_frame:0000000000005811                 db  0Eh
.eh_frame:0000000000005812                 db  68h ; h
.eh_frame:0000000000005813                 db  4Bh ; K
.eh_frame:0000000000005814                 db  0Eh
.eh_frame:0000000000005815                 db  70h ; p
.eh_frame:0000000000005816                 db  43h ; C
.eh_frame:0000000000005817                 db  0Eh
.eh_frame:0000000000005818                 db  78h ; x
.eh_frame:0000000000005819                 db  45h ; E
.eh_frame:000000000000581A                 db  0Eh
.eh_frame:000000000000581B                 db  80h
.eh_frame:000000000000581C                 db    1
.eh_frame:000000000000581D                 db  5Eh ; ^
.eh_frame:000000000000581E                 db  0Eh
.eh_frame:000000000000581F                 db  60h ; `
.eh_frame:0000000000005820                 db  4Ch ; L
.eh_frame:0000000000005821                 db  0Ah
.eh_frame:0000000000005822                 db  0Eh
.eh_frame:0000000000005823                 db  38h ; 8
.eh_frame:0000000000005824                 db  44h ; D
.eh_frame:0000000000005825                 db  0Eh
.eh_frame:0000000000005826                 db  30h ; 0
.eh_frame:0000000000005827                 db  41h ; A
.eh_frame:0000000000005828                 db  0Eh
.eh_frame:0000000000005829                 db  28h ; (
.eh_frame:000000000000582A                 db  42h ; B
.eh_frame:000000000000582B                 db  0Eh
.eh_frame:000000000000582C                 db  20h
.eh_frame:000000000000582D                 db  42h ; B
.eh_frame:000000000000582E                 db  0Eh
.eh_frame:000000000000582F                 db  18h
.eh_frame:0000000000005830                 db  42h ; B
.eh_frame:0000000000005831                 db  0Eh
.eh_frame:0000000000005832                 db  10h
.eh_frame:0000000000005833                 db  42h ; B
.eh_frame:0000000000005834                 db  0Eh
.eh_frame:0000000000005835                 db    8
.eh_frame:0000000000005836                 db  46h ; F
.eh_frame:0000000000005837                 db  0Bh
.eh_frame:0000000000005838                 db  28h ; (
.eh_frame:0000000000005839                 db    0
.eh_frame:000000000000583A                 db    0
.eh_frame:000000000000583B                 db    0
.eh_frame:000000000000583C                 db 0ECh
.eh_frame:000000000000583D                 db    2
.eh_frame:000000000000583E                 db    0
.eh_frame:000000000000583F                 db    0
.eh_frame:0000000000005840                 db  40h ; @
.eh_frame:0000000000005841                 db 0DBh
.eh_frame:0000000000005842                 db 0FFh
.eh_frame:0000000000005843                 db 0FFh
.eh_frame:0000000000005844                 db  36h ; 6
.eh_frame:0000000000005845                 db    0
.eh_frame:0000000000005846                 db    0
.eh_frame:0000000000005847                 db    0
.eh_frame:0000000000005848                 db    0
.eh_frame:0000000000005849                 db  42h ; B
.eh_frame:000000000000584A                 db  0Eh
.eh_frame:000000000000584B                 db  10h
.eh_frame:000000000000584C                 db  8Ch
.eh_frame:000000000000584D                 db    2
.eh_frame:000000000000584E                 db  41h ; A
.eh_frame:000000000000584F                 db  0Eh
.eh_frame:0000000000005850                 db  18h
.eh_frame:0000000000005851                 db  86h
.eh_frame:0000000000005852                 db    3
.eh_frame:0000000000005853                 db  41h ; A
.eh_frame:0000000000005854                 db  0Eh
.eh_frame:0000000000005855                 db  20h
.eh_frame:0000000000005856                 db  83h
.eh_frame:0000000000005857                 db    4
.eh_frame:0000000000005858                 db  6Eh ; n
.eh_frame:0000000000005859                 db  0Eh
.eh_frame:000000000000585A                 db  18h
.eh_frame:000000000000585B                 db  41h ; A
.eh_frame:000000000000585C                 db  0Eh
.eh_frame:000000000000585D                 db  10h
.eh_frame:000000000000585E                 db  42h ; B
.eh_frame:000000000000585F                 db  0Eh
.eh_frame:0000000000005860                 db    8
.eh_frame:0000000000005861                 db    0
.eh_frame:0000000000005862                 db    0
.eh_frame:0000000000005863                 db    0
.eh_frame:0000000000005864                 db  10h
.eh_frame:0000000000005865                 db    0
.eh_frame:0000000000005866                 db    0
.eh_frame:0000000000005867                 db    0
.eh_frame:0000000000005868                 db  18h
.eh_frame:0000000000005869                 db    3
.eh_frame:000000000000586A                 db    0
.eh_frame:000000000000586B                 db    0
.eh_frame:000000000000586C                 db  54h ; T
.eh_frame:000000000000586D                 db 0DBh
.eh_frame:000000000000586E                 db 0FFh
.eh_frame:000000000000586F                 db 0FFh
.eh_frame:0000000000005870                 db  11h
.eh_frame:0000000000005871                 db    0
.eh_frame:0000000000005872                 db    0
.eh_frame:0000000000005873                 db    0
.eh_frame:0000000000005874                 db    0
.eh_frame:0000000000005875                 db    0
.eh_frame:0000000000005876                 db    0
.eh_frame:0000000000005877                 db    0
.eh_frame:0000000000005878                 db  10h
.eh_frame:0000000000005879                 db    0
.eh_frame:000000000000587A                 db    0
.eh_frame:000000000000587B                 db    0
.eh_frame:000000000000587C                 db  2Ch ; ,
.eh_frame:000000000000587D                 db    3
.eh_frame:000000000000587E                 db    0
.eh_frame:000000000000587F                 db    0
.eh_frame:0000000000005880                 db  60h ; `
.eh_frame:0000000000005881                 db 0DBh
.eh_frame:0000000000005882                 db 0FFh
.eh_frame:0000000000005883                 db 0FFh
.eh_frame:0000000000005884                 db  11h
.eh_frame:0000000000005885                 db    0
.eh_frame:0000000000005886                 db    0
.eh_frame:0000000000005887                 db    0
.eh_frame:0000000000005888                 db    0
.eh_frame:0000000000005889                 db    0
.eh_frame:000000000000588A                 db    0
.eh_frame:000000000000588B                 db    0
.eh_frame:000000000000588C                 db  10h
.eh_frame:000000000000588D                 db    0
.eh_frame:000000000000588E                 db    0
.eh_frame:000000000000588F                 db    0
.eh_frame:0000000000005890                 db  40h ; @
.eh_frame:0000000000005891                 db    3
.eh_frame:0000000000005892                 db    0
.eh_frame:0000000000005893                 db    0
.eh_frame:0000000000005894                 db  6Ch ; l
.eh_frame:0000000000005895                 db 0DBh
.eh_frame:0000000000005896                 db 0FFh
.eh_frame:0000000000005897                 db 0FFh
.eh_frame:0000000000005898                 db  35h ; 5
.eh_frame:0000000000005899                 db    0
.eh_frame:000000000000589A                 db    0
.eh_frame:000000000000589B                 db    0
.eh_frame:000000000000589C                 db    0
.eh_frame:000000000000589D                 db    0
.eh_frame:000000000000589E                 db    0
.eh_frame:000000000000589F                 db    0
.eh_frame:00000000000058A0                 db  10h
.eh_frame:00000000000058A1                 db    0
.eh_frame:00000000000058A2                 db    0
.eh_frame:00000000000058A3                 db    0
.eh_frame:00000000000058A4                 db  54h ; T
.eh_frame:00000000000058A5                 db    3
.eh_frame:00000000000058A6                 db    0
.eh_frame:00000000000058A7                 db    0
.eh_frame:00000000000058A8                 db  98h
.eh_frame:00000000000058A9                 db 0DBh
.eh_frame:00000000000058AA                 db 0FFh
.eh_frame:00000000000058AB                 db 0FFh
.eh_frame:00000000000058AC                 db  15h
.eh_frame:00000000000058AD                 db    0
.eh_frame:00000000000058AE                 db    0
.eh_frame:00000000000058AF                 db    0
.eh_frame:00000000000058B0                 db    0
.eh_frame:00000000000058B1                 db    0
.eh_frame:00000000000058B2                 db    0
.eh_frame:00000000000058B3                 db    0
.eh_frame:00000000000058B4                 db  10h
.eh_frame:00000000000058B5                 db    0
.eh_frame:00000000000058B6                 db    0
.eh_frame:00000000000058B7                 db    0
.eh_frame:00000000000058B8                 db  68h ; h
.eh_frame:00000000000058B9                 db    3
.eh_frame:00000000000058BA                 db    0
.eh_frame:00000000000058BB                 db    0
.eh_frame:00000000000058BC                 db 0A4h
.eh_frame:00000000000058BD                 db 0DBh
.eh_frame:00000000000058BE                 db 0FFh
.eh_frame:00000000000058BF                 db 0FFh
.eh_frame:00000000000058C0                 db  30h ; 0
.eh_frame:00000000000058C1                 db    0
.eh_frame:00000000000058C2                 db    0
.eh_frame:00000000000058C3                 db    0
.eh_frame:00000000000058C4                 db    0
.eh_frame:00000000000058C5                 db  6Bh ; k
.eh_frame:00000000000058C6                 db  0Eh
.eh_frame:00000000000058C7                 db  10h
.eh_frame:00000000000058C8                 db  50h ; P
.eh_frame:00000000000058C9                 db    0
.eh_frame:00000000000058CA                 db    0
.eh_frame:00000000000058CB                 db    0
.eh_frame:00000000000058CC                 db  7Ch ; |
.eh_frame:00000000000058CD                 db    3
.eh_frame:00000000000058CE                 db    0
.eh_frame:00000000000058CF                 db    0
.eh_frame:00000000000058D0                 db 0C0h
.eh_frame:00000000000058D1                 db 0DBh
.eh_frame:00000000000058D2                 db 0FFh
.eh_frame:00000000000058D3                 db 0FFh
.eh_frame:00000000000058D4                 db  74h ; t
.eh_frame:00000000000058D5                 db    0
.eh_frame:00000000000058D6                 db    0
.eh_frame:00000000000058D7                 db    0
.eh_frame:00000000000058D8                 db    0
.eh_frame:00000000000058D9                 db  42h ; B
.eh_frame:00000000000058DA                 db  0Eh
.eh_frame:00000000000058DB                 db  10h
.eh_frame:00000000000058DC                 db  8Fh
.eh_frame:00000000000058DD                 db    2
.eh_frame:00000000000058DE                 db  42h ; B
.eh_frame:00000000000058DF                 db  0Eh
.eh_frame:00000000000058E0                 db  18h
.eh_frame:00000000000058E1                 db  8Eh
.eh_frame:00000000000058E2                 db    3
.eh_frame:00000000000058E3                 db  49h ; I
.eh_frame:00000000000058E4                 db  0Eh
.eh_frame:00000000000058E5                 db  20h
.eh_frame:00000000000058E6                 db  8Dh
.eh_frame:00000000000058E7                 db    4
.eh_frame:00000000000058E8                 db  42h ; B
.eh_frame:00000000000058E9                 db  0Eh
.eh_frame:00000000000058EA                 db  28h ; (
.eh_frame:00000000000058EB                 db  8Ch
.eh_frame:00000000000058EC                 db    5
.eh_frame:00000000000058ED                 db  44h ; D
.eh_frame:00000000000058EE                 db  0Eh
.eh_frame:00000000000058EF                 db  30h ; 0
.eh_frame:00000000000058F0                 db  86h
.eh_frame:00000000000058F1                 db    6
.eh_frame:00000000000058F2                 db  41h ; A
.eh_frame:00000000000058F3                 db  0Eh
.eh_frame:00000000000058F4                 db  38h ; 8
.eh_frame:00000000000058F5                 db  83h
.eh_frame:00000000000058F6                 db    7
.eh_frame:00000000000058F7                 db  4Dh ; M
.eh_frame:00000000000058F8                 db  0Eh
.eh_frame:00000000000058F9                 db  50h ; P
.eh_frame:00000000000058FA                 db  5Fh ; _
.eh_frame:00000000000058FB                 db  0Eh
.eh_frame:00000000000058FC                 db  58h ; X
.eh_frame:00000000000058FD                 db  47h ; G
.eh_frame:00000000000058FE                 db  0Eh
.eh_frame:00000000000058FF                 db  60h ; `
.eh_frame:0000000000005900                 db  46h ; F
.eh_frame:0000000000005901                 db  0Eh
.eh_frame:0000000000005902                 db  68h ; h
.eh_frame:0000000000005903                 db  44h ; D
.eh_frame:0000000000005904                 db  0Eh
.eh_frame:0000000000005905                 db  70h ; p
.eh_frame:0000000000005906                 db  58h ; X
.eh_frame:0000000000005907                 db  0Eh
.eh_frame:0000000000005908                 db  38h ; 8
.eh_frame:0000000000005909                 db  41h ; A
.eh_frame:000000000000590A                 db  0Eh
.eh_frame:000000000000590B                 db  30h ; 0
.eh_frame:000000000000590C                 db  41h ; A
.eh_frame:000000000000590D                 db  0Eh
.eh_frame:000000000000590E                 db  28h ; (
.eh_frame:000000000000590F                 db  42h ; B
.eh_frame:0000000000005910                 db  0Eh
.eh_frame:0000000000005911                 db  20h
.eh_frame:0000000000005912                 db  42h ; B
.eh_frame:0000000000005913                 db  0Eh
.eh_frame:0000000000005914                 db  18h
.eh_frame:0000000000005915                 db  42h ; B
.eh_frame:0000000000005916                 db  0Eh
.eh_frame:0000000000005917                 db  10h
.eh_frame:0000000000005918                 db  42h ; B
.eh_frame:0000000000005919                 db  0Eh
.eh_frame:000000000000591A                 db    8
.eh_frame:000000000000591B                 db    0
.eh_frame:000000000000591C                 db  68h ; h
.eh_frame:000000000000591D                 db    0
.eh_frame:000000000000591E                 db    0
.eh_frame:000000000000591F                 db    0
.eh_frame:0000000000005920                 db 0D0h
.eh_frame:0000000000005921                 db    3
.eh_frame:0000000000005922                 db    0
.eh_frame:0000000000005923                 db    0
.eh_frame:0000000000005924                 db 0ECh
.eh_frame:0000000000005925                 db 0DBh
.eh_frame:0000000000005926                 db 0FFh
.eh_frame:0000000000005927                 db 0FFh
.eh_frame:0000000000005928                 db 0E3h
.eh_frame:0000000000005929                 db    0
.eh_frame:000000000000592A                 db    0
.eh_frame:000000000000592B                 db    0
.eh_frame:000000000000592C                 db    0
.eh_frame:000000000000592D                 db  42h ; B
.eh_frame:000000000000592E                 db  0Eh
.eh_frame:000000000000592F                 db  10h
.eh_frame:0000000000005930                 db  8Fh
.eh_frame:0000000000005931                 db    2
.eh_frame:0000000000005932                 db  42h ; B
.eh_frame:0000000000005933                 db  0Eh
.eh_frame:0000000000005934                 db  18h
.eh_frame:0000000000005935                 db  8Eh
.eh_frame:0000000000005936                 db    3
.eh_frame:0000000000005937                 db  49h ; I
.eh_frame:0000000000005938                 db  0Eh
.eh_frame:0000000000005939                 db  20h
.eh_frame:000000000000593A                 db  8Dh
.eh_frame:000000000000593B                 db    4
.eh_frame:000000000000593C                 db  42h ; B
.eh_frame:000000000000593D                 db  0Eh
.eh_frame:000000000000593E                 db  28h ; (
.eh_frame:000000000000593F                 db  8Ch
.eh_frame:0000000000005940                 db    5
.eh_frame:0000000000005941                 db  44h ; D
.eh_frame:0000000000005942                 db  0Eh
.eh_frame:0000000000005943                 db  30h ; 0
.eh_frame:0000000000005944                 db  86h
.eh_frame:0000000000005945                 db    6
.eh_frame:0000000000005946                 db  41h ; A
.eh_frame:0000000000005947                 db  0Eh
.eh_frame:0000000000005948                 db  38h ; 8
.eh_frame:0000000000005949                 db  83h
.eh_frame:000000000000594A                 db    7
.eh_frame:000000000000594B                 db  4Dh ; M
.eh_frame:000000000000594C                 db  0Eh
.eh_frame:000000000000594D                 db  70h ; p
.eh_frame:000000000000594E                 db  65h ; e
.eh_frame:000000000000594F                 db  0Eh
.eh_frame:0000000000005950                 db  78h ; x
.eh_frame:0000000000005951                 db  4Dh ; M
.eh_frame:0000000000005952                 db  0Eh
.eh_frame:0000000000005953                 db  80h
.eh_frame:0000000000005954                 db    1
.eh_frame:0000000000005955                 db  46h ; F
.eh_frame:0000000000005956                 db  0Eh
.eh_frame:0000000000005957                 db  88h
.eh_frame:0000000000005958                 db    1
.eh_frame:0000000000005959                 db  42h ; B
.eh_frame:000000000000595A                 db  0Eh
.eh_frame:000000000000595B                 db  90h
.eh_frame:000000000000595C                 db    1
.eh_frame:000000000000595D                 db  5Eh ; ^
.eh_frame:000000000000595E                 db  0Eh
.eh_frame:000000000000595F                 db  70h ; p
.eh_frame:0000000000005960                 db  56h ; V
.eh_frame:0000000000005961                 db  0Eh
.eh_frame:0000000000005962                 db  78h ; x
.eh_frame:0000000000005963                 db  43h ; C
.eh_frame:0000000000005964                 db  0Eh
.eh_frame:0000000000005965                 db  80h
.eh_frame:0000000000005966                 db    1
.eh_frame:0000000000005967                 db  43h ; C
.eh_frame:0000000000005968                 db  0Eh
.eh_frame:0000000000005969                 db  88h
.eh_frame:000000000000596A                 db    1
.eh_frame:000000000000596B                 db  56h ; V
.eh_frame:000000000000596C                 db  0Eh
.eh_frame:000000000000596D                 db  90h
.eh_frame:000000000000596E                 db    1
.eh_frame:000000000000596F                 db  52h ; R
.eh_frame:0000000000005970                 db  0Eh
.eh_frame:0000000000005971                 db  70h ; p
.eh_frame:0000000000005972                 db  5Bh ; [
.eh_frame:0000000000005973                 db  0Eh
.eh_frame:0000000000005974                 db  38h ; 8
.eh_frame:0000000000005975                 db  41h ; A
.eh_frame:0000000000005976                 db  0Eh
.eh_frame:0000000000005977                 db  30h ; 0
.eh_frame:0000000000005978                 db  41h ; A
.eh_frame:0000000000005979                 db  0Eh
.eh_frame:000000000000597A                 db  28h ; (
.eh_frame:000000000000597B                 db  42h ; B
.eh_frame:000000000000597C                 db  0Eh
.eh_frame:000000000000597D                 db  20h
.eh_frame:000000000000597E                 db  42h ; B
.eh_frame:000000000000597F                 db  0Eh
.eh_frame:0000000000005980                 db  18h
.eh_frame:0000000000005981                 db  42h ; B
.eh_frame:0000000000005982                 db  0Eh
.eh_frame:0000000000005983                 db  10h
.eh_frame:0000000000005984                 db  42h ; B
.eh_frame:0000000000005985                 db  0Eh
.eh_frame:0000000000005986                 db    8
.eh_frame:0000000000005987                 db    0
.eh_frame:0000000000005988                 db  10h
.eh_frame:0000000000005989                 db    0
.eh_frame:000000000000598A                 db    0
.eh_frame:000000000000598B                 db    0
.eh_frame:000000000000598C                 db  3Ch ; <
.eh_frame:000000000000598D                 db    4
.eh_frame:000000000000598E                 db    0
.eh_frame:000000000000598F                 db    0
.eh_frame:0000000000005990                 db  70h ; p
.eh_frame:0000000000005991                 db 0DCh
.eh_frame:0000000000005992                 db 0FFh
.eh_frame:0000000000005993                 db 0FFh
.eh_frame:0000000000005994                 db  0Ah
.eh_frame:0000000000005995                 db    0
.eh_frame:0000000000005996                 db    0
.eh_frame:0000000000005997                 db    0
.eh_frame:0000000000005998                 db    0
.eh_frame:0000000000005999                 db    0
.eh_frame:000000000000599A                 db    0
.eh_frame:000000000000599B                 db    0
.eh_frame:000000000000599C                 db  28h ; (
.eh_frame:000000000000599D                 db    0
.eh_frame:000000000000599E                 db    0
.eh_frame:000000000000599F                 db    0
.eh_frame:00000000000059A0                 db  50h ; P
.eh_frame:00000000000059A1                 db    4
.eh_frame:00000000000059A2                 db    0
.eh_frame:00000000000059A3                 db    0
.eh_frame:00000000000059A4                 db  6Ch ; l
.eh_frame:00000000000059A5                 db 0DCh
.eh_frame:00000000000059A6                 db 0FFh
.eh_frame:00000000000059A7                 db 0FFh
.eh_frame:00000000000059A8                 db  93h
.eh_frame:00000000000059A9                 db    0
.eh_frame:00000000000059AA                 db    0
.eh_frame:00000000000059AB                 db    0
.eh_frame:00000000000059AC                 db    0
.eh_frame:00000000000059AD                 db  48h ; H
.eh_frame:00000000000059AE                 db  0Eh
.eh_frame:00000000000059AF                 db  10h
.eh_frame:00000000000059B0                 db  8Ch
.eh_frame:00000000000059B1                 db    2
.eh_frame:00000000000059B2                 db  48h ; H
.eh_frame:00000000000059B3                 db  0Eh
.eh_frame:00000000000059B4                 db  18h
.eh_frame:00000000000059B5                 db  86h
.eh_frame:00000000000059B6                 db    3
.eh_frame:00000000000059B7                 db  41h ; A
.eh_frame:00000000000059B8                 db  0Eh
.eh_frame:00000000000059B9                 db  20h
.eh_frame:00000000000059BA                 db  83h
.eh_frame:00000000000059BB                 db    4
.eh_frame:00000000000059BC                 db    2
.eh_frame:00000000000059BD                 db  74h ; t
.eh_frame:00000000000059BE                 db  0Eh
.eh_frame:00000000000059BF                 db  18h
.eh_frame:00000000000059C0                 db  4Bh ; K
.eh_frame:00000000000059C1                 db  0Eh
.eh_frame:00000000000059C2                 db  10h
.eh_frame:00000000000059C3                 db  42h ; B
.eh_frame:00000000000059C4                 db  0Eh
.eh_frame:00000000000059C5                 db    8
.eh_frame:00000000000059C6                 db    0
.eh_frame:00000000000059C7                 db    0
.eh_frame:00000000000059C8                 db  10h
.eh_frame:00000000000059C9                 db    0
.eh_frame:00000000000059CA                 db    0
.eh_frame:00000000000059CB                 db    0
.eh_frame:00000000000059CC                 db  7Ch ; |
.eh_frame:00000000000059CD                 db    4
.eh_frame:00000000000059CE                 db    0
.eh_frame:00000000000059CF                 db    0
.eh_frame:00000000000059D0                 db 0E0h
.eh_frame:00000000000059D1                 db 0DCh
.eh_frame:00000000000059D2                 db 0FFh
.eh_frame:00000000000059D3                 db 0FFh
.eh_frame:00000000000059D4                 db  13h
.eh_frame:00000000000059D5                 db    0
.eh_frame:00000000000059D6                 db    0
.eh_frame:00000000000059D7                 db    0
.eh_frame:00000000000059D8                 db    0
.eh_frame:00000000000059D9                 db    0
.eh_frame:00000000000059DA                 db    0
.eh_frame:00000000000059DB                 db    0
.eh_frame:00000000000059DC                 db  10h
.eh_frame:00000000000059DD                 db    0
.eh_frame:00000000000059DE                 db    0
.eh_frame:00000000000059DF                 db    0
.eh_frame:00000000000059E0                 db  90h
.eh_frame:00000000000059E1                 db    4
.eh_frame:00000000000059E2                 db    0
.eh_frame:00000000000059E3                 db    0
.eh_frame:00000000000059E4                 db 0ECh
.eh_frame:00000000000059E5                 db 0DCh
.eh_frame:00000000000059E6                 db 0FFh
.eh_frame:00000000000059E7                 db 0FFh
.eh_frame:00000000000059E8                 db  0Ch
.eh_frame:00000000000059E9                 db    0
.eh_frame:00000000000059EA                 db    0
.eh_frame:00000000000059EB                 db    0
.eh_frame:00000000000059EC                 db    0
.eh_frame:00000000000059ED                 db    0
.eh_frame:00000000000059EE                 db    0
.eh_frame:00000000000059EF                 db    0
.eh_frame:00000000000059F0                 db  10h
.eh_frame:00000000000059F1                 db    0
.eh_frame:00000000000059F2                 db    0
.eh_frame:00000000000059F3                 db    0
.eh_frame:00000000000059F4                 db 0A4h
.eh_frame:00000000000059F5                 db    4
.eh_frame:00000000000059F6                 db    0
.eh_frame:00000000000059F7                 db    0
.eh_frame:00000000000059F8                 db 0E8h
.eh_frame:00000000000059F9                 db 0DCh
.eh_frame:00000000000059FA                 db 0FFh
.eh_frame:00000000000059FB                 db 0FFh
.eh_frame:00000000000059FC                 db  18h
.eh_frame:00000000000059FD                 db    0
.eh_frame:00000000000059FE                 db    0
.eh_frame:00000000000059FF                 db    0
.eh_frame:0000000000005A00                 db    0
.eh_frame:0000000000005A01                 db    0
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db  10h
.eh_frame:0000000000005A05                 db    0
.eh_frame:0000000000005A06                 db    0
.eh_frame:0000000000005A07                 db    0
.eh_frame:0000000000005A08                 db 0B8h
.eh_frame:0000000000005A09                 db    4
.eh_frame:0000000000005A0A                 db    0
.eh_frame:0000000000005A0B                 db    0
.eh_frame:0000000000005A0C                 db 0F4h
.eh_frame:0000000000005A0D                 db 0DCh
.eh_frame:0000000000005A0E                 db 0FFh
.eh_frame:0000000000005A0F                 db 0FFh
.eh_frame:0000000000005A10                 db  14h
.eh_frame:0000000000005A11                 db    0
.eh_frame:0000000000005A12                 db    0
.eh_frame:0000000000005A13                 db    0
.eh_frame:0000000000005A14                 db    0
.eh_frame:0000000000005A15                 db    0
.eh_frame:0000000000005A16                 db    0
.eh_frame:0000000000005A17                 db    0
.eh_frame:0000000000005A18                 db  18h
.eh_frame:0000000000005A19                 db    0
.eh_frame:0000000000005A1A                 db    0
.eh_frame:0000000000005A1B                 db    0
.eh_frame:0000000000005A1C                 db 0CCh
.eh_frame:0000000000005A1D                 db    4
.eh_frame:0000000000005A1E                 db    0
.eh_frame:0000000000005A1F                 db    0
.eh_frame:0000000000005A20                 db    0
.eh_frame:0000000000005A21                 db 0DDh
.eh_frame:0000000000005A22                 db 0FFh
.eh_frame:0000000000005A23                 db 0FFh
.eh_frame:0000000000005A24                 db  8Eh
.eh_frame:0000000000005A25                 db    0
.eh_frame:0000000000005A26                 db    0
.eh_frame:0000000000005A27                 db    0
.eh_frame:0000000000005A28                 db    0
.eh_frame:0000000000005A29                 db  44h ; D
.eh_frame:0000000000005A2A                 db  0Eh
.eh_frame:0000000000005A2B                 db  50h ; P
.eh_frame:0000000000005A2C                 db    2
.eh_frame:0000000000005A2D                 db  7Fh ; 
.eh_frame:0000000000005A2E                 db  0Ah
.eh_frame:0000000000005A2F                 db  0Eh
.eh_frame:0000000000005A30                 db    8
.eh_frame:0000000000005A31                 db  41h ; A
.eh_frame:0000000000005A32                 db  0Bh
.eh_frame:0000000000005A33                 db    0
.eh_frame:0000000000005A34                 db  18h
.eh_frame:0000000000005A35                 db    0
.eh_frame:0000000000005A36                 db    0
.eh_frame:0000000000005A37                 db    0
.eh_frame:0000000000005A38                 db 0E8h
.eh_frame:0000000000005A39                 db    4
.eh_frame:0000000000005A3A                 db    0
.eh_frame:0000000000005A3B                 db    0
.eh_frame:0000000000005A3C                 db  74h ; t
.eh_frame:0000000000005A3D                 db 0DDh
.eh_frame:0000000000005A3E                 db 0FFh
.eh_frame:0000000000005A3F                 db 0FFh
.eh_frame:0000000000005A40                 db  8Ah
.eh_frame:0000000000005A41                 db    0
.eh_frame:0000000000005A42                 db    0
.eh_frame:0000000000005A43                 db    0
.eh_frame:0000000000005A44                 db    0
.eh_frame:0000000000005A45                 db  44h ; D
.eh_frame:0000000000005A46                 db  0Eh
.eh_frame:0000000000005A47                 db  50h ; P
.eh_frame:0000000000005A48                 db    2
.eh_frame:0000000000005A49                 db  7Bh ; {
.eh_frame:0000000000005A4A                 db  0Ah
.eh_frame:0000000000005A4B                 db  0Eh
.eh_frame:0000000000005A4C                 db    8
.eh_frame:0000000000005A4D                 db  41h ; A
.eh_frame:0000000000005A4E                 db  0Bh
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db  10h
.eh_frame:0000000000005A51                 db    0
.eh_frame:0000000000005A52                 db    0
.eh_frame:0000000000005A53                 db    0
.eh_frame:0000000000005A54                 db    4
.eh_frame:0000000000005A55                 db    5
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db 0E8h
.eh_frame:0000000000005A59                 db 0DDh
.eh_frame:0000000000005A5A                 db 0FFh
.eh_frame:0000000000005A5B                 db 0FFh
.eh_frame:0000000000005A5C                 db  0Ch
.eh_frame:0000000000005A5D                 db    0
.eh_frame:0000000000005A5E                 db    0
.eh_frame:0000000000005A5F                 db    0
.eh_frame:0000000000005A60                 db    0
.eh_frame:0000000000005A61                 db    0
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db  10h
.eh_frame:0000000000005A65                 db    0
.eh_frame:0000000000005A66                 db    0
.eh_frame:0000000000005A67                 db    0
.eh_frame:0000000000005A68                 db  18h
.eh_frame:0000000000005A69                 db    5
.eh_frame:0000000000005A6A                 db    0
.eh_frame:0000000000005A6B                 db    0
.eh_frame:0000000000005A6C                 db 0E4h
.eh_frame:0000000000005A6D                 db 0DDh
.eh_frame:0000000000005A6E                 db 0FFh
.eh_frame:0000000000005A6F                 db 0FFh
.eh_frame:0000000000005A70                 db  0Fh
.eh_frame:0000000000005A71                 db    0
.eh_frame:0000000000005A72                 db    0
.eh_frame:0000000000005A73                 db    0
.eh_frame:0000000000005A74                 db    0
.eh_frame:0000000000005A75                 db    0
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db  18h
.eh_frame:0000000000005A79                 db    0
.eh_frame:0000000000005A7A                 db    0
.eh_frame:0000000000005A7B                 db    0
.eh_frame:0000000000005A7C                 db  2Ch ; ,
.eh_frame:0000000000005A7D                 db    5
.eh_frame:0000000000005A7E                 db    0
.eh_frame:0000000000005A7F                 db    0
.eh_frame:0000000000005A80                 db 0E0h
.eh_frame:0000000000005A81                 db 0DDh
.eh_frame:0000000000005A82                 db 0FFh
.eh_frame:0000000000005A83                 db 0FFh
.eh_frame:0000000000005A84                 db  98h
.eh_frame:0000000000005A85                 db    0
.eh_frame:0000000000005A86                 db    0
.eh_frame:0000000000005A87                 db    0
.eh_frame:0000000000005A88                 db    0
.eh_frame:0000000000005A89                 db  44h ; D
.eh_frame:0000000000005A8A                 db  0Eh
.eh_frame:0000000000005A8B                 db  50h ; P
.eh_frame:0000000000005A8C                 db    2
.eh_frame:0000000000005A8D                 db  8Eh
.eh_frame:0000000000005A8E                 db  0Ah
.eh_frame:0000000000005A8F                 db  0Eh
.eh_frame:0000000000005A90                 db    8
.eh_frame:0000000000005A91                 db  41h ; A
.eh_frame:0000000000005A92                 db  0Bh
.eh_frame:0000000000005A93                 db    0
.eh_frame:0000000000005A94                 db  10h
.eh_frame:0000000000005A95                 db    0
.eh_frame:0000000000005A96                 db    0
.eh_frame:0000000000005A97                 db    0
.eh_frame:0000000000005A98                 db  48h ; H
.eh_frame:0000000000005A99                 db    5
.eh_frame:0000000000005A9A                 db    0
.eh_frame:0000000000005A9B                 db    0
.eh_frame:0000000000005A9C                 db  64h ; d
.eh_frame:0000000000005A9D                 db 0DEh
.eh_frame:0000000000005A9E                 db 0FFh
.eh_frame:0000000000005A9F                 db 0FFh
.eh_frame:0000000000005AA0                 db  10h
.eh_frame:0000000000005AA1                 db    0
.eh_frame:0000000000005AA2                 db    0
.eh_frame:0000000000005AA3                 db    0
.eh_frame:0000000000005AA4                 db    0
.eh_frame:0000000000005AA5                 db    0
.eh_frame:0000000000005AA6                 db    0
.eh_frame:0000000000005AA7                 db    0
.eh_frame:0000000000005AA8                 db  10h
.eh_frame:0000000000005AA9                 db    0
.eh_frame:0000000000005AAA                 db    0
.eh_frame:0000000000005AAB                 db    0
.eh_frame:0000000000005AAC                 db  5Ch ; \
.eh_frame:0000000000005AAD                 db    5
.eh_frame:0000000000005AAE                 db    0
.eh_frame:0000000000005AAF                 db    0
.eh_frame:0000000000005AB0                 db  60h ; `
.eh_frame:0000000000005AB1                 db 0DEh
.eh_frame:0000000000005AB2                 db 0FFh
.eh_frame:0000000000005AB3                 db 0FFh
.eh_frame:0000000000005AB4                 db  11h
.eh_frame:0000000000005AB5                 db    0
.eh_frame:0000000000005AB6                 db    0
.eh_frame:0000000000005AB7                 db    0
.eh_frame:0000000000005AB8                 db    0
.eh_frame:0000000000005AB9                 db    0
.eh_frame:0000000000005ABA                 db    0
.eh_frame:0000000000005ABB                 db    0
.eh_frame:0000000000005ABC                 db  10h
.eh_frame:0000000000005ABD                 db    0
.eh_frame:0000000000005ABE                 db    0
.eh_frame:0000000000005ABF                 db    0
.eh_frame:0000000000005AC0                 db  70h ; p
.eh_frame:0000000000005AC1                 db    5
.eh_frame:0000000000005AC2                 db    0
.eh_frame:0000000000005AC3                 db    0
.eh_frame:0000000000005AC4                 db  6Ch ; l
.eh_frame:0000000000005AC5                 db 0DEh
.eh_frame:0000000000005AC6                 db 0FFh
.eh_frame:0000000000005AC7                 db 0FFh
.eh_frame:0000000000005AC8                 db  0Ah
.eh_frame:0000000000005AC9                 db    0
.eh_frame:0000000000005ACA                 db    0
.eh_frame:0000000000005ACB                 db    0
.eh_frame:0000000000005ACC                 db    0
.eh_frame:0000000000005ACD                 db    0
.eh_frame:0000000000005ACE                 db    0
.eh_frame:0000000000005ACF                 db    0
.eh_frame:0000000000005AD0                 db  18h
.eh_frame:0000000000005AD1                 db    0
.eh_frame:0000000000005AD2                 db    0
.eh_frame:0000000000005AD3                 db    0
.eh_frame:0000000000005AD4                 db  84h
.eh_frame:0000000000005AD5                 db    5
.eh_frame:0000000000005AD6                 db    0
.eh_frame:0000000000005AD7                 db    0
.eh_frame:0000000000005AD8                 db  68h ; h
.eh_frame:0000000000005AD9                 db 0DEh
.eh_frame:0000000000005ADA                 db 0FFh
.eh_frame:0000000000005ADB                 db 0FFh
.eh_frame:0000000000005ADC                 db  8Eh
.eh_frame:0000000000005ADD                 db    0
.eh_frame:0000000000005ADE                 db    0
.eh_frame:0000000000005ADF                 db    0
.eh_frame:0000000000005AE0                 db    0
.eh_frame:0000000000005AE1                 db  44h ; D
.eh_frame:0000000000005AE2                 db  0Eh
.eh_frame:0000000000005AE3                 db  50h ; P
.eh_frame:0000000000005AE4                 db    2
.eh_frame:0000000000005AE5                 db  7Fh ; 
.eh_frame:0000000000005AE6                 db  0Ah
.eh_frame:0000000000005AE7                 db  0Eh
.eh_frame:0000000000005AE8                 db    8
.eh_frame:0000000000005AE9                 db  41h ; A
.eh_frame:0000000000005AEA                 db  0Bh
.eh_frame:0000000000005AEB                 db    0
.eh_frame:0000000000005AEC                 db  18h
.eh_frame:0000000000005AED                 db    0
.eh_frame:0000000000005AEE                 db    0
.eh_frame:0000000000005AEF                 db    0
.eh_frame:0000000000005AF0                 db 0A0h
.eh_frame:0000000000005AF1                 db    5
.eh_frame:0000000000005AF2                 db    0
.eh_frame:0000000000005AF3                 db    0
.eh_frame:0000000000005AF4                 db 0DCh
.eh_frame:0000000000005AF5                 db 0DEh
.eh_frame:0000000000005AF6                 db 0FFh
.eh_frame:0000000000005AF7                 db 0FFh
.eh_frame:0000000000005AF8                 db  91h
.eh_frame:0000000000005AF9                 db    0
.eh_frame:0000000000005AFA                 db    0
.eh_frame:0000000000005AFB                 db    0
.eh_frame:0000000000005AFC                 db    0
.eh_frame:0000000000005AFD                 db  44h ; D
.eh_frame:0000000000005AFE                 db  0Eh
.eh_frame:0000000000005AFF                 db  50h ; P
.eh_frame:0000000000005B00                 db    2
.eh_frame:0000000000005B01                 db  82h
.eh_frame:0000000000005B02                 db  0Ah
.eh_frame:0000000000005B03                 db  0Eh
.eh_frame:0000000000005B04                 db    8
.eh_frame:0000000000005B05                 db  41h ; A
.eh_frame:0000000000005B06                 db  0Bh
.eh_frame:0000000000005B07                 db    0
.eh_frame:0000000000005B08                 db  10h
.eh_frame:0000000000005B09                 db    0
.eh_frame:0000000000005B0A                 db    0
.eh_frame:0000000000005B0B                 db    0
.eh_frame:0000000000005B0C                 db 0BCh
.eh_frame:0000000000005B0D                 db    5
.eh_frame:0000000000005B0E                 db    0
.eh_frame:0000000000005B0F                 db    0
.eh_frame:0000000000005B10                 db  60h ; `
.eh_frame:0000000000005B11                 db 0DFh
.eh_frame:0000000000005B12                 db 0FFh
.eh_frame:0000000000005B13                 db 0FFh
.eh_frame:0000000000005B14                 db  0Ch
.eh_frame:0000000000005B15                 db    0
.eh_frame:0000000000005B16                 db    0
.eh_frame:0000000000005B17                 db    0
.eh_frame:0000000000005B18                 db    0
.eh_frame:0000000000005B19                 db    0
.eh_frame:0000000000005B1A                 db    0
.eh_frame:0000000000005B1B                 db    0
.eh_frame:0000000000005B1C                 db  10h
.eh_frame:0000000000005B1D                 db    0
.eh_frame:0000000000005B1E                 db    0
.eh_frame:0000000000005B1F                 db    0
.eh_frame:0000000000005B20                 db 0D0h
.eh_frame:0000000000005B21                 db    5
.eh_frame:0000000000005B22                 db    0
.eh_frame:0000000000005B23                 db    0
.eh_frame:0000000000005B24                 db  5Ch ; \
.eh_frame:0000000000005B25                 db 0DFh
.eh_frame:0000000000005B26                 db 0FFh
.eh_frame:0000000000005B27                 db 0FFh
.eh_frame:0000000000005B28                 db  17h
.eh_frame:0000000000005B29                 db    0
.eh_frame:0000000000005B2A                 db    0
.eh_frame:0000000000005B2B                 db    0
.eh_frame:0000000000005B2C                 db    0
.eh_frame:0000000000005B2D                 db    0
.eh_frame:0000000000005B2E                 db    0
.eh_frame:0000000000005B2F                 db    0
.eh_frame:0000000000005B30                 db  10h
.eh_frame:0000000000005B31                 db    0
.eh_frame:0000000000005B32                 db    0
.eh_frame:0000000000005B33                 db    0
.eh_frame:0000000000005B34                 db 0E4h
.eh_frame:0000000000005B35                 db    5
.eh_frame:0000000000005B36                 db    0
.eh_frame:0000000000005B37                 db    0
.eh_frame:0000000000005B38                 db  68h ; h
.eh_frame:0000000000005B39                 db 0DFh
.eh_frame:0000000000005B3A                 db 0FFh
.eh_frame:0000000000005B3B                 db 0FFh
.eh_frame:0000000000005B3C                 db  13h
.eh_frame:0000000000005B3D                 db    0
.eh_frame:0000000000005B3E                 db    0
.eh_frame:0000000000005B3F                 db    0
.eh_frame:0000000000005B40                 db    0
.eh_frame:0000000000005B41                 db    0
.eh_frame:0000000000005B42                 db    0
.eh_frame:0000000000005B43                 db    0
.eh_frame:0000000000005B44                 db  10h
.eh_frame:0000000000005B45                 db    0
.eh_frame:0000000000005B46                 db    0
.eh_frame:0000000000005B47                 db    0
.eh_frame:0000000000005B48                 db 0F8h
.eh_frame:0000000000005B49                 db    5
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db  74h ; t
.eh_frame:0000000000005B4D                 db 0DFh
.eh_frame:0000000000005B4E                 db 0FFh
.eh_frame:0000000000005B4F                 db 0FFh
.eh_frame:0000000000005B50                 db  0Ch
.eh_frame:0000000000005B51                 db    0
.eh_frame:0000000000005B52                 db    0
.eh_frame:0000000000005B53                 db    0
.eh_frame:0000000000005B54                 db    0
.eh_frame:0000000000005B55                 db    0
.eh_frame:0000000000005B56                 db    0
.eh_frame:0000000000005B57                 db    0
.eh_frame:0000000000005B58                 db  10h
.eh_frame:0000000000005B59                 db    0
.eh_frame:0000000000005B5A                 db    0
.eh_frame:0000000000005B5B                 db    0
.eh_frame:0000000000005B5C                 db  0Ch
.eh_frame:0000000000005B5D                 db    6
.eh_frame:0000000000005B5E                 db    0
.eh_frame:0000000000005B5F                 db    0
.eh_frame:0000000000005B60                 db  70h ; p
.eh_frame:0000000000005B61                 db 0DFh
.eh_frame:0000000000005B62                 db 0FFh
.eh_frame:0000000000005B63                 db 0FFh
.eh_frame:0000000000005B64                 db  14h
.eh_frame:0000000000005B65                 db    0
.eh_frame:0000000000005B66                 db    0
.eh_frame:0000000000005B67                 db    0
.eh_frame:0000000000005B68                 db    0
.eh_frame:0000000000005B69                 db    0
.eh_frame:0000000000005B6A                 db    0
.eh_frame:0000000000005B6B                 db    0
.eh_frame:0000000000005B6C                 db  10h
.eh_frame:0000000000005B6D                 db    0
.eh_frame:0000000000005B6E                 db    0
.eh_frame:0000000000005B6F                 db    0
.eh_frame:0000000000005B70                 db  20h
.eh_frame:0000000000005B71                 db    6
.eh_frame:0000000000005B72                 db    0
.eh_frame:0000000000005B73                 db    0
.eh_frame:0000000000005B74                 db  7Ch ; |
.eh_frame:0000000000005B75                 db 0DFh
.eh_frame:0000000000005B76                 db 0FFh
.eh_frame:0000000000005B77                 db 0FFh
.eh_frame:0000000000005B78                 db  13h
.eh_frame:0000000000005B79                 db    0
.eh_frame:0000000000005B7A                 db    0
.eh_frame:0000000000005B7B                 db    0
.eh_frame:0000000000005B7C                 db    0
.eh_frame:0000000000005B7D                 db    0
.eh_frame:0000000000005B7E                 db    0
.eh_frame:0000000000005B7F                 db    0
.eh_frame:0000000000005B80                 db  14h
.eh_frame:0000000000005B81                 db    0
.eh_frame:0000000000005B82                 db    0
.eh_frame:0000000000005B83                 db    0
.eh_frame:0000000000005B84                 db  34h ; 4
.eh_frame:0000000000005B85                 db    6
.eh_frame:0000000000005B86                 db    0
.eh_frame:0000000000005B87                 db    0
.eh_frame:0000000000005B88                 db  88h
.eh_frame:0000000000005B89                 db 0DFh
.eh_frame:0000000000005B8A                 db 0FFh
.eh_frame:0000000000005B8B                 db 0FFh
.eh_frame:0000000000005B8C                 db  18h
.eh_frame:0000000000005B8D                 db    0
.eh_frame:0000000000005B8E                 db    0
.eh_frame:0000000000005B8F                 db    0
.eh_frame:0000000000005B90                 db    0
.eh_frame:0000000000005B91                 db    0
.eh_frame:0000000000005B92                 db    0
.eh_frame:0000000000005B93                 db    0
.eh_frame:0000000000005B94                 db    0
.eh_frame:0000000000005B95                 db    0
.eh_frame:0000000000005B96                 db    0
.eh_frame:0000000000005B97                 db    0
.eh_frame:0000000000005B98                 db  10h
.eh_frame:0000000000005B99                 db    1
.eh_frame:0000000000005B9A                 db    0
.eh_frame:0000000000005B9B                 db    0
.eh_frame:0000000000005B9C                 db  4Ch ; L
.eh_frame:0000000000005B9D                 db    6
.eh_frame:0000000000005B9E                 db    0
.eh_frame:0000000000005B9F                 db    0
.eh_frame:0000000000005BA0                 db  90h
.eh_frame:0000000000005BA1                 db 0DFh
.eh_frame:0000000000005BA2                 db 0FFh
.eh_frame:0000000000005BA3                 db 0FFh
.eh_frame:0000000000005BA4                 db  17h
.eh_frame:0000000000005BA5                 db    4
.eh_frame:0000000000005BA6                 db    0
.eh_frame:0000000000005BA7                 db    0
.eh_frame:0000000000005BA8                 db    0
.eh_frame:0000000000005BA9                 db  42h ; B
.eh_frame:0000000000005BAA                 db  0Eh
.eh_frame:0000000000005BAB                 db  10h
.eh_frame:0000000000005BAC                 db  8Fh
.eh_frame:0000000000005BAD                 db    2
.eh_frame:0000000000005BAE                 db  42h ; B
.eh_frame:0000000000005BAF                 db  0Eh
.eh_frame:0000000000005BB0                 db  18h
.eh_frame:0000000000005BB1                 db  8Eh
.eh_frame:0000000000005BB2                 db    3
.eh_frame:0000000000005BB3                 db  42h ; B
.eh_frame:0000000000005BB4                 db  0Eh
.eh_frame:0000000000005BB5                 db  20h
.eh_frame:0000000000005BB6                 db  8Dh
.eh_frame:0000000000005BB7                 db    4
.eh_frame:0000000000005BB8                 db  42h ; B
.eh_frame:0000000000005BB9                 db  0Eh
.eh_frame:0000000000005BBA                 db  28h ; (
.eh_frame:0000000000005BBB                 db  8Ch
.eh_frame:0000000000005BBC                 db    5
.eh_frame:0000000000005BBD                 db  44h ; D
.eh_frame:0000000000005BBE                 db  0Eh
.eh_frame:0000000000005BBF                 db  30h ; 0
.eh_frame:0000000000005BC0                 db  86h
.eh_frame:0000000000005BC1                 db    6
.eh_frame:0000000000005BC2                 db  41h ; A
.eh_frame:0000000000005BC3                 db  0Eh
.eh_frame:0000000000005BC4                 db  38h ; 8
.eh_frame:0000000000005BC5                 db  83h
.eh_frame:0000000000005BC6                 db    7
.eh_frame:0000000000005BC7                 db  4Ah ; J
.eh_frame:0000000000005BC8                 db  0Eh
.eh_frame:0000000000005BC9                 db  60h ; `
.eh_frame:0000000000005BCA                 db    2
.eh_frame:0000000000005BCB                 db 0DDh
.eh_frame:0000000000005BCC                 db  0Eh
.eh_frame:0000000000005BCD                 db  68h ; h
.eh_frame:0000000000005BCE                 db  57h ; W
.eh_frame:0000000000005BCF                 db  0Eh
.eh_frame:0000000000005BD0                 db  70h ; p
.eh_frame:0000000000005BD1                 db  42h ; B
.eh_frame:0000000000005BD2                 db  0Eh
.eh_frame:0000000000005BD3                 db  78h ; x
.eh_frame:0000000000005BD4                 db  42h ; B
.eh_frame:0000000000005BD5                 db  0Eh
.eh_frame:0000000000005BD6                 db  80h
.eh_frame:0000000000005BD7                 db    1
.eh_frame:0000000000005BD8                 db  42h ; B
.eh_frame:0000000000005BD9                 db  0Eh
.eh_frame:0000000000005BDA                 db  88h
.eh_frame:0000000000005BDB                 db    1
.eh_frame:0000000000005BDC                 db  42h ; B
.eh_frame:0000000000005BDD                 db  0Eh
.eh_frame:0000000000005BDE                 db  90h
.eh_frame:0000000000005BDF                 db    1
.eh_frame:0000000000005BE0                 db  53h ; S
.eh_frame:0000000000005BE1                 db  0Eh
.eh_frame:0000000000005BE2                 db  60h ; `
.eh_frame:0000000000005BE3                 db  44h ; D
.eh_frame:0000000000005BE4                 db  0Ah
.eh_frame:0000000000005BE5                 db  0Eh
.eh_frame:0000000000005BE6                 db  38h ; 8
.eh_frame:0000000000005BE7                 db  41h ; A
.eh_frame:0000000000005BE8                 db  0Eh
.eh_frame:0000000000005BE9                 db  30h ; 0
.eh_frame:0000000000005BEA                 db  41h ; A
.eh_frame:0000000000005BEB                 db  0Eh
.eh_frame:0000000000005BEC                 db  28h ; (
.eh_frame:0000000000005BED                 db  42h ; B
.eh_frame:0000000000005BEE                 db  0Eh
.eh_frame:0000000000005BEF                 db  20h
.eh_frame:0000000000005BF0                 db  42h ; B
.eh_frame:0000000000005BF1                 db  0Eh
.eh_frame:0000000000005BF2                 db  18h
.eh_frame:0000000000005BF3                 db  42h ; B
.eh_frame:0000000000005BF4                 db  0Eh
.eh_frame:0000000000005BF5                 db  10h
.eh_frame:0000000000005BF6                 db  42h ; B
.eh_frame:0000000000005BF7                 db  0Eh
.eh_frame:0000000000005BF8                 db    8
.eh_frame:0000000000005BF9                 db  44h ; D
.eh_frame:0000000000005BFA                 db  0Bh
.eh_frame:0000000000005BFB                 db    2
.eh_frame:0000000000005BFC                 db  78h ; x
.eh_frame:0000000000005BFD                 db  0Ah
.eh_frame:0000000000005BFE                 db  0Eh
.eh_frame:0000000000005BFF                 db  68h ; h
.eh_frame:0000000000005C00                 db  48h ; H
.eh_frame:0000000000005C01                 db  0Bh
.eh_frame:0000000000005C02                 db  5Ah ; Z
.eh_frame:0000000000005C03                 db  0Ah
.eh_frame:0000000000005C04                 db  0Eh
.eh_frame:0000000000005C05                 db  38h ; 8
.eh_frame:0000000000005C06                 db  47h ; G
.eh_frame:0000000000005C07                 db  0Eh
.eh_frame:0000000000005C08                 db  30h ; 0
.eh_frame:0000000000005C09                 db  41h ; A
.eh_frame:0000000000005C0A                 db  0Eh
.eh_frame:0000000000005C0B                 db  28h ; (
.eh_frame:0000000000005C0C                 db  42h ; B
.eh_frame:0000000000005C0D                 db  0Eh
.eh_frame:0000000000005C0E                 db  20h
.eh_frame:0000000000005C0F                 db  42h ; B
.eh_frame:0000000000005C10                 db  0Eh
.eh_frame:0000000000005C11                 db  18h
.eh_frame:0000000000005C12                 db  42h ; B
.eh_frame:0000000000005C13                 db  0Eh
.eh_frame:0000000000005C14                 db  10h
.eh_frame:0000000000005C15                 db  42h ; B
.eh_frame:0000000000005C16                 db  0Eh
.eh_frame:0000000000005C17                 db    8
.eh_frame:0000000000005C18                 db  56h ; V
.eh_frame:0000000000005C19                 db  0Bh
.eh_frame:0000000000005C1A                 db  5Eh ; ^
.eh_frame:0000000000005C1B                 db  0Ah
.eh_frame:0000000000005C1C                 db  0Eh
.eh_frame:0000000000005C1D                 db  38h ; 8
.eh_frame:0000000000005C1E                 db  52h ; R
.eh_frame:0000000000005C1F                 db  0Eh
.eh_frame:0000000000005C20                 db  30h ; 0
.eh_frame:0000000000005C21                 db  41h ; A
.eh_frame:0000000000005C22                 db  0Eh
.eh_frame:0000000000005C23                 db  28h ; (
.eh_frame:0000000000005C24                 db  42h ; B
.eh_frame:0000000000005C25                 db  0Eh
.eh_frame:0000000000005C26                 db  20h
.eh_frame:0000000000005C27                 db  42h ; B
.eh_frame:0000000000005C28                 db  0Eh
.eh_frame:0000000000005C29                 db  18h
.eh_frame:0000000000005C2A                 db  42h ; B
.eh_frame:0000000000005C2B                 db  0Eh
.eh_frame:0000000000005C2C                 db  10h
.eh_frame:0000000000005C2D                 db  42h ; B
.eh_frame:0000000000005C2E                 db  0Eh
.eh_frame:0000000000005C2F                 db    8
.eh_frame:0000000000005C30                 db  4Fh ; O
.eh_frame:0000000000005C31                 db  0Bh
.eh_frame:0000000000005C32                 db  62h ; b
.eh_frame:0000000000005C33                 db  0Ah
.eh_frame:0000000000005C34                 db  0Eh
.eh_frame:0000000000005C35                 db  38h ; 8
.eh_frame:0000000000005C36                 db  50h ; P
.eh_frame:0000000000005C37                 db  0Eh
.eh_frame:0000000000005C38                 db  30h ; 0
.eh_frame:0000000000005C39                 db  41h ; A
.eh_frame:0000000000005C3A                 db  0Eh
.eh_frame:0000000000005C3B                 db  28h ; (
.eh_frame:0000000000005C3C                 db  42h ; B
.eh_frame:0000000000005C3D                 db  0Eh
.eh_frame:0000000000005C3E                 db  20h
.eh_frame:0000000000005C3F                 db  42h ; B
.eh_frame:0000000000005C40                 db  0Eh
.eh_frame:0000000000005C41                 db  18h
.eh_frame:0000000000005C42                 db  42h ; B
.eh_frame:0000000000005C43                 db  0Eh
.eh_frame:0000000000005C44                 db  10h
.eh_frame:0000000000005C45                 db  42h ; B
.eh_frame:0000000000005C46                 db  0Eh
.eh_frame:0000000000005C47                 db    8
.eh_frame:0000000000005C48                 db  55h ; U
.eh_frame:0000000000005C49                 db  0Bh
.eh_frame:0000000000005C4A                 db  66h ; f
.eh_frame:0000000000005C4B                 db  0Eh
.eh_frame:0000000000005C4C                 db  68h ; h
.eh_frame:0000000000005C4D                 db  42h ; B
.eh_frame:0000000000005C4E                 db  0Eh
.eh_frame:0000000000005C4F                 db  70h ; p
.eh_frame:0000000000005C50                 db  5Ch ; \
.eh_frame:0000000000005C51                 db  0Eh
.eh_frame:0000000000005C52                 db  68h ; h
.eh_frame:0000000000005C53                 db  41h ; A
.eh_frame:0000000000005C54                 db  0Eh
.eh_frame:0000000000005C55                 db  60h ; `
.eh_frame:0000000000005C56                 db  44h ; D
.eh_frame:0000000000005C57                 db  0Ah
.eh_frame:0000000000005C58                 db  0Eh
.eh_frame:0000000000005C59                 db  38h ; 8
.eh_frame:0000000000005C5A                 db  41h ; A
.eh_frame:0000000000005C5B                 db  0Eh
.eh_frame:0000000000005C5C                 db  30h ; 0
.eh_frame:0000000000005C5D                 db  41h ; A
.eh_frame:0000000000005C5E                 db  0Eh
.eh_frame:0000000000005C5F                 db  28h ; (
.eh_frame:0000000000005C60                 db  42h ; B
.eh_frame:0000000000005C61                 db  0Eh
.eh_frame:0000000000005C62                 db  20h
.eh_frame:0000000000005C63                 db  42h ; B
.eh_frame:0000000000005C64                 db  0Eh
.eh_frame:0000000000005C65                 db  18h
.eh_frame:0000000000005C66                 db  42h ; B
.eh_frame:0000000000005C67                 db  0Eh
.eh_frame:0000000000005C68                 db  10h
.eh_frame:0000000000005C69                 db  42h ; B
.eh_frame:0000000000005C6A                 db  0Eh
.eh_frame:0000000000005C6B                 db    8
.eh_frame:0000000000005C6C                 db  45h ; E
.eh_frame:0000000000005C6D                 db  0Bh
.eh_frame:0000000000005C6E                 db  68h ; h
.eh_frame:0000000000005C6F                 db  0Ah
.eh_frame:0000000000005C70                 db  0Eh
.eh_frame:0000000000005C71                 db  68h ; h
.eh_frame:0000000000005C72                 db  48h ; H
.eh_frame:0000000000005C73                 db  0Bh
.eh_frame:0000000000005C74                 db  72h ; r
.eh_frame:0000000000005C75                 db  0Eh
.eh_frame:0000000000005C76                 db  68h ; h
.eh_frame:0000000000005C77                 db  45h ; E
.eh_frame:0000000000005C78                 db  0Eh
.eh_frame:0000000000005C79                 db  70h ; p
.eh_frame:0000000000005C7A                 db  42h ; B
.eh_frame:0000000000005C7B                 db  0Eh
.eh_frame:0000000000005C7C                 db  78h ; x
.eh_frame:0000000000005C7D                 db  42h ; B
.eh_frame:0000000000005C7E                 db  0Eh
.eh_frame:0000000000005C7F                 db  80h
.eh_frame:0000000000005C80                 db    1
.eh_frame:0000000000005C81                 db  5Eh ; ^
.eh_frame:0000000000005C82                 db  0Eh
.eh_frame:0000000000005C83                 db  60h ; `
.eh_frame:0000000000005C84                 db  44h ; D
.eh_frame:0000000000005C85                 db  0Ah
.eh_frame:0000000000005C86                 db  0Eh
.eh_frame:0000000000005C87                 db  38h ; 8
.eh_frame:0000000000005C88                 db  41h ; A
.eh_frame:0000000000005C89                 db  0Eh
.eh_frame:0000000000005C8A                 db  30h ; 0
.eh_frame:0000000000005C8B                 db  41h ; A
.eh_frame:0000000000005C8C                 db  0Eh
.eh_frame:0000000000005C8D                 db  28h ; (
.eh_frame:0000000000005C8E                 db  42h ; B
.eh_frame:0000000000005C8F                 db  0Eh
.eh_frame:0000000000005C90                 db  20h
.eh_frame:0000000000005C91                 db  42h ; B
.eh_frame:0000000000005C92                 db  0Eh
.eh_frame:0000000000005C93                 db  18h
.eh_frame:0000000000005C94                 db  42h ; B
.eh_frame:0000000000005C95                 db  0Eh
.eh_frame:0000000000005C96                 db  10h
.eh_frame:0000000000005C97                 db  42h ; B
.eh_frame:0000000000005C98                 db  0Eh
.eh_frame:0000000000005C99                 db    8
.eh_frame:0000000000005C9A                 db  41h ; A
.eh_frame:0000000000005C9B                 db  0Bh
.eh_frame:0000000000005C9C                 db  79h ; y
.eh_frame:0000000000005C9D                 db  0Ah
.eh_frame:0000000000005C9E                 db  0Eh
.eh_frame:0000000000005C9F                 db  68h ; h
.eh_frame:0000000000005CA0                 db  42h ; B
.eh_frame:0000000000005CA1                 db  0Eh
.eh_frame:0000000000005CA2                 db  70h ; p
.eh_frame:0000000000005CA3                 db  42h ; B
.eh_frame:0000000000005CA4                 db  0Eh
.eh_frame:0000000000005CA5                 db  78h ; x
.eh_frame:0000000000005CA6                 db  42h ; B
.eh_frame:0000000000005CA7                 db  0Eh
.eh_frame:0000000000005CA8                 db  80h
.eh_frame:0000000000005CA9                 db    1
.eh_frame:0000000000005CAA                 db  51h ; Q
.eh_frame:0000000000005CAB                 db  0Bh
.eh_frame:0000000000005CAC                 db  10h
.eh_frame:0000000000005CAD                 db    0
.eh_frame:0000000000005CAE                 db    0
.eh_frame:0000000000005CAF                 db    0
.eh_frame:0000000000005CB0                 db  60h ; `
.eh_frame:0000000000005CB1                 db    7
.eh_frame:0000000000005CB2                 db    0
.eh_frame:0000000000005CB3                 db    0
.eh_frame:0000000000005CB4                 db  9Ch
.eh_frame:0000000000005CB5                 db 0E2h
.eh_frame:0000000000005CB6                 db 0FFh
.eh_frame:0000000000005CB7                 db 0FFh
.eh_frame:0000000000005CB8                 db  20h
.eh_frame:0000000000005CB9                 db    0
.eh_frame:0000000000005CBA                 db    0
.eh_frame:0000000000005CBB                 db    0
.eh_frame:0000000000005CBC                 db    0
.eh_frame:0000000000005CBD                 db    0
.eh_frame:0000000000005CBE                 db    0
.eh_frame:0000000000005CBF                 db    0
.eh_frame:0000000000005CC0                 db  18h
.eh_frame:0000000000005CC1                 db    0
.eh_frame:0000000000005CC2                 db    0
.eh_frame:0000000000005CC3                 db    0
.eh_frame:0000000000005CC4                 db  74h ; t
.eh_frame:0000000000005CC5                 db    7
.eh_frame:0000000000005CC6                 db    0
.eh_frame:0000000000005CC7                 db    0
.eh_frame:0000000000005CC8                 db 0A8h
.eh_frame:0000000000005CC9                 db 0E2h
.eh_frame:0000000000005CCA                 db 0FFh
.eh_frame:0000000000005CCB                 db 0FFh
.eh_frame:0000000000005CCC                 db  78h ; x
.eh_frame:0000000000005CCD                 db    0
.eh_frame:0000000000005CCE                 db    0
.eh_frame:0000000000005CCF                 db    0
.eh_frame:0000000000005CD0                 db    0
.eh_frame:0000000000005CD1                 db  44h ; D
.eh_frame:0000000000005CD2                 db  0Eh
.eh_frame:0000000000005CD3                 db  70h ; p
.eh_frame:0000000000005CD4                 db    2
.eh_frame:0000000000005CD5                 db  60h ; `
.eh_frame:0000000000005CD6                 db  0Ah
.eh_frame:0000000000005CD7                 db  0Eh
.eh_frame:0000000000005CD8                 db    8
.eh_frame:0000000000005CD9                 db  41h ; A
.eh_frame:0000000000005CDA                 db  0Bh
.eh_frame:0000000000005CDB                 db    0
.eh_frame:0000000000005CDC                 db  28h ; (
.eh_frame:0000000000005CDD                 db    0
.eh_frame:0000000000005CDE                 db    0
.eh_frame:0000000000005CDF                 db    0
.eh_frame:0000000000005CE0                 db  90h
.eh_frame:0000000000005CE1                 db    7
.eh_frame:0000000000005CE2                 db    0
.eh_frame:0000000000005CE3                 db    0
.eh_frame:0000000000005CE4                 db  0Ch
.eh_frame:0000000000005CE5                 db 0E3h
.eh_frame:0000000000005CE6                 db 0FFh
.eh_frame:0000000000005CE7                 db 0FFh
.eh_frame:0000000000005CE8                 db 0D5h
.eh_frame:0000000000005CE9                 db    0
.eh_frame:0000000000005CEA                 db    0
.eh_frame:0000000000005CEB                 db    0
.eh_frame:0000000000005CEC                 db    0
.eh_frame:0000000000005CED                 db  41h ; A
.eh_frame:0000000000005CEE                 db  0Eh
.eh_frame:0000000000005CEF                 db  10h
.eh_frame:0000000000005CF0                 db  86h
.eh_frame:0000000000005CF1                 db    2
.eh_frame:0000000000005CF2                 db  41h ; A
.eh_frame:0000000000005CF3                 db  0Eh
.eh_frame:0000000000005CF4                 db  18h
.eh_frame:0000000000005CF5                 db  83h
.eh_frame:0000000000005CF6                 db    3
.eh_frame:0000000000005CF7                 db  50h ; P
.eh_frame:0000000000005CF8                 db  0Eh
.eh_frame:0000000000005CF9                 db 0D0h
.eh_frame:0000000000005CFA                 db    1
.eh_frame:0000000000005CFB                 db    2
.eh_frame:0000000000005CFC                 db 0ABh
.eh_frame:0000000000005CFD                 db  0Ah
.eh_frame:0000000000005CFE                 db  0Eh
.eh_frame:0000000000005CFF                 db  18h
.eh_frame:0000000000005D00                 db  41h ; A
.eh_frame:0000000000005D01                 db  0Eh
.eh_frame:0000000000005D02                 db  10h
.eh_frame:0000000000005D03                 db  41h ; A
.eh_frame:0000000000005D04                 db  0Eh
.eh_frame:0000000000005D05                 db    8
.eh_frame:0000000000005D06                 db  41h ; A
.eh_frame:0000000000005D07                 db  0Bh
.eh_frame:0000000000005D08                 db  1Ch
.eh_frame:0000000000005D09                 db    0
.eh_frame:0000000000005D0A                 db    0
.eh_frame:0000000000005D0B                 db    0
.eh_frame:0000000000005D0C                 db 0BCh
.eh_frame:0000000000005D0D                 db    7
.eh_frame:0000000000005D0E                 db    0
.eh_frame:0000000000005D0F                 db    0
.eh_frame:0000000000005D10                 db 0C0h
.eh_frame:0000000000005D11                 db 0E3h
.eh_frame:0000000000005D12                 db 0FFh
.eh_frame:0000000000005D13                 db 0FFh
.eh_frame:0000000000005D14                 db  80h
.eh_frame:0000000000005D15                 db    0
.eh_frame:0000000000005D16                 db    0
.eh_frame:0000000000005D17                 db    0
.eh_frame:0000000000005D18                 db    0
.eh_frame:0000000000005D19                 db  41h ; A
.eh_frame:0000000000005D1A                 db  0Eh
.eh_frame:0000000000005D1B                 db  10h
.eh_frame:0000000000005D1C                 db  83h
.eh_frame:0000000000005D1D                 db    2
.eh_frame:0000000000005D1E                 db    2
.eh_frame:0000000000005D1F                 db  7Ah ; z
.eh_frame:0000000000005D20                 db  0Eh
.eh_frame:0000000000005D21                 db    8
.eh_frame:0000000000005D22                 db    0
.eh_frame:0000000000005D23                 db    0
.eh_frame:0000000000005D24                 db    0
.eh_frame:0000000000005D25                 db    0
.eh_frame:0000000000005D26                 db    0
.eh_frame:0000000000005D27                 db    0
.eh_frame:0000000000005D28                 db  18h
.eh_frame:0000000000005D29                 db    0
.eh_frame:0000000000005D2A                 db    0
.eh_frame:0000000000005D2B                 db    0
.eh_frame:0000000000005D2C                 db 0DCh
.eh_frame:0000000000005D2D                 db    7
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db  20h
.eh_frame:0000000000005D31                 db 0E4h
.eh_frame:0000000000005D32                 db 0FFh
.eh_frame:0000000000005D33                 db 0FFh
.eh_frame:0000000000005D34                 db  1Ah
.eh_frame:0000000000005D35                 db    0
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db    0
.eh_frame:0000000000005D39                 db  41h ; A
.eh_frame:0000000000005D3A                 db  0Eh
.eh_frame:0000000000005D3B                 db  10h
.eh_frame:0000000000005D3C                 db  83h
.eh_frame:0000000000005D3D                 db    2
.eh_frame:0000000000005D3E                 db  53h ; S
.eh_frame:0000000000005D3F                 db  0Ah
.eh_frame:0000000000005D40                 db  0Eh
.eh_frame:0000000000005D41                 db    8
.eh_frame:0000000000005D42                 db  41h ; A
.eh_frame:0000000000005D43                 db  0Bh
.eh_frame:0000000000005D44                 db  10h
.eh_frame:0000000000005D45                 db    0
.eh_frame:0000000000005D46                 db    0
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db 0F8h
.eh_frame:0000000000005D49                 db    7
.eh_frame:0000000000005D4A                 db    0
.eh_frame:0000000000005D4B                 db    0
.eh_frame:0000000000005D4C                 db  24h ; $
.eh_frame:0000000000005D4D                 db 0E4h
.eh_frame:0000000000005D4E                 db 0FFh
.eh_frame:0000000000005D4F                 db 0FFh
.eh_frame:0000000000005D50                 db  24h ; $
.eh_frame:0000000000005D51                 db    0
.eh_frame:0000000000005D52                 db    0
.eh_frame:0000000000005D53                 db    0
.eh_frame:0000000000005D54                 db    0
.eh_frame:0000000000005D55                 db  5Fh ; _
.eh_frame:0000000000005D56                 db  0Eh
.eh_frame:0000000000005D57                 db  10h
.eh_frame:0000000000005D58                 db  10h
.eh_frame:0000000000005D59                 db    0
.eh_frame:0000000000005D5A                 db    0
.eh_frame:0000000000005D5B                 db    0
.eh_frame:0000000000005D5C                 db  0Ch
.eh_frame:0000000000005D5D                 db    8
.eh_frame:0000000000005D5E                 db    0
.eh_frame:0000000000005D5F                 db    0
.eh_frame:0000000000005D60                 db  40h ; @
.eh_frame:0000000000005D61                 db 0E4h
.eh_frame:0000000000005D62                 db 0FFh
.eh_frame:0000000000005D63                 db 0FFh
.eh_frame:0000000000005D64                 db    2
.eh_frame:0000000000005D65                 db    0
.eh_frame:0000000000005D66                 db    0
.eh_frame:0000000000005D67                 db    0
.eh_frame:0000000000005D68                 db    0
.eh_frame:0000000000005D69                 db    0
.eh_frame:0000000000005D6A                 db    0
.eh_frame:0000000000005D6B                 db    0
.eh_frame:0000000000005D6C                 db  20h
.eh_frame:0000000000005D6D                 db    0
.eh_frame:0000000000005D6E                 db    0
.eh_frame:0000000000005D6F                 db    0
.eh_frame:0000000000005D70                 db  20h
.eh_frame:0000000000005D71                 db    8
.eh_frame:0000000000005D72                 db    0
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74                 db  3Ch ; <
.eh_frame:0000000000005D75                 db 0E4h
.eh_frame:0000000000005D76                 db 0FFh
.eh_frame:0000000000005D77                 db 0FFh
.eh_frame:0000000000005D78                 db  36h ; 6
.eh_frame:0000000000005D79                 db    0
.eh_frame:0000000000005D7A                 db    0
.eh_frame:0000000000005D7B                 db    0
.eh_frame:0000000000005D7C                 db    0
.eh_frame:0000000000005D7D                 db  44h ; D
.eh_frame:0000000000005D7E                 db  0Eh
.eh_frame:0000000000005D7F                 db  10h
.eh_frame:0000000000005D80                 db  83h
.eh_frame:0000000000005D81                 db    2
.eh_frame:0000000000005D82                 db  5Dh ; ]
.eh_frame:0000000000005D83                 db  0Ah
.eh_frame:0000000000005D84                 db  0Eh
.eh_frame:0000000000005D85                 db    8
.eh_frame:0000000000005D86                 db  47h ; G
.eh_frame:0000000000005D87                 db  0Bh
.eh_frame:0000000000005D88                 db  48h ; H
.eh_frame:0000000000005D89                 db  0Ah
.eh_frame:0000000000005D8A                 db  0Eh
.eh_frame:0000000000005D8B                 db    8
.eh_frame:0000000000005D8C                 db  41h ; A
.eh_frame:0000000000005D8D                 db  0Bh
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db  10h
.eh_frame:0000000000005D91                 db    0
.eh_frame:0000000000005D92                 db    0
.eh_frame:0000000000005D93                 db    0
.eh_frame:0000000000005D94                 db  44h ; D
.eh_frame:0000000000005D95                 db    8
.eh_frame:0000000000005D96                 db    0
.eh_frame:0000000000005D97                 db    0
.eh_frame:0000000000005D98                 db  58h ; X
.eh_frame:0000000000005D99                 db 0E4h
.eh_frame:0000000000005D9A                 db 0FFh
.eh_frame:0000000000005D9B                 db 0FFh
.eh_frame:0000000000005D9C                 db  24h ; $
.eh_frame:0000000000005D9D                 db    0
.eh_frame:0000000000005D9E                 db    0
.eh_frame:0000000000005D9F                 db    0
.eh_frame:0000000000005DA0                 db    0
.eh_frame:0000000000005DA1                 db  5Fh ; _
.eh_frame:0000000000005DA2                 db  0Eh
.eh_frame:0000000000005DA3                 db  10h
.eh_frame:0000000000005DA4                 db  14h
.eh_frame:0000000000005DA5                 db    0
.eh_frame:0000000000005DA6                 db    0
.eh_frame:0000000000005DA7                 db    0
.eh_frame:0000000000005DA8                 db  58h ; X
.eh_frame:0000000000005DA9                 db    8
.eh_frame:0000000000005DAA                 db    0
.eh_frame:0000000000005DAB                 db    0
.eh_frame:0000000000005DAC                 db  74h ; t
.eh_frame:0000000000005DAD                 db 0E4h
.eh_frame:0000000000005DAE                 db 0FFh
.eh_frame:0000000000005DAF                 db 0FFh
.eh_frame:0000000000005DB0                 db  82h
.eh_frame:0000000000005DB1                 db    0
.eh_frame:0000000000005DB2                 db    0
.eh_frame:0000000000005DB3                 db    0
.eh_frame:0000000000005DB4                 db    0
.eh_frame:0000000000005DB5                 db    2
.eh_frame:0000000000005DB6                 db  5Fh ; _
.eh_frame:0000000000005DB7                 db  0Eh
.eh_frame:0000000000005DB8                 db  10h
.eh_frame:0000000000005DB9                 db  49h ; I
.eh_frame:0000000000005DBA                 db  0Eh
.eh_frame:0000000000005DBB                 db    8
.eh_frame:0000000000005DBC                 db  14h
.eh_frame:0000000000005DBD                 db    0
.eh_frame:0000000000005DBE                 db    0
.eh_frame:0000000000005DBF                 db    0
.eh_frame:0000000000005DC0                 db  70h ; p
.eh_frame:0000000000005DC1                 db    8
.eh_frame:0000000000005DC2                 db    0
.eh_frame:0000000000005DC3                 db    0
.eh_frame:0000000000005DC4                 db 0ECh
.eh_frame:0000000000005DC5                 db 0E4h
.eh_frame:0000000000005DC6                 db 0FFh
.eh_frame:0000000000005DC7                 db 0FFh
.eh_frame:0000000000005DC8                 db  4Ah ; J
.eh_frame:0000000000005DC9                 db    0
.eh_frame:0000000000005DCA                 db    0
.eh_frame:0000000000005DCB                 db    0
.eh_frame:0000000000005DCC                 db    0
.eh_frame:0000000000005DCD                 db    2
.eh_frame:0000000000005DCE                 db  45h ; E
.eh_frame:0000000000005DCF                 db  0Eh
.eh_frame:0000000000005DD0                 db  10h
.eh_frame:0000000000005DD1                 db    0
.eh_frame:0000000000005DD2                 db    0
.eh_frame:0000000000005DD3                 db    0
.eh_frame:0000000000005DD4                 db  18h
.eh_frame:0000000000005DD5                 db    0
.eh_frame:0000000000005DD6                 db    0
.eh_frame:0000000000005DD7                 db    0
.eh_frame:0000000000005DD8                 db  88h
.eh_frame:0000000000005DD9                 db    8
.eh_frame:0000000000005DDA                 db    0
.eh_frame:0000000000005DDB                 db    0
.eh_frame:0000000000005DDC                 db  24h ; $
.eh_frame:0000000000005DDD                 db 0E5h
.eh_frame:0000000000005DDE                 db 0FFh
.eh_frame:0000000000005DDF                 db 0FFh
.eh_frame:0000000000005DE0                 db  17h
.eh_frame:0000000000005DE1                 db    0
.eh_frame:0000000000005DE2                 db    0
.eh_frame:0000000000005DE3                 db    0
.eh_frame:0000000000005DE4                 db    0
.eh_frame:0000000000005DE5                 db  41h ; A
.eh_frame:0000000000005DE6                 db  0Eh
.eh_frame:0000000000005DE7                 db  10h
.eh_frame:0000000000005DE8                 db  83h
.eh_frame:0000000000005DE9                 db    2
.eh_frame:0000000000005DEA                 db  51h ; Q
.eh_frame:0000000000005DEB                 db  0Eh
.eh_frame:0000000000005DEC                 db    8
.eh_frame:0000000000005DED                 db    0
.eh_frame:0000000000005DEE                 db    0
.eh_frame:0000000000005DEF                 db    0
.eh_frame:0000000000005DF0                 db  18h
.eh_frame:0000000000005DF1                 db    0
.eh_frame:0000000000005DF2                 db    0
.eh_frame:0000000000005DF3                 db    0
.eh_frame:0000000000005DF4                 db 0A4h
.eh_frame:0000000000005DF5                 db    8
.eh_frame:0000000000005DF6                 db    0
.eh_frame:0000000000005DF7                 db    0
.eh_frame:0000000000005DF8                 db  28h ; (
.eh_frame:0000000000005DF9                 db 0E5h
.eh_frame:0000000000005DFA                 db 0FFh
.eh_frame:0000000000005DFB                 db 0FFh
.eh_frame:0000000000005DFC                 db  2Eh ; .
.eh_frame:0000000000005DFD                 db    0
.eh_frame:0000000000005DFE                 db    0
.eh_frame:0000000000005DFF                 db    0
.eh_frame:0000000000005E00                 db    0
.eh_frame:0000000000005E01                 db  47h ; G
.eh_frame:0000000000005E02                 db  0Eh
.eh_frame:0000000000005E03                 db  10h
.eh_frame:0000000000005E04                 db  61h ; a
.eh_frame:0000000000005E05                 db  0Ah
.eh_frame:0000000000005E06                 db  0Eh
.eh_frame:0000000000005E07                 db    8
.eh_frame:0000000000005E08                 db  41h ; A
.eh_frame:0000000000005E09                 db  0Bh
.eh_frame:0000000000005E0A                 db    0
.eh_frame:0000000000005E0B                 db    0
.eh_frame:0000000000005E0C                 db  24h ; $
.eh_frame:0000000000005E0D                 db    0
.eh_frame:0000000000005E0E                 db    0
.eh_frame:0000000000005E0F                 db    0
.eh_frame:0000000000005E10                 db 0C0h
.eh_frame:0000000000005E11                 db    8
.eh_frame:0000000000005E12                 db    0
.eh_frame:0000000000005E13                 db    0
.eh_frame:0000000000005E14                 db  3Ch ; <
.eh_frame:0000000000005E15                 db 0E5h
.eh_frame:0000000000005E16                 db 0FFh
.eh_frame:0000000000005E17                 db 0FFh
.eh_frame:0000000000005E18                 db  28h ; (
.eh_frame:0000000000005E19                 db    0
.eh_frame:0000000000005E1A                 db    0
.eh_frame:0000000000005E1B                 db    0
.eh_frame:0000000000005E1C                 db    0
.eh_frame:0000000000005E1D                 db  41h ; A
.eh_frame:0000000000005E1E                 db  0Eh
.eh_frame:0000000000005E1F                 db  10h
.eh_frame:0000000000005E20                 db  86h
.eh_frame:0000000000005E21                 db    2
.eh_frame:0000000000005E22                 db  41h ; A
.eh_frame:0000000000005E23                 db  0Eh
.eh_frame:0000000000005E24                 db  18h
.eh_frame:0000000000005E25                 db  83h
.eh_frame:0000000000005E26                 db    3
.eh_frame:0000000000005E27                 db  4Dh ; M
.eh_frame:0000000000005E28                 db  0Eh
.eh_frame:0000000000005E29                 db  20h
.eh_frame:0000000000005E2A                 db  49h ; I
.eh_frame:0000000000005E2B                 db  0Eh
.eh_frame:0000000000005E2C                 db  18h
.eh_frame:0000000000005E2D                 db  47h ; G
.eh_frame:0000000000005E2E                 db  0Eh
.eh_frame:0000000000005E2F                 db  10h
.eh_frame:0000000000005E30                 db  41h ; A
.eh_frame:0000000000005E31                 db  0Eh
.eh_frame:0000000000005E32                 db    8
.eh_frame:0000000000005E33                 db    0
.eh_frame:0000000000005E34                 db  18h
.eh_frame:0000000000005E35                 db    0
.eh_frame:0000000000005E36                 db    0
.eh_frame:0000000000005E37                 db    0
.eh_frame:0000000000005E38                 db 0E8h
.eh_frame:0000000000005E39                 db    8
.eh_frame:0000000000005E3A                 db    0
.eh_frame:0000000000005E3B                 db    0
.eh_frame:0000000000005E3C                 db  44h ; D
.eh_frame:0000000000005E3D                 db 0E5h
.eh_frame:0000000000005E3E                 db 0FFh
.eh_frame:0000000000005E3F                 db 0FFh
.eh_frame:0000000000005E40                 db  13h
.eh_frame:0000000000005E41                 db    0
.eh_frame:0000000000005E42                 db    0
.eh_frame:0000000000005E43                 db    0
.eh_frame:0000000000005E44                 db    0
.eh_frame:0000000000005E45                 db  41h ; A
.eh_frame:0000000000005E46                 db  0Eh
.eh_frame:0000000000005E47                 db  10h
.eh_frame:0000000000005E48                 db  83h
.eh_frame:0000000000005E49                 db    2
.eh_frame:0000000000005E4A                 db  50h ; P
.eh_frame:0000000000005E4B                 db  0Eh
.eh_frame:0000000000005E4C                 db    8
.eh_frame:0000000000005E4D                 db    0
.eh_frame:0000000000005E4E                 db    0
.eh_frame:0000000000005E4F                 db    0
.eh_frame:0000000000005E50                 db  14h
.eh_frame:0000000000005E51                 db    0
.eh_frame:0000000000005E52                 db    0
.eh_frame:0000000000005E53                 db    0
.eh_frame:0000000000005E54                 db    4
.eh_frame:0000000000005E55                 db    9
.eh_frame:0000000000005E56                 db    0
.eh_frame:0000000000005E57                 db    0
.eh_frame:0000000000005E58                 db  48h ; H
.eh_frame:0000000000005E59                 db 0E5h
.eh_frame:0000000000005E5A                 db 0FFh
.eh_frame:0000000000005E5B                 db 0FFh
.eh_frame:0000000000005E5C                 db  35h ; 5
.eh_frame:0000000000005E5D                 db    0
.eh_frame:0000000000005E5E                 db    0
.eh_frame:0000000000005E5F                 db    0
.eh_frame:0000000000005E60                 db    0
.eh_frame:0000000000005E61                 db  4Bh ; K
.eh_frame:0000000000005E62                 db  0Eh
.eh_frame:0000000000005E63                 db  10h
.eh_frame:0000000000005E64                 db    0
.eh_frame:0000000000005E65                 db    0
.eh_frame:0000000000005E66                 db    0
.eh_frame:0000000000005E67                 db    0
.eh_frame:0000000000005E68                 db  3Ch ; <
.eh_frame:0000000000005E69                 db    0
.eh_frame:0000000000005E6A                 db    0
.eh_frame:0000000000005E6B                 db    0
.eh_frame:0000000000005E6C                 db  1Ch
.eh_frame:0000000000005E6D                 db    9
.eh_frame:0000000000005E6E                 db    0
.eh_frame:0000000000005E6F                 db    0
.eh_frame:0000000000005E70                 db  70h ; p
.eh_frame:0000000000005E71                 db 0E5h
.eh_frame:0000000000005E72                 db 0FFh
.eh_frame:0000000000005E73                 db 0FFh
.eh_frame:0000000000005E74                 db  83h
.eh_frame:0000000000005E75                 db    0
.eh_frame:0000000000005E76                 db    0
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db    0
.eh_frame:0000000000005E79                 db  42h ; B
.eh_frame:0000000000005E7A                 db  0Eh
.eh_frame:0000000000005E7B                 db  10h
.eh_frame:0000000000005E7C                 db  8Dh
.eh_frame:0000000000005E7D                 db    2
.eh_frame:0000000000005E7E                 db  42h ; B
.eh_frame:0000000000005E7F                 db  0Eh
.eh_frame:0000000000005E80                 db  18h
.eh_frame:0000000000005E81                 db  8Ch
.eh_frame:0000000000005E82                 db    3
.eh_frame:0000000000005E83                 db  44h ; D
.eh_frame:0000000000005E84                 db  0Eh
.eh_frame:0000000000005E85                 db  20h
.eh_frame:0000000000005E86                 db  86h
.eh_frame:0000000000005E87                 db    4
.eh_frame:0000000000005E88                 db  41h ; A
.eh_frame:0000000000005E89                 db  0Eh
.eh_frame:0000000000005E8A                 db  28h ; (
.eh_frame:0000000000005E8B                 db  83h
.eh_frame:0000000000005E8C                 db    5
.eh_frame:0000000000005E8D                 db  4Ah ; J
.eh_frame:0000000000005E8E                 db  0Eh
.eh_frame:0000000000005E8F                 db  40h ; @
.eh_frame:0000000000005E90                 db    2
.eh_frame:0000000000005E91                 db  64h ; d
.eh_frame:0000000000005E92                 db  0Ah
.eh_frame:0000000000005E93                 db  0Eh
.eh_frame:0000000000005E94                 db  28h ; (
.eh_frame:0000000000005E95                 db  41h ; A
.eh_frame:0000000000005E96                 db  0Eh
.eh_frame:0000000000005E97                 db  20h
.eh_frame:0000000000005E98                 db  41h ; A
.eh_frame:0000000000005E99                 db  0Eh
.eh_frame:0000000000005E9A                 db  18h
.eh_frame:0000000000005E9B                 db  42h ; B
.eh_frame:0000000000005E9C                 db  0Eh
.eh_frame:0000000000005E9D                 db  10h
.eh_frame:0000000000005E9E                 db  42h ; B
.eh_frame:0000000000005E9F                 db  0Eh
.eh_frame:0000000000005EA0                 db    8
.eh_frame:0000000000005EA1                 db  41h ; A
.eh_frame:0000000000005EA2                 db  0Bh
.eh_frame:0000000000005EA3                 db    0
.eh_frame:0000000000005EA4                 db    0
.eh_frame:0000000000005EA5                 db    0
.eh_frame:0000000000005EA6                 db    0
.eh_frame:0000000000005EA7                 db    0
.eh_frame:0000000000005EA8                 db  4Ch ; L
.eh_frame:0000000000005EA9                 db    0
.eh_frame:0000000000005EAA                 db    0
.eh_frame:0000000000005EAB                 db    0
.eh_frame:0000000000005EAC                 db  5Ch ; \
.eh_frame:0000000000005EAD                 db    9
.eh_frame:0000000000005EAE                 db    0
.eh_frame:0000000000005EAF                 db    0
.eh_frame:0000000000005EB0                 db 0C0h
.eh_frame:0000000000005EB1                 db 0E5h
.eh_frame:0000000000005EB2                 db 0FFh
.eh_frame:0000000000005EB3                 db 0FFh
.eh_frame:0000000000005EB4                 db  7Dh ; }
.eh_frame:0000000000005EB5                 db    0
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db    0
.eh_frame:0000000000005EB9                 db  42h ; B
.eh_frame:0000000000005EBA                 db  0Eh
.eh_frame:0000000000005EBB                 db  10h
.eh_frame:0000000000005EBC                 db  8Ch
.eh_frame:0000000000005EBD                 db    2
.eh_frame:0000000000005EBE                 db  41h ; A
.eh_frame:0000000000005EBF                 db  0Eh
.eh_frame:0000000000005EC0                 db  18h
.eh_frame:0000000000005EC1                 db  86h
.eh_frame:0000000000005EC2                 db    3
.eh_frame:0000000000005EC3                 db  44h ; D
.eh_frame:0000000000005EC4                 db  0Eh
.eh_frame:0000000000005EC5                 db  20h
.eh_frame:0000000000005EC6                 db  83h
.eh_frame:0000000000005EC7                 db    4
.eh_frame:0000000000005EC8                 db  69h ; i
.eh_frame:0000000000005EC9                 db  0Ah
.eh_frame:0000000000005ECA                 db  0Eh
.eh_frame:0000000000005ECB                 db  18h
.eh_frame:0000000000005ECC                 db  41h ; A
.eh_frame:0000000000005ECD                 db  0Eh
.eh_frame:0000000000005ECE                 db  10h
.eh_frame:0000000000005ECF                 db  42h ; B
.eh_frame:0000000000005ED0                 db  0Eh
.eh_frame:0000000000005ED1                 db    8
.eh_frame:0000000000005ED2                 db  45h ; E
.eh_frame:0000000000005ED3                 db  0Bh
.eh_frame:0000000000005ED4                 db  55h ; U
.eh_frame:0000000000005ED5                 db  0Ah
.eh_frame:0000000000005ED6                 db  0Eh
.eh_frame:0000000000005ED7                 db  18h
.eh_frame:0000000000005ED8                 db  41h ; A
.eh_frame:0000000000005ED9                 db  0Eh
.eh_frame:0000000000005EDA                 db  10h
.eh_frame:0000000000005EDB                 db  42h ; B
.eh_frame:0000000000005EDC                 db  0Eh
.eh_frame:0000000000005EDD                 db    8
.eh_frame:0000000000005EDE                 db  48h ; H
.eh_frame:0000000000005EDF                 db  0Bh
.eh_frame:0000000000005EE0                 db  41h ; A
.eh_frame:0000000000005EE1                 db  0Ah
.eh_frame:0000000000005EE2                 db  0Eh
.eh_frame:0000000000005EE3                 db  18h
.eh_frame:0000000000005EE4                 db  46h ; F
.eh_frame:0000000000005EE5                 db  0Eh
.eh_frame:0000000000005EE6                 db  10h
.eh_frame:0000000000005EE7                 db  42h ; B
.eh_frame:0000000000005EE8                 db  0Eh
.eh_frame:0000000000005EE9                 db    8
.eh_frame:0000000000005EEA                 db  47h ; G
.eh_frame:0000000000005EEB                 db  0Bh
.eh_frame:0000000000005EEC                 db  49h ; I
.eh_frame:0000000000005EED                 db  0Eh
.eh_frame:0000000000005EEE                 db  18h
.eh_frame:0000000000005EEF                 db  41h ; A
.eh_frame:0000000000005EF0                 db  0Eh
.eh_frame:0000000000005EF1                 db  10h
.eh_frame:0000000000005EF2                 db  42h ; B
.eh_frame:0000000000005EF3                 db  0Eh
.eh_frame:0000000000005EF4                 db    8
.eh_frame:0000000000005EF5                 db    0
.eh_frame:0000000000005EF6                 db    0
.eh_frame:0000000000005EF7                 db    0
.eh_frame:0000000000005EF8                 db  1Ch
.eh_frame:0000000000005EF9                 db    0
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db 0ACh
.eh_frame:0000000000005EFD                 db    9
.eh_frame:0000000000005EFE                 db    0
.eh_frame:0000000000005EFF                 db    0
.eh_frame:0000000000005F00                 db 0F0h
.eh_frame:0000000000005F01                 db 0E5h
.eh_frame:0000000000005F02                 db 0FFh
.eh_frame:0000000000005F03                 db 0FFh
.eh_frame:0000000000005F04                 db  60h ; `
.eh_frame:0000000000005F05                 db    0
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db    0
.eh_frame:0000000000005F09                 db  44h ; D
.eh_frame:0000000000005F0A                 db  0Eh
.eh_frame:0000000000005F0B                 db  10h
.eh_frame:0000000000005F0C                 db  75h ; u
.eh_frame:0000000000005F0D                 db  0Ah
.eh_frame:0000000000005F0E                 db  0Eh
.eh_frame:0000000000005F0F                 db    8
.eh_frame:0000000000005F10                 db  47h ; G
.eh_frame:0000000000005F11                 db  0Bh
.eh_frame:0000000000005F12                 db  5Fh ; _
.eh_frame:0000000000005F13                 db  0Eh
.eh_frame:0000000000005F14                 db    8
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db  1Ch
.eh_frame:0000000000005F19                 db    0
.eh_frame:0000000000005F1A                 db    0
.eh_frame:0000000000005F1B                 db    0
.eh_frame:0000000000005F1C                 db 0CCh
.eh_frame:0000000000005F1D                 db    9
.eh_frame:0000000000005F1E                 db    0
.eh_frame:0000000000005F1F                 db    0
.eh_frame:0000000000005F20                 db  30h ; 0
.eh_frame:0000000000005F21                 db 0E6h
.eh_frame:0000000000005F22                 db 0FFh
.eh_frame:0000000000005F23                 db 0FFh
.eh_frame:0000000000005F24                 db  3Ch ; <
.eh_frame:0000000000005F25                 db    0
.eh_frame:0000000000005F26                 db    0
.eh_frame:0000000000005F27                 db    0
.eh_frame:0000000000005F28                 db    0
.eh_frame:0000000000005F29                 db  44h ; D
.eh_frame:0000000000005F2A                 db  0Eh
.eh_frame:0000000000005F2B                 db  10h
.eh_frame:0000000000005F2C                 db  61h ; a
.eh_frame:0000000000005F2D                 db  0Ah
.eh_frame:0000000000005F2E                 db  0Eh
.eh_frame:0000000000005F2F                 db    8
.eh_frame:0000000000005F30                 db  4Bh ; K
.eh_frame:0000000000005F31                 db  0Bh
.eh_frame:0000000000005F32                 db  4Bh ; K
.eh_frame:0000000000005F33                 db  0Eh
.eh_frame:0000000000005F34                 db    8
.eh_frame:0000000000005F35                 db    0
.eh_frame:0000000000005F36                 db    0
.eh_frame:0000000000005F37                 db    0
.eh_frame:0000000000005F38                 db  34h ; 4
.eh_frame:0000000000005F39                 db    0
.eh_frame:0000000000005F3A                 db    0
.eh_frame:0000000000005F3B                 db    0
.eh_frame:0000000000005F3C                 db 0ECh
.eh_frame:0000000000005F3D                 db    9
.eh_frame:0000000000005F3E                 db    0
.eh_frame:0000000000005F3F                 db    0
.eh_frame:0000000000005F40                 db  50h ; P
.eh_frame:0000000000005F41                 db 0E6h
.eh_frame:0000000000005F42                 db 0FFh
.eh_frame:0000000000005F43                 db 0FFh
.eh_frame:0000000000005F44                 db  7Bh ; {
.eh_frame:0000000000005F45                 db    0
.eh_frame:0000000000005F46                 db    0
.eh_frame:0000000000005F47                 db    0
.eh_frame:0000000000005F48                 db    0
.eh_frame:0000000000005F49                 db  42h ; B
.eh_frame:0000000000005F4A                 db  0Eh
.eh_frame:0000000000005F4B                 db  10h
.eh_frame:0000000000005F4C                 db  8Ch
.eh_frame:0000000000005F4D                 db    2
.eh_frame:0000000000005F4E                 db  41h ; A
.eh_frame:0000000000005F4F                 db  0Eh
.eh_frame:0000000000005F50                 db  18h
.eh_frame:0000000000005F51                 db  86h
.eh_frame:0000000000005F52                 db    3
.eh_frame:0000000000005F53                 db  41h ; A
.eh_frame:0000000000005F54                 db  0Eh
.eh_frame:0000000000005F55                 db  20h
.eh_frame:0000000000005F56                 db  83h
.eh_frame:0000000000005F57                 db    4
.eh_frame:0000000000005F58                 db  7Dh ; }
.eh_frame:0000000000005F59                 db  0Ah
.eh_frame:0000000000005F5A                 db  0Eh
.eh_frame:0000000000005F5B                 db  18h
.eh_frame:0000000000005F5C                 db  41h ; A
.eh_frame:0000000000005F5D                 db  0Eh
.eh_frame:0000000000005F5E                 db  10h
.eh_frame:0000000000005F5F                 db  42h ; B
.eh_frame:0000000000005F60                 db  0Eh
.eh_frame:0000000000005F61                 db    8
.eh_frame:0000000000005F62                 db  44h ; D
.eh_frame:0000000000005F63                 db  0Bh
.eh_frame:0000000000005F64                 db  60h ; `
.eh_frame:0000000000005F65                 db  0Ah
.eh_frame:0000000000005F66                 db  0Eh
.eh_frame:0000000000005F67                 db  18h
.eh_frame:0000000000005F68                 db  41h ; A
.eh_frame:0000000000005F69                 db  0Eh
.eh_frame:0000000000005F6A                 db  10h
.eh_frame:0000000000005F6B                 db  42h ; B
.eh_frame:0000000000005F6C                 db  0Eh
.eh_frame:0000000000005F6D                 db    8
.eh_frame:0000000000005F6E                 db  45h ; E
.eh_frame:0000000000005F6F                 db  0Bh
.eh_frame:0000000000005F70                 db  1Ch
.eh_frame:0000000000005F71                 db    0
.eh_frame:0000000000005F72                 db    0
.eh_frame:0000000000005F73                 db    0
.eh_frame:0000000000005F74                 db  24h ; $
.eh_frame:0000000000005F75                 db  0Ah
.eh_frame:0000000000005F76                 db    0
.eh_frame:0000000000005F77                 db    0
.eh_frame:0000000000005F78                 db  98h
.eh_frame:0000000000005F79                 db 0E6h
.eh_frame:0000000000005F7A                 db 0FFh
.eh_frame:0000000000005F7B                 db 0FFh
.eh_frame:0000000000005F7C                 db  40h ; @
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db    0
.eh_frame:0000000000005F81                 db  44h ; D
.eh_frame:0000000000005F82                 db  0Eh
.eh_frame:0000000000005F83                 db  10h
.eh_frame:0000000000005F84                 db  83h
.eh_frame:0000000000005F85                 db    2
.eh_frame:0000000000005F86                 db  5Ah ; Z
.eh_frame:0000000000005F87                 db  0Ah
.eh_frame:0000000000005F88                 db  0Eh
.eh_frame:0000000000005F89                 db    8
.eh_frame:0000000000005F8A                 db  4Ah ; J
.eh_frame:0000000000005F8B                 db  0Bh
.eh_frame:0000000000005F8C                 db  53h ; S
.eh_frame:0000000000005F8D                 db  0Eh
.eh_frame:0000000000005F8E                 db    8
.eh_frame:0000000000005F8F                 db    0
.eh_frame:0000000000005F90                 db  2Ch ; ,
.eh_frame:0000000000005F91                 db    0
.eh_frame:0000000000005F92                 db    0
.eh_frame:0000000000005F93                 db    0
.eh_frame:0000000000005F94                 db  44h ; D
.eh_frame:0000000000005F95                 db  0Ah
.eh_frame:0000000000005F96                 db    0
.eh_frame:0000000000005F97                 db    0
.eh_frame:0000000000005F98                 db 0B8h
.eh_frame:0000000000005F99                 db 0E6h
.eh_frame:0000000000005F9A                 db 0FFh
.eh_frame:0000000000005F9B                 db 0FFh
.eh_frame:0000000000005F9C                 db  57h ; W
.eh_frame:0000000000005F9D                 db    0
.eh_frame:0000000000005F9E                 db    0
.eh_frame:0000000000005F9F                 db    0
.eh_frame:0000000000005FA0                 db    0
.eh_frame:0000000000005FA1                 db  63h ; c
.eh_frame:0000000000005FA2                 db  0Eh
.eh_frame:0000000000005FA3                 db  10h
.eh_frame:0000000000005FA4                 db  8Ch
.eh_frame:0000000000005FA5                 db    2
.eh_frame:0000000000005FA6                 db  41h ; A
.eh_frame:0000000000005FA7                 db  0Eh
.eh_frame:0000000000005FA8                 db  18h
.eh_frame:0000000000005FA9                 db  86h
.eh_frame:0000000000005FAA                 db    3
.eh_frame:0000000000005FAB                 db  44h ; D
.eh_frame:0000000000005FAC                 db  0Eh
.eh_frame:0000000000005FAD                 db  20h
.eh_frame:0000000000005FAE                 db  83h
.eh_frame:0000000000005FAF                 db    4
.eh_frame:0000000000005FB0                 db  6Bh ; k
.eh_frame:0000000000005FB1                 db  0Eh
.eh_frame:0000000000005FB2                 db  18h
.eh_frame:0000000000005FB3                 db  41h ; A
.eh_frame:0000000000005FB4                 db  0Eh
.eh_frame:0000000000005FB5                 db  10h
.eh_frame:0000000000005FB6                 db  42h ; B
.eh_frame:0000000000005FB7                 db  0Eh
.eh_frame:0000000000005FB8                 db    8
.eh_frame:0000000000005FB9                 db    0
.eh_frame:0000000000005FBA                 db    0
.eh_frame:0000000000005FBB                 db    0
.eh_frame:0000000000005FBC                 db    0
.eh_frame:0000000000005FBD                 db    0
.eh_frame:0000000000005FBE                 db    0
.eh_frame:0000000000005FBF                 db    0
.eh_frame:0000000000005FC0                 db  44h ; D
.eh_frame:0000000000005FC1                 db    0
.eh_frame:0000000000005FC2                 db    0
.eh_frame:0000000000005FC3                 db    0
.eh_frame:0000000000005FC4                 db  74h ; t
.eh_frame:0000000000005FC5                 db  0Ah
.eh_frame:0000000000005FC6                 db    0
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db 0E8h
.eh_frame:0000000000005FC9                 db 0E6h
.eh_frame:0000000000005FCA                 db 0FFh
.eh_frame:0000000000005FCB                 db 0FFh
.eh_frame:0000000000005FCC                 db  65h ; e
.eh_frame:0000000000005FCD                 db    0
.eh_frame:0000000000005FCE                 db    0
.eh_frame:0000000000005FCF                 db    0
.eh_frame:0000000000005FD0                 db    0
.eh_frame:0000000000005FD1                 db  42h ; B
.eh_frame:0000000000005FD2                 db  0Eh
.eh_frame:0000000000005FD3                 db  10h
.eh_frame:0000000000005FD4                 db  8Fh
.eh_frame:0000000000005FD5                 db    2
.eh_frame:0000000000005FD6                 db  42h ; B
.eh_frame:0000000000005FD7                 db  0Eh
.eh_frame:0000000000005FD8                 db  18h
.eh_frame:0000000000005FD9                 db  8Eh
.eh_frame:0000000000005FDA                 db    3
.eh_frame:0000000000005FDB                 db  45h ; E
.eh_frame:0000000000005FDC                 db  0Eh
.eh_frame:0000000000005FDD                 db  20h
.eh_frame:0000000000005FDE                 db  8Dh
.eh_frame:0000000000005FDF                 db    4
.eh_frame:0000000000005FE0                 db  42h ; B
.eh_frame:0000000000005FE1                 db  0Eh
.eh_frame:0000000000005FE2                 db  28h ; (
.eh_frame:0000000000005FE3                 db  8Ch
.eh_frame:0000000000005FE4                 db    5
.eh_frame:0000000000005FE5                 db  48h ; H
.eh_frame:0000000000005FE6                 db  0Eh
.eh_frame:0000000000005FE7                 db  30h ; 0
.eh_frame:0000000000005FE8                 db  86h
.eh_frame:0000000000005FE9                 db    6
.eh_frame:0000000000005FEA                 db  48h ; H
.eh_frame:0000000000005FEB                 db  0Eh
.eh_frame:0000000000005FEC                 db  38h ; 8
.eh_frame:0000000000005FED                 db  83h
.eh_frame:0000000000005FEE                 db    7
.eh_frame:0000000000005FEF                 db  4Dh ; M
.eh_frame:0000000000005FF0                 db  0Eh
.eh_frame:0000000000005FF1                 db  40h ; @
.eh_frame:0000000000005FF2                 db  72h ; r
.eh_frame:0000000000005FF3                 db  0Eh
.eh_frame:0000000000005FF4                 db  38h ; 8
.eh_frame:0000000000005FF5                 db  41h ; A
.eh_frame:0000000000005FF6                 db  0Eh
.eh_frame:0000000000005FF7                 db  30h ; 0
.eh_frame:0000000000005FF8                 db  41h ; A
.eh_frame:0000000000005FF9                 db  0Eh
.eh_frame:0000000000005FFA                 db  28h ; (
.eh_frame:0000000000005FFB                 db  42h ; B
.eh_frame:0000000000005FFC                 db  0Eh
.eh_frame:0000000000005FFD                 db  20h
.eh_frame:0000000000005FFE                 db  42h ; B
.eh_frame:0000000000005FFF                 db  0Eh
.eh_frame:0000000000006000                 db  18h
.eh_frame:0000000000006001                 db  42h ; B
.eh_frame:0000000000006002                 db  0Eh
.eh_frame:0000000000006003                 db  10h
.eh_frame:0000000000006004                 db  42h ; B
.eh_frame:0000000000006005                 db  0Eh
.eh_frame:0000000000006006                 db    8
.eh_frame:0000000000006007                 db    0
.eh_frame:0000000000006008                 db  14h
.eh_frame:0000000000006009                 db    0
.eh_frame:000000000000600A                 db    0
.eh_frame:000000000000600B                 db    0
.eh_frame:000000000000600C                 db 0BCh
.eh_frame:000000000000600D                 db  0Ah
.eh_frame:000000000000600E                 db    0
.eh_frame:000000000000600F                 db    0
.eh_frame:0000000000006010                 db  10h
.eh_frame:0000000000006011                 db 0E7h
.eh_frame:0000000000006012                 db 0FFh
.eh_frame:0000000000006013                 db 0FFh
.eh_frame:0000000000006014                 db    2
.eh_frame:0000000000006015                 db    0
.eh_frame:0000000000006016                 db    0
.eh_frame:0000000000006017                 db    0
.eh_frame:0000000000006018                 db    0
.eh_frame:0000000000006019                 db    0
.eh_frame:000000000000601A                 db    0
.eh_frame:000000000000601B                 db    0
.eh_frame:000000000000601C                 db    0
.eh_frame:000000000000601D                 db    0
.eh_frame:000000000000601E                 db    0
.eh_frame:000000000000601F                 db    0
.eh_frame:0000000000006020                 db  10h
.eh_frame:0000000000006021                 db    0
.eh_frame:0000000000006022                 db    0
.eh_frame:0000000000006023                 db    0
.eh_frame:0000000000006024                 db 0D4h
.eh_frame:0000000000006025                 db  0Ah
.eh_frame:0000000000006026                 db    0
.eh_frame:0000000000006027                 db    0
.eh_frame:0000000000006028                 db    8
.eh_frame:0000000000006029                 db 0E7h
.eh_frame:000000000000602A                 db 0FFh
.eh_frame:000000000000602B                 db 0FFh
.eh_frame:000000000000602C                 db  0Eh
.eh_frame:000000000000602D                 db    0
.eh_frame:000000000000602E                 db    0
.eh_frame:000000000000602F                 db    0
.eh_frame:0000000000006030                 db    0
.eh_frame:0000000000006031                 db    0
.eh_frame:0000000000006032                 db    0
.eh_frame:0000000000006033                 db    0
.eh_frame:0000000000006034 __FRAME_END__   db    0
.eh_frame:0000000000006035                 db    0
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006037 _eh_frame       ends
.eh_frame:0000000000006037
.init_array:0000000000206BB0 ; ELF Initialization Function Table
.init_array:0000000000206BB0 ; ===========================================================================
.init_array:0000000000206BB0
.init_array:0000000000206BB0 ; Segment type: Pure data
.init_array:0000000000206BB0 ; Segment permissions: Read/Write
.init_array:0000000000206BB0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206BB0                 assume cs:_init_array
.init_array:0000000000206BB0                 ;org 206BB0h
.init_array:0000000000206BB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206BB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206BB0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206BB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206BB0
.fini_array:0000000000206BB8 ; ELF Termination Function Table
.fini_array:0000000000206BB8 ; ===========================================================================
.fini_array:0000000000206BB8
.fini_array:0000000000206BB8 ; Segment type: Pure data
.fini_array:0000000000206BB8 ; Segment permissions: Read/Write
.fini_array:0000000000206BB8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206BB8                 assume cs:_fini_array
.fini_array:0000000000206BB8                 ;org 206BB8h
.fini_array:0000000000206BB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206BB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206BB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206BB8
.data.rel.ro:0000000000206BC0 ; ===========================================================================
.data.rel.ro:0000000000206BC0
.data.rel.ro:0000000000206BC0 ; Segment type: Pure data
.data.rel.ro:0000000000206BC0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206BC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206BC0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206BC0                 ;org 206BC0h
.data.rel.ro:0000000000206BC0 ; struct option long_options
.data.rel.ro:0000000000206BC0 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000206BC0                                         ; DATA XREF: parse_long_options:loc_1C30↑o
.data.rel.ro:0000000000206BC0                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000206BC0                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BC0                 dq 0                    ; flag
.data.rel.ro:0000000000206BC0                 dd 68h                  ; val
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  76h ; v
.data.rel.ro:0000000000206BF9                 db    0
.data.rel.ro:0000000000206BFA                 db    0
.data.rel.ro:0000000000206BFB                 db    0
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 1230h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4740h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206BB0h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206BB8h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 820h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 295h>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3F0h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E40h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B88h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0B28h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0AB6h> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_1250↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_1250+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000206EB8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EC0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC8 getpwuid_ptr    dq offset getpwuid      ; DATA XREF: _getpwuid↑r
.got:0000000000206ED0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206ED0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206ED8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206EE0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206EE0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EE8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EF0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EF0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EF8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206F00 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206F08 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F10 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F18 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F20 geteuid_ptr     dq offset geteuid       ; DATA XREF: _geteuid↑r
.got:0000000000206F28 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F30 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F30                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F38 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F40 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F48 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F50 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F58 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F60 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F68 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F70 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F78 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F80 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F88 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F90 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FD8                                         ; DATA XREF: start+24↑r
.got:0000000000206FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF0 _got            ends
.got:0000000000206FF0
LOAD:0000000000206FF8 ; ===========================================================================
LOAD:0000000000206FF8
LOAD:0000000000206FF8 ; Segment type: Pure data
LOAD:0000000000206FF8 ; Segment permissions: Read/Write
LOAD:0000000000206FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FF8                 assume cs:LOAD
LOAD:0000000000206FF8                 ;org 206FF8h
LOAD:0000000000206FF8                 align 20h
LOAD:0000000000206FF8 LOAD            ends
LOAD:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+5A↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1B52↑r
.data:0000000000207018                                         ; parse_gnu_standard_options_only:loc_1DC0↑r ...
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_324D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000778↑o
.bss:0000000000207080                                         ; LOAD:00000000000007C0↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000760↑o
.bss:0000000000207088                                         ; usage+7D↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000808↑o
.bss:0000000000207090                                         ; main+8C↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:0000000000000790↑o
.bss:0000000000207098                                         ; LOAD:00000000000007A8↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public opterr@@GLIBC_2_2_5
.bss:00000000002070A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:00000000002070A0                                         ; parse_long_options+67↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'opterr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A4                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_1E6D↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207260 ; void __noreturn exit(int status)
extern:0000000000207260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207268 ; size_t _fpending(FILE *fp)
extern:0000000000207268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207270 ; int puts(const char *s)
extern:0000000000207270                 extrn puts:near         ; CODE XREF: _puts↑j
extern:0000000000207270                                         ; DATA XREF: .got:puts_ptr↑o
extern:0000000000207278 ; char *textdomain(const char *domainname)
extern:0000000000207278                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207278                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207280 ; int fclose(FILE *stream)
extern:0000000000207280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207288 ; struct passwd *getpwuid(__uid_t uid)
extern:0000000000207288                 extrn getpwuid:near     ; CODE XREF: _getpwuid↑j
extern:0000000000207288                                         ; DATA XREF: .got:getpwuid_ptr↑o
extern:0000000000207290 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207290                 extrn bindtextdomain:near
extern:0000000000207290                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207290                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207298 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207298                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207298                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002072A0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002072A0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002072A0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002072A0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002072A8 ; size_t strlen(const char *s)
extern:00000000002072A8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002072A8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072B0                 extrn __stack_chk_fail:near
extern:00000000002072B0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072B0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072B8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072B8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072B8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072C0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072C0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072C0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072C8 ; char *strrchr(const char *s, int c)
extern:00000000002072C8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072C8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072D0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072D0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072D0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072D8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072D8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072D8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072E0 ; __uid_t geteuid(void)
extern:00000000002072E0                 extrn geteuid:near      ; CODE XREF: _geteuid↑j
extern:00000000002072E0                                         ; DATA XREF: .got:geteuid_ptr↑o
extern:00000000002072E8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072E8                 extrn __libc_start_main:near
extern:00000000002072E8                                         ; CODE XREF: start+24↑p
extern:00000000002072E8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072F0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072F0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072F0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072F8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072F8                 extrn fputs_unlocked:near
extern:00000000002072F8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072F8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000207300 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000207300                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000207300                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000207308 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000207308                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000207308                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207310 ; int fileno(FILE *stream)
extern:0000000000207310                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207310                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207318 ; void *malloc(size_t size)
extern:0000000000207318                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207318                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207320 ; int fflush(FILE *stream)
extern:0000000000207320                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207320                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207328 ; char *nl_langinfo(nl_item item)
extern:0000000000207328                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207328                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207330 ; int _freading(FILE *fp)
extern:0000000000207330                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207330                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207338 ; void *realloc(void *ptr, size_t size)
extern:0000000000207338                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207338                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207340 ; char *setlocale(int category, const char *locale)
extern:0000000000207340                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207340                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207348                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207348                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207350 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207350                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207350                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207358 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207358                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207358                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207360 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207360                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207360                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207368 ; void __noreturn exit(int status)
extern:0000000000207368                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207368                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207370 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207370                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207370                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207378                 extrn __fprintf_chk:near
extern:0000000000207378                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207378                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207380 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207380                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207380                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207388 ; int iswprint(wint_t wc)
extern:0000000000207388                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207388                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207390 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207390                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207390                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207390                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207398 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207398                 extrn __ctype_b_loc:near
extern:0000000000207398                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207398                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002073A0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002073A0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073A8                 extrn __gmon_start__:near ; weak
extern:00000000002073A8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073A8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073B0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073B0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073B0
extern:00000000002073B0
extern:00000000002073B0                 end start
