LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 775F0033B503FCD3551EDA73EA277E7159FE92F09331555C3E3E82D75BE92765
LOAD:0000000000000000 ; Input MD5    : E72E35B06EBE0694FCF5594622642573
LOAD:0000000000000000 ; Input CRC32  : 38915992
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/stdbuf
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'stdbuf.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'filenamecat.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xreadlink.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'asprintf.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vasprintf.c'
LOAD:0000000000000000 ; Source File : 'areadlink.c'
LOAD:0000000000000000 ; Source File : 'careadlinkat.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'allocator.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 37690h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 9ED0h                ; Size in file image
LOAD:00000000000000D8                 dq 9ED0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0AAD0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20AAD0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 5B0h                 ; Size in file image
LOAD:0000000000000110                 dq 7C8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0AC20h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20AC20h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 8E6Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 8E6Ch                ; Physical address
LOAD:00000000000001B0                 dq 2C4h                 ; Size in file image
LOAD:00000000000001B8                 dq 2C4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0AAD0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20AAD0h              ; Physical address
LOAD:0000000000000220                 dq 530h                 ; Size in file image
LOAD:0000000000000228                 dq 530h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 3, 0A2h, 0A4h, 0CFh, 18h, 6Fh, 0DEh, 0A0h, 1, 2Ah, 0FCh ; Desc
LOAD:0000000000000284                 db 6Dh, 62h, 8Dh, 0EDh, 57h, 42h, 8, 95h, 30h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Ah
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Ah, 3Bh, 40h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_910, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aGetenv - offset byte_910, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aSnprintfChk - offset byte_910, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aFree - offset byte_910, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aAbort - offset byte_910, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000358                            0>
LOAD:0000000000000370                 Elf64_Sym <offset aErrnoLocation - offset byte_910, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrncmp - offset byte_910, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aItmDeregistert - offset byte_910, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aExit - offset byte_910, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFpending - offset byte_910, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aReadlink - offset byte_910, 12h, 0, 0, \ ; "readlink"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_910, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFclose - offset byte_910, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain - offset byte_910, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aDcgettext - offset byte_910, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_910, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrlen - offset byte_910, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStackChkFail - offset byte_910, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aGetoptLong - offset byte_910, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aMbrtowc - offset byte_910, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrchr - offset byte_910, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrrchr - offset byte_910, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLseek - offset byte_910, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000508                            0>
LOAD:0000000000000520                 Elf64_Sym <offset aAssertFail - offset byte_910, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrtoulInterna - offset byte_910, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemset - offset byte_910, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLibcStartMain - offset byte_910, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcmp - offset byte_910, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFputsUnlocked - offset byte_910, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCalloc - offset byte_910, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aPutenv - offset byte_910, 12h, 0, 0, \ ; "putenv"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aGmonStart - offset byte_910, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemcpy - offset byte_910, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFileno - offset byte_910, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aXstat - offset byte_910, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000628                            0>
LOAD:0000000000000640                 Elf64_Sym <offset aMalloc - offset byte_910, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFflush - offset byte_910, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aNlLanginfo - offset byte_910, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFreading - offset byte_910, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aRealloc - offset byte_910, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aSetlocale - offset byte_910, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aPrintfChk - offset byte_910, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMempcpy - offset byte_910, 12h, 0, 0, \ ; "mempcpy"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aError - offset byte_910, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aAccess - offset byte_910, 12h, 0, 0, \ ; "access"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFseeko - offset byte_910, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aStrtok - offset byte_910, 12h, 0, 0, \ ; "strtok"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aExecvp - offset byte_910, 12h, 0, 0, \ ; "execvp"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aCxaAtexit - offset byte_910, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aExit+1 - offset byte_910, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFwrite - offset byte_910, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFprintfChk - offset byte_910, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aItmRegistertmc - offset byte_910, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aMbsinit - offset byte_910, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aIswprint - offset byte_910, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aCxaFinalize - offset byte_910, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aCtypeBLoc - offset byte_910, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aStdout - offset byte_910, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000850                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgname - offset byte_910, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000868                            offset __bss_start, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aProgramInvocat - offset byte_910, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000880                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aPrognameFull - offset byte_910, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000898                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_910, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000008B0                            offset __bss_start, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aStderr - offset byte_910, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000008C8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008E0                 Elf64_Sym <offset aOptind - offset byte_910, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008E0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008F8                 Elf64_Sym <offset aOptarg - offset byte_910, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008F8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000910 ; ELF String Table
LOAD:0000000000000910 byte_910        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000910                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000911 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000CA0↓o
LOAD:000000000000091B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000922 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:000000000000092F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000939 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000941 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000949 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000950 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000958 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000962 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000968 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000979 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000982 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:000000000000098A aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000990 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000990                                         ; LOAD:0000000000000790↑o
LOAD:0000000000000996 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000996                                         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:00000000000009AE aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000520↑o
LOAD:00000000000009BC aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000009BC                                         ; DATA XREF: LOAD:0000000000000460↑o
LOAD:00000000000009D3 aStrtok         db 'strtok',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009DA aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009E1 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000009E8 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000009EF aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A00 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000A07 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000A0F aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A1D aPutenv         db 'putenv',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000A24 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000A2B aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000A31 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A38 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000A3F aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A46 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A4E aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A5A aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000A68 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000A6F aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000A76 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000A81 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000A88 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000A97 aReadlink       db 'readlink',0         ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000AA0 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000AAC aExecvp         db 'execvp',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000AB3 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000ABA aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000AC1 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000ACC aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000AD3 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000AD3                                         ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000AF1 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000AF1                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B05 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000B14 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000B1C aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000B1C                                         ; LOAD:0000000000000400↑o
LOAD:0000000000000B2B aAccess         db 'access',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B32 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B32                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B44 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B4B aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000B4B                                         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000B5E aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B6D aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000B72 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B7D aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000B8D aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B9A aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000CB0↓o
LOAD:0000000000000BA5 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000CC0↓o
LOAD:0000000000000BAF aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000CD0↓o
LOAD:0000000000000BBB aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000CE0↓o
LOAD:0000000000000BC7 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000CF0↓o
LOAD:0000000000000BD1 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000BD1                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000BED aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BFC aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BFC                                         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000C16 ; ELF GNU Symbol Version Table
LOAD:0000000000000C16                 dw 0
LOAD:0000000000000C18                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000C1A                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 4                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C1E                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000C20                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C28                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 3                    ; readlink@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000C34                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000C36                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C3A                 dw 5                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C3C                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C3E                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000C42                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C46                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000C48                 dw 3                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000C4A                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C4C                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C4E                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C50                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C52                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C54                 dw 3                    ; putenv@@GLIBC_2.2.5
LOAD:0000000000000C56                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C58                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C5A                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C5C                 dw 3                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000C5E                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C60                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C62                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C64                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C66                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C68                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C6A                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C6C                 dw 3                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000000C6E                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C70                 dw 3                    ; access@@GLIBC_2.2.5
LOAD:0000000000000C72                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C74                 dw 3                    ; strtok@@GLIBC_2.2.5
LOAD:0000000000000C76                 dw 3                    ; execvp@@GLIBC_2.2.5
LOAD:0000000000000C78                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C7A                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C7C                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C7E                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C80                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C82                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C84                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C86                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C88                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C8A                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C8C                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C8E                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C90                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C92                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C94                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C96                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C98                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C9A                 dw 0
LOAD:0000000000000C9C                 dw 0
LOAD:0000000000000C9E                 dw 0
LOAD:0000000000000CA0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000CA0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_910, 10h, 0> ; "libc.so.6"
LOAD:0000000000000CB0                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_910, \ ; "GLIBC_2.14"
LOAD:0000000000000CB0                                10h>
LOAD:0000000000000CC0                 Elf64_Vernaux <0D696914h, 0, 5, offset aGlibc24 - offset byte_910, \ ; "GLIBC_2.4"
LOAD:0000000000000CC0                                10h>
LOAD:0000000000000CD0                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_910, \ ; "GLIBC_2.3.4"
LOAD:0000000000000CD0                                10h>
LOAD:0000000000000CE0                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_910, \ ; "GLIBC_2.2.5"
LOAD:0000000000000CE0                                10h>
LOAD:0000000000000CF0                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_910, 0> ; "GLIBC_2.3"
LOAD:0000000000000D00 ; ELF RELA Relocation Table
LOAD:0000000000000D00                 Elf64_Rela <20AAD0h, 8, 20B0h> ; R_X86_64_RELATIVE +20B0h
LOAD:0000000000000D18                 Elf64_Rela <20AAD8h, 8, 2070h> ; R_X86_64_RELATIVE +2070h
LOAD:0000000000000D30                 Elf64_Rela <20AAE0h, 8, 7B7Fh> ; R_X86_64_RELATIVE +7B7Fh
LOAD:0000000000000D48                 Elf64_Rela <20AB00h, 8, 7B85h> ; R_X86_64_RELATIVE +7B85h
LOAD:0000000000000D60                 Elf64_Rela <20AB20h, 8, 825Ch> ; R_X86_64_RELATIVE +825Ch
LOAD:0000000000000D78                 Elf64_Rela <20AB40h, 8, 7B8Ch> ; R_X86_64_RELATIVE +7B8Ch
LOAD:0000000000000D90                 Elf64_Rela <20AB60h, 8, 7B91h> ; R_X86_64_RELATIVE +7B91h
LOAD:0000000000000DA8                 Elf64_Rela <20ABA0h, 8, 82C9h> ; R_X86_64_RELATIVE +82C9h
LOAD:0000000000000DC0                 Elf64_Rela <20ABA8h, 8, 82D1h> ; R_X86_64_RELATIVE +82D1h
LOAD:0000000000000DD8                 Elf64_Rela <20ABB0h, 8, 82D7h> ; R_X86_64_RELATIVE +82D7h
LOAD:0000000000000DF0                 Elf64_Rela <20ABB8h, 8, 82E4h> ; R_X86_64_RELATIVE +82E4h
LOAD:0000000000000E08                 Elf64_Rela <20ABC0h, 8, 82F1h> ; R_X86_64_RELATIVE +82F1h
LOAD:0000000000000E20                 Elf64_Rela <20ABC8h, 8, 8305h> ; R_X86_64_RELATIVE +8305h
LOAD:0000000000000E38                 Elf64_Rela <20ABD0h, 8, 8307h> ; R_X86_64_RELATIVE +8307h
LOAD:0000000000000E50                 Elf64_Rela <20ABD8h, 8, 82EAh> ; R_X86_64_RELATIVE +82EAh
LOAD:0000000000000E68                 Elf64_Rela <20ABE0h, 8, 7A7Ch> ; R_X86_64_RELATIVE +7A7Ch
LOAD:0000000000000E80                 Elf64_Rela <20ABE8h, 8, 830Fh> ; R_X86_64_RELATIVE +830Fh
LOAD:0000000000000E98                 Elf64_Rela <20B008h, 8, 20B008h> ; R_X86_64_RELATIVE +20B008h
LOAD:0000000000000EB0                 Elf64_Rela <20B010h, 8, 8251h> ; R_X86_64_RELATIVE +8251h
LOAD:0000000000000EC8                 Elf64_Rela <20B060h, 8, 20B070h> ; R_X86_64_RELATIVE +20B070h
LOAD:0000000000000EE0                 Elf64_Rela <20B078h, 8, 20B160h> ; R_X86_64_RELATIVE +20B160h
LOAD:0000000000000EF8                 Elf64_Rela <20AC00h, 2400000001h, 0> ; R_X86_64_64 malloc
LOAD:0000000000000F10                 Elf64_Rela <20AC08h, 2800000001h, 0> ; R_X86_64_64 realloc
LOAD:0000000000000F28                 Elf64_Rela <20AC10h, 400000001h, 0> ; R_X86_64_64 free
LOAD:0000000000000F40                 Elf64_Rela <20AFC8h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000F58                 Elf64_Rela <20AFD0h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000F70                 Elf64_Rela <20AFD8h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F88                 Elf64_Rela <20AFE0h, 3500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000FA0                 Elf64_Rela <20AFE8h, 3800000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000FB8                 Elf64_Rela <20B080h, 3B00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000FD0                 Elf64_Rela <20B088h, 3A00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000FE8                 Elf64_Rela <20B090h, 4000000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001000                 Elf64_Rela <20B098h, 4100000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001018                 Elf64_Rela <20B0A0h, 3D00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001030                 Elf64_Rela <20B0C0h, 3F00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001048 ; ELF JMPREL Relocation Table
LOAD:0000000000001048                 Elf64_Rela <20AE28h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:0000000000001060                 Elf64_Rela <20AE30h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001078                 Elf64_Rela <20AE38h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001090                 Elf64_Rela <20AE40h, 400000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000010A8                 Elf64_Rela <20AE48h, 500000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000010C0                 Elf64_Rela <20AE50h, 600000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000010D8                 Elf64_Rela <20AE58h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000010F0                 Elf64_Rela <20AE60h, 900000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001108                 Elf64_Rela <20AE68h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001120                 Elf64_Rela <20AE70h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:0000000000001138                 Elf64_Rela <20AE78h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001150                 Elf64_Rela <20AE80h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001168                 Elf64_Rela <20AE88h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001180                 Elf64_Rela <20AE90h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001198                 Elf64_Rela <20AE98h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000011B0                 Elf64_Rela <20AEA0h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000011C8                 Elf64_Rela <20AEA8h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000011E0                 Elf64_Rela <20AEB0h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000011F8                 Elf64_Rela <20AEB8h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001210                 Elf64_Rela <20AEC0h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001228                 Elf64_Rela <20AEC8h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001240                 Elf64_Rela <20AED0h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001258                 Elf64_Rela <20AED8h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001270                 Elf64_Rela <20AEE0h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001288                 Elf64_Rela <20AEE8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000012A0                 Elf64_Rela <20AEF0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000012B8                 Elf64_Rela <20AEF8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000012D0                 Elf64_Rela <20AF00h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000012E8                 Elf64_Rela <20AF08h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT putenv
LOAD:0000000000001300                 Elf64_Rela <20AF10h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001318                 Elf64_Rela <20AF18h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001330                 Elf64_Rela <20AF20h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001348                 Elf64_Rela <20AF28h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001360                 Elf64_Rela <20AF30h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001378                 Elf64_Rela <20AF38h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001390                 Elf64_Rela <20AF40h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000013A8                 Elf64_Rela <20AF48h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000013C0                 Elf64_Rela <20AF50h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000013D8                 Elf64_Rela <20AF58h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000013F0                 Elf64_Rela <20AF60h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000001408                 Elf64_Rela <20AF68h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001420                 Elf64_Rela <20AF70h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT access
LOAD:0000000000001438                 Elf64_Rela <20AF78h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001450                 Elf64_Rela <20AF80h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT strtok
LOAD:0000000000001468                 Elf64_Rela <20AF88h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT execvp
LOAD:0000000000001480                 Elf64_Rela <20AF90h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001498                 Elf64_Rela <20AF98h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000014B0                 Elf64_Rela <20AFA0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000014C8                 Elf64_Rela <20AFA8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000014E0                 Elf64_Rela <20AFB0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000014F8                 Elf64_Rela <20AFB8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001510                 Elf64_Rela <20AFC0h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001510 LOAD            ends
LOAD:0000000000001510
.init:0000000000001528 ; ===========================================================================
.init:0000000000001528
.init:0000000000001528 ; Segment type: Pure code
.init:0000000000001528 ; Segment permissions: Read/Execute
.init:0000000000001528 _init           segment dword public 'CODE' use64
.init:0000000000001528                 assume cs:_init
.init:0000000000001528                 ;org 1528h
.init:0000000000001528                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001528
.init:0000000000001528 ; =============== S U B R O U T I N E =======================================
.init:0000000000001528
.init:0000000000001528
.init:0000000000001528                 public _init_proc
.init:0000000000001528 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001528                 sub     rsp, 8          ; _init
.init:000000000000152C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001533                 test    rax, rax
.init:0000000000001536                 jz      short loc_153A
.init:0000000000001538                 call    rax ; __gmon_start__
.init:000000000000153A
.init:000000000000153A loc_153A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000153A                 add     rsp, 8
.init:000000000000153E                 retn
.init:000000000000153E _init_proc      endp
.init:000000000000153E
.init:000000000000153E _init           ends
.init:000000000000153E
LOAD:000000000000153F ; ===========================================================================
LOAD:000000000000153F
LOAD:000000000000153F ; Segment type: Pure code
LOAD:000000000000153F ; Segment permissions: Read/Execute
LOAD:000000000000153F LOAD            segment byte public 'CODE' use64
LOAD:000000000000153F                 assume cs:LOAD
LOAD:000000000000153F                 ;org 153Fh
LOAD:000000000000153F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000153F                 align 20h
LOAD:000000000000153F LOAD            ends
LOAD:000000000000153F
.plt:0000000000001540 ; ===========================================================================
.plt:0000000000001540
.plt:0000000000001540 ; Segment type: Pure code
.plt:0000000000001540 ; Segment permissions: Read/Execute
.plt:0000000000001540 _plt            segment para public 'CODE' use64
.plt:0000000000001540                 assume cs:_plt
.plt:0000000000001540                 ;org 1540h
.plt:0000000000001540                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540
.plt:0000000000001540 sub_1540        proc near               ; CODE XREF: .plt:000000000000155B↓j
.plt:0000000000001540                                         ; .plt:000000000000156B↓j ...
.plt:0000000000001540 ; __unwind {
.plt:0000000000001540                 push    cs:qword_20AE18
.plt:0000000000001546                 jmp     cs:qword_20AE20
.plt:0000000000001546 sub_1540        endp
.plt:0000000000001546
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:000000000000154C                 align 10h
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001550 ___ctype_toupper_loc proc near          ; CODE XREF: main+264↓p
.plt:0000000000001550                                         ; main+490↓p
.plt:0000000000001550                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001550 ___ctype_toupper_loc endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    0
.plt:000000000000155B                 jmp     sub_1540
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; char *getenv(const char *name)
.plt:0000000000001560 _getenv         proc near               ; CODE XREF: main+322↓p
.plt:0000000000001560                                         ; main+528↓p
.plt:0000000000001560                 jmp     cs:getenv_ptr
.plt:0000000000001560 _getenv         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    1
.plt:000000000000156B                 jmp     sub_1540
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000001570                                         ; vasnprintf+6F0↓p ...
.plt:0000000000001570                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001570 ___snprintf_chk endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    2
.plt:000000000000157B                 jmp     sub_1540
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; void free(void *ptr)
.plt:0000000000001580 _free           proc near               ; CODE XREF: main+385↓p
.plt:0000000000001580                                         ; main+3E6↓p ...
.plt:0000000000001580                 jmp     cs:free_ptr
.plt:0000000000001580 _free           endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    3
.plt:000000000000158B                 jmp     sub_1540
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: noreturn thunk
.plt:0000000000001590
.plt:0000000000001590 ; void __noreturn abort(void)
.plt:0000000000001590 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001590                                         ; quotearg_buffer_restyled:def_2A81↓p ...
.plt:0000000000001590                 jmp     cs:abort_ptr
.plt:0000000000001590 _abort          endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    4
.plt:000000000000159B                 jmp     sub_1540
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int *__errno_location(void)
.plt:00000000000015A0 ___errno_location proc near             ; CODE XREF: main+1B3↓p
.plt:00000000000015A0                                         ; main+3F7↓p ...
.plt:00000000000015A0                 jmp     cs:__errno_location_ptr
.plt:00000000000015A0 ___errno_location endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    5
.plt:00000000000015AB                 jmp     sub_1540
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000015B0 _strncmp        proc near               ; CODE XREF: usage+2DC↓p
.plt:00000000000015B0                                         ; usage+39D↓p
.plt:00000000000015B0                 jmp     cs:strncmp_ptr
.plt:00000000000015B0 _strncmp        endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    6
.plt:00000000000015BB                 jmp     sub_1540
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: noreturn thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; void __noreturn _exit(int status)
.plt:00000000000015C0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000015C0                 jmp     cs:_exit_ptr
.plt:00000000000015C0 __exit          endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    7
.plt:00000000000015CB                 jmp     sub_1540
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; size_t __fpending(FILE *fp)
.plt:00000000000015D0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000015D0                 jmp     cs:__fpending_ptr
.plt:00000000000015D0 ___fpending     endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    8
.plt:00000000000015DB                 jmp     sub_1540
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:00000000000015E0 _readlink       proc near               ; CODE XREF: careadlinkatcwd+11↓j
.plt:00000000000015E0                 jmp     cs:readlink_ptr
.plt:00000000000015E0 _readlink       endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    9
.plt:00000000000015EB                 jmp     sub_1540
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; char *textdomain(const char *domainname)
.plt:00000000000015F0 _textdomain     proc near               ; CODE XREF: main+6D↓p
.plt:00000000000015F0                 jmp     cs:textdomain_ptr
.plt:00000000000015F0 _textdomain     endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    0Ah
.plt:00000000000015FB                 jmp     sub_1540
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int fclose(FILE *stream)
.plt:0000000000001600 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001600                                         ; rpl_fclose+6B↓j
.plt:0000000000001600                 jmp     cs:fclose_ptr
.plt:0000000000001600 _fclose         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    0Bh
.plt:000000000000160B                 jmp     sub_1540
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001610 _bindtextdomain proc near               ; CODE XREF: main+61↓p
.plt:0000000000001610                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001610 _bindtextdomain endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    0Ch
.plt:000000000000161B                 jmp     sub_1540
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001620 _dcgettext      proc near               ; CODE XREF: main+1F2↓p
.plt:0000000000001620                                         ; main+443↓p ...
.plt:0000000000001620                 jmp     cs:dcgettext_ptr
.plt:0000000000001620 _dcgettext      endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    0Dh
.plt:000000000000162B                 jmp     sub_1540
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001630 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001630                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001630 ___ctype_get_mb_cur_max endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    0Eh
.plt:000000000000163B                 jmp     sub_1540
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; size_t strlen(const char *s)
.plt:0000000000001640 _strlen         proc near               ; CODE XREF: base_len+4↓p
.plt:0000000000001640                                         ; mfile_name_concat+33↓p ...
.plt:0000000000001640                 jmp     cs:strlen_ptr
.plt:0000000000001640 _strlen         endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    0Fh
.plt:000000000000164B                 jmp     sub_1540
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: noreturn thunk
.plt:0000000000001650
.plt:0000000000001650 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1E5F↓p
.plt:0000000000001650                                         ; quotearg_buffer_restyled:loc_3BE3↓p ...
.plt:0000000000001650                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001650 ___stack_chk_fail endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    10h
.plt:000000000000165B                 jmp     sub_1540
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001660 _getopt_long    proc near               ; CODE XREF: main+A5↓p
.plt:0000000000001660                 jmp     cs:getopt_long_ptr
.plt:0000000000001660 _getopt_long    endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    11h
.plt:000000000000166B                 jmp     sub_1540
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001670 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001670                 jmp     cs:mbrtowc_ptr
.plt:0000000000001670 _mbrtowc        endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    12h
.plt:000000000000167B                 jmp     sub_1540
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; char *strchr(const char *s, int c)
.plt:0000000000001680 _strchr         proc near               ; CODE XREF: main+2D3↓p
.plt:0000000000001680                                         ; xstrtoumax+123↓p ...
.plt:0000000000001680                 jmp     cs:strchr_ptr
.plt:0000000000001680 _strchr         endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    13h
.plt:000000000000168B                 jmp     sub_1540
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; char *strrchr(const char *s, int c)
.plt:0000000000001690 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001690                 jmp     cs:strrchr_ptr
.plt:0000000000001690 _strrchr        endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    14h
.plt:000000000000169B                 jmp     sub_1540
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000016A0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000016A0                                         ; rpl_fseeko+3B↓p
.plt:00000000000016A0                 jmp     cs:lseek_ptr
.plt:00000000000016A0 _lseek          endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    15h
.plt:00000000000016AB                 jmp     sub_1540
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: noreturn thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000016B0 ___assert_fail  proc near               ; CODE XREF: main+5DE↓p
.plt:00000000000016B0                                         ; xstrtoumax+39F↓p
.plt:00000000000016B0                 jmp     cs:__assert_fail_ptr
.plt:00000000000016B0 ___assert_fail  endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    16h
.plt:00000000000016BB                 jmp     sub_1540
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:00000000000016C0 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:00000000000016C0                 jmp     cs:__strtoul_internal_ptr
.plt:00000000000016C0 ___strtoul_internal endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    17h
.plt:00000000000016CB                 jmp     sub_1540
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000016D0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000016D0                                         ; xzalloc+12↓j
.plt:00000000000016D0                 jmp     cs:memset_ptr
.plt:00000000000016D0 _memset         endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    18h
.plt:00000000000016DB                 jmp     sub_1540
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000016E0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000016E0                 jmp     cs:memcmp_ptr
.plt:00000000000016E0 _memcmp         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    19h
.plt:00000000000016EB                 jmp     sub_1540
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000016F0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000016F0                                         ; usage+C2↓p ...
.plt:00000000000016F0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000016F0 _fputs_unlocked endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    1Ah
.plt:00000000000016FB                 jmp     sub_1540
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001700 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001700                 jmp     cs:calloc_ptr
.plt:0000000000001700 _calloc         endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    1Bh
.plt:000000000000170B                 jmp     sub_1540
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int putenv(char *string)
.plt:0000000000001710 _putenv         proc near               ; CODE XREF: main+29D↓p
.plt:0000000000001710                                         ; main+3F0↓p
.plt:0000000000001710                 jmp     cs:putenv_ptr
.plt:0000000000001710 _putenv         endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    1Ch
.plt:000000000000171B                 jmp     sub_1540
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001720 _memcpy         proc near               ; CODE XREF: mdir_name+35↓p
.plt:0000000000001720                                         ; xmemdup+23↓j ...
.plt:0000000000001720                 jmp     cs:memcpy_ptr
.plt:0000000000001720 _memcpy         endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    1Dh
.plt:000000000000172B                 jmp     sub_1540
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; int fileno(FILE *stream)
.plt:0000000000001730 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001730                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001730                 jmp     cs:fileno_ptr
.plt:0000000000001730 _fileno         endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    1Eh
.plt:000000000000173B                 jmp     sub_1540
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001740 ___xstat        proc near               ; CODE XREF: main+373↓p
.plt:0000000000001740                 jmp     cs:__xstat_ptr
.plt:0000000000001740 ___xstat        endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    1Fh
.plt:000000000000174B                 jmp     sub_1540
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; void *malloc(size_t size)
.plt:0000000000001750 _malloc         proc near               ; CODE XREF: mdir_name+1F↓p
.plt:0000000000001750                                         ; mfile_name_concat+97↓p ...
.plt:0000000000001750                 jmp     cs:malloc_ptr
.plt:0000000000001750 _malloc         endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    20h ; ' '
.plt:000000000000175B                 jmp     sub_1540
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; int fflush(FILE *stream)
.plt:0000000000001760 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001760                                         ; rpl_fflush+3B↓j
.plt:0000000000001760                 jmp     cs:fflush_ptr
.plt:0000000000001760 _fflush         endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    21h ; '!'
.plt:000000000000176B                 jmp     sub_1540
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; char *nl_langinfo(nl_item item)
.plt:0000000000001770 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001770                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001770 _nl_langinfo    endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    22h ; '"'
.plt:000000000000177B                 jmp     sub_1540
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; int __freading(FILE *fp)
.plt:0000000000001780 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001780                                         ; rpl_fflush+9↓p
.plt:0000000000001780                 jmp     cs:__freading_ptr
.plt:0000000000001780 ___freading     endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    23h ; '#'
.plt:000000000000178B                 jmp     sub_1540
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001790 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001790                                         ; vasnprintf+285↓p ...
.plt:0000000000001790                 jmp     cs:realloc_ptr
.plt:0000000000001790 _realloc        endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    24h ; '$'
.plt:000000000000179B                 jmp     sub_1540
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; char *setlocale(int category, const char *locale)
.plt:00000000000017A0 _setlocale      proc near               ; CODE XREF: main+4E↓p
.plt:00000000000017A0                                         ; usage+2C3↓p ...
.plt:00000000000017A0                 jmp     cs:setlocale_ptr
.plt:00000000000017A0 _setlocale      endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    25h ; '%'
.plt:00000000000017AB                 jmp     sub_1540
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000017B0                                         ; usage+2B7↓p ...
.plt:00000000000017B0                 jmp     cs:__printf_chk_ptr
.plt:00000000000017B0 ___printf_chk   endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    26h ; '&'
.plt:00000000000017BB                 jmp     sub_1540
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:00000000000017C0 _mempcpy        proc near               ; CODE XREF: mfile_name_concat+AD↓p
.plt:00000000000017C0                                         ; mfile_name_concat+CE↓p
.plt:00000000000017C0                 jmp     cs:mempcpy_ptr
.plt:00000000000017C0 _mempcpy        endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    27h ; '''
.plt:00000000000017CB                 jmp     sub_1540
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000017D0 _error          proc near               ; CODE XREF: main+200↓p
.plt:00000000000017D0                                         ; main+455↓p ...
.plt:00000000000017D0                 jmp     cs:error_ptr
.plt:00000000000017D0 _error          endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    28h ; '('
.plt:00000000000017DB                 jmp     sub_1540
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; int access(const char *name, int type)
.plt:00000000000017E0 _access         proc near               ; CODE XREF: main+588↓p
.plt:00000000000017E0                 jmp     cs:access_ptr
.plt:00000000000017E0 _access         endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    29h ; ')'
.plt:00000000000017EB                 jmp     sub_1540
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000017F0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_589A↓j
.plt:00000000000017F0                 jmp     cs:fseeko_ptr
.plt:00000000000017F0 _fseeko         endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    2Ah ; '*'
.plt:00000000000017FB                 jmp     sub_1540
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; char *strtok(char *s, const char *delim)
.plt:0000000000001800 _strtok         proc near               ; CODE XREF: main+551↓p
.plt:0000000000001800                                         ; main+562↓p
.plt:0000000000001800                 jmp     cs:strtok_ptr
.plt:0000000000001800 _strtok         endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    2Bh ; '+'
.plt:000000000000180B                 jmp     sub_1540
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; int execvp(const char *file, char *const argv[])
.plt:0000000000001810 _execvp         proc near               ; CODE XREF: main+41B↓p
.plt:0000000000001810                 jmp     cs:execvp_ptr
.plt:0000000000001810 _execvp         endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    2Ch ; ','
.plt:000000000000181B                 jmp     sub_1540
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001820 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001820                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001820 ___cxa_atexit   endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    2Dh ; '-'
.plt:000000000000182B                 jmp     sub_1540
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: noreturn thunk
.plt:0000000000001830
.plt:0000000000001830 ; void __noreturn exit(int status)
.plt:0000000000001830 _exit           proc near               ; CODE XREF: main+F4↓p
.plt:0000000000001830                                         ; usage+58↓p
.plt:0000000000001830                 jmp     cs:exit_ptr
.plt:0000000000001830 _exit           endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    2Eh ; '.'
.plt:000000000000183B                 jmp     sub_1540
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001840 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001840                 jmp     cs:fwrite_ptr
.plt:0000000000001840 _fwrite         endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    2Fh ; '/'
.plt:000000000000184B                 jmp     sub_1540
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001850                                         ; version_etc_arn+37↓p ...
.plt:0000000000001850                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001850 ___fprintf_chk  endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    30h ; '0'
.plt:000000000000185B                 jmp     sub_1540
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001860 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001860                 jmp     cs:mbsinit_ptr
.plt:0000000000001860 _mbsinit        endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    31h ; '1'
.plt:000000000000186B                 jmp     sub_1540
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; int iswprint(wint_t wc)
.plt:0000000000001870 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001870                 jmp     cs:iswprint_ptr
.plt:0000000000001870 _iswprint       endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    32h ; '2'
.plt:000000000000187B                 jmp     sub_1540
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001880 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001880                                         ; xstrtoumax+55↓p
.plt:0000000000001880                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001880 ___ctype_b_loc  endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    33h ; '3'
.plt:000000000000188B                 jmp     sub_1540
.plt:000000000000188B ; } // starts at 1540
.plt:000000000000188B _plt            ends
.plt:000000000000188B
.plt.got:0000000000001890 ; ===========================================================================
.plt.got:0000000000001890
.plt.got:0000000000001890 ; Segment type: Pure code
.plt.got:0000000000001890 ; Segment permissions: Read/Execute
.plt.got:0000000000001890 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001890                 assume cs:_plt_got
.plt.got:0000000000001890                 ;org 1890h
.plt.got:0000000000001890                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001890
.plt.got:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001890
.plt.got:0000000000001890 ; Attributes: thunk
.plt.got:0000000000001890
.plt.got:0000000000001890 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001890 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001890 ; __unwind {
.plt.got:0000000000001890                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001890 __cxa_finalize  endp
.plt.got:0000000000001890
.plt.got:0000000000001890 ; ---------------------------------------------------------------------------
.plt.got:0000000000001896                 align 8
.plt.got:0000000000001896 ; } // starts at 1890
.plt.got:0000000000001896 _plt_got        ends
.plt.got:0000000000001896
LOAD:0000000000001898 ; ===========================================================================
LOAD:0000000000001898
LOAD:0000000000001898 ; Segment type: Pure code
LOAD:0000000000001898 ; Segment permissions: Read/Execute
LOAD:0000000000001898 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001898                 assume cs:LOAD
LOAD:0000000000001898                 ;org 1898h
LOAD:0000000000001898                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001898                 align 20h
LOAD:0000000000001898 LOAD            ends
LOAD:0000000000001898
.text:00000000000018A0 ; ===========================================================================
.text:00000000000018A0
.text:00000000000018A0 ; Segment type: Pure code
.text:00000000000018A0 ; Segment permissions: Read/Execute
.text:00000000000018A0 _text           segment para public 'CODE' use64
.text:00000000000018A0                 assume cs:_text
.text:00000000000018A0                 ;org 18A0h
.text:00000000000018A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000018A0
.text:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018A0
.text:00000000000018A0
.text:00000000000018A0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000018A0                 public main
.text:00000000000018A0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000018A0
.text:00000000000018A0 var_128         = qword ptr -128h
.text:00000000000018A0 var_120         = qword ptr -120h
.text:00000000000018A0 string          = qword ptr -110h
.text:00000000000018A0 var_108         = qword ptr -108h
.text:00000000000018A0 filename        = qword ptr -100h
.text:00000000000018A0 var_F8          = qword ptr -0F8h
.text:00000000000018A0 var_F0          = qword ptr -0F0h
.text:00000000000018A0 var_E8          = qword ptr -0E8h
.text:00000000000018A0 stat_buf        = stat ptr -0D8h
.text:00000000000018A0 var_40          = qword ptr -40h
.text:00000000000018A0
.text:00000000000018A0 ; __unwind {
.text:00000000000018A0                 push    r15
.text:00000000000018A2                 push    r14
.text:00000000000018A4                 mov     r15, 100003E00h
.text:00000000000018AE                 push    r13
.text:00000000000018B0                 push    r12
.text:00000000000018B2                 lea     r13, CSWTCH_55
.text:00000000000018B9                 push    rbp
.text:00000000000018BA                 push    rbx
.text:00000000000018BB                 mov     ebp, edi
.text:00000000000018BD                 mov     rbx, rsi
.text:00000000000018C0                 sub     rsp, 0F8h
.text:00000000000018C7                 mov     rdi, [rsi]
.text:00000000000018CA                 mov     rax, fs:28h
.text:00000000000018D3                 mov     [rsp+128h+var_40], rax
.text:00000000000018DB                 xor     eax, eax
.text:00000000000018DD                 call    set_program_name
.text:00000000000018E2                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000018E9                 mov     edi, 6          ; category
.text:00000000000018EE                 call    _setlocale
.text:00000000000018F3                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000018FA                 lea     rdi, domainname ; "coreutils"
.text:0000000000001901                 call    _bindtextdomain
.text:0000000000001906                 lea     rdi, domainname ; "coreutils"
.text:000000000000190D                 call    _textdomain
.text:0000000000001912                 lea     rdi, close_stdout
.text:0000000000001919                 mov     cs:exit_failure, 7Dh ; '}'
.text:0000000000001923                 call    atexit
.text:0000000000001928
.text:0000000000001928 loc_1928:                               ; CODE XREF: main+1D9↓j
.text:0000000000001928                 lea     r12, stdbuf
.text:000000000000192F
.text:000000000000192F loc_192F:                               ; CODE XREF: main+18F↓j
.text:000000000000192F                 lea     rcx, longopts   ; longopts
.text:0000000000001936                 lea     rdx, shortopts  ; "+i:o:e:"
.text:000000000000193D                 xor     r8d, r8d        ; longind
.text:0000000000001940                 mov     rsi, rbx        ; argv
.text:0000000000001943                 mov     edi, ebp        ; argc
.text:0000000000001945                 call    _getopt_long
.text:000000000000194A                 cmp     eax, 0FFFFFFFFh
.text:000000000000194D                 jz      loc_1AAF
.text:0000000000001953                 cmp     eax, 65h ; 'e'
.text:0000000000001956                 jz      short loc_19A7
.text:0000000000001958                 jg      short loc_1999
.text:000000000000195A                 cmp     eax, 0FFFFFF7Dh
.text:000000000000195F                 jnz     loc_1E4D
.text:0000000000001965                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000196C                 mov     rcx, cs:Version
.text:0000000000001973                 lea     r8, aPadraigBrady ; "Padraig Brady"
.text:000000000000197A                 lea     rdx, unk_7A3E
.text:0000000000001981                 lea     rsi, aStdbuf    ; "stdbuf"
.text:0000000000001988                 xor     r9d, r9d
.text:000000000000198B                 xor     eax, eax
.text:000000000000198D                 call    version_etc
.text:0000000000001992                 xor     edi, edi        ; status
.text:0000000000001994                 call    _exit
.text:0000000000001999 ; ---------------------------------------------------------------------------
.text:0000000000001999
.text:0000000000001999 loc_1999:                               ; CODE XREF: main+B8↑j
.text:0000000000001999                 cmp     eax, 69h ; 'i'
.text:000000000000199C                 jz      short loc_19A7
.text:000000000000199E                 cmp     eax, 6Fh ; 'o'
.text:00000000000019A1                 jnz     loc_1AA5
.text:00000000000019A7
.text:00000000000019A7 loc_19A7:                               ; CODE XREF: main+B6↑j
.text:00000000000019A7                                         ; main+FC↑j
.text:00000000000019A7                 lea     edx, [rax-65h]
.text:00000000000019AA                 movsxd  r14, dword ptr [r13+rdx*4+0]
.text:00000000000019AF                 cmp     r14d, 2
.text:00000000000019B3                 ja      loc_1E64
.text:00000000000019B9                 mov     r9, cs:optarg@@GLIBC_2_2_5
.text:00000000000019C0                 lea     rdx, [r14+r14*2]
.text:00000000000019C4                 mov     [r12+rdx*8+8], eax
.text:00000000000019C9                 movsx   edx, byte ptr [r9]
.text:00000000000019CD                 cmp     edx, 20h ; ' '
.text:00000000000019D0                 ja      short loc_1A09
.text:00000000000019D2                 bt      r15, rdx
.text:00000000000019D6                 jnb     short loc_1A09
.text:00000000000019D8                 lea     rdx, [r9+1]
.text:00000000000019DC                 mov     esi, 1
.text:00000000000019E1                 jmp     short loc_19F7
.text:00000000000019E1 ; ---------------------------------------------------------------------------
.text:00000000000019E3                 align 8
.text:00000000000019E8
.text:00000000000019E8 loc_19E8:                               ; CODE XREF: main+167↓j
.text:00000000000019E8                 mov     rdi, rsi
.text:00000000000019EB                 add     rdx, 1
.text:00000000000019EF                 shl     rdi, cl
.text:00000000000019F2                 test    rdi, r15
.text:00000000000019F5                 jz      short loc_1A09
.text:00000000000019F7
.text:00000000000019F7 loc_19F7:                               ; CODE XREF: main+141↑j
.text:00000000000019F7                 mov     cs:optarg@@GLIBC_2_2_5, rdx
.text:00000000000019FE                 movsx   ecx, byte ptr [rdx]
.text:0000000000001A01                 mov     r9, rdx
.text:0000000000001A04                 cmp     ecx, 20h ; ' '
.text:0000000000001A07                 jbe     short loc_19E8
.text:0000000000001A09
.text:0000000000001A09 loc_1A09:                               ; CODE XREF: main+130↑j
.text:0000000000001A09                                         ; main+136↑j ...
.text:0000000000001A09                 lea     rdx, [r14+r14*2]
.text:0000000000001A0D                 cmp     eax, 69h ; 'i'
.text:0000000000001A10                 mov     [r12+rdx*8+10h], r9
.text:0000000000001A15                 jz      short loc_1A7E
.text:0000000000001A17
.text:0000000000001A17 loc_1A17:                               ; CODE XREF: main+1E2↓j
.text:0000000000001A17                 lea     rdi, aSCL+5     ; "L"
.text:0000000000001A1E                 mov     ecx, 2
.text:0000000000001A23                 mov     rsi, r9
.text:0000000000001A26                 repe cmpsb
.text:0000000000001A28                 setnbe  al
.text:0000000000001A2B                 sbb     al, 0
.text:0000000000001A2D                 test    al, al
.text:0000000000001A2F                 jz      loc_192F
.text:0000000000001A35                 lea     r8, aEgkkmptyz0 ; "EGkKMPTYZ0"
.text:0000000000001A3C                 lea     rcx, [rsp+128h+filename]
.text:0000000000001A41                 mov     edx, 0Ah
.text:0000000000001A46                 xor     esi, esi
.text:0000000000001A48                 mov     rdi, r9         ; nptr
.text:0000000000001A4B                 call    xstrtoumax
.text:0000000000001A50                 mov     dword ptr [rsp+128h+var_128], eax
.text:0000000000001A53                 call    ___errno_location
.text:0000000000001A58                 mov     edx, dword ptr [rsp+128h+var_128]
.text:0000000000001A5B                 mov     r8, rax
.text:0000000000001A5E                 test    edx, edx
.text:0000000000001A60                 jnz     loc_1E83
.text:0000000000001A66                 imul    r14, 18h
.text:0000000000001A6A                 mov     dword ptr [rax], 0
.text:0000000000001A70                 mov     rax, [rsp+128h+filename]
.text:0000000000001A75                 mov     [r12+r14], rax
.text:0000000000001A79                 jmp     loc_1928
.text:0000000000001A7E ; ---------------------------------------------------------------------------
.text:0000000000001A7E
.text:0000000000001A7E loc_1A7E:                               ; CODE XREF: main+175↑j
.text:0000000000001A7E                 cmp     byte ptr [r9], 4Ch ; 'L'
.text:0000000000001A82                 jnz     short loc_1A17
.text:0000000000001A84                 lea     rsi, msgid      ; "line buffering stdin is meaningless"
.text:0000000000001A8B                 mov     edx, 5          ; category
.text:0000000000001A90
.text:0000000000001A90 loc_1A90:                               ; CODE XREF: main+63F↓j
.text:0000000000001A90                                         ; main+685↓j
.text:0000000000001A90                 xor     edi, edi        ; domainname
.text:0000000000001A92                 call    _dcgettext
.text:0000000000001A97                 xor     esi, esi        ; errnum
.text:0000000000001A99                 mov     rdx, rax        ; format
.text:0000000000001A9C                 xor     edi, edi        ; status
.text:0000000000001A9E                 xor     eax, eax
.text:0000000000001AA0                 call    _error
.text:0000000000001AA5
.text:0000000000001AA5 loc_1AA5:                               ; CODE XREF: main+101↑j
.text:0000000000001AA5                                         ; main+5B2↓j
.text:0000000000001AA5                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001AAA                 call    usage
.text:0000000000001AAF ; ---------------------------------------------------------------------------
.text:0000000000001AAF
.text:0000000000001AAF loc_1AAF:                               ; CODE XREF: main+AD↑j
.text:0000000000001AAF                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:0000000000001AB6                 sub     ebp, edx
.text:0000000000001AB8                 lea     r15, [rbx+rdx*8]
.text:0000000000001ABC                 test    ebp, ebp
.text:0000000000001ABE                 jle     loc_1ED3
.text:0000000000001AC4                 lea     rbx, stdbuf
.text:0000000000001ACB                 lea     r12, [rsp+128h+string]
.text:0000000000001AD0                 xor     edx, edx
.text:0000000000001AD2                 lea     rbp, [rbx+48h]
.text:0000000000001AD6
.text:0000000000001AD6 loc_1AD6:                               ; CODE XREF: main+2B6↓j
.text:0000000000001AD6                 mov     rax, [rbx+10h]
.text:0000000000001ADA                 test    rax, rax
.text:0000000000001ADD                 jz      short loc_1B4F
.text:0000000000001ADF                 cmp     byte ptr [rax], 4Ch ; 'L'
.text:0000000000001AE2                 mov     ecx, [rbx+8]
.text:0000000000001AE5                 lea     edx, [rcx+80h]
.text:0000000000001AEB                 jz      loc_1D25
.text:0000000000001AF1                 cmp     edx, 17Fh
.text:0000000000001AF7                 mov     r8, [rbx]
.text:0000000000001AFA                 ja      short loc_1B18
.text:0000000000001AFC                 mov     [rsp+128h+var_120], r8
.text:0000000000001B01                 mov     dword ptr [rsp+128h+var_128], ecx
.text:0000000000001B04                 call    ___ctype_toupper_loc
.text:0000000000001B09                 movsxd  rcx, dword ptr [rsp+128h+var_128]
.text:0000000000001B0D                 mov     rax, [rax]
.text:0000000000001B10                 mov     r8, [rsp+128h+var_120]
.text:0000000000001B15                 mov     ecx, [rax+rcx*4]
.text:0000000000001B18
.text:0000000000001B18 loc_1B18:                               ; CODE XREF: main+25A↑j
.text:0000000000001B18                 lea     rdx, aStdbuf_0  ; "_STDBUF_"
.text:0000000000001B1F                 lea     rsi, aSCLu      ; "%s%c=%lu"
.text:0000000000001B26                 mov     rdi, r12
.text:0000000000001B29                 xor     eax, eax
.text:0000000000001B2B                 call    gzprintf
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: main+4B7↓j
.text:0000000000001B30                 test    eax, eax
.text:0000000000001B32                 js      loc_1F9C
.text:0000000000001B38                 mov     rdi, [rsp+128h+string] ; string
.text:0000000000001B3D                 call    _putenv
.text:0000000000001B42                 test    eax, eax
.text:0000000000001B44                 jnz     loc_1F60
.text:0000000000001B4A                 mov     edx, 1
.text:0000000000001B4F
.text:0000000000001B4F loc_1B4F:                               ; CODE XREF: main+23D↑j
.text:0000000000001B4F                 add     rbx, 18h
.text:0000000000001B53                 cmp     rbp, rbx
.text:0000000000001B56                 jnz     loc_1AD6
.text:0000000000001B5C                 test    dl, dl
.text:0000000000001B5E                 jz      loc_1F19
.text:0000000000001B64                 mov     rbx, cs:program_name
.text:0000000000001B6B                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001B70                 mov     rdi, rbx        ; s
.text:0000000000001B73                 call    _strchr
.text:0000000000001B78                 test    rax, rax
.text:0000000000001B7B                 jz      loc_1D5C
.text:0000000000001B81                 mov     rdi, rbx
.text:0000000000001B84                 call    dir_name
.text:0000000000001B89                 mov     cs:program_path, rax
.text:0000000000001B90
.text:0000000000001B90 loc_1B90:                               ; CODE XREF: main+4E7↓j
.text:0000000000001B90                 cmp     cs:program_path, 0
.text:0000000000001B98                 jz      loc_1DA9
.text:0000000000001B9E
.text:0000000000001B9E loc_1B9E:                               ; CODE XREF: main+51C↓j
.text:0000000000001B9E                 lea     rdi, name       ; "LD_PRELOAD"
.text:0000000000001BA5                 lea     rbx, [rsp+128h+var_F8]
.text:0000000000001BAA                 lea     r14, [rsp+128h+filename]
.text:0000000000001BAF                 lea     r13, aLibstdbufSo ; "libstdbuf.so"
.text:0000000000001BB6                 lea     r12, aSS        ; "%s/%s"
.text:0000000000001BBD                 lea     rbp, [rsp+128h+stat_buf]
.text:0000000000001BC2                 call    _getenv
.text:0000000000001BC7                 mov     [rsp+128h+var_128], rax
.text:0000000000001BCB                 mov     rax, cs:program_path
.text:0000000000001BD2                 mov     [rsp+128h+var_E8], 0
.text:0000000000001BDB                 mov     [rsp+128h+var_F8], rax
.text:0000000000001BE0                 lea     rax, aUsrLocalLibexe ; "/usr/local/libexec/coreutils"
.text:0000000000001BE7                 mov     [rsp+128h+var_F0], rax
.text:0000000000001BEC                 jmp     short loc_1C34
.text:0000000000001BEE ; ---------------------------------------------------------------------------
.text:0000000000001BEE
.text:0000000000001BEE loc_1BEE:                               ; CODE XREF: main+39A↓j
.text:0000000000001BEE                 xor     eax, eax
.text:0000000000001BF0                 mov     rcx, r13
.text:0000000000001BF3                 mov     rsi, r12
.text:0000000000001BF6                 mov     rdi, r14
.text:0000000000001BF9                 call    gzprintf
.text:0000000000001BFE                 test    eax, eax
.text:0000000000001C00                 js      loc_1F9C
.text:0000000000001C06                 mov     rsi, [rsp+128h+filename] ; filename
.text:0000000000001C0B                 mov     rdx, rbp        ; stat_buf
.text:0000000000001C0E                 mov     edi, 1          ; ver
.text:0000000000001C13                 call    ___xstat
.text:0000000000001C18                 test    eax, eax
.text:0000000000001C1A                 jz      short loc_1C4D
.text:0000000000001C1C                 mov     rdi, [rsp+128h+filename] ; ptr
.text:0000000000001C21                 add     rbx, 8
.text:0000000000001C25                 call    _free
.text:0000000000001C2A                 cmp     qword ptr [rbx], 0
.text:0000000000001C2E                 jz      loc_1F2A
.text:0000000000001C34
.text:0000000000001C34 loc_1C34:                               ; CODE XREF: main+34C↑j
.text:0000000000001C34                 mov     rdx, [rbx]
.text:0000000000001C37                 cmp     byte ptr [rdx], 0
.text:0000000000001C3A                 jnz     short loc_1BEE
.text:0000000000001C3C                 lea     rdi, aLibstdbufSo ; "libstdbuf.so"
.text:0000000000001C43                 call    xstrdup
.text:0000000000001C48                 mov     [rsp+128h+filename], rax
.text:0000000000001C4D
.text:0000000000001C4D loc_1C4D:                               ; CODE XREF: main+37A↑j
.text:0000000000001C4D                 mov     rcx, [rsp+128h+var_128]
.text:0000000000001C51                 mov     r8, [rsp+128h+filename]
.text:0000000000001C56                 lea     rdi, [rsp+128h+var_108]
.text:0000000000001C5B                 test    rcx, rcx
.text:0000000000001C5E                 jz      loc_1D8C
.text:0000000000001C64                 lea     rdx, name       ; "LD_PRELOAD"
.text:0000000000001C6B                 lea     rsi, aSSS       ; "%s=%s:%s"
.text:0000000000001C72                 xor     eax, eax
.text:0000000000001C74                 call    gzprintf
.text:0000000000001C79
.text:0000000000001C79 loc_1C79:                               ; CODE XREF: main+504↓j
.text:0000000000001C79                 test    eax, eax
.text:0000000000001C7B                 js      loc_1F9C
.text:0000000000001C81                 mov     rdi, [rsp+128h+filename] ; ptr
.text:0000000000001C86                 call    _free
.text:0000000000001C8B                 mov     rdi, [rsp+128h+var_108] ; string
.text:0000000000001C90                 call    _putenv
.text:0000000000001C95                 mov     ebx, eax
.text:0000000000001C97                 call    ___errno_location
.text:0000000000001C9C                 test    ebx, ebx
.text:0000000000001C9E                 mov     rbp, rax
.text:0000000000001CA1                 jnz     loc_1EE4
.text:0000000000001CA7                 mov     rdi, cs:program_path ; ptr
.text:0000000000001CAE                 xor     ebx, ebx
.text:0000000000001CB0                 call    _free
.text:0000000000001CB5                 mov     rdi, [r15]      ; file
.text:0000000000001CB8                 mov     rsi, r15        ; argv
.text:0000000000001CBB                 call    _execvp
.text:0000000000001CC0                 cmp     dword ptr [rbp+0], 2
.text:0000000000001CC4                 mov     rdi, [r15]
.text:0000000000001CC7                 setz    bl
.text:0000000000001CCA                 call    quote
.text:0000000000001CCF                 lea     rsi, aFailedToRunCom ; "failed to run command %s"
.text:0000000000001CD6                 xor     edi, edi        ; domainname
.text:0000000000001CD8                 mov     edx, 5          ; category
.text:0000000000001CDD                 mov     r12, rax
.text:0000000000001CE0                 add     ebx, 7Eh ; '~'
.text:0000000000001CE3                 call    _dcgettext
.text:0000000000001CE8                 mov     esi, [rbp+0]    ; errnum
.text:0000000000001CEB                 mov     rdx, rax        ; format
.text:0000000000001CEE                 xor     edi, edi        ; status
.text:0000000000001CF0                 xor     eax, eax
.text:0000000000001CF2                 mov     rcx, r12
.text:0000000000001CF5                 call    _error
.text:0000000000001CFA                 mov     eax, ebx
.text:0000000000001CFC                 mov     rbx, [rsp+128h+var_40]
.text:0000000000001D04                 xor     rbx, fs:28h
.text:0000000000001D0D                 jnz     loc_1E5F
.text:0000000000001D13                 add     rsp, 0F8h
.text:0000000000001D1A                 pop     rbx
.text:0000000000001D1B                 pop     rbp
.text:0000000000001D1C                 pop     r12
.text:0000000000001D1E                 pop     r13
.text:0000000000001D20                 pop     r14
.text:0000000000001D22                 pop     r15
.text:0000000000001D24                 retn
.text:0000000000001D25 ; ---------------------------------------------------------------------------
.text:0000000000001D25
.text:0000000000001D25 loc_1D25:                               ; CODE XREF: main+24B↑j
.text:0000000000001D25                 cmp     edx, 17Fh
.text:0000000000001D2B                 ja      short loc_1D3F
.text:0000000000001D2D                 mov     dword ptr [rsp+128h+var_128], ecx
.text:0000000000001D30                 call    ___ctype_toupper_loc
.text:0000000000001D35                 movsxd  rcx, dword ptr [rsp+128h+var_128]
.text:0000000000001D39                 mov     rax, [rax]
.text:0000000000001D3C                 mov     ecx, [rax+rcx*4]
.text:0000000000001D3F
.text:0000000000001D3F loc_1D3F:                               ; CODE XREF: main+48B↑j
.text:0000000000001D3F                 lea     rdx, aStdbuf_0  ; "_STDBUF_"
.text:0000000000001D46                 lea     rsi, aSCL       ; "%s%c=L"
.text:0000000000001D4D                 mov     rdi, r12
.text:0000000000001D50                 xor     eax, eax
.text:0000000000001D52                 call    gzprintf
.text:0000000000001D57                 jmp     loc_1B30
.text:0000000000001D5C ; ---------------------------------------------------------------------------
.text:0000000000001D5C
.text:0000000000001D5C loc_1D5C:                               ; CODE XREF: main+2DB↑j
.text:0000000000001D5C                 lea     rdi, aProcSelfExe ; "/proc/self/exe"
.text:0000000000001D63                 call    xreadlink
.text:0000000000001D68                 test    rax, rax
.text:0000000000001D6B                 mov     rbp, rax
.text:0000000000001D6E                 jz      short loc_1DC1
.text:0000000000001D70                 mov     rdi, rax
.text:0000000000001D73                 call    dir_name
.text:0000000000001D78                 mov     cs:program_path, rax
.text:0000000000001D7F
.text:0000000000001D7F loc_1D7F:                               ; CODE XREF: main+533↓j
.text:0000000000001D7F                                         ; main+56A↓j ...
.text:0000000000001D7F                 mov     rdi, rbp        ; ptr
.text:0000000000001D82                 call    _free
.text:0000000000001D87                 jmp     loc_1B90
.text:0000000000001D8C ; ---------------------------------------------------------------------------
.text:0000000000001D8C
.text:0000000000001D8C loc_1D8C:                               ; CODE XREF: main+3BE↑j
.text:0000000000001D8C                 lea     rdx, name       ; "LD_PRELOAD"
.text:0000000000001D93                 lea     rsi, aSS_0      ; "%s=%s"
.text:0000000000001D9A                 mov     rcx, r8
.text:0000000000001D9D                 xor     eax, eax
.text:0000000000001D9F                 call    gzprintf
.text:0000000000001DA4                 jmp     loc_1C79
.text:0000000000001DA9 ; ---------------------------------------------------------------------------
.text:0000000000001DA9
.text:0000000000001DA9 loc_1DA9:                               ; CODE XREF: main+2F8↑j
.text:0000000000001DA9                 lea     rdi, aUsrLocalLibCor ; "/usr/local/lib/coreutils"
.text:0000000000001DB0                 call    xstrdup
.text:0000000000001DB5                 mov     cs:program_path, rax
.text:0000000000001DBC                 jmp     loc_1B9E
.text:0000000000001DC1 ; ---------------------------------------------------------------------------
.text:0000000000001DC1
.text:0000000000001DC1 loc_1DC1:                               ; CODE XREF: main+4CE↑j
.text:0000000000001DC1                 lea     rdi, aPath      ; "PATH"
.text:0000000000001DC8                 call    _getenv
.text:0000000000001DCD                 test    rax, rax
.text:0000000000001DD0                 mov     rbp, rax
.text:0000000000001DD3                 jz      short loc_1D7F
.text:0000000000001DD5                 mov     rdi, rax        ; src
.text:0000000000001DD8                 lea     r13, shortopts+6 ; ":"
.text:0000000000001DDF                 call    xstrdup
.text:0000000000001DE4                 lea     rsi, shortopts+6 ; delim
.text:0000000000001DEB                 mov     rdi, rax        ; s
.text:0000000000001DEE                 mov     rbp, rax
.text:0000000000001DF1                 call    _strtok
.text:0000000000001DF6                 jmp     short loc_1E07
.text:0000000000001DF8 ; ---------------------------------------------------------------------------
.text:0000000000001DF8
.text:0000000000001DF8 loc_1DF8:                               ; CODE XREF: main+592↓j
.text:0000000000001DF8                 call    _free
.text:0000000000001DFD                 mov     rsi, r13        ; delim
.text:0000000000001E00                 xor     edi, edi        ; s
.text:0000000000001E02                 call    _strtok
.text:0000000000001E07
.text:0000000000001E07 loc_1E07:                               ; CODE XREF: main+556↑j
.text:0000000000001E07                 test    rax, rax
.text:0000000000001E0A                 jz      loc_1D7F
.text:0000000000001E10                 xor     edx, edx
.text:0000000000001E12                 mov     rsi, rbx
.text:0000000000001E15                 mov     rdi, rax
.text:0000000000001E18                 call    file_name_concat
.text:0000000000001E1D                 mov     esi, 1          ; type
.text:0000000000001E22                 mov     rdi, rax        ; name
.text:0000000000001E25                 mov     r12, rax
.text:0000000000001E28                 call    _access
.text:0000000000001E2D                 test    eax, eax
.text:0000000000001E2F                 mov     rdi, r12        ; ptr
.text:0000000000001E32                 jnz     short loc_1DF8
.text:0000000000001E34                 call    dir_name
.text:0000000000001E39                 mov     rdi, r12        ; ptr
.text:0000000000001E3C                 mov     cs:program_path, rax
.text:0000000000001E43                 call    _free
.text:0000000000001E48                 jmp     loc_1D7F
.text:0000000000001E4D ; ---------------------------------------------------------------------------
.text:0000000000001E4D
.text:0000000000001E4D loc_1E4D:                               ; CODE XREF: main+BF↑j
.text:0000000000001E4D                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001E52                 jnz     loc_1AA5
.text:0000000000001E58                 xor     edi, edi        ; status
.text:0000000000001E5A                 call    usage
.text:0000000000001E5F ; ---------------------------------------------------------------------------
.text:0000000000001E5F
.text:0000000000001E5F loc_1E5F:                               ; CODE XREF: main+46D↑j
.text:0000000000001E5F                 call    ___stack_chk_fail
.text:0000000000001E64 ; ---------------------------------------------------------------------------
.text:0000000000001E64
.text:0000000000001E64 loc_1E64:                               ; CODE XREF: main+113↑j
.text:0000000000001E64                 lea     rcx, __PRETTY_FUNCTION___7688 ; "main"
.text:0000000000001E6B                 lea     rsi, file       ; "../coreutils-8.31/src/stdbuf.c"
.text:0000000000001E72                 lea     rdi, assertion  ; "0 <= opt_fileno && opt_fileno < ARRAY_C"...
.text:0000000000001E79                 mov     edx, 150h       ; line
.text:0000000000001E7E                 call    ___assert_fail
.text:0000000000001E83 ; ---------------------------------------------------------------------------
.text:0000000000001E83
.text:0000000000001E83 loc_1E83:                               ; CODE XREF: main+1C0↑j
.text:0000000000001E83                 sub     edx, 1
.text:0000000000001E86                 jz      short loc_1ECC
.text:0000000000001E88                 mov     eax, [rax]
.text:0000000000001E8A
.text:0000000000001E8A loc_1E8A:                               ; CODE XREF: main+631↓j
.text:0000000000001E8A                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001E91                 mov     [r8], eax
.text:0000000000001E94                 mov     [rsp+128h+var_128], r8
.text:0000000000001E98                 call    quote
.text:0000000000001E9D                 lea     rsi, aInvalidModeS ; "invalid mode %s"
.text:0000000000001EA4                 mov     edx, 5          ; category
.text:0000000000001EA9                 xor     edi, edi        ; domainname
.text:0000000000001EAB                 mov     rbx, rax
.text:0000000000001EAE                 call    _dcgettext
.text:0000000000001EB3                 mov     r8, [rsp+128h+var_128]
.text:0000000000001EB7                 mov     rdx, rax        ; format
.text:0000000000001EBA                 mov     rcx, rbx
.text:0000000000001EBD                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001EC2                 xor     eax, eax
.text:0000000000001EC4                 mov     esi, [r8]       ; errnum
.text:0000000000001EC7                 call    _error
.text:0000000000001ECC
.text:0000000000001ECC loc_1ECC:                               ; CODE XREF: main+5E6↑j
.text:0000000000001ECC                 mov     eax, 4Bh ; 'K'
.text:0000000000001ED1                 jmp     short loc_1E8A
.text:0000000000001ED3 ; ---------------------------------------------------------------------------
.text:0000000000001ED3
.text:0000000000001ED3 loc_1ED3:                               ; CODE XREF: main+21E↑j
.text:0000000000001ED3                 mov     edx, 5
.text:0000000000001ED8                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000001EDF                 jmp     loc_1A90
.text:0000000000001EE4 ; ---------------------------------------------------------------------------
.text:0000000000001EE4
.text:0000000000001EE4 loc_1EE4:                               ; CODE XREF: main+401↑j
.text:0000000000001EE4                 mov     rdi, [rsp+128h+var_108]
.text:0000000000001EE9                 call    quote
.text:0000000000001EEE                 lea     rsi, aFailedToUpdate ; "failed to update the environment with %"...
.text:0000000000001EF5                 mov     edx, 5          ; category
.text:0000000000001EFA                 xor     edi, edi        ; domainname
.text:0000000000001EFC                 mov     rbx, rax
.text:0000000000001EFF                 call    _dcgettext
.text:0000000000001F04                 mov     esi, [rbp+0]    ; errnum
.text:0000000000001F07                 mov     rdx, rax        ; format
.text:0000000000001F0A                 mov     rcx, rbx
.text:0000000000001F0D                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001F12                 xor     eax, eax
.text:0000000000001F14                 call    _error
.text:0000000000001F19
.text:0000000000001F19 loc_1F19:                               ; CODE XREF: main+2BE↑j
.text:0000000000001F19                 mov     edx, 5
.text:0000000000001F1E                 lea     rsi, aYouMustSpecify ; "you must specify a buffering mode optio"...
.text:0000000000001F25                 jmp     loc_1A90
.text:0000000000001F2A ; ---------------------------------------------------------------------------
.text:0000000000001F2A
.text:0000000000001F2A loc_1F2A:                               ; CODE XREF: main+38E↑j
.text:0000000000001F2A                 lea     rdi, aLibstdbufSo ; "libstdbuf.so"
.text:0000000000001F31                 call    quote
.text:0000000000001F36                 lea     rsi, aFailedToFindS ; "failed to find %s"
.text:0000000000001F3D                 mov     rbx, rax
.text:0000000000001F40                 mov     edx, 5          ; category
.text:0000000000001F45                 xor     edi, edi        ; domainname
.text:0000000000001F47                 call    _dcgettext
.text:0000000000001F4C                 mov     rcx, rbx
.text:0000000000001F4F                 mov     rdx, rax        ; format
.text:0000000000001F52                 xor     esi, esi        ; errnum
.text:0000000000001F54                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001F59                 xor     eax, eax
.text:0000000000001F5B                 call    _error
.text:0000000000001F60
.text:0000000000001F60 loc_1F60:                               ; CODE XREF: main+2A4↑j
.text:0000000000001F60                 mov     rdi, [rsp+128h+string]
.text:0000000000001F65                 call    quote
.text:0000000000001F6A                 lea     rsi, aFailedToUpdate ; "failed to update the environment with %"...
.text:0000000000001F71                 mov     edx, 5          ; category
.text:0000000000001F76                 xor     edi, edi        ; domainname
.text:0000000000001F78                 mov     rbp, rax
.text:0000000000001F7B                 call    _dcgettext
.text:0000000000001F80                 mov     rbx, rax
.text:0000000000001F83                 call    ___errno_location
.text:0000000000001F88                 mov     esi, [rax]      ; errnum
.text:0000000000001F8A                 mov     rcx, rbp
.text:0000000000001F8D                 mov     rdx, rbx        ; format
.text:0000000000001F90                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001F95                 xor     eax, eax
.text:0000000000001F97                 call    _error
.text:0000000000001F9C
.text:0000000000001F9C loc_1F9C:                               ; CODE XREF: main+292↑j
.text:0000000000001F9C                                         ; main+360↑j ...
.text:0000000000001F9C                 call    xalloc_die
.text:0000000000001F9C ; } // starts at 18A0
.text:0000000000001F9C main            endp
.text:0000000000001F9C
.text:0000000000001F9C ; ---------------------------------------------------------------------------
.text:0000000000001FA1                 align 10h
.text:0000000000001FB0
.text:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FB0
.text:0000000000001FB0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001FB0
.text:0000000000001FB0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001FB0                 public start
.text:0000000000001FB0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001FB0 ; __unwind {
.text:0000000000001FB0                 xor     ebp, ebp
.text:0000000000001FB2                 mov     r9, rdx         ; rtld_fini
.text:0000000000001FB5                 pop     rsi             ; argc
.text:0000000000001FB6                 mov     rdx, rsp        ; ubp_av
.text:0000000000001FB9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001FBD                 push    rax
.text:0000000000001FBE                 push    rsp             ; stack_end
.text:0000000000001FBF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001FC6                 lea     rcx, __libc_csu_init ; init
.text:0000000000001FCD                 lea     rdi, main       ; main
.text:0000000000001FD4                 call    cs:__libc_start_main_ptr
.text:0000000000001FDA                 hlt
.text:0000000000001FDA ; } // starts at 1FB0
.text:0000000000001FDA start           endp
.text:0000000000001FDA
.text:0000000000001FDA ; ---------------------------------------------------------------------------
.text:0000000000001FDB                 align 20h
.text:0000000000001FE0
.text:0000000000001FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FE0
.text:0000000000001FE0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001FE0
.text:0000000000001FE0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2093↓p
.text:0000000000001FE0                 lea     rdi, __bss_start
.text:0000000000001FE7                 push    rbp
.text:0000000000001FE8                 lea     rax, __bss_start
.text:0000000000001FEF                 cmp     rax, rdi
.text:0000000000001FF2                 mov     rbp, rsp
.text:0000000000001FF5                 jz      short loc_2010
.text:0000000000001FF7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001FFE                 test    rax, rax
.text:0000000000002001                 jz      short loc_2010
.text:0000000000002003                 pop     rbp
.text:0000000000002004                 jmp     rax
.text:0000000000002004 ; ---------------------------------------------------------------------------
.text:0000000000002006                 align 10h
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002010                                         ; deregister_tm_clones+21↑j
.text:0000000000002010                 pop     rbp
.text:0000000000002011                 retn
.text:0000000000002011 deregister_tm_clones endp
.text:0000000000002011
.text:0000000000002011 ; ---------------------------------------------------------------------------
.text:0000000000002012                 align 20h
.text:0000000000002020
.text:0000000000002020 ; =============== S U B R O U T I N E =======================================
.text:0000000000002020
.text:0000000000002020 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002020
.text:0000000000002020 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002020                 lea     rdi, __bss_start
.text:0000000000002027                 lea     rsi, __bss_start
.text:000000000000202E                 push    rbp
.text:000000000000202F                 sub     rsi, rdi
.text:0000000000002032                 mov     rbp, rsp
.text:0000000000002035                 sar     rsi, 3
.text:0000000000002039                 mov     rax, rsi
.text:000000000000203C                 shr     rax, 3Fh
.text:0000000000002040                 add     rsi, rax
.text:0000000000002043                 sar     rsi, 1
.text:0000000000002046                 jz      short loc_2060
.text:0000000000002048                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000204F                 test    rax, rax
.text:0000000000002052                 jz      short loc_2060
.text:0000000000002054                 pop     rbp
.text:0000000000002055                 jmp     rax
.text:0000000000002055 ; ---------------------------------------------------------------------------
.text:0000000000002057                 align 20h
.text:0000000000002060
.text:0000000000002060 loc_2060:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002060                                         ; register_tm_clones+32↑j
.text:0000000000002060                 pop     rbp
.text:0000000000002061                 retn
.text:0000000000002061 register_tm_clones endp
.text:0000000000002061
.text:0000000000002061 ; ---------------------------------------------------------------------------
.text:0000000000002062                 align 10h
.text:0000000000002070
.text:0000000000002070 ; =============== S U B R O U T I N E =======================================
.text:0000000000002070
.text:0000000000002070 ; Attributes: info_from_lumina
.text:0000000000002070
.text:0000000000002070 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002070                 cmp     cs:completed_7697, 0
.text:0000000000002077                 jnz     short locret_20A8
.text:0000000000002079                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002081                 push    rbp
.text:0000000000002082                 mov     rbp, rsp
.text:0000000000002085                 jz      short loc_2093
.text:0000000000002087                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000208E                 call    __cxa_finalize
.text:0000000000002093
.text:0000000000002093 loc_2093:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002093                 call    deregister_tm_clones
.text:0000000000002098                 mov     cs:completed_7697, 1
.text:000000000000209F                 pop     rbp
.text:00000000000020A0                 retn
.text:00000000000020A0 ; ---------------------------------------------------------------------------
.text:00000000000020A1                 align 8
.text:00000000000020A8
.text:00000000000020A8 locret_20A8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000020A8                 rep retn
.text:00000000000020A8 __do_global_dtors_aux endp
.text:00000000000020A8
.text:00000000000020A8 ; ---------------------------------------------------------------------------
.text:00000000000020AA                 align 10h
.text:00000000000020B0
.text:00000000000020B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020B0
.text:00000000000020B0 ; Attributes: bp-based frame
.text:00000000000020B0
.text:00000000000020B0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000020B0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000020B0                 push    rbp
.text:00000000000020B1                 mov     rbp, rsp
.text:00000000000020B4                 pop     rbp
.text:00000000000020B5                 jmp     register_tm_clones
.text:00000000000020B5 frame_dummy     endp
.text:00000000000020B5
.text:00000000000020B5 ; ---------------------------------------------------------------------------
.text:00000000000020BA                 align 20h
.text:00000000000020C0
.text:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020C0
.text:00000000000020C0 ; Attributes: noreturn
.text:00000000000020C0
.text:00000000000020C0 ; void __fastcall __noreturn usage(int status)
.text:00000000000020C0                 public usage
.text:00000000000020C0 usage           proc near               ; CODE XREF: main+20A↑p
.text:00000000000020C0                                         ; main+5BA↑p
.text:00000000000020C0
.text:00000000000020C0 var_A8          = qword ptr -0A8h
.text:00000000000020C0 var_A0          = qword ptr -0A0h
.text:00000000000020C0 var_98          = qword ptr -98h
.text:00000000000020C0 var_90          = qword ptr -90h
.text:00000000000020C0 var_88          = qword ptr -88h
.text:00000000000020C0 var_80          = qword ptr -80h
.text:00000000000020C0 var_78          = qword ptr -78h
.text:00000000000020C0 var_70          = qword ptr -70h
.text:00000000000020C0 var_68          = qword ptr -68h
.text:00000000000020C0 var_60          = qword ptr -60h
.text:00000000000020C0 var_58          = qword ptr -58h
.text:00000000000020C0 var_50          = qword ptr -50h
.text:00000000000020C0 var_48          = qword ptr -48h
.text:00000000000020C0 var_40          = qword ptr -40h
.text:00000000000020C0 var_30          = qword ptr -30h
.text:00000000000020C0
.text:00000000000020C0 ; __unwind {
.text:00000000000020C0                 push    r13
.text:00000000000020C2                 push    r12
.text:00000000000020C4                 mov     edx, 5          ; category
.text:00000000000020C9                 push    rbp
.text:00000000000020CA                 push    rbx
.text:00000000000020CB                 mov     ebp, edi
.text:00000000000020CD                 sub     rsp, 88h
.text:00000000000020D4                 mov     rbx, cs:program_name
.text:00000000000020DB                 mov     rax, fs:28h
.text:00000000000020E4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000020E9                 xor     eax, eax
.text:00000000000020EB                 test    edi, edi
.text:00000000000020ED                 jz      short loc_211D
.text:00000000000020EF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000020F6                 xor     edi, edi        ; domainname
.text:00000000000020F8                 call    _dcgettext
.text:00000000000020FD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002104                 mov     rdx, rax
.text:0000000000002107                 mov     rcx, rbx
.text:000000000000210A                 mov     esi, 1
.text:000000000000210F                 xor     eax, eax
.text:0000000000002111                 call    ___fprintf_chk
.text:0000000000002116
.text:0000000000002116 loc_2116:                               ; CODE XREF: usage+356↓j
.text:0000000000002116                 mov     edi, ebp        ; status
.text:0000000000002118                 call    _exit
.text:000000000000211D ; ---------------------------------------------------------------------------
.text:000000000000211D
.text:000000000000211D loc_211D:                               ; CODE XREF: usage+2D↑j
.text:000000000000211D                 lea     rsi, aUsageSOptionCo ; "Usage: %s OPTION... COMMAND\n"
.text:0000000000002124                 xor     edi, edi        ; domainname
.text:0000000000002126                 call    _dcgettext
.text:000000000000212B                 mov     rdx, rbx
.text:000000000000212E                 mov     rsi, rax
.text:0000000000002131                 mov     edi, 1
.text:0000000000002136                 xor     eax, eax
.text:0000000000002138                 call    ___printf_chk
.text:000000000000213D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002144                 lea     rsi, aRunCommandWith ; "Run COMMAND, with modified buffering op"...
.text:000000000000214B                 mov     edx, 5          ; category
.text:0000000000002150                 xor     edi, edi        ; domainname
.text:0000000000002152                 call    _dcgettext
.text:0000000000002157                 mov     rsi, rbx        ; stream
.text:000000000000215A                 mov     rdi, rax        ; s
.text:000000000000215D                 call    _fputs_unlocked
.text:0000000000002162                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002169                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002170                 mov     edx, 5          ; category
.text:0000000000002175                 xor     edi, edi        ; domainname
.text:0000000000002177                 call    _dcgettext
.text:000000000000217C                 mov     rsi, rbx        ; stream
.text:000000000000217F                 mov     rdi, rax        ; s
.text:0000000000002182                 call    _fputs_unlocked
.text:0000000000002187                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000218E                 lea     rsi, aIInputModeAdju ; "  -i, --input=MODE   adjust standard in"...
.text:0000000000002195                 mov     edx, 5          ; category
.text:000000000000219A                 xor     edi, edi        ; domainname
.text:000000000000219C                 call    _dcgettext
.text:00000000000021A1                 mov     rsi, rbx        ; stream
.text:00000000000021A4                 mov     rdi, rax        ; s
.text:00000000000021A7                 call    _fputs_unlocked
.text:00000000000021AC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021B3                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000021BA                 mov     edx, 5          ; category
.text:00000000000021BF                 xor     edi, edi        ; domainname
.text:00000000000021C1                 call    _dcgettext
.text:00000000000021C6                 mov     rsi, rbx        ; stream
.text:00000000000021C9                 mov     rdi, rax        ; s
.text:00000000000021CC                 call    _fputs_unlocked
.text:00000000000021D1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021D8                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000021DF                 mov     edx, 5          ; category
.text:00000000000021E4                 xor     edi, edi        ; domainname
.text:00000000000021E6                 call    _dcgettext
.text:00000000000021EB                 mov     rsi, rbx        ; stream
.text:00000000000021EE                 mov     rdi, rax        ; s
.text:00000000000021F1                 call    _fputs_unlocked
.text:00000000000021F6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021FD                 lea     rsi, aIfModeIsLTheCo ; "\nIf MODE is 'L' the corresponding stre"...
.text:0000000000002204                 mov     edx, 5          ; category
.text:0000000000002209                 xor     edi, edi        ; domainname
.text:000000000000220B                 call    _dcgettext
.text:0000000000002210                 mov     rsi, rbx        ; stream
.text:0000000000002213                 mov     rdi, rax        ; s
.text:0000000000002216                 call    _fputs_unlocked
.text:000000000000221B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002222                 lea     rsi, aIfModeIs0TheCo ; "\nIf MODE is '0' the corresponding stre"...
.text:0000000000002229                 mov     edx, 5          ; category
.text:000000000000222E                 xor     edi, edi        ; domainname
.text:0000000000002230                 call    _dcgettext
.text:0000000000002235                 mov     rsi, rbx        ; stream
.text:0000000000002238                 mov     rdi, rax        ; s
.text:000000000000223B                 call    _fputs_unlocked
.text:0000000000002240                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002247                 lea     rsi, aOtherwiseModeI ; "\nOtherwise MODE is a number which may "...
.text:000000000000224E                 mov     edx, 5          ; category
.text:0000000000002253                 xor     edi, edi        ; domainname
.text:0000000000002255                 call    _dcgettext
.text:000000000000225A                 mov     rsi, rbx        ; stream
.text:000000000000225D                 mov     rdi, rax        ; s
.text:0000000000002260                 call    _fputs_unlocked
.text:0000000000002265                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000226C                 lea     rsi, aNoteIfCommandA ; "\nNOTE: If COMMAND adjusts the bufferin"...
.text:0000000000002273                 mov     edx, 5          ; category
.text:0000000000002278                 xor     edi, edi        ; domainname
.text:000000000000227A                 call    _dcgettext
.text:000000000000227F                 mov     rsi, rbx        ; stream
.text:0000000000002282                 mov     rdi, rax        ; s
.text:0000000000002285                 lea     rbx, aStdbuf    ; "stdbuf"
.text:000000000000228C                 call    _fputs_unlocked
.text:0000000000002291                 lea     rax, asc_79C8   ; "["
.text:0000000000002298                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000229F                 mov     [rsp+0A8h+var_48], 0
.text:00000000000022A8                 mov     [rsp+0A8h+var_40], 0
.text:00000000000022B1                 mov     rdx, rsp
.text:00000000000022B4                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000022B8                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000022BF                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000022C4                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000022CB                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000022D0                 lea     rax, domainname ; "coreutils"
.text:00000000000022D7                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000022DC                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000022E3                 mov     [rsp+0A8h+var_98], rax
.text:00000000000022E8                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000022EF                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000022F4                 mov     [rsp+0A8h+var_90], rax
.text:00000000000022F9                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002300                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002305                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000230C                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002311                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002316                 mov     [rsp+0A8h+var_60], rax
.text:000000000000231B                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: usage+27D↓j
.text:0000000000002320                 add     rdx, 10h
.text:0000000000002324                 mov     rdi, [rdx]
.text:0000000000002327                 test    rdi, rdi
.text:000000000000232A                 jz      short loc_233F
.text:000000000000232C                 mov     ecx, 7
.text:0000000000002331                 mov     rsi, rbx
.text:0000000000002334                 repe cmpsb
.text:0000000000002336                 setnbe  al
.text:0000000000002339                 sbb     al, 0
.text:000000000000233B                 test    al, al
.text:000000000000233D                 jnz     short loc_2320
.text:000000000000233F
.text:000000000000233F loc_233F:                               ; CODE XREF: usage+26A↑j
.text:000000000000233F                 mov     r12, [rdx+8]
.text:0000000000002343                 xor     edi, edi        ; domainname
.text:0000000000002345                 mov     edx, 5          ; category
.text:000000000000234A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002351                 test    r12, r12
.text:0000000000002354                 jz      loc_241B
.text:000000000000235A                 call    _dcgettext
.text:000000000000235F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002366                 lea     rdx, unk_7A3E
.text:000000000000236D                 mov     rsi, rax
.text:0000000000002370                 mov     edi, 1
.text:0000000000002375                 xor     eax, eax
.text:0000000000002377                 call    ___printf_chk
.text:000000000000237C                 xor     esi, esi        ; locale
.text:000000000000237E                 mov     edi, 5          ; category
.text:0000000000002383                 call    _setlocale
.text:0000000000002388                 test    rax, rax
.text:000000000000238B                 jz      short loc_23A9
.text:000000000000238D                 lea     rsi, s2         ; "en_"
.text:0000000000002394                 mov     edx, 3          ; n
.text:0000000000002399                 mov     rdi, rax        ; s1
.text:000000000000239C                 call    _strncmp
.text:00000000000023A1                 test    eax, eax
.text:00000000000023A3                 jnz     loc_24B0
.text:00000000000023A9
.text:00000000000023A9 loc_23A9:                               ; CODE XREF: usage+2CB↑j
.text:00000000000023A9                                         ; usage+415↓j
.text:00000000000023A9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000023B0                 xor     edi, edi        ; domainname
.text:00000000000023B2                 mov     edx, 5          ; category
.text:00000000000023B7                 call    _dcgettext
.text:00000000000023BC                 lea     rcx, aStdbuf    ; "stdbuf"
.text:00000000000023C3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000023CA                 mov     rsi, rax
.text:00000000000023CD                 mov     edi, 1
.text:00000000000023D2                 xor     eax, eax
.text:00000000000023D4                 call    ___printf_chk
.text:00000000000023D9                 cmp     r12, rbx
.text:00000000000023DC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000023E3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000023EA                 cmovz   rbx, rcx
.text:00000000000023EE
.text:00000000000023EE loc_23EE:                               ; CODE XREF: usage+3E4↓j
.text:00000000000023EE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000023F5                 xor     edi, edi        ; domainname
.text:00000000000023F7                 mov     edx, 5          ; category
.text:00000000000023FC                 call    _dcgettext
.text:0000000000002401                 mov     rcx, rbx
.text:0000000000002404                 mov     rsi, rax
.text:0000000000002407                 mov     rdx, r12
.text:000000000000240A                 mov     edi, 1
.text:000000000000240F                 xor     eax, eax
.text:0000000000002411                 call    ___printf_chk
.text:0000000000002416                 jmp     loc_2116
.text:000000000000241B ; ---------------------------------------------------------------------------
.text:000000000000241B
.text:000000000000241B loc_241B:                               ; CODE XREF: usage+294↑j
.text:000000000000241B                 call    _dcgettext
.text:0000000000002420                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002427                 lea     rdx, unk_7A3E
.text:000000000000242E                 mov     rsi, rax
.text:0000000000002431                 mov     edi, 1
.text:0000000000002436                 xor     eax, eax
.text:0000000000002438                 call    ___printf_chk
.text:000000000000243D                 xor     esi, esi        ; locale
.text:000000000000243F                 mov     edi, 5          ; category
.text:0000000000002444                 call    _setlocale
.text:0000000000002449                 test    rax, rax
.text:000000000000244C                 jz      short loc_2466
.text:000000000000244E                 lea     rsi, s2         ; "en_"
.text:0000000000002455                 mov     edx, 3          ; n
.text:000000000000245A                 mov     rdi, rax        ; s1
.text:000000000000245D                 call    _strncmp
.text:0000000000002462                 test    eax, eax
.text:0000000000002464                 jnz     short loc_24A9
.text:0000000000002466
.text:0000000000002466 loc_2466:                               ; CODE XREF: usage+38C↑j
.text:0000000000002466                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000246D                 mov     edx, 5          ; category
.text:0000000000002472                 xor     edi, edi        ; domainname
.text:0000000000002474                 lea     r12, aStdbuf    ; "stdbuf"
.text:000000000000247B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002482                 call    _dcgettext
.text:0000000000002487                 lea     rcx, aStdbuf    ; "stdbuf"
.text:000000000000248E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002495                 mov     rsi, rax
.text:0000000000002498                 mov     edi, 1
.text:000000000000249D                 xor     eax, eax
.text:000000000000249F                 call    ___printf_chk
.text:00000000000024A4                 jmp     loc_23EE
.text:00000000000024A9 ; ---------------------------------------------------------------------------
.text:00000000000024A9
.text:00000000000024A9 loc_24A9:                               ; CODE XREF: usage+3A4↑j
.text:00000000000024A9                 lea     r12, aStdbuf    ; "stdbuf"
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: usage+2E3↑j
.text:00000000000024B0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000024B7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000024BE                 xor     edi, edi        ; domainname
.text:00000000000024C0                 mov     edx, 5          ; category
.text:00000000000024C5                 call    _dcgettext
.text:00000000000024CA                 mov     rsi, r13        ; stream
.text:00000000000024CD                 mov     rdi, rax        ; s
.text:00000000000024D0                 call    _fputs_unlocked
.text:00000000000024D5                 jmp     loc_23A9
.text:00000000000024D5 ; } // starts at 20C0
.text:00000000000024D5 usage           endp
.text:00000000000024D5
.text:00000000000024D5 ; ---------------------------------------------------------------------------
.text:00000000000024DA                 align 20h
.text:00000000000024E0
.text:00000000000024E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024E0
.text:00000000000024E0
.text:00000000000024E0                 public close_stdout_set_file_name
.text:00000000000024E0 close_stdout_set_file_name proc near
.text:00000000000024E0 ; __unwind {
.text:00000000000024E0                 mov     cs:file_name, rdi
.text:00000000000024E7                 retn
.text:00000000000024E7 ; } // starts at 24E0
.text:00000000000024E7 close_stdout_set_file_name endp
.text:00000000000024E7
.text:00000000000024E7 ; ---------------------------------------------------------------------------
.text:00000000000024E8                 align 10h
.text:00000000000024F0
.text:00000000000024F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024F0
.text:00000000000024F0
.text:00000000000024F0                 public close_stdout_set_ignore_EPIPE
.text:00000000000024F0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000024F0 ; __unwind {
.text:00000000000024F0                 mov     cs:ignore_EPIPE, dil
.text:00000000000024F7                 retn
.text:00000000000024F7 ; } // starts at 24F0
.text:00000000000024F7 close_stdout_set_ignore_EPIPE endp
.text:00000000000024F7
.text:00000000000024F7 ; ---------------------------------------------------------------------------
.text:00000000000024F8                 align 20h
.text:0000000000002500
.text:0000000000002500 ; =============== S U B R O U T I N E =======================================
.text:0000000000002500
.text:0000000000002500 ; Attributes: info_from_lumina
.text:0000000000002500
.text:0000000000002500 ; void __cdecl close_stdout()
.text:0000000000002500                 public close_stdout
.text:0000000000002500 close_stdout    proc near               ; DATA XREF: main+72↑o
.text:0000000000002500 ; __unwind {
.text:0000000000002500                 push    rbp
.text:0000000000002501                 push    rbx
.text:0000000000002502                 sub     rsp, 8
.text:0000000000002506                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000250D                 call    close_stream
.text:0000000000002512                 test    eax, eax
.text:0000000000002514                 jz      short loc_252C
.text:0000000000002516                 call    ___errno_location
.text:000000000000251B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002522                 mov     rbx, rax
.text:0000000000002525                 jz      short loc_2543
.text:0000000000002527                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000252A                 jnz     short loc_2543
.text:000000000000252C
.text:000000000000252C loc_252C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000252C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002533                 call    close_stream
.text:0000000000002538                 test    eax, eax
.text:000000000000253A                 jnz     short loc_2582
.text:000000000000253C                 add     rsp, 8
.text:0000000000002540                 pop     rbx
.text:0000000000002541                 pop     rbp
.text:0000000000002542                 retn
.text:0000000000002543 ; ---------------------------------------------------------------------------
.text:0000000000002543
.text:0000000000002543 loc_2543:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002543                                         ; close_stdout+2A↑j
.text:0000000000002543                 lea     rsi, aWriteError ; "write error"
.text:000000000000254A                 xor     edi, edi        ; domainname
.text:000000000000254C                 mov     edx, 5          ; category
.text:0000000000002551                 call    _dcgettext
.text:0000000000002556                 mov     rdi, cs:file_name
.text:000000000000255D                 mov     rbp, rax
.text:0000000000002560                 test    rdi, rdi
.text:0000000000002563                 jz      short loc_258D
.text:0000000000002565                 call    quotearg_colon
.text:000000000000256A                 mov     esi, [rbx]      ; errnum
.text:000000000000256C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002573                 mov     rcx, rax
.text:0000000000002576                 mov     r8, rbp
.text:0000000000002579                 xor     edi, edi        ; status
.text:000000000000257B                 xor     eax, eax
.text:000000000000257D                 call    _error
.text:0000000000002582
.text:0000000000002582 loc_2582:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002582                                         ; close_stdout+A2↓j
.text:0000000000002582                 mov     edi, cs:exit_failure ; status
.text:0000000000002588                 call    __exit
.text:000000000000258D ; ---------------------------------------------------------------------------
.text:000000000000258D
.text:000000000000258D loc_258D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000258D                 mov     esi, [rbx]      ; errnum
.text:000000000000258F                 lea     rdx, format+4   ; format
.text:0000000000002596                 mov     rcx, rax
.text:0000000000002599                 xor     edi, edi        ; status
.text:000000000000259B                 xor     eax, eax
.text:000000000000259D                 call    _error
.text:00000000000025A2                 jmp     short loc_2582
.text:00000000000025A2 ; } // starts at 2500
.text:00000000000025A2 close_stdout    endp
.text:00000000000025A2
.text:00000000000025A2 ; ---------------------------------------------------------------------------
.text:00000000000025A4                 align 10h
.text:00000000000025B0
.text:00000000000025B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025B0
.text:00000000000025B0
.text:00000000000025B0                 public dir_name
.text:00000000000025B0 dir_name        proc near               ; CODE XREF: main+2E4↑p
.text:00000000000025B0                                         ; main+4D3↑p ...
.text:00000000000025B0 ; __unwind {
.text:00000000000025B0                 sub     rsp, 8
.text:00000000000025B4                 call    mdir_name
.text:00000000000025B9                 test    rax, rax
.text:00000000000025BC                 jz      short loc_25C3
.text:00000000000025BE                 add     rsp, 8
.text:00000000000025C2                 retn
.text:00000000000025C3 ; ---------------------------------------------------------------------------
.text:00000000000025C3
.text:00000000000025C3 loc_25C3:                               ; CODE XREF: dir_name+C↑j
.text:00000000000025C3                 call    xalloc_die
.text:00000000000025C3 ; } // starts at 25B0
.text:00000000000025C3 dir_name        endp
.text:00000000000025C3
.text:00000000000025C3 ; ---------------------------------------------------------------------------
.text:00000000000025C8                 align 10h
.text:00000000000025D0
.text:00000000000025D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025D0
.text:00000000000025D0 ; Attributes: info_from_lumina
.text:00000000000025D0
.text:00000000000025D0 ; size_t __fastcall dir_len(const char *file)
.text:00000000000025D0                 public dir_len
.text:00000000000025D0 dir_len         proc near               ; CODE XREF: mdir_name+9↓p
.text:00000000000025D0 ; __unwind {
.text:00000000000025D0                 push    rbp
.text:00000000000025D1                 push    rbx
.text:00000000000025D2                 xor     ebp, ebp
.text:00000000000025D4                 mov     rbx, rdi
.text:00000000000025D7                 sub     rsp, 8
.text:00000000000025DB                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:00000000000025DE                 setz    bpl
.text:00000000000025E2                 call    last_component
.text:00000000000025E7                 mov     rcx, rax
.text:00000000000025EA                 sub     rcx, rbx
.text:00000000000025ED                 cmp     rcx, rbp
.text:00000000000025F0                 jbe     short loc_2620
.text:00000000000025F2                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:00000000000025F6                 lea     rdx, [rcx-1]
.text:00000000000025FA                 jz      short loc_260E
.text:00000000000025FC                 jmp     short loc_2620
.text:00000000000025FC ; ---------------------------------------------------------------------------
.text:00000000000025FE                 align 20h
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: dir_len+41↓j
.text:0000000000002600                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000002605                 lea     rax, [rdx-1]
.text:0000000000002609                 jnz     short loc_2613
.text:000000000000260B                 mov     rdx, rax
.text:000000000000260E
.text:000000000000260E loc_260E:                               ; CODE XREF: dir_len+2A↑j
.text:000000000000260E                 cmp     rbp, rdx
.text:0000000000002611                 jnz     short loc_2600
.text:0000000000002613
.text:0000000000002613 loc_2613:                               ; CODE XREF: dir_len+39↑j
.text:0000000000002613                 add     rsp, 8
.text:0000000000002617                 mov     rax, rdx
.text:000000000000261A                 pop     rbx
.text:000000000000261B                 pop     rbp
.text:000000000000261C                 retn
.text:000000000000261C ; ---------------------------------------------------------------------------
.text:000000000000261D                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: dir_len+20↑j
.text:0000000000002620                                         ; dir_len+2C↑j
.text:0000000000002620                 add     rsp, 8
.text:0000000000002624                 mov     rdx, rcx
.text:0000000000002627                 mov     rax, rdx
.text:000000000000262A                 pop     rbx
.text:000000000000262B                 pop     rbp
.text:000000000000262C                 retn
.text:000000000000262C ; } // starts at 25D0
.text:000000000000262C dir_len         endp
.text:000000000000262C
.text:000000000000262C ; ---------------------------------------------------------------------------
.text:000000000000262D                 align 10h
.text:0000000000002630
.text:0000000000002630 ; =============== S U B R O U T I N E =======================================
.text:0000000000002630
.text:0000000000002630 ; Attributes: info_from_lumina
.text:0000000000002630
.text:0000000000002630 ; char *__fastcall mdir_name(const char *file)
.text:0000000000002630                 public mdir_name
.text:0000000000002630 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:0000000000002630 ; __unwind {
.text:0000000000002630                 push    rbp
.text:0000000000002631                 push    rbx
.text:0000000000002632                 mov     rbp, rdi
.text:0000000000002635                 sub     rsp, 8
.text:0000000000002639                 call    dir_len
.text:000000000000263E                 test    rax, rax
.text:0000000000002641                 mov     rbx, rax
.text:0000000000002644                 setz    al
.text:0000000000002647                 movzx   eax, al
.text:000000000000264A                 lea     rdi, [rbx+rax+1] ; size
.text:000000000000264F                 call    _malloc
.text:0000000000002654                 test    rax, rax
.text:0000000000002657                 mov     rcx, rax
.text:000000000000265A                 jz      short loc_2676
.text:000000000000265C                 mov     rdx, rbx        ; n
.text:000000000000265F                 mov     rsi, rbp        ; src
.text:0000000000002662                 mov     rdi, rax        ; dest
.text:0000000000002665                 call    _memcpy
.text:000000000000266A                 test    rbx, rbx
.text:000000000000266D                 mov     rcx, rax
.text:0000000000002670                 jz      short loc_2680
.text:0000000000002672
.text:0000000000002672 loc_2672:                               ; CODE XREF: mdir_name+58↓j
.text:0000000000002672                 mov     byte ptr [rcx+rbx], 0
.text:0000000000002676
.text:0000000000002676 loc_2676:                               ; CODE XREF: mdir_name+2A↑j
.text:0000000000002676                 add     rsp, 8
.text:000000000000267A                 mov     rax, rcx
.text:000000000000267D                 pop     rbx
.text:000000000000267E                 pop     rbp
.text:000000000000267F                 retn
.text:0000000000002680 ; ---------------------------------------------------------------------------
.text:0000000000002680
.text:0000000000002680 loc_2680:                               ; CODE XREF: mdir_name+40↑j
.text:0000000000002680                 mov     byte ptr [rax], 2Eh ; '.'
.text:0000000000002683                 mov     ebx, 1
.text:0000000000002688                 jmp     short loc_2672
.text:0000000000002688 ; } // starts at 2630
.text:0000000000002688 mdir_name       endp
.text:0000000000002688
.text:0000000000002688 ; ---------------------------------------------------------------------------
.text:000000000000268A                 align 10h
.text:0000000000002690
.text:0000000000002690 ; =============== S U B R O U T I N E =======================================
.text:0000000000002690
.text:0000000000002690 ; Attributes: info_from_lumina
.text:0000000000002690
.text:0000000000002690 ; char *__fastcall last_component(const char *name)
.text:0000000000002690                 public last_component
.text:0000000000002690 last_component  proc near               ; CODE XREF: dir_len+12↑p
.text:0000000000002690                                         ; mfile_name_concat+17↓p
.text:0000000000002690 ; __unwind {
.text:0000000000002690                 movzx   edx, byte ptr [rdi]
.text:0000000000002693                 mov     rax, rdi
.text:0000000000002696                 cmp     dl, 2Fh ; '/'
.text:0000000000002699                 jnz     short loc_26AC
.text:000000000000269B                 nop     dword ptr [rax+rax+00h]
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: last_component+1A↓j
.text:00000000000026A0                 add     rax, 1
.text:00000000000026A4                 movzx   edx, byte ptr [rax]
.text:00000000000026A7                 cmp     dl, 2Fh ; '/'
.text:00000000000026AA                 jz      short loc_26A0
.text:00000000000026AC
.text:00000000000026AC loc_26AC:                               ; CODE XREF: last_component+9↑j
.text:00000000000026AC                 test    dl, dl
.text:00000000000026AE                 jz      short locret_26EA
.text:00000000000026B0                 mov     rcx, rax
.text:00000000000026B3                 xor     esi, esi
.text:00000000000026B5                 jmp     short loc_26D5
.text:00000000000026B5 ; ---------------------------------------------------------------------------
.text:00000000000026B7                 align 20h
.text:00000000000026C0
.text:00000000000026C0 loc_26C0:                               ; CODE XREF: last_component+48↓j
.text:00000000000026C0                 test    sil, sil
.text:00000000000026C3                 jz      short loc_26CA
.text:00000000000026C5                 mov     rax, rcx
.text:00000000000026C8                 xor     esi, esi
.text:00000000000026CA
.text:00000000000026CA loc_26CA:                               ; CODE XREF: last_component+33↑j
.text:00000000000026CA                 add     rcx, 1
.text:00000000000026CE                 movzx   edx, byte ptr [rcx]
.text:00000000000026D1                 test    dl, dl
.text:00000000000026D3                 jz      short locret_26EA
.text:00000000000026D5
.text:00000000000026D5 loc_26D5:                               ; CODE XREF: last_component+25↑j
.text:00000000000026D5                                         ; last_component+58↓j
.text:00000000000026D5                 cmp     dl, 2Fh ; '/'
.text:00000000000026D8                 jnz     short loc_26C0
.text:00000000000026DA                 add     rcx, 1
.text:00000000000026DE                 movzx   edx, byte ptr [rcx]
.text:00000000000026E1                 mov     esi, 1
.text:00000000000026E6                 test    dl, dl
.text:00000000000026E8                 jnz     short loc_26D5
.text:00000000000026EA
.text:00000000000026EA locret_26EA:                            ; CODE XREF: last_component+1E↑j
.text:00000000000026EA                                         ; last_component+43↑j
.text:00000000000026EA                 rep retn
.text:00000000000026EA ; } // starts at 2690
.text:00000000000026EA last_component  endp
.text:00000000000026EA
.text:00000000000026EA ; ---------------------------------------------------------------------------
.text:00000000000026EC                 align 10h
.text:00000000000026F0
.text:00000000000026F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026F0
.text:00000000000026F0 ; Attributes: info_from_lumina
.text:00000000000026F0
.text:00000000000026F0 ; size_t __fastcall base_len(const char *name)
.text:00000000000026F0                 public base_len
.text:00000000000026F0 base_len        proc near               ; CODE XREF: mfile_name_concat+22↓p
.text:00000000000026F0 ; __unwind {
.text:00000000000026F0                 push    rbx
.text:00000000000026F1                 mov     rbx, rdi
.text:00000000000026F4                 call    _strlen
.text:00000000000026F9                 cmp     rax, 1
.text:00000000000026FD                 jbe     short loc_270A
.text:00000000000026FF                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000002704                 lea     rdx, [rax-1]
.text:0000000000002708                 jz      short loc_2718
.text:000000000000270A
.text:000000000000270A loc_270A:                               ; CODE XREF: base_len+D↑j
.text:000000000000270A                 pop     rbx
.text:000000000000270B                 retn
.text:000000000000270B ; ---------------------------------------------------------------------------
.text:000000000000270C                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: base_len+37↓j
.text:0000000000002710                 mov     rdx, rax
.text:0000000000002713                 nop     dword ptr [rax+rax+00h]
.text:0000000000002718
.text:0000000000002718 loc_2718:                               ; CODE XREF: base_len+18↑j
.text:0000000000002718                 cmp     rdx, 1
.text:000000000000271C                 jz      short loc_2730
.text:000000000000271E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000002723                 lea     rax, [rdx-1]
.text:0000000000002727                 jz      short loc_2710
.text:0000000000002729                 mov     rax, rdx
.text:000000000000272C                 pop     rbx
.text:000000000000272D                 retn
.text:000000000000272D ; ---------------------------------------------------------------------------
.text:000000000000272E                 align 10h
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: base_len+2C↑j
.text:0000000000002730                 mov     eax, 1
.text:0000000000002735                 pop     rbx
.text:0000000000002736                 retn
.text:0000000000002736 ; } // starts at 26F0
.text:0000000000002736 base_len        endp
.text:0000000000002736
.text:0000000000002736 ; ---------------------------------------------------------------------------
.text:0000000000002737                 align 20h
.text:0000000000002740
.text:0000000000002740 ; =============== S U B R O U T I N E =======================================
.text:0000000000002740
.text:0000000000002740
.text:0000000000002740                 public file_name_concat
.text:0000000000002740 file_name_concat proc near              ; CODE XREF: main+578↑p
.text:0000000000002740 ; __unwind {
.text:0000000000002740                 sub     rsp, 8
.text:0000000000002744                 call    mfile_name_concat
.text:0000000000002749                 test    rax, rax
.text:000000000000274C                 jz      short loc_2753
.text:000000000000274E                 add     rsp, 8
.text:0000000000002752                 retn
.text:0000000000002753 ; ---------------------------------------------------------------------------
.text:0000000000002753
.text:0000000000002753 loc_2753:                               ; CODE XREF: file_name_concat+C↑j
.text:0000000000002753                 call    xalloc_die
.text:0000000000002753 ; } // starts at 2740
.text:0000000000002753 file_name_concat endp
.text:0000000000002753
.text:0000000000002753 ; ---------------------------------------------------------------------------
.text:0000000000002758                 align 20h
.text:0000000000002760
.text:0000000000002760 ; =============== S U B R O U T I N E =======================================
.text:0000000000002760
.text:0000000000002760
.text:0000000000002760 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:0000000000002760                 public mfile_name_concat
.text:0000000000002760 mfile_name_concat proc near             ; CODE XREF: file_name_concat+4↑p
.text:0000000000002760
.text:0000000000002760 var_48          = qword ptr -48h
.text:0000000000002760 var_39          = byte ptr -39h
.text:0000000000002760
.text:0000000000002760 ; __unwind {
.text:0000000000002760                 push    r15
.text:0000000000002762                 push    r14
.text:0000000000002764                 mov     r15, rdx
.text:0000000000002767                 push    r13
.text:0000000000002769                 push    r12
.text:000000000000276B                 mov     r12, rdi
.text:000000000000276E                 push    rbp
.text:000000000000276F                 push    rbx
.text:0000000000002770                 mov     rbp, rsi
.text:0000000000002773                 sub     rsp, 18h
.text:0000000000002777                 call    last_component
.text:000000000000277C                 mov     rbx, rax
.text:000000000000277F                 mov     rdi, rax
.text:0000000000002782                 call    base_len
.text:0000000000002787                 sub     rbx, r12
.text:000000000000278A                 mov     r13, rax
.text:000000000000278D                 mov     rdi, rbp        ; s
.text:0000000000002790                 add     rbx, rax
.text:0000000000002793                 call    _strlen
.text:0000000000002798                 test    r13, r13
.text:000000000000279B                 mov     r14, rax
.text:000000000000279E                 jz      short loc_27D0
.text:00000000000027A0                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:00000000000027A6                 jz      loc_2850
.text:00000000000027AC                 xor     eax, eax
.text:00000000000027AE                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:00000000000027B2                 mov     edx, 0
.text:00000000000027B7                 setnz   al
.text:00000000000027BA                 mov     [rsp+48h+var_48], rax
.text:00000000000027BE                 mov     eax, 2Fh ; '/'
.text:00000000000027C3                 cmovz   eax, edx
.text:00000000000027C6                 mov     [rsp+48h+var_39], al
.text:00000000000027CA                 jmp     short loc_27EE
.text:00000000000027CA ; ---------------------------------------------------------------------------
.text:00000000000027CC                 align 10h
.text:00000000000027D0
.text:00000000000027D0 loc_27D0:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:00000000000027D0                 xor     eax, eax
.text:00000000000027D2                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:00000000000027D6                 mov     edx, 0
.text:00000000000027DB                 setz    al
.text:00000000000027DE                 mov     [rsp+48h+var_48], rax
.text:00000000000027E2                 mov     eax, 2Eh ; '.'
.text:00000000000027E7                 cmovnz  eax, edx
.text:00000000000027EA                 mov     [rsp+48h+var_39], al
.text:00000000000027EE
.text:00000000000027EE loc_27EE:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:00000000000027EE                                         ; mfile_name_concat+FD↓j
.text:00000000000027EE                 lea     rdi, [rbx+r14+1]
.text:00000000000027F3                 add     rdi, [rsp+48h+var_48] ; size
.text:00000000000027F7                 call    _malloc
.text:00000000000027FC                 test    rax, rax
.text:00000000000027FF                 mov     r13, rax
.text:0000000000002802                 jz      short loc_2836
.text:0000000000002804                 mov     rdi, rax        ; dest
.text:0000000000002807                 mov     rdx, rbx        ; n
.text:000000000000280A                 mov     rsi, r12        ; src
.text:000000000000280D                 call    _mempcpy
.text:0000000000002812                 movzx   ecx, [rsp+48h+var_39]
.text:0000000000002817                 mov     rdi, [rsp+48h+var_48]
.text:000000000000281B                 add     rdi, rax        ; dest
.text:000000000000281E                 test    r15, r15
.text:0000000000002821                 mov     [rax], cl
.text:0000000000002823                 jz      short loc_2828
.text:0000000000002825                 mov     [r15], rdi
.text:0000000000002828
.text:0000000000002828 loc_2828:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:0000000000002828                 mov     rdx, r14        ; n
.text:000000000000282B                 mov     rsi, rbp        ; src
.text:000000000000282E                 call    _mempcpy
.text:0000000000002833                 mov     byte ptr [rax], 0
.text:0000000000002836
.text:0000000000002836 loc_2836:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:0000000000002836                 add     rsp, 18h
.text:000000000000283A                 mov     rax, r13
.text:000000000000283D                 pop     rbx
.text:000000000000283E                 pop     rbp
.text:000000000000283F                 pop     r12
.text:0000000000002841                 pop     r13
.text:0000000000002843                 pop     r14
.text:0000000000002845                 pop     r15
.text:0000000000002847                 retn
.text:0000000000002847 ; ---------------------------------------------------------------------------
.text:0000000000002848                 align 10h
.text:0000000000002850
.text:0000000000002850 loc_2850:                               ; CODE XREF: mfile_name_concat+46↑j
.text:0000000000002850                 mov     [rsp+48h+var_48], 0
.text:0000000000002858                 mov     [rsp+48h+var_39], 0
.text:000000000000285D                 jmp     short loc_27EE
.text:000000000000285D ; } // starts at 2760
.text:000000000000285D mfile_name_concat endp
.text:000000000000285D
.text:000000000000285D ; ---------------------------------------------------------------------------
.text:000000000000285F                 align 20h
.text:0000000000002860
.text:0000000000002860 ; =============== S U B R O U T I N E =======================================
.text:0000000000002860
.text:0000000000002860
.text:0000000000002860                 public set_program_name
.text:0000000000002860 set_program_name proc near              ; CODE XREF: main+3D↑p
.text:0000000000002860 ; __unwind {
.text:0000000000002860                 test    rdi, rdi
.text:0000000000002863                 push    rbx
.text:0000000000002864                 jz      short loc_28DD
.text:0000000000002866                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000286B                 mov     rbx, rdi
.text:000000000000286E                 call    _strrchr
.text:0000000000002873                 test    rax, rax
.text:0000000000002876                 jz      short loc_28CD
.text:0000000000002878                 lea     r8, [rax+1]
.text:000000000000287C                 mov     rdx, r8
.text:000000000000287F                 sub     rdx, rbx
.text:0000000000002882                 cmp     rdx, 6
.text:0000000000002886                 jle     short loc_28CD
.text:0000000000002888                 lea     rsi, [rax-6]
.text:000000000000288C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002893                 mov     ecx, 7
.text:0000000000002898                 repe cmpsb
.text:000000000000289A                 setnbe  dl
.text:000000000000289D                 sbb     dl, 0
.text:00000000000028A0                 test    dl, dl
.text:00000000000028A2                 jnz     short loc_28CD
.text:00000000000028A4                 lea     rdi, aLt        ; "lt-"
.text:00000000000028AB                 mov     ecx, 3
.text:00000000000028B0                 mov     rsi, r8
.text:00000000000028B3                 mov     rbx, r8
.text:00000000000028B6                 repe cmpsb
.text:00000000000028B8                 setnbe  dl
.text:00000000000028BB                 sbb     dl, 0
.text:00000000000028BE                 test    dl, dl
.text:00000000000028C0                 jnz     short loc_28CD
.text:00000000000028C2                 lea     rbx, [rax+4]
.text:00000000000028C6                 mov     cs:__bss_start, rbx
.text:00000000000028CD
.text:00000000000028CD loc_28CD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000028CD                                         ; set_program_name+26↑j ...
.text:00000000000028CD                 mov     cs:program_name, rbx
.text:00000000000028D4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000028DB                 pop     rbx
.text:00000000000028DC                 retn
.text:00000000000028DD ; ---------------------------------------------------------------------------
.text:00000000000028DD
.text:00000000000028DD loc_28DD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000028DD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000028E4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000028EB                 mov     edx, 37h ; '7'  ; n
.text:00000000000028F0                 mov     esi, 1          ; size
.text:00000000000028F5                 call    _fwrite
.text:00000000000028FA                 call    _abort
.text:00000000000028FA ; } // starts at 2860
.text:00000000000028FA set_program_name endp
.text:00000000000028FA
.text:00000000000028FA ; ---------------------------------------------------------------------------
.text:00000000000028FF                 align 20h
.text:0000000000002900
.text:0000000000002900 ; =============== S U B R O U T I N E =======================================
.text:0000000000002900
.text:0000000000002900 ; Attributes: info_from_lumina
.text:0000000000002900
.text:0000000000002900 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002900 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002900                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002900 ; __unwind {
.text:0000000000002900                 push    rbp
.text:0000000000002901                 push    rbx
.text:0000000000002902                 mov     rbp, rdi
.text:0000000000002905                 mov     ebx, esi
.text:0000000000002907                 sub     rsp, 8
.text:000000000000290B                 call    locale_charset
.text:0000000000002910                 movzx   edx, byte ptr [rax]
.text:0000000000002913                 and     edx, 0FFFFFFDFh
.text:0000000000002916                 cmp     dl, 55h ; 'U'
.text:0000000000002919                 jz      short loc_2990
.text:000000000000291B                 cmp     dl, 47h ; 'G'
.text:000000000000291E                 jz      short loc_2940
.text:0000000000002920
.text:0000000000002920 loc_2920:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002920                                         ; gettext_quote+50↓j ...
.text:0000000000002920                 lea     rax, unk_82C3
.text:0000000000002927                 lea     rdx, asc_82C5   ; "'"
.text:000000000000292E                 cmp     ebx, 9
.text:0000000000002931                 cmovnz  rax, rdx
.text:0000000000002935                 add     rsp, 8
.text:0000000000002939                 pop     rbx
.text:000000000000293A                 pop     rbp
.text:000000000000293B                 retn
.text:000000000000293B ; ---------------------------------------------------------------------------
.text:000000000000293C                 align 20h
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002940                 movzx   edx, byte ptr [rax+1]
.text:0000000000002944                 and     edx, 0FFFFFFDFh
.text:0000000000002947                 cmp     dl, 42h ; 'B'
.text:000000000000294A                 jnz     short loc_2920
.text:000000000000294C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002950                 jnz     short loc_2920
.text:0000000000002952                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002956                 jnz     short loc_2920
.text:0000000000002958                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000295C                 jnz     short loc_2920
.text:000000000000295E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002962                 jnz     short loc_2920
.text:0000000000002964                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002968                 jnz     short loc_2920
.text:000000000000296A                 cmp     byte ptr [rax+7], 0
.text:000000000000296E                 jnz     short loc_2920
.text:0000000000002970                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002974                 lea     rax, unk_82BC
.text:000000000000297B                 lea     rdx, unk_82C0
.text:0000000000002982                 cmovnz  rax, rdx
.text:0000000000002986                 add     rsp, 8
.text:000000000000298A                 pop     rbx
.text:000000000000298B                 pop     rbp
.text:000000000000298C                 retn
.text:000000000000298C ; ---------------------------------------------------------------------------
.text:000000000000298D                 align 10h
.text:0000000000002990
.text:0000000000002990 loc_2990:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002990                 movzx   edx, byte ptr [rax+1]
.text:0000000000002994                 and     edx, 0FFFFFFDFh
.text:0000000000002997                 cmp     dl, 54h ; 'T'
.text:000000000000299A                 jnz     short loc_2920
.text:000000000000299C                 movzx   edx, byte ptr [rax+2]
.text:00000000000029A0                 and     edx, 0FFFFFFDFh
.text:00000000000029A3                 cmp     dl, 46h ; 'F'
.text:00000000000029A6                 jnz     loc_2920
.text:00000000000029AC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000029B0                 jnz     loc_2920
.text:00000000000029B6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000029BA                 jnz     loc_2920
.text:00000000000029C0                 cmp     byte ptr [rax+5], 0
.text:00000000000029C4                 jnz     loc_2920
.text:00000000000029CA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000029CE                 lea     rax, unk_82B4
.text:00000000000029D5                 lea     rdx, unk_82B8
.text:00000000000029DC                 cmovnz  rax, rdx
.text:00000000000029E0                 add     rsp, 8
.text:00000000000029E4                 pop     rbx
.text:00000000000029E5                 pop     rbp
.text:00000000000029E6                 retn
.text:00000000000029E6 ; } // starts at 2900
.text:00000000000029E6 gettext_quote   endp
.text:00000000000029E6
.text:00000000000029E6 ; ---------------------------------------------------------------------------
.text:00000000000029E7                 align 10h
.text:00000000000029F0
.text:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029F0
.text:00000000000029F0 ; Attributes: info_from_lumina
.text:00000000000029F0
.text:00000000000029F0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000029F0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000029F0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000029F0
.text:00000000000029F0 var_E0          = dword ptr -0E0h
.text:00000000000029F0 var_DB          = byte ptr -0DBh
.text:00000000000029F0 var_DA          = byte ptr -0DAh
.text:00000000000029F0 var_D9          = byte ptr -0D9h
.text:00000000000029F0 s               = qword ptr -0D8h
.text:00000000000029F0 n               = qword ptr -0D0h
.text:00000000000029F0 var_C8          = qword ptr -0C8h
.text:00000000000029F0 ps              = qword ptr -0C0h
.text:00000000000029F0 var_B8          = qword ptr -0B8h
.text:00000000000029F0 var_B0          = qword ptr -0B0h
.text:00000000000029F0 var_A8          = qword ptr -0A8h
.text:00000000000029F0 s2              = qword ptr -0A0h
.text:00000000000029F0 var_98          = qword ptr -98h
.text:00000000000029F0 var_90          = qword ptr -90h
.text:00000000000029F0 var_88          = qword ptr -88h
.text:00000000000029F0 var_80          = qword ptr -80h
.text:00000000000029F0 var_78          = qword ptr -78h
.text:00000000000029F0 var_70          = dword ptr -70h
.text:00000000000029F0 var_6C          = byte ptr -6Ch
.text:00000000000029F0 var_6B          = byte ptr -6Bh
.text:00000000000029F0 var_6A          = byte ptr -6Ah
.text:00000000000029F0 var_69          = byte ptr -69h
.text:00000000000029F0 var_68          = qword ptr -68h
.text:00000000000029F0 var_60          = qword ptr -60h
.text:00000000000029F0 wc              = dword ptr -4Ch
.text:00000000000029F0 var_48          = qword ptr -48h
.text:00000000000029F0 var_40          = qword ptr -40h
.text:00000000000029F0 arg_0           = qword ptr  8
.text:00000000000029F0 arg_8           = qword ptr  10h
.text:00000000000029F0 arg_10          = qword ptr  18h
.text:00000000000029F0
.text:00000000000029F0 ; __unwind {
.text:00000000000029F0                 push    r15
.text:00000000000029F2                 push    r14
.text:00000000000029F4                 mov     r15d, r8d
.text:00000000000029F7                 push    r13
.text:00000000000029F9                 push    r12
.text:00000000000029FB                 mov     r14, rdi
.text:00000000000029FE                 push    rbp
.text:00000000000029FF                 push    rbx
.text:0000000000002A00                 mov     ebx, r9d
.text:0000000000002A03                 mov     r13, rsi
.text:0000000000002A06                 mov     rbp, rcx
.text:0000000000002A09                 and     ebx, 2
.text:0000000000002A0C                 sub     rsp, 0B8h
.text:0000000000002A13                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002A1B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002A20                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002A25                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002A2A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002A2F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002A37                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002A3C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002A44                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002A49                 mov     rax, fs:28h
.text:0000000000002A52                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002A5A                 xor     eax, eax
.text:0000000000002A5C                 call    ___ctype_get_mb_cur_max
.text:0000000000002A61                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002A65                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002A6A                 ja      def_2A81        ; jumptable 00000000000121F1 default case
.text:0000000000002A70                 lea     rcx, jpt_2A81
.text:0000000000002A77                 mov     edx, r15d
.text:0000000000002A7A                 movsxd  rax, ds:(jpt_2A81 - 8320h)[rcx+rdx*4]
.text:0000000000002A7E                 add     rax, rcx
.text:0000000000002A81                 jmp     rax             ; switch jump
.text:0000000000002A83 ; ---------------------------------------------------------------------------
.text:0000000000002A83
.text:0000000000002A83 loc_2A83:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002A83                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002A83                                         ; DATA XREF: ...
.text:0000000000002A83                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002A88                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002A8D                 xor     r12d, r12d
.text:0000000000002A90                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002A99                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002A9E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002AA3
.text:0000000000002AA3 loc_2AA3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002AA3                 lea     rax, asc_82C5   ; "'"
.text:0000000000002AAA                 mov     [rsp+0E8h+n], 1
.text:0000000000002AB3                 xor     r15d, r15d
.text:0000000000002AB6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002ABE                 mov     [rsp+0E8h+s2], rax
.text:0000000000002AC3
.text:0000000000002AC3 loc_2AC3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002AC3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002AC3                 xor     r11d, r11d
.text:0000000000002AC6                 mov     rax, rbp
.text:0000000000002AC9                 mov     r8d, r12d
.text:0000000000002ACC                 mov     rbp, r11
.text:0000000000002ACF                 mov     r11, rax
.text:0000000000002AD2                 nop     word ptr [rax+rax+00h]
.text:0000000000002AD8
.text:0000000000002AD8 loc_2AD8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002AD8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002AD8                 cmp     r11, rbp
.text:0000000000002ADB                 setnz   r12b
.text:0000000000002ADF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002AE3                 jnz     short loc_2AF2
.text:0000000000002AE5                 mov     rax, [rsp+0E8h+s]
.text:0000000000002AEA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002AEE                 setnz   r12b
.text:0000000000002AF2
.text:0000000000002AF2 loc_2AF2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002AF2                 test    r12b, r12b
.text:0000000000002AF5                 jz      loc_3150
.text:0000000000002AFB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B00                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002B05                 lea     r9, [rdi+rbp]
.text:0000000000002B09                 setnz   al
.text:0000000000002B0C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002B10                 mov     r10d, eax
.text:0000000000002B13                 jz      loc_2BC0
.text:0000000000002B19                 mov     rax, [rsp+0E8h+n]
.text:0000000000002B1E                 test    rax, rax
.text:0000000000002B21                 jz      loc_2F50
.text:0000000000002B27                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B2B                 lea     rbx, [rbp+rax+0]
.text:0000000000002B30                 jnz     short loc_2B60
.text:0000000000002B32                 cmp     rax, 1
.text:0000000000002B36                 jbe     short loc_2B60
.text:0000000000002B38                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002B3D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002B42                 mov     [rsp+0E8h+ps], r9
.text:0000000000002B47                 call    _strlen
.text:0000000000002B4C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002B52                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002B58                 mov     r11, rax
.text:0000000000002B5B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002B60
.text:0000000000002B60 loc_2B60:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002B60                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002B60                 cmp     rbx, r11
.text:0000000000002B63                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002B68                 ja      loc_3120
.text:0000000000002B6E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002B73                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002B78                 mov     rdi, r9         ; s1
.text:0000000000002B7B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002B80                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002B85                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002B8A                 call    _memcmp
.text:0000000000002B8F                 test    eax, eax
.text:0000000000002B91                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002B96                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002B9C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002BA1                 jnz     loc_3120
.text:0000000000002BA7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002BAC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002BB2                 jnz     loc_3B35
.text:0000000000002BB8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002BC0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002BC0                 movzx   ebx, byte ptr [r9]
.text:0000000000002BC4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002BC7                 ja      def_2BDE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002BCD                 lea     rcx, jpt_2BDE
.text:0000000000002BD4                 movzx   edx, bl
.text:0000000000002BD7                 movsxd  rax, ds:(jpt_2BDE - 834Ch)[rcx+rdx*4]
.text:0000000000002BDB                 add     rax, rcx
.text:0000000000002BDE                 jmp     rax             ; switch jump
.text:0000000000002BE0 ; ---------------------------------------------------------------------------
.text:0000000000002BE0
.text:0000000000002BE0 loc_2BE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002BE0                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000002BE0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002BE3
.text:0000000000002BE3 loc_2BE3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BE3                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002BE3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002BE7                 setnz   al
.text:0000000000002BEA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002BEE                 jnz     short loc_2BFC
.text:0000000000002BF0                 mov     rax, [rsp+0E8h+s]
.text:0000000000002BF5                 cmp     byte ptr [rax+1], 0
.text:0000000000002BF9                 setnz   al
.text:0000000000002BFC
.text:0000000000002BFC loc_2BFC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002BFC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002C01                 setz    dl
.text:0000000000002C04                 test    al, al
.text:0000000000002C06                 jz      loc_2E58
.text:0000000000002C0C
.text:0000000000002C0C loc_2C0C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002C0C                 xor     r12d, r12d
.text:0000000000002C0F                 xor     eax, eax
.text:0000000000002C11                 nop     dword ptr [rax+00000000h]
.text:0000000000002C18
.text:0000000000002C18 loc_2C18:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002C18                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002C18                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002C1D                 jnz     loc_2D32
.text:0000000000002C23                 test    dl, dl
.text:0000000000002C25                 jnz     loc_2D32
.text:0000000000002C2B
.text:0000000000002C2B loc_2C2B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002C2B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002C30                 test    rsi, rsi
.text:0000000000002C33                 jz      short loc_2C49
.text:0000000000002C35                 mov     edx, ebx
.text:0000000000002C37                 shr     dl, 5
.text:0000000000002C3A                 movzx   edx, dl
.text:0000000000002C3D                 mov     edx, [rsi+rdx*4]
.text:0000000000002C40                 bt      edx, ebx
.text:0000000000002C43                 jb      loc_2D93
.text:0000000000002C49
.text:0000000000002C49 loc_2C49:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002C49                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002C49                 test    r10b, r10b
.text:0000000000002C4C                 jnz     loc_2D93
.text:0000000000002C52                 xor     eax, 1
.text:0000000000002C55                 add     rbp, 1
.text:0000000000002C59                 and     eax, r8d
.text:0000000000002C5C
.text:0000000000002C5C loc_2C5C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002C5C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002C5C                 test    al, al
.text:0000000000002C5E                 jz      short loc_2C80
.text:0000000000002C60                 cmp     r13, r15
.text:0000000000002C63                 jbe     short loc_2C6A
.text:0000000000002C65                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C6A
.text:0000000000002C6A loc_2C6A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002C6A                 lea     rax, [r15+1]
.text:0000000000002C6E                 cmp     r13, rax
.text:0000000000002C71                 jbe     short loc_2C79
.text:0000000000002C73                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002C79
.text:0000000000002C79 loc_2C79:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002C79                 add     r15, 2
.text:0000000000002C7D                 xor     r8d, r8d
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002C80                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002C80                 cmp     r15, r13
.text:0000000000002C83                 jnb     short loc_2C89
.text:0000000000002C85                 mov     [r14+r15], bl
.text:0000000000002C89
.text:0000000000002C89 loc_2C89:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002C89                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002C8E                 add     r15, 1
.text:0000000000002C92                 mov     eax, 0
.text:0000000000002C97                 test    r12b, r12b
.text:0000000000002C9A                 cmovz   edi, eax
.text:0000000000002C9D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002CA2                 jmp     loc_2AD8
.text:0000000000002CA2 ; ---------------------------------------------------------------------------
.text:0000000000002CA7                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002CB0                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000002CB0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002CB3
.text:0000000000002CB3 loc_2CB3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CB3                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002CB3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002CB7                 cmp     eax, 2
.text:0000000000002CBA                 jz      loc_3278
.text:0000000000002CC0                 cmp     eax, 5
.text:0000000000002CC3                 jz      loc_3238
.text:0000000000002CC9                 cmp     eax, 2
.text:0000000000002CCC                 mov     ebx, 3Fh ; '?'
.text:0000000000002CD1                 setz    dl
.text:0000000000002CD4                 xor     r12d, r12d
.text:0000000000002CD7                 xor     eax, eax
.text:0000000000002CD9                 jmp     loc_2C18
.text:0000000000002CD9 ; ---------------------------------------------------------------------------
.text:0000000000002CDE                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002CE0                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000002CE0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002CE3
.text:0000000000002CE3 loc_2CE3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CE3                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002CE3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002CE8                 jz      loc_31F0
.text:0000000000002CEE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002CF3                 xor     edx, edx
.text:0000000000002CF5                 xor     eax, eax
.text:0000000000002CF7                 mov     ebx, 27h ; '''
.text:0000000000002CFC                 jmp     loc_2C18
.text:0000000000002CFC ; ---------------------------------------------------------------------------
.text:0000000000002D01                 align 8
.text:0000000000002D08
.text:0000000000002D08 loc_2D08:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D08                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002D08                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002D0D                 mov     ebx, 74h ; 't'
.text:0000000000002D12
.text:0000000000002D12 loc_2D12:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002D12                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002D12                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D17                 setz    al
.text:0000000000002D1A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002D1E                 jnz     loc_2E6E
.text:0000000000002D24
.text:0000000000002D24 loc_2D24:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002D24                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002D24                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002D29                 jnz     short loc_2D90
.text:0000000000002D2B
.text:0000000000002D2B loc_2D2B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002D2B                 mov     ebx, edx
.text:0000000000002D2D                 xor     r12d, r12d
.text:0000000000002D30                 xor     eax, eax
.text:0000000000002D32
.text:0000000000002D32 loc_2D32:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002D32                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002D32                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002D37                 jnz     loc_2C2B
.text:0000000000002D3D                 jmp     loc_2C49
.text:0000000000002D3D ; ---------------------------------------------------------------------------
.text:0000000000002D42                 align 8
.text:0000000000002D48
.text:0000000000002D48 loc_2D48:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D48                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002D48                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002D4D                 mov     ebx, 62h ; 'b'
.text:0000000000002D52                 jmp     short loc_2D24
.text:0000000000002D52 ; ---------------------------------------------------------------------------
.text:0000000000002D54                 align 8
.text:0000000000002D58
.text:0000000000002D58 loc_2D58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D58                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002D58                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002D5D                 jz      loc_3130
.text:0000000000002D63                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002D68                 jz      loc_2F80
.text:0000000000002D6E
.text:0000000000002D6E loc_2D6E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002D6E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002D73                 jz      loc_2F80
.text:0000000000002D79                 cmp     [rsp+0E8h+n], 0
.text:0000000000002D7F                 jnz     loc_313B
.text:0000000000002D85                 mov     ebx, 5Ch ; '\'
.text:0000000000002D8A                 nop     word ptr [rax+rax+00h]
.text:0000000000002D90
.text:0000000000002D90 loc_2D90:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002D90                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002D90                 xor     r12d, r12d
.text:0000000000002D93
.text:0000000000002D93 loc_2D93:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002D93                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002D93                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D98                 setz    dl
.text:0000000000002D9B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DA0                 mov     eax, edx
.text:0000000000002DA2                 jnz     loc_35F8
.text:0000000000002DA8                 mov     eax, r8d
.text:0000000000002DAB                 xor     eax, 1
.text:0000000000002DAE                 and     al, dl
.text:0000000000002DB0                 jz      short loc_2DE1
.text:0000000000002DB2                 cmp     r13, r15
.text:0000000000002DB5                 jbe     short loc_2DBC
.text:0000000000002DB7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002DBC
.text:0000000000002DBC loc_2DBC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002DBC                 lea     rdx, [r15+1]
.text:0000000000002DC0                 cmp     r13, rdx
.text:0000000000002DC3                 jbe     short loc_2DCB
.text:0000000000002DC5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002DCB
.text:0000000000002DCB loc_2DCB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002DCB                 lea     rdx, [r15+2]
.text:0000000000002DCF                 cmp     r13, rdx
.text:0000000000002DD2                 jbe     short loc_2DDA
.text:0000000000002DD4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002DDA
.text:0000000000002DDA loc_2DDA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000002DDA                 add     r15, 3
.text:0000000000002DDE                 mov     r8d, eax
.text:0000000000002DE1
.text:0000000000002DE1 loc_2DE1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002DE1                 cmp     r13, r15
.text:0000000000002DE4                 jbe     short loc_2DEB
.text:0000000000002DE6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002DEB
.text:0000000000002DEB loc_2DEB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000002DEB                 add     r15, 1
.text:0000000000002DEF                 add     rbp, 1
.text:0000000000002DF3                 jmp     loc_2C80
.text:0000000000002DF3 ; ---------------------------------------------------------------------------
.text:0000000000002DF8                 align 20h
.text:0000000000002E00
.text:0000000000002E00 loc_2E00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E00                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002E00                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002E05                 jnz     loc_2FD3
.text:0000000000002E0B                 xor     edx, edx
.text:0000000000002E0D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002E12                 jz      loc_2D2B
.text:0000000000002E18                 add     rbp, 1
.text:0000000000002E1C                 jmp     loc_2AD8
.text:0000000000002E1C ; ---------------------------------------------------------------------------
.text:0000000000002E21                 align 8
.text:0000000000002E28
.text:0000000000002E28 loc_2E28:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E28                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002E28                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000002E2D                 setz    dl
.text:0000000000002E30                 xor     eax, eax
.text:0000000000002E32                 jmp     loc_2C18
.text:0000000000002E32 ; ---------------------------------------------------------------------------
.text:0000000000002E37                 align 20h
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E40                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002E40                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002E45                 mov     ebx, 61h ; 'a'
.text:0000000000002E4A                 jmp     loc_2D24
.text:0000000000002E4A ; ---------------------------------------------------------------------------
.text:0000000000002E4F                 align 10h
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E50                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002E50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002E55                 setz    dl
.text:0000000000002E58
.text:0000000000002E58 loc_2E58:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002E58                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002E58                 test    rbp, rbp
.text:0000000000002E5B                 jnz     loc_2C0C
.text:0000000000002E61
.text:0000000000002E61 loc_2E61:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002E61                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002E61                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002E66                 and     al, dl
.text:0000000000002E68                 jz      loc_2C18
.text:0000000000002E6E
.text:0000000000002E6E loc_2E6E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000002E6E                 mov     rbp, r11
.text:0000000000002E71                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002E79                 jmp     loc_3579
.text:0000000000002E79 ; ---------------------------------------------------------------------------
.text:0000000000002E7E                 align 20h
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E80                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002E80                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002E85                 setz    dl
.text:0000000000002E88                 xor     r12d, r12d
.text:0000000000002E8B                 jmp     short loc_2E61
.text:0000000000002E8B ; ---------------------------------------------------------------------------
.text:0000000000002E8D                 align 10h
.text:0000000000002E90
.text:0000000000002E90 loc_2E90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E90                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002E90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002E95                 mov     ebx, 20h ; ' '
.text:0000000000002E9A                 setz    dl
.text:0000000000002E9D                 jmp     short loc_2E61
.text:0000000000002E9D ; ---------------------------------------------------------------------------
.text:0000000000002E9F                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 loc_2EA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EA0                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002EA0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002EA5                 mov     ebx, 72h ; 'r'
.text:0000000000002EAA                 jmp     loc_2D12
.text:0000000000002EAA ; ---------------------------------------------------------------------------
.text:0000000000002EAF                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EB0                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002EB0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002EB5                 mov     ebx, 66h ; 'f'
.text:0000000000002EBA                 jmp     loc_2D24
.text:0000000000002EBA ; ---------------------------------------------------------------------------
.text:0000000000002EBF                 align 20h
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EC0                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002EC0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002EC5                 mov     ebx, 76h ; 'v'
.text:0000000000002ECA                 jmp     loc_2D24
.text:0000000000002ECA ; ---------------------------------------------------------------------------
.text:0000000000002ECF                 align 10h
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002ED0                                         ; DATA XREF: .rodata:jpt_2BDE↓o
.text:0000000000002ED0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002ED5                 mov     ebx, 6Eh ; 'n'
.text:0000000000002EDA                 jmp     loc_2D12
.text:0000000000002EDA ; ---------------------------------------------------------------------------
.text:0000000000002EDF                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 def_2F6A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002EE0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002EE0                                         ; DATA XREF: ...
.text:0000000000002EE0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002EE3                 nop     dword ptr [rax+rax+00h]
.text:0000000000002EE8
.text:0000000000002EE8 def_2BDE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002EE8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002EE8                                         ; DATA XREF: ...
.text:0000000000002EE8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002EEE                 jnz     loc_3298
.text:0000000000002EF4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002EF9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002EFE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002F03                 call    ___ctype_b_loc
.text:0000000000002F08                 mov     rcx, [rax]
.text:0000000000002F0B                 movzx   edx, bl
.text:0000000000002F0E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002F14                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002F1A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002F1F                 mov     edi, 1
.text:0000000000002F24                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002F28                 and     ax, 4000h
.text:0000000000002F2C                 setnz   r12b
.text:0000000000002F30                 setz    al
.text:0000000000002F33                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002F37
.text:0000000000002F37 loc_2F37:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002F37                 test    al, al
.text:0000000000002F39                 jnz     loc_38D1
.text:0000000000002F3F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F44                 setz    dl
.text:0000000000002F47                 jmp     loc_2C18
.text:0000000000002F47 ; ---------------------------------------------------------------------------
.text:0000000000002F4C                 align 10h
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002F50                 movzx   ebx, byte ptr [r9]
.text:0000000000002F54                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002F57                 ja      short def_2F6A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002F59                 lea     rcx, jpt_2F6A
.text:0000000000002F60                 movzx   edx, bl
.text:0000000000002F63                 movsxd  rax, ds:(jpt_2F6A - 8548h)[rcx+rdx*4]
.text:0000000000002F67                 add     rax, rcx
.text:0000000000002F6A                 jmp     rax             ; switch jump
.text:0000000000002F6A ; ---------------------------------------------------------------------------
.text:0000000000002F6C                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F70                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000002F70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002F73                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002F78                 jnz     loc_2D6E
.text:0000000000002F7E                 xchg    ax, ax
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002F80                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002F80                 mov     edx, 5Ch ; '\'
.text:0000000000002F85                 mov     ebx, 5Ch ; '\'
.text:0000000000002F8A                 jmp     loc_2D24
.text:0000000000002F8A ; ---------------------------------------------------------------------------
.text:0000000000002F8F                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F90                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000002F90                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002F95                 xor     r10d, r10d
.text:0000000000002F98                 mov     ebx, 66h ; 'f'
.text:0000000000002F9D                 jmp     loc_2D24
.text:0000000000002F9D ; ---------------------------------------------------------------------------
.text:0000000000002FA2                 align 8
.text:0000000000002FA8
.text:0000000000002FA8 loc_2FA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FA8                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000002FA8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000002FAD                 xor     r10d, r10d
.text:0000000000002FB0                 mov     ebx, 6Eh ; 'n'
.text:0000000000002FB5                 jmp     loc_2D12
.text:0000000000002FB5 ; ---------------------------------------------------------------------------
.text:0000000000002FBA                 align 20h
.text:0000000000002FC0
.text:0000000000002FC0 loc_2FC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FC0                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000002FC0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002FC5                 jmp     loc_2D90
.text:0000000000002FC5 ; ---------------------------------------------------------------------------
.text:0000000000002FCA                 align 10h
.text:0000000000002FD0
.text:0000000000002FD0 loc_2FD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FD0                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000002FD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002FD3
.text:0000000000002FD3 loc_2FD3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002FD3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FD8                 setz    dl
.text:0000000000002FDB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FE0                 jnz     loc_3B7A
.text:0000000000002FE6                 mov     eax, r8d
.text:0000000000002FE9                 mov     rcx, r15
.text:0000000000002FEC                 xor     eax, 1
.text:0000000000002FEF                 and     al, dl
.text:0000000000002FF1                 jz      short loc_3020
.text:0000000000002FF3                 cmp     r13, r15
.text:0000000000002FF6                 jbe     short loc_2FFD
.text:0000000000002FF8                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002FFD
.text:0000000000002FFD loc_2FFD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000002FFD                 lea     rcx, [r15+1]
.text:0000000000003001                 cmp     r13, rcx
.text:0000000000003004                 jbe     short loc_300C
.text:0000000000003006                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000300C
.text:000000000000300C loc_300C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000300C                 lea     rcx, [r15+2]
.text:0000000000003010                 cmp     r13, rcx
.text:0000000000003013                 ja      loc_3649
.text:0000000000003019
.text:0000000000003019 loc_3019:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003019                 lea     rcx, [r15+3]
.text:000000000000301D                 mov     r8d, eax
.text:0000000000003020
.text:0000000000003020 loc_3020:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003020                 cmp     r13, rcx
.text:0000000000003023                 jbe     short loc_302A
.text:0000000000003025                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000302A
.text:000000000000302A loc_302A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000302A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000302F                 lea     r15, [rcx+1]
.text:0000000000003033                 jz      loc_3639
.text:0000000000003039                 lea     rax, [rbp+1]
.text:000000000000303D                 cmp     rax, r11
.text:0000000000003040                 jnb     short loc_305B
.text:0000000000003042                 mov     rax, [rsp+0E8h+s]
.text:0000000000003047                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000304C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003050                 sub     eax, 30h ; '0'
.text:0000000000003053                 cmp     al, 9
.text:0000000000003055                 jbe     loc_3889
.text:000000000000305B
.text:000000000000305B loc_305B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000305B                 mov     eax, r12d
.text:000000000000305E                 mov     ebx, 30h ; '0'
.text:0000000000003063                 xor     r12d, r12d
.text:0000000000003066                 jmp     loc_2C18
.text:0000000000003066 ; ---------------------------------------------------------------------------
.text:000000000000306B                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003070                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000003070                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003075                 mov     r12d, r10d
.text:0000000000003078                 setz    dl
.text:000000000000307B                 xor     r10d, r10d
.text:000000000000307E                 xor     eax, eax
.text:0000000000003080                 jmp     loc_2C18
.text:0000000000003080 ; ---------------------------------------------------------------------------
.text:0000000000003085                 align 8
.text:0000000000003088
.text:0000000000003088 loc_3088:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003088                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000003088                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000308D                 setz    dl
.text:0000000000003090                 xor     r10d, r10d
.text:0000000000003093                 jmp     loc_2E58
.text:0000000000003093 ; ---------------------------------------------------------------------------
.text:0000000000003098                 align 20h
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030A0                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:00000000000030A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000030A5                 setz    dl
.text:00000000000030A8                 xor     r10d, r10d
.text:00000000000030AB                 xor     r12d, r12d
.text:00000000000030AE                 jmp     loc_2E61
.text:00000000000030AE ; ---------------------------------------------------------------------------
.text:00000000000030B3                 align 8
.text:00000000000030B8
.text:00000000000030B8 loc_30B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030B8                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:00000000000030B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000030BD                 mov     r12d, r10d
.text:00000000000030C0                 mov     ebx, 20h ; ' '
.text:00000000000030C5                 setz    dl
.text:00000000000030C8                 xor     r10d, r10d
.text:00000000000030CB                 jmp     loc_2E61
.text:00000000000030D0 ; ---------------------------------------------------------------------------
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030D0                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:00000000000030D0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000030D5                 xor     r10d, r10d
.text:00000000000030D8                 mov     ebx, 72h ; 'r'
.text:00000000000030DD                 jmp     loc_2D12
.text:00000000000030DD ; ---------------------------------------------------------------------------
.text:00000000000030E2                 align 8
.text:00000000000030E8
.text:00000000000030E8 loc_30E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030E8                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:00000000000030E8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000030ED                 jmp     loc_2D90
.text:00000000000030ED ; ---------------------------------------------------------------------------
.text:00000000000030F2                 align 8
.text:00000000000030F8
.text:00000000000030F8 loc_30F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030F8                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:00000000000030F8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000030FD                 xor     r10d, r10d
.text:0000000000003100                 mov     ebx, 74h ; 't'
.text:0000000000003105                 jmp     loc_2D12
.text:0000000000003105 ; ---------------------------------------------------------------------------
.text:000000000000310A                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003110                                         ; DATA XREF: .rodata:jpt_2F6A↓o
.text:0000000000003110                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003115                 jmp     loc_2D90
.text:0000000000003115 ; ---------------------------------------------------------------------------
.text:000000000000311A                 align 20h
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003120                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003120                 xor     r10d, r10d
.text:0000000000003123                 jmp     loc_2BC0
.text:0000000000003123 ; ---------------------------------------------------------------------------
.text:0000000000003128                 align 10h
.text:0000000000003130
.text:0000000000003130 loc_3130:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003130                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003135                 jnz     loc_3AA0
.text:000000000000313B
.text:000000000000313B loc_313B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000313B                 add     rbp, 1
.text:000000000000313F                 mov     eax, r8d
.text:0000000000003142                 xor     r12d, r12d
.text:0000000000003145                 mov     ebx, 5Ch ; '\'
.text:000000000000314A                 jmp     loc_2C5C
.text:000000000000314A ; ---------------------------------------------------------------------------
.text:000000000000314F                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003150                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003155                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000315A                 mov     r12d, r8d
.text:000000000000315D                 mov     rbp, r11
.text:0000000000003160                 setz    dl
.text:0000000000003163                 mov     eax, ebx
.text:0000000000003165                 test    r15, r15
.text:0000000000003168                 setz    cl
.text:000000000000316B                 and     eax, edx
.text:000000000000316D                 and     al, cl
.text:000000000000316F                 jnz     loc_3BD6
.text:0000000000003175                 mov     eax, ebx
.text:0000000000003177                 xor     eax, 1
.text:000000000000317A                 and     dl, al
.text:000000000000317C                 jz      loc_3AEC
.text:0000000000003182                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003187                 jz      loc_3AEA
.text:000000000000318D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003192                 jnz     loc_3B8D
.text:0000000000003198                 test    r13, r13
.text:000000000000319B                 setz    al
.text:000000000000319E                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000031A4                 setnz   dl
.text:00000000000031A7                 and     al, dl
.text:00000000000031A9                 jz      loc_3BCC
.text:00000000000031AF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000031B4
.text:00000000000031B4 loc_31B4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000031B4                 lea     rbx, asc_82C5   ; "'"
.text:00000000000031BB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000031BF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000031C7                 mov     r15d, 1
.text:00000000000031CD                 mov     [rsp+0E8h+n], 1
.text:00000000000031D6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000031DB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000031E0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000031E4                 jmp     loc_2AC3
.text:00000000000031E4 ; ---------------------------------------------------------------------------
.text:00000000000031E9                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000031F0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000031F5                 jnz     loc_3AA0
.text:00000000000031FB                 test    r13, r13
.text:00000000000031FE                 jz      loc_3600
.text:0000000000003204                 xor     edx, edx
.text:0000000000003206                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000320C                 jnz     loc_3600
.text:0000000000003212
.text:0000000000003212 loc_3212:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003212                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003212                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003217                 add     r15, 3
.text:000000000000321B                 xor     eax, eax
.text:000000000000321D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003222                 xor     r8d, r8d
.text:0000000000003225                 mov     r13, rdx
.text:0000000000003228                 mov     ebx, 27h ; '''
.text:000000000000322D                 jmp     loc_2C49
.text:000000000000322D ; ---------------------------------------------------------------------------
.text:0000000000003232                 align 8
.text:0000000000003238
.text:0000000000003238 loc_3238:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003238                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000323D                 jz      short loc_3260
.text:000000000000323F                 lea     rcx, [rbp+2]
.text:0000000000003243                 cmp     rcx, r11
.text:0000000000003246                 jnb     short loc_3260
.text:0000000000003248                 mov     rax, [rsp+0E8h+s]
.text:000000000000324D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003252                 jz      loc_39E2
.text:0000000000003258                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003260                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003260                 xor     edx, edx
.text:0000000000003262                 xor     r12d, r12d
.text:0000000000003265                 xor     eax, eax
.text:0000000000003267                 mov     ebx, 3Fh ; '?'
.text:000000000000326C                 jmp     loc_2C18
.text:000000000000326C ; ---------------------------------------------------------------------------
.text:0000000000003271                 align 8
.text:0000000000003278
.text:0000000000003278 loc_3278:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003278                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000327D                 jnz     loc_3AA0
.text:0000000000003283                 xor     r12d, r12d
.text:0000000000003286                 xor     eax, eax
.text:0000000000003288                 mov     ebx, 3Fh ; '?'
.text:000000000000328D                 jmp     loc_2C49
.text:000000000000328D ; ---------------------------------------------------------------------------
.text:0000000000003292                 align 8
.text:0000000000003298
.text:0000000000003298 loc_3298:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003298                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000032A0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000032A4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000032B0                 mov     [rsp+0E8h+ps], rax
.text:00000000000032B5                 jnz     short loc_32E4
.text:00000000000032B7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000032BC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000032C1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000032C6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000032CB                 call    _strlen
.text:00000000000032D0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000032D6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000032DC                 mov     r11, rax
.text:00000000000032DF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000032E4
.text:00000000000032E4 loc_32E4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000032E4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000032EC                 xor     ecx, ecx
.text:00000000000032EE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000032F2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000032F7                 mov     rbx, rcx
.text:00000000000032FA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003302                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003307                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000330C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003314                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003319                 mov     [rsp+0E8h+var_78], r13
.text:000000000000331E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003323
.text:0000000000003323 loc_3323:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003323                 mov     rax, [rsp+0E8h+s]
.text:0000000000003328                 lea     r14, [rbp+rbx+0]
.text:000000000000332D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003332                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003337                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000333C                 lea     r13, [rax+r14]
.text:0000000000003340                 sub     rdx, r14
.text:0000000000003343                 mov     rsi, r13
.text:0000000000003346                 call    rpl_mbrtowc
.text:000000000000334B                 test    rax, rax
.text:000000000000334E                 mov     r15, rax
.text:0000000000003351                 jz      short loc_33A1
.text:0000000000003353                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003357                 jz      loc_3975
.text:000000000000335D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003361                 jz      loc_3901
.text:0000000000003367                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000336C                 setz    al
.text:000000000000336F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003373                 jnz     loc_3510
.text:0000000000003379
.text:0000000000003379 loc_3379:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003379                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003379                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003380                 call    _iswprint
.text:0000000000003385                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000338A                 test    eax, eax
.text:000000000000338C                 mov     eax, 0
.text:0000000000003391                 cmovz   r12d, eax
.text:0000000000003395                 add     rbx, r15
.text:0000000000003398                 call    _mbsinit
.text:000000000000339D                 test    eax, eax
.text:000000000000339F                 jz      short loc_3323
.text:00000000000033A1
.text:00000000000033A1 loc_33A1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000033A1                 mov     edx, r12d
.text:00000000000033A4                 mov     rdi, rbx
.text:00000000000033A7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000033AD                 xor     edx, 1
.text:00000000000033B0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000033B5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000033BB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000033BF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000033C7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000033CC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000033D1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000033D6
.text:00000000000033D6 loc_33D6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000033D6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000033D6                 cmp     rdi, 1
.text:00000000000033DA                 jbe     loc_39DB
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000033E0                 mov     rcx, rdi
.text:00000000000033E3                 xor     esi, esi
.text:00000000000033E5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000033EB                 add     rcx, rbp
.text:00000000000033EE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000033F3                 jmp     loc_34AE
.text:00000000000033F3 ; ---------------------------------------------------------------------------
.text:00000000000033F8                 align 20h
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003400                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003405                 setz    al
.text:0000000000003408                 test    r9b, r9b
.text:000000000000340B                 jnz     loc_38C0
.text:0000000000003411                 mov     esi, r8d
.text:0000000000003414                 xor     esi, 1
.text:0000000000003417                 and     al, sil
.text:000000000000341A                 jz      short loc_344B
.text:000000000000341C                 cmp     r13, r15
.text:000000000000341F                 jbe     short loc_3426
.text:0000000000003421                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003426
.text:0000000000003426 loc_3426:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003426                 lea     rsi, [r15+1]
.text:000000000000342A                 cmp     r13, rsi
.text:000000000000342D                 jbe     short loc_3435
.text:000000000000342F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003435
.text:0000000000003435 loc_3435:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003435                 lea     rsi, [r15+2]
.text:0000000000003439                 cmp     r13, rsi
.text:000000000000343C                 jbe     short loc_3444
.text:000000000000343E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003444
.text:0000000000003444 loc_3444:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003444                 add     r15, 3
.text:0000000000003448                 mov     r8d, eax
.text:000000000000344B
.text:000000000000344B loc_344B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000344B                 cmp     r13, r15
.text:000000000000344E                 jbe     short loc_3455
.text:0000000000003450                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003455
.text:0000000000003455 loc_3455:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003455                 lea     rax, [r15+1]
.text:0000000000003459                 cmp     r13, rax
.text:000000000000345C                 jbe     short loc_346B
.text:000000000000345E                 mov     eax, ebx
.text:0000000000003460                 shr     al, 6
.text:0000000000003463                 add     eax, 30h ; '0'
.text:0000000000003466                 mov     [r14+r15+1], al
.text:000000000000346B
.text:000000000000346B loc_346B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000346B                 lea     rax, [r15+2]
.text:000000000000346F                 cmp     r13, rax
.text:0000000000003472                 jbe     short loc_3484
.text:0000000000003474                 mov     eax, ebx
.text:0000000000003476                 shr     al, 3
.text:0000000000003479                 and     eax, 7
.text:000000000000347C                 add     eax, 30h ; '0'
.text:000000000000347F                 mov     [r14+r15+2], al
.text:0000000000003484
.text:0000000000003484 loc_3484:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003484                 and     ebx, 7
.text:0000000000003487                 add     rbp, 1
.text:000000000000348B                 add     r15, 3
.text:000000000000348F                 add     ebx, 30h ; '0'
.text:0000000000003492                 cmp     rbp, rcx
.text:0000000000003495                 jnb     loc_2C80
.text:000000000000349B                 mov     esi, edx
.text:000000000000349D
.text:000000000000349D loc_349D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000349D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000349D                 cmp     r13, r15
.text:00000000000034A0                 jbe     short loc_34A6
.text:00000000000034A2                 mov     [r14+r15], bl
.text:00000000000034A6
.text:00000000000034A6 loc_34A6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000034A6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000034AA                 add     r15, 1
.text:00000000000034AE
.text:00000000000034AE loc_34AE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000034AE                 test    dl, dl
.text:00000000000034B0                 jnz     loc_3400
.text:00000000000034B6                 mov     eax, esi
.text:00000000000034B8                 xor     eax, 1
.text:00000000000034BB                 and     eax, r8d
.text:00000000000034BE                 test    r10b, r10b
.text:00000000000034C1                 jz      short loc_34D1
.text:00000000000034C3                 cmp     r13, r15
.text:00000000000034C6                 jbe     short loc_34CD
.text:00000000000034C8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000034CD
.text:00000000000034CD loc_34CD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000034CD                 add     r15, 1
.text:00000000000034D1
.text:00000000000034D1 loc_34D1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000034D1                 add     rbp, 1
.text:00000000000034D5                 cmp     rbp, rcx
.text:00000000000034D8                 jnb     loc_2C5C
.text:00000000000034DE                 test    al, al
.text:00000000000034E0                 jz      loc_38DE
.text:00000000000034E6                 cmp     r13, r15
.text:00000000000034E9                 jbe     short loc_34F0
.text:00000000000034EB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000034F0                 lea     rax, [r15+1]
.text:00000000000034F4                 cmp     r13, rax
.text:00000000000034F7                 jbe     short loc_34FF
.text:00000000000034F9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000034FF
.text:00000000000034FF loc_34FF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000034FF                 add     r15, 2
.text:0000000000003503                 xor     r10d, r10d
.text:0000000000003506                 xor     r8d, r8d
.text:0000000000003509                 jmp     short loc_349D
.text:0000000000003509 ; ---------------------------------------------------------------------------
.text:000000000000350B                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003510                 cmp     r15, 1
.text:0000000000003514                 jz      loc_3379
.text:000000000000351A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000351F                 lea     rcx, [rdi+r15]
.text:0000000000003523                 lea     rdx, [rdi+r14+1]
.text:0000000000003528                 lea     r8, [rcx+r14]
.text:000000000000352C                 jmp     short loc_353D
.text:000000000000352C ; ---------------------------------------------------------------------------
.text:000000000000352E                 align 10h
.text:0000000000003530
.text:0000000000003530 loc_3530:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003530                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003530                 add     rdx, 1
.text:0000000000003534                 cmp     r8, rdx
.text:0000000000003537                 jz      loc_3379
.text:000000000000353D
.text:000000000000353D loc_353D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000353D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003540                 sub     ecx, 5Bh ; '['
.text:0000000000003543                 cmp     cl, 21h ; '!'
.text:0000000000003546                 ja      short loc_3530
.text:0000000000003548                 mov     esi, 1
.text:000000000000354D                 shl     rsi, cl
.text:0000000000003550                 mov     rcx, rsi
.text:0000000000003553                 mov     rsi, 20000002Bh
.text:000000000000355D                 test    rcx, rsi
.text:0000000000003560                 jz      short loc_3530
.text:0000000000003562                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003567                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000356C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003571                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003579
.text:0000000000003579 loc_3579:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003579                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003579                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000357E                 jz      short loc_3590
.text:0000000000003580                 test    al, al
.text:0000000000003582                 mov     eax, 4
.text:0000000000003587                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000358C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003590                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003590                 sub     rsp, 8
.text:0000000000003594                 mov     rcx, rbp
.text:0000000000003597                 mov     rsi, r13
.text:000000000000359A                 push    [rsp+0F0h+var_88]
.text:000000000000359E                 push    [rsp+0F8h+var_80]
.text:00000000000035A2                 mov     rdi, r14
.text:00000000000035A5                 push    0
.text:00000000000035A7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000035AF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000035B4                 mov     rdx, [rsp+108h+s]
.text:00000000000035B9                 and     r9d, 0FFFFFFFDh
.text:00000000000035BD                 call    quotearg_buffer_restyled
.text:00000000000035C2                 add     rsp, 20h
.text:00000000000035C6                 mov     r15, rax
.text:00000000000035C9
.text:00000000000035C9 loc_35C9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000035C9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000035C9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000035D1                 xor     rbx, fs:28h
.text:00000000000035DA                 mov     rax, r15
.text:00000000000035DD                 jnz     loc_3BE3
.text:00000000000035E3                 add     rsp, 0B8h
.text:00000000000035EA                 pop     rbx
.text:00000000000035EB                 pop     rbp
.text:00000000000035EC                 pop     r12
.text:00000000000035EE                 pop     r13
.text:00000000000035F0                 pop     r14
.text:00000000000035F2                 pop     r15
.text:00000000000035F4                 retn
.text:00000000000035F4 ; ---------------------------------------------------------------------------
.text:00000000000035F5                 align 8
.text:00000000000035F8
.text:00000000000035F8 loc_35F8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000035F8                 mov     rbp, r11
.text:00000000000035FB                 jmp     loc_3579
.text:0000000000003600 ; ---------------------------------------------------------------------------
.text:0000000000003600
.text:0000000000003600 loc_3600:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003600                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003600                 cmp     r13, r15
.text:0000000000003603                 jbe     short loc_360A
.text:0000000000003605                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000360A
.text:000000000000360A loc_360A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000360A                 lea     rax, [r15+1]
.text:000000000000360E                 cmp     r13, rax
.text:0000000000003611                 jbe     short loc_3619
.text:0000000000003613                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003619
.text:0000000000003619 loc_3619:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003619                 lea     rax, [r15+2]
.text:000000000000361D                 cmp     r13, rax
.text:0000000000003620                 jbe     loc_3C12
.text:0000000000003626                 mov     rdx, r13
.text:0000000000003629                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000362F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003634                 jmp     loc_3212
.text:0000000000003639 ; ---------------------------------------------------------------------------
.text:0000000000003639
.text:0000000000003639 loc_3639:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003639                 mov     eax, r12d
.text:000000000000363C                 mov     ebx, 30h ; '0'
.text:0000000000003641                 xor     r12d, r12d
.text:0000000000003644                 jmp     loc_2C49
.text:0000000000003649 ; ---------------------------------------------------------------------------
.text:0000000000003649
.text:0000000000003649 loc_3649:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003649                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000364F                 jmp     loc_3019
.text:0000000000003654 ; ---------------------------------------------------------------------------
.text:0000000000003654
.text:0000000000003654 loc_3654:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003654                                         ; DATA XREF: .rodata:jpt_2A81↓o
.text:0000000000003654                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003656                 jnz     loc_2A83        ; jumptable 00000000000121F1 case 1
.text:000000000000365C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003661
.text:0000000000003661 loc_3661:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003661                 test    r13, r13
.text:0000000000003664                 jnz     loc_3BFA
.text:000000000000366A                 lea     rax, asc_82C5   ; "'"
.text:0000000000003671                 mov     [rsp+0E8h+var_98], 0
.text:000000000000367A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000367F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003684                 xor     r12d, r12d
.text:0000000000003687                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000368C                 mov     [rsp+0E8h+n], 1
.text:0000000000003695                 mov     [rsp+0E8h+s2], rax
.text:000000000000369A                 mov     r15d, 1
.text:00000000000036A0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000036A8                 jmp     loc_2AC3
.text:00000000000036A8 ; ---------------------------------------------------------------------------
.text:00000000000036AD                 align 10h
.text:00000000000036B0
.text:00000000000036B0 loc_36B0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000036B0                                         ; DATA XREF: .rodata:jpt_2A81↓o
.text:00000000000036B0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000036B2                 jnz     loc_3AAD
.text:00000000000036B8                 test    r13, r13
.text:00000000000036BB                 jz      loc_38E6
.text:00000000000036C1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000036C5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000036CA                 xor     r12d, r12d
.text:00000000000036CD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000036D2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000036DB
.text:00000000000036DB loc_36DB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000036DB                 lea     rax, unk_82C3
.text:00000000000036E2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000036E7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000036EC                 mov     [rsp+0E8h+n], 1
.text:00000000000036F5                 mov     r15d, 1
.text:00000000000036FB                 mov     [rsp+0E8h+s2], rax
.text:0000000000003700                 jmp     loc_2AC3
.text:0000000000003705 ; ---------------------------------------------------------------------------
.text:0000000000003705
.text:0000000000003705 loc_3705:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003705                                         ; DATA XREF: .rodata:jpt_2A81↓o
.text:0000000000003705                 lea     rax, unk_82C3   ; jumptable 00000000000121F1 case 6
.text:000000000000370C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003711                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003716                 xor     r12d, r12d
.text:0000000000003719                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003722                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003727                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000372C                 mov     [rsp+0E8h+n], 1
.text:0000000000003735                 xor     r15d, r15d
.text:0000000000003738                 mov     [rsp+0E8h+s2], rax
.text:000000000000373D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003745                 jmp     loc_2AC3
.text:000000000000374A ; ---------------------------------------------------------------------------
.text:000000000000374A
.text:000000000000374A loc_374A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000374A                                         ; DATA XREF: .rodata:jpt_2A81↓o
.text:000000000000374A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000374F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003754                 xor     r12d, r12d
.text:0000000000003757                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003760                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003765                 xor     r15d, r15d
.text:0000000000003768                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000376D                 mov     [rsp+0E8h+n], 0
.text:0000000000003776                 mov     [rsp+0E8h+s2], 0
.text:000000000000377F                 jmp     loc_2AC3
.text:0000000000003784 ; ---------------------------------------------------------------------------
.text:0000000000003784
.text:0000000000003784 loc_3784:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003784                                         ; DATA XREF: .rodata:jpt_2A81↓o
.text:0000000000003784                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003789                 jz      short loc_37E1
.text:000000000000378B                 lea     rsi, asc_82C7   ; "`"
.text:0000000000003792                 xor     edi, edi        ; domainname
.text:0000000000003794                 mov     edx, 5          ; category
.text:0000000000003799                 call    _dcgettext
.text:000000000000379E                 mov     rcx, rax
.text:00000000000037A1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000037A6                 lea     rax, asc_82C7   ; "`"
.text:00000000000037AD                 cmp     rcx, rax
.text:00000000000037B0                 jz      loc_3B4E
.text:00000000000037B6
.text:00000000000037B6 loc_37B6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000037B6                 lea     rsi, asc_82C5   ; "'"
.text:00000000000037BD                 xor     edi, edi        ; domainname
.text:00000000000037BF                 mov     edx, 5          ; category
.text:00000000000037C4                 call    _dcgettext
.text:00000000000037C9                 mov     rcx, rax
.text:00000000000037CC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000037D1                 lea     rax, asc_82C5   ; "'"
.text:00000000000037D8                 cmp     rcx, rax
.text:00000000000037DB                 jz      loc_3B64
.text:00000000000037E1
.text:00000000000037E1 loc_37E1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000037E1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000037E1                 xor     r15d, r15d
.text:00000000000037E4                 test    ebx, ebx
.text:00000000000037E6                 jz      loc_39AD
.text:00000000000037EC
.text:00000000000037EC loc_37EC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000037EC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000037EC                 test    ebx, ebx
.text:00000000000037EE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000037F3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000037F8                 xor     r12d, r12d
.text:00000000000037FB                 mov     rdi, rbx        ; s
.text:00000000000037FE                 call    _strlen
.text:0000000000003803                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003808                 mov     [rsp+0E8h+n], rax
.text:000000000000380D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003812                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003817                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003820                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003825                 jmp     loc_2AC3
.text:000000000000382A ; ---------------------------------------------------------------------------
.text:000000000000382A
.text:000000000000382A loc_382A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000382A                                         ; DATA XREF: .rodata:jpt_2A81↓o
.text:000000000000382A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000382F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003834                 xor     r12d, r12d
.text:0000000000003837                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003840                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003845                 xor     r15d, r15d
.text:0000000000003848                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000384D                 mov     [rsp+0E8h+n], 0
.text:0000000000003856                 mov     [rsp+0E8h+s2], 0
.text:000000000000385F                 jmp     loc_2AC3
.text:0000000000003864 ; ---------------------------------------------------------------------------
.text:0000000000003864
.text:0000000000003864 loc_3864:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003864                                         ; DATA XREF: .rodata:jpt_2A81↓o
.text:0000000000003864                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003869                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000386E                 xor     r12d, r12d
.text:0000000000003871                 mov     [rsp+0E8h+var_98], 0
.text:000000000000387A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000387F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003884                 jmp     loc_2AA3
.text:0000000000003889 ; ---------------------------------------------------------------------------
.text:0000000000003889
.text:0000000000003889 loc_3889:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003889                 cmp     r13, r15
.text:000000000000388C                 jbe     short loc_3893
.text:000000000000388E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003893
.text:0000000000003893 loc_3893:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003893                 lea     rax, [rcx+2]
.text:0000000000003897                 cmp     r13, rax
.text:000000000000389A                 jbe     short loc_38A2
.text:000000000000389C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000038A2
.text:00000000000038A2 loc_38A2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000038A2                 mov     eax, r12d
.text:00000000000038A5                 lea     r15, [rcx+3]
.text:00000000000038A9                 xor     r12d, r12d
.text:00000000000038AC                 mov     ebx, 30h ; '0'
.text:00000000000038B1                 jmp     loc_2C18
.text:00000000000038B1 ; ---------------------------------------------------------------------------
.text:00000000000038B6                 align 20h
.text:00000000000038C0
.text:00000000000038C0 loc_38C0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000038C0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000038C5                 mov     rbp, r11
.text:00000000000038C8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000038CC                 jmp     loc_3579
.text:00000000000038D1 ; ---------------------------------------------------------------------------
.text:00000000000038D1
.text:00000000000038D1 loc_38D1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000038D1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000038D6                 xor     r12d, r12d
.text:00000000000038D9                 jmp     loc_33E0
.text:00000000000038DE ; ---------------------------------------------------------------------------
.text:00000000000038DE
.text:00000000000038DE loc_38DE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000038DE                 xor     r10d, r10d
.text:00000000000038E1                 jmp     loc_349D
.text:00000000000038E6 ; ---------------------------------------------------------------------------
.text:00000000000038E6
.text:00000000000038E6 loc_38E6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000038E6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038EF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038F4                 xor     r12d, r12d
.text:00000000000038F7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038FC                 jmp     loc_36DB
.text:0000000000003901 ; ---------------------------------------------------------------------------
.text:0000000000003901
.text:0000000000003901 loc_3901:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003901                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003906                 mov     rsi, r14
.text:0000000000003909                 mov     rcx, r13
.text:000000000000390C                 mov     rax, rbx
.text:000000000000390F                 mov     rdi, rbx
.text:0000000000003912                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003918                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000391D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003925                 cmp     rsi, r11
.text:0000000000003928                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000392E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003936                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000393B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003940                 jnb     short loc_3968
.text:0000000000003942                 cmp     byte ptr [rcx], 0
.text:0000000000003945                 jnz     short loc_3957
.text:0000000000003947                 jmp     short loc_3968
.text:0000000000003947 ; ---------------------------------------------------------------------------
.text:0000000000003949                 align 10h
.text:0000000000003950
.text:0000000000003950 loc_3950:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003950                 cmp     byte ptr [r9+rax], 0
.text:0000000000003955                 jz      short loc_3965
.text:0000000000003957
.text:0000000000003957 loc_3957:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003957                 add     rax, 1
.text:000000000000395B                 lea     rdx, [rbp+rax+0]
.text:0000000000003960                 cmp     r11, rdx
.text:0000000000003963                 ja      short loc_3950
.text:0000000000003965
.text:0000000000003965 loc_3965:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003965                 mov     rdi, rax
.text:0000000000003968
.text:0000000000003968 loc_3968:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003968                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003968                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000396D                 xor     r12d, r12d
.text:0000000000003970                 jmp     loc_33D6
.text:0000000000003975 ; ---------------------------------------------------------------------------
.text:0000000000003975
.text:0000000000003975 loc_3975:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003975                 mov     rdi, rbx
.text:0000000000003978                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000397E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003983                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003989                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003991                 xor     r12d, r12d
.text:0000000000003994                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003999                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000399E                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000039A3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000039A8                 jmp     loc_33D6
.text:00000000000039AD ; ---------------------------------------------------------------------------
.text:00000000000039AD
.text:00000000000039AD loc_39AD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000039AD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000039B2                 movzx   eax, byte ptr [rdx]
.text:00000000000039B5                 test    al, al
.text:00000000000039B7                 jz      loc_37EC
.text:00000000000039BD                 nop     dword ptr [rax]
.text:00000000000039C0
.text:00000000000039C0 loc_39C0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000039C0                 cmp     r13, r15
.text:00000000000039C3                 jbe     short loc_39C9
.text:00000000000039C5                 mov     [r14+r15], al
.text:00000000000039C9
.text:00000000000039C9 loc_39C9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000039C9                 add     r15, 1
.text:00000000000039CD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000039D2                 test    al, al
.text:00000000000039D4                 jnz     short loc_39C0
.text:00000000000039D6                 jmp     loc_37EC
.text:00000000000039DB ; ---------------------------------------------------------------------------
.text:00000000000039DB
.text:00000000000039DB loc_39DB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000039DB                 mov     eax, edx
.text:00000000000039DD                 jmp     loc_2F37
.text:00000000000039E2 ; ---------------------------------------------------------------------------
.text:00000000000039E2
.text:00000000000039E2 loc_39E2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000039E2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000039E6                 cmp     bl, 3Eh ; '>'
.text:00000000000039E9                 ja      loc_3260
.text:00000000000039EF                 mov     rax, 7000A38200000000h
.text:00000000000039F9                 bt      rax, rbx
.text:00000000000039FD                 jnb     loc_3260
.text:0000000000003A03                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A08                 jnz     loc_3BF2
.text:0000000000003A0E                 cmp     r13, r15
.text:0000000000003A11                 jbe     short loc_3A18
.text:0000000000003A13                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003A18
.text:0000000000003A18 loc_3A18:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003A18                 lea     rax, [r15+1]
.text:0000000000003A1C                 cmp     r13, rax
.text:0000000000003A1F                 jbe     short loc_3A27
.text:0000000000003A21                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003A27
.text:0000000000003A27 loc_3A27:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003A27                 lea     rax, [r15+2]
.text:0000000000003A2B                 cmp     r13, rax
.text:0000000000003A2E                 jbe     short loc_3A36
.text:0000000000003A30                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003A36
.text:0000000000003A36 loc_3A36:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003A36                 lea     rax, [r15+3]
.text:0000000000003A3A                 cmp     r13, rax
.text:0000000000003A3D                 jbe     short loc_3A45
.text:0000000000003A3F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003A45
.text:0000000000003A45 loc_3A45:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003A45                 add     r15, 4
.text:0000000000003A49                 xor     edx, edx
.text:0000000000003A4B                 xor     r12d, r12d
.text:0000000000003A4E                 xor     eax, eax
.text:0000000000003A50                 mov     rbp, rcx
.text:0000000000003A53                 jmp     loc_2C18
.text:0000000000003A58 ; ---------------------------------------------------------------------------
.text:0000000000003A58
.text:0000000000003A58 loc_3A58:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A58                                         ; DATA XREF: .rodata:jpt_2A81↓o
.text:0000000000003A58                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003A5A                 jz      loc_3BE8
.text:0000000000003A60                 lea     rax, asc_82C5   ; "'"
.text:0000000000003A67                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A6C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A71                 xor     r12d, r12d
.text:0000000000003A74                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A7D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003A82                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003A87                 mov     [rsp+0E8h+n], 1
.text:0000000000003A90                 xor     r15d, r15d
.text:0000000000003A93                 mov     [rsp+0E8h+s2], rax
.text:0000000000003A98                 jmp     loc_2AC3
.text:0000000000003A98 ; ---------------------------------------------------------------------------
.text:0000000000003A9D                 align 20h
.text:0000000000003AA0
.text:0000000000003AA0 loc_3AA0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003AA0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003AA0                 mov     rbp, r11
.text:0000000000003AA3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003AA8                 jmp     loc_3579
.text:0000000000003AAD ; ---------------------------------------------------------------------------
.text:0000000000003AAD
.text:0000000000003AAD loc_3AAD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003AAD                 lea     rax, unk_82C3
.text:0000000000003AB4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003AB9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003ABE                 xor     r12d, r12d
.text:0000000000003AC1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003ACA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003ACF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003AD4                 mov     [rsp+0E8h+n], 1
.text:0000000000003ADD                 xor     r15d, r15d
.text:0000000000003AE0                 mov     [rsp+0E8h+s2], rax
.text:0000000000003AE5                 jmp     loc_2AC3
.text:0000000000003AEA ; ---------------------------------------------------------------------------
.text:0000000000003AEA
.text:0000000000003AEA loc_3AEA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003AEA                 mov     eax, edx
.text:0000000000003AEC
.text:0000000000003AEC loc_3AEC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003AEC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003AEC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003AF1                 test    rbx, rbx
.text:0000000000003AF4                 jz      short loc_3B22
.text:0000000000003AF6                 test    al, al
.text:0000000000003AF8                 jz      short loc_3B22
.text:0000000000003AFA                 movzx   ecx, byte ptr [rbx]
.text:0000000000003AFD                 mov     rax, rbx
.text:0000000000003B00                 test    cl, cl
.text:0000000000003B02                 jz      short loc_3B22
.text:0000000000003B04                 mov     rdx, r15
.text:0000000000003B07                 sub     rax, r15
.text:0000000000003B0A
.text:0000000000003B0A loc_3B0A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003B0A                 cmp     r13, rdx
.text:0000000000003B0D                 jbe     short loc_3B13
.text:0000000000003B0F                 mov     [r14+rdx], cl
.text:0000000000003B13
.text:0000000000003B13 loc_3B13:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003B13                 add     rdx, 1
.text:0000000000003B17                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003B1B                 test    cl, cl
.text:0000000000003B1D                 jnz     short loc_3B0A
.text:0000000000003B1F                 mov     r15, rdx
.text:0000000000003B22
.text:0000000000003B22 loc_3B22:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003B22                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003B22                 cmp     r13, r15
.text:0000000000003B25                 jbe     loc_35C9
.text:0000000000003B2B                 mov     byte ptr [r14+r15], 0
.text:0000000000003B30                 jmp     loc_35C9
.text:0000000000003B35 ; ---------------------------------------------------------------------------
.text:0000000000003B35
.text:0000000000003B35 loc_3B35:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003B35                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B3A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B3F                 mov     rbp, r11
.text:0000000000003B42                 setz    al
.text:0000000000003B45                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003B49                 jmp     loc_3579
.text:0000000000003B4E ; ---------------------------------------------------------------------------
.text:0000000000003B4E
.text:0000000000003B4E loc_3B4E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003B4E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003B52                 mov     rdi, rcx
.text:0000000000003B55                 call    gettext_quote
.text:0000000000003B5A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003B5F                 jmp     loc_37B6
.text:0000000000003B64 ; ---------------------------------------------------------------------------
.text:0000000000003B64
.text:0000000000003B64 loc_3B64:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003B64                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003B68                 mov     rdi, rcx
.text:0000000000003B6B                 call    gettext_quote
.text:0000000000003B70                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003B75                 jmp     loc_37E1
.text:0000000000003B7A ; ---------------------------------------------------------------------------
.text:0000000000003B7A
.text:0000000000003B7A loc_3B7A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003B7A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B7F                 mov     rbp, r11
.text:0000000000003B82                 mov     eax, edx
.text:0000000000003B84                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003B88                 jmp     loc_3579
.text:0000000000003B8D ; ---------------------------------------------------------------------------
.text:0000000000003B8D
.text:0000000000003B8D loc_3B8D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003B8D                 sub     rsp, 8
.text:0000000000003B91                 mov     r8d, 5
.text:0000000000003B97                 mov     rcx, r11
.text:0000000000003B9A                 push    [rsp+0F0h+var_88]
.text:0000000000003B9E                 push    [rsp+0F8h+var_80]
.text:0000000000003BA2                 mov     rdi, r14
.text:0000000000003BA5                 push    [rsp+100h+var_C8]
.text:0000000000003BA9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003BB1                 mov     rdx, [rsp+108h+s]
.text:0000000000003BB6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003BBB                 call    quotearg_buffer_restyled
.text:0000000000003BC0                 add     rsp, 20h
.text:0000000000003BC4                 mov     r15, rax
.text:0000000000003BC7                 jmp     loc_35C9
.text:0000000000003BCC ; ---------------------------------------------------------------------------
.text:0000000000003BCC
.text:0000000000003BCC loc_3BCC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003BCC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003BD1                 jmp     loc_3AEC
.text:0000000000003BD6 ; ---------------------------------------------------------------------------
.text:0000000000003BD6
.text:0000000000003BD6 loc_3BD6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003BD6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003BDE                 jmp     loc_3579
.text:0000000000003BE3 ; ---------------------------------------------------------------------------
.text:0000000000003BE3
.text:0000000000003BE3 loc_3BE3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003BE3                 call    ___stack_chk_fail
.text:0000000000003BE8 ; ---------------------------------------------------------------------------
.text:0000000000003BE8
.text:0000000000003BE8 loc_3BE8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003BE8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003BED                 jmp     loc_3661
.text:0000000000003BF2 ; ---------------------------------------------------------------------------
.text:0000000000003BF2
.text:0000000000003BF2 loc_3BF2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003BF2                 mov     rbp, r11
.text:0000000000003BF5                 jmp     loc_3590
.text:0000000000003BFA ; ---------------------------------------------------------------------------
.text:0000000000003BFA
.text:0000000000003BFA loc_3BFA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003BFA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003BFF                 xor     eax, eax
.text:0000000000003C01                 xor     r12d, r12d
.text:0000000000003C04                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C0D                 jmp     loc_31B4
.text:0000000000003C12 ; ---------------------------------------------------------------------------
.text:0000000000003C12
.text:0000000000003C12 loc_3C12:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003C12                 mov     rdx, r13
.text:0000000000003C15                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003C1A                 jmp     loc_3212
.text:0000000000003C1F ; ---------------------------------------------------------------------------
.text:0000000000003C1F
.text:0000000000003C1F def_2A81:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003C1F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003C1F ; } // starts at 29F0
.text:0000000000003C1F quotearg_buffer_restyled endp
.text:0000000000003C1F
.text:0000000000003C1F ; ---------------------------------------------------------------------------
.text:0000000000003C24                 align 10h
.text:0000000000003C30
.text:0000000000003C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C30
.text:0000000000003C30
.text:0000000000003C30 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003C30                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003C30
.text:0000000000003C30 var_50          = qword ptr -50h
.text:0000000000003C30 var_48          = qword ptr -48h
.text:0000000000003C30 var_40          = dword ptr -40h
.text:0000000000003C30 var_3C          = dword ptr -3Ch
.text:0000000000003C30
.text:0000000000003C30 ; __unwind {
.text:0000000000003C30                 push    r15
.text:0000000000003C32                 push    r14
.text:0000000000003C34                 movsxd  r15, edi
.text:0000000000003C37                 push    r13
.text:0000000000003C39                 push    r12
.text:0000000000003C3B                 mov     r14, rdx
.text:0000000000003C3E                 push    rbp
.text:0000000000003C3F                 push    rbx
.text:0000000000003C40                 mov     rbp, rcx
.text:0000000000003C43                 sub     rsp, 28h
.text:0000000000003C47                 mov     [rsp+58h+var_50], rsi
.text:0000000000003C4C                 call    ___errno_location
.text:0000000000003C51                 mov     r13, rax
.text:0000000000003C54                 mov     eax, [rax]
.text:0000000000003C56                 test    r15d, r15d
.text:0000000000003C59                 mov     rbx, cs:slotvec
.text:0000000000003C60                 mov     [rsp+58h+var_40], eax
.text:0000000000003C64                 js      loc_3DD1
.text:0000000000003C6A                 cmp     cs:nslots, r15d
.text:0000000000003C71                 jg      short loc_3CD5
.text:0000000000003C73                 cmp     r15d, 7FFFFFFFh
.text:0000000000003C7A                 jz      loc_3DD6
.text:0000000000003C80                 lea     r12d, [r15+1]
.text:0000000000003C84                 lea     rax, slotvec0
.text:0000000000003C8B                 movsxd  rsi, r12d
.text:0000000000003C8E                 shl     rsi, 4
.text:0000000000003C92                 cmp     rbx, rax
.text:0000000000003C95                 jz      loc_3DB0
.text:0000000000003C9B                 mov     rdi, rbx
.text:0000000000003C9E                 call    xrealloc
.text:0000000000003CA3                 mov     rbx, rax
.text:0000000000003CA6                 mov     cs:slotvec, rax
.text:0000000000003CAD
.text:0000000000003CAD loc_3CAD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003CAD                 movsxd  rdi, cs:nslots
.text:0000000000003CB4                 mov     edx, r12d
.text:0000000000003CB7                 xor     esi, esi        ; c
.text:0000000000003CB9                 sub     edx, edi
.text:0000000000003CBB                 shl     rdi, 4
.text:0000000000003CBF                 movsxd  rdx, edx
.text:0000000000003CC2                 add     rdi, rbx        ; s
.text:0000000000003CC5                 shl     rdx, 4          ; n
.text:0000000000003CC9                 call    _memset
.text:0000000000003CCE                 mov     cs:nslots, r12d
.text:0000000000003CD5
.text:0000000000003CD5 loc_3CD5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003CD5                 mov     eax, [rbp+4]
.text:0000000000003CD8                 shl     r15, 4
.text:0000000000003CDC                 sub     rsp, 8
.text:0000000000003CE0                 add     rbx, r15
.text:0000000000003CE3                 lea     r15, [rbp+8]
.text:0000000000003CE7                 mov     r8d, [rbp+0]
.text:0000000000003CEB                 mov     r11, [rbx]
.text:0000000000003CEE                 mov     r12, [rbx+8]
.text:0000000000003CF2                 mov     rcx, r14
.text:0000000000003CF5                 or      eax, 1
.text:0000000000003CF8                 mov     [rsp+60h+var_3C], eax
.text:0000000000003CFC                 push    qword ptr [rbp+30h]
.text:0000000000003CFF                 mov     r9d, eax
.text:0000000000003D02                 push    qword ptr [rbp+28h]
.text:0000000000003D05                 push    r15
.text:0000000000003D07                 mov     rsi, r11
.text:0000000000003D0A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003D0F                 mov     rdi, r12
.text:0000000000003D12                 mov     [rsp+78h+var_48], r11
.text:0000000000003D17                 call    quotearg_buffer_restyled
.text:0000000000003D1C                 add     rsp, 20h
.text:0000000000003D20                 mov     r11, [rsp+58h+var_48]
.text:0000000000003D25                 cmp     r11, rax
.text:0000000000003D28                 ja      short loc_3D91
.text:0000000000003D2A                 lea     rsi, [rax+1]
.text:0000000000003D2E                 lea     rax, slot0
.text:0000000000003D35                 cmp     r12, rax
.text:0000000000003D38                 mov     [rbx], rsi
.text:0000000000003D3B                 jz      short loc_3D4F
.text:0000000000003D3D                 mov     rdi, r12        ; ptr
.text:0000000000003D40                 mov     [rsp+58h+var_48], rsi
.text:0000000000003D45                 call    _free
.text:0000000000003D4A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003D4F
.text:0000000000003D4F loc_3D4F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003D4F                 mov     rdi, rsi
.text:0000000000003D52                 mov     [rsp+58h+var_48], rsi
.text:0000000000003D57                 call    xmalloc
.text:0000000000003D5C                 sub     rsp, 8
.text:0000000000003D60                 mov     [rbx+8], rax
.text:0000000000003D64                 mov     r8d, [rbp+0]
.text:0000000000003D68                 push    qword ptr [rbp+30h]
.text:0000000000003D6B                 push    qword ptr [rbp+28h]
.text:0000000000003D6E                 mov     rcx, r14
.text:0000000000003D71                 push    r15
.text:0000000000003D73                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003D78                 mov     rdi, rax
.text:0000000000003D7B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003D80                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003D85                 mov     r12, rax
.text:0000000000003D88                 call    quotearg_buffer_restyled
.text:0000000000003D8D                 add     rsp, 20h
.text:0000000000003D91
.text:0000000000003D91 loc_3D91:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003D91                 mov     eax, [rsp+58h+var_40]
.text:0000000000003D95                 mov     [r13+0], eax
.text:0000000000003D99                 add     rsp, 28h
.text:0000000000003D9D                 mov     rax, r12
.text:0000000000003DA0                 pop     rbx
.text:0000000000003DA1                 pop     rbp
.text:0000000000003DA2                 pop     r12
.text:0000000000003DA4                 pop     r13
.text:0000000000003DA6                 pop     r14
.text:0000000000003DA8                 pop     r15
.text:0000000000003DAA                 retn
.text:0000000000003DAA ; ---------------------------------------------------------------------------
.text:0000000000003DAB                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 loc_3DB0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003DB0                 xor     edi, edi
.text:0000000000003DB2                 call    xrealloc
.text:0000000000003DB7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003DBF                 mov     rbx, rax
.text:0000000000003DC2                 mov     cs:slotvec, rax
.text:0000000000003DC9                 movups  xmmword ptr [rax], xmm0
.text:0000000000003DCC                 jmp     loc_3CAD
.text:0000000000003DD1 ; ---------------------------------------------------------------------------
.text:0000000000003DD1
.text:0000000000003DD1 loc_3DD1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003DD1                 call    _abort
.text:0000000000003DD6 ; ---------------------------------------------------------------------------
.text:0000000000003DD6
.text:0000000000003DD6 loc_3DD6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003DD6                 call    xalloc_die
.text:0000000000003DD6 ; } // starts at 3C30
.text:0000000000003DD6 quotearg_n_options endp
.text:0000000000003DD6
.text:0000000000003DD6 ; ---------------------------------------------------------------------------
.text:0000000000003DDB                 align 20h
.text:0000000000003DE0
.text:0000000000003DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DE0
.text:0000000000003DE0 ; Attributes: info_from_lumina
.text:0000000000003DE0
.text:0000000000003DE0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003DE0                 public clone_quoting_options
.text:0000000000003DE0 clone_quoting_options proc near
.text:0000000000003DE0 ; __unwind {
.text:0000000000003DE0                 push    r12
.text:0000000000003DE2                 push    rbp
.text:0000000000003DE3                 push    rbx
.text:0000000000003DE4                 mov     rbx, rdi
.text:0000000000003DE7                 call    ___errno_location
.text:0000000000003DEC                 mov     r12d, [rax]
.text:0000000000003DEF                 mov     rbp, rax
.text:0000000000003DF2                 lea     rax, default_quoting_options
.text:0000000000003DF9                 test    rbx, rbx
.text:0000000000003DFC                 mov     esi, 38h ; '8'  ; n
.text:0000000000003E01                 cmovz   rbx, rax
.text:0000000000003E05                 mov     rdi, rbx        ; src
.text:0000000000003E08                 call    xmemdup
.text:0000000000003E0D                 mov     [rbp+0], r12d
.text:0000000000003E11                 pop     rbx
.text:0000000000003E12                 pop     rbp
.text:0000000000003E13                 pop     r12
.text:0000000000003E15                 retn
.text:0000000000003E15 ; } // starts at 3DE0
.text:0000000000003E15 clone_quoting_options endp
.text:0000000000003E15
.text:0000000000003E15 ; ---------------------------------------------------------------------------
.text:0000000000003E16                 align 20h
.text:0000000000003E20
.text:0000000000003E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E20
.text:0000000000003E20
.text:0000000000003E20                 public get_quoting_style
.text:0000000000003E20 get_quoting_style proc near
.text:0000000000003E20 ; __unwind {
.text:0000000000003E20                 lea     rax, default_quoting_options
.text:0000000000003E27                 test    rdi, rdi
.text:0000000000003E2A                 cmovz   rdi, rax
.text:0000000000003E2E                 mov     eax, [rdi]
.text:0000000000003E30                 retn
.text:0000000000003E30 ; } // starts at 3E20
.text:0000000000003E30 get_quoting_style endp
.text:0000000000003E30
.text:0000000000003E30 ; ---------------------------------------------------------------------------
.text:0000000000003E31                 align 20h
.text:0000000000003E40
.text:0000000000003E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E40
.text:0000000000003E40
.text:0000000000003E40                 public set_quoting_style
.text:0000000000003E40 set_quoting_style proc near
.text:0000000000003E40 ; __unwind {
.text:0000000000003E40                 lea     rax, default_quoting_options
.text:0000000000003E47                 test    rdi, rdi
.text:0000000000003E4A                 cmovz   rdi, rax
.text:0000000000003E4E                 mov     [rdi], esi
.text:0000000000003E50                 retn
.text:0000000000003E50 ; } // starts at 3E40
.text:0000000000003E50 set_quoting_style endp
.text:0000000000003E50
.text:0000000000003E50 ; ---------------------------------------------------------------------------
.text:0000000000003E51                 align 20h
.text:0000000000003E60
.text:0000000000003E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E60
.text:0000000000003E60 ; Attributes: info_from_lumina
.text:0000000000003E60
.text:0000000000003E60 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003E60                 public set_char_quoting
.text:0000000000003E60 set_char_quoting proc near
.text:0000000000003E60 ; __unwind {
.text:0000000000003E60                 lea     rax, default_quoting_options
.text:0000000000003E67                 test    rdi, rdi
.text:0000000000003E6A                 mov     ecx, esi
.text:0000000000003E6C                 cmovz   rdi, rax
.text:0000000000003E70                 mov     eax, esi
.text:0000000000003E72                 and     ecx, 1Fh
.text:0000000000003E75                 shr     al, 5
.text:0000000000003E78                 movzx   eax, al
.text:0000000000003E7B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003E80                 mov     esi, [rdi]
.text:0000000000003E82                 mov     eax, esi
.text:0000000000003E84                 shr     eax, cl
.text:0000000000003E86                 xor     edx, eax
.text:0000000000003E88                 and     eax, 1
.text:0000000000003E8B                 and     edx, 1
.text:0000000000003E8E                 shl     edx, cl
.text:0000000000003E90                 xor     edx, esi
.text:0000000000003E92                 mov     [rdi], edx
.text:0000000000003E94                 retn
.text:0000000000003E94 ; } // starts at 3E60
.text:0000000000003E94 set_char_quoting endp
.text:0000000000003E94
.text:0000000000003E94 ; ---------------------------------------------------------------------------
.text:0000000000003E95                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EA0
.text:0000000000003EA0
.text:0000000000003EA0                 public set_quoting_flags
.text:0000000000003EA0 set_quoting_flags proc near
.text:0000000000003EA0 ; __unwind {
.text:0000000000003EA0                 lea     rax, default_quoting_options
.text:0000000000003EA7                 test    rdi, rdi
.text:0000000000003EAA                 cmovz   rdi, rax
.text:0000000000003EAE                 mov     eax, [rdi+4]
.text:0000000000003EB1                 mov     [rdi+4], esi
.text:0000000000003EB4                 retn
.text:0000000000003EB4 ; } // starts at 3EA0
.text:0000000000003EB4 set_quoting_flags endp
.text:0000000000003EB4
.text:0000000000003EB4 ; ---------------------------------------------------------------------------
.text:0000000000003EB5                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0 ; Attributes: info_from_lumina
.text:0000000000003EC0
.text:0000000000003EC0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003EC0                 public set_custom_quoting
.text:0000000000003EC0 set_custom_quoting proc near
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 lea     rax, default_quoting_options
.text:0000000000003EC7                 test    rdi, rdi
.text:0000000000003ECA                 cmovz   rdi, rax
.text:0000000000003ECE                 test    rsi, rsi
.text:0000000000003ED1                 mov     dword ptr [rdi], 0Ah
.text:0000000000003ED7                 jz      short loc_3EE7
.text:0000000000003ED9                 test    rdx, rdx
.text:0000000000003EDC                 jz      short loc_3EE7
.text:0000000000003EDE                 mov     [rdi+28h], rsi
.text:0000000000003EE2                 mov     [rdi+30h], rdx
.text:0000000000003EE6                 retn
.text:0000000000003EE7 ; ---------------------------------------------------------------------------
.text:0000000000003EE7
.text:0000000000003EE7 loc_3EE7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003EE7                                         ; set_custom_quoting+1C↑j
.text:0000000000003EE7                 sub     rsp, 8
.text:0000000000003EEB                 call    _abort
.text:0000000000003EEB ; } // starts at 3EC0
.text:0000000000003EEB set_custom_quoting endp
.text:0000000000003EEB
.text:0000000000003EF0
.text:0000000000003EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF0
.text:0000000000003EF0 ; Attributes: info_from_lumina
.text:0000000000003EF0
.text:0000000000003EF0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003EF0                 public quotearg_buffer
.text:0000000000003EF0 quotearg_buffer proc near
.text:0000000000003EF0
.text:0000000000003EF0 var_40          = qword ptr -40h
.text:0000000000003EF0
.text:0000000000003EF0 ; __unwind {
.text:0000000000003EF0                 push    r15
.text:0000000000003EF2                 push    r14
.text:0000000000003EF4                 lea     rax, default_quoting_options
.text:0000000000003EFB                 push    r13
.text:0000000000003EFD                 push    r12
.text:0000000000003EFF                 mov     r13, rdi
.text:0000000000003F02                 push    rbp
.text:0000000000003F03                 push    rbx
.text:0000000000003F04                 mov     rbx, r8
.text:0000000000003F07                 mov     r14, rsi
.text:0000000000003F0A                 mov     r15, rdx
.text:0000000000003F0D                 sub     rsp, 18h
.text:0000000000003F11                 test    r8, r8
.text:0000000000003F14                 cmovz   rbx, rax
.text:0000000000003F18                 mov     [rsp+48h+var_40], rcx
.text:0000000000003F1D                 call    ___errno_location
.text:0000000000003F22                 mov     r12d, [rax]
.text:0000000000003F25                 mov     rbp, rax
.text:0000000000003F28                 lea     rax, [rbx+8]
.text:0000000000003F2C                 sub     rsp, 8
.text:0000000000003F30                 mov     r9d, [rbx+4]
.text:0000000000003F34                 push    qword ptr [rbx+30h]
.text:0000000000003F37                 mov     r8d, [rbx]
.text:0000000000003F3A                 push    qword ptr [rbx+28h]
.text:0000000000003F3D                 mov     rdx, r15
.text:0000000000003F40                 push    rax
.text:0000000000003F41                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003F46                 mov     rsi, r14
.text:0000000000003F49                 mov     rdi, r13
.text:0000000000003F4C                 call    quotearg_buffer_restyled
.text:0000000000003F51                 mov     [rbp+0], r12d
.text:0000000000003F55                 add     rsp, 38h
.text:0000000000003F59                 pop     rbx
.text:0000000000003F5A                 pop     rbp
.text:0000000000003F5B                 pop     r12
.text:0000000000003F5D                 pop     r13
.text:0000000000003F5F                 pop     r14
.text:0000000000003F61                 pop     r15
.text:0000000000003F63                 retn
.text:0000000000003F63 ; } // starts at 3EF0
.text:0000000000003F63 quotearg_buffer endp
.text:0000000000003F63
.text:0000000000003F63 ; ---------------------------------------------------------------------------
.text:0000000000003F64                 align 10h
.text:0000000000003F70
.text:0000000000003F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F70
.text:0000000000003F70 ; Attributes: info_from_lumina
.text:0000000000003F70
.text:0000000000003F70 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003F70                 public quotearg_alloc_mem
.text:0000000000003F70 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003F70
.text:0000000000003F70 var_5C          = dword ptr -5Ch
.text:0000000000003F70 var_58          = qword ptr -58h
.text:0000000000003F70 var_50          = qword ptr -50h
.text:0000000000003F70 var_48          = qword ptr -48h
.text:0000000000003F70 var_40          = qword ptr -40h
.text:0000000000003F70
.text:0000000000003F70 ; __unwind {
.text:0000000000003F70                 push    r15
.text:0000000000003F72                 push    r14
.text:0000000000003F74                 lea     rax, default_quoting_options
.text:0000000000003F7B                 push    r13
.text:0000000000003F7D                 push    r12
.text:0000000000003F7F                 mov     r12, rdx
.text:0000000000003F82                 push    rbp
.text:0000000000003F83                 push    rbx
.text:0000000000003F84                 mov     rbx, rcx
.text:0000000000003F87                 mov     r14, rdi
.text:0000000000003F8A                 mov     r15, rsi
.text:0000000000003F8D                 sub     rsp, 38h
.text:0000000000003F91                 test    rcx, rcx
.text:0000000000003F94                 cmovz   rbx, rax
.text:0000000000003F98                 xor     ebp, ebp
.text:0000000000003F9A                 call    ___errno_location
.text:0000000000003F9F                 test    r12, r12
.text:0000000000003FA2                 mov     r13, rax
.text:0000000000003FA5                 mov     eax, [rax]
.text:0000000000003FA7                 setz    bpl
.text:0000000000003FAB                 or      ebp, [rbx+4]
.text:0000000000003FAE                 lea     r10, [rbx+8]
.text:0000000000003FB2                 sub     rsp, 8
.text:0000000000003FB6                 mov     r8d, [rbx]
.text:0000000000003FB9                 mov     rcx, r15
.text:0000000000003FBC                 mov     [rsp+70h+var_5C], eax
.text:0000000000003FC0                 push    qword ptr [rbx+30h]
.text:0000000000003FC3                 mov     rdx, r14
.text:0000000000003FC6                 push    qword ptr [rbx+28h]
.text:0000000000003FC9                 push    r10
.text:0000000000003FCB                 xor     esi, esi
.text:0000000000003FCD                 mov     r9d, ebp
.text:0000000000003FD0                 xor     edi, edi
.text:0000000000003FD2                 mov     [rsp+88h+var_48], r10
.text:0000000000003FD7                 call    quotearg_buffer_restyled
.text:0000000000003FDC                 lea     rsi, [rax+1]
.text:0000000000003FE0                 mov     [rsp+88h+var_40], rax
.text:0000000000003FE5                 add     rsp, 20h
.text:0000000000003FE9                 mov     rdi, rsi
.text:0000000000003FEC                 mov     [rsp+68h+var_50], rsi
.text:0000000000003FF1                 call    xmalloc
.text:0000000000003FF6                 mov     [rsp+68h+var_58], rax
.text:0000000000003FFB                 sub     rsp, 8
.text:0000000000003FFF                 push    qword ptr [rbx+30h]
.text:0000000000004002                 push    qword ptr [rbx+28h]
.text:0000000000004005                 mov     r10, [rsp+80h+var_48]
.text:000000000000400A                 mov     r9d, ebp
.text:000000000000400D                 mov     r8d, [rbx]
.text:0000000000004010                 mov     rcx, r15
.text:0000000000004013                 mov     rdx, r14
.text:0000000000004016                 mov     rdi, rax
.text:0000000000004019                 push    r10
.text:000000000000401B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004020                 call    quotearg_buffer_restyled
.text:0000000000004025                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004029                 add     rsp, 20h
.text:000000000000402D                 test    r12, r12
.text:0000000000004030                 mov     [r13+0], eax
.text:0000000000004034                 jz      short loc_403F
.text:0000000000004036                 mov     r11, [rsp+68h+var_40]
.text:000000000000403B                 mov     [r12], r11
.text:000000000000403F
.text:000000000000403F loc_403F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000403F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004044                 add     rsp, 38h
.text:0000000000004048                 pop     rbx
.text:0000000000004049                 pop     rbp
.text:000000000000404A                 pop     r12
.text:000000000000404C                 pop     r13
.text:000000000000404E                 pop     r14
.text:0000000000004050                 pop     r15
.text:0000000000004052                 retn
.text:0000000000004052 ; } // starts at 3F70
.text:0000000000004052 quotearg_alloc_mem endp
.text:0000000000004052
.text:0000000000004052 ; ---------------------------------------------------------------------------
.text:0000000000004053                 align 20h
.text:0000000000004060
.text:0000000000004060 ; =============== S U B R O U T I N E =======================================
.text:0000000000004060
.text:0000000000004060
.text:0000000000004060                 public quotearg_alloc
.text:0000000000004060 quotearg_alloc  proc near
.text:0000000000004060 ; __unwind {
.text:0000000000004060                 mov     rcx, rdx
.text:0000000000004063                 xor     edx, edx
.text:0000000000004065                 jmp     quotearg_alloc_mem
.text:0000000000004065 ; } // starts at 4060
.text:0000000000004065 quotearg_alloc  endp
.text:0000000000004065
.text:0000000000004065 ; ---------------------------------------------------------------------------
.text:000000000000406A                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070 ; Attributes: info_from_lumina
.text:0000000000004070
.text:0000000000004070 ; void __cdecl quotearg_free()
.text:0000000000004070                 public quotearg_free
.text:0000000000004070 quotearg_free   proc near
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 mov     eax, cs:nslots
.text:0000000000004076                 push    r12
.text:0000000000004078                 mov     r12, cs:slotvec
.text:000000000000407F                 push    rbp
.text:0000000000004080                 push    rbx
.text:0000000000004081                 cmp     eax, 1
.text:0000000000004084                 jle     short loc_40B1
.text:0000000000004086                 sub     eax, 2
.text:0000000000004089                 lea     rbx, [r12+18h]
.text:000000000000408E                 shl     rax, 4
.text:0000000000004092                 lea     rbp, [r12+rax+28h]
.text:0000000000004097                 nop     word ptr [rax+rax+00000000h]
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000040A0                 mov     rdi, [rbx]      ; ptr
.text:00000000000040A3                 add     rbx, 10h
.text:00000000000040A7                 call    _free
.text:00000000000040AC                 cmp     rbx, rbp
.text:00000000000040AF                 jnz     short loc_40A0
.text:00000000000040B1
.text:00000000000040B1 loc_40B1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000040B1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000040B6                 lea     rbx, slot0
.text:00000000000040BD                 cmp     rdi, rbx
.text:00000000000040C0                 jz      short loc_40D9
.text:00000000000040C2                 call    _free
.text:00000000000040C7                 mov     cs:slotvec0, 100h
.text:00000000000040D2                 mov     cs:off_20B078, rbx
.text:00000000000040D9
.text:00000000000040D9 loc_40D9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000040D9                 lea     rbx, slotvec0
.text:00000000000040E0                 cmp     r12, rbx
.text:00000000000040E3                 jz      short loc_40F4
.text:00000000000040E5                 mov     rdi, r12        ; ptr
.text:00000000000040E8                 call    _free
.text:00000000000040ED                 mov     cs:slotvec, rbx
.text:00000000000040F4
.text:00000000000040F4 loc_40F4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000040F4                 pop     rbx
.text:00000000000040F5                 mov     cs:nslots, 1
.text:00000000000040FF                 pop     rbp
.text:0000000000004100                 pop     r12
.text:0000000000004102                 retn
.text:0000000000004102 ; } // starts at 4070
.text:0000000000004102 quotearg_free   endp
.text:0000000000004102
.text:0000000000004102 ; ---------------------------------------------------------------------------
.text:0000000000004103                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110
.text:0000000000004110                 public quotearg_n
.text:0000000000004110 quotearg_n      proc near
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 lea     rcx, default_quoting_options
.text:0000000000004117                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000411E                 jmp     quotearg_n_options
.text:000000000000411E ; } // starts at 4110
.text:000000000000411E quotearg_n      endp
.text:000000000000411E
.text:000000000000411E ; ---------------------------------------------------------------------------
.text:0000000000004123                 align 10h
.text:0000000000004130
.text:0000000000004130 ; =============== S U B R O U T I N E =======================================
.text:0000000000004130
.text:0000000000004130
.text:0000000000004130                 public quotearg_n_mem
.text:0000000000004130 quotearg_n_mem  proc near
.text:0000000000004130 ; __unwind {
.text:0000000000004130                 lea     rcx, default_quoting_options
.text:0000000000004137                 jmp     quotearg_n_options
.text:0000000000004137 ; } // starts at 4130
.text:0000000000004137 quotearg_n_mem  endp
.text:0000000000004137
.text:0000000000004137 ; ---------------------------------------------------------------------------
.text:000000000000413C                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140
.text:0000000000004140                 public quotearg
.text:0000000000004140 quotearg        proc near
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 lea     rcx, default_quoting_options
.text:0000000000004147                 mov     rsi, rdi
.text:000000000000414A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004151                 xor     edi, edi
.text:0000000000004153                 jmp     quotearg_n_options
.text:0000000000004153 ; } // starts at 4140
.text:0000000000004153 quotearg        endp
.text:0000000000004153
.text:0000000000004153 ; ---------------------------------------------------------------------------
.text:0000000000004158                 align 20h
.text:0000000000004160
.text:0000000000004160 ; =============== S U B R O U T I N E =======================================
.text:0000000000004160
.text:0000000000004160
.text:0000000000004160                 public quotearg_mem
.text:0000000000004160 quotearg_mem    proc near
.text:0000000000004160 ; __unwind {
.text:0000000000004160                 lea     rcx, default_quoting_options
.text:0000000000004167                 mov     rdx, rsi
.text:000000000000416A                 mov     rsi, rdi
.text:000000000000416D                 xor     edi, edi
.text:000000000000416F                 jmp     quotearg_n_options
.text:000000000000416F ; } // starts at 4160
.text:000000000000416F quotearg_mem    endp
.text:000000000000416F
.text:000000000000416F ; ---------------------------------------------------------------------------
.text:0000000000004174                 align 20h
.text:0000000000004180
.text:0000000000004180 ; =============== S U B R O U T I N E =======================================
.text:0000000000004180
.text:0000000000004180 ; Attributes: info_from_lumina
.text:0000000000004180
.text:0000000000004180 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004180                 public quotearg_n_style
.text:0000000000004180 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004180
.text:0000000000004180 var_48          = dword ptr -48h
.text:0000000000004180 var_44          = qword ptr -44h
.text:0000000000004180 var_3C          = qword ptr -3Ch
.text:0000000000004180 var_34          = qword ptr -34h
.text:0000000000004180 var_2C          = qword ptr -2Ch
.text:0000000000004180 var_24          = qword ptr -24h
.text:0000000000004180 var_1C          = qword ptr -1Ch
.text:0000000000004180 var_14          = dword ptr -14h
.text:0000000000004180 var_10          = qword ptr -10h
.text:0000000000004180
.text:0000000000004180 ; __unwind {
.text:0000000000004180                 sub     rsp, 48h
.text:0000000000004184                 mov     rax, rdx
.text:0000000000004187                 mov     rdx, fs:28h
.text:0000000000004190                 mov     [rsp+48h+var_10], rdx
.text:0000000000004195                 xor     edx, edx
.text:0000000000004197                 cmp     esi, 0Ah
.text:000000000000419A                 jz      short loc_4204
.text:000000000000419C                 mov     [rsp+48h+var_48], esi
.text:000000000000419F                 mov     rcx, rsp
.text:00000000000041A2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000041A9                 mov     rsi, rax
.text:00000000000041AC                 mov     [rsp+48h+var_44], 0
.text:00000000000041B5                 mov     [rsp+48h+var_3C], 0
.text:00000000000041BE                 mov     [rsp+48h+var_34], 0
.text:00000000000041C7                 mov     [rsp+48h+var_2C], 0
.text:00000000000041D0                 mov     [rsp+48h+var_24], 0
.text:00000000000041D9                 mov     [rsp+48h+var_1C], 0
.text:00000000000041E2                 mov     [rsp+48h+var_14], 0
.text:00000000000041EA                 call    quotearg_n_options
.text:00000000000041EF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000041F4                 xor     rcx, fs:28h
.text:00000000000041FD                 jnz     short loc_4209
.text:00000000000041FF                 add     rsp, 48h
.text:0000000000004203                 retn
.text:0000000000004204 ; ---------------------------------------------------------------------------
.text:0000000000004204
.text:0000000000004204 loc_4204:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004204                 call    _abort
.text:0000000000004209 ; ---------------------------------------------------------------------------
.text:0000000000004209
.text:0000000000004209 loc_4209:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004209                 call    ___stack_chk_fail
.text:0000000000004209 ; } // starts at 4180
.text:0000000000004209 quotearg_n_style endp
.text:0000000000004209
.text:0000000000004209 ; ---------------------------------------------------------------------------
.text:000000000000420E                 align 10h
.text:0000000000004210
.text:0000000000004210 ; =============== S U B R O U T I N E =======================================
.text:0000000000004210
.text:0000000000004210 ; Attributes: info_from_lumina
.text:0000000000004210
.text:0000000000004210 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004210                 public quotearg_n_style_mem
.text:0000000000004210 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004210
.text:0000000000004210 var_48          = dword ptr -48h
.text:0000000000004210 var_44          = qword ptr -44h
.text:0000000000004210 var_3C          = qword ptr -3Ch
.text:0000000000004210 var_34          = qword ptr -34h
.text:0000000000004210 var_2C          = qword ptr -2Ch
.text:0000000000004210 var_24          = qword ptr -24h
.text:0000000000004210 var_1C          = qword ptr -1Ch
.text:0000000000004210 var_14          = dword ptr -14h
.text:0000000000004210 var_10          = qword ptr -10h
.text:0000000000004210
.text:0000000000004210 ; __unwind {
.text:0000000000004210                 sub     rsp, 48h
.text:0000000000004214                 mov     rax, rdx
.text:0000000000004217                 mov     rdx, rcx
.text:000000000000421A                 mov     rcx, fs:28h
.text:0000000000004223                 mov     [rsp+48h+var_10], rcx
.text:0000000000004228                 xor     ecx, ecx
.text:000000000000422A                 cmp     esi, 0Ah
.text:000000000000422D                 jz      short loc_4290
.text:000000000000422F                 mov     [rsp+48h+var_48], esi
.text:0000000000004232                 mov     rcx, rsp
.text:0000000000004235                 mov     rsi, rax
.text:0000000000004238                 mov     [rsp+48h+var_44], 0
.text:0000000000004241                 mov     [rsp+48h+var_3C], 0
.text:000000000000424A                 mov     [rsp+48h+var_34], 0
.text:0000000000004253                 mov     [rsp+48h+var_2C], 0
.text:000000000000425C                 mov     [rsp+48h+var_24], 0
.text:0000000000004265                 mov     [rsp+48h+var_1C], 0
.text:000000000000426E                 mov     [rsp+48h+var_14], 0
.text:0000000000004276                 call    quotearg_n_options
.text:000000000000427B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004280                 xor     rdx, fs:28h
.text:0000000000004289                 jnz     short loc_4295
.text:000000000000428B                 add     rsp, 48h
.text:000000000000428F                 retn
.text:0000000000004290 ; ---------------------------------------------------------------------------
.text:0000000000004290
.text:0000000000004290 loc_4290:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004290                 call    _abort
.text:0000000000004295 ; ---------------------------------------------------------------------------
.text:0000000000004295
.text:0000000000004295 loc_4295:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004295                 call    ___stack_chk_fail
.text:0000000000004295 ; } // starts at 4210
.text:0000000000004295 quotearg_n_style_mem endp
.text:0000000000004295
.text:0000000000004295 ; ---------------------------------------------------------------------------
.text:000000000000429A                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0
.text:00000000000042A0                 public quotearg_style
.text:00000000000042A0 quotearg_style  proc near
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 mov     rdx, rsi
.text:00000000000042A3                 mov     esi, edi
.text:00000000000042A5                 xor     edi, edi
.text:00000000000042A7                 jmp     quotearg_n_style
.text:00000000000042A7 ; } // starts at 42A0
.text:00000000000042A7 quotearg_style  endp
.text:00000000000042A7
.text:00000000000042A7 ; ---------------------------------------------------------------------------
.text:00000000000042AC                 align 10h
.text:00000000000042B0
.text:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042B0
.text:00000000000042B0
.text:00000000000042B0                 public quotearg_style_mem
.text:00000000000042B0 quotearg_style_mem proc near
.text:00000000000042B0 ; __unwind {
.text:00000000000042B0                 mov     rcx, rdx
.text:00000000000042B3                 mov     rdx, rsi
.text:00000000000042B6                 mov     esi, edi
.text:00000000000042B8                 xor     edi, edi
.text:00000000000042BA                 jmp     quotearg_n_style_mem
.text:00000000000042BA ; } // starts at 42B0
.text:00000000000042BA quotearg_style_mem endp
.text:00000000000042BA
.text:00000000000042BA ; ---------------------------------------------------------------------------
.text:00000000000042BF                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0 ; Attributes: info_from_lumina
.text:00000000000042C0
.text:00000000000042C0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000042C0                 public quotearg_char_mem
.text:00000000000042C0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000042C0                                         ; quotearg_colon+C↓j ...
.text:00000000000042C0
.text:00000000000042C0 var_48          = xmmword ptr -48h
.text:00000000000042C0 var_38          = xmmword ptr -38h
.text:00000000000042C0 var_28          = xmmword ptr -28h
.text:00000000000042C0 var_18          = qword ptr -18h
.text:00000000000042C0 var_10          = qword ptr -10h
.text:00000000000042C0
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 sub     rsp, 48h
.text:00000000000042C4                 mov     ecx, edx
.text:00000000000042C6                 mov     rax, fs:28h
.text:00000000000042CF                 mov     [rsp+48h+var_10], rax
.text:00000000000042D4                 xor     eax, eax
.text:00000000000042D6                 mov     rax, cs:qword_20B290
.text:00000000000042DD                 mov     r8, rsp
.text:00000000000042E0                 and     ecx, 1Fh
.text:00000000000042E3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000042EB                 mov     [rsp+48h+var_18], rax
.text:00000000000042F0                 mov     eax, edx
.text:00000000000042F2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000042F6                 shr     al, 5
.text:00000000000042F9                 movzx   eax, al
.text:00000000000042FC                 lea     r9, [r8+rax*4+8]
.text:0000000000004301                 movdqa  xmm0, cs:xmmword_20B270
.text:0000000000004309                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000430E                 movdqa  xmm0, cs:xmmword_20B280
.text:0000000000004316                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000431B                 mov     edx, [r9]
.text:000000000000431E                 mov     eax, edx
.text:0000000000004320                 shr     eax, cl
.text:0000000000004322                 not     eax
.text:0000000000004324                 and     eax, 1
.text:0000000000004327                 shl     eax, cl
.text:0000000000004329                 mov     rcx, r8
.text:000000000000432C                 xor     eax, edx
.text:000000000000432E                 mov     rdx, rsi
.text:0000000000004331                 mov     rsi, rdi
.text:0000000000004334                 mov     [r9], eax
.text:0000000000004337                 xor     edi, edi
.text:0000000000004339                 call    quotearg_n_options
.text:000000000000433E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004343                 xor     rsi, fs:28h
.text:000000000000434C                 jnz     short loc_4353
.text:000000000000434E                 add     rsp, 48h
.text:0000000000004352                 retn
.text:0000000000004353 ; ---------------------------------------------------------------------------
.text:0000000000004353
.text:0000000000004353 loc_4353:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004353                 call    ___stack_chk_fail
.text:0000000000004353 ; } // starts at 42C0
.text:0000000000004353 quotearg_char_mem endp
.text:0000000000004353
.text:0000000000004353 ; ---------------------------------------------------------------------------
.text:0000000000004358                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360                 public quotearg_char
.text:0000000000004360 quotearg_char   proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 movsx   edx, sil
.text:0000000000004364                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000436B                 jmp     quotearg_char_mem
.text:000000000000436B ; } // starts at 4360
.text:000000000000436B quotearg_char   endp
.text:000000000000436B
.text:0000000000004370
.text:0000000000004370 ; =============== S U B R O U T I N E =======================================
.text:0000000000004370
.text:0000000000004370
.text:0000000000004370                 public quotearg_colon
.text:0000000000004370 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004370 ; __unwind {
.text:0000000000004370                 mov     edx, 3Ah ; ':'
.text:0000000000004375                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000437C                 jmp     quotearg_char_mem
.text:000000000000437C ; } // starts at 4370
.text:000000000000437C quotearg_colon  endp
.text:000000000000437C
.text:000000000000437C ; ---------------------------------------------------------------------------
.text:0000000000004381                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public quotearg_colon_mem
.text:0000000000004390 quotearg_colon_mem proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 mov     edx, 3Ah ; ':'
.text:0000000000004395                 jmp     quotearg_char_mem
.text:0000000000004395 ; } // starts at 4390
.text:0000000000004395 quotearg_colon_mem endp
.text:0000000000004395
.text:0000000000004395 ; ---------------------------------------------------------------------------
.text:000000000000439A                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0 ; Attributes: info_from_lumina
.text:00000000000043A0
.text:00000000000043A0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000043A0                 public quotearg_n_style_colon
.text:00000000000043A0 quotearg_n_style_colon proc near
.text:00000000000043A0
.text:00000000000043A0 var_48          = dword ptr -48h
.text:00000000000043A0 var_44          = qword ptr -44h
.text:00000000000043A0 var_3C          = qword ptr -3Ch
.text:00000000000043A0 var_34          = qword ptr -34h
.text:00000000000043A0 var_2C          = qword ptr -2Ch
.text:00000000000043A0 var_24          = qword ptr -24h
.text:00000000000043A0 var_1C          = qword ptr -1Ch
.text:00000000000043A0 var_14          = dword ptr -14h
.text:00000000000043A0 var_10          = qword ptr -10h
.text:00000000000043A0
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 sub     rsp, 48h
.text:00000000000043A4                 mov     rax, rdx
.text:00000000000043A7                 mov     rdx, fs:28h
.text:00000000000043B0                 mov     [rsp+48h+var_10], rdx
.text:00000000000043B5                 xor     edx, edx
.text:00000000000043B7                 cmp     esi, 0Ah
.text:00000000000043BA                 jz      short loc_4424
.text:00000000000043BC                 mov     [rsp+48h+var_48], esi
.text:00000000000043BF                 mov     rcx, rsp
.text:00000000000043C2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043C9                 mov     rsi, rax
.text:00000000000043CC                 mov     [rsp+48h+var_44], 0
.text:00000000000043D5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000043DE                 mov     [rsp+48h+var_34], 0
.text:00000000000043E7                 mov     [rsp+48h+var_2C], 0
.text:00000000000043F0                 mov     [rsp+48h+var_24], 0
.text:00000000000043F9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004402                 mov     [rsp+48h+var_14], 0
.text:000000000000440A                 call    quotearg_n_options
.text:000000000000440F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004414                 xor     rcx, fs:28h
.text:000000000000441D                 jnz     short loc_4429
.text:000000000000441F                 add     rsp, 48h
.text:0000000000004423                 retn
.text:0000000000004424 ; ---------------------------------------------------------------------------
.text:0000000000004424
.text:0000000000004424 loc_4424:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004424                 call    _abort
.text:0000000000004429 ; ---------------------------------------------------------------------------
.text:0000000000004429
.text:0000000000004429 loc_4429:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004429                 call    ___stack_chk_fail
.text:0000000000004429 ; } // starts at 43A0
.text:0000000000004429 quotearg_n_style_colon endp
.text:0000000000004429
.text:0000000000004429 ; ---------------------------------------------------------------------------
.text:000000000000442E                 align 10h
.text:0000000000004430
.text:0000000000004430 ; =============== S U B R O U T I N E =======================================
.text:0000000000004430
.text:0000000000004430 ; Attributes: info_from_lumina
.text:0000000000004430
.text:0000000000004430 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004430                 public quotearg_n_custom_mem
.text:0000000000004430 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004430                                         ; quotearg_custom+12↓j ...
.text:0000000000004430
.text:0000000000004430 var_48          = xmmword ptr -48h
.text:0000000000004430 var_38          = xmmword ptr -38h
.text:0000000000004430 var_28          = xmmword ptr -28h
.text:0000000000004430 var_18          = qword ptr -18h
.text:0000000000004430 var_10          = qword ptr -10h
.text:0000000000004430
.text:0000000000004430 ; __unwind {
.text:0000000000004430                 sub     rsp, 48h
.text:0000000000004434                 mov     r9, rcx
.text:0000000000004437                 mov     rcx, cs:qword_20B290
.text:000000000000443E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004446                 mov     rax, fs:28h
.text:000000000000444F                 mov     [rsp+48h+var_10], rax
.text:0000000000004454                 xor     eax, eax
.text:0000000000004456                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000445A                 test    rsi, rsi
.text:000000000000445D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004462                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004469                 movdqa  xmm0, cs:xmmword_20B270
.text:0000000000004471                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004476                 movdqa  xmm0, cs:xmmword_20B280
.text:000000000000447E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004483                 jz      short loc_44B7
.text:0000000000004485                 test    rdx, rdx
.text:0000000000004488                 jz      short loc_44B7
.text:000000000000448A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000448F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004494                 mov     rcx, rsp
.text:0000000000004497                 mov     rdx, r8
.text:000000000000449A                 mov     rsi, r9
.text:000000000000449D                 call    quotearg_n_options
.text:00000000000044A2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000044A7                 xor     rdi, fs:28h
.text:00000000000044B0                 jnz     short loc_44BC
.text:00000000000044B2                 add     rsp, 48h
.text:00000000000044B6                 retn
.text:00000000000044B7 ; ---------------------------------------------------------------------------
.text:00000000000044B7
.text:00000000000044B7 loc_44B7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000044B7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000044B7                 call    _abort
.text:00000000000044BC ; ---------------------------------------------------------------------------
.text:00000000000044BC
.text:00000000000044BC loc_44BC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000044BC                 call    ___stack_chk_fail
.text:00000000000044BC ; } // starts at 4430
.text:00000000000044BC quotearg_n_custom_mem endp
.text:00000000000044BC
.text:00000000000044BC ; ---------------------------------------------------------------------------
.text:00000000000044C1                 align 10h
.text:00000000000044D0
.text:00000000000044D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044D0
.text:00000000000044D0
.text:00000000000044D0                 public quotearg_n_custom
.text:00000000000044D0 quotearg_n_custom proc near
.text:00000000000044D0 ; __unwind {
.text:00000000000044D0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000044D7                 jmp     quotearg_n_custom_mem
.text:00000000000044D7 ; } // starts at 44D0
.text:00000000000044D7 quotearg_n_custom endp
.text:00000000000044D7
.text:00000000000044D7 ; ---------------------------------------------------------------------------
.text:00000000000044DC                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0
.text:00000000000044E0                 public quotearg_custom
.text:00000000000044E0 quotearg_custom proc near
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 mov     rcx, rdx
.text:00000000000044E3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000044EA                 mov     rdx, rsi
.text:00000000000044ED                 mov     rsi, rdi
.text:00000000000044F0                 xor     edi, edi
.text:00000000000044F2                 jmp     quotearg_n_custom_mem
.text:00000000000044F2 ; } // starts at 44E0
.text:00000000000044F2 quotearg_custom endp
.text:00000000000044F2
.text:00000000000044F2 ; ---------------------------------------------------------------------------
.text:00000000000044F7                 align 20h
.text:0000000000004500
.text:0000000000004500 ; =============== S U B R O U T I N E =======================================
.text:0000000000004500
.text:0000000000004500
.text:0000000000004500                 public quotearg_custom_mem
.text:0000000000004500 quotearg_custom_mem proc near
.text:0000000000004500 ; __unwind {
.text:0000000000004500                 mov     r8, rcx
.text:0000000000004503                 mov     rcx, rdx
.text:0000000000004506                 mov     rdx, rsi
.text:0000000000004509                 mov     rsi, rdi
.text:000000000000450C                 xor     edi, edi
.text:000000000000450E                 jmp     quotearg_n_custom_mem
.text:000000000000450E ; } // starts at 4500
.text:000000000000450E quotearg_custom_mem endp
.text:000000000000450E
.text:000000000000450E ; ---------------------------------------------------------------------------
.text:0000000000004513                 align 20h
.text:0000000000004520
.text:0000000000004520 ; =============== S U B R O U T I N E =======================================
.text:0000000000004520
.text:0000000000004520
.text:0000000000004520                 public quote_n_mem
.text:0000000000004520 quote_n_mem     proc near
.text:0000000000004520 ; __unwind {
.text:0000000000004520                 lea     rcx, quote_quoting_options
.text:0000000000004527                 jmp     quotearg_n_options
.text:0000000000004527 ; } // starts at 4520
.text:0000000000004527 quote_n_mem     endp
.text:0000000000004527
.text:0000000000004527 ; ---------------------------------------------------------------------------
.text:000000000000452C                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530                 public quote_mem
.text:0000000000004530 quote_mem       proc near
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 lea     rcx, quote_quoting_options
.text:0000000000004537                 mov     rdx, rsi
.text:000000000000453A                 mov     rsi, rdi
.text:000000000000453D                 xor     edi, edi
.text:000000000000453F                 jmp     quotearg_n_options
.text:000000000000453F ; } // starts at 4530
.text:000000000000453F quote_mem       endp
.text:000000000000453F
.text:000000000000453F ; ---------------------------------------------------------------------------
.text:0000000000004544                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550                 public quote_n
.text:0000000000004550 quote_n         proc near
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 lea     rcx, quote_quoting_options
.text:0000000000004557                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000455E                 jmp     quotearg_n_options
.text:000000000000455E ; } // starts at 4550
.text:000000000000455E quote_n         endp
.text:000000000000455E
.text:000000000000455E ; ---------------------------------------------------------------------------
.text:0000000000004563                 align 10h
.text:0000000000004570
.text:0000000000004570 ; =============== S U B R O U T I N E =======================================
.text:0000000000004570
.text:0000000000004570
.text:0000000000004570                 public quote
.text:0000000000004570 quote           proc near               ; CODE XREF: main+42A↑p
.text:0000000000004570                                         ; main+5F8↑p ...
.text:0000000000004570 ; __unwind {
.text:0000000000004570                 lea     rcx, quote_quoting_options
.text:0000000000004577                 mov     rsi, rdi
.text:000000000000457A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004581                 xor     edi, edi
.text:0000000000004583                 jmp     quotearg_n_options
.text:0000000000004583 ; } // starts at 4570
.text:0000000000004583 quote           endp
.text:0000000000004583
.text:0000000000004583 ; ---------------------------------------------------------------------------
.text:0000000000004588                 align 10h
.text:0000000000004590
.text:0000000000004590 ; =============== S U B R O U T I N E =======================================
.text:0000000000004590
.text:0000000000004590
.text:0000000000004590 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004590                 public version_etc_arn
.text:0000000000004590 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_49CB↓j
.text:0000000000004590                                         ; version_etc_va:loc_4A1B↓p ...
.text:0000000000004590
.text:0000000000004590 var_58          = qword ptr -58h
.text:0000000000004590 var_50          = qword ptr -50h
.text:0000000000004590 var_48          = qword ptr -48h
.text:0000000000004590 var_40          = qword ptr -40h
.text:0000000000004590
.text:0000000000004590 ; __unwind {
.text:0000000000004590                 push    r15
.text:0000000000004592                 push    r14
.text:0000000000004594                 push    r13
.text:0000000000004596                 push    r12
.text:0000000000004598                 mov     r12, r9
.text:000000000000459B                 push    rbp
.text:000000000000459C                 push    rbx
.text:000000000000459D                 mov     rbp, rdi
.text:00000000000045A0                 mov     rbx, r8
.text:00000000000045A3                 sub     rsp, 28h
.text:00000000000045A7                 test    rsi, rsi
.text:00000000000045AA                 jz      loc_46C8
.text:00000000000045B0                 mov     r8, rdx
.text:00000000000045B3                 lea     rdx, aSSS_0     ; "%s (%s) %s\n"
.text:00000000000045BA                 mov     r9, rcx
.text:00000000000045BD                 xor     eax, eax
.text:00000000000045BF                 mov     rcx, rsi
.text:00000000000045C2                 mov     esi, 1
.text:00000000000045C7                 call    ___fprintf_chk
.text:00000000000045CC
.text:00000000000045CC loc_45CC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000045CC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000045D3                 xor     edi, edi        ; domainname
.text:00000000000045D5                 mov     edx, 5          ; category
.text:00000000000045DA                 call    _dcgettext
.text:00000000000045DF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000045E6                 mov     rcx, rax
.text:00000000000045E9                 mov     r8d, 7E3h
.text:00000000000045EF                 mov     esi, 1
.text:00000000000045F4                 mov     rdi, rbp
.text:00000000000045F7                 xor     eax, eax
.text:00000000000045F9                 call    ___fprintf_chk
.text:00000000000045FE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004605                 xor     edi, edi        ; domainname
.text:0000000000004607                 mov     edx, 5          ; category
.text:000000000000460C                 call    _dcgettext
.text:0000000000004611                 mov     rsi, rbp        ; stream
.text:0000000000004614                 mov     rdi, rax        ; s
.text:0000000000004617                 call    _fputs_unlocked
.text:000000000000461C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004620                 ja      def_4634        ; jumptable 0000000000004634 default case
.text:0000000000004626                 lea     rdx, jpt_4634
.text:000000000000462D                 movsxd  rax, ds:(jpt_4634 - 8A84h)[rdx+r12*4]
.text:0000000000004631                 add     rax, rdx
.text:0000000000004634                 jmp     rax             ; switch jump
.text:0000000000004634 ; ---------------------------------------------------------------------------
.text:0000000000004636                 align 20h
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004640                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:0000000000004640                 mov     r9, [rbx+38h]   ; jumptable 0000000000004634 case 8
.text:0000000000004644                 mov     rax, [rbx+10h]
.text:0000000000004648                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000464F                 mov     r8, [rbx+8]
.text:0000000000004653                 mov     edx, 5          ; category
.text:0000000000004658                 xor     edi, edi        ; domainname
.text:000000000000465A                 mov     r13, [rbx+30h]
.text:000000000000465E                 mov     r12, [rbx+28h]
.text:0000000000004662                 mov     [rsp+58h+var_48], r9
.text:0000000000004667                 mov     r15, [rbx+20h]
.text:000000000000466B                 mov     r14, [rbx+18h]
.text:000000000000466F                 mov     [rsp+58h+var_58], rax
.text:0000000000004673                 mov     [rsp+58h+var_50], r8
.text:0000000000004678                 mov     rbx, [rbx]
.text:000000000000467B                 call    _dcgettext
.text:0000000000004680                 sub     rsp, 8
.text:0000000000004684
.text:0000000000004684 loc_4684:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004684                 mov     r9, [rsp+60h+var_48]
.text:0000000000004689                 mov     rdx, rax
.text:000000000000468C                 mov     rcx, rbx
.text:000000000000468F                 mov     esi, 1
.text:0000000000004694                 mov     rdi, rbp
.text:0000000000004697                 xor     eax, eax
.text:0000000000004699                 push    r9
.text:000000000000469B                 push    r13
.text:000000000000469D                 push    r12
.text:000000000000469F                 push    r15
.text:00000000000046A1                 push    r14
.text:00000000000046A3                 mov     r9, [rsp+88h+var_58]
.text:00000000000046A8                 mov     r8, [rsp+88h+var_50]
.text:00000000000046AD                 call    ___fprintf_chk
.text:00000000000046B2                 add     rsp, 30h
.text:00000000000046B6
.text:00000000000046B6 loc_46B6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000046B6                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:00000000000046B6                 add     rsp, 28h        ; jumptable 0000000000004634 case 0
.text:00000000000046BA                 pop     rbx
.text:00000000000046BB                 pop     rbp
.text:00000000000046BC                 pop     r12
.text:00000000000046BE                 pop     r13
.text:00000000000046C0                 pop     r14
.text:00000000000046C2                 pop     r15
.text:00000000000046C4                 retn
.text:00000000000046C4 ; ---------------------------------------------------------------------------
.text:00000000000046C5                 align 8
.text:00000000000046C8
.text:00000000000046C8 loc_46C8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000046C8                 mov     r8, rcx
.text:00000000000046CB                 mov     rcx, rdx
.text:00000000000046CE                 lea     rdx, aSS_2      ; "%s %s\n"
.text:00000000000046D5                 mov     esi, 1
.text:00000000000046DA                 xor     eax, eax
.text:00000000000046DC                 call    ___fprintf_chk
.text:00000000000046E1                 jmp     loc_45CC
.text:00000000000046E1 ; ---------------------------------------------------------------------------
.text:00000000000046E6                 align 10h
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000046F0                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:00000000000046F0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004634 case 9
.text:00000000000046F4                 mov     r9, [rbx+38h]
.text:00000000000046F8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000046FF                 mov     rax, [rbx+10h]
.text:0000000000004703                 mov     r8, [rbx+8]
.text:0000000000004707                 mov     edx, 5          ; category
.text:000000000000470C                 mov     r13, [rbx+30h]
.text:0000000000004710                 mov     r12, [rbx+28h]
.text:0000000000004714                 mov     r15, [rbx+20h]
.text:0000000000004718                 mov     r14, [rbx+18h]
.text:000000000000471C                 mov     rbx, [rbx]
.text:000000000000471F                 mov     [rsp+58h+var_40], r10
.text:0000000000004724                 mov     [rsp+58h+var_48], r9
.text:0000000000004729                 mov     [rsp+58h+var_58], rax
.text:000000000000472D                 mov     [rsp+58h+var_50], r8
.text:0000000000004732
.text:0000000000004732 loc_4732:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004732                 xor     edi, edi        ; domainname
.text:0000000000004734                 call    _dcgettext
.text:0000000000004739                 mov     r10, [rsp+58h+var_40]
.text:000000000000473E                 push    r10
.text:0000000000004740                 jmp     loc_4684
.text:0000000000004740 ; ---------------------------------------------------------------------------
.text:0000000000004745                 align 8
.text:0000000000004748
.text:0000000000004748 loc_4748:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004748                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:0000000000004748                 mov     rbx, [rbx]      ; jumptable 0000000000004634 case 1
.text:000000000000474B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004752                 mov     edx, 5          ; category
.text:0000000000004757                 xor     edi, edi        ; domainname
.text:0000000000004759                 call    _dcgettext
.text:000000000000475E                 add     rsp, 28h
.text:0000000000004762                 mov     rcx, rbx
.text:0000000000004765                 mov     rdi, rbp
.text:0000000000004768                 pop     rbx
.text:0000000000004769                 pop     rbp
.text:000000000000476A                 pop     r12
.text:000000000000476C                 pop     r13
.text:000000000000476E                 pop     r14
.text:0000000000004770                 pop     r15
.text:0000000000004772                 mov     rdx, rax
.text:0000000000004775                 mov     esi, 1
.text:000000000000477A                 xor     eax, eax
.text:000000000000477C                 jmp     ___fprintf_chk
.text:000000000000477C ; ---------------------------------------------------------------------------
.text:0000000000004781                 align 8
.text:0000000000004788
.text:0000000000004788 loc_4788:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004788                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:0000000000004788                 mov     r12, [rbx+8]    ; jumptable 0000000000004634 case 2
.text:000000000000478C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004793                 mov     rbx, [rbx]
.text:0000000000004796                 mov     edx, 5          ; category
.text:000000000000479B                 xor     edi, edi        ; domainname
.text:000000000000479D                 call    _dcgettext
.text:00000000000047A2                 add     rsp, 28h
.text:00000000000047A6                 mov     r8, r12
.text:00000000000047A9                 mov     rcx, rbx
.text:00000000000047AC                 mov     rdi, rbp
.text:00000000000047AF                 mov     rdx, rax
.text:00000000000047B2                 mov     esi, 1
.text:00000000000047B7                 pop     rbx
.text:00000000000047B8                 pop     rbp
.text:00000000000047B9                 pop     r12
.text:00000000000047BB                 pop     r13
.text:00000000000047BD                 pop     r14
.text:00000000000047BF                 pop     r15
.text:00000000000047C1                 xor     eax, eax
.text:00000000000047C3                 jmp     ___fprintf_chk
.text:00000000000047C3 ; ---------------------------------------------------------------------------
.text:00000000000047C8                 align 10h
.text:00000000000047D0
.text:00000000000047D0 loc_47D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000047D0                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:00000000000047D0                 mov     r13, [rbx+10h]  ; jumptable 0000000000004634 case 3
.text:00000000000047D4                 mov     r12, [rbx+8]
.text:00000000000047D8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000047DF                 mov     rbx, [rbx]
.text:00000000000047E2                 mov     edx, 5          ; category
.text:00000000000047E7                 xor     edi, edi        ; domainname
.text:00000000000047E9                 call    _dcgettext
.text:00000000000047EE                 add     rsp, 28h
.text:00000000000047F2                 mov     r9, r13
.text:00000000000047F5                 mov     r8, r12
.text:00000000000047F8                 mov     rcx, rbx
.text:00000000000047FB                 mov     rdi, rbp
.text:00000000000047FE                 mov     rdx, rax
.text:0000000000004801                 pop     rbx
.text:0000000000004802                 pop     rbp
.text:0000000000004803                 pop     r12
.text:0000000000004805                 pop     r13
.text:0000000000004807                 pop     r14
.text:0000000000004809                 pop     r15
.text:000000000000480B                 mov     esi, 1
.text:0000000000004810                 xor     eax, eax
.text:0000000000004812                 jmp     ___fprintf_chk
.text:0000000000004812 ; ---------------------------------------------------------------------------
.text:0000000000004817                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004820                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:0000000000004820                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004634 case 4
.text:0000000000004827                 mov     edx, 5          ; category
.text:000000000000482C                 xor     edi, edi        ; domainname
.text:000000000000482E                 mov     r14, [rbx+18h]
.text:0000000000004832                 mov     r13, [rbx+10h]
.text:0000000000004836                 mov     r12, [rbx+8]
.text:000000000000483A                 mov     rbx, [rbx]
.text:000000000000483D                 call    _dcgettext
.text:0000000000004842                 sub     rsp, 8
.text:0000000000004846
.text:0000000000004846 loc_4846:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004846                 push    r14
.text:0000000000004848                 mov     rdx, rax
.text:000000000000484B                 mov     r9, r13
.text:000000000000484E                 mov     r8, r12
.text:0000000000004851                 mov     rcx, rbx
.text:0000000000004854                 mov     rdi, rbp
.text:0000000000004857                 mov     esi, 1
.text:000000000000485C                 xor     eax, eax
.text:000000000000485E                 call    ___fprintf_chk
.text:0000000000004863                 pop     rax
.text:0000000000004864                 pop     rdx
.text:0000000000004865                 add     rsp, 28h
.text:0000000000004869                 pop     rbx
.text:000000000000486A                 pop     rbp
.text:000000000000486B                 pop     r12
.text:000000000000486D                 pop     r13
.text:000000000000486F                 pop     r14
.text:0000000000004871                 pop     r15
.text:0000000000004873                 retn
.text:0000000000004873 ; ---------------------------------------------------------------------------
.text:0000000000004874                 align 8
.text:0000000000004878
.text:0000000000004878 loc_4878:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004878                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:0000000000004878                 mov     r15, [rbx+20h]  ; jumptable 0000000000004634 case 5
.text:000000000000487C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004883                 mov     edx, 5          ; category
.text:0000000000004888                 xor     edi, edi        ; domainname
.text:000000000000488A                 mov     r14, [rbx+18h]
.text:000000000000488E                 mov     r13, [rbx+10h]
.text:0000000000004892                 mov     r12, [rbx+8]
.text:0000000000004896                 mov     rbx, [rbx]
.text:0000000000004899                 call    _dcgettext
.text:000000000000489E                 push    r15
.text:00000000000048A0                 jmp     short loc_4846
.text:00000000000048A0 ; ---------------------------------------------------------------------------
.text:00000000000048A2                 align 8
.text:00000000000048A8
.text:00000000000048A8 loc_48A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000048A8                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:00000000000048A8                 mov     r8, [rbx+8]     ; jumptable 0000000000004634 case 6
.text:00000000000048AC                 mov     r12, [rbx+28h]
.text:00000000000048B0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000048B7                 mov     r15, [rbx+20h]
.text:00000000000048BB                 mov     r14, [rbx+18h]
.text:00000000000048BF                 mov     edx, 5          ; category
.text:00000000000048C4                 mov     r13, [rbx+10h]
.text:00000000000048C8                 xor     edi, edi        ; domainname
.text:00000000000048CA                 mov     rbx, [rbx]
.text:00000000000048CD                 mov     [rsp+58h+var_58], r8
.text:00000000000048D1                 call    _dcgettext
.text:00000000000048D6                 sub     rsp, 8
.text:00000000000048DA                 mov     r9, r13
.text:00000000000048DD                 push    r12
.text:00000000000048DF                 push    r15
.text:00000000000048E1                 push    r14
.text:00000000000048E3
.text:00000000000048E3 loc_48E3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000048E3                 mov     r8, [rsp+78h+var_58]
.text:00000000000048E8                 mov     rcx, rbx
.text:00000000000048EB                 mov     rdx, rax
.text:00000000000048EE                 mov     rdi, rbp
.text:00000000000048F1                 mov     esi, 1
.text:00000000000048F6                 xor     eax, eax
.text:00000000000048F8                 call    ___fprintf_chk
.text:00000000000048FD                 add     rsp, 20h
.text:0000000000004901                 add     rsp, 28h
.text:0000000000004905                 pop     rbx
.text:0000000000004906                 pop     rbp
.text:0000000000004907                 pop     r12
.text:0000000000004909                 pop     r13
.text:000000000000490B                 pop     r14
.text:000000000000490D                 pop     r15
.text:000000000000490F                 retn
.text:0000000000004910 ; ---------------------------------------------------------------------------
.text:0000000000004910
.text:0000000000004910 loc_4910:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004910                                         ; DATA XREF: .rodata:jpt_4634↓o
.text:0000000000004910                 mov     r9, [rbx+10h]   ; jumptable 0000000000004634 case 7
.text:0000000000004914                 mov     r13, [rbx+30h]
.text:0000000000004918                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000491F                 mov     r12, [rbx+28h]
.text:0000000000004923                 mov     r15, [rbx+20h]
.text:0000000000004927                 mov     edx, 5          ; category
.text:000000000000492C                 mov     r14, [rbx+18h]
.text:0000000000004930                 mov     r8, [rbx+8]
.text:0000000000004934                 xor     edi, edi        ; domainname
.text:0000000000004936                 mov     [rsp+58h+var_50], r9
.text:000000000000493B                 mov     rbx, [rbx]
.text:000000000000493E                 mov     [rsp+58h+var_58], r8
.text:0000000000004942                 call    _dcgettext
.text:0000000000004947                 push    r13
.text:0000000000004949                 push    r12
.text:000000000000494B                 push    r15
.text:000000000000494D                 push    r14
.text:000000000000494F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004954                 jmp     short loc_48E3
.text:0000000000004954 ; ---------------------------------------------------------------------------
.text:0000000000004956                 align 20h
.text:0000000000004960
.text:0000000000004960 def_4634:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004960                 mov     r10, [rbx+40h]  ; jumptable 0000000000004634 default case
.text:0000000000004964                 mov     r9, [rbx+38h]
.text:0000000000004968                 mov     edx, 5
.text:000000000000496D                 mov     rax, [rbx+10h]
.text:0000000000004971                 mov     r8, [rbx+8]
.text:0000000000004975                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000497C                 mov     r13, [rbx+30h]
.text:0000000000004980                 mov     r12, [rbx+28h]
.text:0000000000004984                 mov     r15, [rbx+20h]
.text:0000000000004988                 mov     r14, [rbx+18h]
.text:000000000000498C                 mov     [rsp+58h+var_40], r10
.text:0000000000004991                 mov     [rsp+58h+var_48], r9
.text:0000000000004996                 mov     [rsp+58h+var_58], rax
.text:000000000000499A                 mov     [rsp+58h+var_50], r8
.text:000000000000499F                 mov     rbx, [rbx]
.text:00000000000049A2                 jmp     loc_4732
.text:00000000000049A2 ; } // starts at 4590
.text:00000000000049A2 version_etc_arn endp
.text:00000000000049A2
.text:00000000000049A2 ; ---------------------------------------------------------------------------
.text:00000000000049A7                 align 10h
.text:00000000000049B0
.text:00000000000049B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049B0
.text:00000000000049B0 ; Attributes: info_from_lumina
.text:00000000000049B0
.text:00000000000049B0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000049B0                 public version_etc_ar
.text:00000000000049B0 version_etc_ar  proc near
.text:00000000000049B0 ; __unwind {
.text:00000000000049B0                 xor     r9d, r9d
.text:00000000000049B3                 cmp     qword ptr [r8], 0
.text:00000000000049B7                 jz      short loc_49CB
.text:00000000000049B9                 nop     dword ptr [rax+00000000h]
.text:00000000000049C0
.text:00000000000049C0 loc_49C0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000049C0                 add     r9, 1
.text:00000000000049C4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000049C9                 jnz     short loc_49C0
.text:00000000000049CB
.text:00000000000049CB loc_49CB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000049CB                 jmp     version_etc_arn
.text:00000000000049CB ; } // starts at 49B0
.text:00000000000049CB version_etc_ar  endp
.text:00000000000049CB
.text:00000000000049D0
.text:00000000000049D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049D0
.text:00000000000049D0 ; Attributes: info_from_lumina
.text:00000000000049D0
.text:00000000000049D0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000049D0                 public version_etc_va
.text:00000000000049D0 version_etc_va  proc near
.text:00000000000049D0
.text:00000000000049D0 authtab         = qword ptr -68h
.text:00000000000049D0 var_10          = qword ptr -10h
.text:00000000000049D0
.text:00000000000049D0 ; __unwind {
.text:00000000000049D0                 sub     rsp, 68h
.text:00000000000049D4                 mov     r10, r8
.text:00000000000049D7                 xor     r9d, r9d
.text:00000000000049DA                 mov     rax, fs:28h
.text:00000000000049E3                 mov     [rsp+68h+var_10], rax
.text:00000000000049E8                 xor     eax, eax
.text:00000000000049EA                 mov     r8, rsp
.text:00000000000049ED                 nop     dword ptr [rax]
.text:00000000000049F0
.text:00000000000049F0 loc_49F0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000049F0                 mov     eax, [r10]
.text:00000000000049F3                 cmp     eax, 2Fh ; '/'
.text:00000000000049F6                 ja      short loc_4A3A
.text:00000000000049F8                 mov     r11d, eax
.text:00000000000049FB                 add     r11, [r10+10h]
.text:00000000000049FF                 add     eax, 8
.text:0000000000004A02                 mov     [r10], eax
.text:0000000000004A05
.text:0000000000004A05 loc_4A05:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004A05                 mov     rax, [r11]
.text:0000000000004A08                 test    rax, rax
.text:0000000000004A0B                 mov     [r8+r9*8], rax
.text:0000000000004A0F                 jz      short loc_4A1B
.text:0000000000004A11                 add     r9, 1
.text:0000000000004A15                 cmp     r9, 0Ah
.text:0000000000004A19                 jnz     short loc_49F0
.text:0000000000004A1B
.text:0000000000004A1B loc_4A1B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004A1B                 call    version_etc_arn
.text:0000000000004A20                 mov     rax, [rsp+68h+var_10]
.text:0000000000004A25                 xor     rax, fs:28h
.text:0000000000004A2E                 jnz     short loc_4A35
.text:0000000000004A30                 add     rsp, 68h
.text:0000000000004A34                 retn
.text:0000000000004A35 ; ---------------------------------------------------------------------------
.text:0000000000004A35
.text:0000000000004A35 loc_4A35:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004A35                 call    ___stack_chk_fail
.text:0000000000004A3A ; ---------------------------------------------------------------------------
.text:0000000000004A3A
.text:0000000000004A3A loc_4A3A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004A3A                 mov     r11, [r10+8]
.text:0000000000004A3E                 lea     rax, [r11+8]
.text:0000000000004A42                 mov     [r10+8], rax
.text:0000000000004A46                 jmp     short loc_4A05
.text:0000000000004A46 ; } // starts at 49D0
.text:0000000000004A46 version_etc_va  endp
.text:0000000000004A46
.text:0000000000004A46 ; ---------------------------------------------------------------------------
.text:0000000000004A48                 align 10h
.text:0000000000004A50
.text:0000000000004A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A50
.text:0000000000004A50 ; Attributes: info_from_lumina
.text:0000000000004A50
.text:0000000000004A50 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004A50                 public version_etc
.text:0000000000004A50 version_etc     proc near               ; CODE XREF: main+ED↑p
.text:0000000000004A50
.text:0000000000004A50 var_C0          = dword ptr -0C0h
.text:0000000000004A50 var_B8          = qword ptr -0B8h
.text:0000000000004A50 var_B0          = qword ptr -0B0h
.text:0000000000004A50 var_A8          = byte ptr -0A8h
.text:0000000000004A50 var_50          = qword ptr -50h
.text:0000000000004A50 var_48          = byte ptr -48h
.text:0000000000004A50 var_28          = qword ptr -28h
.text:0000000000004A50 var_20          = qword ptr -20h
.text:0000000000004A50 arg_0           = byte ptr  8
.text:0000000000004A50
.text:0000000000004A50 ; __unwind {
.text:0000000000004A50                 push    rbp
.text:0000000000004A51                 push    rbx
.text:0000000000004A52                 mov     r10d, 20h ; ' '
.text:0000000000004A58                 xor     r11d, r11d
.text:0000000000004A5B                 sub     rsp, 0B8h
.text:0000000000004A62                 mov     rax, fs:28h
.text:0000000000004A6B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004A70                 xor     eax, eax
.text:0000000000004A72                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004A7A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004A82                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004A8A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004A8F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004A97                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004A9F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004AA4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004AAC                 xor     r9d, r9d
.text:0000000000004AAF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004AB4                 mov     rbp, rax
.text:0000000000004AB7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004AC0
.text:0000000000004AC0 loc_4AC0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004AC0                 cmp     r10d, 2Fh ; '/'
.text:0000000000004AC4                 ja      short loc_4B1C
.text:0000000000004AC6                 mov     eax, r10d
.text:0000000000004AC9                 mov     r11d, 1
.text:0000000000004ACF                 add     r10d, 8
.text:0000000000004AD3                 add     rax, rbp
.text:0000000000004AD6
.text:0000000000004AD6 loc_4AD6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004AD6                 mov     rax, [rax]
.text:0000000000004AD9                 test    rax, rax
.text:0000000000004ADC                 mov     [r8+r9*8], rax
.text:0000000000004AE0                 jz      short loc_4AEC
.text:0000000000004AE2                 add     r9, 1
.text:0000000000004AE6                 cmp     r9, 0Ah
.text:0000000000004AEA                 jnz     short loc_4AC0
.text:0000000000004AEC
.text:0000000000004AEC loc_4AEC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000004AEC                 test    r11b, r11b
.text:0000000000004AEF                 jnz     short loc_4B15
.text:0000000000004AF1
.text:0000000000004AF1 loc_4AF1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004AF1                 call    version_etc_arn
.text:0000000000004AF6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000004AFB                 xor     rax, fs:28h
.text:0000000000004B04                 jnz     short loc_4B10
.text:0000000000004B06                 add     rsp, 0B8h
.text:0000000000004B0D                 pop     rbx
.text:0000000000004B0E                 pop     rbp
.text:0000000000004B0F                 retn
.text:0000000000004B10 ; ---------------------------------------------------------------------------
.text:0000000000004B10
.text:0000000000004B10 loc_4B10:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004B10                 call    ___stack_chk_fail
.text:0000000000004B15 ; ---------------------------------------------------------------------------
.text:0000000000004B15
.text:0000000000004B15 loc_4B15:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004B15                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000004B1A                 jmp     short loc_4AF1
.text:0000000000004B1C ; ---------------------------------------------------------------------------
.text:0000000000004B1C
.text:0000000000004B1C loc_4B1C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000004B1C                 mov     rax, rbx
.text:0000000000004B1F                 add     rbx, 8
.text:0000000000004B23                 jmp     short loc_4AD6
.text:0000000000004B23 ; } // starts at 4A50
.text:0000000000004B23 version_etc     endp
.text:0000000000004B23
.text:0000000000004B23 ; ---------------------------------------------------------------------------
.text:0000000000004B25                 align 10h
.text:0000000000004B30
.text:0000000000004B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B30
.text:0000000000004B30 ; Attributes: info_from_lumina
.text:0000000000004B30
.text:0000000000004B30 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004B30                 public emit_bug_reporting_address
.text:0000000000004B30 emit_bug_reporting_address proc near
.text:0000000000004B30 ; __unwind {
.text:0000000000004B30                 push    rbx
.text:0000000000004B31                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004B38                 mov     edx, 5          ; category
.text:0000000000004B3D                 xor     edi, edi        ; domainname
.text:0000000000004B3F                 call    _dcgettext
.text:0000000000004B44                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004B4B                 mov     rsi, rax
.text:0000000000004B4E                 mov     edi, 1
.text:0000000000004B53                 xor     eax, eax
.text:0000000000004B55                 call    ___printf_chk
.text:0000000000004B5A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004B61                 mov     edx, 5          ; category
.text:0000000000004B66                 xor     edi, edi        ; domainname
.text:0000000000004B68                 call    _dcgettext
.text:0000000000004B6D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004B74                 lea     rdx, unk_7A3E
.text:0000000000004B7B                 mov     rsi, rax
.text:0000000000004B7E                 mov     edi, 1
.text:0000000000004B83                 xor     eax, eax
.text:0000000000004B85                 call    ___printf_chk
.text:0000000000004B8A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004B91                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004B98                 xor     edi, edi        ; domainname
.text:0000000000004B9A                 mov     edx, 5          ; category
.text:0000000000004B9F                 call    _dcgettext
.text:0000000000004BA4                 mov     rsi, rbx        ; stream
.text:0000000000004BA7                 mov     rdi, rax        ; s
.text:0000000000004BAA                 pop     rbx
.text:0000000000004BAB                 jmp     _fputs_unlocked
.text:0000000000004BAB ; } // starts at 4B30
.text:0000000000004BAB emit_bug_reporting_address endp
.text:0000000000004BAB
.text:0000000000004BB0
.text:0000000000004BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BB0
.text:0000000000004BB0
.text:0000000000004BB0                 public xmalloc
.text:0000000000004BB0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004BB0                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004BB0 ; __unwind {
.text:0000000000004BB0                 push    rbx
.text:0000000000004BB1                 mov     rbx, rdi
.text:0000000000004BB4                 call    _malloc
.text:0000000000004BB9                 test    rax, rax
.text:0000000000004BBC                 jnz     short loc_4BC3
.text:0000000000004BBE                 test    rbx, rbx
.text:0000000000004BC1                 jnz     short loc_4BC5
.text:0000000000004BC3
.text:0000000000004BC3 loc_4BC3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004BC3                 pop     rbx
.text:0000000000004BC4                 retn
.text:0000000000004BC5 ; ---------------------------------------------------------------------------
.text:0000000000004BC5
.text:0000000000004BC5 loc_4BC5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004BC5                 call    xalloc_die
.text:0000000000004BC5 ; } // starts at 4BB0
.text:0000000000004BC5 xmalloc         endp
.text:0000000000004BC5
.text:0000000000004BC5 ; ---------------------------------------------------------------------------
.text:0000000000004BCA                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0 ; Attributes: info_from_lumina
.text:0000000000004BD0
.text:0000000000004BD0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004BD0                 public xnmalloc
.text:0000000000004BD0 xnmalloc        proc near
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 mov     rax, rdi
.text:0000000000004BD3                 mul     rsi
.text:0000000000004BD6                 mov     rdi, rax
.text:0000000000004BD9                 seto    al
.text:0000000000004BDC                 test    rdi, rdi
.text:0000000000004BDF                 js      short loc_4BEB
.text:0000000000004BE1                 movzx   eax, al
.text:0000000000004BE4                 test    rax, rax
.text:0000000000004BE7                 jnz     short loc_4BEB
.text:0000000000004BE9                 jmp     short xmalloc
.text:0000000000004BEB ; ---------------------------------------------------------------------------
.text:0000000000004BEB
.text:0000000000004BEB loc_4BEB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004BEB                                         ; xnmalloc+17↑j
.text:0000000000004BEB                 sub     rsp, 8
.text:0000000000004BEF                 call    xalloc_die
.text:0000000000004BEF ; } // starts at 4BD0
.text:0000000000004BEF xnmalloc        endp
.text:0000000000004BEF
.text:0000000000004BEF ; ---------------------------------------------------------------------------
.text:0000000000004BF4                 align 20h
.text:0000000000004C00
.text:0000000000004C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C00
.text:0000000000004C00
.text:0000000000004C00                 public xcharalloc
.text:0000000000004C00 xcharalloc      proc near
.text:0000000000004C00 ; __unwind {
.text:0000000000004C00                 jmp     short xmalloc
.text:0000000000004C00 ; } // starts at 4C00
.text:0000000000004C00 xcharalloc      endp
.text:0000000000004C00
.text:0000000000004C00 ; ---------------------------------------------------------------------------
.text:0000000000004C02                 align 10h
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10 ; Attributes: info_from_lumina
.text:0000000000004C10
.text:0000000000004C10 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004C10                 public xrealloc
.text:0000000000004C10 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004C10                                         ; quotearg_n_options+182↑p ...
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 test    rsi, rsi
.text:0000000000004C13                 push    rbx
.text:0000000000004C14                 mov     rbx, rsi
.text:0000000000004C17                 jnz     short loc_4C1E
.text:0000000000004C19                 test    rdi, rdi
.text:0000000000004C1C                 jnz     short loc_4C38
.text:0000000000004C1E
.text:0000000000004C1E loc_4C1E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004C1E                 mov     rsi, rbx        ; size
.text:0000000000004C21                 call    _realloc
.text:0000000000004C26                 test    rax, rax
.text:0000000000004C29                 jnz     short loc_4C30
.text:0000000000004C2B                 test    rbx, rbx
.text:0000000000004C2E                 jnz     short loc_4C41
.text:0000000000004C30
.text:0000000000004C30 loc_4C30:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004C30                 pop     rbx
.text:0000000000004C31                 retn
.text:0000000000004C31 ; ---------------------------------------------------------------------------
.text:0000000000004C32                 align 8
.text:0000000000004C38
.text:0000000000004C38 loc_4C38:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004C38                 call    _free
.text:0000000000004C3D                 xor     eax, eax
.text:0000000000004C3F                 pop     rbx
.text:0000000000004C40                 retn
.text:0000000000004C41 ; ---------------------------------------------------------------------------
.text:0000000000004C41
.text:0000000000004C41 loc_4C41:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004C41                 call    xalloc_die
.text:0000000000004C41 ; } // starts at 4C10
.text:0000000000004C41 xrealloc        endp
.text:0000000000004C41
.text:0000000000004C41 ; ---------------------------------------------------------------------------
.text:0000000000004C46                 align 10h
.text:0000000000004C50
.text:0000000000004C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C50
.text:0000000000004C50 ; Attributes: info_from_lumina
.text:0000000000004C50
.text:0000000000004C50 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004C50                 public xnrealloc
.text:0000000000004C50 xnrealloc       proc near
.text:0000000000004C50 ; __unwind {
.text:0000000000004C50                 mov     rax, rsi
.text:0000000000004C53                 mul     rdx
.text:0000000000004C56                 mov     rsi, rax
.text:0000000000004C59                 seto    al
.text:0000000000004C5C                 test    rsi, rsi
.text:0000000000004C5F                 js      short loc_4C6B
.text:0000000000004C61                 movzx   eax, al
.text:0000000000004C64                 test    rax, rax
.text:0000000000004C67                 jnz     short loc_4C6B
.text:0000000000004C69                 jmp     short xrealloc
.text:0000000000004C6B ; ---------------------------------------------------------------------------
.text:0000000000004C6B
.text:0000000000004C6B loc_4C6B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004C6B                                         ; xnrealloc+17↑j
.text:0000000000004C6B                 sub     rsp, 8
.text:0000000000004C6F                 call    xalloc_die
.text:0000000000004C6F ; } // starts at 4C50
.text:0000000000004C6F xnrealloc       endp
.text:0000000000004C6F
.text:0000000000004C6F ; ---------------------------------------------------------------------------
.text:0000000000004C74                 align 20h
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80 ; Attributes: info_from_lumina
.text:0000000000004C80
.text:0000000000004C80 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004C80                 public x2nrealloc
.text:0000000000004C80 x2nrealloc      proc near
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 test    rdi, rdi
.text:0000000000004C83                 mov     r9, rdx
.text:0000000000004C86                 mov     rcx, [rsi]
.text:0000000000004C89                 jz      short loc_4CC0
.text:0000000000004C8B                 xor     edx, edx
.text:0000000000004C8D                 mov     rax, 5555555555555554h
.text:0000000000004C97                 div     r9
.text:0000000000004C9A                 cmp     rax, rcx
.text:0000000000004C9D                 jbe     short loc_4CDB
.text:0000000000004C9F                 mov     rax, rcx
.text:0000000000004CA2                 shr     rax, 1
.text:0000000000004CA5                 lea     rcx, [rax+rcx+1]
.text:0000000000004CAA
.text:0000000000004CAA loc_4CAA:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000004CAA                 mov     [rsi], rcx
.text:0000000000004CAD                 imul    rcx, r9
.text:0000000000004CB1                 mov     rsi, rcx
.text:0000000000004CB4                 jmp     xrealloc
.text:0000000000004CB4 ; ---------------------------------------------------------------------------
.text:0000000000004CB9                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 loc_4CC0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004CC0                 test    rcx, rcx
.text:0000000000004CC3                 jz      short loc_4CE8
.text:0000000000004CC5
.text:0000000000004CC5 loc_4CC5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004CC5                 mov     rax, rcx
.text:0000000000004CC8                 mul     r9
.text:0000000000004CCB                 seto    dl
.text:0000000000004CCE                 test    rax, rax
.text:0000000000004CD1                 movzx   edx, dl
.text:0000000000004CD4                 js      short loc_4CDB
.text:0000000000004CD6                 test    rdx, rdx
.text:0000000000004CD9                 jz      short loc_4CAA
.text:0000000000004CDB
.text:0000000000004CDB loc_4CDB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000004CDB                                         ; x2nrealloc+54↑j
.text:0000000000004CDB                 sub     rsp, 8
.text:0000000000004CDF                 call    xalloc_die
.text:0000000000004CDF ; ---------------------------------------------------------------------------
.text:0000000000004CE4                 align 8
.text:0000000000004CE8
.text:0000000000004CE8 loc_4CE8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004CE8                 xor     edx, edx
.text:0000000000004CEA                 mov     eax, 80h
.text:0000000000004CEF                 xor     r8d, r8d
.text:0000000000004CF2                 div     r9
.text:0000000000004CF5                 test    rax, rax
.text:0000000000004CF8                 setz    r8b
.text:0000000000004CFC                 lea     rcx, [r8+rax]
.text:0000000000004D00                 jmp     short loc_4CC5
.text:0000000000004D00 ; } // starts at 4C80
.text:0000000000004D00 x2nrealloc      endp
.text:0000000000004D00
.text:0000000000004D00 ; ---------------------------------------------------------------------------
.text:0000000000004D02                 align 10h
.text:0000000000004D10
.text:0000000000004D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D10
.text:0000000000004D10 ; Attributes: info_from_lumina
.text:0000000000004D10
.text:0000000000004D10 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004D10                 public x2realloc
.text:0000000000004D10 x2realloc       proc near
.text:0000000000004D10 ; __unwind {
.text:0000000000004D10                 test    rdi, rdi
.text:0000000000004D13                 mov     rax, [rsi]
.text:0000000000004D16                 jz      short loc_4D40
.text:0000000000004D18                 mov     rdx, 5555555555555553h
.text:0000000000004D22                 cmp     rax, rdx
.text:0000000000004D25                 ja      short loc_4D51
.text:0000000000004D27                 mov     rdx, rax
.text:0000000000004D2A                 shr     rdx, 1
.text:0000000000004D2D                 lea     rax, [rdx+rax+1]
.text:0000000000004D32
.text:0000000000004D32 loc_4D32:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004D32                 mov     [rsi], rax
.text:0000000000004D35                 mov     rsi, rax
.text:0000000000004D38                 jmp     xrealloc
.text:0000000000004D38 ; ---------------------------------------------------------------------------
.text:0000000000004D3D                 align 20h
.text:0000000000004D40
.text:0000000000004D40 loc_4D40:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004D40                 test    rax, rax
.text:0000000000004D43                 mov     edx, 80h
.text:0000000000004D48                 cmovz   rax, rdx
.text:0000000000004D4C                 test    rax, rax
.text:0000000000004D4F                 jns     short loc_4D32
.text:0000000000004D51
.text:0000000000004D51 loc_4D51:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004D51                 sub     rsp, 8
.text:0000000000004D55                 call    xalloc_die
.text:0000000000004D55 ; } // starts at 4D10
.text:0000000000004D55 x2realloc       endp
.text:0000000000004D55
.text:0000000000004D55 ; ---------------------------------------------------------------------------
.text:0000000000004D5A                 align 20h
.text:0000000000004D60
.text:0000000000004D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D60
.text:0000000000004D60
.text:0000000000004D60 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004D60                 public xzalloc
.text:0000000000004D60 xzalloc         proc near
.text:0000000000004D60 ; __unwind {
.text:0000000000004D60                 push    rbx
.text:0000000000004D61                 mov     rbx, rdi
.text:0000000000004D64                 call    xmalloc
.text:0000000000004D69                 mov     rdx, rbx        ; n
.text:0000000000004D6C                 xor     esi, esi        ; c
.text:0000000000004D6E                 mov     rdi, rax        ; s
.text:0000000000004D71                 pop     rbx
.text:0000000000004D72                 jmp     _memset
.text:0000000000004D72 ; } // starts at 4D60
.text:0000000000004D72 xzalloc         endp
.text:0000000000004D72
.text:0000000000004D72 ; ---------------------------------------------------------------------------
.text:0000000000004D77                 align 20h
.text:0000000000004D80
.text:0000000000004D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D80
.text:0000000000004D80 ; Attributes: info_from_lumina
.text:0000000000004D80
.text:0000000000004D80 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004D80                 public xcalloc
.text:0000000000004D80 xcalloc         proc near
.text:0000000000004D80 ; __unwind {
.text:0000000000004D80                 mov     rax, rdi
.text:0000000000004D83                 sub     rsp, 8
.text:0000000000004D87                 mul     rsi
.text:0000000000004D8A                 seto    dl
.text:0000000000004D8D                 test    rax, rax
.text:0000000000004D90                 js      short loc_4DA9
.text:0000000000004D92                 movzx   edx, dl
.text:0000000000004D95                 test    rdx, rdx
.text:0000000000004D98                 jnz     short loc_4DA9
.text:0000000000004D9A                 call    _calloc
.text:0000000000004D9F                 test    rax, rax
.text:0000000000004DA2                 jz      short loc_4DA9
.text:0000000000004DA4                 add     rsp, 8
.text:0000000000004DA8                 retn
.text:0000000000004DA9 ; ---------------------------------------------------------------------------
.text:0000000000004DA9
.text:0000000000004DA9 loc_4DA9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004DA9                                         ; xcalloc+18↑j ...
.text:0000000000004DA9                 call    xalloc_die
.text:0000000000004DA9 ; } // starts at 4D80
.text:0000000000004DA9 xcalloc         endp
.text:0000000000004DA9
.text:0000000000004DA9 ; ---------------------------------------------------------------------------
.text:0000000000004DAE                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DB0
.text:0000000000004DB0 ; Attributes: info_from_lumina
.text:0000000000004DB0
.text:0000000000004DB0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004DB0                 public xmemdup
.text:0000000000004DB0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004DB0                                         ; xstrdup+11↓j
.text:0000000000004DB0 ; __unwind {
.text:0000000000004DB0                 push    rbp
.text:0000000000004DB1                 push    rbx
.text:0000000000004DB2                 mov     rbp, rdi
.text:0000000000004DB5                 mov     rdi, rsi
.text:0000000000004DB8                 mov     rbx, rsi
.text:0000000000004DBB                 sub     rsp, 8
.text:0000000000004DBF                 call    xmalloc
.text:0000000000004DC4                 add     rsp, 8
.text:0000000000004DC8                 mov     rdx, rbx        ; n
.text:0000000000004DCB                 mov     rsi, rbp        ; src
.text:0000000000004DCE                 pop     rbx
.text:0000000000004DCF                 pop     rbp
.text:0000000000004DD0                 mov     rdi, rax        ; dest
.text:0000000000004DD3                 jmp     _memcpy
.text:0000000000004DD3 ; } // starts at 4DB0
.text:0000000000004DD3 xmemdup         endp
.text:0000000000004DD3
.text:0000000000004DD3 ; ---------------------------------------------------------------------------
.text:0000000000004DD8                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DE0
.text:0000000000004DE0
.text:0000000000004DE0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004DE0                 public xstrdup
.text:0000000000004DE0 xstrdup         proc near               ; CODE XREF: main+3A3↑p
.text:0000000000004DE0                                         ; main+510↑p ...
.text:0000000000004DE0 ; __unwind {
.text:0000000000004DE0                 push    rbx
.text:0000000000004DE1                 mov     rbx, rdi
.text:0000000000004DE4                 call    _strlen
.text:0000000000004DE9                 mov     rdi, rbx        ; src
.text:0000000000004DEC                 lea     rsi, [rax+1]    ; n
.text:0000000000004DF0                 pop     rbx
.text:0000000000004DF1                 jmp     short xmemdup
.text:0000000000004DF1 ; } // starts at 4DE0
.text:0000000000004DF1 xstrdup         endp
.text:0000000000004DF1
.text:0000000000004DF1 ; ---------------------------------------------------------------------------
.text:0000000000004DF3                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00 ; Attributes: noreturn info_from_lumina
.text:0000000000004E00
.text:0000000000004E00 ; void __cdecl xalloc_die()
.text:0000000000004E00                 public xalloc_die
.text:0000000000004E00 xalloc_die      proc near               ; CODE XREF: main:loc_1F9C↑p
.text:0000000000004E00                                         ; dir_name:loc_25C3↑p ...
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004E07                 sub     rsp, 8
.text:0000000000004E0B                 mov     edx, 5          ; category
.text:0000000000004E10                 xor     edi, edi        ; domainname
.text:0000000000004E12                 call    _dcgettext
.text:0000000000004E17                 mov     edi, cs:exit_failure ; status
.text:0000000000004E1D                 lea     rdx, format+4   ; format
.text:0000000000004E24                 mov     rcx, rax
.text:0000000000004E27                 xor     esi, esi        ; errnum
.text:0000000000004E29                 xor     eax, eax
.text:0000000000004E2B                 call    _error
.text:0000000000004E30                 call    _abort
.text:0000000000004E30 ; } // starts at 4E00
.text:0000000000004E30 xalloc_die      endp
.text:0000000000004E30
.text:0000000000004E30 ; ---------------------------------------------------------------------------
.text:0000000000004E35                 align 20h
.text:0000000000004E40
.text:0000000000004E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E40
.text:0000000000004E40 ; Attributes: info_from_lumina
.text:0000000000004E40
.text:0000000000004E40                 public xreadlink
.text:0000000000004E40 xreadlink       proc near               ; CODE XREF: main+4C3↑p
.text:0000000000004E40 ; __unwind {
.text:0000000000004E40                 push    rbx
.text:0000000000004E41                 call    areadlink
.text:0000000000004E46                 test    rax, rax
.text:0000000000004E49                 mov     rbx, rax
.text:0000000000004E4C                 jz      short loc_4E58
.text:0000000000004E4E
.text:0000000000004E4E loc_4E4E:                               ; CODE XREF: xreadlink+20↓j
.text:0000000000004E4E                 mov     rax, rbx
.text:0000000000004E51                 pop     rbx
.text:0000000000004E52                 retn
.text:0000000000004E52 ; ---------------------------------------------------------------------------
.text:0000000000004E53                 align 8
.text:0000000000004E58
.text:0000000000004E58 loc_4E58:                               ; CODE XREF: xreadlink+C↑j
.text:0000000000004E58                 call    ___errno_location
.text:0000000000004E5D                 cmp     dword ptr [rax], 0Ch
.text:0000000000004E60                 jnz     short loc_4E4E
.text:0000000000004E62                 call    xalloc_die
.text:0000000000004E62 ; } // starts at 4E40
.text:0000000000004E62 xreadlink       endp
.text:0000000000004E62
.text:0000000000004E62 ; ---------------------------------------------------------------------------
.text:0000000000004E67                 align 10h
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70
.text:0000000000004E70 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000004E70                 public xstrtoumax
.text:0000000000004E70 xstrtoumax      proc near               ; CODE XREF: main+1AB↑p
.text:0000000000004E70
.text:0000000000004E70 base            = dword ptr -50h
.text:0000000000004E70 endptr          = qword ptr -48h
.text:0000000000004E70 var_40          = qword ptr -40h
.text:0000000000004E70
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 push    r15
.text:0000000000004E72                 push    r14
.text:0000000000004E74                 push    r13
.text:0000000000004E76                 push    r12
.text:0000000000004E78                 push    rbp
.text:0000000000004E79                 push    rbx
.text:0000000000004E7A                 sub     rsp, 28h
.text:0000000000004E7E                 mov     rax, fs:28h
.text:0000000000004E87                 mov     [rsp+58h+var_40], rax
.text:0000000000004E8C                 xor     eax, eax
.text:0000000000004E8E                 cmp     edx, 24h ; '$'
.text:0000000000004E91                 ja      loc_51F5
.text:0000000000004E97                 lea     rax, [rsp+58h+endptr]
.text:0000000000004E9C                 mov     r15, rsi
.text:0000000000004E9F                 test    rsi, rsi
.text:0000000000004EA2                 mov     rbp, rdi
.text:0000000000004EA5                 mov     [rsp+58h+base], edx
.text:0000000000004EA9                 mov     r14, rcx
.text:0000000000004EAC                 mov     r13, r8
.text:0000000000004EAF                 cmovz   r15, rax
.text:0000000000004EB3                 call    ___errno_location
.text:0000000000004EB8                 mov     dword ptr [rax], 0
.text:0000000000004EBE                 mov     r12, rax
.text:0000000000004EC1                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000004EC5                 call    ___ctype_b_loc
.text:0000000000004ECA                 mov     edx, [rsp+58h+base] ; base
.text:0000000000004ECE                 mov     rsi, [rax]
.text:0000000000004ED1                 mov     rax, rbp
.text:0000000000004ED4                 jmp     short loc_4EE7
.text:0000000000004ED4 ; ---------------------------------------------------------------------------
.text:0000000000004ED6                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000004EE0                 add     rax, 1
.text:0000000000004EE4                 movzx   ebx, byte ptr [rax]
.text:0000000000004EE7
.text:0000000000004EE7 loc_4EE7:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000004EE7                 movzx   ecx, bl
.text:0000000000004EEA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000004EEF                 jnz     short loc_4EE0
.text:0000000000004EF1                 cmp     bl, 2Dh ; '-'
.text:0000000000004EF4                 jz      short loc_4F48
.text:0000000000004EF6                 xor     ecx, ecx        ; group
.text:0000000000004EF8                 mov     rsi, r15        ; endptr
.text:0000000000004EFB                 mov     rdi, rbp        ; nptr
.text:0000000000004EFE                 call    ___strtoul_internal
.text:0000000000004F03                 mov     rcx, [r15]
.text:0000000000004F06                 mov     rbx, rax
.text:0000000000004F09                 cmp     rcx, rbp
.text:0000000000004F0C                 jz      short loc_4F38
.text:0000000000004F0E                 mov     eax, [r12]
.text:0000000000004F12                 test    eax, eax
.text:0000000000004F14                 jz      short loc_4F78
.text:0000000000004F16                 cmp     eax, 22h ; '"'
.text:0000000000004F19                 mov     ebp, 1
.text:0000000000004F1E                 jnz     short loc_4F48
.text:0000000000004F20
.text:0000000000004F20 loc_4F20:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000004F20                 test    r13, r13
.text:0000000000004F23                 jz      short loc_4F2E
.text:0000000000004F25                 movzx   r12d, byte ptr [rcx]
.text:0000000000004F29                 test    r12b, r12b
.text:0000000000004F2C                 jnz     short loc_4FA7
.text:0000000000004F2E
.text:0000000000004F2E loc_4F2E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:0000000000004F2E                 mov     [r14], rbx
.text:0000000000004F31                 jmp     short loc_4F4D
.text:0000000000004F31 ; ---------------------------------------------------------------------------
.text:0000000000004F33                 align 8
.text:0000000000004F38
.text:0000000000004F38 loc_4F38:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000004F38                 test    r13, r13
.text:0000000000004F3B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000004F40                 jnz     short loc_4F80
.text:0000000000004F42                 nop     word ptr [rax+rax+00h]
.text:0000000000004F48
.text:0000000000004F48 loc_4F48:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000004F48                                         ; xstrtoumax+AE↑j ...
.text:0000000000004F48                 mov     ebp, 4
.text:0000000000004F4D
.text:0000000000004F4D loc_4F4D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:0000000000004F4D                                         ; xstrtoumax+217↓j ...
.text:0000000000004F4D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000004F52                 xor     rdi, fs:28h
.text:0000000000004F5B                 mov     eax, ebp
.text:0000000000004F5D                 jnz     loc_51F0
.text:0000000000004F63                 add     rsp, 28h
.text:0000000000004F67                 pop     rbx
.text:0000000000004F68                 pop     rbp
.text:0000000000004F69                 pop     r12
.text:0000000000004F6B                 pop     r13
.text:0000000000004F6D                 pop     r14
.text:0000000000004F6F                 pop     r15
.text:0000000000004F71                 retn
.text:0000000000004F71 ; ---------------------------------------------------------------------------
.text:0000000000004F72                 align 8
.text:0000000000004F78
.text:0000000000004F78 loc_4F78:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000004F78                 xor     ebp, ebp
.text:0000000000004F7A                 jmp     short loc_4F20
.text:0000000000004F7A ; ---------------------------------------------------------------------------
.text:0000000000004F7C                 align 20h
.text:0000000000004F80
.text:0000000000004F80 loc_4F80:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000004F80                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000004F85                 test    r12b, r12b
.text:0000000000004F88                 jz      short loc_4F48
.text:0000000000004F8A                 movsx   esi, r12b       ; c
.text:0000000000004F8E                 mov     rdi, r13        ; s
.text:0000000000004F91                 xor     ebp, ebp
.text:0000000000004F93                 call    _strchr
.text:0000000000004F98                 test    rax, rax
.text:0000000000004F9B                 mov     ebx, 1
.text:0000000000004FA0                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000004FA5                 jz      short loc_4F48
.text:0000000000004FA7
.text:0000000000004FA7 loc_4FA7:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000004FA7                 movsx   esi, r12b       ; c
.text:0000000000004FAB                 mov     rdi, r13        ; s
.text:0000000000004FAE                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000004FB3                 call    _strchr
.text:0000000000004FB8                 test    rax, rax
.text:0000000000004FBB                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000004FC0                 jz      def_5046        ; jumptable 0000000000005046 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000004FC6                 lea     eax, [r12-45h]
.text:0000000000004FCB                 cmp     al, 2Fh ; '/'
.text:0000000000004FCD                 ja      short loc_5020
.text:0000000000004FCF                 mov     rdx, 814400308945h
.text:0000000000004FD9                 bt      rdx, rax
.text:0000000000004FDD                 jnb     short loc_5020
.text:0000000000004FDF                 mov     esi, 30h ; '0'  ; c
.text:0000000000004FE4                 mov     rdi, r13        ; s
.text:0000000000004FE7                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000004FEC                 call    _strchr
.text:0000000000004FF1                 test    rax, rax
.text:0000000000004FF4                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000004FF9                 jz      short loc_5020
.text:0000000000004FFB                 movzx   eax, byte ptr [rcx+1]
.text:0000000000004FFF                 cmp     al, 44h ; 'D'
.text:0000000000005001                 jz      short loc_500F
.text:0000000000005003                 cmp     al, 69h ; 'i'
.text:0000000000005005                 jz      loc_51D8
.text:000000000000500B                 cmp     al, 42h ; 'B'
.text:000000000000500D                 jnz     short loc_5020
.text:000000000000500F
.text:000000000000500F loc_500F:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000500F                 mov     edi, 2
.text:0000000000005014                 mov     esi, 3E8h
.text:0000000000005019                 jmp     short loc_502A
.text:0000000000005019 ; ---------------------------------------------------------------------------
.text:000000000000501B                 align 20h
.text:0000000000005020
.text:0000000000005020 loc_5020:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000005020                                         ; xstrtoumax+16D↑j ...
.text:0000000000005020                 mov     edi, 1
.text:0000000000005025                 mov     esi, 400h
.text:000000000000502A
.text:000000000000502A loc_502A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000502A                                         ; xstrtoumax+37B↓j
.text:000000000000502A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000502E                 cmp     r12b, 35h
.text:0000000000005032                 ja      short def_5046  ; jumptable 0000000000005046 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005034                 lea     rdx, jpt_5046
.text:000000000000503B                 movzx   r12d, r12b
.text:000000000000503F                 movsxd  rax, ds:(jpt_5046 - 8B48h)[rdx+r12*4]
.text:0000000000005043                 add     rax, rdx
.text:0000000000005046                 jmp     rax             ; switch jump
.text:0000000000005048 ; ---------------------------------------------------------------------------
.text:0000000000005048
.text:0000000000005048 loc_5048:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005048                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:0000000000005048                 mov     rax, rbx        ; jumptable 0000000000005046 cases 77,109
.text:000000000000504B                 mul     rsi
.text:000000000000504E                 jo      loc_5241
.text:0000000000005054                 xor     r8d, r8d
.text:0000000000005057
.text:0000000000005057 loc_5057:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000005057                                         ; xstrtoumax+35E↓j ...
.text:0000000000005057                 mul     rsi
.text:000000000000505A                 jo      loc_5232
.text:0000000000005060                 mov     rbx, rax
.text:0000000000005063
.text:0000000000005063 loc_5063:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000005063                 or      ebp, r8d
.text:0000000000005066                 db      2Eh
.text:0000000000005066                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005070
.text:0000000000005070 loc_5070:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005070                                         ; xstrtoumax+23B↓j ...
.text:0000000000005070                 movsxd  rdi, edi        ; jumptable 0000000000005046 case 99
.text:0000000000005073                 mov     eax, ebp
.text:0000000000005075                 add     rcx, rdi
.text:0000000000005078                 or      eax, 2
.text:000000000000507B                 mov     [r15], rcx
.text:000000000000507E                 cmp     byte ptr [rcx], 0
.text:0000000000005081                 mov     [r14], rbx
.text:0000000000005084                 cmovnz  ebp, eax
.text:0000000000005087                 jmp     loc_4F4D
.text:000000000000508C ; ---------------------------------------------------------------------------
.text:000000000000508C
.text:000000000000508C def_5046:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000508C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000508C                 mov     [r14], rbx      ; jumptable 0000000000005046 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000508F                 or      ebp, 2
.text:0000000000005092                 jmp     loc_4F4D
.text:0000000000005097 ; ---------------------------------------------------------------------------
.text:0000000000005097
.text:0000000000005097 loc_5097:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005097                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:0000000000005097                 mov     edx, 2          ; jumptable 0000000000005046 case 119
.text:000000000000509C                 mov     rax, rdx
.text:000000000000509F                 mul     rbx
.text:00000000000050A2                 jo      loc_513E
.text:00000000000050A8                 add     rbx, rbx
.text:00000000000050AB                 jmp     short loc_5070  ; jumptable 0000000000005046 case 99
.text:00000000000050AD ; ---------------------------------------------------------------------------
.text:00000000000050AD
.text:00000000000050AD loc_50AD:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000050AD                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:00000000000050AD                 mov     edx, 200h       ; jumptable 0000000000005046 case 98
.text:00000000000050B2                 mov     rax, rdx
.text:00000000000050B5                 mul     rbx
.text:00000000000050B8                 jo      loc_513E
.text:00000000000050BE                 shl     rbx, 9
.text:00000000000050C2                 jmp     short loc_5070  ; jumptable 0000000000005046 case 99
.text:00000000000050C4 ; ---------------------------------------------------------------------------
.text:00000000000050C4
.text:00000000000050C4 loc_50C4:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000050C4                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:00000000000050C4                 mov     r8d, 7          ; jumptable 0000000000005046 case 90
.text:00000000000050CA                 xor     r9d, r9d
.text:00000000000050CD                 nop     dword ptr [rax]
.text:00000000000050D0
.text:00000000000050D0 loc_50D0:                               ; CODE XREF: xstrtoumax+273↓j
.text:00000000000050D0                 mov     rax, rbx
.text:00000000000050D3                 mul     rsi
.text:00000000000050D6                 mov     rbx, rax
.text:00000000000050D9                 jo      loc_526E
.text:00000000000050DF
.text:00000000000050DF loc_50DF:                               ; CODE XREF: xstrtoumax+408↓j
.text:00000000000050DF                 sub     r8d, 1
.text:00000000000050E3                 jnz     short loc_50D0
.text:00000000000050E5
.text:00000000000050E5 loc_50E5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:00000000000050E5                                         ; xstrtoumax+2BD↓j ...
.text:00000000000050E5                 or      ebp, r9d
.text:00000000000050E8                 jmp     short loc_5070  ; jumptable 0000000000005046 case 99
.text:00000000000050EA ; ---------------------------------------------------------------------------
.text:00000000000050EA
.text:00000000000050EA loc_50EA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000050EA                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:00000000000050EA                 mov     r8d, 8          ; jumptable 0000000000005046 case 89
.text:00000000000050F0                 xor     r9d, r9d
.text:00000000000050F3                 nop     dword ptr [rax+rax+00h]
.text:00000000000050F8
.text:00000000000050F8 loc_50F8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:00000000000050F8                 mov     rax, rbx
.text:00000000000050FB                 mul     rsi
.text:00000000000050FE                 mov     rbx, rax
.text:0000000000005101                 jo      loc_5250
.text:0000000000005107
.text:0000000000005107 loc_5107:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000005107                 sub     r8d, 1
.text:000000000000510B                 jnz     short loc_50F8
.text:000000000000510D                 jmp     short loc_50E5
.text:000000000000510F ; ---------------------------------------------------------------------------
.text:000000000000510F
.text:000000000000510F loc_510F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000510F                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:000000000000510F                 mov     r8d, 4          ; jumptable 0000000000005046 cases 84,116
.text:0000000000005115                 xor     r9d, r9d
.text:0000000000005118
.text:0000000000005118 loc_5118:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000005118                 mov     rax, rbx
.text:000000000000511B                 mul     rsi
.text:000000000000511E                 mov     rbx, rax
.text:0000000000005121                 jo      loc_5223
.text:0000000000005127
.text:0000000000005127 loc_5127:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000005127                 sub     r8d, 1
.text:000000000000512B                 jnz     short loc_5118
.text:000000000000512D                 jmp     short loc_50E5
.text:000000000000512F ; ---------------------------------------------------------------------------
.text:000000000000512F
.text:000000000000512F loc_512F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000512F                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:000000000000512F                 mov     rax, rbx        ; jumptable 0000000000005046 cases 75,107
.text:0000000000005132                 mul     rsi
.text:0000000000005135                 mov     rbx, rax
.text:0000000000005138                 jno     loc_5070        ; jumptable 0000000000005046 case 99
.text:000000000000513E
.text:000000000000513E loc_513E:                               ; CODE XREF: xstrtoumax+232↑j
.text:000000000000513E                                         ; xstrtoumax+248↑j ...
.text:000000000000513E                 mov     ebp, 1
.text:0000000000005143                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005147                 jmp     loc_5070        ; jumptable 0000000000005046 case 99
.text:0000000000005147 ; ---------------------------------------------------------------------------
.text:000000000000514C                 align 10h
.text:0000000000005150
.text:0000000000005150 loc_5150:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005150                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:0000000000005150                 mov     r8d, 5          ; jumptable 0000000000005046 case 80
.text:0000000000005156                 xor     r9d, r9d
.text:0000000000005159
.text:0000000000005159 loc_5159:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000005159                 mov     rax, rbx
.text:000000000000515C                 mul     rsi
.text:000000000000515F                 mov     rbx, rax
.text:0000000000005162                 jo      loc_525F
.text:0000000000005168
.text:0000000000005168 loc_5168:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000005168                 sub     r8d, 1
.text:000000000000516C                 jnz     short loc_5159
.text:000000000000516E                 jmp     loc_50E5
.text:0000000000005173 ; ---------------------------------------------------------------------------
.text:0000000000005173
.text:0000000000005173 loc_5173:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005173                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:0000000000005173                 mov     r8d, 6          ; jumptable 0000000000005046 case 69
.text:0000000000005179                 xor     r9d, r9d
.text:000000000000517C
.text:000000000000517C loc_517C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000517C                 mov     rax, rbx
.text:000000000000517F                 mul     rsi
.text:0000000000005182                 mov     rbx, rax
.text:0000000000005185                 jo      loc_5214
.text:000000000000518B
.text:000000000000518B loc_518B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000518B                 sub     r8d, 1
.text:000000000000518F                 jnz     short loc_517C
.text:0000000000005191                 jmp     loc_50E5
.text:0000000000005196 ; ---------------------------------------------------------------------------
.text:0000000000005196
.text:0000000000005196 loc_5196:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005196                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:0000000000005196                 mov     edx, 400h       ; jumptable 0000000000005046 case 66
.text:000000000000519B                 mov     rax, rdx
.text:000000000000519E                 mul     rbx
.text:00000000000051A1                 jo      short loc_513E
.text:00000000000051A3                 shl     rbx, 0Ah
.text:00000000000051A7                 jmp     loc_5070        ; jumptable 0000000000005046 case 99
.text:00000000000051AC ; ---------------------------------------------------------------------------
.text:00000000000051AC
.text:00000000000051AC loc_51AC:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000051AC                                         ; DATA XREF: .rodata:jpt_5046↓o
.text:00000000000051AC                 mov     rax, rbx        ; jumptable 0000000000005046 cases 71,103
.text:00000000000051AF                 mul     rsi
.text:00000000000051B2                 jo      loc_527D
.text:00000000000051B8                 xor     r8d, r8d
.text:00000000000051BB
.text:00000000000051BB loc_51BB:                               ; CODE XREF: xstrtoumax+417↓j
.text:00000000000051BB                 mul     rsi
.text:00000000000051BE                 jno     loc_5057
.text:00000000000051C4                 mov     r8d, 1
.text:00000000000051CA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000051CE                 jmp     loc_5057
.text:00000000000051CE ; ---------------------------------------------------------------------------
.text:00000000000051D3                 align 8
.text:00000000000051D8
.text:00000000000051D8 loc_51D8:                               ; CODE XREF: xstrtoumax+195↑j
.text:00000000000051D8                 xor     edi, edi
.text:00000000000051DA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000051DE                 mov     esi, 400h
.text:00000000000051E3                 setz    dil
.text:00000000000051E7                 lea     edi, [rdi+rdi+1]
.text:00000000000051EB                 jmp     loc_502A
.text:00000000000051F0 ; ---------------------------------------------------------------------------
.text:00000000000051F0
.text:00000000000051F0 loc_51F0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:00000000000051F0                 call    ___stack_chk_fail
.text:00000000000051F5 ; ---------------------------------------------------------------------------
.text:00000000000051F5
.text:00000000000051F5 loc_51F5:                               ; CODE XREF: xstrtoumax+21↑j
.text:00000000000051F5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:00000000000051FC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000005203                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000520A                 mov     edx, 54h ; 'T'  ; line
.text:000000000000520F                 call    ___assert_fail
.text:0000000000005214 ; ---------------------------------------------------------------------------
.text:0000000000005214
.text:0000000000005214 loc_5214:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000005214                 mov     r9d, 1
.text:000000000000521A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000521E                 jmp     loc_518B
.text:0000000000005223 ; ---------------------------------------------------------------------------
.text:0000000000005223
.text:0000000000005223 loc_5223:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000005223                 mov     r9d, 1
.text:0000000000005229                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000522D                 jmp     loc_5127
.text:0000000000005232 ; ---------------------------------------------------------------------------
.text:0000000000005232
.text:0000000000005232 loc_5232:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000005232                 mov     r8d, 1
.text:0000000000005238                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000523C                 jmp     loc_5063
.text:0000000000005241 ; ---------------------------------------------------------------------------
.text:0000000000005241
.text:0000000000005241 loc_5241:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000005241                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005245                 mov     r8d, 1
.text:000000000000524B                 jmp     loc_5057
.text:0000000000005250 ; ---------------------------------------------------------------------------
.text:0000000000005250
.text:0000000000005250 loc_5250:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000005250                 mov     r9d, 1
.text:0000000000005256                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000525A                 jmp     loc_5107
.text:000000000000525F ; ---------------------------------------------------------------------------
.text:000000000000525F
.text:000000000000525F loc_525F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000000525F                 mov     r9d, 1
.text:0000000000005265                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005269                 jmp     loc_5168
.text:000000000000526E ; ---------------------------------------------------------------------------
.text:000000000000526E
.text:000000000000526E loc_526E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000526E                 mov     r9d, 1
.text:0000000000005274                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005278                 jmp     loc_50DF
.text:000000000000527D ; ---------------------------------------------------------------------------
.text:000000000000527D
.text:000000000000527D loc_527D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000527D                 mov     r8d, 1
.text:0000000000005283                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005287                 jmp     loc_51BB
.text:0000000000005287 ; } // starts at 4E70
.text:0000000000005287 xstrtoumax      endp
.text:0000000000005287
.text:0000000000005287 ; ---------------------------------------------------------------------------
.text:000000000000528C                 align 10h
.text:0000000000005290
.text:0000000000005290 ; =============== S U B R O U T I N E =======================================
.text:0000000000005290
.text:0000000000005290 ; Attributes: info_from_lumina
.text:0000000000005290
.text:0000000000005290 ; int gzprintf(gzFile_0 file, const char *format, ...)
.text:0000000000005290                 public gzprintf
.text:0000000000005290 gzprintf        proc near               ; CODE XREF: main+28B↑p
.text:0000000000005290                                         ; main+359↑p ...
.text:0000000000005290
.text:0000000000005290 var_D8          = dword ptr -0D8h
.text:0000000000005290 var_D4          = dword ptr -0D4h
.text:0000000000005290 var_D0          = qword ptr -0D0h
.text:0000000000005290 var_C8          = qword ptr -0C8h
.text:0000000000005290 var_C0          = qword ptr -0C0h
.text:0000000000005290 var_B8          = byte ptr -0B8h
.text:0000000000005290 var_A8          = qword ptr -0A8h
.text:0000000000005290 var_A0          = qword ptr -0A0h
.text:0000000000005290 var_98          = qword ptr -98h
.text:0000000000005290 var_90          = qword ptr -90h
.text:0000000000005290 var_88          = xmmword ptr -88h
.text:0000000000005290 var_78          = xmmword ptr -78h
.text:0000000000005290 var_68          = xmmword ptr -68h
.text:0000000000005290 var_58          = xmmword ptr -58h
.text:0000000000005290 var_48          = xmmword ptr -48h
.text:0000000000005290 var_38          = xmmword ptr -38h
.text:0000000000005290 var_28          = xmmword ptr -28h
.text:0000000000005290 var_18          = xmmword ptr -18h
.text:0000000000005290 arg_0           = byte ptr  8
.text:0000000000005290
.text:0000000000005290 ; __unwind {
.text:0000000000005290                 sub     rsp, 0D8h
.text:0000000000005297                 test    al, al
.text:0000000000005299                 mov     [rsp+0D8h+var_A8], rdx
.text:000000000000529E                 mov     [rsp+0D8h+var_A0], rcx
.text:00000000000052A3                 mov     [rsp+0D8h+var_98], r8
.text:00000000000052A8                 mov     [rsp+0D8h+var_90], r9
.text:00000000000052AD                 jz      short loc_52E6
.text:00000000000052AF                 movaps  [rsp+0D8h+var_88], xmm0
.text:00000000000052B4                 movaps  [rsp+0D8h+var_78], xmm1
.text:00000000000052B9                 movaps  [rsp+0D8h+var_68], xmm2
.text:00000000000052BE                 movaps  [rsp+0D8h+var_58], xmm3
.text:00000000000052C6                 movaps  [rsp+0D8h+var_48], xmm4
.text:00000000000052CE                 movaps  [rsp+0D8h+var_38], xmm5
.text:00000000000052D6                 movaps  [rsp+0D8h+var_28], xmm6
.text:00000000000052DE                 movaps  [rsp+0D8h+var_18], xmm7
.text:00000000000052E6
.text:00000000000052E6 loc_52E6:                               ; CODE XREF: gzprintf+1D↑j
.text:00000000000052E6                 mov     rax, fs:28h
.text:00000000000052EF                 mov     [rsp+0D8h+var_C0], rax
.text:00000000000052F4                 xor     eax, eax
.text:00000000000052F6                 lea     rax, [rsp+0D8h+arg_0]
.text:00000000000052FE                 mov     rdx, rsp
.text:0000000000005301                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000005306                 lea     rax, [rsp+0D8h+var_B8]
.text:000000000000530B                 mov     [rsp+0D8h+var_D8], 10h
.text:0000000000005312                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:000000000000531A                 mov     [rsp+0D8h+var_C8], rax
.text:000000000000531F                 call    u16_u16_vasprintf
.text:0000000000005324                 mov     rcx, [rsp+0D8h+var_C0]
.text:0000000000005329                 xor     rcx, fs:28h
.text:0000000000005332                 jnz     short loc_533C
.text:0000000000005334                 add     rsp, 0D8h
.text:000000000000533B                 retn
.text:000000000000533C ; ---------------------------------------------------------------------------
.text:000000000000533C
.text:000000000000533C loc_533C:                               ; CODE XREF: gzprintf+A2↑j
.text:000000000000533C                 call    ___stack_chk_fail
.text:000000000000533C ; } // starts at 5290
.text:000000000000533C gzprintf        endp
.text:000000000000533C
.text:000000000000533C ; ---------------------------------------------------------------------------
.text:0000000000005341                 align 10h
.text:0000000000005350
.text:0000000000005350 ; =============== S U B R O U T I N E =======================================
.text:0000000000005350
.text:0000000000005350 ; Attributes: info_from_lumina
.text:0000000000005350
.text:0000000000005350 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005350                 public rpl_mbrtowc
.text:0000000000005350 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005350
.text:0000000000005350 pwc             = dword ptr -34h
.text:0000000000005350 var_30          = qword ptr -30h
.text:0000000000005350
.text:0000000000005350 ; __unwind {
.text:0000000000005350                 push    r13
.text:0000000000005352                 push    r12
.text:0000000000005354                 mov     r13, rsi
.text:0000000000005357                 push    rbp
.text:0000000000005358                 push    rbx
.text:0000000000005359                 mov     rbx, rdi
.text:000000000000535C                 mov     r12, rdx
.text:000000000000535F                 sub     rsp, 18h
.text:0000000000005363                 mov     rax, fs:28h
.text:000000000000536C                 mov     [rsp+38h+var_30], rax
.text:0000000000005371                 xor     eax, eax
.text:0000000000005373                 lea     rax, [rsp+38h+pwc]
.text:0000000000005378                 test    rdi, rdi
.text:000000000000537B                 cmovz   rbx, rax
.text:000000000000537F                 mov     rdi, rbx        ; pwc
.text:0000000000005382                 call    _mbrtowc
.text:0000000000005387                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000538B                 mov     rbp, rax
.text:000000000000538E                 jbe     short loc_53B0
.text:0000000000005390                 test    r12, r12
.text:0000000000005393                 jz      short loc_53B0
.text:0000000000005395                 xor     edi, edi
.text:0000000000005397                 call    hard_locale
.text:000000000000539C                 test    al, al
.text:000000000000539E                 jnz     short loc_53B0
.text:00000000000053A0                 movzx   eax, byte ptr [r13+0]
.text:00000000000053A5                 mov     ebp, 1
.text:00000000000053AA                 mov     [rbx], eax
.text:00000000000053AC                 nop     dword ptr [rax+00h]
.text:00000000000053B0
.text:00000000000053B0 loc_53B0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000053B0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000053B0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000053B5                 xor     rdx, fs:28h
.text:00000000000053BE                 mov     rax, rbp
.text:00000000000053C1                 jnz     short loc_53CE
.text:00000000000053C3                 add     rsp, 18h
.text:00000000000053C7                 pop     rbx
.text:00000000000053C8                 pop     rbp
.text:00000000000053C9                 pop     r12
.text:00000000000053CB                 pop     r13
.text:00000000000053CD                 retn
.text:00000000000053CE ; ---------------------------------------------------------------------------
.text:00000000000053CE
.text:00000000000053CE loc_53CE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000053CE                 call    ___stack_chk_fail
.text:00000000000053CE ; } // starts at 5350
.text:00000000000053CE rpl_mbrtowc     endp
.text:00000000000053CE
.text:00000000000053CE ; ---------------------------------------------------------------------------
.text:00000000000053D3                 align 20h
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0 ; Attributes: info_from_lumina
.text:00000000000053E0
.text:00000000000053E0                 public u16_u16_vasprintf
.text:00000000000053E0 u16_u16_vasprintf proc near             ; CODE XREF: gzprintf+8F↑p
.text:00000000000053E0
.text:00000000000053E0 var_18          = qword ptr -18h
.text:00000000000053E0 var_10          = qword ptr -10h
.text:00000000000053E0
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 push    rbx
.text:00000000000053E1                 mov     rax, rsi
.text:00000000000053E4                 mov     rbx, rdi
.text:00000000000053E7                 xor     edi, edi
.text:00000000000053E9                 sub     rsp, 10h
.text:00000000000053ED                 mov     rcx, fs:28h
.text:00000000000053F6                 mov     [rsp+18h+var_10], rcx
.text:00000000000053FB                 xor     ecx, ecx
.text:00000000000053FD                 mov     rsi, rsp
.text:0000000000005400                 mov     rcx, rdx
.text:0000000000005403                 mov     rdx, rax
.text:0000000000005406                 call    vasnprintf
.text:000000000000540B                 test    rax, rax
.text:000000000000540E                 jz      short loc_5452
.text:0000000000005410                 mov     rdx, [rsp+18h+var_18]
.text:0000000000005414                 cmp     rdx, 7FFFFFFFh
.text:000000000000541B                 ja      short loc_5438
.text:000000000000541D                 mov     [rbx], rax
.text:0000000000005420                 mov     eax, edx
.text:0000000000005422
.text:0000000000005422 loc_5422:                               ; CODE XREF: u16_u16_vasprintf+70↓j
.text:0000000000005422                                         ; u16_u16_vasprintf+77↓j
.text:0000000000005422                 mov     rbx, [rsp+18h+var_10]
.text:0000000000005427                 xor     rbx, fs:28h
.text:0000000000005430                 jnz     short loc_5459
.text:0000000000005432                 add     rsp, 10h
.text:0000000000005436                 pop     rbx
.text:0000000000005437                 retn
.text:0000000000005438 ; ---------------------------------------------------------------------------
.text:0000000000005438
.text:0000000000005438 loc_5438:                               ; CODE XREF: u16_u16_vasprintf+3B↑j
.text:0000000000005438                 mov     rdi, rax        ; ptr
.text:000000000000543B                 call    _free
.text:0000000000005440                 call    ___errno_location
.text:0000000000005445                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000544B                 mov     eax, 0FFFFFFFFh
.text:0000000000005450                 jmp     short loc_5422
.text:0000000000005452 ; ---------------------------------------------------------------------------
.text:0000000000005452
.text:0000000000005452 loc_5452:                               ; CODE XREF: u16_u16_vasprintf+2E↑j
.text:0000000000005452                 mov     eax, 0FFFFFFFFh
.text:0000000000005457                 jmp     short loc_5422
.text:0000000000005459 ; ---------------------------------------------------------------------------
.text:0000000000005459
.text:0000000000005459 loc_5459:                               ; CODE XREF: u16_u16_vasprintf+50↑j
.text:0000000000005459                 call    ___stack_chk_fail
.text:0000000000005459 ; } // starts at 53E0
.text:0000000000005459 u16_u16_vasprintf endp
.text:0000000000005459
.text:0000000000005459 ; ---------------------------------------------------------------------------
.text:000000000000545E                 align 20h
.text:0000000000005460
.text:0000000000005460 ; =============== S U B R O U T I N E =======================================
.text:0000000000005460
.text:0000000000005460
.text:0000000000005460 careadlinkatcwd proc near               ; DATA XREF: areadlink↓o
.text:0000000000005460 ; __unwind {
.text:0000000000005460                 cmp     edi, 0FFFFFF9Ch
.text:0000000000005463                 jnz     short loc_5476
.text:0000000000005465                 mov     rax, rsi
.text:0000000000005468                 mov     rsi, rdx        ; buf
.text:000000000000546B                 mov     rdx, rcx        ; len
.text:000000000000546E                 mov     rdi, rax        ; path
.text:0000000000005471                 jmp     _readlink
.text:0000000000005476 ; ---------------------------------------------------------------------------
.text:0000000000005476
.text:0000000000005476 loc_5476:                               ; CODE XREF: careadlinkatcwd+3↑j
.text:0000000000005476                 sub     rsp, 8
.text:000000000000547A                 call    _abort
.text:000000000000547A ; } // starts at 5460
.text:000000000000547A careadlinkatcwd endp
.text:000000000000547A
.text:000000000000547A ; ---------------------------------------------------------------------------
.text:000000000000547F                 align 20h
.text:0000000000005480
.text:0000000000005480 ; =============== S U B R O U T I N E =======================================
.text:0000000000005480
.text:0000000000005480
.text:0000000000005480                 public areadlink
.text:0000000000005480 areadlink       proc near               ; CODE XREF: xreadlink+1↑p
.text:0000000000005480 ; __unwind {
.text:0000000000005480                 lea     r9, careadlinkatcwd
.text:0000000000005487                 mov     rsi, rdi
.text:000000000000548A                 xor     r8d, r8d
.text:000000000000548D                 xor     ecx, ecx
.text:000000000000548F                 xor     edx, edx
.text:0000000000005491                 mov     edi, 0FFFFFF9Ch
.text:0000000000005496                 jmp     careadlinkat
.text:0000000000005496 ; } // starts at 5480
.text:0000000000005496 areadlink       endp
.text:0000000000005496
.text:0000000000005496 ; ---------------------------------------------------------------------------
.text:000000000000549B                 align 20h
.text:00000000000054A0
.text:00000000000054A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054A0
.text:00000000000054A0 ; Attributes: info_from_lumina
.text:00000000000054A0
.text:00000000000054A0 ; char *__fastcall careadlinkat(int fd, const char *filename, char *buffer, size_t buffer_size, const allocator *alloc, ssize_t (*preadlinkat)(int, const char *, char *, size_t))
.text:00000000000054A0                 public careadlinkat
.text:00000000000054A0 careadlinkat    proc near               ; CODE XREF: areadlink+16↑j
.text:00000000000054A0
.text:00000000000054A0 var_458         = qword ptr -458h
.text:00000000000054A0 var_450         = qword ptr -450h
.text:00000000000054A0 src             = byte ptr -448h
.text:00000000000054A0 var_40          = qword ptr -40h
.text:00000000000054A0
.text:00000000000054A0 ; __unwind {
.text:00000000000054A0                 push    r15
.text:00000000000054A2                 push    r14
.text:00000000000054A4                 mov     r15, r9
.text:00000000000054A7                 push    r13
.text:00000000000054A9                 push    r12
.text:00000000000054AB                 mov     r13d, edi
.text:00000000000054AE                 push    rbp
.text:00000000000054AF                 push    rbx
.text:00000000000054B0                 mov     rbp, r8
.text:00000000000054B3                 sub     rsp, 428h
.text:00000000000054BA                 mov     rax, fs:28h
.text:00000000000054C3                 mov     [rsp+458h+var_40], rax
.text:00000000000054CB                 xor     eax, eax
.text:00000000000054CD                 lea     rax, stdlib_allocator
.text:00000000000054D4                 test    r8, r8
.text:00000000000054D7                 mov     [rsp+458h+var_458], rsi
.text:00000000000054DB                 cmovz   rbp, rax
.text:00000000000054DF                 test    rcx, rcx
.text:00000000000054E2                 jnz     loc_5600
.text:00000000000054E8                 lea     r12, [rsp+458h+src]
.text:00000000000054ED                 mov     ebx, 400h
.text:00000000000054F2
.text:00000000000054F2 loc_54F2:                               ; CODE XREF: careadlinkat+166↓j
.text:00000000000054F2                 mov     r14, r12
.text:00000000000054F5                 jmp     short loc_5511
.text:00000000000054F5 ; ---------------------------------------------------------------------------
.text:00000000000054F7                 align 20h
.text:0000000000005500
.text:0000000000005500 loc_5500:                               ; CODE XREF: careadlinkat+AE↓j
.text:0000000000005500                 add     rbx, rbx
.text:0000000000005503                 mov     rdi, rbx
.text:0000000000005506                 call    qword ptr [rbp+0]
.text:0000000000005509                 test    rax, rax
.text:000000000000550C                 mov     r14, rax
.text:000000000000550F                 jz      short loc_5571
.text:0000000000005511
.text:0000000000005511 loc_5511:                               ; CODE XREF: careadlinkat+55↑j
.text:0000000000005511                                         ; careadlinkat+CF↓j
.text:0000000000005511                 mov     rcx, rbx
.text:0000000000005514                 mov     rdx, r14
.text:0000000000005517                 mov     rsi, [rsp+458h+var_458]
.text:000000000000551B                 mov     edi, r13d
.text:000000000000551E                 call    r15
.text:0000000000005521                 test    rax, rax
.text:0000000000005524                 mov     rcx, rax
.text:0000000000005527                 js      loc_55C0
.text:000000000000552D
.text:000000000000552D loc_552D:                               ; CODE XREF: careadlinkat+134↓j
.text:000000000000552D                 cmp     rbx, rcx
.text:0000000000005530                 ja      loc_5610
.text:0000000000005536                 cmp     r12, r14
.text:0000000000005539                 jz      short loc_5541
.text:000000000000553B                 mov     rdi, r14
.text:000000000000553E                 call    qword ptr [rbp+10h]
.text:0000000000005541
.text:0000000000005541 loc_5541:                               ; CODE XREF: careadlinkat+99↑j
.text:0000000000005541                 mov     rax, 4000000000000000h
.text:000000000000554B                 cmp     rbx, rax
.text:000000000000554E                 jbe     short loc_5500
.text:0000000000005550                 test    rbx, rbx
.text:0000000000005553                 js      loc_5648
.text:0000000000005559                 mov     rbx, 8000000000000000h
.text:0000000000005563                 mov     rdi, rbx
.text:0000000000005566                 call    qword ptr [rbp+0]
.text:0000000000005569                 test    rax, rax
.text:000000000000556C                 mov     r14, rax
.text:000000000000556F                 jnz     short loc_5511
.text:0000000000005571
.text:0000000000005571 loc_5571:                               ; CODE XREF: careadlinkat+6F↑j
.text:0000000000005571                                         ; careadlinkat+1F6↓j
.text:0000000000005571                 mov     rax, [rbp+18h]
.text:0000000000005575                 test    rax, rax
.text:0000000000005578                 jz      short loc_557F
.text:000000000000557A                 mov     rdi, rbx
.text:000000000000557D                 call    rax
.text:000000000000557F
.text:000000000000557F loc_557F:                               ; CODE XREF: careadlinkat+D8↑j
.text:000000000000557F                 call    ___errno_location
.text:0000000000005584                 xor     r14d, r14d
.text:0000000000005587                 mov     dword ptr [rax], 0Ch
.text:000000000000558D
.text:000000000000558D loc_558D:                               ; CODE XREF: careadlinkat+15E↓j
.text:000000000000558D                                         ; careadlinkat+19F↓j ...
.text:000000000000558D                 mov     rsi, [rsp+458h+var_40]
.text:0000000000005595                 xor     rsi, fs:28h
.text:000000000000559E                 mov     rax, r14
.text:00000000000055A1                 jnz     loc_56A3
.text:00000000000055A7                 add     rsp, 428h
.text:00000000000055AE                 pop     rbx
.text:00000000000055AF                 pop     rbp
.text:00000000000055B0                 pop     r12
.text:00000000000055B2                 pop     r13
.text:00000000000055B4                 pop     r14
.text:00000000000055B6                 pop     r15
.text:00000000000055B8                 retn
.text:00000000000055B8 ; ---------------------------------------------------------------------------
.text:00000000000055B9                 align 20h
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: careadlinkat+87↑j
.text:00000000000055C0                 mov     [rsp+458h+var_450], rax
.text:00000000000055C5                 call    ___errno_location
.text:00000000000055CA                 mov     edx, [rax]
.text:00000000000055CC                 mov     rcx, [rsp+458h+var_450]
.text:00000000000055D1                 cmp     edx, 22h ; '"'
.text:00000000000055D4                 jz      loc_552D
.text:00000000000055DA                 cmp     r12, r14
.text:00000000000055DD                 mov     dword ptr [rsp+458h+var_450], edx
.text:00000000000055E1                 mov     [rsp+458h+var_458], rax
.text:00000000000055E5                 jz      loc_569B
.text:00000000000055EB                 mov     rdi, r14
.text:00000000000055EE                 xor     r14d, r14d
.text:00000000000055F1                 call    qword ptr [rbp+10h]
.text:00000000000055F4                 mov     rax, [rsp+458h+var_458]
.text:00000000000055F8                 mov     edx, dword ptr [rsp+458h+var_450]
.text:00000000000055FC                 mov     [rax], edx
.text:00000000000055FE                 jmp     short loc_558D
.text:0000000000005600 ; ---------------------------------------------------------------------------
.text:0000000000005600
.text:0000000000005600 loc_5600:                               ; CODE XREF: careadlinkat+42↑j
.text:0000000000005600                 mov     r12, rdx
.text:0000000000005603                 mov     rbx, rcx
.text:0000000000005606                 jmp     loc_54F2
.text:0000000000005606 ; ---------------------------------------------------------------------------
.text:000000000000560B                 align 10h
.text:0000000000005610
.text:0000000000005610 loc_5610:                               ; CODE XREF: careadlinkat+90↑j
.text:0000000000005610                 lea     r15, [rsp+458h+src]
.text:0000000000005615                 lea     r13, [rcx+1]
.text:0000000000005619                 mov     byte ptr [r14+rcx], 0
.text:000000000000561E                 cmp     r14, r15
.text:0000000000005621                 jnz     short loc_5660
.text:0000000000005623                 mov     rdi, r13
.text:0000000000005626                 call    qword ptr [rbp+0]
.text:0000000000005629                 test    rax, rax
.text:000000000000562C                 mov     r14, rax
.text:000000000000562F                 jz      short loc_5693
.text:0000000000005631                 mov     rdx, r13        ; n
.text:0000000000005634                 mov     rsi, r15        ; src
.text:0000000000005637                 mov     rdi, rax        ; dest
.text:000000000000563A                 call    _memcpy
.text:000000000000563F                 jmp     loc_558D
.text:000000000000563F ; ---------------------------------------------------------------------------
.text:0000000000005644                 align 8
.text:0000000000005648
.text:0000000000005648 loc_5648:                               ; CODE XREF: careadlinkat+B3↑j
.text:0000000000005648                 call    ___errno_location
.text:000000000000564D                 xor     r14d, r14d
.text:0000000000005650                 mov     dword ptr [rax], 24h ; '$'
.text:0000000000005656                 jmp     loc_558D
.text:0000000000005656 ; ---------------------------------------------------------------------------
.text:000000000000565B                 align 20h
.text:0000000000005660
.text:0000000000005660 loc_5660:                               ; CODE XREF: careadlinkat+181↑j
.text:0000000000005660                 cmp     rbx, r13
.text:0000000000005663                 jbe     loc_558D
.text:0000000000005669                 cmp     r12, r14
.text:000000000000566C                 jz      loc_558D
.text:0000000000005672                 mov     rax, [rbp+8]
.text:0000000000005676                 test    rax, rax
.text:0000000000005679                 jz      loc_558D
.text:000000000000567F                 mov     rdi, r14
.text:0000000000005682                 mov     rsi, r13
.text:0000000000005685                 call    rax
.text:0000000000005687                 test    rax, rax
.text:000000000000568A                 cmovnz  r14, rax
.text:000000000000568E                 jmp     loc_558D
.text:0000000000005693 ; ---------------------------------------------------------------------------
.text:0000000000005693
.text:0000000000005693 loc_5693:                               ; CODE XREF: careadlinkat+18F↑j
.text:0000000000005693                 mov     rbx, r13
.text:0000000000005696                 jmp     loc_5571
.text:000000000000569B ; ---------------------------------------------------------------------------
.text:000000000000569B
.text:000000000000569B loc_569B:                               ; CODE XREF: careadlinkat+145↑j
.text:000000000000569B                 xor     r14d, r14d
.text:000000000000569E                 jmp     loc_558D
.text:00000000000056A3 ; ---------------------------------------------------------------------------
.text:00000000000056A3
.text:00000000000056A3 loc_56A3:                               ; CODE XREF: careadlinkat+101↑j
.text:00000000000056A3                 call    ___stack_chk_fail
.text:00000000000056A3 ; } // starts at 54A0
.text:00000000000056A3 careadlinkat    endp
.text:00000000000056A3
.text:00000000000056A3 ; ---------------------------------------------------------------------------
.text:00000000000056A8                 align 10h
.text:00000000000056B0
.text:00000000000056B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056B0
.text:00000000000056B0 ; Attributes: info_from_lumina
.text:00000000000056B0
.text:00000000000056B0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000056B0                 public close_stream
.text:00000000000056B0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000056B0                                         ; close_stdout+33↑p
.text:00000000000056B0 ; __unwind {
.text:00000000000056B0                 push    r12
.text:00000000000056B2                 push    rbp
.text:00000000000056B3                 mov     rbp, rdi
.text:00000000000056B6                 push    rbx
.text:00000000000056B7                 call    ___fpending
.text:00000000000056BC                 mov     ebx, [rbp+0]
.text:00000000000056BF                 mov     rdi, rbp        ; stream
.text:00000000000056C2                 mov     r12, rax
.text:00000000000056C5                 call    rpl_fclose
.text:00000000000056CA                 and     ebx, 20h
.text:00000000000056CD                 test    ebx, ebx
.text:00000000000056CF                 jnz     short loc_56E8
.text:00000000000056D1                 test    eax, eax
.text:00000000000056D3                 jz      short loc_56DF
.text:00000000000056D5                 test    r12, r12
.text:00000000000056D8                 mov     eax, 0FFFFFFFFh
.text:00000000000056DD                 jz      short loc_5718
.text:00000000000056DF
.text:00000000000056DF loc_56DF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000056DF                 pop     rbx
.text:00000000000056E0                 pop     rbp
.text:00000000000056E1                 pop     r12
.text:00000000000056E3                 retn
.text:00000000000056E3 ; ---------------------------------------------------------------------------
.text:00000000000056E4                 align 8
.text:00000000000056E8
.text:00000000000056E8 loc_56E8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000056E8                 test    eax, eax
.text:00000000000056EA                 jnz     short loc_5708
.text:00000000000056EC                 call    ___errno_location
.text:00000000000056F1                 mov     dword ptr [rax], 0
.text:00000000000056F7                 mov     eax, 0FFFFFFFFh
.text:00000000000056FC                 pop     rbx
.text:00000000000056FD                 pop     rbp
.text:00000000000056FE                 pop     r12
.text:0000000000005700                 retn
.text:0000000000005700 ; ---------------------------------------------------------------------------
.text:0000000000005701                 align 8
.text:0000000000005708
.text:0000000000005708 loc_5708:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005708                 pop     rbx
.text:0000000000005709                 mov     eax, 0FFFFFFFFh
.text:000000000000570E                 pop     rbp
.text:000000000000570F                 pop     r12
.text:0000000000005711                 retn
.text:0000000000005711 ; ---------------------------------------------------------------------------
.text:0000000000005712                 align 8
.text:0000000000005718
.text:0000000000005718 loc_5718:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005718                 call    ___errno_location
.text:000000000000571D                 cmp     dword ptr [rax], 9
.text:0000000000005720                 pop     rbx
.text:0000000000005721                 pop     rbp
.text:0000000000005722                 pop     r12
.text:0000000000005724                 setnz   al
.text:0000000000005727                 movzx   eax, al
.text:000000000000572A                 neg     eax
.text:000000000000572C                 retn
.text:000000000000572C ; } // starts at 56B0
.text:000000000000572C close_stream    endp
.text:000000000000572C
.text:000000000000572C ; ---------------------------------------------------------------------------
.text:000000000000572D                 align 10h
.text:0000000000005730
.text:0000000000005730 ; =============== S U B R O U T I N E =======================================
.text:0000000000005730
.text:0000000000005730
.text:0000000000005730                 public hard_locale
.text:0000000000005730 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005730 ; __unwind {
.text:0000000000005730                 sub     rsp, 8
.text:0000000000005734                 xor     esi, esi        ; locale
.text:0000000000005736                 call    _setlocale
.text:000000000000573B                 mov     rdx, rax
.text:000000000000573E                 mov     eax, 1
.text:0000000000005743                 test    rdx, rdx
.text:0000000000005746                 jz      short loc_5765
.text:0000000000005748                 lea     rdi, aC         ; "C"
.text:000000000000574F                 mov     ecx, 2
.text:0000000000005754                 mov     rsi, rdx
.text:0000000000005757                 repe cmpsb
.text:0000000000005759                 setnbe  cl
.text:000000000000575C                 sbb     cl, 0
.text:000000000000575F                 xor     eax, eax
.text:0000000000005761                 test    cl, cl
.text:0000000000005763                 jnz     short loc_5770
.text:0000000000005765
.text:0000000000005765 loc_5765:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005765                 add     rsp, 8
.text:0000000000005769                 retn
.text:0000000000005769 ; ---------------------------------------------------------------------------
.text:000000000000576A                 align 10h
.text:0000000000005770
.text:0000000000005770 loc_5770:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005770                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005777                 mov     ecx, 6
.text:000000000000577C                 mov     rsi, rdx
.text:000000000000577F                 repe cmpsb
.text:0000000000005781                 setnbe  al
.text:0000000000005784                 sbb     al, 0
.text:0000000000005786                 test    al, al
.text:0000000000005788                 setnz   al
.text:000000000000578B                 add     rsp, 8
.text:000000000000578F                 retn
.text:000000000000578F ; } // starts at 5730
.text:000000000000578F hard_locale     endp
.text:000000000000578F
.text:0000000000005790
.text:0000000000005790 ; =============== S U B R O U T I N E =======================================
.text:0000000000005790
.text:0000000000005790
.text:0000000000005790                 public locale_charset
.text:0000000000005790 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005790 ; __unwind {
.text:0000000000005790                 sub     rsp, 8
.text:0000000000005794                 mov     edi, 0Eh        ; item
.text:0000000000005799                 call    _nl_langinfo
.text:000000000000579E                 test    rax, rax
.text:00000000000057A1                 jz      short loc_57C0
.text:00000000000057A3                 cmp     byte ptr [rax], 0
.text:00000000000057A6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000057AD                 cmovz   rax, rdx
.text:00000000000057B1                 add     rsp, 8
.text:00000000000057B5                 retn
.text:00000000000057B5 ; ---------------------------------------------------------------------------
.text:00000000000057B6                 align 20h
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000057C0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000057C7                 add     rsp, 8
.text:00000000000057CB                 retn
.text:00000000000057CB ; } // starts at 5790
.text:00000000000057CB locale_charset  endp
.text:00000000000057CB
.text:00000000000057CB ; ---------------------------------------------------------------------------
.text:00000000000057CC                 align 10h
.text:00000000000057D0
.text:00000000000057D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057D0
.text:00000000000057D0 ; Attributes: info_from_lumina
.text:00000000000057D0
.text:00000000000057D0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000057D0                 public rpl_fclose
.text:00000000000057D0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000057D0 ; __unwind {
.text:00000000000057D0                 push    r12
.text:00000000000057D2                 push    rbp
.text:00000000000057D3                 push    rbx
.text:00000000000057D4                 mov     rbx, rdi
.text:00000000000057D7                 call    _fileno
.text:00000000000057DC                 test    eax, eax
.text:00000000000057DE                 mov     rdi, rbx        ; fp
.text:00000000000057E1                 js      short loc_5837
.text:00000000000057E3                 call    ___freading
.text:00000000000057E8                 test    eax, eax
.text:00000000000057EA                 jnz     short loc_5818
.text:00000000000057EC
.text:00000000000057EC loc_57EC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000057EC                 mov     rdi, rbx        ; stream
.text:00000000000057EF                 call    rpl_fflush
.text:00000000000057F4                 test    eax, eax
.text:00000000000057F6                 jz      short loc_5834
.text:00000000000057F8                 call    ___errno_location
.text:00000000000057FD                 mov     r12d, [rax]
.text:0000000000005800                 mov     rdi, rbx        ; stream
.text:0000000000005803                 mov     rbp, rax
.text:0000000000005806                 call    _fclose
.text:000000000000580B                 test    r12d, r12d
.text:000000000000580E                 jnz     short loc_5840
.text:0000000000005810
.text:0000000000005810 loc_5810:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005810                 pop     rbx
.text:0000000000005811                 pop     rbp
.text:0000000000005812                 pop     r12
.text:0000000000005814                 retn
.text:0000000000005814 ; ---------------------------------------------------------------------------
.text:0000000000005815                 align 8
.text:0000000000005818
.text:0000000000005818 loc_5818:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005818                 mov     rdi, rbx        ; stream
.text:000000000000581B                 call    _fileno
.text:0000000000005820                 xor     esi, esi        ; offset
.text:0000000000005822                 mov     edx, 1          ; whence
.text:0000000000005827                 mov     edi, eax        ; fd
.text:0000000000005829                 call    _lseek
.text:000000000000582E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005832                 jnz     short loc_57EC
.text:0000000000005834
.text:0000000000005834 loc_5834:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005834                 mov     rdi, rbx        ; stream
.text:0000000000005837
.text:0000000000005837 loc_5837:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005837                 pop     rbx
.text:0000000000005838                 pop     rbp
.text:0000000000005839                 pop     r12
.text:000000000000583B                 jmp     _fclose
.text:0000000000005840 ; ---------------------------------------------------------------------------
.text:0000000000005840
.text:0000000000005840 loc_5840:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005840                 mov     [rbp+0], r12d
.text:0000000000005844                 mov     eax, 0FFFFFFFFh
.text:0000000000005849                 jmp     short loc_5810
.text:0000000000005849 ; } // starts at 57D0
.text:0000000000005849 rpl_fclose      endp
.text:0000000000005849
.text:0000000000005849 ; ---------------------------------------------------------------------------
.text:000000000000584B                 align 10h
.text:0000000000005850
.text:0000000000005850 ; =============== S U B R O U T I N E =======================================
.text:0000000000005850
.text:0000000000005850 ; Attributes: info_from_lumina
.text:0000000000005850
.text:0000000000005850 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005850                 public rpl_fflush
.text:0000000000005850 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005850 ; __unwind {
.text:0000000000005850                 test    rdi, rdi
.text:0000000000005853                 push    rbx
.text:0000000000005854                 mov     rbx, rdi
.text:0000000000005857                 jz      short loc_586A
.text:0000000000005859                 call    ___freading
.text:000000000000585E                 test    eax, eax
.text:0000000000005860                 jz      short loc_586A
.text:0000000000005862                 test    dword ptr [rbx], 100h
.text:0000000000005868                 jnz     short loc_5878
.text:000000000000586A
.text:000000000000586A loc_586A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000586A                                         ; rpl_fflush+10↑j
.text:000000000000586A                 mov     rdi, rbx        ; stream
.text:000000000000586D                 pop     rbx
.text:000000000000586E                 jmp     _fflush
.text:000000000000586E ; ---------------------------------------------------------------------------
.text:0000000000005873                 align 8
.text:0000000000005878
.text:0000000000005878 loc_5878:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005878                 mov     rdi, rbx
.text:000000000000587B                 mov     edx, 1
.text:0000000000005880                 xor     esi, esi
.text:0000000000005882                 call    rpl_fseeko
.text:0000000000005887                 mov     rdi, rbx        ; stream
.text:000000000000588A                 pop     rbx
.text:000000000000588B                 jmp     _fflush
.text:000000000000588B ; } // starts at 5850
.text:000000000000588B rpl_fflush      endp
.text:000000000000588B
.text:0000000000005890
.text:0000000000005890 ; =============== S U B R O U T I N E =======================================
.text:0000000000005890
.text:0000000000005890 ; Attributes: info_from_lumina
.text:0000000000005890
.text:0000000000005890 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005890                 public rpl_fseeko
.text:0000000000005890 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005890 ; __unwind {
.text:0000000000005890                 mov     rax, [rdi+8]
.text:0000000000005894                 cmp     [rdi+10h], rax
.text:0000000000005898                 jz      short loc_58A0
.text:000000000000589A
.text:000000000000589A loc_589A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000589A                                         ; rpl_fseeko+1F↓j
.text:000000000000589A                 jmp     _fseeko
.text:000000000000589A ; ---------------------------------------------------------------------------
.text:000000000000589F                 align 20h
.text:00000000000058A0
.text:00000000000058A0 loc_58A0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000058A0                 mov     rax, [rdi+20h]
.text:00000000000058A4                 cmp     [rdi+28h], rax
.text:00000000000058A8                 jnz     short loc_589A
.text:00000000000058AA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000058AF                 jnz     short loc_589A
.text:00000000000058B1                 push    r12
.text:00000000000058B3                 push    rbp
.text:00000000000058B4                 mov     r12d, edx
.text:00000000000058B7                 push    rbx
.text:00000000000058B8                 mov     rbp, rsi
.text:00000000000058BB                 mov     rbx, rdi
.text:00000000000058BE                 call    _fileno
.text:00000000000058C3                 mov     edx, r12d       ; whence
.text:00000000000058C6                 mov     rsi, rbp        ; offset
.text:00000000000058C9                 mov     edi, eax        ; fd
.text:00000000000058CB                 call    _lseek
.text:00000000000058D0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000058D4                 jz      short loc_58E2
.text:00000000000058D6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000058D9                 mov     [rbx+90h], rax
.text:00000000000058E0                 xor     eax, eax
.text:00000000000058E2
.text:00000000000058E2 loc_58E2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000058E2                 pop     rbx
.text:00000000000058E3                 pop     rbp
.text:00000000000058E4                 pop     r12
.text:00000000000058E6                 retn
.text:00000000000058E6 ; } // starts at 5890
.text:00000000000058E6 rpl_fseeko      endp
.text:00000000000058E6
.text:00000000000058E6 ; ---------------------------------------------------------------------------
.text:00000000000058E7                 align 10h
.text:00000000000058F0
.text:00000000000058F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058F0
.text:00000000000058F0 ; Attributes: bp-based frame
.text:00000000000058F0
.text:00000000000058F0                 public vasnprintf
.text:00000000000058F0 vasnprintf      proc near               ; CODE XREF: u16_u16_vasprintf+26↑p
.text:00000000000058F0
.text:00000000000058F0 var_450         = tbyte ptr -450h
.text:00000000000058F0 var_440         = tbyte ptr -440h
.text:00000000000058F0 var_430         = qword ptr -430h
.text:00000000000058F0 var_421         = byte ptr -421h
.text:00000000000058F0 ptr             = qword ptr -420h
.text:00000000000058F0 var_418         = qword ptr -418h
.text:00000000000058F0 var_410         = qword ptr -410h
.text:00000000000058F0 var_408         = qword ptr -408h
.text:00000000000058F0 var_400         = qword ptr -400h
.text:00000000000058F0 var_3F8         = qword ptr -3F8h
.text:00000000000058F0 var_3F0         = qword ptr -3F0h
.text:00000000000058F0 src             = qword ptr -3E8h
.text:00000000000058F0 var_3E0         = qword ptr -3E0h
.text:00000000000058F0 var_3D8         = qword ptr -3D8h
.text:00000000000058F0 var_3D0         = qword ptr -3D0h
.text:00000000000058F0 n               = qword ptr -3C8h
.text:00000000000058F0 var_3BC         = dword ptr -3BCh
.text:00000000000058F0 var_3B8         = dword ptr -3B8h
.text:00000000000058F0 var_3B4         = dword ptr -3B4h
.text:00000000000058F0 var_3B0         = byte ptr -3B0h
.text:00000000000058F0 var_3A8         = qword ptr -3A8h
.text:00000000000058F0 var_2C0         = qword ptr -2C0h
.text:00000000000058F0 var_2B8         = qword ptr -2B8h
.text:00000000000058F0 var_2B0         = qword ptr -2B0h
.text:00000000000058F0 var_2A8         = qword ptr -2A8h
.text:00000000000058F0 var_38          = qword ptr -38h
.text:00000000000058F0
.text:00000000000058F0 ; __unwind {
.text:00000000000058F0                 push    rbp
.text:00000000000058F1                 mov     rbp, rsp
.text:00000000000058F4                 push    r15
.text:00000000000058F6                 push    r14
.text:00000000000058F8                 push    r13
.text:00000000000058FA                 push    r12
.text:00000000000058FC                 lea     r14, [rbp+var_3B0]
.text:0000000000005903                 push    rbx
.text:0000000000005904                 mov     rbx, rdx
.text:0000000000005907                 mov     r12, rcx
.text:000000000000590A                 mov     rdx, r14
.text:000000000000590D                 sub     rsp, 408h
.text:0000000000005914                 mov     [rbp+var_418], rsi
.text:000000000000591B                 lea     rsi, [rbp+var_2C0]
.text:0000000000005922                 mov     [rbp+src], rdi
.text:0000000000005929                 mov     rdi, rbx
.text:000000000000592C                 mov     [rbp+var_410], r14
.text:0000000000005933                 mov     rax, fs:28h
.text:000000000000593C                 mov     [rbp+var_38], rax
.text:0000000000005940                 xor     eax, eax
.text:0000000000005942                 mov     [rbp+var_408], rsi
.text:0000000000005949                 call    printf_parse
.text:000000000000594E                 test    eax, eax
.text:0000000000005950                 js      loc_67B8
.text:0000000000005956                 mov     rsi, r14
.text:0000000000005959                 mov     rdi, r12
.text:000000000000595C                 call    printf_fetchargs
.text:0000000000005961                 test    eax, eax
.text:0000000000005963                 js      loc_6820
.text:0000000000005969                 mov     rax, [rbp+var_2B0]
.text:0000000000005970                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005977                 add     rax, 7
.text:000000000000597B                 cmp     rax, 6
.text:000000000000597F                 cmovbe  rax, rdx
.text:0000000000005983                 add     rax, [rbp+var_2A8]
.text:000000000000598A                 jb      loc_63B8
.text:0000000000005990                 mov     rdi, rax
.text:0000000000005993                 xor     r8d, r8d
.text:0000000000005996                 add     rdi, 6          ; size
.text:000000000000599A                 setb    r8b
.text:000000000000599E                 jb      loc_63B8
.text:00000000000059A4                 cmp     rdi, 0F9Fh
.text:00000000000059AB                 jbe     loc_5AF8
.text:00000000000059B1                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000000059B5                 mov     [rbp+n], r8
.text:00000000000059BC                 jz      loc_63B8
.text:00000000000059C2                 call    _malloc
.text:00000000000059C7                 test    rax, rax
.text:00000000000059CA                 mov     [rbp+var_3D8], rax
.text:00000000000059D1                 jz      loc_63B8
.text:00000000000059D7                 mov     r8, [rbp+n]
.text:00000000000059DE                 mov     [rbp+ptr], rax
.text:00000000000059E5
.text:00000000000059E5 loc_59E5:                               ; CODE XREF: vasnprintf+22E↓j
.text:00000000000059E5                 xor     r12d, r12d
.text:00000000000059E8                 cmp     [rbp+src], 0
.text:00000000000059F0                 jz      short loc_59FC
.text:00000000000059F2                 mov     rax, [rbp+var_418]
.text:00000000000059F9                 mov     r12, [rax]
.text:00000000000059FC
.text:00000000000059FC loc_59FC:                               ; CODE XREF: vasnprintf+100↑j
.text:00000000000059FC                 mov     r13, [rbp+var_2B8]
.text:0000000000005A03                 lea     rax, [rbp+var_3BC]
.text:0000000000005A0A                 mov     r15, [rbp+src]
.text:0000000000005A11                 mov     [rbp+var_400], 0
.text:0000000000005A1C                 mov     [rbp+var_3F0], rax
.text:0000000000005A23                 mov     rax, rbx
.text:0000000000005A26                 mov     rbx, r8
.text:0000000000005A29                 mov     rcx, [r13+0]
.text:0000000000005A2D                 mov     r8, rax
.text:0000000000005A30                 cmp     rcx, r8
.text:0000000000005A33                 jz      loc_63A1
.text:0000000000005A39
.text:0000000000005A39 loc_5A39:                               ; CODE XREF: vasnprintf+AAB↓j
.text:0000000000005A39                 sub     rcx, r8
.text:0000000000005A3C                 mov     rax, rbx
.text:0000000000005A3F                 add     rax, rcx
.text:0000000000005A42                 mov     r14, rax
.text:0000000000005A45                 jnb     loc_5B28
.text:0000000000005A4B                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A4F                 jz      loc_6520
.text:0000000000005A55
.text:0000000000005A55 loc_5A55:                               ; CODE XREF: vasnprintf+4E2↓j
.text:0000000000005A55                                         ; vasnprintf+A86↓j ...
.text:0000000000005A55                 call    ___errno_location
.text:0000000000005A5A                 mov     [rbp+n], rax
.text:0000000000005A61
.text:0000000000005A61 loc_5A61:                               ; CODE XREF: vasnprintf+640↓j
.text:0000000000005A61                                         ; vasnprintf+652↓j ...
.text:0000000000005A61                 cmp     r15, [rbp+src]
.text:0000000000005A68                 jz      short loc_5A73
.text:0000000000005A6A                 test    r15, r15
.text:0000000000005A6D                 jnz     loc_6550
.text:0000000000005A73
.text:0000000000005A73 loc_5A73:                               ; CODE XREF: vasnprintf+178↑j
.text:0000000000005A73                                         ; vasnprintf+C68↓j
.text:0000000000005A73                 mov     rax, [rbp+ptr]
.text:0000000000005A7A                 test    rax, rax
.text:0000000000005A7D                 jz      short loc_5A87
.text:0000000000005A7F                 mov     rdi, rax        ; ptr
.text:0000000000005A82                 call    _free
.text:0000000000005A87
.text:0000000000005A87 loc_5A87:                               ; CODE XREF: vasnprintf+18D↑j
.text:0000000000005A87                                         ; vasnprintf+AD4↓j
.text:0000000000005A87                 mov     rax, [rbp+var_408]
.text:0000000000005A8E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000005A95                 add     rax, 20h ; ' '
.text:0000000000005A99                 cmp     rdi, rax
.text:0000000000005A9C                 jz      short loc_5AA3
.text:0000000000005A9E                 call    _free
.text:0000000000005AA3
.text:0000000000005AA3 loc_5AA3:                               ; CODE XREF: vasnprintf+1AC↑j
.text:0000000000005AA3                 mov     rax, [rbp+var_410]
.text:0000000000005AAA                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000005AB1                 add     rax, 10h
.text:0000000000005AB5                 cmp     rdi, rax
.text:0000000000005AB8                 jz      short loc_5ABF
.text:0000000000005ABA                 call    _free
.text:0000000000005ABF
.text:0000000000005ABF loc_5ABF:                               ; CODE XREF: vasnprintf+1C8↑j
.text:0000000000005ABF                 mov     rax, [rbp+n]
.text:0000000000005AC6                 xor     r15d, r15d
.text:0000000000005AC9                 mov     dword ptr [rax], 0Ch
.text:0000000000005ACF
.text:0000000000005ACF loc_5ACF:                               ; CODE XREF: vasnprintf+7BA↓j
.text:0000000000005ACF                                         ; vasnprintf+EBE↓j ...
.text:0000000000005ACF                 mov     rdi, [rbp+var_38]
.text:0000000000005AD3                 xor     rdi, fs:28h
.text:0000000000005ADC                 mov     rax, r15
.text:0000000000005ADF                 jnz     loc_69E7
.text:0000000000005AE5                 lea     rsp, [rbp-28h]
.text:0000000000005AE9                 pop     rbx
.text:0000000000005AEA                 pop     r12
.text:0000000000005AEC                 pop     r13
.text:0000000000005AEE                 pop     r14
.text:0000000000005AF0                 pop     r15
.text:0000000000005AF2                 pop     rbp
.text:0000000000005AF3                 retn
.text:0000000000005AF3 ; ---------------------------------------------------------------------------
.text:0000000000005AF4                 align 8
.text:0000000000005AF8
.text:0000000000005AF8 loc_5AF8:                               ; CODE XREF: vasnprintf+BB↑j
.text:0000000000005AF8                 add     rax, 24h ; '$'
.text:0000000000005AFC                 mov     [rbp+ptr], 0
.text:0000000000005B07                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000005B0B                 sub     rsp, rax
.text:0000000000005B0E                 lea     rax, [rsp+430h+var_421]
.text:0000000000005B13                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000005B17                 mov     [rbp+var_3D8], rax
.text:0000000000005B1E                 jmp     loc_59E5
.text:0000000000005B1E ; ---------------------------------------------------------------------------
.text:0000000000005B23                 align 8
.text:0000000000005B28
.text:0000000000005B28 loc_5B28:                               ; CODE XREF: vasnprintf+155↑j
.text:0000000000005B28                 cmp     r12, rax
.text:0000000000005B2B                 jnb     short loc_5B94
.text:0000000000005B2D                 test    r12, r12
.text:0000000000005B30                 jnz     loc_6460
.text:0000000000005B36                 cmp     rax, 0Ch
.text:0000000000005B3A                 ja      loc_6472
.text:0000000000005B40                 mov     r12d, 0Ch
.text:0000000000005B46
.text:0000000000005B46 loc_5B46:                               ; CODE XREF: vasnprintf+B7C↓j
.text:0000000000005B46                 cmp     r15, [rbp+src]
.text:0000000000005B4D                 setz    dl
.text:0000000000005B50                 test    r15, r15
.text:0000000000005B53                 jz      loc_6498
.text:0000000000005B59
.text:0000000000005B59 loc_5B59:                               ; CODE XREF: vasnprintf+B9C↓j
.text:0000000000005B59                 test    dl, dl
.text:0000000000005B5B                 jnz     loc_6498
.text:0000000000005B61                 mov     rsi, r12        ; size
.text:0000000000005B64                 mov     rdi, r15        ; ptr
.text:0000000000005B67                 mov     [rbp+var_3D0], r8
.text:0000000000005B6E                 mov     [rbp+n], rcx
.text:0000000000005B75                 call    _realloc
.text:0000000000005B7A                 test    rax, rax
.text:0000000000005B7D                 mov     rcx, [rbp+n]
.text:0000000000005B84                 mov     r8, [rbp+var_3D0]
.text:0000000000005B8B                 jz      loc_653B
.text:0000000000005B91                 mov     r15, rax
.text:0000000000005B94
.text:0000000000005B94 loc_5B94:                               ; CODE XREF: vasnprintf+23B↑j
.text:0000000000005B94                                         ; vasnprintf+C23↓j ...
.text:0000000000005B94                 lea     rdi, [r15+rbx]  ; dest
.text:0000000000005B98                 mov     rdx, rcx        ; n
.text:0000000000005B9B                 mov     rsi, r8         ; src
.text:0000000000005B9E                 call    _memcpy
.text:0000000000005BA3
.text:0000000000005BA3 loc_5BA3:                               ; CODE XREF: vasnprintf+AB4↓j
.text:0000000000005BA3                 mov     rax, [rbp+var_400]
.text:0000000000005BAA                 cmp     [rbp+var_2C0], rax
.text:0000000000005BB1                 jz      loc_686B
.text:0000000000005BB7                 movzx   edx, byte ptr [r13+48h]
.text:0000000000005BBC                 mov     rax, [r13+50h]
.text:0000000000005BC0                 cmp     dl, 25h ; '%'
.text:0000000000005BC3                 jz      loc_6358
.text:0000000000005BC9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BCD                 jz      def_5E4B        ; jumptable 0000000000005E4B default case, case 0
.text:0000000000005BCD                                         ; jumptable 00000000000063F0 default case
.text:0000000000005BD3                 mov     r8, [rbp+var_3A8]
.text:0000000000005BDA                 shl     rax, 5
.text:0000000000005BDE                 add     rax, r8
.text:0000000000005BE1                 cmp     dl, 6Eh ; 'n'
.text:0000000000005BE4                 mov     edi, [rax]
.text:0000000000005BE6                 mov     dword ptr [rbp+var_3D0], edi
.text:0000000000005BEC                 jz      loc_63D0
.text:0000000000005BF2                 mov     eax, [r13+10h]
.text:0000000000005BF6                 mov     rdi, [rbp+var_3D8]
.text:0000000000005BFD                 test    al, 1
.text:0000000000005BFF                 mov     byte ptr [rdi], 25h ; '%'
.text:0000000000005C02                 lea     rbx, [rdi+1]
.text:0000000000005C06                 jz      short loc_5C17
.text:0000000000005C08                 mov     rdi, [rbp+var_3D8]
.text:0000000000005C0F                 lea     rbx, [rdi+2]
.text:0000000000005C13                 mov     byte ptr [rdi+1], 27h ; '''
.text:0000000000005C17
.text:0000000000005C17 loc_5C17:                               ; CODE XREF: vasnprintf+316↑j
.text:0000000000005C17                 test    al, 2
.text:0000000000005C19                 jz      short loc_5C22
.text:0000000000005C1B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:0000000000005C1E                 add     rbx, 1
.text:0000000000005C22
.text:0000000000005C22 loc_5C22:                               ; CODE XREF: vasnprintf+329↑j
.text:0000000000005C22                 test    al, 4
.text:0000000000005C24                 jz      short loc_5C2D
.text:0000000000005C26                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000005C29                 add     rbx, 1
.text:0000000000005C2D
.text:0000000000005C2D loc_5C2D:                               ; CODE XREF: vasnprintf+334↑j
.text:0000000000005C2D                 test    al, 8
.text:0000000000005C2F                 jz      short loc_5C38
.text:0000000000005C31                 mov     byte ptr [rbx], 20h ; ' '
.text:0000000000005C34                 add     rbx, 1
.text:0000000000005C38
.text:0000000000005C38 loc_5C38:                               ; CODE XREF: vasnprintf+33F↑j
.text:0000000000005C38                 test    al, 10h
.text:0000000000005C3A                 jz      short loc_5C43
.text:0000000000005C3C                 mov     byte ptr [rbx], 23h ; '#'
.text:0000000000005C3F                 add     rbx, 1
.text:0000000000005C43
.text:0000000000005C43 loc_5C43:                               ; CODE XREF: vasnprintf+34A↑j
.text:0000000000005C43                 test    al, 40h
.text:0000000000005C45                 jz      short loc_5C4E
.text:0000000000005C47                 mov     byte ptr [rbx], 49h ; 'I'
.text:0000000000005C4A                 add     rbx, 1
.text:0000000000005C4E
.text:0000000000005C4E loc_5C4E:                               ; CODE XREF: vasnprintf+355↑j
.text:0000000000005C4E                 test    al, 20h
.text:0000000000005C50                 jz      short loc_5C59
.text:0000000000005C52                 mov     byte ptr [rbx], 30h ; '0'
.text:0000000000005C55                 add     rbx, 1
.text:0000000000005C59
.text:0000000000005C59 loc_5C59:                               ; CODE XREF: vasnprintf+360↑j
.text:0000000000005C59                 mov     rsi, [r13+18h]  ; src
.text:0000000000005C5D                 mov     rdx, [r13+20h]
.text:0000000000005C61                 cmp     rsi, rdx
.text:0000000000005C64                 jz      short loc_5C96
.text:0000000000005C66                 mov     rcx, rdx
.text:0000000000005C69                 mov     rdi, rbx        ; dest
.text:0000000000005C6C                 mov     [rbp+var_3E0], r8
.text:0000000000005C73                 sub     rcx, rsi
.text:0000000000005C76                 mov     rdx, rcx        ; n
.text:0000000000005C79                 mov     [rbp+n], rcx
.text:0000000000005C80                 call    _memcpy
.text:0000000000005C85                 mov     rcx, [rbp+n]
.text:0000000000005C8C                 mov     r8, [rbp+var_3E0]
.text:0000000000005C93                 add     rbx, rcx
.text:0000000000005C96
.text:0000000000005C96 loc_5C96:                               ; CODE XREF: vasnprintf+374↑j
.text:0000000000005C96                 mov     rsi, [r13+30h]  ; src
.text:0000000000005C9A                 mov     rdx, [r13+38h]
.text:0000000000005C9E                 cmp     rsi, rdx
.text:0000000000005CA1                 jz      short loc_5CD3
.text:0000000000005CA3                 mov     rcx, rdx
.text:0000000000005CA6                 mov     rdi, rbx        ; dest
.text:0000000000005CA9                 mov     [rbp+var_3E0], r8
.text:0000000000005CB0                 sub     rcx, rsi
.text:0000000000005CB3                 mov     rdx, rcx        ; n
.text:0000000000005CB6                 mov     [rbp+n], rcx
.text:0000000000005CBD                 call    _memcpy
.text:0000000000005CC2                 mov     rcx, [rbp+n]
.text:0000000000005CC9                 mov     r8, [rbp+var_3E0]
.text:0000000000005CD0                 add     rbx, rcx
.text:0000000000005CD3
.text:0000000000005CD3 loc_5CD3:                               ; CODE XREF: vasnprintf+3B1↑j
.text:0000000000005CD3                 mov     edi, dword ptr [rbp+var_3D0]
.text:0000000000005CD9                 cmp     edi, 10h
.text:0000000000005CDC                 ja      short loc_5D0B
.text:0000000000005CDE                 mov     eax, 1
.text:0000000000005CE3                 mov     ecx, edi
.text:0000000000005CE5                 shl     rax, cl
.text:0000000000005CE8                 test    eax, 14180h
.text:0000000000005CED                 jnz     short loc_5D04
.text:0000000000005CEF                 test    ah, 10h
.text:0000000000005CF2                 jnz     loc_6650
.text:0000000000005CF8                 test    ah, 6
.text:0000000000005CFB                 jz      short loc_5D0B
.text:0000000000005CFD                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000005D00                 add     rbx, 1
.text:0000000000005D04
.text:0000000000005D04 loc_5D04:                               ; CODE XREF: vasnprintf+3FD↑j
.text:0000000000005D04                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000005D07                 add     rbx, 1
.text:0000000000005D0B
.text:0000000000005D0B loc_5D0B:                               ; CODE XREF: vasnprintf+3EC↑j
.text:0000000000005D0B                                         ; vasnprintf+40B↑j ...
.text:0000000000005D0B                 movzx   eax, byte ptr [r13+48h]
.text:0000000000005D10                 mov     byte ptr [rbx+1], 0
.text:0000000000005D14                 mov     [rbx], al
.text:0000000000005D16                 mov     rax, [r13+28h]
.text:0000000000005D1A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D1E                 jz      loc_6450
.text:0000000000005D24                 shl     rax, 5
.text:0000000000005D28                 add     rax, r8
.text:0000000000005D2B                 cmp     dword ptr [rax], 5
.text:0000000000005D2E                 jnz     def_5E4B        ; jumptable 0000000000005E4B default case, case 0
.text:0000000000005D2E                                         ; jumptable 00000000000063F0 default case
.text:0000000000005D34                 mov     eax, [rax+10h]
.text:0000000000005D37                 mov     dword ptr [rbp+var_3E0], 1
.text:0000000000005D41                 mov     [rbp+var_3B8], eax
.text:0000000000005D47
.text:0000000000005D47 loc_5D47:                               ; CODE XREF: vasnprintf+B6A↓j
.text:0000000000005D47                 mov     rax, [r13+40h]
.text:0000000000005D4B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D4F                 jz      short loc_5D7C
.text:0000000000005D51                 shl     rax, 5
.text:0000000000005D55                 add     r8, rax
.text:0000000000005D58                 cmp     dword ptr [r8], 5
.text:0000000000005D5C                 jnz     def_5E4B        ; jumptable 0000000000005E4B default case, case 0
.text:0000000000005D5C                                         ; jumptable 00000000000063F0 default case
.text:0000000000005D62                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000005D68                 mov     edx, [r8+10h]
.text:0000000000005D6C                 mov     [rbp+rax*4+var_3B8], edx
.text:0000000000005D73                 lea     eax, [rax+1]
.text:0000000000005D76                 mov     dword ptr [rbp+var_3E0], eax
.text:0000000000005D7C
.text:0000000000005D7C loc_5D7C:                               ; CODE XREF: vasnprintf+45F↑j
.text:0000000000005D7C                 mov     rax, r14
.text:0000000000005D7F                 xor     edx, edx
.text:0000000000005D81                 add     rax, 2
.text:0000000000005D85                 jb      loc_69EC
.text:0000000000005D8B                 cmp     r12, rax
.text:0000000000005D8E                 jnb     short loc_5DDB
.text:0000000000005D90                 test    r12, r12
.text:0000000000005D93                 jnz     loc_65B8
.text:0000000000005D99                 cmp     rax, 0Ch
.text:0000000000005D9D                 ja      loc_65D0
.text:0000000000005DA3                 mov     r12d, 0Ch
.text:0000000000005DA9
.text:0000000000005DA9 loc_5DA9:                               ; CODE XREF: vasnprintf+CD4↓j
.text:0000000000005DA9                 cmp     r15, [rbp+src]
.text:0000000000005DB0                 setz    dl
.text:0000000000005DB3                 test    r15, r15
.text:0000000000005DB6                 jz      loc_6600
.text:0000000000005DBC
.text:0000000000005DBC loc_5DBC:                               ; CODE XREF: vasnprintf+D03↓j
.text:0000000000005DBC                 test    dl, dl
.text:0000000000005DBE                 jnz     loc_6600
.text:0000000000005DC4                 mov     rsi, r12        ; size
.text:0000000000005DC7                 mov     rdi, r15        ; ptr
.text:0000000000005DCA                 call    _realloc
.text:0000000000005DCF                 test    rax, rax
.text:0000000000005DD2                 jz      loc_5A55
.text:0000000000005DD8                 mov     r15, rax
.text:0000000000005DDB
.text:0000000000005DDB loc_5DDB:                               ; CODE XREF: vasnprintf+49E↑j
.text:0000000000005DDB                                         ; vasnprintf+D53↓j ...
.text:0000000000005DDB                 mov     byte ptr [r15+r14], 0
.text:0000000000005DE0                 call    ___errno_location
.text:0000000000005DE5                 mov     [rbp+n], rax
.text:0000000000005DEC                 mov     eax, [rax]
.text:0000000000005DEE                 mov     [rbp+var_3F8], rbx
.text:0000000000005DF5                 mov     [rbp-424h], eax
.text:0000000000005DFB                 nop     dword ptr [rax+rax+00h]
.text:0000000000005E00
.text:0000000000005E00 loc_5E00:                               ; CODE XREF: vasnprintf+637↓j
.text:0000000000005E00                                         ; vasnprintf+68D↓j ...
.text:0000000000005E00                 mov     rax, [rbp+n]
.text:0000000000005E07                 mov     rbx, r12
.text:0000000000005E0A                 mov     r10d, 7FFFFFFFh
.text:0000000000005E10                 sub     rbx, r14
.text:0000000000005E13                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:0000000000005E1D                 cmp     rbx, 7FFFFFFFh
.text:0000000000005E24                 mov     dword ptr [rax], 0
.text:0000000000005E2A                 mov     eax, dword ptr [rbp+var_3D0]
.text:0000000000005E30                 cmovbe  r10, rbx
.text:0000000000005E34                 cmp     eax, 11h        ; switch 18 cases
.text:0000000000005E37                 ja      def_5E4B        ; jumptable 0000000000005E4B default case, case 0
.text:0000000000005E37                                         ; jumptable 00000000000063F0 default case
.text:0000000000005E3D                 lea     rsi, jpt_5E4B
.text:0000000000005E44                 movsxd  rax, ds:(jpt_5E4B - 8C3Ch)[rsi+rax*4]
.text:0000000000005E48                 add     rax, rsi
.text:0000000000005E4B                 jmp     rax             ; switch jump
.text:0000000000005E4B ; ---------------------------------------------------------------------------
.text:0000000000005E4D                 align 10h
.text:0000000000005E50
.text:0000000000005E50 loc_5E50:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000005E50                                         ; DATA XREF: .rodata:jpt_5E4B↓o
.text:0000000000005E50                 mov     rax, [r13+50h]  ; jumptable 0000000000005E4B cases 7-10,15-17
.text:0000000000005E54                 lea     rdi, [r15+r14]
.text:0000000000005E58                 shl     rax, 5
.text:0000000000005E5C                 add     rax, [rbp+var_3A8]
.text:0000000000005E63                 mov     r9, [rax+10h]
.text:0000000000005E67                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000005E6D                 cmp     eax, 1
.text:0000000000005E70                 jz      loc_6338
.text:0000000000005E76                 cmp     eax, 2
.text:0000000000005E79                 jz      loc_6320
.text:0000000000005E7F                 sub     rsp, 8
.text:0000000000005E83                 push    [rbp+var_3F0]
.text:0000000000005E89
.text:0000000000005E89 loc_5E89:                               ; CODE XREF: vasnprintf+CBE↓j
.text:0000000000005E89                 mov     r8, [rbp+var_3D8]
.text:0000000000005E90                 mov     rsi, r10
.text:0000000000005E93                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E9A                 mov     edx, 1
.text:0000000000005E9F                 xor     eax, eax
.text:0000000000005EA1                 mov     [rbp+var_430], r10
.text:0000000000005EA8                 call    ___snprintf_chk
.text:0000000000005EAD                 pop     rsi
.text:0000000000005EAE                 pop     rdi
.text:0000000000005EAF                 mov     r10, [rbp+var_430]
.text:0000000000005EB6
.text:0000000000005EB6 loc_5EB6:                               ; CODE XREF: vasnprintf+83D↓j
.text:0000000000005EB6                                         ; vasnprintf+8BE↓j ...
.text:0000000000005EB6                 mov     ecx, [rbp+var_3BC]
.text:0000000000005EBC                 test    ecx, ecx
.text:0000000000005EBE                 js      loc_5FFC
.text:0000000000005EC4
.text:0000000000005EC4 loc_5EC4:                               ; CODE XREF: vasnprintf+706↓j
.text:0000000000005EC4                 movsxd  rdx, ecx
.text:0000000000005EC7                 cmp     rdx, r10
.text:0000000000005ECA                 jnb     short loc_5EDA
.text:0000000000005ECC                 add     rdx, r15
.text:0000000000005ECF                 cmp     byte ptr [rdx+r14], 0
.text:0000000000005ED4                 jnz     def_5E4B        ; jumptable 0000000000005E4B default case, case 0
.text:0000000000005ED4                                         ; jumptable 00000000000063F0 default case
.text:0000000000005EDA
.text:0000000000005EDA loc_5EDA:                               ; CODE XREF: vasnprintf+5DA↑j
.text:0000000000005EDA                 cmp     ecx, eax
.text:0000000000005EDC                 jge     short loc_5EE6
.text:0000000000005EDE
.text:0000000000005EDE loc_5EDE:                               ; CODE XREF: vasnprintf+71F↓j
.text:0000000000005EDE                 mov     [rbp+var_3BC], eax
.text:0000000000005EE4                 mov     ecx, eax
.text:0000000000005EE6
.text:0000000000005EE6 loc_5EE6:                               ; CODE XREF: vasnprintf+5EC↑j
.text:0000000000005EE6                 lea     eax, [rcx+1]
.text:0000000000005EE9                 cmp     rax, r10
.text:0000000000005EEC                 jb      loc_6720
.text:0000000000005EF2                 cmp     rbx, 7FFFFFFEh
.text:0000000000005EF9                 ja      loc_6740
.text:0000000000005EFF                 lea     rsi, [r12+r12]
.text:0000000000005F03                 lea     edx, [rcx+2]
.text:0000000000005F06                 test    r12, r12
.text:0000000000005F09                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F10                 cmovns  rax, rsi
.text:0000000000005F14                 add     rdx, r14
.text:0000000000005F17                 jb      loc_69D8
.text:0000000000005F1D                 cmp     rax, rdx
.text:0000000000005F20                 cmovb   rax, rdx
.text:0000000000005F24                 cmp     r12, rax
.text:0000000000005F27                 jnb     loc_5E00
.text:0000000000005F2D                 test    r12, r12
.text:0000000000005F30                 js      loc_5A61
.text:0000000000005F36                 cmp     rsi, rax
.text:0000000000005F39                 mov     r12, rsi
.text:0000000000005F3C                 jnb     short loc_5F4B
.text:0000000000005F3E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F42                 jz      loc_5A61
.text:0000000000005F48                 mov     r12, rax
.text:0000000000005F4B
.text:0000000000005F4B loc_5F4B:                               ; CODE XREF: vasnprintf+64C↑j
.text:0000000000005F4B                 cmp     r15, [rbp+src]
.text:0000000000005F52                 setz    bl
.text:0000000000005F55                 test    r15, r15
.text:0000000000005F58                 jz      loc_62E0
.text:0000000000005F5E                 test    bl, bl
.text:0000000000005F60                 jnz     loc_62E0
.text:0000000000005F66                 mov     rsi, r12        ; size
.text:0000000000005F69                 mov     rdi, r15        ; ptr
.text:0000000000005F6C                 call    _realloc
.text:0000000000005F71                 test    rax, rax
.text:0000000000005F74                 jz      loc_5A61
.text:0000000000005F7A                 mov     r15, rax
.text:0000000000005F7D                 jmp     loc_5E00
.text:0000000000005F7D ; ---------------------------------------------------------------------------
.text:0000000000005F82                 align 8
.text:0000000000005F88
.text:0000000000005F88 loc_5F88:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000005F88                                         ; DATA XREF: .rodata:jpt_5E4B↓o
.text:0000000000005F88                 mov     rax, [r13+50h]  ; jumptable 0000000000005E4B cases 5,6,13,14
.text:0000000000005F8C                 lea     rdi, [r15+r14]
.text:0000000000005F90                 shl     rax, 5
.text:0000000000005F94                 add     rax, [rbp+var_3A8]
.text:0000000000005F9B                 mov     r9d, [rax+10h]
.text:0000000000005F9F                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000005FA5                 cmp     eax, 1
.text:0000000000005FA8                 jz      loc_61E0
.text:0000000000005FAE
.text:0000000000005FAE loc_5FAE:                               ; CODE XREF: vasnprintf+8E9↓j
.text:0000000000005FAE                                         ; vasnprintf+9B1↓j ...
.text:0000000000005FAE                 cmp     eax, 2
.text:0000000000005FB1                 jz      loc_6228
.text:0000000000005FB7
.text:0000000000005FB7 loc_5FB7:                               ; CODE XREF: vasnprintf+92E↓j
.text:0000000000005FB7                 sub     rsp, 8
.text:0000000000005FBB                 push    [rbp+var_3F0]
.text:0000000000005FC1
.text:0000000000005FC1 loc_5FC1:                               ; CODE XREF: vasnprintf+8FF↓j
.text:0000000000005FC1                 mov     r8, [rbp+var_3D8]
.text:0000000000005FC8                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005FCF                 mov     edx, 1
.text:0000000000005FD4                 mov     rsi, r10
.text:0000000000005FD7                 xor     eax, eax
.text:0000000000005FD9                 mov     [rbp+var_430], r10
.text:0000000000005FE0                 call    ___snprintf_chk
.text:0000000000005FE5                 pop     rdx
.text:0000000000005FE6                 pop     rcx
.text:0000000000005FE7                 mov     ecx, [rbp+var_3BC]
.text:0000000000005FED                 mov     r10, [rbp+var_430]
.text:0000000000005FF4                 test    ecx, ecx
.text:0000000000005FF6                 jns     loc_5EC4
.text:0000000000005FFC
.text:0000000000005FFC loc_5FFC:                               ; CODE XREF: vasnprintf+5CE↑j
.text:0000000000005FFC                 mov     rdi, [rbp+var_3F8]
.text:0000000000006003                 cmp     byte ptr [rdi+1], 0
.text:0000000000006007                 jnz     loc_6348
.text:000000000000600D                 test    eax, eax
.text:000000000000600F                 jns     loc_5EDE
.text:0000000000006015                 mov     rax, [rbp+n]
.text:000000000000601C                 mov     ebx, [rax]
.text:000000000000601E                 test    ebx, ebx
.text:0000000000006020                 jnz     short loc_6040
.text:0000000000006022                 movzx   eax, byte ptr [r13+48h]
.text:0000000000006027                 mov     ebx, 16h
.text:000000000000602C                 and     eax, 0FFFFFFEFh
.text:000000000000602F                 cmp     al, 63h ; 'c'
.text:0000000000006031                 mov     eax, 54h ; 'T'
.text:0000000000006036                 cmovz   ebx, eax
.text:0000000000006039                 nop     dword ptr [rax+00000000h]
.text:0000000000006040
.text:0000000000006040 loc_6040:                               ; CODE XREF: vasnprintf+730↑j
.text:0000000000006040                 cmp     r15, [rbp+src]
.text:0000000000006047                 jz      short loc_6052
.text:0000000000006049                 test    r15, r15
.text:000000000000604C                 jnz     loc_67FC
.text:0000000000006052
.text:0000000000006052 loc_6052:                               ; CODE XREF: vasnprintf+757↑j
.text:0000000000006052                                         ; vasnprintf+F14↓j
.text:0000000000006052                 mov     rax, [rbp+ptr]
.text:0000000000006059                 test    rax, rax
.text:000000000000605C                 jz      short loc_6066
.text:000000000000605E                 mov     rdi, rax        ; ptr
.text:0000000000006061                 call    _free
.text:0000000000006066
.text:0000000000006066 loc_6066:                               ; CODE XREF: vasnprintf+76C↑j
.text:0000000000006066                 mov     rax, [rbp+var_408]
.text:000000000000606D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006074                 add     rax, 20h ; ' '
.text:0000000000006078                 cmp     rdi, rax
.text:000000000000607B                 jz      short loc_6082
.text:000000000000607D                 call    _free
.text:0000000000006082
.text:0000000000006082 loc_6082:                               ; CODE XREF: vasnprintf+78B↑j
.text:0000000000006082                 mov     rax, [rbp+var_410]
.text:0000000000006089                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006090                 add     rax, 10h
.text:0000000000006094                 cmp     rdi, rax
.text:0000000000006097                 jz      short loc_609E
.text:0000000000006099                 call    _free
.text:000000000000609E
.text:000000000000609E loc_609E:                               ; CODE XREF: vasnprintf+7A7↑j
.text:000000000000609E                 mov     rax, [rbp+n]
.text:00000000000060A5                 xor     r15d, r15d
.text:00000000000060A8                 mov     [rax], ebx
.text:00000000000060AA                 jmp     loc_5ACF
.text:00000000000060AA ; ---------------------------------------------------------------------------
.text:00000000000060AF                 align 10h
.text:00000000000060B0
.text:00000000000060B0 loc_60B0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000060B0                                         ; DATA XREF: .rodata:jpt_5E4B↓o
.text:00000000000060B0                 mov     rax, [r13+50h]  ; jumptable 0000000000005E4B case 12
.text:00000000000060B4                 lea     rdi, [r15+r14]
.text:00000000000060B8                 shl     rax, 5
.text:00000000000060BC                 add     rax, [rbp+var_3A8]
.text:00000000000060C3                 fld     tbyte ptr [rax+10h]
.text:00000000000060C6                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000060CC                 cmp     eax, 1
.text:00000000000060CF                 jz      loc_6700
.text:00000000000060D5                 cmp     eax, 2
.text:00000000000060D8                 jnz     loc_65A0
.text:00000000000060DE                 mov     eax, [rbp+var_3B4]
.text:00000000000060E4                 sub     rsp, 8
.text:00000000000060E8                 push    [rbp+var_3F0]
.text:00000000000060EE                 mov     r9d, [rbp+var_3B8]
.text:00000000000060F5                 mov     r8, [rbp+var_3D8]
.text:00000000000060FC                 mov     rsi, r10
.text:00000000000060FF                 sub     rsp, 18h
.text:0000000000006103                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000610A                 mov     edx, 1
.text:000000000000610F                 fstp    [rsp+458h+var_450]
.text:0000000000006113                 push    rax
.text:0000000000006114                 xor     eax, eax
.text:0000000000006116                 mov     [rbp+var_430], r10
.text:000000000000611D                 call    ___snprintf_chk
.text:0000000000006122                 add     rsp, 30h
.text:0000000000006126                 mov     r10, [rbp+var_430]
.text:000000000000612D                 jmp     loc_5EB6
.text:000000000000612D ; ---------------------------------------------------------------------------
.text:0000000000006132                 align 8
.text:0000000000006138
.text:0000000000006138 loc_6138:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006138                                         ; DATA XREF: .rodata:jpt_5E4B↓o
.text:0000000000006138                 mov     rax, [r13+50h]  ; jumptable 0000000000005E4B case 11
.text:000000000000613C                 lea     rdi, [r15+r14]
.text:0000000000006140                 shl     rax, 5
.text:0000000000006144                 add     rax, [rbp+var_3A8]
.text:000000000000614B                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000006150                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006156                 cmp     eax, 1
.text:0000000000006159                 jz      loc_66F0
.text:000000000000615F                 cmp     eax, 2
.text:0000000000006162                 jnz     loc_6560
.text:0000000000006168                 mov     eax, [rbp+var_3B4]
.text:000000000000616E                 push    [rbp+var_3F0]
.text:0000000000006174                 push    rax
.text:0000000000006175
.text:0000000000006175 loc_6175:                               ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000006175                 mov     r9d, [rbp+var_3B8]
.text:000000000000617C                 mov     r8, [rbp+var_3D8]
.text:0000000000006183                 mov     rsi, r10
.text:0000000000006186                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000618D                 mov     edx, 1
.text:0000000000006192                 mov     eax, 1
.text:0000000000006197                 mov     [rbp+var_430], r10
.text:000000000000619E                 call    ___snprintf_chk
.text:00000000000061A3                 pop     r8
.text:00000000000061A5                 mov     r10, [rbp+var_430]
.text:00000000000061AC                 pop     r9
.text:00000000000061AE                 jmp     loc_5EB6
.text:00000000000061AE ; ---------------------------------------------------------------------------
.text:00000000000061B3                 align 8
.text:00000000000061B8
.text:00000000000061B8 loc_61B8:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000061B8                                         ; DATA XREF: .rodata:jpt_5E4B↓o
.text:00000000000061B8                 mov     rax, [r13+50h]  ; jumptable 0000000000005E4B case 4
.text:00000000000061BC                 lea     rdi, [r15+r14]
.text:00000000000061C0                 shl     rax, 5
.text:00000000000061C4                 add     rax, [rbp+var_3A8]
.text:00000000000061CB                 movzx   r9d, word ptr [rax+10h]
.text:00000000000061D0                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000061D6                 cmp     eax, 1
.text:00000000000061D9                 jnz     loc_5FAE
.text:00000000000061DF                 nop
.text:00000000000061E0
.text:00000000000061E0 loc_61E0:                               ; CODE XREF: vasnprintf+6B8↑j
.text:00000000000061E0                                         ; vasnprintf+929↓j ...
.text:00000000000061E0                 push    [rbp+var_3F0]
.text:00000000000061E6                 push    r9
.text:00000000000061E8
.text:00000000000061E8 loc_61E8:                               ; CODE XREF: vasnprintf+A50↓j
.text:00000000000061E8                 mov     r9d, [rbp+var_3B8]
.text:00000000000061EF                 jmp     loc_5FC1
.text:00000000000061EF ; ---------------------------------------------------------------------------
.text:00000000000061F4                 align 8
.text:00000000000061F8
.text:00000000000061F8 loc_61F8:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000061F8                                         ; DATA XREF: .rodata:jpt_5E4B↓o
.text:00000000000061F8                 mov     rax, [r13+50h]  ; jumptable 0000000000005E4B case 3
.text:00000000000061FC                 lea     rdi, [r15+r14]
.text:0000000000006200                 shl     rax, 5
.text:0000000000006204                 add     rax, [rbp+var_3A8]
.text:000000000000620B                 movsx   r9d, word ptr [rax+10h]
.text:0000000000006210                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006216                 cmp     eax, 1
.text:0000000000006219                 jz      short loc_61E0
.text:000000000000621B                 cmp     eax, 2
.text:000000000000621E                 jnz     loc_5FB7
.text:0000000000006224                 nop     dword ptr [rax+00h]
.text:0000000000006228
.text:0000000000006228 loc_6228:                               ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000006228                 sub     rsp, 8
.text:000000000000622C                 push    [rbp+var_3F0]
.text:0000000000006232                 push    r9
.text:0000000000006234
.text:0000000000006234 loc_6234:                               ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000006234                 mov     eax, [rbp+var_3B4]
.text:000000000000623A                 push    rax
.text:000000000000623B
.text:000000000000623B loc_623B:                               ; CODE XREF: vasnprintf+E21↓j
.text:000000000000623B                 mov     r9d, [rbp+var_3B8]
.text:0000000000006242                 mov     r8, [rbp+var_3D8]
.text:0000000000006249                 mov     rsi, r10
.text:000000000000624C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006253                 mov     edx, 1
.text:0000000000006258                 xor     eax, eax
.text:000000000000625A                 mov     [rbp+var_430], r10
.text:0000000000006261                 call    ___snprintf_chk
.text:0000000000006266                 add     rsp, 20h
.text:000000000000626A                 mov     r10, [rbp+var_430]
.text:0000000000006271                 jmp     loc_5EB6
.text:0000000000006271 ; ---------------------------------------------------------------------------
.text:0000000000006276                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006280                                         ; DATA XREF: .rodata:jpt_5E4B↓o
.text:0000000000006280                 mov     rax, [r13+50h]  ; jumptable 0000000000005E4B case 2
.text:0000000000006284                 lea     rdi, [r15+r14]
.text:0000000000006288                 shl     rax, 5
.text:000000000000628C                 add     rax, [rbp+var_3A8]
.text:0000000000006293                 movzx   r9d, byte ptr [rax+10h]
.text:0000000000006298                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000629E                 cmp     eax, 1
.text:00000000000062A1                 jnz     loc_5FAE
.text:00000000000062A7                 jmp     loc_61E0
.text:00000000000062A7 ; ---------------------------------------------------------------------------
.text:00000000000062AC                 align 10h
.text:00000000000062B0
.text:00000000000062B0 loc_62B0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000062B0                                         ; DATA XREF: .rodata:jpt_5E4B↓o
.text:00000000000062B0                 mov     rax, [r13+50h]  ; jumptable 0000000000005E4B case 1
.text:00000000000062B4                 lea     rdi, [r15+r14]
.text:00000000000062B8                 shl     rax, 5
.text:00000000000062BC                 add     rax, [rbp+var_3A8]
.text:00000000000062C3                 movsx   r9d, byte ptr [rax+10h]
.text:00000000000062C8                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000062CE                 cmp     eax, 1
.text:00000000000062D1                 jnz     loc_5FAE
.text:00000000000062D7                 jmp     loc_61E0
.text:00000000000062D7 ; ---------------------------------------------------------------------------
.text:00000000000062DC                 align 20h
.text:00000000000062E0
.text:00000000000062E0 loc_62E0:                               ; CODE XREF: vasnprintf+668↑j
.text:00000000000062E0                                         ; vasnprintf+670↑j
.text:00000000000062E0                 mov     rdi, r12        ; size
.text:00000000000062E3                 call    _malloc
.text:00000000000062E8                 test    rax, rax
.text:00000000000062EB                 mov     rcx, rax
.text:00000000000062EE                 jz      loc_5A61
.text:00000000000062F4                 test    r14, r14
.text:00000000000062F7                 jz      loc_63B0
.text:00000000000062FD                 test    bl, bl
.text:00000000000062FF                 jz      loc_63B0
.text:0000000000006305                 mov     rsi, r15        ; src
.text:0000000000006308                 mov     rdx, r14        ; n
.text:000000000000630B                 mov     rdi, rax        ; dest
.text:000000000000630E                 call    _memcpy
.text:0000000000006313                 mov     r15, rax
.text:0000000000006316                 jmp     loc_5E00
.text:0000000000006316 ; ---------------------------------------------------------------------------
.text:000000000000631B                 align 20h
.text:0000000000006320
.text:0000000000006320 loc_6320:                               ; CODE XREF: vasnprintf+589↑j
.text:0000000000006320                 sub     rsp, 8
.text:0000000000006324                 push    [rbp+var_3F0]
.text:000000000000632A                 push    r9
.text:000000000000632C                 jmp     loc_6234
.text:000000000000632C ; ---------------------------------------------------------------------------
.text:0000000000006331                 align 8
.text:0000000000006338
.text:0000000000006338 loc_6338:                               ; CODE XREF: vasnprintf+580↑j
.text:0000000000006338                 push    [rbp+var_3F0]
.text:000000000000633E                 push    r9
.text:0000000000006340                 jmp     loc_61E8
.text:0000000000006340 ; ---------------------------------------------------------------------------
.text:0000000000006345                 align 8
.text:0000000000006348
.text:0000000000006348 loc_6348:                               ; CODE XREF: vasnprintf+717↑j
.text:0000000000006348                 mov     byte ptr [rdi+1], 0
.text:000000000000634C                 jmp     loc_5E00
.text:000000000000634C ; ---------------------------------------------------------------------------
.text:0000000000006351                 align 8
.text:0000000000006358
.text:0000000000006358 loc_6358:                               ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000006358                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000635C                 jnz     def_5E4B        ; jumptable 0000000000005E4B default case, case 0
.text:000000000000635C                                         ; jumptable 00000000000063F0 default case
.text:0000000000006362                 mov     rax, r14
.text:0000000000006365                 add     rax, 1
.text:0000000000006369                 mov     rbx, rax
.text:000000000000636C                 jnb     loc_63F8
.text:0000000000006372                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006376                 jnz     loc_5A55
.text:000000000000637C                 mov     rbx, r12
.text:000000000000637F
.text:000000000000637F loc_637F:                               ; CODE XREF: vasnprintf+B0B↓j
.text:000000000000637F                                         ; vasnprintf+B58↓j ...
.text:000000000000637F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000006384
.text:0000000000006384 loc_6384:                               ; CODE XREF: vasnprintf+C46↓j
.text:0000000000006384                                         ; vasnprintf+D76↓j ...
.text:0000000000006384                 mov     r8, [r13+8]
.text:0000000000006388                 add     r13, 58h ; 'X'
.text:000000000000638C                 mov     rcx, [r13+0]
.text:0000000000006390                 add     [rbp+var_400], 1
.text:0000000000006398                 cmp     rcx, r8
.text:000000000000639B                 jnz     loc_5A39
.text:00000000000063A1
.text:00000000000063A1 loc_63A1:                               ; CODE XREF: vasnprintf+143↑j
.text:00000000000063A1                 mov     r14, rbx
.text:00000000000063A4                 jmp     loc_5BA3
.text:00000000000063A4 ; ---------------------------------------------------------------------------
.text:00000000000063A9                 align 10h
.text:00000000000063B0
.text:00000000000063B0 loc_63B0:                               ; CODE XREF: vasnprintf+A07↑j
.text:00000000000063B0                                         ; vasnprintf+A0F↑j
.text:00000000000063B0                 mov     r15, rcx
.text:00000000000063B3                 jmp     loc_5E00
.text:00000000000063B8 ; ---------------------------------------------------------------------------
.text:00000000000063B8
.text:00000000000063B8 loc_63B8:                               ; CODE XREF: vasnprintf+9A↑j
.text:00000000000063B8                                         ; vasnprintf+AE↑j ...
.text:00000000000063B8                 call    ___errno_location
.text:00000000000063BD                 mov     [rbp+n], rax
.text:00000000000063C4                 jmp     loc_5A87
.text:00000000000063C4 ; ---------------------------------------------------------------------------
.text:00000000000063C9                 align 10h
.text:00000000000063D0
.text:00000000000063D0 loc_63D0:                               ; CODE XREF: vasnprintf+2FC↑j
.text:00000000000063D0                 mov     edx, edi
.text:00000000000063D2                 sub     edx, 12h        ; switch 5 cases
.text:00000000000063D5                 cmp     edx, 4
.text:00000000000063D8                 ja      def_5E4B        ; jumptable 0000000000005E4B default case, case 0
.text:00000000000063D8                                         ; jumptable 00000000000063F0 default case
.text:00000000000063DE                 lea     rdi, jpt_63F0
.text:00000000000063E5                 mov     rax, [rax+10h]
.text:00000000000063E9                 movsxd  rdx, ds:(jpt_63F0 - 8C84h)[rdi+rdx*4]
.text:00000000000063ED                 add     rdx, rdi
.text:00000000000063F0                 jmp     rdx             ; switch jump
.text:00000000000063F0 ; ---------------------------------------------------------------------------
.text:00000000000063F2                 align 8
.text:00000000000063F8
.text:00000000000063F8 loc_63F8:                               ; CODE XREF: vasnprintf+A7C↑j
.text:00000000000063F8                 cmp     r12, rax
.text:00000000000063FB                 jnb     short loc_637F
.text:00000000000063FD                 test    r12, r12
.text:0000000000006400                 jnz     loc_67D0
.text:0000000000006406                 cmp     rax, 0Ch
.text:000000000000640A                 ja      loc_67E2
.text:0000000000006410                 mov     r12d, 0Ch
.text:0000000000006416
.text:0000000000006416 loc_6416:                               ; CODE XREF: vasnprintf+EEC↓j
.text:0000000000006416                                         ; vasnprintf+EFF↓j
.text:0000000000006416                 cmp     r15, [rbp+src]
.text:000000000000641D                 setz    dl
.text:0000000000006420                 test    r15, r15
.text:0000000000006423                 jz      loc_6690
.text:0000000000006429                 test    dl, dl
.text:000000000000642B                 jnz     loc_6690
.text:0000000000006431                 mov     rsi, r12        ; size
.text:0000000000006434                 mov     rdi, r15        ; ptr
.text:0000000000006437                 call    _realloc
.text:000000000000643C                 test    rax, rax
.text:000000000000643F                 jz      loc_653B
.text:0000000000006445                 mov     r15, rax
.text:0000000000006448                 jmp     loc_637F
.text:0000000000006448 ; ---------------------------------------------------------------------------
.text:000000000000644D                 align 10h
.text:0000000000006450
.text:0000000000006450 loc_6450:                               ; CODE XREF: vasnprintf+42E↑j
.text:0000000000006450                 mov     dword ptr [rbp+var_3E0], 0
.text:000000000000645A                 jmp     loc_5D47
.text:000000000000645A ; ---------------------------------------------------------------------------
.text:000000000000645F                 align 20h
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000006460                 js      loc_5A55
.text:0000000000006466                 add     r12, r12
.text:0000000000006469                 cmp     r12, rax
.text:000000000000646C                 jnb     loc_5B46
.text:0000000000006472
.text:0000000000006472 loc_6472:                               ; CODE XREF: vasnprintf+24A↑j
.text:0000000000006472                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006476                 jz      loc_5A55
.text:000000000000647C                 cmp     r15, [rbp+src]
.text:0000000000006483                 mov     r12, rax
.text:0000000000006486                 setz    dl
.text:0000000000006489                 test    r15, r15
.text:000000000000648C                 jnz     loc_5B59
.text:0000000000006492                 nop     word ptr [rax+rax+00h]
.text:0000000000006498
.text:0000000000006498 loc_6498:                               ; CODE XREF: vasnprintf+263↑j
.text:0000000000006498                                         ; vasnprintf+26B↑j
.text:0000000000006498                 mov     rdi, r12        ; size
.text:000000000000649B                 mov     [rbp+var_3E0], r8
.text:00000000000064A2                 mov     byte ptr [rbp+var_3D0], dl
.text:00000000000064A8                 mov     [rbp+n], rcx
.text:00000000000064AF                 call    _malloc
.text:00000000000064B4                 test    rax, rax
.text:00000000000064B7                 mov     r9, rax
.text:00000000000064BA                 mov     rcx, [rbp+n]
.text:00000000000064C1                 movzx   edx, byte ptr [rbp+var_3D0]
.text:00000000000064C8                 mov     r8, [rbp+var_3E0]
.text:00000000000064CF                 jz      loc_5A55
.text:00000000000064D5                 test    rbx, rbx
.text:00000000000064D8                 jz      loc_66E0
.text:00000000000064DE                 test    dl, dl
.text:00000000000064E0                 jz      loc_66E0
.text:00000000000064E6                 mov     rsi, r15        ; src
.text:00000000000064E9                 mov     rdx, rbx        ; n
.text:00000000000064EC                 mov     rdi, rax        ; dest
.text:00000000000064EF                 mov     [rbp+var_3D0], r8
.text:00000000000064F6                 mov     [rbp+n], rcx
.text:00000000000064FD                 call    _memcpy
.text:0000000000006502                 mov     rcx, [rbp+n]
.text:0000000000006509                 mov     r15, rax
.text:000000000000650C                 mov     r8, [rbp+var_3D0]
.text:0000000000006513                 jmp     loc_5B94
.text:0000000000006513 ; ---------------------------------------------------------------------------
.text:0000000000006518                 align 20h
.text:0000000000006520
.text:0000000000006520 loc_6520:                               ; CODE XREF: vasnprintf+15F↑j
.text:0000000000006520                 mov     r14, r12
.text:0000000000006523                 jmp     loc_5B94
.text:0000000000006523 ; ---------------------------------------------------------------------------
.text:0000000000006528                 align 10h
.text:0000000000006530
.text:0000000000006530 loc_6530:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006530                                         ; DATA XREF: .rodata:jpt_63F0↓o
.text:0000000000006530                 mov     [rax], r14      ; jumptable 00000000000063F0 cases 21,22
.text:0000000000006533                 mov     rbx, r14
.text:0000000000006536                 jmp     loc_6384
.text:000000000000653B ; ---------------------------------------------------------------------------
.text:000000000000653B
.text:000000000000653B loc_653B:                               ; CODE XREF: vasnprintf+29B↑j
.text:000000000000653B                                         ; vasnprintf+B4F↑j ...
.text:000000000000653B                 call    ___errno_location
.text:0000000000006540                 mov     [rbp+n], rax
.text:0000000000006547                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006550
.text:0000000000006550 loc_6550:                               ; CODE XREF: vasnprintf+17D↑j
.text:0000000000006550                 mov     rdi, r15        ; ptr
.text:0000000000006553                 call    _free
.text:0000000000006558                 jmp     loc_5A73
.text:0000000000006558 ; ---------------------------------------------------------------------------
.text:000000000000655D                 align 20h
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000006560                 mov     r9, [rbp+var_3F0]
.text:0000000000006567                 mov     r8, [rbp+var_3D8]
.text:000000000000656E                 mov     rsi, r10
.text:0000000000006571                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006578                 mov     edx, 1
.text:000000000000657D                 mov     eax, 1
.text:0000000000006582                 mov     [rbp+var_430], r10
.text:0000000000006589                 call    ___snprintf_chk
.text:000000000000658E                 mov     r10, [rbp+var_430]
.text:0000000000006595                 jmp     loc_5EB6
.text:0000000000006595 ; ---------------------------------------------------------------------------
.text:000000000000659A                 align 20h
.text:00000000000065A0
.text:00000000000065A0 loc_65A0:                               ; CODE XREF: vasnprintf+7E8↑j
.text:00000000000065A0                 sub     rsp, 10h
.text:00000000000065A4                 mov     r9, [rbp+var_3F0]
.text:00000000000065AB                 fstp    [rsp+440h+var_440]
.text:00000000000065AE                 jmp     loc_5E89
.text:00000000000065AE ; ---------------------------------------------------------------------------
.text:00000000000065B3                 align 8
.text:00000000000065B8
.text:00000000000065B8 loc_65B8:                               ; CODE XREF: vasnprintf+4A3↑j
.text:00000000000065B8                 js      loc_5A55
.text:00000000000065BE                 add     r12, r12
.text:00000000000065C1                 cmp     r12, rax
.text:00000000000065C4                 jnb     loc_5DA9
.text:00000000000065CA                 nop     word ptr [rax+rax+00h]
.text:00000000000065D0
.text:00000000000065D0 loc_65D0:                               ; CODE XREF: vasnprintf+4AD↑j
.text:00000000000065D0                                         ; vasnprintf+1114↓j
.text:00000000000065D0                 test    rdx, rdx
.text:00000000000065D3                 jnz     loc_5A55
.text:00000000000065D9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000065DD                 jz      loc_5A55
.text:00000000000065E3                 cmp     r15, [rbp+src]
.text:00000000000065EA                 mov     r12, rax
.text:00000000000065ED                 setz    dl
.text:00000000000065F0                 test    r15, r15
.text:00000000000065F3                 jnz     loc_5DBC
.text:00000000000065F9                 nop     dword ptr [rax+00000000h]
.text:0000000000006600
.text:0000000000006600 loc_6600:                               ; CODE XREF: vasnprintf+4C6↑j
.text:0000000000006600                                         ; vasnprintf+4CE↑j
.text:0000000000006600                 mov     rdi, r12        ; size
.text:0000000000006603                 mov     byte ptr [rbp+n], dl
.text:0000000000006609                 call    _malloc
.text:000000000000660E                 test    rax, rax
.text:0000000000006611                 mov     rcx, rax
.text:0000000000006614                 movzx   edx, byte ptr [rbp+n]
.text:000000000000661B                 jz      loc_5A55
.text:0000000000006621                 test    r14, r14
.text:0000000000006624                 jz      loc_67C0
.text:000000000000662A                 test    dl, dl
.text:000000000000662C                 jz      loc_67C0
.text:0000000000006632                 mov     rsi, r15        ; src
.text:0000000000006635                 mov     rdx, r14        ; n
.text:0000000000006638                 mov     rdi, rax        ; dest
.text:000000000000663B                 call    _memcpy
.text:0000000000006640                 mov     r15, rax
.text:0000000000006643                 jmp     loc_5DDB
.text:0000000000006643 ; ---------------------------------------------------------------------------
.text:0000000000006648                 align 10h
.text:0000000000006650
.text:0000000000006650 loc_6650:                               ; CODE XREF: vasnprintf+402↑j
.text:0000000000006650                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000006653                 add     rbx, 1
.text:0000000000006657                 jmp     loc_5D0B
.text:0000000000006657 ; ---------------------------------------------------------------------------
.text:000000000000665C                 align 20h
.text:0000000000006660
.text:0000000000006660 loc_6660:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006660                                         ; DATA XREF: .rodata:jpt_63F0↓o
.text:0000000000006660                 mov     [rax], r14b     ; jumptable 00000000000063F0 case 18
.text:0000000000006663                 mov     rbx, r14
.text:0000000000006666                 jmp     loc_6384
.text:0000000000006666 ; ---------------------------------------------------------------------------
.text:000000000000666B                 align 10h
.text:0000000000006670
.text:0000000000006670 loc_6670:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006670                                         ; DATA XREF: .rodata:jpt_63F0↓o
.text:0000000000006670                 mov     [rax], r14d     ; jumptable 00000000000063F0 case 20
.text:0000000000006673                 mov     rbx, r14
.text:0000000000006676                 jmp     loc_6384
.text:0000000000006676 ; ---------------------------------------------------------------------------
.text:000000000000667B                 align 20h
.text:0000000000006680
.text:0000000000006680 loc_6680:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006680                                         ; DATA XREF: .rodata:jpt_63F0↓o
.text:0000000000006680                 mov     [rax], r14w     ; jumptable 00000000000063F0 case 19
.text:0000000000006684                 mov     rbx, r14
.text:0000000000006687                 jmp     loc_6384
.text:0000000000006687 ; ---------------------------------------------------------------------------
.text:000000000000668C                 align 10h
.text:0000000000006690
.text:0000000000006690 loc_6690:                               ; CODE XREF: vasnprintf+B33↑j
.text:0000000000006690                                         ; vasnprintf+B3B↑j
.text:0000000000006690                 mov     rdi, r12        ; size
.text:0000000000006693                 mov     byte ptr [rbp+n], dl
.text:0000000000006699                 call    _malloc
.text:000000000000669E                 test    rax, rax
.text:00000000000066A1                 mov     rcx, rax
.text:00000000000066A4                 movzx   edx, byte ptr [rbp+n]
.text:00000000000066AB                 jz      loc_5A55
.text:00000000000066B1                 test    r14, r14
.text:00000000000066B4                 jz      loc_67F4
.text:00000000000066BA                 test    dl, dl
.text:00000000000066BC                 jz      loc_67F4
.text:00000000000066C2                 mov     rsi, r15        ; src
.text:00000000000066C5                 mov     rdx, r14        ; n
.text:00000000000066C8                 mov     rdi, rax        ; dest
.text:00000000000066CB                 call    _memcpy
.text:00000000000066D0                 mov     r15, rax
.text:00000000000066D3                 jmp     loc_637F
.text:00000000000066D3 ; ---------------------------------------------------------------------------
.text:00000000000066D8                 align 20h
.text:00000000000066E0
.text:00000000000066E0 loc_66E0:                               ; CODE XREF: vasnprintf+BE8↑j
.text:00000000000066E0                                         ; vasnprintf+BF0↑j
.text:00000000000066E0                 mov     r15, r9
.text:00000000000066E3                 jmp     loc_5B94
.text:00000000000066E3 ; ---------------------------------------------------------------------------
.text:00000000000066E8                 align 10h
.text:00000000000066F0
.text:00000000000066F0 loc_66F0:                               ; CODE XREF: vasnprintf+869↑j
.text:00000000000066F0                 sub     rsp, 8
.text:00000000000066F4                 push    [rbp+var_3F0]
.text:00000000000066FA                 jmp     loc_6175
.text:00000000000066FA ; ---------------------------------------------------------------------------
.text:00000000000066FF                 align 20h
.text:0000000000006700
.text:0000000000006700 loc_6700:                               ; CODE XREF: vasnprintf+7DF↑j
.text:0000000000006700                 sub     rsp, 8
.text:0000000000006704                 push    [rbp+var_3F0]
.text:000000000000670A                 sub     rsp, 10h
.text:000000000000670E                 fstp    [rsp+450h+var_450]
.text:0000000000006711                 jmp     loc_623B
.text:0000000000006711 ; ---------------------------------------------------------------------------
.text:0000000000006716                 align 20h
.text:0000000000006720
.text:0000000000006720 loc_6720:                               ; CODE XREF: vasnprintf+5FC↑j
.text:0000000000006720                 mov     rax, [rbp+n]
.text:0000000000006727                 mov     edi, [rbp-424h]
.text:000000000000672D                 movsxd  rbx, ecx
.text:0000000000006730                 add     rbx, r14
.text:0000000000006733                 mov     [rax], edi
.text:0000000000006735                 jmp     loc_6384
.text:0000000000006735 ; ---------------------------------------------------------------------------
.text:000000000000673A                 align 20h
.text:0000000000006740
.text:0000000000006740 loc_6740:                               ; CODE XREF: vasnprintf+609↑j
.text:0000000000006740                 cmp     r15, [rbp+src]
.text:0000000000006747                 jz      short loc_6752
.text:0000000000006749                 test    r15, r15
.text:000000000000674C                 jnz     loc_6809
.text:0000000000006752
.text:0000000000006752 loc_6752:                               ; CODE XREF: vasnprintf+E57↑j
.text:0000000000006752                                         ; vasnprintf+F21↓j
.text:0000000000006752                 mov     rax, [rbp+ptr]
.text:0000000000006759                 test    rax, rax
.text:000000000000675C                 jz      short loc_6766
.text:000000000000675E                 mov     rdi, rax        ; ptr
.text:0000000000006761                 call    _free
.text:0000000000006766
.text:0000000000006766 loc_6766:                               ; CODE XREF: vasnprintf+E6C↑j
.text:0000000000006766                 mov     rax, [rbp+var_408]
.text:000000000000676D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006774                 add     rax, 20h ; ' '
.text:0000000000006778                 cmp     rdi, rax
.text:000000000000677B                 jz      short loc_6782
.text:000000000000677D                 call    _free
.text:0000000000006782
.text:0000000000006782 loc_6782:                               ; CODE XREF: vasnprintf+E8B↑j
.text:0000000000006782                 mov     rax, [rbp+var_410]
.text:0000000000006789                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006790                 add     rax, 10h
.text:0000000000006794                 cmp     rdi, rax
.text:0000000000006797                 jz      short loc_679E
.text:0000000000006799                 call    _free
.text:000000000000679E
.text:000000000000679E loc_679E:                               ; CODE XREF: vasnprintf+EA7↑j
.text:000000000000679E                 mov     rax, [rbp+n]
.text:00000000000067A5                 xor     r15d, r15d
.text:00000000000067A8                 mov     dword ptr [rax], 4Bh ; 'K'
.text:00000000000067AE                 jmp     loc_5ACF
.text:00000000000067AE ; ---------------------------------------------------------------------------
.text:00000000000067B3                 align 8
.text:00000000000067B8
.text:00000000000067B8 loc_67B8:                               ; CODE XREF: vasnprintf+60↑j
.text:00000000000067B8                 xor     r15d, r15d
.text:00000000000067BB                 jmp     loc_5ACF
.text:00000000000067C0 ; ---------------------------------------------------------------------------
.text:00000000000067C0
.text:00000000000067C0 loc_67C0:                               ; CODE XREF: vasnprintf+D34↑j
.text:00000000000067C0                                         ; vasnprintf+D3C↑j
.text:00000000000067C0                 mov     r15, rcx
.text:00000000000067C3                 jmp     loc_5DDB
.text:00000000000067C3 ; ---------------------------------------------------------------------------
.text:00000000000067C8                 align 10h
.text:00000000000067D0
.text:00000000000067D0 loc_67D0:                               ; CODE XREF: vasnprintf+B10↑j
.text:00000000000067D0                 js      loc_5A55
.text:00000000000067D6                 add     r12, r12
.text:00000000000067D9                 cmp     r12, rax
.text:00000000000067DC                 jnb     loc_6416
.text:00000000000067E2
.text:00000000000067E2 loc_67E2:                               ; CODE XREF: vasnprintf+B1A↑j
.text:00000000000067E2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000067E6                 jz      loc_5A55
.text:00000000000067EC                 mov     r12, rax
.text:00000000000067EF                 jmp     loc_6416
.text:00000000000067F4 ; ---------------------------------------------------------------------------
.text:00000000000067F4
.text:00000000000067F4 loc_67F4:                               ; CODE XREF: vasnprintf+DC4↑j
.text:00000000000067F4                                         ; vasnprintf+DCC↑j
.text:00000000000067F4                 mov     r15, rcx
.text:00000000000067F7                 jmp     loc_637F
.text:00000000000067FC ; ---------------------------------------------------------------------------
.text:00000000000067FC
.text:00000000000067FC loc_67FC:                               ; CODE XREF: vasnprintf+75C↑j
.text:00000000000067FC                 mov     rdi, r15        ; ptr
.text:00000000000067FF                 call    _free
.text:0000000000006804                 jmp     loc_6052
.text:0000000000006809 ; ---------------------------------------------------------------------------
.text:0000000000006809
.text:0000000000006809 loc_6809:                               ; CODE XREF: vasnprintf+E5C↑j
.text:0000000000006809                 mov     rdi, r15        ; ptr
.text:000000000000680C                 call    _free
.text:0000000000006811                 jmp     loc_6752
.text:0000000000006816 ; ---------------------------------------------------------------------------
.text:0000000000006816
.text:0000000000006816 def_5E4B:                               ; CODE XREF: vasnprintf+2DD↑j
.text:0000000000006816                                         ; vasnprintf+43E↑j ...
.text:0000000000006816                 call    _abort          ; jumptable 0000000000005E4B default case, case 0
.text:0000000000006816                                         ; jumptable 00000000000063F0 default case
.text:0000000000006816 ; ---------------------------------------------------------------------------
.text:000000000000681B                 align 20h
.text:0000000000006820
.text:0000000000006820 loc_6820:                               ; CODE XREF: vasnprintf+73↑j
.text:0000000000006820                 mov     rax, [rbp+var_408]
.text:0000000000006827                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000682E                 add     rax, 20h ; ' '
.text:0000000000006832                 cmp     rdi, rax
.text:0000000000006835                 jz      short loc_683C
.text:0000000000006837                 call    _free
.text:000000000000683C
.text:000000000000683C loc_683C:                               ; CODE XREF: vasnprintf+F45↑j
.text:000000000000683C                 mov     rax, [rbp+var_410]
.text:0000000000006843                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000684A                 add     rax, 10h
.text:000000000000684E                 cmp     rdi, rax
.text:0000000000006851                 jz      short loc_6858
.text:0000000000006853                 call    _free
.text:0000000000006858
.text:0000000000006858 loc_6858:                               ; CODE XREF: vasnprintf+F61↑j
.text:0000000000006858                 call    ___errno_location
.text:000000000000685D                 xor     r15d, r15d
.text:0000000000006860                 mov     dword ptr [rax], 16h
.text:0000000000006866                 jmp     loc_5ACF
.text:000000000000686B ; ---------------------------------------------------------------------------
.text:000000000000686B
.text:000000000000686B loc_686B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:000000000000686B                 mov     rbx, r14
.text:000000000000686E                 xor     eax, eax
.text:0000000000006870                 add     rbx, 1
.text:0000000000006874                 jb      loc_6980
.text:000000000000687A                 cmp     r12, rbx
.text:000000000000687D                 jnb     short loc_68CC
.text:000000000000687F                 test    r12, r12
.text:0000000000006882                 jnz     loc_69B9
.text:0000000000006888                 cmp     rbx, 0Ch
.text:000000000000688C                 ja      loc_699E
.text:0000000000006892                 mov     r12d, 0Ch
.text:0000000000006898
.text:0000000000006898 loc_6898:                               ; CODE XREF: vasnprintf+10C4↓j
.text:0000000000006898                                         ; vasnprintf+10D5↓j
.text:0000000000006898                 cmp     r15, [rbp+src]
.text:000000000000689F                 setz    r13b
.text:00000000000068A3                 test    r15, r15
.text:00000000000068A6                 jz      loc_694C
.text:00000000000068AC                 test    r13b, r13b
.text:00000000000068AF                 jnz     loc_694C
.text:00000000000068B5                 mov     rsi, r12        ; size
.text:00000000000068B8                 mov     rdi, r15        ; ptr
.text:00000000000068BB                 call    _realloc
.text:00000000000068C0                 test    rax, rax
.text:00000000000068C3                 jz      loc_653B
.text:00000000000068C9                 mov     r15, rax
.text:00000000000068CC
.text:00000000000068CC loc_68CC:                               ; CODE XREF: vasnprintf+F8D↑j
.text:00000000000068CC                                         ; vasnprintf+108B↓j ...
.text:00000000000068CC                 cmp     r15, [rbp+src]
.text:00000000000068D3                 mov     byte ptr [r15+r14], 0
.text:00000000000068D8                 jz      short loc_68F1
.text:00000000000068DA                 cmp     r12, rbx
.text:00000000000068DD                 jbe     short loc_68F1
.text:00000000000068DF                 mov     rdi, r15        ; ptr
.text:00000000000068E2                 mov     rsi, rbx        ; size
.text:00000000000068E5                 call    _realloc
.text:00000000000068EA                 test    rax, rax
.text:00000000000068ED                 cmovnz  r15, rax
.text:00000000000068F1
.text:00000000000068F1 loc_68F1:                               ; CODE XREF: vasnprintf+FE8↑j
.text:00000000000068F1                                         ; vasnprintf+FED↑j
.text:00000000000068F1                 mov     rax, [rbp+ptr]
.text:00000000000068F8                 test    rax, rax
.text:00000000000068FB                 jz      short loc_6905
.text:00000000000068FD                 mov     rdi, rax        ; ptr
.text:0000000000006900                 call    _free
.text:0000000000006905
.text:0000000000006905 loc_6905:                               ; CODE XREF: vasnprintf+100B↑j
.text:0000000000006905                 mov     rax, [rbp+var_408]
.text:000000000000690C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006913                 add     rax, 20h ; ' '
.text:0000000000006917                 cmp     rdi, rax
.text:000000000000691A                 jz      short loc_6921
.text:000000000000691C                 call    _free
.text:0000000000006921
.text:0000000000006921 loc_6921:                               ; CODE XREF: vasnprintf+102A↑j
.text:0000000000006921                 mov     rax, [rbp+var_410]
.text:0000000000006928                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000692F                 add     rax, 10h
.text:0000000000006933                 cmp     rdi, rax
.text:0000000000006936                 jz      short loc_693D
.text:0000000000006938                 call    _free
.text:000000000000693D
.text:000000000000693D loc_693D:                               ; CODE XREF: vasnprintf+1046↑j
.text:000000000000693D                 mov     rax, [rbp+var_418]
.text:0000000000006944                 mov     [rax], r14
.text:0000000000006947                 jmp     loc_5ACF
.text:000000000000694C ; ---------------------------------------------------------------------------
.text:000000000000694C
.text:000000000000694C loc_694C:                               ; CODE XREF: vasnprintf+FB6↑j
.text:000000000000694C                                         ; vasnprintf+FBF↑j
.text:000000000000694C                 mov     rdi, r12        ; size
.text:000000000000694F                 call    _malloc
.text:0000000000006954                 test    rax, rax
.text:0000000000006957                 mov     rcx, rax
.text:000000000000695A                 jz      loc_5A55
.text:0000000000006960                 test    r14, r14
.text:0000000000006963                 jz      short loc_69D0
.text:0000000000006965                 test    r13b, r13b
.text:0000000000006968                 jz      short loc_69D0
.text:000000000000696A                 mov     rsi, r15        ; src
.text:000000000000696D                 mov     rdx, r14        ; n
.text:0000000000006970                 mov     rdi, rax        ; dest
.text:0000000000006973                 call    _memcpy
.text:0000000000006978                 mov     r15, rax
.text:000000000000697B                 jmp     loc_68CC
.text:0000000000006980 ; ---------------------------------------------------------------------------
.text:0000000000006980
.text:0000000000006980 loc_6980:                               ; CODE XREF: vasnprintf+F84↑j
.text:0000000000006980                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006984                 mov     eax, 1
.text:0000000000006989                 jz      loc_68CC
.text:000000000000698F                 test    r12, r12
.text:0000000000006992                 jz      loc_5A55
.text:0000000000006998                 js      loc_5A55
.text:000000000000699E
.text:000000000000699E loc_699E:                               ; CODE XREF: vasnprintf+F9C↑j
.text:000000000000699E                                         ; vasnprintf+10DB↓j
.text:000000000000699E                 test    rax, rax
.text:00000000000069A1                 jnz     loc_5A55
.text:00000000000069A7                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000069AB                 jz      loc_5A55
.text:00000000000069B1                 mov     r12, rbx
.text:00000000000069B4                 jmp     loc_6898
.text:00000000000069B9 ; ---------------------------------------------------------------------------
.text:00000000000069B9
.text:00000000000069B9 loc_69B9:                               ; CODE XREF: vasnprintf+F92↑j
.text:00000000000069B9                 js      loc_5A55
.text:00000000000069BF                 add     r12, r12
.text:00000000000069C2                 cmp     r12, rbx
.text:00000000000069C5                 jnb     loc_6898
.text:00000000000069CB                 jmp     short loc_699E
.text:00000000000069CB ; ---------------------------------------------------------------------------
.text:00000000000069CD                 align 10h
.text:00000000000069D0
.text:00000000000069D0 loc_69D0:                               ; CODE XREF: vasnprintf+1073↑j
.text:00000000000069D0                                         ; vasnprintf+1078↑j
.text:00000000000069D0                 mov     r15, rcx
.text:00000000000069D3                 jmp     loc_68CC
.text:00000000000069D8 ; ---------------------------------------------------------------------------
.text:00000000000069D8
.text:00000000000069D8 loc_69D8:                               ; CODE XREF: vasnprintf+627↑j
.text:00000000000069D8                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000069DC                 jz      loc_5E00
.text:00000000000069E2                 jmp     loc_5A61
.text:00000000000069E7 ; ---------------------------------------------------------------------------
.text:00000000000069E7
.text:00000000000069E7 loc_69E7:                               ; CODE XREF: vasnprintf+1EF↑j
.text:00000000000069E7                 call    ___stack_chk_fail
.text:00000000000069EC ; ---------------------------------------------------------------------------
.text:00000000000069EC
.text:00000000000069EC loc_69EC:                               ; CODE XREF: vasnprintf+495↑j
.text:00000000000069EC                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000069F0                 mov     edx, 1
.text:00000000000069F5                 jz      loc_5DDB
.text:00000000000069FB                 test    r12, r12
.text:00000000000069FE                 jz      loc_5A55
.text:0000000000006A04                 jns     loc_65D0
.text:0000000000006A0A                 jmp     loc_5A55
.text:0000000000006A0A ; } // starts at 58F0
.text:0000000000006A0A vasnprintf      endp
.text:0000000000006A0A
.text:0000000000006A0A ; ---------------------------------------------------------------------------
.text:0000000000006A0F                 align 10h
.text:0000000000006A10
.text:0000000000006A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A10
.text:0000000000006A10
.text:0000000000006A10                 public printf_fetchargs
.text:0000000000006A10 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:0000000000006A10 ; __unwind {
.text:0000000000006A10                 cmp     qword ptr [rsi], 0
.text:0000000000006A14                 mov     rax, [rsi+8]
.text:0000000000006A18                 jz      short loc_6A7D
.text:0000000000006A1A                 lea     r8, jpt_6A46
.text:0000000000006A21                 lea     r10, wide_null_string_2696
.text:0000000000006A28                 lea     r9, aNull       ; "(NULL)"
.text:0000000000006A2F                 xor     ecx, ecx
.text:0000000000006A31                 nop     dword ptr [rax+00000000h]
.text:0000000000006A38
.text:0000000000006A38 loc_6A38:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:0000000000006A38                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:0000000000006A3B                 ja      short def_6A46  ; jumptable 0000000000006A46 default case, case 0
.text:0000000000006A3D                 mov     edx, [rax]
.text:0000000000006A3F                 movsxd  rdx, ds:(jpt_6A46 - 8CA0h)[r8+rdx*4]
.text:0000000000006A43                 add     rdx, r8
.text:0000000000006A46                 jmp     rdx             ; switch jump
.text:0000000000006A46 ; ---------------------------------------------------------------------------
.text:0000000000006A48                 align 10h
.text:0000000000006A50
.text:0000000000006A50 loc_6A50:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006A50                                         ; DATA XREF: .rodata:jpt_6A46↓o
.text:0000000000006A50                 mov     rdx, [rdi+8]    ; jumptable 0000000000006A46 case 12
.text:0000000000006A54                 add     rdx, 0Fh
.text:0000000000006A58                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:0000000000006A5C                 lea     r11, [rdx+10h]
.text:0000000000006A60                 mov     [rdi+8], r11
.text:0000000000006A64                 fld     tbyte ptr [rdx]
.text:0000000000006A66                 fstp    tbyte ptr [rax+10h]
.text:0000000000006A69                 nop     dword ptr [rax+00000000h]
.text:0000000000006A70
.text:0000000000006A70 loc_6A70:                               ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000006A70                                         ; printf_fetchargs+BA↓j ...
.text:0000000000006A70                 add     rcx, 1
.text:0000000000006A74                 add     rax, 20h ; ' '
.text:0000000000006A78                 cmp     [rsi], rcx
.text:0000000000006A7B                 ja      short loc_6A38
.text:0000000000006A7D
.text:0000000000006A7D loc_6A7D:                               ; CODE XREF: printf_fetchargs+8↑j
.text:0000000000006A7D                 xor     eax, eax
.text:0000000000006A7F                 retn
.text:0000000000006A80 ; ---------------------------------------------------------------------------
.text:0000000000006A80
.text:0000000000006A80 def_6A46:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000006A80                                         ; printf_fetchargs+36↑j
.text:0000000000006A80                                         ; DATA XREF: ...
.text:0000000000006A80                 mov     eax, 0FFFFFFFFh ; jumptable 0000000000006A46 default case, case 0
.text:0000000000006A85                 retn
.text:0000000000006A86 ; ---------------------------------------------------------------------------
.text:0000000000006A86
.text:0000000000006A86 loc_6A86:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006A86                                         ; DATA XREF: .rodata:jpt_6A46↓o
.text:0000000000006A86                 mov     r11d, [rdi]     ; jumptable 0000000000006A46 cases 7-10,17-22
.text:0000000000006A89                 cmp     r11d, 2Fh ; '/'
.text:0000000000006A8D                 ja      loc_6BCA
.text:0000000000006A93                 mov     edx, r11d
.text:0000000000006A96                 add     rdx, [rdi+10h]
.text:0000000000006A9A                 add     r11d, 8
.text:0000000000006A9E                 mov     [rdi], r11d
.text:0000000000006AA1
.text:0000000000006AA1 loc_6AA1:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:0000000000006AA1                 mov     rdx, [rdx]
.text:0000000000006AA4                 mov     [rax+10h], rdx
.text:0000000000006AA8                 jmp     short loc_6A70
.text:0000000000006AAA ; ---------------------------------------------------------------------------
.text:0000000000006AAA
.text:0000000000006AAA loc_6AAA:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006AAA                                         ; DATA XREF: .rodata:jpt_6A46↓o
.text:0000000000006AAA                 mov     r11d, [rdi]     ; jumptable 0000000000006A46 cases 5,6,13,14
.text:0000000000006AAD                 cmp     r11d, 2Fh ; '/'
.text:0000000000006AB1                 ja      loc_6BEC
.text:0000000000006AB7                 mov     edx, r11d
.text:0000000000006ABA                 add     rdx, [rdi+10h]
.text:0000000000006ABE                 add     r11d, 8
.text:0000000000006AC2                 mov     [rdi], r11d
.text:0000000000006AC5
.text:0000000000006AC5 loc_6AC5:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:0000000000006AC5                 mov     edx, [rdx]
.text:0000000000006AC7                 mov     [rax+10h], edx
.text:0000000000006ACA                 jmp     short loc_6A70
.text:0000000000006ACC ; ---------------------------------------------------------------------------
.text:0000000000006ACC
.text:0000000000006ACC loc_6ACC:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006ACC                                         ; DATA XREF: .rodata:jpt_6A46↓o
.text:0000000000006ACC                 mov     r11d, [rdi]     ; jumptable 0000000000006A46 cases 1,2
.text:0000000000006ACF                 cmp     r11d, 2Fh ; '/'
.text:0000000000006AD3                 ja      loc_6BDB
.text:0000000000006AD9                 mov     edx, r11d
.text:0000000000006ADC                 add     rdx, [rdi+10h]
.text:0000000000006AE0                 add     r11d, 8
.text:0000000000006AE4                 mov     [rdi], r11d
.text:0000000000006AE7
.text:0000000000006AE7 loc_6AE7:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:0000000000006AE7                 mov     edx, [rdx]
.text:0000000000006AE9                 mov     [rax+10h], dl
.text:0000000000006AEC                 jmp     short loc_6A70
.text:0000000000006AEE ; ---------------------------------------------------------------------------
.text:0000000000006AEE
.text:0000000000006AEE loc_6AEE:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006AEE                                         ; DATA XREF: .rodata:jpt_6A46↓o
.text:0000000000006AEE                 mov     r11d, [rdi]     ; jumptable 0000000000006A46 cases 3,4
.text:0000000000006AF1                 cmp     r11d, 2Fh ; '/'
.text:0000000000006AF5                 ja      loc_6B9A
.text:0000000000006AFB                 mov     edx, r11d
.text:0000000000006AFE                 add     rdx, [rdi+10h]
.text:0000000000006B02                 add     r11d, 8
.text:0000000000006B06                 mov     [rdi], r11d
.text:0000000000006B09
.text:0000000000006B09 loc_6B09:                               ; CODE XREF: printf_fetchargs+196↓j
.text:0000000000006B09                 mov     edx, [rdx]
.text:0000000000006B0B                 mov     [rax+10h], dx
.text:0000000000006B0F                 jmp     loc_6A70
.text:0000000000006B14 ; ---------------------------------------------------------------------------
.text:0000000000006B14
.text:0000000000006B14 loc_6B14:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006B14                                         ; DATA XREF: .rodata:jpt_6A46↓o
.text:0000000000006B14                 mov     r11d, [rdi]     ; jumptable 0000000000006A46 case 15
.text:0000000000006B17                 cmp     r11d, 2Fh ; '/'
.text:0000000000006B1B                 ja      loc_6BAB
.text:0000000000006B21                 mov     edx, r11d
.text:0000000000006B24                 add     rdx, [rdi+10h]
.text:0000000000006B28                 add     r11d, 8
.text:0000000000006B2C                 mov     [rdi], r11d
.text:0000000000006B2F
.text:0000000000006B2F loc_6B2F:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:0000000000006B2F                 mov     rdx, [rdx]
.text:0000000000006B32                 test    rdx, rdx
.text:0000000000006B35                 cmovz   rdx, r9
.text:0000000000006B39                 mov     [rax+10h], rdx
.text:0000000000006B3D                 jmp     loc_6A70
.text:0000000000006B42 ; ---------------------------------------------------------------------------
.text:0000000000006B42
.text:0000000000006B42 loc_6B42:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006B42                                         ; DATA XREF: .rodata:jpt_6A46↓o
.text:0000000000006B42                 mov     r11d, [rdi+4]   ; jumptable 0000000000006A46 case 11
.text:0000000000006B46                 cmp     r11d, 0AFh
.text:0000000000006B4D                 ja      loc_6BFD
.text:0000000000006B53                 mov     edx, r11d
.text:0000000000006B56                 add     rdx, [rdi+10h]
.text:0000000000006B5A                 add     r11d, 10h
.text:0000000000006B5E                 mov     [rdi+4], r11d
.text:0000000000006B62
.text:0000000000006B62 loc_6B62:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:0000000000006B62                 movsd   xmm0, qword ptr [rdx]
.text:0000000000006B66                 movsd   qword ptr [rax+10h], xmm0
.text:0000000000006B6B                 jmp     loc_6A70
.text:0000000000006B70 ; ---------------------------------------------------------------------------
.text:0000000000006B70
.text:0000000000006B70 loc_6B70:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006B70                                         ; DATA XREF: .rodata:jpt_6A46↓o
.text:0000000000006B70                 mov     r11d, [rdi]     ; jumptable 0000000000006A46 case 16
.text:0000000000006B73                 cmp     r11d, 2Fh ; '/'
.text:0000000000006B77                 ja      short loc_6BBC
.text:0000000000006B79                 mov     edx, r11d
.text:0000000000006B7C                 add     rdx, [rdi+10h]
.text:0000000000006B80                 add     r11d, 8
.text:0000000000006B84                 mov     [rdi], r11d
.text:0000000000006B87
.text:0000000000006B87 loc_6B87:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000006B87                 mov     rdx, [rdx]
.text:0000000000006B8A                 test    rdx, rdx
.text:0000000000006B8D                 cmovz   rdx, r10
.text:0000000000006B91                 mov     [rax+10h], rdx
.text:0000000000006B95                 jmp     loc_6A70
.text:0000000000006B9A ; ---------------------------------------------------------------------------
.text:0000000000006B9A
.text:0000000000006B9A loc_6B9A:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:0000000000006B9A                 mov     rdx, [rdi+8]
.text:0000000000006B9E                 lea     r11, [rdx+8]
.text:0000000000006BA2                 mov     [rdi+8], r11
.text:0000000000006BA6                 jmp     loc_6B09
.text:0000000000006BAB ; ---------------------------------------------------------------------------
.text:0000000000006BAB
.text:0000000000006BAB loc_6BAB:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:0000000000006BAB                 mov     rdx, [rdi+8]
.text:0000000000006BAF                 lea     r11, [rdx+8]
.text:0000000000006BB3                 mov     [rdi+8], r11
.text:0000000000006BB7                 jmp     loc_6B2F
.text:0000000000006BBC ; ---------------------------------------------------------------------------
.text:0000000000006BBC
.text:0000000000006BBC loc_6BBC:                               ; CODE XREF: printf_fetchargs+167↑j
.text:0000000000006BBC                 mov     rdx, [rdi+8]
.text:0000000000006BC0                 lea     r11, [rdx+8]
.text:0000000000006BC4                 mov     [rdi+8], r11
.text:0000000000006BC8                 jmp     short loc_6B87
.text:0000000000006BCA ; ---------------------------------------------------------------------------
.text:0000000000006BCA
.text:0000000000006BCA loc_6BCA:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:0000000000006BCA                 mov     rdx, [rdi+8]
.text:0000000000006BCE                 lea     r11, [rdx+8]
.text:0000000000006BD2                 mov     [rdi+8], r11
.text:0000000000006BD6                 jmp     loc_6AA1
.text:0000000000006BDB ; ---------------------------------------------------------------------------
.text:0000000000006BDB
.text:0000000000006BDB loc_6BDB:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:0000000000006BDB                 mov     rdx, [rdi+8]
.text:0000000000006BDF                 lea     r11, [rdx+8]
.text:0000000000006BE3                 mov     [rdi+8], r11
.text:0000000000006BE7                 jmp     loc_6AE7
.text:0000000000006BEC ; ---------------------------------------------------------------------------
.text:0000000000006BEC
.text:0000000000006BEC loc_6BEC:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:0000000000006BEC                 mov     rdx, [rdi+8]
.text:0000000000006BF0                 lea     r11, [rdx+8]
.text:0000000000006BF4                 mov     [rdi+8], r11
.text:0000000000006BF8                 jmp     loc_6AC5
.text:0000000000006BFD ; ---------------------------------------------------------------------------
.text:0000000000006BFD
.text:0000000000006BFD loc_6BFD:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:0000000000006BFD                 mov     rdx, [rdi+8]
.text:0000000000006C01                 lea     r11, [rdx+8]
.text:0000000000006C05                 mov     [rdi+8], r11
.text:0000000000006C09                 jmp     loc_6B62
.text:0000000000006C09 ; } // starts at 6A10
.text:0000000000006C09 printf_fetchargs endp
.text:0000000000006C09
.text:0000000000006C09 ; ---------------------------------------------------------------------------
.text:0000000000006C0E                 align 10h
.text:0000000000006C10 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:0000000000006C10 ; Format      : ELF64 for x86-64 (Relocatable)
.text:0000000000006C10 ;
.text:0000000000006C10 ; Source File : 'printf-parse.c'
.text:0000000000006C10
.text:0000000000006C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C10
.text:0000000000006C10 ; Attributes: info_from_lumina
.text:0000000000006C10
.text:0000000000006C10 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:0000000000006C10                 public printf_parse
.text:0000000000006C10 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:0000000000006C10
.text:0000000000006C10 src             = qword ptr -80h
.text:0000000000006C10 var_78          = qword ptr -78h
.text:0000000000006C10 var_70          = qword ptr -70h
.text:0000000000006C10 var_68          = qword ptr -68h
.text:0000000000006C10 var_60          = qword ptr -60h
.text:0000000000006C10 var_58          = qword ptr -58h
.text:0000000000006C10 var_50          = qword ptr -50h
.text:0000000000006C10 var_48          = qword ptr -48h
.text:0000000000006C10 var_40          = qword ptr -40h
.text:0000000000006C10
.text:0000000000006C10 ; __unwind {
.text:0000000000006C10                 push    r15
.text:0000000000006C12                 push    r14
.text:0000000000006C14                 lea     rcx, [rsi+20h]
.text:0000000000006C18                 push    r13
.text:0000000000006C1A                 push    r12
.text:0000000000006C1C                 lea     rax, [rdx+10h]
.text:0000000000006C20                 push    rbp
.text:0000000000006C21                 push    rbx
.text:0000000000006C22                 mov     r14, rsi
.text:0000000000006C25                 mov     r15, rdx
.text:0000000000006C28                 xor     ebx, ebx
.text:0000000000006C2A                 mov     r9d, 7
.text:0000000000006C30                 sub     rsp, 58h
.text:0000000000006C34                 mov     r10d, 7
.text:0000000000006C3A                 mov     qword ptr [rsi], 0
.text:0000000000006C41                 mov     [rsi+8], rcx
.text:0000000000006C45                 mov     [rsp+88h+var_60], rcx
.text:0000000000006C4A                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000006C51                 mov     qword ptr [rdx], 0
.text:0000000000006C58                 mov     [rsp+88h+src], rax
.text:0000000000006C5D                 mov     [rdx+8], rax
.text:0000000000006C61                 mov     [rsp+88h+var_70], 0
.text:0000000000006C6A                 mov     [rsp+88h+var_78], 0
.text:0000000000006C73                 mov     [rsp+88h+var_68], 0
.text:0000000000006C7C                 jmp     short loc_6C8B
.text:0000000000006C7C ; ---------------------------------------------------------------------------
.text:0000000000006C7E                 align 20h
.text:0000000000006C80
.text:0000000000006C80 loc_6C80:                               ; CODE XREF: printf_parse+80↓j
.text:0000000000006C80                 cmp     al, 25h ; '%'
.text:0000000000006C82                 lea     rbp, [rdi+1]
.text:0000000000006C86                 jz      short loc_6CC8
.text:0000000000006C88
.text:0000000000006C88 loc_6C88:                               ; CODE XREF: printf_parse+35B↓j
.text:0000000000006C88                                         ; printf_parse+364↓j
.text:0000000000006C88                 mov     rdi, rbp
.text:0000000000006C8B
.text:0000000000006C8B loc_6C8B:                               ; CODE XREF: printf_parse+6C↑j
.text:0000000000006C8B                 movzx   eax, byte ptr [rdi]
.text:0000000000006C8E                 test    al, al
.text:0000000000006C90                 jnz     short loc_6C80
.text:0000000000006C92                 lea     rax, [rbx+rbx*4]
.text:0000000000006C96                 lea     rax, [rbx+rax*2]
.text:0000000000006C9A                 mov     [rcx+rax*8], rdi
.text:0000000000006C9E                 mov     rax, [rsp+88h+var_78]
.text:0000000000006CA3                 mov     [r14+10h], rax
.text:0000000000006CA7                 mov     rax, [rsp+88h+var_70]
.text:0000000000006CAC                 mov     [r14+18h], rax
.text:0000000000006CB0                 xor     eax, eax
.text:0000000000006CB2
.text:0000000000006CB2 loc_6CB2:                               ; CODE XREF: printf_parse+87E↓j
.text:0000000000006CB2                                         ; printf_parse+B1C↓j
.text:0000000000006CB2                 add     rsp, 58h
.text:0000000000006CB6                 pop     rbx
.text:0000000000006CB7                 pop     rbp
.text:0000000000006CB8                 pop     r12
.text:0000000000006CBA                 pop     r13
.text:0000000000006CBC                 pop     r14
.text:0000000000006CBE                 pop     r15
.text:0000000000006CC0                 retn
.text:0000000000006CC0 ; ---------------------------------------------------------------------------
.text:0000000000006CC1                 align 8
.text:0000000000006CC8
.text:0000000000006CC8 loc_6CC8:                               ; CODE XREF: printf_parse+76↑j
.text:0000000000006CC8                 lea     rax, [rbx+rbx*4]
.text:0000000000006CCC                 mov     r13, r8
.text:0000000000006CCF                 lea     rax, [rbx+rax*2]
.text:0000000000006CD3                 lea     r12, [rcx+rax*8]
.text:0000000000006CD7                 mov     [r12], rdi
.text:0000000000006CDB                 mov     dword ptr [r12+10h], 0
.text:0000000000006CE4                 mov     qword ptr [r12+18h], 0
.text:0000000000006CED                 mov     qword ptr [r12+20h], 0
.text:0000000000006CF6                 mov     [r12+28h], r8
.text:0000000000006CFB                 mov     qword ptr [r12+30h], 0
.text:0000000000006D04                 mov     qword ptr [r12+38h], 0
.text:0000000000006D0D                 mov     [r12+40h], r8
.text:0000000000006D12                 mov     [r12+50h], r8
.text:0000000000006D17                 movzx   ebx, byte ptr [rdi+1]
.text:0000000000006D1B                 lea     eax, [rbx-30h]
.text:0000000000006D1E                 cmp     al, 9
.text:0000000000006D20                 ja      short loc_6D5E
.text:0000000000006D22                 jmp     loc_715A
.text:0000000000006D22 ; ---------------------------------------------------------------------------
.text:0000000000006D27                 align 10h
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: printf_parse+158↓j
.text:0000000000006D30                 cmp     bl, 2Dh ; '-'
.text:0000000000006D33                 jz      short loc_6D78
.text:0000000000006D35                 cmp     bl, 2Bh ; '+'
.text:0000000000006D38                 jz      short loc_6D80
.text:0000000000006D3A                 cmp     bl, 20h ; ' '
.text:0000000000006D3D                 jz      short loc_6D90
.text:0000000000006D3F                 cmp     bl, 23h ; '#'
.text:0000000000006D42                 jz      short loc_6DA0
.text:0000000000006D44                 cmp     bl, 30h ; '0'
.text:0000000000006D47                 jz      short loc_6DB0
.text:0000000000006D49                 cmp     bl, 49h ; 'I'
.text:0000000000006D4C                 jnz     short loc_6DC0
.text:0000000000006D4E                 or      dword ptr [r12+10h], 40h
.text:0000000000006D54                 nop     dword ptr [rax+00h]
.text:0000000000006D58
.text:0000000000006D58 loc_6D58:                               ; CODE XREF: printf_parse+160↓j
.text:0000000000006D58                                         ; printf_parse+16E↓j ...
.text:0000000000006D58                 movzx   ebx, byte ptr [rax]
.text:0000000000006D5B                 mov     rbp, rax
.text:0000000000006D5E
.text:0000000000006D5E loc_6D5E:                               ; CODE XREF: printf_parse+110↑j
.text:0000000000006D5E                                         ; printf_parse+565↓j ...
.text:0000000000006D5E                 lea     rax, [rbp+1]
.text:0000000000006D62                 cmp     bl, 27h ; '''
.text:0000000000006D65                 mov     rdx, rax
.text:0000000000006D68                 jnz     short loc_6D30
.text:0000000000006D6A                 or      dword ptr [r12+10h], 1
.text:0000000000006D70                 jmp     short loc_6D58
.text:0000000000006D70 ; ---------------------------------------------------------------------------
.text:0000000000006D72                 align 8
.text:0000000000006D78
.text:0000000000006D78 loc_6D78:                               ; CODE XREF: printf_parse+123↑j
.text:0000000000006D78                 or      dword ptr [r12+10h], 2
.text:0000000000006D7E                 jmp     short loc_6D58
.text:0000000000006D80 ; ---------------------------------------------------------------------------
.text:0000000000006D80
.text:0000000000006D80 loc_6D80:                               ; CODE XREF: printf_parse+128↑j
.text:0000000000006D80                 or      dword ptr [r12+10h], 4
.text:0000000000006D86                 jmp     short loc_6D58
.text:0000000000006D86 ; ---------------------------------------------------------------------------
.text:0000000000006D88                 align 10h
.text:0000000000006D90
.text:0000000000006D90 loc_6D90:                               ; CODE XREF: printf_parse+12D↑j
.text:0000000000006D90                 or      dword ptr [r12+10h], 8
.text:0000000000006D96                 jmp     short loc_6D58
.text:0000000000006D96 ; ---------------------------------------------------------------------------
.text:0000000000006D98                 align 20h
.text:0000000000006DA0
.text:0000000000006DA0 loc_6DA0:                               ; CODE XREF: printf_parse+132↑j
.text:0000000000006DA0                 or      dword ptr [r12+10h], 10h
.text:0000000000006DA6                 jmp     short loc_6D58
.text:0000000000006DA6 ; ---------------------------------------------------------------------------
.text:0000000000006DA8                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 loc_6DB0:                               ; CODE XREF: printf_parse+137↑j
.text:0000000000006DB0                 or      dword ptr [r12+10h], 20h
.text:0000000000006DB6                 jmp     short loc_6D58
.text:0000000000006DB6 ; ---------------------------------------------------------------------------
.text:0000000000006DB8                 align 20h
.text:0000000000006DC0
.text:0000000000006DC0 loc_6DC0:                               ; CODE XREF: printf_parse+13C↑j
.text:0000000000006DC0                 cmp     bl, 2Ah ; '*'
.text:0000000000006DC3                 jz      loc_6F79
.text:0000000000006DC9                 lea     ecx, [rbx-30h]
.text:0000000000006DCC                 cmp     cl, 9
.text:0000000000006DCF                 jbe     loc_71E7
.text:0000000000006DD5
.text:0000000000006DD5 loc_6DD5:                               ; CODE XREF: printf_parse+629↓j
.text:0000000000006DD5                                         ; printf_parse+96C↓j
.text:0000000000006DD5                 cmp     bl, 2Eh ; '.'
.text:0000000000006DD8                 jz      loc_70AF
.text:0000000000006DDE
.text:0000000000006DDE loc_6DDE:                               ; CODE XREF: printf_parse+499↓j
.text:0000000000006DDE                                         ; printf_parse+545↓j ...
.text:0000000000006DDE                 xor     eax, eax
.text:0000000000006DE0                 mov     esi, 1
.text:0000000000006DE5                 jmp     short loc_6E17
.text:0000000000006DE5 ; ---------------------------------------------------------------------------
.text:0000000000006DE7                 align 10h
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: printf_parse+20E↓j
.text:0000000000006DF0                 cmp     bl, 4Ch ; 'L'
.text:0000000000006DF3                 jz      short loc_6E30
.text:0000000000006DF5                 cmp     bl, 6Ch ; 'l'
.text:0000000000006DF8                 jz      short loc_6E10
.text:0000000000006DFA                 cmp     bl, 6Ah ; 'j'
.text:0000000000006DFD                 jz      short loc_6E10
.text:0000000000006DFF                 mov     edx, ebx
.text:0000000000006E01                 and     edx, 0FFFFFFDFh
.text:0000000000006E04                 cmp     dl, 5Ah ; 'Z'
.text:0000000000006E07                 jz      short loc_6E10
.text:0000000000006E09                 cmp     bl, 74h ; 't'
.text:0000000000006E0C                 jnz     short loc_6E38
.text:0000000000006E0E                 xchg    ax, ax
.text:0000000000006E10
.text:0000000000006E10 loc_6E10:                               ; CODE XREF: printf_parse+1E8↑j
.text:0000000000006E10                                         ; printf_parse+1ED↑j ...
.text:0000000000006E10                 add     eax, 8
.text:0000000000006E13
.text:0000000000006E13 loc_6E13:                               ; CODE XREF: printf_parse+21B↓j
.text:0000000000006E13                                         ; printf_parse+223↓j
.text:0000000000006E13                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000006E17
.text:0000000000006E17 loc_6E17:                               ; CODE XREF: printf_parse+1D5↑j
.text:0000000000006E17                 add     rbp, 1
.text:0000000000006E1B                 cmp     bl, 68h ; 'h'
.text:0000000000006E1E                 jnz     short loc_6DF0
.text:0000000000006E20                 mov     ecx, eax
.text:0000000000006E22                 mov     edx, esi
.text:0000000000006E24                 and     ecx, 1
.text:0000000000006E27                 shl     edx, cl
.text:0000000000006E29                 or      eax, edx
.text:0000000000006E2B                 jmp     short loc_6E13
.text:0000000000006E2B ; ---------------------------------------------------------------------------
.text:0000000000006E2D                 align 10h
.text:0000000000006E30
.text:0000000000006E30 loc_6E30:                               ; CODE XREF: printf_parse+1E3↑j
.text:0000000000006E30                 or      eax, 4
.text:0000000000006E33                 jmp     short loc_6E13
.text:0000000000006E33 ; ---------------------------------------------------------------------------
.text:0000000000006E35                 align 8
.text:0000000000006E38
.text:0000000000006E38 loc_6E38:                               ; CODE XREF: printf_parse+1FC↑j
.text:0000000000006E38                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:0000000000006E3B                 cmp     dl, 53h
.text:0000000000006E3E                 ja      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000006E44                 lea     rcx, jpt_6E55
.text:0000000000006E4B                 movzx   edx, dl
.text:0000000000006E4E                 movsxd  rdx, ds:(jpt_6E55 - 8D1Ch)[rcx+rdx*4]
.text:0000000000006E52                 add     rdx, rcx
.text:0000000000006E55                 jmp     rdx             ; switch jump
.text:0000000000006E57 ; ---------------------------------------------------------------------------
.text:0000000000006E57
.text:0000000000006E57 loc_6E57:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000006E57                                         ; DATA XREF: .rodata:jpt_6E55↓o
.text:0000000000006E57                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:0000000000006E5D                 mov     ebx, 73h ; 's'
.text:0000000000006E62                 nop     word ptr [rax+rax+00h]
.text:0000000000006E68
.text:0000000000006E68 loc_6E68:                               ; CODE XREF: printf_parse+705↓j
.text:0000000000006E68                                         ; printf_parse+70D↓j ...
.text:0000000000006E68                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E6C                 jz      loc_7527
.text:0000000000006E72                 mov     [r12+50h], r13
.text:0000000000006E77
.text:0000000000006E77 loc_6E77:                               ; CODE XREF: printf_parse+939↓j
.text:0000000000006E77                 cmp     r9, r13
.text:0000000000006E7A                 mov     rcx, [r15+8]
.text:0000000000006E7E                 jbe     loc_74A0
.text:0000000000006E84
.text:0000000000006E84 loc_6E84:                               ; CODE XREF: printf_parse+912↓j
.text:0000000000006E84                 mov     rax, [r15]
.text:0000000000006E87                 mov     rdx, rax
.text:0000000000006E8A                 shl     rdx, 5
.text:0000000000006E8E                 add     rdx, rcx
.text:0000000000006E91                 cmp     rax, r13
.text:0000000000006E94                 ja      short loc_6EB6
.text:0000000000006E96                 db      2Eh
.text:0000000000006E96                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006EA0
.text:0000000000006EA0 loc_6EA0:                               ; CODE XREF: printf_parse+2A1↓j
.text:0000000000006EA0                 add     rax, 1
.text:0000000000006EA4                 mov     dword ptr [rdx], 0
.text:0000000000006EAA                 add     rdx, 20h ; ' '
.text:0000000000006EAE                 cmp     rax, r13
.text:0000000000006EB1                 jbe     short loc_6EA0
.text:0000000000006EB3                 mov     [r15], rax
.text:0000000000006EB6
.text:0000000000006EB6 loc_6EB6:                               ; CODE XREF: printf_parse+284↑j
.text:0000000000006EB6                 shl     r13, 5
.text:0000000000006EBA                 lea     rax, [rcx+r13]
.text:0000000000006EBE                 mov     edx, [rax]
.text:0000000000006EC0                 test    edx, edx
.text:0000000000006EC2                 jnz     loc_7493
.text:0000000000006EC8                 mov     [rax], r11d
.text:0000000000006ECB
.text:0000000000006ECB loc_6ECB:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000006ECB                                         ; printf_parse+886↓j
.text:0000000000006ECB                                         ; DATA XREF: ...
.text:0000000000006ECB                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:0000000000006ED0                 mov     rax, [r14]
.text:0000000000006ED3                 mov     [r12+8], rbp
.text:0000000000006ED8                 lea     rbx, [rax+1]
.text:0000000000006EDC                 cmp     r10, rbx
.text:0000000000006EDF                 mov     [r14], rbx
.text:0000000000006EE2                 ja      loc_6F70
.text:0000000000006EE8                 test    r10, r10
.text:0000000000006EEB                 js      loc_7897
.text:0000000000006EF1                 add     r10, r10
.text:0000000000006EF4                 mov     rax, 2E8BA2E8BA2E8BAh
.text:0000000000006EFE                 cmp     r10, rax
.text:0000000000006F01                 ja      loc_7897
.text:0000000000006F07                 lea     rax, [r10+r10*4]
.text:0000000000006F0B                 mov     rdi, [r14+8]    ; ptr
.text:0000000000006F0F                 cmp     [rsp+88h+var_60], rdi
.text:0000000000006F14                 mov     [rsp+88h+var_48], r9
.text:0000000000006F19                 mov     [rsp+88h+var_50], r10
.text:0000000000006F1E                 lea     rax, [r10+rax*2]
.text:0000000000006F22                 mov     [rsp+88h+var_58], r8
.text:0000000000006F27                 lea     rsi, ds:0[rax*8] ; size
.text:0000000000006F2F                 jz      loc_75ED
.text:0000000000006F35                 call    _realloc        ; PIC mode
.text:0000000000006F3A                 test    rax, rax
.text:0000000000006F3D                 mov     rcx, rax
.text:0000000000006F40                 mov     r8, [rsp+88h+var_58]
.text:0000000000006F45                 mov     r10, [rsp+88h+var_50]
.text:0000000000006F4A                 mov     r9, [rsp+88h+var_48]
.text:0000000000006F4F                 jz      loc_7897
.text:0000000000006F55                 mov     rax, [rsp+88h+var_60]
.text:0000000000006F5A                 cmp     rax, [r14+8]
.text:0000000000006F5E                 mov     rbx, [r14]
.text:0000000000006F61                 jz      loc_7610
.text:0000000000006F67
.text:0000000000006F67 loc_6F67:                               ; CODE XREF: printf_parse+A3D↓j
.text:0000000000006F67                 mov     [r14+8], rcx
.text:0000000000006F6B                 jmp     loc_6C88
.text:0000000000006F70 ; ---------------------------------------------------------------------------
.text:0000000000006F70
.text:0000000000006F70 loc_6F70:                               ; CODE XREF: printf_parse+2D2↑j
.text:0000000000006F70                 mov     rcx, [r14+8]
.text:0000000000006F74                 jmp     loc_6C88
.text:0000000000006F79 ; ---------------------------------------------------------------------------
.text:0000000000006F79
.text:0000000000006F79 loc_6F79:                               ; CODE XREF: printf_parse+1B3↑j
.text:0000000000006F79                 mov     rsi, [rsp+88h+var_78]
.text:0000000000006F7E                 mov     ecx, 1
.text:0000000000006F83                 mov     [r12+18h], rbp
.text:0000000000006F88                 mov     [r12+20h], rax
.text:0000000000006F8D                 test    rsi, rsi
.text:0000000000006F90                 cmovnz  rcx, rsi
.text:0000000000006F94                 mov     [rsp+88h+var_78], rcx
.text:0000000000006F99                 movzx   ecx, byte ptr [rbp+1]
.text:0000000000006F9D                 lea     esi, [rcx-30h]
.text:0000000000006FA0                 cmp     sil, 9
.text:0000000000006FA4                 jbe     loc_7285
.text:0000000000006FAA
.text:0000000000006FAA loc_6FAA:                               ; CODE XREF: printf_parse+68D↓j
.text:0000000000006FAA                 mov     rsi, [rsp+88h+var_68]
.text:0000000000006FAF                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006FB3                 lea     rdx, [rsi+1]
.text:0000000000006FB7                 mov     [r12+28h], rsi
.text:0000000000006FBC                 jz      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000006FC2                 mov     rbx, [rsp+88h+var_68]
.text:0000000000006FC7                 mov     rbp, rax
.text:0000000000006FCA                 mov     [rsp+88h+var_68], rdx
.text:0000000000006FCF
.text:0000000000006FCF loc_6FCF:                               ; CODE XREF: printf_parse+6F7↓j
.text:0000000000006FCF                 cmp     r9, rbx
.text:0000000000006FD2                 mov     rcx, [r15+8]
.text:0000000000006FD6                 ja      loc_7652
.text:0000000000006FDC                 add     r9, r9
.text:0000000000006FDF                 lea     rax, [rbx+1]
.text:0000000000006FE3                 cmp     r9, rbx
.text:0000000000006FE6                 cmovbe  r9, rax
.text:0000000000006FEA                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000006FF4                 cmp     r9, rax
.text:0000000000006FF7                 ja      loc_789B
.text:0000000000006FFD                 mov     rsi, r9
.text:0000000000007000                 mov     [rsp+88h+var_48], r9
.text:0000000000007005                 mov     [rsp+88h+var_50], r10
.text:000000000000700A                 shl     rsi, 5          ; size
.text:000000000000700E                 cmp     [rsp+88h+src], rcx
.text:0000000000007013                 mov     [rsp+88h+var_58], r8
.text:0000000000007018                 jz      loc_7731
.text:000000000000701E                 mov     rdi, rcx        ; ptr
.text:0000000000007021                 call    _realloc        ; PIC mode
.text:0000000000007026                 mov     rdx, [r15+8]
.text:000000000000702A                 mov     r8, [rsp+88h+var_58]
.text:000000000000702F                 mov     rcx, rax
.text:0000000000007032                 mov     r10, [rsp+88h+var_50]
.text:0000000000007037                 mov     r9, [rsp+88h+var_48]
.text:000000000000703C
.text:000000000000703C loc_703C:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000703C                 test    rcx, rcx
.text:000000000000703F                 jz      loc_78F7
.text:0000000000007045                 cmp     [rsp+88h+src], rdx
.text:000000000000704A                 mov     rax, [r15]
.text:000000000000704D                 jz      loc_780B
.text:0000000000007053
.text:0000000000007053 loc_7053:                               ; CODE XREF: printf_parse+C33↓j
.text:0000000000007053                 mov     [r15+8], rcx
.text:0000000000007057
.text:0000000000007057 loc_7057:                               ; CODE XREF: printf_parse+A45↓j
.text:0000000000007057                 mov     rdx, rax
.text:000000000000705A                 shl     rdx, 5
.text:000000000000705E                 add     rdx, rcx
.text:0000000000007061                 cmp     rax, rbx
.text:0000000000007064                 ja      short loc_7086
.text:0000000000007066                 db      2Eh
.text:0000000000007066                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007070
.text:0000000000007070 loc_7070:                               ; CODE XREF: printf_parse+471↓j
.text:0000000000007070                 add     rax, 1
.text:0000000000007074                 mov     dword ptr [rdx], 0
.text:000000000000707A                 add     rdx, 20h ; ' '
.text:000000000000707E                 cmp     rax, rbx
.text:0000000000007081                 jbe     short loc_7070
.text:0000000000007083                 mov     [r15], rax
.text:0000000000007086
.text:0000000000007086 loc_7086:                               ; CODE XREF: printf_parse+454↑j
.text:0000000000007086                 shl     rbx, 5
.text:000000000000708A                 lea     rax, [rcx+rbx]
.text:000000000000708E                 mov     edx, [rax]
.text:0000000000007090                 test    edx, edx
.text:0000000000007092                 jnz     loc_756B
.text:0000000000007098                 mov     dword ptr [rax], 5
.text:000000000000709E                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000070A2                 lea     rdx, [rbp+1]
.text:00000000000070A6                 cmp     bl, 2Eh ; '.'
.text:00000000000070A9                 jnz     loc_6DDE
.text:00000000000070AF
.text:00000000000070AF loc_70AF:                               ; CODE XREF: printf_parse+1C8↑j
.text:00000000000070AF                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:00000000000070B3                 mov     [r12+30h], rbp
.text:00000000000070B8                 jnz     loc_723E
.text:00000000000070BE                 mov     rsi, [rsp+88h+var_70]
.text:00000000000070C3                 lea     r11, [rbp+2]
.text:00000000000070C7                 mov     eax, 2
.text:00000000000070CC                 mov     [r12+38h], r11
.text:00000000000070D1                 cmp     rsi, 2
.text:00000000000070D5                 cmovnb  rax, rsi
.text:00000000000070D9                 mov     [rsp+88h+var_70], rax
.text:00000000000070DE                 movsx   eax, byte ptr [rbp+2]
.text:00000000000070E2                 lea     edx, [rax-30h]
.text:00000000000070E5                 cmp     dl, 9
.text:00000000000070E8                 jbe     loc_777C
.text:00000000000070EE
.text:00000000000070EE loc_70EE:                               ; CODE XREF: printf_parse+B82↓j
.text:00000000000070EE                 mov     rbx, [r12+40h]
.text:00000000000070F3                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000070F7                 jz      loc_7755
.text:00000000000070FD
.text:00000000000070FD loc_70FD:                               ; CODE XREF: printf_parse+B67↓j
.text:00000000000070FD                                         ; printf_parse+C59↓j
.text:00000000000070FD                 cmp     r9, rbx
.text:0000000000007100                 mov     rcx, [r15+8]
.text:0000000000007104                 jbe     loc_766F
.text:000000000000710A                 mov     rax, [r15]
.text:000000000000710D
.text:000000000000710D loc_710D:                               ; CODE XREF: printf_parse+AE4↓j
.text:000000000000710D                 mov     rdx, rax
.text:0000000000007110                 shl     rdx, 5
.text:0000000000007114                 add     rdx, rcx
.text:0000000000007117                 cmp     rax, rbx
.text:000000000000711A                 ja      short loc_7136
.text:000000000000711C                 nop     dword ptr [rax+00h]
.text:0000000000007120
.text:0000000000007120 loc_7120:                               ; CODE XREF: printf_parse+521↓j
.text:0000000000007120                 add     rax, 1
.text:0000000000007124                 mov     dword ptr [rdx], 0
.text:000000000000712A                 add     rdx, 20h ; ' '
.text:000000000000712E                 cmp     rax, rbx
.text:0000000000007131                 jbe     short loc_7120
.text:0000000000007133                 mov     [r15], rax
.text:0000000000007136
.text:0000000000007136 loc_7136:                               ; CODE XREF: printf_parse+50A↑j
.text:0000000000007136                 shl     rbx, 5
.text:000000000000713A                 lea     rax, [rcx+rbx]
.text:000000000000713E                 mov     edx, [rax]
.text:0000000000007140                 test    edx, edx
.text:0000000000007142                 jnz     loc_765A
.text:0000000000007148                 mov     dword ptr [rax], 5
.text:000000000000714E                 mov     rbp, r11
.text:0000000000007151                 movzx   ebx, byte ptr [r11]
.text:0000000000007155                 jmp     loc_6DDE
.text:000000000000715A ; ---------------------------------------------------------------------------
.text:000000000000715A
.text:000000000000715A loc_715A:                               ; CODE XREF: printf_parse+112↑j
.text:000000000000715A                 mov     rax, rbp
.text:000000000000715D                 nop     dword ptr [rax]
.text:0000000000007160
.text:0000000000007160 loc_7160:                               ; CODE XREF: printf_parse+55D↓j
.text:0000000000007160                 add     rax, 1
.text:0000000000007164                 movzx   edx, byte ptr [rax]
.text:0000000000007167                 lea     ecx, [rdx-30h]
.text:000000000000716A                 cmp     cl, 9
.text:000000000000716D                 jbe     short loc_7160
.text:000000000000716F                 cmp     dl, 24h ; '$'
.text:0000000000007172                 mov     r13, r8
.text:0000000000007175                 jnz     loc_6D5E
.text:000000000000717B                 xor     edx, edx
.text:000000000000717D
.text:000000000000717D loc_717D:                               ; CODE XREF: printf_parse+5B7↓j
.text:000000000000717D                 movsx   eax, bl
.text:0000000000007180                 mov     rdi, 1999999999999999h
.text:000000000000718A                 mov     rsi, r8
.text:000000000000718D                 sub     eax, 30h ; '0'
.text:0000000000007190                 cmp     rdx, rdi
.text:0000000000007193                 cdqe
.text:0000000000007195                 ja      short loc_719E
.text:0000000000007197                 lea     rsi, [rdx+rdx*4]
.text:000000000000719B                 add     rsi, rsi
.text:000000000000719E
.text:000000000000719E loc_719E:                               ; CODE XREF: printf_parse+585↑j
.text:000000000000719E                 mov     rcx, rbp
.text:00000000000071A1
.text:00000000000071A1 loc_71A1:                               ; CODE XREF: printf_parse+956↓j
.text:00000000000071A1                 add     rax, rsi
.text:00000000000071A4                 movzx   ebx, byte ptr [rbp+1]
.text:00000000000071A8                 setb    sil
.text:00000000000071AC                 add     rbp, 1
.text:00000000000071B0                 mov     rdx, rax
.text:00000000000071B3                 movzx   esi, sil
.text:00000000000071B7                 test    rsi, rsi
.text:00000000000071BA                 lea     edi, [rbx-30h]
.text:00000000000071BD                 jnz     loc_754E
.text:00000000000071C3                 cmp     dil, 9
.text:00000000000071C7                 jbe     short loc_717D
.text:00000000000071C9                 mov     r13, rax
.text:00000000000071CC                 sub     r13, 1
.text:00000000000071D0                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:00000000000071D4                 ja      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000071DA                 lea     rbp, [rcx+2]
.text:00000000000071DE                 movzx   ebx, byte ptr [rcx+2]
.text:00000000000071E2                 jmp     loc_6D5E
.text:00000000000071E7 ; ---------------------------------------------------------------------------
.text:00000000000071E7
.text:00000000000071E7 loc_71E7:                               ; CODE XREF: printf_parse+1BF↑j
.text:00000000000071E7                 mov     [r12+18h], rbp
.text:00000000000071EC                 movzx   edi, byte ptr [rbp+0]
.text:00000000000071F0                 mov     rsi, rbp
.text:00000000000071F3                 lea     ecx, [rdi-30h]
.text:00000000000071F6                 cmp     cl, 9
.text:00000000000071F9                 jbe     short loc_7207
.text:00000000000071FB                 jmp     short loc_7230
.text:00000000000071FB ; ---------------------------------------------------------------------------
.text:00000000000071FD                 align 20h
.text:0000000000007200
.text:0000000000007200 loc_7200:                               ; CODE XREF: printf_parse+600↓j
.text:0000000000007200                 mov     rbp, rax
.text:0000000000007203                 add     rax, 1
.text:0000000000007207
.text:0000000000007207 loc_7207:                               ; CODE XREF: printf_parse+5E9↑j
.text:0000000000007207                 movzx   edi, byte ptr [rax]
.text:000000000000720A                 lea     edx, [rdi-30h]
.text:000000000000720D                 cmp     dl, 9
.text:0000000000007210                 jbe     short loc_7200
.text:0000000000007212                 mov     rcx, rax
.text:0000000000007215                 lea     rdx, [rbp+2]
.text:0000000000007219                 mov     rbp, rax
.text:000000000000721C                 sub     rcx, rsi
.text:000000000000721F                 mov     rsi, [rsp+88h+var_78]
.text:0000000000007224                 cmp     rsi, rcx
.text:0000000000007227                 cmovnb  rcx, rsi
.text:000000000000722B                 mov     [rsp+88h+var_78], rcx
.text:0000000000007230
.text:0000000000007230 loc_7230:                               ; CODE XREF: printf_parse+5EB↑j
.text:0000000000007230                 mov     [r12+20h], rbp
.text:0000000000007235                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007239                 jmp     loc_6DD5
.text:000000000000723E ; ---------------------------------------------------------------------------
.text:000000000000723E
.text:000000000000723E loc_723E:                               ; CODE XREF: printf_parse+4A8↑j
.text:000000000000723E                 movzx   eax, byte ptr [rbp+1]
.text:0000000000007242                 sub     eax, 30h ; '0'
.text:0000000000007245                 cmp     al, 9
.text:0000000000007247                 ja      short loc_725E
.text:0000000000007249                 nop     dword ptr [rax+00000000h]
.text:0000000000007250
.text:0000000000007250 loc_7250:                               ; CODE XREF: printf_parse+64C↓j
.text:0000000000007250                 add     rdx, 1
.text:0000000000007254                 movzx   eax, byte ptr [rdx]
.text:0000000000007257                 sub     eax, 30h ; '0'
.text:000000000000725A                 cmp     al, 9
.text:000000000000725C                 jbe     short loc_7250
.text:000000000000725E
.text:000000000000725E loc_725E:                               ; CODE XREF: printf_parse+637↑j
.text:000000000000725E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007263                 mov     rax, rdx
.text:0000000000007266                 mov     [r12+38h], rdx
.text:000000000000726B                 sub     rax, rbp
.text:000000000000726E                 movzx   ebx, byte ptr [rdx]
.text:0000000000007271                 mov     rbp, rdx
.text:0000000000007274                 cmp     rsi, rax
.text:0000000000007277                 cmovnb  rax, rsi
.text:000000000000727B                 mov     [rsp+88h+var_70], rax
.text:0000000000007280                 jmp     loc_6DDE
.text:0000000000007285 ; ---------------------------------------------------------------------------
.text:0000000000007285
.text:0000000000007285 loc_7285:                               ; CODE XREF: printf_parse+394↑j
.text:0000000000007285                 mov     rsi, rax
.text:0000000000007288
.text:0000000000007288 loc_7288:                               ; CODE XREF: printf_parse+687↓j
.text:0000000000007288                 add     rsi, 1
.text:000000000000728C                 movzx   edi, byte ptr [rsi]
.text:000000000000728F                 lea     r11d, [rdi-30h]
.text:0000000000007293                 cmp     r11b, 9
.text:0000000000007297                 jbe     short loc_7288
.text:0000000000007299                 cmp     dil, 24h ; '$'
.text:000000000000729D                 jnz     loc_6FAA
.text:00000000000072A3                 xor     esi, esi
.text:00000000000072A5
.text:00000000000072A5 loc_72A5:                               ; CODE XREF: printf_parse+6DE↓j
.text:00000000000072A5                 movsx   eax, cl
.text:00000000000072A8                 mov     rdi, 1999999999999999h
.text:00000000000072B2                 mov     rcx, r8
.text:00000000000072B5                 sub     eax, 30h ; '0'
.text:00000000000072B8                 cmp     rsi, rdi
.text:00000000000072BB                 cdqe
.text:00000000000072BD                 ja      short loc_72C6
.text:00000000000072BF                 lea     rcx, [rsi+rsi*4]
.text:00000000000072C3                 add     rcx, rcx
.text:00000000000072C6
.text:00000000000072C6 loc_72C6:                               ; CODE XREF: printf_parse+6AD↑j
.text:00000000000072C6                 mov     rbp, rdx
.text:00000000000072C9
.text:00000000000072C9 loc_72C9:                               ; CODE XREF: printf_parse+BF6↓j
.text:00000000000072C9                 xor     r11d, r11d
.text:00000000000072CC                 add     rax, rcx
.text:00000000000072CF                 movzx   ecx, byte ptr [rdx+1]
.text:00000000000072D3                 setb    r11b
.text:00000000000072D7                 add     rdx, 1
.text:00000000000072DB                 mov     rsi, rax
.text:00000000000072DE                 test    r11, r11
.text:00000000000072E1                 lea     edi, [rcx-30h]
.text:00000000000072E4                 jnz     loc_77EE
.text:00000000000072EA                 cmp     dil, 9
.text:00000000000072EE                 jbe     short loc_72A5
.text:00000000000072F0                 lea     rbx, [rax-1]
.text:00000000000072F4                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:00000000000072F8                 ja      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000072FE                 mov     [r12+28h], rbx
.text:0000000000007303                 add     rbp, 2
.text:0000000000007307                 jmp     loc_6FCF
.text:000000000000730C ; ---------------------------------------------------------------------------
.text:000000000000730C
.text:000000000000730C loc_730C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000730C                                         ; DATA XREF: .rodata:jpt_6E55↓o
.text:000000000000730C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:000000000000730F                 mov     r11d, 16h
.text:0000000000007315                 jg      loc_6E68
.text:000000000000731B                 test    al, 4
.text:000000000000731D                 jnz     loc_6E68
.text:0000000000007323                 cmp     eax, 7
.text:0000000000007326                 mov     r11d, 15h
.text:000000000000732C                 jg      loc_6E68
.text:0000000000007332                 test    al, 2
.text:0000000000007334                 mov     r11d, 12h
.text:000000000000733A                 jnz     loc_6E68
.text:0000000000007340                 xor     r11d, r11d
.text:0000000000007343                 test    al, 1
.text:0000000000007345                 setz    r11b
.text:0000000000007349                 add     r11d, 13h
.text:000000000000734D                 jmp     loc_6E68
.text:000000000000734D ; ---------------------------------------------------------------------------
.text:0000000000007352                 align 8
.text:0000000000007358
.text:0000000000007358 loc_7358:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007358                                         ; DATA XREF: .rodata:jpt_6E55↓o
.text:0000000000007358                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000000735B                 cmp     eax, 7
.text:000000000000735E                 setnle  r11b
.text:0000000000007362                 add     r11d, 0Dh
.text:0000000000007366                 jmp     loc_6E68
.text:000000000000736B ; ---------------------------------------------------------------------------
.text:000000000000736B
.text:000000000000736B loc_736B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000736B                                         ; DATA XREF: .rodata:jpt_6E55↓o
.text:000000000000736B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000736E                 mov     r11d, 9
.text:0000000000007374                 jg      loc_6E68
.text:000000000000737A                 test    al, 4
.text:000000000000737C                 jnz     loc_6E68
.text:0000000000007382                 cmp     eax, 7
.text:0000000000007385                 mov     r11d, 7
.text:000000000000738B                 jg      loc_6E68
.text:0000000000007391                 test    al, 2
.text:0000000000007393                 mov     r11d, 1
.text:0000000000007399                 jnz     loc_6E68
.text:000000000000739F                 and     eax, 1
.text:00000000000073A2                 cmp     eax, 1
.text:00000000000073A5                 sbb     r11d, r11d
.text:00000000000073A8                 and     r11d, 2
.text:00000000000073AC                 add     r11d, 3
.text:00000000000073B0                 jmp     loc_6E68
.text:00000000000073B0 ; ---------------------------------------------------------------------------
.text:00000000000073B5                 align 8
.text:00000000000073B8
.text:00000000000073B8 loc_73B8:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000073B8                                         ; DATA XREF: .rodata:jpt_6E55↓o
.text:00000000000073B8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:00000000000073BB                 cmp     eax, 7
.text:00000000000073BE                 setnle  r11b
.text:00000000000073C2                 add     r11d, 0Fh
.text:00000000000073C6                 jmp     loc_6E68
.text:00000000000073CB ; ---------------------------------------------------------------------------
.text:00000000000073CB
.text:00000000000073CB loc_73CB:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000073CB                                         ; DATA XREF: .rodata:jpt_6E55↓o
.text:00000000000073CB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:00000000000073CE                 mov     r11d, 0Ch
.text:00000000000073D4                 jg      loc_6E68
.text:00000000000073DA                 xor     r11d, r11d
.text:00000000000073DD                 test    al, 4
.text:00000000000073DF                 setnz   r11b
.text:00000000000073E3                 add     r11d, 0Bh
.text:00000000000073E7                 jmp     loc_6E68
.text:00000000000073EC ; ---------------------------------------------------------------------------
.text:00000000000073EC
.text:00000000000073EC loc_73EC:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000073EC                                         ; DATA XREF: .rodata:jpt_6E55↓o
.text:00000000000073EC                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:00000000000073F2                 mov     ebx, 63h ; 'c'
.text:00000000000073F7                 jmp     loc_6E68
.text:00000000000073FC ; ---------------------------------------------------------------------------
.text:00000000000073FC
.text:00000000000073FC loc_73FC:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000073FC                                         ; DATA XREF: .rodata:jpt_6E55↓o
.text:00000000000073FC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:00000000000073FF                 mov     r11d, 0Ah
.text:0000000000007405                 jg      loc_6E68
.text:000000000000740B                 test    al, 4
.text:000000000000740D                 jnz     loc_6E68
.text:0000000000007413                 cmp     eax, 7
.text:0000000000007416                 mov     r11d, 8
.text:000000000000741C                 jg      loc_6E68
.text:0000000000007422                 test    al, 2
.text:0000000000007424                 mov     r11d, 2
.text:000000000000742A                 jnz     loc_6E68
.text:0000000000007430                 and     eax, 1
.text:0000000000007433                 cmp     eax, 1
.text:0000000000007436                 sbb     r11d, r11d
.text:0000000000007439                 and     r11d, 2
.text:000000000000743D                 add     r11d, 4
.text:0000000000007441                 jmp     loc_6E68
.text:0000000000007441 ; ---------------------------------------------------------------------------
.text:0000000000007446                 align 10h
.text:0000000000007450
.text:0000000000007450 loc_7450:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007450                                         ; DATA XREF: .rodata:jpt_6E55↓o
.text:0000000000007450                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:0000000000007456                 jmp     loc_6E68
.text:000000000000745B ; ---------------------------------------------------------------------------
.text:000000000000745B
.text:000000000000745B def_6E55:                               ; CODE XREF: printf_parse+22E↑j
.text:000000000000745B                                         ; printf_parse+245↑j ...
.text:000000000000745B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000745F
.text:000000000000745F loc_745F:                               ; CODE XREF: printf_parse+88C↓j
.text:000000000000745F                                         ; printf_parse+95E↓j ...
.text:000000000000745F                 cmp     [rsp+88h+src], rcx
.text:0000000000007464                 jz      short loc_746E
.text:0000000000007466                 mov     rdi, rcx        ; ptr
.text:0000000000007469                 call    _free           ; PIC mode
.text:000000000000746E
.text:000000000000746E loc_746E:                               ; CODE XREF: printf_parse+854↑j
.text:000000000000746E                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007472                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007477                 jz      short loc_747E
.text:0000000000007479                 call    _free           ; PIC mode
.text:000000000000747E
.text:000000000000747E loc_747E:                               ; CODE XREF: printf_parse+867↑j
.text:000000000000747E                 call    ___errno_location ; PIC mode
.text:0000000000007483                 mov     dword ptr [rax], 16h
.text:0000000000007489                 mov     eax, 0FFFFFFFFh
.text:000000000000748E                 jmp     loc_6CB2
.text:0000000000007493 ; ---------------------------------------------------------------------------
.text:0000000000007493
.text:0000000000007493 loc_7493:                               ; CODE XREF: printf_parse+2B2↑j
.text:0000000000007493                 cmp     edx, r11d
.text:0000000000007496                 jz      loc_6ECB        ; jumptable 0000000000000245 case 37
.text:000000000000749C                 jmp     short loc_745F
.text:000000000000749C ; ---------------------------------------------------------------------------
.text:000000000000749E                 align 20h
.text:00000000000074A0
.text:00000000000074A0 loc_74A0:                               ; CODE XREF: printf_parse+26E↑j
.text:00000000000074A0                 add     r9, r9
.text:00000000000074A3                 lea     rax, [r13+1]
.text:00000000000074A7                 cmp     r9, r13
.text:00000000000074AA                 cmovbe  r9, rax
.text:00000000000074AE                 mov     rax, 7FFFFFFFFFFFFFFh
.text:00000000000074B8                 cmp     r9, rax
.text:00000000000074BB                 ja      loc_789B
.text:00000000000074C1                 mov     rsi, r9
.text:00000000000074C4                 mov     [rsp+88h+var_40], r9
.text:00000000000074C9                 mov     [rsp+88h+var_48], r10
.text:00000000000074CE                 shl     rsi, 5          ; size
.text:00000000000074D2                 cmp     [rsp+88h+src], rcx
.text:00000000000074D7                 mov     [rsp+88h+var_50], r8
.text:00000000000074DC                 mov     dword ptr [rsp+88h+var_58], r11d
.text:00000000000074E1                 jz      loc_7581
.text:00000000000074E7                 mov     rdi, rcx        ; ptr
.text:00000000000074EA                 call    _realloc        ; PIC mode
.text:00000000000074EF                 test    rax, rax
.text:00000000000074F2                 mov     rcx, rax
.text:00000000000074F5                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:00000000000074FA                 mov     r8, [rsp+88h+var_50]
.text:00000000000074FF                 mov     r10, [rsp+88h+var_48]
.text:0000000000007504                 mov     r9, [rsp+88h+var_40]
.text:0000000000007509                 jz      loc_7897
.text:000000000000750F                 mov     rax, [rsp+88h+src]
.text:0000000000007514                 cmp     rax, [r15+8]
.text:0000000000007518                 jz      loc_75A9
.text:000000000000751E
.text:000000000000751E loc_751E:                               ; CODE XREF: printf_parse+9D8↓j
.text:000000000000751E                 mov     [r15+8], rcx
.text:0000000000007522                 jmp     loc_6E84
.text:0000000000007527 ; ---------------------------------------------------------------------------
.text:0000000000007527
.text:0000000000007527 loc_7527:                               ; CODE XREF: printf_parse+25C↑j
.text:0000000000007527                 mov     rsi, [rsp+88h+var_68]
.text:000000000000752C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007530                 lea     rax, [rsi+1]
.text:0000000000007534                 mov     [r12+50h], rsi
.text:0000000000007539                 jz      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000753F                 mov     r13, [rsp+88h+var_68]
.text:0000000000007544                 mov     [rsp+88h+var_68], rax
.text:0000000000007549                 jmp     loc_6E77
.text:000000000000754E ; ---------------------------------------------------------------------------
.text:000000000000754E
.text:000000000000754E loc_754E:                               ; CODE XREF: printf_parse+5AD↑j
.text:000000000000754E                 cmp     dil, 9
.text:0000000000007552                 ja      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007558                 movsx   eax, bl
.text:000000000000755B                 mov     rsi, r8
.text:000000000000755E                 mov     rcx, rbp
.text:0000000000007561                 sub     eax, 30h ; '0'
.text:0000000000007564                 cdqe
.text:0000000000007566                 jmp     loc_71A1
.text:000000000000756B ; ---------------------------------------------------------------------------
.text:000000000000756B
.text:000000000000756B loc_756B:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000756B                 cmp     edx, 5
.text:000000000000756E                 jnz     loc_745F
.text:0000000000007574                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007578                 lea     rdx, [rbp+1]
.text:000000000000757C                 jmp     loc_6DD5
.text:0000000000007581 ; ---------------------------------------------------------------------------
.text:0000000000007581
.text:0000000000007581 loc_7581:                               ; CODE XREF: printf_parse+8D1↑j
.text:0000000000007581                 mov     rdi, rsi        ; size
.text:0000000000007584                 call    _malloc         ; PIC mode
.text:0000000000007589                 test    rax, rax
.text:000000000000758C                 mov     rcx, rax
.text:000000000000758F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007594                 mov     r8, [rsp+88h+var_50]
.text:0000000000007599                 mov     r10, [rsp+88h+var_48]
.text:000000000000759E                 mov     r9, [rsp+88h+var_40]
.text:00000000000075A3                 jz      loc_770C
.text:00000000000075A9
.text:00000000000075A9 loc_75A9:                               ; CODE XREF: printf_parse+908↑j
.text:00000000000075A9                 mov     rdx, [r15]
.text:00000000000075AC                 mov     rsi, [rsp+88h+src] ; src
.text:00000000000075B1                 mov     rdi, rcx        ; dest
.text:00000000000075B4                 mov     [rsp+88h+var_40], r9
.text:00000000000075B9                 mov     [rsp+88h+var_48], r10
.text:00000000000075BE                 mov     [rsp+88h+var_50], r8
.text:00000000000075C3                 mov     dword ptr [rsp+88h+var_58], r11d
.text:00000000000075C8                 shl     rdx, 5          ; n
.text:00000000000075CC                 call    _memcpy         ; PIC mode
.text:00000000000075D1                 mov     r9, [rsp+88h+var_40]
.text:00000000000075D6                 mov     r10, [rsp+88h+var_48]
.text:00000000000075DB                 mov     rcx, rax
.text:00000000000075DE                 mov     r8, [rsp+88h+var_50]
.text:00000000000075E3                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:00000000000075E8                 jmp     loc_751E
.text:00000000000075ED ; ---------------------------------------------------------------------------
.text:00000000000075ED
.text:00000000000075ED loc_75ED:                               ; CODE XREF: printf_parse+31F↑j
.text:00000000000075ED                 mov     rdi, rsi        ; size
.text:00000000000075F0                 call    _malloc         ; PIC mode
.text:00000000000075F5                 test    rax, rax
.text:00000000000075F8                 mov     rcx, rax
.text:00000000000075FB                 mov     r8, [rsp+88h+var_58]
.text:0000000000007600                 mov     r10, [rsp+88h+var_50]
.text:0000000000007605                 mov     r9, [rsp+88h+var_48]
.text:000000000000760A                 jz      loc_76F9
.text:0000000000007610
.text:0000000000007610 loc_7610:                               ; CODE XREF: printf_parse+351↑j
.text:0000000000007610                 lea     rax, [rbx+rbx*4]
.text:0000000000007614                 mov     rsi, [rsp+88h+var_60] ; src
.text:0000000000007619                 mov     rdi, rcx        ; dest
.text:000000000000761C                 mov     [rsp+88h+var_48], r9
.text:0000000000007621                 mov     [rsp+88h+var_50], r10
.text:0000000000007626                 lea     rdx, [rbx+rax*2]
.text:000000000000762A                 mov     [rsp+88h+var_58], r8
.text:000000000000762F                 shl     rdx, 3          ; n
.text:0000000000007633                 call    _memcpy         ; PIC mode
.text:0000000000007638                 mov     rbx, [r14]
.text:000000000000763B                 mov     rcx, rax
.text:000000000000763E                 mov     r9, [rsp+88h+var_48]
.text:0000000000007643                 mov     r10, [rsp+88h+var_50]
.text:0000000000007648                 mov     r8, [rsp+88h+var_58]
.text:000000000000764D                 jmp     loc_6F67
.text:0000000000007652 ; ---------------------------------------------------------------------------
.text:0000000000007652
.text:0000000000007652 loc_7652:                               ; CODE XREF: printf_parse+3C6↑j
.text:0000000000007652                 mov     rax, [r15]
.text:0000000000007655                 jmp     loc_7057
.text:000000000000765A ; ---------------------------------------------------------------------------
.text:000000000000765A
.text:000000000000765A loc_765A:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000765A                 cmp     edx, 5
.text:000000000000765D                 jnz     loc_745F
.text:0000000000007663                 movzx   ebx, byte ptr [r11]
.text:0000000000007667                 mov     rbp, r11
.text:000000000000766A                 jmp     loc_6DDE
.text:000000000000766F ; ---------------------------------------------------------------------------
.text:000000000000766F
.text:000000000000766F loc_766F:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000766F                 add     r9, r9
.text:0000000000007672                 lea     rax, [rbx+1]
.text:0000000000007676                 cmp     r9, rbx
.text:0000000000007679                 cmovbe  r9, rax
.text:000000000000767D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007687                 cmp     r9, rax
.text:000000000000768A                 ja      loc_789B
.text:0000000000007690                 mov     rsi, r9
.text:0000000000007693                 mov     [rsp+88h+var_40], r9
.text:0000000000007698                 mov     [rsp+88h+var_48], r10
.text:000000000000769D                 shl     rsi, 5          ; size
.text:00000000000076A1                 cmp     [rsp+88h+src], rcx
.text:00000000000076A6                 mov     [rsp+88h+var_50], r8
.text:00000000000076AB                 mov     [rsp+88h+var_58], r11
.text:00000000000076B0                 jz      loc_786E
.text:00000000000076B6                 mov     rdi, rcx        ; ptr
.text:00000000000076B9                 call    _realloc        ; PIC mode
.text:00000000000076BE                 mov     rdx, [r15+8]
.text:00000000000076C2                 mov     r11, [rsp+88h+var_58]
.text:00000000000076C7                 mov     rcx, rax
.text:00000000000076CA                 mov     r8, [rsp+88h+var_50]
.text:00000000000076CF                 mov     r10, [rsp+88h+var_48]
.text:00000000000076D4                 mov     r9, [rsp+88h+var_40]
.text:00000000000076D9
.text:00000000000076D9 loc_76D9:                               ; CODE XREF: printf_parse+C82↓j
.text:00000000000076D9                 test    rcx, rcx
.text:00000000000076DC                 jz      loc_78F7
.text:00000000000076E2                 cmp     [rsp+88h+src], rdx
.text:00000000000076E7                 mov     rax, [r15]
.text:00000000000076EA                 jz      loc_78B0
.text:00000000000076F0
.text:00000000000076F0 loc_76F0:                               ; CODE XREF: printf_parse+CE2↓j
.text:00000000000076F0                 mov     [r15+8], rcx
.text:00000000000076F4                 jmp     loc_710D
.text:00000000000076F9 ; ---------------------------------------------------------------------------
.text:00000000000076F9
.text:00000000000076F9 loc_76F9:                               ; CODE XREF: printf_parse+9FA↑j
.text:00000000000076F9                 mov     rcx, [r15+8]
.text:00000000000076FD                 cmp     [rsp+88h+src], rcx
.text:0000000000007702                 jz      short loc_771C
.text:0000000000007704
.text:0000000000007704 loc_7704:                               ; CODE XREF: printf_parse+C90↓j
.text:0000000000007704                 mov     rdi, rcx        ; ptr
.text:0000000000007707                 call    _free           ; PIC mode
.text:000000000000770C
.text:000000000000770C loc_770C:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000770C                                         ; printf_parse+C96↓j
.text:000000000000770C                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007710                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007715                 jz      short loc_771C
.text:0000000000007717                 call    _free           ; PIC mode
.text:000000000000771C
.text:000000000000771C loc_771C:                               ; CODE XREF: printf_parse+AF2↑j
.text:000000000000771C                                         ; printf_parse+B05↑j
.text:000000000000771C                 call    ___errno_location ; PIC mode
.text:0000000000007721                 mov     dword ptr [rax], 0Ch
.text:0000000000007727                 mov     eax, 0FFFFFFFFh
.text:000000000000772C                 jmp     loc_6CB2
.text:0000000000007731 ; ---------------------------------------------------------------------------
.text:0000000000007731
.text:0000000000007731 loc_7731:                               ; CODE XREF: printf_parse+408↑j
.text:0000000000007731                 mov     rdi, rsi        ; size
.text:0000000000007734                 call    _malloc         ; PIC mode
.text:0000000000007739                 mov     rdx, [rsp+88h+src]
.text:000000000000773E                 mov     rcx, rax
.text:0000000000007741                 mov     r9, [rsp+88h+var_48]
.text:0000000000007746                 mov     r10, [rsp+88h+var_50]
.text:000000000000774B                 mov     r8, [rsp+88h+var_58]
.text:0000000000007750                 jmp     loc_703C
.text:0000000000007755 ; ---------------------------------------------------------------------------
.text:0000000000007755
.text:0000000000007755 loc_7755:                               ; CODE XREF: printf_parse+4E7↑j
.text:0000000000007755                 mov     rsi, [rsp+88h+var_68]
.text:000000000000775A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000775E                 lea     rax, [rsi+1]
.text:0000000000007762                 mov     [r12+40h], rsi
.text:0000000000007767                 jz      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000776D                 mov     rbx, [rsp+88h+var_68]
.text:0000000000007772                 mov     [rsp+88h+var_68], rax
.text:0000000000007777                 jmp     loc_70FD
.text:000000000000777C ; ---------------------------------------------------------------------------
.text:000000000000777C
.text:000000000000777C loc_777C:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000777C                 mov     rdx, r11
.text:000000000000777F
.text:000000000000777F loc_777F:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000777F                 add     rdx, 1
.text:0000000000007783                 movzx   ecx, byte ptr [rdx]
.text:0000000000007786                 lea     esi, [rcx-30h]
.text:0000000000007789                 cmp     sil, 9
.text:000000000000778D                 jbe     short loc_777F
.text:000000000000778F                 cmp     cl, 24h ; '$'
.text:0000000000007792                 jnz     loc_70EE
.text:0000000000007798                 xor     ecx, ecx
.text:000000000000779A
.text:000000000000779A loc_779A:                               ; CODE XREF: printf_parse+C3C↓j
.text:000000000000779A                 mov     rsi, 1999999999999999h
.text:00000000000077A4                 sub     eax, 30h ; '0'
.text:00000000000077A7                 mov     rdx, r8
.text:00000000000077AA                 cmp     rcx, rsi
.text:00000000000077AD                 cdqe
.text:00000000000077AF                 ja      short loc_77B8
.text:00000000000077B1                 lea     rdx, [rcx+rcx*4]
.text:00000000000077B5                 add     rdx, rdx
.text:00000000000077B8
.text:00000000000077B8 loc_77B8:                               ; CODE XREF: printf_parse+B9F↑j
.text:00000000000077B8                 mov     rsi, r11
.text:00000000000077BB
.text:00000000000077BB loc_77BB:                               ; CODE XREF: printf_parse+BDC↓j
.text:00000000000077BB                 xor     ebx, ebx
.text:00000000000077BD                 add     rdx, rax
.text:00000000000077C0                 movsx   eax, byte ptr [r11+1]
.text:00000000000077C5                 setb    bl
.text:00000000000077C8                 add     r11, 1
.text:00000000000077CC                 mov     rcx, rdx
.text:00000000000077CF                 test    rbx, rbx
.text:00000000000077D2                 lea     edi, [rax-30h]
.text:00000000000077D5                 jz      short loc_7848
.text:00000000000077D7                 cmp     dil, 9
.text:00000000000077DB                 ja      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000077E1                 sub     eax, 30h ; '0'
.text:00000000000077E4                 mov     rdx, r8
.text:00000000000077E7                 mov     rsi, r11
.text:00000000000077EA                 cdqe
.text:00000000000077EC                 jmp     short loc_77BB
.text:00000000000077EE ; ---------------------------------------------------------------------------
.text:00000000000077EE
.text:00000000000077EE loc_77EE:                               ; CODE XREF: printf_parse+6D4↑j
.text:00000000000077EE                 cmp     dil, 9
.text:00000000000077F2                 ja      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000077F8                 movsx   eax, cl
.text:00000000000077FB                 mov     rbp, rdx
.text:00000000000077FE                 mov     rcx, r8
.text:0000000000007801                 sub     eax, 30h ; '0'
.text:0000000000007804                 cdqe
.text:0000000000007806                 jmp     loc_72C9
.text:000000000000780B ; ---------------------------------------------------------------------------
.text:000000000000780B
.text:000000000000780B loc_780B:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000780B                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000007810                 shl     rax, 5
.text:0000000000007814                 mov     rdi, rcx        ; dest
.text:0000000000007817                 mov     rdx, rax        ; n
.text:000000000000781A                 mov     [rsp+88h+var_48], r9
.text:000000000000781F                 mov     [rsp+88h+var_50], r10
.text:0000000000007824                 mov     [rsp+88h+var_58], r8
.text:0000000000007829                 call    _memcpy         ; PIC mode
.text:000000000000782E                 mov     r9, [rsp+88h+var_48]
.text:0000000000007833                 mov     rcx, rax
.text:0000000000007836                 mov     r10, [rsp+88h+var_50]
.text:000000000000783B                 mov     rax, [r15]
.text:000000000000783E                 mov     r8, [rsp+88h+var_58]
.text:0000000000007843                 jmp     loc_7053
.text:0000000000007848 ; ---------------------------------------------------------------------------
.text:0000000000007848
.text:0000000000007848 loc_7848:                               ; CODE XREF: printf_parse+BC5↑j
.text:0000000000007848                 cmp     dil, 9
.text:000000000000784C                 jbe     loc_779A
.text:0000000000007852                 lea     rbx, [rdx-1]
.text:0000000000007856                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000785A                 ja      def_6E55        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007860                 mov     [r12+40h], rbx
.text:0000000000007865                 lea     r11, [rsi+2]
.text:0000000000007869                 jmp     loc_70FD
.text:000000000000786E ; ---------------------------------------------------------------------------
.text:000000000000786E
.text:000000000000786E loc_786E:                               ; CODE XREF: printf_parse+AA0↑j
.text:000000000000786E                 mov     rdi, rsi        ; size
.text:0000000000007871                 call    _malloc         ; PIC mode
.text:0000000000007876                 mov     rdx, [rsp+88h+src]
.text:000000000000787B                 mov     rcx, rax
.text:000000000000787E                 mov     r9, [rsp+88h+var_40]
.text:0000000000007883                 mov     r10, [rsp+88h+var_48]
.text:0000000000007888                 mov     r8, [rsp+88h+var_50]
.text:000000000000788D                 mov     r11, [rsp+88h+var_58]
.text:0000000000007892                 jmp     loc_76D9
.text:0000000000007897 ; ---------------------------------------------------------------------------
.text:0000000000007897
.text:0000000000007897 loc_7897:                               ; CODE XREF: printf_parse+2DB↑j
.text:0000000000007897                                         ; printf_parse+2F1↑j ...
.text:0000000000007897                 mov     rcx, [r15+8]
.text:000000000000789B
.text:000000000000789B loc_789B:                               ; CODE XREF: printf_parse+3E7↑j
.text:000000000000789B                                         ; printf_parse+8AB↑j ...
.text:000000000000789B                 cmp     [rsp+88h+src], rcx
.text:00000000000078A0                 jnz     loc_7704
.text:00000000000078A6                 jmp     loc_770C
.text:00000000000078A6 ; ---------------------------------------------------------------------------
.text:00000000000078AB                 align 10h
.text:00000000000078B0
.text:00000000000078B0 loc_78B0:                               ; CODE XREF: printf_parse+ADA↑j
.text:00000000000078B0                 mov     rsi, [rsp+88h+src] ; src
.text:00000000000078B5                 shl     rax, 5
.text:00000000000078B9                 mov     rdi, rcx        ; dest
.text:00000000000078BC                 mov     rdx, rax        ; n
.text:00000000000078BF                 mov     [rsp+88h+var_40], r9
.text:00000000000078C4                 mov     [rsp+88h+var_48], r10
.text:00000000000078C9                 mov     [rsp+88h+var_50], r8
.text:00000000000078CE                 mov     [rsp+88h+var_58], r11
.text:00000000000078D3                 call    _memcpy         ; PIC mode
.text:00000000000078D8                 mov     r9, [rsp+88h+var_40]
.text:00000000000078DD                 mov     rcx, rax
.text:00000000000078E0                 mov     r10, [rsp+88h+var_48]
.text:00000000000078E5                 mov     rax, [r15]
.text:00000000000078E8                 mov     r8, [rsp+88h+var_50]
.text:00000000000078ED                 mov     r11, [rsp+88h+var_58]
.text:00000000000078F2                 jmp     loc_76F0
.text:00000000000078F7 ; ---------------------------------------------------------------------------
.text:00000000000078F7
.text:00000000000078F7 loc_78F7:                               ; CODE XREF: printf_parse+42F↑j
.text:00000000000078F7                                         ; printf_parse+ACC↑j
.text:00000000000078F7                 mov     rcx, rdx
.text:00000000000078FA                 jmp     short loc_789B
.text:00000000000078FA ; } // starts at 6C10
.text:00000000000078FA printf_parse    endp
.text:00000000000078FA
.text:00000000000078FA ; ---------------------------------------------------------------------------
.text:00000000000078FC                 align 20h
.text:0000000000007900
.text:0000000000007900 ; =============== S U B R O U T I N E =======================================
.text:0000000000007900
.text:0000000000007900 ; Attributes: info_from_lumina
.text:0000000000007900
.text:0000000000007900 ; void _libc_csu_init(void)
.text:0000000000007900                 public __libc_csu_init
.text:0000000000007900 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000007900 ; __unwind {
.text:0000000000007900                 push    r15
.text:0000000000007902                 push    r14
.text:0000000000007904                 mov     r15, rdx
.text:0000000000007907                 push    r13
.text:0000000000007909                 push    r12
.text:000000000000790B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000007912                 push    rbp
.text:0000000000007913                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000791A                 push    rbx
.text:000000000000791B                 mov     r13d, edi
.text:000000000000791E                 mov     r14, rsi
.text:0000000000007921                 sub     rbp, r12
.text:0000000000007924                 sub     rsp, 8
.text:0000000000007928                 sar     rbp, 3
.text:000000000000792C                 call    _init_proc
.text:0000000000007931                 test    rbp, rbp
.text:0000000000007934                 jz      short loc_7956
.text:0000000000007936                 xor     ebx, ebx
.text:0000000000007938                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007940
.text:0000000000007940 loc_7940:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000007940                 mov     rdx, r15
.text:0000000000007943                 mov     rsi, r14
.text:0000000000007946                 mov     edi, r13d
.text:0000000000007949                 call    ds:(__frame_dummy_init_array_entry - 20AAD0h)[r12+rbx*8]
.text:000000000000794D                 add     rbx, 1
.text:0000000000007951                 cmp     rbp, rbx
.text:0000000000007954                 jnz     short loc_7940
.text:0000000000007956
.text:0000000000007956 loc_7956:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000007956                 add     rsp, 8
.text:000000000000795A                 pop     rbx
.text:000000000000795B                 pop     rbp
.text:000000000000795C                 pop     r12
.text:000000000000795E                 pop     r13
.text:0000000000007960                 pop     r14
.text:0000000000007962                 pop     r15
.text:0000000000007964                 retn
.text:0000000000007964 ; } // starts at 7900
.text:0000000000007964 __libc_csu_init endp
.text:0000000000007964
.text:0000000000007964 ; ---------------------------------------------------------------------------
.text:0000000000007965                 align 10h
.text:0000000000007970
.text:0000000000007970 ; =============== S U B R O U T I N E =======================================
.text:0000000000007970
.text:0000000000007970
.text:0000000000007970 ; void _libc_csu_fini(void)
.text:0000000000007970                 public __libc_csu_fini
.text:0000000000007970 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000007970 ; __unwind {
.text:0000000000007970                 rep retn
.text:0000000000007970 ; } // starts at 7970
.text:0000000000007970 __libc_csu_fini endp
.text:0000000000007970
.text:0000000000007970 ; ---------------------------------------------------------------------------
.text:0000000000007972                 align 20h
.text:0000000000007980
.text:0000000000007980 ; =============== S U B R O U T I N E =======================================
.text:0000000000007980
.text:0000000000007980
.text:0000000000007980 atexit          proc near               ; CODE XREF: main+83↑p
.text:0000000000007980 ; __unwind {
.text:0000000000007980                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000007987                 xor     esi, esi        ; obj
.text:0000000000007989                 jmp     ___cxa_atexit
.text:0000000000007989 ; } // starts at 7980
.text:0000000000007989 atexit          endp
.text:0000000000007989
.text:0000000000007989 _text           ends
.text:0000000000007989
LOAD:000000000000798E ; ===========================================================================
LOAD:000000000000798E
LOAD:000000000000798E ; Segment type: Pure code
LOAD:000000000000798E ; Segment permissions: Read/Execute
LOAD:000000000000798E LOAD            segment byte public 'CODE' use64
LOAD:000000000000798E                 assume cs:LOAD
LOAD:000000000000798E                 ;org 798Eh
LOAD:000000000000798E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000798E                 align 10h
LOAD:000000000000798E LOAD            ends
LOAD:000000000000798E
.fini:0000000000007990 ; ===========================================================================
.fini:0000000000007990
.fini:0000000000007990 ; Segment type: Pure code
.fini:0000000000007990 ; Segment permissions: Read/Execute
.fini:0000000000007990 _fini           segment dword public 'CODE' use64
.fini:0000000000007990                 assume cs:_fini
.fini:0000000000007990                 ;org 7990h
.fini:0000000000007990                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000007990
.fini:0000000000007990 ; =============== S U B R O U T I N E =======================================
.fini:0000000000007990
.fini:0000000000007990
.fini:0000000000007990                 public _term_proc
.fini:0000000000007990 _term_proc      proc near
.fini:0000000000007990                 sub     rsp, 8          ; _fini
.fini:0000000000007994                 add     rsp, 8
.fini:0000000000007998                 retn
.fini:0000000000007998 _term_proc      endp
.fini:0000000000007998
.fini:0000000000007998 _fini           ends
.fini:0000000000007998
LOAD:0000000000007999 ; ===========================================================================
LOAD:0000000000007999
LOAD:0000000000007999 ; Segment type: Pure code
LOAD:0000000000007999 ; Segment permissions: Read/Execute
LOAD:0000000000007999 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007999                 assume cs:LOAD
LOAD:0000000000007999                 ;org 7999h
LOAD:0000000000007999                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007999                 align 20h
LOAD:0000000000007999 LOAD            ends
LOAD:0000000000007999
.rodata:00000000000079A0 ; ===========================================================================
.rodata:00000000000079A0
.rodata:00000000000079A0 ; Segment type: Pure data
.rodata:00000000000079A0 ; Segment permissions: Read
.rodata:00000000000079A0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000079A0                 assume cs:_rodata
.rodata:00000000000079A0                 ;org 79A0h
.rodata:00000000000079A0                 public _IO_stdin_used
.rodata:00000000000079A0 _IO_stdin_used  db    1
.rodata:00000000000079A1                 db    0
.rodata:00000000000079A2                 db    2
.rodata:00000000000079A3                 db    0
.rodata:00000000000079A4 aStdbuf         db 'stdbuf',0           ; DATA XREF: main+E1↑o
.rodata:00000000000079A4                                         ; usage+1C5↑o ...
.rodata:00000000000079AB ; const char aUsageSOptionCo[]
.rodata:00000000000079AB aUsageSOptionCo db 'Usage: %s OPTION... COMMAND',0Ah,0
.rodata:00000000000079AB                                         ; DATA XREF: usage:loc_211D↑o
.rodata:00000000000079C8 asc_79C8        db '[',0                ; DATA XREF: usage+1D1↑o
.rodata:00000000000079CA aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1F8↑o
.rodata:00000000000079DA aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000079DA                                         ; DATA XREF: usage+228↑o
.rodata:00000000000079DA                                         ; usage+31C↑o ...
.rodata:00000000000079F0 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+239↑o
.rodata:00000000000079FA aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+245↑o
.rodata:0000000000007A09 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1D8↑o
.rodata:0000000000007A13 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+204↑o
.rodata:0000000000007A1D aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+21C↑o
.rodata:0000000000007A27 ; const char aSOnlineHelpS[]
.rodata:0000000000007A27 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+28A↑o
.rodata:0000000000007A27                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000007A3E unk_7A3E        db  47h ; G             ; DATA XREF: main+DA↑o
.rodata:0000000000007A3E                                         ; usage+2A6↑o ...
.rodata:0000000000007A3F                 db  4Eh ; N
.rodata:0000000000007A40                 db  55h ; U
.rodata:0000000000007A41                 db  20h
.rodata:0000000000007A42 ; const char domainname[]
.rodata:0000000000007A42 domainname      db 'coreutils',0        ; DATA XREF: main+5A↑o
.rodata:0000000000007A42                                         ; main+66↑o ...
.rodata:0000000000007A4C ; const char s2[]
.rodata:0000000000007A4C s2              db 'en_',0              ; DATA XREF: usage+2CD↑o
.rodata:0000000000007A4C                                         ; usage+38E↑o
.rodata:0000000000007A50 ; const char aFullDocumentat[]
.rodata:0000000000007A50 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000007A50                                         ; DATA XREF: usage:loc_23A9↑o
.rodata:0000000000007A50                                         ; usage:loc_2466↑o
.rodata:0000000000007A6B ; const char dirname[]
.rodata:0000000000007A6B dirname         db '/usr/local/share/locale',0
.rodata:0000000000007A6B                                         ; DATA XREF: main+53↑o
.rodata:0000000000007A83 aEgkkmptyz0     db 'EGkKMPTYZ0',0       ; DATA XREF: main+195↑o
.rodata:0000000000007A8E ; const char aInvalidModeS[]
.rodata:0000000000007A8E aInvalidModeS   db 'invalid mode %s',0  ; DATA XREF: main+5FD↑o
.rodata:0000000000007A9E aPadraigBrady   db 'Padraig Brady',0    ; DATA XREF: main+D3↑o
.rodata:0000000000007AAC ; const char shortopts[]
.rodata:0000000000007AAC shortopts       db '+i:o:e:',0          ; DATA XREF: main+96↑o
.rodata:0000000000007AAC                                         ; main+538↑o ...
.rodata:0000000000007AB4 aMissingOperand db 'missing operand',0  ; DATA XREF: main+638↑o
.rodata:0000000000007AC4 aStdbuf_0       db '_STDBUF_',0         ; DATA XREF: main:loc_1B18↑o
.rodata:0000000000007AC4                                         ; main:loc_1D3F↑o
.rodata:0000000000007ACD aSCL            db '%s%c=L',0           ; DATA XREF: main+4A6↑o
.rodata:0000000000007ACD                                         ; main:loc_1A17↑o
.rodata:0000000000007AD4 aSCLu           db '%s%c=%lu',0         ; DATA XREF: main+27F↑o
.rodata:0000000000007ADD aProcSelfExe    db '/proc/self/exe',0   ; DATA XREF: main:loc_1D5C↑o
.rodata:0000000000007AEC ; const char aPath[]
.rodata:0000000000007AEC aPath           db 'PATH',0             ; DATA XREF: main:loc_1DC1↑o
.rodata:0000000000007AF1 aUsrLocalLibCor db '/usr/local/lib/coreutils',0
.rodata:0000000000007AF1                                         ; DATA XREF: main:loc_1DA9↑o
.rodata:0000000000007B0A ; const char name[]
.rodata:0000000000007B0A name            db 'LD_PRELOAD',0       ; DATA XREF: main:loc_1B9E↑o
.rodata:0000000000007B0A                                         ; main+3C4↑o ...
.rodata:0000000000007B15 aUsrLocalLibexe db '/usr/local/libexec/coreutils',0
.rodata:0000000000007B15                                         ; DATA XREF: main+340↑o
.rodata:0000000000007B32 aLibstdbufSo    db 'libstdbuf.so',0     ; DATA XREF: main+30F↑o
.rodata:0000000000007B32                                         ; main+39C↑o ...
.rodata:0000000000007B3F aSS             db '%s/%s',0            ; DATA XREF: main+316↑o
.rodata:0000000000007B45 ; const char aFailedToFindS[]
.rodata:0000000000007B45 aFailedToFindS  db 'failed to find %s',0
.rodata:0000000000007B45                                         ; DATA XREF: main+696↑o
.rodata:0000000000007B57 aSSS            db '%s=%s:%s',0         ; DATA XREF: main+3CB↑o
.rodata:0000000000007B60 aSS_0           db '%s=%s',0            ; DATA XREF: main+4F3↑o
.rodata:0000000000007B66 ; const char aFailedToRunCom[]
.rodata:0000000000007B66 aFailedToRunCom db 'failed to run command %s',0
.rodata:0000000000007B66                                         ; DATA XREF: main+42F↑o
.rodata:0000000000007B7F aInput          db 'input',0            ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000007B85 aOutput         db 'output',0           ; DATA XREF: .data.rel.ro:000000000020AB00↓o
.rodata:0000000000007B8C aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020AB40↓o
.rodata:0000000000007B91 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020AB60↓o
.rodata:0000000000007B99                 align 20h
.rodata:0000000000007BA0 ; const char aTrySHelpForMor[]
.rodata:0000000000007BA0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000007BA0                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000007BC7                 align 8
.rodata:0000000000007BC8 ; const char aRunCommandWith[]
.rodata:0000000000007BC8 aRunCommandWith db 'Run COMMAND, with modified buffering operations for its standard '
.rodata:0000000000007BC8                                         ; DATA XREF: usage+84↑o
.rodata:0000000000007BC8                 db 'streams.',0Ah,0
.rodata:0000000000007C13                 align 8
.rodata:0000000000007C18 ; const char aMandatoryArgum[]
.rodata:0000000000007C18 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000007C18                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000007C18                 db 'ns too.',0Ah,0
.rodata:0000000000007C63                 align 8
.rodata:0000000000007C68 ; const char aIInputModeAdju[]
.rodata:0000000000007C68 aIInputModeAdju db '  -i, --input=MODE   adjust standard input stream buffering',0Ah
.rodata:0000000000007C68                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000007C68                 db '  -o, --output=MODE  adjust standard output stream buffering',0Ah
.rodata:0000000000007C68                 db '  -e, --error=MODE   adjust standard error stream buffering',0Ah,0
.rodata:0000000000007D1E                 align 20h
.rodata:0000000000007D20 ; const char aHelpDisplayThi[]
.rodata:0000000000007D20 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000007D20                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000007D4D                 align 10h
.rodata:0000000000007D50 ; const char aVersionOutputV[]
.rodata:0000000000007D50 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000007D50                                         ; DATA XREF: usage+118↑o
.rodata:0000000000007D86                 align 8
.rodata:0000000000007D88 ; const char aIfModeIsLTheCo[]
.rodata:0000000000007D88 aIfModeIsLTheCo db 0Ah                  ; DATA XREF: usage+13D↑o
.rodata:0000000000007D88                 db 'If MODE is ',27h,'L',27h,' the corresponding stream will be line '
.rodata:0000000000007D88                 db 'buffered.',0Ah
.rodata:0000000000007D88                 db 'This option is invalid with standard input.',0Ah,0
.rodata:0000000000007DF5                 align 8
.rodata:0000000000007DF8 ; const char aIfModeIs0TheCo[]
.rodata:0000000000007DF8 aIfModeIs0TheCo db 0Ah                  ; DATA XREF: usage+162↑o
.rodata:0000000000007DF8                 db 'If MODE is ',27h,'0',27h,' the corresponding stream will be unbuf'
.rodata:0000000000007DF8                 db 'fered.',0Ah,0
.rodata:0000000000007E36                 align 8
.rodata:0000000000007E38 ; const char aOtherwiseModeI[]
.rodata:0000000000007E38 aOtherwiseModeI db 0Ah                  ; DATA XREF: usage+187↑o
.rodata:0000000000007E38                 db 'Otherwise MODE is a number which may be followed by one of the fo'
.rodata:0000000000007E38                 db 'llowing:',0Ah
.rodata:0000000000007E38                 db 'KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P'
.rodata:0000000000007E38                 db ', E, Z, Y.',0Ah
.rodata:0000000000007E38                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah
.rodata:0000000000007E38                 db 'In this case the corresponding stream will be fully buffered with'
.rodata:0000000000007E38                 db ' the buffer',0Ah
.rodata:0000000000007E38                 db 'size set to MODE bytes.',0Ah,0
.rodata:0000000000007F70 ; const char aNoteIfCommandA[]
.rodata:0000000000007F70 aNoteIfCommandA db 0Ah                  ; DATA XREF: usage+1AC↑o
.rodata:0000000000007F70                 db 'NOTE: If COMMAND adjusts the buffering of its standard streams (',27h
.rodata:0000000000007F70                 db 'tee',27h,' does',0Ah
.rodata:0000000000007F70                 db 'for example) then that will override corresponding changes by ',27h
.rodata:0000000000007F70                 db 'stdbuf',27h,'.',0Ah
.rodata:0000000000007F70                 db 'Also some filters (like ',27h,'dd',27h,' and ',27h,'cat',27h,' et'
.rodata:0000000000007F70                 db 'c.) don',27h,'t use streams for I/O,',0Ah
.rodata:0000000000007F70                 db 'and are thus unaffected by ',27h,'stdbuf',27h,' settings.',0Ah,0
.rodata:000000000000807B                 align 20h
.rodata:0000000000008080 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000008080                                         ; DATA XREF: usage+29F↑o
.rodata:0000000000008080                                         ; usage+303↑o ...
.rodata:00000000000080A8 ; const char aReportAnyTrans[]
.rodata:00000000000080A8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000080A8                                         ; DATA XREF: usage+3F7↑o
.rodata:00000000000080A8                 db 'am/>',0Ah,0
.rodata:00000000000080EF                 align 10h
.rodata:00000000000080F0 ; const char aOrAvailableLoc[]
.rodata:00000000000080F0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000080F0                                         ; DATA XREF: usage:loc_23EE↑o
.rodata:0000000000008123                 align 8
.rodata:0000000000008128 ; const char file[]
.rodata:0000000000008128 file            db '../coreutils-8.31/src/stdbuf.c',0
.rodata:0000000000008128                                         ; DATA XREF: main+5CB↑o
.rodata:0000000000008147                 align 8
.rodata:0000000000008148 ; const char assertion[]
.rodata:0000000000008148 assertion       db '0 <= opt_fileno && opt_fileno < ARRAY_CARDINALITY (stdbuf)',0
.rodata:0000000000008148                                         ; DATA XREF: main+5D2↑o
.rodata:0000000000008183                 align 8
.rodata:0000000000008188 ; const char msgid[]
.rodata:0000000000008188 msgid           db 'line buffering stdin is meaningless',0
.rodata:0000000000008188                                         ; DATA XREF: main+1E4↑o
.rodata:00000000000081AC                 align 10h
.rodata:00000000000081B0 ; const char aFailedToUpdate[]
.rodata:00000000000081B0 aFailedToUpdate db 'failed to update the environment with %s',0
.rodata:00000000000081B0                                         ; DATA XREF: main+64E↑o
.rodata:00000000000081B0                                         ; main+6CA↑o
.rodata:00000000000081D9                 align 20h
.rodata:00000000000081E0 aYouMustSpecify db 'you must specify a buffering mode option',0
.rodata:00000000000081E0                                         ; DATA XREF: main+67E↑o
.rodata:0000000000008209                 align 20h
.rodata:0000000000008220 CSWTCH_55       db    2                 ; DATA XREF: main+12↑o
.rodata:0000000000008221                 db    0
.rodata:0000000000008222                 db    0
.rodata:0000000000008223                 db    0
.rodata:0000000000008224                 db 0FFh
.rodata:0000000000008225                 db 0FFh
.rodata:0000000000008226                 db 0FFh
.rodata:0000000000008227                 db 0FFh
.rodata:0000000000008228                 db 0FFh
.rodata:0000000000008229                 db 0FFh
.rodata:000000000000822A                 db 0FFh
.rodata:000000000000822B                 db 0FFh
.rodata:000000000000822C                 db 0FFh
.rodata:000000000000822D                 db 0FFh
.rodata:000000000000822E                 db 0FFh
.rodata:000000000000822F                 db 0FFh
.rodata:0000000000008230                 db    0
.rodata:0000000000008231                 db    0
.rodata:0000000000008232                 db    0
.rodata:0000000000008233                 db    0
.rodata:0000000000008234                 db 0FFh
.rodata:0000000000008235                 db 0FFh
.rodata:0000000000008236                 db 0FFh
.rodata:0000000000008237                 db 0FFh
.rodata:0000000000008238                 db 0FFh
.rodata:0000000000008239                 db 0FFh
.rodata:000000000000823A                 db 0FFh
.rodata:000000000000823B                 db 0FFh
.rodata:000000000000823C                 db 0FFh
.rodata:000000000000823D                 db 0FFh
.rodata:000000000000823E                 db 0FFh
.rodata:000000000000823F                 db 0FFh
.rodata:0000000000008240                 db 0FFh
.rodata:0000000000008241                 db 0FFh
.rodata:0000000000008242                 db 0FFh
.rodata:0000000000008243                 db 0FFh
.rodata:0000000000008244                 db 0FFh
.rodata:0000000000008245                 db 0FFh
.rodata:0000000000008246                 db 0FFh
.rodata:0000000000008247                 db 0FFh
.rodata:0000000000008248                 db    1
.rodata:0000000000008249                 db    0
.rodata:000000000000824A                 db    0
.rodata:000000000000824B                 db    0
.rodata:000000000000824C ; const char _PRETTY_FUNCTION___7688[]
.rodata:000000000000824C __PRETTY_FUNCTION___7688 db 'main',0    ; DATA XREF: main:loc_1E64↑o
.rodata:0000000000008251 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000008256 ; const char aWriteError[]
.rodata:0000000000008256 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2543↑o
.rodata:0000000000008256                                         ; .data.rel.ro:000000000020AB20↓o
.rodata:0000000000008262 ; const char format[]
.rodata:0000000000008262 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000008262                                         ; close_stdout+8F↑o ...
.rodata:0000000000008269                 align 10h
.rodata:0000000000008270 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000008270                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000082A8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000082B0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000082B4 unk_82B4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000082B5                 db  80h
.rodata:00000000000082B6                 db  98h
.rodata:00000000000082B7                 db    0
.rodata:00000000000082B8 unk_82B8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000082B9                 db  80h
.rodata:00000000000082BA                 db  99h
.rodata:00000000000082BB                 db    0
.rodata:00000000000082BC unk_82BC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000082BD                 db    7
.rodata:00000000000082BE                 db  65h ; e
.rodata:00000000000082BF                 db    0
.rodata:00000000000082C0 unk_82C0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000082C1                 db 0AFh
.rodata:00000000000082C2                 db    0
.rodata:00000000000082C3 unk_82C3        db  22h ; "             ; DATA XREF: gettext_quote:loc_2920↑o
.rodata:00000000000082C3                                         ; quotearg_buffer_restyled:loc_36DB↑o ...
.rodata:00000000000082C4                 db    0
.rodata:00000000000082C5 ; const char asc_82C5[2]
.rodata:00000000000082C5 asc_82C5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000082C5                                         ; quotearg_buffer_restyled:loc_2AA3↑o ...
.rodata:00000000000082C7 ; const char asc_82C7[2]
.rodata:00000000000082C7 asc_82C7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000082C7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000082C9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000082D1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020ABA8↓o
.rodata:00000000000082D7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020ABB0↓o
.rodata:00000000000082E4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020ABB8↓o
.rodata:00000000000082E4                                         ; .data.rel.ro:000000000020ABD8↓o
.rodata:00000000000082F1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000082F1                                         ; DATA XREF: .data.rel.ro:000000000020ABC0↓o
.rodata:0000000000008305 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:000000000020ABC8↓o
.rodata:0000000000008307 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020ABD0↓o
.rodata:000000000000830F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020ABE8↓o
.rodata:0000000000008317                 align 20h
.rodata:0000000000008320 jpt_2A81        dd offset loc_382A - 8320h
.rodata:0000000000008320                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000008320                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000008320                 dd offset loc_2A83 - 8320h ; jump table for switch statement
.rodata:0000000000008320                 dd offset loc_3A58 - 8320h
.rodata:0000000000008320                 dd offset loc_3864 - 8320h
.rodata:0000000000008320                 dd offset loc_3654 - 8320h
.rodata:0000000000008320                 dd offset loc_36B0 - 8320h
.rodata:0000000000008320                 dd offset loc_3705 - 8320h
.rodata:0000000000008320                 dd offset loc_374A - 8320h
.rodata:0000000000008320                 dd offset loc_3784 - 8320h
.rodata:0000000000008320                 dd offset loc_3784 - 8320h
.rodata:0000000000008320                 dd offset loc_3784 - 8320h
.rodata:000000000000834C jpt_2BDE        dd offset loc_2E00 - 834Ch, offset def_2BDE - 834Ch, offset def_2BDE - 834Ch
.rodata:000000000000834C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000834C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000834C                 dd offset def_2BDE - 834Ch, offset def_2BDE - 834Ch, offset def_2BDE - 834Ch ; jump table for switch statement
.rodata:000000000000834C                 dd offset def_2BDE - 834Ch, offset loc_2E40 - 834Ch, offset loc_2D48 - 834Ch
.rodata:000000000000834C                 dd offset loc_2D08 - 834Ch, offset loc_2ED0 - 834Ch, offset loc_2EC0 - 834Ch
.rodata:000000000000834C                 dd offset loc_2EB0 - 834Ch, offset loc_2EA0 - 834Ch, offset def_2BDE - 834Ch
.rodata:000000000000834C                 dd offset def_2BDE - 834Ch, offset def_2BDE - 834Ch, offset def_2BDE - 834Ch
.rodata:000000000000834C                 dd offset def_2BDE - 834Ch, offset def_2BDE - 834Ch, offset def_2BDE - 834Ch
.rodata:000000000000834C                 dd offset def_2BDE - 834Ch, offset def_2BDE - 834Ch, offset def_2BDE - 834Ch
.rodata:000000000000834C                 dd offset def_2BDE - 834Ch, offset def_2BDE - 834Ch, offset def_2BDE - 834Ch
.rodata:000000000000834C                 dd offset def_2BDE - 834Ch, offset def_2BDE - 834Ch, offset def_2BDE - 834Ch
.rodata:000000000000834C                 dd offset def_2BDE - 834Ch, offset def_2BDE - 834Ch, offset loc_2E90 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E80 - 834Ch, offset loc_2E80 - 834Ch, offset loc_2E50 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E80 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E80 - 834Ch
.rodata:000000000000834C                 dd offset loc_2CE3 - 834Ch, offset loc_2E80 - 834Ch, offset loc_2E80 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E80 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E80 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E80 - 834Ch, offset loc_2E80 - 834Ch, offset loc_2E80 - 834Ch
.rodata:000000000000834C                 dd offset loc_2CB3 - 834Ch, offset def_2BDE - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E80 - 834Ch, offset loc_2D58 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E80 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E80 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch, offset loc_2E28 - 834Ch
.rodata:000000000000834C                 dd offset loc_2BE3 - 834Ch, offset loc_2E80 - 834Ch, offset loc_2BE3 - 834Ch
.rodata:000000000000834C                 dd offset loc_2E50 - 834Ch
.rodata:0000000000008548 jpt_2F6A        dd offset loc_2FD0 - 8548h, offset def_2F6A - 8548h, offset def_2F6A - 8548h
.rodata:0000000000008548                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000008548                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000008548                 dd offset def_2F6A - 8548h, offset def_2F6A - 8548h, offset def_2F6A - 8548h ; jump table for switch statement
.rodata:0000000000008548                 dd offset def_2F6A - 8548h, offset loc_2FC0 - 8548h, offset loc_3110 - 8548h
.rodata:0000000000008548                 dd offset loc_30F8 - 8548h, offset loc_2FA8 - 8548h, offset loc_30E8 - 8548h
.rodata:0000000000008548                 dd offset loc_2F90 - 8548h, offset loc_30D0 - 8548h, offset def_2F6A - 8548h
.rodata:0000000000008548                 dd offset def_2F6A - 8548h, offset def_2F6A - 8548h, offset def_2F6A - 8548h
.rodata:0000000000008548                 dd offset def_2F6A - 8548h, offset def_2F6A - 8548h, offset def_2F6A - 8548h
.rodata:0000000000008548                 dd offset def_2F6A - 8548h, offset def_2F6A - 8548h, offset def_2F6A - 8548h
.rodata:0000000000008548                 dd offset def_2F6A - 8548h, offset def_2F6A - 8548h, offset def_2F6A - 8548h
.rodata:0000000000008548                 dd offset def_2F6A - 8548h, offset def_2F6A - 8548h, offset def_2F6A - 8548h
.rodata:0000000000008548                 dd offset def_2F6A - 8548h, offset def_2F6A - 8548h, offset loc_30B8 - 8548h
.rodata:0000000000008548                 dd offset loc_30A0 - 8548h, offset loc_30A0 - 8548h, offset loc_3088 - 8548h
.rodata:0000000000008548                 dd offset loc_30A0 - 8548h, offset loc_3070 - 8548h, offset loc_30A0 - 8548h
.rodata:0000000000008548                 dd offset loc_2CE0 - 8548h, offset loc_30A0 - 8548h, offset loc_30A0 - 8548h
.rodata:0000000000008548                 dd offset loc_30A0 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_30A0 - 8548h
.rodata:0000000000008548                 dd offset loc_30A0 - 8548h, offset loc_30A0 - 8548h, offset loc_30A0 - 8548h
.rodata:0000000000008548                 dd offset loc_2CB0 - 8548h, offset def_2F6A - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_30A0 - 8548h, offset loc_2F70 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_30A0 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_30A0 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_3070 - 8548h, offset loc_3070 - 8548h, offset loc_3070 - 8548h
.rodata:0000000000008548                 dd offset loc_2BE0 - 8548h, offset loc_30A0 - 8548h, offset loc_2BE0 - 8548h
.rodata:0000000000008548                 dd offset loc_3088 - 8548h
.rodata:0000000000008744                 align 20h
.rodata:0000000000008760                 public quoting_style_vals
.rodata:0000000000008760 quoting_style_vals db    0
.rodata:0000000000008761                 db    0
.rodata:0000000000008762                 db    0
.rodata:0000000000008763                 db    0
.rodata:0000000000008764                 db    1
.rodata:0000000000008765                 db    0
.rodata:0000000000008766                 db    0
.rodata:0000000000008767                 db    0
.rodata:0000000000008768                 db    2
.rodata:0000000000008769                 db    0
.rodata:000000000000876A                 db    0
.rodata:000000000000876B                 db    0
.rodata:000000000000876C                 db    3
.rodata:000000000000876D                 db    0
.rodata:000000000000876E                 db    0
.rodata:000000000000876F                 db    0
.rodata:0000000000008770                 db    4
.rodata:0000000000008771                 db    0
.rodata:0000000000008772                 db    0
.rodata:0000000000008773                 db    0
.rodata:0000000000008774                 db    5
.rodata:0000000000008775                 db    0
.rodata:0000000000008776                 db    0
.rodata:0000000000008777                 db    0
.rodata:0000000000008778                 db    6
.rodata:0000000000008779                 db    0
.rodata:000000000000877A                 db    0
.rodata:000000000000877B                 db    0
.rodata:000000000000877C                 db    7
.rodata:000000000000877D                 db    0
.rodata:000000000000877E                 db    0
.rodata:000000000000877F                 db    0
.rodata:0000000000008780                 db    8
.rodata:0000000000008781                 db    0
.rodata:0000000000008782                 db    0
.rodata:0000000000008783                 db    0
.rodata:0000000000008784                 db    9
.rodata:0000000000008785                 db    0
.rodata:0000000000008786                 db    0
.rodata:0000000000008787                 db    0
.rodata:0000000000008788 aSSS_0          db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000008794 aSS_2           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000879B ; const char aC_0[]
.rodata:000000000000879B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_45CC↑o
.rodata:000000000000879F ; const char aWrittenByS[]
.rodata:000000000000879F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000879F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000087AF ; const char aWrittenBySAndS[]
.rodata:00000000000087AF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000087AF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000087C6 ; const char aWrittenBySSAnd[]
.rodata:00000000000087C6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000087C6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000087E2 ; const char aReportBugsToS[]
.rodata:00000000000087E2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000087E2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000087F7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000087F7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000880D ; const char aSHomePageS[]
.rodata:000000000000880D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000880D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000008821                 align 8
.rodata:0000000000008828 ; const char aLicenseGplv3Gn[]
.rodata:0000000000008828 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000008828                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000008828                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000008828                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000008828                 db '.',0Ah
.rodata:0000000000008828                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000008828                 db 0Ah,0
.rodata:00000000000088F4                 align 8
.rodata:00000000000088F8 ; const char aWrittenBySSSAn[]
.rodata:00000000000088F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000088F8                                         ; DATA XREF: version_etc_arn:loc_4820↑o
.rodata:00000000000088F8                 db 'and %s.',0Ah,0
.rodata:0000000000008918 ; const char aWrittenBySSSSA[]
.rodata:0000000000008918 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008918                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000008918                 db '%s, and %s.',0Ah,0
.rodata:000000000000893C                 align 20h
.rodata:0000000000008940 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000008940 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008940                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000008940                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000008968 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000008968 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008968                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000008968                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000008994                 align 8
.rodata:0000000000008998 ; const char aWrittenBySSSSS[]
.rodata:0000000000008998 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008998                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000008998                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008998                 db 'and %s.',0Ah,0
.rodata:00000000000089C8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000089C8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000089C8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000089C8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000089C8                 db '%s, and %s.',0Ah,0
.rodata:00000000000089FC                 align 20h
.rodata:0000000000008A00 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008A00                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000008A00                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008A00                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000008A3C                 align 20h
.rodata:0000000000008A40 ; const char aGeneralHelpUsi[]
.rodata:0000000000008A40 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000008A40                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000008A40                 db 0
.rodata:0000000000008A81                 align 4
.rodata:0000000000008A84 jpt_4634        dd offset loc_46B6 - 8A84h
.rodata:0000000000008A84                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000008A84                                         ; version_etc_arn+9D↑r
.rodata:0000000000008A84                 dd offset loc_4748 - 8A84h ; jump table for switch statement
.rodata:0000000000008A84                 dd offset loc_4788 - 8A84h
.rodata:0000000000008A84                 dd offset loc_47D0 - 8A84h
.rodata:0000000000008A84                 dd offset loc_4820 - 8A84h
.rodata:0000000000008A84                 dd offset loc_4878 - 8A84h
.rodata:0000000000008A84                 dd offset loc_48A8 - 8A84h
.rodata:0000000000008A84                 dd offset loc_4910 - 8A84h
.rodata:0000000000008A84                 dd offset loc_4640 - 8A84h
.rodata:0000000000008A84                 dd offset loc_46F0 - 8A84h
.rodata:0000000000008AAC                 align 20h
.rodata:0000000000008AC0                 public version_etc_copyright
.rodata:0000000000008AC0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000008AC0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000008AEF ; const char aMemoryExhauste[]
.rodata:0000000000008AEF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000008B00 ; const char aCoreutils831Li[]
.rodata:0000000000008B00 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000008B00                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:0000000000008B20 ; const char a0StrtolBaseStr[]
.rodata:0000000000008B20 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000008B20                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:0000000000008B46                 align 8
.rodata:0000000000008B48 jpt_5046        dd offset loc_5196 - 8B48h, offset def_5046 - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000008B48                                         ; xstrtoumax+1CF↑r
.rodata:0000000000008B48                 dd offset loc_5173 - 8B48h, offset def_5046 - 8B48h, offset loc_51AC - 8B48h ; jump table for switch statement
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                 dd offset loc_512F - 8B48h, offset def_5046 - 8B48h, offset loc_5048 - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset loc_5150 - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                 dd offset loc_510F - 8B48h, offset def_5046 - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset loc_50EA - 8B48h
.rodata:0000000000008B48                 dd offset loc_50C4 - 8B48h, offset def_5046 - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset loc_50AD - 8B48h
.rodata:0000000000008B48                 dd offset loc_5070 - 8B48h, offset def_5046 - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset loc_51AC - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset loc_512F - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset loc_5048 - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset def_5046 - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset loc_510F - 8B48h
.rodata:0000000000008B48                 dd offset def_5046 - 8B48h, offset def_5046 - 8B48h, offset loc_5097 - 8B48h
.rodata:0000000000008C20 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000008C20 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:0000000000008C20                                         ; DATA XREF: xstrtoumax:loc_51F5↑o
.rodata:0000000000008C2B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000008C2D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5770↑o
.rodata:0000000000008C33 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000008C33                                         ; locale_charset:loc_57C0↑o
.rodata:0000000000008C39                 align 4
.rodata:0000000000008C3C jpt_5E4B        dd offset def_5E4B - 8C3Ch
.rodata:0000000000008C3C                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:0000000000008C3C                                         ; vasnprintf+554↑r
.rodata:0000000000008C3C                 dd offset loc_62B0 - 8C3Ch ; jump table for switch statement
.rodata:0000000000008C3C                 dd offset loc_6280 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_61F8 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_61B8 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5F88 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5F88 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5E50 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5E50 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5E50 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5E50 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_6138 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_60B0 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5F88 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5F88 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5E50 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5E50 - 8C3Ch
.rodata:0000000000008C3C                 dd offset loc_5E50 - 8C3Ch
.rodata:0000000000008C84 jpt_63F0        dd offset loc_6660 - 8C84h
.rodata:0000000000008C84                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000008C84                                         ; vasnprintf+AF9↑r
.rodata:0000000000008C84                 dd offset loc_6680 - 8C84h ; jump table for switch statement
.rodata:0000000000008C84                 dd offset loc_6670 - 8C84h
.rodata:0000000000008C84                 dd offset loc_6530 - 8C84h
.rodata:0000000000008C84                 dd offset loc_6530 - 8C84h
.rodata:0000000000008C98 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:0000000000008C9F                 align 20h
.rodata:0000000000008CA0 jpt_6A46        dd offset def_6A46 - 8CA0h
.rodata:0000000000008CA0                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000008CA0                                         ; printf_fetchargs+2F↑r
.rodata:0000000000008CA0                 dd offset loc_6ACC - 8CA0h ; jump table for switch statement
.rodata:0000000000008CA0                 dd offset loc_6ACC - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6AEE - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6AEE - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6AAA - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6AAA - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6B42 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A50 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6AAA - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6AAA - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6B14 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6B70 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CA0                 dd offset loc_6A86 - 8CA0h
.rodata:0000000000008CFC                 align 20h
.rodata:0000000000008D00 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000008D01                 db    0
.rodata:0000000000008D02                 db    0
.rodata:0000000000008D03                 db    0
.rodata:0000000000008D04                 db  4Eh ; N
.rodata:0000000000008D05                 db    0
.rodata:0000000000008D06                 db    0
.rodata:0000000000008D07                 db    0
.rodata:0000000000008D08                 db  55h ; U
.rodata:0000000000008D09                 db    0
.rodata:0000000000008D0A                 db    0
.rodata:0000000000008D0B                 db    0
.rodata:0000000000008D0C                 db  4Ch ; L
.rodata:0000000000008D0D                 db    0
.rodata:0000000000008D0E                 db    0
.rodata:0000000000008D0F                 db    0
.rodata:0000000000008D10                 db  4Ch ; L
.rodata:0000000000008D11                 db    0
.rodata:0000000000008D12                 db    0
.rodata:0000000000008D13                 db    0
.rodata:0000000000008D14                 db  29h ; )
.rodata:0000000000008D15                 db    0
.rodata:0000000000008D16                 db    0
.rodata:0000000000008D17                 db    0
.rodata:0000000000008D18                 db    0
.rodata:0000000000008D19                 db    0
.rodata:0000000000008D1A                 db    0
.rodata:0000000000008D1B                 db    0
.rodata:0000000000008D1C jpt_6E55        dd offset loc_6ECB - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                                         ; DATA XREF: printf_parse+234↑o
.rodata:0000000000008D1C                                         ; printf_parse+23E↑r
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch ; jump table for switch statement
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset loc_73CB - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset loc_73EC - 8D1Ch, offset def_6E55 - 8D1Ch, offset loc_73CB - 8D1Ch
.rodata:0000000000008D1C                 dd offset loc_73CB - 8D1Ch, offset loc_73CB - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset loc_6E57 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset loc_73FC - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset loc_73CB - 8D1Ch, offset def_6E55 - 8D1Ch, offset loc_7358 - 8D1Ch
.rodata:0000000000008D1C                 dd offset loc_736B - 8D1Ch, offset loc_73CB - 8D1Ch, offset loc_73CB - 8D1Ch
.rodata:0000000000008D1C                 dd offset loc_73CB - 8D1Ch, offset def_6E55 - 8D1Ch, offset loc_736B - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset loc_730C - 8D1Ch, offset loc_73FC - 8D1Ch
.rodata:0000000000008D1C                 dd offset loc_7450 - 8D1Ch, offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch
.rodata:0000000000008D1C                 dd offset loc_73B8 - 8D1Ch, offset def_6E55 - 8D1Ch, offset loc_73FC - 8D1Ch
.rodata:0000000000008D1C                 dd offset def_6E55 - 8D1Ch, offset def_6E55 - 8D1Ch, offset loc_73FC - 8D1Ch
.rodata:0000000000008D1C _rodata         ends
.rodata:0000000000008D1C
.eh_frame_hdr:0000000000008E6C ; ===========================================================================
.eh_frame_hdr:0000000000008E6C
.eh_frame_hdr:0000000000008E6C ; Segment type: Pure data
.eh_frame_hdr:0000000000008E6C ; Segment permissions: Read
.eh_frame_hdr:0000000000008E6C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000008E6C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000008E6C                 ;org 8E6Ch
.eh_frame_hdr:0000000000008E6C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000008E6D                 db  1Bh
.eh_frame_hdr:0000000000008E6E                 db    3
.eh_frame_hdr:0000000000008E6F                 db  3Bh ; ;
.eh_frame_hdr:0000000000008E70                 db 0C0h
.eh_frame_hdr:0000000000008E71                 db    2
.eh_frame_hdr:0000000000008E72                 db    0
.eh_frame_hdr:0000000000008E73                 db    0
.eh_frame_hdr:0000000000008E74                 db  57h ; W
.eh_frame_hdr:0000000000008E75                 db    0
.eh_frame_hdr:0000000000008E76                 db    0
.eh_frame_hdr:0000000000008E77                 db    0
.eh_frame_hdr:0000000000008E78                 db 0D4h
.eh_frame_hdr:0000000000008E79                 db  86h
.eh_frame_hdr:0000000000008E7A                 db 0FFh
.eh_frame_hdr:0000000000008E7B                 db 0FFh
.eh_frame_hdr:0000000000008E7C                 db  0Ch
.eh_frame_hdr:0000000000008E7D                 db    3
.eh_frame_hdr:0000000000008E7E                 db    0
.eh_frame_hdr:0000000000008E7F                 db    0
.eh_frame_hdr:0000000000008E80                 db  24h ; $
.eh_frame_hdr:0000000000008E81                 db  8Ah
.eh_frame_hdr:0000000000008E82                 db 0FFh
.eh_frame_hdr:0000000000008E83                 db 0FFh
.eh_frame_hdr:0000000000008E84                 db  34h ; 4
.eh_frame_hdr:0000000000008E85                 db    3
.eh_frame_hdr:0000000000008E86                 db    0
.eh_frame_hdr:0000000000008E87                 db    0
.eh_frame_hdr:0000000000008E88                 db  34h ; 4
.eh_frame_hdr:0000000000008E89                 db  8Ah
.eh_frame_hdr:0000000000008E8A                 db 0FFh
.eh_frame_hdr:0000000000008E8B                 db 0FFh
.eh_frame_hdr:0000000000008E8C                 db  78h ; x
.eh_frame_hdr:0000000000008E8D                 db    3
.eh_frame_hdr:0000000000008E8E                 db    0
.eh_frame_hdr:0000000000008E8F                 db    0
.eh_frame_hdr:0000000000008E90                 db  44h ; D
.eh_frame_hdr:0000000000008E91                 db  91h
.eh_frame_hdr:0000000000008E92                 db 0FFh
.eh_frame_hdr:0000000000008E93                 db 0FFh
.eh_frame_hdr:0000000000008E94                 db 0DCh
.eh_frame_hdr:0000000000008E95                 db    2
.eh_frame_hdr:0000000000008E96                 db    0
.eh_frame_hdr:0000000000008E97                 db    0
.eh_frame_hdr:0000000000008E98                 db  54h ; T
.eh_frame_hdr:0000000000008E99                 db  92h
.eh_frame_hdr:0000000000008E9A                 db 0FFh
.eh_frame_hdr:0000000000008E9B                 db 0FFh
.eh_frame_hdr:0000000000008E9C                 db  4Ch ; L
.eh_frame_hdr:0000000000008E9D                 db    3
.eh_frame_hdr:0000000000008E9E                 db    0
.eh_frame_hdr:0000000000008E9F                 db    0
.eh_frame_hdr:0000000000008EA0                 db  74h ; t
.eh_frame_hdr:0000000000008EA1                 db  96h
.eh_frame_hdr:0000000000008EA2                 db 0FFh
.eh_frame_hdr:0000000000008EA3                 db 0FFh
.eh_frame_hdr:0000000000008EA4                 db 0CCh
.eh_frame_hdr:0000000000008EA5                 db    3
.eh_frame_hdr:0000000000008EA6                 db    0
.eh_frame_hdr:0000000000008EA7                 db    0
.eh_frame_hdr:0000000000008EA8                 db  84h
.eh_frame_hdr:0000000000008EA9                 db  96h
.eh_frame_hdr:0000000000008EAA                 db 0FFh
.eh_frame_hdr:0000000000008EAB                 db 0FFh
.eh_frame_hdr:0000000000008EAC                 db 0E0h
.eh_frame_hdr:0000000000008EAD                 db    3
.eh_frame_hdr:0000000000008EAE                 db    0
.eh_frame_hdr:0000000000008EAF                 db    0
.eh_frame_hdr:0000000000008EB0                 db  94h
.eh_frame_hdr:0000000000008EB1                 db  96h
.eh_frame_hdr:0000000000008EB2                 db 0FFh
.eh_frame_hdr:0000000000008EB3                 db 0FFh
.eh_frame_hdr:0000000000008EB4                 db 0F4h
.eh_frame_hdr:0000000000008EB5                 db    3
.eh_frame_hdr:0000000000008EB6                 db    0
.eh_frame_hdr:0000000000008EB7                 db    0
.eh_frame_hdr:0000000000008EB8                 db  44h ; D
.eh_frame_hdr:0000000000008EB9                 db  97h
.eh_frame_hdr:0000000000008EBA                 db 0FFh
.eh_frame_hdr:0000000000008EBB                 db 0FFh
.eh_frame_hdr:0000000000008EBC                 db  24h ; $
.eh_frame_hdr:0000000000008EBD                 db    4
.eh_frame_hdr:0000000000008EBE                 db    0
.eh_frame_hdr:0000000000008EBF                 db    0
.eh_frame_hdr:0000000000008EC0                 db  64h ; d
.eh_frame_hdr:0000000000008EC1                 db  97h
.eh_frame_hdr:0000000000008EC2                 db 0FFh
.eh_frame_hdr:0000000000008EC3                 db 0FFh
.eh_frame_hdr:0000000000008EC4                 db  44h ; D
.eh_frame_hdr:0000000000008EC5                 db    4
.eh_frame_hdr:0000000000008EC6                 db    0
.eh_frame_hdr:0000000000008EC7                 db    0
.eh_frame_hdr:0000000000008EC8                 db 0C4h
.eh_frame_hdr:0000000000008EC9                 db  97h
.eh_frame_hdr:0000000000008ECA                 db 0FFh
.eh_frame_hdr:0000000000008ECB                 db 0FFh
.eh_frame_hdr:0000000000008ECC                 db  78h ; x
.eh_frame_hdr:0000000000008ECD                 db    4
.eh_frame_hdr:0000000000008ECE                 db    0
.eh_frame_hdr:0000000000008ECF                 db    0
.eh_frame_hdr:0000000000008ED0                 db  24h ; $
.eh_frame_hdr:0000000000008ED1                 db  98h
.eh_frame_hdr:0000000000008ED2                 db 0FFh
.eh_frame_hdr:0000000000008ED3                 db 0FFh
.eh_frame_hdr:0000000000008ED4                 db 0A4h
.eh_frame_hdr:0000000000008ED5                 db    4
.eh_frame_hdr:0000000000008ED6                 db    0
.eh_frame_hdr:0000000000008ED7                 db    0
.eh_frame_hdr:0000000000008ED8                 db  84h
.eh_frame_hdr:0000000000008ED9                 db  98h
.eh_frame_hdr:0000000000008EDA                 db 0FFh
.eh_frame_hdr:0000000000008EDB                 db 0FFh
.eh_frame_hdr:0000000000008EDC                 db 0B8h
.eh_frame_hdr:0000000000008EDD                 db    4
.eh_frame_hdr:0000000000008EDE                 db    0
.eh_frame_hdr:0000000000008EDF                 db    0
.eh_frame_hdr:0000000000008EE0                 db 0D4h
.eh_frame_hdr:0000000000008EE1                 db  98h
.eh_frame_hdr:0000000000008EE2                 db 0FFh
.eh_frame_hdr:0000000000008EE3                 db 0FFh
.eh_frame_hdr:0000000000008EE4                 db 0E4h
.eh_frame_hdr:0000000000008EE5                 db    4
.eh_frame_hdr:0000000000008EE6                 db    0
.eh_frame_hdr:0000000000008EE7                 db    0
.eh_frame_hdr:0000000000008EE8                 db 0F4h
.eh_frame_hdr:0000000000008EE9                 db  98h
.eh_frame_hdr:0000000000008EEA                 db 0FFh
.eh_frame_hdr:0000000000008EEB                 db 0FFh
.eh_frame_hdr:0000000000008EEC                 db    4
.eh_frame_hdr:0000000000008EED                 db    5
.eh_frame_hdr:0000000000008EEE                 db    0
.eh_frame_hdr:0000000000008EEF                 db    0
.eh_frame_hdr:0000000000008EF0                 db 0F4h
.eh_frame_hdr:0000000000008EF1                 db  99h
.eh_frame_hdr:0000000000008EF2                 db 0FFh
.eh_frame_hdr:0000000000008EF3                 db 0FFh
.eh_frame_hdr:0000000000008EF4                 db  54h ; T
.eh_frame_hdr:0000000000008EF5                 db    5
.eh_frame_hdr:0000000000008EF6                 db    0
.eh_frame_hdr:0000000000008EF7                 db    0
.eh_frame_hdr:0000000000008EF8                 db  94h
.eh_frame_hdr:0000000000008EF9                 db  9Ah
.eh_frame_hdr:0000000000008EFA                 db 0FFh
.eh_frame_hdr:0000000000008EFB                 db 0FFh
.eh_frame_hdr:0000000000008EFC                 db  74h ; t
.eh_frame_hdr:0000000000008EFD                 db    5
.eh_frame_hdr:0000000000008EFE                 db    0
.eh_frame_hdr:0000000000008EFF                 db    0
.eh_frame_hdr:0000000000008F00                 db  84h
.eh_frame_hdr:0000000000008F01                 db  9Bh
.eh_frame_hdr:0000000000008F02                 db 0FFh
.eh_frame_hdr:0000000000008F03                 db 0FFh
.eh_frame_hdr:0000000000008F04                 db 0B8h
.eh_frame_hdr:0000000000008F05                 db    5
.eh_frame_hdr:0000000000008F06                 db    0
.eh_frame_hdr:0000000000008F07                 db    0
.eh_frame_hdr:0000000000008F08                 db 0C4h
.eh_frame_hdr:0000000000008F09                 db 0ADh
.eh_frame_hdr:0000000000008F0A                 db 0FFh
.eh_frame_hdr:0000000000008F0B                 db 0FFh
.eh_frame_hdr:0000000000008F0C                 db  30h ; 0
.eh_frame_hdr:0000000000008F0D                 db    6
.eh_frame_hdr:0000000000008F0E                 db    0
.eh_frame_hdr:0000000000008F0F                 db    0
.eh_frame_hdr:0000000000008F10                 db  74h ; t
.eh_frame_hdr:0000000000008F11                 db 0AFh
.eh_frame_hdr:0000000000008F12                 db 0FFh
.eh_frame_hdr:0000000000008F13                 db 0FFh
.eh_frame_hdr:0000000000008F14                 db  9Ch
.eh_frame_hdr:0000000000008F15                 db    6
.eh_frame_hdr:0000000000008F16                 db    0
.eh_frame_hdr:0000000000008F17                 db    0
.eh_frame_hdr:0000000000008F18                 db 0B4h
.eh_frame_hdr:0000000000008F19                 db 0AFh
.eh_frame_hdr:0000000000008F1A                 db 0FFh
.eh_frame_hdr:0000000000008F1B                 db 0FFh
.eh_frame_hdr:0000000000008F1C                 db 0C8h
.eh_frame_hdr:0000000000008F1D                 db    6
.eh_frame_hdr:0000000000008F1E                 db    0
.eh_frame_hdr:0000000000008F1F                 db    0
.eh_frame_hdr:0000000000008F20                 db 0D4h
.eh_frame_hdr:0000000000008F21                 db 0AFh
.eh_frame_hdr:0000000000008F22                 db 0FFh
.eh_frame_hdr:0000000000008F23                 db 0FFh
.eh_frame_hdr:0000000000008F24                 db 0DCh
.eh_frame_hdr:0000000000008F25                 db    6
.eh_frame_hdr:0000000000008F26                 db    0
.eh_frame_hdr:0000000000008F27                 db    0
.eh_frame_hdr:0000000000008F28                 db 0F4h
.eh_frame_hdr:0000000000008F29                 db 0AFh
.eh_frame_hdr:0000000000008F2A                 db 0FFh
.eh_frame_hdr:0000000000008F2B                 db 0FFh
.eh_frame_hdr:0000000000008F2C                 db 0F0h
.eh_frame_hdr:0000000000008F2D                 db    6
.eh_frame_hdr:0000000000008F2E                 db    0
.eh_frame_hdr:0000000000008F2F                 db    0
.eh_frame_hdr:0000000000008F30                 db  34h ; 4
.eh_frame_hdr:0000000000008F31                 db 0B0h
.eh_frame_hdr:0000000000008F32                 db 0FFh
.eh_frame_hdr:0000000000008F33                 db 0FFh
.eh_frame_hdr:0000000000008F34                 db    4
.eh_frame_hdr:0000000000008F35                 db    7
.eh_frame_hdr:0000000000008F36                 db    0
.eh_frame_hdr:0000000000008F37                 db    0
.eh_frame_hdr:0000000000008F38                 db  54h ; T
.eh_frame_hdr:0000000000008F39                 db 0B0h
.eh_frame_hdr:0000000000008F3A                 db 0FFh
.eh_frame_hdr:0000000000008F3B                 db 0FFh
.eh_frame_hdr:0000000000008F3C                 db  18h
.eh_frame_hdr:0000000000008F3D                 db    7
.eh_frame_hdr:0000000000008F3E                 db    0
.eh_frame_hdr:0000000000008F3F                 db    0
.eh_frame_hdr:0000000000008F40                 db  84h
.eh_frame_hdr:0000000000008F41                 db 0B0h
.eh_frame_hdr:0000000000008F42                 db 0FFh
.eh_frame_hdr:0000000000008F43                 db 0FFh
.eh_frame_hdr:0000000000008F44                 db  2Ch ; ,
.eh_frame_hdr:0000000000008F45                 db    7
.eh_frame_hdr:0000000000008F46                 db    0
.eh_frame_hdr:0000000000008F47                 db    0
.eh_frame_hdr:0000000000008F48                 db    4
.eh_frame_hdr:0000000000008F49                 db 0B1h
.eh_frame_hdr:0000000000008F4A                 db 0FFh
.eh_frame_hdr:0000000000008F4B                 db 0FFh
.eh_frame_hdr:0000000000008F4C                 db  80h
.eh_frame_hdr:0000000000008F4D                 db    7
.eh_frame_hdr:0000000000008F4E                 db    0
.eh_frame_hdr:0000000000008F4F                 db    0
.eh_frame_hdr:0000000000008F50                 db 0F4h
.eh_frame_hdr:0000000000008F51                 db 0B1h
.eh_frame_hdr:0000000000008F52                 db 0FFh
.eh_frame_hdr:0000000000008F53                 db 0FFh
.eh_frame_hdr:0000000000008F54                 db 0ECh
.eh_frame_hdr:0000000000008F55                 db    7
.eh_frame_hdr:0000000000008F56                 db    0
.eh_frame_hdr:0000000000008F57                 db    0
.eh_frame_hdr:0000000000008F58                 db    4
.eh_frame_hdr:0000000000008F59                 db 0B2h
.eh_frame_hdr:0000000000008F5A                 db 0FFh
.eh_frame_hdr:0000000000008F5B                 db 0FFh
.eh_frame_hdr:0000000000008F5C                 db    0
.eh_frame_hdr:0000000000008F5D                 db    8
.eh_frame_hdr:0000000000008F5E                 db    0
.eh_frame_hdr:0000000000008F5F                 db    0
.eh_frame_hdr:0000000000008F60                 db 0A4h
.eh_frame_hdr:0000000000008F61                 db 0B2h
.eh_frame_hdr:0000000000008F62                 db 0FFh
.eh_frame_hdr:0000000000008F63                 db 0FFh
.eh_frame_hdr:0000000000008F64                 db  2Ch ; ,
.eh_frame_hdr:0000000000008F65                 db    8
.eh_frame_hdr:0000000000008F66                 db    0
.eh_frame_hdr:0000000000008F67                 db    0
.eh_frame_hdr:0000000000008F68                 db 0C4h
.eh_frame_hdr:0000000000008F69                 db 0B2h
.eh_frame_hdr:0000000000008F6A                 db 0FFh
.eh_frame_hdr:0000000000008F6B                 db 0FFh
.eh_frame_hdr:0000000000008F6C                 db  40h ; @
.eh_frame_hdr:0000000000008F6D                 db    8
.eh_frame_hdr:0000000000008F6E                 db    0
.eh_frame_hdr:0000000000008F6F                 db    0
.eh_frame_hdr:0000000000008F70                 db 0D4h
.eh_frame_hdr:0000000000008F71                 db 0B2h
.eh_frame_hdr:0000000000008F72                 db 0FFh
.eh_frame_hdr:0000000000008F73                 db 0FFh
.eh_frame_hdr:0000000000008F74                 db  54h ; T
.eh_frame_hdr:0000000000008F75                 db    8
.eh_frame_hdr:0000000000008F76                 db    0
.eh_frame_hdr:0000000000008F77                 db    0
.eh_frame_hdr:0000000000008F78                 db 0F4h
.eh_frame_hdr:0000000000008F79                 db 0B2h
.eh_frame_hdr:0000000000008F7A                 db 0FFh
.eh_frame_hdr:0000000000008F7B                 db 0FFh
.eh_frame_hdr:0000000000008F7C                 db  68h ; h
.eh_frame_hdr:0000000000008F7D                 db    8
.eh_frame_hdr:0000000000008F7E                 db    0
.eh_frame_hdr:0000000000008F7F                 db    0
.eh_frame_hdr:0000000000008F80                 db  14h
.eh_frame_hdr:0000000000008F81                 db 0B3h
.eh_frame_hdr:0000000000008F82                 db 0FFh
.eh_frame_hdr:0000000000008F83                 db 0FFh
.eh_frame_hdr:0000000000008F84                 db  7Ch ; |
.eh_frame_hdr:0000000000008F85                 db    8
.eh_frame_hdr:0000000000008F86                 db    0
.eh_frame_hdr:0000000000008F87                 db    0
.eh_frame_hdr:0000000000008F88                 db 0A4h
.eh_frame_hdr:0000000000008F89                 db 0B3h
.eh_frame_hdr:0000000000008F8A                 db 0FFh
.eh_frame_hdr:0000000000008F8B                 db 0FFh
.eh_frame_hdr:0000000000008F8C                 db  98h
.eh_frame_hdr:0000000000008F8D                 db    8
.eh_frame_hdr:0000000000008F8E                 db    0
.eh_frame_hdr:0000000000008F8F                 db    0
.eh_frame_hdr:0000000000008F90                 db  34h ; 4
.eh_frame_hdr:0000000000008F91                 db 0B4h
.eh_frame_hdr:0000000000008F92                 db 0FFh
.eh_frame_hdr:0000000000008F93                 db 0FFh
.eh_frame_hdr:0000000000008F94                 db 0B4h
.eh_frame_hdr:0000000000008F95                 db    8
.eh_frame_hdr:0000000000008F96                 db    0
.eh_frame_hdr:0000000000008F97                 db    0
.eh_frame_hdr:0000000000008F98                 db  44h ; D
.eh_frame_hdr:0000000000008F99                 db 0B4h
.eh_frame_hdr:0000000000008F9A                 db 0FFh
.eh_frame_hdr:0000000000008F9B                 db 0FFh
.eh_frame_hdr:0000000000008F9C                 db 0C8h
.eh_frame_hdr:0000000000008F9D                 db    8
.eh_frame_hdr:0000000000008F9E                 db    0
.eh_frame_hdr:0000000000008F9F                 db    0
.eh_frame_hdr:0000000000008FA0                 db  54h ; T
.eh_frame_hdr:0000000000008FA1                 db 0B4h
.eh_frame_hdr:0000000000008FA2                 db 0FFh
.eh_frame_hdr:0000000000008FA3                 db 0FFh
.eh_frame_hdr:0000000000008FA4                 db 0DCh
.eh_frame_hdr:0000000000008FA5                 db    8
.eh_frame_hdr:0000000000008FA6                 db    0
.eh_frame_hdr:0000000000008FA7                 db    0
.eh_frame_hdr:0000000000008FA8                 db 0F4h
.eh_frame_hdr:0000000000008FA9                 db 0B4h
.eh_frame_hdr:0000000000008FAA                 db 0FFh
.eh_frame_hdr:0000000000008FAB                 db 0FFh
.eh_frame_hdr:0000000000008FAC                 db 0F8h
.eh_frame_hdr:0000000000008FAD                 db    8
.eh_frame_hdr:0000000000008FAE                 db    0
.eh_frame_hdr:0000000000008FAF                 db    0
.eh_frame_hdr:0000000000008FB0                 db    4
.eh_frame_hdr:0000000000008FB1                 db 0B5h
.eh_frame_hdr:0000000000008FB2                 db 0FFh
.eh_frame_hdr:0000000000008FB3                 db 0FFh
.eh_frame_hdr:0000000000008FB4                 db  0Ch
.eh_frame_hdr:0000000000008FB5                 db    9
.eh_frame_hdr:0000000000008FB6                 db    0
.eh_frame_hdr:0000000000008FB7                 db    0
.eh_frame_hdr:0000000000008FB8                 db  24h ; $
.eh_frame_hdr:0000000000008FB9                 db 0B5h
.eh_frame_hdr:0000000000008FBA                 db 0FFh
.eh_frame_hdr:0000000000008FBB                 db 0FFh
.eh_frame_hdr:0000000000008FBC                 db  20h
.eh_frame_hdr:0000000000008FBD                 db    9
.eh_frame_hdr:0000000000008FBE                 db    0
.eh_frame_hdr:0000000000008FBF                 db    0
.eh_frame_hdr:0000000000008FC0                 db  34h ; 4
.eh_frame_hdr:0000000000008FC1                 db 0B5h
.eh_frame_hdr:0000000000008FC2                 db 0FFh
.eh_frame_hdr:0000000000008FC3                 db 0FFh
.eh_frame_hdr:0000000000008FC4                 db  34h ; 4
.eh_frame_hdr:0000000000008FC5                 db    9
.eh_frame_hdr:0000000000008FC6                 db    0
.eh_frame_hdr:0000000000008FC7                 db    0
.eh_frame_hdr:0000000000008FC8                 db 0C4h
.eh_frame_hdr:0000000000008FC9                 db 0B5h
.eh_frame_hdr:0000000000008FCA                 db 0FFh
.eh_frame_hdr:0000000000008FCB                 db 0FFh
.eh_frame_hdr:0000000000008FCC                 db  50h ; P
.eh_frame_hdr:0000000000008FCD                 db    9
.eh_frame_hdr:0000000000008FCE                 db    0
.eh_frame_hdr:0000000000008FCF                 db    0
.eh_frame_hdr:0000000000008FD0                 db  64h ; d
.eh_frame_hdr:0000000000008FD1                 db 0B6h
.eh_frame_hdr:0000000000008FD2                 db 0FFh
.eh_frame_hdr:0000000000008FD3                 db 0FFh
.eh_frame_hdr:0000000000008FD4                 db  6Ch ; l
.eh_frame_hdr:0000000000008FD5                 db    9
.eh_frame_hdr:0000000000008FD6                 db    0
.eh_frame_hdr:0000000000008FD7                 db    0
.eh_frame_hdr:0000000000008FD8                 db  74h ; t
.eh_frame_hdr:0000000000008FD9                 db 0B6h
.eh_frame_hdr:0000000000008FDA                 db 0FFh
.eh_frame_hdr:0000000000008FDB                 db 0FFh
.eh_frame_hdr:0000000000008FDC                 db  80h
.eh_frame_hdr:0000000000008FDD                 db    9
.eh_frame_hdr:0000000000008FDE                 db    0
.eh_frame_hdr:0000000000008FDF                 db    0
.eh_frame_hdr:0000000000008FE0                 db  94h
.eh_frame_hdr:0000000000008FE1                 db 0B6h
.eh_frame_hdr:0000000000008FE2                 db 0FFh
.eh_frame_hdr:0000000000008FE3                 db 0FFh
.eh_frame_hdr:0000000000008FE4                 db  94h
.eh_frame_hdr:0000000000008FE5                 db    9
.eh_frame_hdr:0000000000008FE6                 db    0
.eh_frame_hdr:0000000000008FE7                 db    0
.eh_frame_hdr:0000000000008FE8                 db 0B4h
.eh_frame_hdr:0000000000008FE9                 db 0B6h
.eh_frame_hdr:0000000000008FEA                 db 0FFh
.eh_frame_hdr:0000000000008FEB                 db 0FFh
.eh_frame_hdr:0000000000008FEC                 db 0A8h
.eh_frame_hdr:0000000000008FED                 db    9
.eh_frame_hdr:0000000000008FEE                 db    0
.eh_frame_hdr:0000000000008FEF                 db    0
.eh_frame_hdr:0000000000008FF0                 db 0C4h
.eh_frame_hdr:0000000000008FF1                 db 0B6h
.eh_frame_hdr:0000000000008FF2                 db 0FFh
.eh_frame_hdr:0000000000008FF3                 db 0FFh
.eh_frame_hdr:0000000000008FF4                 db 0BCh
.eh_frame_hdr:0000000000008FF5                 db    9
.eh_frame_hdr:0000000000008FF6                 db    0
.eh_frame_hdr:0000000000008FF7                 db    0
.eh_frame_hdr:0000000000008FF8                 db 0E4h
.eh_frame_hdr:0000000000008FF9                 db 0B6h
.eh_frame_hdr:0000000000008FFA                 db 0FFh
.eh_frame_hdr:0000000000008FFB                 db 0FFh
.eh_frame_hdr:0000000000008FFC                 db 0D0h
.eh_frame_hdr:0000000000008FFD                 db    9
.eh_frame_hdr:0000000000008FFE                 db    0
.eh_frame_hdr:0000000000008FFF                 db    0
.eh_frame_hdr:0000000000009000                 db    4
.eh_frame_hdr:0000000000009001                 db 0B7h
.eh_frame_hdr:0000000000009002                 db 0FFh
.eh_frame_hdr:0000000000009003                 db 0FFh
.eh_frame_hdr:0000000000009004                 db 0E4h
.eh_frame_hdr:0000000000009005                 db    9
.eh_frame_hdr:0000000000009006                 db    0
.eh_frame_hdr:0000000000009007                 db    0
.eh_frame_hdr:0000000000009008                 db  24h ; $
.eh_frame_hdr:0000000000009009                 db 0B7h
.eh_frame_hdr:000000000000900A                 db 0FFh
.eh_frame_hdr:000000000000900B                 db 0FFh
.eh_frame_hdr:000000000000900C                 db 0FCh
.eh_frame_hdr:000000000000900D                 db    9
.eh_frame_hdr:000000000000900E                 db    0
.eh_frame_hdr:000000000000900F                 db    0
.eh_frame_hdr:0000000000009010                 db  44h ; D
.eh_frame_hdr:0000000000009011                 db 0BBh
.eh_frame_hdr:0000000000009012                 db 0FFh
.eh_frame_hdr:0000000000009013                 db 0FFh
.eh_frame_hdr:0000000000009014                 db  10h
.eh_frame_hdr:0000000000009015                 db  0Bh
.eh_frame_hdr:0000000000009016                 db    0
.eh_frame_hdr:0000000000009017                 db    0
.eh_frame_hdr:0000000000009018                 db  64h ; d
.eh_frame_hdr:0000000000009019                 db 0BBh
.eh_frame_hdr:000000000000901A                 db 0FFh
.eh_frame_hdr:000000000000901B                 db 0FFh
.eh_frame_hdr:000000000000901C                 db  24h ; $
.eh_frame_hdr:000000000000901D                 db  0Bh
.eh_frame_hdr:000000000000901E                 db    0
.eh_frame_hdr:000000000000901F                 db    0
.eh_frame_hdr:0000000000009020                 db 0E4h
.eh_frame_hdr:0000000000009021                 db 0BBh
.eh_frame_hdr:0000000000009022                 db 0FFh
.eh_frame_hdr:0000000000009023                 db 0FFh
.eh_frame_hdr:0000000000009024                 db  40h ; @
.eh_frame_hdr:0000000000009025                 db  0Bh
.eh_frame_hdr:0000000000009026                 db    0
.eh_frame_hdr:0000000000009027                 db    0
.eh_frame_hdr:0000000000009028                 db 0C4h
.eh_frame_hdr:0000000000009029                 db 0BCh
.eh_frame_hdr:000000000000902A                 db 0FFh
.eh_frame_hdr:000000000000902B                 db 0FFh
.eh_frame_hdr:000000000000902C                 db  6Ch ; l
.eh_frame_hdr:000000000000902D                 db  0Bh
.eh_frame_hdr:000000000000902E                 db    0
.eh_frame_hdr:000000000000902F                 db    0
.eh_frame_hdr:0000000000009030                 db  44h ; D
.eh_frame_hdr:0000000000009031                 db 0BDh
.eh_frame_hdr:0000000000009032                 db 0FFh
.eh_frame_hdr:0000000000009033                 db 0FFh
.eh_frame_hdr:0000000000009034                 db  8Ch
.eh_frame_hdr:0000000000009035                 db  0Bh
.eh_frame_hdr:0000000000009036                 db    0
.eh_frame_hdr:0000000000009037                 db    0
.eh_frame_hdr:0000000000009038                 db  64h ; d
.eh_frame_hdr:0000000000009039                 db 0BDh
.eh_frame_hdr:000000000000903A                 db 0FFh
.eh_frame_hdr:000000000000903B                 db 0FFh
.eh_frame_hdr:000000000000903C                 db 0A8h
.eh_frame_hdr:000000000000903D                 db  0Bh
.eh_frame_hdr:000000000000903E                 db    0
.eh_frame_hdr:000000000000903F                 db    0
.eh_frame_hdr:0000000000009040                 db  94h
.eh_frame_hdr:0000000000009041                 db 0BDh
.eh_frame_hdr:0000000000009042                 db 0FFh
.eh_frame_hdr:0000000000009043                 db 0FFh
.eh_frame_hdr:0000000000009044                 db 0BCh
.eh_frame_hdr:0000000000009045                 db  0Bh
.eh_frame_hdr:0000000000009046                 db    0
.eh_frame_hdr:0000000000009047                 db    0
.eh_frame_hdr:0000000000009048                 db 0A4h
.eh_frame_hdr:0000000000009049                 db 0BDh
.eh_frame_hdr:000000000000904A                 db 0FFh
.eh_frame_hdr:000000000000904B                 db 0FFh
.eh_frame_hdr:000000000000904C                 db 0D0h
.eh_frame_hdr:000000000000904D                 db  0Bh
.eh_frame_hdr:000000000000904E                 db    0
.eh_frame_hdr:000000000000904F                 db    0
.eh_frame_hdr:0000000000009050                 db 0E4h
.eh_frame_hdr:0000000000009051                 db 0BDh
.eh_frame_hdr:0000000000009052                 db 0FFh
.eh_frame_hdr:0000000000009053                 db 0FFh
.eh_frame_hdr:0000000000009054                 db 0F4h
.eh_frame_hdr:0000000000009055                 db  0Bh
.eh_frame_hdr:0000000000009056                 db    0
.eh_frame_hdr:0000000000009057                 db    0
.eh_frame_hdr:0000000000009058                 db  14h
.eh_frame_hdr:0000000000009059                 db 0BEh
.eh_frame_hdr:000000000000905A                 db 0FFh
.eh_frame_hdr:000000000000905B                 db 0FFh
.eh_frame_hdr:000000000000905C                 db    8
.eh_frame_hdr:000000000000905D                 db  0Ch
.eh_frame_hdr:000000000000905E                 db    0
.eh_frame_hdr:000000000000905F                 db    0
.eh_frame_hdr:0000000000009060                 db 0A4h
.eh_frame_hdr:0000000000009061                 db 0BEh
.eh_frame_hdr:0000000000009062                 db 0FFh
.eh_frame_hdr:0000000000009063                 db 0FFh
.eh_frame_hdr:0000000000009064                 db  20h
.eh_frame_hdr:0000000000009065                 db  0Ch
.eh_frame_hdr:0000000000009066                 db    0
.eh_frame_hdr:0000000000009067                 db    0
.eh_frame_hdr:0000000000009068                 db 0F4h
.eh_frame_hdr:0000000000009069                 db 0BEh
.eh_frame_hdr:000000000000906A                 db 0FFh
.eh_frame_hdr:000000000000906B                 db 0FFh
.eh_frame_hdr:000000000000906C                 db  38h ; 8
.eh_frame_hdr:000000000000906D                 db  0Ch
.eh_frame_hdr:000000000000906E                 db    0
.eh_frame_hdr:000000000000906F                 db    0
.eh_frame_hdr:0000000000009070                 db  14h
.eh_frame_hdr:0000000000009071                 db 0BFh
.eh_frame_hdr:0000000000009072                 db 0FFh
.eh_frame_hdr:0000000000009073                 db 0FFh
.eh_frame_hdr:0000000000009074                 db  54h ; T
.eh_frame_hdr:0000000000009075                 db  0Ch
.eh_frame_hdr:0000000000009076                 db    0
.eh_frame_hdr:0000000000009077                 db    0
.eh_frame_hdr:0000000000009078                 db  44h ; D
.eh_frame_hdr:0000000000009079                 db 0BFh
.eh_frame_hdr:000000000000907A                 db 0FFh
.eh_frame_hdr:000000000000907B                 db 0FFh
.eh_frame_hdr:000000000000907C                 db  70h ; p
.eh_frame_hdr:000000000000907D                 db  0Ch
.eh_frame_hdr:000000000000907E                 db    0
.eh_frame_hdr:000000000000907F                 db    0
.eh_frame_hdr:0000000000009080                 db  74h ; t
.eh_frame_hdr:0000000000009081                 db 0BFh
.eh_frame_hdr:0000000000009082                 db 0FFh
.eh_frame_hdr:0000000000009083                 db 0FFh
.eh_frame_hdr:0000000000009084                 db  98h
.eh_frame_hdr:0000000000009085                 db  0Ch
.eh_frame_hdr:0000000000009086                 db    0
.eh_frame_hdr:0000000000009087                 db    0
.eh_frame_hdr:0000000000009088                 db  94h
.eh_frame_hdr:0000000000009089                 db 0BFh
.eh_frame_hdr:000000000000908A                 db 0FFh
.eh_frame_hdr:000000000000908B                 db 0FFh
.eh_frame_hdr:000000000000908C                 db 0B4h
.eh_frame_hdr:000000000000908D                 db  0Ch
.eh_frame_hdr:000000000000908E                 db    0
.eh_frame_hdr:000000000000908F                 db    0
.eh_frame_hdr:0000000000009090                 db 0D4h
.eh_frame_hdr:0000000000009091                 db 0BFh
.eh_frame_hdr:0000000000009092                 db 0FFh
.eh_frame_hdr:0000000000009093                 db 0FFh
.eh_frame_hdr:0000000000009094                 db 0CCh
.eh_frame_hdr:0000000000009095                 db  0Ch
.eh_frame_hdr:0000000000009096                 db    0
.eh_frame_hdr:0000000000009097                 db    0
.eh_frame_hdr:0000000000009098                 db    4
.eh_frame_hdr:0000000000009099                 db 0C0h
.eh_frame_hdr:000000000000909A                 db 0FFh
.eh_frame_hdr:000000000000909B                 db 0FFh
.eh_frame_hdr:000000000000909C                 db 0ECh
.eh_frame_hdr:000000000000909D                 db  0Ch
.eh_frame_hdr:000000000000909E                 db    0
.eh_frame_hdr:000000000000909F                 db    0
.eh_frame_hdr:00000000000090A0                 db  24h ; $
.eh_frame_hdr:00000000000090A1                 db 0C4h
.eh_frame_hdr:00000000000090A2                 db 0FFh
.eh_frame_hdr:00000000000090A3                 db 0FFh
.eh_frame_hdr:00000000000090A4                 db  3Ch ; <
.eh_frame_hdr:00000000000090A5                 db  0Dh
.eh_frame_hdr:00000000000090A6                 db    0
.eh_frame_hdr:00000000000090A7                 db    0
.eh_frame_hdr:00000000000090A8                 db 0E4h
.eh_frame_hdr:00000000000090A9                 db 0C4h
.eh_frame_hdr:00000000000090AA                 db 0FFh
.eh_frame_hdr:00000000000090AB                 db 0FFh
.eh_frame_hdr:00000000000090AC                 db  5Ch ; \
.eh_frame_hdr:00000000000090AD                 db  0Dh
.eh_frame_hdr:00000000000090AE                 db    0
.eh_frame_hdr:00000000000090AF                 db    0
.eh_frame_hdr:00000000000090B0                 db  74h ; t
.eh_frame_hdr:00000000000090B1                 db 0C5h
.eh_frame_hdr:00000000000090B2                 db 0FFh
.eh_frame_hdr:00000000000090B3                 db 0FFh
.eh_frame_hdr:00000000000090B4                 db  9Ch
.eh_frame_hdr:00000000000090B5                 db  0Dh
.eh_frame_hdr:00000000000090B6                 db    0
.eh_frame_hdr:00000000000090B7                 db    0
.eh_frame_hdr:00000000000090B8                 db 0F4h
.eh_frame_hdr:00000000000090B9                 db 0C5h
.eh_frame_hdr:00000000000090BA                 db 0FFh
.eh_frame_hdr:00000000000090BB                 db 0FFh
.eh_frame_hdr:00000000000090BC                 db 0C4h
.eh_frame_hdr:00000000000090BD                 db  0Dh
.eh_frame_hdr:00000000000090BE                 db    0
.eh_frame_hdr:00000000000090BF                 db    0
.eh_frame_hdr:00000000000090C0                 db  14h
.eh_frame_hdr:00000000000090C1                 db 0C6h
.eh_frame_hdr:00000000000090C2                 db 0FFh
.eh_frame_hdr:00000000000090C3                 db 0FFh
.eh_frame_hdr:00000000000090C4                 db 0D8h
.eh_frame_hdr:00000000000090C5                 db  0Dh
.eh_frame_hdr:00000000000090C6                 db    0
.eh_frame_hdr:00000000000090C7                 db    0
.eh_frame_hdr:00000000000090C8                 db  34h ; 4
.eh_frame_hdr:00000000000090C9                 db 0C6h
.eh_frame_hdr:00000000000090CA                 db 0FFh
.eh_frame_hdr:00000000000090CB                 db 0FFh
.eh_frame_hdr:00000000000090CC                 db 0ECh
.eh_frame_hdr:00000000000090CD                 db  0Dh
.eh_frame_hdr:00000000000090CE                 db    0
.eh_frame_hdr:00000000000090CF                 db    0
.eh_frame_hdr:00000000000090D0                 db  44h ; D
.eh_frame_hdr:00000000000090D1                 db 0C8h
.eh_frame_hdr:00000000000090D2                 db 0FFh
.eh_frame_hdr:00000000000090D3                 db 0FFh
.eh_frame_hdr:00000000000090D4                 db  3Ch ; <
.eh_frame_hdr:00000000000090D5                 db  0Eh
.eh_frame_hdr:00000000000090D6                 db    0
.eh_frame_hdr:00000000000090D7                 db    0
.eh_frame_hdr:00000000000090D8                 db 0C4h
.eh_frame_hdr:00000000000090D9                 db 0C8h
.eh_frame_hdr:00000000000090DA                 db 0FFh
.eh_frame_hdr:00000000000090DB                 db 0FFh
.eh_frame_hdr:00000000000090DC                 db  8Ch
.eh_frame_hdr:00000000000090DD                 db  0Eh
.eh_frame_hdr:00000000000090DE                 db    0
.eh_frame_hdr:00000000000090DF                 db    0
.eh_frame_hdr:00000000000090E0                 db  24h ; $
.eh_frame_hdr:00000000000090E1                 db 0C9h
.eh_frame_hdr:00000000000090E2                 db 0FFh
.eh_frame_hdr:00000000000090E3                 db 0FFh
.eh_frame_hdr:00000000000090E4                 db 0ACh
.eh_frame_hdr:00000000000090E5                 db  0Eh
.eh_frame_hdr:00000000000090E6                 db    0
.eh_frame_hdr:00000000000090E7                 db    0
.eh_frame_hdr:00000000000090E8                 db  64h ; d
.eh_frame_hdr:00000000000090E9                 db 0C9h
.eh_frame_hdr:00000000000090EA                 db 0FFh
.eh_frame_hdr:00000000000090EB                 db 0FFh
.eh_frame_hdr:00000000000090EC                 db 0CCh
.eh_frame_hdr:00000000000090ED                 db  0Eh
.eh_frame_hdr:00000000000090EE                 db    0
.eh_frame_hdr:00000000000090EF                 db    0
.eh_frame_hdr:00000000000090F0                 db 0E4h
.eh_frame_hdr:00000000000090F1                 db 0C9h
.eh_frame_hdr:00000000000090F2                 db 0FFh
.eh_frame_hdr:00000000000090F3                 db 0FFh
.eh_frame_hdr:00000000000090F4                 db    4
.eh_frame_hdr:00000000000090F5                 db  0Fh
.eh_frame_hdr:00000000000090F6                 db    0
.eh_frame_hdr:00000000000090F7                 db    0
.eh_frame_hdr:00000000000090F8                 db  24h ; $
.eh_frame_hdr:00000000000090F9                 db 0CAh
.eh_frame_hdr:00000000000090FA                 db 0FFh
.eh_frame_hdr:00000000000090FB                 db 0FFh
.eh_frame_hdr:00000000000090FC                 db  24h ; $
.eh_frame_hdr:00000000000090FD                 db  0Fh
.eh_frame_hdr:00000000000090FE                 db    0
.eh_frame_hdr:00000000000090FF                 db    0
.eh_frame_hdr:0000000000009100                 db  84h
.eh_frame_hdr:0000000000009101                 db 0CAh
.eh_frame_hdr:0000000000009102                 db 0FFh
.eh_frame_hdr:0000000000009103                 db 0FFh
.eh_frame_hdr:0000000000009104                 db  54h ; T
.eh_frame_hdr:0000000000009105                 db  0Fh
.eh_frame_hdr:0000000000009106                 db    0
.eh_frame_hdr:0000000000009107                 db    0
.eh_frame_hdr:0000000000009108                 db 0A4h
.eh_frame_hdr:0000000000009109                 db 0DBh
.eh_frame_hdr:000000000000910A                 db 0FFh
.eh_frame_hdr:000000000000910B                 db 0FFh
.eh_frame_hdr:000000000000910C                 db  84h
.eh_frame_hdr:000000000000910D                 db  0Fh
.eh_frame_hdr:000000000000910E                 db    0
.eh_frame_hdr:000000000000910F                 db    0
.eh_frame_hdr:0000000000009110                 db 0A4h
.eh_frame_hdr:0000000000009111                 db 0DDh
.eh_frame_hdr:0000000000009112                 db 0FFh
.eh_frame_hdr:0000000000009113                 db 0FFh
.eh_frame_hdr:0000000000009114                 db  9Ch
.eh_frame_hdr:0000000000009115                 db  0Fh
.eh_frame_hdr:0000000000009116                 db    0
.eh_frame_hdr:0000000000009117                 db    0
.eh_frame_hdr:0000000000009118                 db  94h
.eh_frame_hdr:0000000000009119                 db 0EAh
.eh_frame_hdr:000000000000911A                 db 0FFh
.eh_frame_hdr:000000000000911B                 db 0FFh
.eh_frame_hdr:000000000000911C                 db 0ECh
.eh_frame_hdr:000000000000911D                 db  0Fh
.eh_frame_hdr:000000000000911E                 db    0
.eh_frame_hdr:000000000000911F                 db    0
.eh_frame_hdr:0000000000009120                 db    4
.eh_frame_hdr:0000000000009121                 db 0EBh
.eh_frame_hdr:0000000000009122                 db 0FFh
.eh_frame_hdr:0000000000009123                 db 0FFh
.eh_frame_hdr:0000000000009124                 db  34h ; 4
.eh_frame_hdr:0000000000009125                 db  10h
.eh_frame_hdr:0000000000009126                 db    0
.eh_frame_hdr:0000000000009127                 db    0
.eh_frame_hdr:0000000000009128                 db  14h
.eh_frame_hdr:0000000000009129                 db 0EBh
.eh_frame_hdr:000000000000912A                 db 0FFh
.eh_frame_hdr:000000000000912B                 db 0FFh
.eh_frame_hdr:000000000000912C                 db  4Ch ; L
.eh_frame_hdr:000000000000912D                 db  10h
.eh_frame_hdr:000000000000912E                 db    0
.eh_frame_hdr:000000000000912F                 db    0
.eh_frame_hdr:000000000000912F _eh_frame_hdr   ends
.eh_frame_hdr:000000000000912F
.eh_frame:0000000000009130 ; ===========================================================================
.eh_frame:0000000000009130
.eh_frame:0000000000009130 ; Segment type: Pure data
.eh_frame:0000000000009130 ; Segment permissions: Read
.eh_frame:0000000000009130 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000009130                 assume cs:_eh_frame
.eh_frame:0000000000009130                 ;org 9130h
.eh_frame:0000000000009130                 db  14h
.eh_frame:0000000000009131                 db    0
.eh_frame:0000000000009132                 db    0
.eh_frame:0000000000009133                 db    0
.eh_frame:0000000000009134                 db    0
.eh_frame:0000000000009135                 db    0
.eh_frame:0000000000009136                 db    0
.eh_frame:0000000000009137                 db    0
.eh_frame:0000000000009138                 db    1
.eh_frame:0000000000009139                 db  7Ah ; z
.eh_frame:000000000000913A                 db  52h ; R
.eh_frame:000000000000913B                 db    0
.eh_frame:000000000000913C                 db    1
.eh_frame:000000000000913D                 db  78h ; x
.eh_frame:000000000000913E                 db  10h
.eh_frame:000000000000913F                 db    1
.eh_frame:0000000000009140                 db  1Bh
.eh_frame:0000000000009141                 db  0Ch
.eh_frame:0000000000009142                 db    7
.eh_frame:0000000000009143                 db    8
.eh_frame:0000000000009144                 db  90h
.eh_frame:0000000000009145                 db    1
.eh_frame:0000000000009146                 db    7
.eh_frame:0000000000009147                 db  10h
.eh_frame:0000000000009148                 db  14h
.eh_frame:0000000000009149                 db    0
.eh_frame:000000000000914A                 db    0
.eh_frame:000000000000914B                 db    0
.eh_frame:000000000000914C                 db  1Ch
.eh_frame:000000000000914D                 db    0
.eh_frame:000000000000914E                 db    0
.eh_frame:000000000000914F                 db    0
.eh_frame:0000000000009150                 db  60h ; `
.eh_frame:0000000000009151                 db  8Eh
.eh_frame:0000000000009152                 db 0FFh
.eh_frame:0000000000009153                 db 0FFh
.eh_frame:0000000000009154                 db  2Bh ; +
.eh_frame:0000000000009155                 db    0
.eh_frame:0000000000009156                 db    0
.eh_frame:0000000000009157                 db    0
.eh_frame:0000000000009158                 db    0
.eh_frame:0000000000009159                 db    0
.eh_frame:000000000000915A                 db    0
.eh_frame:000000000000915B                 db    0
.eh_frame:000000000000915C                 db    0
.eh_frame:000000000000915D                 db    0
.eh_frame:000000000000915E                 db    0
.eh_frame:000000000000915F                 db    0
.eh_frame:0000000000009160                 db  14h
.eh_frame:0000000000009161                 db    0
.eh_frame:0000000000009162                 db    0
.eh_frame:0000000000009163                 db    0
.eh_frame:0000000000009164                 db    0
.eh_frame:0000000000009165                 db    0
.eh_frame:0000000000009166                 db    0
.eh_frame:0000000000009167                 db    0
.eh_frame:0000000000009168                 db    1
.eh_frame:0000000000009169                 db  7Ah ; z
.eh_frame:000000000000916A                 db  52h ; R
.eh_frame:000000000000916B                 db    0
.eh_frame:000000000000916C                 db    1
.eh_frame:000000000000916D                 db  78h ; x
.eh_frame:000000000000916E                 db  10h
.eh_frame:000000000000916F                 db    1
.eh_frame:0000000000009170                 db  1Bh
.eh_frame:0000000000009171                 db  0Ch
.eh_frame:0000000000009172                 db    7
.eh_frame:0000000000009173                 db    8
.eh_frame:0000000000009174                 db  90h
.eh_frame:0000000000009175                 db    1
.eh_frame:0000000000009176                 db    0
.eh_frame:0000000000009177                 db    0
.eh_frame:0000000000009178                 db  24h ; $
.eh_frame:0000000000009179                 db    0
.eh_frame:000000000000917A                 db    0
.eh_frame:000000000000917B                 db    0
.eh_frame:000000000000917C                 db  1Ch
.eh_frame:000000000000917D                 db    0
.eh_frame:000000000000917E                 db    0
.eh_frame:000000000000917F                 db    0
.eh_frame:0000000000009180                 db 0C0h
.eh_frame:0000000000009181                 db  83h
.eh_frame:0000000000009182                 db 0FFh
.eh_frame:0000000000009183                 db 0FFh
.eh_frame:0000000000009184                 db  50h ; P
.eh_frame:0000000000009185                 db    3
.eh_frame:0000000000009186                 db    0
.eh_frame:0000000000009187                 db    0
.eh_frame:0000000000009188                 db    0
.eh_frame:0000000000009189                 db  0Eh
.eh_frame:000000000000918A                 db  10h
.eh_frame:000000000000918B                 db  46h ; F
.eh_frame:000000000000918C                 db  0Eh
.eh_frame:000000000000918D                 db  18h
.eh_frame:000000000000918E                 db  4Ah ; J
.eh_frame:000000000000918F                 db  0Fh
.eh_frame:0000000000009190                 db  0Bh
.eh_frame:0000000000009191                 db  77h ; w
.eh_frame:0000000000009192                 db    8
.eh_frame:0000000000009193                 db  80h
.eh_frame:0000000000009194                 db    0
.eh_frame:0000000000009195                 db  3Fh ; ?
.eh_frame:0000000000009196                 db  1Ah
.eh_frame:0000000000009197                 db  3Bh ; ;
.eh_frame:0000000000009198                 db  2Ah ; *
.eh_frame:0000000000009199                 db  33h ; 3
.eh_frame:000000000000919A                 db  24h ; $
.eh_frame:000000000000919B                 db  22h ; "
.eh_frame:000000000000919C                 db    0
.eh_frame:000000000000919D                 db    0
.eh_frame:000000000000919E                 db    0
.eh_frame:000000000000919F                 db    0
.eh_frame:00000000000091A0                 db  14h
.eh_frame:00000000000091A1                 db    0
.eh_frame:00000000000091A2                 db    0
.eh_frame:00000000000091A3                 db    0
.eh_frame:00000000000091A4                 db  44h ; D
.eh_frame:00000000000091A5                 db    0
.eh_frame:00000000000091A6                 db    0
.eh_frame:00000000000091A7                 db    0
.eh_frame:00000000000091A8                 db 0E8h
.eh_frame:00000000000091A9                 db  86h
.eh_frame:00000000000091AA                 db 0FFh
.eh_frame:00000000000091AB                 db 0FFh
.eh_frame:00000000000091AC                 db    8
.eh_frame:00000000000091AD                 db    0
.eh_frame:00000000000091AE                 db    0
.eh_frame:00000000000091AF                 db    0
.eh_frame:00000000000091B0                 db    0
.eh_frame:00000000000091B1                 db    0
.eh_frame:00000000000091B2                 db    0
.eh_frame:00000000000091B3                 db    0
.eh_frame:00000000000091B4                 db    0
.eh_frame:00000000000091B5                 db    0
.eh_frame:00000000000091B6                 db    0
.eh_frame:00000000000091B7                 db    0
.eh_frame:00000000000091B8                 db  28h ; (
.eh_frame:00000000000091B9                 db    0
.eh_frame:00000000000091BA                 db    0
.eh_frame:00000000000091BB                 db    0
.eh_frame:00000000000091BC                 db  5Ch ; \
.eh_frame:00000000000091BD                 db    0
.eh_frame:00000000000091BE                 db    0
.eh_frame:00000000000091BF                 db    0
.eh_frame:00000000000091C0                 db    0
.eh_frame:00000000000091C1                 db  8Fh
.eh_frame:00000000000091C2                 db 0FFh
.eh_frame:00000000000091C3                 db 0FFh
.eh_frame:00000000000091C4                 db  1Ah
.eh_frame:00000000000091C5                 db    4
.eh_frame:00000000000091C6                 db    0
.eh_frame:00000000000091C7                 db    0
.eh_frame:00000000000091C8                 db    0
.eh_frame:00000000000091C9                 db  42h ; B
.eh_frame:00000000000091CA                 db  0Eh
.eh_frame:00000000000091CB                 db  10h
.eh_frame:00000000000091CC                 db  8Dh
.eh_frame:00000000000091CD                 db    2
.eh_frame:00000000000091CE                 db  42h ; B
.eh_frame:00000000000091CF                 db  0Eh
.eh_frame:00000000000091D0                 db  18h
.eh_frame:00000000000091D1                 db  8Ch
.eh_frame:00000000000091D2                 db    3
.eh_frame:00000000000091D3                 db  46h ; F
.eh_frame:00000000000091D4                 db  0Eh
.eh_frame:00000000000091D5                 db  20h
.eh_frame:00000000000091D6                 db  86h
.eh_frame:00000000000091D7                 db    4
.eh_frame:00000000000091D8                 db  41h ; A
.eh_frame:00000000000091D9                 db  0Eh
.eh_frame:00000000000091DA                 db  28h ; (
.eh_frame:00000000000091DB                 db  83h
.eh_frame:00000000000091DC                 db    5
.eh_frame:00000000000091DD                 db  49h ; I
.eh_frame:00000000000091DE                 db  0Eh
.eh_frame:00000000000091DF                 db 0B0h
.eh_frame:00000000000091E0                 db    1
.eh_frame:00000000000091E1                 db    0
.eh_frame:00000000000091E2                 db    0
.eh_frame:00000000000091E3                 db    0
.eh_frame:00000000000091E4                 db  50h ; P
.eh_frame:00000000000091E5                 db    0
.eh_frame:00000000000091E6                 db    0
.eh_frame:00000000000091E7                 db    0
.eh_frame:00000000000091E8                 db  88h
.eh_frame:00000000000091E9                 db    0
.eh_frame:00000000000091EA                 db    0
.eh_frame:00000000000091EB                 db    0
.eh_frame:00000000000091EC                 db 0B4h
.eh_frame:00000000000091ED                 db  86h
.eh_frame:00000000000091EE                 db 0FFh
.eh_frame:00000000000091EF                 db 0FFh
.eh_frame:00000000000091F0                 db    1
.eh_frame:00000000000091F1                 db    7
.eh_frame:00000000000091F2                 db    0
.eh_frame:00000000000091F3                 db    0
.eh_frame:00000000000091F4                 db    0
.eh_frame:00000000000091F5                 db  42h ; B
.eh_frame:00000000000091F6                 db  0Eh
.eh_frame:00000000000091F7                 db  10h
.eh_frame:00000000000091F8                 db  8Fh
.eh_frame:00000000000091F9                 db    2
.eh_frame:00000000000091FA                 db  42h ; B
.eh_frame:00000000000091FB                 db  0Eh
.eh_frame:00000000000091FC                 db  18h
.eh_frame:00000000000091FD                 db  8Eh
.eh_frame:00000000000091FE                 db    3
.eh_frame:00000000000091FF                 db  4Ch ; L
.eh_frame:0000000000009200                 db  0Eh
.eh_frame:0000000000009201                 db  20h
.eh_frame:0000000000009202                 db  8Dh
.eh_frame:0000000000009203                 db    4
.eh_frame:0000000000009204                 db  42h ; B
.eh_frame:0000000000009205                 db  0Eh
.eh_frame:0000000000009206                 db  28h ; (
.eh_frame:0000000000009207                 db  8Ch
.eh_frame:0000000000009208                 db    5
.eh_frame:0000000000009209                 db  48h ; H
.eh_frame:000000000000920A                 db  0Eh
.eh_frame:000000000000920B                 db  30h ; 0
.eh_frame:000000000000920C                 db  86h
.eh_frame:000000000000920D                 db    6
.eh_frame:000000000000920E                 db  41h ; A
.eh_frame:000000000000920F                 db  0Eh
.eh_frame:0000000000009210                 db  38h ; 8
.eh_frame:0000000000009211                 db  83h
.eh_frame:0000000000009212                 db    7
.eh_frame:0000000000009213                 db  4Ch ; L
.eh_frame:0000000000009214                 db  0Eh
.eh_frame:0000000000009215                 db 0B0h
.eh_frame:0000000000009216                 db    2
.eh_frame:0000000000009217                 db    3
.eh_frame:0000000000009218                 db  53h ; S
.eh_frame:0000000000009219                 db    4
.eh_frame:000000000000921A                 db  0Ah
.eh_frame:000000000000921B                 db  0Eh
.eh_frame:000000000000921C                 db  38h ; 8
.eh_frame:000000000000921D                 db  41h ; A
.eh_frame:000000000000921E                 db  0Eh
.eh_frame:000000000000921F                 db  30h ; 0
.eh_frame:0000000000009220                 db  41h ; A
.eh_frame:0000000000009221                 db  0Eh
.eh_frame:0000000000009222                 db  28h ; (
.eh_frame:0000000000009223                 db  42h ; B
.eh_frame:0000000000009224                 db  0Eh
.eh_frame:0000000000009225                 db  20h
.eh_frame:0000000000009226                 db  42h ; B
.eh_frame:0000000000009227                 db  0Eh
.eh_frame:0000000000009228                 db  18h
.eh_frame:0000000000009229                 db  42h ; B
.eh_frame:000000000000922A                 db  0Eh
.eh_frame:000000000000922B                 db  10h
.eh_frame:000000000000922C                 db  42h ; B
.eh_frame:000000000000922D                 db  0Eh
.eh_frame:000000000000922E                 db    8
.eh_frame:000000000000922F                 db  41h ; A
.eh_frame:0000000000009230                 db  0Bh
.eh_frame:0000000000009231                 db    0
.eh_frame:0000000000009232                 db    0
.eh_frame:0000000000009233                 db    0
.eh_frame:0000000000009234                 db    0
.eh_frame:0000000000009235                 db    0
.eh_frame:0000000000009236                 db    0
.eh_frame:0000000000009237                 db    0
.eh_frame:0000000000009238                 db  10h
.eh_frame:0000000000009239                 db    0
.eh_frame:000000000000923A                 db    0
.eh_frame:000000000000923B                 db    0
.eh_frame:000000000000923C                 db 0DCh
.eh_frame:000000000000923D                 db    0
.eh_frame:000000000000923E                 db    0
.eh_frame:000000000000923F                 db    0
.eh_frame:0000000000009240                 db 0A0h
.eh_frame:0000000000009241                 db  92h
.eh_frame:0000000000009242                 db 0FFh
.eh_frame:0000000000009243                 db 0FFh
.eh_frame:0000000000009244                 db    8
.eh_frame:0000000000009245                 db    0
.eh_frame:0000000000009246                 db    0
.eh_frame:0000000000009247                 db    0
.eh_frame:0000000000009248                 db    0
.eh_frame:0000000000009249                 db    0
.eh_frame:000000000000924A                 db    0
.eh_frame:000000000000924B                 db    0
.eh_frame:000000000000924C                 db  10h
.eh_frame:000000000000924D                 db    0
.eh_frame:000000000000924E                 db    0
.eh_frame:000000000000924F                 db    0
.eh_frame:0000000000009250                 db 0F0h
.eh_frame:0000000000009251                 db    0
.eh_frame:0000000000009252                 db    0
.eh_frame:0000000000009253                 db    0
.eh_frame:0000000000009254                 db  9Ch
.eh_frame:0000000000009255                 db  92h
.eh_frame:0000000000009256                 db 0FFh
.eh_frame:0000000000009257                 db 0FFh
.eh_frame:0000000000009258                 db    8
.eh_frame:0000000000009259                 db    0
.eh_frame:000000000000925A                 db    0
.eh_frame:000000000000925B                 db    0
.eh_frame:000000000000925C                 db    0
.eh_frame:000000000000925D                 db    0
.eh_frame:000000000000925E                 db    0
.eh_frame:000000000000925F                 db    0
.eh_frame:0000000000009260                 db  2Ch ; ,
.eh_frame:0000000000009261                 db    0
.eh_frame:0000000000009262                 db    0
.eh_frame:0000000000009263                 db    0
.eh_frame:0000000000009264                 db    4
.eh_frame:0000000000009265                 db    1
.eh_frame:0000000000009266                 db    0
.eh_frame:0000000000009267                 db    0
.eh_frame:0000000000009268                 db  98h
.eh_frame:0000000000009269                 db  92h
.eh_frame:000000000000926A                 db 0FFh
.eh_frame:000000000000926B                 db 0FFh
.eh_frame:000000000000926C                 db 0A4h
.eh_frame:000000000000926D                 db    0
.eh_frame:000000000000926E                 db    0
.eh_frame:000000000000926F                 db    0
.eh_frame:0000000000009270                 db    0
.eh_frame:0000000000009271                 db  41h ; A
.eh_frame:0000000000009272                 db  0Eh
.eh_frame:0000000000009273                 db  10h
.eh_frame:0000000000009274                 db  86h
.eh_frame:0000000000009275                 db    2
.eh_frame:0000000000009276                 db  41h ; A
.eh_frame:0000000000009277                 db  0Eh
.eh_frame:0000000000009278                 db  18h
.eh_frame:0000000000009279                 db  83h
.eh_frame:000000000000927A                 db    3
.eh_frame:000000000000927B                 db  44h ; D
.eh_frame:000000000000927C                 db  0Eh
.eh_frame:000000000000927D                 db  20h
.eh_frame:000000000000927E                 db  7Ah ; z
.eh_frame:000000000000927F                 db  0Ah
.eh_frame:0000000000009280                 db  0Eh
.eh_frame:0000000000009281                 db  18h
.eh_frame:0000000000009282                 db  41h ; A
.eh_frame:0000000000009283                 db  0Eh
.eh_frame:0000000000009284                 db  10h
.eh_frame:0000000000009285                 db  41h ; A
.eh_frame:0000000000009286                 db  0Eh
.eh_frame:0000000000009287                 db    8
.eh_frame:0000000000009288                 db  41h ; A
.eh_frame:0000000000009289                 db  0Bh
.eh_frame:000000000000928A                 db    0
.eh_frame:000000000000928B                 db    0
.eh_frame:000000000000928C                 db    0
.eh_frame:000000000000928D                 db    0
.eh_frame:000000000000928E                 db    0
.eh_frame:000000000000928F                 db    0
.eh_frame:0000000000009290                 db  1Ch
.eh_frame:0000000000009291                 db    0
.eh_frame:0000000000009292                 db    0
.eh_frame:0000000000009293                 db    0
.eh_frame:0000000000009294                 db  34h ; 4
.eh_frame:0000000000009295                 db    1
.eh_frame:0000000000009296                 db    0
.eh_frame:0000000000009297                 db    0
.eh_frame:0000000000009298                 db  18h
.eh_frame:0000000000009299                 db  93h
.eh_frame:000000000000929A                 db 0FFh
.eh_frame:000000000000929B                 db 0FFh
.eh_frame:000000000000929C                 db  18h
.eh_frame:000000000000929D                 db    0
.eh_frame:000000000000929E                 db    0
.eh_frame:000000000000929F                 db    0
.eh_frame:00000000000092A0                 db    0
.eh_frame:00000000000092A1                 db  44h ; D
.eh_frame:00000000000092A2                 db  0Eh
.eh_frame:00000000000092A3                 db  10h
.eh_frame:00000000000092A4                 db  4Eh ; N
.eh_frame:00000000000092A5                 db  0Ah
.eh_frame:00000000000092A6                 db  0Eh
.eh_frame:00000000000092A7                 db    8
.eh_frame:00000000000092A8                 db  41h ; A
.eh_frame:00000000000092A9                 db  0Bh
.eh_frame:00000000000092AA                 db    0
.eh_frame:00000000000092AB                 db    0
.eh_frame:00000000000092AC                 db    0
.eh_frame:00000000000092AD                 db    0
.eh_frame:00000000000092AE                 db    0
.eh_frame:00000000000092AF                 db    0
.eh_frame:00000000000092B0                 db  30h ; 0
.eh_frame:00000000000092B1                 db    0
.eh_frame:00000000000092B2                 db    0
.eh_frame:00000000000092B3                 db    0
.eh_frame:00000000000092B4                 db  54h ; T
.eh_frame:00000000000092B5                 db    1
.eh_frame:00000000000092B6                 db    0
.eh_frame:00000000000092B7                 db    0
.eh_frame:00000000000092B8                 db  18h
.eh_frame:00000000000092B9                 db  93h
.eh_frame:00000000000092BA                 db 0FFh
.eh_frame:00000000000092BB                 db 0FFh
.eh_frame:00000000000092BC                 db  5Dh ; ]
.eh_frame:00000000000092BD                 db    0
.eh_frame:00000000000092BE                 db    0
.eh_frame:00000000000092BF                 db    0
.eh_frame:00000000000092C0                 db    0
.eh_frame:00000000000092C1                 db  41h ; A
.eh_frame:00000000000092C2                 db  0Eh
.eh_frame:00000000000092C3                 db  10h
.eh_frame:00000000000092C4                 db  86h
.eh_frame:00000000000092C5                 db    2
.eh_frame:00000000000092C6                 db  41h ; A
.eh_frame:00000000000092C7                 db  0Eh
.eh_frame:00000000000092C8                 db  18h
.eh_frame:00000000000092C9                 db  83h
.eh_frame:00000000000092CA                 db    3
.eh_frame:00000000000092CB                 db  49h ; I
.eh_frame:00000000000092CC                 db  0Eh
.eh_frame:00000000000092CD                 db  20h
.eh_frame:00000000000092CE                 db  7Ch ; |
.eh_frame:00000000000092CF                 db  0Ah
.eh_frame:00000000000092D0                 db  0Eh
.eh_frame:00000000000092D1                 db  18h
.eh_frame:00000000000092D2                 db  44h ; D
.eh_frame:00000000000092D3                 db  0Eh
.eh_frame:00000000000092D4                 db  10h
.eh_frame:00000000000092D5                 db  41h ; A
.eh_frame:00000000000092D6                 db  0Eh
.eh_frame:00000000000092D7                 db    8
.eh_frame:00000000000092D8                 db  44h ; D
.eh_frame:00000000000092D9                 db  0Bh
.eh_frame:00000000000092DA                 db  44h ; D
.eh_frame:00000000000092DB                 db  0Eh
.eh_frame:00000000000092DC                 db  18h
.eh_frame:00000000000092DD                 db  47h ; G
.eh_frame:00000000000092DE                 db  0Eh
.eh_frame:00000000000092DF                 db  10h
.eh_frame:00000000000092E0                 db  41h ; A
.eh_frame:00000000000092E1                 db  0Eh
.eh_frame:00000000000092E2                 db    8
.eh_frame:00000000000092E3                 db    0
.eh_frame:00000000000092E4                 db  28h ; (
.eh_frame:00000000000092E5                 db    0
.eh_frame:00000000000092E6                 db    0
.eh_frame:00000000000092E7                 db    0
.eh_frame:00000000000092E8                 db  88h
.eh_frame:00000000000092E9                 db    1
.eh_frame:00000000000092EA                 db    0
.eh_frame:00000000000092EB                 db    0
.eh_frame:00000000000092EC                 db  44h ; D
.eh_frame:00000000000092ED                 db  93h
.eh_frame:00000000000092EE                 db 0FFh
.eh_frame:00000000000092EF                 db 0FFh
.eh_frame:00000000000092F0                 db  5Ah ; Z
.eh_frame:00000000000092F1                 db    0
.eh_frame:00000000000092F2                 db    0
.eh_frame:00000000000092F3                 db    0
.eh_frame:00000000000092F4                 db    0
.eh_frame:00000000000092F5                 db  41h ; A
.eh_frame:00000000000092F6                 db  0Eh
.eh_frame:00000000000092F7                 db  10h
.eh_frame:00000000000092F8                 db  86h
.eh_frame:00000000000092F9                 db    2
.eh_frame:00000000000092FA                 db  41h ; A
.eh_frame:00000000000092FB                 db  0Eh
.eh_frame:00000000000092FC                 db  18h
.eh_frame:00000000000092FD                 db  83h
.eh_frame:00000000000092FE                 db    3
.eh_frame:00000000000092FF                 db  47h ; G
.eh_frame:0000000000009300                 db  0Eh
.eh_frame:0000000000009301                 db  20h
.eh_frame:0000000000009302                 db    2
.eh_frame:0000000000009303                 db  41h ; A
.eh_frame:0000000000009304                 db  0Ah
.eh_frame:0000000000009305                 db  0Eh
.eh_frame:0000000000009306                 db  18h
.eh_frame:0000000000009307                 db  44h ; D
.eh_frame:0000000000009308                 db  0Eh
.eh_frame:0000000000009309                 db  10h
.eh_frame:000000000000930A                 db  41h ; A
.eh_frame:000000000000930B                 db  0Eh
.eh_frame:000000000000930C                 db    8
.eh_frame:000000000000930D                 db  41h ; A
.eh_frame:000000000000930E                 db  0Bh
.eh_frame:000000000000930F                 db    0
.eh_frame:0000000000009310                 db  10h
.eh_frame:0000000000009311                 db    0
.eh_frame:0000000000009312                 db    0
.eh_frame:0000000000009313                 db    0
.eh_frame:0000000000009314                 db 0B4h
.eh_frame:0000000000009315                 db    1
.eh_frame:0000000000009316                 db    0
.eh_frame:0000000000009317                 db    0
.eh_frame:0000000000009318                 db  78h ; x
.eh_frame:0000000000009319                 db  93h
.eh_frame:000000000000931A                 db 0FFh
.eh_frame:000000000000931B                 db 0FFh
.eh_frame:000000000000931C                 db  5Ch ; \
.eh_frame:000000000000931D                 db    0
.eh_frame:000000000000931E                 db    0
.eh_frame:000000000000931F                 db    0
.eh_frame:0000000000009320                 db    0
.eh_frame:0000000000009321                 db    0
.eh_frame:0000000000009322                 db    0
.eh_frame:0000000000009323                 db    0
.eh_frame:0000000000009324                 db  28h ; (
.eh_frame:0000000000009325                 db    0
.eh_frame:0000000000009326                 db    0
.eh_frame:0000000000009327                 db    0
.eh_frame:0000000000009328                 db 0C8h
.eh_frame:0000000000009329                 db    1
.eh_frame:000000000000932A                 db    0
.eh_frame:000000000000932B                 db    0
.eh_frame:000000000000932C                 db 0C4h
.eh_frame:000000000000932D                 db  93h
.eh_frame:000000000000932E                 db 0FFh
.eh_frame:000000000000932F                 db 0FFh
.eh_frame:0000000000009330                 db  47h ; G
.eh_frame:0000000000009331                 db    0
.eh_frame:0000000000009332                 db    0
.eh_frame:0000000000009333                 db    0
.eh_frame:0000000000009334                 db    0
.eh_frame:0000000000009335                 db  41h ; A
.eh_frame:0000000000009336                 db  0Eh
.eh_frame:0000000000009337                 db  10h
.eh_frame:0000000000009338                 db  83h
.eh_frame:0000000000009339                 db    2
.eh_frame:000000000000933A                 db  5Ah ; Z
.eh_frame:000000000000933B                 db  0Ah
.eh_frame:000000000000933C                 db  0Eh
.eh_frame:000000000000933D                 db    8
.eh_frame:000000000000933E                 db  45h ; E
.eh_frame:000000000000933F                 db  0Bh
.eh_frame:0000000000009340                 db  5Dh ; ]
.eh_frame:0000000000009341                 db  0Ah
.eh_frame:0000000000009342                 db  0Eh
.eh_frame:0000000000009343                 db    8
.eh_frame:0000000000009344                 db  43h ; C
.eh_frame:0000000000009345                 db  0Bh
.eh_frame:0000000000009346                 db  46h ; F
.eh_frame:0000000000009347                 db  0Eh
.eh_frame:0000000000009348                 db    8
.eh_frame:0000000000009349                 db    0
.eh_frame:000000000000934A                 db    0
.eh_frame:000000000000934B                 db    0
.eh_frame:000000000000934C                 db    0
.eh_frame:000000000000934D                 db    0
.eh_frame:000000000000934E                 db    0
.eh_frame:000000000000934F                 db    0
.eh_frame:0000000000009350                 db  1Ch
.eh_frame:0000000000009351                 db    0
.eh_frame:0000000000009352                 db    0
.eh_frame:0000000000009353                 db    0
.eh_frame:0000000000009354                 db 0F4h
.eh_frame:0000000000009355                 db    1
.eh_frame:0000000000009356                 db    0
.eh_frame:0000000000009357                 db    0
.eh_frame:0000000000009358                 db 0E8h
.eh_frame:0000000000009359                 db  93h
.eh_frame:000000000000935A                 db 0FFh
.eh_frame:000000000000935B                 db 0FFh
.eh_frame:000000000000935C                 db  18h
.eh_frame:000000000000935D                 db    0
.eh_frame:000000000000935E                 db    0
.eh_frame:000000000000935F                 db    0
.eh_frame:0000000000009360                 db    0
.eh_frame:0000000000009361                 db  44h ; D
.eh_frame:0000000000009362                 db  0Eh
.eh_frame:0000000000009363                 db  10h
.eh_frame:0000000000009364                 db  4Eh ; N
.eh_frame:0000000000009365                 db  0Ah
.eh_frame:0000000000009366                 db  0Eh
.eh_frame:0000000000009367                 db    8
.eh_frame:0000000000009368                 db  41h ; A
.eh_frame:0000000000009369                 db  0Bh
.eh_frame:000000000000936A                 db    0
.eh_frame:000000000000936B                 db    0
.eh_frame:000000000000936C                 db    0
.eh_frame:000000000000936D                 db    0
.eh_frame:000000000000936E                 db    0
.eh_frame:000000000000936F                 db    0
.eh_frame:0000000000009370                 db  4Ch ; L
.eh_frame:0000000000009371                 db    0
.eh_frame:0000000000009372                 db    0
.eh_frame:0000000000009373                 db    0
.eh_frame:0000000000009374                 db  14h
.eh_frame:0000000000009375                 db    2
.eh_frame:0000000000009376                 db    0
.eh_frame:0000000000009377                 db    0
.eh_frame:0000000000009378                 db 0E8h
.eh_frame:0000000000009379                 db  93h
.eh_frame:000000000000937A                 db 0FFh
.eh_frame:000000000000937B                 db 0FFh
.eh_frame:000000000000937C                 db 0FFh
.eh_frame:000000000000937D                 db    0
.eh_frame:000000000000937E                 db    0
.eh_frame:000000000000937F                 db    0
.eh_frame:0000000000009380                 db    0
.eh_frame:0000000000009381                 db  42h ; B
.eh_frame:0000000000009382                 db  0Eh
.eh_frame:0000000000009383                 db  10h
.eh_frame:0000000000009384                 db  8Fh
.eh_frame:0000000000009385                 db    2
.eh_frame:0000000000009386                 db  42h ; B
.eh_frame:0000000000009387                 db  0Eh
.eh_frame:0000000000009388                 db  18h
.eh_frame:0000000000009389                 db  8Eh
.eh_frame:000000000000938A                 db    3
.eh_frame:000000000000938B                 db  45h ; E
.eh_frame:000000000000938C                 db  0Eh
.eh_frame:000000000000938D                 db  20h
.eh_frame:000000000000938E                 db  8Dh
.eh_frame:000000000000938F                 db    4
.eh_frame:0000000000009390                 db  42h ; B
.eh_frame:0000000000009391                 db  0Eh
.eh_frame:0000000000009392                 db  28h ; (
.eh_frame:0000000000009393                 db  8Ch
.eh_frame:0000000000009394                 db    5
.eh_frame:0000000000009395                 db  44h ; D
.eh_frame:0000000000009396                 db  0Eh
.eh_frame:0000000000009397                 db  30h ; 0
.eh_frame:0000000000009398                 db  86h
.eh_frame:0000000000009399                 db    6
.eh_frame:000000000000939A                 db  41h ; A
.eh_frame:000000000000939B                 db  0Eh
.eh_frame:000000000000939C                 db  38h ; 8
.eh_frame:000000000000939D                 db  83h
.eh_frame:000000000000939E                 db    7
.eh_frame:000000000000939F                 db  47h ; G
.eh_frame:00000000000093A0                 db  0Eh
.eh_frame:00000000000093A1                 db  50h ; P
.eh_frame:00000000000093A2                 db    2
.eh_frame:00000000000093A3                 db 0C3h
.eh_frame:00000000000093A4                 db  0Ah
.eh_frame:00000000000093A5                 db  0Eh
.eh_frame:00000000000093A6                 db  38h ; 8
.eh_frame:00000000000093A7                 db  44h ; D
.eh_frame:00000000000093A8                 db  0Eh
.eh_frame:00000000000093A9                 db  30h ; 0
.eh_frame:00000000000093AA                 db  41h ; A
.eh_frame:00000000000093AB                 db  0Eh
.eh_frame:00000000000093AC                 db  28h ; (
.eh_frame:00000000000093AD                 db  42h ; B
.eh_frame:00000000000093AE                 db  0Eh
.eh_frame:00000000000093AF                 db  20h
.eh_frame:00000000000093B0                 db  42h ; B
.eh_frame:00000000000093B1                 db  0Eh
.eh_frame:00000000000093B2                 db  18h
.eh_frame:00000000000093B3                 db  42h ; B
.eh_frame:00000000000093B4                 db  0Eh
.eh_frame:00000000000093B5                 db  10h
.eh_frame:00000000000093B6                 db  42h ; B
.eh_frame:00000000000093B7                 db  0Eh
.eh_frame:00000000000093B8                 db    8
.eh_frame:00000000000093B9                 db  49h ; I
.eh_frame:00000000000093BA                 db  0Bh
.eh_frame:00000000000093BB                 db    0
.eh_frame:00000000000093BC                 db    0
.eh_frame:00000000000093BD                 db    0
.eh_frame:00000000000093BE                 db    0
.eh_frame:00000000000093BF                 db    0
.eh_frame:00000000000093C0                 db  1Ch
.eh_frame:00000000000093C1                 db    0
.eh_frame:00000000000093C2                 db    0
.eh_frame:00000000000093C3                 db    0
.eh_frame:00000000000093C4                 db  64h ; d
.eh_frame:00000000000093C5                 db    2
.eh_frame:00000000000093C6                 db    0
.eh_frame:00000000000093C7                 db    0
.eh_frame:00000000000093C8                 db  98h
.eh_frame:00000000000093C9                 db  94h
.eh_frame:00000000000093CA                 db 0FFh
.eh_frame:00000000000093CB                 db 0FFh
.eh_frame:00000000000093CC                 db  9Fh
.eh_frame:00000000000093CD                 db    0
.eh_frame:00000000000093CE                 db    0
.eh_frame:00000000000093CF                 db    0
.eh_frame:00000000000093D0                 db    0
.eh_frame:00000000000093D1                 db  44h ; D
.eh_frame:00000000000093D2                 db  0Eh
.eh_frame:00000000000093D3                 db  10h
.eh_frame:00000000000093D4                 db  83h
.eh_frame:00000000000093D5                 db    2
.eh_frame:00000000000093D6                 db    2
.eh_frame:00000000000093D7                 db  78h ; x
.eh_frame:00000000000093D8                 db  0Ah
.eh_frame:00000000000093D9                 db  0Eh
.eh_frame:00000000000093DA                 db    8
.eh_frame:00000000000093DB                 db  41h ; A
.eh_frame:00000000000093DC                 db  0Bh
.eh_frame:00000000000093DD                 db    0
.eh_frame:00000000000093DE                 db    0
.eh_frame:00000000000093DF                 db    0
.eh_frame:00000000000093E0                 db  40h ; @
.eh_frame:00000000000093E1                 db    0
.eh_frame:00000000000093E2                 db    0
.eh_frame:00000000000093E3                 db    0
.eh_frame:00000000000093E4                 db  84h
.eh_frame:00000000000093E5                 db    2
.eh_frame:00000000000093E6                 db    0
.eh_frame:00000000000093E7                 db    0
.eh_frame:00000000000093E8                 db  18h
.eh_frame:00000000000093E9                 db  95h
.eh_frame:00000000000093EA                 db 0FFh
.eh_frame:00000000000093EB                 db 0FFh
.eh_frame:00000000000093EC                 db 0E7h
.eh_frame:00000000000093ED                 db    0
.eh_frame:00000000000093EE                 db    0
.eh_frame:00000000000093EF                 db    0
.eh_frame:00000000000093F0                 db    0
.eh_frame:00000000000093F1                 db  41h ; A
.eh_frame:00000000000093F2                 db  0Eh
.eh_frame:00000000000093F3                 db  10h
.eh_frame:00000000000093F4                 db  86h
.eh_frame:00000000000093F5                 db    2
.eh_frame:00000000000093F6                 db  41h ; A
.eh_frame:00000000000093F7                 db  0Eh
.eh_frame:00000000000093F8                 db  18h
.eh_frame:00000000000093F9                 db  83h
.eh_frame:00000000000093FA                 db    3
.eh_frame:00000000000093FB                 db  49h ; I
.eh_frame:00000000000093FC                 db  0Eh
.eh_frame:00000000000093FD                 db  20h
.eh_frame:00000000000093FE                 db  6Eh ; n
.eh_frame:00000000000093FF                 db  0Ah
.eh_frame:0000000000009400                 db  0Eh
.eh_frame:0000000000009401                 db  18h
.eh_frame:0000000000009402                 db  41h ; A
.eh_frame:0000000000009403                 db  0Eh
.eh_frame:0000000000009404                 db  10h
.eh_frame:0000000000009405                 db  41h ; A
.eh_frame:0000000000009406                 db  0Eh
.eh_frame:0000000000009407                 db    8
.eh_frame:0000000000009408                 db  45h ; E
.eh_frame:0000000000009409                 db  0Bh
.eh_frame:000000000000940A                 db    2
.eh_frame:000000000000940B                 db  4Ah ; J
.eh_frame:000000000000940C                 db  0Ah
.eh_frame:000000000000940D                 db  0Eh
.eh_frame:000000000000940E                 db  18h
.eh_frame:000000000000940F                 db  41h ; A
.eh_frame:0000000000009410                 db  0Eh
.eh_frame:0000000000009411                 db  10h
.eh_frame:0000000000009412                 db  41h ; A
.eh_frame:0000000000009413                 db  0Eh
.eh_frame:0000000000009414                 db    8
.eh_frame:0000000000009415                 db  44h ; D
.eh_frame:0000000000009416                 db  0Bh
.eh_frame:0000000000009417                 db    2
.eh_frame:0000000000009418                 db  54h ; T
.eh_frame:0000000000009419                 db  0Eh
.eh_frame:000000000000941A                 db  18h
.eh_frame:000000000000941B                 db  41h ; A
.eh_frame:000000000000941C                 db  0Eh
.eh_frame:000000000000941D                 db  10h
.eh_frame:000000000000941E                 db  41h ; A
.eh_frame:000000000000941F                 db  0Eh
.eh_frame:0000000000009420                 db    8
.eh_frame:0000000000009421                 db    0
.eh_frame:0000000000009422                 db    0
.eh_frame:0000000000009423                 db    0
.eh_frame:0000000000009424                 db  74h ; t
.eh_frame:0000000000009425                 db    0
.eh_frame:0000000000009426                 db    0
.eh_frame:0000000000009427                 db    0
.eh_frame:0000000000009428                 db 0C8h
.eh_frame:0000000000009429                 db    2
.eh_frame:000000000000942A                 db    0
.eh_frame:000000000000942B                 db    0
.eh_frame:000000000000942C                 db 0C4h
.eh_frame:000000000000942D                 db  95h
.eh_frame:000000000000942E                 db 0FFh
.eh_frame:000000000000942F                 db 0FFh
.eh_frame:0000000000009430                 db  34h ; 4
.eh_frame:0000000000009431                 db  12h
.eh_frame:0000000000009432                 db    0
.eh_frame:0000000000009433                 db    0
.eh_frame:0000000000009434                 db    0
.eh_frame:0000000000009435                 db  42h ; B
.eh_frame:0000000000009436                 db  0Eh
.eh_frame:0000000000009437                 db  10h
.eh_frame:0000000000009438                 db  8Fh
.eh_frame:0000000000009439                 db    2
.eh_frame:000000000000943A                 db  42h ; B
.eh_frame:000000000000943B                 db  0Eh
.eh_frame:000000000000943C                 db  18h
.eh_frame:000000000000943D                 db  8Eh
.eh_frame:000000000000943E                 db    3
.eh_frame:000000000000943F                 db  45h ; E
.eh_frame:0000000000009440                 db  0Eh
.eh_frame:0000000000009441                 db  20h
.eh_frame:0000000000009442                 db  8Dh
.eh_frame:0000000000009443                 db    4
.eh_frame:0000000000009444                 db  42h ; B
.eh_frame:0000000000009445                 db  0Eh
.eh_frame:0000000000009446                 db  28h ; (
.eh_frame:0000000000009447                 db  8Ch
.eh_frame:0000000000009448                 db    5
.eh_frame:0000000000009449                 db  44h ; D
.eh_frame:000000000000944A                 db  0Eh
.eh_frame:000000000000944B                 db  30h ; 0
.eh_frame:000000000000944C                 db  86h
.eh_frame:000000000000944D                 db    6
.eh_frame:000000000000944E                 db  41h ; A
.eh_frame:000000000000944F                 db  0Eh
.eh_frame:0000000000009450                 db  38h ; 8
.eh_frame:0000000000009451                 db  83h
.eh_frame:0000000000009452                 db    7
.eh_frame:0000000000009453                 db  53h ; S
.eh_frame:0000000000009454                 db  0Eh
.eh_frame:0000000000009455                 db 0F0h
.eh_frame:0000000000009456                 db    1
.eh_frame:0000000000009457                 db    3
.eh_frame:0000000000009458                 db  81h
.eh_frame:0000000000009459                 db  0Bh
.eh_frame:000000000000945A                 db  0Eh
.eh_frame:000000000000945B                 db 0F8h
.eh_frame:000000000000945C                 db    1
.eh_frame:000000000000945D                 db  4Ah ; J
.eh_frame:000000000000945E                 db  0Eh
.eh_frame:000000000000945F                 db  80h
.eh_frame:0000000000009460                 db    2
.eh_frame:0000000000009461                 db  44h ; D
.eh_frame:0000000000009462                 db  0Eh
.eh_frame:0000000000009463                 db  88h
.eh_frame:0000000000009464                 db    2
.eh_frame:0000000000009465                 db  45h ; E
.eh_frame:0000000000009466                 db  0Eh
.eh_frame:0000000000009467                 db  90h
.eh_frame:0000000000009468                 db    2
.eh_frame:0000000000009469                 db  5Fh ; _
.eh_frame:000000000000946A                 db  0Eh
.eh_frame:000000000000946B                 db 0F0h
.eh_frame:000000000000946C                 db    1
.eh_frame:000000000000946D                 db  64h ; d
.eh_frame:000000000000946E                 db  0Ah
.eh_frame:000000000000946F                 db  0Eh
.eh_frame:0000000000009470                 db  38h ; 8
.eh_frame:0000000000009471                 db  41h ; A
.eh_frame:0000000000009472                 db  0Eh
.eh_frame:0000000000009473                 db  30h ; 0
.eh_frame:0000000000009474                 db  41h ; A
.eh_frame:0000000000009475                 db  0Eh
.eh_frame:0000000000009476                 db  28h ; (
.eh_frame:0000000000009477                 db  42h ; B
.eh_frame:0000000000009478                 db  0Eh
.eh_frame:0000000000009479                 db  20h
.eh_frame:000000000000947A                 db  42h ; B
.eh_frame:000000000000947B                 db  0Eh
.eh_frame:000000000000947C                 db  18h
.eh_frame:000000000000947D                 db  42h ; B
.eh_frame:000000000000947E                 db  0Eh
.eh_frame:000000000000947F                 db  10h
.eh_frame:0000000000009480                 db  42h ; B
.eh_frame:0000000000009481                 db  0Eh
.eh_frame:0000000000009482                 db    8
.eh_frame:0000000000009483                 db  44h ; D
.eh_frame:0000000000009484                 db  0Bh
.eh_frame:0000000000009485                 db    3
.eh_frame:0000000000009486                 db  99h
.eh_frame:0000000000009487                 db    5
.eh_frame:0000000000009488                 db  0Eh
.eh_frame:0000000000009489                 db 0F8h
.eh_frame:000000000000948A                 db    1
.eh_frame:000000000000948B                 db  4Dh ; M
.eh_frame:000000000000948C                 db  0Eh
.eh_frame:000000000000948D                 db  80h
.eh_frame:000000000000948E                 db    2
.eh_frame:000000000000948F                 db  44h ; D
.eh_frame:0000000000009490                 db  0Eh
.eh_frame:0000000000009491                 db  88h
.eh_frame:0000000000009492                 db    2
.eh_frame:0000000000009493                 db  47h ; G
.eh_frame:0000000000009494                 db  0Eh
.eh_frame:0000000000009495                 db  90h
.eh_frame:0000000000009496                 db    2
.eh_frame:0000000000009497                 db  5Bh ; [
.eh_frame:0000000000009498                 db  0Eh
.eh_frame:0000000000009499                 db 0F0h
.eh_frame:000000000000949A                 db    1
.eh_frame:000000000000949B                 db    0
.eh_frame:000000000000949C                 db  68h ; h
.eh_frame:000000000000949D                 db    0
.eh_frame:000000000000949E                 db    0
.eh_frame:000000000000949F                 db    0
.eh_frame:00000000000094A0                 db  40h ; @
.eh_frame:00000000000094A1                 db    3
.eh_frame:00000000000094A2                 db    0
.eh_frame:00000000000094A3                 db    0
.eh_frame:00000000000094A4                 db  8Ch
.eh_frame:00000000000094A5                 db 0A7h
.eh_frame:00000000000094A6                 db 0FFh
.eh_frame:00000000000094A7                 db 0FFh
.eh_frame:00000000000094A8                 db 0ABh
.eh_frame:00000000000094A9                 db    1
.eh_frame:00000000000094AA                 db    0
.eh_frame:00000000000094AB                 db    0
.eh_frame:00000000000094AC                 db    0
.eh_frame:00000000000094AD                 db  42h ; B
.eh_frame:00000000000094AE                 db  0Eh
.eh_frame:00000000000094AF                 db  10h
.eh_frame:00000000000094B0                 db  8Fh
.eh_frame:00000000000094B1                 db    2
.eh_frame:00000000000094B2                 db  42h ; B
.eh_frame:00000000000094B3                 db  0Eh
.eh_frame:00000000000094B4                 db  18h
.eh_frame:00000000000094B5                 db  8Eh
.eh_frame:00000000000094B6                 db    3
.eh_frame:00000000000094B7                 db  45h ; E
.eh_frame:00000000000094B8                 db  0Eh
.eh_frame:00000000000094B9                 db  20h
.eh_frame:00000000000094BA                 db  8Dh
.eh_frame:00000000000094BB                 db    4
.eh_frame:00000000000094BC                 db  42h ; B
.eh_frame:00000000000094BD                 db  0Eh
.eh_frame:00000000000094BE                 db  28h ; (
.eh_frame:00000000000094BF                 db  8Ch
.eh_frame:00000000000094C0                 db    5
.eh_frame:00000000000094C1                 db  44h ; D
.eh_frame:00000000000094C2                 db  0Eh
.eh_frame:00000000000094C3                 db  30h ; 0
.eh_frame:00000000000094C4                 db  86h
.eh_frame:00000000000094C5                 db    6
.eh_frame:00000000000094C6                 db  41h ; A
.eh_frame:00000000000094C7                 db  0Eh
.eh_frame:00000000000094C8                 db  38h ; 8
.eh_frame:00000000000094C9                 db  83h
.eh_frame:00000000000094CA                 db    7
.eh_frame:00000000000094CB                 db  47h ; G
.eh_frame:00000000000094CC                 db  0Eh
.eh_frame:00000000000094CD                 db  60h ; `
.eh_frame:00000000000094CE                 db    2
.eh_frame:00000000000094CF                 db  99h
.eh_frame:00000000000094D0                 db  0Eh
.eh_frame:00000000000094D1                 db  68h ; h
.eh_frame:00000000000094D2                 db  5Fh ; _
.eh_frame:00000000000094D3                 db  0Eh
.eh_frame:00000000000094D4                 db  70h ; p
.eh_frame:00000000000094D5                 db  46h ; F
.eh_frame:00000000000094D6                 db  0Eh
.eh_frame:00000000000094D7                 db  78h ; x
.eh_frame:00000000000094D8                 db  42h ; B
.eh_frame:00000000000094D9                 db  0Eh
.eh_frame:00000000000094DA                 db  80h
.eh_frame:00000000000094DB                 db    1
.eh_frame:00000000000094DC                 db  59h ; Y
.eh_frame:00000000000094DD                 db  0Eh
.eh_frame:00000000000094DE                 db  60h ; `
.eh_frame:00000000000094DF                 db    2
.eh_frame:00000000000094E0                 db  40h ; @
.eh_frame:00000000000094E1                 db  0Eh
.eh_frame:00000000000094E2                 db  68h ; h
.eh_frame:00000000000094E3                 db  4Bh ; K
.eh_frame:00000000000094E4                 db  0Eh
.eh_frame:00000000000094E5                 db  70h ; p
.eh_frame:00000000000094E6                 db  43h ; C
.eh_frame:00000000000094E7                 db  0Eh
.eh_frame:00000000000094E8                 db  78h ; x
.eh_frame:00000000000094E9                 db  45h ; E
.eh_frame:00000000000094EA                 db  0Eh
.eh_frame:00000000000094EB                 db  80h
.eh_frame:00000000000094EC                 db    1
.eh_frame:00000000000094ED                 db  5Eh ; ^
.eh_frame:00000000000094EE                 db  0Eh
.eh_frame:00000000000094EF                 db  60h ; `
.eh_frame:00000000000094F0                 db  4Ch ; L
.eh_frame:00000000000094F1                 db  0Ah
.eh_frame:00000000000094F2                 db  0Eh
.eh_frame:00000000000094F3                 db  38h ; 8
.eh_frame:00000000000094F4                 db  44h ; D
.eh_frame:00000000000094F5                 db  0Eh
.eh_frame:00000000000094F6                 db  30h ; 0
.eh_frame:00000000000094F7                 db  41h ; A
.eh_frame:00000000000094F8                 db  0Eh
.eh_frame:00000000000094F9                 db  28h ; (
.eh_frame:00000000000094FA                 db  42h ; B
.eh_frame:00000000000094FB                 db  0Eh
.eh_frame:00000000000094FC                 db  20h
.eh_frame:00000000000094FD                 db  42h ; B
.eh_frame:00000000000094FE                 db  0Eh
.eh_frame:00000000000094FF                 db  18h
.eh_frame:0000000000009500                 db  42h ; B
.eh_frame:0000000000009501                 db  0Eh
.eh_frame:0000000000009502                 db  10h
.eh_frame:0000000000009503                 db  42h ; B
.eh_frame:0000000000009504                 db  0Eh
.eh_frame:0000000000009505                 db    8
.eh_frame:0000000000009506                 db  46h ; F
.eh_frame:0000000000009507                 db  0Bh
.eh_frame:0000000000009508                 db  28h ; (
.eh_frame:0000000000009509                 db    0
.eh_frame:000000000000950A                 db    0
.eh_frame:000000000000950B                 db    0
.eh_frame:000000000000950C                 db 0ACh
.eh_frame:000000000000950D                 db    3
.eh_frame:000000000000950E                 db    0
.eh_frame:000000000000950F                 db    0
.eh_frame:0000000000009510                 db 0D0h
.eh_frame:0000000000009511                 db 0A8h
.eh_frame:0000000000009512                 db 0FFh
.eh_frame:0000000000009513                 db 0FFh
.eh_frame:0000000000009514                 db  36h ; 6
.eh_frame:0000000000009515                 db    0
.eh_frame:0000000000009516                 db    0
.eh_frame:0000000000009517                 db    0
.eh_frame:0000000000009518                 db    0
.eh_frame:0000000000009519                 db  42h ; B
.eh_frame:000000000000951A                 db  0Eh
.eh_frame:000000000000951B                 db  10h
.eh_frame:000000000000951C                 db  8Ch
.eh_frame:000000000000951D                 db    2
.eh_frame:000000000000951E                 db  41h ; A
.eh_frame:000000000000951F                 db  0Eh
.eh_frame:0000000000009520                 db  18h
.eh_frame:0000000000009521                 db  86h
.eh_frame:0000000000009522                 db    3
.eh_frame:0000000000009523                 db  41h ; A
.eh_frame:0000000000009524                 db  0Eh
.eh_frame:0000000000009525                 db  20h
.eh_frame:0000000000009526                 db  83h
.eh_frame:0000000000009527                 db    4
.eh_frame:0000000000009528                 db  6Eh ; n
.eh_frame:0000000000009529                 db  0Eh
.eh_frame:000000000000952A                 db  18h
.eh_frame:000000000000952B                 db  41h ; A
.eh_frame:000000000000952C                 db  0Eh
.eh_frame:000000000000952D                 db  10h
.eh_frame:000000000000952E                 db  42h ; B
.eh_frame:000000000000952F                 db  0Eh
.eh_frame:0000000000009530                 db    8
.eh_frame:0000000000009531                 db    0
.eh_frame:0000000000009532                 db    0
.eh_frame:0000000000009533                 db    0
.eh_frame:0000000000009534                 db  10h
.eh_frame:0000000000009535                 db    0
.eh_frame:0000000000009536                 db    0
.eh_frame:0000000000009537                 db    0
.eh_frame:0000000000009538                 db 0D8h
.eh_frame:0000000000009539                 db    3
.eh_frame:000000000000953A                 db    0
.eh_frame:000000000000953B                 db    0
.eh_frame:000000000000953C                 db 0E4h
.eh_frame:000000000000953D                 db 0A8h
.eh_frame:000000000000953E                 db 0FFh
.eh_frame:000000000000953F                 db 0FFh
.eh_frame:0000000000009540                 db  11h
.eh_frame:0000000000009541                 db    0
.eh_frame:0000000000009542                 db    0
.eh_frame:0000000000009543                 db    0
.eh_frame:0000000000009544                 db    0
.eh_frame:0000000000009545                 db    0
.eh_frame:0000000000009546                 db    0
.eh_frame:0000000000009547                 db    0
.eh_frame:0000000000009548                 db  10h
.eh_frame:0000000000009549                 db    0
.eh_frame:000000000000954A                 db    0
.eh_frame:000000000000954B                 db    0
.eh_frame:000000000000954C                 db 0ECh
.eh_frame:000000000000954D                 db    3
.eh_frame:000000000000954E                 db    0
.eh_frame:000000000000954F                 db    0
.eh_frame:0000000000009550                 db 0F0h
.eh_frame:0000000000009551                 db 0A8h
.eh_frame:0000000000009552                 db 0FFh
.eh_frame:0000000000009553                 db 0FFh
.eh_frame:0000000000009554                 db  11h
.eh_frame:0000000000009555                 db    0
.eh_frame:0000000000009556                 db    0
.eh_frame:0000000000009557                 db    0
.eh_frame:0000000000009558                 db    0
.eh_frame:0000000000009559                 db    0
.eh_frame:000000000000955A                 db    0
.eh_frame:000000000000955B                 db    0
.eh_frame:000000000000955C                 db  10h
.eh_frame:000000000000955D                 db    0
.eh_frame:000000000000955E                 db    0
.eh_frame:000000000000955F                 db    0
.eh_frame:0000000000009560                 db    0
.eh_frame:0000000000009561                 db    4
.eh_frame:0000000000009562                 db    0
.eh_frame:0000000000009563                 db    0
.eh_frame:0000000000009564                 db 0FCh
.eh_frame:0000000000009565                 db 0A8h
.eh_frame:0000000000009566                 db 0FFh
.eh_frame:0000000000009567                 db 0FFh
.eh_frame:0000000000009568                 db  35h ; 5
.eh_frame:0000000000009569                 db    0
.eh_frame:000000000000956A                 db    0
.eh_frame:000000000000956B                 db    0
.eh_frame:000000000000956C                 db    0
.eh_frame:000000000000956D                 db    0
.eh_frame:000000000000956E                 db    0
.eh_frame:000000000000956F                 db    0
.eh_frame:0000000000009570                 db  10h
.eh_frame:0000000000009571                 db    0
.eh_frame:0000000000009572                 db    0
.eh_frame:0000000000009573                 db    0
.eh_frame:0000000000009574                 db  14h
.eh_frame:0000000000009575                 db    4
.eh_frame:0000000000009576                 db    0
.eh_frame:0000000000009577                 db    0
.eh_frame:0000000000009578                 db  28h ; (
.eh_frame:0000000000009579                 db 0A9h
.eh_frame:000000000000957A                 db 0FFh
.eh_frame:000000000000957B                 db 0FFh
.eh_frame:000000000000957C                 db  15h
.eh_frame:000000000000957D                 db    0
.eh_frame:000000000000957E                 db    0
.eh_frame:000000000000957F                 db    0
.eh_frame:0000000000009580                 db    0
.eh_frame:0000000000009581                 db    0
.eh_frame:0000000000009582                 db    0
.eh_frame:0000000000009583                 db    0
.eh_frame:0000000000009584                 db  10h
.eh_frame:0000000000009585                 db    0
.eh_frame:0000000000009586                 db    0
.eh_frame:0000000000009587                 db    0
.eh_frame:0000000000009588                 db  28h ; (
.eh_frame:0000000000009589                 db    4
.eh_frame:000000000000958A                 db    0
.eh_frame:000000000000958B                 db    0
.eh_frame:000000000000958C                 db  34h ; 4
.eh_frame:000000000000958D                 db 0A9h
.eh_frame:000000000000958E                 db 0FFh
.eh_frame:000000000000958F                 db 0FFh
.eh_frame:0000000000009590                 db  30h ; 0
.eh_frame:0000000000009591                 db    0
.eh_frame:0000000000009592                 db    0
.eh_frame:0000000000009593                 db    0
.eh_frame:0000000000009594                 db    0
.eh_frame:0000000000009595                 db  6Bh ; k
.eh_frame:0000000000009596                 db  0Eh
.eh_frame:0000000000009597                 db  10h
.eh_frame:0000000000009598                 db  50h ; P
.eh_frame:0000000000009599                 db    0
.eh_frame:000000000000959A                 db    0
.eh_frame:000000000000959B                 db    0
.eh_frame:000000000000959C                 db  3Ch ; <
.eh_frame:000000000000959D                 db    4
.eh_frame:000000000000959E                 db    0
.eh_frame:000000000000959F                 db    0
.eh_frame:00000000000095A0                 db  50h ; P
.eh_frame:00000000000095A1                 db 0A9h
.eh_frame:00000000000095A2                 db 0FFh
.eh_frame:00000000000095A3                 db 0FFh
.eh_frame:00000000000095A4                 db  74h ; t
.eh_frame:00000000000095A5                 db    0
.eh_frame:00000000000095A6                 db    0
.eh_frame:00000000000095A7                 db    0
.eh_frame:00000000000095A8                 db    0
.eh_frame:00000000000095A9                 db  42h ; B
.eh_frame:00000000000095AA                 db  0Eh
.eh_frame:00000000000095AB                 db  10h
.eh_frame:00000000000095AC                 db  8Fh
.eh_frame:00000000000095AD                 db    2
.eh_frame:00000000000095AE                 db  42h ; B
.eh_frame:00000000000095AF                 db  0Eh
.eh_frame:00000000000095B0                 db  18h
.eh_frame:00000000000095B1                 db  8Eh
.eh_frame:00000000000095B2                 db    3
.eh_frame:00000000000095B3                 db  49h ; I
.eh_frame:00000000000095B4                 db  0Eh
.eh_frame:00000000000095B5                 db  20h
.eh_frame:00000000000095B6                 db  8Dh
.eh_frame:00000000000095B7                 db    4
.eh_frame:00000000000095B8                 db  42h ; B
.eh_frame:00000000000095B9                 db  0Eh
.eh_frame:00000000000095BA                 db  28h ; (
.eh_frame:00000000000095BB                 db  8Ch
.eh_frame:00000000000095BC                 db    5
.eh_frame:00000000000095BD                 db  44h ; D
.eh_frame:00000000000095BE                 db  0Eh
.eh_frame:00000000000095BF                 db  30h ; 0
.eh_frame:00000000000095C0                 db  86h
.eh_frame:00000000000095C1                 db    6
.eh_frame:00000000000095C2                 db  41h ; A
.eh_frame:00000000000095C3                 db  0Eh
.eh_frame:00000000000095C4                 db  38h ; 8
.eh_frame:00000000000095C5                 db  83h
.eh_frame:00000000000095C6                 db    7
.eh_frame:00000000000095C7                 db  4Dh ; M
.eh_frame:00000000000095C8                 db  0Eh
.eh_frame:00000000000095C9                 db  50h ; P
.eh_frame:00000000000095CA                 db  5Fh ; _
.eh_frame:00000000000095CB                 db  0Eh
.eh_frame:00000000000095CC                 db  58h ; X
.eh_frame:00000000000095CD                 db  47h ; G
.eh_frame:00000000000095CE                 db  0Eh
.eh_frame:00000000000095CF                 db  60h ; `
.eh_frame:00000000000095D0                 db  46h ; F
.eh_frame:00000000000095D1                 db  0Eh
.eh_frame:00000000000095D2                 db  68h ; h
.eh_frame:00000000000095D3                 db  44h ; D
.eh_frame:00000000000095D4                 db  0Eh
.eh_frame:00000000000095D5                 db  70h ; p
.eh_frame:00000000000095D6                 db  58h ; X
.eh_frame:00000000000095D7                 db  0Eh
.eh_frame:00000000000095D8                 db  38h ; 8
.eh_frame:00000000000095D9                 db  41h ; A
.eh_frame:00000000000095DA                 db  0Eh
.eh_frame:00000000000095DB                 db  30h ; 0
.eh_frame:00000000000095DC                 db  41h ; A
.eh_frame:00000000000095DD                 db  0Eh
.eh_frame:00000000000095DE                 db  28h ; (
.eh_frame:00000000000095DF                 db  42h ; B
.eh_frame:00000000000095E0                 db  0Eh
.eh_frame:00000000000095E1                 db  20h
.eh_frame:00000000000095E2                 db  42h ; B
.eh_frame:00000000000095E3                 db  0Eh
.eh_frame:00000000000095E4                 db  18h
.eh_frame:00000000000095E5                 db  42h ; B
.eh_frame:00000000000095E6                 db  0Eh
.eh_frame:00000000000095E7                 db  10h
.eh_frame:00000000000095E8                 db  42h ; B
.eh_frame:00000000000095E9                 db  0Eh
.eh_frame:00000000000095EA                 db    8
.eh_frame:00000000000095EB                 db    0
.eh_frame:00000000000095EC                 db  68h ; h
.eh_frame:00000000000095ED                 db    0
.eh_frame:00000000000095EE                 db    0
.eh_frame:00000000000095EF                 db    0
.eh_frame:00000000000095F0                 db  90h
.eh_frame:00000000000095F1                 db    4
.eh_frame:00000000000095F2                 db    0
.eh_frame:00000000000095F3                 db    0
.eh_frame:00000000000095F4                 db  7Ch ; |
.eh_frame:00000000000095F5                 db 0A9h
.eh_frame:00000000000095F6                 db 0FFh
.eh_frame:00000000000095F7                 db 0FFh
.eh_frame:00000000000095F8                 db 0E3h
.eh_frame:00000000000095F9                 db    0
.eh_frame:00000000000095FA                 db    0
.eh_frame:00000000000095FB                 db    0
.eh_frame:00000000000095FC                 db    0
.eh_frame:00000000000095FD                 db  42h ; B
.eh_frame:00000000000095FE                 db  0Eh
.eh_frame:00000000000095FF                 db  10h
.eh_frame:0000000000009600                 db  8Fh
.eh_frame:0000000000009601                 db    2
.eh_frame:0000000000009602                 db  42h ; B
.eh_frame:0000000000009603                 db  0Eh
.eh_frame:0000000000009604                 db  18h
.eh_frame:0000000000009605                 db  8Eh
.eh_frame:0000000000009606                 db    3
.eh_frame:0000000000009607                 db  49h ; I
.eh_frame:0000000000009608                 db  0Eh
.eh_frame:0000000000009609                 db  20h
.eh_frame:000000000000960A                 db  8Dh
.eh_frame:000000000000960B                 db    4
.eh_frame:000000000000960C                 db  42h ; B
.eh_frame:000000000000960D                 db  0Eh
.eh_frame:000000000000960E                 db  28h ; (
.eh_frame:000000000000960F                 db  8Ch
.eh_frame:0000000000009610                 db    5
.eh_frame:0000000000009611                 db  44h ; D
.eh_frame:0000000000009612                 db  0Eh
.eh_frame:0000000000009613                 db  30h ; 0
.eh_frame:0000000000009614                 db  86h
.eh_frame:0000000000009615                 db    6
.eh_frame:0000000000009616                 db  41h ; A
.eh_frame:0000000000009617                 db  0Eh
.eh_frame:0000000000009618                 db  38h ; 8
.eh_frame:0000000000009619                 db  83h
.eh_frame:000000000000961A                 db    7
.eh_frame:000000000000961B                 db  4Dh ; M
.eh_frame:000000000000961C                 db  0Eh
.eh_frame:000000000000961D                 db  70h ; p
.eh_frame:000000000000961E                 db  65h ; e
.eh_frame:000000000000961F                 db  0Eh
.eh_frame:0000000000009620                 db  78h ; x
.eh_frame:0000000000009621                 db  4Dh ; M
.eh_frame:0000000000009622                 db  0Eh
.eh_frame:0000000000009623                 db  80h
.eh_frame:0000000000009624                 db    1
.eh_frame:0000000000009625                 db  46h ; F
.eh_frame:0000000000009626                 db  0Eh
.eh_frame:0000000000009627                 db  88h
.eh_frame:0000000000009628                 db    1
.eh_frame:0000000000009629                 db  42h ; B
.eh_frame:000000000000962A                 db  0Eh
.eh_frame:000000000000962B                 db  90h
.eh_frame:000000000000962C                 db    1
.eh_frame:000000000000962D                 db  5Eh ; ^
.eh_frame:000000000000962E                 db  0Eh
.eh_frame:000000000000962F                 db  70h ; p
.eh_frame:0000000000009630                 db  56h ; V
.eh_frame:0000000000009631                 db  0Eh
.eh_frame:0000000000009632                 db  78h ; x
.eh_frame:0000000000009633                 db  43h ; C
.eh_frame:0000000000009634                 db  0Eh
.eh_frame:0000000000009635                 db  80h
.eh_frame:0000000000009636                 db    1
.eh_frame:0000000000009637                 db  43h ; C
.eh_frame:0000000000009638                 db  0Eh
.eh_frame:0000000000009639                 db  88h
.eh_frame:000000000000963A                 db    1
.eh_frame:000000000000963B                 db  56h ; V
.eh_frame:000000000000963C                 db  0Eh
.eh_frame:000000000000963D                 db  90h
.eh_frame:000000000000963E                 db    1
.eh_frame:000000000000963F                 db  52h ; R
.eh_frame:0000000000009640                 db  0Eh
.eh_frame:0000000000009641                 db  70h ; p
.eh_frame:0000000000009642                 db  5Bh ; [
.eh_frame:0000000000009643                 db  0Eh
.eh_frame:0000000000009644                 db  38h ; 8
.eh_frame:0000000000009645                 db  41h ; A
.eh_frame:0000000000009646                 db  0Eh
.eh_frame:0000000000009647                 db  30h ; 0
.eh_frame:0000000000009648                 db  41h ; A
.eh_frame:0000000000009649                 db  0Eh
.eh_frame:000000000000964A                 db  28h ; (
.eh_frame:000000000000964B                 db  42h ; B
.eh_frame:000000000000964C                 db  0Eh
.eh_frame:000000000000964D                 db  20h
.eh_frame:000000000000964E                 db  42h ; B
.eh_frame:000000000000964F                 db  0Eh
.eh_frame:0000000000009650                 db  18h
.eh_frame:0000000000009651                 db  42h ; B
.eh_frame:0000000000009652                 db  0Eh
.eh_frame:0000000000009653                 db  10h
.eh_frame:0000000000009654                 db  42h ; B
.eh_frame:0000000000009655                 db  0Eh
.eh_frame:0000000000009656                 db    8
.eh_frame:0000000000009657                 db    0
.eh_frame:0000000000009658                 db  10h
.eh_frame:0000000000009659                 db    0
.eh_frame:000000000000965A                 db    0
.eh_frame:000000000000965B                 db    0
.eh_frame:000000000000965C                 db 0FCh
.eh_frame:000000000000965D                 db    4
.eh_frame:000000000000965E                 db    0
.eh_frame:000000000000965F                 db    0
.eh_frame:0000000000009660                 db    0
.eh_frame:0000000000009661                 db 0AAh
.eh_frame:0000000000009662                 db 0FFh
.eh_frame:0000000000009663                 db 0FFh
.eh_frame:0000000000009664                 db  0Ah
.eh_frame:0000000000009665                 db    0
.eh_frame:0000000000009666                 db    0
.eh_frame:0000000000009667                 db    0
.eh_frame:0000000000009668                 db    0
.eh_frame:0000000000009669                 db    0
.eh_frame:000000000000966A                 db    0
.eh_frame:000000000000966B                 db    0
.eh_frame:000000000000966C                 db  28h ; (
.eh_frame:000000000000966D                 db    0
.eh_frame:000000000000966E                 db    0
.eh_frame:000000000000966F                 db    0
.eh_frame:0000000000009670                 db  10h
.eh_frame:0000000000009671                 db    5
.eh_frame:0000000000009672                 db    0
.eh_frame:0000000000009673                 db    0
.eh_frame:0000000000009674                 db 0FCh
.eh_frame:0000000000009675                 db 0A9h
.eh_frame:0000000000009676                 db 0FFh
.eh_frame:0000000000009677                 db 0FFh
.eh_frame:0000000000009678                 db  93h
.eh_frame:0000000000009679                 db    0
.eh_frame:000000000000967A                 db    0
.eh_frame:000000000000967B                 db    0
.eh_frame:000000000000967C                 db    0
.eh_frame:000000000000967D                 db  48h ; H
.eh_frame:000000000000967E                 db  0Eh
.eh_frame:000000000000967F                 db  10h
.eh_frame:0000000000009680                 db  8Ch
.eh_frame:0000000000009681                 db    2
.eh_frame:0000000000009682                 db  48h ; H
.eh_frame:0000000000009683                 db  0Eh
.eh_frame:0000000000009684                 db  18h
.eh_frame:0000000000009685                 db  86h
.eh_frame:0000000000009686                 db    3
.eh_frame:0000000000009687                 db  41h ; A
.eh_frame:0000000000009688                 db  0Eh
.eh_frame:0000000000009689                 db  20h
.eh_frame:000000000000968A                 db  83h
.eh_frame:000000000000968B                 db    4
.eh_frame:000000000000968C                 db    2
.eh_frame:000000000000968D                 db  74h ; t
.eh_frame:000000000000968E                 db  0Eh
.eh_frame:000000000000968F                 db  18h
.eh_frame:0000000000009690                 db  4Bh ; K
.eh_frame:0000000000009691                 db  0Eh
.eh_frame:0000000000009692                 db  10h
.eh_frame:0000000000009693                 db  42h ; B
.eh_frame:0000000000009694                 db  0Eh
.eh_frame:0000000000009695                 db    8
.eh_frame:0000000000009696                 db    0
.eh_frame:0000000000009697                 db    0
.eh_frame:0000000000009698                 db  10h
.eh_frame:0000000000009699                 db    0
.eh_frame:000000000000969A                 db    0
.eh_frame:000000000000969B                 db    0
.eh_frame:000000000000969C                 db  3Ch ; <
.eh_frame:000000000000969D                 db    5
.eh_frame:000000000000969E                 db    0
.eh_frame:000000000000969F                 db    0
.eh_frame:00000000000096A0                 db  70h ; p
.eh_frame:00000000000096A1                 db 0AAh
.eh_frame:00000000000096A2                 db 0FFh
.eh_frame:00000000000096A3                 db 0FFh
.eh_frame:00000000000096A4                 db  13h
.eh_frame:00000000000096A5                 db    0
.eh_frame:00000000000096A6                 db    0
.eh_frame:00000000000096A7                 db    0
.eh_frame:00000000000096A8                 db    0
.eh_frame:00000000000096A9                 db    0
.eh_frame:00000000000096AA                 db    0
.eh_frame:00000000000096AB                 db    0
.eh_frame:00000000000096AC                 db  10h
.eh_frame:00000000000096AD                 db    0
.eh_frame:00000000000096AE                 db    0
.eh_frame:00000000000096AF                 db    0
.eh_frame:00000000000096B0                 db  50h ; P
.eh_frame:00000000000096B1                 db    5
.eh_frame:00000000000096B2                 db    0
.eh_frame:00000000000096B3                 db    0
.eh_frame:00000000000096B4                 db  7Ch ; |
.eh_frame:00000000000096B5                 db 0AAh
.eh_frame:00000000000096B6                 db 0FFh
.eh_frame:00000000000096B7                 db 0FFh
.eh_frame:00000000000096B8                 db  0Ch
.eh_frame:00000000000096B9                 db    0
.eh_frame:00000000000096BA                 db    0
.eh_frame:00000000000096BB                 db    0
.eh_frame:00000000000096BC                 db    0
.eh_frame:00000000000096BD                 db    0
.eh_frame:00000000000096BE                 db    0
.eh_frame:00000000000096BF                 db    0
.eh_frame:00000000000096C0                 db  10h
.eh_frame:00000000000096C1                 db    0
.eh_frame:00000000000096C2                 db    0
.eh_frame:00000000000096C3                 db    0
.eh_frame:00000000000096C4                 db  64h ; d
.eh_frame:00000000000096C5                 db    5
.eh_frame:00000000000096C6                 db    0
.eh_frame:00000000000096C7                 db    0
.eh_frame:00000000000096C8                 db  78h ; x
.eh_frame:00000000000096C9                 db 0AAh
.eh_frame:00000000000096CA                 db 0FFh
.eh_frame:00000000000096CB                 db 0FFh
.eh_frame:00000000000096CC                 db  18h
.eh_frame:00000000000096CD                 db    0
.eh_frame:00000000000096CE                 db    0
.eh_frame:00000000000096CF                 db    0
.eh_frame:00000000000096D0                 db    0
.eh_frame:00000000000096D1                 db    0
.eh_frame:00000000000096D2                 db    0
.eh_frame:00000000000096D3                 db    0
.eh_frame:00000000000096D4                 db  10h
.eh_frame:00000000000096D5                 db    0
.eh_frame:00000000000096D6                 db    0
.eh_frame:00000000000096D7                 db    0
.eh_frame:00000000000096D8                 db  78h ; x
.eh_frame:00000000000096D9                 db    5
.eh_frame:00000000000096DA                 db    0
.eh_frame:00000000000096DB                 db    0
.eh_frame:00000000000096DC                 db  84h
.eh_frame:00000000000096DD                 db 0AAh
.eh_frame:00000000000096DE                 db 0FFh
.eh_frame:00000000000096DF                 db 0FFh
.eh_frame:00000000000096E0                 db  14h
.eh_frame:00000000000096E1                 db    0
.eh_frame:00000000000096E2                 db    0
.eh_frame:00000000000096E3                 db    0
.eh_frame:00000000000096E4                 db    0
.eh_frame:00000000000096E5                 db    0
.eh_frame:00000000000096E6                 db    0
.eh_frame:00000000000096E7                 db    0
.eh_frame:00000000000096E8                 db  18h
.eh_frame:00000000000096E9                 db    0
.eh_frame:00000000000096EA                 db    0
.eh_frame:00000000000096EB                 db    0
.eh_frame:00000000000096EC                 db  8Ch
.eh_frame:00000000000096ED                 db    5
.eh_frame:00000000000096EE                 db    0
.eh_frame:00000000000096EF                 db    0
.eh_frame:00000000000096F0                 db  90h
.eh_frame:00000000000096F1                 db 0AAh
.eh_frame:00000000000096F2                 db 0FFh
.eh_frame:00000000000096F3                 db 0FFh
.eh_frame:00000000000096F4                 db  8Eh
.eh_frame:00000000000096F5                 db    0
.eh_frame:00000000000096F6                 db    0
.eh_frame:00000000000096F7                 db    0
.eh_frame:00000000000096F8                 db    0
.eh_frame:00000000000096F9                 db  44h ; D
.eh_frame:00000000000096FA                 db  0Eh
.eh_frame:00000000000096FB                 db  50h ; P
.eh_frame:00000000000096FC                 db    2
.eh_frame:00000000000096FD                 db  7Fh ; 
.eh_frame:00000000000096FE                 db  0Ah
.eh_frame:00000000000096FF                 db  0Eh
.eh_frame:0000000000009700                 db    8
.eh_frame:0000000000009701                 db  41h ; A
.eh_frame:0000000000009702                 db  0Bh
.eh_frame:0000000000009703                 db    0
.eh_frame:0000000000009704                 db  18h
.eh_frame:0000000000009705                 db    0
.eh_frame:0000000000009706                 db    0
.eh_frame:0000000000009707                 db    0
.eh_frame:0000000000009708                 db 0A8h
.eh_frame:0000000000009709                 db    5
.eh_frame:000000000000970A                 db    0
.eh_frame:000000000000970B                 db    0
.eh_frame:000000000000970C                 db    4
.eh_frame:000000000000970D                 db 0ABh
.eh_frame:000000000000970E                 db 0FFh
.eh_frame:000000000000970F                 db 0FFh
.eh_frame:0000000000009710                 db  8Ah
.eh_frame:0000000000009711                 db    0
.eh_frame:0000000000009712                 db    0
.eh_frame:0000000000009713                 db    0
.eh_frame:0000000000009714                 db    0
.eh_frame:0000000000009715                 db  44h ; D
.eh_frame:0000000000009716                 db  0Eh
.eh_frame:0000000000009717                 db  50h ; P
.eh_frame:0000000000009718                 db    2
.eh_frame:0000000000009719                 db  7Bh ; {
.eh_frame:000000000000971A                 db  0Ah
.eh_frame:000000000000971B                 db  0Eh
.eh_frame:000000000000971C                 db    8
.eh_frame:000000000000971D                 db  41h ; A
.eh_frame:000000000000971E                 db  0Bh
.eh_frame:000000000000971F                 db    0
.eh_frame:0000000000009720                 db  10h
.eh_frame:0000000000009721                 db    0
.eh_frame:0000000000009722                 db    0
.eh_frame:0000000000009723                 db    0
.eh_frame:0000000000009724                 db 0C4h
.eh_frame:0000000000009725                 db    5
.eh_frame:0000000000009726                 db    0
.eh_frame:0000000000009727                 db    0
.eh_frame:0000000000009728                 db  78h ; x
.eh_frame:0000000000009729                 db 0ABh
.eh_frame:000000000000972A                 db 0FFh
.eh_frame:000000000000972B                 db 0FFh
.eh_frame:000000000000972C                 db  0Ch
.eh_frame:000000000000972D                 db    0
.eh_frame:000000000000972E                 db    0
.eh_frame:000000000000972F                 db    0
.eh_frame:0000000000009730                 db    0
.eh_frame:0000000000009731                 db    0
.eh_frame:0000000000009732                 db    0
.eh_frame:0000000000009733                 db    0
.eh_frame:0000000000009734                 db  10h
.eh_frame:0000000000009735                 db    0
.eh_frame:0000000000009736                 db    0
.eh_frame:0000000000009737                 db    0
.eh_frame:0000000000009738                 db 0D8h
.eh_frame:0000000000009739                 db    5
.eh_frame:000000000000973A                 db    0
.eh_frame:000000000000973B                 db    0
.eh_frame:000000000000973C                 db  74h ; t
.eh_frame:000000000000973D                 db 0ABh
.eh_frame:000000000000973E                 db 0FFh
.eh_frame:000000000000973F                 db 0FFh
.eh_frame:0000000000009740                 db  0Fh
.eh_frame:0000000000009741                 db    0
.eh_frame:0000000000009742                 db    0
.eh_frame:0000000000009743                 db    0
.eh_frame:0000000000009744                 db    0
.eh_frame:0000000000009745                 db    0
.eh_frame:0000000000009746                 db    0
.eh_frame:0000000000009747                 db    0
.eh_frame:0000000000009748                 db  18h
.eh_frame:0000000000009749                 db    0
.eh_frame:000000000000974A                 db    0
.eh_frame:000000000000974B                 db    0
.eh_frame:000000000000974C                 db 0ECh
.eh_frame:000000000000974D                 db    5
.eh_frame:000000000000974E                 db    0
.eh_frame:000000000000974F                 db    0
.eh_frame:0000000000009750                 db  70h ; p
.eh_frame:0000000000009751                 db 0ABh
.eh_frame:0000000000009752                 db 0FFh
.eh_frame:0000000000009753                 db 0FFh
.eh_frame:0000000000009754                 db  98h
.eh_frame:0000000000009755                 db    0
.eh_frame:0000000000009756                 db    0
.eh_frame:0000000000009757                 db    0
.eh_frame:0000000000009758                 db    0
.eh_frame:0000000000009759                 db  44h ; D
.eh_frame:000000000000975A                 db  0Eh
.eh_frame:000000000000975B                 db  50h ; P
.eh_frame:000000000000975C                 db    2
.eh_frame:000000000000975D                 db  8Eh
.eh_frame:000000000000975E                 db  0Ah
.eh_frame:000000000000975F                 db  0Eh
.eh_frame:0000000000009760                 db    8
.eh_frame:0000000000009761                 db  41h ; A
.eh_frame:0000000000009762                 db  0Bh
.eh_frame:0000000000009763                 db    0
.eh_frame:0000000000009764                 db  10h
.eh_frame:0000000000009765                 db    0
.eh_frame:0000000000009766                 db    0
.eh_frame:0000000000009767                 db    0
.eh_frame:0000000000009768                 db    8
.eh_frame:0000000000009769                 db    6
.eh_frame:000000000000976A                 db    0
.eh_frame:000000000000976B                 db    0
.eh_frame:000000000000976C                 db 0F4h
.eh_frame:000000000000976D                 db 0ABh
.eh_frame:000000000000976E                 db 0FFh
.eh_frame:000000000000976F                 db 0FFh
.eh_frame:0000000000009770                 db  10h
.eh_frame:0000000000009771                 db    0
.eh_frame:0000000000009772                 db    0
.eh_frame:0000000000009773                 db    0
.eh_frame:0000000000009774                 db    0
.eh_frame:0000000000009775                 db    0
.eh_frame:0000000000009776                 db    0
.eh_frame:0000000000009777                 db    0
.eh_frame:0000000000009778                 db  10h
.eh_frame:0000000000009779                 db    0
.eh_frame:000000000000977A                 db    0
.eh_frame:000000000000977B                 db    0
.eh_frame:000000000000977C                 db  1Ch
.eh_frame:000000000000977D                 db    6
.eh_frame:000000000000977E                 db    0
.eh_frame:000000000000977F                 db    0
.eh_frame:0000000000009780                 db 0F0h
.eh_frame:0000000000009781                 db 0ABh
.eh_frame:0000000000009782                 db 0FFh
.eh_frame:0000000000009783                 db 0FFh
.eh_frame:0000000000009784                 db  11h
.eh_frame:0000000000009785                 db    0
.eh_frame:0000000000009786                 db    0
.eh_frame:0000000000009787                 db    0
.eh_frame:0000000000009788                 db    0
.eh_frame:0000000000009789                 db    0
.eh_frame:000000000000978A                 db    0
.eh_frame:000000000000978B                 db    0
.eh_frame:000000000000978C                 db  10h
.eh_frame:000000000000978D                 db    0
.eh_frame:000000000000978E                 db    0
.eh_frame:000000000000978F                 db    0
.eh_frame:0000000000009790                 db  30h ; 0
.eh_frame:0000000000009791                 db    6
.eh_frame:0000000000009792                 db    0
.eh_frame:0000000000009793                 db    0
.eh_frame:0000000000009794                 db 0FCh
.eh_frame:0000000000009795                 db 0ABh
.eh_frame:0000000000009796                 db 0FFh
.eh_frame:0000000000009797                 db 0FFh
.eh_frame:0000000000009798                 db  0Ah
.eh_frame:0000000000009799                 db    0
.eh_frame:000000000000979A                 db    0
.eh_frame:000000000000979B                 db    0
.eh_frame:000000000000979C                 db    0
.eh_frame:000000000000979D                 db    0
.eh_frame:000000000000979E                 db    0
.eh_frame:000000000000979F                 db    0
.eh_frame:00000000000097A0                 db  18h
.eh_frame:00000000000097A1                 db    0
.eh_frame:00000000000097A2                 db    0
.eh_frame:00000000000097A3                 db    0
.eh_frame:00000000000097A4                 db  44h ; D
.eh_frame:00000000000097A5                 db    6
.eh_frame:00000000000097A6                 db    0
.eh_frame:00000000000097A7                 db    0
.eh_frame:00000000000097A8                 db 0F8h
.eh_frame:00000000000097A9                 db 0ABh
.eh_frame:00000000000097AA                 db 0FFh
.eh_frame:00000000000097AB                 db 0FFh
.eh_frame:00000000000097AC                 db  8Eh
.eh_frame:00000000000097AD                 db    0
.eh_frame:00000000000097AE                 db    0
.eh_frame:00000000000097AF                 db    0
.eh_frame:00000000000097B0                 db    0
.eh_frame:00000000000097B1                 db  44h ; D
.eh_frame:00000000000097B2                 db  0Eh
.eh_frame:00000000000097B3                 db  50h ; P
.eh_frame:00000000000097B4                 db    2
.eh_frame:00000000000097B5                 db  7Fh ; 
.eh_frame:00000000000097B6                 db  0Ah
.eh_frame:00000000000097B7                 db  0Eh
.eh_frame:00000000000097B8                 db    8
.eh_frame:00000000000097B9                 db  41h ; A
.eh_frame:00000000000097BA                 db  0Bh
.eh_frame:00000000000097BB                 db    0
.eh_frame:00000000000097BC                 db  18h
.eh_frame:00000000000097BD                 db    0
.eh_frame:00000000000097BE                 db    0
.eh_frame:00000000000097BF                 db    0
.eh_frame:00000000000097C0                 db  60h ; `
.eh_frame:00000000000097C1                 db    6
.eh_frame:00000000000097C2                 db    0
.eh_frame:00000000000097C3                 db    0
.eh_frame:00000000000097C4                 db  6Ch ; l
.eh_frame:00000000000097C5                 db 0ACh
.eh_frame:00000000000097C6                 db 0FFh
.eh_frame:00000000000097C7                 db 0FFh
.eh_frame:00000000000097C8                 db  91h
.eh_frame:00000000000097C9                 db    0
.eh_frame:00000000000097CA                 db    0
.eh_frame:00000000000097CB                 db    0
.eh_frame:00000000000097CC                 db    0
.eh_frame:00000000000097CD                 db  44h ; D
.eh_frame:00000000000097CE                 db  0Eh
.eh_frame:00000000000097CF                 db  50h ; P
.eh_frame:00000000000097D0                 db    2
.eh_frame:00000000000097D1                 db  82h
.eh_frame:00000000000097D2                 db  0Ah
.eh_frame:00000000000097D3                 db  0Eh
.eh_frame:00000000000097D4                 db    8
.eh_frame:00000000000097D5                 db  41h ; A
.eh_frame:00000000000097D6                 db  0Bh
.eh_frame:00000000000097D7                 db    0
.eh_frame:00000000000097D8                 db  10h
.eh_frame:00000000000097D9                 db    0
.eh_frame:00000000000097DA                 db    0
.eh_frame:00000000000097DB                 db    0
.eh_frame:00000000000097DC                 db  7Ch ; |
.eh_frame:00000000000097DD                 db    6
.eh_frame:00000000000097DE                 db    0
.eh_frame:00000000000097DF                 db    0
.eh_frame:00000000000097E0                 db 0F0h
.eh_frame:00000000000097E1                 db 0ACh
.eh_frame:00000000000097E2                 db 0FFh
.eh_frame:00000000000097E3                 db 0FFh
.eh_frame:00000000000097E4                 db  0Ch
.eh_frame:00000000000097E5                 db    0
.eh_frame:00000000000097E6                 db    0
.eh_frame:00000000000097E7                 db    0
.eh_frame:00000000000097E8                 db    0
.eh_frame:00000000000097E9                 db    0
.eh_frame:00000000000097EA                 db    0
.eh_frame:00000000000097EB                 db    0
.eh_frame:00000000000097EC                 db  10h
.eh_frame:00000000000097ED                 db    0
.eh_frame:00000000000097EE                 db    0
.eh_frame:00000000000097EF                 db    0
.eh_frame:00000000000097F0                 db  90h
.eh_frame:00000000000097F1                 db    6
.eh_frame:00000000000097F2                 db    0
.eh_frame:00000000000097F3                 db    0
.eh_frame:00000000000097F4                 db 0ECh
.eh_frame:00000000000097F5                 db 0ACh
.eh_frame:00000000000097F6                 db 0FFh
.eh_frame:00000000000097F7                 db 0FFh
.eh_frame:00000000000097F8                 db  17h
.eh_frame:00000000000097F9                 db    0
.eh_frame:00000000000097FA                 db    0
.eh_frame:00000000000097FB                 db    0
.eh_frame:00000000000097FC                 db    0
.eh_frame:00000000000097FD                 db    0
.eh_frame:00000000000097FE                 db    0
.eh_frame:00000000000097FF                 db    0
.eh_frame:0000000000009800                 db  10h
.eh_frame:0000000000009801                 db    0
.eh_frame:0000000000009802                 db    0
.eh_frame:0000000000009803                 db    0
.eh_frame:0000000000009804                 db 0A4h
.eh_frame:0000000000009805                 db    6
.eh_frame:0000000000009806                 db    0
.eh_frame:0000000000009807                 db    0
.eh_frame:0000000000009808                 db 0F8h
.eh_frame:0000000000009809                 db 0ACh
.eh_frame:000000000000980A                 db 0FFh
.eh_frame:000000000000980B                 db 0FFh
.eh_frame:000000000000980C                 db  13h
.eh_frame:000000000000980D                 db    0
.eh_frame:000000000000980E                 db    0
.eh_frame:000000000000980F                 db    0
.eh_frame:0000000000009810                 db    0
.eh_frame:0000000000009811                 db    0
.eh_frame:0000000000009812                 db    0
.eh_frame:0000000000009813                 db    0
.eh_frame:0000000000009814                 db  10h
.eh_frame:0000000000009815                 db    0
.eh_frame:0000000000009816                 db    0
.eh_frame:0000000000009817                 db    0
.eh_frame:0000000000009818                 db 0B8h
.eh_frame:0000000000009819                 db    6
.eh_frame:000000000000981A                 db    0
.eh_frame:000000000000981B                 db    0
.eh_frame:000000000000981C                 db    4
.eh_frame:000000000000981D                 db 0ADh
.eh_frame:000000000000981E                 db 0FFh
.eh_frame:000000000000981F                 db 0FFh
.eh_frame:0000000000009820                 db  0Ch
.eh_frame:0000000000009821                 db    0
.eh_frame:0000000000009822                 db    0
.eh_frame:0000000000009823                 db    0
.eh_frame:0000000000009824                 db    0
.eh_frame:0000000000009825                 db    0
.eh_frame:0000000000009826                 db    0
.eh_frame:0000000000009827                 db    0
.eh_frame:0000000000009828                 db  10h
.eh_frame:0000000000009829                 db    0
.eh_frame:000000000000982A                 db    0
.eh_frame:000000000000982B                 db    0
.eh_frame:000000000000982C                 db 0CCh
.eh_frame:000000000000982D                 db    6
.eh_frame:000000000000982E                 db    0
.eh_frame:000000000000982F                 db    0
.eh_frame:0000000000009830                 db    0
.eh_frame:0000000000009831                 db 0ADh
.eh_frame:0000000000009832                 db 0FFh
.eh_frame:0000000000009833                 db 0FFh
.eh_frame:0000000000009834                 db  14h
.eh_frame:0000000000009835                 db    0
.eh_frame:0000000000009836                 db    0
.eh_frame:0000000000009837                 db    0
.eh_frame:0000000000009838                 db    0
.eh_frame:0000000000009839                 db    0
.eh_frame:000000000000983A                 db    0
.eh_frame:000000000000983B                 db    0
.eh_frame:000000000000983C                 db  10h
.eh_frame:000000000000983D                 db    0
.eh_frame:000000000000983E                 db    0
.eh_frame:000000000000983F                 db    0
.eh_frame:0000000000009840                 db 0E0h
.eh_frame:0000000000009841                 db    6
.eh_frame:0000000000009842                 db    0
.eh_frame:0000000000009843                 db    0
.eh_frame:0000000000009844                 db  0Ch
.eh_frame:0000000000009845                 db 0ADh
.eh_frame:0000000000009846                 db 0FFh
.eh_frame:0000000000009847                 db 0FFh
.eh_frame:0000000000009848                 db  13h
.eh_frame:0000000000009849                 db    0
.eh_frame:000000000000984A                 db    0
.eh_frame:000000000000984B                 db    0
.eh_frame:000000000000984C                 db    0
.eh_frame:000000000000984D                 db    0
.eh_frame:000000000000984E                 db    0
.eh_frame:000000000000984F                 db    0
.eh_frame:0000000000009850                 db  14h
.eh_frame:0000000000009851                 db    0
.eh_frame:0000000000009852                 db    0
.eh_frame:0000000000009853                 db    0
.eh_frame:0000000000009854                 db 0F4h
.eh_frame:0000000000009855                 db    6
.eh_frame:0000000000009856                 db    0
.eh_frame:0000000000009857                 db    0
.eh_frame:0000000000009858                 db  18h
.eh_frame:0000000000009859                 db 0ADh
.eh_frame:000000000000985A                 db 0FFh
.eh_frame:000000000000985B                 db 0FFh
.eh_frame:000000000000985C                 db  18h
.eh_frame:000000000000985D                 db    0
.eh_frame:000000000000985E                 db    0
.eh_frame:000000000000985F                 db    0
.eh_frame:0000000000009860                 db    0
.eh_frame:0000000000009861                 db    0
.eh_frame:0000000000009862                 db    0
.eh_frame:0000000000009863                 db    0
.eh_frame:0000000000009864                 db    0
.eh_frame:0000000000009865                 db    0
.eh_frame:0000000000009866                 db    0
.eh_frame:0000000000009867                 db    0
.eh_frame:0000000000009868                 db  10h
.eh_frame:0000000000009869                 db    1
.eh_frame:000000000000986A                 db    0
.eh_frame:000000000000986B                 db    0
.eh_frame:000000000000986C                 db  0Ch
.eh_frame:000000000000986D                 db    7
.eh_frame:000000000000986E                 db    0
.eh_frame:000000000000986F                 db    0
.eh_frame:0000000000009870                 db  20h
.eh_frame:0000000000009871                 db 0ADh
.eh_frame:0000000000009872                 db 0FFh
.eh_frame:0000000000009873                 db 0FFh
.eh_frame:0000000000009874                 db  17h
.eh_frame:0000000000009875                 db    4
.eh_frame:0000000000009876                 db    0
.eh_frame:0000000000009877                 db    0
.eh_frame:0000000000009878                 db    0
.eh_frame:0000000000009879                 db  42h ; B
.eh_frame:000000000000987A                 db  0Eh
.eh_frame:000000000000987B                 db  10h
.eh_frame:000000000000987C                 db  8Fh
.eh_frame:000000000000987D                 db    2
.eh_frame:000000000000987E                 db  42h ; B
.eh_frame:000000000000987F                 db  0Eh
.eh_frame:0000000000009880                 db  18h
.eh_frame:0000000000009881                 db  8Eh
.eh_frame:0000000000009882                 db    3
.eh_frame:0000000000009883                 db  42h ; B
.eh_frame:0000000000009884                 db  0Eh
.eh_frame:0000000000009885                 db  20h
.eh_frame:0000000000009886                 db  8Dh
.eh_frame:0000000000009887                 db    4
.eh_frame:0000000000009888                 db  42h ; B
.eh_frame:0000000000009889                 db  0Eh
.eh_frame:000000000000988A                 db  28h ; (
.eh_frame:000000000000988B                 db  8Ch
.eh_frame:000000000000988C                 db    5
.eh_frame:000000000000988D                 db  44h ; D
.eh_frame:000000000000988E                 db  0Eh
.eh_frame:000000000000988F                 db  30h ; 0
.eh_frame:0000000000009890                 db  86h
.eh_frame:0000000000009891                 db    6
.eh_frame:0000000000009892                 db  41h ; A
.eh_frame:0000000000009893                 db  0Eh
.eh_frame:0000000000009894                 db  38h ; 8
.eh_frame:0000000000009895                 db  83h
.eh_frame:0000000000009896                 db    7
.eh_frame:0000000000009897                 db  4Ah ; J
.eh_frame:0000000000009898                 db  0Eh
.eh_frame:0000000000009899                 db  60h ; `
.eh_frame:000000000000989A                 db    2
.eh_frame:000000000000989B                 db 0DDh
.eh_frame:000000000000989C                 db  0Eh
.eh_frame:000000000000989D                 db  68h ; h
.eh_frame:000000000000989E                 db  57h ; W
.eh_frame:000000000000989F                 db  0Eh
.eh_frame:00000000000098A0                 db  70h ; p
.eh_frame:00000000000098A1                 db  42h ; B
.eh_frame:00000000000098A2                 db  0Eh
.eh_frame:00000000000098A3                 db  78h ; x
.eh_frame:00000000000098A4                 db  42h ; B
.eh_frame:00000000000098A5                 db  0Eh
.eh_frame:00000000000098A6                 db  80h
.eh_frame:00000000000098A7                 db    1
.eh_frame:00000000000098A8                 db  42h ; B
.eh_frame:00000000000098A9                 db  0Eh
.eh_frame:00000000000098AA                 db  88h
.eh_frame:00000000000098AB                 db    1
.eh_frame:00000000000098AC                 db  42h ; B
.eh_frame:00000000000098AD                 db  0Eh
.eh_frame:00000000000098AE                 db  90h
.eh_frame:00000000000098AF                 db    1
.eh_frame:00000000000098B0                 db  53h ; S
.eh_frame:00000000000098B1                 db  0Eh
.eh_frame:00000000000098B2                 db  60h ; `
.eh_frame:00000000000098B3                 db  44h ; D
.eh_frame:00000000000098B4                 db  0Ah
.eh_frame:00000000000098B5                 db  0Eh
.eh_frame:00000000000098B6                 db  38h ; 8
.eh_frame:00000000000098B7                 db  41h ; A
.eh_frame:00000000000098B8                 db  0Eh
.eh_frame:00000000000098B9                 db  30h ; 0
.eh_frame:00000000000098BA                 db  41h ; A
.eh_frame:00000000000098BB                 db  0Eh
.eh_frame:00000000000098BC                 db  28h ; (
.eh_frame:00000000000098BD                 db  42h ; B
.eh_frame:00000000000098BE                 db  0Eh
.eh_frame:00000000000098BF                 db  20h
.eh_frame:00000000000098C0                 db  42h ; B
.eh_frame:00000000000098C1                 db  0Eh
.eh_frame:00000000000098C2                 db  18h
.eh_frame:00000000000098C3                 db  42h ; B
.eh_frame:00000000000098C4                 db  0Eh
.eh_frame:00000000000098C5                 db  10h
.eh_frame:00000000000098C6                 db  42h ; B
.eh_frame:00000000000098C7                 db  0Eh
.eh_frame:00000000000098C8                 db    8
.eh_frame:00000000000098C9                 db  44h ; D
.eh_frame:00000000000098CA                 db  0Bh
.eh_frame:00000000000098CB                 db    2
.eh_frame:00000000000098CC                 db  78h ; x
.eh_frame:00000000000098CD                 db  0Ah
.eh_frame:00000000000098CE                 db  0Eh
.eh_frame:00000000000098CF                 db  68h ; h
.eh_frame:00000000000098D0                 db  48h ; H
.eh_frame:00000000000098D1                 db  0Bh
.eh_frame:00000000000098D2                 db  5Ah ; Z
.eh_frame:00000000000098D3                 db  0Ah
.eh_frame:00000000000098D4                 db  0Eh
.eh_frame:00000000000098D5                 db  38h ; 8
.eh_frame:00000000000098D6                 db  47h ; G
.eh_frame:00000000000098D7                 db  0Eh
.eh_frame:00000000000098D8                 db  30h ; 0
.eh_frame:00000000000098D9                 db  41h ; A
.eh_frame:00000000000098DA                 db  0Eh
.eh_frame:00000000000098DB                 db  28h ; (
.eh_frame:00000000000098DC                 db  42h ; B
.eh_frame:00000000000098DD                 db  0Eh
.eh_frame:00000000000098DE                 db  20h
.eh_frame:00000000000098DF                 db  42h ; B
.eh_frame:00000000000098E0                 db  0Eh
.eh_frame:00000000000098E1                 db  18h
.eh_frame:00000000000098E2                 db  42h ; B
.eh_frame:00000000000098E3                 db  0Eh
.eh_frame:00000000000098E4                 db  10h
.eh_frame:00000000000098E5                 db  42h ; B
.eh_frame:00000000000098E6                 db  0Eh
.eh_frame:00000000000098E7                 db    8
.eh_frame:00000000000098E8                 db  56h ; V
.eh_frame:00000000000098E9                 db  0Bh
.eh_frame:00000000000098EA                 db  5Eh ; ^
.eh_frame:00000000000098EB                 db  0Ah
.eh_frame:00000000000098EC                 db  0Eh
.eh_frame:00000000000098ED                 db  38h ; 8
.eh_frame:00000000000098EE                 db  52h ; R
.eh_frame:00000000000098EF                 db  0Eh
.eh_frame:00000000000098F0                 db  30h ; 0
.eh_frame:00000000000098F1                 db  41h ; A
.eh_frame:00000000000098F2                 db  0Eh
.eh_frame:00000000000098F3                 db  28h ; (
.eh_frame:00000000000098F4                 db  42h ; B
.eh_frame:00000000000098F5                 db  0Eh
.eh_frame:00000000000098F6                 db  20h
.eh_frame:00000000000098F7                 db  42h ; B
.eh_frame:00000000000098F8                 db  0Eh
.eh_frame:00000000000098F9                 db  18h
.eh_frame:00000000000098FA                 db  42h ; B
.eh_frame:00000000000098FB                 db  0Eh
.eh_frame:00000000000098FC                 db  10h
.eh_frame:00000000000098FD                 db  42h ; B
.eh_frame:00000000000098FE                 db  0Eh
.eh_frame:00000000000098FF                 db    8
.eh_frame:0000000000009900                 db  4Fh ; O
.eh_frame:0000000000009901                 db  0Bh
.eh_frame:0000000000009902                 db  62h ; b
.eh_frame:0000000000009903                 db  0Ah
.eh_frame:0000000000009904                 db  0Eh
.eh_frame:0000000000009905                 db  38h ; 8
.eh_frame:0000000000009906                 db  50h ; P
.eh_frame:0000000000009907                 db  0Eh
.eh_frame:0000000000009908                 db  30h ; 0
.eh_frame:0000000000009909                 db  41h ; A
.eh_frame:000000000000990A                 db  0Eh
.eh_frame:000000000000990B                 db  28h ; (
.eh_frame:000000000000990C                 db  42h ; B
.eh_frame:000000000000990D                 db  0Eh
.eh_frame:000000000000990E                 db  20h
.eh_frame:000000000000990F                 db  42h ; B
.eh_frame:0000000000009910                 db  0Eh
.eh_frame:0000000000009911                 db  18h
.eh_frame:0000000000009912                 db  42h ; B
.eh_frame:0000000000009913                 db  0Eh
.eh_frame:0000000000009914                 db  10h
.eh_frame:0000000000009915                 db  42h ; B
.eh_frame:0000000000009916                 db  0Eh
.eh_frame:0000000000009917                 db    8
.eh_frame:0000000000009918                 db  55h ; U
.eh_frame:0000000000009919                 db  0Bh
.eh_frame:000000000000991A                 db  66h ; f
.eh_frame:000000000000991B                 db  0Eh
.eh_frame:000000000000991C                 db  68h ; h
.eh_frame:000000000000991D                 db  42h ; B
.eh_frame:000000000000991E                 db  0Eh
.eh_frame:000000000000991F                 db  70h ; p
.eh_frame:0000000000009920                 db  5Ch ; \
.eh_frame:0000000000009921                 db  0Eh
.eh_frame:0000000000009922                 db  68h ; h
.eh_frame:0000000000009923                 db  41h ; A
.eh_frame:0000000000009924                 db  0Eh
.eh_frame:0000000000009925                 db  60h ; `
.eh_frame:0000000000009926                 db  44h ; D
.eh_frame:0000000000009927                 db  0Ah
.eh_frame:0000000000009928                 db  0Eh
.eh_frame:0000000000009929                 db  38h ; 8
.eh_frame:000000000000992A                 db  41h ; A
.eh_frame:000000000000992B                 db  0Eh
.eh_frame:000000000000992C                 db  30h ; 0
.eh_frame:000000000000992D                 db  41h ; A
.eh_frame:000000000000992E                 db  0Eh
.eh_frame:000000000000992F                 db  28h ; (
.eh_frame:0000000000009930                 db  42h ; B
.eh_frame:0000000000009931                 db  0Eh
.eh_frame:0000000000009932                 db  20h
.eh_frame:0000000000009933                 db  42h ; B
.eh_frame:0000000000009934                 db  0Eh
.eh_frame:0000000000009935                 db  18h
.eh_frame:0000000000009936                 db  42h ; B
.eh_frame:0000000000009937                 db  0Eh
.eh_frame:0000000000009938                 db  10h
.eh_frame:0000000000009939                 db  42h ; B
.eh_frame:000000000000993A                 db  0Eh
.eh_frame:000000000000993B                 db    8
.eh_frame:000000000000993C                 db  45h ; E
.eh_frame:000000000000993D                 db  0Bh
.eh_frame:000000000000993E                 db  68h ; h
.eh_frame:000000000000993F                 db  0Ah
.eh_frame:0000000000009940                 db  0Eh
.eh_frame:0000000000009941                 db  68h ; h
.eh_frame:0000000000009942                 db  48h ; H
.eh_frame:0000000000009943                 db  0Bh
.eh_frame:0000000000009944                 db  72h ; r
.eh_frame:0000000000009945                 db  0Eh
.eh_frame:0000000000009946                 db  68h ; h
.eh_frame:0000000000009947                 db  45h ; E
.eh_frame:0000000000009948                 db  0Eh
.eh_frame:0000000000009949                 db  70h ; p
.eh_frame:000000000000994A                 db  42h ; B
.eh_frame:000000000000994B                 db  0Eh
.eh_frame:000000000000994C                 db  78h ; x
.eh_frame:000000000000994D                 db  42h ; B
.eh_frame:000000000000994E                 db  0Eh
.eh_frame:000000000000994F                 db  80h
.eh_frame:0000000000009950                 db    1
.eh_frame:0000000000009951                 db  5Eh ; ^
.eh_frame:0000000000009952                 db  0Eh
.eh_frame:0000000000009953                 db  60h ; `
.eh_frame:0000000000009954                 db  44h ; D
.eh_frame:0000000000009955                 db  0Ah
.eh_frame:0000000000009956                 db  0Eh
.eh_frame:0000000000009957                 db  38h ; 8
.eh_frame:0000000000009958                 db  41h ; A
.eh_frame:0000000000009959                 db  0Eh
.eh_frame:000000000000995A                 db  30h ; 0
.eh_frame:000000000000995B                 db  41h ; A
.eh_frame:000000000000995C                 db  0Eh
.eh_frame:000000000000995D                 db  28h ; (
.eh_frame:000000000000995E                 db  42h ; B
.eh_frame:000000000000995F                 db  0Eh
.eh_frame:0000000000009960                 db  20h
.eh_frame:0000000000009961                 db  42h ; B
.eh_frame:0000000000009962                 db  0Eh
.eh_frame:0000000000009963                 db  18h
.eh_frame:0000000000009964                 db  42h ; B
.eh_frame:0000000000009965                 db  0Eh
.eh_frame:0000000000009966                 db  10h
.eh_frame:0000000000009967                 db  42h ; B
.eh_frame:0000000000009968                 db  0Eh
.eh_frame:0000000000009969                 db    8
.eh_frame:000000000000996A                 db  41h ; A
.eh_frame:000000000000996B                 db  0Bh
.eh_frame:000000000000996C                 db  79h ; y
.eh_frame:000000000000996D                 db  0Ah
.eh_frame:000000000000996E                 db  0Eh
.eh_frame:000000000000996F                 db  68h ; h
.eh_frame:0000000000009970                 db  42h ; B
.eh_frame:0000000000009971                 db  0Eh
.eh_frame:0000000000009972                 db  70h ; p
.eh_frame:0000000000009973                 db  42h ; B
.eh_frame:0000000000009974                 db  0Eh
.eh_frame:0000000000009975                 db  78h ; x
.eh_frame:0000000000009976                 db  42h ; B
.eh_frame:0000000000009977                 db  0Eh
.eh_frame:0000000000009978                 db  80h
.eh_frame:0000000000009979                 db    1
.eh_frame:000000000000997A                 db  51h ; Q
.eh_frame:000000000000997B                 db  0Bh
.eh_frame:000000000000997C                 db  10h
.eh_frame:000000000000997D                 db    0
.eh_frame:000000000000997E                 db    0
.eh_frame:000000000000997F                 db    0
.eh_frame:0000000000009980                 db  20h
.eh_frame:0000000000009981                 db    8
.eh_frame:0000000000009982                 db    0
.eh_frame:0000000000009983                 db    0
.eh_frame:0000000000009984                 db  2Ch ; ,
.eh_frame:0000000000009985                 db 0B0h
.eh_frame:0000000000009986                 db 0FFh
.eh_frame:0000000000009987                 db 0FFh
.eh_frame:0000000000009988                 db  20h
.eh_frame:0000000000009989                 db    0
.eh_frame:000000000000998A                 db    0
.eh_frame:000000000000998B                 db    0
.eh_frame:000000000000998C                 db    0
.eh_frame:000000000000998D                 db    0
.eh_frame:000000000000998E                 db    0
.eh_frame:000000000000998F                 db    0
.eh_frame:0000000000009990                 db  18h
.eh_frame:0000000000009991                 db    0
.eh_frame:0000000000009992                 db    0
.eh_frame:0000000000009993                 db    0
.eh_frame:0000000000009994                 db  34h ; 4
.eh_frame:0000000000009995                 db    8
.eh_frame:0000000000009996                 db    0
.eh_frame:0000000000009997                 db    0
.eh_frame:0000000000009998                 db  38h ; 8
.eh_frame:0000000000009999                 db 0B0h
.eh_frame:000000000000999A                 db 0FFh
.eh_frame:000000000000999B                 db 0FFh
.eh_frame:000000000000999C                 db  78h ; x
.eh_frame:000000000000999D                 db    0
.eh_frame:000000000000999E                 db    0
.eh_frame:000000000000999F                 db    0
.eh_frame:00000000000099A0                 db    0
.eh_frame:00000000000099A1                 db  44h ; D
.eh_frame:00000000000099A2                 db  0Eh
.eh_frame:00000000000099A3                 db  70h ; p
.eh_frame:00000000000099A4                 db    2
.eh_frame:00000000000099A5                 db  60h ; `
.eh_frame:00000000000099A6                 db  0Ah
.eh_frame:00000000000099A7                 db  0Eh
.eh_frame:00000000000099A8                 db    8
.eh_frame:00000000000099A9                 db  41h ; A
.eh_frame:00000000000099AA                 db  0Bh
.eh_frame:00000000000099AB                 db    0
.eh_frame:00000000000099AC                 db  28h ; (
.eh_frame:00000000000099AD                 db    0
.eh_frame:00000000000099AE                 db    0
.eh_frame:00000000000099AF                 db    0
.eh_frame:00000000000099B0                 db  50h ; P
.eh_frame:00000000000099B1                 db    8
.eh_frame:00000000000099B2                 db    0
.eh_frame:00000000000099B3                 db    0
.eh_frame:00000000000099B4                 db  9Ch
.eh_frame:00000000000099B5                 db 0B0h
.eh_frame:00000000000099B6                 db 0FFh
.eh_frame:00000000000099B7                 db 0FFh
.eh_frame:00000000000099B8                 db 0D5h
.eh_frame:00000000000099B9                 db    0
.eh_frame:00000000000099BA                 db    0
.eh_frame:00000000000099BB                 db    0
.eh_frame:00000000000099BC                 db    0
.eh_frame:00000000000099BD                 db  41h ; A
.eh_frame:00000000000099BE                 db  0Eh
.eh_frame:00000000000099BF                 db  10h
.eh_frame:00000000000099C0                 db  86h
.eh_frame:00000000000099C1                 db    2
.eh_frame:00000000000099C2                 db  41h ; A
.eh_frame:00000000000099C3                 db  0Eh
.eh_frame:00000000000099C4                 db  18h
.eh_frame:00000000000099C5                 db  83h
.eh_frame:00000000000099C6                 db    3
.eh_frame:00000000000099C7                 db  50h ; P
.eh_frame:00000000000099C8                 db  0Eh
.eh_frame:00000000000099C9                 db 0D0h
.eh_frame:00000000000099CA                 db    1
.eh_frame:00000000000099CB                 db    2
.eh_frame:00000000000099CC                 db 0ABh
.eh_frame:00000000000099CD                 db  0Ah
.eh_frame:00000000000099CE                 db  0Eh
.eh_frame:00000000000099CF                 db  18h
.eh_frame:00000000000099D0                 db  41h ; A
.eh_frame:00000000000099D1                 db  0Eh
.eh_frame:00000000000099D2                 db  10h
.eh_frame:00000000000099D3                 db  41h ; A
.eh_frame:00000000000099D4                 db  0Eh
.eh_frame:00000000000099D5                 db    8
.eh_frame:00000000000099D6                 db  41h ; A
.eh_frame:00000000000099D7                 db  0Bh
.eh_frame:00000000000099D8                 db  1Ch
.eh_frame:00000000000099D9                 db    0
.eh_frame:00000000000099DA                 db    0
.eh_frame:00000000000099DB                 db    0
.eh_frame:00000000000099DC                 db  7Ch ; |
.eh_frame:00000000000099DD                 db    8
.eh_frame:00000000000099DE                 db    0
.eh_frame:00000000000099DF                 db    0
.eh_frame:00000000000099E0                 db  50h ; P
.eh_frame:00000000000099E1                 db 0B1h
.eh_frame:00000000000099E2                 db 0FFh
.eh_frame:00000000000099E3                 db 0FFh
.eh_frame:00000000000099E4                 db  80h
.eh_frame:00000000000099E5                 db    0
.eh_frame:00000000000099E6                 db    0
.eh_frame:00000000000099E7                 db    0
.eh_frame:00000000000099E8                 db    0
.eh_frame:00000000000099E9                 db  41h ; A
.eh_frame:00000000000099EA                 db  0Eh
.eh_frame:00000000000099EB                 db  10h
.eh_frame:00000000000099EC                 db  83h
.eh_frame:00000000000099ED                 db    2
.eh_frame:00000000000099EE                 db    2
.eh_frame:00000000000099EF                 db  7Ah ; z
.eh_frame:00000000000099F0                 db  0Eh
.eh_frame:00000000000099F1                 db    8
.eh_frame:00000000000099F2                 db    0
.eh_frame:00000000000099F3                 db    0
.eh_frame:00000000000099F4                 db    0
.eh_frame:00000000000099F5                 db    0
.eh_frame:00000000000099F6                 db    0
.eh_frame:00000000000099F7                 db    0
.eh_frame:00000000000099F8                 db  18h
.eh_frame:00000000000099F9                 db    0
.eh_frame:00000000000099FA                 db    0
.eh_frame:00000000000099FB                 db    0
.eh_frame:00000000000099FC                 db  9Ch
.eh_frame:00000000000099FD                 db    8
.eh_frame:00000000000099FE                 db    0
.eh_frame:00000000000099FF                 db    0
.eh_frame:0000000000009A00                 db 0B0h
.eh_frame:0000000000009A01                 db 0B1h
.eh_frame:0000000000009A02                 db 0FFh
.eh_frame:0000000000009A03                 db 0FFh
.eh_frame:0000000000009A04                 db  1Ah
.eh_frame:0000000000009A05                 db    0
.eh_frame:0000000000009A06                 db    0
.eh_frame:0000000000009A07                 db    0
.eh_frame:0000000000009A08                 db    0
.eh_frame:0000000000009A09                 db  41h ; A
.eh_frame:0000000000009A0A                 db  0Eh
.eh_frame:0000000000009A0B                 db  10h
.eh_frame:0000000000009A0C                 db  83h
.eh_frame:0000000000009A0D                 db    2
.eh_frame:0000000000009A0E                 db  53h ; S
.eh_frame:0000000000009A0F                 db  0Ah
.eh_frame:0000000000009A10                 db  0Eh
.eh_frame:0000000000009A11                 db    8
.eh_frame:0000000000009A12                 db  41h ; A
.eh_frame:0000000000009A13                 db  0Bh
.eh_frame:0000000000009A14                 db  10h
.eh_frame:0000000000009A15                 db    0
.eh_frame:0000000000009A16                 db    0
.eh_frame:0000000000009A17                 db    0
.eh_frame:0000000000009A18                 db 0B8h
.eh_frame:0000000000009A19                 db    8
.eh_frame:0000000000009A1A                 db    0
.eh_frame:0000000000009A1B                 db    0
.eh_frame:0000000000009A1C                 db 0B4h
.eh_frame:0000000000009A1D                 db 0B1h
.eh_frame:0000000000009A1E                 db 0FFh
.eh_frame:0000000000009A1F                 db 0FFh
.eh_frame:0000000000009A20                 db  24h ; $
.eh_frame:0000000000009A21                 db    0
.eh_frame:0000000000009A22                 db    0
.eh_frame:0000000000009A23                 db    0
.eh_frame:0000000000009A24                 db    0
.eh_frame:0000000000009A25                 db  5Fh ; _
.eh_frame:0000000000009A26                 db  0Eh
.eh_frame:0000000000009A27                 db  10h
.eh_frame:0000000000009A28                 db  10h
.eh_frame:0000000000009A29                 db    0
.eh_frame:0000000000009A2A                 db    0
.eh_frame:0000000000009A2B                 db    0
.eh_frame:0000000000009A2C                 db 0CCh
.eh_frame:0000000000009A2D                 db    8
.eh_frame:0000000000009A2E                 db    0
.eh_frame:0000000000009A2F                 db    0
.eh_frame:0000000000009A30                 db 0D0h
.eh_frame:0000000000009A31                 db 0B1h
.eh_frame:0000000000009A32                 db 0FFh
.eh_frame:0000000000009A33                 db 0FFh
.eh_frame:0000000000009A34                 db    2
.eh_frame:0000000000009A35                 db    0
.eh_frame:0000000000009A36                 db    0
.eh_frame:0000000000009A37                 db    0
.eh_frame:0000000000009A38                 db    0
.eh_frame:0000000000009A39                 db    0
.eh_frame:0000000000009A3A                 db    0
.eh_frame:0000000000009A3B                 db    0
.eh_frame:0000000000009A3C                 db  20h
.eh_frame:0000000000009A3D                 db    0
.eh_frame:0000000000009A3E                 db    0
.eh_frame:0000000000009A3F                 db    0
.eh_frame:0000000000009A40                 db 0E0h
.eh_frame:0000000000009A41                 db    8
.eh_frame:0000000000009A42                 db    0
.eh_frame:0000000000009A43                 db    0
.eh_frame:0000000000009A44                 db 0CCh
.eh_frame:0000000000009A45                 db 0B1h
.eh_frame:0000000000009A46                 db 0FFh
.eh_frame:0000000000009A47                 db 0FFh
.eh_frame:0000000000009A48                 db  36h ; 6
.eh_frame:0000000000009A49                 db    0
.eh_frame:0000000000009A4A                 db    0
.eh_frame:0000000000009A4B                 db    0
.eh_frame:0000000000009A4C                 db    0
.eh_frame:0000000000009A4D                 db  44h ; D
.eh_frame:0000000000009A4E                 db  0Eh
.eh_frame:0000000000009A4F                 db  10h
.eh_frame:0000000000009A50                 db  83h
.eh_frame:0000000000009A51                 db    2
.eh_frame:0000000000009A52                 db  5Dh ; ]
.eh_frame:0000000000009A53                 db  0Ah
.eh_frame:0000000000009A54                 db  0Eh
.eh_frame:0000000000009A55                 db    8
.eh_frame:0000000000009A56                 db  47h ; G
.eh_frame:0000000000009A57                 db  0Bh
.eh_frame:0000000000009A58                 db  48h ; H
.eh_frame:0000000000009A59                 db  0Ah
.eh_frame:0000000000009A5A                 db  0Eh
.eh_frame:0000000000009A5B                 db    8
.eh_frame:0000000000009A5C                 db  41h ; A
.eh_frame:0000000000009A5D                 db  0Bh
.eh_frame:0000000000009A5E                 db    0
.eh_frame:0000000000009A5F                 db    0
.eh_frame:0000000000009A60                 db  10h
.eh_frame:0000000000009A61                 db    0
.eh_frame:0000000000009A62                 db    0
.eh_frame:0000000000009A63                 db    0
.eh_frame:0000000000009A64                 db    4
.eh_frame:0000000000009A65                 db    9
.eh_frame:0000000000009A66                 db    0
.eh_frame:0000000000009A67                 db    0
.eh_frame:0000000000009A68                 db 0E8h
.eh_frame:0000000000009A69                 db 0B1h
.eh_frame:0000000000009A6A                 db 0FFh
.eh_frame:0000000000009A6B                 db 0FFh
.eh_frame:0000000000009A6C                 db  24h ; $
.eh_frame:0000000000009A6D                 db    0
.eh_frame:0000000000009A6E                 db    0
.eh_frame:0000000000009A6F                 db    0
.eh_frame:0000000000009A70                 db    0
.eh_frame:0000000000009A71                 db  5Fh ; _
.eh_frame:0000000000009A72                 db  0Eh
.eh_frame:0000000000009A73                 db  10h
.eh_frame:0000000000009A74                 db  14h
.eh_frame:0000000000009A75                 db    0
.eh_frame:0000000000009A76                 db    0
.eh_frame:0000000000009A77                 db    0
.eh_frame:0000000000009A78                 db  18h
.eh_frame:0000000000009A79                 db    9
.eh_frame:0000000000009A7A                 db    0
.eh_frame:0000000000009A7B                 db    0
.eh_frame:0000000000009A7C                 db    4
.eh_frame:0000000000009A7D                 db 0B2h
.eh_frame:0000000000009A7E                 db 0FFh
.eh_frame:0000000000009A7F                 db 0FFh
.eh_frame:0000000000009A80                 db  82h
.eh_frame:0000000000009A81                 db    0
.eh_frame:0000000000009A82                 db    0
.eh_frame:0000000000009A83                 db    0
.eh_frame:0000000000009A84                 db    0
.eh_frame:0000000000009A85                 db    2
.eh_frame:0000000000009A86                 db  5Fh ; _
.eh_frame:0000000000009A87                 db  0Eh
.eh_frame:0000000000009A88                 db  10h
.eh_frame:0000000000009A89                 db  49h ; I
.eh_frame:0000000000009A8A                 db  0Eh
.eh_frame:0000000000009A8B                 db    8
.eh_frame:0000000000009A8C                 db  14h
.eh_frame:0000000000009A8D                 db    0
.eh_frame:0000000000009A8E                 db    0
.eh_frame:0000000000009A8F                 db    0
.eh_frame:0000000000009A90                 db  30h ; 0
.eh_frame:0000000000009A91                 db    9
.eh_frame:0000000000009A92                 db    0
.eh_frame:0000000000009A93                 db    0
.eh_frame:0000000000009A94                 db  7Ch ; |
.eh_frame:0000000000009A95                 db 0B2h
.eh_frame:0000000000009A96                 db 0FFh
.eh_frame:0000000000009A97                 db 0FFh
.eh_frame:0000000000009A98                 db  4Ah ; J
.eh_frame:0000000000009A99                 db    0
.eh_frame:0000000000009A9A                 db    0
.eh_frame:0000000000009A9B                 db    0
.eh_frame:0000000000009A9C                 db    0
.eh_frame:0000000000009A9D                 db    2
.eh_frame:0000000000009A9E                 db  45h ; E
.eh_frame:0000000000009A9F                 db  0Eh
.eh_frame:0000000000009AA0                 db  10h
.eh_frame:0000000000009AA1                 db    0
.eh_frame:0000000000009AA2                 db    0
.eh_frame:0000000000009AA3                 db    0
.eh_frame:0000000000009AA4                 db  18h
.eh_frame:0000000000009AA5                 db    0
.eh_frame:0000000000009AA6                 db    0
.eh_frame:0000000000009AA7                 db    0
.eh_frame:0000000000009AA8                 db  48h ; H
.eh_frame:0000000000009AA9                 db    9
.eh_frame:0000000000009AAA                 db    0
.eh_frame:0000000000009AAB                 db    0
.eh_frame:0000000000009AAC                 db 0B4h
.eh_frame:0000000000009AAD                 db 0B2h
.eh_frame:0000000000009AAE                 db 0FFh
.eh_frame:0000000000009AAF                 db 0FFh
.eh_frame:0000000000009AB0                 db  17h
.eh_frame:0000000000009AB1                 db    0
.eh_frame:0000000000009AB2                 db    0
.eh_frame:0000000000009AB3                 db    0
.eh_frame:0000000000009AB4                 db    0
.eh_frame:0000000000009AB5                 db  41h ; A
.eh_frame:0000000000009AB6                 db  0Eh
.eh_frame:0000000000009AB7                 db  10h
.eh_frame:0000000000009AB8                 db  83h
.eh_frame:0000000000009AB9                 db    2
.eh_frame:0000000000009ABA                 db  51h ; Q
.eh_frame:0000000000009ABB                 db  0Eh
.eh_frame:0000000000009ABC                 db    8
.eh_frame:0000000000009ABD                 db    0
.eh_frame:0000000000009ABE                 db    0
.eh_frame:0000000000009ABF                 db    0
.eh_frame:0000000000009AC0                 db  18h
.eh_frame:0000000000009AC1                 db    0
.eh_frame:0000000000009AC2                 db    0
.eh_frame:0000000000009AC3                 db    0
.eh_frame:0000000000009AC4                 db  64h ; d
.eh_frame:0000000000009AC5                 db    9
.eh_frame:0000000000009AC6                 db    0
.eh_frame:0000000000009AC7                 db    0
.eh_frame:0000000000009AC8                 db 0B8h
.eh_frame:0000000000009AC9                 db 0B2h
.eh_frame:0000000000009ACA                 db 0FFh
.eh_frame:0000000000009ACB                 db 0FFh
.eh_frame:0000000000009ACC                 db  2Eh ; .
.eh_frame:0000000000009ACD                 db    0
.eh_frame:0000000000009ACE                 db    0
.eh_frame:0000000000009ACF                 db    0
.eh_frame:0000000000009AD0                 db    0
.eh_frame:0000000000009AD1                 db  47h ; G
.eh_frame:0000000000009AD2                 db  0Eh
.eh_frame:0000000000009AD3                 db  10h
.eh_frame:0000000000009AD4                 db  61h ; a
.eh_frame:0000000000009AD5                 db  0Ah
.eh_frame:0000000000009AD6                 db  0Eh
.eh_frame:0000000000009AD7                 db    8
.eh_frame:0000000000009AD8                 db  41h ; A
.eh_frame:0000000000009AD9                 db  0Bh
.eh_frame:0000000000009ADA                 db    0
.eh_frame:0000000000009ADB                 db    0
.eh_frame:0000000000009ADC                 db  24h ; $
.eh_frame:0000000000009ADD                 db    0
.eh_frame:0000000000009ADE                 db    0
.eh_frame:0000000000009ADF                 db    0
.eh_frame:0000000000009AE0                 db  80h
.eh_frame:0000000000009AE1                 db    9
.eh_frame:0000000000009AE2                 db    0
.eh_frame:0000000000009AE3                 db    0
.eh_frame:0000000000009AE4                 db 0CCh
.eh_frame:0000000000009AE5                 db 0B2h
.eh_frame:0000000000009AE6                 db 0FFh
.eh_frame:0000000000009AE7                 db 0FFh
.eh_frame:0000000000009AE8                 db  28h ; (
.eh_frame:0000000000009AE9                 db    0
.eh_frame:0000000000009AEA                 db    0
.eh_frame:0000000000009AEB                 db    0
.eh_frame:0000000000009AEC                 db    0
.eh_frame:0000000000009AED                 db  41h ; A
.eh_frame:0000000000009AEE                 db  0Eh
.eh_frame:0000000000009AEF                 db  10h
.eh_frame:0000000000009AF0                 db  86h
.eh_frame:0000000000009AF1                 db    2
.eh_frame:0000000000009AF2                 db  41h ; A
.eh_frame:0000000000009AF3                 db  0Eh
.eh_frame:0000000000009AF4                 db  18h
.eh_frame:0000000000009AF5                 db  83h
.eh_frame:0000000000009AF6                 db    3
.eh_frame:0000000000009AF7                 db  4Dh ; M
.eh_frame:0000000000009AF8                 db  0Eh
.eh_frame:0000000000009AF9                 db  20h
.eh_frame:0000000000009AFA                 db  49h ; I
.eh_frame:0000000000009AFB                 db  0Eh
.eh_frame:0000000000009AFC                 db  18h
.eh_frame:0000000000009AFD                 db  47h ; G
.eh_frame:0000000000009AFE                 db  0Eh
.eh_frame:0000000000009AFF                 db  10h
.eh_frame:0000000000009B00                 db  41h ; A
.eh_frame:0000000000009B01                 db  0Eh
.eh_frame:0000000000009B02                 db    8
.eh_frame:0000000000009B03                 db    0
.eh_frame:0000000000009B04                 db  18h
.eh_frame:0000000000009B05                 db    0
.eh_frame:0000000000009B06                 db    0
.eh_frame:0000000000009B07                 db    0
.eh_frame:0000000000009B08                 db 0A8h
.eh_frame:0000000000009B09                 db    9
.eh_frame:0000000000009B0A                 db    0
.eh_frame:0000000000009B0B                 db    0
.eh_frame:0000000000009B0C                 db 0D4h
.eh_frame:0000000000009B0D                 db 0B2h
.eh_frame:0000000000009B0E                 db 0FFh
.eh_frame:0000000000009B0F                 db 0FFh
.eh_frame:0000000000009B10                 db  13h
.eh_frame:0000000000009B11                 db    0
.eh_frame:0000000000009B12                 db    0
.eh_frame:0000000000009B13                 db    0
.eh_frame:0000000000009B14                 db    0
.eh_frame:0000000000009B15                 db  41h ; A
.eh_frame:0000000000009B16                 db  0Eh
.eh_frame:0000000000009B17                 db  10h
.eh_frame:0000000000009B18                 db  83h
.eh_frame:0000000000009B19                 db    2
.eh_frame:0000000000009B1A                 db  50h ; P
.eh_frame:0000000000009B1B                 db  0Eh
.eh_frame:0000000000009B1C                 db    8
.eh_frame:0000000000009B1D                 db    0
.eh_frame:0000000000009B1E                 db    0
.eh_frame:0000000000009B1F                 db    0
.eh_frame:0000000000009B20                 db  14h
.eh_frame:0000000000009B21                 db    0
.eh_frame:0000000000009B22                 db    0
.eh_frame:0000000000009B23                 db    0
.eh_frame:0000000000009B24                 db 0C4h
.eh_frame:0000000000009B25                 db    9
.eh_frame:0000000000009B26                 db    0
.eh_frame:0000000000009B27                 db    0
.eh_frame:0000000000009B28                 db 0D8h
.eh_frame:0000000000009B29                 db 0B2h
.eh_frame:0000000000009B2A                 db 0FFh
.eh_frame:0000000000009B2B                 db 0FFh
.eh_frame:0000000000009B2C                 db  35h ; 5
.eh_frame:0000000000009B2D                 db    0
.eh_frame:0000000000009B2E                 db    0
.eh_frame:0000000000009B2F                 db    0
.eh_frame:0000000000009B30                 db    0
.eh_frame:0000000000009B31                 db  4Bh ; K
.eh_frame:0000000000009B32                 db  0Eh
.eh_frame:0000000000009B33                 db  10h
.eh_frame:0000000000009B34                 db    0
.eh_frame:0000000000009B35                 db    0
.eh_frame:0000000000009B36                 db    0
.eh_frame:0000000000009B37                 db    0
.eh_frame:0000000000009B38                 db  1Ch
.eh_frame:0000000000009B39                 db    0
.eh_frame:0000000000009B3A                 db    0
.eh_frame:0000000000009B3B                 db    0
.eh_frame:0000000000009B3C                 db 0DCh
.eh_frame:0000000000009B3D                 db    9
.eh_frame:0000000000009B3E                 db    0
.eh_frame:0000000000009B3F                 db    0
.eh_frame:0000000000009B40                 db    0
.eh_frame:0000000000009B41                 db 0B3h
.eh_frame:0000000000009B42                 db 0FFh
.eh_frame:0000000000009B43                 db 0FFh
.eh_frame:0000000000009B44                 db  27h ; '
.eh_frame:0000000000009B45                 db    0
.eh_frame:0000000000009B46                 db    0
.eh_frame:0000000000009B47                 db    0
.eh_frame:0000000000009B48                 db    0
.eh_frame:0000000000009B49                 db  41h ; A
.eh_frame:0000000000009B4A                 db  0Eh
.eh_frame:0000000000009B4B                 db  10h
.eh_frame:0000000000009B4C                 db  83h
.eh_frame:0000000000009B4D                 db    2
.eh_frame:0000000000009B4E                 db  51h ; Q
.eh_frame:0000000000009B4F                 db  0Ah
.eh_frame:0000000000009B50                 db  0Eh
.eh_frame:0000000000009B51                 db    8
.eh_frame:0000000000009B52                 db  46h ; F
.eh_frame:0000000000009B53                 db  0Bh
.eh_frame:0000000000009B54                 db    0
.eh_frame:0000000000009B55                 db    0
.eh_frame:0000000000009B56                 db    0
.eh_frame:0000000000009B57                 db    0
.eh_frame:0000000000009B58                 db  4Ch ; L
.eh_frame:0000000000009B59                 db    0
.eh_frame:0000000000009B5A                 db    0
.eh_frame:0000000000009B5B                 db    0
.eh_frame:0000000000009B5C                 db 0FCh
.eh_frame:0000000000009B5D                 db    9
.eh_frame:0000000000009B5E                 db    0
.eh_frame:0000000000009B5F                 db    0
.eh_frame:0000000000009B60                 db  10h
.eh_frame:0000000000009B61                 db 0B3h
.eh_frame:0000000000009B62                 db 0FFh
.eh_frame:0000000000009B63                 db 0FFh
.eh_frame:0000000000009B64                 db  1Ch
.eh_frame:0000000000009B65                 db    4
.eh_frame:0000000000009B66                 db    0
.eh_frame:0000000000009B67                 db    0
.eh_frame:0000000000009B68                 db    0
.eh_frame:0000000000009B69                 db  42h ; B
.eh_frame:0000000000009B6A                 db  0Eh
.eh_frame:0000000000009B6B                 db  10h
.eh_frame:0000000000009B6C                 db  8Fh
.eh_frame:0000000000009B6D                 db    2
.eh_frame:0000000000009B6E                 db  42h ; B
.eh_frame:0000000000009B6F                 db  0Eh
.eh_frame:0000000000009B70                 db  18h
.eh_frame:0000000000009B71                 db  8Eh
.eh_frame:0000000000009B72                 db    3
.eh_frame:0000000000009B73                 db  42h ; B
.eh_frame:0000000000009B74                 db  0Eh
.eh_frame:0000000000009B75                 db  20h
.eh_frame:0000000000009B76                 db  8Dh
.eh_frame:0000000000009B77                 db    4
.eh_frame:0000000000009B78                 db  42h ; B
.eh_frame:0000000000009B79                 db  0Eh
.eh_frame:0000000000009B7A                 db  28h ; (
.eh_frame:0000000000009B7B                 db  8Ch
.eh_frame:0000000000009B7C                 db    5
.eh_frame:0000000000009B7D                 db  41h ; A
.eh_frame:0000000000009B7E                 db  0Eh
.eh_frame:0000000000009B7F                 db  30h ; 0
.eh_frame:0000000000009B80                 db  86h
.eh_frame:0000000000009B81                 db    6
.eh_frame:0000000000009B82                 db  41h ; A
.eh_frame:0000000000009B83                 db  0Eh
.eh_frame:0000000000009B84                 db  38h ; 8
.eh_frame:0000000000009B85                 db  83h
.eh_frame:0000000000009B86                 db    7
.eh_frame:0000000000009B87                 db  44h ; D
.eh_frame:0000000000009B88                 db  0Eh
.eh_frame:0000000000009B89                 db  60h ; `
.eh_frame:0000000000009B8A                 db    2
.eh_frame:0000000000009B8B                 db 0E9h
.eh_frame:0000000000009B8C                 db  0Ah
.eh_frame:0000000000009B8D                 db  0Eh
.eh_frame:0000000000009B8E                 db  38h ; 8
.eh_frame:0000000000009B8F                 db  41h ; A
.eh_frame:0000000000009B90                 db  0Eh
.eh_frame:0000000000009B91                 db  30h ; 0
.eh_frame:0000000000009B92                 db  41h ; A
.eh_frame:0000000000009B93                 db  0Eh
.eh_frame:0000000000009B94                 db  28h ; (
.eh_frame:0000000000009B95                 db  42h ; B
.eh_frame:0000000000009B96                 db  0Eh
.eh_frame:0000000000009B97                 db  20h
.eh_frame:0000000000009B98                 db  42h ; B
.eh_frame:0000000000009B99                 db  0Eh
.eh_frame:0000000000009B9A                 db  18h
.eh_frame:0000000000009B9B                 db  42h ; B
.eh_frame:0000000000009B9C                 db  0Eh
.eh_frame:0000000000009B9D                 db  10h
.eh_frame:0000000000009B9E                 db  42h ; B
.eh_frame:0000000000009B9F                 db  0Eh
.eh_frame:0000000000009BA0                 db    8
.eh_frame:0000000000009BA1                 db  47h ; G
.eh_frame:0000000000009BA2                 db  0Bh
.eh_frame:0000000000009BA3                 db    0
.eh_frame:0000000000009BA4                 db    0
.eh_frame:0000000000009BA5                 db    0
.eh_frame:0000000000009BA6                 db    0
.eh_frame:0000000000009BA7                 db    0
.eh_frame:0000000000009BA8                 db  1Ch
.eh_frame:0000000000009BA9                 db    0
.eh_frame:0000000000009BAA                 db    0
.eh_frame:0000000000009BAB                 db    0
.eh_frame:0000000000009BAC                 db  4Ch ; L
.eh_frame:0000000000009BAD                 db  0Ah
.eh_frame:0000000000009BAE                 db    0
.eh_frame:0000000000009BAF                 db    0
.eh_frame:0000000000009BB0                 db 0E0h
.eh_frame:0000000000009BB1                 db 0B6h
.eh_frame:0000000000009BB2                 db 0FFh
.eh_frame:0000000000009BB3                 db 0FFh
.eh_frame:0000000000009BB4                 db 0B1h
.eh_frame:0000000000009BB5                 db    0
.eh_frame:0000000000009BB6                 db    0
.eh_frame:0000000000009BB7                 db    0
.eh_frame:0000000000009BB8                 db    0
.eh_frame:0000000000009BB9                 db  47h ; G
.eh_frame:0000000000009BBA                 db  0Eh
.eh_frame:0000000000009BBB                 db 0E0h
.eh_frame:0000000000009BBC                 db    1
.eh_frame:0000000000009BBD                 db    2
.eh_frame:0000000000009BBE                 db 0A4h
.eh_frame:0000000000009BBF                 db  0Ah
.eh_frame:0000000000009BC0                 db  0Eh
.eh_frame:0000000000009BC1                 db    8
.eh_frame:0000000000009BC2                 db  41h ; A
.eh_frame:0000000000009BC3                 db  0Bh
.eh_frame:0000000000009BC4                 db    0
.eh_frame:0000000000009BC5                 db    0
.eh_frame:0000000000009BC6                 db    0
.eh_frame:0000000000009BC7                 db    0
.eh_frame:0000000000009BC8                 db  3Ch ; <
.eh_frame:0000000000009BC9                 db    0
.eh_frame:0000000000009BCA                 db    0
.eh_frame:0000000000009BCB                 db    0
.eh_frame:0000000000009BCC                 db  6Ch ; l
.eh_frame:0000000000009BCD                 db  0Ah
.eh_frame:0000000000009BCE                 db    0
.eh_frame:0000000000009BCF                 db    0
.eh_frame:0000000000009BD0                 db  80h
.eh_frame:0000000000009BD1                 db 0B7h
.eh_frame:0000000000009BD2                 db 0FFh
.eh_frame:0000000000009BD3                 db 0FFh
.eh_frame:0000000000009BD4                 db  83h
.eh_frame:0000000000009BD5                 db    0
.eh_frame:0000000000009BD6                 db    0
.eh_frame:0000000000009BD7                 db    0
.eh_frame:0000000000009BD8                 db    0
.eh_frame:0000000000009BD9                 db  42h ; B
.eh_frame:0000000000009BDA                 db  0Eh
.eh_frame:0000000000009BDB                 db  10h
.eh_frame:0000000000009BDC                 db  8Dh
.eh_frame:0000000000009BDD                 db    2
.eh_frame:0000000000009BDE                 db  42h ; B
.eh_frame:0000000000009BDF                 db  0Eh
.eh_frame:0000000000009BE0                 db  18h
.eh_frame:0000000000009BE1                 db  8Ch
.eh_frame:0000000000009BE2                 db    3
.eh_frame:0000000000009BE3                 db  44h ; D
.eh_frame:0000000000009BE4                 db  0Eh
.eh_frame:0000000000009BE5                 db  20h
.eh_frame:0000000000009BE6                 db  86h
.eh_frame:0000000000009BE7                 db    4
.eh_frame:0000000000009BE8                 db  41h ; A
.eh_frame:0000000000009BE9                 db  0Eh
.eh_frame:0000000000009BEA                 db  28h ; (
.eh_frame:0000000000009BEB                 db  83h
.eh_frame:0000000000009BEC                 db    5
.eh_frame:0000000000009BED                 db  4Ah ; J
.eh_frame:0000000000009BEE                 db  0Eh
.eh_frame:0000000000009BEF                 db  40h ; @
.eh_frame:0000000000009BF0                 db    2
.eh_frame:0000000000009BF1                 db  64h ; d
.eh_frame:0000000000009BF2                 db  0Ah
.eh_frame:0000000000009BF3                 db  0Eh
.eh_frame:0000000000009BF4                 db  28h ; (
.eh_frame:0000000000009BF5                 db  41h ; A
.eh_frame:0000000000009BF6                 db  0Eh
.eh_frame:0000000000009BF7                 db  20h
.eh_frame:0000000000009BF8                 db  41h ; A
.eh_frame:0000000000009BF9                 db  0Eh
.eh_frame:0000000000009BFA                 db  18h
.eh_frame:0000000000009BFB                 db  42h ; B
.eh_frame:0000000000009BFC                 db  0Eh
.eh_frame:0000000000009BFD                 db  10h
.eh_frame:0000000000009BFE                 db  42h ; B
.eh_frame:0000000000009BFF                 db  0Eh
.eh_frame:0000000000009C00                 db    8
.eh_frame:0000000000009C01                 db  41h ; A
.eh_frame:0000000000009C02                 db  0Bh
.eh_frame:0000000000009C03                 db    0
.eh_frame:0000000000009C04                 db    0
.eh_frame:0000000000009C05                 db    0
.eh_frame:0000000000009C06                 db    0
.eh_frame:0000000000009C07                 db    0
.eh_frame:0000000000009C08                 db  24h ; $
.eh_frame:0000000000009C09                 db    0
.eh_frame:0000000000009C0A                 db    0
.eh_frame:0000000000009C0B                 db    0
.eh_frame:0000000000009C0C                 db 0ACh
.eh_frame:0000000000009C0D                 db  0Ah
.eh_frame:0000000000009C0E                 db    0
.eh_frame:0000000000009C0F                 db    0
.eh_frame:0000000000009C10                 db 0D0h
.eh_frame:0000000000009C11                 db 0B7h
.eh_frame:0000000000009C12                 db 0FFh
.eh_frame:0000000000009C13                 db 0FFh
.eh_frame:0000000000009C14                 db  7Eh ; ~
.eh_frame:0000000000009C15                 db    0
.eh_frame:0000000000009C16                 db    0
.eh_frame:0000000000009C17                 db    0
.eh_frame:0000000000009C18                 db    0
.eh_frame:0000000000009C19                 db  41h ; A
.eh_frame:0000000000009C1A                 db  0Eh
.eh_frame:0000000000009C1B                 db  10h
.eh_frame:0000000000009C1C                 db  83h
.eh_frame:0000000000009C1D                 db    2
.eh_frame:0000000000009C1E                 db  4Ch ; L
.eh_frame:0000000000009C1F                 db  0Eh
.eh_frame:0000000000009C20                 db  20h
.eh_frame:0000000000009C21                 db    2
.eh_frame:0000000000009C22                 db  49h ; I
.eh_frame:0000000000009C23                 db  0Ah
.eh_frame:0000000000009C24                 db  0Eh
.eh_frame:0000000000009C25                 db  10h
.eh_frame:0000000000009C26                 db  41h ; A
.eh_frame:0000000000009C27                 db  0Eh
.eh_frame:0000000000009C28                 db    8
.eh_frame:0000000000009C29                 db  41h ; A
.eh_frame:0000000000009C2A                 db  0Bh
.eh_frame:0000000000009C2B                 db    0
.eh_frame:0000000000009C2C                 db    0
.eh_frame:0000000000009C2D                 db    0
.eh_frame:0000000000009C2E                 db    0
.eh_frame:0000000000009C2F                 db    0
.eh_frame:0000000000009C30                 db  10h
.eh_frame:0000000000009C31                 db    0
.eh_frame:0000000000009C32                 db    0
.eh_frame:0000000000009C33                 db    0
.eh_frame:0000000000009C34                 db 0D4h
.eh_frame:0000000000009C35                 db  0Ah
.eh_frame:0000000000009C36                 db    0
.eh_frame:0000000000009C37                 db    0
.eh_frame:0000000000009C38                 db  28h ; (
.eh_frame:0000000000009C39                 db 0B8h
.eh_frame:0000000000009C3A                 db 0FFh
.eh_frame:0000000000009C3B                 db 0FFh
.eh_frame:0000000000009C3C                 db  1Fh
.eh_frame:0000000000009C3D                 db    0
.eh_frame:0000000000009C3E                 db    0
.eh_frame:0000000000009C3F                 db    0
.eh_frame:0000000000009C40                 db    0
.eh_frame:0000000000009C41                 db  5Ah ; Z
.eh_frame:0000000000009C42                 db  0Eh
.eh_frame:0000000000009C43                 db  10h
.eh_frame:0000000000009C44                 db  10h
.eh_frame:0000000000009C45                 db    0
.eh_frame:0000000000009C46                 db    0
.eh_frame:0000000000009C47                 db    0
.eh_frame:0000000000009C48                 db 0E8h
.eh_frame:0000000000009C49                 db  0Ah
.eh_frame:0000000000009C4A                 db    0
.eh_frame:0000000000009C4B                 db    0
.eh_frame:0000000000009C4C                 db  34h ; 4
.eh_frame:0000000000009C4D                 db 0B8h
.eh_frame:0000000000009C4E                 db 0FFh
.eh_frame:0000000000009C4F                 db 0FFh
.eh_frame:0000000000009C50                 db  1Bh
.eh_frame:0000000000009C51                 db    0
.eh_frame:0000000000009C52                 db    0
.eh_frame:0000000000009C53                 db    0
.eh_frame:0000000000009C54                 db    0
.eh_frame:0000000000009C55                 db    0
.eh_frame:0000000000009C56                 db    0
.eh_frame:0000000000009C57                 db    0
.eh_frame:0000000000009C58                 db  4Ch ; L
.eh_frame:0000000000009C59                 db    0
.eh_frame:0000000000009C5A                 db    0
.eh_frame:0000000000009C5B                 db    0
.eh_frame:0000000000009C5C                 db 0FCh
.eh_frame:0000000000009C5D                 db  0Ah
.eh_frame:0000000000009C5E                 db    0
.eh_frame:0000000000009C5F                 db    0
.eh_frame:0000000000009C60                 db  40h ; @
.eh_frame:0000000000009C61                 db 0B8h
.eh_frame:0000000000009C62                 db 0FFh
.eh_frame:0000000000009C63                 db 0FFh
.eh_frame:0000000000009C64                 db    8
.eh_frame:0000000000009C65                 db    2
.eh_frame:0000000000009C66                 db    0
.eh_frame:0000000000009C67                 db    0
.eh_frame:0000000000009C68                 db    0
.eh_frame:0000000000009C69                 db  42h ; B
.eh_frame:0000000000009C6A                 db  0Eh
.eh_frame:0000000000009C6B                 db  10h
.eh_frame:0000000000009C6C                 db  8Fh
.eh_frame:0000000000009C6D                 db    2
.eh_frame:0000000000009C6E                 db  42h ; B
.eh_frame:0000000000009C6F                 db  0Eh
.eh_frame:0000000000009C70                 db  18h
.eh_frame:0000000000009C71                 db  8Eh
.eh_frame:0000000000009C72                 db    3
.eh_frame:0000000000009C73                 db  45h ; E
.eh_frame:0000000000009C74                 db  0Eh
.eh_frame:0000000000009C75                 db  20h
.eh_frame:0000000000009C76                 db  8Dh
.eh_frame:0000000000009C77                 db    4
.eh_frame:0000000000009C78                 db  42h ; B
.eh_frame:0000000000009C79                 db  0Eh
.eh_frame:0000000000009C7A                 db  28h ; (
.eh_frame:0000000000009C7B                 db  8Ch
.eh_frame:0000000000009C7C                 db    5
.eh_frame:0000000000009C7D                 db  44h ; D
.eh_frame:0000000000009C7E                 db  0Eh
.eh_frame:0000000000009C7F                 db  30h ; 0
.eh_frame:0000000000009C80                 db  86h
.eh_frame:0000000000009C81                 db    6
.eh_frame:0000000000009C82                 db  41h ; A
.eh_frame:0000000000009C83                 db  0Eh
.eh_frame:0000000000009C84                 db  38h ; 8
.eh_frame:0000000000009C85                 db  83h
.eh_frame:0000000000009C86                 db    7
.eh_frame:0000000000009C87                 db  4Ah ; J
.eh_frame:0000000000009C88                 db  0Eh
.eh_frame:0000000000009C89                 db 0E0h
.eh_frame:0000000000009C8A                 db    8
.eh_frame:0000000000009C8B                 db    2
.eh_frame:0000000000009C8C                 db 0F4h
.eh_frame:0000000000009C8D                 db  0Ah
.eh_frame:0000000000009C8E                 db  0Eh
.eh_frame:0000000000009C8F                 db  38h ; 8
.eh_frame:0000000000009C90                 db  41h ; A
.eh_frame:0000000000009C91                 db  0Eh
.eh_frame:0000000000009C92                 db  30h ; 0
.eh_frame:0000000000009C93                 db  41h ; A
.eh_frame:0000000000009C94                 db  0Eh
.eh_frame:0000000000009C95                 db  28h ; (
.eh_frame:0000000000009C96                 db  42h ; B
.eh_frame:0000000000009C97                 db  0Eh
.eh_frame:0000000000009C98                 db  20h
.eh_frame:0000000000009C99                 db  42h ; B
.eh_frame:0000000000009C9A                 db  0Eh
.eh_frame:0000000000009C9B                 db  18h
.eh_frame:0000000000009C9C                 db  42h ; B
.eh_frame:0000000000009C9D                 db  0Eh
.eh_frame:0000000000009C9E                 db  10h
.eh_frame:0000000000009C9F                 db  42h ; B
.eh_frame:0000000000009CA0                 db  0Eh
.eh_frame:0000000000009CA1                 db    8
.eh_frame:0000000000009CA2                 db  48h ; H
.eh_frame:0000000000009CA3                 db  0Bh
.eh_frame:0000000000009CA4                 db    0
.eh_frame:0000000000009CA5                 db    0
.eh_frame:0000000000009CA6                 db    0
.eh_frame:0000000000009CA7                 db    0
.eh_frame:0000000000009CA8                 db  4Ch ; L
.eh_frame:0000000000009CA9                 db    0
.eh_frame:0000000000009CAA                 db    0
.eh_frame:0000000000009CAB                 db    0
.eh_frame:0000000000009CAC                 db  4Ch ; L
.eh_frame:0000000000009CAD                 db  0Bh
.eh_frame:0000000000009CAE                 db    0
.eh_frame:0000000000009CAF                 db    0
.eh_frame:0000000000009CB0                 db    0
.eh_frame:0000000000009CB1                 db 0BAh
.eh_frame:0000000000009CB2                 db 0FFh
.eh_frame:0000000000009CB3                 db 0FFh
.eh_frame:0000000000009CB4                 db  7Dh ; }
.eh_frame:0000000000009CB5                 db    0
.eh_frame:0000000000009CB6                 db    0
.eh_frame:0000000000009CB7                 db    0
.eh_frame:0000000000009CB8                 db    0
.eh_frame:0000000000009CB9                 db  42h ; B
.eh_frame:0000000000009CBA                 db  0Eh
.eh_frame:0000000000009CBB                 db  10h
.eh_frame:0000000000009CBC                 db  8Ch
.eh_frame:0000000000009CBD                 db    2
.eh_frame:0000000000009CBE                 db  41h ; A
.eh_frame:0000000000009CBF                 db  0Eh
.eh_frame:0000000000009CC0                 db  18h
.eh_frame:0000000000009CC1                 db  86h
.eh_frame:0000000000009CC2                 db    3
.eh_frame:0000000000009CC3                 db  44h ; D
.eh_frame:0000000000009CC4                 db  0Eh
.eh_frame:0000000000009CC5                 db  20h
.eh_frame:0000000000009CC6                 db  83h
.eh_frame:0000000000009CC7                 db    4
.eh_frame:0000000000009CC8                 db  69h ; i
.eh_frame:0000000000009CC9                 db  0Ah
.eh_frame:0000000000009CCA                 db  0Eh
.eh_frame:0000000000009CCB                 db  18h
.eh_frame:0000000000009CCC                 db  41h ; A
.eh_frame:0000000000009CCD                 db  0Eh
.eh_frame:0000000000009CCE                 db  10h
.eh_frame:0000000000009CCF                 db  42h ; B
.eh_frame:0000000000009CD0                 db  0Eh
.eh_frame:0000000000009CD1                 db    8
.eh_frame:0000000000009CD2                 db  45h ; E
.eh_frame:0000000000009CD3                 db  0Bh
.eh_frame:0000000000009CD4                 db  55h ; U
.eh_frame:0000000000009CD5                 db  0Ah
.eh_frame:0000000000009CD6                 db  0Eh
.eh_frame:0000000000009CD7                 db  18h
.eh_frame:0000000000009CD8                 db  41h ; A
.eh_frame:0000000000009CD9                 db  0Eh
.eh_frame:0000000000009CDA                 db  10h
.eh_frame:0000000000009CDB                 db  42h ; B
.eh_frame:0000000000009CDC                 db  0Eh
.eh_frame:0000000000009CDD                 db    8
.eh_frame:0000000000009CDE                 db  48h ; H
.eh_frame:0000000000009CDF                 db  0Bh
.eh_frame:0000000000009CE0                 db  41h ; A
.eh_frame:0000000000009CE1                 db  0Ah
.eh_frame:0000000000009CE2                 db  0Eh
.eh_frame:0000000000009CE3                 db  18h
.eh_frame:0000000000009CE4                 db  46h ; F
.eh_frame:0000000000009CE5                 db  0Eh
.eh_frame:0000000000009CE6                 db  10h
.eh_frame:0000000000009CE7                 db  42h ; B
.eh_frame:0000000000009CE8                 db  0Eh
.eh_frame:0000000000009CE9                 db    8
.eh_frame:0000000000009CEA                 db  47h ; G
.eh_frame:0000000000009CEB                 db  0Bh
.eh_frame:0000000000009CEC                 db  49h ; I
.eh_frame:0000000000009CED                 db  0Eh
.eh_frame:0000000000009CEE                 db  18h
.eh_frame:0000000000009CEF                 db  41h ; A
.eh_frame:0000000000009CF0                 db  0Eh
.eh_frame:0000000000009CF1                 db  10h
.eh_frame:0000000000009CF2                 db  42h ; B
.eh_frame:0000000000009CF3                 db  0Eh
.eh_frame:0000000000009CF4                 db    8
.eh_frame:0000000000009CF5                 db    0
.eh_frame:0000000000009CF6                 db    0
.eh_frame:0000000000009CF7                 db    0
.eh_frame:0000000000009CF8                 db  1Ch
.eh_frame:0000000000009CF9                 db    0
.eh_frame:0000000000009CFA                 db    0
.eh_frame:0000000000009CFB                 db    0
.eh_frame:0000000000009CFC                 db  9Ch
.eh_frame:0000000000009CFD                 db  0Bh
.eh_frame:0000000000009CFE                 db    0
.eh_frame:0000000000009CFF                 db    0
.eh_frame:0000000000009D00                 db  30h ; 0
.eh_frame:0000000000009D01                 db 0BAh
.eh_frame:0000000000009D02                 db 0FFh
.eh_frame:0000000000009D03                 db 0FFh
.eh_frame:0000000000009D04                 db  60h ; `
.eh_frame:0000000000009D05                 db    0
.eh_frame:0000000000009D06                 db    0
.eh_frame:0000000000009D07                 db    0
.eh_frame:0000000000009D08                 db    0
.eh_frame:0000000000009D09                 db  44h ; D
.eh_frame:0000000000009D0A                 db  0Eh
.eh_frame:0000000000009D0B                 db  10h
.eh_frame:0000000000009D0C                 db  75h ; u
.eh_frame:0000000000009D0D                 db  0Ah
.eh_frame:0000000000009D0E                 db  0Eh
.eh_frame:0000000000009D0F                 db    8
.eh_frame:0000000000009D10                 db  47h ; G
.eh_frame:0000000000009D11                 db  0Bh
.eh_frame:0000000000009D12                 db  5Fh ; _
.eh_frame:0000000000009D13                 db  0Eh
.eh_frame:0000000000009D14                 db    8
.eh_frame:0000000000009D15                 db    0
.eh_frame:0000000000009D16                 db    0
.eh_frame:0000000000009D17                 db    0
.eh_frame:0000000000009D18                 db  1Ch
.eh_frame:0000000000009D19                 db    0
.eh_frame:0000000000009D1A                 db    0
.eh_frame:0000000000009D1B                 db    0
.eh_frame:0000000000009D1C                 db 0BCh
.eh_frame:0000000000009D1D                 db  0Bh
.eh_frame:0000000000009D1E                 db    0
.eh_frame:0000000000009D1F                 db    0
.eh_frame:0000000000009D20                 db  70h ; p
.eh_frame:0000000000009D21                 db 0BAh
.eh_frame:0000000000009D22                 db 0FFh
.eh_frame:0000000000009D23                 db 0FFh
.eh_frame:0000000000009D24                 db  3Ch ; <
.eh_frame:0000000000009D25                 db    0
.eh_frame:0000000000009D26                 db    0
.eh_frame:0000000000009D27                 db    0
.eh_frame:0000000000009D28                 db    0
.eh_frame:0000000000009D29                 db  44h ; D
.eh_frame:0000000000009D2A                 db  0Eh
.eh_frame:0000000000009D2B                 db  10h
.eh_frame:0000000000009D2C                 db  61h ; a
.eh_frame:0000000000009D2D                 db  0Ah
.eh_frame:0000000000009D2E                 db  0Eh
.eh_frame:0000000000009D2F                 db    8
.eh_frame:0000000000009D30                 db  4Bh ; K
.eh_frame:0000000000009D31                 db  0Bh
.eh_frame:0000000000009D32                 db  4Bh ; K
.eh_frame:0000000000009D33                 db  0Eh
.eh_frame:0000000000009D34                 db    8
.eh_frame:0000000000009D35                 db    0
.eh_frame:0000000000009D36                 db    0
.eh_frame:0000000000009D37                 db    0
.eh_frame:0000000000009D38                 db  34h ; 4
.eh_frame:0000000000009D39                 db    0
.eh_frame:0000000000009D3A                 db    0
.eh_frame:0000000000009D3B                 db    0
.eh_frame:0000000000009D3C                 db 0DCh
.eh_frame:0000000000009D3D                 db  0Bh
.eh_frame:0000000000009D3E                 db    0
.eh_frame:0000000000009D3F                 db    0
.eh_frame:0000000000009D40                 db  90h
.eh_frame:0000000000009D41                 db 0BAh
.eh_frame:0000000000009D42                 db 0FFh
.eh_frame:0000000000009D43                 db 0FFh
.eh_frame:0000000000009D44                 db  7Bh ; {
.eh_frame:0000000000009D45                 db    0
.eh_frame:0000000000009D46                 db    0
.eh_frame:0000000000009D47                 db    0
.eh_frame:0000000000009D48                 db    0
.eh_frame:0000000000009D49                 db  42h ; B
.eh_frame:0000000000009D4A                 db  0Eh
.eh_frame:0000000000009D4B                 db  10h
.eh_frame:0000000000009D4C                 db  8Ch
.eh_frame:0000000000009D4D                 db    2
.eh_frame:0000000000009D4E                 db  41h ; A
.eh_frame:0000000000009D4F                 db  0Eh
.eh_frame:0000000000009D50                 db  18h
.eh_frame:0000000000009D51                 db  86h
.eh_frame:0000000000009D52                 db    3
.eh_frame:0000000000009D53                 db  41h ; A
.eh_frame:0000000000009D54                 db  0Eh
.eh_frame:0000000000009D55                 db  20h
.eh_frame:0000000000009D56                 db  83h
.eh_frame:0000000000009D57                 db    4
.eh_frame:0000000000009D58                 db  7Dh ; }
.eh_frame:0000000000009D59                 db  0Ah
.eh_frame:0000000000009D5A                 db  0Eh
.eh_frame:0000000000009D5B                 db  18h
.eh_frame:0000000000009D5C                 db  41h ; A
.eh_frame:0000000000009D5D                 db  0Eh
.eh_frame:0000000000009D5E                 db  10h
.eh_frame:0000000000009D5F                 db  42h ; B
.eh_frame:0000000000009D60                 db  0Eh
.eh_frame:0000000000009D61                 db    8
.eh_frame:0000000000009D62                 db  44h ; D
.eh_frame:0000000000009D63                 db  0Bh
.eh_frame:0000000000009D64                 db  60h ; `
.eh_frame:0000000000009D65                 db  0Ah
.eh_frame:0000000000009D66                 db  0Eh
.eh_frame:0000000000009D67                 db  18h
.eh_frame:0000000000009D68                 db  41h ; A
.eh_frame:0000000000009D69                 db  0Eh
.eh_frame:0000000000009D6A                 db  10h
.eh_frame:0000000000009D6B                 db  42h ; B
.eh_frame:0000000000009D6C                 db  0Eh
.eh_frame:0000000000009D6D                 db    8
.eh_frame:0000000000009D6E                 db  45h ; E
.eh_frame:0000000000009D6F                 db  0Bh
.eh_frame:0000000000009D70                 db  1Ch
.eh_frame:0000000000009D71                 db    0
.eh_frame:0000000000009D72                 db    0
.eh_frame:0000000000009D73                 db    0
.eh_frame:0000000000009D74                 db  14h
.eh_frame:0000000000009D75                 db  0Ch
.eh_frame:0000000000009D76                 db    0
.eh_frame:0000000000009D77                 db    0
.eh_frame:0000000000009D78                 db 0D8h
.eh_frame:0000000000009D79                 db 0BAh
.eh_frame:0000000000009D7A                 db 0FFh
.eh_frame:0000000000009D7B                 db 0FFh
.eh_frame:0000000000009D7C                 db  40h ; @
.eh_frame:0000000000009D7D                 db    0
.eh_frame:0000000000009D7E                 db    0
.eh_frame:0000000000009D7F                 db    0
.eh_frame:0000000000009D80                 db    0
.eh_frame:0000000000009D81                 db  44h ; D
.eh_frame:0000000000009D82                 db  0Eh
.eh_frame:0000000000009D83                 db  10h
.eh_frame:0000000000009D84                 db  83h
.eh_frame:0000000000009D85                 db    2
.eh_frame:0000000000009D86                 db  5Ah ; Z
.eh_frame:0000000000009D87                 db  0Ah
.eh_frame:0000000000009D88                 db  0Eh
.eh_frame:0000000000009D89                 db    8
.eh_frame:0000000000009D8A                 db  4Ah ; J
.eh_frame:0000000000009D8B                 db  0Bh
.eh_frame:0000000000009D8C                 db  53h ; S
.eh_frame:0000000000009D8D                 db  0Eh
.eh_frame:0000000000009D8E                 db    8
.eh_frame:0000000000009D8F                 db    0
.eh_frame:0000000000009D90                 db  2Ch ; ,
.eh_frame:0000000000009D91                 db    0
.eh_frame:0000000000009D92                 db    0
.eh_frame:0000000000009D93                 db    0
.eh_frame:0000000000009D94                 db  34h ; 4
.eh_frame:0000000000009D95                 db  0Ch
.eh_frame:0000000000009D96                 db    0
.eh_frame:0000000000009D97                 db    0
.eh_frame:0000000000009D98                 db 0F8h
.eh_frame:0000000000009D99                 db 0BAh
.eh_frame:0000000000009D9A                 db 0FFh
.eh_frame:0000000000009D9B                 db 0FFh
.eh_frame:0000000000009D9C                 db  57h ; W
.eh_frame:0000000000009D9D                 db    0
.eh_frame:0000000000009D9E                 db    0
.eh_frame:0000000000009D9F                 db    0
.eh_frame:0000000000009DA0                 db    0
.eh_frame:0000000000009DA1                 db  63h ; c
.eh_frame:0000000000009DA2                 db  0Eh
.eh_frame:0000000000009DA3                 db  10h
.eh_frame:0000000000009DA4                 db  8Ch
.eh_frame:0000000000009DA5                 db    2
.eh_frame:0000000000009DA6                 db  41h ; A
.eh_frame:0000000000009DA7                 db  0Eh
.eh_frame:0000000000009DA8                 db  18h
.eh_frame:0000000000009DA9                 db  86h
.eh_frame:0000000000009DAA                 db    3
.eh_frame:0000000000009DAB                 db  44h ; D
.eh_frame:0000000000009DAC                 db  0Eh
.eh_frame:0000000000009DAD                 db  20h
.eh_frame:0000000000009DAE                 db  83h
.eh_frame:0000000000009DAF                 db    4
.eh_frame:0000000000009DB0                 db  6Bh ; k
.eh_frame:0000000000009DB1                 db  0Eh
.eh_frame:0000000000009DB2                 db  18h
.eh_frame:0000000000009DB3                 db  41h ; A
.eh_frame:0000000000009DB4                 db  0Eh
.eh_frame:0000000000009DB5                 db  10h
.eh_frame:0000000000009DB6                 db  42h ; B
.eh_frame:0000000000009DB7                 db  0Eh
.eh_frame:0000000000009DB8                 db    8
.eh_frame:0000000000009DB9                 db    0
.eh_frame:0000000000009DBA                 db    0
.eh_frame:0000000000009DBB                 db    0
.eh_frame:0000000000009DBC                 db    0
.eh_frame:0000000000009DBD                 db    0
.eh_frame:0000000000009DBE                 db    0
.eh_frame:0000000000009DBF                 db    0
.eh_frame:0000000000009DC0                 db  2Ch ; ,
.eh_frame:0000000000009DC1                 db    0
.eh_frame:0000000000009DC2                 db    0
.eh_frame:0000000000009DC3                 db    0
.eh_frame:0000000000009DC4                 db  64h ; d
.eh_frame:0000000000009DC5                 db  0Ch
.eh_frame:0000000000009DC6                 db    0
.eh_frame:0000000000009DC7                 db    0
.eh_frame:0000000000009DC8                 db  28h ; (
.eh_frame:0000000000009DC9                 db 0BBh
.eh_frame:0000000000009DCA                 db 0FFh
.eh_frame:0000000000009DCB                 db 0FFh
.eh_frame:0000000000009DCC                 db  1Fh
.eh_frame:0000000000009DCD                 db  11h
.eh_frame:0000000000009DCE                 db    0
.eh_frame:0000000000009DCF                 db    0
.eh_frame:0000000000009DD0                 db    0
.eh_frame:0000000000009DD1                 db  41h ; A
.eh_frame:0000000000009DD2                 db  0Eh
.eh_frame:0000000000009DD3                 db  10h
.eh_frame:0000000000009DD4                 db  86h
.eh_frame:0000000000009DD5                 db    2
.eh_frame:0000000000009DD6                 db  43h ; C
.eh_frame:0000000000009DD7                 db  0Dh
.eh_frame:0000000000009DD8                 db    6
.eh_frame:0000000000009DD9                 db  48h ; H
.eh_frame:0000000000009DDA                 db  8Fh
.eh_frame:0000000000009DDB                 db    3
.eh_frame:0000000000009DDC                 db  8Eh
.eh_frame:0000000000009DDD                 db    4
.eh_frame:0000000000009DDE                 db  8Dh
.eh_frame:0000000000009DDF                 db    5
.eh_frame:0000000000009DE0                 db  8Ch
.eh_frame:0000000000009DE1                 db    6
.eh_frame:0000000000009DE2                 db  48h ; H
.eh_frame:0000000000009DE3                 db  83h
.eh_frame:0000000000009DE4                 db    7
.eh_frame:0000000000009DE5                 db    3
.eh_frame:0000000000009DE6                 db 0EFh
.eh_frame:0000000000009DE7                 db    1
.eh_frame:0000000000009DE8                 db  0Ah
.eh_frame:0000000000009DE9                 db  0Ch
.eh_frame:0000000000009DEA                 db    7
.eh_frame:0000000000009DEB                 db    8
.eh_frame:0000000000009DEC                 db  45h ; E
.eh_frame:0000000000009DED                 db  0Bh
.eh_frame:0000000000009DEE                 db    0
.eh_frame:0000000000009DEF                 db    0
.eh_frame:0000000000009DF0                 db  14h
.eh_frame:0000000000009DF1                 db    0
.eh_frame:0000000000009DF2                 db    0
.eh_frame:0000000000009DF3                 db    0
.eh_frame:0000000000009DF4                 db  94h
.eh_frame:0000000000009DF5                 db  0Ch
.eh_frame:0000000000009DF6                 db    0
.eh_frame:0000000000009DF7                 db    0
.eh_frame:0000000000009DF8                 db  18h
.eh_frame:0000000000009DF9                 db 0CCh
.eh_frame:0000000000009DFA                 db 0FFh
.eh_frame:0000000000009DFB                 db 0FFh
.eh_frame:0000000000009DFC                 db 0FEh
.eh_frame:0000000000009DFD                 db    1
.eh_frame:0000000000009DFE                 db    0
.eh_frame:0000000000009DFF                 db    0
.eh_frame:0000000000009E00                 db    0
.eh_frame:0000000000009E01                 db    0
.eh_frame:0000000000009E02                 db    0
.eh_frame:0000000000009E03                 db    0
.eh_frame:0000000000009E04                 db    0
.eh_frame:0000000000009E05                 db    0
.eh_frame:0000000000009E06                 db    0
.eh_frame:0000000000009E07                 db    0
.eh_frame:0000000000009E08                 db  4Ch ; L
.eh_frame:0000000000009E09                 db    0
.eh_frame:0000000000009E0A                 db    0
.eh_frame:0000000000009E0B                 db    0
.eh_frame:0000000000009E0C                 db 0ACh
.eh_frame:0000000000009E0D                 db  0Ch
.eh_frame:0000000000009E0E                 db    0
.eh_frame:0000000000009E0F                 db    0
.eh_frame:0000000000009E10                 db    0
.eh_frame:0000000000009E11                 db 0CEh
.eh_frame:0000000000009E12                 db 0FFh
.eh_frame:0000000000009E13                 db 0FFh
.eh_frame:0000000000009E14                 db 0ECh
.eh_frame:0000000000009E15                 db  0Ch
.eh_frame:0000000000009E16                 db    0
.eh_frame:0000000000009E17                 db    0
.eh_frame:0000000000009E18                 db    0
.eh_frame:0000000000009E19                 db  42h ; B
.eh_frame:0000000000009E1A                 db  0Eh
.eh_frame:0000000000009E1B                 db  10h
.eh_frame:0000000000009E1C                 db  8Fh
.eh_frame:0000000000009E1D                 db    2
.eh_frame:0000000000009E1E                 db  42h ; B
.eh_frame:0000000000009E1F                 db  0Eh
.eh_frame:0000000000009E20                 db  18h
.eh_frame:0000000000009E21                 db  8Eh
.eh_frame:0000000000009E22                 db    3
.eh_frame:0000000000009E23                 db  46h ; F
.eh_frame:0000000000009E24                 db  0Eh
.eh_frame:0000000000009E25                 db  20h
.eh_frame:0000000000009E26                 db  8Dh
.eh_frame:0000000000009E27                 db    4
.eh_frame:0000000000009E28                 db  42h ; B
.eh_frame:0000000000009E29                 db  0Eh
.eh_frame:0000000000009E2A                 db  28h ; (
.eh_frame:0000000000009E2B                 db  8Ch
.eh_frame:0000000000009E2C                 db    5
.eh_frame:0000000000009E2D                 db  45h ; E
.eh_frame:0000000000009E2E                 db  0Eh
.eh_frame:0000000000009E2F                 db  30h ; 0
.eh_frame:0000000000009E30                 db  86h
.eh_frame:0000000000009E31                 db    6
.eh_frame:0000000000009E32                 db  41h ; A
.eh_frame:0000000000009E33                 db  0Eh
.eh_frame:0000000000009E34                 db  38h ; 8
.eh_frame:0000000000009E35                 db  83h
.eh_frame:0000000000009E36                 db    7
.eh_frame:0000000000009E37                 db  52h ; R
.eh_frame:0000000000009E38                 db  0Eh
.eh_frame:0000000000009E39                 db  90h
.eh_frame:0000000000009E3A                 db    1
.eh_frame:0000000000009E3B                 db    2
.eh_frame:0000000000009E3C                 db  82h
.eh_frame:0000000000009E3D                 db  0Ah
.eh_frame:0000000000009E3E                 db  0Eh
.eh_frame:0000000000009E3F                 db  38h ; 8
.eh_frame:0000000000009E40                 db  41h ; A
.eh_frame:0000000000009E41                 db  0Eh
.eh_frame:0000000000009E42                 db  30h ; 0
.eh_frame:0000000000009E43                 db  41h ; A
.eh_frame:0000000000009E44                 db  0Eh
.eh_frame:0000000000009E45                 db  28h ; (
.eh_frame:0000000000009E46                 db  42h ; B
.eh_frame:0000000000009E47                 db  0Eh
.eh_frame:0000000000009E48                 db  20h
.eh_frame:0000000000009E49                 db  42h ; B
.eh_frame:0000000000009E4A                 db  0Eh
.eh_frame:0000000000009E4B                 db  18h
.eh_frame:0000000000009E4C                 db  42h ; B
.eh_frame:0000000000009E4D                 db  0Eh
.eh_frame:0000000000009E4E                 db  10h
.eh_frame:0000000000009E4F                 db  42h ; B
.eh_frame:0000000000009E50                 db  0Eh
.eh_frame:0000000000009E51                 db    8
.eh_frame:0000000000009E52                 db  48h ; H
.eh_frame:0000000000009E53                 db  0Bh
.eh_frame:0000000000009E54                 db    0
.eh_frame:0000000000009E55                 db    0
.eh_frame:0000000000009E56                 db    0
.eh_frame:0000000000009E57                 db    0
.eh_frame:0000000000009E58                 db  44h ; D
.eh_frame:0000000000009E59                 db    0
.eh_frame:0000000000009E5A                 db    0
.eh_frame:0000000000009E5B                 db    0
.eh_frame:0000000000009E5C                 db 0FCh
.eh_frame:0000000000009E5D                 db  0Ch
.eh_frame:0000000000009E5E                 db    0
.eh_frame:0000000000009E5F                 db    0
.eh_frame:0000000000009E60                 db 0A0h
.eh_frame:0000000000009E61                 db 0DAh
.eh_frame:0000000000009E62                 db 0FFh
.eh_frame:0000000000009E63                 db 0FFh
.eh_frame:0000000000009E64                 db  65h ; e
.eh_frame:0000000000009E65                 db    0
.eh_frame:0000000000009E66                 db    0
.eh_frame:0000000000009E67                 db    0
.eh_frame:0000000000009E68                 db    0
.eh_frame:0000000000009E69                 db  42h ; B
.eh_frame:0000000000009E6A                 db  0Eh
.eh_frame:0000000000009E6B                 db  10h
.eh_frame:0000000000009E6C                 db  8Fh
.eh_frame:0000000000009E6D                 db    2
.eh_frame:0000000000009E6E                 db  42h ; B
.eh_frame:0000000000009E6F                 db  0Eh
.eh_frame:0000000000009E70                 db  18h
.eh_frame:0000000000009E71                 db  8Eh
.eh_frame:0000000000009E72                 db    3
.eh_frame:0000000000009E73                 db  45h ; E
.eh_frame:0000000000009E74                 db  0Eh
.eh_frame:0000000000009E75                 db  20h
.eh_frame:0000000000009E76                 db  8Dh
.eh_frame:0000000000009E77                 db    4
.eh_frame:0000000000009E78                 db  42h ; B
.eh_frame:0000000000009E79                 db  0Eh
.eh_frame:0000000000009E7A                 db  28h ; (
.eh_frame:0000000000009E7B                 db  8Ch
.eh_frame:0000000000009E7C                 db    5
.eh_frame:0000000000009E7D                 db  48h ; H
.eh_frame:0000000000009E7E                 db  0Eh
.eh_frame:0000000000009E7F                 db  30h ; 0
.eh_frame:0000000000009E80                 db  86h
.eh_frame:0000000000009E81                 db    6
.eh_frame:0000000000009E82                 db  48h ; H
.eh_frame:0000000000009E83                 db  0Eh
.eh_frame:0000000000009E84                 db  38h ; 8
.eh_frame:0000000000009E85                 db  83h
.eh_frame:0000000000009E86                 db    7
.eh_frame:0000000000009E87                 db  4Dh ; M
.eh_frame:0000000000009E88                 db  0Eh
.eh_frame:0000000000009E89                 db  40h ; @
.eh_frame:0000000000009E8A                 db  72h ; r
.eh_frame:0000000000009E8B                 db  0Eh
.eh_frame:0000000000009E8C                 db  38h ; 8
.eh_frame:0000000000009E8D                 db  41h ; A
.eh_frame:0000000000009E8E                 db  0Eh
.eh_frame:0000000000009E8F                 db  30h ; 0
.eh_frame:0000000000009E90                 db  41h ; A
.eh_frame:0000000000009E91                 db  0Eh
.eh_frame:0000000000009E92                 db  28h ; (
.eh_frame:0000000000009E93                 db  42h ; B
.eh_frame:0000000000009E94                 db  0Eh
.eh_frame:0000000000009E95                 db  20h
.eh_frame:0000000000009E96                 db  42h ; B
.eh_frame:0000000000009E97                 db  0Eh
.eh_frame:0000000000009E98                 db  18h
.eh_frame:0000000000009E99                 db  42h ; B
.eh_frame:0000000000009E9A                 db  0Eh
.eh_frame:0000000000009E9B                 db  10h
.eh_frame:0000000000009E9C                 db  42h ; B
.eh_frame:0000000000009E9D                 db  0Eh
.eh_frame:0000000000009E9E                 db    8
.eh_frame:0000000000009E9F                 db    0
.eh_frame:0000000000009EA0                 db  14h
.eh_frame:0000000000009EA1                 db    0
.eh_frame:0000000000009EA2                 db    0
.eh_frame:0000000000009EA3                 db    0
.eh_frame:0000000000009EA4                 db  44h ; D
.eh_frame:0000000000009EA5                 db  0Dh
.eh_frame:0000000000009EA6                 db    0
.eh_frame:0000000000009EA7                 db    0
.eh_frame:0000000000009EA8                 db 0C8h
.eh_frame:0000000000009EA9                 db 0DAh
.eh_frame:0000000000009EAA                 db 0FFh
.eh_frame:0000000000009EAB                 db 0FFh
.eh_frame:0000000000009EAC                 db    2
.eh_frame:0000000000009EAD                 db    0
.eh_frame:0000000000009EAE                 db    0
.eh_frame:0000000000009EAF                 db    0
.eh_frame:0000000000009EB0                 db    0
.eh_frame:0000000000009EB1                 db    0
.eh_frame:0000000000009EB2                 db    0
.eh_frame:0000000000009EB3                 db    0
.eh_frame:0000000000009EB4                 db    0
.eh_frame:0000000000009EB5                 db    0
.eh_frame:0000000000009EB6                 db    0
.eh_frame:0000000000009EB7                 db    0
.eh_frame:0000000000009EB8                 db  10h
.eh_frame:0000000000009EB9                 db    0
.eh_frame:0000000000009EBA                 db    0
.eh_frame:0000000000009EBB                 db    0
.eh_frame:0000000000009EBC                 db  5Ch ; \
.eh_frame:0000000000009EBD                 db  0Dh
.eh_frame:0000000000009EBE                 db    0
.eh_frame:0000000000009EBF                 db    0
.eh_frame:0000000000009EC0                 db 0C0h
.eh_frame:0000000000009EC1                 db 0DAh
.eh_frame:0000000000009EC2                 db 0FFh
.eh_frame:0000000000009EC3                 db 0FFh
.eh_frame:0000000000009EC4                 db  0Eh
.eh_frame:0000000000009EC5                 db    0
.eh_frame:0000000000009EC6                 db    0
.eh_frame:0000000000009EC7                 db    0
.eh_frame:0000000000009EC8                 db    0
.eh_frame:0000000000009EC9                 db    0
.eh_frame:0000000000009ECA                 db    0
.eh_frame:0000000000009ECB                 db    0
.eh_frame:0000000000009ECC __FRAME_END__   db    0
.eh_frame:0000000000009ECD                 db    0
.eh_frame:0000000000009ECE                 db    0
.eh_frame:0000000000009ECF                 db    0
.eh_frame:0000000000009ECF _eh_frame       ends
.eh_frame:0000000000009ECF
.init_array:000000000020AAD0 ; ELF Initialization Function Table
.init_array:000000000020AAD0 ; ===========================================================================
.init_array:000000000020AAD0
.init_array:000000000020AAD0 ; Segment type: Pure data
.init_array:000000000020AAD0 ; Segment permissions: Read/Write
.init_array:000000000020AAD0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020AAD0                 assume cs:_init_array
.init_array:000000000020AAD0                 ;org 20AAD0h
.init_array:000000000020AAD0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020AAD0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020AAD0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020AAD0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020AAD0
.fini_array:000000000020AAD8 ; ELF Termination Function Table
.fini_array:000000000020AAD8 ; ===========================================================================
.fini_array:000000000020AAD8
.fini_array:000000000020AAD8 ; Segment type: Pure data
.fini_array:000000000020AAD8 ; Segment permissions: Read/Write
.fini_array:000000000020AAD8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020AAD8                 assume cs:_fini_array
.fini_array:000000000020AAD8                 ;org 20AAD8h
.fini_array:000000000020AAD8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020AAD8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020AAD8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020AAD8
.data.rel.ro:000000000020AAE0 ; ===========================================================================
.data.rel.ro:000000000020AAE0
.data.rel.ro:000000000020AAE0 ; Segment type: Pure data
.data.rel.ro:000000000020AAE0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020AAE0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020AAE0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020AAE0                 ;org 20AAE0h
.data.rel.ro:000000000020AAE0 ; struct option longopts
.data.rel.ro:000000000020AAE0 longopts        dq offset aInput        ; name
.data.rel.ro:000000000020AAE0                                         ; DATA XREF: main:loc_192F↑o
.data.rel.ro:000000000020AAE0                 dd 1                    ; has_arg ; "input"
.data.rel.ro:000000000020AAE0                 db 4 dup(0)
.data.rel.ro:000000000020AAE0                 dq 0                    ; flag
.data.rel.ro:000000000020AAE0                 dd 69h                  ; val
.data.rel.ro:000000000020AAE0                 db 4 dup(0)
.data.rel.ro:000000000020AB00                 dq offset aOutput       ; "output"
.data.rel.ro:000000000020AB08                 db    1
.data.rel.ro:000000000020AB09                 db    0
.data.rel.ro:000000000020AB0A                 db    0
.data.rel.ro:000000000020AB0B                 db    0
.data.rel.ro:000000000020AB0C                 db    0
.data.rel.ro:000000000020AB0D                 db    0
.data.rel.ro:000000000020AB0E                 db    0
.data.rel.ro:000000000020AB0F                 db    0
.data.rel.ro:000000000020AB10                 db    0
.data.rel.ro:000000000020AB11                 db    0
.data.rel.ro:000000000020AB12                 db    0
.data.rel.ro:000000000020AB13                 db    0
.data.rel.ro:000000000020AB14                 db    0
.data.rel.ro:000000000020AB15                 db    0
.data.rel.ro:000000000020AB16                 db    0
.data.rel.ro:000000000020AB17                 db    0
.data.rel.ro:000000000020AB18                 db  6Fh ; o
.data.rel.ro:000000000020AB19                 db    0
.data.rel.ro:000000000020AB1A                 db    0
.data.rel.ro:000000000020AB1B                 db    0
.data.rel.ro:000000000020AB1C                 db    0
.data.rel.ro:000000000020AB1D                 db    0
.data.rel.ro:000000000020AB1E                 db    0
.data.rel.ro:000000000020AB1F                 db    0
.data.rel.ro:000000000020AB20                 dq offset aWriteError+6 ; "error"
.data.rel.ro:000000000020AB28                 db    1
.data.rel.ro:000000000020AB29                 db    0
.data.rel.ro:000000000020AB2A                 db    0
.data.rel.ro:000000000020AB2B                 db    0
.data.rel.ro:000000000020AB2C                 db    0
.data.rel.ro:000000000020AB2D                 db    0
.data.rel.ro:000000000020AB2E                 db    0
.data.rel.ro:000000000020AB2F                 db    0
.data.rel.ro:000000000020AB30                 db    0
.data.rel.ro:000000000020AB31                 db    0
.data.rel.ro:000000000020AB32                 db    0
.data.rel.ro:000000000020AB33                 db    0
.data.rel.ro:000000000020AB34                 db    0
.data.rel.ro:000000000020AB35                 db    0
.data.rel.ro:000000000020AB36                 db    0
.data.rel.ro:000000000020AB37                 db    0
.data.rel.ro:000000000020AB38                 db  65h ; e
.data.rel.ro:000000000020AB39                 db    0
.data.rel.ro:000000000020AB3A                 db    0
.data.rel.ro:000000000020AB3B                 db    0
.data.rel.ro:000000000020AB3C                 db    0
.data.rel.ro:000000000020AB3D                 db    0
.data.rel.ro:000000000020AB3E                 db    0
.data.rel.ro:000000000020AB3F                 db    0
.data.rel.ro:000000000020AB40                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020AB48                 db    0
.data.rel.ro:000000000020AB49                 db    0
.data.rel.ro:000000000020AB4A                 db    0
.data.rel.ro:000000000020AB4B                 db    0
.data.rel.ro:000000000020AB4C                 db    0
.data.rel.ro:000000000020AB4D                 db    0
.data.rel.ro:000000000020AB4E                 db    0
.data.rel.ro:000000000020AB4F                 db    0
.data.rel.ro:000000000020AB50                 db    0
.data.rel.ro:000000000020AB51                 db    0
.data.rel.ro:000000000020AB52                 db    0
.data.rel.ro:000000000020AB53                 db    0
.data.rel.ro:000000000020AB54                 db    0
.data.rel.ro:000000000020AB55                 db    0
.data.rel.ro:000000000020AB56                 db    0
.data.rel.ro:000000000020AB57                 db    0
.data.rel.ro:000000000020AB58                 db  7Eh ; ~
.data.rel.ro:000000000020AB59                 db 0FFh
.data.rel.ro:000000000020AB5A                 db 0FFh
.data.rel.ro:000000000020AB5B                 db 0FFh
.data.rel.ro:000000000020AB5C                 db    0
.data.rel.ro:000000000020AB5D                 db    0
.data.rel.ro:000000000020AB5E                 db    0
.data.rel.ro:000000000020AB5F                 db    0
.data.rel.ro:000000000020AB60                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020AB68                 db    0
.data.rel.ro:000000000020AB69                 db    0
.data.rel.ro:000000000020AB6A                 db    0
.data.rel.ro:000000000020AB6B                 db    0
.data.rel.ro:000000000020AB6C                 db    0
.data.rel.ro:000000000020AB6D                 db    0
.data.rel.ro:000000000020AB6E                 db    0
.data.rel.ro:000000000020AB6F                 db    0
.data.rel.ro:000000000020AB70                 db    0
.data.rel.ro:000000000020AB71                 db    0
.data.rel.ro:000000000020AB72                 db    0
.data.rel.ro:000000000020AB73                 db    0
.data.rel.ro:000000000020AB74                 db    0
.data.rel.ro:000000000020AB75                 db    0
.data.rel.ro:000000000020AB76                 db    0
.data.rel.ro:000000000020AB77                 db    0
.data.rel.ro:000000000020AB78                 db  7Dh ; }
.data.rel.ro:000000000020AB79                 db 0FFh
.data.rel.ro:000000000020AB7A                 db 0FFh
.data.rel.ro:000000000020AB7B                 db 0FFh
.data.rel.ro:000000000020AB7C                 db    0
.data.rel.ro:000000000020AB7D                 db    0
.data.rel.ro:000000000020AB7E                 db    0
.data.rel.ro:000000000020AB7F                 db    0
.data.rel.ro:000000000020AB80                 db    0
.data.rel.ro:000000000020AB81                 db    0
.data.rel.ro:000000000020AB82                 db    0
.data.rel.ro:000000000020AB83                 db    0
.data.rel.ro:000000000020AB84                 db    0
.data.rel.ro:000000000020AB85                 db    0
.data.rel.ro:000000000020AB86                 db    0
.data.rel.ro:000000000020AB87                 db    0
.data.rel.ro:000000000020AB88                 db    0
.data.rel.ro:000000000020AB89                 db    0
.data.rel.ro:000000000020AB8A                 db    0
.data.rel.ro:000000000020AB8B                 db    0
.data.rel.ro:000000000020AB8C                 db    0
.data.rel.ro:000000000020AB8D                 db    0
.data.rel.ro:000000000020AB8E                 db    0
.data.rel.ro:000000000020AB8F                 db    0
.data.rel.ro:000000000020AB90                 db    0
.data.rel.ro:000000000020AB91                 db    0
.data.rel.ro:000000000020AB92                 db    0
.data.rel.ro:000000000020AB93                 db    0
.data.rel.ro:000000000020AB94                 db    0
.data.rel.ro:000000000020AB95                 db    0
.data.rel.ro:000000000020AB96                 db    0
.data.rel.ro:000000000020AB97                 db    0
.data.rel.ro:000000000020AB98                 db    0
.data.rel.ro:000000000020AB99                 db    0
.data.rel.ro:000000000020AB9A                 db    0
.data.rel.ro:000000000020AB9B                 db    0
.data.rel.ro:000000000020AB9C                 db    0
.data.rel.ro:000000000020AB9D                 db    0
.data.rel.ro:000000000020AB9E                 db    0
.data.rel.ro:000000000020AB9F                 db    0
.data.rel.ro:000000000020ABA0                 public quoting_style_args
.data.rel.ro:000000000020ABA0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020ABA8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020ABB0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020ABB8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020ABC0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020ABC8                 dq offset aC_1          ; "c"
.data.rel.ro:000000000020ABD0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020ABD8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020ABE0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020ABE8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020ABF0                 align 20h
.data.rel.ro:000000000020AC00                 public stdlib_allocator
.data.rel.ro:000000000020AC00 stdlib_allocator dq offset malloc       ; DATA XREF: careadlinkat+2D↑o
.data.rel.ro:000000000020AC08                 dq offset realloc
.data.rel.ro:000000000020AC10                 dq offset free
.data.rel.ro:000000000020AC18                 align 20h
.data.rel.ro:000000000020AC18 _data_rel_ro    ends
.data.rel.ro:000000000020AC18
LOAD:000000000020AC20 ; ELF Dynamic Information
LOAD:000000000020AC20 ; ===========================================================================
LOAD:000000000020AC20
LOAD:000000000020AC20 ; Segment type: Pure data
LOAD:000000000020AC20 ; Segment permissions: Read/Write
LOAD:000000000020AC20 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AC20                 assume cs:LOAD
LOAD:000000000020AC20                 ;org 20AC20h
LOAD:000000000020AC20 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020AC20                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020AC20                                         ; DT_NEEDED libc.so.6
LOAD:000000000020AC30                 Elf64_Dyn <0Ch, 1528h>  ; DT_INIT
LOAD:000000000020AC40                 Elf64_Dyn <0Dh, 7990h>  ; DT_FINI
LOAD:000000000020AC50                 Elf64_Dyn <19h, 20AAD0h> ; DT_INIT_ARRAY
LOAD:000000000020AC60                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020AC70                 Elf64_Dyn <1Ah, 20AAD8h> ; DT_FINI_ARRAY
LOAD:000000000020AC80                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020AC90                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020ACA0                 Elf64_Dyn <5, 910h>     ; DT_STRTAB
LOAD:000000000020ACB0                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020ACC0                 Elf64_Dyn <0Ah, 306h>   ; DT_STRSZ
LOAD:000000000020ACD0                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020ACE0                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020ACF0                 Elf64_Dyn <3, 20AE10h>  ; DT_PLTGOT
LOAD:000000000020AD00                 Elf64_Dyn <2, 4E0h>     ; DT_PLTRELSZ
LOAD:000000000020AD10                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020AD20                 Elf64_Dyn <17h, 1048h>  ; DT_JMPREL
LOAD:000000000020AD30                 Elf64_Dyn <7, 0D00h>    ; DT_RELA
LOAD:000000000020AD40                 Elf64_Dyn <8, 348h>     ; DT_RELASZ
LOAD:000000000020AD50                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020AD60                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020AD70                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020AD80                 Elf64_Dyn <6FFFFFFEh, 0CA0h> ; DT_VERNEED
LOAD:000000000020AD90                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020ADA0                 Elf64_Dyn <6FFFFFF0h, 0C16h> ; DT_VERSYM
LOAD:000000000020ADB0                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:000000000020ADC0                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020ADD0                 db    0
LOAD:000000000020ADD1                 db    0
LOAD:000000000020ADD2                 db    0
LOAD:000000000020ADD3                 db    0
LOAD:000000000020ADD4                 db    0
LOAD:000000000020ADD5                 db    0
LOAD:000000000020ADD6                 db    0
LOAD:000000000020ADD7                 db    0
LOAD:000000000020ADD8                 db    0
LOAD:000000000020ADD9                 db    0
LOAD:000000000020ADDA                 db    0
LOAD:000000000020ADDB                 db    0
LOAD:000000000020ADDC                 db    0
LOAD:000000000020ADDD                 db    0
LOAD:000000000020ADDE                 db    0
LOAD:000000000020ADDF                 db    0
LOAD:000000000020ADE0                 db    0
LOAD:000000000020ADE1                 db    0
LOAD:000000000020ADE2                 db    0
LOAD:000000000020ADE3                 db    0
LOAD:000000000020ADE4                 db    0
LOAD:000000000020ADE5                 db    0
LOAD:000000000020ADE6                 db    0
LOAD:000000000020ADE7                 db    0
LOAD:000000000020ADE8                 db    0
LOAD:000000000020ADE9                 db    0
LOAD:000000000020ADEA                 db    0
LOAD:000000000020ADEB                 db    0
LOAD:000000000020ADEC                 db    0
LOAD:000000000020ADED                 db    0
LOAD:000000000020ADEE                 db    0
LOAD:000000000020ADEF                 db    0
LOAD:000000000020ADF0                 db    0
LOAD:000000000020ADF1                 db    0
LOAD:000000000020ADF2                 db    0
LOAD:000000000020ADF3                 db    0
LOAD:000000000020ADF4                 db    0
LOAD:000000000020ADF5                 db    0
LOAD:000000000020ADF6                 db    0
LOAD:000000000020ADF7                 db    0
LOAD:000000000020ADF8                 db    0
LOAD:000000000020ADF9                 db    0
LOAD:000000000020ADFA                 db    0
LOAD:000000000020ADFB                 db    0
LOAD:000000000020ADFC                 db    0
LOAD:000000000020ADFD                 db    0
LOAD:000000000020ADFE                 db    0
LOAD:000000000020ADFF                 db    0
LOAD:000000000020AE00                 db    0
LOAD:000000000020AE01                 db    0
LOAD:000000000020AE02                 db    0
LOAD:000000000020AE03                 db    0
LOAD:000000000020AE04                 db    0
LOAD:000000000020AE05                 db    0
LOAD:000000000020AE06                 db    0
LOAD:000000000020AE07                 db    0
LOAD:000000000020AE08                 db    0
LOAD:000000000020AE09                 db    0
LOAD:000000000020AE0A                 db    0
LOAD:000000000020AE0B                 db    0
LOAD:000000000020AE0C                 db    0
LOAD:000000000020AE0D                 db    0
LOAD:000000000020AE0E                 db    0
LOAD:000000000020AE0F                 db    0
LOAD:000000000020AE0F LOAD            ends
LOAD:000000000020AE0F
.got:000000000020AE10 ; ===========================================================================
.got:000000000020AE10
.got:000000000020AE10 ; Segment type: Pure data
.got:000000000020AE10 ; Segment permissions: Read/Write
.got:000000000020AE10 _got            segment qword public 'DATA' use64
.got:000000000020AE10                 assume cs:_got
.got:000000000020AE10                 ;org 20AE10h
.got:000000000020AE10 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020AE18 qword_20AE18    dq 0                    ; DATA XREF: sub_1540↑r
.got:000000000020AE20 qword_20AE20    dq 0                    ; DATA XREF: sub_1540+6↑r
.got:000000000020AE28 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:000000000020AE28                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:000000000020AE30 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:000000000020AE38 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000020AE38                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000020AE40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020AE48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020AE50 __errno_location_ptr dq offset __errno_location
.got:000000000020AE50                                         ; DATA XREF: ___errno_location↑r
.got:000000000020AE58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020AE60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020AE68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020AE70 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:000000000020AE78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020AE80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020AE88 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020AE88                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020AE90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020AE98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020AE98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020AEA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020AEA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020AEA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020AEB0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020AEB8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020AEC0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020AEC8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020AED0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020AED8 __assert_fail_ptr dq offset __assert_fail
.got:000000000020AED8                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020AEE0 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020AEE0                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020AEE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020AEF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020AEF8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020AEF8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020AF00 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020AF08 putenv_ptr      dq offset putenv        ; DATA XREF: _putenv↑r
.got:000000000020AF10 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020AF18 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020AF20 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020AF28 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020AF30 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020AF38 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020AF40 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020AF48 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020AF50 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020AF58 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020AF60 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000020AF68 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020AF70 access_ptr      dq offset access        ; DATA XREF: _access↑r
.got:000000000020AF78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020AF80 strtok_ptr      dq offset strtok        ; DATA XREF: _strtok↑r
.got:000000000020AF88 execvp_ptr      dq offset execvp        ; DATA XREF: _execvp↑r
.got:000000000020AF90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020AF98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020AFA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020AFA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020AFA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020AFB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020AFB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020AFC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020AFC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020AFC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020AFC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020AFD0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020AFD0                                         ; DATA XREF: start+24↑r
.got:000000000020AFD8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020AFD8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020AFE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020AFE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020AFE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020AFE8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020AFE8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020AFE8 _got            ends
.got:000000000020AFE8
LOAD:000000000020AFF0 ; ===========================================================================
LOAD:000000000020AFF0
LOAD:000000000020AFF0 ; Segment type: Pure data
LOAD:000000000020AFF0 ; Segment permissions: Read/Write
LOAD:000000000020AFF0 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AFF0                 assume cs:LOAD
LOAD:000000000020AFF0                 ;org 20AFF0h
LOAD:000000000020AFF0                 align 20h
LOAD:000000000020AFF0 LOAD            ends
LOAD:000000000020AFF0
.data:000000000020B000 ; ===========================================================================
.data:000000000020B000
.data:000000000020B000 ; Segment type: Pure data
.data:000000000020B000 ; Segment permissions: Read/Write
.data:000000000020B000 _data           segment align_32 public 'DATA' use64
.data:000000000020B000                 assume cs:_data
.data:000000000020B000                 ;org 20B000h
.data:000000000020B000                 public __data_start ; weak
.data:000000000020B000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020B000                                         ; data_start
.data:000000000020B001                 db    0
.data:000000000020B002                 db    0
.data:000000000020B003                 db    0
.data:000000000020B004                 db    0
.data:000000000020B005                 db    0
.data:000000000020B006                 db    0
.data:000000000020B007                 db    0
.data:000000000020B008                 public __dso_handle
.data:000000000020B008 ; void *_dso_handle
.data:000000000020B008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020B008                                         ; atexit↑r ...
.data:000000000020B010                 public Version
.data:000000000020B010 Version         dq offset a831          ; DATA XREF: main+CC↑r
.data:000000000020B010                                         ; "8.31"
.data:000000000020B018                 public exit_failure
.data:000000000020B018 ; int exit_failure
.data:000000000020B018 exit_failure    dd 1                    ; DATA XREF: main+79↑w
.data:000000000020B018                                         ; close_stdout:loc_2582↑r ...
.data:000000000020B01C                 align 20h
.data:000000000020B020                 public quote_quoting_options
.data:000000000020B020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020B020                                         ; quote_mem↑o ...
.data:000000000020B021                 db    0
.data:000000000020B022                 db    0
.data:000000000020B023                 db    0
.data:000000000020B024                 db    0
.data:000000000020B025                 db    0
.data:000000000020B026                 db    0
.data:000000000020B027                 db    0
.data:000000000020B028                 db    0
.data:000000000020B029                 db    0
.data:000000000020B02A                 db    0
.data:000000000020B02B                 db    0
.data:000000000020B02C                 db    0
.data:000000000020B02D                 db    0
.data:000000000020B02E                 db    0
.data:000000000020B02F                 db    0
.data:000000000020B030                 db    0
.data:000000000020B031                 db    0
.data:000000000020B032                 db    0
.data:000000000020B033                 db    0
.data:000000000020B034                 db    0
.data:000000000020B035                 db    0
.data:000000000020B036                 db    0
.data:000000000020B037                 db    0
.data:000000000020B038                 db    0
.data:000000000020B039                 db    0
.data:000000000020B03A                 db    0
.data:000000000020B03B                 db    0
.data:000000000020B03C                 db    0
.data:000000000020B03D                 db    0
.data:000000000020B03E                 db    0
.data:000000000020B03F                 db    0
.data:000000000020B040                 db    0
.data:000000000020B041                 db    0
.data:000000000020B042                 db    0
.data:000000000020B043                 db    0
.data:000000000020B044                 db    0
.data:000000000020B045                 db    0
.data:000000000020B046                 db    0
.data:000000000020B047                 db    0
.data:000000000020B048                 db    0
.data:000000000020B049                 db    0
.data:000000000020B04A                 db    0
.data:000000000020B04B                 db    0
.data:000000000020B04C                 db    0
.data:000000000020B04D                 db    0
.data:000000000020B04E                 db    0
.data:000000000020B04F                 db    0
.data:000000000020B050                 db    0
.data:000000000020B051                 db    0
.data:000000000020B052                 db    0
.data:000000000020B053                 db    0
.data:000000000020B054                 db    0
.data:000000000020B055                 db    0
.data:000000000020B056                 db    0
.data:000000000020B057                 db    0
.data:000000000020B058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020B058                                         ; quotearg_n_options:loc_3CAD↑r ...
.data:000000000020B05C                 align 20h
.data:000000000020B060 ; void *slotvec
.data:000000000020B060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020B060                                         ; quotearg_n_options+76↑w ...
.data:000000000020B068                 align 10h
.data:000000000020B070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020B070                                         ; quotearg_n_options+187↑r ...
.data:000000000020B078 off_20B078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020B078 _data           ends
.data:000000000020B078
.bss:000000000020B080 ; ===========================================================================
.bss:000000000020B080
.bss:000000000020B080 ; Segment type: Uninitialized
.bss:000000000020B080 ; Segment permissions: Read/Write
.bss:000000000020B080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020B080                 assume cs:_bss
.bss:000000000020B080                 ;org 20B080h
.bss:000000000020B080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020B080                 public __bss_start ; weak
.bss:000000000020B080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000868↑o
.bss:000000000020B080                                         ; LOAD:00000000000008B0↑o ...
.bss:000000000020B080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020B080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020B080                                         ; _edata
.bss:000000000020B080                                         ; Copy of shared data
.bss:000000000020B088                 public stdout@@GLIBC_2_2_5
.bss:000000000020B088 ; FILE *stdout
.bss:000000000020B088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000850↑o
.bss:000000000020B088                                         ; main+C5↑r ...
.bss:000000000020B088                                         ; Alternative name is 'stdout'
.bss:000000000020B088                                         ; Copy of shared data
.bss:000000000020B090                 public optind@@GLIBC_2_2_5
.bss:000000000020B090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008E0↑o
.bss:000000000020B090                                         ; main:loc_1AAF↑r
.bss:000000000020B090                                         ; Alternative name is 'optind'
.bss:000000000020B090                                         ; Copy of shared data
.bss:000000000020B094                 align 8
.bss:000000000020B098                 public optarg@@GLIBC_2_2_5
.bss:000000000020B098 ; char *optarg
.bss:000000000020B098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008F8↑o
.bss:000000000020B098                                         ; main+119↑r ...
.bss:000000000020B098                                         ; Alternative name is 'optarg'
.bss:000000000020B098                                         ; Copy of shared data
.bss:000000000020B0A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020B0A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020B0A0                                         ; DATA XREF: LOAD:0000000000000880↑o
.bss:000000000020B0A0                                         ; LOAD:0000000000000898↑o ...
.bss:000000000020B0A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020B0A0                                         ; Copy of shared data
.bss:000000000020B0A8                 align 20h
.bss:000000000020B0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020B0C0 ; FILE *stderr
.bss:000000000020B0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008C8↑o
.bss:000000000020B0C0                                         ; usage+3D↑r ...
.bss:000000000020B0C0                                         ; Alternative name is 'stderr'
.bss:000000000020B0C0                                         ; Copy of shared data
.bss:000000000020B0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020B0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020B0C9                 align 20h
.bss:000000000020B0E0 stdbuf          db    ? ;               ; DATA XREF: main:loc_1928↑o
.bss:000000000020B0E0                                         ; main+224↑o
.bss:000000000020B0E1                 db    ? ;
.bss:000000000020B0E2                 db    ? ;
.bss:000000000020B0E3                 db    ? ;
.bss:000000000020B0E4                 db    ? ;
.bss:000000000020B0E5                 db    ? ;
.bss:000000000020B0E6                 db    ? ;
.bss:000000000020B0E7                 db    ? ;
.bss:000000000020B0E8                 db    ? ;
.bss:000000000020B0E9                 db    ? ;
.bss:000000000020B0EA                 db    ? ;
.bss:000000000020B0EB                 db    ? ;
.bss:000000000020B0EC                 db    ? ;
.bss:000000000020B0ED                 db    ? ;
.bss:000000000020B0EE                 db    ? ;
.bss:000000000020B0EF                 db    ? ;
.bss:000000000020B0F0                 db    ? ;
.bss:000000000020B0F1                 db    ? ;
.bss:000000000020B0F2                 db    ? ;
.bss:000000000020B0F3                 db    ? ;
.bss:000000000020B0F4                 db    ? ;
.bss:000000000020B0F5                 db    ? ;
.bss:000000000020B0F6                 db    ? ;
.bss:000000000020B0F7                 db    ? ;
.bss:000000000020B0F8                 db    ? ;
.bss:000000000020B0F9                 db    ? ;
.bss:000000000020B0FA                 db    ? ;
.bss:000000000020B0FB                 db    ? ;
.bss:000000000020B0FC                 db    ? ;
.bss:000000000020B0FD                 db    ? ;
.bss:000000000020B0FE                 db    ? ;
.bss:000000000020B0FF                 db    ? ;
.bss:000000000020B100                 db    ? ;
.bss:000000000020B101                 db    ? ;
.bss:000000000020B102                 db    ? ;
.bss:000000000020B103                 db    ? ;
.bss:000000000020B104                 db    ? ;
.bss:000000000020B105                 db    ? ;
.bss:000000000020B106                 db    ? ;
.bss:000000000020B107                 db    ? ;
.bss:000000000020B108                 db    ? ;
.bss:000000000020B109                 db    ? ;
.bss:000000000020B10A                 db    ? ;
.bss:000000000020B10B                 db    ? ;
.bss:000000000020B10C                 db    ? ;
.bss:000000000020B10D                 db    ? ;
.bss:000000000020B10E                 db    ? ;
.bss:000000000020B10F                 db    ? ;
.bss:000000000020B110                 db    ? ;
.bss:000000000020B111                 db    ? ;
.bss:000000000020B112                 db    ? ;
.bss:000000000020B113                 db    ? ;
.bss:000000000020B114                 db    ? ;
.bss:000000000020B115                 db    ? ;
.bss:000000000020B116                 db    ? ;
.bss:000000000020B117                 db    ? ;
.bss:000000000020B118                 db    ? ;
.bss:000000000020B119                 db    ? ;
.bss:000000000020B11A                 db    ? ;
.bss:000000000020B11B                 db    ? ;
.bss:000000000020B11C                 db    ? ;
.bss:000000000020B11D                 db    ? ;
.bss:000000000020B11E                 db    ? ;
.bss:000000000020B11F                 db    ? ;
.bss:000000000020B120                 db    ? ;
.bss:000000000020B121                 db    ? ;
.bss:000000000020B122                 db    ? ;
.bss:000000000020B123                 db    ? ;
.bss:000000000020B124                 db    ? ;
.bss:000000000020B125                 db    ? ;
.bss:000000000020B126                 db    ? ;
.bss:000000000020B127                 db    ? ;
.bss:000000000020B128 ; void *program_path
.bss:000000000020B128 program_path    dq ?                    ; DATA XREF: main+2E9↑w
.bss:000000000020B128                                         ; main:loc_1B90↑r ...
.bss:000000000020B130 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020B130                                         ; close_stdout+1B↑r
.bss:000000000020B131                 align 8
.bss:000000000020B138 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020B138                                         ; close_stdout+56↑r
.bss:000000000020B140                 public program_name
.bss:000000000020B140 ; char *program_name
.bss:000000000020B140 program_name    dq ?                    ; DATA XREF: main+2C4↑r
.bss:000000000020B140                                         ; usage+14↑r ...
.bss:000000000020B148                 align 20h
.bss:000000000020B160 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020B160                                         ; quotearg_free+46↑o ...
.bss:000000000020B161                 db    ? ;
.bss:000000000020B162                 db    ? ;
.bss:000000000020B163                 db    ? ;
.bss:000000000020B164                 db    ? ;
.bss:000000000020B165                 db    ? ;
.bss:000000000020B166                 db    ? ;
.bss:000000000020B167                 db    ? ;
.bss:000000000020B168                 db    ? ;
.bss:000000000020B169                 db    ? ;
.bss:000000000020B16A                 db    ? ;
.bss:000000000020B16B                 db    ? ;
.bss:000000000020B16C                 db    ? ;
.bss:000000000020B16D                 db    ? ;
.bss:000000000020B16E                 db    ? ;
.bss:000000000020B16F                 db    ? ;
.bss:000000000020B170                 db    ? ;
.bss:000000000020B171                 db    ? ;
.bss:000000000020B172                 db    ? ;
.bss:000000000020B173                 db    ? ;
.bss:000000000020B174                 db    ? ;
.bss:000000000020B175                 db    ? ;
.bss:000000000020B176                 db    ? ;
.bss:000000000020B177                 db    ? ;
.bss:000000000020B178                 db    ? ;
.bss:000000000020B179                 db    ? ;
.bss:000000000020B17A                 db    ? ;
.bss:000000000020B17B                 db    ? ;
.bss:000000000020B17C                 db    ? ;
.bss:000000000020B17D                 db    ? ;
.bss:000000000020B17E                 db    ? ;
.bss:000000000020B17F                 db    ? ;
.bss:000000000020B180                 db    ? ;
.bss:000000000020B181                 db    ? ;
.bss:000000000020B182                 db    ? ;
.bss:000000000020B183                 db    ? ;
.bss:000000000020B184                 db    ? ;
.bss:000000000020B185                 db    ? ;
.bss:000000000020B186                 db    ? ;
.bss:000000000020B187                 db    ? ;
.bss:000000000020B188                 db    ? ;
.bss:000000000020B189                 db    ? ;
.bss:000000000020B18A                 db    ? ;
.bss:000000000020B18B                 db    ? ;
.bss:000000000020B18C                 db    ? ;
.bss:000000000020B18D                 db    ? ;
.bss:000000000020B18E                 db    ? ;
.bss:000000000020B18F                 db    ? ;
.bss:000000000020B190                 db    ? ;
.bss:000000000020B191                 db    ? ;
.bss:000000000020B192                 db    ? ;
.bss:000000000020B193                 db    ? ;
.bss:000000000020B194                 db    ? ;
.bss:000000000020B195                 db    ? ;
.bss:000000000020B196                 db    ? ;
.bss:000000000020B197                 db    ? ;
.bss:000000000020B198                 db    ? ;
.bss:000000000020B199                 db    ? ;
.bss:000000000020B19A                 db    ? ;
.bss:000000000020B19B                 db    ? ;
.bss:000000000020B19C                 db    ? ;
.bss:000000000020B19D                 db    ? ;
.bss:000000000020B19E                 db    ? ;
.bss:000000000020B19F                 db    ? ;
.bss:000000000020B1A0                 db    ? ;
.bss:000000000020B1A1                 db    ? ;
.bss:000000000020B1A2                 db    ? ;
.bss:000000000020B1A3                 db    ? ;
.bss:000000000020B1A4                 db    ? ;
.bss:000000000020B1A5                 db    ? ;
.bss:000000000020B1A6                 db    ? ;
.bss:000000000020B1A7                 db    ? ;
.bss:000000000020B1A8                 db    ? ;
.bss:000000000020B1A9                 db    ? ;
.bss:000000000020B1AA                 db    ? ;
.bss:000000000020B1AB                 db    ? ;
.bss:000000000020B1AC                 db    ? ;
.bss:000000000020B1AD                 db    ? ;
.bss:000000000020B1AE                 db    ? ;
.bss:000000000020B1AF                 db    ? ;
.bss:000000000020B1B0                 db    ? ;
.bss:000000000020B1B1                 db    ? ;
.bss:000000000020B1B2                 db    ? ;
.bss:000000000020B1B3                 db    ? ;
.bss:000000000020B1B4                 db    ? ;
.bss:000000000020B1B5                 db    ? ;
.bss:000000000020B1B6                 db    ? ;
.bss:000000000020B1B7                 db    ? ;
.bss:000000000020B1B8                 db    ? ;
.bss:000000000020B1B9                 db    ? ;
.bss:000000000020B1BA                 db    ? ;
.bss:000000000020B1BB                 db    ? ;
.bss:000000000020B1BC                 db    ? ;
.bss:000000000020B1BD                 db    ? ;
.bss:000000000020B1BE                 db    ? ;
.bss:000000000020B1BF                 db    ? ;
.bss:000000000020B1C0                 db    ? ;
.bss:000000000020B1C1                 db    ? ;
.bss:000000000020B1C2                 db    ? ;
.bss:000000000020B1C3                 db    ? ;
.bss:000000000020B1C4                 db    ? ;
.bss:000000000020B1C5                 db    ? ;
.bss:000000000020B1C6                 db    ? ;
.bss:000000000020B1C7                 db    ? ;
.bss:000000000020B1C8                 db    ? ;
.bss:000000000020B1C9                 db    ? ;
.bss:000000000020B1CA                 db    ? ;
.bss:000000000020B1CB                 db    ? ;
.bss:000000000020B1CC                 db    ? ;
.bss:000000000020B1CD                 db    ? ;
.bss:000000000020B1CE                 db    ? ;
.bss:000000000020B1CF                 db    ? ;
.bss:000000000020B1D0                 db    ? ;
.bss:000000000020B1D1                 db    ? ;
.bss:000000000020B1D2                 db    ? ;
.bss:000000000020B1D3                 db    ? ;
.bss:000000000020B1D4                 db    ? ;
.bss:000000000020B1D5                 db    ? ;
.bss:000000000020B1D6                 db    ? ;
.bss:000000000020B1D7                 db    ? ;
.bss:000000000020B1D8                 db    ? ;
.bss:000000000020B1D9                 db    ? ;
.bss:000000000020B1DA                 db    ? ;
.bss:000000000020B1DB                 db    ? ;
.bss:000000000020B1DC                 db    ? ;
.bss:000000000020B1DD                 db    ? ;
.bss:000000000020B1DE                 db    ? ;
.bss:000000000020B1DF                 db    ? ;
.bss:000000000020B1E0                 db    ? ;
.bss:000000000020B1E1                 db    ? ;
.bss:000000000020B1E2                 db    ? ;
.bss:000000000020B1E3                 db    ? ;
.bss:000000000020B1E4                 db    ? ;
.bss:000000000020B1E5                 db    ? ;
.bss:000000000020B1E6                 db    ? ;
.bss:000000000020B1E7                 db    ? ;
.bss:000000000020B1E8                 db    ? ;
.bss:000000000020B1E9                 db    ? ;
.bss:000000000020B1EA                 db    ? ;
.bss:000000000020B1EB                 db    ? ;
.bss:000000000020B1EC                 db    ? ;
.bss:000000000020B1ED                 db    ? ;
.bss:000000000020B1EE                 db    ? ;
.bss:000000000020B1EF                 db    ? ;
.bss:000000000020B1F0                 db    ? ;
.bss:000000000020B1F1                 db    ? ;
.bss:000000000020B1F2                 db    ? ;
.bss:000000000020B1F3                 db    ? ;
.bss:000000000020B1F4                 db    ? ;
.bss:000000000020B1F5                 db    ? ;
.bss:000000000020B1F6                 db    ? ;
.bss:000000000020B1F7                 db    ? ;
.bss:000000000020B1F8                 db    ? ;
.bss:000000000020B1F9                 db    ? ;
.bss:000000000020B1FA                 db    ? ;
.bss:000000000020B1FB                 db    ? ;
.bss:000000000020B1FC                 db    ? ;
.bss:000000000020B1FD                 db    ? ;
.bss:000000000020B1FE                 db    ? ;
.bss:000000000020B1FF                 db    ? ;
.bss:000000000020B200                 db    ? ;
.bss:000000000020B201                 db    ? ;
.bss:000000000020B202                 db    ? ;
.bss:000000000020B203                 db    ? ;
.bss:000000000020B204                 db    ? ;
.bss:000000000020B205                 db    ? ;
.bss:000000000020B206                 db    ? ;
.bss:000000000020B207                 db    ? ;
.bss:000000000020B208                 db    ? ;
.bss:000000000020B209                 db    ? ;
.bss:000000000020B20A                 db    ? ;
.bss:000000000020B20B                 db    ? ;
.bss:000000000020B20C                 db    ? ;
.bss:000000000020B20D                 db    ? ;
.bss:000000000020B20E                 db    ? ;
.bss:000000000020B20F                 db    ? ;
.bss:000000000020B210                 db    ? ;
.bss:000000000020B211                 db    ? ;
.bss:000000000020B212                 db    ? ;
.bss:000000000020B213                 db    ? ;
.bss:000000000020B214                 db    ? ;
.bss:000000000020B215                 db    ? ;
.bss:000000000020B216                 db    ? ;
.bss:000000000020B217                 db    ? ;
.bss:000000000020B218                 db    ? ;
.bss:000000000020B219                 db    ? ;
.bss:000000000020B21A                 db    ? ;
.bss:000000000020B21B                 db    ? ;
.bss:000000000020B21C                 db    ? ;
.bss:000000000020B21D                 db    ? ;
.bss:000000000020B21E                 db    ? ;
.bss:000000000020B21F                 db    ? ;
.bss:000000000020B220                 db    ? ;
.bss:000000000020B221                 db    ? ;
.bss:000000000020B222                 db    ? ;
.bss:000000000020B223                 db    ? ;
.bss:000000000020B224                 db    ? ;
.bss:000000000020B225                 db    ? ;
.bss:000000000020B226                 db    ? ;
.bss:000000000020B227                 db    ? ;
.bss:000000000020B228                 db    ? ;
.bss:000000000020B229                 db    ? ;
.bss:000000000020B22A                 db    ? ;
.bss:000000000020B22B                 db    ? ;
.bss:000000000020B22C                 db    ? ;
.bss:000000000020B22D                 db    ? ;
.bss:000000000020B22E                 db    ? ;
.bss:000000000020B22F                 db    ? ;
.bss:000000000020B230                 db    ? ;
.bss:000000000020B231                 db    ? ;
.bss:000000000020B232                 db    ? ;
.bss:000000000020B233                 db    ? ;
.bss:000000000020B234                 db    ? ;
.bss:000000000020B235                 db    ? ;
.bss:000000000020B236                 db    ? ;
.bss:000000000020B237                 db    ? ;
.bss:000000000020B238                 db    ? ;
.bss:000000000020B239                 db    ? ;
.bss:000000000020B23A                 db    ? ;
.bss:000000000020B23B                 db    ? ;
.bss:000000000020B23C                 db    ? ;
.bss:000000000020B23D                 db    ? ;
.bss:000000000020B23E                 db    ? ;
.bss:000000000020B23F                 db    ? ;
.bss:000000000020B240                 db    ? ;
.bss:000000000020B241                 db    ? ;
.bss:000000000020B242                 db    ? ;
.bss:000000000020B243                 db    ? ;
.bss:000000000020B244                 db    ? ;
.bss:000000000020B245                 db    ? ;
.bss:000000000020B246                 db    ? ;
.bss:000000000020B247                 db    ? ;
.bss:000000000020B248                 db    ? ;
.bss:000000000020B249                 db    ? ;
.bss:000000000020B24A                 db    ? ;
.bss:000000000020B24B                 db    ? ;
.bss:000000000020B24C                 db    ? ;
.bss:000000000020B24D                 db    ? ;
.bss:000000000020B24E                 db    ? ;
.bss:000000000020B24F                 db    ? ;
.bss:000000000020B250                 db    ? ;
.bss:000000000020B251                 db    ? ;
.bss:000000000020B252                 db    ? ;
.bss:000000000020B253                 db    ? ;
.bss:000000000020B254                 db    ? ;
.bss:000000000020B255                 db    ? ;
.bss:000000000020B256                 db    ? ;
.bss:000000000020B257                 db    ? ;
.bss:000000000020B258                 db    ? ;
.bss:000000000020B259                 db    ? ;
.bss:000000000020B25A                 db    ? ;
.bss:000000000020B25B                 db    ? ;
.bss:000000000020B25C                 db    ? ;
.bss:000000000020B25D                 db    ? ;
.bss:000000000020B25E                 db    ? ;
.bss:000000000020B25F                 db    ? ;
.bss:000000000020B260 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020B260                                         ; get_quoting_style↑o ...
.bss:000000000020B270 xmmword_20B270  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020B270                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020B280 xmmword_20B280  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020B280                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020B290 qword_20B290    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020B290                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020B290 _bss            ends
.bss:000000000020B290
.prgend:000000000020B298 ; ===========================================================================
.prgend:000000000020B298
.prgend:000000000020B298 ; Segment type: Zero-length
.prgend:000000000020B298 _prgend         segment byte public '' use64
.prgend:000000000020B298 _end            label byte
.prgend:000000000020B298 _prgend         ends
.prgend:000000000020B298
extern:000000000020B2A0 ; ===========================================================================
extern:000000000020B2A0
extern:000000000020B2A0 ; Segment type: Externs
extern:000000000020B2A0 ; extern
extern:000000000020B2A0 ; const __int32_t **_ctype_toupper_loc(void)
extern:000000000020B2A0                 extrn __ctype_toupper_loc:near
extern:000000000020B2A0                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:000000000020B2A0                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:000000000020B2A8 ; char *getenv(const char *name)
extern:000000000020B2A8                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020B2A8                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020B2B0                 extrn __snprintf_chk:near
extern:000000000020B2B0                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000020B2B0                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000020B2B8 ; void free(void *ptr)
extern:000000000020B2B8                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020B2B8                                         ; DATA XREF: .data.rel.ro:000000000020AC10↑o ...
extern:000000000020B2C0 ; void __noreturn abort(void)
extern:000000000020B2C0                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020B2C0                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020B2C8 ; int *_errno_location(void)
extern:000000000020B2C8                 extrn __errno_location:near
extern:000000000020B2C8                                         ; CODE XREF: ___errno_location↑j
extern:000000000020B2C8                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020B2D0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020B2D0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020B2D0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020B2D8 ; void __noreturn exit(int status)
extern:000000000020B2D8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020B2D8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020B2E0 ; size_t _fpending(FILE *fp)
extern:000000000020B2E0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020B2E0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020B2E8 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:000000000020B2E8                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:000000000020B2E8                                         ; DATA XREF: .got:readlink_ptr↑o
extern:000000000020B2F0 ; char *textdomain(const char *domainname)
extern:000000000020B2F0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020B2F0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020B2F8 ; int fclose(FILE *stream)
extern:000000000020B2F8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020B2F8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020B300 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020B300                 extrn bindtextdomain:near
extern:000000000020B300                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020B300                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020B308 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020B308                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020B308                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020B310 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020B310                 extrn __ctype_get_mb_cur_max:near
extern:000000000020B310                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020B310                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020B318 ; size_t strlen(const char *s)
extern:000000000020B318                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020B318                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020B320                 extrn __stack_chk_fail:near
extern:000000000020B320                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020B320                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020B328 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020B328                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020B328                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020B330 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020B330                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020B330                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020B338 ; char *strchr(const char *s, int c)
extern:000000000020B338                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020B338                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020B340 ; char *strrchr(const char *s, int c)
extern:000000000020B340                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020B340                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020B348 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020B348                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020B348                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020B350 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020B350                 extrn __assert_fail:near
extern:000000000020B350                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020B350                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020B358 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020B358                 extrn __strtoul_internal:near
extern:000000000020B358                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000020B358                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000020B360 ; void *memset(void *s, int c, size_t n)
extern:000000000020B360                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020B360                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020B368 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020B368                 extrn __libc_start_main:near
extern:000000000020B368                                         ; CODE XREF: start+24↑p
extern:000000000020B368                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020B370 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020B370                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020B370                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020B378 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020B378                 extrn fputs_unlocked:near
extern:000000000020B378                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020B378                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020B380 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020B380                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020B380                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020B388 ; int putenv(char *string)
extern:000000000020B388                 extrn putenv:near       ; CODE XREF: _putenv↑j
extern:000000000020B388                                         ; DATA XREF: .got:putenv_ptr↑o
extern:000000000020B390 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020B390                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020B390                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020B398 ; int fileno(FILE *stream)
extern:000000000020B398                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020B398                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020B3A0 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020B3A0                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020B3A0                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020B3A8 ; void *malloc(size_t size)
extern:000000000020B3A8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020B3A8                                         ; DATA XREF: .data.rel.ro:stdlib_allocator↑o ...
extern:000000000020B3B0 ; int fflush(FILE *stream)
extern:000000000020B3B0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020B3B0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020B3B8 ; char *nl_langinfo(nl_item item)
extern:000000000020B3B8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020B3B8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020B3C0 ; int _freading(FILE *fp)
extern:000000000020B3C0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020B3C0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020B3C8 ; void *realloc(void *ptr, size_t size)
extern:000000000020B3C8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020B3C8                                         ; DATA XREF: .data.rel.ro:000000000020AC08↑o ...
extern:000000000020B3D0 ; char *setlocale(int category, const char *locale)
extern:000000000020B3D0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020B3D0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020B3D8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020B3D8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020B3E0 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000020B3E0                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000020B3E0                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000020B3E8 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020B3E8                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020B3E8                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020B3F0 ; int access(const char *name, int type)
extern:000000000020B3F0                 extrn access:near       ; CODE XREF: _access↑j
extern:000000000020B3F0                                         ; DATA XREF: .got:access_ptr↑o
extern:000000000020B3F8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020B3F8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020B3F8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020B400 ; char *strtok(char *s, const char *delim)
extern:000000000020B400                 extrn strtok:near       ; CODE XREF: _strtok↑j
extern:000000000020B400                                         ; DATA XREF: .got:strtok_ptr↑o
extern:000000000020B408 ; int execvp(const char *file, char *const argv[])
extern:000000000020B408                 extrn execvp:near       ; CODE XREF: _execvp↑j
extern:000000000020B408                                         ; DATA XREF: .got:execvp_ptr↑o
extern:000000000020B410 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020B410                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020B410                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020B418 ; void __noreturn exit(int status)
extern:000000000020B418                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020B418                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020B420 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020B420                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020B420                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020B428                 extrn __fprintf_chk:near
extern:000000000020B428                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020B428                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020B430 ; int mbsinit(const mbstate_t *ps)
extern:000000000020B430                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020B430                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020B438 ; int iswprint(wint_t wc)
extern:000000000020B438                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020B438                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020B440 ; int __fastcall __cxa_finalize(void *)
extern:000000000020B440                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020B440                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020B440                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020B448 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020B448                 extrn __ctype_b_loc:near
extern:000000000020B448                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020B448                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020B450                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020B450                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020B458                 extrn __gmon_start__:near ; weak
extern:000000000020B458                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020B458                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020B460                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020B460                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020B460
extern:000000000020B460
extern:000000000020B460                 end start
