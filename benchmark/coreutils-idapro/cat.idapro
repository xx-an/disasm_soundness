LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : CACA83675820D0E0ABEA232BF29A44B460F51088BE860BE998916E53884F7D73
LOAD:0000000000000000 ; Input MD5    : A87102ECC90EF4C5823520BEEB162770
LOAD:0000000000000000 ; Input CRC32  : BFC9EC38
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/cat
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'cat.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'full-write.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'safe-read.c'
LOAD:0000000000000000 ; Source File : 'safe-write.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 28960h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7238h                ; Size in file image
LOAD:00000000000000D8                 dq 7238h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7A90h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207A90h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 630h                 ; Size in file image
LOAD:0000000000000110                 dq 7C8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 63F0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 63F0h                ; Physical address
LOAD:00000000000001B0                 dq 274h                 ; Size in file image
LOAD:00000000000001B8                 dq 274h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7A90h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207A90h              ; Physical address
LOAD:0000000000000220                 dq 570h                 ; Size in file image
LOAD:0000000000000228                 dq 570h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 21h, 0, 0B9h, 9Ah, 0F9h, 34h, 0D2h, 2Ah, 0C3h, 9Ch ; Desc
LOAD:0000000000000284                 db 28h, 7Fh, 93h, 3Ch, 80h, 8Eh, 78h, 35h, 0ECh, 0AAh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 37h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 37h, 38h, 3Dh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aFree - offset byte_8A8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F0                            0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_8A8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_8A8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aStrncmp - offset byte_8A8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aItmDeregistert - offset byte_8A8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aExit - offset byte_8A8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000368                            0>
LOAD:0000000000000380                 Elf64_Sym <offset aFpending - offset byte_8A8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aFwrite+1 - offset byte_8A8, 12h, 0, 0, \ ; "write"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8A8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aFclose - offset byte_8A8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aBindtextdomain - offset byte_8A8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aStpcpy - offset byte_8A8, 12h, 0, 0, \ ; "stpcpy"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aDcgettext - offset byte_8A8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8A8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aStrlen - offset byte_8A8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aStackChkFail - offset byte_8A8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aGetoptLong - offset byte_8A8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aMbrtowc - offset byte_8A8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aStrrchr - offset byte_8A8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aLseek - offset byte_8A8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004B8                            0>
LOAD:00000000000004D0                 Elf64_Sym <offset aMemset - offset byte_8A8, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aIoctl - offset byte_8A8, 12h, 0, 0, offset dword_0,\ ; "ioctl"
LOAD:00000000000004E8                            0>
LOAD:0000000000000500                 Elf64_Sym <offset aFclose+1 - offset byte_8A8, 12h, 0, 0, \ ; "close"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aPosixFadvise - offset byte_8A8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aRead - offset byte_8A8, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:0000000000000530                            0>
LOAD:0000000000000548                 Elf64_Sym <offset aLibcStartMain - offset byte_8A8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aMemcmp - offset byte_8A8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aFputsUnlocked - offset byte_8A8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aCalloc - offset byte_8A8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aGmonStart - offset byte_8A8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aMemcpy - offset byte_8A8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aFileno - offset byte_8A8, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aMalloc - offset byte_8A8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aFflush - offset byte_8A8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aNlLanginfo - offset byte_8A8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aFxstat - offset byte_8A8, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aFreading - offset byte_8A8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aRealloc - offset byte_8A8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aSetlocale - offset byte_8A8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aPrintfChk - offset byte_8A8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aMemmove - offset byte_8A8, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aError - offset byte_8A8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006C8                            0>
LOAD:00000000000006E0                 Elf64_Sym <offset aOpen - offset byte_8A8, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000006E0                            0>
LOAD:00000000000006F8                 Elf64_Sym <offset aFseeko - offset byte_8A8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aCxaAtexit - offset byte_8A8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aGetpagesize - offset byte_8A8, 12h, 0, 0, \ ; "getpagesize"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aExit+1 - offset byte_8A8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aFwrite - offset byte_8A8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aFprintfChk - offset byte_8A8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aItmRegistertmc - offset byte_8A8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aMbsinit - offset byte_8A8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aIswprint - offset byte_8A8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aCxaFinalize - offset byte_8A8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aCtypeBLoc - offset byte_8A8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007E8                            offset dword_0, 0>
LOAD:0000000000000800                 Elf64_Sym <offset aStdout - offset byte_8A8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000800                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000818                 Elf64_Sym <offset aProgname - offset byte_8A8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000818                            offset __bss_start, 8>
LOAD:0000000000000830                 Elf64_Sym <offset aProgramInvocat - offset byte_8A8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000830                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000848                 Elf64_Sym <offset aPrognameFull - offset byte_8A8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000848                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000860                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8A8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000860                            offset __bss_start, 8>
LOAD:0000000000000878                 Elf64_Sym <offset aStderr - offset byte_8A8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000878                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000890                 Elf64_Sym <offset aOptind - offset byte_8A8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000890                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008A8 ; ELF String Table
LOAD:00000000000008A8 byte_8A8        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000008A8                                         ; LOAD:0000000000000308↑o ...
LOAD:00000000000008A9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BE0↓o
LOAD:00000000000008B3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000608↑o
LOAD:00000000000008BA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000698↑o
LOAD:00000000000008C7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000680↑o
LOAD:00000000000008D1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000488↑o
LOAD:00000000000008D9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000338↑o
LOAD:00000000000008E1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000890↑o
LOAD:00000000000008E8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:00000000000008F0 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000410↑o
LOAD:00000000000008FA aError          db 'error',0            ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000900 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000911 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:000000000000091A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000668↑o
LOAD:0000000000000922 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000928 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000928                                         ; LOAD:0000000000000740↑o
LOAD:000000000000092E aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000092E                                         ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000946 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000946                                         ; DATA XREF: LOAD:0000000000000428↑o
LOAD:000000000000095D aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000518↑o
LOAD:000000000000096B aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000972 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000979 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000980 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000991 aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000996 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:000000000000099D aGetpagesize    db 'getpagesize',0      ; DATA XREF: LOAD:0000000000000728↑o
LOAD:00000000000009A9 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000770↑o
LOAD:00000000000009B7 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000800↑o
LOAD:00000000000009BE aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:00000000000009C4 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:00000000000009CB aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:00000000000009CB                                         ; LOAD:0000000000000500↑o
LOAD:00000000000009D2 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:00000000000009D9 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:00000000000009E1 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000620↑o
LOAD:00000000000009ED aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:00000000000009FB aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000A06 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000878↑o
LOAD:0000000000000A0D aIoctl          db 'ioctl',0            ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:0000000000000A13 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000470↑o
LOAD:0000000000000A1F aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000638↑o
LOAD:0000000000000A28 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000A2F aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000A2F                                         ; LOAD:0000000000000398↑o
LOAD:0000000000000A36 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000A41 aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A46 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A46                                         ; DATA XREF: LOAD:0000000000000860↑o
LOAD:0000000000000A64 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000A73 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000A7B aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000A7B                                         ; LOAD:00000000000003B0↑o
LOAD:0000000000000A8A aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A8A                                         ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A9C aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:0000000000000AA3 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000AAA aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000AB9 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000ABE aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000818↑o
LOAD:0000000000000AC9 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000AD9 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000AE6 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BF0↓o
LOAD:0000000000000AF0 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C00↓o
LOAD:0000000000000AFC aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C10↓o
LOAD:0000000000000B07 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C20↓o
LOAD:0000000000000B11 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C30↓o
LOAD:0000000000000B1D aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B1D                                         ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000B39 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000B48 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B48                                         ; DATA XREF: LOAD:0000000000000788↑o
LOAD:0000000000000B62 ; ELF GNU Symbol Version Table
LOAD:0000000000000B62                 dw 0
LOAD:0000000000000B64                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B6E                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B70                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; write@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B78                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 2                    ; stpcpy@@GLIBC_2.2.5
LOAD:0000000000000B7C                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B7E                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B84                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; ioctl@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BA0                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BA2                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BB4                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 2                    ; getpagesize@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BC6                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BC8                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BD0                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 0
LOAD:0000000000000BE0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BE0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8A8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BF0                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8A8, \ ; "GLIBC_2.3"
LOAD:0000000000000BF0                                10h>
LOAD:0000000000000C00                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8A8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C00                                10h>
LOAD:0000000000000C10                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8A8, \ ; "GLIBC_2.14"
LOAD:0000000000000C10                                10h>
LOAD:0000000000000C20                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8A8, \ ; "GLIBC_2.4"
LOAD:0000000000000C20                                10h>
LOAD:0000000000000C30                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8A8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C40 ; ELF RELA Relocation Table
LOAD:0000000000000C40                 Elf64_Rela <207A90h, 8, 24E0h> ; R_X86_64_RELATIVE +24E0h
LOAD:0000000000000C58                 Elf64_Rela <207A98h, 8, 24A0h> ; R_X86_64_RELATIVE +24A0h
LOAD:0000000000000C70                 Elf64_Rela <207AA0h, 8, 565Bh> ; R_X86_64_RELATIVE +565Bh
LOAD:0000000000000C88                 Elf64_Rela <207AC0h, 8, 566Bh> ; R_X86_64_RELATIVE +566Bh
LOAD:0000000000000CA0                 Elf64_Rela <207AE0h, 8, 5672h> ; R_X86_64_RELATIVE +5672h
LOAD:0000000000000CB8                 Elf64_Rela <207B00h, 8, 5680h> ; R_X86_64_RELATIVE +5680h
LOAD:0000000000000CD0                 Elf64_Rela <207B20h, 8, 5691h> ; R_X86_64_RELATIVE +5691h
LOAD:0000000000000CE8                 Elf64_Rela <207B40h, 8, 569Bh> ; R_X86_64_RELATIVE +569Bh
LOAD:0000000000000D00                 Elf64_Rela <207B60h, 8, 56A5h> ; R_X86_64_RELATIVE +56A5h
LOAD:0000000000000D18                 Elf64_Rela <207B80h, 8, 56AEh> ; R_X86_64_RELATIVE +56AEh
LOAD:0000000000000D30                 Elf64_Rela <207BA0h, 8, 56B3h> ; R_X86_64_RELATIVE +56B3h
LOAD:0000000000000D48                 Elf64_Rela <207BE0h, 8, 5BA1h> ; R_X86_64_RELATIVE +5BA1h
LOAD:0000000000000D60                 Elf64_Rela <207BE8h, 8, 5BA9h> ; R_X86_64_RELATIVE +5BA9h
LOAD:0000000000000D78                 Elf64_Rela <207BF0h, 8, 5BAFh> ; R_X86_64_RELATIVE +5BAFh
LOAD:0000000000000D90                 Elf64_Rela <207BF8h, 8, 5BBCh> ; R_X86_64_RELATIVE +5BBCh
LOAD:0000000000000DA8                 Elf64_Rela <207C00h, 8, 5BC9h> ; R_X86_64_RELATIVE +5BC9h
LOAD:0000000000000DC0                 Elf64_Rela <207C08h, 8, 5BDDh> ; R_X86_64_RELATIVE +5BDDh
LOAD:0000000000000DD8                 Elf64_Rela <207C10h, 8, 5BDFh> ; R_X86_64_RELATIVE +5BDFh
LOAD:0000000000000DF0                 Elf64_Rela <207C18h, 8, 5BC2h> ; R_X86_64_RELATIVE +5BC2h
LOAD:0000000000000E08                 Elf64_Rela <207C20h, 8, 55C8h> ; R_X86_64_RELATIVE +55C8h
LOAD:0000000000000E20                 Elf64_Rela <207C28h, 8, 5BE7h> ; R_X86_64_RELATIVE +5BE7h
LOAD:0000000000000E38                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000E50                 Elf64_Rela <208028h, 8, 208021h> ; R_X86_64_RELATIVE +208021h
LOAD:0000000000000E68                 Elf64_Rela <208030h, 8, 20801Ch> ; R_X86_64_RELATIVE +20801Ch
LOAD:0000000000000E80                 Elf64_Rela <208038h, 8, 5B3Bh> ; R_X86_64_RELATIVE +5B3Bh
LOAD:0000000000000E98                 Elf64_Rela <2080A0h, 8, 2080B0h> ; R_X86_64_RELATIVE +2080B0h
LOAD:0000000000000EB0                 Elf64_Rela <2080B8h, 8, 208120h> ; R_X86_64_RELATIVE +208120h
LOAD:0000000000000EC8                 Elf64_Rela <207FC8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000EE0                 Elf64_Rela <207FD0h, 1A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000EF8                 Elf64_Rela <207FD8h, 1E00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F10                 Elf64_Rela <207FE0h, 3200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F28                 Elf64_Rela <207FE8h, 3500000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F40                 Elf64_Rela <2080C0h, 3800000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F58                 Elf64_Rela <2080C8h, 3700000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F70                 Elf64_Rela <2080D0h, 3D00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F88                 Elf64_Rela <2080D8h, 3A00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000FA0                 Elf64_Rela <2080E0h, 3C00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000FB8 ; ELF JMPREL Relocation Table
LOAD:0000000000000FB8                 Elf64_Rela <207E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000FD0                 Elf64_Rela <207E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000FE8                 Elf64_Rela <207E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001000                 Elf64_Rela <207E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001018                 Elf64_Rela <207E60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001030                 Elf64_Rela <207E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001048                 Elf64_Rela <207E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT write
LOAD:0000000000001060                 Elf64_Rela <207E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001078                 Elf64_Rela <207E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001090                 Elf64_Rela <207E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000010A8                 Elf64_Rela <207E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:00000000000010C0                 Elf64_Rela <207E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000010D8                 Elf64_Rela <207EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000010F0                 Elf64_Rela <207EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001108                 Elf64_Rela <207EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001120                 Elf64_Rela <207EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001138                 Elf64_Rela <207EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001150                 Elf64_Rela <207EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001168                 Elf64_Rela <207ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001180                 Elf64_Rela <207ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001198                 Elf64_Rela <207EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT ioctl
LOAD:00000000000011B0                 Elf64_Rela <207EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000011C8                 Elf64_Rela <207EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000011E0                 Elf64_Rela <207EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:00000000000011F8                 Elf64_Rela <207F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001210                 Elf64_Rela <207F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001228                 Elf64_Rela <207F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001240                 Elf64_Rela <207F18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001258                 Elf64_Rela <207F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001270                 Elf64_Rela <207F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001288                 Elf64_Rela <207F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000012A0                 Elf64_Rela <207F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000012B8                 Elf64_Rela <207F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000012D0                 Elf64_Rela <207F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000012E8                 Elf64_Rela <207F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001300                 Elf64_Rela <207F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001318                 Elf64_Rela <207F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001330                 Elf64_Rela <207F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001348                 Elf64_Rela <207F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001360                 Elf64_Rela <207F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001378                 Elf64_Rela <207F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001390                 Elf64_Rela <207F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000013A8                 Elf64_Rela <207F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT getpagesize
LOAD:00000000000013C0                 Elf64_Rela <207F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000013D8                 Elf64_Rela <207FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000013F0                 Elf64_Rela <207FA8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001408                 Elf64_Rela <207FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001420                 Elf64_Rela <207FB8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001438                 Elf64_Rela <207FC0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001438 LOAD            ends
LOAD:0000000000001438
.init:0000000000001450 ; ===========================================================================
.init:0000000000001450
.init:0000000000001450 ; Segment type: Pure code
.init:0000000000001450 ; Segment permissions: Read/Execute
.init:0000000000001450 _init           segment dword public 'CODE' use64
.init:0000000000001450                 assume cs:_init
.init:0000000000001450                 ;org 1450h
.init:0000000000001450                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001450
.init:0000000000001450 ; =============== S U B R O U T I N E =======================================
.init:0000000000001450
.init:0000000000001450
.init:0000000000001450                 public _init_proc
.init:0000000000001450 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001450                 sub     rsp, 8          ; _init
.init:0000000000001454                 mov     rax, cs:__gmon_start___ptr
.init:000000000000145B                 test    rax, rax
.init:000000000000145E                 jz      short loc_1462
.init:0000000000001460                 call    rax ; __gmon_start__
.init:0000000000001462
.init:0000000000001462 loc_1462:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001462                 add     rsp, 8
.init:0000000000001466                 retn
.init:0000000000001466 _init_proc      endp
.init:0000000000001466
.init:0000000000001466 _init           ends
.init:0000000000001466
LOAD:0000000000001467 ; ===========================================================================
LOAD:0000000000001467
LOAD:0000000000001467 ; Segment type: Pure code
LOAD:0000000000001467 ; Segment permissions: Read/Execute
LOAD:0000000000001467 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001467                 assume cs:LOAD
LOAD:0000000000001467                 ;org 1467h
LOAD:0000000000001467                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001467                 align 10h
LOAD:0000000000001467 LOAD            ends
LOAD:0000000000001467
.plt:0000000000001470 ; ===========================================================================
.plt:0000000000001470
.plt:0000000000001470 ; Segment type: Pure code
.plt:0000000000001470 ; Segment permissions: Read/Execute
.plt:0000000000001470 _plt            segment para public 'CODE' use64
.plt:0000000000001470                 assume cs:_plt
.plt:0000000000001470                 ;org 1470h
.plt:0000000000001470                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470
.plt:0000000000001470 sub_1470        proc near               ; CODE XREF: .plt:000000000000148B↓j
.plt:0000000000001470                                         ; .plt:000000000000149B↓j ...
.plt:0000000000001470 ; __unwind {
.plt:0000000000001470                 push    cs:qword_207E30
.plt:0000000000001476                 jmp     cs:qword_207E38
.plt:0000000000001476 sub_1470        endp
.plt:0000000000001476
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:000000000000147C                 align 20h
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; void free(void *ptr)
.plt:0000000000001480 _free           proc near               ; CODE XREF: main+895↓p
.plt:0000000000001480                                         ; main+89F↓p ...
.plt:0000000000001480                 jmp     cs:free_ptr
.plt:0000000000001480 _free           endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0
.plt:000000000000148B                 jmp     sub_1470
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: noreturn thunk
.plt:0000000000001490
.plt:0000000000001490 ; void __noreturn abort(void)
.plt:0000000000001490 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001490                                         ; quotearg_buffer_restyled:def_2D01↓p ...
.plt:0000000000001490                 jmp     cs:abort_ptr
.plt:0000000000001490 _abort          endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    1
.plt:000000000000149B                 jmp     sub_1470
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int *__errno_location(void)
.plt:00000000000014A0 ___errno_location proc near             ; CODE XREF: write_pending_part_6+17↓p
.plt:00000000000014A0                                         ; main:loc_1F20↓p ...
.plt:00000000000014A0                 jmp     cs:__errno_location_ptr
.plt:00000000000014A0 ___errno_location endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    2
.plt:00000000000014AB                 jmp     sub_1470
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000014B0 _strncmp        proc near               ; CODE XREF: usage+29C↓p
.plt:00000000000014B0                                         ; usage+35D↓p
.plt:00000000000014B0                 jmp     cs:strncmp_ptr
.plt:00000000000014B0 _strncmp        endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    3
.plt:00000000000014BB                 jmp     sub_1470
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: noreturn thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; void __noreturn _exit(int status)
.plt:00000000000014C0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000014C0                 jmp     cs:_exit_ptr
.plt:00000000000014C0 __exit          endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    4
.plt:00000000000014CB                 jmp     sub_1470
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; size_t __fpending(FILE *fp)
.plt:00000000000014D0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000014D0                 jmp     cs:__fpending_ptr
.plt:00000000000014D0 ___fpending     endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    5
.plt:00000000000014DB                 jmp     sub_1470
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; ssize_t write(int fd, const void *buf, size_t n)
.plt:00000000000014E0 _write          proc near               ; CODE XREF: safe_write+21↓p
.plt:00000000000014E0                 jmp     cs:write_ptr
.plt:00000000000014E0 _write          endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    6
.plt:00000000000014EB                 jmp     sub_1470
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; char *textdomain(const char *domainname)
.plt:00000000000014F0 _textdomain     proc near               ; CODE XREF: main+6D↓p
.plt:00000000000014F0                 jmp     cs:textdomain_ptr
.plt:00000000000014F0 _textdomain     endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    7
.plt:00000000000014FB                 jmp     sub_1470
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int fclose(FILE *stream)
.plt:0000000000001500 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001500                                         ; rpl_fclose+6B↓j
.plt:0000000000001500                 jmp     cs:fclose_ptr
.plt:0000000000001500 _fclose         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    8
.plt:000000000000150B                 jmp     sub_1470
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001510 _bindtextdomain proc near               ; CODE XREF: main+61↓p
.plt:0000000000001510                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001510 _bindtextdomain endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    9
.plt:000000000000151B                 jmp     sub_1470
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; char *stpcpy(char *dest, const char *src)
.plt:0000000000001520 _stpcpy         proc near               ; CODE XREF: main+4B7↓p
.plt:0000000000001520                                         ; main+67E↓p
.plt:0000000000001520                 jmp     cs:stpcpy_ptr
.plt:0000000000001520 _stpcpy         endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    0Ah
.plt:000000000000152B                 jmp     sub_1470
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001530 _dcgettext      proc near               ; CODE XREF: write_pending_part_6+F↓p
.plt:0000000000001530                                         ; main+974↓p ...
.plt:0000000000001530                 jmp     cs:dcgettext_ptr
.plt:0000000000001530 _dcgettext      endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    0Bh
.plt:000000000000153B                 jmp     sub_1470
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001540 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001540                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001540 ___ctype_get_mb_cur_max endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    0Ch
.plt:000000000000154B                 jmp     sub_1470
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; size_t strlen(const char *s)
.plt:0000000000001550 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001550                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001550                 jmp     cs:strlen_ptr
.plt:0000000000001550 _strlen         endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    0Dh
.plt:000000000000155B                 jmp     sub_1470
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: noreturn thunk
.plt:0000000000001560
.plt:0000000000001560 ___stack_chk_fail proc near             ; CODE XREF: main:loc_23AA↓p
.plt:0000000000001560                                         ; quotearg_buffer_restyled:loc_3E63↓p ...
.plt:0000000000001560                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001560 ___stack_chk_fail endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    0Eh
.plt:000000000000156B                 jmp     sub_1470
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001570 _getopt_long    proc near               ; CODE XREF: main+BA↓p
.plt:0000000000001570                 jmp     cs:getopt_long_ptr
.plt:0000000000001570 _getopt_long    endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    0Fh
.plt:000000000000157B                 jmp     sub_1470
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001580 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001580                 jmp     cs:mbrtowc_ptr
.plt:0000000000001580 _mbrtowc        endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    10h
.plt:000000000000158B                 jmp     sub_1470
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; char *strrchr(const char *s, int c)
.plt:0000000000001590 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001590                 jmp     cs:strrchr_ptr
.plt:0000000000001590 _strrchr        endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    11h
.plt:000000000000159B                 jmp     sub_1470
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000015A0 _lseek          proc near               ; CODE XREF: main+93D↓p
.plt:00000000000015A0                                         ; rpl_fclose+59↓p ...
.plt:00000000000015A0                 jmp     cs:lseek_ptr
.plt:00000000000015A0 _lseek          endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    12h
.plt:00000000000015AB                 jmp     sub_1470
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000015B0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000015B0                                         ; xzalloc+12↓j
.plt:00000000000015B0                 jmp     cs:memset_ptr
.plt:00000000000015B0 _memset         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    13h
.plt:00000000000015BB                 jmp     sub_1470
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int ioctl(int fd, unsigned __int64 request, ...)
.plt:00000000000015C0 _ioctl          proc near               ; CODE XREF: main+6F4↓p
.plt:00000000000015C0                 jmp     cs:ioctl_ptr
.plt:00000000000015C0 _ioctl          endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    14h
.plt:00000000000015CB                 jmp     sub_1470
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int close(int fd)
.plt:00000000000015D0 _close          proc near               ; CODE XREF: main+8CC↓p
.plt:00000000000015D0                                         ; main+A16↓p
.plt:00000000000015D0                 jmp     cs:close_ptr
.plt:00000000000015D0 _close          endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    15h
.plt:00000000000015DB                 jmp     sub_1470
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:00000000000015E0 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:00000000000015E0                                         ; fadvise+16↓j
.plt:00000000000015E0                 jmp     cs:posix_fadvise_ptr
.plt:00000000000015E0 _posix_fadvise  endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    16h
.plt:00000000000015EB                 jmp     sub_1470
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:00000000000015F0 _read           proc near               ; CODE XREF: safe_read+21↓p
.plt:00000000000015F0                 jmp     cs:read_ptr
.plt:00000000000015F0 _read           endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    17h
.plt:00000000000015FB                 jmp     sub_1470
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001600 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001600                 jmp     cs:memcmp_ptr
.plt:0000000000001600 _memcmp         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    18h
.plt:000000000000160B                 jmp     sub_1470
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001610 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001610                                         ; usage+C2↓p ...
.plt:0000000000001610                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001610 _fputs_unlocked endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    19h
.plt:000000000000161B                 jmp     sub_1470
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001620 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001620                 jmp     cs:calloc_ptr
.plt:0000000000001620 _calloc         endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    1Ah
.plt:000000000000162B                 jmp     sub_1470
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001630 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001630                 jmp     cs:memcpy_ptr
.plt:0000000000001630 _memcpy         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    1Bh
.plt:000000000000163B                 jmp     sub_1470
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int fileno(FILE *stream)
.plt:0000000000001640 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001640                                         ; rpl_fclose+7↓p ...
.plt:0000000000001640                 jmp     cs:fileno_ptr
.plt:0000000000001640 _fileno         endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    1Ch
.plt:000000000000164B                 jmp     sub_1470
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; void *malloc(size_t size)
.plt:0000000000001650 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001650                 jmp     cs:malloc_ptr
.plt:0000000000001650 _malloc         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    1Dh
.plt:000000000000165B                 jmp     sub_1470
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int fflush(FILE *stream)
.plt:0000000000001660 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001660                                         ; rpl_fflush+3B↓j
.plt:0000000000001660                 jmp     cs:fflush_ptr
.plt:0000000000001660 _fflush         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    1Eh
.plt:000000000000166B                 jmp     sub_1470
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; char *nl_langinfo(nl_item item)
.plt:0000000000001670 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001670                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001670 _nl_langinfo    endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    1Fh
.plt:000000000000167B                 jmp     sub_1470
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001680 ___fxstat       proc near               ; CODE XREF: main+1D4↓p
.plt:0000000000001680                                         ; main+2DD↓p
.plt:0000000000001680                 jmp     cs:__fxstat_ptr
.plt:0000000000001680 ___fxstat       endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    20h ; ' '
.plt:000000000000168B                 jmp     sub_1470
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int __freading(FILE *fp)
.plt:0000000000001690 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001690                                         ; rpl_fflush+9↓p
.plt:0000000000001690                 jmp     cs:__freading_ptr
.plt:0000000000001690 ___freading     endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    21h ; '!'
.plt:000000000000169B                 jmp     sub_1470
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000016A0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000016A0                 jmp     cs:realloc_ptr
.plt:00000000000016A0 _realloc        endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    22h ; '"'
.plt:00000000000016AB                 jmp     sub_1470
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; char *setlocale(int category, const char *locale)
.plt:00000000000016B0 _setlocale      proc near               ; CODE XREF: main+4E↓p
.plt:00000000000016B0                                         ; usage+283↓p ...
.plt:00000000000016B0                 jmp     cs:setlocale_ptr
.plt:00000000000016B0 _setlocale      endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    23h ; '#'
.plt:00000000000016BB                 jmp     sub_1470
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000016C0                                         ; usage+18C↓p ...
.plt:00000000000016C0                 jmp     cs:__printf_chk_ptr
.plt:00000000000016C0 ___printf_chk   endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    24h ; '$'
.plt:00000000000016CB                 jmp     sub_1470
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:00000000000016D0 _memmove        proc near               ; CODE XREF: main+61A↓p
.plt:00000000000016D0                 jmp     cs:memmove_ptr
.plt:00000000000016D0 _memmove        endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    25h ; '%'
.plt:00000000000016DB                 jmp     sub_1470
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000016E0 _error          proc near               ; CODE XREF: write_pending_part_6+28↓p
.plt:00000000000016E0                                         ; main+7D0↓p ...
.plt:00000000000016E0                 jmp     cs:error_ptr
.plt:00000000000016E0 _error          endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    26h ; '&'
.plt:00000000000016EB                 jmp     sub_1470
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; int open(const char *file, int oflag, ...)
.plt:00000000000016F0 _open           proc near               ; CODE XREF: main+790↓p
.plt:00000000000016F0                 jmp     cs:open_ptr
.plt:00000000000016F0 _open           endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    27h ; '''
.plt:00000000000016FB                 jmp     sub_1470
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001700 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_53FA↓j
.plt:0000000000001700                 jmp     cs:fseeko_ptr
.plt:0000000000001700 _fseeko         endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    28h ; '('
.plt:000000000000170B                 jmp     sub_1470
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001710 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001710                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001710 ___cxa_atexit   endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    29h ; ')'
.plt:000000000000171B                 jmp     sub_1470
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int getpagesize(void)
.plt:0000000000001720 _getpagesize    proc near               ; CODE XREF: main+33↓p
.plt:0000000000001720                 jmp     cs:getpagesize_ptr
.plt:0000000000001720 _getpagesize    endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    2Ah ; '*'
.plt:000000000000172B                 jmp     sub_1470
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: noreturn thunk
.plt:0000000000001730
.plt:0000000000001730 ; void __noreturn exit(int status)
.plt:0000000000001730 _exit           proc near               ; CODE XREF: main+194↓p
.plt:0000000000001730                                         ; usage+58↓p
.plt:0000000000001730                 jmp     cs:exit_ptr
.plt:0000000000001730 _exit           endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    2Bh ; '+'
.plt:000000000000173B                 jmp     sub_1470
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001740 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001740                 jmp     cs:fwrite_ptr
.plt:0000000000001740 _fwrite         endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    2Ch ; ','
.plt:000000000000174B                 jmp     sub_1470
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001750                                         ; version_etc_arn+37↓p ...
.plt:0000000000001750                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001750 ___fprintf_chk  endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    2Dh ; '-'
.plt:000000000000175B                 jmp     sub_1470
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001760 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001760                 jmp     cs:mbsinit_ptr
.plt:0000000000001760 _mbsinit        endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    2Eh ; '.'
.plt:000000000000176B                 jmp     sub_1470
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; int iswprint(wint_t wc)
.plt:0000000000001770 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001770                 jmp     cs:iswprint_ptr
.plt:0000000000001770 _iswprint       endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    2Fh ; '/'
.plt:000000000000177B                 jmp     sub_1470
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001780 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001780                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001780 ___ctype_b_loc  endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    30h ; '0'
.plt:000000000000178B                 jmp     sub_1470
.plt:000000000000178B ; } // starts at 1470
.plt:000000000000178B _plt            ends
.plt:000000000000178B
.plt.got:0000000000001790 ; ===========================================================================
.plt.got:0000000000001790
.plt.got:0000000000001790 ; Segment type: Pure code
.plt.got:0000000000001790 ; Segment permissions: Read/Execute
.plt.got:0000000000001790 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001790                 assume cs:_plt_got
.plt.got:0000000000001790                 ;org 1790h
.plt.got:0000000000001790                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001790
.plt.got:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001790
.plt.got:0000000000001790 ; Attributes: thunk
.plt.got:0000000000001790
.plt.got:0000000000001790 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001790 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001790 ; __unwind {
.plt.got:0000000000001790                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001790 __cxa_finalize  endp
.plt.got:0000000000001790
.plt.got:0000000000001790 ; ---------------------------------------------------------------------------
.plt.got:0000000000001796                 align 8
.plt.got:0000000000001796 ; } // starts at 1790
.plt.got:0000000000001796 _plt_got        ends
.plt.got:0000000000001796
LOAD:0000000000001798 ; ===========================================================================
LOAD:0000000000001798
LOAD:0000000000001798 ; Segment type: Pure code
LOAD:0000000000001798 ; Segment permissions: Read/Execute
LOAD:0000000000001798 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001798                 assume cs:LOAD
LOAD:0000000000001798                 ;org 1798h
LOAD:0000000000001798                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001798                 align 20h
LOAD:0000000000001798 LOAD            ends
LOAD:0000000000001798
.text:00000000000017A0 ; ===========================================================================
.text:00000000000017A0
.text:00000000000017A0 ; Segment type: Pure code
.text:00000000000017A0 ; Segment permissions: Read/Execute
.text:00000000000017A0 _text           segment para public 'CODE' use64
.text:00000000000017A0                 assume cs:_text
.text:00000000000017A0                 ;org 17A0h
.text:00000000000017A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000017A0
.text:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017A0
.text:00000000000017A0
.text:00000000000017A0 write_pending_part_6 proc near          ; CODE XREF: main:loc_1F11↓p
.text:00000000000017A0 ; __unwind {
.text:00000000000017A0                 push    rbx
.text:00000000000017A1                 lea     rsi, msgid      ; "write error"
.text:00000000000017A8                 mov     edx, 5          ; category
.text:00000000000017AD                 xor     edi, edi        ; domainname
.text:00000000000017AF                 call    _dcgettext
.text:00000000000017B4                 mov     rbx, rax
.text:00000000000017B7                 call    ___errno_location
.text:00000000000017BC                 mov     esi, [rax]      ; errnum
.text:00000000000017BE                 mov     rdx, rbx        ; format
.text:00000000000017C1                 mov     edi, 1          ; status
.text:00000000000017C6                 xor     eax, eax
.text:00000000000017C8                 call    _error
.text:00000000000017C8 ; } // starts at 17A0
.text:00000000000017CD                 nop     dword ptr [rax]
.text:00000000000017CD write_pending_part_6 endp ; sp-analysis failed
.text:00000000000017CD
.text:00000000000017D0
.text:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017D0
.text:00000000000017D0
.text:00000000000017D0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000017D0                 public main
.text:00000000000017D0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000017D0
.text:00000000000017D0 var_184         = dword ptr -184h
.text:00000000000017D0 var_180         = qword ptr -180h
.text:00000000000017D0 var_178         = qword ptr -178h
.text:00000000000017D0 buf             = qword ptr -170h
.text:00000000000017D0 dest            = qword ptr -168h
.text:00000000000017D0 var_160         = qword ptr -160h
.text:00000000000017D0 var_158         = dword ptr -158h
.text:00000000000017D0 var_152         = byte ptr -152h
.text:00000000000017D0 var_151         = byte ptr -151h
.text:00000000000017D0 nbytes          = qword ptr -150h
.text:00000000000017D0 var_148         = qword ptr -148h
.text:00000000000017D0 argv            = qword ptr -140h
.text:00000000000017D0 argc            = dword ptr -138h
.text:00000000000017D0 var_134         = byte ptr -134h
.text:00000000000017D0 var_133         = byte ptr -133h
.text:00000000000017D0 var_132         = byte ptr -132h
.text:00000000000017D0 var_131         = byte ptr -131h
.text:00000000000017D0 var_130         = qword ptr -130h
.text:00000000000017D0 var_128         = qword ptr -128h
.text:00000000000017D0 var_120         = qword ptr -120h
.text:00000000000017D0 var_118         = qword ptr -118h
.text:00000000000017D0 ptr             = qword ptr -110h
.text:00000000000017D0 var_108         = qword ptr -108h
.text:00000000000017D0 var_100         = dword ptr -100h
.text:00000000000017D0 var_FC          = byte ptr -0FCh
.text:00000000000017D0 var_FB          = byte ptr -0FBh
.text:00000000000017D0 var_FA          = byte ptr -0FAh
.text:00000000000017D0 var_F9          = byte ptr -0F9h
.text:00000000000017D0 var_F8          = qword ptr -0F8h
.text:00000000000017D0 var_F0          = qword ptr -0F0h
.text:00000000000017D0 var_DC          = dword ptr -0DCh
.text:00000000000017D0 stat_buf        = stat ptr -0D8h
.text:00000000000017D0 var_40          = qword ptr -40h
.text:00000000000017D0
.text:00000000000017D0 ; __unwind {
.text:00000000000017D0                 push    r15
.text:00000000000017D2                 push    r14
.text:00000000000017D4                 mov     r14, rsi
.text:00000000000017D7                 push    r13
.text:00000000000017D9                 push    r12
.text:00000000000017DB                 xor     r12d, r12d
.text:00000000000017DE                 push    rbp
.text:00000000000017DF                 push    rbx
.text:00000000000017E0                 sub     rsp, 158h
.text:00000000000017E7                 mov     [rsp+188h+argv], rsi
.text:00000000000017EC                 mov     [rsp+188h+argc], edi
.text:00000000000017F0                 mov     rax, fs:28h
.text:00000000000017F9                 mov     [rsp+188h+var_40], rax
.text:0000000000001801                 xor     eax, eax
.text:0000000000001803                 call    _getpagesize
.text:0000000000001808                 mov     rdi, [r14]
.text:000000000000180B                 mov     ebx, eax
.text:000000000000180D                 call    set_program_name
.text:0000000000001812                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001819                 mov     edi, 6          ; category
.text:000000000000181E                 call    _setlocale
.text:0000000000001823                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000182A                 lea     rdi, domainname ; "coreutils"
.text:0000000000001831                 call    _bindtextdomain
.text:0000000000001836                 lea     rdi, domainname ; "coreutils"
.text:000000000000183D                 call    _textdomain
.text:0000000000001842                 lea     rdi, close_stdout
.text:0000000000001849                 call    atexit
.text:000000000000184E                 mov     [rsp+188h+var_152], 0
.text:0000000000001853                 mov     [rsp+188h+var_133], 0
.text:0000000000001858                 mov     [rsp+188h+var_132], 0
.text:000000000000185D                 mov     [rsp+188h+var_FB], 0
.text:0000000000001865                 mov     [rsp+188h+var_151], 0
.text:000000000000186A                 nop     word ptr [rax+rax+00h]
.text:0000000000001870
.text:0000000000001870 loc_1870:                               ; CODE XREF: main+DD↓j
.text:0000000000001870                                         ; main+F3↓j ...
.text:0000000000001870                 mov     rsi, [rsp+188h+argv] ; argv
.text:0000000000001875                 mov     edi, [rsp+188h+argc] ; argc
.text:0000000000001879                 lea     rcx, long_options_7050 ; longopts
.text:0000000000001880                 lea     rdx, shortopts  ; "benstuvAET"
.text:0000000000001887                 xor     r8d, r8d        ; longind
.text:000000000000188A                 call    _getopt_long
.text:000000000000188F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001892                 jz      loc_1983
.text:0000000000001898                 cmp     eax, 62h ; 'b'
.text:000000000000189B                 jz      loc_1969
.text:00000000000018A1                 jle     short loc_18C8
.text:00000000000018A3                 cmp     eax, 73h ; 's'
.text:00000000000018A6                 jz      short loc_1912
.text:00000000000018A8                 jle     short loc_18FA
.text:00000000000018AA                 cmp     eax, 75h ; 'u'
.text:00000000000018AD                 jz      short loc_1870
.text:00000000000018AF                 jl      loc_1973
.text:00000000000018B5                 cmp     eax, 76h ; 'v'
.text:00000000000018B8                 jnz     loc_23A0
.text:00000000000018BE                 mov     [rsp+188h+var_152], 1
.text:00000000000018C3                 jmp     short loc_1870
.text:00000000000018C3 ; ---------------------------------------------------------------------------
.text:00000000000018C5                 align 8
.text:00000000000018C8
.text:00000000000018C8 loc_18C8:                               ; CODE XREF: main+D1↑j
.text:00000000000018C8                 cmp     eax, 41h ; 'A'
.text:00000000000018CB                 jz      short loc_18E5
.text:00000000000018CD                 jle     short loc_191C
.text:00000000000018CF                 cmp     eax, 45h ; 'E'
.text:00000000000018D2                 jz      short loc_18F0
.text:00000000000018D4                 cmp     eax, 54h ; 'T'
.text:00000000000018D7                 jnz     loc_23A0
.text:00000000000018DD                 mov     r12d, 1
.text:00000000000018E3                 jmp     short loc_1870
.text:00000000000018E5 ; ---------------------------------------------------------------------------
.text:00000000000018E5
.text:00000000000018E5 loc_18E5:                               ; CODE XREF: main+FB↑j
.text:00000000000018E5                 mov     r12d, 1
.text:00000000000018EB
.text:00000000000018EB loc_18EB:                               ; CODE XREF: main+12D↓j
.text:00000000000018EB                 mov     [rsp+188h+var_152], 1
.text:00000000000018F0
.text:00000000000018F0 loc_18F0:                               ; CODE XREF: main+102↑j
.text:00000000000018F0                 mov     [rsp+188h+var_133], 1
.text:00000000000018F5                 jmp     loc_1870
.text:00000000000018FA ; ---------------------------------------------------------------------------
.text:00000000000018FA
.text:00000000000018FA loc_18FA:                               ; CODE XREF: main+D8↑j
.text:00000000000018FA                 cmp     eax, 65h ; 'e'
.text:00000000000018FD                 jz      short loc_18EB
.text:00000000000018FF                 cmp     eax, 6Eh ; 'n'
.text:0000000000001902                 jnz     loc_23A0
.text:0000000000001908
.text:0000000000001908 loc_1908:                               ; CODE XREF: main+1A1↓j
.text:0000000000001908                 mov     [rsp+188h+var_151], 1
.text:000000000000190D                 jmp     loc_1870
.text:0000000000001912 ; ---------------------------------------------------------------------------
.text:0000000000001912
.text:0000000000001912 loc_1912:                               ; CODE XREF: main+D6↑j
.text:0000000000001912                 mov     [rsp+188h+var_132], 1
.text:0000000000001917                 jmp     loc_1870
.text:000000000000191C ; ---------------------------------------------------------------------------
.text:000000000000191C
.text:000000000000191C loc_191C:                               ; CODE XREF: main+FD↑j
.text:000000000000191C                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001921                 mov     [rsp+188h+var_158], eax
.text:0000000000001925                 jnz     loc_2366
.text:000000000000192B                 sub     rsp, 8
.text:000000000000192F                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001936                 mov     rcx, cs:Version
.text:000000000000193D                 push    0
.text:000000000000193F                 lea     r9, aRichardMStallm ; "Richard M. Stallman"
.text:0000000000001946                 lea     r8, aTorbjornGranlu ; "Torbjorn Granlund"
.text:000000000000194D                 lea     rdx, unk_558A
.text:0000000000001954                 lea     rsi, aCat       ; "cat"
.text:000000000000195B                 xor     eax, eax
.text:000000000000195D                 call    version_etc
.text:0000000000001962                 xor     edi, edi        ; status
.text:0000000000001964                 call    _exit
.text:0000000000001969 ; ---------------------------------------------------------------------------
.text:0000000000001969
.text:0000000000001969 loc_1969:                               ; CODE XREF: main+CB↑j
.text:0000000000001969                 mov     [rsp+188h+var_FB], 1
.text:0000000000001971                 jmp     short loc_1908
.text:0000000000001973 ; ---------------------------------------------------------------------------
.text:0000000000001973
.text:0000000000001973 loc_1973:                               ; CODE XREF: main+DF↑j
.text:0000000000001973                 mov     r12d, 1
.text:0000000000001979                 mov     [rsp+188h+var_152], 1
.text:000000000000197E                 jmp     loc_1870
.text:0000000000001983 ; ---------------------------------------------------------------------------
.text:0000000000001983
.text:0000000000001983 loc_1983:                               ; CODE XREF: main+C2↑j
.text:0000000000001983                 mov     [rsp+188h+var_158], eax
.text:0000000000001987                 lea     rax, [rsp+188h+stat_buf]
.text:000000000000198F                 mov     esi, 1          ; fildes
.text:0000000000001994                 mov     edi, 1          ; ver
.text:0000000000001999                 mov     rdx, rax        ; stat_buf
.text:000000000000199C                 mov     [rsp+188h+var_108], rax
.text:00000000000019A4                 call    ___fxstat
.text:00000000000019A9                 test    eax, eax
.text:00000000000019AB                 js      loc_23AF
.text:00000000000019B1                 mov     r15, [rsp+188h+stat_buf.st_blksize]
.text:00000000000019B9                 mov     rax, 1FFFFFFFFFFE0000h
.text:00000000000019C3                 movsxd  rcx, cs:optind@@GLIBC_2_2_5
.text:00000000000019CA                 mov     [rsp+188h+var_FA], 0
.text:00000000000019D2                 mov     [rsp+188h+var_FC], 1
.text:00000000000019DA                 lea     rdx, [r15-20000h]
.text:00000000000019E1                 mov     [rsp+188h+var_130], rcx
.text:00000000000019E6                 cmp     rdx, rax
.text:00000000000019E9                 mov     eax, 20000h
.text:00000000000019EE                 cmova   r15, rax
.text:00000000000019F2                 movsxd  rax, ebx
.text:00000000000019F5                 mov     [rsp+188h+var_120], rax
.text:00000000000019FA                 mov     rax, [rsp+188h+stat_buf.st_dev]
.text:0000000000001A02                 mov     [rsp+188h+var_F8], rax
.text:0000000000001A0A                 mov     rax, [rsp+188h+stat_buf.st_ino]
.text:0000000000001A12                 mov     [rsp+188h+var_F0], rax
.text:0000000000001A1A                 mov     eax, [rsp+188h+stat_buf.st_mode]
.text:0000000000001A21                 and     eax, 0F000h
.text:0000000000001A26                 mov     [rsp+188h+var_100], eax
.text:0000000000001A2D                 movzx   eax, [rsp+188h+var_151]
.text:0000000000001A32                 or      al, [rsp+188h+var_133]
.text:0000000000001A36                 cmp     [rsp+188h+argc], ecx
.text:0000000000001A3A                 mov     [rsp+188h+var_F9], al
.text:0000000000001A41                 lea     rax, aLt+2      ; "-"
.text:0000000000001A48                 mov     cs:infile, rax
.text:0000000000001A4F                 jle     loc_22FA
.text:0000000000001A55
.text:0000000000001A55 loc_1A55:                               ; CODE XREF: main+7EC↓j
.text:0000000000001A55                 mov     rax, [rsp+188h+argv]
.text:0000000000001A5A                 mov     rcx, [rsp+188h+var_130]
.text:0000000000001A5F                 mov     rax, [rax+rcx*8]
.text:0000000000001A63                 mov     cs:infile, rax
.text:0000000000001A6A
.text:0000000000001A6A loc_1A6A:                               ; CODE XREF: main+B31↓j
.text:0000000000001A6A                 lea     rdi, aLt+2      ; "-"
.text:0000000000001A71                 mov     ecx, 2
.text:0000000000001A76                 mov     rsi, rax
.text:0000000000001A79                 repe cmpsb
.text:0000000000001A7B                 setnbe  bl
.text:0000000000001A7E                 sbb     bl, 0
.text:0000000000001A81                 movsx   ebx, bl
.text:0000000000001A84                 test    ebx, ebx
.text:0000000000001A86                 jnz     loc_1F59
.text:0000000000001A8C                 mov     cs:input_desc, 0
.text:0000000000001A96                 mov     [rsp+188h+var_FA], 1
.text:0000000000001A9E
.text:0000000000001A9E loc_1A9E:                               ; CODE XREF: main+79F↓j
.text:0000000000001A9E                 mov     rdx, [rsp+188h+var_108] ; stat_buf
.text:0000000000001AA6                 mov     esi, ebx        ; fildes
.text:0000000000001AA8                 mov     edi, 1          ; ver
.text:0000000000001AAD                 call    ___fxstat
.text:0000000000001AB2                 test    eax, eax
.text:0000000000001AB4                 js      loc_2167
.text:0000000000001ABA                 mov     rcx, [rsp+188h+stat_buf.st_blksize]
.text:0000000000001AC2                 mov     rax, 1FFFFFFFFFFE0000h
.text:0000000000001ACC                 mov     edi, ebx        ; fd
.text:0000000000001ACE                 lea     rdx, [rcx-20000h]
.text:0000000000001AD5                 cmp     rdx, rax
.text:0000000000001AD8                 mov     eax, 20000h
.text:0000000000001ADD                 cmovbe  rax, rcx
.text:0000000000001AE1                 xor     edx, edx        ; len
.text:0000000000001AE3                 xor     esi, esi        ; offset
.text:0000000000001AE5                 mov     ecx, 2          ; advise
.text:0000000000001AEA                 mov     [rsp+188h+nbytes], rax
.text:0000000000001AEF                 call    fdadvise
.text:0000000000001AF4                 cmp     [rsp+188h+var_100], 8000h
.text:0000000000001AFF                 jz      loc_20D4
.text:0000000000001B05
.text:0000000000001B05 loc_1B05:                               ; CODE XREF: main+914↓j
.text:0000000000001B05                                         ; main+92A↓j ...
.text:0000000000001B05                 cmp     [rsp+188h+var_F9], 0
.text:0000000000001B0D                 mov     rax, [rsp+188h+var_120]
.text:0000000000001B12                 lea     r14, [rax-1]
.text:0000000000001B16                 jnz     short loc_1B2C
.text:0000000000001B18                 movzx   r13d, [rsp+188h+var_152]
.text:0000000000001B1E                 or      r13d, r12d
.text:0000000000001B21                 or      r13b, [rsp+188h+var_132]
.text:0000000000001B26                 jz      loc_221F
.text:0000000000001B2C
.text:0000000000001B2C loc_1B2C:                               ; CODE XREF: main+346↑j
.text:0000000000001B2C                 mov     rbx, [rsp+188h+var_120]
.text:0000000000001B31                 mov     rbp, [rsp+188h+nbytes]
.text:0000000000001B36                 mov     rdi, rbx
.text:0000000000001B39                 add     rdi, rbp
.text:0000000000001B3C                 call    xmalloc
.text:0000000000001B41                 mov     r13, rax
.text:0000000000001B44                 mov     [rsp+188h+var_118], rax
.text:0000000000001B49                 lea     rax, [rbx+r15+12h]
.text:0000000000001B4E                 lea     rdi, [rax+rbp*4]
.text:0000000000001B52                 call    xmalloc
.text:0000000000001B57                 mov     rcx, rax
.text:0000000000001B5A                 mov     [rsp+188h+ptr], rax
.text:0000000000001B5F                 xor     edx, edx
.text:0000000000001B61                 add     rcx, r14
.text:0000000000001B64                 add     r14, r13
.text:0000000000001B67                 mov     esi, cs:newlines2
.text:0000000000001B6D                 mov     rax, rcx
.text:0000000000001B70                 mov     r13d, r12d
.text:0000000000001B73                 mov     [rsp+188h+var_134], 1
.text:0000000000001B78                 div     rbx
.text:0000000000001B7B                 mov     rax, r14
.text:0000000000001B7E                 mov     [rsp+188h+var_184], esi
.text:0000000000001B82                 xor     r13d, 1
.text:0000000000001B86                 sub     rcx, rdx
.text:0000000000001B89                 xor     edx, edx
.text:0000000000001B8B                 div     rbx
.text:0000000000001B8E                 mov     rax, r14
.text:0000000000001B91                 lea     rsi, [rcx+r15]
.text:0000000000001B95                 mov     r14, r15
.text:0000000000001B98                 mov     [rsp+188h+dest], rcx
.text:0000000000001B9D                 mov     r15, rcx
.text:0000000000001BA0                 mov     [rsp+188h+var_178], rsi
.text:0000000000001BA5                 sub     rax, rdx
.text:0000000000001BA8                 lea     rbx, [rax+1]
.text:0000000000001BAC                 mov     [rsp+188h+buf], rax
.text:0000000000001BB1                 mov     [rsp+188h+var_180], rax
.text:0000000000001BB6                 movzx   eax, [rsp+188h+var_FB]
.text:0000000000001BBE                 mov     [rsp+188h+var_148], rbx
.text:0000000000001BC3                 xor     eax, 1
.text:0000000000001BC6                 mov     [rsp+188h+var_131], al
.text:0000000000001BCA                 lea     rax, [rsp+188h+var_DC]
.text:0000000000001BD2                 mov     [rsp+188h+var_128], rax
.text:0000000000001BD7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001BE0
.text:0000000000001BE0 loc_1BE0:                               ; CODE XREF: main+493↓j
.text:0000000000001BE0                 cmp     [rsp+188h+var_178], r15
.text:0000000000001BE5                 jbe     loc_1DA3
.text:0000000000001BEB
.text:0000000000001BEB loc_1BEB:                               ; CODE XREF: main+5CD↓j
.text:0000000000001BEB                 cmp     rbx, [rsp+188h+var_180]
.text:0000000000001BF0                 jbe     loc_1E03
.text:0000000000001BF6
.text:0000000000001BF6 loc_1BF6:                               ; CODE XREF: main+62D↓j
.text:0000000000001BF6                 cmp     [rsp+188h+var_134], 0
.text:0000000000001BFB                 mov     [rsp+188h+var_DC], 0
.text:0000000000001C06                 jnz     loc_1EB0
.text:0000000000001C0C
.text:0000000000001C0C loc_1C0C:                               ; CODE XREF: main+70E↓j
.text:0000000000001C0C                 mov     rbx, r15
.text:0000000000001C0F                 sub     rbx, [rsp+188h+dest]
.text:0000000000001C14                 jnz     loc_1EF3
.text:0000000000001C1A
.text:0000000000001C1A loc_1C1A:                               ; CODE XREF: main+73B↓j
.text:0000000000001C1A                 mov     ebx, cs:input_desc
.text:0000000000001C20
.text:0000000000001C20 loc_1C20:                               ; CODE XREF: main+708↓j
.text:0000000000001C20                 mov     rdx, [rsp+188h+nbytes] ; nbytes
.text:0000000000001C25                 mov     rsi, [rsp+188h+buf] ; buf
.text:0000000000001C2A                 mov     edi, ebx        ; fd
.text:0000000000001C2C                 call    safe_read
.text:0000000000001C31                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000001C35                 jz      loc_2007
.text:0000000000001C3B                 test    rax, rax
.text:0000000000001C3E                 jz      loc_20AE
.text:0000000000001C44                 mov     rdi, [rsp+188h+buf]
.text:0000000000001C49                 mov     rbx, [rsp+188h+var_148]
.text:0000000000001C4E                 add     rax, rdi
.text:0000000000001C51                 mov     [rsp+188h+var_180], rax
.text:0000000000001C56                 mov     byte ptr [rax], 0Ah
.text:0000000000001C59                 mov     rax, rdi
.text:0000000000001C5C
.text:0000000000001C5C loc_1C5C:                               ; CODE XREF: main+6AC↓j
.text:0000000000001C5C                 movzx   ebp, byte ptr [rax]
.text:0000000000001C5F
.text:0000000000001C5F loc_1C5F:                               ; CODE XREF: main+71E↓j
.text:0000000000001C5F                 cmp     bpl, 0Ah
.text:0000000000001C63                 jz      loc_1BE0
.text:0000000000001C69                 mov     edi, [rsp+188h+var_184]
.text:0000000000001C6D                 test    edi, edi
.text:0000000000001C6F                 js      short loc_1C8F
.text:0000000000001C71                 cmp     [rsp+188h+var_151], 0
.text:0000000000001C76                 jz      short loc_1C8F
.text:0000000000001C78                 call    next_line_num
.text:0000000000001C7D                 mov     rsi, cs:line_num_print ; src
.text:0000000000001C84                 mov     rdi, r15        ; dest
.text:0000000000001C87                 call    _stpcpy
.text:0000000000001C8C                 mov     r15, rax
.text:0000000000001C8F
.text:0000000000001C8F loc_1C8F:                               ; CODE XREF: main+49F↑j
.text:0000000000001C8F                                         ; main+4A6↑j
.text:0000000000001C8F                 cmp     [rsp+188h+var_152], 0
.text:0000000000001C94                 jz      short loc_1CBB
.text:0000000000001C96                 jmp     short loc_1CED
.text:0000000000001C96 ; ---------------------------------------------------------------------------
.text:0000000000001C98                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: main+4EF↓j
.text:0000000000001CA0                 test    r12b, r12b
.text:0000000000001CA3                 jz      short loc_1CC1
.text:0000000000001CA5                 mov     eax, 495Eh
.text:0000000000001CAA                 add     r15, 2
.text:0000000000001CAE                 mov     [r15-2], ax
.text:0000000000001CB3
.text:0000000000001CB3 loc_1CB3:                               ; CODE XREF: main+502↓j
.text:0000000000001CB3                 add     rbx, 1
.text:0000000000001CB7                 movzx   ebp, byte ptr [rbx-1]
.text:0000000000001CBB
.text:0000000000001CBB loc_1CBB:                               ; CODE XREF: main+4C4↑j
.text:0000000000001CBB                 cmp     bpl, 9
.text:0000000000001CBF                 jz      short loc_1CA0
.text:0000000000001CC1
.text:0000000000001CC1 loc_1CC1:                               ; CODE XREF: main+4D3↑j
.text:0000000000001CC1                 cmp     bpl, 0Ah
.text:0000000000001CC5                 jz      loc_1D90
.text:0000000000001CCB                 mov     [r15], bpl
.text:0000000000001CCE                 add     r15, 1
.text:0000000000001CD2                 jmp     short loc_1CB3
.text:0000000000001CD2 ; ---------------------------------------------------------------------------
.text:0000000000001CD4                 align 8
.text:0000000000001CD8
.text:0000000000001CD8 loc_1CD8:                               ; CODE XREF: main+521↓j
.text:0000000000001CD8                 cmp     bpl, 7Eh ; '~'
.text:0000000000001CDC                 ja      short loc_1D10
.text:0000000000001CDE                 mov     [r15], bpl
.text:0000000000001CE1                 add     r15, 1
.text:0000000000001CE5
.text:0000000000001CE5 loc_1CE5:                               ; CODE XREF: main+536↓j
.text:0000000000001CE5                                         ; main+56A↓j ...
.text:0000000000001CE5                 add     rbx, 1
.text:0000000000001CE9                 movzx   ebp, byte ptr [rbx-1]
.text:0000000000001CED
.text:0000000000001CED loc_1CED:                               ; CODE XREF: main+4C6↑j
.text:0000000000001CED                 cmp     bpl, 1Fh
.text:0000000000001CF1                 ja      short loc_1CD8
.text:0000000000001CF3                 cmp     bpl, 9
.text:0000000000001CF7                 jnz     short loc_1D40
.text:0000000000001CF9                 test    r13b, r13b
.text:0000000000001CFC                 jz      short loc_1D40
.text:0000000000001CFE                 mov     byte ptr [r15], 9
.text:0000000000001D02                 add     r15, 1
.text:0000000000001D06                 jmp     short loc_1CE5
.text:0000000000001D06 ; ---------------------------------------------------------------------------
.text:0000000000001D08                 align 10h
.text:0000000000001D10
.text:0000000000001D10 loc_1D10:                               ; CODE XREF: main+50C↑j
.text:0000000000001D10                 cmp     bpl, 7Fh
.text:0000000000001D14                 jz      short loc_1D60
.text:0000000000001D16                 mov     ecx, 2D4Dh
.text:0000000000001D1B                 cmp     bpl, 9Fh
.text:0000000000001D1F                 mov     [r15], cx
.text:0000000000001D23                 jbe     short loc_1D78
.text:0000000000001D25                 cmp     bpl, 0FFh
.text:0000000000001D29                 jz      loc_1E88
.text:0000000000001D2F                 add     ebp, 0FFFFFF80h
.text:0000000000001D32                 add     r15, 3
.text:0000000000001D36                 mov     [r15-1], bpl
.text:0000000000001D3A                 jmp     short loc_1CE5
.text:0000000000001D3A ; ---------------------------------------------------------------------------
.text:0000000000001D3C                 align 20h
.text:0000000000001D40
.text:0000000000001D40 loc_1D40:                               ; CODE XREF: main+527↑j
.text:0000000000001D40                                         ; main+52C↑j
.text:0000000000001D40                 cmp     bpl, 0Ah
.text:0000000000001D44                 jz      short loc_1D90
.text:0000000000001D46                 add     ebp, 40h ; '@'
.text:0000000000001D49                 mov     byte ptr [r15], 5Eh ; '^'
.text:0000000000001D4D                 add     r15, 2
.text:0000000000001D51                 mov     [r15-1], bpl
.text:0000000000001D55                 jmp     short loc_1CE5
.text:0000000000001D55 ; ---------------------------------------------------------------------------
.text:0000000000001D57                 align 20h
.text:0000000000001D60
.text:0000000000001D60 loc_1D60:                               ; CODE XREF: main+544↑j
.text:0000000000001D60                 mov     esi, 3F5Eh
.text:0000000000001D65                 add     r15, 2
.text:0000000000001D69                 mov     [r15-2], si
.text:0000000000001D6E                 jmp     loc_1CE5
.text:0000000000001D6E ; ---------------------------------------------------------------------------
.text:0000000000001D73                 align 8
.text:0000000000001D78
.text:0000000000001D78 loc_1D78:                               ; CODE XREF: main+553↑j
.text:0000000000001D78                 sub     ebp, 40h ; '@'
.text:0000000000001D7B                 mov     byte ptr [r15+2], 5Eh ; '^'
.text:0000000000001D80                 add     r15, 4
.text:0000000000001D84                 mov     [r15-1], bpl
.text:0000000000001D88                 jmp     loc_1CE5
.text:0000000000001D88 ; ---------------------------------------------------------------------------
.text:0000000000001D8D                 align 10h
.text:0000000000001D90
.text:0000000000001D90 loc_1D90:                               ; CODE XREF: main+4F5↑j
.text:0000000000001D90                                         ; main+574↑j
.text:0000000000001D90                 cmp     [rsp+188h+var_178], r15
.text:0000000000001D95                 mov     eax, [rsp+188h+var_158]
.text:0000000000001D99                 mov     [rsp+188h+var_184], eax
.text:0000000000001D9D                 ja      loc_1BEB
.text:0000000000001DA3
.text:0000000000001DA3 loc_1DA3:                               ; CODE XREF: main+415↑j
.text:0000000000001DA3                 mov     rbp, [rsp+188h+dest]
.text:0000000000001DA8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000001DB0
.text:0000000000001DB0 loc_1DB0:                               ; CODE XREF: main+605↓j
.text:0000000000001DB0                 mov     rdx, r14        ; n
.text:0000000000001DB3                 mov     rsi, rbp        ; buf
.text:0000000000001DB6                 mov     edi, 1          ; fd
.text:0000000000001DBB                 call    full_write
.text:0000000000001DC0                 cmp     r14, rax
.text:0000000000001DC3                 jnz     loc_22CE
.text:0000000000001DC9                 add     rbp, r14
.text:0000000000001DCC                 mov     r9, r15
.text:0000000000001DCF                 sub     r9, rbp
.text:0000000000001DD2                 cmp     r14, r9
.text:0000000000001DD5                 jbe     short loc_1DB0
.text:0000000000001DD7                 mov     r15, [rsp+188h+dest]
.text:0000000000001DDC                 mov     rdx, r9         ; n
.text:0000000000001DDF                 mov     rsi, rbp        ; src
.text:0000000000001DE2                 mov     [rsp+188h+var_160], r9
.text:0000000000001DE7                 mov     rdi, r15        ; dest
.text:0000000000001DEA                 call    _memmove
.text:0000000000001DEF                 cmp     rbx, [rsp+188h+var_180]
.text:0000000000001DF4                 mov     r9, [rsp+188h+var_160]
.text:0000000000001DF9                 lea     r15, [r15+r9]
.text:0000000000001DFD                 ja      loc_1BF6
.text:0000000000001E03
.text:0000000000001E03 loc_1E03:                               ; CODE XREF: main+420↑j
.text:0000000000001E03                 add     [rsp+188h+var_184], 1
.text:0000000000001E08                 lea     rdx, [rbx+1]
.text:0000000000001E0C                 mov     eax, [rsp+188h+var_184]
.text:0000000000001E10                 test    eax, eax
.text:0000000000001E12                 jle     short loc_1E60
.text:0000000000001E14                 cmp     eax, 1
.text:0000000000001E17                 jz      short loc_1E2C
.text:0000000000001E19                 cmp     [rsp+188h+var_132], 0
.text:0000000000001E1E                 mov     [rsp+188h+var_184], 2
.text:0000000000001E26                 jnz     loc_1EE8
.text:0000000000001E2C
.text:0000000000001E2C loc_1E2C:                               ; CODE XREF: main+647↑j
.text:0000000000001E2C                 cmp     [rsp+188h+var_131], 0
.text:0000000000001E31                 jz      short loc_1E60
.text:0000000000001E33                 cmp     [rsp+188h+var_151], 0
.text:0000000000001E38                 jz      short loc_1E60
.text:0000000000001E3A                 mov     [rsp+188h+var_160], rdx
.text:0000000000001E3F                 call    next_line_num
.text:0000000000001E44                 mov     rsi, cs:line_num_print ; src
.text:0000000000001E4B                 mov     rdi, r15        ; dest
.text:0000000000001E4E                 call    _stpcpy
.text:0000000000001E53                 mov     rdx, [rsp+188h+var_160]
.text:0000000000001E58                 mov     r15, rax
.text:0000000000001E5B                 nop     dword ptr [rax+rax+00h]
.text:0000000000001E60
.text:0000000000001E60 loc_1E60:                               ; CODE XREF: main+642↑j
.text:0000000000001E60                                         ; main+661↑j ...
.text:0000000000001E60                 cmp     [rsp+188h+var_133], 0
.text:0000000000001E65                 lea     rax, [r15+1]
.text:0000000000001E69                 jz      short loc_1EA0
.text:0000000000001E6B                 mov     byte ptr [r15], 24h ; '$'
.text:0000000000001E6F                 add     r15, 2
.text:0000000000001E73
.text:0000000000001E73 loc_1E73:                               ; CODE XREF: main+6D9↓j
.text:0000000000001E73                 mov     byte ptr [rax], 0Ah
.text:0000000000001E76                 mov     rax, rbx
.text:0000000000001E79                 mov     rbx, rdx
.text:0000000000001E7C                 jmp     loc_1C5C
.text:0000000000001E7C ; ---------------------------------------------------------------------------
.text:0000000000001E81                 align 8
.text:0000000000001E88
.text:0000000000001E88 loc_1E88:                               ; CODE XREF: main+559↑j
.text:0000000000001E88                 mov     edx, 3F5Eh
.text:0000000000001E8D                 add     r15, 4
.text:0000000000001E91                 mov     [r15-2], dx
.text:0000000000001E96                 jmp     loc_1CE5
.text:0000000000001E96 ; ---------------------------------------------------------------------------
.text:0000000000001E9B                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: main+699↑j
.text:0000000000001EA0                 mov     rsi, rax
.text:0000000000001EA3                 mov     rax, r15
.text:0000000000001EA6                 mov     r15, rsi
.text:0000000000001EA9                 jmp     short loc_1E73
.text:0000000000001EA9 ; ---------------------------------------------------------------------------
.text:0000000000001EAB                 align 10h
.text:0000000000001EB0
.text:0000000000001EB0 loc_1EB0:                               ; CODE XREF: main+436↑j
.text:0000000000001EB0                 mov     ebx, cs:input_desc
.text:0000000000001EB6                 mov     rdx, [rsp+188h+var_128]
.text:0000000000001EBB                 xor     eax, eax
.text:0000000000001EBD                 mov     esi, 541Bh      ; request
.text:0000000000001EC2                 mov     edi, ebx        ; fd
.text:0000000000001EC4                 call    _ioctl
.text:0000000000001EC9                 test    eax, eax
.text:0000000000001ECB                 js      short loc_1F20
.text:0000000000001ECD
.text:0000000000001ECD loc_1ECD:                               ; CODE XREF: main+784↓j
.text:0000000000001ECD                 mov     r8d, [rsp+188h+var_DC]
.text:0000000000001ED5                 test    r8d, r8d
.text:0000000000001ED8                 jnz     loc_1C20
.text:0000000000001EDE                 jmp     loc_1C0C
.text:0000000000001EDE ; ---------------------------------------------------------------------------
.text:0000000000001EE3                 align 8
.text:0000000000001EE8
.text:0000000000001EE8 loc_1EE8:                               ; CODE XREF: main+656↑j
.text:0000000000001EE8                 movzx   ebp, byte ptr [rbx]
.text:0000000000001EEB                 mov     rbx, rdx
.text:0000000000001EEE                 jmp     loc_1C5F
.text:0000000000001EF3 ; ---------------------------------------------------------------------------
.text:0000000000001EF3
.text:0000000000001EF3 loc_1EF3:                               ; CODE XREF: main+444↑j
.text:0000000000001EF3                 mov     r15, [rsp+188h+dest]
.text:0000000000001EF8                 mov     rdx, rbx        ; n
.text:0000000000001EFB                 mov     edi, 1          ; fd
.text:0000000000001F00                 mov     rsi, r15        ; buf
.text:0000000000001F03                 call    full_write
.text:0000000000001F08                 cmp     rbx, rax
.text:0000000000001F0B                 jz      loc_1C1A
.text:0000000000001F11
.text:0000000000001F11 loc_1F11:                               ; CODE XREF: main+9EF↓j
.text:0000000000001F11                                         ; main+A0F↓j
.text:0000000000001F11                 call    write_pending_part_6
.text:0000000000001F16                 db      2Eh
.text:0000000000001F16                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001F20
.text:0000000000001F20 loc_1F20:                               ; CODE XREF: main+6FB↑j
.text:0000000000001F20                 call    ___errno_location
.text:0000000000001F25                 mov     ecx, [rax]
.text:0000000000001F27                 cmp     ecx, 5Fh ; '_'
.text:0000000000001F2A                 setz    r10b
.text:0000000000001F2E                 cmp     ecx, 26h ; '&'
.text:0000000000001F31                 ja      short loc_1F46
.text:0000000000001F33                 mov     rdx, 4002480000h
.text:0000000000001F3D                 shr     rdx, cl
.text:0000000000001F40                 and     edx, 1
.text:0000000000001F43                 or      r10d, edx
.text:0000000000001F46
.text:0000000000001F46 loc_1F46:                               ; CODE XREF: main+761↑j
.text:0000000000001F46                 test    r10b, r10b
.text:0000000000001F49                 jz      loc_2306
.text:0000000000001F4F                 mov     [rsp+188h+var_134], 0
.text:0000000000001F54                 jmp     loc_1ECD
.text:0000000000001F59 ; ---------------------------------------------------------------------------
.text:0000000000001F59
.text:0000000000001F59 loc_1F59:                               ; CODE XREF: main+2B6↑j
.text:0000000000001F59                 xor     esi, esi        ; oflag
.text:0000000000001F5B                 mov     rdi, rax        ; file
.text:0000000000001F5E                 xor     eax, eax
.text:0000000000001F60                 call    _open
.text:0000000000001F65                 test    eax, eax
.text:0000000000001F67                 mov     ebx, eax
.text:0000000000001F69                 mov     cs:input_desc, eax
.text:0000000000001F6F                 jns     loc_1A9E
.text:0000000000001F75
.text:0000000000001F75 loc_1F75:                               ; CODE XREF: main+8D9↓j
.text:0000000000001F75                 mov     rdx, cs:infile
.text:0000000000001F7C                 mov     esi, 3
.text:0000000000001F81                 xor     edi, edi
.text:0000000000001F83                 call    quotearg_n_style_colon
.text:0000000000001F88                 mov     rbx, rax
.text:0000000000001F8B                 call    ___errno_location
.text:0000000000001F90                 mov     esi, [rax]      ; errnum
.text:0000000000001F92                 lea     rdx, format+4   ; format
.text:0000000000001F99                 mov     rcx, rbx
.text:0000000000001F9C                 xor     edi, edi        ; status
.text:0000000000001F9E                 xor     eax, eax
.text:0000000000001FA0                 call    _error
.text:0000000000001FA5                 mov     [rsp+188h+var_FC], 0
.text:0000000000001FAD
.text:0000000000001FAD loc_1FAD:                               ; CODE XREF: main+8C0↓j
.text:0000000000001FAD                                         ; main+8D3↓j
.text:0000000000001FAD                 add     [rsp+188h+var_130], 1
.text:0000000000001FB3                 mov     rax, [rsp+188h+var_130]
.text:0000000000001FB8                 cmp     [rsp+188h+argc], eax
.text:0000000000001FBC                 jg      loc_1A55
.text:0000000000001FC2                 cmp     [rsp+188h+var_FA], 0
.text:0000000000001FCA                 jnz     loc_21E4
.text:0000000000001FD0
.text:0000000000001FD0 loc_1FD0:                               ; CODE XREF: main+A1D↓j
.text:0000000000001FD0                 movzx   eax, [rsp+188h+var_FC]
.text:0000000000001FD8                 xor     eax, 1
.text:0000000000001FDB                 mov     rcx, [rsp+188h+var_40]
.text:0000000000001FE3                 xor     rcx, fs:28h
.text:0000000000001FEC                 movzx   eax, al
.text:0000000000001FEF                 jnz     loc_23AA
.text:0000000000001FF5                 add     rsp, 158h
.text:0000000000001FFC                 pop     rbx
.text:0000000000001FFD                 pop     rbp
.text:0000000000001FFE                 pop     r12
.text:0000000000002000                 pop     r13
.text:0000000000002002                 pop     r14
.text:0000000000002004                 pop     r15
.text:0000000000002006                 retn
.text:0000000000002007 ; ---------------------------------------------------------------------------
.text:0000000000002007
.text:0000000000002007 loc_2007:                               ; CODE XREF: main+465↑j
.text:0000000000002007                 mov     rdx, cs:infile
.text:000000000000200E                 xor     edi, edi
.text:0000000000002010                 mov     rax, r15
.text:0000000000002013                 mov     esi, 3
.text:0000000000002018                 mov     r15, r14
.text:000000000000201B                 mov     r14, rax
.text:000000000000201E                 call    quotearg_n_style_colon
.text:0000000000002023                 mov     rbx, rax
.text:0000000000002026                 call    ___errno_location
.text:000000000000202B                 mov     esi, [rax]      ; errnum
.text:000000000000202D                 lea     rdx, format+4   ; format
.text:0000000000002034                 xor     edi, edi        ; status
.text:0000000000002036                 xor     eax, eax
.text:0000000000002038                 mov     rcx, rbx
.text:000000000000203B                 call    _error
.text:0000000000002040                 sub     r14, [rsp+188h+dest]
.text:0000000000002045                 jnz     loc_21A4
.text:000000000000204B
.text:000000000000204B loc_204B:                               ; CODE XREF: main+9E9↓j
.text:000000000000204B                 mov     eax, [rsp+188h+var_184]
.text:000000000000204F                 xor     r10d, r10d
.text:0000000000002052                 mov     cs:newlines2, eax
.text:0000000000002058
.text:0000000000002058 loc_2058:                               ; CODE XREF: main+902↓j
.text:0000000000002058                                         ; main+B91↓j
.text:0000000000002058                 mov     rdi, [rsp+188h+ptr] ; ptr
.text:000000000000205D                 and     [rsp+188h+var_FC], r10b
.text:0000000000002065                 call    _free
.text:000000000000206A
.text:000000000000206A loc_206A:                               ; CODE XREF: main+AF1↓j
.text:000000000000206A                 mov     rdi, [rsp+188h+var_118] ; ptr
.text:000000000000206F                 call    _free
.text:0000000000002074
.text:0000000000002074 loc_2074:                               ; CODE XREF: main+992↓j
.text:0000000000002074                                         ; main+9CF↓j
.text:0000000000002074                 mov     rsi, cs:infile
.text:000000000000207B                 lea     rdi, aLt+2      ; "-"
.text:0000000000002082                 mov     ecx, 2
.text:0000000000002087                 repe cmpsb
.text:0000000000002089                 setnbe  al
.text:000000000000208C                 sbb     al, 0
.text:000000000000208E                 test    al, al
.text:0000000000002090                 jz      loc_1FAD
.text:0000000000002096                 mov     edi, cs:input_desc ; fd
.text:000000000000209C                 call    _close
.text:00000000000020A1                 test    eax, eax
.text:00000000000020A3                 jns     loc_1FAD
.text:00000000000020A9                 jmp     loc_1F75
.text:00000000000020AE ; ---------------------------------------------------------------------------
.text:00000000000020AE
.text:00000000000020AE loc_20AE:                               ; CODE XREF: main+46E↑j
.text:00000000000020AE                 mov     rax, r15
.text:00000000000020B1                 mov     r15, r14
.text:00000000000020B4                 mov     rbx, rax
.text:00000000000020B7                 sub     rbx, [rsp+188h+dest]
.text:00000000000020BC                 jnz     loc_21C4
.text:00000000000020C2
.text:00000000000020C2 loc_20C2:                               ; CODE XREF: main+A09↓j
.text:00000000000020C2                 mov     eax, [rsp+188h+var_184]
.text:00000000000020C6                 mov     r10d, 1
.text:00000000000020CC                 mov     cs:newlines2, eax
.text:00000000000020D2                 jmp     short loc_2058
.text:00000000000020D4 ; ---------------------------------------------------------------------------
.text:00000000000020D4
.text:00000000000020D4 loc_20D4:                               ; CODE XREF: main+32F↑j
.text:00000000000020D4                 mov     rax, [rsp+188h+var_F8]
.text:00000000000020DC                 cmp     [rsp+188h+stat_buf.st_dev], rax
.text:00000000000020E4                 jnz     loc_1B05
.text:00000000000020EA                 mov     rax, [rsp+188h+var_F0]
.text:00000000000020F2                 cmp     [rsp+188h+stat_buf.st_ino], rax
.text:00000000000020FA                 jnz     loc_1B05
.text:0000000000002100                 mov     edi, cs:input_desc ; fd
.text:0000000000002106                 xor     esi, esi        ; offset
.text:0000000000002108                 mov     edx, 1          ; whence
.text:000000000000210D                 call    _lseek
.text:0000000000002112                 cmp     rax, [rsp+188h+stat_buf.st_size]
.text:000000000000211A                 jge     loc_1B05
.text:0000000000002120                 mov     rdx, cs:infile
.text:0000000000002127                 mov     esi, 3
.text:000000000000212C                 xor     edi, edi
.text:000000000000212E                 call    quotearg_n_style_colon
.text:0000000000002133                 lea     rsi, aSInputFileIsOu ; "%s: input file is output file"
.text:000000000000213A                 mov     rbx, rax
.text:000000000000213D                 mov     edx, 5          ; category
.text:0000000000002142                 xor     edi, edi        ; domainname
.text:0000000000002144                 call    _dcgettext
.text:0000000000002149                 mov     rcx, rbx
.text:000000000000214C                 mov     rdx, rax        ; format
.text:000000000000214F                 xor     esi, esi        ; errnum
.text:0000000000002151                 xor     edi, edi        ; status
.text:0000000000002153                 xor     eax, eax
.text:0000000000002155                 call    _error
.text:000000000000215A                 mov     [rsp+188h+var_FC], 0
.text:0000000000002162                 jmp     loc_2074
.text:0000000000002167 ; ---------------------------------------------------------------------------
.text:0000000000002167
.text:0000000000002167 loc_2167:                               ; CODE XREF: main+2E4↑j
.text:0000000000002167                 mov     rdx, cs:infile
.text:000000000000216E                 mov     esi, 3
.text:0000000000002173                 xor     edi, edi
.text:0000000000002175                 call    quotearg_n_style_colon
.text:000000000000217A                 mov     rbx, rax
.text:000000000000217D                 call    ___errno_location
.text:0000000000002182                 mov     esi, [rax]      ; errnum
.text:0000000000002184                 lea     rdx, format+4   ; format
.text:000000000000218B                 mov     rcx, rbx
.text:000000000000218E                 xor     edi, edi        ; status
.text:0000000000002190                 xor     eax, eax
.text:0000000000002192                 call    _error
.text:0000000000002197                 mov     [rsp+188h+var_FC], 0
.text:000000000000219F                 jmp     loc_2074
.text:00000000000021A4 ; ---------------------------------------------------------------------------
.text:00000000000021A4
.text:00000000000021A4 loc_21A4:                               ; CODE XREF: main+875↑j
.text:00000000000021A4                 mov     rsi, [rsp+188h+dest] ; buf
.text:00000000000021A9                 mov     rdx, r14        ; n
.text:00000000000021AC                 mov     edi, 1          ; fd
.text:00000000000021B1                 call    full_write
.text:00000000000021B6                 cmp     r14, rax
.text:00000000000021B9                 jz      loc_204B
.text:00000000000021BF                 jmp     loc_1F11
.text:00000000000021C4 ; ---------------------------------------------------------------------------
.text:00000000000021C4
.text:00000000000021C4 loc_21C4:                               ; CODE XREF: main+8EC↑j
.text:00000000000021C4                 mov     rsi, [rsp+188h+dest] ; buf
.text:00000000000021C9                 mov     rdx, rbx        ; n
.text:00000000000021CC                 mov     edi, 1          ; fd
.text:00000000000021D1                 call    full_write
.text:00000000000021D6                 cmp     rbx, rax
.text:00000000000021D9                 jz      loc_20C2
.text:00000000000021DF                 jmp     loc_1F11
.text:00000000000021E4 ; ---------------------------------------------------------------------------
.text:00000000000021E4
.text:00000000000021E4 loc_21E4:                               ; CODE XREF: main+7FA↑j
.text:00000000000021E4                 xor     edi, edi        ; fd
.text:00000000000021E6                 call    _close
.text:00000000000021EB                 test    eax, eax
.text:00000000000021ED                 jns     loc_1FD0
.text:00000000000021F3                 lea     rsi, aClosingStandar ; "closing standard input"
.text:00000000000021FA                 mov     edx, 5          ; category
.text:00000000000021FF                 xor     edi, edi        ; domainname
.text:0000000000002201                 call    _dcgettext
.text:0000000000002206                 mov     rbx, rax
.text:0000000000002209                 call    ___errno_location
.text:000000000000220E                 mov     esi, [rax]      ; errnum
.text:0000000000002210                 mov     rdx, rbx        ; format
.text:0000000000002213                 mov     edi, 1          ; status
.text:0000000000002218                 xor     eax, eax
.text:000000000000221A                 call    _error
.text:000000000000221F
.text:000000000000221F loc_221F:                               ; CODE XREF: main+356↑j
.text:000000000000221F                 mov     rax, [rsp+188h+nbytes]
.text:0000000000002224                 cmp     r15, rax
.text:0000000000002227                 cmovnb  rax, r15
.text:000000000000222B                 lea     rdi, [rax+r14]
.text:000000000000222F                 mov     rbp, rax
.text:0000000000002232                 call    xmalloc
.text:0000000000002237                 add     r14, rax
.text:000000000000223A                 mov     [rsp+188h+var_118], rax
.text:000000000000223F                 xor     edx, edx
.text:0000000000002241                 mov     rax, r14
.text:0000000000002244                 mov     rbx, r14
.text:0000000000002247                 div     [rsp+188h+var_120]
.text:000000000000224C                 sub     rbx, rdx
.text:000000000000224F                 jmp     short loc_226F
.text:0000000000002251 ; ---------------------------------------------------------------------------
.text:0000000000002251
.text:0000000000002251 loc_2251:                               ; CODE XREF: main+AB7↓j
.text:0000000000002251                 test    rax, rax
.text:0000000000002254                 jz      short loc_22C6
.text:0000000000002256                 mov     rdx, rax        ; n
.text:0000000000002259                 mov     rsi, rbx        ; buf
.text:000000000000225C                 mov     edi, 1          ; fd
.text:0000000000002261                 call    full_write
.text:0000000000002266                 cmp     r14, rax
.text:0000000000002269                 jnz     loc_2374
.text:000000000000226F
.text:000000000000226F loc_226F:                               ; CODE XREF: main+A7F↑j
.text:000000000000226F                 mov     edi, cs:input_desc ; fd
.text:0000000000002275                 mov     rdx, rbp        ; nbytes
.text:0000000000002278                 mov     rsi, rbx        ; buf
.text:000000000000227B                 call    safe_read
.text:0000000000002280                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002284                 mov     r14, rax
.text:0000000000002287                 jnz     short loc_2251
.text:0000000000002289                 mov     rdx, cs:infile
.text:0000000000002290                 mov     esi, 3
.text:0000000000002295                 xor     edi, edi
.text:0000000000002297                 call    quotearg_n_style_colon
.text:000000000000229C                 mov     rbx, rax
.text:000000000000229F                 call    ___errno_location
.text:00000000000022A4                 mov     esi, [rax]      ; errnum
.text:00000000000022A6                 lea     rdx, format+4   ; format
.text:00000000000022AD                 mov     rcx, rbx
.text:00000000000022B0                 xor     edi, edi        ; status
.text:00000000000022B2                 xor     eax, eax
.text:00000000000022B4                 call    _error
.text:00000000000022B9
.text:00000000000022B9 loc_22B9:                               ; CODE XREF: main+AFC↓j
.text:00000000000022B9                 and     [rsp+188h+var_FC], r13b
.text:00000000000022C1                 jmp     loc_206A
.text:00000000000022C6 ; ---------------------------------------------------------------------------
.text:00000000000022C6
.text:00000000000022C6 loc_22C6:                               ; CODE XREF: main+A84↑j
.text:00000000000022C6                 mov     r13d, 1
.text:00000000000022CC                 jmp     short loc_22B9
.text:00000000000022CE ; ---------------------------------------------------------------------------
.text:00000000000022CE
.text:00000000000022CE loc_22CE:                               ; CODE XREF: main+5F3↑j
.text:00000000000022CE                 lea     rsi, msgid      ; "write error"
.text:00000000000022D5                 mov     edx, 5          ; category
.text:00000000000022DA                 xor     edi, edi        ; domainname
.text:00000000000022DC                 call    _dcgettext
.text:00000000000022E1                 mov     rbx, rax
.text:00000000000022E4                 call    ___errno_location
.text:00000000000022E9                 mov     esi, [rax]      ; errnum
.text:00000000000022EB                 mov     rdx, rbx        ; format
.text:00000000000022EE                 mov     edi, 1          ; status
.text:00000000000022F3                 xor     eax, eax
.text:00000000000022F5                 call    _error
.text:00000000000022FA
.text:00000000000022FA loc_22FA:                               ; CODE XREF: main+27F↑j
.text:00000000000022FA                 lea     rax, aLt+2      ; "-"
.text:0000000000002301                 jmp     loc_1A6A
.text:0000000000002306 ; ---------------------------------------------------------------------------
.text:0000000000002306
.text:0000000000002306 loc_2306:                               ; CODE XREF: main+779↑j
.text:0000000000002306                 mov     rsi, cs:infile
.text:000000000000230D                 mov     edi, 4
.text:0000000000002312                 mov     byte ptr [rsp+188h+var_180], r10b
.text:0000000000002317                 mov     [rsp+188h+var_178], rax
.text:000000000000231C                 mov     r15, r14
.text:000000000000231F                 call    quotearg_style
.text:0000000000002324                 lea     rsi, aCannotDoIoctlO ; "cannot do ioctl on %s"
.text:000000000000232B                 mov     edx, 5          ; category
.text:0000000000002330                 xor     edi, edi        ; domainname
.text:0000000000002332                 mov     rbx, rax
.text:0000000000002335                 call    _dcgettext
.text:000000000000233A                 mov     r11, [rsp+188h+var_178]
.text:000000000000233F                 mov     rdx, rax        ; format
.text:0000000000002342                 mov     rcx, rbx
.text:0000000000002345                 xor     eax, eax
.text:0000000000002347                 xor     edi, edi        ; status
.text:0000000000002349                 mov     esi, [r11]      ; errnum
.text:000000000000234C                 call    _error
.text:0000000000002351                 mov     eax, [rsp+188h+var_184]
.text:0000000000002355                 movzx   r10d, byte ptr [rsp+188h+var_180]
.text:000000000000235B                 mov     cs:newlines2, eax
.text:0000000000002361                 jmp     loc_2058
.text:0000000000002366 ; ---------------------------------------------------------------------------
.text:0000000000002366
.text:0000000000002366 loc_2366:                               ; CODE XREF: main+155↑j
.text:0000000000002366                 cmp     eax, 0FFFFFF7Eh
.text:000000000000236B                 jnz     short loc_23A0
.text:000000000000236D                 xor     edi, edi        ; status
.text:000000000000236F                 call    usage
.text:0000000000002374 ; ---------------------------------------------------------------------------
.text:0000000000002374
.text:0000000000002374 loc_2374:                               ; CODE XREF: main+A99↑j
.text:0000000000002374                 lea     rsi, msgid      ; "write error"
.text:000000000000237B                 mov     edx, 5          ; category
.text:0000000000002380                 xor     edi, edi        ; domainname
.text:0000000000002382                 call    _dcgettext
.text:0000000000002387                 mov     rbx, rax
.text:000000000000238A                 call    ___errno_location
.text:000000000000238F                 mov     esi, [rax]      ; errnum
.text:0000000000002391                 mov     rdx, rbx        ; format
.text:0000000000002394                 mov     edi, 1          ; status
.text:0000000000002399                 xor     eax, eax
.text:000000000000239B                 call    _error
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: main+E8↑j
.text:00000000000023A0                                         ; main+107↑j ...
.text:00000000000023A0                 mov     edi, 1          ; status
.text:00000000000023A5                 call    usage
.text:00000000000023AA ; ---------------------------------------------------------------------------
.text:00000000000023AA
.text:00000000000023AA loc_23AA:                               ; CODE XREF: main+81F↑j
.text:00000000000023AA                 call    ___stack_chk_fail
.text:00000000000023AF ; ---------------------------------------------------------------------------
.text:00000000000023AF
.text:00000000000023AF loc_23AF:                               ; CODE XREF: main+1DB↑j
.text:00000000000023AF                 lea     rsi, aStandardOutput ; "standard output"
.text:00000000000023B6                 mov     edx, 5          ; category
.text:00000000000023BB                 xor     edi, edi        ; domainname
.text:00000000000023BD                 call    _dcgettext
.text:00000000000023C2                 mov     rbx, rax
.text:00000000000023C5                 call    ___errno_location
.text:00000000000023CA                 mov     esi, [rax]      ; errnum
.text:00000000000023CC                 mov     rdx, rbx        ; format
.text:00000000000023CF                 mov     edi, 1          ; status
.text:00000000000023D4                 xor     eax, eax
.text:00000000000023D6                 call    _error
.text:00000000000023D6 ; } // starts at 17D0
.text:00000000000023DB                 nop     dword ptr [rax+rax+00h]
.text:00000000000023DB main            endp ; sp-analysis failed
.text:00000000000023DB
.text:00000000000023E0
.text:00000000000023E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023E0
.text:00000000000023E0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000023E0
.text:00000000000023E0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000023E0                 public start
.text:00000000000023E0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000023E0 ; __unwind {
.text:00000000000023E0                 xor     ebp, ebp
.text:00000000000023E2                 mov     r9, rdx         ; rtld_fini
.text:00000000000023E5                 pop     rsi             ; argc
.text:00000000000023E6                 mov     rdx, rsp        ; ubp_av
.text:00000000000023E9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000023ED                 push    rax
.text:00000000000023EE                 push    rsp             ; stack_end
.text:00000000000023EF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000023F6                 lea     rcx, __libc_csu_init ; init
.text:00000000000023FD                 lea     rdi, main       ; main
.text:0000000000002404                 call    cs:__libc_start_main_ptr
.text:000000000000240A                 hlt
.text:000000000000240A ; } // starts at 23E0
.text:000000000000240A start           endp
.text:000000000000240A
.text:000000000000240A ; ---------------------------------------------------------------------------
.text:000000000000240B                 align 10h
.text:0000000000002410
.text:0000000000002410 ; =============== S U B R O U T I N E =======================================
.text:0000000000002410
.text:0000000000002410 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002410
.text:0000000000002410 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_24C3↓p
.text:0000000000002410                 lea     rdi, __bss_start
.text:0000000000002417                 push    rbp
.text:0000000000002418                 lea     rax, __bss_start
.text:000000000000241F                 cmp     rax, rdi
.text:0000000000002422                 mov     rbp, rsp
.text:0000000000002425                 jz      short loc_2440
.text:0000000000002427                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000242E                 test    rax, rax
.text:0000000000002431                 jz      short loc_2440
.text:0000000000002433                 pop     rbp
.text:0000000000002434                 jmp     rax
.text:0000000000002434 ; ---------------------------------------------------------------------------
.text:0000000000002436                 align 20h
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002440                                         ; deregister_tm_clones+21↑j
.text:0000000000002440                 pop     rbp
.text:0000000000002441                 retn
.text:0000000000002441 deregister_tm_clones endp
.text:0000000000002441
.text:0000000000002441 ; ---------------------------------------------------------------------------
.text:0000000000002442                 align 10h
.text:0000000000002450
.text:0000000000002450 ; =============== S U B R O U T I N E =======================================
.text:0000000000002450
.text:0000000000002450 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002450
.text:0000000000002450 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002450                 lea     rdi, __bss_start
.text:0000000000002457                 lea     rsi, __bss_start
.text:000000000000245E                 push    rbp
.text:000000000000245F                 sub     rsi, rdi
.text:0000000000002462                 mov     rbp, rsp
.text:0000000000002465                 sar     rsi, 3
.text:0000000000002469                 mov     rax, rsi
.text:000000000000246C                 shr     rax, 3Fh
.text:0000000000002470                 add     rsi, rax
.text:0000000000002473                 sar     rsi, 1
.text:0000000000002476                 jz      short loc_2490
.text:0000000000002478                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000247F                 test    rax, rax
.text:0000000000002482                 jz      short loc_2490
.text:0000000000002484                 pop     rbp
.text:0000000000002485                 jmp     rax
.text:0000000000002485 ; ---------------------------------------------------------------------------
.text:0000000000002487                 align 10h
.text:0000000000002490
.text:0000000000002490 loc_2490:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002490                                         ; register_tm_clones+32↑j
.text:0000000000002490                 pop     rbp
.text:0000000000002491                 retn
.text:0000000000002491 register_tm_clones endp
.text:0000000000002491
.text:0000000000002491 ; ---------------------------------------------------------------------------
.text:0000000000002492                 align 20h
.text:00000000000024A0
.text:00000000000024A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024A0
.text:00000000000024A0 ; Attributes: info_from_lumina
.text:00000000000024A0
.text:00000000000024A0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000024A0                 cmp     cs:completed_7697, 0
.text:00000000000024A7                 jnz     short locret_24D8
.text:00000000000024A9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000024B1                 push    rbp
.text:00000000000024B2                 mov     rbp, rsp
.text:00000000000024B5                 jz      short loc_24C3
.text:00000000000024B7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000024BE                 call    __cxa_finalize
.text:00000000000024C3
.text:00000000000024C3 loc_24C3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000024C3                 call    deregister_tm_clones
.text:00000000000024C8                 mov     cs:completed_7697, 1
.text:00000000000024CF                 pop     rbp
.text:00000000000024D0                 retn
.text:00000000000024D0 ; ---------------------------------------------------------------------------
.text:00000000000024D1                 align 8
.text:00000000000024D8
.text:00000000000024D8 locret_24D8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000024D8                 rep retn
.text:00000000000024D8 __do_global_dtors_aux endp
.text:00000000000024D8
.text:00000000000024D8 ; ---------------------------------------------------------------------------
.text:00000000000024DA                 align 20h
.text:00000000000024E0
.text:00000000000024E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024E0
.text:00000000000024E0 ; Attributes: bp-based frame
.text:00000000000024E0
.text:00000000000024E0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000024E0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000024E0                 push    rbp
.text:00000000000024E1                 mov     rbp, rsp
.text:00000000000024E4                 pop     rbp
.text:00000000000024E5                 jmp     register_tm_clones
.text:00000000000024E5 frame_dummy     endp
.text:00000000000024E5
.text:00000000000024E5 ; ---------------------------------------------------------------------------
.text:00000000000024EA                 align 10h
.text:00000000000024F0
.text:00000000000024F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024F0
.text:00000000000024F0
.text:00000000000024F0 next_line_num   proc near               ; CODE XREF: main+4A8↑p
.text:00000000000024F0                                         ; main+66F↑p
.text:00000000000024F0 ; __unwind {
.text:00000000000024F0                 mov     rcx, cs:line_num_start
.text:00000000000024F7                 lea     rax, line_buf+11h ; "0\t"
.text:00000000000024FE                 jmp     short loc_250D
.text:0000000000002500 ; ---------------------------------------------------------------------------
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: next_line_num+23↓j
.text:0000000000002500                 sub     rax, 1
.text:0000000000002504                 mov     byte ptr [rax+1], 30h ; '0'
.text:0000000000002508                 cmp     rcx, rax
.text:000000000000250B                 ja      short loc_2520
.text:000000000000250D
.text:000000000000250D loc_250D:                               ; CODE XREF: next_line_num+E↑j
.text:000000000000250D                 movzx   edx, byte ptr [rax]
.text:0000000000002510                 cmp     dl, 38h ; '8'
.text:0000000000002513                 jg      short loc_2500
.text:0000000000002515                 add     edx, 1
.text:0000000000002518                 mov     [rax], dl
.text:000000000000251A                 retn
.text:000000000000251A ; ---------------------------------------------------------------------------
.text:000000000000251B                 align 20h
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: next_line_num+1B↑j
.text:0000000000002520                 lea     rax, line_buf   ; "                 0\t"
.text:0000000000002527                 cmp     rcx, rax
.text:000000000000252A                 jbe     short loc_2558
.text:000000000000252C                 lea     rdx, [rcx-1]
.text:0000000000002530                 mov     byte ptr [rcx-1], 31h ; '1'
.text:0000000000002534                 mov     cs:line_num_start, rdx
.text:000000000000253B
.text:000000000000253B loc_253B:                               ; CODE XREF: next_line_num+72↓j
.text:000000000000253B                 mov     rax, cs:line_num_print
.text:0000000000002542                 cmp     rax, rdx
.text:0000000000002545                 jbe     short locret_2552
.text:0000000000002547                 sub     rax, 1
.text:000000000000254B                 mov     cs:line_num_print, rax
.text:0000000000002552
.text:0000000000002552 locret_2552:                            ; CODE XREF: next_line_num+55↑j
.text:0000000000002552                 rep retn
.text:0000000000002552 ; ---------------------------------------------------------------------------
.text:0000000000002554                 align 8
.text:0000000000002558
.text:0000000000002558 loc_2558:                               ; CODE XREF: next_line_num+3A↑j
.text:0000000000002558                 mov     byte ptr cs:line_buf, 3Eh ; '>' ; "                 0\t"
.text:000000000000255F                 mov     rdx, rcx
.text:0000000000002562                 jmp     short loc_253B
.text:0000000000002562 ; } // starts at 24F0
.text:0000000000002562 next_line_num   endp
.text:0000000000002562
.text:0000000000002562 ; ---------------------------------------------------------------------------
.text:0000000000002564                 align 10h
.text:0000000000002570
.text:0000000000002570 ; =============== S U B R O U T I N E =======================================
.text:0000000000002570
.text:0000000000002570 ; Attributes: noreturn
.text:0000000000002570
.text:0000000000002570 ; void __fastcall __noreturn usage(int status)
.text:0000000000002570                 public usage
.text:0000000000002570 usage           proc near               ; CODE XREF: main+B9F↑p
.text:0000000000002570                                         ; main+BD5↑p
.text:0000000000002570
.text:0000000000002570 var_A8          = qword ptr -0A8h
.text:0000000000002570 var_A0          = qword ptr -0A0h
.text:0000000000002570 var_98          = qword ptr -98h
.text:0000000000002570 var_90          = qword ptr -90h
.text:0000000000002570 var_88          = qword ptr -88h
.text:0000000000002570 var_80          = qword ptr -80h
.text:0000000000002570 var_78          = qword ptr -78h
.text:0000000000002570 var_70          = qword ptr -70h
.text:0000000000002570 var_68          = qword ptr -68h
.text:0000000000002570 var_60          = qword ptr -60h
.text:0000000000002570 var_58          = qword ptr -58h
.text:0000000000002570 var_50          = qword ptr -50h
.text:0000000000002570 var_48          = qword ptr -48h
.text:0000000000002570 var_40          = qword ptr -40h
.text:0000000000002570 var_30          = qword ptr -30h
.text:0000000000002570
.text:0000000000002570 ; __unwind {
.text:0000000000002570                 push    r13
.text:0000000000002572                 push    r12
.text:0000000000002574                 mov     edx, 5          ; category
.text:0000000000002579                 push    rbp
.text:000000000000257A                 push    rbx
.text:000000000000257B                 mov     ebp, edi
.text:000000000000257D                 sub     rsp, 88h
.text:0000000000002584                 mov     rbx, cs:program_name
.text:000000000000258B                 mov     rax, fs:28h
.text:0000000000002594                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002599                 xor     eax, eax
.text:000000000000259B                 test    edi, edi
.text:000000000000259D                 jz      short loc_25CD
.text:000000000000259F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000025A6                 xor     edi, edi        ; domainname
.text:00000000000025A8                 call    _dcgettext
.text:00000000000025AD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000025B4                 mov     rdx, rax
.text:00000000000025B7                 mov     rcx, rbx
.text:00000000000025BA                 mov     esi, 1
.text:00000000000025BF                 xor     eax, eax
.text:00000000000025C1                 call    ___fprintf_chk
.text:00000000000025C6
.text:00000000000025C6 loc_25C6:                               ; CODE XREF: usage+316↓j
.text:00000000000025C6                 mov     edi, ebp        ; status
.text:00000000000025C8                 call    _exit
.text:00000000000025CD ; ---------------------------------------------------------------------------
.text:00000000000025CD
.text:00000000000025CD loc_25CD:                               ; CODE XREF: usage+2D↑j
.text:00000000000025CD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00000000000025D4                 xor     edi, edi        ; domainname
.text:00000000000025D6                 call    _dcgettext
.text:00000000000025DB                 mov     rdx, rbx
.text:00000000000025DE                 mov     rsi, rax
.text:00000000000025E1                 mov     edi, 1
.text:00000000000025E6                 xor     eax, eax
.text:00000000000025E8                 call    ___printf_chk
.text:00000000000025ED                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000025F4                 lea     rsi, aConcatenateFil ; "Concatenate FILE(s) to standard output."...
.text:00000000000025FB                 mov     edx, 5          ; category
.text:0000000000002600                 xor     edi, edi        ; domainname
.text:0000000000002602                 call    _dcgettext
.text:0000000000002607                 mov     rsi, rbx        ; stream
.text:000000000000260A                 mov     rdi, rax        ; s
.text:000000000000260D                 call    _fputs_unlocked
.text:0000000000002612                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002619                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000002620                 mov     edx, 5          ; category
.text:0000000000002625                 xor     edi, edi        ; domainname
.text:0000000000002627                 call    _dcgettext
.text:000000000000262C                 mov     rsi, rbx        ; stream
.text:000000000000262F                 mov     rdi, rax        ; s
.text:0000000000002632                 call    _fputs_unlocked
.text:0000000000002637                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000263E                 lea     rsi, aAShowAllEquiva ; "\n  -A, --show-all           equivalent"...
.text:0000000000002645                 mov     edx, 5          ; category
.text:000000000000264A                 xor     edi, edi        ; domainname
.text:000000000000264C                 call    _dcgettext
.text:0000000000002651                 mov     rsi, rbx        ; stream
.text:0000000000002654                 mov     rdi, rax        ; s
.text:0000000000002657                 call    _fputs_unlocked
.text:000000000000265C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002663                 lea     rsi, aTEquivalentToV ; "  -t                       equivalent t"...
.text:000000000000266A                 mov     edx, 5          ; category
.text:000000000000266F                 xor     edi, edi        ; domainname
.text:0000000000002671                 call    _dcgettext
.text:0000000000002676                 mov     rsi, rbx        ; stream
.text:0000000000002679                 mov     rdi, rax        ; s
.text:000000000000267C                 call    _fputs_unlocked
.text:0000000000002681                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002688                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000268F                 mov     edx, 5          ; category
.text:0000000000002694                 xor     edi, edi        ; domainname
.text:0000000000002696                 call    _dcgettext
.text:000000000000269B                 mov     rsi, rbx        ; stream
.text:000000000000269E                 mov     rdi, rax        ; s
.text:00000000000026A1                 call    _fputs_unlocked
.text:00000000000026A6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000026AD                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000026B4                 mov     edx, 5          ; category
.text:00000000000026B9                 xor     edi, edi        ; domainname
.text:00000000000026BB                 call    _dcgettext
.text:00000000000026C0                 mov     rsi, rbx        ; stream
.text:00000000000026C3                 mov     rdi, rax        ; s
.text:00000000000026C6                 call    _fputs_unlocked
.text:00000000000026CB                 mov     rbx, cs:program_name
.text:00000000000026D2                 lea     rsi, aExamplesSFGOut ; "\nExamples:\n  %s f - g  Output f's con"...
.text:00000000000026D9                 mov     edx, 5          ; category
.text:00000000000026DE                 xor     edi, edi        ; domainname
.text:00000000000026E0                 call    _dcgettext
.text:00000000000026E5                 mov     rcx, rbx
.text:00000000000026E8                 mov     rdx, rbx
.text:00000000000026EB                 mov     rsi, rax
.text:00000000000026EE                 mov     edi, 1
.text:00000000000026F3                 xor     eax, eax
.text:00000000000026F5                 lea     rbx, aCat       ; "cat"
.text:00000000000026FC                 call    ___printf_chk
.text:0000000000002701                 lea     rax, asc_5514   ; "["
.text:0000000000002708                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000270F                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002718                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002721                 mov     rdx, rsp
.text:0000000000002724                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002728                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000272F                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002734                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000273B                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002740                 lea     rax, domainname ; "coreutils"
.text:0000000000002747                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000274C                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002753                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002758                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000275F                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002764                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002769                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002770                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002775                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000277C                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002781                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002786                 mov     [rsp+0A8h+var_60], rax
.text:000000000000278B                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002790
.text:0000000000002790 loc_2790:                               ; CODE XREF: usage+23D↓j
.text:0000000000002790                 add     rdx, 10h
.text:0000000000002794                 mov     rdi, [rdx]
.text:0000000000002797                 test    rdi, rdi
.text:000000000000279A                 jz      short loc_27AF
.text:000000000000279C                 mov     ecx, 4
.text:00000000000027A1                 mov     rsi, rbx
.text:00000000000027A4                 repe cmpsb
.text:00000000000027A6                 setnbe  al
.text:00000000000027A9                 sbb     al, 0
.text:00000000000027AB                 test    al, al
.text:00000000000027AD                 jnz     short loc_2790
.text:00000000000027AF
.text:00000000000027AF loc_27AF:                               ; CODE XREF: usage+22A↑j
.text:00000000000027AF                 mov     r12, [rdx+8]
.text:00000000000027B3                 xor     edi, edi        ; domainname
.text:00000000000027B5                 mov     edx, 5          ; category
.text:00000000000027BA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000027C1                 test    r12, r12
.text:00000000000027C4                 jz      loc_288B
.text:00000000000027CA                 call    _dcgettext
.text:00000000000027CF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000027D6                 lea     rdx, unk_558A
.text:00000000000027DD                 mov     rsi, rax
.text:00000000000027E0                 mov     edi, 1
.text:00000000000027E5                 xor     eax, eax
.text:00000000000027E7                 call    ___printf_chk
.text:00000000000027EC                 xor     esi, esi        ; locale
.text:00000000000027EE                 mov     edi, 5          ; category
.text:00000000000027F3                 call    _setlocale
.text:00000000000027F8                 test    rax, rax
.text:00000000000027FB                 jz      short loc_2819
.text:00000000000027FD                 lea     rsi, s2         ; "en_"
.text:0000000000002804                 mov     edx, 3          ; n
.text:0000000000002809                 mov     rdi, rax        ; s1
.text:000000000000280C                 call    _strncmp
.text:0000000000002811                 test    eax, eax
.text:0000000000002813                 jnz     loc_2920
.text:0000000000002819
.text:0000000000002819 loc_2819:                               ; CODE XREF: usage+28B↑j
.text:0000000000002819                                         ; usage+3D5↓j
.text:0000000000002819                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002820                 xor     edi, edi        ; domainname
.text:0000000000002822                 mov     edx, 5          ; category
.text:0000000000002827                 call    _dcgettext
.text:000000000000282C                 lea     rcx, aCat       ; "cat"
.text:0000000000002833                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000283A                 mov     rsi, rax
.text:000000000000283D                 mov     edi, 1
.text:0000000000002842                 xor     eax, eax
.text:0000000000002844                 call    ___printf_chk
.text:0000000000002849                 cmp     r12, rbx
.text:000000000000284C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002853                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000285A                 cmovz   rbx, rcx
.text:000000000000285E
.text:000000000000285E loc_285E:                               ; CODE XREF: usage+3A4↓j
.text:000000000000285E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002865                 xor     edi, edi        ; domainname
.text:0000000000002867                 mov     edx, 5          ; category
.text:000000000000286C                 call    _dcgettext
.text:0000000000002871                 mov     rcx, rbx
.text:0000000000002874                 mov     rsi, rax
.text:0000000000002877                 mov     rdx, r12
.text:000000000000287A                 mov     edi, 1
.text:000000000000287F                 xor     eax, eax
.text:0000000000002881                 call    ___printf_chk
.text:0000000000002886                 jmp     loc_25C6
.text:000000000000288B ; ---------------------------------------------------------------------------
.text:000000000000288B
.text:000000000000288B loc_288B:                               ; CODE XREF: usage+254↑j
.text:000000000000288B                 call    _dcgettext
.text:0000000000002890                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002897                 lea     rdx, unk_558A
.text:000000000000289E                 mov     rsi, rax
.text:00000000000028A1                 mov     edi, 1
.text:00000000000028A6                 xor     eax, eax
.text:00000000000028A8                 call    ___printf_chk
.text:00000000000028AD                 xor     esi, esi        ; locale
.text:00000000000028AF                 mov     edi, 5          ; category
.text:00000000000028B4                 call    _setlocale
.text:00000000000028B9                 test    rax, rax
.text:00000000000028BC                 jz      short loc_28D6
.text:00000000000028BE                 lea     rsi, s2         ; "en_"
.text:00000000000028C5                 mov     edx, 3          ; n
.text:00000000000028CA                 mov     rdi, rax        ; s1
.text:00000000000028CD                 call    _strncmp
.text:00000000000028D2                 test    eax, eax
.text:00000000000028D4                 jnz     short loc_2919
.text:00000000000028D6
.text:00000000000028D6 loc_28D6:                               ; CODE XREF: usage+34C↑j
.text:00000000000028D6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000028DD                 mov     edx, 5          ; category
.text:00000000000028E2                 xor     edi, edi        ; domainname
.text:00000000000028E4                 lea     r12, aCat       ; "cat"
.text:00000000000028EB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000028F2                 call    _dcgettext
.text:00000000000028F7                 lea     rcx, aCat       ; "cat"
.text:00000000000028FE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002905                 mov     rsi, rax
.text:0000000000002908                 mov     edi, 1
.text:000000000000290D                 xor     eax, eax
.text:000000000000290F                 call    ___printf_chk
.text:0000000000002914                 jmp     loc_285E
.text:0000000000002919 ; ---------------------------------------------------------------------------
.text:0000000000002919
.text:0000000000002919 loc_2919:                               ; CODE XREF: usage+364↑j
.text:0000000000002919                 lea     r12, aCat       ; "cat"
.text:0000000000002920
.text:0000000000002920 loc_2920:                               ; CODE XREF: usage+2A3↑j
.text:0000000000002920                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002927                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000292E                 xor     edi, edi        ; domainname
.text:0000000000002930                 mov     edx, 5          ; category
.text:0000000000002935                 call    _dcgettext
.text:000000000000293A                 mov     rsi, r13        ; stream
.text:000000000000293D                 mov     rdi, rax        ; s
.text:0000000000002940                 call    _fputs_unlocked
.text:0000000000002945                 jmp     loc_2819
.text:0000000000002945 ; } // starts at 2570
.text:0000000000002945 usage           endp
.text:0000000000002945
.text:0000000000002945 ; ---------------------------------------------------------------------------
.text:000000000000294A                 align 10h
.text:0000000000002950
.text:0000000000002950 ; =============== S U B R O U T I N E =======================================
.text:0000000000002950
.text:0000000000002950
.text:0000000000002950                 public close_stdout_set_file_name
.text:0000000000002950 close_stdout_set_file_name proc near
.text:0000000000002950 ; __unwind {
.text:0000000000002950                 mov     cs:file_name, rdi
.text:0000000000002957                 retn
.text:0000000000002957 ; } // starts at 2950
.text:0000000000002957 close_stdout_set_file_name endp
.text:0000000000002957
.text:0000000000002957 ; ---------------------------------------------------------------------------
.text:0000000000002958                 align 20h
.text:0000000000002960
.text:0000000000002960 ; =============== S U B R O U T I N E =======================================
.text:0000000000002960
.text:0000000000002960
.text:0000000000002960                 public close_stdout_set_ignore_EPIPE
.text:0000000000002960 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002960 ; __unwind {
.text:0000000000002960                 mov     cs:ignore_EPIPE, dil
.text:0000000000002967                 retn
.text:0000000000002967 ; } // starts at 2960
.text:0000000000002967 close_stdout_set_ignore_EPIPE endp
.text:0000000000002967
.text:0000000000002967 ; ---------------------------------------------------------------------------
.text:0000000000002968                 align 10h
.text:0000000000002970
.text:0000000000002970 ; =============== S U B R O U T I N E =======================================
.text:0000000000002970
.text:0000000000002970 ; Attributes: info_from_lumina
.text:0000000000002970
.text:0000000000002970 ; void __cdecl close_stdout()
.text:0000000000002970                 public close_stdout
.text:0000000000002970 close_stdout    proc near               ; DATA XREF: main+72↑o
.text:0000000000002970 ; __unwind {
.text:0000000000002970                 push    rbp
.text:0000000000002971                 push    rbx
.text:0000000000002972                 sub     rsp, 8
.text:0000000000002976                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000297D                 call    close_stream
.text:0000000000002982                 test    eax, eax
.text:0000000000002984                 jz      short loc_299C
.text:0000000000002986                 call    ___errno_location
.text:000000000000298B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002992                 mov     rbx, rax
.text:0000000000002995                 jz      short loc_29B3
.text:0000000000002997                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000299A                 jnz     short loc_29B3
.text:000000000000299C
.text:000000000000299C loc_299C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000299C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000029A3                 call    close_stream
.text:00000000000029A8                 test    eax, eax
.text:00000000000029AA                 jnz     short loc_29F2
.text:00000000000029AC                 add     rsp, 8
.text:00000000000029B0                 pop     rbx
.text:00000000000029B1                 pop     rbp
.text:00000000000029B2                 retn
.text:00000000000029B3 ; ---------------------------------------------------------------------------
.text:00000000000029B3
.text:00000000000029B3 loc_29B3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000029B3                                         ; close_stdout+2A↑j
.text:00000000000029B3                 lea     rsi, msgid      ; "write error"
.text:00000000000029BA                 xor     edi, edi        ; domainname
.text:00000000000029BC                 mov     edx, 5          ; category
.text:00000000000029C1                 call    _dcgettext
.text:00000000000029C6                 mov     rdi, cs:file_name
.text:00000000000029CD                 mov     rbp, rax
.text:00000000000029D0                 test    rdi, rdi
.text:00000000000029D3                 jz      short loc_29FD
.text:00000000000029D5                 call    quotearg_colon
.text:00000000000029DA                 mov     esi, [rbx]      ; errnum
.text:00000000000029DC                 lea     rdx, format     ; "%s: %s"
.text:00000000000029E3                 mov     rcx, rax
.text:00000000000029E6                 mov     r8, rbp
.text:00000000000029E9                 xor     edi, edi        ; status
.text:00000000000029EB                 xor     eax, eax
.text:00000000000029ED                 call    _error
.text:00000000000029F2
.text:00000000000029F2 loc_29F2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000029F2                                         ; close_stdout+A2↓j
.text:00000000000029F2                 mov     edi, cs:exit_failure ; status
.text:00000000000029F8                 call    __exit
.text:00000000000029FD ; ---------------------------------------------------------------------------
.text:00000000000029FD
.text:00000000000029FD loc_29FD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000029FD                 mov     esi, [rbx]      ; errnum
.text:00000000000029FF                 lea     rdx, format+4   ; format
.text:0000000000002A06                 mov     rcx, rax
.text:0000000000002A09                 xor     edi, edi        ; status
.text:0000000000002A0B                 xor     eax, eax
.text:0000000000002A0D                 call    _error
.text:0000000000002A12                 jmp     short loc_29F2
.text:0000000000002A12 ; } // starts at 2970
.text:0000000000002A12 close_stdout    endp
.text:0000000000002A12
.text:0000000000002A12 ; ---------------------------------------------------------------------------
.text:0000000000002A14                 align 20h
.text:0000000000002A20
.text:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A20
.text:0000000000002A20
.text:0000000000002A20 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002A20                 public fdadvise
.text:0000000000002A20 fdadvise        proc near               ; CODE XREF: main+31F↑p
.text:0000000000002A20 ; __unwind {
.text:0000000000002A20                 jmp     _posix_fadvise
.text:0000000000002A20 ; } // starts at 2A20
.text:0000000000002A20 fdadvise        endp
.text:0000000000002A20
.text:0000000000002A20 ; ---------------------------------------------------------------------------
.text:0000000000002A25                 align 10h
.text:0000000000002A30
.text:0000000000002A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A30
.text:0000000000002A30
.text:0000000000002A30                 public fadvise
.text:0000000000002A30 fadvise         proc near
.text:0000000000002A30 ; __unwind {
.text:0000000000002A30                 test    rdi, rdi
.text:0000000000002A33                 jz      short locret_2A50
.text:0000000000002A35                 push    rbx
.text:0000000000002A36                 mov     ebx, esi
.text:0000000000002A38                 call    _fileno
.text:0000000000002A3D                 mov     ecx, ebx        ; advise
.text:0000000000002A3F                 xor     edx, edx        ; len
.text:0000000000002A41                 xor     esi, esi        ; offset
.text:0000000000002A43                 pop     rbx
.text:0000000000002A44                 mov     edi, eax        ; fd
.text:0000000000002A46                 jmp     _posix_fadvise
.text:0000000000002A46 ; ---------------------------------------------------------------------------
.text:0000000000002A4B                 align 10h
.text:0000000000002A50
.text:0000000000002A50 locret_2A50:                            ; CODE XREF: fadvise+3↑j
.text:0000000000002A50                 rep retn
.text:0000000000002A50 ; } // starts at 2A30
.text:0000000000002A50 fadvise         endp
.text:0000000000002A50
.text:0000000000002A50 ; ---------------------------------------------------------------------------
.text:0000000000002A52                 align 20h
.text:0000000000002A60
.text:0000000000002A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A60
.text:0000000000002A60
.text:0000000000002A60 ; __int64 __fastcall full_write(int fd, void *buf, size_t n)
.text:0000000000002A60                 public full_write
.text:0000000000002A60 full_write      proc near               ; CODE XREF: main+5EB↑p
.text:0000000000002A60                                         ; main+733↑p ...
.text:0000000000002A60 ; __unwind {
.text:0000000000002A60                 push    r13
.text:0000000000002A62                 push    r12
.text:0000000000002A64                 push    rbp
.text:0000000000002A65                 push    rbx
.text:0000000000002A66                 sub     rsp, 8
.text:0000000000002A6A                 test    rdx, rdx
.text:0000000000002A6D                 jz      short loc_2AD1
.text:0000000000002A6F                 mov     r13d, edi
.text:0000000000002A72                 mov     rbp, rsi
.text:0000000000002A75                 mov     rbx, rdx
.text:0000000000002A78                 xor     r12d, r12d
.text:0000000000002A7B                 jmp     short loc_2A90
.text:0000000000002A7B ; ---------------------------------------------------------------------------
.text:0000000000002A7D                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: full_write+42↓j
.text:0000000000002A80                 test    rax, rax
.text:0000000000002A83                 jz      short loc_2AB8
.text:0000000000002A85                 add     r12, rax
.text:0000000000002A88                 add     rbp, rax
.text:0000000000002A8B                 sub     rbx, rax
.text:0000000000002A8E                 jz      short loc_2AA4
.text:0000000000002A90
.text:0000000000002A90 loc_2A90:                               ; CODE XREF: full_write+1B↑j
.text:0000000000002A90                 mov     rdx, rbx        ; n
.text:0000000000002A93                 mov     rsi, rbp        ; buf
.text:0000000000002A96                 mov     edi, r13d       ; fd
.text:0000000000002A99                 call    safe_write
.text:0000000000002A9E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002AA2                 jnz     short loc_2A80
.text:0000000000002AA4
.text:0000000000002AA4 loc_2AA4:                               ; CODE XREF: full_write+2E↑j
.text:0000000000002AA4                                         ; full_write+74↓j
.text:0000000000002AA4                 add     rsp, 8
.text:0000000000002AA8                 mov     rax, r12
.text:0000000000002AAB                 pop     rbx
.text:0000000000002AAC                 pop     rbp
.text:0000000000002AAD                 pop     r12
.text:0000000000002AAF                 pop     r13
.text:0000000000002AB1                 retn
.text:0000000000002AB1 ; ---------------------------------------------------------------------------
.text:0000000000002AB2                 align 8
.text:0000000000002AB8
.text:0000000000002AB8 loc_2AB8:                               ; CODE XREF: full_write+23↑j
.text:0000000000002AB8                 call    ___errno_location
.text:0000000000002ABD                 mov     dword ptr [rax], 1Ch
.text:0000000000002AC3                 add     rsp, 8
.text:0000000000002AC7                 mov     rax, r12
.text:0000000000002ACA                 pop     rbx
.text:0000000000002ACB                 pop     rbp
.text:0000000000002ACC                 pop     r12
.text:0000000000002ACE                 pop     r13
.text:0000000000002AD0                 retn
.text:0000000000002AD1 ; ---------------------------------------------------------------------------
.text:0000000000002AD1
.text:0000000000002AD1 loc_2AD1:                               ; CODE XREF: full_write+D↑j
.text:0000000000002AD1                 xor     r12d, r12d
.text:0000000000002AD4                 jmp     short loc_2AA4
.text:0000000000002AD4 ; } // starts at 2A60
.text:0000000000002AD4 full_write      endp
.text:0000000000002AD4
.text:0000000000002AD4 ; ---------------------------------------------------------------------------
.text:0000000000002AD6                 align 20h
.text:0000000000002AE0
.text:0000000000002AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AE0
.text:0000000000002AE0
.text:0000000000002AE0                 public set_program_name
.text:0000000000002AE0 set_program_name proc near              ; CODE XREF: main+3D↑p
.text:0000000000002AE0 ; __unwind {
.text:0000000000002AE0                 test    rdi, rdi
.text:0000000000002AE3                 push    rbx
.text:0000000000002AE4                 jz      short loc_2B5D
.text:0000000000002AE6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002AEB                 mov     rbx, rdi
.text:0000000000002AEE                 call    _strrchr
.text:0000000000002AF3                 test    rax, rax
.text:0000000000002AF6                 jz      short loc_2B4D
.text:0000000000002AF8                 lea     r8, [rax+1]
.text:0000000000002AFC                 mov     rdx, r8
.text:0000000000002AFF                 sub     rdx, rbx
.text:0000000000002B02                 cmp     rdx, 6
.text:0000000000002B06                 jle     short loc_2B4D
.text:0000000000002B08                 lea     rsi, [rax-6]
.text:0000000000002B0C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002B13                 mov     ecx, 7
.text:0000000000002B18                 repe cmpsb
.text:0000000000002B1A                 setnbe  dl
.text:0000000000002B1D                 sbb     dl, 0
.text:0000000000002B20                 test    dl, dl
.text:0000000000002B22                 jnz     short loc_2B4D
.text:0000000000002B24                 lea     rdi, aLt        ; "lt-"
.text:0000000000002B2B                 mov     ecx, 3
.text:0000000000002B30                 mov     rsi, r8
.text:0000000000002B33                 mov     rbx, r8
.text:0000000000002B36                 repe cmpsb
.text:0000000000002B38                 setnbe  dl
.text:0000000000002B3B                 sbb     dl, 0
.text:0000000000002B3E                 test    dl, dl
.text:0000000000002B40                 jnz     short loc_2B4D
.text:0000000000002B42                 lea     rbx, [rax+4]
.text:0000000000002B46                 mov     cs:__bss_start, rbx
.text:0000000000002B4D
.text:0000000000002B4D loc_2B4D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002B4D                                         ; set_program_name+26↑j ...
.text:0000000000002B4D                 mov     cs:program_name, rbx
.text:0000000000002B54                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002B5B                 pop     rbx
.text:0000000000002B5C                 retn
.text:0000000000002B5D ; ---------------------------------------------------------------------------
.text:0000000000002B5D
.text:0000000000002B5D loc_2B5D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002B5D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002B64                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002B6B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002B70                 mov     esi, 1          ; size
.text:0000000000002B75                 call    _fwrite
.text:0000000000002B7A                 call    _abort
.text:0000000000002B7A ; } // starts at 2AE0
.text:0000000000002B7A set_program_name endp
.text:0000000000002B7A
.text:0000000000002B7A ; ---------------------------------------------------------------------------
.text:0000000000002B7F                 align 20h
.text:0000000000002B80
.text:0000000000002B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B80
.text:0000000000002B80 ; Attributes: info_from_lumina
.text:0000000000002B80
.text:0000000000002B80 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002B80 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002B80                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002B80 ; __unwind {
.text:0000000000002B80                 push    rbp
.text:0000000000002B81                 push    rbx
.text:0000000000002B82                 mov     rbp, rdi
.text:0000000000002B85                 mov     ebx, esi
.text:0000000000002B87                 sub     rsp, 8
.text:0000000000002B8B                 call    locale_charset
.text:0000000000002B90                 movzx   edx, byte ptr [rax]
.text:0000000000002B93                 and     edx, 0FFFFFFDFh
.text:0000000000002B96                 cmp     dl, 55h ; 'U'
.text:0000000000002B99                 jz      short loc_2C10
.text:0000000000002B9B                 cmp     dl, 47h ; 'G'
.text:0000000000002B9E                 jz      short loc_2BC0
.text:0000000000002BA0
.text:0000000000002BA0 loc_2BA0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002BA0                                         ; gettext_quote+50↓j ...
.text:0000000000002BA0                 lea     rax, unk_5B9B
.text:0000000000002BA7                 lea     rdx, asc_5B9D   ; "'"
.text:0000000000002BAE                 cmp     ebx, 9
.text:0000000000002BB1                 cmovnz  rax, rdx
.text:0000000000002BB5                 add     rsp, 8
.text:0000000000002BB9                 pop     rbx
.text:0000000000002BBA                 pop     rbp
.text:0000000000002BBB                 retn
.text:0000000000002BBB ; ---------------------------------------------------------------------------
.text:0000000000002BBC                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002BC0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002BC4                 and     edx, 0FFFFFFDFh
.text:0000000000002BC7                 cmp     dl, 42h ; 'B'
.text:0000000000002BCA                 jnz     short loc_2BA0
.text:0000000000002BCC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002BD0                 jnz     short loc_2BA0
.text:0000000000002BD2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002BD6                 jnz     short loc_2BA0
.text:0000000000002BD8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002BDC                 jnz     short loc_2BA0
.text:0000000000002BDE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002BE2                 jnz     short loc_2BA0
.text:0000000000002BE4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002BE8                 jnz     short loc_2BA0
.text:0000000000002BEA                 cmp     byte ptr [rax+7], 0
.text:0000000000002BEE                 jnz     short loc_2BA0
.text:0000000000002BF0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002BF4                 lea     rax, unk_5B94
.text:0000000000002BFB                 lea     rdx, unk_5B98
.text:0000000000002C02                 cmovnz  rax, rdx
.text:0000000000002C06                 add     rsp, 8
.text:0000000000002C0A                 pop     rbx
.text:0000000000002C0B                 pop     rbp
.text:0000000000002C0C                 retn
.text:0000000000002C0C ; ---------------------------------------------------------------------------
.text:0000000000002C0D                 align 10h
.text:0000000000002C10
.text:0000000000002C10 loc_2C10:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002C10                 movzx   edx, byte ptr [rax+1]
.text:0000000000002C14                 and     edx, 0FFFFFFDFh
.text:0000000000002C17                 cmp     dl, 54h ; 'T'
.text:0000000000002C1A                 jnz     short loc_2BA0
.text:0000000000002C1C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002C20                 and     edx, 0FFFFFFDFh
.text:0000000000002C23                 cmp     dl, 46h ; 'F'
.text:0000000000002C26                 jnz     loc_2BA0
.text:0000000000002C2C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002C30                 jnz     loc_2BA0
.text:0000000000002C36                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002C3A                 jnz     loc_2BA0
.text:0000000000002C40                 cmp     byte ptr [rax+5], 0
.text:0000000000002C44                 jnz     loc_2BA0
.text:0000000000002C4A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002C4E                 lea     rax, unk_5B8C
.text:0000000000002C55                 lea     rdx, unk_5B90
.text:0000000000002C5C                 cmovnz  rax, rdx
.text:0000000000002C60                 add     rsp, 8
.text:0000000000002C64                 pop     rbx
.text:0000000000002C65                 pop     rbp
.text:0000000000002C66                 retn
.text:0000000000002C66 ; } // starts at 2B80
.text:0000000000002C66 gettext_quote   endp
.text:0000000000002C66
.text:0000000000002C66 ; ---------------------------------------------------------------------------
.text:0000000000002C67                 align 10h
.text:0000000000002C70
.text:0000000000002C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C70
.text:0000000000002C70 ; Attributes: info_from_lumina
.text:0000000000002C70
.text:0000000000002C70 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002C70 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002C70                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002C70
.text:0000000000002C70 var_E0          = dword ptr -0E0h
.text:0000000000002C70 var_DB          = byte ptr -0DBh
.text:0000000000002C70 var_DA          = byte ptr -0DAh
.text:0000000000002C70 var_D9          = byte ptr -0D9h
.text:0000000000002C70 s               = qword ptr -0D8h
.text:0000000000002C70 n               = qword ptr -0D0h
.text:0000000000002C70 var_C8          = qword ptr -0C8h
.text:0000000000002C70 ps              = qword ptr -0C0h
.text:0000000000002C70 var_B8          = qword ptr -0B8h
.text:0000000000002C70 var_B0          = qword ptr -0B0h
.text:0000000000002C70 var_A8          = qword ptr -0A8h
.text:0000000000002C70 s2              = qword ptr -0A0h
.text:0000000000002C70 var_98          = qword ptr -98h
.text:0000000000002C70 var_90          = qword ptr -90h
.text:0000000000002C70 var_88          = qword ptr -88h
.text:0000000000002C70 var_80          = qword ptr -80h
.text:0000000000002C70 var_78          = qword ptr -78h
.text:0000000000002C70 var_70          = dword ptr -70h
.text:0000000000002C70 var_6C          = byte ptr -6Ch
.text:0000000000002C70 var_6B          = byte ptr -6Bh
.text:0000000000002C70 var_6A          = byte ptr -6Ah
.text:0000000000002C70 var_69          = byte ptr -69h
.text:0000000000002C70 var_68          = qword ptr -68h
.text:0000000000002C70 var_60          = qword ptr -60h
.text:0000000000002C70 wc              = dword ptr -4Ch
.text:0000000000002C70 var_48          = qword ptr -48h
.text:0000000000002C70 var_40          = qword ptr -40h
.text:0000000000002C70 arg_0           = qword ptr  8
.text:0000000000002C70 arg_8           = qword ptr  10h
.text:0000000000002C70 arg_10          = qword ptr  18h
.text:0000000000002C70
.text:0000000000002C70 ; __unwind {
.text:0000000000002C70                 push    r15
.text:0000000000002C72                 push    r14
.text:0000000000002C74                 mov     r15d, r8d
.text:0000000000002C77                 push    r13
.text:0000000000002C79                 push    r12
.text:0000000000002C7B                 mov     r14, rdi
.text:0000000000002C7E                 push    rbp
.text:0000000000002C7F                 push    rbx
.text:0000000000002C80                 mov     ebx, r9d
.text:0000000000002C83                 mov     r13, rsi
.text:0000000000002C86                 mov     rbp, rcx
.text:0000000000002C89                 and     ebx, 2
.text:0000000000002C8C                 sub     rsp, 0B8h
.text:0000000000002C93                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002C9B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002CA0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002CA5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002CAA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002CAF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002CB7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002CBC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002CC4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002CC9                 mov     rax, fs:28h
.text:0000000000002CD2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002CDA                 xor     eax, eax
.text:0000000000002CDC                 call    ___ctype_get_mb_cur_max
.text:0000000000002CE1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002CE5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002CEA                 ja      def_2D01        ; jumptable 00000000000121F1 default case
.text:0000000000002CF0                 lea     rcx, jpt_2D01
.text:0000000000002CF7                 mov     edx, r15d
.text:0000000000002CFA                 movsxd  rax, ds:(jpt_2D01 - 5C00h)[rcx+rdx*4]
.text:0000000000002CFE                 add     rax, rcx
.text:0000000000002D01                 jmp     rax             ; switch jump
.text:0000000000002D03 ; ---------------------------------------------------------------------------
.text:0000000000002D03
.text:0000000000002D03 loc_2D03:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D03                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002D03                                         ; DATA XREF: ...
.text:0000000000002D03                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002D08                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D0D                 xor     r12d, r12d
.text:0000000000002D10                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D19                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002D1E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002D23
.text:0000000000002D23 loc_2D23:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002D23                 lea     rax, asc_5B9D   ; "'"
.text:0000000000002D2A                 mov     [rsp+0E8h+n], 1
.text:0000000000002D33                 xor     r15d, r15d
.text:0000000000002D36                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D3E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002D43
.text:0000000000002D43 loc_2D43:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002D43                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002D43                 xor     r11d, r11d
.text:0000000000002D46                 mov     rax, rbp
.text:0000000000002D49                 mov     r8d, r12d
.text:0000000000002D4C                 mov     rbp, r11
.text:0000000000002D4F                 mov     r11, rax
.text:0000000000002D52                 nop     word ptr [rax+rax+00h]
.text:0000000000002D58
.text:0000000000002D58 loc_2D58:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002D58                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002D58                 cmp     r11, rbp
.text:0000000000002D5B                 setnz   r12b
.text:0000000000002D5F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D63                 jnz     short loc_2D72
.text:0000000000002D65                 mov     rax, [rsp+0E8h+s]
.text:0000000000002D6A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002D6E                 setnz   r12b
.text:0000000000002D72
.text:0000000000002D72 loc_2D72:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002D72                 test    r12b, r12b
.text:0000000000002D75                 jz      loc_33D0
.text:0000000000002D7B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D80                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002D85                 lea     r9, [rdi+rbp]
.text:0000000000002D89                 setnz   al
.text:0000000000002D8C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002D90                 mov     r10d, eax
.text:0000000000002D93                 jz      loc_2E40
.text:0000000000002D99                 mov     rax, [rsp+0E8h+n]
.text:0000000000002D9E                 test    rax, rax
.text:0000000000002DA1                 jz      loc_31D0
.text:0000000000002DA7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002DAB                 lea     rbx, [rbp+rax+0]
.text:0000000000002DB0                 jnz     short loc_2DE0
.text:0000000000002DB2                 cmp     rax, 1
.text:0000000000002DB6                 jbe     short loc_2DE0
.text:0000000000002DB8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002DBD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002DC2                 mov     [rsp+0E8h+ps], r9
.text:0000000000002DC7                 call    _strlen
.text:0000000000002DCC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002DD2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002DD8                 mov     r11, rax
.text:0000000000002DDB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002DE0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002DE0                 cmp     rbx, r11
.text:0000000000002DE3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002DE8                 ja      loc_33A0
.text:0000000000002DEE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002DF3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002DF8                 mov     rdi, r9         ; s1
.text:0000000000002DFB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002E00                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002E05                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002E0A                 call    _memcmp
.text:0000000000002E0F                 test    eax, eax
.text:0000000000002E11                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002E16                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002E1C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002E21                 jnz     loc_33A0
.text:0000000000002E27                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002E2C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002E32                 jnz     loc_3DB5
.text:0000000000002E38                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002E40                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002E40                 movzx   ebx, byte ptr [r9]
.text:0000000000002E44                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002E47                 ja      def_2E5E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002E4D                 lea     rcx, jpt_2E5E
.text:0000000000002E54                 movzx   edx, bl
.text:0000000000002E57                 movsxd  rax, ds:(jpt_2E5E - 5C2Ch)[rcx+rdx*4]
.text:0000000000002E5B                 add     rax, rcx
.text:0000000000002E5E                 jmp     rax             ; switch jump
.text:0000000000002E60 ; ---------------------------------------------------------------------------
.text:0000000000002E60
.text:0000000000002E60 loc_2E60:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002E60                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000002E60                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002E63
.text:0000000000002E63 loc_2E63:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E63                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000002E63                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002E67                 setnz   al
.text:0000000000002E6A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E6E                 jnz     short loc_2E7C
.text:0000000000002E70                 mov     rax, [rsp+0E8h+s]
.text:0000000000002E75                 cmp     byte ptr [rax+1], 0
.text:0000000000002E79                 setnz   al
.text:0000000000002E7C
.text:0000000000002E7C loc_2E7C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002E7C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E81                 setz    dl
.text:0000000000002E84                 test    al, al
.text:0000000000002E86                 jz      loc_30D8
.text:0000000000002E8C
.text:0000000000002E8C loc_2E8C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002E8C                 xor     r12d, r12d
.text:0000000000002E8F                 xor     eax, eax
.text:0000000000002E91                 nop     dword ptr [rax+00000000h]
.text:0000000000002E98
.text:0000000000002E98 loc_2E98:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002E98                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002E98                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002E9D                 jnz     loc_2FB2
.text:0000000000002EA3                 test    dl, dl
.text:0000000000002EA5                 jnz     loc_2FB2
.text:0000000000002EAB
.text:0000000000002EAB loc_2EAB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002EAB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002EB0                 test    rsi, rsi
.text:0000000000002EB3                 jz      short loc_2EC9
.text:0000000000002EB5                 mov     edx, ebx
.text:0000000000002EB7                 shr     dl, 5
.text:0000000000002EBA                 movzx   edx, dl
.text:0000000000002EBD                 mov     edx, [rsi+rdx*4]
.text:0000000000002EC0                 bt      edx, ebx
.text:0000000000002EC3                 jb      loc_3013
.text:0000000000002EC9
.text:0000000000002EC9 loc_2EC9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002EC9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002EC9                 test    r10b, r10b
.text:0000000000002ECC                 jnz     loc_3013
.text:0000000000002ED2                 xor     eax, 1
.text:0000000000002ED5                 add     rbp, 1
.text:0000000000002ED9                 and     eax, r8d
.text:0000000000002EDC
.text:0000000000002EDC loc_2EDC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002EDC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002EDC                 test    al, al
.text:0000000000002EDE                 jz      short loc_2F00
.text:0000000000002EE0                 cmp     r13, r15
.text:0000000000002EE3                 jbe     short loc_2EEA
.text:0000000000002EE5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002EEA
.text:0000000000002EEA loc_2EEA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002EEA                 lea     rax, [r15+1]
.text:0000000000002EEE                 cmp     r13, rax
.text:0000000000002EF1                 jbe     short loc_2EF9
.text:0000000000002EF3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002EF9
.text:0000000000002EF9 loc_2EF9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002EF9                 add     r15, 2
.text:0000000000002EFD                 xor     r8d, r8d
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002F00                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002F00                 cmp     r15, r13
.text:0000000000002F03                 jnb     short loc_2F09
.text:0000000000002F05                 mov     [r14+r15], bl
.text:0000000000002F09
.text:0000000000002F09 loc_2F09:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002F09                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002F0E                 add     r15, 1
.text:0000000000002F12                 mov     eax, 0
.text:0000000000002F17                 test    r12b, r12b
.text:0000000000002F1A                 cmovz   edi, eax
.text:0000000000002F1D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002F22                 jmp     loc_2D58
.text:0000000000002F22 ; ---------------------------------------------------------------------------
.text:0000000000002F27                 align 10h
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002F30                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000002F30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002F33
.text:0000000000002F33 loc_2F33:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F33                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000002F33                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002F37                 cmp     eax, 2
.text:0000000000002F3A                 jz      loc_34F8
.text:0000000000002F40                 cmp     eax, 5
.text:0000000000002F43                 jz      loc_34B8
.text:0000000000002F49                 cmp     eax, 2
.text:0000000000002F4C                 mov     ebx, 3Fh ; '?'
.text:0000000000002F51                 setz    dl
.text:0000000000002F54                 xor     r12d, r12d
.text:0000000000002F57                 xor     eax, eax
.text:0000000000002F59                 jmp     loc_2E98
.text:0000000000002F59 ; ---------------------------------------------------------------------------
.text:0000000000002F5E                 align 20h
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002F60                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000002F60                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002F63
.text:0000000000002F63 loc_2F63:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F63                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000002F63                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002F68                 jz      loc_3470
.text:0000000000002F6E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002F73                 xor     edx, edx
.text:0000000000002F75                 xor     eax, eax
.text:0000000000002F77                 mov     ebx, 27h ; '''
.text:0000000000002F7C                 jmp     loc_2E98
.text:0000000000002F7C ; ---------------------------------------------------------------------------
.text:0000000000002F81                 align 8
.text:0000000000002F88
.text:0000000000002F88 loc_2F88:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F88                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000002F88                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002F8D                 mov     ebx, 74h ; 't'
.text:0000000000002F92
.text:0000000000002F92 loc_2F92:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002F92                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002F92                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F97                 setz    al
.text:0000000000002F9A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002F9E                 jnz     loc_30EE
.text:0000000000002FA4
.text:0000000000002FA4 loc_2FA4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002FA4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002FA4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002FA9                 jnz     short loc_3010
.text:0000000000002FAB
.text:0000000000002FAB loc_2FAB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002FAB                 mov     ebx, edx
.text:0000000000002FAD                 xor     r12d, r12d
.text:0000000000002FB0                 xor     eax, eax
.text:0000000000002FB2
.text:0000000000002FB2 loc_2FB2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002FB2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002FB2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FB7                 jnz     loc_2EAB
.text:0000000000002FBD                 jmp     loc_2EC9
.text:0000000000002FBD ; ---------------------------------------------------------------------------
.text:0000000000002FC2                 align 8
.text:0000000000002FC8
.text:0000000000002FC8 loc_2FC8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002FC8                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000002FC8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002FCD                 mov     ebx, 62h ; 'b'
.text:0000000000002FD2                 jmp     short loc_2FA4
.text:0000000000002FD2 ; ---------------------------------------------------------------------------
.text:0000000000002FD4                 align 8
.text:0000000000002FD8
.text:0000000000002FD8 loc_2FD8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002FD8                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000002FD8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002FDD                 jz      loc_33B0
.text:0000000000002FE3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002FE8                 jz      loc_3200
.text:0000000000002FEE
.text:0000000000002FEE loc_2FEE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002FEE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FF3                 jz      loc_3200
.text:0000000000002FF9                 cmp     [rsp+0E8h+n], 0
.text:0000000000002FFF                 jnz     loc_33BB
.text:0000000000003005                 mov     ebx, 5Ch ; '\'
.text:000000000000300A                 nop     word ptr [rax+rax+00h]
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003010                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003010                 xor     r12d, r12d
.text:0000000000003013
.text:0000000000003013 loc_3013:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003013                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003013                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003018                 setz    dl
.text:000000000000301B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003020                 mov     eax, edx
.text:0000000000003022                 jnz     loc_3878
.text:0000000000003028                 mov     eax, r8d
.text:000000000000302B                 xor     eax, 1
.text:000000000000302E                 and     al, dl
.text:0000000000003030                 jz      short loc_3061
.text:0000000000003032                 cmp     r13, r15
.text:0000000000003035                 jbe     short loc_303C
.text:0000000000003037                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000303C
.text:000000000000303C loc_303C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000303C                 lea     rdx, [r15+1]
.text:0000000000003040                 cmp     r13, rdx
.text:0000000000003043                 jbe     short loc_304B
.text:0000000000003045                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000304B
.text:000000000000304B loc_304B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000304B                 lea     rdx, [r15+2]
.text:000000000000304F                 cmp     r13, rdx
.text:0000000000003052                 jbe     short loc_305A
.text:0000000000003054                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000305A
.text:000000000000305A loc_305A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000305A                 add     r15, 3
.text:000000000000305E                 mov     r8d, eax
.text:0000000000003061
.text:0000000000003061 loc_3061:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003061                 cmp     r13, r15
.text:0000000000003064                 jbe     short loc_306B
.text:0000000000003066                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000306B
.text:000000000000306B loc_306B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000306B                 add     r15, 1
.text:000000000000306F                 add     rbp, 1
.text:0000000000003073                 jmp     loc_2F00
.text:0000000000003073 ; ---------------------------------------------------------------------------
.text:0000000000003078                 align 20h
.text:0000000000003080
.text:0000000000003080 loc_3080:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003080                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000003080                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003085                 jnz     loc_3253
.text:000000000000308B                 xor     edx, edx
.text:000000000000308D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003092                 jz      loc_2FAB
.text:0000000000003098                 add     rbp, 1
.text:000000000000309C                 jmp     loc_2D58
.text:000000000000309C ; ---------------------------------------------------------------------------
.text:00000000000030A1                 align 8
.text:00000000000030A8
.text:00000000000030A8 loc_30A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030A8                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:00000000000030A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000030AD                 setz    dl
.text:00000000000030B0                 xor     eax, eax
.text:00000000000030B2                 jmp     loc_2E98
.text:00000000000030B2 ; ---------------------------------------------------------------------------
.text:00000000000030B7                 align 20h
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030C0                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:00000000000030C0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000030C5                 mov     ebx, 61h ; 'a'
.text:00000000000030CA                 jmp     loc_2FA4
.text:00000000000030CA ; ---------------------------------------------------------------------------
.text:00000000000030CF                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030D0                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:00000000000030D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000030D5                 setz    dl
.text:00000000000030D8
.text:00000000000030D8 loc_30D8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000030D8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000030D8                 test    rbp, rbp
.text:00000000000030DB                 jnz     loc_2E8C
.text:00000000000030E1
.text:00000000000030E1 loc_30E1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000030E1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000030E1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000030E6                 and     al, dl
.text:00000000000030E8                 jz      loc_2E98
.text:00000000000030EE
.text:00000000000030EE loc_30EE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000030EE                 mov     rbp, r11
.text:00000000000030F1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000030F9                 jmp     loc_37F9
.text:00000000000030F9 ; ---------------------------------------------------------------------------
.text:00000000000030FE                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003100                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000003100                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003105                 setz    dl
.text:0000000000003108                 xor     r12d, r12d
.text:000000000000310B                 jmp     short loc_30E1
.text:000000000000310B ; ---------------------------------------------------------------------------
.text:000000000000310D                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003110                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000003110                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003115                 mov     ebx, 20h ; ' '
.text:000000000000311A                 setz    dl
.text:000000000000311D                 jmp     short loc_30E1
.text:000000000000311D ; ---------------------------------------------------------------------------
.text:000000000000311F                 align 20h
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003120                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000003120                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003125                 mov     ebx, 72h ; 'r'
.text:000000000000312A                 jmp     loc_2F92
.text:000000000000312A ; ---------------------------------------------------------------------------
.text:000000000000312F                 align 10h
.text:0000000000003130
.text:0000000000003130 loc_3130:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003130                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000003130                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003135                 mov     ebx, 66h ; 'f'
.text:000000000000313A                 jmp     loc_2FA4
.text:000000000000313A ; ---------------------------------------------------------------------------
.text:000000000000313F                 align 20h
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003140                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000003140                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003145                 mov     ebx, 76h ; 'v'
.text:000000000000314A                 jmp     loc_2FA4
.text:000000000000314A ; ---------------------------------------------------------------------------
.text:000000000000314F                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003150                                         ; DATA XREF: .rodata:jpt_2E5E↓o
.text:0000000000003150                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003155                 mov     ebx, 6Eh ; 'n'
.text:000000000000315A                 jmp     loc_2F92
.text:000000000000315A ; ---------------------------------------------------------------------------
.text:000000000000315F                 align 20h
.text:0000000000003160
.text:0000000000003160 def_31EA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003160                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003160                                         ; DATA XREF: ...
.text:0000000000003160                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003163                 nop     dword ptr [rax+rax+00h]
.text:0000000000003168
.text:0000000000003168 def_2E5E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003168                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003168                                         ; DATA XREF: ...
.text:0000000000003168                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000316E                 jnz     loc_3518
.text:0000000000003174                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003179                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000317E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003183                 call    ___ctype_b_loc
.text:0000000000003188                 mov     rcx, [rax]
.text:000000000000318B                 movzx   edx, bl
.text:000000000000318E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003194                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000319A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000319F                 mov     edi, 1
.text:00000000000031A4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000031A8                 and     ax, 4000h
.text:00000000000031AC                 setnz   r12b
.text:00000000000031B0                 setz    al
.text:00000000000031B3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000031B7
.text:00000000000031B7 loc_31B7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000031B7                 test    al, al
.text:00000000000031B9                 jnz     loc_3B51
.text:00000000000031BF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031C4                 setz    dl
.text:00000000000031C7                 jmp     loc_2E98
.text:00000000000031C7 ; ---------------------------------------------------------------------------
.text:00000000000031CC                 align 10h
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000031D0                 movzx   ebx, byte ptr [r9]
.text:00000000000031D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000031D7                 ja      short def_31EA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000031D9                 lea     rcx, jpt_31EA
.text:00000000000031E0                 movzx   edx, bl
.text:00000000000031E3                 movsxd  rax, ds:(jpt_31EA - 5E28h)[rcx+rdx*4]
.text:00000000000031E7                 add     rax, rcx
.text:00000000000031EA                 jmp     rax             ; switch jump
.text:00000000000031EA ; ---------------------------------------------------------------------------
.text:00000000000031EC                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031F0                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:00000000000031F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000031F3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000031F8                 jnz     loc_2FEE
.text:00000000000031FE                 xchg    ax, ax
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003200                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003200                 mov     edx, 5Ch ; '\'
.text:0000000000003205                 mov     ebx, 5Ch ; '\'
.text:000000000000320A                 jmp     loc_2FA4
.text:000000000000320A ; ---------------------------------------------------------------------------
.text:000000000000320F                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003210                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003210                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003215                 xor     r10d, r10d
.text:0000000000003218                 mov     ebx, 66h ; 'f'
.text:000000000000321D                 jmp     loc_2FA4
.text:000000000000321D ; ---------------------------------------------------------------------------
.text:0000000000003222                 align 8
.text:0000000000003228
.text:0000000000003228 loc_3228:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003228                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003228                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000322D                 xor     r10d, r10d
.text:0000000000003230                 mov     ebx, 6Eh ; 'n'
.text:0000000000003235                 jmp     loc_2F92
.text:0000000000003235 ; ---------------------------------------------------------------------------
.text:000000000000323A                 align 20h
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003240                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003240                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003245                 jmp     loc_3010
.text:0000000000003245 ; ---------------------------------------------------------------------------
.text:000000000000324A                 align 10h
.text:0000000000003250
.text:0000000000003250 loc_3250:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003250                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003250                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003253
.text:0000000000003253 loc_3253:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003253                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003258                 setz    dl
.text:000000000000325B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003260                 jnz     loc_3DFA
.text:0000000000003266                 mov     eax, r8d
.text:0000000000003269                 mov     rcx, r15
.text:000000000000326C                 xor     eax, 1
.text:000000000000326F                 and     al, dl
.text:0000000000003271                 jz      short loc_32A0
.text:0000000000003273                 cmp     r13, r15
.text:0000000000003276                 jbe     short loc_327D
.text:0000000000003278                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000327D
.text:000000000000327D loc_327D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000327D                 lea     rcx, [r15+1]
.text:0000000000003281                 cmp     r13, rcx
.text:0000000000003284                 jbe     short loc_328C
.text:0000000000003286                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000328C
.text:000000000000328C loc_328C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000328C                 lea     rcx, [r15+2]
.text:0000000000003290                 cmp     r13, rcx
.text:0000000000003293                 ja      loc_38C9
.text:0000000000003299
.text:0000000000003299 loc_3299:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003299                 lea     rcx, [r15+3]
.text:000000000000329D                 mov     r8d, eax
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000032A0                 cmp     r13, rcx
.text:00000000000032A3                 jbe     short loc_32AA
.text:00000000000032A5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000032AA
.text:00000000000032AA loc_32AA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000032AA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000032AF                 lea     r15, [rcx+1]
.text:00000000000032B3                 jz      loc_38B9
.text:00000000000032B9                 lea     rax, [rbp+1]
.text:00000000000032BD                 cmp     rax, r11
.text:00000000000032C0                 jnb     short loc_32DB
.text:00000000000032C2                 mov     rax, [rsp+0E8h+s]
.text:00000000000032C7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000032CC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000032D0                 sub     eax, 30h ; '0'
.text:00000000000032D3                 cmp     al, 9
.text:00000000000032D5                 jbe     loc_3B09
.text:00000000000032DB
.text:00000000000032DB loc_32DB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000032DB                 mov     eax, r12d
.text:00000000000032DE                 mov     ebx, 30h ; '0'
.text:00000000000032E3                 xor     r12d, r12d
.text:00000000000032E6                 jmp     loc_2E98
.text:00000000000032E6 ; ---------------------------------------------------------------------------
.text:00000000000032EB                 align 10h
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032F0                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:00000000000032F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000032F5                 mov     r12d, r10d
.text:00000000000032F8                 setz    dl
.text:00000000000032FB                 xor     r10d, r10d
.text:00000000000032FE                 xor     eax, eax
.text:0000000000003300                 jmp     loc_2E98
.text:0000000000003300 ; ---------------------------------------------------------------------------
.text:0000000000003305                 align 8
.text:0000000000003308
.text:0000000000003308 loc_3308:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003308                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003308                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000330D                 setz    dl
.text:0000000000003310                 xor     r10d, r10d
.text:0000000000003313                 jmp     loc_30D8
.text:0000000000003313 ; ---------------------------------------------------------------------------
.text:0000000000003318                 align 20h
.text:0000000000003320
.text:0000000000003320 loc_3320:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003320                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003320                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003325                 setz    dl
.text:0000000000003328                 xor     r10d, r10d
.text:000000000000332B                 xor     r12d, r12d
.text:000000000000332E                 jmp     loc_30E1
.text:000000000000332E ; ---------------------------------------------------------------------------
.text:0000000000003333                 align 8
.text:0000000000003338
.text:0000000000003338 loc_3338:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003338                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003338                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000333D                 mov     r12d, r10d
.text:0000000000003340                 mov     ebx, 20h ; ' '
.text:0000000000003345                 setz    dl
.text:0000000000003348                 xor     r10d, r10d
.text:000000000000334B                 jmp     loc_30E1
.text:0000000000003350 ; ---------------------------------------------------------------------------
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003350                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003350                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003355                 xor     r10d, r10d
.text:0000000000003358                 mov     ebx, 72h ; 'r'
.text:000000000000335D                 jmp     loc_2F92
.text:000000000000335D ; ---------------------------------------------------------------------------
.text:0000000000003362                 align 8
.text:0000000000003368
.text:0000000000003368 loc_3368:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003368                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003368                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000336D                 jmp     loc_3010
.text:000000000000336D ; ---------------------------------------------------------------------------
.text:0000000000003372                 align 8
.text:0000000000003378
.text:0000000000003378 loc_3378:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003378                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003378                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000337D                 xor     r10d, r10d
.text:0000000000003380                 mov     ebx, 74h ; 't'
.text:0000000000003385                 jmp     loc_2F92
.text:0000000000003385 ; ---------------------------------------------------------------------------
.text:000000000000338A                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003390                                         ; DATA XREF: .rodata:jpt_31EA↓o
.text:0000000000003390                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003395                 jmp     loc_3010
.text:0000000000003395 ; ---------------------------------------------------------------------------
.text:000000000000339A                 align 20h
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000033A0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000033A0                 xor     r10d, r10d
.text:00000000000033A3                 jmp     loc_2E40
.text:00000000000033A3 ; ---------------------------------------------------------------------------
.text:00000000000033A8                 align 10h
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000033B0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000033B5                 jnz     loc_3D20
.text:00000000000033BB
.text:00000000000033BB loc_33BB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000033BB                 add     rbp, 1
.text:00000000000033BF                 mov     eax, r8d
.text:00000000000033C2                 xor     r12d, r12d
.text:00000000000033C5                 mov     ebx, 5Ch ; '\'
.text:00000000000033CA                 jmp     loc_2EDC
.text:00000000000033CA ; ---------------------------------------------------------------------------
.text:00000000000033CF                 align 10h
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000033D0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000033D5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000033DA                 mov     r12d, r8d
.text:00000000000033DD                 mov     rbp, r11
.text:00000000000033E0                 setz    dl
.text:00000000000033E3                 mov     eax, ebx
.text:00000000000033E5                 test    r15, r15
.text:00000000000033E8                 setz    cl
.text:00000000000033EB                 and     eax, edx
.text:00000000000033ED                 and     al, cl
.text:00000000000033EF                 jnz     loc_3E56
.text:00000000000033F5                 mov     eax, ebx
.text:00000000000033F7                 xor     eax, 1
.text:00000000000033FA                 and     dl, al
.text:00000000000033FC                 jz      loc_3D6C
.text:0000000000003402                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003407                 jz      loc_3D6A
.text:000000000000340D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003412                 jnz     loc_3E0D
.text:0000000000003418                 test    r13, r13
.text:000000000000341B                 setz    al
.text:000000000000341E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003424                 setnz   dl
.text:0000000000003427                 and     al, dl
.text:0000000000003429                 jz      loc_3E4C
.text:000000000000342F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003434
.text:0000000000003434 loc_3434:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003434                 lea     rbx, asc_5B9D   ; "'"
.text:000000000000343B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000343F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003447                 mov     r15d, 1
.text:000000000000344D                 mov     [rsp+0E8h+n], 1
.text:0000000000003456                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000345B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003460                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003464                 jmp     loc_2D43
.text:0000000000003464 ; ---------------------------------------------------------------------------
.text:0000000000003469                 align 10h
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003470                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003475                 jnz     loc_3D20
.text:000000000000347B                 test    r13, r13
.text:000000000000347E                 jz      loc_3880
.text:0000000000003484                 xor     edx, edx
.text:0000000000003486                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000348C                 jnz     loc_3880
.text:0000000000003492
.text:0000000000003492 loc_3492:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003492                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003492                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003497                 add     r15, 3
.text:000000000000349B                 xor     eax, eax
.text:000000000000349D                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000034A2                 xor     r8d, r8d
.text:00000000000034A5                 mov     r13, rdx
.text:00000000000034A8                 mov     ebx, 27h ; '''
.text:00000000000034AD                 jmp     loc_2EC9
.text:00000000000034AD ; ---------------------------------------------------------------------------
.text:00000000000034B2                 align 8
.text:00000000000034B8
.text:00000000000034B8 loc_34B8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000034B8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000034BD                 jz      short loc_34E0
.text:00000000000034BF                 lea     rcx, [rbp+2]
.text:00000000000034C3                 cmp     rcx, r11
.text:00000000000034C6                 jnb     short loc_34E0
.text:00000000000034C8                 mov     rax, [rsp+0E8h+s]
.text:00000000000034CD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000034D2                 jz      loc_3C62
.text:00000000000034D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000034E0
.text:00000000000034E0 loc_34E0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000034E0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000034E0                 xor     edx, edx
.text:00000000000034E2                 xor     r12d, r12d
.text:00000000000034E5                 xor     eax, eax
.text:00000000000034E7                 mov     ebx, 3Fh ; '?'
.text:00000000000034EC                 jmp     loc_2E98
.text:00000000000034EC ; ---------------------------------------------------------------------------
.text:00000000000034F1                 align 8
.text:00000000000034F8
.text:00000000000034F8 loc_34F8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000034F8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034FD                 jnz     loc_3D20
.text:0000000000003503                 xor     r12d, r12d
.text:0000000000003506                 xor     eax, eax
.text:0000000000003508                 mov     ebx, 3Fh ; '?'
.text:000000000000350D                 jmp     loc_2EC9
.text:000000000000350D ; ---------------------------------------------------------------------------
.text:0000000000003512                 align 8
.text:0000000000003518
.text:0000000000003518 loc_3518:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003518                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003520                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003524                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003530                 mov     [rsp+0E8h+ps], rax
.text:0000000000003535                 jnz     short loc_3564
.text:0000000000003537                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000353C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003541                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003546                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000354B                 call    _strlen
.text:0000000000003550                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003556                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000355C                 mov     r11, rax
.text:000000000000355F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003564
.text:0000000000003564 loc_3564:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003564                 lea     rax, [rsp+0E8h+wc]
.text:000000000000356C                 xor     ecx, ecx
.text:000000000000356E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003572                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003577                 mov     rbx, rcx
.text:000000000000357A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003582                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003587                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000358C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003594                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003599                 mov     [rsp+0E8h+var_78], r13
.text:000000000000359E                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000035A3
.text:00000000000035A3 loc_35A3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000035A3                 mov     rax, [rsp+0E8h+s]
.text:00000000000035A8                 lea     r14, [rbp+rbx+0]
.text:00000000000035AD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000035B2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000035B7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000035BC                 lea     r13, [rax+r14]
.text:00000000000035C0                 sub     rdx, r14
.text:00000000000035C3                 mov     rsi, r13
.text:00000000000035C6                 call    rpl_mbrtowc
.text:00000000000035CB                 test    rax, rax
.text:00000000000035CE                 mov     r15, rax
.text:00000000000035D1                 jz      short loc_3621
.text:00000000000035D3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000035D7                 jz      loc_3BF5
.text:00000000000035DD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000035E1                 jz      loc_3B81
.text:00000000000035E7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000035EC                 setz    al
.text:00000000000035EF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000035F3                 jnz     loc_3790
.text:00000000000035F9
.text:00000000000035F9 loc_35F9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000035F9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000035F9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003600                 call    _iswprint
.text:0000000000003605                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000360A                 test    eax, eax
.text:000000000000360C                 mov     eax, 0
.text:0000000000003611                 cmovz   r12d, eax
.text:0000000000003615                 add     rbx, r15
.text:0000000000003618                 call    _mbsinit
.text:000000000000361D                 test    eax, eax
.text:000000000000361F                 jz      short loc_35A3
.text:0000000000003621
.text:0000000000003621 loc_3621:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003621                 mov     edx, r12d
.text:0000000000003624                 mov     rdi, rbx
.text:0000000000003627                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000362D                 xor     edx, 1
.text:0000000000003630                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003635                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000363B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000363F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003647                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000364C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003651                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003656
.text:0000000000003656 loc_3656:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003656                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003656                 cmp     rdi, 1
.text:000000000000365A                 jbe     loc_3C5B
.text:0000000000003660
.text:0000000000003660 loc_3660:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003660                 mov     rcx, rdi
.text:0000000000003663                 xor     esi, esi
.text:0000000000003665                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000366B                 add     rcx, rbp
.text:000000000000366E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003673                 jmp     loc_372E
.text:0000000000003673 ; ---------------------------------------------------------------------------
.text:0000000000003678                 align 20h
.text:0000000000003680
.text:0000000000003680 loc_3680:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003680                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003685                 setz    al
.text:0000000000003688                 test    r9b, r9b
.text:000000000000368B                 jnz     loc_3B40
.text:0000000000003691                 mov     esi, r8d
.text:0000000000003694                 xor     esi, 1
.text:0000000000003697                 and     al, sil
.text:000000000000369A                 jz      short loc_36CB
.text:000000000000369C                 cmp     r13, r15
.text:000000000000369F                 jbe     short loc_36A6
.text:00000000000036A1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000036A6
.text:00000000000036A6 loc_36A6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000036A6                 lea     rsi, [r15+1]
.text:00000000000036AA                 cmp     r13, rsi
.text:00000000000036AD                 jbe     short loc_36B5
.text:00000000000036AF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000036B5
.text:00000000000036B5 loc_36B5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000036B5                 lea     rsi, [r15+2]
.text:00000000000036B9                 cmp     r13, rsi
.text:00000000000036BC                 jbe     short loc_36C4
.text:00000000000036BE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000036C4
.text:00000000000036C4 loc_36C4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000036C4                 add     r15, 3
.text:00000000000036C8                 mov     r8d, eax
.text:00000000000036CB
.text:00000000000036CB loc_36CB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000036CB                 cmp     r13, r15
.text:00000000000036CE                 jbe     short loc_36D5
.text:00000000000036D0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000036D5
.text:00000000000036D5 loc_36D5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000036D5                 lea     rax, [r15+1]
.text:00000000000036D9                 cmp     r13, rax
.text:00000000000036DC                 jbe     short loc_36EB
.text:00000000000036DE                 mov     eax, ebx
.text:00000000000036E0                 shr     al, 6
.text:00000000000036E3                 add     eax, 30h ; '0'
.text:00000000000036E6                 mov     [r14+r15+1], al
.text:00000000000036EB
.text:00000000000036EB loc_36EB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000036EB                 lea     rax, [r15+2]
.text:00000000000036EF                 cmp     r13, rax
.text:00000000000036F2                 jbe     short loc_3704
.text:00000000000036F4                 mov     eax, ebx
.text:00000000000036F6                 shr     al, 3
.text:00000000000036F9                 and     eax, 7
.text:00000000000036FC                 add     eax, 30h ; '0'
.text:00000000000036FF                 mov     [r14+r15+2], al
.text:0000000000003704
.text:0000000000003704 loc_3704:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003704                 and     ebx, 7
.text:0000000000003707                 add     rbp, 1
.text:000000000000370B                 add     r15, 3
.text:000000000000370F                 add     ebx, 30h ; '0'
.text:0000000000003712                 cmp     rbp, rcx
.text:0000000000003715                 jnb     loc_2F00
.text:000000000000371B                 mov     esi, edx
.text:000000000000371D
.text:000000000000371D loc_371D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000371D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000371D                 cmp     r13, r15
.text:0000000000003720                 jbe     short loc_3726
.text:0000000000003722                 mov     [r14+r15], bl
.text:0000000000003726
.text:0000000000003726 loc_3726:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003726                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000372A                 add     r15, 1
.text:000000000000372E
.text:000000000000372E loc_372E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000372E                 test    dl, dl
.text:0000000000003730                 jnz     loc_3680
.text:0000000000003736                 mov     eax, esi
.text:0000000000003738                 xor     eax, 1
.text:000000000000373B                 and     eax, r8d
.text:000000000000373E                 test    r10b, r10b
.text:0000000000003741                 jz      short loc_3751
.text:0000000000003743                 cmp     r13, r15
.text:0000000000003746                 jbe     short loc_374D
.text:0000000000003748                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000374D
.text:000000000000374D loc_374D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000374D                 add     r15, 1
.text:0000000000003751
.text:0000000000003751 loc_3751:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003751                 add     rbp, 1
.text:0000000000003755                 cmp     rbp, rcx
.text:0000000000003758                 jnb     loc_2EDC
.text:000000000000375E                 test    al, al
.text:0000000000003760                 jz      loc_3B5E
.text:0000000000003766                 cmp     r13, r15
.text:0000000000003769                 jbe     short loc_3770
.text:000000000000376B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003770
.text:0000000000003770 loc_3770:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003770                 lea     rax, [r15+1]
.text:0000000000003774                 cmp     r13, rax
.text:0000000000003777                 jbe     short loc_377F
.text:0000000000003779                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000377F
.text:000000000000377F loc_377F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000377F                 add     r15, 2
.text:0000000000003783                 xor     r10d, r10d
.text:0000000000003786                 xor     r8d, r8d
.text:0000000000003789                 jmp     short loc_371D
.text:0000000000003789 ; ---------------------------------------------------------------------------
.text:000000000000378B                 align 10h
.text:0000000000003790
.text:0000000000003790 loc_3790:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003790                 cmp     r15, 1
.text:0000000000003794                 jz      loc_35F9
.text:000000000000379A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000379F                 lea     rcx, [rdi+r15]
.text:00000000000037A3                 lea     rdx, [rdi+r14+1]
.text:00000000000037A8                 lea     r8, [rcx+r14]
.text:00000000000037AC                 jmp     short loc_37BD
.text:00000000000037AC ; ---------------------------------------------------------------------------
.text:00000000000037AE                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000037B0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000037B0                 add     rdx, 1
.text:00000000000037B4                 cmp     r8, rdx
.text:00000000000037B7                 jz      loc_35F9
.text:00000000000037BD
.text:00000000000037BD loc_37BD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000037BD                 movzx   ecx, byte ptr [rdx]
.text:00000000000037C0                 sub     ecx, 5Bh ; '['
.text:00000000000037C3                 cmp     cl, 21h ; '!'
.text:00000000000037C6                 ja      short loc_37B0
.text:00000000000037C8                 mov     esi, 1
.text:00000000000037CD                 shl     rsi, cl
.text:00000000000037D0                 mov     rcx, rsi
.text:00000000000037D3                 mov     rsi, 20000002Bh
.text:00000000000037DD                 test    rcx, rsi
.text:00000000000037E0                 jz      short loc_37B0
.text:00000000000037E2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000037E7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037EC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000037F1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000037F9
.text:00000000000037F9 loc_37F9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000037F9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000037F9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000037FE                 jz      short loc_3810
.text:0000000000003800                 test    al, al
.text:0000000000003802                 mov     eax, 4
.text:0000000000003807                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000380C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003810
.text:0000000000003810 loc_3810:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003810                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003810                 sub     rsp, 8
.text:0000000000003814                 mov     rcx, rbp
.text:0000000000003817                 mov     rsi, r13
.text:000000000000381A                 push    [rsp+0F0h+var_88]
.text:000000000000381E                 push    [rsp+0F8h+var_80]
.text:0000000000003822                 mov     rdi, r14
.text:0000000000003825                 push    0
.text:0000000000003827                 mov     r9d, [rsp+108h+var_70]
.text:000000000000382F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003834                 mov     rdx, [rsp+108h+s]
.text:0000000000003839                 and     r9d, 0FFFFFFFDh
.text:000000000000383D                 call    quotearg_buffer_restyled
.text:0000000000003842                 add     rsp, 20h
.text:0000000000003846                 mov     r15, rax
.text:0000000000003849
.text:0000000000003849 loc_3849:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003849                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003849                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003851                 xor     rbx, fs:28h
.text:000000000000385A                 mov     rax, r15
.text:000000000000385D                 jnz     loc_3E63
.text:0000000000003863                 add     rsp, 0B8h
.text:000000000000386A                 pop     rbx
.text:000000000000386B                 pop     rbp
.text:000000000000386C                 pop     r12
.text:000000000000386E                 pop     r13
.text:0000000000003870                 pop     r14
.text:0000000000003872                 pop     r15
.text:0000000000003874                 retn
.text:0000000000003874 ; ---------------------------------------------------------------------------
.text:0000000000003875                 align 8
.text:0000000000003878
.text:0000000000003878 loc_3878:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003878                 mov     rbp, r11
.text:000000000000387B                 jmp     loc_37F9
.text:0000000000003880 ; ---------------------------------------------------------------------------
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003880                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003880                 cmp     r13, r15
.text:0000000000003883                 jbe     short loc_388A
.text:0000000000003885                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000388A
.text:000000000000388A loc_388A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000388A                 lea     rax, [r15+1]
.text:000000000000388E                 cmp     r13, rax
.text:0000000000003891                 jbe     short loc_3899
.text:0000000000003893                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003899
.text:0000000000003899 loc_3899:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003899                 lea     rax, [r15+2]
.text:000000000000389D                 cmp     r13, rax
.text:00000000000038A0                 jbe     loc_3E92
.text:00000000000038A6                 mov     rdx, r13
.text:00000000000038A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000038AF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000038B4                 jmp     loc_3492
.text:00000000000038B9 ; ---------------------------------------------------------------------------
.text:00000000000038B9
.text:00000000000038B9 loc_38B9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000038B9                 mov     eax, r12d
.text:00000000000038BC                 mov     ebx, 30h ; '0'
.text:00000000000038C1                 xor     r12d, r12d
.text:00000000000038C4                 jmp     loc_2EC9
.text:00000000000038C9 ; ---------------------------------------------------------------------------
.text:00000000000038C9
.text:00000000000038C9 loc_38C9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000038C9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000038CF                 jmp     loc_3299
.text:00000000000038D4 ; ---------------------------------------------------------------------------
.text:00000000000038D4
.text:00000000000038D4 loc_38D4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000038D4                                         ; DATA XREF: .rodata:jpt_2D01↓o
.text:00000000000038D4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000038D6                 jnz     loc_2D03        ; jumptable 00000000000121F1 case 1
.text:00000000000038DC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000038E1
.text:00000000000038E1 loc_38E1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000038E1                 test    r13, r13
.text:00000000000038E4                 jnz     loc_3E7A
.text:00000000000038EA                 lea     rax, asc_5B9D   ; "'"
.text:00000000000038F1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038FA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038FF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003904                 xor     r12d, r12d
.text:0000000000003907                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000390C                 mov     [rsp+0E8h+n], 1
.text:0000000000003915                 mov     [rsp+0E8h+s2], rax
.text:000000000000391A                 mov     r15d, 1
.text:0000000000003920                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003928                 jmp     loc_2D43
.text:0000000000003928 ; ---------------------------------------------------------------------------
.text:000000000000392D                 align 10h
.text:0000000000003930
.text:0000000000003930 loc_3930:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003930                                         ; DATA XREF: .rodata:jpt_2D01↓o
.text:0000000000003930                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003932                 jnz     loc_3D2D
.text:0000000000003938                 test    r13, r13
.text:000000000000393B                 jz      loc_3B66
.text:0000000000003941                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003945                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000394A                 xor     r12d, r12d
.text:000000000000394D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003952                 mov     [rsp+0E8h+var_98], 0
.text:000000000000395B
.text:000000000000395B loc_395B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000395B                 lea     rax, unk_5B9B
.text:0000000000003962                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003967                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000396C                 mov     [rsp+0E8h+n], 1
.text:0000000000003975                 mov     r15d, 1
.text:000000000000397B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003980                 jmp     loc_2D43
.text:0000000000003985 ; ---------------------------------------------------------------------------
.text:0000000000003985
.text:0000000000003985 loc_3985:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003985                                         ; DATA XREF: .rodata:jpt_2D01↓o
.text:0000000000003985                 lea     rax, unk_5B9B   ; jumptable 00000000000121F1 case 6
.text:000000000000398C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003991                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003996                 xor     r12d, r12d
.text:0000000000003999                 mov     [rsp+0E8h+var_98], 0
.text:00000000000039A2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000039A7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000039AC                 mov     [rsp+0E8h+n], 1
.text:00000000000039B5                 xor     r15d, r15d
.text:00000000000039B8                 mov     [rsp+0E8h+s2], rax
.text:00000000000039BD                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000039C5                 jmp     loc_2D43
.text:00000000000039CA ; ---------------------------------------------------------------------------
.text:00000000000039CA
.text:00000000000039CA loc_39CA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000039CA                                         ; DATA XREF: .rodata:jpt_2D01↓o
.text:00000000000039CA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000039CF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000039D4                 xor     r12d, r12d
.text:00000000000039D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000039E0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000039E5                 xor     r15d, r15d
.text:00000000000039E8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000039ED                 mov     [rsp+0E8h+n], 0
.text:00000000000039F6                 mov     [rsp+0E8h+s2], 0
.text:00000000000039FF                 jmp     loc_2D43
.text:0000000000003A04 ; ---------------------------------------------------------------------------
.text:0000000000003A04
.text:0000000000003A04 loc_3A04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A04                                         ; DATA XREF: .rodata:jpt_2D01↓o
.text:0000000000003A04                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003A09                 jz      short loc_3A61
.text:0000000000003A0B                 lea     rsi, asc_5B9F   ; "`"
.text:0000000000003A12                 xor     edi, edi        ; domainname
.text:0000000000003A14                 mov     edx, 5          ; category
.text:0000000000003A19                 call    _dcgettext
.text:0000000000003A1E                 mov     rcx, rax
.text:0000000000003A21                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003A26                 lea     rax, asc_5B9F   ; "`"
.text:0000000000003A2D                 cmp     rcx, rax
.text:0000000000003A30                 jz      loc_3DCE
.text:0000000000003A36
.text:0000000000003A36 loc_3A36:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003A36                 lea     rsi, asc_5B9D   ; "'"
.text:0000000000003A3D                 xor     edi, edi        ; domainname
.text:0000000000003A3F                 mov     edx, 5          ; category
.text:0000000000003A44                 call    _dcgettext
.text:0000000000003A49                 mov     rcx, rax
.text:0000000000003A4C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003A51                 lea     rax, asc_5B9D   ; "'"
.text:0000000000003A58                 cmp     rcx, rax
.text:0000000000003A5B                 jz      loc_3DE4
.text:0000000000003A61
.text:0000000000003A61 loc_3A61:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003A61                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003A61                 xor     r15d, r15d
.text:0000000000003A64                 test    ebx, ebx
.text:0000000000003A66                 jz      loc_3C2D
.text:0000000000003A6C
.text:0000000000003A6C loc_3A6C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003A6C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003A6C                 test    ebx, ebx
.text:0000000000003A6E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003A73                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003A78                 xor     r12d, r12d
.text:0000000000003A7B                 mov     rdi, rbx        ; s
.text:0000000000003A7E                 call    _strlen
.text:0000000000003A83                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003A88                 mov     [rsp+0E8h+n], rax
.text:0000000000003A8D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A92                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AA0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003AA5                 jmp     loc_2D43
.text:0000000000003AAA ; ---------------------------------------------------------------------------
.text:0000000000003AAA
.text:0000000000003AAA loc_3AAA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003AAA                                         ; DATA XREF: .rodata:jpt_2D01↓o
.text:0000000000003AAA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003AAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003AB4                 xor     r12d, r12d
.text:0000000000003AB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003AC5                 xor     r15d, r15d
.text:0000000000003AC8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003ACD                 mov     [rsp+0E8h+n], 0
.text:0000000000003AD6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003ADF                 jmp     loc_2D43
.text:0000000000003AE4 ; ---------------------------------------------------------------------------
.text:0000000000003AE4
.text:0000000000003AE4 loc_3AE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003AE4                                         ; DATA XREF: .rodata:jpt_2D01↓o
.text:0000000000003AE4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003AE9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003AEE                 xor     r12d, r12d
.text:0000000000003AF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AFA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003AFF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B04                 jmp     loc_2D23
.text:0000000000003B09 ; ---------------------------------------------------------------------------
.text:0000000000003B09
.text:0000000000003B09 loc_3B09:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003B09                 cmp     r13, r15
.text:0000000000003B0C                 jbe     short loc_3B13
.text:0000000000003B0E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003B13
.text:0000000000003B13 loc_3B13:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003B13                 lea     rax, [rcx+2]
.text:0000000000003B17                 cmp     r13, rax
.text:0000000000003B1A                 jbe     short loc_3B22
.text:0000000000003B1C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003B22
.text:0000000000003B22 loc_3B22:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003B22                 mov     eax, r12d
.text:0000000000003B25                 lea     r15, [rcx+3]
.text:0000000000003B29                 xor     r12d, r12d
.text:0000000000003B2C                 mov     ebx, 30h ; '0'
.text:0000000000003B31                 jmp     loc_2E98
.text:0000000000003B31 ; ---------------------------------------------------------------------------
.text:0000000000003B36                 align 20h
.text:0000000000003B40
.text:0000000000003B40 loc_3B40:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003B40                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B45                 mov     rbp, r11
.text:0000000000003B48                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003B4C                 jmp     loc_37F9
.text:0000000000003B51 ; ---------------------------------------------------------------------------
.text:0000000000003B51
.text:0000000000003B51 loc_3B51:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003B51                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003B56                 xor     r12d, r12d
.text:0000000000003B59                 jmp     loc_3660
.text:0000000000003B5E ; ---------------------------------------------------------------------------
.text:0000000000003B5E
.text:0000000000003B5E loc_3B5E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003B5E                 xor     r10d, r10d
.text:0000000000003B61                 jmp     loc_371D
.text:0000000000003B66 ; ---------------------------------------------------------------------------
.text:0000000000003B66
.text:0000000000003B66 loc_3B66:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003B66                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B6F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B74                 xor     r12d, r12d
.text:0000000000003B77                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B7C                 jmp     loc_395B
.text:0000000000003B81 ; ---------------------------------------------------------------------------
.text:0000000000003B81
.text:0000000000003B81 loc_3B81:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003B81                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003B86                 mov     rsi, r14
.text:0000000000003B89                 mov     rcx, r13
.text:0000000000003B8C                 mov     rax, rbx
.text:0000000000003B8F                 mov     rdi, rbx
.text:0000000000003B92                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003B98                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003B9D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003BA5                 cmp     rsi, r11
.text:0000000000003BA8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003BAE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003BB6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003BBB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003BC0                 jnb     short loc_3BE8
.text:0000000000003BC2                 cmp     byte ptr [rcx], 0
.text:0000000000003BC5                 jnz     short loc_3BD7
.text:0000000000003BC7                 jmp     short loc_3BE8
.text:0000000000003BC7 ; ---------------------------------------------------------------------------
.text:0000000000003BC9                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 loc_3BD0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003BD0                 cmp     byte ptr [r9+rax], 0
.text:0000000000003BD5                 jz      short loc_3BE5
.text:0000000000003BD7
.text:0000000000003BD7 loc_3BD7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003BD7                 add     rax, 1
.text:0000000000003BDB                 lea     rdx, [rbp+rax+0]
.text:0000000000003BE0                 cmp     r11, rdx
.text:0000000000003BE3                 ja      short loc_3BD0
.text:0000000000003BE5
.text:0000000000003BE5 loc_3BE5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003BE5                 mov     rdi, rax
.text:0000000000003BE8
.text:0000000000003BE8 loc_3BE8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003BE8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003BE8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003BED                 xor     r12d, r12d
.text:0000000000003BF0                 jmp     loc_3656
.text:0000000000003BF5 ; ---------------------------------------------------------------------------
.text:0000000000003BF5
.text:0000000000003BF5 loc_3BF5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003BF5                 mov     rdi, rbx
.text:0000000000003BF8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003BFE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003C03                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003C09                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003C11                 xor     r12d, r12d
.text:0000000000003C14                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003C19                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003C1E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003C23                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003C28                 jmp     loc_3656
.text:0000000000003C2D ; ---------------------------------------------------------------------------
.text:0000000000003C2D
.text:0000000000003C2D loc_3C2D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003C2D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003C32                 movzx   eax, byte ptr [rdx]
.text:0000000000003C35                 test    al, al
.text:0000000000003C37                 jz      loc_3A6C
.text:0000000000003C3D                 nop     dword ptr [rax]
.text:0000000000003C40
.text:0000000000003C40 loc_3C40:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003C40                 cmp     r13, r15
.text:0000000000003C43                 jbe     short loc_3C49
.text:0000000000003C45                 mov     [r14+r15], al
.text:0000000000003C49
.text:0000000000003C49 loc_3C49:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003C49                 add     r15, 1
.text:0000000000003C4D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003C52                 test    al, al
.text:0000000000003C54                 jnz     short loc_3C40
.text:0000000000003C56                 jmp     loc_3A6C
.text:0000000000003C5B ; ---------------------------------------------------------------------------
.text:0000000000003C5B
.text:0000000000003C5B loc_3C5B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003C5B                 mov     eax, edx
.text:0000000000003C5D                 jmp     loc_31B7
.text:0000000000003C62 ; ---------------------------------------------------------------------------
.text:0000000000003C62
.text:0000000000003C62 loc_3C62:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003C62                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003C66                 cmp     bl, 3Eh ; '>'
.text:0000000000003C69                 ja      loc_34E0
.text:0000000000003C6F                 mov     rax, 7000A38200000000h
.text:0000000000003C79                 bt      rax, rbx
.text:0000000000003C7D                 jnb     loc_34E0
.text:0000000000003C83                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C88                 jnz     loc_3E72
.text:0000000000003C8E                 cmp     r13, r15
.text:0000000000003C91                 jbe     short loc_3C98
.text:0000000000003C93                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003C98
.text:0000000000003C98 loc_3C98:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003C98                 lea     rax, [r15+1]
.text:0000000000003C9C                 cmp     r13, rax
.text:0000000000003C9F                 jbe     short loc_3CA7
.text:0000000000003CA1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003CA7
.text:0000000000003CA7 loc_3CA7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003CA7                 lea     rax, [r15+2]
.text:0000000000003CAB                 cmp     r13, rax
.text:0000000000003CAE                 jbe     short loc_3CB6
.text:0000000000003CB0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003CB6
.text:0000000000003CB6 loc_3CB6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003CB6                 lea     rax, [r15+3]
.text:0000000000003CBA                 cmp     r13, rax
.text:0000000000003CBD                 jbe     short loc_3CC5
.text:0000000000003CBF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003CC5
.text:0000000000003CC5 loc_3CC5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003CC5                 add     r15, 4
.text:0000000000003CC9                 xor     edx, edx
.text:0000000000003CCB                 xor     r12d, r12d
.text:0000000000003CCE                 xor     eax, eax
.text:0000000000003CD0                 mov     rbp, rcx
.text:0000000000003CD3                 jmp     loc_2E98
.text:0000000000003CD8 ; ---------------------------------------------------------------------------
.text:0000000000003CD8
.text:0000000000003CD8 loc_3CD8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003CD8                                         ; DATA XREF: .rodata:jpt_2D01↓o
.text:0000000000003CD8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003CDA                 jz      loc_3E68
.text:0000000000003CE0                 lea     rax, asc_5B9D   ; "'"
.text:0000000000003CE7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003CEC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CF1                 xor     r12d, r12d
.text:0000000000003CF4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CFD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003D02                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003D07                 mov     [rsp+0E8h+n], 1
.text:0000000000003D10                 xor     r15d, r15d
.text:0000000000003D13                 mov     [rsp+0E8h+s2], rax
.text:0000000000003D18                 jmp     loc_2D43
.text:0000000000003D18 ; ---------------------------------------------------------------------------
.text:0000000000003D1D                 align 20h
.text:0000000000003D20
.text:0000000000003D20 loc_3D20:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003D20                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003D20                 mov     rbp, r11
.text:0000000000003D23                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003D28                 jmp     loc_37F9
.text:0000000000003D2D ; ---------------------------------------------------------------------------
.text:0000000000003D2D
.text:0000000000003D2D loc_3D2D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003D2D                 lea     rax, unk_5B9B
.text:0000000000003D34                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003D39                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D3E                 xor     r12d, r12d
.text:0000000000003D41                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D4A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003D4F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003D54                 mov     [rsp+0E8h+n], 1
.text:0000000000003D5D                 xor     r15d, r15d
.text:0000000000003D60                 mov     [rsp+0E8h+s2], rax
.text:0000000000003D65                 jmp     loc_2D43
.text:0000000000003D6A ; ---------------------------------------------------------------------------
.text:0000000000003D6A
.text:0000000000003D6A loc_3D6A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003D6A                 mov     eax, edx
.text:0000000000003D6C
.text:0000000000003D6C loc_3D6C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003D6C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003D6C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003D71                 test    rbx, rbx
.text:0000000000003D74                 jz      short loc_3DA2
.text:0000000000003D76                 test    al, al
.text:0000000000003D78                 jz      short loc_3DA2
.text:0000000000003D7A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003D7D                 mov     rax, rbx
.text:0000000000003D80                 test    cl, cl
.text:0000000000003D82                 jz      short loc_3DA2
.text:0000000000003D84                 mov     rdx, r15
.text:0000000000003D87                 sub     rax, r15
.text:0000000000003D8A
.text:0000000000003D8A loc_3D8A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003D8A                 cmp     r13, rdx
.text:0000000000003D8D                 jbe     short loc_3D93
.text:0000000000003D8F                 mov     [r14+rdx], cl
.text:0000000000003D93
.text:0000000000003D93 loc_3D93:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003D93                 add     rdx, 1
.text:0000000000003D97                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003D9B                 test    cl, cl
.text:0000000000003D9D                 jnz     short loc_3D8A
.text:0000000000003D9F                 mov     r15, rdx
.text:0000000000003DA2
.text:0000000000003DA2 loc_3DA2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003DA2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003DA2                 cmp     r13, r15
.text:0000000000003DA5                 jbe     loc_3849
.text:0000000000003DAB                 mov     byte ptr [r14+r15], 0
.text:0000000000003DB0                 jmp     loc_3849
.text:0000000000003DB5 ; ---------------------------------------------------------------------------
.text:0000000000003DB5
.text:0000000000003DB5 loc_3DB5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003DB5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003DBA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003DBF                 mov     rbp, r11
.text:0000000000003DC2                 setz    al
.text:0000000000003DC5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003DC9                 jmp     loc_37F9
.text:0000000000003DCE ; ---------------------------------------------------------------------------
.text:0000000000003DCE
.text:0000000000003DCE loc_3DCE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003DCE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003DD2                 mov     rdi, rcx
.text:0000000000003DD5                 call    gettext_quote
.text:0000000000003DDA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003DDF                 jmp     loc_3A36
.text:0000000000003DE4 ; ---------------------------------------------------------------------------
.text:0000000000003DE4
.text:0000000000003DE4 loc_3DE4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003DE4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003DE8                 mov     rdi, rcx
.text:0000000000003DEB                 call    gettext_quote
.text:0000000000003DF0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003DF5                 jmp     loc_3A61
.text:0000000000003DFA ; ---------------------------------------------------------------------------
.text:0000000000003DFA
.text:0000000000003DFA loc_3DFA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003DFA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003DFF                 mov     rbp, r11
.text:0000000000003E02                 mov     eax, edx
.text:0000000000003E04                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003E08                 jmp     loc_37F9
.text:0000000000003E0D ; ---------------------------------------------------------------------------
.text:0000000000003E0D
.text:0000000000003E0D loc_3E0D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003E0D                 sub     rsp, 8
.text:0000000000003E11                 mov     r8d, 5
.text:0000000000003E17                 mov     rcx, r11
.text:0000000000003E1A                 push    [rsp+0F0h+var_88]
.text:0000000000003E1E                 push    [rsp+0F8h+var_80]
.text:0000000000003E22                 mov     rdi, r14
.text:0000000000003E25                 push    [rsp+100h+var_C8]
.text:0000000000003E29                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003E31                 mov     rdx, [rsp+108h+s]
.text:0000000000003E36                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003E3B                 call    quotearg_buffer_restyled
.text:0000000000003E40                 add     rsp, 20h
.text:0000000000003E44                 mov     r15, rax
.text:0000000000003E47                 jmp     loc_3849
.text:0000000000003E4C ; ---------------------------------------------------------------------------
.text:0000000000003E4C
.text:0000000000003E4C loc_3E4C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003E4C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003E51                 jmp     loc_3D6C
.text:0000000000003E56 ; ---------------------------------------------------------------------------
.text:0000000000003E56
.text:0000000000003E56 loc_3E56:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003E56                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E5E                 jmp     loc_37F9
.text:0000000000003E63 ; ---------------------------------------------------------------------------
.text:0000000000003E63
.text:0000000000003E63 loc_3E63:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003E63                 call    ___stack_chk_fail
.text:0000000000003E68 ; ---------------------------------------------------------------------------
.text:0000000000003E68
.text:0000000000003E68 loc_3E68:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003E68                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003E6D                 jmp     loc_38E1
.text:0000000000003E72 ; ---------------------------------------------------------------------------
.text:0000000000003E72
.text:0000000000003E72 loc_3E72:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003E72                 mov     rbp, r11
.text:0000000000003E75                 jmp     loc_3810
.text:0000000000003E7A ; ---------------------------------------------------------------------------
.text:0000000000003E7A
.text:0000000000003E7A loc_3E7A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003E7A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E7F                 xor     eax, eax
.text:0000000000003E81                 xor     r12d, r12d
.text:0000000000003E84                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E8D                 jmp     loc_3434
.text:0000000000003E92 ; ---------------------------------------------------------------------------
.text:0000000000003E92
.text:0000000000003E92 loc_3E92:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003E92                 mov     rdx, r13
.text:0000000000003E95                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003E9A                 jmp     loc_3492
.text:0000000000003E9F ; ---------------------------------------------------------------------------
.text:0000000000003E9F
.text:0000000000003E9F def_2D01:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003E9F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003E9F ; } // starts at 2C70
.text:0000000000003E9F quotearg_buffer_restyled endp
.text:0000000000003E9F
.text:0000000000003E9F ; ---------------------------------------------------------------------------
.text:0000000000003EA4                 align 10h
.text:0000000000003EB0
.text:0000000000003EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EB0
.text:0000000000003EB0
.text:0000000000003EB0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003EB0                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003EB0
.text:0000000000003EB0 var_50          = qword ptr -50h
.text:0000000000003EB0 var_48          = qword ptr -48h
.text:0000000000003EB0 var_40          = dword ptr -40h
.text:0000000000003EB0 var_3C          = dword ptr -3Ch
.text:0000000000003EB0
.text:0000000000003EB0 ; __unwind {
.text:0000000000003EB0                 push    r15
.text:0000000000003EB2                 push    r14
.text:0000000000003EB4                 movsxd  r15, edi
.text:0000000000003EB7                 push    r13
.text:0000000000003EB9                 push    r12
.text:0000000000003EBB                 mov     r14, rdx
.text:0000000000003EBE                 push    rbp
.text:0000000000003EBF                 push    rbx
.text:0000000000003EC0                 mov     rbp, rcx
.text:0000000000003EC3                 sub     rsp, 28h
.text:0000000000003EC7                 mov     [rsp+58h+var_50], rsi
.text:0000000000003ECC                 call    ___errno_location
.text:0000000000003ED1                 mov     r13, rax
.text:0000000000003ED4                 mov     eax, [rax]
.text:0000000000003ED6                 test    r15d, r15d
.text:0000000000003ED9                 mov     rbx, cs:slotvec
.text:0000000000003EE0                 mov     [rsp+58h+var_40], eax
.text:0000000000003EE4                 js      loc_4051
.text:0000000000003EEA                 cmp     cs:nslots, r15d
.text:0000000000003EF1                 jg      short loc_3F55
.text:0000000000003EF3                 cmp     r15d, 7FFFFFFFh
.text:0000000000003EFA                 jz      loc_4056
.text:0000000000003F00                 lea     r12d, [r15+1]
.text:0000000000003F04                 lea     rax, slotvec0
.text:0000000000003F0B                 movsxd  rsi, r12d
.text:0000000000003F0E                 shl     rsi, 4
.text:0000000000003F12                 cmp     rbx, rax
.text:0000000000003F15                 jz      loc_4030
.text:0000000000003F1B                 mov     rdi, rbx
.text:0000000000003F1E                 call    xrealloc
.text:0000000000003F23                 mov     rbx, rax
.text:0000000000003F26                 mov     cs:slotvec, rax
.text:0000000000003F2D
.text:0000000000003F2D loc_3F2D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003F2D                 movsxd  rdi, cs:nslots
.text:0000000000003F34                 mov     edx, r12d
.text:0000000000003F37                 xor     esi, esi        ; c
.text:0000000000003F39                 sub     edx, edi
.text:0000000000003F3B                 shl     rdi, 4
.text:0000000000003F3F                 movsxd  rdx, edx
.text:0000000000003F42                 add     rdi, rbx        ; s
.text:0000000000003F45                 shl     rdx, 4          ; n
.text:0000000000003F49                 call    _memset
.text:0000000000003F4E                 mov     cs:nslots, r12d
.text:0000000000003F55
.text:0000000000003F55 loc_3F55:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003F55                 mov     eax, [rbp+4]
.text:0000000000003F58                 shl     r15, 4
.text:0000000000003F5C                 sub     rsp, 8
.text:0000000000003F60                 add     rbx, r15
.text:0000000000003F63                 lea     r15, [rbp+8]
.text:0000000000003F67                 mov     r8d, [rbp+0]
.text:0000000000003F6B                 mov     r11, [rbx]
.text:0000000000003F6E                 mov     r12, [rbx+8]
.text:0000000000003F72                 mov     rcx, r14
.text:0000000000003F75                 or      eax, 1
.text:0000000000003F78                 mov     [rsp+60h+var_3C], eax
.text:0000000000003F7C                 push    qword ptr [rbp+30h]
.text:0000000000003F7F                 mov     r9d, eax
.text:0000000000003F82                 push    qword ptr [rbp+28h]
.text:0000000000003F85                 push    r15
.text:0000000000003F87                 mov     rsi, r11
.text:0000000000003F8A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003F8F                 mov     rdi, r12
.text:0000000000003F92                 mov     [rsp+78h+var_48], r11
.text:0000000000003F97                 call    quotearg_buffer_restyled
.text:0000000000003F9C                 add     rsp, 20h
.text:0000000000003FA0                 mov     r11, [rsp+58h+var_48]
.text:0000000000003FA5                 cmp     r11, rax
.text:0000000000003FA8                 ja      short loc_4011
.text:0000000000003FAA                 lea     rsi, [rax+1]
.text:0000000000003FAE                 lea     rax, slot0
.text:0000000000003FB5                 cmp     r12, rax
.text:0000000000003FB8                 mov     [rbx], rsi
.text:0000000000003FBB                 jz      short loc_3FCF
.text:0000000000003FBD                 mov     rdi, r12        ; ptr
.text:0000000000003FC0                 mov     [rsp+58h+var_48], rsi
.text:0000000000003FC5                 call    _free
.text:0000000000003FCA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003FCF
.text:0000000000003FCF loc_3FCF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003FCF                 mov     rdi, rsi
.text:0000000000003FD2                 mov     [rsp+58h+var_48], rsi
.text:0000000000003FD7                 call    xmalloc
.text:0000000000003FDC                 sub     rsp, 8
.text:0000000000003FE0                 mov     [rbx+8], rax
.text:0000000000003FE4                 mov     r8d, [rbp+0]
.text:0000000000003FE8                 push    qword ptr [rbp+30h]
.text:0000000000003FEB                 push    qword ptr [rbp+28h]
.text:0000000000003FEE                 mov     rcx, r14
.text:0000000000003FF1                 push    r15
.text:0000000000003FF3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003FF8                 mov     rdi, rax
.text:0000000000003FFB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004000                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004005                 mov     r12, rax
.text:0000000000004008                 call    quotearg_buffer_restyled
.text:000000000000400D                 add     rsp, 20h
.text:0000000000004011
.text:0000000000004011 loc_4011:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004011                 mov     eax, [rsp+58h+var_40]
.text:0000000000004015                 mov     [r13+0], eax
.text:0000000000004019                 add     rsp, 28h
.text:000000000000401D                 mov     rax, r12
.text:0000000000004020                 pop     rbx
.text:0000000000004021                 pop     rbp
.text:0000000000004022                 pop     r12
.text:0000000000004024                 pop     r13
.text:0000000000004026                 pop     r14
.text:0000000000004028                 pop     r15
.text:000000000000402A                 retn
.text:000000000000402A ; ---------------------------------------------------------------------------
.text:000000000000402B                 align 10h
.text:0000000000004030
.text:0000000000004030 loc_4030:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004030                 xor     edi, edi
.text:0000000000004032                 call    xrealloc
.text:0000000000004037                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000403F                 mov     rbx, rax
.text:0000000000004042                 mov     cs:slotvec, rax
.text:0000000000004049                 movups  xmmword ptr [rax], xmm0
.text:000000000000404C                 jmp     loc_3F2D
.text:0000000000004051 ; ---------------------------------------------------------------------------
.text:0000000000004051
.text:0000000000004051 loc_4051:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004051                 call    _abort
.text:0000000000004056 ; ---------------------------------------------------------------------------
.text:0000000000004056
.text:0000000000004056 loc_4056:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004056                 call    xalloc_die
.text:0000000000004056 ; } // starts at 3EB0
.text:0000000000004056 quotearg_n_options endp
.text:0000000000004056
.text:0000000000004056 ; ---------------------------------------------------------------------------
.text:000000000000405B                 align 20h
.text:0000000000004060
.text:0000000000004060 ; =============== S U B R O U T I N E =======================================
.text:0000000000004060
.text:0000000000004060 ; Attributes: info_from_lumina
.text:0000000000004060
.text:0000000000004060 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004060                 public clone_quoting_options
.text:0000000000004060 clone_quoting_options proc near
.text:0000000000004060 ; __unwind {
.text:0000000000004060                 push    r12
.text:0000000000004062                 push    rbp
.text:0000000000004063                 push    rbx
.text:0000000000004064                 mov     rbx, rdi
.text:0000000000004067                 call    ___errno_location
.text:000000000000406C                 mov     r12d, [rax]
.text:000000000000406F                 mov     rbp, rax
.text:0000000000004072                 lea     rax, default_quoting_options
.text:0000000000004079                 test    rbx, rbx
.text:000000000000407C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004081                 cmovz   rbx, rax
.text:0000000000004085                 mov     rdi, rbx        ; src
.text:0000000000004088                 call    xmemdup
.text:000000000000408D                 mov     [rbp+0], r12d
.text:0000000000004091                 pop     rbx
.text:0000000000004092                 pop     rbp
.text:0000000000004093                 pop     r12
.text:0000000000004095                 retn
.text:0000000000004095 ; } // starts at 4060
.text:0000000000004095 clone_quoting_options endp
.text:0000000000004095
.text:0000000000004095 ; ---------------------------------------------------------------------------
.text:0000000000004096                 align 20h
.text:00000000000040A0
.text:00000000000040A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040A0
.text:00000000000040A0
.text:00000000000040A0                 public get_quoting_style
.text:00000000000040A0 get_quoting_style proc near
.text:00000000000040A0 ; __unwind {
.text:00000000000040A0                 lea     rax, default_quoting_options
.text:00000000000040A7                 test    rdi, rdi
.text:00000000000040AA                 cmovz   rdi, rax
.text:00000000000040AE                 mov     eax, [rdi]
.text:00000000000040B0                 retn
.text:00000000000040B0 ; } // starts at 40A0
.text:00000000000040B0 get_quoting_style endp
.text:00000000000040B0
.text:00000000000040B0 ; ---------------------------------------------------------------------------
.text:00000000000040B1                 align 20h
.text:00000000000040C0
.text:00000000000040C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040C0
.text:00000000000040C0
.text:00000000000040C0                 public set_quoting_style
.text:00000000000040C0 set_quoting_style proc near
.text:00000000000040C0 ; __unwind {
.text:00000000000040C0                 lea     rax, default_quoting_options
.text:00000000000040C7                 test    rdi, rdi
.text:00000000000040CA                 cmovz   rdi, rax
.text:00000000000040CE                 mov     [rdi], esi
.text:00000000000040D0                 retn
.text:00000000000040D0 ; } // starts at 40C0
.text:00000000000040D0 set_quoting_style endp
.text:00000000000040D0
.text:00000000000040D0 ; ---------------------------------------------------------------------------
.text:00000000000040D1                 align 20h
.text:00000000000040E0
.text:00000000000040E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040E0
.text:00000000000040E0 ; Attributes: info_from_lumina
.text:00000000000040E0
.text:00000000000040E0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000040E0                 public set_char_quoting
.text:00000000000040E0 set_char_quoting proc near
.text:00000000000040E0 ; __unwind {
.text:00000000000040E0                 lea     rax, default_quoting_options
.text:00000000000040E7                 test    rdi, rdi
.text:00000000000040EA                 mov     ecx, esi
.text:00000000000040EC                 cmovz   rdi, rax
.text:00000000000040F0                 mov     eax, esi
.text:00000000000040F2                 and     ecx, 1Fh
.text:00000000000040F5                 shr     al, 5
.text:00000000000040F8                 movzx   eax, al
.text:00000000000040FB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004100                 mov     esi, [rdi]
.text:0000000000004102                 mov     eax, esi
.text:0000000000004104                 shr     eax, cl
.text:0000000000004106                 xor     edx, eax
.text:0000000000004108                 and     eax, 1
.text:000000000000410B                 and     edx, 1
.text:000000000000410E                 shl     edx, cl
.text:0000000000004110                 xor     edx, esi
.text:0000000000004112                 mov     [rdi], edx
.text:0000000000004114                 retn
.text:0000000000004114 ; } // starts at 40E0
.text:0000000000004114 set_char_quoting endp
.text:0000000000004114
.text:0000000000004114 ; ---------------------------------------------------------------------------
.text:0000000000004115                 align 20h
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120
.text:0000000000004120                 public set_quoting_flags
.text:0000000000004120 set_quoting_flags proc near
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 lea     rax, default_quoting_options
.text:0000000000004127                 test    rdi, rdi
.text:000000000000412A                 cmovz   rdi, rax
.text:000000000000412E                 mov     eax, [rdi+4]
.text:0000000000004131                 mov     [rdi+4], esi
.text:0000000000004134                 retn
.text:0000000000004134 ; } // starts at 4120
.text:0000000000004134 set_quoting_flags endp
.text:0000000000004134
.text:0000000000004134 ; ---------------------------------------------------------------------------
.text:0000000000004135                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140 ; Attributes: info_from_lumina
.text:0000000000004140
.text:0000000000004140 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004140                 public set_custom_quoting
.text:0000000000004140 set_custom_quoting proc near
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 lea     rax, default_quoting_options
.text:0000000000004147                 test    rdi, rdi
.text:000000000000414A                 cmovz   rdi, rax
.text:000000000000414E                 test    rsi, rsi
.text:0000000000004151                 mov     dword ptr [rdi], 0Ah
.text:0000000000004157                 jz      short loc_4167
.text:0000000000004159                 test    rdx, rdx
.text:000000000000415C                 jz      short loc_4167
.text:000000000000415E                 mov     [rdi+28h], rsi
.text:0000000000004162                 mov     [rdi+30h], rdx
.text:0000000000004166                 retn
.text:0000000000004167 ; ---------------------------------------------------------------------------
.text:0000000000004167
.text:0000000000004167 loc_4167:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004167                                         ; set_custom_quoting+1C↑j
.text:0000000000004167                 sub     rsp, 8
.text:000000000000416B                 call    _abort
.text:000000000000416B ; } // starts at 4140
.text:000000000000416B set_custom_quoting endp
.text:000000000000416B
.text:0000000000004170
.text:0000000000004170 ; =============== S U B R O U T I N E =======================================
.text:0000000000004170
.text:0000000000004170 ; Attributes: info_from_lumina
.text:0000000000004170
.text:0000000000004170 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004170                 public quotearg_buffer
.text:0000000000004170 quotearg_buffer proc near
.text:0000000000004170
.text:0000000000004170 var_40          = qword ptr -40h
.text:0000000000004170
.text:0000000000004170 ; __unwind {
.text:0000000000004170                 push    r15
.text:0000000000004172                 push    r14
.text:0000000000004174                 lea     rax, default_quoting_options
.text:000000000000417B                 push    r13
.text:000000000000417D                 push    r12
.text:000000000000417F                 mov     r13, rdi
.text:0000000000004182                 push    rbp
.text:0000000000004183                 push    rbx
.text:0000000000004184                 mov     rbx, r8
.text:0000000000004187                 mov     r14, rsi
.text:000000000000418A                 mov     r15, rdx
.text:000000000000418D                 sub     rsp, 18h
.text:0000000000004191                 test    r8, r8
.text:0000000000004194                 cmovz   rbx, rax
.text:0000000000004198                 mov     [rsp+48h+var_40], rcx
.text:000000000000419D                 call    ___errno_location
.text:00000000000041A2                 mov     r12d, [rax]
.text:00000000000041A5                 mov     rbp, rax
.text:00000000000041A8                 lea     rax, [rbx+8]
.text:00000000000041AC                 sub     rsp, 8
.text:00000000000041B0                 mov     r9d, [rbx+4]
.text:00000000000041B4                 push    qword ptr [rbx+30h]
.text:00000000000041B7                 mov     r8d, [rbx]
.text:00000000000041BA                 push    qword ptr [rbx+28h]
.text:00000000000041BD                 mov     rdx, r15
.text:00000000000041C0                 push    rax
.text:00000000000041C1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000041C6                 mov     rsi, r14
.text:00000000000041C9                 mov     rdi, r13
.text:00000000000041CC                 call    quotearg_buffer_restyled
.text:00000000000041D1                 mov     [rbp+0], r12d
.text:00000000000041D5                 add     rsp, 38h
.text:00000000000041D9                 pop     rbx
.text:00000000000041DA                 pop     rbp
.text:00000000000041DB                 pop     r12
.text:00000000000041DD                 pop     r13
.text:00000000000041DF                 pop     r14
.text:00000000000041E1                 pop     r15
.text:00000000000041E3                 retn
.text:00000000000041E3 ; } // starts at 4170
.text:00000000000041E3 quotearg_buffer endp
.text:00000000000041E3
.text:00000000000041E3 ; ---------------------------------------------------------------------------
.text:00000000000041E4                 align 10h
.text:00000000000041F0
.text:00000000000041F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041F0
.text:00000000000041F0 ; Attributes: info_from_lumina
.text:00000000000041F0
.text:00000000000041F0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000041F0                 public quotearg_alloc_mem
.text:00000000000041F0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000041F0
.text:00000000000041F0 var_5C          = dword ptr -5Ch
.text:00000000000041F0 var_58          = qword ptr -58h
.text:00000000000041F0 var_50          = qword ptr -50h
.text:00000000000041F0 var_48          = qword ptr -48h
.text:00000000000041F0 var_40          = qword ptr -40h
.text:00000000000041F0
.text:00000000000041F0 ; __unwind {
.text:00000000000041F0                 push    r15
.text:00000000000041F2                 push    r14
.text:00000000000041F4                 lea     rax, default_quoting_options
.text:00000000000041FB                 push    r13
.text:00000000000041FD                 push    r12
.text:00000000000041FF                 mov     r12, rdx
.text:0000000000004202                 push    rbp
.text:0000000000004203                 push    rbx
.text:0000000000004204                 mov     rbx, rcx
.text:0000000000004207                 mov     r14, rdi
.text:000000000000420A                 mov     r15, rsi
.text:000000000000420D                 sub     rsp, 38h
.text:0000000000004211                 test    rcx, rcx
.text:0000000000004214                 cmovz   rbx, rax
.text:0000000000004218                 xor     ebp, ebp
.text:000000000000421A                 call    ___errno_location
.text:000000000000421F                 test    r12, r12
.text:0000000000004222                 mov     r13, rax
.text:0000000000004225                 mov     eax, [rax]
.text:0000000000004227                 setz    bpl
.text:000000000000422B                 or      ebp, [rbx+4]
.text:000000000000422E                 lea     r10, [rbx+8]
.text:0000000000004232                 sub     rsp, 8
.text:0000000000004236                 mov     r8d, [rbx]
.text:0000000000004239                 mov     rcx, r15
.text:000000000000423C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004240                 push    qword ptr [rbx+30h]
.text:0000000000004243                 mov     rdx, r14
.text:0000000000004246                 push    qword ptr [rbx+28h]
.text:0000000000004249                 push    r10
.text:000000000000424B                 xor     esi, esi
.text:000000000000424D                 mov     r9d, ebp
.text:0000000000004250                 xor     edi, edi
.text:0000000000004252                 mov     [rsp+88h+var_48], r10
.text:0000000000004257                 call    quotearg_buffer_restyled
.text:000000000000425C                 lea     rsi, [rax+1]
.text:0000000000004260                 mov     [rsp+88h+var_40], rax
.text:0000000000004265                 add     rsp, 20h
.text:0000000000004269                 mov     rdi, rsi
.text:000000000000426C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004271                 call    xmalloc
.text:0000000000004276                 mov     [rsp+68h+var_58], rax
.text:000000000000427B                 sub     rsp, 8
.text:000000000000427F                 push    qword ptr [rbx+30h]
.text:0000000000004282                 push    qword ptr [rbx+28h]
.text:0000000000004285                 mov     r10, [rsp+80h+var_48]
.text:000000000000428A                 mov     r9d, ebp
.text:000000000000428D                 mov     r8d, [rbx]
.text:0000000000004290                 mov     rcx, r15
.text:0000000000004293                 mov     rdx, r14
.text:0000000000004296                 mov     rdi, rax
.text:0000000000004299                 push    r10
.text:000000000000429B                 mov     rsi, [rsp+88h+var_50]
.text:00000000000042A0                 call    quotearg_buffer_restyled
.text:00000000000042A5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000042A9                 add     rsp, 20h
.text:00000000000042AD                 test    r12, r12
.text:00000000000042B0                 mov     [r13+0], eax
.text:00000000000042B4                 jz      short loc_42BF
.text:00000000000042B6                 mov     r11, [rsp+68h+var_40]
.text:00000000000042BB                 mov     [r12], r11
.text:00000000000042BF
.text:00000000000042BF loc_42BF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000042BF                 mov     rax, [rsp+68h+var_58]
.text:00000000000042C4                 add     rsp, 38h
.text:00000000000042C8                 pop     rbx
.text:00000000000042C9                 pop     rbp
.text:00000000000042CA                 pop     r12
.text:00000000000042CC                 pop     r13
.text:00000000000042CE                 pop     r14
.text:00000000000042D0                 pop     r15
.text:00000000000042D2                 retn
.text:00000000000042D2 ; } // starts at 41F0
.text:00000000000042D2 quotearg_alloc_mem endp
.text:00000000000042D2
.text:00000000000042D2 ; ---------------------------------------------------------------------------
.text:00000000000042D3                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0
.text:00000000000042E0                 public quotearg_alloc
.text:00000000000042E0 quotearg_alloc  proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 mov     rcx, rdx
.text:00000000000042E3                 xor     edx, edx
.text:00000000000042E5                 jmp     quotearg_alloc_mem
.text:00000000000042E5 ; } // starts at 42E0
.text:00000000000042E5 quotearg_alloc  endp
.text:00000000000042E5
.text:00000000000042E5 ; ---------------------------------------------------------------------------
.text:00000000000042EA                 align 10h
.text:00000000000042F0
.text:00000000000042F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042F0
.text:00000000000042F0 ; Attributes: info_from_lumina
.text:00000000000042F0
.text:00000000000042F0 ; void __cdecl quotearg_free()
.text:00000000000042F0                 public quotearg_free
.text:00000000000042F0 quotearg_free   proc near
.text:00000000000042F0 ; __unwind {
.text:00000000000042F0                 mov     eax, cs:nslots
.text:00000000000042F6                 push    r12
.text:00000000000042F8                 mov     r12, cs:slotvec
.text:00000000000042FF                 push    rbp
.text:0000000000004300                 push    rbx
.text:0000000000004301                 cmp     eax, 1
.text:0000000000004304                 jle     short loc_4331
.text:0000000000004306                 sub     eax, 2
.text:0000000000004309                 lea     rbx, [r12+18h]
.text:000000000000430E                 shl     rax, 4
.text:0000000000004312                 lea     rbp, [r12+rax+28h]
.text:0000000000004317                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004320
.text:0000000000004320 loc_4320:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004320                 mov     rdi, [rbx]      ; ptr
.text:0000000000004323                 add     rbx, 10h
.text:0000000000004327                 call    _free
.text:000000000000432C                 cmp     rbx, rbp
.text:000000000000432F                 jnz     short loc_4320
.text:0000000000004331
.text:0000000000004331 loc_4331:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004331                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004336                 lea     rbx, slot0
.text:000000000000433D                 cmp     rdi, rbx
.text:0000000000004340                 jz      short loc_4359
.text:0000000000004342                 call    _free
.text:0000000000004347                 mov     cs:slotvec0, 100h
.text:0000000000004352                 mov     cs:off_2080B8, rbx
.text:0000000000004359
.text:0000000000004359 loc_4359:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004359                 lea     rbx, slotvec0
.text:0000000000004360                 cmp     r12, rbx
.text:0000000000004363                 jz      short loc_4374
.text:0000000000004365                 mov     rdi, r12        ; ptr
.text:0000000000004368                 call    _free
.text:000000000000436D                 mov     cs:slotvec, rbx
.text:0000000000004374
.text:0000000000004374 loc_4374:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004374                 pop     rbx
.text:0000000000004375                 mov     cs:nslots, 1
.text:000000000000437F                 pop     rbp
.text:0000000000004380                 pop     r12
.text:0000000000004382                 retn
.text:0000000000004382 ; } // starts at 42F0
.text:0000000000004382 quotearg_free   endp
.text:0000000000004382
.text:0000000000004382 ; ---------------------------------------------------------------------------
.text:0000000000004383                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public quotearg_n
.text:0000000000004390 quotearg_n      proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 lea     rcx, default_quoting_options
.text:0000000000004397                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000439E                 jmp     quotearg_n_options
.text:000000000000439E ; } // starts at 4390
.text:000000000000439E quotearg_n      endp
.text:000000000000439E
.text:000000000000439E ; ---------------------------------------------------------------------------
.text:00000000000043A3                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0
.text:00000000000043B0                 public quotearg_n_mem
.text:00000000000043B0 quotearg_n_mem  proc near
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 lea     rcx, default_quoting_options
.text:00000000000043B7                 jmp     quotearg_n_options
.text:00000000000043B7 ; } // starts at 43B0
.text:00000000000043B7 quotearg_n_mem  endp
.text:00000000000043B7
.text:00000000000043B7 ; ---------------------------------------------------------------------------
.text:00000000000043BC                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0
.text:00000000000043C0                 public quotearg
.text:00000000000043C0 quotearg        proc near
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 lea     rcx, default_quoting_options
.text:00000000000043C7                 mov     rsi, rdi
.text:00000000000043CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043D1                 xor     edi, edi
.text:00000000000043D3                 jmp     quotearg_n_options
.text:00000000000043D3 ; } // starts at 43C0
.text:00000000000043D3 quotearg        endp
.text:00000000000043D3
.text:00000000000043D3 ; ---------------------------------------------------------------------------
.text:00000000000043D8                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0
.text:00000000000043E0                 public quotearg_mem
.text:00000000000043E0 quotearg_mem    proc near
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 lea     rcx, default_quoting_options
.text:00000000000043E7                 mov     rdx, rsi
.text:00000000000043EA                 mov     rsi, rdi
.text:00000000000043ED                 xor     edi, edi
.text:00000000000043EF                 jmp     quotearg_n_options
.text:00000000000043EF ; } // starts at 43E0
.text:00000000000043EF quotearg_mem    endp
.text:00000000000043EF
.text:00000000000043EF ; ---------------------------------------------------------------------------
.text:00000000000043F4                 align 20h
.text:0000000000004400
.text:0000000000004400 ; =============== S U B R O U T I N E =======================================
.text:0000000000004400
.text:0000000000004400 ; Attributes: info_from_lumina
.text:0000000000004400
.text:0000000000004400 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004400                 public quotearg_n_style
.text:0000000000004400 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004400
.text:0000000000004400 var_48          = dword ptr -48h
.text:0000000000004400 var_44          = qword ptr -44h
.text:0000000000004400 var_3C          = qword ptr -3Ch
.text:0000000000004400 var_34          = qword ptr -34h
.text:0000000000004400 var_2C          = qword ptr -2Ch
.text:0000000000004400 var_24          = qword ptr -24h
.text:0000000000004400 var_1C          = qword ptr -1Ch
.text:0000000000004400 var_14          = dword ptr -14h
.text:0000000000004400 var_10          = qword ptr -10h
.text:0000000000004400
.text:0000000000004400 ; __unwind {
.text:0000000000004400                 sub     rsp, 48h
.text:0000000000004404                 mov     rax, rdx
.text:0000000000004407                 mov     rdx, fs:28h
.text:0000000000004410                 mov     [rsp+48h+var_10], rdx
.text:0000000000004415                 xor     edx, edx
.text:0000000000004417                 cmp     esi, 0Ah
.text:000000000000441A                 jz      short loc_4484
.text:000000000000441C                 mov     [rsp+48h+var_48], esi
.text:000000000000441F                 mov     rcx, rsp
.text:0000000000004422                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004429                 mov     rsi, rax
.text:000000000000442C                 mov     [rsp+48h+var_44], 0
.text:0000000000004435                 mov     [rsp+48h+var_3C], 0
.text:000000000000443E                 mov     [rsp+48h+var_34], 0
.text:0000000000004447                 mov     [rsp+48h+var_2C], 0
.text:0000000000004450                 mov     [rsp+48h+var_24], 0
.text:0000000000004459                 mov     [rsp+48h+var_1C], 0
.text:0000000000004462                 mov     [rsp+48h+var_14], 0
.text:000000000000446A                 call    quotearg_n_options
.text:000000000000446F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004474                 xor     rcx, fs:28h
.text:000000000000447D                 jnz     short loc_4489
.text:000000000000447F                 add     rsp, 48h
.text:0000000000004483                 retn
.text:0000000000004484 ; ---------------------------------------------------------------------------
.text:0000000000004484
.text:0000000000004484 loc_4484:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004484                 call    _abort
.text:0000000000004489 ; ---------------------------------------------------------------------------
.text:0000000000004489
.text:0000000000004489 loc_4489:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004489                 call    ___stack_chk_fail
.text:0000000000004489 ; } // starts at 4400
.text:0000000000004489 quotearg_n_style endp
.text:0000000000004489
.text:0000000000004489 ; ---------------------------------------------------------------------------
.text:000000000000448E                 align 10h
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490 ; Attributes: info_from_lumina
.text:0000000000004490
.text:0000000000004490 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004490                 public quotearg_n_style_mem
.text:0000000000004490 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004490
.text:0000000000004490 var_48          = dword ptr -48h
.text:0000000000004490 var_44          = qword ptr -44h
.text:0000000000004490 var_3C          = qword ptr -3Ch
.text:0000000000004490 var_34          = qword ptr -34h
.text:0000000000004490 var_2C          = qword ptr -2Ch
.text:0000000000004490 var_24          = qword ptr -24h
.text:0000000000004490 var_1C          = qword ptr -1Ch
.text:0000000000004490 var_14          = dword ptr -14h
.text:0000000000004490 var_10          = qword ptr -10h
.text:0000000000004490
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 sub     rsp, 48h
.text:0000000000004494                 mov     rax, rdx
.text:0000000000004497                 mov     rdx, rcx
.text:000000000000449A                 mov     rcx, fs:28h
.text:00000000000044A3                 mov     [rsp+48h+var_10], rcx
.text:00000000000044A8                 xor     ecx, ecx
.text:00000000000044AA                 cmp     esi, 0Ah
.text:00000000000044AD                 jz      short loc_4510
.text:00000000000044AF                 mov     [rsp+48h+var_48], esi
.text:00000000000044B2                 mov     rcx, rsp
.text:00000000000044B5                 mov     rsi, rax
.text:00000000000044B8                 mov     [rsp+48h+var_44], 0
.text:00000000000044C1                 mov     [rsp+48h+var_3C], 0
.text:00000000000044CA                 mov     [rsp+48h+var_34], 0
.text:00000000000044D3                 mov     [rsp+48h+var_2C], 0
.text:00000000000044DC                 mov     [rsp+48h+var_24], 0
.text:00000000000044E5                 mov     [rsp+48h+var_1C], 0
.text:00000000000044EE                 mov     [rsp+48h+var_14], 0
.text:00000000000044F6                 call    quotearg_n_options
.text:00000000000044FB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004500                 xor     rdx, fs:28h
.text:0000000000004509                 jnz     short loc_4515
.text:000000000000450B                 add     rsp, 48h
.text:000000000000450F                 retn
.text:0000000000004510 ; ---------------------------------------------------------------------------
.text:0000000000004510
.text:0000000000004510 loc_4510:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004510                 call    _abort
.text:0000000000004515 ; ---------------------------------------------------------------------------
.text:0000000000004515
.text:0000000000004515 loc_4515:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004515                 call    ___stack_chk_fail
.text:0000000000004515 ; } // starts at 4490
.text:0000000000004515 quotearg_n_style_mem endp
.text:0000000000004515
.text:0000000000004515 ; ---------------------------------------------------------------------------
.text:000000000000451A                 align 20h
.text:0000000000004520
.text:0000000000004520 ; =============== S U B R O U T I N E =======================================
.text:0000000000004520
.text:0000000000004520
.text:0000000000004520                 public quotearg_style
.text:0000000000004520 quotearg_style  proc near               ; CODE XREF: main+B4F↑p
.text:0000000000004520 ; __unwind {
.text:0000000000004520                 mov     rdx, rsi
.text:0000000000004523                 mov     esi, edi
.text:0000000000004525                 xor     edi, edi
.text:0000000000004527                 jmp     quotearg_n_style
.text:0000000000004527 ; } // starts at 4520
.text:0000000000004527 quotearg_style  endp
.text:0000000000004527
.text:0000000000004527 ; ---------------------------------------------------------------------------
.text:000000000000452C                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530                 public quotearg_style_mem
.text:0000000000004530 quotearg_style_mem proc near
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 mov     rcx, rdx
.text:0000000000004533                 mov     rdx, rsi
.text:0000000000004536                 mov     esi, edi
.text:0000000000004538                 xor     edi, edi
.text:000000000000453A                 jmp     quotearg_n_style_mem
.text:000000000000453A ; } // starts at 4530
.text:000000000000453A quotearg_style_mem endp
.text:000000000000453A
.text:000000000000453A ; ---------------------------------------------------------------------------
.text:000000000000453F                 align 20h
.text:0000000000004540
.text:0000000000004540 ; =============== S U B R O U T I N E =======================================
.text:0000000000004540
.text:0000000000004540 ; Attributes: info_from_lumina
.text:0000000000004540
.text:0000000000004540 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004540                 public quotearg_char_mem
.text:0000000000004540 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004540                                         ; quotearg_colon+C↓j ...
.text:0000000000004540
.text:0000000000004540 var_48          = xmmword ptr -48h
.text:0000000000004540 var_38          = xmmword ptr -38h
.text:0000000000004540 var_28          = xmmword ptr -28h
.text:0000000000004540 var_18          = qword ptr -18h
.text:0000000000004540 var_10          = qword ptr -10h
.text:0000000000004540
.text:0000000000004540 ; __unwind {
.text:0000000000004540                 sub     rsp, 48h
.text:0000000000004544                 mov     ecx, edx
.text:0000000000004546                 mov     rax, fs:28h
.text:000000000000454F                 mov     [rsp+48h+var_10], rax
.text:0000000000004554                 xor     eax, eax
.text:0000000000004556                 mov     rax, cs:qword_208250
.text:000000000000455D                 mov     r8, rsp
.text:0000000000004560                 and     ecx, 1Fh
.text:0000000000004563                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000456B                 mov     [rsp+48h+var_18], rax
.text:0000000000004570                 mov     eax, edx
.text:0000000000004572                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004576                 shr     al, 5
.text:0000000000004579                 movzx   eax, al
.text:000000000000457C                 lea     r9, [r8+rax*4+8]
.text:0000000000004581                 movdqa  xmm0, cs:xmmword_208230
.text:0000000000004589                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000458E                 movdqa  xmm0, cs:xmmword_208240
.text:0000000000004596                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000459B                 mov     edx, [r9]
.text:000000000000459E                 mov     eax, edx
.text:00000000000045A0                 shr     eax, cl
.text:00000000000045A2                 not     eax
.text:00000000000045A4                 and     eax, 1
.text:00000000000045A7                 shl     eax, cl
.text:00000000000045A9                 mov     rcx, r8
.text:00000000000045AC                 xor     eax, edx
.text:00000000000045AE                 mov     rdx, rsi
.text:00000000000045B1                 mov     rsi, rdi
.text:00000000000045B4                 mov     [r9], eax
.text:00000000000045B7                 xor     edi, edi
.text:00000000000045B9                 call    quotearg_n_options
.text:00000000000045BE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000045C3                 xor     rsi, fs:28h
.text:00000000000045CC                 jnz     short loc_45D3
.text:00000000000045CE                 add     rsp, 48h
.text:00000000000045D2                 retn
.text:00000000000045D3 ; ---------------------------------------------------------------------------
.text:00000000000045D3
.text:00000000000045D3 loc_45D3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000045D3                 call    ___stack_chk_fail
.text:00000000000045D3 ; } // starts at 4540
.text:00000000000045D3 quotearg_char_mem endp
.text:00000000000045D3
.text:00000000000045D3 ; ---------------------------------------------------------------------------
.text:00000000000045D8                 align 20h
.text:00000000000045E0
.text:00000000000045E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045E0
.text:00000000000045E0
.text:00000000000045E0                 public quotearg_char
.text:00000000000045E0 quotearg_char   proc near
.text:00000000000045E0 ; __unwind {
.text:00000000000045E0                 movsx   edx, sil
.text:00000000000045E4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000045EB                 jmp     quotearg_char_mem
.text:00000000000045EB ; } // starts at 45E0
.text:00000000000045EB quotearg_char   endp
.text:00000000000045EB
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0
.text:00000000000045F0                 public quotearg_colon
.text:00000000000045F0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 mov     edx, 3Ah ; ':'
.text:00000000000045F5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000045FC                 jmp     quotearg_char_mem
.text:00000000000045FC ; } // starts at 45F0
.text:00000000000045FC quotearg_colon  endp
.text:00000000000045FC
.text:00000000000045FC ; ---------------------------------------------------------------------------
.text:0000000000004601                 align 10h
.text:0000000000004610
.text:0000000000004610 ; =============== S U B R O U T I N E =======================================
.text:0000000000004610
.text:0000000000004610
.text:0000000000004610                 public quotearg_colon_mem
.text:0000000000004610 quotearg_colon_mem proc near
.text:0000000000004610 ; __unwind {
.text:0000000000004610                 mov     edx, 3Ah ; ':'
.text:0000000000004615                 jmp     quotearg_char_mem
.text:0000000000004615 ; } // starts at 4610
.text:0000000000004615 quotearg_colon_mem endp
.text:0000000000004615
.text:0000000000004615 ; ---------------------------------------------------------------------------
.text:000000000000461A                 align 20h
.text:0000000000004620
.text:0000000000004620 ; =============== S U B R O U T I N E =======================================
.text:0000000000004620
.text:0000000000004620 ; Attributes: info_from_lumina
.text:0000000000004620
.text:0000000000004620 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004620                 public quotearg_n_style_colon
.text:0000000000004620 quotearg_n_style_colon proc near        ; CODE XREF: main+7B3↑p
.text:0000000000004620                                         ; main+84E↑p ...
.text:0000000000004620
.text:0000000000004620 var_48          = dword ptr -48h
.text:0000000000004620 var_44          = qword ptr -44h
.text:0000000000004620 var_3C          = qword ptr -3Ch
.text:0000000000004620 var_34          = qword ptr -34h
.text:0000000000004620 var_2C          = qword ptr -2Ch
.text:0000000000004620 var_24          = qword ptr -24h
.text:0000000000004620 var_1C          = qword ptr -1Ch
.text:0000000000004620 var_14          = dword ptr -14h
.text:0000000000004620 var_10          = qword ptr -10h
.text:0000000000004620
.text:0000000000004620 ; __unwind {
.text:0000000000004620                 sub     rsp, 48h
.text:0000000000004624                 mov     rax, rdx
.text:0000000000004627                 mov     rdx, fs:28h
.text:0000000000004630                 mov     [rsp+48h+var_10], rdx
.text:0000000000004635                 xor     edx, edx
.text:0000000000004637                 cmp     esi, 0Ah
.text:000000000000463A                 jz      short loc_46A4
.text:000000000000463C                 mov     [rsp+48h+var_48], esi
.text:000000000000463F                 mov     rcx, rsp
.text:0000000000004642                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004649                 mov     rsi, rax
.text:000000000000464C                 mov     [rsp+48h+var_44], 0
.text:0000000000004655                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000465E                 mov     [rsp+48h+var_34], 0
.text:0000000000004667                 mov     [rsp+48h+var_2C], 0
.text:0000000000004670                 mov     [rsp+48h+var_24], 0
.text:0000000000004679                 mov     [rsp+48h+var_1C], 0
.text:0000000000004682                 mov     [rsp+48h+var_14], 0
.text:000000000000468A                 call    quotearg_n_options
.text:000000000000468F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004694                 xor     rcx, fs:28h
.text:000000000000469D                 jnz     short loc_46A9
.text:000000000000469F                 add     rsp, 48h
.text:00000000000046A3                 retn
.text:00000000000046A4 ; ---------------------------------------------------------------------------
.text:00000000000046A4
.text:00000000000046A4 loc_46A4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000046A4                 call    _abort
.text:00000000000046A9 ; ---------------------------------------------------------------------------
.text:00000000000046A9
.text:00000000000046A9 loc_46A9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000046A9                 call    ___stack_chk_fail
.text:00000000000046A9 ; } // starts at 4620
.text:00000000000046A9 quotearg_n_style_colon endp
.text:00000000000046A9
.text:00000000000046A9 ; ---------------------------------------------------------------------------
.text:00000000000046AE                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0 ; Attributes: info_from_lumina
.text:00000000000046B0
.text:00000000000046B0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000046B0                 public quotearg_n_custom_mem
.text:00000000000046B0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000046B0                                         ; quotearg_custom+12↓j ...
.text:00000000000046B0
.text:00000000000046B0 var_48          = xmmword ptr -48h
.text:00000000000046B0 var_38          = xmmword ptr -38h
.text:00000000000046B0 var_28          = xmmword ptr -28h
.text:00000000000046B0 var_18          = qword ptr -18h
.text:00000000000046B0 var_10          = qword ptr -10h
.text:00000000000046B0
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 sub     rsp, 48h
.text:00000000000046B4                 mov     r9, rcx
.text:00000000000046B7                 mov     rcx, cs:qword_208250
.text:00000000000046BE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000046C6                 mov     rax, fs:28h
.text:00000000000046CF                 mov     [rsp+48h+var_10], rax
.text:00000000000046D4                 xor     eax, eax
.text:00000000000046D6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000046DA                 test    rsi, rsi
.text:00000000000046DD                 mov     [rsp+48h+var_18], rcx
.text:00000000000046E2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000046E9                 movdqa  xmm0, cs:xmmword_208230
.text:00000000000046F1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000046F6                 movdqa  xmm0, cs:xmmword_208240
.text:00000000000046FE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004703                 jz      short loc_4737
.text:0000000000004705                 test    rdx, rdx
.text:0000000000004708                 jz      short loc_4737
.text:000000000000470A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000470F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004714                 mov     rcx, rsp
.text:0000000000004717                 mov     rdx, r8
.text:000000000000471A                 mov     rsi, r9
.text:000000000000471D                 call    quotearg_n_options
.text:0000000000004722                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004727                 xor     rdi, fs:28h
.text:0000000000004730                 jnz     short loc_473C
.text:0000000000004732                 add     rsp, 48h
.text:0000000000004736                 retn
.text:0000000000004737 ; ---------------------------------------------------------------------------
.text:0000000000004737
.text:0000000000004737 loc_4737:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004737                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004737                 call    _abort
.text:000000000000473C ; ---------------------------------------------------------------------------
.text:000000000000473C
.text:000000000000473C loc_473C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000473C                 call    ___stack_chk_fail
.text:000000000000473C ; } // starts at 46B0
.text:000000000000473C quotearg_n_custom_mem endp
.text:000000000000473C
.text:000000000000473C ; ---------------------------------------------------------------------------
.text:0000000000004741                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750
.text:0000000000004750                 public quotearg_n_custom
.text:0000000000004750 quotearg_n_custom proc near
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004757                 jmp     quotearg_n_custom_mem
.text:0000000000004757 ; } // starts at 4750
.text:0000000000004757 quotearg_n_custom endp
.text:0000000000004757
.text:0000000000004757 ; ---------------------------------------------------------------------------
.text:000000000000475C                 align 20h
.text:0000000000004760
.text:0000000000004760 ; =============== S U B R O U T I N E =======================================
.text:0000000000004760
.text:0000000000004760
.text:0000000000004760                 public quotearg_custom
.text:0000000000004760 quotearg_custom proc near
.text:0000000000004760 ; __unwind {
.text:0000000000004760                 mov     rcx, rdx
.text:0000000000004763                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000476A                 mov     rdx, rsi
.text:000000000000476D                 mov     rsi, rdi
.text:0000000000004770                 xor     edi, edi
.text:0000000000004772                 jmp     quotearg_n_custom_mem
.text:0000000000004772 ; } // starts at 4760
.text:0000000000004772 quotearg_custom endp
.text:0000000000004772
.text:0000000000004772 ; ---------------------------------------------------------------------------
.text:0000000000004777                 align 20h
.text:0000000000004780
.text:0000000000004780 ; =============== S U B R O U T I N E =======================================
.text:0000000000004780
.text:0000000000004780
.text:0000000000004780                 public quotearg_custom_mem
.text:0000000000004780 quotearg_custom_mem proc near
.text:0000000000004780 ; __unwind {
.text:0000000000004780                 mov     r8, rcx
.text:0000000000004783                 mov     rcx, rdx
.text:0000000000004786                 mov     rdx, rsi
.text:0000000000004789                 mov     rsi, rdi
.text:000000000000478C                 xor     edi, edi
.text:000000000000478E                 jmp     quotearg_n_custom_mem
.text:000000000000478E ; } // starts at 4780
.text:000000000000478E quotearg_custom_mem endp
.text:000000000000478E
.text:000000000000478E ; ---------------------------------------------------------------------------
.text:0000000000004793                 align 20h
.text:00000000000047A0
.text:00000000000047A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047A0
.text:00000000000047A0
.text:00000000000047A0                 public quote_n_mem
.text:00000000000047A0 quote_n_mem     proc near
.text:00000000000047A0 ; __unwind {
.text:00000000000047A0                 lea     rcx, quote_quoting_options
.text:00000000000047A7                 jmp     quotearg_n_options
.text:00000000000047A7 ; } // starts at 47A0
.text:00000000000047A7 quote_n_mem     endp
.text:00000000000047A7
.text:00000000000047A7 ; ---------------------------------------------------------------------------
.text:00000000000047AC                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0
.text:00000000000047B0                 public quote_mem
.text:00000000000047B0 quote_mem       proc near
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 lea     rcx, quote_quoting_options
.text:00000000000047B7                 mov     rdx, rsi
.text:00000000000047BA                 mov     rsi, rdi
.text:00000000000047BD                 xor     edi, edi
.text:00000000000047BF                 jmp     quotearg_n_options
.text:00000000000047BF ; } // starts at 47B0
.text:00000000000047BF quote_mem       endp
.text:00000000000047BF
.text:00000000000047BF ; ---------------------------------------------------------------------------
.text:00000000000047C4                 align 10h
.text:00000000000047D0
.text:00000000000047D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047D0
.text:00000000000047D0
.text:00000000000047D0                 public quote_n
.text:00000000000047D0 quote_n         proc near
.text:00000000000047D0 ; __unwind {
.text:00000000000047D0                 lea     rcx, quote_quoting_options
.text:00000000000047D7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000047DE                 jmp     quotearg_n_options
.text:00000000000047DE ; } // starts at 47D0
.text:00000000000047DE quote_n         endp
.text:00000000000047DE
.text:00000000000047DE ; ---------------------------------------------------------------------------
.text:00000000000047E3                 align 10h
.text:00000000000047F0
.text:00000000000047F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047F0
.text:00000000000047F0
.text:00000000000047F0                 public quote
.text:00000000000047F0 quote           proc near
.text:00000000000047F0 ; __unwind {
.text:00000000000047F0                 lea     rcx, quote_quoting_options
.text:00000000000047F7                 mov     rsi, rdi
.text:00000000000047FA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004801                 xor     edi, edi
.text:0000000000004803                 jmp     quotearg_n_options
.text:0000000000004803 ; } // starts at 47F0
.text:0000000000004803 quote           endp
.text:0000000000004803
.text:0000000000004803 ; ---------------------------------------------------------------------------
.text:0000000000004808                 align 10h
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810
.text:0000000000004810 ; __int64 __fastcall safe_read(int fd, void *buf, size_t nbytes)
.text:0000000000004810                 public safe_read
.text:0000000000004810 safe_read       proc near               ; CODE XREF: main+45C↑p
.text:0000000000004810                                         ; main+AAB↑p
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 push    r13
.text:0000000000004812                 push    r12
.text:0000000000004814                 mov     r13d, edi
.text:0000000000004817                 push    rbp
.text:0000000000004818                 push    rbx
.text:0000000000004819                 mov     r12, rsi
.text:000000000000481C                 mov     rbx, rdx
.text:000000000000481F                 sub     rsp, 8
.text:0000000000004823                 nop     dword ptr [rax+rax+00h]
.text:0000000000004828
.text:0000000000004828 loc_4828:                               ; CODE XREF: safe_read+38↓j
.text:0000000000004828                                         ; safe_read+4D↓j
.text:0000000000004828                 mov     rdx, rbx        ; nbytes
.text:000000000000482B                 mov     rsi, r12        ; buf
.text:000000000000482E                 mov     edi, r13d       ; fd
.text:0000000000004831                 call    _read
.text:0000000000004836                 test    rax, rax
.text:0000000000004839                 mov     rbp, rax
.text:000000000000483C                 jns     short loc_4860
.text:000000000000483E                 call    ___errno_location
.text:0000000000004843                 mov     eax, [rax]
.text:0000000000004845                 cmp     eax, 4
.text:0000000000004848                 jz      short loc_4828
.text:000000000000484A                 cmp     rbx, 7FF00000h
.text:0000000000004851                 jbe     short loc_4860
.text:0000000000004853                 cmp     eax, 16h
.text:0000000000004856                 jnz     short loc_4860
.text:0000000000004858                 mov     ebx, 7FF00000h
.text:000000000000485D                 jmp     short loc_4828
.text:000000000000485D ; ---------------------------------------------------------------------------
.text:000000000000485F                 align 20h
.text:0000000000004860
.text:0000000000004860 loc_4860:                               ; CODE XREF: safe_read+2C↑j
.text:0000000000004860                                         ; safe_read+41↑j ...
.text:0000000000004860                 add     rsp, 8
.text:0000000000004864                 mov     rax, rbp
.text:0000000000004867                 pop     rbx
.text:0000000000004868                 pop     rbp
.text:0000000000004869                 pop     r12
.text:000000000000486B                 pop     r13
.text:000000000000486D                 retn
.text:000000000000486D ; } // starts at 4810
.text:000000000000486D safe_read       endp
.text:000000000000486D
.text:000000000000486D ; ---------------------------------------------------------------------------
.text:000000000000486E                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870
.text:0000000000004870 ; __int64 __fastcall safe_write(int fd, void *buf, size_t n)
.text:0000000000004870                 public safe_write
.text:0000000000004870 safe_write      proc near               ; CODE XREF: full_write+39↑p
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 push    r13
.text:0000000000004872                 push    r12
.text:0000000000004874                 mov     r13d, edi
.text:0000000000004877                 push    rbp
.text:0000000000004878                 push    rbx
.text:0000000000004879                 mov     r12, rsi
.text:000000000000487C                 mov     rbx, rdx
.text:000000000000487F                 sub     rsp, 8
.text:0000000000004883                 nop     dword ptr [rax+rax+00h]
.text:0000000000004888
.text:0000000000004888 loc_4888:                               ; CODE XREF: safe_write+38↓j
.text:0000000000004888                                         ; safe_write+4D↓j
.text:0000000000004888                 mov     rdx, rbx        ; n
.text:000000000000488B                 mov     rsi, r12        ; buf
.text:000000000000488E                 mov     edi, r13d       ; fd
.text:0000000000004891                 call    _write
.text:0000000000004896                 test    rax, rax
.text:0000000000004899                 mov     rbp, rax
.text:000000000000489C                 jns     short loc_48C0
.text:000000000000489E                 call    ___errno_location
.text:00000000000048A3                 mov     eax, [rax]
.text:00000000000048A5                 cmp     eax, 4
.text:00000000000048A8                 jz      short loc_4888
.text:00000000000048AA                 cmp     eax, 16h
.text:00000000000048AD                 jnz     short loc_48C0
.text:00000000000048AF                 cmp     rbx, 7FF00000h
.text:00000000000048B6                 jbe     short loc_48C0
.text:00000000000048B8                 mov     ebx, 7FF00000h
.text:00000000000048BD                 jmp     short loc_4888
.text:00000000000048BD ; ---------------------------------------------------------------------------
.text:00000000000048BF                 align 20h
.text:00000000000048C0
.text:00000000000048C0 loc_48C0:                               ; CODE XREF: safe_write+2C↑j
.text:00000000000048C0                                         ; safe_write+3D↑j ...
.text:00000000000048C0                 add     rsp, 8
.text:00000000000048C4                 mov     rax, rbp
.text:00000000000048C7                 pop     rbx
.text:00000000000048C8                 pop     rbp
.text:00000000000048C9                 pop     r12
.text:00000000000048CB                 pop     r13
.text:00000000000048CD                 retn
.text:00000000000048CD ; } // starts at 4870
.text:00000000000048CD safe_write      endp
.text:00000000000048CD
.text:00000000000048CD ; ---------------------------------------------------------------------------
.text:00000000000048CE                 align 10h
.text:00000000000048D0
.text:00000000000048D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048D0
.text:00000000000048D0
.text:00000000000048D0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000048D0                 public version_etc_arn
.text:00000000000048D0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4D0B↓j
.text:00000000000048D0                                         ; version_etc_va:loc_4D5B↓p ...
.text:00000000000048D0
.text:00000000000048D0 var_58          = qword ptr -58h
.text:00000000000048D0 var_50          = qword ptr -50h
.text:00000000000048D0 var_48          = qword ptr -48h
.text:00000000000048D0 var_40          = qword ptr -40h
.text:00000000000048D0
.text:00000000000048D0 ; __unwind {
.text:00000000000048D0                 push    r15
.text:00000000000048D2                 push    r14
.text:00000000000048D4                 push    r13
.text:00000000000048D6                 push    r12
.text:00000000000048D8                 mov     r12, r9
.text:00000000000048DB                 push    rbp
.text:00000000000048DC                 push    rbx
.text:00000000000048DD                 mov     rbp, rdi
.text:00000000000048E0                 mov     rbx, r8
.text:00000000000048E3                 sub     rsp, 28h
.text:00000000000048E7                 test    rsi, rsi
.text:00000000000048EA                 jz      loc_4A08
.text:00000000000048F0                 mov     r8, rdx
.text:00000000000048F3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000048FA                 mov     r9, rcx
.text:00000000000048FD                 xor     eax, eax
.text:00000000000048FF                 mov     rcx, rsi
.text:0000000000004902                 mov     esi, 1
.text:0000000000004907                 call    ___fprintf_chk
.text:000000000000490C
.text:000000000000490C loc_490C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000490C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004913                 xor     edi, edi        ; domainname
.text:0000000000004915                 mov     edx, 5          ; category
.text:000000000000491A                 call    _dcgettext
.text:000000000000491F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004926                 mov     rcx, rax
.text:0000000000004929                 mov     r8d, 7E3h
.text:000000000000492F                 mov     esi, 1
.text:0000000000004934                 mov     rdi, rbp
.text:0000000000004937                 xor     eax, eax
.text:0000000000004939                 call    ___fprintf_chk
.text:000000000000493E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004945                 xor     edi, edi        ; domainname
.text:0000000000004947                 mov     edx, 5          ; category
.text:000000000000494C                 call    _dcgettext
.text:0000000000004951                 mov     rsi, rbp        ; stream
.text:0000000000004954                 mov     rdi, rax        ; s
.text:0000000000004957                 call    _fputs_unlocked
.text:000000000000495C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004960                 ja      def_4974        ; jumptable 0000000000004974 default case
.text:0000000000004966                 lea     rdx, jpt_4974
.text:000000000000496D                 movsxd  rax, ds:(jpt_4974 - 6368h)[rdx+r12*4]
.text:0000000000004971                 add     rax, rdx
.text:0000000000004974                 jmp     rax             ; switch jump
.text:0000000000004974 ; ---------------------------------------------------------------------------
.text:0000000000004976                 align 20h
.text:0000000000004980
.text:0000000000004980 loc_4980:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004980                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:0000000000004980                 mov     r9, [rbx+38h]   ; jumptable 0000000000004974 case 8
.text:0000000000004984                 mov     rax, [rbx+10h]
.text:0000000000004988                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000498F                 mov     r8, [rbx+8]
.text:0000000000004993                 mov     edx, 5          ; category
.text:0000000000004998                 xor     edi, edi        ; domainname
.text:000000000000499A                 mov     r13, [rbx+30h]
.text:000000000000499E                 mov     r12, [rbx+28h]
.text:00000000000049A2                 mov     [rsp+58h+var_48], r9
.text:00000000000049A7                 mov     r15, [rbx+20h]
.text:00000000000049AB                 mov     r14, [rbx+18h]
.text:00000000000049AF                 mov     [rsp+58h+var_58], rax
.text:00000000000049B3                 mov     [rsp+58h+var_50], r8
.text:00000000000049B8                 mov     rbx, [rbx]
.text:00000000000049BB                 call    _dcgettext
.text:00000000000049C0                 sub     rsp, 8
.text:00000000000049C4
.text:00000000000049C4 loc_49C4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000049C4                 mov     r9, [rsp+60h+var_48]
.text:00000000000049C9                 mov     rdx, rax
.text:00000000000049CC                 mov     rcx, rbx
.text:00000000000049CF                 mov     esi, 1
.text:00000000000049D4                 mov     rdi, rbp
.text:00000000000049D7                 xor     eax, eax
.text:00000000000049D9                 push    r9
.text:00000000000049DB                 push    r13
.text:00000000000049DD                 push    r12
.text:00000000000049DF                 push    r15
.text:00000000000049E1                 push    r14
.text:00000000000049E3                 mov     r9, [rsp+88h+var_58]
.text:00000000000049E8                 mov     r8, [rsp+88h+var_50]
.text:00000000000049ED                 call    ___fprintf_chk
.text:00000000000049F2                 add     rsp, 30h
.text:00000000000049F6
.text:00000000000049F6 loc_49F6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000049F6                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:00000000000049F6                 add     rsp, 28h        ; jumptable 0000000000004974 case 0
.text:00000000000049FA                 pop     rbx
.text:00000000000049FB                 pop     rbp
.text:00000000000049FC                 pop     r12
.text:00000000000049FE                 pop     r13
.text:0000000000004A00                 pop     r14
.text:0000000000004A02                 pop     r15
.text:0000000000004A04                 retn
.text:0000000000004A04 ; ---------------------------------------------------------------------------
.text:0000000000004A05                 align 8
.text:0000000000004A08
.text:0000000000004A08 loc_4A08:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004A08                 mov     r8, rcx
.text:0000000000004A0B                 mov     rcx, rdx
.text:0000000000004A0E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004A15                 mov     esi, 1
.text:0000000000004A1A                 xor     eax, eax
.text:0000000000004A1C                 call    ___fprintf_chk
.text:0000000000004A21                 jmp     loc_490C
.text:0000000000004A21 ; ---------------------------------------------------------------------------
.text:0000000000004A26                 align 10h
.text:0000000000004A30
.text:0000000000004A30 loc_4A30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004A30                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:0000000000004A30                 mov     r10, [rbx+40h]  ; jumptable 0000000000004974 case 9
.text:0000000000004A34                 mov     r9, [rbx+38h]
.text:0000000000004A38                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004A3F                 mov     rax, [rbx+10h]
.text:0000000000004A43                 mov     r8, [rbx+8]
.text:0000000000004A47                 mov     edx, 5          ; category
.text:0000000000004A4C                 mov     r13, [rbx+30h]
.text:0000000000004A50                 mov     r12, [rbx+28h]
.text:0000000000004A54                 mov     r15, [rbx+20h]
.text:0000000000004A58                 mov     r14, [rbx+18h]
.text:0000000000004A5C                 mov     rbx, [rbx]
.text:0000000000004A5F                 mov     [rsp+58h+var_40], r10
.text:0000000000004A64                 mov     [rsp+58h+var_48], r9
.text:0000000000004A69                 mov     [rsp+58h+var_58], rax
.text:0000000000004A6D                 mov     [rsp+58h+var_50], r8
.text:0000000000004A72
.text:0000000000004A72 loc_4A72:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004A72                 xor     edi, edi        ; domainname
.text:0000000000004A74                 call    _dcgettext
.text:0000000000004A79                 mov     r10, [rsp+58h+var_40]
.text:0000000000004A7E                 push    r10
.text:0000000000004A80                 jmp     loc_49C4
.text:0000000000004A80 ; ---------------------------------------------------------------------------
.text:0000000000004A85                 align 8
.text:0000000000004A88
.text:0000000000004A88 loc_4A88:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004A88                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:0000000000004A88                 mov     rbx, [rbx]      ; jumptable 0000000000004974 case 1
.text:0000000000004A8B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004A92                 mov     edx, 5          ; category
.text:0000000000004A97                 xor     edi, edi        ; domainname
.text:0000000000004A99                 call    _dcgettext
.text:0000000000004A9E                 add     rsp, 28h
.text:0000000000004AA2                 mov     rcx, rbx
.text:0000000000004AA5                 mov     rdi, rbp
.text:0000000000004AA8                 pop     rbx
.text:0000000000004AA9                 pop     rbp
.text:0000000000004AAA                 pop     r12
.text:0000000000004AAC                 pop     r13
.text:0000000000004AAE                 pop     r14
.text:0000000000004AB0                 pop     r15
.text:0000000000004AB2                 mov     rdx, rax
.text:0000000000004AB5                 mov     esi, 1
.text:0000000000004ABA                 xor     eax, eax
.text:0000000000004ABC                 jmp     ___fprintf_chk
.text:0000000000004ABC ; ---------------------------------------------------------------------------
.text:0000000000004AC1                 align 8
.text:0000000000004AC8
.text:0000000000004AC8 loc_4AC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004AC8                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:0000000000004AC8                 mov     r12, [rbx+8]    ; jumptable 0000000000004974 case 2
.text:0000000000004ACC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004AD3                 mov     rbx, [rbx]
.text:0000000000004AD6                 mov     edx, 5          ; category
.text:0000000000004ADB                 xor     edi, edi        ; domainname
.text:0000000000004ADD                 call    _dcgettext
.text:0000000000004AE2                 add     rsp, 28h
.text:0000000000004AE6                 mov     r8, r12
.text:0000000000004AE9                 mov     rcx, rbx
.text:0000000000004AEC                 mov     rdi, rbp
.text:0000000000004AEF                 mov     rdx, rax
.text:0000000000004AF2                 mov     esi, 1
.text:0000000000004AF7                 pop     rbx
.text:0000000000004AF8                 pop     rbp
.text:0000000000004AF9                 pop     r12
.text:0000000000004AFB                 pop     r13
.text:0000000000004AFD                 pop     r14
.text:0000000000004AFF                 pop     r15
.text:0000000000004B01                 xor     eax, eax
.text:0000000000004B03                 jmp     ___fprintf_chk
.text:0000000000004B03 ; ---------------------------------------------------------------------------
.text:0000000000004B08                 align 10h
.text:0000000000004B10
.text:0000000000004B10 loc_4B10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B10                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:0000000000004B10                 mov     r13, [rbx+10h]  ; jumptable 0000000000004974 case 3
.text:0000000000004B14                 mov     r12, [rbx+8]
.text:0000000000004B18                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004B1F                 mov     rbx, [rbx]
.text:0000000000004B22                 mov     edx, 5          ; category
.text:0000000000004B27                 xor     edi, edi        ; domainname
.text:0000000000004B29                 call    _dcgettext
.text:0000000000004B2E                 add     rsp, 28h
.text:0000000000004B32                 mov     r9, r13
.text:0000000000004B35                 mov     r8, r12
.text:0000000000004B38                 mov     rcx, rbx
.text:0000000000004B3B                 mov     rdi, rbp
.text:0000000000004B3E                 mov     rdx, rax
.text:0000000000004B41                 pop     rbx
.text:0000000000004B42                 pop     rbp
.text:0000000000004B43                 pop     r12
.text:0000000000004B45                 pop     r13
.text:0000000000004B47                 pop     r14
.text:0000000000004B49                 pop     r15
.text:0000000000004B4B                 mov     esi, 1
.text:0000000000004B50                 xor     eax, eax
.text:0000000000004B52                 jmp     ___fprintf_chk
.text:0000000000004B52 ; ---------------------------------------------------------------------------
.text:0000000000004B57                 align 20h
.text:0000000000004B60
.text:0000000000004B60 loc_4B60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B60                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:0000000000004B60                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004974 case 4
.text:0000000000004B67                 mov     edx, 5          ; category
.text:0000000000004B6C                 xor     edi, edi        ; domainname
.text:0000000000004B6E                 mov     r14, [rbx+18h]
.text:0000000000004B72                 mov     r13, [rbx+10h]
.text:0000000000004B76                 mov     r12, [rbx+8]
.text:0000000000004B7A                 mov     rbx, [rbx]
.text:0000000000004B7D                 call    _dcgettext
.text:0000000000004B82                 sub     rsp, 8
.text:0000000000004B86
.text:0000000000004B86 loc_4B86:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004B86                 push    r14
.text:0000000000004B88                 mov     rdx, rax
.text:0000000000004B8B                 mov     r9, r13
.text:0000000000004B8E                 mov     r8, r12
.text:0000000000004B91                 mov     rcx, rbx
.text:0000000000004B94                 mov     rdi, rbp
.text:0000000000004B97                 mov     esi, 1
.text:0000000000004B9C                 xor     eax, eax
.text:0000000000004B9E                 call    ___fprintf_chk
.text:0000000000004BA3                 pop     rax
.text:0000000000004BA4                 pop     rdx
.text:0000000000004BA5                 add     rsp, 28h
.text:0000000000004BA9                 pop     rbx
.text:0000000000004BAA                 pop     rbp
.text:0000000000004BAB                 pop     r12
.text:0000000000004BAD                 pop     r13
.text:0000000000004BAF                 pop     r14
.text:0000000000004BB1                 pop     r15
.text:0000000000004BB3                 retn
.text:0000000000004BB3 ; ---------------------------------------------------------------------------
.text:0000000000004BB4                 align 8
.text:0000000000004BB8
.text:0000000000004BB8 loc_4BB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004BB8                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:0000000000004BB8                 mov     r15, [rbx+20h]  ; jumptable 0000000000004974 case 5
.text:0000000000004BBC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004BC3                 mov     edx, 5          ; category
.text:0000000000004BC8                 xor     edi, edi        ; domainname
.text:0000000000004BCA                 mov     r14, [rbx+18h]
.text:0000000000004BCE                 mov     r13, [rbx+10h]
.text:0000000000004BD2                 mov     r12, [rbx+8]
.text:0000000000004BD6                 mov     rbx, [rbx]
.text:0000000000004BD9                 call    _dcgettext
.text:0000000000004BDE                 push    r15
.text:0000000000004BE0                 jmp     short loc_4B86
.text:0000000000004BE0 ; ---------------------------------------------------------------------------
.text:0000000000004BE2                 align 8
.text:0000000000004BE8
.text:0000000000004BE8 loc_4BE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004BE8                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:0000000000004BE8                 mov     r8, [rbx+8]     ; jumptable 0000000000004974 case 6
.text:0000000000004BEC                 mov     r12, [rbx+28h]
.text:0000000000004BF0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004BF7                 mov     r15, [rbx+20h]
.text:0000000000004BFB                 mov     r14, [rbx+18h]
.text:0000000000004BFF                 mov     edx, 5          ; category
.text:0000000000004C04                 mov     r13, [rbx+10h]
.text:0000000000004C08                 xor     edi, edi        ; domainname
.text:0000000000004C0A                 mov     rbx, [rbx]
.text:0000000000004C0D                 mov     [rsp+58h+var_58], r8
.text:0000000000004C11                 call    _dcgettext
.text:0000000000004C16                 sub     rsp, 8
.text:0000000000004C1A                 mov     r9, r13
.text:0000000000004C1D                 push    r12
.text:0000000000004C1F                 push    r15
.text:0000000000004C21                 push    r14
.text:0000000000004C23
.text:0000000000004C23 loc_4C23:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004C23                 mov     r8, [rsp+78h+var_58]
.text:0000000000004C28                 mov     rcx, rbx
.text:0000000000004C2B                 mov     rdx, rax
.text:0000000000004C2E                 mov     rdi, rbp
.text:0000000000004C31                 mov     esi, 1
.text:0000000000004C36                 xor     eax, eax
.text:0000000000004C38                 call    ___fprintf_chk
.text:0000000000004C3D                 add     rsp, 20h
.text:0000000000004C41                 add     rsp, 28h
.text:0000000000004C45                 pop     rbx
.text:0000000000004C46                 pop     rbp
.text:0000000000004C47                 pop     r12
.text:0000000000004C49                 pop     r13
.text:0000000000004C4B                 pop     r14
.text:0000000000004C4D                 pop     r15
.text:0000000000004C4F                 retn
.text:0000000000004C50 ; ---------------------------------------------------------------------------
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C50                                         ; DATA XREF: .rodata:jpt_4974↓o
.text:0000000000004C50                 mov     r9, [rbx+10h]   ; jumptable 0000000000004974 case 7
.text:0000000000004C54                 mov     r13, [rbx+30h]
.text:0000000000004C58                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004C5F                 mov     r12, [rbx+28h]
.text:0000000000004C63                 mov     r15, [rbx+20h]
.text:0000000000004C67                 mov     edx, 5          ; category
.text:0000000000004C6C                 mov     r14, [rbx+18h]
.text:0000000000004C70                 mov     r8, [rbx+8]
.text:0000000000004C74                 xor     edi, edi        ; domainname
.text:0000000000004C76                 mov     [rsp+58h+var_50], r9
.text:0000000000004C7B                 mov     rbx, [rbx]
.text:0000000000004C7E                 mov     [rsp+58h+var_58], r8
.text:0000000000004C82                 call    _dcgettext
.text:0000000000004C87                 push    r13
.text:0000000000004C89                 push    r12
.text:0000000000004C8B                 push    r15
.text:0000000000004C8D                 push    r14
.text:0000000000004C8F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004C94                 jmp     short loc_4C23
.text:0000000000004C94 ; ---------------------------------------------------------------------------
.text:0000000000004C96                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 def_4974:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004CA0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004974 default case
.text:0000000000004CA4                 mov     r9, [rbx+38h]
.text:0000000000004CA8                 mov     edx, 5
.text:0000000000004CAD                 mov     rax, [rbx+10h]
.text:0000000000004CB1                 mov     r8, [rbx+8]
.text:0000000000004CB5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004CBC                 mov     r13, [rbx+30h]
.text:0000000000004CC0                 mov     r12, [rbx+28h]
.text:0000000000004CC4                 mov     r15, [rbx+20h]
.text:0000000000004CC8                 mov     r14, [rbx+18h]
.text:0000000000004CCC                 mov     [rsp+58h+var_40], r10
.text:0000000000004CD1                 mov     [rsp+58h+var_48], r9
.text:0000000000004CD6                 mov     [rsp+58h+var_58], rax
.text:0000000000004CDA                 mov     [rsp+58h+var_50], r8
.text:0000000000004CDF                 mov     rbx, [rbx]
.text:0000000000004CE2                 jmp     loc_4A72
.text:0000000000004CE2 ; } // starts at 48D0
.text:0000000000004CE2 version_etc_arn endp
.text:0000000000004CE2
.text:0000000000004CE2 ; ---------------------------------------------------------------------------
.text:0000000000004CE7                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CF0
.text:0000000000004CF0 ; Attributes: info_from_lumina
.text:0000000000004CF0
.text:0000000000004CF0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004CF0                 public version_etc_ar
.text:0000000000004CF0 version_etc_ar  proc near
.text:0000000000004CF0 ; __unwind {
.text:0000000000004CF0                 xor     r9d, r9d
.text:0000000000004CF3                 cmp     qword ptr [r8], 0
.text:0000000000004CF7                 jz      short loc_4D0B
.text:0000000000004CF9                 nop     dword ptr [rax+00000000h]
.text:0000000000004D00
.text:0000000000004D00 loc_4D00:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004D00                 add     r9, 1
.text:0000000000004D04                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004D09                 jnz     short loc_4D00
.text:0000000000004D0B
.text:0000000000004D0B loc_4D0B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004D0B                 jmp     version_etc_arn
.text:0000000000004D0B ; } // starts at 4CF0
.text:0000000000004D0B version_etc_ar  endp
.text:0000000000004D0B
.text:0000000000004D10
.text:0000000000004D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D10
.text:0000000000004D10 ; Attributes: info_from_lumina
.text:0000000000004D10
.text:0000000000004D10 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004D10                 public version_etc_va
.text:0000000000004D10 version_etc_va  proc near
.text:0000000000004D10
.text:0000000000004D10 authtab         = qword ptr -68h
.text:0000000000004D10 var_10          = qword ptr -10h
.text:0000000000004D10
.text:0000000000004D10 ; __unwind {
.text:0000000000004D10                 sub     rsp, 68h
.text:0000000000004D14                 mov     r10, r8
.text:0000000000004D17                 xor     r9d, r9d
.text:0000000000004D1A                 mov     rax, fs:28h
.text:0000000000004D23                 mov     [rsp+68h+var_10], rax
.text:0000000000004D28                 xor     eax, eax
.text:0000000000004D2A                 mov     r8, rsp
.text:0000000000004D2D                 nop     dword ptr [rax]
.text:0000000000004D30
.text:0000000000004D30 loc_4D30:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004D30                 mov     eax, [r10]
.text:0000000000004D33                 cmp     eax, 2Fh ; '/'
.text:0000000000004D36                 ja      short loc_4D7A
.text:0000000000004D38                 mov     r11d, eax
.text:0000000000004D3B                 add     r11, [r10+10h]
.text:0000000000004D3F                 add     eax, 8
.text:0000000000004D42                 mov     [r10], eax
.text:0000000000004D45
.text:0000000000004D45 loc_4D45:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004D45                 mov     rax, [r11]
.text:0000000000004D48                 test    rax, rax
.text:0000000000004D4B                 mov     [r8+r9*8], rax
.text:0000000000004D4F                 jz      short loc_4D5B
.text:0000000000004D51                 add     r9, 1
.text:0000000000004D55                 cmp     r9, 0Ah
.text:0000000000004D59                 jnz     short loc_4D30
.text:0000000000004D5B
.text:0000000000004D5B loc_4D5B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004D5B                 call    version_etc_arn
.text:0000000000004D60                 mov     rax, [rsp+68h+var_10]
.text:0000000000004D65                 xor     rax, fs:28h
.text:0000000000004D6E                 jnz     short loc_4D75
.text:0000000000004D70                 add     rsp, 68h
.text:0000000000004D74                 retn
.text:0000000000004D75 ; ---------------------------------------------------------------------------
.text:0000000000004D75
.text:0000000000004D75 loc_4D75:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004D75                 call    ___stack_chk_fail
.text:0000000000004D7A ; ---------------------------------------------------------------------------
.text:0000000000004D7A
.text:0000000000004D7A loc_4D7A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004D7A                 mov     r11, [r10+8]
.text:0000000000004D7E                 lea     rax, [r11+8]
.text:0000000000004D82                 mov     [r10+8], rax
.text:0000000000004D86                 jmp     short loc_4D45
.text:0000000000004D86 ; } // starts at 4D10
.text:0000000000004D86 version_etc_va  endp
.text:0000000000004D86
.text:0000000000004D86 ; ---------------------------------------------------------------------------
.text:0000000000004D88                 align 10h
.text:0000000000004D90
.text:0000000000004D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D90
.text:0000000000004D90 ; Attributes: info_from_lumina
.text:0000000000004D90
.text:0000000000004D90 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004D90                 public version_etc
.text:0000000000004D90 version_etc     proc near               ; CODE XREF: main+18D↑p
.text:0000000000004D90
.text:0000000000004D90 var_C0          = dword ptr -0C0h
.text:0000000000004D90 var_B8          = qword ptr -0B8h
.text:0000000000004D90 var_B0          = qword ptr -0B0h
.text:0000000000004D90 var_A8          = byte ptr -0A8h
.text:0000000000004D90 var_50          = qword ptr -50h
.text:0000000000004D90 var_48          = byte ptr -48h
.text:0000000000004D90 var_28          = qword ptr -28h
.text:0000000000004D90 var_20          = qword ptr -20h
.text:0000000000004D90 arg_0           = byte ptr  8
.text:0000000000004D90
.text:0000000000004D90 ; __unwind {
.text:0000000000004D90                 push    rbp
.text:0000000000004D91                 push    rbx
.text:0000000000004D92                 mov     r10d, 20h ; ' '
.text:0000000000004D98                 xor     r11d, r11d
.text:0000000000004D9B                 sub     rsp, 0B8h
.text:0000000000004DA2                 mov     rax, fs:28h
.text:0000000000004DAB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004DB0                 xor     eax, eax
.text:0000000000004DB2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004DBA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004DC2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004DCA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004DCF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004DD7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004DDF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004DE4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004DEC                 xor     r9d, r9d
.text:0000000000004DEF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004DF4                 mov     rbp, rax
.text:0000000000004DF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004E00
.text:0000000000004E00 loc_4E00:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004E00                 cmp     r10d, 2Fh ; '/'
.text:0000000000004E04                 ja      short loc_4E5C
.text:0000000000004E06                 mov     eax, r10d
.text:0000000000004E09                 mov     r11d, 1
.text:0000000000004E0F                 add     r10d, 8
.text:0000000000004E13                 add     rax, rbp
.text:0000000000004E16
.text:0000000000004E16 loc_4E16:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004E16                 mov     rax, [rax]
.text:0000000000004E19                 test    rax, rax
.text:0000000000004E1C                 mov     [r8+r9*8], rax
.text:0000000000004E20                 jz      short loc_4E2C
.text:0000000000004E22                 add     r9, 1
.text:0000000000004E26                 cmp     r9, 0Ah
.text:0000000000004E2A                 jnz     short loc_4E00
.text:0000000000004E2C
.text:0000000000004E2C loc_4E2C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000004E2C                 test    r11b, r11b
.text:0000000000004E2F                 jnz     short loc_4E55
.text:0000000000004E31
.text:0000000000004E31 loc_4E31:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004E31                 call    version_etc_arn
.text:0000000000004E36                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000004E3B                 xor     rax, fs:28h
.text:0000000000004E44                 jnz     short loc_4E50
.text:0000000000004E46                 add     rsp, 0B8h
.text:0000000000004E4D                 pop     rbx
.text:0000000000004E4E                 pop     rbp
.text:0000000000004E4F                 retn
.text:0000000000004E50 ; ---------------------------------------------------------------------------
.text:0000000000004E50
.text:0000000000004E50 loc_4E50:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004E50                 call    ___stack_chk_fail
.text:0000000000004E55 ; ---------------------------------------------------------------------------
.text:0000000000004E55
.text:0000000000004E55 loc_4E55:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004E55                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000004E5A                 jmp     short loc_4E31
.text:0000000000004E5C ; ---------------------------------------------------------------------------
.text:0000000000004E5C
.text:0000000000004E5C loc_4E5C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000004E5C                 mov     rax, rbx
.text:0000000000004E5F                 add     rbx, 8
.text:0000000000004E63                 jmp     short loc_4E16
.text:0000000000004E63 ; } // starts at 4D90
.text:0000000000004E63 version_etc     endp
.text:0000000000004E63
.text:0000000000004E63 ; ---------------------------------------------------------------------------
.text:0000000000004E65                 align 10h
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70 ; Attributes: info_from_lumina
.text:0000000000004E70
.text:0000000000004E70 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004E70                 public emit_bug_reporting_address
.text:0000000000004E70 emit_bug_reporting_address proc near
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 push    rbx
.text:0000000000004E71                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004E78                 mov     edx, 5          ; category
.text:0000000000004E7D                 xor     edi, edi        ; domainname
.text:0000000000004E7F                 call    _dcgettext
.text:0000000000004E84                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004E8B                 mov     rsi, rax
.text:0000000000004E8E                 mov     edi, 1
.text:0000000000004E93                 xor     eax, eax
.text:0000000000004E95                 call    ___printf_chk
.text:0000000000004E9A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004EA1                 mov     edx, 5          ; category
.text:0000000000004EA6                 xor     edi, edi        ; domainname
.text:0000000000004EA8                 call    _dcgettext
.text:0000000000004EAD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004EB4                 lea     rdx, unk_558A
.text:0000000000004EBB                 mov     rsi, rax
.text:0000000000004EBE                 mov     edi, 1
.text:0000000000004EC3                 xor     eax, eax
.text:0000000000004EC5                 call    ___printf_chk
.text:0000000000004ECA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004ED1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004ED8                 xor     edi, edi        ; domainname
.text:0000000000004EDA                 mov     edx, 5          ; category
.text:0000000000004EDF                 call    _dcgettext
.text:0000000000004EE4                 mov     rsi, rbx        ; stream
.text:0000000000004EE7                 mov     rdi, rax        ; s
.text:0000000000004EEA                 pop     rbx
.text:0000000000004EEB                 jmp     _fputs_unlocked
.text:0000000000004EEB ; } // starts at 4E70
.text:0000000000004EEB emit_bug_reporting_address endp
.text:0000000000004EEB
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0
.text:0000000000004EF0                 public xmalloc
.text:0000000000004EF0 xmalloc         proc near               ; CODE XREF: main+36C↑p
.text:0000000000004EF0                                         ; main+382↑p ...
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 push    rbx
.text:0000000000004EF1                 mov     rbx, rdi
.text:0000000000004EF4                 call    _malloc
.text:0000000000004EF9                 test    rax, rax
.text:0000000000004EFC                 jnz     short loc_4F03
.text:0000000000004EFE                 test    rbx, rbx
.text:0000000000004F01                 jnz     short loc_4F05
.text:0000000000004F03
.text:0000000000004F03 loc_4F03:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004F03                 pop     rbx
.text:0000000000004F04                 retn
.text:0000000000004F05 ; ---------------------------------------------------------------------------
.text:0000000000004F05
.text:0000000000004F05 loc_4F05:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004F05                 call    xalloc_die
.text:0000000000004F05 ; } // starts at 4EF0
.text:0000000000004F05 xmalloc         endp
.text:0000000000004F05
.text:0000000000004F05 ; ---------------------------------------------------------------------------
.text:0000000000004F0A                 align 10h
.text:0000000000004F10
.text:0000000000004F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F10
.text:0000000000004F10 ; Attributes: info_from_lumina
.text:0000000000004F10
.text:0000000000004F10 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004F10                 public xnmalloc
.text:0000000000004F10 xnmalloc        proc near
.text:0000000000004F10 ; __unwind {
.text:0000000000004F10                 mov     rax, rdi
.text:0000000000004F13                 mul     rsi
.text:0000000000004F16                 mov     rdi, rax
.text:0000000000004F19                 seto    al
.text:0000000000004F1C                 test    rdi, rdi
.text:0000000000004F1F                 js      short loc_4F2B
.text:0000000000004F21                 movzx   eax, al
.text:0000000000004F24                 test    rax, rax
.text:0000000000004F27                 jnz     short loc_4F2B
.text:0000000000004F29                 jmp     short xmalloc
.text:0000000000004F2B ; ---------------------------------------------------------------------------
.text:0000000000004F2B
.text:0000000000004F2B loc_4F2B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004F2B                                         ; xnmalloc+17↑j
.text:0000000000004F2B                 sub     rsp, 8
.text:0000000000004F2F                 call    xalloc_die
.text:0000000000004F2F ; } // starts at 4F10
.text:0000000000004F2F xnmalloc        endp
.text:0000000000004F2F
.text:0000000000004F2F ; ---------------------------------------------------------------------------
.text:0000000000004F34                 align 20h
.text:0000000000004F40
.text:0000000000004F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F40
.text:0000000000004F40
.text:0000000000004F40                 public xcharalloc
.text:0000000000004F40 xcharalloc      proc near
.text:0000000000004F40 ; __unwind {
.text:0000000000004F40                 jmp     short xmalloc
.text:0000000000004F40 ; } // starts at 4F40
.text:0000000000004F40 xcharalloc      endp
.text:0000000000004F40
.text:0000000000004F40 ; ---------------------------------------------------------------------------
.text:0000000000004F42                 align 10h
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50 ; Attributes: info_from_lumina
.text:0000000000004F50
.text:0000000000004F50 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004F50                 public xrealloc
.text:0000000000004F50 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004F50                                         ; quotearg_n_options+182↑p ...
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 test    rsi, rsi
.text:0000000000004F53                 push    rbx
.text:0000000000004F54                 mov     rbx, rsi
.text:0000000000004F57                 jnz     short loc_4F5E
.text:0000000000004F59                 test    rdi, rdi
.text:0000000000004F5C                 jnz     short loc_4F78
.text:0000000000004F5E
.text:0000000000004F5E loc_4F5E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004F5E                 mov     rsi, rbx        ; size
.text:0000000000004F61                 call    _realloc
.text:0000000000004F66                 test    rax, rax
.text:0000000000004F69                 jnz     short loc_4F70
.text:0000000000004F6B                 test    rbx, rbx
.text:0000000000004F6E                 jnz     short loc_4F81
.text:0000000000004F70
.text:0000000000004F70 loc_4F70:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004F70                 pop     rbx
.text:0000000000004F71                 retn
.text:0000000000004F71 ; ---------------------------------------------------------------------------
.text:0000000000004F72                 align 8
.text:0000000000004F78
.text:0000000000004F78 loc_4F78:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004F78                 call    _free
.text:0000000000004F7D                 xor     eax, eax
.text:0000000000004F7F                 pop     rbx
.text:0000000000004F80                 retn
.text:0000000000004F81 ; ---------------------------------------------------------------------------
.text:0000000000004F81
.text:0000000000004F81 loc_4F81:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004F81                 call    xalloc_die
.text:0000000000004F81 ; } // starts at 4F50
.text:0000000000004F81 xrealloc        endp
.text:0000000000004F81
.text:0000000000004F81 ; ---------------------------------------------------------------------------
.text:0000000000004F86                 align 10h
.text:0000000000004F90
.text:0000000000004F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F90
.text:0000000000004F90 ; Attributes: info_from_lumina
.text:0000000000004F90
.text:0000000000004F90 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004F90                 public xnrealloc
.text:0000000000004F90 xnrealloc       proc near
.text:0000000000004F90 ; __unwind {
.text:0000000000004F90                 mov     rax, rsi
.text:0000000000004F93                 mul     rdx
.text:0000000000004F96                 mov     rsi, rax
.text:0000000000004F99                 seto    al
.text:0000000000004F9C                 test    rsi, rsi
.text:0000000000004F9F                 js      short loc_4FAB
.text:0000000000004FA1                 movzx   eax, al
.text:0000000000004FA4                 test    rax, rax
.text:0000000000004FA7                 jnz     short loc_4FAB
.text:0000000000004FA9                 jmp     short xrealloc
.text:0000000000004FAB ; ---------------------------------------------------------------------------
.text:0000000000004FAB
.text:0000000000004FAB loc_4FAB:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004FAB                                         ; xnrealloc+17↑j
.text:0000000000004FAB                 sub     rsp, 8
.text:0000000000004FAF                 call    xalloc_die
.text:0000000000004FAF ; } // starts at 4F90
.text:0000000000004FAF xnrealloc       endp
.text:0000000000004FAF
.text:0000000000004FAF ; ---------------------------------------------------------------------------
.text:0000000000004FB4                 align 20h
.text:0000000000004FC0
.text:0000000000004FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FC0
.text:0000000000004FC0 ; Attributes: info_from_lumina
.text:0000000000004FC0
.text:0000000000004FC0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004FC0                 public x2nrealloc
.text:0000000000004FC0 x2nrealloc      proc near
.text:0000000000004FC0 ; __unwind {
.text:0000000000004FC0                 test    rdi, rdi
.text:0000000000004FC3                 mov     r9, rdx
.text:0000000000004FC6                 mov     rcx, [rsi]
.text:0000000000004FC9                 jz      short loc_5000
.text:0000000000004FCB                 xor     edx, edx
.text:0000000000004FCD                 mov     rax, 5555555555555554h
.text:0000000000004FD7                 div     r9
.text:0000000000004FDA                 cmp     rax, rcx
.text:0000000000004FDD                 jbe     short loc_501B
.text:0000000000004FDF                 mov     rax, rcx
.text:0000000000004FE2                 shr     rax, 1
.text:0000000000004FE5                 lea     rcx, [rax+rcx+1]
.text:0000000000004FEA
.text:0000000000004FEA loc_4FEA:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000004FEA                 mov     [rsi], rcx
.text:0000000000004FED                 imul    rcx, r9
.text:0000000000004FF1                 mov     rsi, rcx
.text:0000000000004FF4                 jmp     xrealloc
.text:0000000000004FF4 ; ---------------------------------------------------------------------------
.text:0000000000004FF9                 align 20h
.text:0000000000005000
.text:0000000000005000 loc_5000:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005000                 test    rcx, rcx
.text:0000000000005003                 jz      short loc_5028
.text:0000000000005005
.text:0000000000005005 loc_5005:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005005                 mov     rax, rcx
.text:0000000000005008                 mul     r9
.text:000000000000500B                 seto    dl
.text:000000000000500E                 test    rax, rax
.text:0000000000005011                 movzx   edx, dl
.text:0000000000005014                 js      short loc_501B
.text:0000000000005016                 test    rdx, rdx
.text:0000000000005019                 jz      short loc_4FEA
.text:000000000000501B
.text:000000000000501B loc_501B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000501B                                         ; x2nrealloc+54↑j
.text:000000000000501B                 sub     rsp, 8
.text:000000000000501F                 call    xalloc_die
.text:000000000000501F ; ---------------------------------------------------------------------------
.text:0000000000005024                 align 8
.text:0000000000005028
.text:0000000000005028 loc_5028:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005028                 xor     edx, edx
.text:000000000000502A                 mov     eax, 80h
.text:000000000000502F                 xor     r8d, r8d
.text:0000000000005032                 div     r9
.text:0000000000005035                 test    rax, rax
.text:0000000000005038                 setz    r8b
.text:000000000000503C                 lea     rcx, [r8+rax]
.text:0000000000005040                 jmp     short loc_5005
.text:0000000000005040 ; } // starts at 4FC0
.text:0000000000005040 x2nrealloc      endp
.text:0000000000005040
.text:0000000000005040 ; ---------------------------------------------------------------------------
.text:0000000000005042                 align 10h
.text:0000000000005050
.text:0000000000005050 ; =============== S U B R O U T I N E =======================================
.text:0000000000005050
.text:0000000000005050 ; Attributes: info_from_lumina
.text:0000000000005050
.text:0000000000005050 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005050                 public x2realloc
.text:0000000000005050 x2realloc       proc near
.text:0000000000005050 ; __unwind {
.text:0000000000005050                 test    rdi, rdi
.text:0000000000005053                 mov     rax, [rsi]
.text:0000000000005056                 jz      short loc_5080
.text:0000000000005058                 mov     rdx, 5555555555555553h
.text:0000000000005062                 cmp     rax, rdx
.text:0000000000005065                 ja      short loc_5091
.text:0000000000005067                 mov     rdx, rax
.text:000000000000506A                 shr     rdx, 1
.text:000000000000506D                 lea     rax, [rdx+rax+1]
.text:0000000000005072
.text:0000000000005072 loc_5072:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005072                 mov     [rsi], rax
.text:0000000000005075                 mov     rsi, rax
.text:0000000000005078                 jmp     xrealloc
.text:0000000000005078 ; ---------------------------------------------------------------------------
.text:000000000000507D                 align 20h
.text:0000000000005080
.text:0000000000005080 loc_5080:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005080                 test    rax, rax
.text:0000000000005083                 mov     edx, 80h
.text:0000000000005088                 cmovz   rax, rdx
.text:000000000000508C                 test    rax, rax
.text:000000000000508F                 jns     short loc_5072
.text:0000000000005091
.text:0000000000005091 loc_5091:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005091                 sub     rsp, 8
.text:0000000000005095                 call    xalloc_die
.text:0000000000005095 ; } // starts at 5050
.text:0000000000005095 x2realloc       endp
.text:0000000000005095
.text:0000000000005095 ; ---------------------------------------------------------------------------
.text:000000000000509A                 align 20h
.text:00000000000050A0
.text:00000000000050A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050A0
.text:00000000000050A0
.text:00000000000050A0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000050A0                 public xzalloc
.text:00000000000050A0 xzalloc         proc near
.text:00000000000050A0 ; __unwind {
.text:00000000000050A0                 push    rbx
.text:00000000000050A1                 mov     rbx, rdi
.text:00000000000050A4                 call    xmalloc
.text:00000000000050A9                 mov     rdx, rbx        ; n
.text:00000000000050AC                 xor     esi, esi        ; c
.text:00000000000050AE                 mov     rdi, rax        ; s
.text:00000000000050B1                 pop     rbx
.text:00000000000050B2                 jmp     _memset
.text:00000000000050B2 ; } // starts at 50A0
.text:00000000000050B2 xzalloc         endp
.text:00000000000050B2
.text:00000000000050B2 ; ---------------------------------------------------------------------------
.text:00000000000050B7                 align 20h
.text:00000000000050C0
.text:00000000000050C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050C0
.text:00000000000050C0 ; Attributes: info_from_lumina
.text:00000000000050C0
.text:00000000000050C0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000050C0                 public xcalloc
.text:00000000000050C0 xcalloc         proc near
.text:00000000000050C0 ; __unwind {
.text:00000000000050C0                 mov     rax, rdi
.text:00000000000050C3                 sub     rsp, 8
.text:00000000000050C7                 mul     rsi
.text:00000000000050CA                 seto    dl
.text:00000000000050CD                 test    rax, rax
.text:00000000000050D0                 js      short loc_50E9
.text:00000000000050D2                 movzx   edx, dl
.text:00000000000050D5                 test    rdx, rdx
.text:00000000000050D8                 jnz     short loc_50E9
.text:00000000000050DA                 call    _calloc
.text:00000000000050DF                 test    rax, rax
.text:00000000000050E2                 jz      short loc_50E9
.text:00000000000050E4                 add     rsp, 8
.text:00000000000050E8                 retn
.text:00000000000050E9 ; ---------------------------------------------------------------------------
.text:00000000000050E9
.text:00000000000050E9 loc_50E9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000050E9                                         ; xcalloc+18↑j ...
.text:00000000000050E9                 call    xalloc_die
.text:00000000000050E9 ; } // starts at 50C0
.text:00000000000050E9 xcalloc         endp
.text:00000000000050E9
.text:00000000000050E9 ; ---------------------------------------------------------------------------
.text:00000000000050EE                 align 10h
.text:00000000000050F0
.text:00000000000050F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050F0
.text:00000000000050F0 ; Attributes: info_from_lumina
.text:00000000000050F0
.text:00000000000050F0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000050F0                 public xmemdup
.text:00000000000050F0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000050F0                                         ; xstrdup+11↓j
.text:00000000000050F0 ; __unwind {
.text:00000000000050F0                 push    rbp
.text:00000000000050F1                 push    rbx
.text:00000000000050F2                 mov     rbp, rdi
.text:00000000000050F5                 mov     rdi, rsi
.text:00000000000050F8                 mov     rbx, rsi
.text:00000000000050FB                 sub     rsp, 8
.text:00000000000050FF                 call    xmalloc
.text:0000000000005104                 add     rsp, 8
.text:0000000000005108                 mov     rdx, rbx        ; n
.text:000000000000510B                 mov     rsi, rbp        ; src
.text:000000000000510E                 pop     rbx
.text:000000000000510F                 pop     rbp
.text:0000000000005110                 mov     rdi, rax        ; dest
.text:0000000000005113                 jmp     _memcpy
.text:0000000000005113 ; } // starts at 50F0
.text:0000000000005113 xmemdup         endp
.text:0000000000005113
.text:0000000000005113 ; ---------------------------------------------------------------------------
.text:0000000000005118                 align 20h
.text:0000000000005120
.text:0000000000005120 ; =============== S U B R O U T I N E =======================================
.text:0000000000005120
.text:0000000000005120
.text:0000000000005120 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005120                 public xstrdup
.text:0000000000005120 xstrdup         proc near
.text:0000000000005120 ; __unwind {
.text:0000000000005120                 push    rbx
.text:0000000000005121                 mov     rbx, rdi
.text:0000000000005124                 call    _strlen
.text:0000000000005129                 mov     rdi, rbx        ; src
.text:000000000000512C                 lea     rsi, [rax+1]    ; n
.text:0000000000005130                 pop     rbx
.text:0000000000005131                 jmp     short xmemdup
.text:0000000000005131 ; } // starts at 5120
.text:0000000000005131 xstrdup         endp
.text:0000000000005131
.text:0000000000005131 ; ---------------------------------------------------------------------------
.text:0000000000005133                 align 20h
.text:0000000000005140
.text:0000000000005140 ; =============== S U B R O U T I N E =======================================
.text:0000000000005140
.text:0000000000005140 ; Attributes: noreturn info_from_lumina
.text:0000000000005140
.text:0000000000005140 ; void __cdecl xalloc_die()
.text:0000000000005140                 public xalloc_die
.text:0000000000005140 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4056↑p
.text:0000000000005140                                         ; xmalloc:loc_4F05↑p ...
.text:0000000000005140 ; __unwind {
.text:0000000000005140                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005147                 sub     rsp, 8
.text:000000000000514B                 mov     edx, 5          ; category
.text:0000000000005150                 xor     edi, edi        ; domainname
.text:0000000000005152                 call    _dcgettext
.text:0000000000005157                 mov     edi, cs:exit_failure ; status
.text:000000000000515D                 lea     rdx, format+4   ; format
.text:0000000000005164                 mov     rcx, rax
.text:0000000000005167                 xor     esi, esi        ; errnum
.text:0000000000005169                 xor     eax, eax
.text:000000000000516B                 call    _error
.text:0000000000005170                 call    _abort
.text:0000000000005170 ; } // starts at 5140
.text:0000000000005170 xalloc_die      endp
.text:0000000000005170
.text:0000000000005170 ; ---------------------------------------------------------------------------
.text:0000000000005175                 align 20h
.text:0000000000005180
.text:0000000000005180 ; =============== S U B R O U T I N E =======================================
.text:0000000000005180
.text:0000000000005180 ; Attributes: info_from_lumina
.text:0000000000005180
.text:0000000000005180 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005180                 public rpl_mbrtowc
.text:0000000000005180 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005180
.text:0000000000005180 pwc             = dword ptr -34h
.text:0000000000005180 var_30          = qword ptr -30h
.text:0000000000005180
.text:0000000000005180 ; __unwind {
.text:0000000000005180                 push    r13
.text:0000000000005182                 push    r12
.text:0000000000005184                 mov     r13, rsi
.text:0000000000005187                 push    rbp
.text:0000000000005188                 push    rbx
.text:0000000000005189                 mov     rbx, rdi
.text:000000000000518C                 mov     r12, rdx
.text:000000000000518F                 sub     rsp, 18h
.text:0000000000005193                 mov     rax, fs:28h
.text:000000000000519C                 mov     [rsp+38h+var_30], rax
.text:00000000000051A1                 xor     eax, eax
.text:00000000000051A3                 lea     rax, [rsp+38h+pwc]
.text:00000000000051A8                 test    rdi, rdi
.text:00000000000051AB                 cmovz   rbx, rax
.text:00000000000051AF                 mov     rdi, rbx        ; pwc
.text:00000000000051B2                 call    _mbrtowc
.text:00000000000051B7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000051BB                 mov     rbp, rax
.text:00000000000051BE                 jbe     short loc_51E0
.text:00000000000051C0                 test    r12, r12
.text:00000000000051C3                 jz      short loc_51E0
.text:00000000000051C5                 xor     edi, edi
.text:00000000000051C7                 call    hard_locale
.text:00000000000051CC                 test    al, al
.text:00000000000051CE                 jnz     short loc_51E0
.text:00000000000051D0                 movzx   eax, byte ptr [r13+0]
.text:00000000000051D5                 mov     ebp, 1
.text:00000000000051DA                 mov     [rbx], eax
.text:00000000000051DC                 nop     dword ptr [rax+00h]
.text:00000000000051E0
.text:00000000000051E0 loc_51E0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000051E0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000051E0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000051E5                 xor     rdx, fs:28h
.text:00000000000051EE                 mov     rax, rbp
.text:00000000000051F1                 jnz     short loc_51FE
.text:00000000000051F3                 add     rsp, 18h
.text:00000000000051F7                 pop     rbx
.text:00000000000051F8                 pop     rbp
.text:00000000000051F9                 pop     r12
.text:00000000000051FB                 pop     r13
.text:00000000000051FD                 retn
.text:00000000000051FE ; ---------------------------------------------------------------------------
.text:00000000000051FE
.text:00000000000051FE loc_51FE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000051FE                 call    ___stack_chk_fail
.text:00000000000051FE ; } // starts at 5180
.text:00000000000051FE rpl_mbrtowc     endp
.text:00000000000051FE
.text:00000000000051FE ; ---------------------------------------------------------------------------
.text:0000000000005203                 align 10h
.text:0000000000005210
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210
.text:0000000000005210 ; Attributes: info_from_lumina
.text:0000000000005210
.text:0000000000005210 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005210                 public close_stream
.text:0000000000005210 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005210                                         ; close_stdout+33↑p
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 push    r12
.text:0000000000005212                 push    rbp
.text:0000000000005213                 mov     rbp, rdi
.text:0000000000005216                 push    rbx
.text:0000000000005217                 call    ___fpending
.text:000000000000521C                 mov     ebx, [rbp+0]
.text:000000000000521F                 mov     rdi, rbp        ; stream
.text:0000000000005222                 mov     r12, rax
.text:0000000000005225                 call    rpl_fclose
.text:000000000000522A                 and     ebx, 20h
.text:000000000000522D                 test    ebx, ebx
.text:000000000000522F                 jnz     short loc_5248
.text:0000000000005231                 test    eax, eax
.text:0000000000005233                 jz      short loc_523F
.text:0000000000005235                 test    r12, r12
.text:0000000000005238                 mov     eax, 0FFFFFFFFh
.text:000000000000523D                 jz      short loc_5278
.text:000000000000523F
.text:000000000000523F loc_523F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000523F                 pop     rbx
.text:0000000000005240                 pop     rbp
.text:0000000000005241                 pop     r12
.text:0000000000005243                 retn
.text:0000000000005243 ; ---------------------------------------------------------------------------
.text:0000000000005244                 align 8
.text:0000000000005248
.text:0000000000005248 loc_5248:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005248                 test    eax, eax
.text:000000000000524A                 jnz     short loc_5268
.text:000000000000524C                 call    ___errno_location
.text:0000000000005251                 mov     dword ptr [rax], 0
.text:0000000000005257                 mov     eax, 0FFFFFFFFh
.text:000000000000525C                 pop     rbx
.text:000000000000525D                 pop     rbp
.text:000000000000525E                 pop     r12
.text:0000000000005260                 retn
.text:0000000000005260 ; ---------------------------------------------------------------------------
.text:0000000000005261                 align 8
.text:0000000000005268
.text:0000000000005268 loc_5268:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005268                 pop     rbx
.text:0000000000005269                 mov     eax, 0FFFFFFFFh
.text:000000000000526E                 pop     rbp
.text:000000000000526F                 pop     r12
.text:0000000000005271                 retn
.text:0000000000005271 ; ---------------------------------------------------------------------------
.text:0000000000005272                 align 8
.text:0000000000005278
.text:0000000000005278 loc_5278:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005278                 call    ___errno_location
.text:000000000000527D                 cmp     dword ptr [rax], 9
.text:0000000000005280                 pop     rbx
.text:0000000000005281                 pop     rbp
.text:0000000000005282                 pop     r12
.text:0000000000005284                 setnz   al
.text:0000000000005287                 movzx   eax, al
.text:000000000000528A                 neg     eax
.text:000000000000528C                 retn
.text:000000000000528C ; } // starts at 5210
.text:000000000000528C close_stream    endp
.text:000000000000528C
.text:000000000000528C ; ---------------------------------------------------------------------------
.text:000000000000528D                 align 10h
.text:0000000000005290
.text:0000000000005290 ; =============== S U B R O U T I N E =======================================
.text:0000000000005290
.text:0000000000005290
.text:0000000000005290                 public hard_locale
.text:0000000000005290 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005290 ; __unwind {
.text:0000000000005290                 sub     rsp, 8
.text:0000000000005294                 xor     esi, esi        ; locale
.text:0000000000005296                 call    _setlocale
.text:000000000000529B                 mov     rdx, rax
.text:000000000000529E                 mov     eax, 1
.text:00000000000052A3                 test    rdx, rdx
.text:00000000000052A6                 jz      short loc_52C5
.text:00000000000052A8                 lea     rdi, aC         ; "C"
.text:00000000000052AF                 mov     ecx, 2
.text:00000000000052B4                 mov     rsi, rdx
.text:00000000000052B7                 repe cmpsb
.text:00000000000052B9                 setnbe  cl
.text:00000000000052BC                 sbb     cl, 0
.text:00000000000052BF                 xor     eax, eax
.text:00000000000052C1                 test    cl, cl
.text:00000000000052C3                 jnz     short loc_52D0
.text:00000000000052C5
.text:00000000000052C5 loc_52C5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000052C5                 add     rsp, 8
.text:00000000000052C9                 retn
.text:00000000000052C9 ; ---------------------------------------------------------------------------
.text:00000000000052CA                 align 10h
.text:00000000000052D0
.text:00000000000052D0 loc_52D0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000052D0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000052D7                 mov     ecx, 6
.text:00000000000052DC                 mov     rsi, rdx
.text:00000000000052DF                 repe cmpsb
.text:00000000000052E1                 setnbe  al
.text:00000000000052E4                 sbb     al, 0
.text:00000000000052E6                 test    al, al
.text:00000000000052E8                 setnz   al
.text:00000000000052EB                 add     rsp, 8
.text:00000000000052EF                 retn
.text:00000000000052EF ; } // starts at 5290
.text:00000000000052EF hard_locale     endp
.text:00000000000052EF
.text:00000000000052F0
.text:00000000000052F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052F0
.text:00000000000052F0
.text:00000000000052F0                 public locale_charset
.text:00000000000052F0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000052F0 ; __unwind {
.text:00000000000052F0                 sub     rsp, 8
.text:00000000000052F4                 mov     edi, 0Eh        ; item
.text:00000000000052F9                 call    _nl_langinfo
.text:00000000000052FE                 test    rax, rax
.text:0000000000005301                 jz      short loc_5320
.text:0000000000005303                 cmp     byte ptr [rax], 0
.text:0000000000005306                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000530D                 cmovz   rax, rdx
.text:0000000000005311                 add     rsp, 8
.text:0000000000005315                 retn
.text:0000000000005315 ; ---------------------------------------------------------------------------
.text:0000000000005316                 align 20h
.text:0000000000005320
.text:0000000000005320 loc_5320:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005320                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005327                 add     rsp, 8
.text:000000000000532B                 retn
.text:000000000000532B ; } // starts at 52F0
.text:000000000000532B locale_charset  endp
.text:000000000000532B
.text:000000000000532B ; ---------------------------------------------------------------------------
.text:000000000000532C                 align 10h
.text:0000000000005330
.text:0000000000005330 ; =============== S U B R O U T I N E =======================================
.text:0000000000005330
.text:0000000000005330 ; Attributes: info_from_lumina
.text:0000000000005330
.text:0000000000005330 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005330                 public rpl_fclose
.text:0000000000005330 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000005330 ; __unwind {
.text:0000000000005330                 push    r12
.text:0000000000005332                 push    rbp
.text:0000000000005333                 push    rbx
.text:0000000000005334                 mov     rbx, rdi
.text:0000000000005337                 call    _fileno
.text:000000000000533C                 test    eax, eax
.text:000000000000533E                 mov     rdi, rbx        ; fp
.text:0000000000005341                 js      short loc_5397
.text:0000000000005343                 call    ___freading
.text:0000000000005348                 test    eax, eax
.text:000000000000534A                 jnz     short loc_5378
.text:000000000000534C
.text:000000000000534C loc_534C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000534C                 mov     rdi, rbx        ; stream
.text:000000000000534F                 call    rpl_fflush
.text:0000000000005354                 test    eax, eax
.text:0000000000005356                 jz      short loc_5394
.text:0000000000005358                 call    ___errno_location
.text:000000000000535D                 mov     r12d, [rax]
.text:0000000000005360                 mov     rdi, rbx        ; stream
.text:0000000000005363                 mov     rbp, rax
.text:0000000000005366                 call    _fclose
.text:000000000000536B                 test    r12d, r12d
.text:000000000000536E                 jnz     short loc_53A0
.text:0000000000005370
.text:0000000000005370 loc_5370:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005370                 pop     rbx
.text:0000000000005371                 pop     rbp
.text:0000000000005372                 pop     r12
.text:0000000000005374                 retn
.text:0000000000005374 ; ---------------------------------------------------------------------------
.text:0000000000005375                 align 8
.text:0000000000005378
.text:0000000000005378 loc_5378:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005378                 mov     rdi, rbx        ; stream
.text:000000000000537B                 call    _fileno
.text:0000000000005380                 xor     esi, esi        ; offset
.text:0000000000005382                 mov     edx, 1          ; whence
.text:0000000000005387                 mov     edi, eax        ; fd
.text:0000000000005389                 call    _lseek
.text:000000000000538E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005392                 jnz     short loc_534C
.text:0000000000005394
.text:0000000000005394 loc_5394:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005394                 mov     rdi, rbx        ; stream
.text:0000000000005397
.text:0000000000005397 loc_5397:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005397                 pop     rbx
.text:0000000000005398                 pop     rbp
.text:0000000000005399                 pop     r12
.text:000000000000539B                 jmp     _fclose
.text:00000000000053A0 ; ---------------------------------------------------------------------------
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000053A0                 mov     [rbp+0], r12d
.text:00000000000053A4                 mov     eax, 0FFFFFFFFh
.text:00000000000053A9                 jmp     short loc_5370
.text:00000000000053A9 ; } // starts at 5330
.text:00000000000053A9 rpl_fclose      endp
.text:00000000000053A9
.text:00000000000053A9 ; ---------------------------------------------------------------------------
.text:00000000000053AB                 align 10h
.text:00000000000053B0
.text:00000000000053B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053B0
.text:00000000000053B0 ; Attributes: info_from_lumina
.text:00000000000053B0
.text:00000000000053B0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000053B0                 public rpl_fflush
.text:00000000000053B0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000053B0 ; __unwind {
.text:00000000000053B0                 test    rdi, rdi
.text:00000000000053B3                 push    rbx
.text:00000000000053B4                 mov     rbx, rdi
.text:00000000000053B7                 jz      short loc_53CA
.text:00000000000053B9                 call    ___freading
.text:00000000000053BE                 test    eax, eax
.text:00000000000053C0                 jz      short loc_53CA
.text:00000000000053C2                 test    dword ptr [rbx], 100h
.text:00000000000053C8                 jnz     short loc_53D8
.text:00000000000053CA
.text:00000000000053CA loc_53CA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000053CA                                         ; rpl_fflush+10↑j
.text:00000000000053CA                 mov     rdi, rbx        ; stream
.text:00000000000053CD                 pop     rbx
.text:00000000000053CE                 jmp     _fflush
.text:00000000000053CE ; ---------------------------------------------------------------------------
.text:00000000000053D3                 align 8
.text:00000000000053D8
.text:00000000000053D8 loc_53D8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000053D8                 mov     rdi, rbx
.text:00000000000053DB                 mov     edx, 1
.text:00000000000053E0                 xor     esi, esi
.text:00000000000053E2                 call    rpl_fseeko
.text:00000000000053E7                 mov     rdi, rbx        ; stream
.text:00000000000053EA                 pop     rbx
.text:00000000000053EB                 jmp     _fflush
.text:00000000000053EB ; } // starts at 53B0
.text:00000000000053EB rpl_fflush      endp
.text:00000000000053EB
.text:00000000000053F0
.text:00000000000053F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053F0
.text:00000000000053F0 ; Attributes: info_from_lumina
.text:00000000000053F0
.text:00000000000053F0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000053F0                 public rpl_fseeko
.text:00000000000053F0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000053F0 ; __unwind {
.text:00000000000053F0                 mov     rax, [rdi+8]
.text:00000000000053F4                 cmp     [rdi+10h], rax
.text:00000000000053F8                 jz      short loc_5400
.text:00000000000053FA
.text:00000000000053FA loc_53FA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000053FA                                         ; rpl_fseeko+1F↓j
.text:00000000000053FA                 jmp     _fseeko
.text:00000000000053FA ; ---------------------------------------------------------------------------
.text:00000000000053FF                 align 20h
.text:0000000000005400
.text:0000000000005400 loc_5400:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005400                 mov     rax, [rdi+20h]
.text:0000000000005404                 cmp     [rdi+28h], rax
.text:0000000000005408                 jnz     short loc_53FA
.text:000000000000540A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000540F                 jnz     short loc_53FA
.text:0000000000005411                 push    r12
.text:0000000000005413                 push    rbp
.text:0000000000005414                 mov     r12d, edx
.text:0000000000005417                 push    rbx
.text:0000000000005418                 mov     rbp, rsi
.text:000000000000541B                 mov     rbx, rdi
.text:000000000000541E                 call    _fileno
.text:0000000000005423                 mov     edx, r12d       ; whence
.text:0000000000005426                 mov     rsi, rbp        ; offset
.text:0000000000005429                 mov     edi, eax        ; fd
.text:000000000000542B                 call    _lseek
.text:0000000000005430                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005434                 jz      short loc_5442
.text:0000000000005436                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005439                 mov     [rbx+90h], rax
.text:0000000000005440                 xor     eax, eax
.text:0000000000005442
.text:0000000000005442 loc_5442:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005442                 pop     rbx
.text:0000000000005443                 pop     rbp
.text:0000000000005444                 pop     r12
.text:0000000000005446                 retn
.text:0000000000005446 ; } // starts at 53F0
.text:0000000000005446 rpl_fseeko      endp
.text:0000000000005446
.text:0000000000005446 ; ---------------------------------------------------------------------------
.text:0000000000005447                 align 10h
.text:0000000000005450
.text:0000000000005450 ; =============== S U B R O U T I N E =======================================
.text:0000000000005450
.text:0000000000005450 ; Attributes: info_from_lumina
.text:0000000000005450
.text:0000000000005450 ; void _libc_csu_init(void)
.text:0000000000005450                 public __libc_csu_init
.text:0000000000005450 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005450 ; __unwind {
.text:0000000000005450                 push    r15
.text:0000000000005452                 push    r14
.text:0000000000005454                 mov     r15, rdx
.text:0000000000005457                 push    r13
.text:0000000000005459                 push    r12
.text:000000000000545B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005462                 push    rbp
.text:0000000000005463                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000546A                 push    rbx
.text:000000000000546B                 mov     r13d, edi
.text:000000000000546E                 mov     r14, rsi
.text:0000000000005471                 sub     rbp, r12
.text:0000000000005474                 sub     rsp, 8
.text:0000000000005478                 sar     rbp, 3
.text:000000000000547C                 call    _init_proc
.text:0000000000005481                 test    rbp, rbp
.text:0000000000005484                 jz      short loc_54A6
.text:0000000000005486                 xor     ebx, ebx
.text:0000000000005488                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005490
.text:0000000000005490 loc_5490:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005490                 mov     rdx, r15
.text:0000000000005493                 mov     rsi, r14
.text:0000000000005496                 mov     edi, r13d
.text:0000000000005499                 call    ds:(__frame_dummy_init_array_entry - 207A90h)[r12+rbx*8]
.text:000000000000549D                 add     rbx, 1
.text:00000000000054A1                 cmp     rbp, rbx
.text:00000000000054A4                 jnz     short loc_5490
.text:00000000000054A6
.text:00000000000054A6 loc_54A6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000054A6                 add     rsp, 8
.text:00000000000054AA                 pop     rbx
.text:00000000000054AB                 pop     rbp
.text:00000000000054AC                 pop     r12
.text:00000000000054AE                 pop     r13
.text:00000000000054B0                 pop     r14
.text:00000000000054B2                 pop     r15
.text:00000000000054B4                 retn
.text:00000000000054B4 ; } // starts at 5450
.text:00000000000054B4 __libc_csu_init endp
.text:00000000000054B4
.text:00000000000054B4 ; ---------------------------------------------------------------------------
.text:00000000000054B5                 align 20h
.text:00000000000054C0
.text:00000000000054C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054C0
.text:00000000000054C0
.text:00000000000054C0 ; void _libc_csu_fini(void)
.text:00000000000054C0                 public __libc_csu_fini
.text:00000000000054C0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000054C0 ; __unwind {
.text:00000000000054C0                 rep retn
.text:00000000000054C0 ; } // starts at 54C0
.text:00000000000054C0 __libc_csu_fini endp
.text:00000000000054C0
.text:00000000000054C0 ; ---------------------------------------------------------------------------
.text:00000000000054C2                 align 10h
.text:00000000000054D0
.text:00000000000054D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054D0
.text:00000000000054D0
.text:00000000000054D0 atexit          proc near               ; CODE XREF: main+79↑p
.text:00000000000054D0 ; __unwind {
.text:00000000000054D0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000054D7                 xor     esi, esi        ; obj
.text:00000000000054D9                 jmp     ___cxa_atexit
.text:00000000000054D9 ; } // starts at 54D0
.text:00000000000054D9 atexit          endp
.text:00000000000054D9
.text:00000000000054D9 _text           ends
.text:00000000000054D9
LOAD:00000000000054DE ; ===========================================================================
LOAD:00000000000054DE
LOAD:00000000000054DE ; Segment type: Pure code
LOAD:00000000000054DE ; Segment permissions: Read/Execute
LOAD:00000000000054DE LOAD            segment byte public 'CODE' use64
LOAD:00000000000054DE                 assume cs:LOAD
LOAD:00000000000054DE                 ;org 54DEh
LOAD:00000000000054DE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000054DE                 align 20h
LOAD:00000000000054DE LOAD            ends
LOAD:00000000000054DE
.fini:00000000000054E0 ; ===========================================================================
.fini:00000000000054E0
.fini:00000000000054E0 ; Segment type: Pure code
.fini:00000000000054E0 ; Segment permissions: Read/Execute
.fini:00000000000054E0 _fini           segment dword public 'CODE' use64
.fini:00000000000054E0                 assume cs:_fini
.fini:00000000000054E0                 ;org 54E0h
.fini:00000000000054E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000054E0
.fini:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000054E0
.fini:00000000000054E0
.fini:00000000000054E0                 public _term_proc
.fini:00000000000054E0 _term_proc      proc near
.fini:00000000000054E0                 sub     rsp, 8          ; _fini
.fini:00000000000054E4                 add     rsp, 8
.fini:00000000000054E8                 retn
.fini:00000000000054E8 _term_proc      endp
.fini:00000000000054E8
.fini:00000000000054E8 _fini           ends
.fini:00000000000054E8
LOAD:00000000000054E9 ; ===========================================================================
LOAD:00000000000054E9
LOAD:00000000000054E9 ; Segment type: Pure code
LOAD:00000000000054E9 ; Segment permissions: Read/Execute
LOAD:00000000000054E9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000054E9                 assume cs:LOAD
LOAD:00000000000054E9                 ;org 54E9h
LOAD:00000000000054E9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000054E9                 align 20h
LOAD:00000000000054E9 LOAD            ends
LOAD:00000000000054E9
.rodata:0000000000005500 ; ===========================================================================
.rodata:0000000000005500
.rodata:0000000000005500 ; Segment type: Pure data
.rodata:0000000000005500 ; Segment permissions: Read
.rodata:0000000000005500 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005500                 assume cs:_rodata
.rodata:0000000000005500                 ;org 5500h
.rodata:0000000000005500                 public _IO_stdin_used
.rodata:0000000000005500 _IO_stdin_used  db    1
.rodata:0000000000005501                 db    0
.rodata:0000000000005502                 db    2
.rodata:0000000000005503                 db    0
.rodata:0000000000005504 ; const char msgid[]
.rodata:0000000000005504 msgid           db 'write error',0      ; DATA XREF: write_pending_part_6+1↑o
.rodata:0000000000005504                                         ; main:loc_22CE↑o ...
.rodata:0000000000005510 aCat            db 'cat',0              ; DATA XREF: main+184↑o
.rodata:0000000000005510                                         ; usage+185↑o ...
.rodata:0000000000005514 asc_5514        db '[',0                ; DATA XREF: usage+191↑o
.rodata:0000000000005516 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1B8↑o
.rodata:0000000000005526 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000005526                                         ; DATA XREF: usage+1E8↑o
.rodata:0000000000005526                                         ; usage+2DC↑o ...
.rodata:000000000000553C aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1F9↑o
.rodata:0000000000005546 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+205↑o
.rodata:0000000000005555 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+198↑o
.rodata:000000000000555F aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1C4↑o
.rodata:0000000000005569 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1DC↑o
.rodata:0000000000005573 ; const char aSOnlineHelpS[]
.rodata:0000000000005573 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+24A↑o
.rodata:0000000000005573                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000558A unk_558A        db  47h ; G             ; DATA XREF: main+17D↑o
.rodata:000000000000558A                                         ; usage+266↑o ...
.rodata:000000000000558B                 db  4Eh ; N
.rodata:000000000000558C                 db  55h ; U
.rodata:000000000000558D                 db  20h
.rodata:000000000000558E ; const char domainname[]
.rodata:000000000000558E domainname      db 'coreutils',0        ; DATA XREF: main+5A↑o
.rodata:000000000000558E                                         ; main+66↑o ...
.rodata:0000000000005598 ; const char s2[]
.rodata:0000000000005598 s2              db 'en_',0              ; DATA XREF: usage+28D↑o
.rodata:0000000000005598                                         ; usage+34E↑o
.rodata:000000000000559C ; const char aFullDocumentat[]
.rodata:000000000000559C aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000559C                                         ; DATA XREF: usage:loc_2819↑o
.rodata:000000000000559C                                         ; usage:loc_28D6↑o
.rodata:00000000000055B7 ; const char dirname[]
.rodata:00000000000055B7 dirname         db '/usr/local/share/locale',0
.rodata:00000000000055B7                                         ; DATA XREF: main+53↑o
.rodata:00000000000055CF aRichardMStallm db 'Richard M. Stallman',0
.rodata:00000000000055CF                                         ; DATA XREF: main+16F↑o
.rodata:00000000000055E3 aTorbjornGranlu db 'Torbjorn Granlund',0
.rodata:00000000000055E3                                         ; DATA XREF: main+176↑o
.rodata:00000000000055F5 ; const char shortopts[]
.rodata:00000000000055F5 shortopts       db 'benstuvAET',0       ; DATA XREF: main+B0↑o
.rodata:0000000000005600 ; const char aStandardOutput[]
.rodata:0000000000005600 aStandardOutput db 'standard output',0  ; DATA XREF: main:loc_23AF↑o
.rodata:0000000000005610 ; const char aSInputFileIsOu[]
.rodata:0000000000005610 aSInputFileIsOu db '%s: input file is output file',0
.rodata:0000000000005610                                         ; DATA XREF: main+963↑o
.rodata:000000000000562E ; const char aCannotDoIoctlO[]
.rodata:000000000000562E aCannotDoIoctlO db 'cannot do ioctl on %s',0
.rodata:000000000000562E                                         ; DATA XREF: main+B54↑o
.rodata:0000000000005644 ; const char aClosingStandar[]
.rodata:0000000000005644 aClosingStandar db 'closing standard input',0
.rodata:0000000000005644                                         ; DATA XREF: main+A23↑o
.rodata:000000000000565B aNumberNonblank db 'number-nonblank',0  ; DATA XREF: .data.rel.ro:long_options_7050↓o
.rodata:000000000000566B aNumber         db 'number',0           ; DATA XREF: .data.rel.ro:0000000000207AC0↓o
.rodata:0000000000005672 aSqueezeBlank   db 'squeeze-blank',0    ; DATA XREF: .data.rel.ro:0000000000207AE0↓o
.rodata:0000000000005680 aShowNonprintin db 'show-nonprinting',0 ; DATA XREF: .data.rel.ro:0000000000207B00↓o
.rodata:0000000000005691 aShowEnds       db 'show-ends',0        ; DATA XREF: .data.rel.ro:0000000000207B20↓o
.rodata:000000000000569B aShowTabs       db 'show-tabs',0        ; DATA XREF: .data.rel.ro:0000000000207B40↓o
.rodata:00000000000056A5 aShowAll        db 'show-all',0         ; DATA XREF: .data.rel.ro:0000000000207B60↓o
.rodata:00000000000056AE aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207B80↓o
.rodata:00000000000056B3 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:00000000000056BB                 align 20h
.rodata:00000000000056C0 ; const char aTrySHelpForMor[]
.rodata:00000000000056C0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000056C0                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000056E7                 align 8
.rodata:00000000000056E8 ; const char aUsageSOptionFi[]
.rodata:00000000000056E8 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:00000000000056E8                                         ; DATA XREF: usage:loc_25CD↑o
.rodata:0000000000005709                 align 10h
.rodata:0000000000005710 ; const char aConcatenateFil[]
.rodata:0000000000005710 aConcatenateFil db 'Concatenate FILE(s) to standard output.',0Ah,0
.rodata:0000000000005710                                         ; DATA XREF: usage+84↑o
.rodata:0000000000005739                 align 20h
.rodata:0000000000005740 ; const char aWithNoFileOrWh[]
.rodata:0000000000005740 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000005740                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000005778 ; const char aAShowAllEquiva[]
.rodata:0000000000005778 aAShowAllEquiva db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:0000000000005778                 db '  -A, --show-all           equivalent to -vET',0Ah
.rodata:0000000000005778                 db '  -b, --number-nonblank    number nonempty output lines, override'
.rodata:0000000000005778                 db 's -n',0Ah
.rodata:0000000000005778                 db '  -e                       equivalent to -vE',0Ah
.rodata:0000000000005778                 db '  -E, --show-ends          display $ at end of each line',0Ah
.rodata:0000000000005778                 db '  -n, --number             number all output lines',0Ah
.rodata:0000000000005778                 db '  -s, --squeeze-blank      suppress repeated empty output lines',0Ah
.rodata:0000000000005778                 db 0
.rodata:00000000000058C7                 align 8
.rodata:00000000000058C8 ; const char aTEquivalentToV[]
.rodata:00000000000058C8 aTEquivalentToV db '  -t                       equivalent to -vT',0Ah
.rodata:00000000000058C8                                         ; DATA XREF: usage+F3↑o
.rodata:00000000000058C8                 db '  -T, --show-tabs          display TAB characters as ^I',0Ah
.rodata:00000000000058C8                 db '  -u                       (ignored)',0Ah
.rodata:00000000000058C8                 db '  -v, --show-nonprinting   use ^ and M- notation, except for LFD '
.rodata:00000000000058C8                 db 'and TAB',0Ah,0
.rodata:000000000000599C                 align 20h
.rodata:00000000000059A0 ; const char aHelpDisplayThi[]
.rodata:00000000000059A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000059A0                                         ; DATA XREF: usage+118↑o
.rodata:00000000000059CD                 align 10h
.rodata:00000000000059D0 ; const char aVersionOutputV[]
.rodata:00000000000059D0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000059D0                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000005A06                 align 8
.rodata:0000000000005A08 ; const char aExamplesSFGOut[]
.rodata:0000000000005A08 aExamplesSFGOut db 0Ah                  ; DATA XREF: usage+162↑o
.rodata:0000000000005A08                 db 'Examples:',0Ah
.rodata:0000000000005A08                 db '  %s f - g  Output f',27h,'s contents, then standard input, then '
.rodata:0000000000005A08                 db 'g',27h,'s contents.',0Ah
.rodata:0000000000005A08                 db '  %s        Copy standard input to standard output.',0Ah,0
.rodata:0000000000005A91                 align 8
.rodata:0000000000005A98 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005A98                                         ; DATA XREF: usage+25F↑o
.rodata:0000000000005A98                                         ; usage+2C3↑o ...
.rodata:0000000000005AC0 ; const char aReportAnyTrans[]
.rodata:0000000000005AC0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005AC0                                         ; DATA XREF: usage+3B7↑o
.rodata:0000000000005AC0                 db 'am/>',0Ah,0
.rodata:0000000000005B07                 align 8
.rodata:0000000000005B08 ; const char aOrAvailableLoc[]
.rodata:0000000000005B08 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005B08                                         ; DATA XREF: usage:loc_285E↑o
.rodata:0000000000005B3B a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005B40 ; const char format[]
.rodata:0000000000005B40 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005B40                                         ; main+7C2↑o ...
.rodata:0000000000005B47                 align 8
.rodata:0000000000005B48 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005B48                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005B80 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005B88 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000005B88                                         ; main+271↑o ...
.rodata:0000000000005B8C unk_5B8C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000005B8D                 db  80h
.rodata:0000000000005B8E                 db  98h
.rodata:0000000000005B8F                 db    0
.rodata:0000000000005B90 unk_5B90        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005B91                 db  80h
.rodata:0000000000005B92                 db  99h
.rodata:0000000000005B93                 db    0
.rodata:0000000000005B94 unk_5B94        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005B95                 db    7
.rodata:0000000000005B96                 db  65h ; e
.rodata:0000000000005B97                 db    0
.rodata:0000000000005B98 unk_5B98        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005B99                 db 0AFh
.rodata:0000000000005B9A                 db    0
.rodata:0000000000005B9B unk_5B9B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2BA0↑o
.rodata:0000000000005B9B                                         ; quotearg_buffer_restyled:loc_395B↑o ...
.rodata:0000000000005B9C                 db    0
.rodata:0000000000005B9D ; const char asc_5B9D[2]
.rodata:0000000000005B9D asc_5B9D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000005B9D                                         ; quotearg_buffer_restyled:loc_2D23↑o ...
.rodata:0000000000005B9F ; const char asc_5B9F[2]
.rodata:0000000000005B9F asc_5B9F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000005B9F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005BA1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005BA9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207BE8↓o
.rodata:0000000000005BAF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207BF0↓o
.rodata:0000000000005BBC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207BF8↓o
.rodata:0000000000005BBC                                         ; .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005BC9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005BC9                                         ; DATA XREF: .data.rel.ro:0000000000207C00↓o
.rodata:0000000000005BDD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:0000000000005BDF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:0000000000005BE7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:0000000000005BEF                 align 20h
.rodata:0000000000005C00 jpt_2D01        dd offset loc_3AAA - 5C00h
.rodata:0000000000005C00                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005C00                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005C00                 dd offset loc_2D03 - 5C00h ; jump table for switch statement
.rodata:0000000000005C00                 dd offset loc_3CD8 - 5C00h
.rodata:0000000000005C00                 dd offset loc_3AE4 - 5C00h
.rodata:0000000000005C00                 dd offset loc_38D4 - 5C00h
.rodata:0000000000005C00                 dd offset loc_3930 - 5C00h
.rodata:0000000000005C00                 dd offset loc_3985 - 5C00h
.rodata:0000000000005C00                 dd offset loc_39CA - 5C00h
.rodata:0000000000005C00                 dd offset loc_3A04 - 5C00h
.rodata:0000000000005C00                 dd offset loc_3A04 - 5C00h
.rodata:0000000000005C00                 dd offset loc_3A04 - 5C00h
.rodata:0000000000005C2C jpt_2E5E        dd offset loc_3080 - 5C2Ch, offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch
.rodata:0000000000005C2C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000005C2C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000005C2C                 dd offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch ; jump table for switch statement
.rodata:0000000000005C2C                 dd offset def_2E5E - 5C2Ch, offset loc_30C0 - 5C2Ch, offset loc_2FC8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_2F88 - 5C2Ch, offset loc_3150 - 5C2Ch, offset loc_3140 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3130 - 5C2Ch, offset loc_3120 - 5C2Ch, offset def_2E5E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E5E - 5C2Ch, offset def_2E5E - 5C2Ch, offset loc_3110 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3100 - 5C2Ch, offset loc_3100 - 5C2Ch, offset loc_30D0 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3100 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_3100 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_2F63 - 5C2Ch, offset loc_3100 - 5C2Ch, offset loc_3100 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3100 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_3100 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3100 - 5C2Ch, offset loc_3100 - 5C2Ch, offset loc_3100 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_2F33 - 5C2Ch, offset def_2E5E - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_3100 - 5C2Ch, offset loc_2FD8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_3100 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3100 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch, offset loc_30A8 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_2E63 - 5C2Ch, offset loc_3100 - 5C2Ch, offset loc_2E63 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30D0 - 5C2Ch
.rodata:0000000000005E28 jpt_31EA        dd offset loc_3250 - 5E28h, offset def_31EA - 5E28h, offset def_31EA - 5E28h
.rodata:0000000000005E28                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005E28                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005E28                 dd offset def_31EA - 5E28h, offset def_31EA - 5E28h, offset def_31EA - 5E28h ; jump table for switch statement
.rodata:0000000000005E28                 dd offset def_31EA - 5E28h, offset loc_3240 - 5E28h, offset loc_3390 - 5E28h
.rodata:0000000000005E28                 dd offset loc_3378 - 5E28h, offset loc_3228 - 5E28h, offset loc_3368 - 5E28h
.rodata:0000000000005E28                 dd offset loc_3210 - 5E28h, offset loc_3350 - 5E28h, offset def_31EA - 5E28h
.rodata:0000000000005E28                 dd offset def_31EA - 5E28h, offset def_31EA - 5E28h, offset def_31EA - 5E28h
.rodata:0000000000005E28                 dd offset def_31EA - 5E28h, offset def_31EA - 5E28h, offset def_31EA - 5E28h
.rodata:0000000000005E28                 dd offset def_31EA - 5E28h, offset def_31EA - 5E28h, offset def_31EA - 5E28h
.rodata:0000000000005E28                 dd offset def_31EA - 5E28h, offset def_31EA - 5E28h, offset def_31EA - 5E28h
.rodata:0000000000005E28                 dd offset def_31EA - 5E28h, offset def_31EA - 5E28h, offset def_31EA - 5E28h
.rodata:0000000000005E28                 dd offset def_31EA - 5E28h, offset def_31EA - 5E28h, offset loc_3338 - 5E28h
.rodata:0000000000005E28                 dd offset loc_3320 - 5E28h, offset loc_3320 - 5E28h, offset loc_3308 - 5E28h
.rodata:0000000000005E28                 dd offset loc_3320 - 5E28h, offset loc_32F0 - 5E28h, offset loc_3320 - 5E28h
.rodata:0000000000005E28                 dd offset loc_2F60 - 5E28h, offset loc_3320 - 5E28h, offset loc_3320 - 5E28h
.rodata:0000000000005E28                 dd offset loc_3320 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_3320 - 5E28h
.rodata:0000000000005E28                 dd offset loc_3320 - 5E28h, offset loc_3320 - 5E28h, offset loc_3320 - 5E28h
.rodata:0000000000005E28                 dd offset loc_2F30 - 5E28h, offset def_31EA - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_3320 - 5E28h, offset loc_31F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_3320 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_3320 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h, offset loc_32F0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_2E60 - 5E28h, offset loc_3320 - 5E28h, offset loc_2E60 - 5E28h
.rodata:0000000000005E28                 dd offset loc_3308 - 5E28h
.rodata:0000000000006024                 align 20h
.rodata:0000000000006040                 public quoting_style_vals
.rodata:0000000000006040 quoting_style_vals db    0
.rodata:0000000000006041                 db    0
.rodata:0000000000006042                 db    0
.rodata:0000000000006043                 db    0
.rodata:0000000000006044                 db    1
.rodata:0000000000006045                 db    0
.rodata:0000000000006046                 db    0
.rodata:0000000000006047                 db    0
.rodata:0000000000006048                 db    2
.rodata:0000000000006049                 db    0
.rodata:000000000000604A                 db    0
.rodata:000000000000604B                 db    0
.rodata:000000000000604C                 db    3
.rodata:000000000000604D                 db    0
.rodata:000000000000604E                 db    0
.rodata:000000000000604F                 db    0
.rodata:0000000000006050                 db    4
.rodata:0000000000006051                 db    0
.rodata:0000000000006052                 db    0
.rodata:0000000000006053                 db    0
.rodata:0000000000006054                 db    5
.rodata:0000000000006055                 db    0
.rodata:0000000000006056                 db    0
.rodata:0000000000006057                 db    0
.rodata:0000000000006058                 db    6
.rodata:0000000000006059                 db    0
.rodata:000000000000605A                 db    0
.rodata:000000000000605B                 db    0
.rodata:000000000000605C                 db    7
.rodata:000000000000605D                 db    0
.rodata:000000000000605E                 db    0
.rodata:000000000000605F                 db    0
.rodata:0000000000006060                 db    8
.rodata:0000000000006061                 db    0
.rodata:0000000000006062                 db    0
.rodata:0000000000006063                 db    0
.rodata:0000000000006064                 db    9
.rodata:0000000000006065                 db    0
.rodata:0000000000006066                 db    0
.rodata:0000000000006067                 db    0
.rodata:0000000000006068 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006074 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000607B ; const char aC_0[]
.rodata:000000000000607B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_490C↑o
.rodata:000000000000607F ; const char aWrittenByS[]
.rodata:000000000000607F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000607F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000608F ; const char aWrittenBySAndS[]
.rodata:000000000000608F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000608F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000060A6 ; const char aWrittenBySSAnd[]
.rodata:00000000000060A6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000060A6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000060C2 ; const char aReportBugsToS[]
.rodata:00000000000060C2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000060C2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000060D7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000060D7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000060ED ; const char aSHomePageS[]
.rodata:00000000000060ED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000060ED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006101                 align 8
.rodata:0000000000006108 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006108 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006108                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006108                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006108                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006108                 db '.',0Ah
.rodata:0000000000006108                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006108                 db 0Ah,0
.rodata:00000000000061D4                 align 8
.rodata:00000000000061D8 ; const char aWrittenBySSSAn[]
.rodata:00000000000061D8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000061D8                                         ; DATA XREF: version_etc_arn:loc_4B60↑o
.rodata:00000000000061D8                 db 'and %s.',0Ah,0
.rodata:00000000000061F8 ; const char aWrittenBySSSSA[]
.rodata:00000000000061F8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000061F8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000061F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000621C                 align 20h
.rodata:0000000000006220 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006220 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006220                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006220                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006248 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006248 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006248                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006248                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006274                 align 8
.rodata:0000000000006278 ; const char aWrittenBySSSSS[]
.rodata:0000000000006278 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006278                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006278                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006278                 db 'and %s.',0Ah,0
.rodata:00000000000062A8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000062A8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000062A8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000062A8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000062A8                 db '%s, and %s.',0Ah,0
.rodata:00000000000062DC                 align 20h
.rodata:00000000000062E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000062E0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000062E0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000062E0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000631C                 align 20h
.rodata:0000000000006320 ; const char aGeneralHelpUsi[]
.rodata:0000000000006320 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006320                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006320                 db 0
.rodata:0000000000006361                 align 8
.rodata:0000000000006368 jpt_4974        dd offset loc_49F6 - 6368h
.rodata:0000000000006368                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006368                                         ; version_etc_arn+9D↑r
.rodata:0000000000006368                 dd offset loc_4A88 - 6368h ; jump table for switch statement
.rodata:0000000000006368                 dd offset loc_4AC8 - 6368h
.rodata:0000000000006368                 dd offset loc_4B10 - 6368h
.rodata:0000000000006368                 dd offset loc_4B60 - 6368h
.rodata:0000000000006368                 dd offset loc_4BB8 - 6368h
.rodata:0000000000006368                 dd offset loc_4BE8 - 6368h
.rodata:0000000000006368                 dd offset loc_4C50 - 6368h
.rodata:0000000000006368                 dd offset loc_4980 - 6368h
.rodata:0000000000006368                 dd offset loc_4A30 - 6368h
.rodata:0000000000006390                 align 20h
.rodata:00000000000063A0                 public version_etc_copyright
.rodata:00000000000063A0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000063A0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000063CF ; const char aMemoryExhauste[]
.rodata:00000000000063CF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000063E0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000063E2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_52D0↑o
.rodata:00000000000063E8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000063E8                                         ; locale_charset:loc_5320↑o
.rodata:00000000000063E8 _rodata         ends
.rodata:00000000000063E8
LOAD:00000000000063EE ; ===========================================================================
LOAD:00000000000063EE
LOAD:00000000000063EE ; Segment type: Pure code
LOAD:00000000000063EE ; Segment permissions: Read/Execute
LOAD:00000000000063EE LOAD            segment byte public 'CODE' use64
LOAD:00000000000063EE                 assume cs:LOAD
LOAD:00000000000063EE                 ;org 63EEh
LOAD:00000000000063EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000063EE                 align 10h
LOAD:00000000000063EE LOAD            ends
LOAD:00000000000063EE
.eh_frame_hdr:00000000000063F0 ; ===========================================================================
.eh_frame_hdr:00000000000063F0
.eh_frame_hdr:00000000000063F0 ; Segment type: Pure data
.eh_frame_hdr:00000000000063F0 ; Segment permissions: Read
.eh_frame_hdr:00000000000063F0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000063F0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000063F0                 ;org 63F0h
.eh_frame_hdr:00000000000063F0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000063F1                 db  1Bh
.eh_frame_hdr:00000000000063F2                 db    3
.eh_frame_hdr:00000000000063F3                 db  3Bh ; ;
.eh_frame_hdr:00000000000063F4                 db  74h ; t
.eh_frame_hdr:00000000000063F5                 db    2
.eh_frame_hdr:00000000000063F6                 db    0
.eh_frame_hdr:00000000000063F7                 db    0
.eh_frame_hdr:00000000000063F8                 db  4Dh ; M
.eh_frame_hdr:00000000000063F9                 db    0
.eh_frame_hdr:00000000000063FA                 db    0
.eh_frame_hdr:00000000000063FB                 db    0
.eh_frame_hdr:00000000000063FC                 db  80h
.eh_frame_hdr:00000000000063FD                 db 0B0h
.eh_frame_hdr:00000000000063FE                 db 0FFh
.eh_frame_hdr:00000000000063FF                 db 0FFh
.eh_frame_hdr:0000000000006400                 db 0C0h
.eh_frame_hdr:0000000000006401                 db    2
.eh_frame_hdr:0000000000006402                 db    0
.eh_frame_hdr:0000000000006403                 db    0
.eh_frame_hdr:0000000000006404                 db 0A0h
.eh_frame_hdr:0000000000006405                 db 0B3h
.eh_frame_hdr:0000000000006406                 db 0FFh
.eh_frame_hdr:0000000000006407                 db 0FFh
.eh_frame_hdr:0000000000006408                 db 0E8h
.eh_frame_hdr:0000000000006409                 db    2
.eh_frame_hdr:000000000000640A                 db    0
.eh_frame_hdr:000000000000640B                 db    0
.eh_frame_hdr:000000000000640C                 db 0B0h
.eh_frame_hdr:000000000000640D                 db 0B3h
.eh_frame_hdr:000000000000640E                 db 0FFh
.eh_frame_hdr:000000000000640F                 db 0FFh
.eh_frame_hdr:0000000000006410                 db  14h
.eh_frame_hdr:0000000000006411                 db    3
.eh_frame_hdr:0000000000006412                 db    0
.eh_frame_hdr:0000000000006413                 db    0
.eh_frame_hdr:0000000000006414                 db 0E0h
.eh_frame_hdr:0000000000006415                 db 0B3h
.eh_frame_hdr:0000000000006416                 db 0FFh
.eh_frame_hdr:0000000000006417                 db 0FFh
.eh_frame_hdr:0000000000006418                 db  58h ; X
.eh_frame_hdr:0000000000006419                 db    3
.eh_frame_hdr:000000000000641A                 db    0
.eh_frame_hdr:000000000000641B                 db    0
.eh_frame_hdr:000000000000641C                 db 0F0h
.eh_frame_hdr:000000000000641D                 db 0BFh
.eh_frame_hdr:000000000000641E                 db 0FFh
.eh_frame_hdr:000000000000641F                 db 0FFh
.eh_frame_hdr:0000000000006420                 db  90h
.eh_frame_hdr:0000000000006421                 db    2
.eh_frame_hdr:0000000000006422                 db    0
.eh_frame_hdr:0000000000006423                 db    0
.eh_frame_hdr:0000000000006424                 db    0
.eh_frame_hdr:0000000000006425                 db 0C1h
.eh_frame_hdr:0000000000006426                 db 0FFh
.eh_frame_hdr:0000000000006427                 db 0FFh
.eh_frame_hdr:0000000000006428                 db    0
.eh_frame_hdr:0000000000006429                 db    3
.eh_frame_hdr:000000000000642A                 db    0
.eh_frame_hdr:000000000000642B                 db    0
.eh_frame_hdr:000000000000642C                 db  80h
.eh_frame_hdr:000000000000642D                 db 0C1h
.eh_frame_hdr:000000000000642E                 db 0FFh
.eh_frame_hdr:000000000000642F                 db 0FFh
.eh_frame_hdr:0000000000006430                 db  2Ch ; ,
.eh_frame_hdr:0000000000006431                 db    3
.eh_frame_hdr:0000000000006432                 db    0
.eh_frame_hdr:0000000000006433                 db    0
.eh_frame_hdr:0000000000006434                 db  60h ; `
.eh_frame_hdr:0000000000006435                 db 0C5h
.eh_frame_hdr:0000000000006436                 db 0FFh
.eh_frame_hdr:0000000000006437                 db 0FFh
.eh_frame_hdr:0000000000006438                 db 0B8h
.eh_frame_hdr:0000000000006439                 db    3
.eh_frame_hdr:000000000000643A                 db    0
.eh_frame_hdr:000000000000643B                 db    0
.eh_frame_hdr:000000000000643C                 db  70h ; p
.eh_frame_hdr:000000000000643D                 db 0C5h
.eh_frame_hdr:000000000000643E                 db 0FFh
.eh_frame_hdr:000000000000643F                 db 0FFh
.eh_frame_hdr:0000000000006440                 db 0CCh
.eh_frame_hdr:0000000000006441                 db    3
.eh_frame_hdr:0000000000006442                 db    0
.eh_frame_hdr:0000000000006443                 db    0
.eh_frame_hdr:0000000000006444                 db  80h
.eh_frame_hdr:0000000000006445                 db 0C5h
.eh_frame_hdr:0000000000006446                 db 0FFh
.eh_frame_hdr:0000000000006447                 db 0FFh
.eh_frame_hdr:0000000000006448                 db 0E0h
.eh_frame_hdr:0000000000006449                 db    3
.eh_frame_hdr:000000000000644A                 db    0
.eh_frame_hdr:000000000000644B                 db    0
.eh_frame_hdr:000000000000644C                 db  30h ; 0
.eh_frame_hdr:000000000000644D                 db 0C6h
.eh_frame_hdr:000000000000644E                 db 0FFh
.eh_frame_hdr:000000000000644F                 db 0FFh
.eh_frame_hdr:0000000000006450                 db  10h
.eh_frame_hdr:0000000000006451                 db    4
.eh_frame_hdr:0000000000006452                 db    0
.eh_frame_hdr:0000000000006453                 db    0
.eh_frame_hdr:0000000000006454                 db  40h ; @
.eh_frame_hdr:0000000000006455                 db 0C6h
.eh_frame_hdr:0000000000006456                 db 0FFh
.eh_frame_hdr:0000000000006457                 db 0FFh
.eh_frame_hdr:0000000000006458                 db  24h ; $
.eh_frame_hdr:0000000000006459                 db    4
.eh_frame_hdr:000000000000645A                 db    0
.eh_frame_hdr:000000000000645B                 db    0
.eh_frame_hdr:000000000000645C                 db  70h ; p
.eh_frame_hdr:000000000000645D                 db 0C6h
.eh_frame_hdr:000000000000645E                 db 0FFh
.eh_frame_hdr:000000000000645F                 db 0FFh
.eh_frame_hdr:0000000000006460                 db  40h ; @
.eh_frame_hdr:0000000000006461                 db    4
.eh_frame_hdr:0000000000006462                 db    0
.eh_frame_hdr:0000000000006463                 db    0
.eh_frame_hdr:0000000000006464                 db 0F0h
.eh_frame_hdr:0000000000006465                 db 0C6h
.eh_frame_hdr:0000000000006466                 db 0FFh
.eh_frame_hdr:0000000000006467                 db 0FFh
.eh_frame_hdr:0000000000006468                 db  90h
.eh_frame_hdr:0000000000006469                 db    4
.eh_frame_hdr:000000000000646A                 db    0
.eh_frame_hdr:000000000000646B                 db    0
.eh_frame_hdr:000000000000646C                 db  90h
.eh_frame_hdr:000000000000646D                 db 0C7h
.eh_frame_hdr:000000000000646E                 db 0FFh
.eh_frame_hdr:000000000000646F                 db 0FFh
.eh_frame_hdr:0000000000006470                 db 0B0h
.eh_frame_hdr:0000000000006471                 db    4
.eh_frame_hdr:0000000000006472                 db    0
.eh_frame_hdr:0000000000006473                 db    0
.eh_frame_hdr:0000000000006474                 db  80h
.eh_frame_hdr:0000000000006475                 db 0C8h
.eh_frame_hdr:0000000000006476                 db 0FFh
.eh_frame_hdr:0000000000006477                 db 0FFh
.eh_frame_hdr:0000000000006478                 db 0F4h
.eh_frame_hdr:0000000000006479                 db    4
.eh_frame_hdr:000000000000647A                 db    0
.eh_frame_hdr:000000000000647B                 db    0
.eh_frame_hdr:000000000000647C                 db 0C0h
.eh_frame_hdr:000000000000647D                 db 0DAh
.eh_frame_hdr:000000000000647E                 db 0FFh
.eh_frame_hdr:000000000000647F                 db 0FFh
.eh_frame_hdr:0000000000006480                 db  6Ch ; l
.eh_frame_hdr:0000000000006481                 db    5
.eh_frame_hdr:0000000000006482                 db    0
.eh_frame_hdr:0000000000006483                 db    0
.eh_frame_hdr:0000000000006484                 db  70h ; p
.eh_frame_hdr:0000000000006485                 db 0DCh
.eh_frame_hdr:0000000000006486                 db 0FFh
.eh_frame_hdr:0000000000006487                 db 0FFh
.eh_frame_hdr:0000000000006488                 db 0D8h
.eh_frame_hdr:0000000000006489                 db    5
.eh_frame_hdr:000000000000648A                 db    0
.eh_frame_hdr:000000000000648B                 db    0
.eh_frame_hdr:000000000000648C                 db 0B0h
.eh_frame_hdr:000000000000648D                 db 0DCh
.eh_frame_hdr:000000000000648E                 db 0FFh
.eh_frame_hdr:000000000000648F                 db 0FFh
.eh_frame_hdr:0000000000006490                 db    4
.eh_frame_hdr:0000000000006491                 db    6
.eh_frame_hdr:0000000000006492                 db    0
.eh_frame_hdr:0000000000006493                 db    0
.eh_frame_hdr:0000000000006494                 db 0D0h
.eh_frame_hdr:0000000000006495                 db 0DCh
.eh_frame_hdr:0000000000006496                 db 0FFh
.eh_frame_hdr:0000000000006497                 db 0FFh
.eh_frame_hdr:0000000000006498                 db  18h
.eh_frame_hdr:0000000000006499                 db    6
.eh_frame_hdr:000000000000649A                 db    0
.eh_frame_hdr:000000000000649B                 db    0
.eh_frame_hdr:000000000000649C                 db 0F0h
.eh_frame_hdr:000000000000649D                 db 0DCh
.eh_frame_hdr:000000000000649E                 db 0FFh
.eh_frame_hdr:000000000000649F                 db 0FFh
.eh_frame_hdr:00000000000064A0                 db  2Ch ; ,
.eh_frame_hdr:00000000000064A1                 db    6
.eh_frame_hdr:00000000000064A2                 db    0
.eh_frame_hdr:00000000000064A3                 db    0
.eh_frame_hdr:00000000000064A4                 db  30h ; 0
.eh_frame_hdr:00000000000064A5                 db 0DDh
.eh_frame_hdr:00000000000064A6                 db 0FFh
.eh_frame_hdr:00000000000064A7                 db 0FFh
.eh_frame_hdr:00000000000064A8                 db  40h ; @
.eh_frame_hdr:00000000000064A9                 db    6
.eh_frame_hdr:00000000000064AA                 db    0
.eh_frame_hdr:00000000000064AB                 db    0
.eh_frame_hdr:00000000000064AC                 db  50h ; P
.eh_frame_hdr:00000000000064AD                 db 0DDh
.eh_frame_hdr:00000000000064AE                 db 0FFh
.eh_frame_hdr:00000000000064AF                 db 0FFh
.eh_frame_hdr:00000000000064B0                 db  54h ; T
.eh_frame_hdr:00000000000064B1                 db    6
.eh_frame_hdr:00000000000064B2                 db    0
.eh_frame_hdr:00000000000064B3                 db    0
.eh_frame_hdr:00000000000064B4                 db  80h
.eh_frame_hdr:00000000000064B5                 db 0DDh
.eh_frame_hdr:00000000000064B6                 db 0FFh
.eh_frame_hdr:00000000000064B7                 db 0FFh
.eh_frame_hdr:00000000000064B8                 db  68h ; h
.eh_frame_hdr:00000000000064B9                 db    6
.eh_frame_hdr:00000000000064BA                 db    0
.eh_frame_hdr:00000000000064BB                 db    0
.eh_frame_hdr:00000000000064BC                 db    0
.eh_frame_hdr:00000000000064BD                 db 0DEh
.eh_frame_hdr:00000000000064BE                 db 0FFh
.eh_frame_hdr:00000000000064BF                 db 0FFh
.eh_frame_hdr:00000000000064C0                 db 0BCh
.eh_frame_hdr:00000000000064C1                 db    6
.eh_frame_hdr:00000000000064C2                 db    0
.eh_frame_hdr:00000000000064C3                 db    0
.eh_frame_hdr:00000000000064C4                 db 0F0h
.eh_frame_hdr:00000000000064C5                 db 0DEh
.eh_frame_hdr:00000000000064C6                 db 0FFh
.eh_frame_hdr:00000000000064C7                 db 0FFh
.eh_frame_hdr:00000000000064C8                 db  28h ; (
.eh_frame_hdr:00000000000064C9                 db    7
.eh_frame_hdr:00000000000064CA                 db    0
.eh_frame_hdr:00000000000064CB                 db    0
.eh_frame_hdr:00000000000064CC                 db    0
.eh_frame_hdr:00000000000064CD                 db 0DFh
.eh_frame_hdr:00000000000064CE                 db 0FFh
.eh_frame_hdr:00000000000064CF                 db 0FFh
.eh_frame_hdr:00000000000064D0                 db  3Ch ; <
.eh_frame_hdr:00000000000064D1                 db    7
.eh_frame_hdr:00000000000064D2                 db    0
.eh_frame_hdr:00000000000064D3                 db    0
.eh_frame_hdr:00000000000064D4                 db 0A0h
.eh_frame_hdr:00000000000064D5                 db 0DFh
.eh_frame_hdr:00000000000064D6                 db 0FFh
.eh_frame_hdr:00000000000064D7                 db 0FFh
.eh_frame_hdr:00000000000064D8                 db  68h ; h
.eh_frame_hdr:00000000000064D9                 db    7
.eh_frame_hdr:00000000000064DA                 db    0
.eh_frame_hdr:00000000000064DB                 db    0
.eh_frame_hdr:00000000000064DC                 db 0C0h
.eh_frame_hdr:00000000000064DD                 db 0DFh
.eh_frame_hdr:00000000000064DE                 db 0FFh
.eh_frame_hdr:00000000000064DF                 db 0FFh
.eh_frame_hdr:00000000000064E0                 db  7Ch ; |
.eh_frame_hdr:00000000000064E1                 db    7
.eh_frame_hdr:00000000000064E2                 db    0
.eh_frame_hdr:00000000000064E3                 db    0
.eh_frame_hdr:00000000000064E4                 db 0D0h
.eh_frame_hdr:00000000000064E5                 db 0DFh
.eh_frame_hdr:00000000000064E6                 db 0FFh
.eh_frame_hdr:00000000000064E7                 db 0FFh
.eh_frame_hdr:00000000000064E8                 db  90h
.eh_frame_hdr:00000000000064E9                 db    7
.eh_frame_hdr:00000000000064EA                 db    0
.eh_frame_hdr:00000000000064EB                 db    0
.eh_frame_hdr:00000000000064EC                 db 0F0h
.eh_frame_hdr:00000000000064ED                 db 0DFh
.eh_frame_hdr:00000000000064EE                 db 0FFh
.eh_frame_hdr:00000000000064EF                 db 0FFh
.eh_frame_hdr:00000000000064F0                 db 0A4h
.eh_frame_hdr:00000000000064F1                 db    7
.eh_frame_hdr:00000000000064F2                 db    0
.eh_frame_hdr:00000000000064F3                 db    0
.eh_frame_hdr:00000000000064F4                 db  10h
.eh_frame_hdr:00000000000064F5                 db 0E0h
.eh_frame_hdr:00000000000064F6                 db 0FFh
.eh_frame_hdr:00000000000064F7                 db 0FFh
.eh_frame_hdr:00000000000064F8                 db 0B8h
.eh_frame_hdr:00000000000064F9                 db    7
.eh_frame_hdr:00000000000064FA                 db    0
.eh_frame_hdr:00000000000064FB                 db    0
.eh_frame_hdr:00000000000064FC                 db 0A0h
.eh_frame_hdr:00000000000064FD                 db 0E0h
.eh_frame_hdr:00000000000064FE                 db 0FFh
.eh_frame_hdr:00000000000064FF                 db 0FFh
.eh_frame_hdr:0000000000006500                 db 0D4h
.eh_frame_hdr:0000000000006501                 db    7
.eh_frame_hdr:0000000000006502                 db    0
.eh_frame_hdr:0000000000006503                 db    0
.eh_frame_hdr:0000000000006504                 db  30h ; 0
.eh_frame_hdr:0000000000006505                 db 0E1h
.eh_frame_hdr:0000000000006506                 db 0FFh
.eh_frame_hdr:0000000000006507                 db 0FFh
.eh_frame_hdr:0000000000006508                 db 0F0h
.eh_frame_hdr:0000000000006509                 db    7
.eh_frame_hdr:000000000000650A                 db    0
.eh_frame_hdr:000000000000650B                 db    0
.eh_frame_hdr:000000000000650C                 db  40h ; @
.eh_frame_hdr:000000000000650D                 db 0E1h
.eh_frame_hdr:000000000000650E                 db 0FFh
.eh_frame_hdr:000000000000650F                 db 0FFh
.eh_frame_hdr:0000000000006510                 db    4
.eh_frame_hdr:0000000000006511                 db    8
.eh_frame_hdr:0000000000006512                 db    0
.eh_frame_hdr:0000000000006513                 db    0
.eh_frame_hdr:0000000000006514                 db  50h ; P
.eh_frame_hdr:0000000000006515                 db 0E1h
.eh_frame_hdr:0000000000006516                 db 0FFh
.eh_frame_hdr:0000000000006517                 db 0FFh
.eh_frame_hdr:0000000000006518                 db  18h
.eh_frame_hdr:0000000000006519                 db    8
.eh_frame_hdr:000000000000651A                 db    0
.eh_frame_hdr:000000000000651B                 db    0
.eh_frame_hdr:000000000000651C                 db 0F0h
.eh_frame_hdr:000000000000651D                 db 0E1h
.eh_frame_hdr:000000000000651E                 db 0FFh
.eh_frame_hdr:000000000000651F                 db 0FFh
.eh_frame_hdr:0000000000006520                 db  34h ; 4
.eh_frame_hdr:0000000000006521                 db    8
.eh_frame_hdr:0000000000006522                 db    0
.eh_frame_hdr:0000000000006523                 db    0
.eh_frame_hdr:0000000000006524                 db    0
.eh_frame_hdr:0000000000006525                 db 0E2h
.eh_frame_hdr:0000000000006526                 db 0FFh
.eh_frame_hdr:0000000000006527                 db 0FFh
.eh_frame_hdr:0000000000006528                 db  48h ; H
.eh_frame_hdr:0000000000006529                 db    8
.eh_frame_hdr:000000000000652A                 db    0
.eh_frame_hdr:000000000000652B                 db    0
.eh_frame_hdr:000000000000652C                 db  20h
.eh_frame_hdr:000000000000652D                 db 0E2h
.eh_frame_hdr:000000000000652E                 db 0FFh
.eh_frame_hdr:000000000000652F                 db 0FFh
.eh_frame_hdr:0000000000006530                 db  5Ch ; \
.eh_frame_hdr:0000000000006531                 db    8
.eh_frame_hdr:0000000000006532                 db    0
.eh_frame_hdr:0000000000006533                 db    0
.eh_frame_hdr:0000000000006534                 db  30h ; 0
.eh_frame_hdr:0000000000006535                 db 0E2h
.eh_frame_hdr:0000000000006536                 db 0FFh
.eh_frame_hdr:0000000000006537                 db 0FFh
.eh_frame_hdr:0000000000006538                 db  70h ; p
.eh_frame_hdr:0000000000006539                 db    8
.eh_frame_hdr:000000000000653A                 db    0
.eh_frame_hdr:000000000000653B                 db    0
.eh_frame_hdr:000000000000653C                 db 0C0h
.eh_frame_hdr:000000000000653D                 db 0E2h
.eh_frame_hdr:000000000000653E                 db 0FFh
.eh_frame_hdr:000000000000653F                 db 0FFh
.eh_frame_hdr:0000000000006540                 db  8Ch
.eh_frame_hdr:0000000000006541                 db    8
.eh_frame_hdr:0000000000006542                 db    0
.eh_frame_hdr:0000000000006543                 db    0
.eh_frame_hdr:0000000000006544                 db  60h ; `
.eh_frame_hdr:0000000000006545                 db 0E3h
.eh_frame_hdr:0000000000006546                 db 0FFh
.eh_frame_hdr:0000000000006547                 db 0FFh
.eh_frame_hdr:0000000000006548                 db 0A8h
.eh_frame_hdr:0000000000006549                 db    8
.eh_frame_hdr:000000000000654A                 db    0
.eh_frame_hdr:000000000000654B                 db    0
.eh_frame_hdr:000000000000654C                 db  70h ; p
.eh_frame_hdr:000000000000654D                 db 0E3h
.eh_frame_hdr:000000000000654E                 db 0FFh
.eh_frame_hdr:000000000000654F                 db 0FFh
.eh_frame_hdr:0000000000006550                 db 0BCh
.eh_frame_hdr:0000000000006551                 db    8
.eh_frame_hdr:0000000000006552                 db    0
.eh_frame_hdr:0000000000006553                 db    0
.eh_frame_hdr:0000000000006554                 db  90h
.eh_frame_hdr:0000000000006555                 db 0E3h
.eh_frame_hdr:0000000000006556                 db 0FFh
.eh_frame_hdr:0000000000006557                 db 0FFh
.eh_frame_hdr:0000000000006558                 db 0D0h
.eh_frame_hdr:0000000000006559                 db    8
.eh_frame_hdr:000000000000655A                 db    0
.eh_frame_hdr:000000000000655B                 db    0
.eh_frame_hdr:000000000000655C                 db 0B0h
.eh_frame_hdr:000000000000655D                 db 0E3h
.eh_frame_hdr:000000000000655E                 db 0FFh
.eh_frame_hdr:000000000000655F                 db 0FFh
.eh_frame_hdr:0000000000006560                 db 0E4h
.eh_frame_hdr:0000000000006561                 db    8
.eh_frame_hdr:0000000000006562                 db    0
.eh_frame_hdr:0000000000006563                 db    0
.eh_frame_hdr:0000000000006564                 db 0C0h
.eh_frame_hdr:0000000000006565                 db 0E3h
.eh_frame_hdr:0000000000006566                 db 0FFh
.eh_frame_hdr:0000000000006567                 db 0FFh
.eh_frame_hdr:0000000000006568                 db 0F8h
.eh_frame_hdr:0000000000006569                 db    8
.eh_frame_hdr:000000000000656A                 db    0
.eh_frame_hdr:000000000000656B                 db    0
.eh_frame_hdr:000000000000656C                 db 0E0h
.eh_frame_hdr:000000000000656D                 db 0E3h
.eh_frame_hdr:000000000000656E                 db 0FFh
.eh_frame_hdr:000000000000656F                 db 0FFh
.eh_frame_hdr:0000000000006570                 db  0Ch
.eh_frame_hdr:0000000000006571                 db    9
.eh_frame_hdr:0000000000006572                 db    0
.eh_frame_hdr:0000000000006573                 db    0
.eh_frame_hdr:0000000000006574                 db    0
.eh_frame_hdr:0000000000006575                 db 0E4h
.eh_frame_hdr:0000000000006576                 db 0FFh
.eh_frame_hdr:0000000000006577                 db 0FFh
.eh_frame_hdr:0000000000006578                 db  20h
.eh_frame_hdr:0000000000006579                 db    9
.eh_frame_hdr:000000000000657A                 db    0
.eh_frame_hdr:000000000000657B                 db    0
.eh_frame_hdr:000000000000657C                 db  20h
.eh_frame_hdr:000000000000657D                 db 0E4h
.eh_frame_hdr:000000000000657E                 db 0FFh
.eh_frame_hdr:000000000000657F                 db 0FFh
.eh_frame_hdr:0000000000006580                 db  38h ; 8
.eh_frame_hdr:0000000000006581                 db    9
.eh_frame_hdr:0000000000006582                 db    0
.eh_frame_hdr:0000000000006583                 db    0
.eh_frame_hdr:0000000000006584                 db  80h
.eh_frame_hdr:0000000000006585                 db 0E4h
.eh_frame_hdr:0000000000006586                 db 0FFh
.eh_frame_hdr:0000000000006587                 db 0FFh
.eh_frame_hdr:0000000000006588                 db  70h ; p
.eh_frame_hdr:0000000000006589                 db    9
.eh_frame_hdr:000000000000658A                 db    0
.eh_frame_hdr:000000000000658B                 db    0
.eh_frame_hdr:000000000000658C                 db 0E0h
.eh_frame_hdr:000000000000658D                 db 0E4h
.eh_frame_hdr:000000000000658E                 db 0FFh
.eh_frame_hdr:000000000000658F                 db 0FFh
.eh_frame_hdr:0000000000006590                 db 0A8h
.eh_frame_hdr:0000000000006591                 db    9
.eh_frame_hdr:0000000000006592                 db    0
.eh_frame_hdr:0000000000006593                 db    0
.eh_frame_hdr:0000000000006594                 db    0
.eh_frame_hdr:0000000000006595                 db 0E9h
.eh_frame_hdr:0000000000006596                 db 0FFh
.eh_frame_hdr:0000000000006597                 db 0FFh
.eh_frame_hdr:0000000000006598                 db 0BCh
.eh_frame_hdr:0000000000006599                 db  0Ah
.eh_frame_hdr:000000000000659A                 db    0
.eh_frame_hdr:000000000000659B                 db    0
.eh_frame_hdr:000000000000659C                 db  20h
.eh_frame_hdr:000000000000659D                 db 0E9h
.eh_frame_hdr:000000000000659E                 db 0FFh
.eh_frame_hdr:000000000000659F                 db 0FFh
.eh_frame_hdr:00000000000065A0                 db 0D0h
.eh_frame_hdr:00000000000065A1                 db  0Ah
.eh_frame_hdr:00000000000065A2                 db    0
.eh_frame_hdr:00000000000065A3                 db    0
.eh_frame_hdr:00000000000065A4                 db 0A0h
.eh_frame_hdr:00000000000065A5                 db 0E9h
.eh_frame_hdr:00000000000065A6                 db 0FFh
.eh_frame_hdr:00000000000065A7                 db 0FFh
.eh_frame_hdr:00000000000065A8                 db 0ECh
.eh_frame_hdr:00000000000065A9                 db  0Ah
.eh_frame_hdr:00000000000065AA                 db    0
.eh_frame_hdr:00000000000065AB                 db    0
.eh_frame_hdr:00000000000065AC                 db  80h
.eh_frame_hdr:00000000000065AD                 db 0EAh
.eh_frame_hdr:00000000000065AE                 db 0FFh
.eh_frame_hdr:00000000000065AF                 db 0FFh
.eh_frame_hdr:00000000000065B0                 db  18h
.eh_frame_hdr:00000000000065B1                 db  0Bh
.eh_frame_hdr:00000000000065B2                 db    0
.eh_frame_hdr:00000000000065B3                 db    0
.eh_frame_hdr:00000000000065B4                 db    0
.eh_frame_hdr:00000000000065B5                 db 0EBh
.eh_frame_hdr:00000000000065B6                 db 0FFh
.eh_frame_hdr:00000000000065B7                 db 0FFh
.eh_frame_hdr:00000000000065B8                 db  38h ; 8
.eh_frame_hdr:00000000000065B9                 db  0Bh
.eh_frame_hdr:00000000000065BA                 db    0
.eh_frame_hdr:00000000000065BB                 db    0
.eh_frame_hdr:00000000000065BC                 db  20h
.eh_frame_hdr:00000000000065BD                 db 0EBh
.eh_frame_hdr:00000000000065BE                 db 0FFh
.eh_frame_hdr:00000000000065BF                 db 0FFh
.eh_frame_hdr:00000000000065C0                 db  54h ; T
.eh_frame_hdr:00000000000065C1                 db  0Bh
.eh_frame_hdr:00000000000065C2                 db    0
.eh_frame_hdr:00000000000065C3                 db    0
.eh_frame_hdr:00000000000065C4                 db  50h ; P
.eh_frame_hdr:00000000000065C5                 db 0EBh
.eh_frame_hdr:00000000000065C6                 db 0FFh
.eh_frame_hdr:00000000000065C7                 db 0FFh
.eh_frame_hdr:00000000000065C8                 db  68h ; h
.eh_frame_hdr:00000000000065C9                 db  0Bh
.eh_frame_hdr:00000000000065CA                 db    0
.eh_frame_hdr:00000000000065CB                 db    0
.eh_frame_hdr:00000000000065CC                 db  60h ; `
.eh_frame_hdr:00000000000065CD                 db 0EBh
.eh_frame_hdr:00000000000065CE                 db 0FFh
.eh_frame_hdr:00000000000065CF                 db 0FFh
.eh_frame_hdr:00000000000065D0                 db  7Ch ; |
.eh_frame_hdr:00000000000065D1                 db  0Bh
.eh_frame_hdr:00000000000065D2                 db    0
.eh_frame_hdr:00000000000065D3                 db    0
.eh_frame_hdr:00000000000065D4                 db 0A0h
.eh_frame_hdr:00000000000065D5                 db 0EBh
.eh_frame_hdr:00000000000065D6                 db 0FFh
.eh_frame_hdr:00000000000065D7                 db 0FFh
.eh_frame_hdr:00000000000065D8                 db 0A0h
.eh_frame_hdr:00000000000065D9                 db  0Bh
.eh_frame_hdr:00000000000065DA                 db    0
.eh_frame_hdr:00000000000065DB                 db    0
.eh_frame_hdr:00000000000065DC                 db 0D0h
.eh_frame_hdr:00000000000065DD                 db 0EBh
.eh_frame_hdr:00000000000065DE                 db 0FFh
.eh_frame_hdr:00000000000065DF                 db 0FFh
.eh_frame_hdr:00000000000065E0                 db 0B4h
.eh_frame_hdr:00000000000065E1                 db  0Bh
.eh_frame_hdr:00000000000065E2                 db    0
.eh_frame_hdr:00000000000065E3                 db    0
.eh_frame_hdr:00000000000065E4                 db  60h ; `
.eh_frame_hdr:00000000000065E5                 db 0ECh
.eh_frame_hdr:00000000000065E6                 db 0FFh
.eh_frame_hdr:00000000000065E7                 db 0FFh
.eh_frame_hdr:00000000000065E8                 db 0CCh
.eh_frame_hdr:00000000000065E9                 db  0Bh
.eh_frame_hdr:00000000000065EA                 db    0
.eh_frame_hdr:00000000000065EB                 db    0
.eh_frame_hdr:00000000000065EC                 db 0B0h
.eh_frame_hdr:00000000000065ED                 db 0ECh
.eh_frame_hdr:00000000000065EE                 db 0FFh
.eh_frame_hdr:00000000000065EF                 db 0FFh
.eh_frame_hdr:00000000000065F0                 db 0E4h
.eh_frame_hdr:00000000000065F1                 db  0Bh
.eh_frame_hdr:00000000000065F2                 db    0
.eh_frame_hdr:00000000000065F3                 db    0
.eh_frame_hdr:00000000000065F4                 db 0D0h
.eh_frame_hdr:00000000000065F5                 db 0ECh
.eh_frame_hdr:00000000000065F6                 db 0FFh
.eh_frame_hdr:00000000000065F7                 db 0FFh
.eh_frame_hdr:00000000000065F8                 db    0
.eh_frame_hdr:00000000000065F9                 db  0Ch
.eh_frame_hdr:00000000000065FA                 db    0
.eh_frame_hdr:00000000000065FB                 db    0
.eh_frame_hdr:00000000000065FC                 db    0
.eh_frame_hdr:00000000000065FD                 db 0EDh
.eh_frame_hdr:00000000000065FE                 db 0FFh
.eh_frame_hdr:00000000000065FF                 db 0FFh
.eh_frame_hdr:0000000000006600                 db  1Ch
.eh_frame_hdr:0000000000006601                 db  0Ch
.eh_frame_hdr:0000000000006602                 db    0
.eh_frame_hdr:0000000000006603                 db    0
.eh_frame_hdr:0000000000006604                 db  30h ; 0
.eh_frame_hdr:0000000000006605                 db 0EDh
.eh_frame_hdr:0000000000006606                 db 0FFh
.eh_frame_hdr:0000000000006607                 db 0FFh
.eh_frame_hdr:0000000000006608                 db  44h ; D
.eh_frame_hdr:0000000000006609                 db  0Ch
.eh_frame_hdr:000000000000660A                 db    0
.eh_frame_hdr:000000000000660B                 db    0
.eh_frame_hdr:000000000000660C                 db  50h ; P
.eh_frame_hdr:000000000000660D                 db 0EDh
.eh_frame_hdr:000000000000660E                 db 0FFh
.eh_frame_hdr:000000000000660F                 db 0FFh
.eh_frame_hdr:0000000000006610                 db  60h ; `
.eh_frame_hdr:0000000000006611                 db  0Ch
.eh_frame_hdr:0000000000006612                 db    0
.eh_frame_hdr:0000000000006613                 db    0
.eh_frame_hdr:0000000000006614                 db  90h
.eh_frame_hdr:0000000000006615                 db 0EDh
.eh_frame_hdr:0000000000006616                 db 0FFh
.eh_frame_hdr:0000000000006617                 db 0FFh
.eh_frame_hdr:0000000000006618                 db  78h ; x
.eh_frame_hdr:0000000000006619                 db  0Ch
.eh_frame_hdr:000000000000661A                 db    0
.eh_frame_hdr:000000000000661B                 db    0
.eh_frame_hdr:000000000000661C                 db  20h
.eh_frame_hdr:000000000000661D                 db 0EEh
.eh_frame_hdr:000000000000661E                 db 0FFh
.eh_frame_hdr:000000000000661F                 db 0FFh
.eh_frame_hdr:0000000000006620                 db 0B8h
.eh_frame_hdr:0000000000006621                 db  0Ch
.eh_frame_hdr:0000000000006622                 db    0
.eh_frame_hdr:0000000000006623                 db    0
.eh_frame_hdr:0000000000006624                 db 0A0h
.eh_frame_hdr:0000000000006625                 db 0EEh
.eh_frame_hdr:0000000000006626                 db 0FFh
.eh_frame_hdr:0000000000006627                 db 0FFh
.eh_frame_hdr:0000000000006628                 db    8
.eh_frame_hdr:0000000000006629                 db  0Dh
.eh_frame_hdr:000000000000662A                 db    0
.eh_frame_hdr:000000000000662B                 db    0
.eh_frame_hdr:000000000000662C                 db    0
.eh_frame_hdr:000000000000662D                 db 0EFh
.eh_frame_hdr:000000000000662E                 db 0FFh
.eh_frame_hdr:000000000000662F                 db 0FFh
.eh_frame_hdr:0000000000006630                 db  28h ; (
.eh_frame_hdr:0000000000006631                 db  0Dh
.eh_frame_hdr:0000000000006632                 db    0
.eh_frame_hdr:0000000000006633                 db    0
.eh_frame_hdr:0000000000006634                 db  40h ; @
.eh_frame_hdr:0000000000006635                 db 0EFh
.eh_frame_hdr:0000000000006636                 db 0FFh
.eh_frame_hdr:0000000000006637                 db 0FFh
.eh_frame_hdr:0000000000006638                 db  48h ; H
.eh_frame_hdr:0000000000006639                 db  0Dh
.eh_frame_hdr:000000000000663A                 db    0
.eh_frame_hdr:000000000000663B                 db    0
.eh_frame_hdr:000000000000663C                 db 0C0h
.eh_frame_hdr:000000000000663D                 db 0EFh
.eh_frame_hdr:000000000000663E                 db 0FFh
.eh_frame_hdr:000000000000663F                 db 0FFh
.eh_frame_hdr:0000000000006640                 db  80h
.eh_frame_hdr:0000000000006641                 db  0Dh
.eh_frame_hdr:0000000000006642                 db    0
.eh_frame_hdr:0000000000006643                 db    0
.eh_frame_hdr:0000000000006644                 db    0
.eh_frame_hdr:0000000000006645                 db 0F0h
.eh_frame_hdr:0000000000006646                 db 0FFh
.eh_frame_hdr:0000000000006647                 db 0FFh
.eh_frame_hdr:0000000000006648                 db 0A0h
.eh_frame_hdr:0000000000006649                 db  0Dh
.eh_frame_hdr:000000000000664A                 db    0
.eh_frame_hdr:000000000000664B                 db    0
.eh_frame_hdr:000000000000664C                 db  60h ; `
.eh_frame_hdr:000000000000664D                 db 0F0h
.eh_frame_hdr:000000000000664E                 db 0FFh
.eh_frame_hdr:000000000000664F                 db 0FFh
.eh_frame_hdr:0000000000006650                 db 0D0h
.eh_frame_hdr:0000000000006651                 db  0Dh
.eh_frame_hdr:0000000000006652                 db    0
.eh_frame_hdr:0000000000006653                 db    0
.eh_frame_hdr:0000000000006654                 db 0D0h
.eh_frame_hdr:0000000000006655                 db 0F0h
.eh_frame_hdr:0000000000006656                 db 0FFh
.eh_frame_hdr:0000000000006657                 db 0FFh
.eh_frame_hdr:0000000000006658                 db  18h
.eh_frame_hdr:0000000000006659                 db  0Eh
.eh_frame_hdr:000000000000665A                 db    0
.eh_frame_hdr:000000000000665B                 db    0
.eh_frame_hdr:000000000000665C                 db 0E0h
.eh_frame_hdr:000000000000665D                 db 0F0h
.eh_frame_hdr:000000000000665E                 db 0FFh
.eh_frame_hdr:000000000000665F                 db 0FFh
.eh_frame_hdr:0000000000006660                 db  30h ; 0
.eh_frame_hdr:0000000000006661                 db  0Eh
.eh_frame_hdr:0000000000006662                 db    0
.eh_frame_hdr:0000000000006663                 db    0
.eh_frame_hdr:0000000000006663 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006663
LOAD:0000000000006664 ; ===========================================================================
LOAD:0000000000006664
LOAD:0000000000006664 ; Segment type: Pure code
LOAD:0000000000006664 ; Segment permissions: Read/Execute
LOAD:0000000000006664 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006664                 assume cs:LOAD
LOAD:0000000000006664                 ;org 6664h
LOAD:0000000000006664                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006664                 align 8
LOAD:0000000000006664 LOAD            ends
LOAD:0000000000006664
.eh_frame:0000000000006668 ; ===========================================================================
.eh_frame:0000000000006668
.eh_frame:0000000000006668 ; Segment type: Pure data
.eh_frame:0000000000006668 ; Segment permissions: Read
.eh_frame:0000000000006668 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006668                 assume cs:_eh_frame
.eh_frame:0000000000006668                 ;org 6668h
.eh_frame:0000000000006668                 db  14h
.eh_frame:0000000000006669                 db    0
.eh_frame:000000000000666A                 db    0
.eh_frame:000000000000666B                 db    0
.eh_frame:000000000000666C                 db    0
.eh_frame:000000000000666D                 db    0
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db    1
.eh_frame:0000000000006671                 db  7Ah ; z
.eh_frame:0000000000006672                 db  52h ; R
.eh_frame:0000000000006673                 db    0
.eh_frame:0000000000006674                 db    1
.eh_frame:0000000000006675                 db  78h ; x
.eh_frame:0000000000006676                 db  10h
.eh_frame:0000000000006677                 db    1
.eh_frame:0000000000006678                 db  1Bh
.eh_frame:0000000000006679                 db  0Ch
.eh_frame:000000000000667A                 db    7
.eh_frame:000000000000667B                 db    8
.eh_frame:000000000000667C                 db  90h
.eh_frame:000000000000667D                 db    1
.eh_frame:000000000000667E                 db    7
.eh_frame:000000000000667F                 db  10h
.eh_frame:0000000000006680                 db  14h
.eh_frame:0000000000006681                 db    0
.eh_frame:0000000000006682                 db    0
.eh_frame:0000000000006683                 db    0
.eh_frame:0000000000006684                 db  1Ch
.eh_frame:0000000000006685                 db    0
.eh_frame:0000000000006686                 db    0
.eh_frame:0000000000006687                 db    0
.eh_frame:0000000000006688                 db  58h ; X
.eh_frame:0000000000006689                 db 0BDh
.eh_frame:000000000000668A                 db 0FFh
.eh_frame:000000000000668B                 db 0FFh
.eh_frame:000000000000668C                 db  2Bh ; +
.eh_frame:000000000000668D                 db    0
.eh_frame:000000000000668E                 db    0
.eh_frame:000000000000668F                 db    0
.eh_frame:0000000000006690                 db    0
.eh_frame:0000000000006691                 db    0
.eh_frame:0000000000006692                 db    0
.eh_frame:0000000000006693                 db    0
.eh_frame:0000000000006694                 db    0
.eh_frame:0000000000006695                 db    0
.eh_frame:0000000000006696                 db    0
.eh_frame:0000000000006697                 db    0
.eh_frame:0000000000006698                 db  14h
.eh_frame:0000000000006699                 db    0
.eh_frame:000000000000669A                 db    0
.eh_frame:000000000000669B                 db    0
.eh_frame:000000000000669C                 db    0
.eh_frame:000000000000669D                 db    0
.eh_frame:000000000000669E                 db    0
.eh_frame:000000000000669F                 db    0
.eh_frame:00000000000066A0                 db    1
.eh_frame:00000000000066A1                 db  7Ah ; z
.eh_frame:00000000000066A2                 db  52h ; R
.eh_frame:00000000000066A3                 db    0
.eh_frame:00000000000066A4                 db    1
.eh_frame:00000000000066A5                 db  78h ; x
.eh_frame:00000000000066A6                 db  10h
.eh_frame:00000000000066A7                 db    1
.eh_frame:00000000000066A8                 db  1Bh
.eh_frame:00000000000066A9                 db  0Ch
.eh_frame:00000000000066AA                 db    7
.eh_frame:00000000000066AB                 db    8
.eh_frame:00000000000066AC                 db  90h
.eh_frame:00000000000066AD                 db    1
.eh_frame:00000000000066AE                 db    0
.eh_frame:00000000000066AF                 db    0
.eh_frame:00000000000066B0                 db  24h ; $
.eh_frame:00000000000066B1                 db    0
.eh_frame:00000000000066B2                 db    0
.eh_frame:00000000000066B3                 db    0
.eh_frame:00000000000066B4                 db  1Ch
.eh_frame:00000000000066B5                 db    0
.eh_frame:00000000000066B6                 db    0
.eh_frame:00000000000066B7                 db    0
.eh_frame:00000000000066B8                 db 0B8h
.eh_frame:00000000000066B9                 db 0ADh
.eh_frame:00000000000066BA                 db 0FFh
.eh_frame:00000000000066BB                 db 0FFh
.eh_frame:00000000000066BC                 db  20h
.eh_frame:00000000000066BD                 db    3
.eh_frame:00000000000066BE                 db    0
.eh_frame:00000000000066BF                 db    0
.eh_frame:00000000000066C0                 db    0
.eh_frame:00000000000066C1                 db  0Eh
.eh_frame:00000000000066C2                 db  10h
.eh_frame:00000000000066C3                 db  46h ; F
.eh_frame:00000000000066C4                 db  0Eh
.eh_frame:00000000000066C5                 db  18h
.eh_frame:00000000000066C6                 db  4Ah ; J
.eh_frame:00000000000066C7                 db  0Fh
.eh_frame:00000000000066C8                 db  0Bh
.eh_frame:00000000000066C9                 db  77h ; w
.eh_frame:00000000000066CA                 db    8
.eh_frame:00000000000066CB                 db  80h
.eh_frame:00000000000066CC                 db    0
.eh_frame:00000000000066CD                 db  3Fh ; ?
.eh_frame:00000000000066CE                 db  1Ah
.eh_frame:00000000000066CF                 db  3Bh ; ;
.eh_frame:00000000000066D0                 db  2Ah ; *
.eh_frame:00000000000066D1                 db  33h ; 3
.eh_frame:00000000000066D2                 db  24h ; $
.eh_frame:00000000000066D3                 db  22h ; "
.eh_frame:00000000000066D4                 db    0
.eh_frame:00000000000066D5                 db    0
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db  14h
.eh_frame:00000000000066D9                 db    0
.eh_frame:00000000000066DA                 db    0
.eh_frame:00000000000066DB                 db    0
.eh_frame:00000000000066DC                 db  44h ; D
.eh_frame:00000000000066DD                 db    0
.eh_frame:00000000000066DE                 db    0
.eh_frame:00000000000066DF                 db    0
.eh_frame:00000000000066E0                 db 0B0h
.eh_frame:00000000000066E1                 db 0B0h
.eh_frame:00000000000066E2                 db 0FFh
.eh_frame:00000000000066E3                 db 0FFh
.eh_frame:00000000000066E4                 db    8
.eh_frame:00000000000066E5                 db    0
.eh_frame:00000000000066E6                 db    0
.eh_frame:00000000000066E7                 db    0
.eh_frame:00000000000066E8                 db    0
.eh_frame:00000000000066E9                 db    0
.eh_frame:00000000000066EA                 db    0
.eh_frame:00000000000066EB                 db    0
.eh_frame:00000000000066EC                 db    0
.eh_frame:00000000000066ED                 db    0
.eh_frame:00000000000066EE                 db    0
.eh_frame:00000000000066EF                 db    0
.eh_frame:00000000000066F0                 db  10h
.eh_frame:00000000000066F1                 db    0
.eh_frame:00000000000066F2                 db    0
.eh_frame:00000000000066F3                 db    0
.eh_frame:00000000000066F4                 db  5Ch ; \
.eh_frame:00000000000066F5                 db    0
.eh_frame:00000000000066F6                 db    0
.eh_frame:00000000000066F7                 db    0
.eh_frame:00000000000066F8                 db 0F8h
.eh_frame:00000000000066F9                 db 0BDh
.eh_frame:00000000000066FA                 db 0FFh
.eh_frame:00000000000066FB                 db 0FFh
.eh_frame:00000000000066FC                 db  74h ; t
.eh_frame:00000000000066FD                 db    0
.eh_frame:00000000000066FE                 db    0
.eh_frame:00000000000066FF                 db    0
.eh_frame:0000000000006700                 db    0
.eh_frame:0000000000006701                 db    0
.eh_frame:0000000000006702                 db    0
.eh_frame:0000000000006703                 db    0
.eh_frame:0000000000006704                 db  14h
.eh_frame:0000000000006705                 db    0
.eh_frame:0000000000006706                 db    0
.eh_frame:0000000000006707                 db    0
.eh_frame:0000000000006708                 db  70h ; p
.eh_frame:0000000000006709                 db    0
.eh_frame:000000000000670A                 db    0
.eh_frame:000000000000670B                 db    0
.eh_frame:000000000000670C                 db  94h
.eh_frame:000000000000670D                 db 0B0h
.eh_frame:000000000000670E                 db 0FFh
.eh_frame:000000000000670F                 db 0FFh
.eh_frame:0000000000006710                 db  2Dh ; -
.eh_frame:0000000000006711                 db    0
.eh_frame:0000000000006712                 db    0
.eh_frame:0000000000006713                 db    0
.eh_frame:0000000000006714                 db    0
.eh_frame:0000000000006715                 db  41h ; A
.eh_frame:0000000000006716                 db  0Eh
.eh_frame:0000000000006717                 db  10h
.eh_frame:0000000000006718                 db  83h
.eh_frame:0000000000006719                 db    2
.eh_frame:000000000000671A                 db    0
.eh_frame:000000000000671B                 db    0
.eh_frame:000000000000671C                 db  28h ; (
.eh_frame:000000000000671D                 db    0
.eh_frame:000000000000671E                 db    0
.eh_frame:000000000000671F                 db    0
.eh_frame:0000000000006720                 db  88h
.eh_frame:0000000000006721                 db    0
.eh_frame:0000000000006722                 db    0
.eh_frame:0000000000006723                 db    0
.eh_frame:0000000000006724                 db  4Ch ; L
.eh_frame:0000000000006725                 db 0BEh
.eh_frame:0000000000006726                 db 0FFh
.eh_frame:0000000000006727                 db 0FFh
.eh_frame:0000000000006728                 db 0DAh
.eh_frame:0000000000006729                 db    3
.eh_frame:000000000000672A                 db    0
.eh_frame:000000000000672B                 db    0
.eh_frame:000000000000672C                 db    0
.eh_frame:000000000000672D                 db  42h ; B
.eh_frame:000000000000672E                 db  0Eh
.eh_frame:000000000000672F                 db  10h
.eh_frame:0000000000006730                 db  8Dh
.eh_frame:0000000000006731                 db    2
.eh_frame:0000000000006732                 db  42h ; B
.eh_frame:0000000000006733                 db  0Eh
.eh_frame:0000000000006734                 db  18h
.eh_frame:0000000000006735                 db  8Ch
.eh_frame:0000000000006736                 db    3
.eh_frame:0000000000006737                 db  46h ; F
.eh_frame:0000000000006738                 db  0Eh
.eh_frame:0000000000006739                 db  20h
.eh_frame:000000000000673A                 db  86h
.eh_frame:000000000000673B                 db    4
.eh_frame:000000000000673C                 db  41h ; A
.eh_frame:000000000000673D                 db  0Eh
.eh_frame:000000000000673E                 db  28h ; (
.eh_frame:000000000000673F                 db  83h
.eh_frame:0000000000006740                 db    5
.eh_frame:0000000000006741                 db  49h ; I
.eh_frame:0000000000006742                 db  0Eh
.eh_frame:0000000000006743                 db 0B0h
.eh_frame:0000000000006744                 db    1
.eh_frame:0000000000006745                 db    0
.eh_frame:0000000000006746                 db    0
.eh_frame:0000000000006747                 db    0
.eh_frame:0000000000006748                 db  5Ch ; \
.eh_frame:0000000000006749                 db    0
.eh_frame:000000000000674A                 db    0
.eh_frame:000000000000674B                 db    0
.eh_frame:000000000000674C                 db 0B4h
.eh_frame:000000000000674D                 db    0
.eh_frame:000000000000674E                 db    0
.eh_frame:000000000000674F                 db    0
.eh_frame:0000000000006750                 db  80h
.eh_frame:0000000000006751                 db 0B0h
.eh_frame:0000000000006752                 db 0FFh
.eh_frame:0000000000006753                 db 0FFh
.eh_frame:0000000000006754                 db  0Bh
.eh_frame:0000000000006755                 db  0Ch
.eh_frame:0000000000006756                 db    0
.eh_frame:0000000000006757                 db    0
.eh_frame:0000000000006758                 db    0
.eh_frame:0000000000006759                 db  42h ; B
.eh_frame:000000000000675A                 db  0Eh
.eh_frame:000000000000675B                 db  10h
.eh_frame:000000000000675C                 db  8Fh
.eh_frame:000000000000675D                 db    2
.eh_frame:000000000000675E                 db  42h ; B
.eh_frame:000000000000675F                 db  0Eh
.eh_frame:0000000000006760                 db  18h
.eh_frame:0000000000006761                 db  8Eh
.eh_frame:0000000000006762                 db    3
.eh_frame:0000000000006763                 db  45h ; E
.eh_frame:0000000000006764                 db  0Eh
.eh_frame:0000000000006765                 db  20h
.eh_frame:0000000000006766                 db  8Dh
.eh_frame:0000000000006767                 db    4
.eh_frame:0000000000006768                 db  42h ; B
.eh_frame:0000000000006769                 db  0Eh
.eh_frame:000000000000676A                 db  28h ; (
.eh_frame:000000000000676B                 db  8Ch
.eh_frame:000000000000676C                 db    5
.eh_frame:000000000000676D                 db  44h ; D
.eh_frame:000000000000676E                 db  0Eh
.eh_frame:000000000000676F                 db  30h ; 0
.eh_frame:0000000000006770                 db  86h
.eh_frame:0000000000006771                 db    6
.eh_frame:0000000000006772                 db  41h ; A
.eh_frame:0000000000006773                 db  0Eh
.eh_frame:0000000000006774                 db  38h ; 8
.eh_frame:0000000000006775                 db  83h
.eh_frame:0000000000006776                 db    7
.eh_frame:0000000000006777                 db  47h ; G
.eh_frame:0000000000006778                 db  0Eh
.eh_frame:0000000000006779                 db  90h
.eh_frame:000000000000677A                 db    3
.eh_frame:000000000000677B                 db    3
.eh_frame:000000000000677C                 db  48h ; H
.eh_frame:000000000000677D                 db    1
.eh_frame:000000000000677E                 db  0Ah
.eh_frame:000000000000677F                 db  0Eh
.eh_frame:0000000000006780                 db  98h
.eh_frame:0000000000006781                 db    3
.eh_frame:0000000000006782                 db  50h ; P
.eh_frame:0000000000006783                 db  0Eh
.eh_frame:0000000000006784                 db 0A0h
.eh_frame:0000000000006785                 db    3
.eh_frame:0000000000006786                 db  6Ah ; j
.eh_frame:0000000000006787                 db  0Bh
.eh_frame:0000000000006788                 db    3
.eh_frame:0000000000006789                 db  93h
.eh_frame:000000000000678A                 db    6
.eh_frame:000000000000678B                 db  0Ah
.eh_frame:000000000000678C                 db  0Eh
.eh_frame:000000000000678D                 db  38h ; 8
.eh_frame:000000000000678E                 db  41h ; A
.eh_frame:000000000000678F                 db  0Eh
.eh_frame:0000000000006790                 db  30h ; 0
.eh_frame:0000000000006791                 db  41h ; A
.eh_frame:0000000000006792                 db  0Eh
.eh_frame:0000000000006793                 db  28h ; (
.eh_frame:0000000000006794                 db  42h ; B
.eh_frame:0000000000006795                 db  0Eh
.eh_frame:0000000000006796                 db  20h
.eh_frame:0000000000006797                 db  42h ; B
.eh_frame:0000000000006798                 db  0Eh
.eh_frame:0000000000006799                 db  18h
.eh_frame:000000000000679A                 db  42h ; B
.eh_frame:000000000000679B                 db  0Eh
.eh_frame:000000000000679C                 db  10h
.eh_frame:000000000000679D                 db  42h ; B
.eh_frame:000000000000679E                 db  0Eh
.eh_frame:000000000000679F                 db    8
.eh_frame:00000000000067A0                 db  41h ; A
.eh_frame:00000000000067A1                 db  0Bh
.eh_frame:00000000000067A2                 db    0
.eh_frame:00000000000067A3                 db    0
.eh_frame:00000000000067A4                 db    0
.eh_frame:00000000000067A5                 db    0
.eh_frame:00000000000067A6                 db    0
.eh_frame:00000000000067A7                 db    0
.eh_frame:00000000000067A8                 db  10h
.eh_frame:00000000000067A9                 db    0
.eh_frame:00000000000067AA                 db    0
.eh_frame:00000000000067AB                 db    0
.eh_frame:00000000000067AC                 db  14h
.eh_frame:00000000000067AD                 db    1
.eh_frame:00000000000067AE                 db    0
.eh_frame:00000000000067AF                 db    0
.eh_frame:00000000000067B0                 db 0A0h
.eh_frame:00000000000067B1                 db 0C1h
.eh_frame:00000000000067B2                 db 0FFh
.eh_frame:00000000000067B3                 db 0FFh
.eh_frame:00000000000067B4                 db    8
.eh_frame:00000000000067B5                 db    0
.eh_frame:00000000000067B6                 db    0
.eh_frame:00000000000067B7                 db    0
.eh_frame:00000000000067B8                 db    0
.eh_frame:00000000000067B9                 db    0
.eh_frame:00000000000067BA                 db    0
.eh_frame:00000000000067BB                 db    0
.eh_frame:00000000000067BC                 db  10h
.eh_frame:00000000000067BD                 db    0
.eh_frame:00000000000067BE                 db    0
.eh_frame:00000000000067BF                 db    0
.eh_frame:00000000000067C0                 db  28h ; (
.eh_frame:00000000000067C1                 db    1
.eh_frame:00000000000067C2                 db    0
.eh_frame:00000000000067C3                 db    0
.eh_frame:00000000000067C4                 db  9Ch
.eh_frame:00000000000067C5                 db 0C1h
.eh_frame:00000000000067C6                 db 0FFh
.eh_frame:00000000000067C7                 db 0FFh
.eh_frame:00000000000067C8                 db    8
.eh_frame:00000000000067C9                 db    0
.eh_frame:00000000000067CA                 db    0
.eh_frame:00000000000067CB                 db    0
.eh_frame:00000000000067CC                 db    0
.eh_frame:00000000000067CD                 db    0
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db  2Ch ; ,
.eh_frame:00000000000067D1                 db    0
.eh_frame:00000000000067D2                 db    0
.eh_frame:00000000000067D3                 db    0
.eh_frame:00000000000067D4                 db  3Ch ; <
.eh_frame:00000000000067D5                 db    1
.eh_frame:00000000000067D6                 db    0
.eh_frame:00000000000067D7                 db    0
.eh_frame:00000000000067D8                 db  98h
.eh_frame:00000000000067D9                 db 0C1h
.eh_frame:00000000000067DA                 db 0FFh
.eh_frame:00000000000067DB                 db 0FFh
.eh_frame:00000000000067DC                 db 0A4h
.eh_frame:00000000000067DD                 db    0
.eh_frame:00000000000067DE                 db    0
.eh_frame:00000000000067DF                 db    0
.eh_frame:00000000000067E0                 db    0
.eh_frame:00000000000067E1                 db  41h ; A
.eh_frame:00000000000067E2                 db  0Eh
.eh_frame:00000000000067E3                 db  10h
.eh_frame:00000000000067E4                 db  86h
.eh_frame:00000000000067E5                 db    2
.eh_frame:00000000000067E6                 db  41h ; A
.eh_frame:00000000000067E7                 db  0Eh
.eh_frame:00000000000067E8                 db  18h
.eh_frame:00000000000067E9                 db  83h
.eh_frame:00000000000067EA                 db    3
.eh_frame:00000000000067EB                 db  44h ; D
.eh_frame:00000000000067EC                 db  0Eh
.eh_frame:00000000000067ED                 db  20h
.eh_frame:00000000000067EE                 db  7Ah ; z
.eh_frame:00000000000067EF                 db  0Ah
.eh_frame:00000000000067F0                 db  0Eh
.eh_frame:00000000000067F1                 db  18h
.eh_frame:00000000000067F2                 db  41h ; A
.eh_frame:00000000000067F3                 db  0Eh
.eh_frame:00000000000067F4                 db  10h
.eh_frame:00000000000067F5                 db  41h ; A
.eh_frame:00000000000067F6                 db  0Eh
.eh_frame:00000000000067F7                 db    8
.eh_frame:00000000000067F8                 db  41h ; A
.eh_frame:00000000000067F9                 db  0Bh
.eh_frame:00000000000067FA                 db    0
.eh_frame:00000000000067FB                 db    0
.eh_frame:00000000000067FC                 db    0
.eh_frame:00000000000067FD                 db    0
.eh_frame:00000000000067FE                 db    0
.eh_frame:00000000000067FF                 db    0
.eh_frame:0000000000006800                 db  10h
.eh_frame:0000000000006801                 db    0
.eh_frame:0000000000006802                 db    0
.eh_frame:0000000000006803                 db    0
.eh_frame:0000000000006804                 db  6Ch ; l
.eh_frame:0000000000006805                 db    1
.eh_frame:0000000000006806                 db    0
.eh_frame:0000000000006807                 db    0
.eh_frame:0000000000006808                 db  18h
.eh_frame:0000000000006809                 db 0C2h
.eh_frame:000000000000680A                 db 0FFh
.eh_frame:000000000000680B                 db 0FFh
.eh_frame:000000000000680C                 db    5
.eh_frame:000000000000680D                 db    0
.eh_frame:000000000000680E                 db    0
.eh_frame:000000000000680F                 db    0
.eh_frame:0000000000006810                 db    0
.eh_frame:0000000000006811                 db    0
.eh_frame:0000000000006812                 db    0
.eh_frame:0000000000006813                 db    0
.eh_frame:0000000000006814                 db  18h
.eh_frame:0000000000006815                 db    0
.eh_frame:0000000000006816                 db    0
.eh_frame:0000000000006817                 db    0
.eh_frame:0000000000006818                 db  80h
.eh_frame:0000000000006819                 db    1
.eh_frame:000000000000681A                 db    0
.eh_frame:000000000000681B                 db    0
.eh_frame:000000000000681C                 db  14h
.eh_frame:000000000000681D                 db 0C2h
.eh_frame:000000000000681E                 db 0FFh
.eh_frame:000000000000681F                 db 0FFh
.eh_frame:0000000000006820                 db  22h ; "
.eh_frame:0000000000006821                 db    0
.eh_frame:0000000000006822                 db    0
.eh_frame:0000000000006823                 db    0
.eh_frame:0000000000006824                 db    0
.eh_frame:0000000000006825                 db  46h ; F
.eh_frame:0000000000006826                 db  0Eh
.eh_frame:0000000000006827                 db  10h
.eh_frame:0000000000006828                 db  83h
.eh_frame:0000000000006829                 db    2
.eh_frame:000000000000682A                 db  4Eh ; N
.eh_frame:000000000000682B                 db 0C3h
.eh_frame:000000000000682C                 db  0Eh
.eh_frame:000000000000682D                 db    8
.eh_frame:000000000000682E                 db    0
.eh_frame:000000000000682F                 db    0
.eh_frame:0000000000006830                 db  4Ch ; L
.eh_frame:0000000000006831                 db    0
.eh_frame:0000000000006832                 db    0
.eh_frame:0000000000006833                 db    0
.eh_frame:0000000000006834                 db  9Ch
.eh_frame:0000000000006835                 db    1
.eh_frame:0000000000006836                 db    0
.eh_frame:0000000000006837                 db    0
.eh_frame:0000000000006838                 db  28h ; (
.eh_frame:0000000000006839                 db 0C2h
.eh_frame:000000000000683A                 db 0FFh
.eh_frame:000000000000683B                 db 0FFh
.eh_frame:000000000000683C                 db  76h ; v
.eh_frame:000000000000683D                 db    0
.eh_frame:000000000000683E                 db    0
.eh_frame:000000000000683F                 db    0
.eh_frame:0000000000006840                 db    0
.eh_frame:0000000000006841                 db  42h ; B
.eh_frame:0000000000006842                 db  0Eh
.eh_frame:0000000000006843                 db  10h
.eh_frame:0000000000006844                 db  8Dh
.eh_frame:0000000000006845                 db    2
.eh_frame:0000000000006846                 db  42h ; B
.eh_frame:0000000000006847                 db  0Eh
.eh_frame:0000000000006848                 db  18h
.eh_frame:0000000000006849                 db  8Ch
.eh_frame:000000000000684A                 db    3
.eh_frame:000000000000684B                 db  41h ; A
.eh_frame:000000000000684C                 db  0Eh
.eh_frame:000000000000684D                 db  20h
.eh_frame:000000000000684E                 db  86h
.eh_frame:000000000000684F                 db    4
.eh_frame:0000000000006850                 db  41h ; A
.eh_frame:0000000000006851                 db  0Eh
.eh_frame:0000000000006852                 db  28h ; (
.eh_frame:0000000000006853                 db  83h
.eh_frame:0000000000006854                 db    5
.eh_frame:0000000000006855                 db  44h ; D
.eh_frame:0000000000006856                 db  0Eh
.eh_frame:0000000000006857                 db  30h ; 0
.eh_frame:0000000000006858                 db  7Eh ; ~
.eh_frame:0000000000006859                 db  0Ah
.eh_frame:000000000000685A                 db  0Eh
.eh_frame:000000000000685B                 db  28h ; (
.eh_frame:000000000000685C                 db  44h ; D
.eh_frame:000000000000685D                 db  0Eh
.eh_frame:000000000000685E                 db  20h
.eh_frame:000000000000685F                 db  41h ; A
.eh_frame:0000000000006860                 db  0Eh
.eh_frame:0000000000006861                 db  18h
.eh_frame:0000000000006862                 db  42h ; B
.eh_frame:0000000000006863                 db  0Eh
.eh_frame:0000000000006864                 db  10h
.eh_frame:0000000000006865                 db  42h ; B
.eh_frame:0000000000006866                 db  0Eh
.eh_frame:0000000000006867                 db    8
.eh_frame:0000000000006868                 db  47h ; G
.eh_frame:0000000000006869                 db  0Bh
.eh_frame:000000000000686A                 db  4Fh ; O
.eh_frame:000000000000686B                 db  0Ah
.eh_frame:000000000000686C                 db  0Eh
.eh_frame:000000000000686D                 db  28h ; (
.eh_frame:000000000000686E                 db  44h ; D
.eh_frame:000000000000686F                 db  0Eh
.eh_frame:0000000000006870                 db  20h
.eh_frame:0000000000006871                 db  41h ; A
.eh_frame:0000000000006872                 db  0Eh
.eh_frame:0000000000006873                 db  18h
.eh_frame:0000000000006874                 db  42h ; B
.eh_frame:0000000000006875                 db  0Eh
.eh_frame:0000000000006876                 db  10h
.eh_frame:0000000000006877                 db  42h ; B
.eh_frame:0000000000006878                 db  0Eh
.eh_frame:0000000000006879                 db    8
.eh_frame:000000000000687A                 db  41h ; A
.eh_frame:000000000000687B                 db  0Bh
.eh_frame:000000000000687C                 db    0
.eh_frame:000000000000687D                 db    0
.eh_frame:000000000000687E                 db    0
.eh_frame:000000000000687F                 db    0
.eh_frame:0000000000006880                 db  1Ch
.eh_frame:0000000000006881                 db    0
.eh_frame:0000000000006882                 db    0
.eh_frame:0000000000006883                 db    0
.eh_frame:0000000000006884                 db 0ECh
.eh_frame:0000000000006885                 db    1
.eh_frame:0000000000006886                 db    0
.eh_frame:0000000000006887                 db    0
.eh_frame:0000000000006888                 db  58h ; X
.eh_frame:0000000000006889                 db 0C2h
.eh_frame:000000000000688A                 db 0FFh
.eh_frame:000000000000688B                 db 0FFh
.eh_frame:000000000000688C                 db  9Fh
.eh_frame:000000000000688D                 db    0
.eh_frame:000000000000688E                 db    0
.eh_frame:000000000000688F                 db    0
.eh_frame:0000000000006890                 db    0
.eh_frame:0000000000006891                 db  44h ; D
.eh_frame:0000000000006892                 db  0Eh
.eh_frame:0000000000006893                 db  10h
.eh_frame:0000000000006894                 db  83h
.eh_frame:0000000000006895                 db    2
.eh_frame:0000000000006896                 db    2
.eh_frame:0000000000006897                 db  78h ; x
.eh_frame:0000000000006898                 db  0Ah
.eh_frame:0000000000006899                 db  0Eh
.eh_frame:000000000000689A                 db    8
.eh_frame:000000000000689B                 db  41h ; A
.eh_frame:000000000000689C                 db  0Bh
.eh_frame:000000000000689D                 db    0
.eh_frame:000000000000689E                 db    0
.eh_frame:000000000000689F                 db    0
.eh_frame:00000000000068A0                 db  40h ; @
.eh_frame:00000000000068A1                 db    0
.eh_frame:00000000000068A2                 db    0
.eh_frame:00000000000068A3                 db    0
.eh_frame:00000000000068A4                 db  0Ch
.eh_frame:00000000000068A5                 db    2
.eh_frame:00000000000068A6                 db    0
.eh_frame:00000000000068A7                 db    0
.eh_frame:00000000000068A8                 db 0D8h
.eh_frame:00000000000068A9                 db 0C2h
.eh_frame:00000000000068AA                 db 0FFh
.eh_frame:00000000000068AB                 db 0FFh
.eh_frame:00000000000068AC                 db 0E7h
.eh_frame:00000000000068AD                 db    0
.eh_frame:00000000000068AE                 db    0
.eh_frame:00000000000068AF                 db    0
.eh_frame:00000000000068B0                 db    0
.eh_frame:00000000000068B1                 db  41h ; A
.eh_frame:00000000000068B2                 db  0Eh
.eh_frame:00000000000068B3                 db  10h
.eh_frame:00000000000068B4                 db  86h
.eh_frame:00000000000068B5                 db    2
.eh_frame:00000000000068B6                 db  41h ; A
.eh_frame:00000000000068B7                 db  0Eh
.eh_frame:00000000000068B8                 db  18h
.eh_frame:00000000000068B9                 db  83h
.eh_frame:00000000000068BA                 db    3
.eh_frame:00000000000068BB                 db  49h ; I
.eh_frame:00000000000068BC                 db  0Eh
.eh_frame:00000000000068BD                 db  20h
.eh_frame:00000000000068BE                 db  6Eh ; n
.eh_frame:00000000000068BF                 db  0Ah
.eh_frame:00000000000068C0                 db  0Eh
.eh_frame:00000000000068C1                 db  18h
.eh_frame:00000000000068C2                 db  41h ; A
.eh_frame:00000000000068C3                 db  0Eh
.eh_frame:00000000000068C4                 db  10h
.eh_frame:00000000000068C5                 db  41h ; A
.eh_frame:00000000000068C6                 db  0Eh
.eh_frame:00000000000068C7                 db    8
.eh_frame:00000000000068C8                 db  45h ; E
.eh_frame:00000000000068C9                 db  0Bh
.eh_frame:00000000000068CA                 db    2
.eh_frame:00000000000068CB                 db  4Ah ; J
.eh_frame:00000000000068CC                 db  0Ah
.eh_frame:00000000000068CD                 db  0Eh
.eh_frame:00000000000068CE                 db  18h
.eh_frame:00000000000068CF                 db  41h ; A
.eh_frame:00000000000068D0                 db  0Eh
.eh_frame:00000000000068D1                 db  10h
.eh_frame:00000000000068D2                 db  41h ; A
.eh_frame:00000000000068D3                 db  0Eh
.eh_frame:00000000000068D4                 db    8
.eh_frame:00000000000068D5                 db  44h ; D
.eh_frame:00000000000068D6                 db  0Bh
.eh_frame:00000000000068D7                 db    2
.eh_frame:00000000000068D8                 db  54h ; T
.eh_frame:00000000000068D9                 db  0Eh
.eh_frame:00000000000068DA                 db  18h
.eh_frame:00000000000068DB                 db  41h ; A
.eh_frame:00000000000068DC                 db  0Eh
.eh_frame:00000000000068DD                 db  10h
.eh_frame:00000000000068DE                 db  41h ; A
.eh_frame:00000000000068DF                 db  0Eh
.eh_frame:00000000000068E0                 db    8
.eh_frame:00000000000068E1                 db    0
.eh_frame:00000000000068E2                 db    0
.eh_frame:00000000000068E3                 db    0
.eh_frame:00000000000068E4                 db  74h ; t
.eh_frame:00000000000068E5                 db    0
.eh_frame:00000000000068E6                 db    0
.eh_frame:00000000000068E7                 db    0
.eh_frame:00000000000068E8                 db  50h ; P
.eh_frame:00000000000068E9                 db    2
.eh_frame:00000000000068EA                 db    0
.eh_frame:00000000000068EB                 db    0
.eh_frame:00000000000068EC                 db  84h
.eh_frame:00000000000068ED                 db 0C3h
.eh_frame:00000000000068EE                 db 0FFh
.eh_frame:00000000000068EF                 db 0FFh
.eh_frame:00000000000068F0                 db  34h ; 4
.eh_frame:00000000000068F1                 db  12h
.eh_frame:00000000000068F2                 db    0
.eh_frame:00000000000068F3                 db    0
.eh_frame:00000000000068F4                 db    0
.eh_frame:00000000000068F5                 db  42h ; B
.eh_frame:00000000000068F6                 db  0Eh
.eh_frame:00000000000068F7                 db  10h
.eh_frame:00000000000068F8                 db  8Fh
.eh_frame:00000000000068F9                 db    2
.eh_frame:00000000000068FA                 db  42h ; B
.eh_frame:00000000000068FB                 db  0Eh
.eh_frame:00000000000068FC                 db  18h
.eh_frame:00000000000068FD                 db  8Eh
.eh_frame:00000000000068FE                 db    3
.eh_frame:00000000000068FF                 db  45h ; E
.eh_frame:0000000000006900                 db  0Eh
.eh_frame:0000000000006901                 db  20h
.eh_frame:0000000000006902                 db  8Dh
.eh_frame:0000000000006903                 db    4
.eh_frame:0000000000006904                 db  42h ; B
.eh_frame:0000000000006905                 db  0Eh
.eh_frame:0000000000006906                 db  28h ; (
.eh_frame:0000000000006907                 db  8Ch
.eh_frame:0000000000006908                 db    5
.eh_frame:0000000000006909                 db  44h ; D
.eh_frame:000000000000690A                 db  0Eh
.eh_frame:000000000000690B                 db  30h ; 0
.eh_frame:000000000000690C                 db  86h
.eh_frame:000000000000690D                 db    6
.eh_frame:000000000000690E                 db  41h ; A
.eh_frame:000000000000690F                 db  0Eh
.eh_frame:0000000000006910                 db  38h ; 8
.eh_frame:0000000000006911                 db  83h
.eh_frame:0000000000006912                 db    7
.eh_frame:0000000000006913                 db  53h ; S
.eh_frame:0000000000006914                 db  0Eh
.eh_frame:0000000000006915                 db 0F0h
.eh_frame:0000000000006916                 db    1
.eh_frame:0000000000006917                 db    3
.eh_frame:0000000000006918                 db  81h
.eh_frame:0000000000006919                 db  0Bh
.eh_frame:000000000000691A                 db  0Eh
.eh_frame:000000000000691B                 db 0F8h
.eh_frame:000000000000691C                 db    1
.eh_frame:000000000000691D                 db  4Ah ; J
.eh_frame:000000000000691E                 db  0Eh
.eh_frame:000000000000691F                 db  80h
.eh_frame:0000000000006920                 db    2
.eh_frame:0000000000006921                 db  44h ; D
.eh_frame:0000000000006922                 db  0Eh
.eh_frame:0000000000006923                 db  88h
.eh_frame:0000000000006924                 db    2
.eh_frame:0000000000006925                 db  45h ; E
.eh_frame:0000000000006926                 db  0Eh
.eh_frame:0000000000006927                 db  90h
.eh_frame:0000000000006928                 db    2
.eh_frame:0000000000006929                 db  5Fh ; _
.eh_frame:000000000000692A                 db  0Eh
.eh_frame:000000000000692B                 db 0F0h
.eh_frame:000000000000692C                 db    1
.eh_frame:000000000000692D                 db  64h ; d
.eh_frame:000000000000692E                 db  0Ah
.eh_frame:000000000000692F                 db  0Eh
.eh_frame:0000000000006930                 db  38h ; 8
.eh_frame:0000000000006931                 db  41h ; A
.eh_frame:0000000000006932                 db  0Eh
.eh_frame:0000000000006933                 db  30h ; 0
.eh_frame:0000000000006934                 db  41h ; A
.eh_frame:0000000000006935                 db  0Eh
.eh_frame:0000000000006936                 db  28h ; (
.eh_frame:0000000000006937                 db  42h ; B
.eh_frame:0000000000006938                 db  0Eh
.eh_frame:0000000000006939                 db  20h
.eh_frame:000000000000693A                 db  42h ; B
.eh_frame:000000000000693B                 db  0Eh
.eh_frame:000000000000693C                 db  18h
.eh_frame:000000000000693D                 db  42h ; B
.eh_frame:000000000000693E                 db  0Eh
.eh_frame:000000000000693F                 db  10h
.eh_frame:0000000000006940                 db  42h ; B
.eh_frame:0000000000006941                 db  0Eh
.eh_frame:0000000000006942                 db    8
.eh_frame:0000000000006943                 db  44h ; D
.eh_frame:0000000000006944                 db  0Bh
.eh_frame:0000000000006945                 db    3
.eh_frame:0000000000006946                 db  99h
.eh_frame:0000000000006947                 db    5
.eh_frame:0000000000006948                 db  0Eh
.eh_frame:0000000000006949                 db 0F8h
.eh_frame:000000000000694A                 db    1
.eh_frame:000000000000694B                 db  4Dh ; M
.eh_frame:000000000000694C                 db  0Eh
.eh_frame:000000000000694D                 db  80h
.eh_frame:000000000000694E                 db    2
.eh_frame:000000000000694F                 db  44h ; D
.eh_frame:0000000000006950                 db  0Eh
.eh_frame:0000000000006951                 db  88h
.eh_frame:0000000000006952                 db    2
.eh_frame:0000000000006953                 db  47h ; G
.eh_frame:0000000000006954                 db  0Eh
.eh_frame:0000000000006955                 db  90h
.eh_frame:0000000000006956                 db    2
.eh_frame:0000000000006957                 db  5Bh ; [
.eh_frame:0000000000006958                 db  0Eh
.eh_frame:0000000000006959                 db 0F0h
.eh_frame:000000000000695A                 db    1
.eh_frame:000000000000695B                 db    0
.eh_frame:000000000000695C                 db  68h ; h
.eh_frame:000000000000695D                 db    0
.eh_frame:000000000000695E                 db    0
.eh_frame:000000000000695F                 db    0
.eh_frame:0000000000006960                 db 0C8h
.eh_frame:0000000000006961                 db    2
.eh_frame:0000000000006962                 db    0
.eh_frame:0000000000006963                 db    0
.eh_frame:0000000000006964                 db  4Ch ; L
.eh_frame:0000000000006965                 db 0D5h
.eh_frame:0000000000006966                 db 0FFh
.eh_frame:0000000000006967                 db 0FFh
.eh_frame:0000000000006968                 db 0ABh
.eh_frame:0000000000006969                 db    1
.eh_frame:000000000000696A                 db    0
.eh_frame:000000000000696B                 db    0
.eh_frame:000000000000696C                 db    0
.eh_frame:000000000000696D                 db  42h ; B
.eh_frame:000000000000696E                 db  0Eh
.eh_frame:000000000000696F                 db  10h
.eh_frame:0000000000006970                 db  8Fh
.eh_frame:0000000000006971                 db    2
.eh_frame:0000000000006972                 db  42h ; B
.eh_frame:0000000000006973                 db  0Eh
.eh_frame:0000000000006974                 db  18h
.eh_frame:0000000000006975                 db  8Eh
.eh_frame:0000000000006976                 db    3
.eh_frame:0000000000006977                 db  45h ; E
.eh_frame:0000000000006978                 db  0Eh
.eh_frame:0000000000006979                 db  20h
.eh_frame:000000000000697A                 db  8Dh
.eh_frame:000000000000697B                 db    4
.eh_frame:000000000000697C                 db  42h ; B
.eh_frame:000000000000697D                 db  0Eh
.eh_frame:000000000000697E                 db  28h ; (
.eh_frame:000000000000697F                 db  8Ch
.eh_frame:0000000000006980                 db    5
.eh_frame:0000000000006981                 db  44h ; D
.eh_frame:0000000000006982                 db  0Eh
.eh_frame:0000000000006983                 db  30h ; 0
.eh_frame:0000000000006984                 db  86h
.eh_frame:0000000000006985                 db    6
.eh_frame:0000000000006986                 db  41h ; A
.eh_frame:0000000000006987                 db  0Eh
.eh_frame:0000000000006988                 db  38h ; 8
.eh_frame:0000000000006989                 db  83h
.eh_frame:000000000000698A                 db    7
.eh_frame:000000000000698B                 db  47h ; G
.eh_frame:000000000000698C                 db  0Eh
.eh_frame:000000000000698D                 db  60h ; `
.eh_frame:000000000000698E                 db    2
.eh_frame:000000000000698F                 db  99h
.eh_frame:0000000000006990                 db  0Eh
.eh_frame:0000000000006991                 db  68h ; h
.eh_frame:0000000000006992                 db  5Fh ; _
.eh_frame:0000000000006993                 db  0Eh
.eh_frame:0000000000006994                 db  70h ; p
.eh_frame:0000000000006995                 db  46h ; F
.eh_frame:0000000000006996                 db  0Eh
.eh_frame:0000000000006997                 db  78h ; x
.eh_frame:0000000000006998                 db  42h ; B
.eh_frame:0000000000006999                 db  0Eh
.eh_frame:000000000000699A                 db  80h
.eh_frame:000000000000699B                 db    1
.eh_frame:000000000000699C                 db  59h ; Y
.eh_frame:000000000000699D                 db  0Eh
.eh_frame:000000000000699E                 db  60h ; `
.eh_frame:000000000000699F                 db    2
.eh_frame:00000000000069A0                 db  40h ; @
.eh_frame:00000000000069A1                 db  0Eh
.eh_frame:00000000000069A2                 db  68h ; h
.eh_frame:00000000000069A3                 db  4Bh ; K
.eh_frame:00000000000069A4                 db  0Eh
.eh_frame:00000000000069A5                 db  70h ; p
.eh_frame:00000000000069A6                 db  43h ; C
.eh_frame:00000000000069A7                 db  0Eh
.eh_frame:00000000000069A8                 db  78h ; x
.eh_frame:00000000000069A9                 db  45h ; E
.eh_frame:00000000000069AA                 db  0Eh
.eh_frame:00000000000069AB                 db  80h
.eh_frame:00000000000069AC                 db    1
.eh_frame:00000000000069AD                 db  5Eh ; ^
.eh_frame:00000000000069AE                 db  0Eh
.eh_frame:00000000000069AF                 db  60h ; `
.eh_frame:00000000000069B0                 db  4Ch ; L
.eh_frame:00000000000069B1                 db  0Ah
.eh_frame:00000000000069B2                 db  0Eh
.eh_frame:00000000000069B3                 db  38h ; 8
.eh_frame:00000000000069B4                 db  44h ; D
.eh_frame:00000000000069B5                 db  0Eh
.eh_frame:00000000000069B6                 db  30h ; 0
.eh_frame:00000000000069B7                 db  41h ; A
.eh_frame:00000000000069B8                 db  0Eh
.eh_frame:00000000000069B9                 db  28h ; (
.eh_frame:00000000000069BA                 db  42h ; B
.eh_frame:00000000000069BB                 db  0Eh
.eh_frame:00000000000069BC                 db  20h
.eh_frame:00000000000069BD                 db  42h ; B
.eh_frame:00000000000069BE                 db  0Eh
.eh_frame:00000000000069BF                 db  18h
.eh_frame:00000000000069C0                 db  42h ; B
.eh_frame:00000000000069C1                 db  0Eh
.eh_frame:00000000000069C2                 db  10h
.eh_frame:00000000000069C3                 db  42h ; B
.eh_frame:00000000000069C4                 db  0Eh
.eh_frame:00000000000069C5                 db    8
.eh_frame:00000000000069C6                 db  46h ; F
.eh_frame:00000000000069C7                 db  0Bh
.eh_frame:00000000000069C8                 db  28h ; (
.eh_frame:00000000000069C9                 db    0
.eh_frame:00000000000069CA                 db    0
.eh_frame:00000000000069CB                 db    0
.eh_frame:00000000000069CC                 db  34h ; 4
.eh_frame:00000000000069CD                 db    3
.eh_frame:00000000000069CE                 db    0
.eh_frame:00000000000069CF                 db    0
.eh_frame:00000000000069D0                 db  90h
.eh_frame:00000000000069D1                 db 0D6h
.eh_frame:00000000000069D2                 db 0FFh
.eh_frame:00000000000069D3                 db 0FFh
.eh_frame:00000000000069D4                 db  36h ; 6
.eh_frame:00000000000069D5                 db    0
.eh_frame:00000000000069D6                 db    0
.eh_frame:00000000000069D7                 db    0
.eh_frame:00000000000069D8                 db    0
.eh_frame:00000000000069D9                 db  42h ; B
.eh_frame:00000000000069DA                 db  0Eh
.eh_frame:00000000000069DB                 db  10h
.eh_frame:00000000000069DC                 db  8Ch
.eh_frame:00000000000069DD                 db    2
.eh_frame:00000000000069DE                 db  41h ; A
.eh_frame:00000000000069DF                 db  0Eh
.eh_frame:00000000000069E0                 db  18h
.eh_frame:00000000000069E1                 db  86h
.eh_frame:00000000000069E2                 db    3
.eh_frame:00000000000069E3                 db  41h ; A
.eh_frame:00000000000069E4                 db  0Eh
.eh_frame:00000000000069E5                 db  20h
.eh_frame:00000000000069E6                 db  83h
.eh_frame:00000000000069E7                 db    4
.eh_frame:00000000000069E8                 db  6Eh ; n
.eh_frame:00000000000069E9                 db  0Eh
.eh_frame:00000000000069EA                 db  18h
.eh_frame:00000000000069EB                 db  41h ; A
.eh_frame:00000000000069EC                 db  0Eh
.eh_frame:00000000000069ED                 db  10h
.eh_frame:00000000000069EE                 db  42h ; B
.eh_frame:00000000000069EF                 db  0Eh
.eh_frame:00000000000069F0                 db    8
.eh_frame:00000000000069F1                 db    0
.eh_frame:00000000000069F2                 db    0
.eh_frame:00000000000069F3                 db    0
.eh_frame:00000000000069F4                 db  10h
.eh_frame:00000000000069F5                 db    0
.eh_frame:00000000000069F6                 db    0
.eh_frame:00000000000069F7                 db    0
.eh_frame:00000000000069F8                 db  60h ; `
.eh_frame:00000000000069F9                 db    3
.eh_frame:00000000000069FA                 db    0
.eh_frame:00000000000069FB                 db    0
.eh_frame:00000000000069FC                 db 0A4h
.eh_frame:00000000000069FD                 db 0D6h
.eh_frame:00000000000069FE                 db 0FFh
.eh_frame:00000000000069FF                 db 0FFh
.eh_frame:0000000000006A00                 db  11h
.eh_frame:0000000000006A01                 db    0
.eh_frame:0000000000006A02                 db    0
.eh_frame:0000000000006A03                 db    0
.eh_frame:0000000000006A04                 db    0
.eh_frame:0000000000006A05                 db    0
.eh_frame:0000000000006A06                 db    0
.eh_frame:0000000000006A07                 db    0
.eh_frame:0000000000006A08                 db  10h
.eh_frame:0000000000006A09                 db    0
.eh_frame:0000000000006A0A                 db    0
.eh_frame:0000000000006A0B                 db    0
.eh_frame:0000000000006A0C                 db  74h ; t
.eh_frame:0000000000006A0D                 db    3
.eh_frame:0000000000006A0E                 db    0
.eh_frame:0000000000006A0F                 db    0
.eh_frame:0000000000006A10                 db 0B0h
.eh_frame:0000000000006A11                 db 0D6h
.eh_frame:0000000000006A12                 db 0FFh
.eh_frame:0000000000006A13                 db 0FFh
.eh_frame:0000000000006A14                 db  11h
.eh_frame:0000000000006A15                 db    0
.eh_frame:0000000000006A16                 db    0
.eh_frame:0000000000006A17                 db    0
.eh_frame:0000000000006A18                 db    0
.eh_frame:0000000000006A19                 db    0
.eh_frame:0000000000006A1A                 db    0
.eh_frame:0000000000006A1B                 db    0
.eh_frame:0000000000006A1C                 db  10h
.eh_frame:0000000000006A1D                 db    0
.eh_frame:0000000000006A1E                 db    0
.eh_frame:0000000000006A1F                 db    0
.eh_frame:0000000000006A20                 db  88h
.eh_frame:0000000000006A21                 db    3
.eh_frame:0000000000006A22                 db    0
.eh_frame:0000000000006A23                 db    0
.eh_frame:0000000000006A24                 db 0BCh
.eh_frame:0000000000006A25                 db 0D6h
.eh_frame:0000000000006A26                 db 0FFh
.eh_frame:0000000000006A27                 db 0FFh
.eh_frame:0000000000006A28                 db  35h ; 5
.eh_frame:0000000000006A29                 db    0
.eh_frame:0000000000006A2A                 db    0
.eh_frame:0000000000006A2B                 db    0
.eh_frame:0000000000006A2C                 db    0
.eh_frame:0000000000006A2D                 db    0
.eh_frame:0000000000006A2E                 db    0
.eh_frame:0000000000006A2F                 db    0
.eh_frame:0000000000006A30                 db  10h
.eh_frame:0000000000006A31                 db    0
.eh_frame:0000000000006A32                 db    0
.eh_frame:0000000000006A33                 db    0
.eh_frame:0000000000006A34                 db  9Ch
.eh_frame:0000000000006A35                 db    3
.eh_frame:0000000000006A36                 db    0
.eh_frame:0000000000006A37                 db    0
.eh_frame:0000000000006A38                 db 0E8h
.eh_frame:0000000000006A39                 db 0D6h
.eh_frame:0000000000006A3A                 db 0FFh
.eh_frame:0000000000006A3B                 db 0FFh
.eh_frame:0000000000006A3C                 db  15h
.eh_frame:0000000000006A3D                 db    0
.eh_frame:0000000000006A3E                 db    0
.eh_frame:0000000000006A3F                 db    0
.eh_frame:0000000000006A40                 db    0
.eh_frame:0000000000006A41                 db    0
.eh_frame:0000000000006A42                 db    0
.eh_frame:0000000000006A43                 db    0
.eh_frame:0000000000006A44                 db  10h
.eh_frame:0000000000006A45                 db    0
.eh_frame:0000000000006A46                 db    0
.eh_frame:0000000000006A47                 db    0
.eh_frame:0000000000006A48                 db 0B0h
.eh_frame:0000000000006A49                 db    3
.eh_frame:0000000000006A4A                 db    0
.eh_frame:0000000000006A4B                 db    0
.eh_frame:0000000000006A4C                 db 0F4h
.eh_frame:0000000000006A4D                 db 0D6h
.eh_frame:0000000000006A4E                 db 0FFh
.eh_frame:0000000000006A4F                 db 0FFh
.eh_frame:0000000000006A50                 db  30h ; 0
.eh_frame:0000000000006A51                 db    0
.eh_frame:0000000000006A52                 db    0
.eh_frame:0000000000006A53                 db    0
.eh_frame:0000000000006A54                 db    0
.eh_frame:0000000000006A55                 db  6Bh ; k
.eh_frame:0000000000006A56                 db  0Eh
.eh_frame:0000000000006A57                 db  10h
.eh_frame:0000000000006A58                 db  50h ; P
.eh_frame:0000000000006A59                 db    0
.eh_frame:0000000000006A5A                 db    0
.eh_frame:0000000000006A5B                 db    0
.eh_frame:0000000000006A5C                 db 0C4h
.eh_frame:0000000000006A5D                 db    3
.eh_frame:0000000000006A5E                 db    0
.eh_frame:0000000000006A5F                 db    0
.eh_frame:0000000000006A60                 db  10h
.eh_frame:0000000000006A61                 db 0D7h
.eh_frame:0000000000006A62                 db 0FFh
.eh_frame:0000000000006A63                 db 0FFh
.eh_frame:0000000000006A64                 db  74h ; t
.eh_frame:0000000000006A65                 db    0
.eh_frame:0000000000006A66                 db    0
.eh_frame:0000000000006A67                 db    0
.eh_frame:0000000000006A68                 db    0
.eh_frame:0000000000006A69                 db  42h ; B
.eh_frame:0000000000006A6A                 db  0Eh
.eh_frame:0000000000006A6B                 db  10h
.eh_frame:0000000000006A6C                 db  8Fh
.eh_frame:0000000000006A6D                 db    2
.eh_frame:0000000000006A6E                 db  42h ; B
.eh_frame:0000000000006A6F                 db  0Eh
.eh_frame:0000000000006A70                 db  18h
.eh_frame:0000000000006A71                 db  8Eh
.eh_frame:0000000000006A72                 db    3
.eh_frame:0000000000006A73                 db  49h ; I
.eh_frame:0000000000006A74                 db  0Eh
.eh_frame:0000000000006A75                 db  20h
.eh_frame:0000000000006A76                 db  8Dh
.eh_frame:0000000000006A77                 db    4
.eh_frame:0000000000006A78                 db  42h ; B
.eh_frame:0000000000006A79                 db  0Eh
.eh_frame:0000000000006A7A                 db  28h ; (
.eh_frame:0000000000006A7B                 db  8Ch
.eh_frame:0000000000006A7C                 db    5
.eh_frame:0000000000006A7D                 db  44h ; D
.eh_frame:0000000000006A7E                 db  0Eh
.eh_frame:0000000000006A7F                 db  30h ; 0
.eh_frame:0000000000006A80                 db  86h
.eh_frame:0000000000006A81                 db    6
.eh_frame:0000000000006A82                 db  41h ; A
.eh_frame:0000000000006A83                 db  0Eh
.eh_frame:0000000000006A84                 db  38h ; 8
.eh_frame:0000000000006A85                 db  83h
.eh_frame:0000000000006A86                 db    7
.eh_frame:0000000000006A87                 db  4Dh ; M
.eh_frame:0000000000006A88                 db  0Eh
.eh_frame:0000000000006A89                 db  50h ; P
.eh_frame:0000000000006A8A                 db  5Fh ; _
.eh_frame:0000000000006A8B                 db  0Eh
.eh_frame:0000000000006A8C                 db  58h ; X
.eh_frame:0000000000006A8D                 db  47h ; G
.eh_frame:0000000000006A8E                 db  0Eh
.eh_frame:0000000000006A8F                 db  60h ; `
.eh_frame:0000000000006A90                 db  46h ; F
.eh_frame:0000000000006A91                 db  0Eh
.eh_frame:0000000000006A92                 db  68h ; h
.eh_frame:0000000000006A93                 db  44h ; D
.eh_frame:0000000000006A94                 db  0Eh
.eh_frame:0000000000006A95                 db  70h ; p
.eh_frame:0000000000006A96                 db  58h ; X
.eh_frame:0000000000006A97                 db  0Eh
.eh_frame:0000000000006A98                 db  38h ; 8
.eh_frame:0000000000006A99                 db  41h ; A
.eh_frame:0000000000006A9A                 db  0Eh
.eh_frame:0000000000006A9B                 db  30h ; 0
.eh_frame:0000000000006A9C                 db  41h ; A
.eh_frame:0000000000006A9D                 db  0Eh
.eh_frame:0000000000006A9E                 db  28h ; (
.eh_frame:0000000000006A9F                 db  42h ; B
.eh_frame:0000000000006AA0                 db  0Eh
.eh_frame:0000000000006AA1                 db  20h
.eh_frame:0000000000006AA2                 db  42h ; B
.eh_frame:0000000000006AA3                 db  0Eh
.eh_frame:0000000000006AA4                 db  18h
.eh_frame:0000000000006AA5                 db  42h ; B
.eh_frame:0000000000006AA6                 db  0Eh
.eh_frame:0000000000006AA7                 db  10h
.eh_frame:0000000000006AA8                 db  42h ; B
.eh_frame:0000000000006AA9                 db  0Eh
.eh_frame:0000000000006AAA                 db    8
.eh_frame:0000000000006AAB                 db    0
.eh_frame:0000000000006AAC                 db  68h ; h
.eh_frame:0000000000006AAD                 db    0
.eh_frame:0000000000006AAE                 db    0
.eh_frame:0000000000006AAF                 db    0
.eh_frame:0000000000006AB0                 db  18h
.eh_frame:0000000000006AB1                 db    4
.eh_frame:0000000000006AB2                 db    0
.eh_frame:0000000000006AB3                 db    0
.eh_frame:0000000000006AB4                 db  3Ch ; <
.eh_frame:0000000000006AB5                 db 0D7h
.eh_frame:0000000000006AB6                 db 0FFh
.eh_frame:0000000000006AB7                 db 0FFh
.eh_frame:0000000000006AB8                 db 0E3h
.eh_frame:0000000000006AB9                 db    0
.eh_frame:0000000000006ABA                 db    0
.eh_frame:0000000000006ABB                 db    0
.eh_frame:0000000000006ABC                 db    0
.eh_frame:0000000000006ABD                 db  42h ; B
.eh_frame:0000000000006ABE                 db  0Eh
.eh_frame:0000000000006ABF                 db  10h
.eh_frame:0000000000006AC0                 db  8Fh
.eh_frame:0000000000006AC1                 db    2
.eh_frame:0000000000006AC2                 db  42h ; B
.eh_frame:0000000000006AC3                 db  0Eh
.eh_frame:0000000000006AC4                 db  18h
.eh_frame:0000000000006AC5                 db  8Eh
.eh_frame:0000000000006AC6                 db    3
.eh_frame:0000000000006AC7                 db  49h ; I
.eh_frame:0000000000006AC8                 db  0Eh
.eh_frame:0000000000006AC9                 db  20h
.eh_frame:0000000000006ACA                 db  8Dh
.eh_frame:0000000000006ACB                 db    4
.eh_frame:0000000000006ACC                 db  42h ; B
.eh_frame:0000000000006ACD                 db  0Eh
.eh_frame:0000000000006ACE                 db  28h ; (
.eh_frame:0000000000006ACF                 db  8Ch
.eh_frame:0000000000006AD0                 db    5
.eh_frame:0000000000006AD1                 db  44h ; D
.eh_frame:0000000000006AD2                 db  0Eh
.eh_frame:0000000000006AD3                 db  30h ; 0
.eh_frame:0000000000006AD4                 db  86h
.eh_frame:0000000000006AD5                 db    6
.eh_frame:0000000000006AD6                 db  41h ; A
.eh_frame:0000000000006AD7                 db  0Eh
.eh_frame:0000000000006AD8                 db  38h ; 8
.eh_frame:0000000000006AD9                 db  83h
.eh_frame:0000000000006ADA                 db    7
.eh_frame:0000000000006ADB                 db  4Dh ; M
.eh_frame:0000000000006ADC                 db  0Eh
.eh_frame:0000000000006ADD                 db  70h ; p
.eh_frame:0000000000006ADE                 db  65h ; e
.eh_frame:0000000000006ADF                 db  0Eh
.eh_frame:0000000000006AE0                 db  78h ; x
.eh_frame:0000000000006AE1                 db  4Dh ; M
.eh_frame:0000000000006AE2                 db  0Eh
.eh_frame:0000000000006AE3                 db  80h
.eh_frame:0000000000006AE4                 db    1
.eh_frame:0000000000006AE5                 db  46h ; F
.eh_frame:0000000000006AE6                 db  0Eh
.eh_frame:0000000000006AE7                 db  88h
.eh_frame:0000000000006AE8                 db    1
.eh_frame:0000000000006AE9                 db  42h ; B
.eh_frame:0000000000006AEA                 db  0Eh
.eh_frame:0000000000006AEB                 db  90h
.eh_frame:0000000000006AEC                 db    1
.eh_frame:0000000000006AED                 db  5Eh ; ^
.eh_frame:0000000000006AEE                 db  0Eh
.eh_frame:0000000000006AEF                 db  70h ; p
.eh_frame:0000000000006AF0                 db  56h ; V
.eh_frame:0000000000006AF1                 db  0Eh
.eh_frame:0000000000006AF2                 db  78h ; x
.eh_frame:0000000000006AF3                 db  43h ; C
.eh_frame:0000000000006AF4                 db  0Eh
.eh_frame:0000000000006AF5                 db  80h
.eh_frame:0000000000006AF6                 db    1
.eh_frame:0000000000006AF7                 db  43h ; C
.eh_frame:0000000000006AF8                 db  0Eh
.eh_frame:0000000000006AF9                 db  88h
.eh_frame:0000000000006AFA                 db    1
.eh_frame:0000000000006AFB                 db  56h ; V
.eh_frame:0000000000006AFC                 db  0Eh
.eh_frame:0000000000006AFD                 db  90h
.eh_frame:0000000000006AFE                 db    1
.eh_frame:0000000000006AFF                 db  52h ; R
.eh_frame:0000000000006B00                 db  0Eh
.eh_frame:0000000000006B01                 db  70h ; p
.eh_frame:0000000000006B02                 db  5Bh ; [
.eh_frame:0000000000006B03                 db  0Eh
.eh_frame:0000000000006B04                 db  38h ; 8
.eh_frame:0000000000006B05                 db  41h ; A
.eh_frame:0000000000006B06                 db  0Eh
.eh_frame:0000000000006B07                 db  30h ; 0
.eh_frame:0000000000006B08                 db  41h ; A
.eh_frame:0000000000006B09                 db  0Eh
.eh_frame:0000000000006B0A                 db  28h ; (
.eh_frame:0000000000006B0B                 db  42h ; B
.eh_frame:0000000000006B0C                 db  0Eh
.eh_frame:0000000000006B0D                 db  20h
.eh_frame:0000000000006B0E                 db  42h ; B
.eh_frame:0000000000006B0F                 db  0Eh
.eh_frame:0000000000006B10                 db  18h
.eh_frame:0000000000006B11                 db  42h ; B
.eh_frame:0000000000006B12                 db  0Eh
.eh_frame:0000000000006B13                 db  10h
.eh_frame:0000000000006B14                 db  42h ; B
.eh_frame:0000000000006B15                 db  0Eh
.eh_frame:0000000000006B16                 db    8
.eh_frame:0000000000006B17                 db    0
.eh_frame:0000000000006B18                 db  10h
.eh_frame:0000000000006B19                 db    0
.eh_frame:0000000000006B1A                 db    0
.eh_frame:0000000000006B1B                 db    0
.eh_frame:0000000000006B1C                 db  84h
.eh_frame:0000000000006B1D                 db    4
.eh_frame:0000000000006B1E                 db    0
.eh_frame:0000000000006B1F                 db    0
.eh_frame:0000000000006B20                 db 0C0h
.eh_frame:0000000000006B21                 db 0D7h
.eh_frame:0000000000006B22                 db 0FFh
.eh_frame:0000000000006B23                 db 0FFh
.eh_frame:0000000000006B24                 db  0Ah
.eh_frame:0000000000006B25                 db    0
.eh_frame:0000000000006B26                 db    0
.eh_frame:0000000000006B27                 db    0
.eh_frame:0000000000006B28                 db    0
.eh_frame:0000000000006B29                 db    0
.eh_frame:0000000000006B2A                 db    0
.eh_frame:0000000000006B2B                 db    0
.eh_frame:0000000000006B2C                 db  28h ; (
.eh_frame:0000000000006B2D                 db    0
.eh_frame:0000000000006B2E                 db    0
.eh_frame:0000000000006B2F                 db    0
.eh_frame:0000000000006B30                 db  98h
.eh_frame:0000000000006B31                 db    4
.eh_frame:0000000000006B32                 db    0
.eh_frame:0000000000006B33                 db    0
.eh_frame:0000000000006B34                 db 0BCh
.eh_frame:0000000000006B35                 db 0D7h
.eh_frame:0000000000006B36                 db 0FFh
.eh_frame:0000000000006B37                 db 0FFh
.eh_frame:0000000000006B38                 db  93h
.eh_frame:0000000000006B39                 db    0
.eh_frame:0000000000006B3A                 db    0
.eh_frame:0000000000006B3B                 db    0
.eh_frame:0000000000006B3C                 db    0
.eh_frame:0000000000006B3D                 db  48h ; H
.eh_frame:0000000000006B3E                 db  0Eh
.eh_frame:0000000000006B3F                 db  10h
.eh_frame:0000000000006B40                 db  8Ch
.eh_frame:0000000000006B41                 db    2
.eh_frame:0000000000006B42                 db  48h ; H
.eh_frame:0000000000006B43                 db  0Eh
.eh_frame:0000000000006B44                 db  18h
.eh_frame:0000000000006B45                 db  86h
.eh_frame:0000000000006B46                 db    3
.eh_frame:0000000000006B47                 db  41h ; A
.eh_frame:0000000000006B48                 db  0Eh
.eh_frame:0000000000006B49                 db  20h
.eh_frame:0000000000006B4A                 db  83h
.eh_frame:0000000000006B4B                 db    4
.eh_frame:0000000000006B4C                 db    2
.eh_frame:0000000000006B4D                 db  74h ; t
.eh_frame:0000000000006B4E                 db  0Eh
.eh_frame:0000000000006B4F                 db  18h
.eh_frame:0000000000006B50                 db  4Bh ; K
.eh_frame:0000000000006B51                 db  0Eh
.eh_frame:0000000000006B52                 db  10h
.eh_frame:0000000000006B53                 db  42h ; B
.eh_frame:0000000000006B54                 db  0Eh
.eh_frame:0000000000006B55                 db    8
.eh_frame:0000000000006B56                 db    0
.eh_frame:0000000000006B57                 db    0
.eh_frame:0000000000006B58                 db  10h
.eh_frame:0000000000006B59                 db    0
.eh_frame:0000000000006B5A                 db    0
.eh_frame:0000000000006B5B                 db    0
.eh_frame:0000000000006B5C                 db 0C4h
.eh_frame:0000000000006B5D                 db    4
.eh_frame:0000000000006B5E                 db    0
.eh_frame:0000000000006B5F                 db    0
.eh_frame:0000000000006B60                 db  30h ; 0
.eh_frame:0000000000006B61                 db 0D8h
.eh_frame:0000000000006B62                 db 0FFh
.eh_frame:0000000000006B63                 db 0FFh
.eh_frame:0000000000006B64                 db  13h
.eh_frame:0000000000006B65                 db    0
.eh_frame:0000000000006B66                 db    0
.eh_frame:0000000000006B67                 db    0
.eh_frame:0000000000006B68                 db    0
.eh_frame:0000000000006B69                 db    0
.eh_frame:0000000000006B6A                 db    0
.eh_frame:0000000000006B6B                 db    0
.eh_frame:0000000000006B6C                 db  10h
.eh_frame:0000000000006B6D                 db    0
.eh_frame:0000000000006B6E                 db    0
.eh_frame:0000000000006B6F                 db    0
.eh_frame:0000000000006B70                 db 0D8h
.eh_frame:0000000000006B71                 db    4
.eh_frame:0000000000006B72                 db    0
.eh_frame:0000000000006B73                 db    0
.eh_frame:0000000000006B74                 db  3Ch ; <
.eh_frame:0000000000006B75                 db 0D8h
.eh_frame:0000000000006B76                 db 0FFh
.eh_frame:0000000000006B77                 db 0FFh
.eh_frame:0000000000006B78                 db  0Ch
.eh_frame:0000000000006B79                 db    0
.eh_frame:0000000000006B7A                 db    0
.eh_frame:0000000000006B7B                 db    0
.eh_frame:0000000000006B7C                 db    0
.eh_frame:0000000000006B7D                 db    0
.eh_frame:0000000000006B7E                 db    0
.eh_frame:0000000000006B7F                 db    0
.eh_frame:0000000000006B80                 db  10h
.eh_frame:0000000000006B81                 db    0
.eh_frame:0000000000006B82                 db    0
.eh_frame:0000000000006B83                 db    0
.eh_frame:0000000000006B84                 db 0ECh
.eh_frame:0000000000006B85                 db    4
.eh_frame:0000000000006B86                 db    0
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B88                 db  38h ; 8
.eh_frame:0000000000006B89                 db 0D8h
.eh_frame:0000000000006B8A                 db 0FFh
.eh_frame:0000000000006B8B                 db 0FFh
.eh_frame:0000000000006B8C                 db  18h
.eh_frame:0000000000006B8D                 db    0
.eh_frame:0000000000006B8E                 db    0
.eh_frame:0000000000006B8F                 db    0
.eh_frame:0000000000006B90                 db    0
.eh_frame:0000000000006B91                 db    0
.eh_frame:0000000000006B92                 db    0
.eh_frame:0000000000006B93                 db    0
.eh_frame:0000000000006B94                 db  10h
.eh_frame:0000000000006B95                 db    0
.eh_frame:0000000000006B96                 db    0
.eh_frame:0000000000006B97                 db    0
.eh_frame:0000000000006B98                 db    0
.eh_frame:0000000000006B99                 db    5
.eh_frame:0000000000006B9A                 db    0
.eh_frame:0000000000006B9B                 db    0
.eh_frame:0000000000006B9C                 db  44h ; D
.eh_frame:0000000000006B9D                 db 0D8h
.eh_frame:0000000000006B9E                 db 0FFh
.eh_frame:0000000000006B9F                 db 0FFh
.eh_frame:0000000000006BA0                 db  14h
.eh_frame:0000000000006BA1                 db    0
.eh_frame:0000000000006BA2                 db    0
.eh_frame:0000000000006BA3                 db    0
.eh_frame:0000000000006BA4                 db    0
.eh_frame:0000000000006BA5                 db    0
.eh_frame:0000000000006BA6                 db    0
.eh_frame:0000000000006BA7                 db    0
.eh_frame:0000000000006BA8                 db  18h
.eh_frame:0000000000006BA9                 db    0
.eh_frame:0000000000006BAA                 db    0
.eh_frame:0000000000006BAB                 db    0
.eh_frame:0000000000006BAC                 db  14h
.eh_frame:0000000000006BAD                 db    5
.eh_frame:0000000000006BAE                 db    0
.eh_frame:0000000000006BAF                 db    0
.eh_frame:0000000000006BB0                 db  50h ; P
.eh_frame:0000000000006BB1                 db 0D8h
.eh_frame:0000000000006BB2                 db 0FFh
.eh_frame:0000000000006BB3                 db 0FFh
.eh_frame:0000000000006BB4                 db  8Eh
.eh_frame:0000000000006BB5                 db    0
.eh_frame:0000000000006BB6                 db    0
.eh_frame:0000000000006BB7                 db    0
.eh_frame:0000000000006BB8                 db    0
.eh_frame:0000000000006BB9                 db  44h ; D
.eh_frame:0000000000006BBA                 db  0Eh
.eh_frame:0000000000006BBB                 db  50h ; P
.eh_frame:0000000000006BBC                 db    2
.eh_frame:0000000000006BBD                 db  7Fh ; 
.eh_frame:0000000000006BBE                 db  0Ah
.eh_frame:0000000000006BBF                 db  0Eh
.eh_frame:0000000000006BC0                 db    8
.eh_frame:0000000000006BC1                 db  41h ; A
.eh_frame:0000000000006BC2                 db  0Bh
.eh_frame:0000000000006BC3                 db    0
.eh_frame:0000000000006BC4                 db  18h
.eh_frame:0000000000006BC5                 db    0
.eh_frame:0000000000006BC6                 db    0
.eh_frame:0000000000006BC7                 db    0
.eh_frame:0000000000006BC8                 db  30h ; 0
.eh_frame:0000000000006BC9                 db    5
.eh_frame:0000000000006BCA                 db    0
.eh_frame:0000000000006BCB                 db    0
.eh_frame:0000000000006BCC                 db 0C4h
.eh_frame:0000000000006BCD                 db 0D8h
.eh_frame:0000000000006BCE                 db 0FFh
.eh_frame:0000000000006BCF                 db 0FFh
.eh_frame:0000000000006BD0                 db  8Ah
.eh_frame:0000000000006BD1                 db    0
.eh_frame:0000000000006BD2                 db    0
.eh_frame:0000000000006BD3                 db    0
.eh_frame:0000000000006BD4                 db    0
.eh_frame:0000000000006BD5                 db  44h ; D
.eh_frame:0000000000006BD6                 db  0Eh
.eh_frame:0000000000006BD7                 db  50h ; P
.eh_frame:0000000000006BD8                 db    2
.eh_frame:0000000000006BD9                 db  7Bh ; {
.eh_frame:0000000000006BDA                 db  0Ah
.eh_frame:0000000000006BDB                 db  0Eh
.eh_frame:0000000000006BDC                 db    8
.eh_frame:0000000000006BDD                 db  41h ; A
.eh_frame:0000000000006BDE                 db  0Bh
.eh_frame:0000000000006BDF                 db    0
.eh_frame:0000000000006BE0                 db  10h
.eh_frame:0000000000006BE1                 db    0
.eh_frame:0000000000006BE2                 db    0
.eh_frame:0000000000006BE3                 db    0
.eh_frame:0000000000006BE4                 db  4Ch ; L
.eh_frame:0000000000006BE5                 db    5
.eh_frame:0000000000006BE6                 db    0
.eh_frame:0000000000006BE7                 db    0
.eh_frame:0000000000006BE8                 db  38h ; 8
.eh_frame:0000000000006BE9                 db 0D9h
.eh_frame:0000000000006BEA                 db 0FFh
.eh_frame:0000000000006BEB                 db 0FFh
.eh_frame:0000000000006BEC                 db  0Ch
.eh_frame:0000000000006BED                 db    0
.eh_frame:0000000000006BEE                 db    0
.eh_frame:0000000000006BEF                 db    0
.eh_frame:0000000000006BF0                 db    0
.eh_frame:0000000000006BF1                 db    0
.eh_frame:0000000000006BF2                 db    0
.eh_frame:0000000000006BF3                 db    0
.eh_frame:0000000000006BF4                 db  10h
.eh_frame:0000000000006BF5                 db    0
.eh_frame:0000000000006BF6                 db    0
.eh_frame:0000000000006BF7                 db    0
.eh_frame:0000000000006BF8                 db  60h ; `
.eh_frame:0000000000006BF9                 db    5
.eh_frame:0000000000006BFA                 db    0
.eh_frame:0000000000006BFB                 db    0
.eh_frame:0000000000006BFC                 db  34h ; 4
.eh_frame:0000000000006BFD                 db 0D9h
.eh_frame:0000000000006BFE                 db 0FFh
.eh_frame:0000000000006BFF                 db 0FFh
.eh_frame:0000000000006C00                 db  0Fh
.eh_frame:0000000000006C01                 db    0
.eh_frame:0000000000006C02                 db    0
.eh_frame:0000000000006C03                 db    0
.eh_frame:0000000000006C04                 db    0
.eh_frame:0000000000006C05                 db    0
.eh_frame:0000000000006C06                 db    0
.eh_frame:0000000000006C07                 db    0
.eh_frame:0000000000006C08                 db  18h
.eh_frame:0000000000006C09                 db    0
.eh_frame:0000000000006C0A                 db    0
.eh_frame:0000000000006C0B                 db    0
.eh_frame:0000000000006C0C                 db  74h ; t
.eh_frame:0000000000006C0D                 db    5
.eh_frame:0000000000006C0E                 db    0
.eh_frame:0000000000006C0F                 db    0
.eh_frame:0000000000006C10                 db  30h ; 0
.eh_frame:0000000000006C11                 db 0D9h
.eh_frame:0000000000006C12                 db 0FFh
.eh_frame:0000000000006C13                 db 0FFh
.eh_frame:0000000000006C14                 db  98h
.eh_frame:0000000000006C15                 db    0
.eh_frame:0000000000006C16                 db    0
.eh_frame:0000000000006C17                 db    0
.eh_frame:0000000000006C18                 db    0
.eh_frame:0000000000006C19                 db  44h ; D
.eh_frame:0000000000006C1A                 db  0Eh
.eh_frame:0000000000006C1B                 db  50h ; P
.eh_frame:0000000000006C1C                 db    2
.eh_frame:0000000000006C1D                 db  8Eh
.eh_frame:0000000000006C1E                 db  0Ah
.eh_frame:0000000000006C1F                 db  0Eh
.eh_frame:0000000000006C20                 db    8
.eh_frame:0000000000006C21                 db  41h ; A
.eh_frame:0000000000006C22                 db  0Bh
.eh_frame:0000000000006C23                 db    0
.eh_frame:0000000000006C24                 db  10h
.eh_frame:0000000000006C25                 db    0
.eh_frame:0000000000006C26                 db    0
.eh_frame:0000000000006C27                 db    0
.eh_frame:0000000000006C28                 db  90h
.eh_frame:0000000000006C29                 db    5
.eh_frame:0000000000006C2A                 db    0
.eh_frame:0000000000006C2B                 db    0
.eh_frame:0000000000006C2C                 db 0B4h
.eh_frame:0000000000006C2D                 db 0D9h
.eh_frame:0000000000006C2E                 db 0FFh
.eh_frame:0000000000006C2F                 db 0FFh
.eh_frame:0000000000006C30                 db  10h
.eh_frame:0000000000006C31                 db    0
.eh_frame:0000000000006C32                 db    0
.eh_frame:0000000000006C33                 db    0
.eh_frame:0000000000006C34                 db    0
.eh_frame:0000000000006C35                 db    0
.eh_frame:0000000000006C36                 db    0
.eh_frame:0000000000006C37                 db    0
.eh_frame:0000000000006C38                 db  10h
.eh_frame:0000000000006C39                 db    0
.eh_frame:0000000000006C3A                 db    0
.eh_frame:0000000000006C3B                 db    0
.eh_frame:0000000000006C3C                 db 0A4h
.eh_frame:0000000000006C3D                 db    5
.eh_frame:0000000000006C3E                 db    0
.eh_frame:0000000000006C3F                 db    0
.eh_frame:0000000000006C40                 db 0B0h
.eh_frame:0000000000006C41                 db 0D9h
.eh_frame:0000000000006C42                 db 0FFh
.eh_frame:0000000000006C43                 db 0FFh
.eh_frame:0000000000006C44                 db  11h
.eh_frame:0000000000006C45                 db    0
.eh_frame:0000000000006C46                 db    0
.eh_frame:0000000000006C47                 db    0
.eh_frame:0000000000006C48                 db    0
.eh_frame:0000000000006C49                 db    0
.eh_frame:0000000000006C4A                 db    0
.eh_frame:0000000000006C4B                 db    0
.eh_frame:0000000000006C4C                 db  10h
.eh_frame:0000000000006C4D                 db    0
.eh_frame:0000000000006C4E                 db    0
.eh_frame:0000000000006C4F                 db    0
.eh_frame:0000000000006C50                 db 0B8h
.eh_frame:0000000000006C51                 db    5
.eh_frame:0000000000006C52                 db    0
.eh_frame:0000000000006C53                 db    0
.eh_frame:0000000000006C54                 db 0BCh
.eh_frame:0000000000006C55                 db 0D9h
.eh_frame:0000000000006C56                 db 0FFh
.eh_frame:0000000000006C57                 db 0FFh
.eh_frame:0000000000006C58                 db  0Ah
.eh_frame:0000000000006C59                 db    0
.eh_frame:0000000000006C5A                 db    0
.eh_frame:0000000000006C5B                 db    0
.eh_frame:0000000000006C5C                 db    0
.eh_frame:0000000000006C5D                 db    0
.eh_frame:0000000000006C5E                 db    0
.eh_frame:0000000000006C5F                 db    0
.eh_frame:0000000000006C60                 db  18h
.eh_frame:0000000000006C61                 db    0
.eh_frame:0000000000006C62                 db    0
.eh_frame:0000000000006C63                 db    0
.eh_frame:0000000000006C64                 db 0CCh
.eh_frame:0000000000006C65                 db    5
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db 0B8h
.eh_frame:0000000000006C69                 db 0D9h
.eh_frame:0000000000006C6A                 db 0FFh
.eh_frame:0000000000006C6B                 db 0FFh
.eh_frame:0000000000006C6C                 db  8Eh
.eh_frame:0000000000006C6D                 db    0
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db    0
.eh_frame:0000000000006C71                 db  44h ; D
.eh_frame:0000000000006C72                 db  0Eh
.eh_frame:0000000000006C73                 db  50h ; P
.eh_frame:0000000000006C74                 db    2
.eh_frame:0000000000006C75                 db  7Fh ; 
.eh_frame:0000000000006C76                 db  0Ah
.eh_frame:0000000000006C77                 db  0Eh
.eh_frame:0000000000006C78                 db    8
.eh_frame:0000000000006C79                 db  41h ; A
.eh_frame:0000000000006C7A                 db  0Bh
.eh_frame:0000000000006C7B                 db    0
.eh_frame:0000000000006C7C                 db  18h
.eh_frame:0000000000006C7D                 db    0
.eh_frame:0000000000006C7E                 db    0
.eh_frame:0000000000006C7F                 db    0
.eh_frame:0000000000006C80                 db 0E8h
.eh_frame:0000000000006C81                 db    5
.eh_frame:0000000000006C82                 db    0
.eh_frame:0000000000006C83                 db    0
.eh_frame:0000000000006C84                 db  2Ch ; ,
.eh_frame:0000000000006C85                 db 0DAh
.eh_frame:0000000000006C86                 db 0FFh
.eh_frame:0000000000006C87                 db 0FFh
.eh_frame:0000000000006C88                 db  91h
.eh_frame:0000000000006C89                 db    0
.eh_frame:0000000000006C8A                 db    0
.eh_frame:0000000000006C8B                 db    0
.eh_frame:0000000000006C8C                 db    0
.eh_frame:0000000000006C8D                 db  44h ; D
.eh_frame:0000000000006C8E                 db  0Eh
.eh_frame:0000000000006C8F                 db  50h ; P
.eh_frame:0000000000006C90                 db    2
.eh_frame:0000000000006C91                 db  82h
.eh_frame:0000000000006C92                 db  0Ah
.eh_frame:0000000000006C93                 db  0Eh
.eh_frame:0000000000006C94                 db    8
.eh_frame:0000000000006C95                 db  41h ; A
.eh_frame:0000000000006C96                 db  0Bh
.eh_frame:0000000000006C97                 db    0
.eh_frame:0000000000006C98                 db  10h
.eh_frame:0000000000006C99                 db    0
.eh_frame:0000000000006C9A                 db    0
.eh_frame:0000000000006C9B                 db    0
.eh_frame:0000000000006C9C                 db    4
.eh_frame:0000000000006C9D                 db    6
.eh_frame:0000000000006C9E                 db    0
.eh_frame:0000000000006C9F                 db    0
.eh_frame:0000000000006CA0                 db 0B0h
.eh_frame:0000000000006CA1                 db 0DAh
.eh_frame:0000000000006CA2                 db 0FFh
.eh_frame:0000000000006CA3                 db 0FFh
.eh_frame:0000000000006CA4                 db  0Ch
.eh_frame:0000000000006CA5                 db    0
.eh_frame:0000000000006CA6                 db    0
.eh_frame:0000000000006CA7                 db    0
.eh_frame:0000000000006CA8                 db    0
.eh_frame:0000000000006CA9                 db    0
.eh_frame:0000000000006CAA                 db    0
.eh_frame:0000000000006CAB                 db    0
.eh_frame:0000000000006CAC                 db  10h
.eh_frame:0000000000006CAD                 db    0
.eh_frame:0000000000006CAE                 db    0
.eh_frame:0000000000006CAF                 db    0
.eh_frame:0000000000006CB0                 db  18h
.eh_frame:0000000000006CB1                 db    6
.eh_frame:0000000000006CB2                 db    0
.eh_frame:0000000000006CB3                 db    0
.eh_frame:0000000000006CB4                 db 0ACh
.eh_frame:0000000000006CB5                 db 0DAh
.eh_frame:0000000000006CB6                 db 0FFh
.eh_frame:0000000000006CB7                 db 0FFh
.eh_frame:0000000000006CB8                 db  17h
.eh_frame:0000000000006CB9                 db    0
.eh_frame:0000000000006CBA                 db    0
.eh_frame:0000000000006CBB                 db    0
.eh_frame:0000000000006CBC                 db    0
.eh_frame:0000000000006CBD                 db    0
.eh_frame:0000000000006CBE                 db    0
.eh_frame:0000000000006CBF                 db    0
.eh_frame:0000000000006CC0                 db  10h
.eh_frame:0000000000006CC1                 db    0
.eh_frame:0000000000006CC2                 db    0
.eh_frame:0000000000006CC3                 db    0
.eh_frame:0000000000006CC4                 db  2Ch ; ,
.eh_frame:0000000000006CC5                 db    6
.eh_frame:0000000000006CC6                 db    0
.eh_frame:0000000000006CC7                 db    0
.eh_frame:0000000000006CC8                 db 0B8h
.eh_frame:0000000000006CC9                 db 0DAh
.eh_frame:0000000000006CCA                 db 0FFh
.eh_frame:0000000000006CCB                 db 0FFh
.eh_frame:0000000000006CCC                 db  13h
.eh_frame:0000000000006CCD                 db    0
.eh_frame:0000000000006CCE                 db    0
.eh_frame:0000000000006CCF                 db    0
.eh_frame:0000000000006CD0                 db    0
.eh_frame:0000000000006CD1                 db    0
.eh_frame:0000000000006CD2                 db    0
.eh_frame:0000000000006CD3                 db    0
.eh_frame:0000000000006CD4                 db  10h
.eh_frame:0000000000006CD5                 db    0
.eh_frame:0000000000006CD6                 db    0
.eh_frame:0000000000006CD7                 db    0
.eh_frame:0000000000006CD8                 db  40h ; @
.eh_frame:0000000000006CD9                 db    6
.eh_frame:0000000000006CDA                 db    0
.eh_frame:0000000000006CDB                 db    0
.eh_frame:0000000000006CDC                 db 0C4h
.eh_frame:0000000000006CDD                 db 0DAh
.eh_frame:0000000000006CDE                 db 0FFh
.eh_frame:0000000000006CDF                 db 0FFh
.eh_frame:0000000000006CE0                 db  0Ch
.eh_frame:0000000000006CE1                 db    0
.eh_frame:0000000000006CE2                 db    0
.eh_frame:0000000000006CE3                 db    0
.eh_frame:0000000000006CE4                 db    0
.eh_frame:0000000000006CE5                 db    0
.eh_frame:0000000000006CE6                 db    0
.eh_frame:0000000000006CE7                 db    0
.eh_frame:0000000000006CE8                 db  10h
.eh_frame:0000000000006CE9                 db    0
.eh_frame:0000000000006CEA                 db    0
.eh_frame:0000000000006CEB                 db    0
.eh_frame:0000000000006CEC                 db  54h ; T
.eh_frame:0000000000006CED                 db    6
.eh_frame:0000000000006CEE                 db    0
.eh_frame:0000000000006CEF                 db    0
.eh_frame:0000000000006CF0                 db 0C0h
.eh_frame:0000000000006CF1                 db 0DAh
.eh_frame:0000000000006CF2                 db 0FFh
.eh_frame:0000000000006CF3                 db 0FFh
.eh_frame:0000000000006CF4                 db  14h
.eh_frame:0000000000006CF5                 db    0
.eh_frame:0000000000006CF6                 db    0
.eh_frame:0000000000006CF7                 db    0
.eh_frame:0000000000006CF8                 db    0
.eh_frame:0000000000006CF9                 db    0
.eh_frame:0000000000006CFA                 db    0
.eh_frame:0000000000006CFB                 db    0
.eh_frame:0000000000006CFC                 db  10h
.eh_frame:0000000000006CFD                 db    0
.eh_frame:0000000000006CFE                 db    0
.eh_frame:0000000000006CFF                 db    0
.eh_frame:0000000000006D00                 db  68h ; h
.eh_frame:0000000000006D01                 db    6
.eh_frame:0000000000006D02                 db    0
.eh_frame:0000000000006D03                 db    0
.eh_frame:0000000000006D04                 db 0CCh
.eh_frame:0000000000006D05                 db 0DAh
.eh_frame:0000000000006D06                 db 0FFh
.eh_frame:0000000000006D07                 db 0FFh
.eh_frame:0000000000006D08                 db  13h
.eh_frame:0000000000006D09                 db    0
.eh_frame:0000000000006D0A                 db    0
.eh_frame:0000000000006D0B                 db    0
.eh_frame:0000000000006D0C                 db    0
.eh_frame:0000000000006D0D                 db    0
.eh_frame:0000000000006D0E                 db    0
.eh_frame:0000000000006D0F                 db    0
.eh_frame:0000000000006D10                 db  14h
.eh_frame:0000000000006D11                 db    0
.eh_frame:0000000000006D12                 db    0
.eh_frame:0000000000006D13                 db    0
.eh_frame:0000000000006D14                 db  7Ch ; |
.eh_frame:0000000000006D15                 db    6
.eh_frame:0000000000006D16                 db    0
.eh_frame:0000000000006D17                 db    0
.eh_frame:0000000000006D18                 db 0D8h
.eh_frame:0000000000006D19                 db 0DAh
.eh_frame:0000000000006D1A                 db 0FFh
.eh_frame:0000000000006D1B                 db 0FFh
.eh_frame:0000000000006D1C                 db  18h
.eh_frame:0000000000006D1D                 db    0
.eh_frame:0000000000006D1E                 db    0
.eh_frame:0000000000006D1F                 db    0
.eh_frame:0000000000006D20                 db    0
.eh_frame:0000000000006D21                 db    0
.eh_frame:0000000000006D22                 db    0
.eh_frame:0000000000006D23                 db    0
.eh_frame:0000000000006D24                 db    0
.eh_frame:0000000000006D25                 db    0
.eh_frame:0000000000006D26                 db    0
.eh_frame:0000000000006D27                 db    0
.eh_frame:0000000000006D28                 db  34h ; 4
.eh_frame:0000000000006D29                 db    0
.eh_frame:0000000000006D2A                 db    0
.eh_frame:0000000000006D2B                 db    0
.eh_frame:0000000000006D2C                 db  94h
.eh_frame:0000000000006D2D                 db    6
.eh_frame:0000000000006D2E                 db    0
.eh_frame:0000000000006D2F                 db    0
.eh_frame:0000000000006D30                 db 0E0h
.eh_frame:0000000000006D31                 db 0DAh
.eh_frame:0000000000006D32                 db 0FFh
.eh_frame:0000000000006D33                 db 0FFh
.eh_frame:0000000000006D34                 db  5Eh ; ^
.eh_frame:0000000000006D35                 db    0
.eh_frame:0000000000006D36                 db    0
.eh_frame:0000000000006D37                 db    0
.eh_frame:0000000000006D38                 db    0
.eh_frame:0000000000006D39                 db  42h ; B
.eh_frame:0000000000006D3A                 db  0Eh
.eh_frame:0000000000006D3B                 db  10h
.eh_frame:0000000000006D3C                 db  8Dh
.eh_frame:0000000000006D3D                 db    2
.eh_frame:0000000000006D3E                 db  42h ; B
.eh_frame:0000000000006D3F                 db  0Eh
.eh_frame:0000000000006D40                 db  18h
.eh_frame:0000000000006D41                 db  8Ch
.eh_frame:0000000000006D42                 db    3
.eh_frame:0000000000006D43                 db  44h ; D
.eh_frame:0000000000006D44                 db  0Eh
.eh_frame:0000000000006D45                 db  20h
.eh_frame:0000000000006D46                 db  86h
.eh_frame:0000000000006D47                 db    4
.eh_frame:0000000000006D48                 db  41h ; A
.eh_frame:0000000000006D49                 db  0Eh
.eh_frame:0000000000006D4A                 db  28h ; (
.eh_frame:0000000000006D4B                 db  83h
.eh_frame:0000000000006D4C                 db    5
.eh_frame:0000000000006D4D                 db  4Ah ; J
.eh_frame:0000000000006D4E                 db  0Eh
.eh_frame:0000000000006D4F                 db  30h ; 0
.eh_frame:0000000000006D50                 db    2
.eh_frame:0000000000006D51                 db  41h ; A
.eh_frame:0000000000006D52                 db  0Eh
.eh_frame:0000000000006D53                 db  28h ; (
.eh_frame:0000000000006D54                 db  44h ; D
.eh_frame:0000000000006D55                 db  0Eh
.eh_frame:0000000000006D56                 db  20h
.eh_frame:0000000000006D57                 db  41h ; A
.eh_frame:0000000000006D58                 db  0Eh
.eh_frame:0000000000006D59                 db  18h
.eh_frame:0000000000006D5A                 db  42h ; B
.eh_frame:0000000000006D5B                 db  0Eh
.eh_frame:0000000000006D5C                 db  10h
.eh_frame:0000000000006D5D                 db  42h ; B
.eh_frame:0000000000006D5E                 db  0Eh
.eh_frame:0000000000006D5F                 db    8
.eh_frame:0000000000006D60                 db  34h ; 4
.eh_frame:0000000000006D61                 db    0
.eh_frame:0000000000006D62                 db    0
.eh_frame:0000000000006D63                 db    0
.eh_frame:0000000000006D64                 db 0CCh
.eh_frame:0000000000006D65                 db    6
.eh_frame:0000000000006D66                 db    0
.eh_frame:0000000000006D67                 db    0
.eh_frame:0000000000006D68                 db    8
.eh_frame:0000000000006D69                 db 0DBh
.eh_frame:0000000000006D6A                 db 0FFh
.eh_frame:0000000000006D6B                 db 0FFh
.eh_frame:0000000000006D6C                 db  5Eh ; ^
.eh_frame:0000000000006D6D                 db    0
.eh_frame:0000000000006D6E                 db    0
.eh_frame:0000000000006D6F                 db    0
.eh_frame:0000000000006D70                 db    0
.eh_frame:0000000000006D71                 db  42h ; B
.eh_frame:0000000000006D72                 db  0Eh
.eh_frame:0000000000006D73                 db  10h
.eh_frame:0000000000006D74                 db  8Dh
.eh_frame:0000000000006D75                 db    2
.eh_frame:0000000000006D76                 db  42h ; B
.eh_frame:0000000000006D77                 db  0Eh
.eh_frame:0000000000006D78                 db  18h
.eh_frame:0000000000006D79                 db  8Ch
.eh_frame:0000000000006D7A                 db    3
.eh_frame:0000000000006D7B                 db  44h ; D
.eh_frame:0000000000006D7C                 db  0Eh
.eh_frame:0000000000006D7D                 db  20h
.eh_frame:0000000000006D7E                 db  86h
.eh_frame:0000000000006D7F                 db    4
.eh_frame:0000000000006D80                 db  41h ; A
.eh_frame:0000000000006D81                 db  0Eh
.eh_frame:0000000000006D82                 db  28h ; (
.eh_frame:0000000000006D83                 db  83h
.eh_frame:0000000000006D84                 db    5
.eh_frame:0000000000006D85                 db  4Ah ; J
.eh_frame:0000000000006D86                 db  0Eh
.eh_frame:0000000000006D87                 db  30h ; 0
.eh_frame:0000000000006D88                 db    2
.eh_frame:0000000000006D89                 db  41h ; A
.eh_frame:0000000000006D8A                 db  0Eh
.eh_frame:0000000000006D8B                 db  28h ; (
.eh_frame:0000000000006D8C                 db  44h ; D
.eh_frame:0000000000006D8D                 db  0Eh
.eh_frame:0000000000006D8E                 db  20h
.eh_frame:0000000000006D8F                 db  41h ; A
.eh_frame:0000000000006D90                 db  0Eh
.eh_frame:0000000000006D91                 db  18h
.eh_frame:0000000000006D92                 db  42h ; B
.eh_frame:0000000000006D93                 db  0Eh
.eh_frame:0000000000006D94                 db  10h
.eh_frame:0000000000006D95                 db  42h ; B
.eh_frame:0000000000006D96                 db  0Eh
.eh_frame:0000000000006D97                 db    8
.eh_frame:0000000000006D98                 db  10h
.eh_frame:0000000000006D99                 db    1
.eh_frame:0000000000006D9A                 db    0
.eh_frame:0000000000006D9B                 db    0
.eh_frame:0000000000006D9C                 db    4
.eh_frame:0000000000006D9D                 db    7
.eh_frame:0000000000006D9E                 db    0
.eh_frame:0000000000006D9F                 db    0
.eh_frame:0000000000006DA0                 db  30h ; 0
.eh_frame:0000000000006DA1                 db 0DBh
.eh_frame:0000000000006DA2                 db 0FFh
.eh_frame:0000000000006DA3                 db 0FFh
.eh_frame:0000000000006DA4                 db  17h
.eh_frame:0000000000006DA5                 db    4
.eh_frame:0000000000006DA6                 db    0
.eh_frame:0000000000006DA7                 db    0
.eh_frame:0000000000006DA8                 db    0
.eh_frame:0000000000006DA9                 db  42h ; B
.eh_frame:0000000000006DAA                 db  0Eh
.eh_frame:0000000000006DAB                 db  10h
.eh_frame:0000000000006DAC                 db  8Fh
.eh_frame:0000000000006DAD                 db    2
.eh_frame:0000000000006DAE                 db  42h ; B
.eh_frame:0000000000006DAF                 db  0Eh
.eh_frame:0000000000006DB0                 db  18h
.eh_frame:0000000000006DB1                 db  8Eh
.eh_frame:0000000000006DB2                 db    3
.eh_frame:0000000000006DB3                 db  42h ; B
.eh_frame:0000000000006DB4                 db  0Eh
.eh_frame:0000000000006DB5                 db  20h
.eh_frame:0000000000006DB6                 db  8Dh
.eh_frame:0000000000006DB7                 db    4
.eh_frame:0000000000006DB8                 db  42h ; B
.eh_frame:0000000000006DB9                 db  0Eh
.eh_frame:0000000000006DBA                 db  28h ; (
.eh_frame:0000000000006DBB                 db  8Ch
.eh_frame:0000000000006DBC                 db    5
.eh_frame:0000000000006DBD                 db  44h ; D
.eh_frame:0000000000006DBE                 db  0Eh
.eh_frame:0000000000006DBF                 db  30h ; 0
.eh_frame:0000000000006DC0                 db  86h
.eh_frame:0000000000006DC1                 db    6
.eh_frame:0000000000006DC2                 db  41h ; A
.eh_frame:0000000000006DC3                 db  0Eh
.eh_frame:0000000000006DC4                 db  38h ; 8
.eh_frame:0000000000006DC5                 db  83h
.eh_frame:0000000000006DC6                 db    7
.eh_frame:0000000000006DC7                 db  4Ah ; J
.eh_frame:0000000000006DC8                 db  0Eh
.eh_frame:0000000000006DC9                 db  60h ; `
.eh_frame:0000000000006DCA                 db    2
.eh_frame:0000000000006DCB                 db 0DDh
.eh_frame:0000000000006DCC                 db  0Eh
.eh_frame:0000000000006DCD                 db  68h ; h
.eh_frame:0000000000006DCE                 db  57h ; W
.eh_frame:0000000000006DCF                 db  0Eh
.eh_frame:0000000000006DD0                 db  70h ; p
.eh_frame:0000000000006DD1                 db  42h ; B
.eh_frame:0000000000006DD2                 db  0Eh
.eh_frame:0000000000006DD3                 db  78h ; x
.eh_frame:0000000000006DD4                 db  42h ; B
.eh_frame:0000000000006DD5                 db  0Eh
.eh_frame:0000000000006DD6                 db  80h
.eh_frame:0000000000006DD7                 db    1
.eh_frame:0000000000006DD8                 db  42h ; B
.eh_frame:0000000000006DD9                 db  0Eh
.eh_frame:0000000000006DDA                 db  88h
.eh_frame:0000000000006DDB                 db    1
.eh_frame:0000000000006DDC                 db  42h ; B
.eh_frame:0000000000006DDD                 db  0Eh
.eh_frame:0000000000006DDE                 db  90h
.eh_frame:0000000000006DDF                 db    1
.eh_frame:0000000000006DE0                 db  53h ; S
.eh_frame:0000000000006DE1                 db  0Eh
.eh_frame:0000000000006DE2                 db  60h ; `
.eh_frame:0000000000006DE3                 db  44h ; D
.eh_frame:0000000000006DE4                 db  0Ah
.eh_frame:0000000000006DE5                 db  0Eh
.eh_frame:0000000000006DE6                 db  38h ; 8
.eh_frame:0000000000006DE7                 db  41h ; A
.eh_frame:0000000000006DE8                 db  0Eh
.eh_frame:0000000000006DE9                 db  30h ; 0
.eh_frame:0000000000006DEA                 db  41h ; A
.eh_frame:0000000000006DEB                 db  0Eh
.eh_frame:0000000000006DEC                 db  28h ; (
.eh_frame:0000000000006DED                 db  42h ; B
.eh_frame:0000000000006DEE                 db  0Eh
.eh_frame:0000000000006DEF                 db  20h
.eh_frame:0000000000006DF0                 db  42h ; B
.eh_frame:0000000000006DF1                 db  0Eh
.eh_frame:0000000000006DF2                 db  18h
.eh_frame:0000000000006DF3                 db  42h ; B
.eh_frame:0000000000006DF4                 db  0Eh
.eh_frame:0000000000006DF5                 db  10h
.eh_frame:0000000000006DF6                 db  42h ; B
.eh_frame:0000000000006DF7                 db  0Eh
.eh_frame:0000000000006DF8                 db    8
.eh_frame:0000000000006DF9                 db  44h ; D
.eh_frame:0000000000006DFA                 db  0Bh
.eh_frame:0000000000006DFB                 db    2
.eh_frame:0000000000006DFC                 db  78h ; x
.eh_frame:0000000000006DFD                 db  0Ah
.eh_frame:0000000000006DFE                 db  0Eh
.eh_frame:0000000000006DFF                 db  68h ; h
.eh_frame:0000000000006E00                 db  48h ; H
.eh_frame:0000000000006E01                 db  0Bh
.eh_frame:0000000000006E02                 db  5Ah ; Z
.eh_frame:0000000000006E03                 db  0Ah
.eh_frame:0000000000006E04                 db  0Eh
.eh_frame:0000000000006E05                 db  38h ; 8
.eh_frame:0000000000006E06                 db  47h ; G
.eh_frame:0000000000006E07                 db  0Eh
.eh_frame:0000000000006E08                 db  30h ; 0
.eh_frame:0000000000006E09                 db  41h ; A
.eh_frame:0000000000006E0A                 db  0Eh
.eh_frame:0000000000006E0B                 db  28h ; (
.eh_frame:0000000000006E0C                 db  42h ; B
.eh_frame:0000000000006E0D                 db  0Eh
.eh_frame:0000000000006E0E                 db  20h
.eh_frame:0000000000006E0F                 db  42h ; B
.eh_frame:0000000000006E10                 db  0Eh
.eh_frame:0000000000006E11                 db  18h
.eh_frame:0000000000006E12                 db  42h ; B
.eh_frame:0000000000006E13                 db  0Eh
.eh_frame:0000000000006E14                 db  10h
.eh_frame:0000000000006E15                 db  42h ; B
.eh_frame:0000000000006E16                 db  0Eh
.eh_frame:0000000000006E17                 db    8
.eh_frame:0000000000006E18                 db  56h ; V
.eh_frame:0000000000006E19                 db  0Bh
.eh_frame:0000000000006E1A                 db  5Eh ; ^
.eh_frame:0000000000006E1B                 db  0Ah
.eh_frame:0000000000006E1C                 db  0Eh
.eh_frame:0000000000006E1D                 db  38h ; 8
.eh_frame:0000000000006E1E                 db  52h ; R
.eh_frame:0000000000006E1F                 db  0Eh
.eh_frame:0000000000006E20                 db  30h ; 0
.eh_frame:0000000000006E21                 db  41h ; A
.eh_frame:0000000000006E22                 db  0Eh
.eh_frame:0000000000006E23                 db  28h ; (
.eh_frame:0000000000006E24                 db  42h ; B
.eh_frame:0000000000006E25                 db  0Eh
.eh_frame:0000000000006E26                 db  20h
.eh_frame:0000000000006E27                 db  42h ; B
.eh_frame:0000000000006E28                 db  0Eh
.eh_frame:0000000000006E29                 db  18h
.eh_frame:0000000000006E2A                 db  42h ; B
.eh_frame:0000000000006E2B                 db  0Eh
.eh_frame:0000000000006E2C                 db  10h
.eh_frame:0000000000006E2D                 db  42h ; B
.eh_frame:0000000000006E2E                 db  0Eh
.eh_frame:0000000000006E2F                 db    8
.eh_frame:0000000000006E30                 db  4Fh ; O
.eh_frame:0000000000006E31                 db  0Bh
.eh_frame:0000000000006E32                 db  62h ; b
.eh_frame:0000000000006E33                 db  0Ah
.eh_frame:0000000000006E34                 db  0Eh
.eh_frame:0000000000006E35                 db  38h ; 8
.eh_frame:0000000000006E36                 db  50h ; P
.eh_frame:0000000000006E37                 db  0Eh
.eh_frame:0000000000006E38                 db  30h ; 0
.eh_frame:0000000000006E39                 db  41h ; A
.eh_frame:0000000000006E3A                 db  0Eh
.eh_frame:0000000000006E3B                 db  28h ; (
.eh_frame:0000000000006E3C                 db  42h ; B
.eh_frame:0000000000006E3D                 db  0Eh
.eh_frame:0000000000006E3E                 db  20h
.eh_frame:0000000000006E3F                 db  42h ; B
.eh_frame:0000000000006E40                 db  0Eh
.eh_frame:0000000000006E41                 db  18h
.eh_frame:0000000000006E42                 db  42h ; B
.eh_frame:0000000000006E43                 db  0Eh
.eh_frame:0000000000006E44                 db  10h
.eh_frame:0000000000006E45                 db  42h ; B
.eh_frame:0000000000006E46                 db  0Eh
.eh_frame:0000000000006E47                 db    8
.eh_frame:0000000000006E48                 db  55h ; U
.eh_frame:0000000000006E49                 db  0Bh
.eh_frame:0000000000006E4A                 db  66h ; f
.eh_frame:0000000000006E4B                 db  0Eh
.eh_frame:0000000000006E4C                 db  68h ; h
.eh_frame:0000000000006E4D                 db  42h ; B
.eh_frame:0000000000006E4E                 db  0Eh
.eh_frame:0000000000006E4F                 db  70h ; p
.eh_frame:0000000000006E50                 db  5Ch ; \
.eh_frame:0000000000006E51                 db  0Eh
.eh_frame:0000000000006E52                 db  68h ; h
.eh_frame:0000000000006E53                 db  41h ; A
.eh_frame:0000000000006E54                 db  0Eh
.eh_frame:0000000000006E55                 db  60h ; `
.eh_frame:0000000000006E56                 db  44h ; D
.eh_frame:0000000000006E57                 db  0Ah
.eh_frame:0000000000006E58                 db  0Eh
.eh_frame:0000000000006E59                 db  38h ; 8
.eh_frame:0000000000006E5A                 db  41h ; A
.eh_frame:0000000000006E5B                 db  0Eh
.eh_frame:0000000000006E5C                 db  30h ; 0
.eh_frame:0000000000006E5D                 db  41h ; A
.eh_frame:0000000000006E5E                 db  0Eh
.eh_frame:0000000000006E5F                 db  28h ; (
.eh_frame:0000000000006E60                 db  42h ; B
.eh_frame:0000000000006E61                 db  0Eh
.eh_frame:0000000000006E62                 db  20h
.eh_frame:0000000000006E63                 db  42h ; B
.eh_frame:0000000000006E64                 db  0Eh
.eh_frame:0000000000006E65                 db  18h
.eh_frame:0000000000006E66                 db  42h ; B
.eh_frame:0000000000006E67                 db  0Eh
.eh_frame:0000000000006E68                 db  10h
.eh_frame:0000000000006E69                 db  42h ; B
.eh_frame:0000000000006E6A                 db  0Eh
.eh_frame:0000000000006E6B                 db    8
.eh_frame:0000000000006E6C                 db  45h ; E
.eh_frame:0000000000006E6D                 db  0Bh
.eh_frame:0000000000006E6E                 db  68h ; h
.eh_frame:0000000000006E6F                 db  0Ah
.eh_frame:0000000000006E70                 db  0Eh
.eh_frame:0000000000006E71                 db  68h ; h
.eh_frame:0000000000006E72                 db  48h ; H
.eh_frame:0000000000006E73                 db  0Bh
.eh_frame:0000000000006E74                 db  72h ; r
.eh_frame:0000000000006E75                 db  0Eh
.eh_frame:0000000000006E76                 db  68h ; h
.eh_frame:0000000000006E77                 db  45h ; E
.eh_frame:0000000000006E78                 db  0Eh
.eh_frame:0000000000006E79                 db  70h ; p
.eh_frame:0000000000006E7A                 db  42h ; B
.eh_frame:0000000000006E7B                 db  0Eh
.eh_frame:0000000000006E7C                 db  78h ; x
.eh_frame:0000000000006E7D                 db  42h ; B
.eh_frame:0000000000006E7E                 db  0Eh
.eh_frame:0000000000006E7F                 db  80h
.eh_frame:0000000000006E80                 db    1
.eh_frame:0000000000006E81                 db  5Eh ; ^
.eh_frame:0000000000006E82                 db  0Eh
.eh_frame:0000000000006E83                 db  60h ; `
.eh_frame:0000000000006E84                 db  44h ; D
.eh_frame:0000000000006E85                 db  0Ah
.eh_frame:0000000000006E86                 db  0Eh
.eh_frame:0000000000006E87                 db  38h ; 8
.eh_frame:0000000000006E88                 db  41h ; A
.eh_frame:0000000000006E89                 db  0Eh
.eh_frame:0000000000006E8A                 db  30h ; 0
.eh_frame:0000000000006E8B                 db  41h ; A
.eh_frame:0000000000006E8C                 db  0Eh
.eh_frame:0000000000006E8D                 db  28h ; (
.eh_frame:0000000000006E8E                 db  42h ; B
.eh_frame:0000000000006E8F                 db  0Eh
.eh_frame:0000000000006E90                 db  20h
.eh_frame:0000000000006E91                 db  42h ; B
.eh_frame:0000000000006E92                 db  0Eh
.eh_frame:0000000000006E93                 db  18h
.eh_frame:0000000000006E94                 db  42h ; B
.eh_frame:0000000000006E95                 db  0Eh
.eh_frame:0000000000006E96                 db  10h
.eh_frame:0000000000006E97                 db  42h ; B
.eh_frame:0000000000006E98                 db  0Eh
.eh_frame:0000000000006E99                 db    8
.eh_frame:0000000000006E9A                 db  41h ; A
.eh_frame:0000000000006E9B                 db  0Bh
.eh_frame:0000000000006E9C                 db  79h ; y
.eh_frame:0000000000006E9D                 db  0Ah
.eh_frame:0000000000006E9E                 db  0Eh
.eh_frame:0000000000006E9F                 db  68h ; h
.eh_frame:0000000000006EA0                 db  42h ; B
.eh_frame:0000000000006EA1                 db  0Eh
.eh_frame:0000000000006EA2                 db  70h ; p
.eh_frame:0000000000006EA3                 db  42h ; B
.eh_frame:0000000000006EA4                 db  0Eh
.eh_frame:0000000000006EA5                 db  78h ; x
.eh_frame:0000000000006EA6                 db  42h ; B
.eh_frame:0000000000006EA7                 db  0Eh
.eh_frame:0000000000006EA8                 db  80h
.eh_frame:0000000000006EA9                 db    1
.eh_frame:0000000000006EAA                 db  51h ; Q
.eh_frame:0000000000006EAB                 db  0Bh
.eh_frame:0000000000006EAC                 db  10h
.eh_frame:0000000000006EAD                 db    0
.eh_frame:0000000000006EAE                 db    0
.eh_frame:0000000000006EAF                 db    0
.eh_frame:0000000000006EB0                 db  18h
.eh_frame:0000000000006EB1                 db    8
.eh_frame:0000000000006EB2                 db    0
.eh_frame:0000000000006EB3                 db    0
.eh_frame:0000000000006EB4                 db  3Ch ; <
.eh_frame:0000000000006EB5                 db 0DEh
.eh_frame:0000000000006EB6                 db 0FFh
.eh_frame:0000000000006EB7                 db 0FFh
.eh_frame:0000000000006EB8                 db  20h
.eh_frame:0000000000006EB9                 db    0
.eh_frame:0000000000006EBA                 db    0
.eh_frame:0000000000006EBB                 db    0
.eh_frame:0000000000006EBC                 db    0
.eh_frame:0000000000006EBD                 db    0
.eh_frame:0000000000006EBE                 db    0
.eh_frame:0000000000006EBF                 db    0
.eh_frame:0000000000006EC0                 db  18h
.eh_frame:0000000000006EC1                 db    0
.eh_frame:0000000000006EC2                 db    0
.eh_frame:0000000000006EC3                 db    0
.eh_frame:0000000000006EC4                 db  2Ch ; ,
.eh_frame:0000000000006EC5                 db    8
.eh_frame:0000000000006EC6                 db    0
.eh_frame:0000000000006EC7                 db    0
.eh_frame:0000000000006EC8                 db  48h ; H
.eh_frame:0000000000006EC9                 db 0DEh
.eh_frame:0000000000006ECA                 db 0FFh
.eh_frame:0000000000006ECB                 db 0FFh
.eh_frame:0000000000006ECC                 db  78h ; x
.eh_frame:0000000000006ECD                 db    0
.eh_frame:0000000000006ECE                 db    0
.eh_frame:0000000000006ECF                 db    0
.eh_frame:0000000000006ED0                 db    0
.eh_frame:0000000000006ED1                 db  44h ; D
.eh_frame:0000000000006ED2                 db  0Eh
.eh_frame:0000000000006ED3                 db  70h ; p
.eh_frame:0000000000006ED4                 db    2
.eh_frame:0000000000006ED5                 db  60h ; `
.eh_frame:0000000000006ED6                 db  0Ah
.eh_frame:0000000000006ED7                 db  0Eh
.eh_frame:0000000000006ED8                 db    8
.eh_frame:0000000000006ED9                 db  41h ; A
.eh_frame:0000000000006EDA                 db  0Bh
.eh_frame:0000000000006EDB                 db    0
.eh_frame:0000000000006EDC                 db  28h ; (
.eh_frame:0000000000006EDD                 db    0
.eh_frame:0000000000006EDE                 db    0
.eh_frame:0000000000006EDF                 db    0
.eh_frame:0000000000006EE0                 db  48h ; H
.eh_frame:0000000000006EE1                 db    8
.eh_frame:0000000000006EE2                 db    0
.eh_frame:0000000000006EE3                 db    0
.eh_frame:0000000000006EE4                 db 0ACh
.eh_frame:0000000000006EE5                 db 0DEh
.eh_frame:0000000000006EE6                 db 0FFh
.eh_frame:0000000000006EE7                 db 0FFh
.eh_frame:0000000000006EE8                 db 0D5h
.eh_frame:0000000000006EE9                 db    0
.eh_frame:0000000000006EEA                 db    0
.eh_frame:0000000000006EEB                 db    0
.eh_frame:0000000000006EEC                 db    0
.eh_frame:0000000000006EED                 db  41h ; A
.eh_frame:0000000000006EEE                 db  0Eh
.eh_frame:0000000000006EEF                 db  10h
.eh_frame:0000000000006EF0                 db  86h
.eh_frame:0000000000006EF1                 db    2
.eh_frame:0000000000006EF2                 db  41h ; A
.eh_frame:0000000000006EF3                 db  0Eh
.eh_frame:0000000000006EF4                 db  18h
.eh_frame:0000000000006EF5                 db  83h
.eh_frame:0000000000006EF6                 db    3
.eh_frame:0000000000006EF7                 db  50h ; P
.eh_frame:0000000000006EF8                 db  0Eh
.eh_frame:0000000000006EF9                 db 0D0h
.eh_frame:0000000000006EFA                 db    1
.eh_frame:0000000000006EFB                 db    2
.eh_frame:0000000000006EFC                 db 0ABh
.eh_frame:0000000000006EFD                 db  0Ah
.eh_frame:0000000000006EFE                 db  0Eh
.eh_frame:0000000000006EFF                 db  18h
.eh_frame:0000000000006F00                 db  41h ; A
.eh_frame:0000000000006F01                 db  0Eh
.eh_frame:0000000000006F02                 db  10h
.eh_frame:0000000000006F03                 db  41h ; A
.eh_frame:0000000000006F04                 db  0Eh
.eh_frame:0000000000006F05                 db    8
.eh_frame:0000000000006F06                 db  41h ; A
.eh_frame:0000000000006F07                 db  0Bh
.eh_frame:0000000000006F08                 db  1Ch
.eh_frame:0000000000006F09                 db    0
.eh_frame:0000000000006F0A                 db    0
.eh_frame:0000000000006F0B                 db    0
.eh_frame:0000000000006F0C                 db  74h ; t
.eh_frame:0000000000006F0D                 db    8
.eh_frame:0000000000006F0E                 db    0
.eh_frame:0000000000006F0F                 db    0
.eh_frame:0000000000006F10                 db  60h ; `
.eh_frame:0000000000006F11                 db 0DFh
.eh_frame:0000000000006F12                 db 0FFh
.eh_frame:0000000000006F13                 db 0FFh
.eh_frame:0000000000006F14                 db  80h
.eh_frame:0000000000006F15                 db    0
.eh_frame:0000000000006F16                 db    0
.eh_frame:0000000000006F17                 db    0
.eh_frame:0000000000006F18                 db    0
.eh_frame:0000000000006F19                 db  41h ; A
.eh_frame:0000000000006F1A                 db  0Eh
.eh_frame:0000000000006F1B                 db  10h
.eh_frame:0000000000006F1C                 db  83h
.eh_frame:0000000000006F1D                 db    2
.eh_frame:0000000000006F1E                 db    2
.eh_frame:0000000000006F1F                 db  7Ah ; z
.eh_frame:0000000000006F20                 db  0Eh
.eh_frame:0000000000006F21                 db    8
.eh_frame:0000000000006F22                 db    0
.eh_frame:0000000000006F23                 db    0
.eh_frame:0000000000006F24                 db    0
.eh_frame:0000000000006F25                 db    0
.eh_frame:0000000000006F26                 db    0
.eh_frame:0000000000006F27                 db    0
.eh_frame:0000000000006F28                 db  18h
.eh_frame:0000000000006F29                 db    0
.eh_frame:0000000000006F2A                 db    0
.eh_frame:0000000000006F2B                 db    0
.eh_frame:0000000000006F2C                 db  94h
.eh_frame:0000000000006F2D                 db    8
.eh_frame:0000000000006F2E                 db    0
.eh_frame:0000000000006F2F                 db    0
.eh_frame:0000000000006F30                 db 0C0h
.eh_frame:0000000000006F31                 db 0DFh
.eh_frame:0000000000006F32                 db 0FFh
.eh_frame:0000000000006F33                 db 0FFh
.eh_frame:0000000000006F34                 db  1Ah
.eh_frame:0000000000006F35                 db    0
.eh_frame:0000000000006F36                 db    0
.eh_frame:0000000000006F37                 db    0
.eh_frame:0000000000006F38                 db    0
.eh_frame:0000000000006F39                 db  41h ; A
.eh_frame:0000000000006F3A                 db  0Eh
.eh_frame:0000000000006F3B                 db  10h
.eh_frame:0000000000006F3C                 db  83h
.eh_frame:0000000000006F3D                 db    2
.eh_frame:0000000000006F3E                 db  53h ; S
.eh_frame:0000000000006F3F                 db  0Ah
.eh_frame:0000000000006F40                 db  0Eh
.eh_frame:0000000000006F41                 db    8
.eh_frame:0000000000006F42                 db  41h ; A
.eh_frame:0000000000006F43                 db  0Bh
.eh_frame:0000000000006F44                 db  10h
.eh_frame:0000000000006F45                 db    0
.eh_frame:0000000000006F46                 db    0
.eh_frame:0000000000006F47                 db    0
.eh_frame:0000000000006F48                 db 0B0h
.eh_frame:0000000000006F49                 db    8
.eh_frame:0000000000006F4A                 db    0
.eh_frame:0000000000006F4B                 db    0
.eh_frame:0000000000006F4C                 db 0C4h
.eh_frame:0000000000006F4D                 db 0DFh
.eh_frame:0000000000006F4E                 db 0FFh
.eh_frame:0000000000006F4F                 db 0FFh
.eh_frame:0000000000006F50                 db  24h ; $
.eh_frame:0000000000006F51                 db    0
.eh_frame:0000000000006F52                 db    0
.eh_frame:0000000000006F53                 db    0
.eh_frame:0000000000006F54                 db    0
.eh_frame:0000000000006F55                 db  5Fh ; _
.eh_frame:0000000000006F56                 db  0Eh
.eh_frame:0000000000006F57                 db  10h
.eh_frame:0000000000006F58                 db  10h
.eh_frame:0000000000006F59                 db    0
.eh_frame:0000000000006F5A                 db    0
.eh_frame:0000000000006F5B                 db    0
.eh_frame:0000000000006F5C                 db 0C4h
.eh_frame:0000000000006F5D                 db    8
.eh_frame:0000000000006F5E                 db    0
.eh_frame:0000000000006F5F                 db    0
.eh_frame:0000000000006F60                 db 0E0h
.eh_frame:0000000000006F61                 db 0DFh
.eh_frame:0000000000006F62                 db 0FFh
.eh_frame:0000000000006F63                 db 0FFh
.eh_frame:0000000000006F64                 db    2
.eh_frame:0000000000006F65                 db    0
.eh_frame:0000000000006F66                 db    0
.eh_frame:0000000000006F67                 db    0
.eh_frame:0000000000006F68                 db    0
.eh_frame:0000000000006F69                 db    0
.eh_frame:0000000000006F6A                 db    0
.eh_frame:0000000000006F6B                 db    0
.eh_frame:0000000000006F6C                 db  20h
.eh_frame:0000000000006F6D                 db    0
.eh_frame:0000000000006F6E                 db    0
.eh_frame:0000000000006F6F                 db    0
.eh_frame:0000000000006F70                 db 0D8h
.eh_frame:0000000000006F71                 db    8
.eh_frame:0000000000006F72                 db    0
.eh_frame:0000000000006F73                 db    0
.eh_frame:0000000000006F74                 db 0DCh
.eh_frame:0000000000006F75                 db 0DFh
.eh_frame:0000000000006F76                 db 0FFh
.eh_frame:0000000000006F77                 db 0FFh
.eh_frame:0000000000006F78                 db  36h ; 6
.eh_frame:0000000000006F79                 db    0
.eh_frame:0000000000006F7A                 db    0
.eh_frame:0000000000006F7B                 db    0
.eh_frame:0000000000006F7C                 db    0
.eh_frame:0000000000006F7D                 db  44h ; D
.eh_frame:0000000000006F7E                 db  0Eh
.eh_frame:0000000000006F7F                 db  10h
.eh_frame:0000000000006F80                 db  83h
.eh_frame:0000000000006F81                 db    2
.eh_frame:0000000000006F82                 db  5Dh ; ]
.eh_frame:0000000000006F83                 db  0Ah
.eh_frame:0000000000006F84                 db  0Eh
.eh_frame:0000000000006F85                 db    8
.eh_frame:0000000000006F86                 db  47h ; G
.eh_frame:0000000000006F87                 db  0Bh
.eh_frame:0000000000006F88                 db  48h ; H
.eh_frame:0000000000006F89                 db  0Ah
.eh_frame:0000000000006F8A                 db  0Eh
.eh_frame:0000000000006F8B                 db    8
.eh_frame:0000000000006F8C                 db  41h ; A
.eh_frame:0000000000006F8D                 db  0Bh
.eh_frame:0000000000006F8E                 db    0
.eh_frame:0000000000006F8F                 db    0
.eh_frame:0000000000006F90                 db  10h
.eh_frame:0000000000006F91                 db    0
.eh_frame:0000000000006F92                 db    0
.eh_frame:0000000000006F93                 db    0
.eh_frame:0000000000006F94                 db 0FCh
.eh_frame:0000000000006F95                 db    8
.eh_frame:0000000000006F96                 db    0
.eh_frame:0000000000006F97                 db    0
.eh_frame:0000000000006F98                 db 0F8h
.eh_frame:0000000000006F99                 db 0DFh
.eh_frame:0000000000006F9A                 db 0FFh
.eh_frame:0000000000006F9B                 db 0FFh
.eh_frame:0000000000006F9C                 db  24h ; $
.eh_frame:0000000000006F9D                 db    0
.eh_frame:0000000000006F9E                 db    0
.eh_frame:0000000000006F9F                 db    0
.eh_frame:0000000000006FA0                 db    0
.eh_frame:0000000000006FA1                 db  5Fh ; _
.eh_frame:0000000000006FA2                 db  0Eh
.eh_frame:0000000000006FA3                 db  10h
.eh_frame:0000000000006FA4                 db  14h
.eh_frame:0000000000006FA5                 db    0
.eh_frame:0000000000006FA6                 db    0
.eh_frame:0000000000006FA7                 db    0
.eh_frame:0000000000006FA8                 db  10h
.eh_frame:0000000000006FA9                 db    9
.eh_frame:0000000000006FAA                 db    0
.eh_frame:0000000000006FAB                 db    0
.eh_frame:0000000000006FAC                 db  14h
.eh_frame:0000000000006FAD                 db 0E0h
.eh_frame:0000000000006FAE                 db 0FFh
.eh_frame:0000000000006FAF                 db 0FFh
.eh_frame:0000000000006FB0                 db  82h
.eh_frame:0000000000006FB1                 db    0
.eh_frame:0000000000006FB2                 db    0
.eh_frame:0000000000006FB3                 db    0
.eh_frame:0000000000006FB4                 db    0
.eh_frame:0000000000006FB5                 db    2
.eh_frame:0000000000006FB6                 db  5Fh ; _
.eh_frame:0000000000006FB7                 db  0Eh
.eh_frame:0000000000006FB8                 db  10h
.eh_frame:0000000000006FB9                 db  49h ; I
.eh_frame:0000000000006FBA                 db  0Eh
.eh_frame:0000000000006FBB                 db    8
.eh_frame:0000000000006FBC                 db  14h
.eh_frame:0000000000006FBD                 db    0
.eh_frame:0000000000006FBE                 db    0
.eh_frame:0000000000006FBF                 db    0
.eh_frame:0000000000006FC0                 db  28h ; (
.eh_frame:0000000000006FC1                 db    9
.eh_frame:0000000000006FC2                 db    0
.eh_frame:0000000000006FC3                 db    0
.eh_frame:0000000000006FC4                 db  8Ch
.eh_frame:0000000000006FC5                 db 0E0h
.eh_frame:0000000000006FC6                 db 0FFh
.eh_frame:0000000000006FC7                 db 0FFh
.eh_frame:0000000000006FC8                 db  4Ah ; J
.eh_frame:0000000000006FC9                 db    0
.eh_frame:0000000000006FCA                 db    0
.eh_frame:0000000000006FCB                 db    0
.eh_frame:0000000000006FCC                 db    0
.eh_frame:0000000000006FCD                 db    2
.eh_frame:0000000000006FCE                 db  45h ; E
.eh_frame:0000000000006FCF                 db  0Eh
.eh_frame:0000000000006FD0                 db  10h
.eh_frame:0000000000006FD1                 db    0
.eh_frame:0000000000006FD2                 db    0
.eh_frame:0000000000006FD3                 db    0
.eh_frame:0000000000006FD4                 db  18h
.eh_frame:0000000000006FD5                 db    0
.eh_frame:0000000000006FD6                 db    0
.eh_frame:0000000000006FD7                 db    0
.eh_frame:0000000000006FD8                 db  40h ; @
.eh_frame:0000000000006FD9                 db    9
.eh_frame:0000000000006FDA                 db    0
.eh_frame:0000000000006FDB                 db    0
.eh_frame:0000000000006FDC                 db 0C4h
.eh_frame:0000000000006FDD                 db 0E0h
.eh_frame:0000000000006FDE                 db 0FFh
.eh_frame:0000000000006FDF                 db 0FFh
.eh_frame:0000000000006FE0                 db  17h
.eh_frame:0000000000006FE1                 db    0
.eh_frame:0000000000006FE2                 db    0
.eh_frame:0000000000006FE3                 db    0
.eh_frame:0000000000006FE4                 db    0
.eh_frame:0000000000006FE5                 db  41h ; A
.eh_frame:0000000000006FE6                 db  0Eh
.eh_frame:0000000000006FE7                 db  10h
.eh_frame:0000000000006FE8                 db  83h
.eh_frame:0000000000006FE9                 db    2
.eh_frame:0000000000006FEA                 db  51h ; Q
.eh_frame:0000000000006FEB                 db  0Eh
.eh_frame:0000000000006FEC                 db    8
.eh_frame:0000000000006FED                 db    0
.eh_frame:0000000000006FEE                 db    0
.eh_frame:0000000000006FEF                 db    0
.eh_frame:0000000000006FF0                 db  18h
.eh_frame:0000000000006FF1                 db    0
.eh_frame:0000000000006FF2                 db    0
.eh_frame:0000000000006FF3                 db    0
.eh_frame:0000000000006FF4                 db  5Ch ; \
.eh_frame:0000000000006FF5                 db    9
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db 0C8h
.eh_frame:0000000000006FF9                 db 0E0h
.eh_frame:0000000000006FFA                 db 0FFh
.eh_frame:0000000000006FFB                 db 0FFh
.eh_frame:0000000000006FFC                 db  2Eh ; .
.eh_frame:0000000000006FFD                 db    0
.eh_frame:0000000000006FFE                 db    0
.eh_frame:0000000000006FFF                 db    0
.eh_frame:0000000000007000                 db    0
.eh_frame:0000000000007001                 db  47h ; G
.eh_frame:0000000000007002                 db  0Eh
.eh_frame:0000000000007003                 db  10h
.eh_frame:0000000000007004                 db  61h ; a
.eh_frame:0000000000007005                 db  0Ah
.eh_frame:0000000000007006                 db  0Eh
.eh_frame:0000000000007007                 db    8
.eh_frame:0000000000007008                 db  41h ; A
.eh_frame:0000000000007009                 db  0Bh
.eh_frame:000000000000700A                 db    0
.eh_frame:000000000000700B                 db    0
.eh_frame:000000000000700C                 db  24h ; $
.eh_frame:000000000000700D                 db    0
.eh_frame:000000000000700E                 db    0
.eh_frame:000000000000700F                 db    0
.eh_frame:0000000000007010                 db  78h ; x
.eh_frame:0000000000007011                 db    9
.eh_frame:0000000000007012                 db    0
.eh_frame:0000000000007013                 db    0
.eh_frame:0000000000007014                 db 0DCh
.eh_frame:0000000000007015                 db 0E0h
.eh_frame:0000000000007016                 db 0FFh
.eh_frame:0000000000007017                 db 0FFh
.eh_frame:0000000000007018                 db  28h ; (
.eh_frame:0000000000007019                 db    0
.eh_frame:000000000000701A                 db    0
.eh_frame:000000000000701B                 db    0
.eh_frame:000000000000701C                 db    0
.eh_frame:000000000000701D                 db  41h ; A
.eh_frame:000000000000701E                 db  0Eh
.eh_frame:000000000000701F                 db  10h
.eh_frame:0000000000007020                 db  86h
.eh_frame:0000000000007021                 db    2
.eh_frame:0000000000007022                 db  41h ; A
.eh_frame:0000000000007023                 db  0Eh
.eh_frame:0000000000007024                 db  18h
.eh_frame:0000000000007025                 db  83h
.eh_frame:0000000000007026                 db    3
.eh_frame:0000000000007027                 db  4Dh ; M
.eh_frame:0000000000007028                 db  0Eh
.eh_frame:0000000000007029                 db  20h
.eh_frame:000000000000702A                 db  49h ; I
.eh_frame:000000000000702B                 db  0Eh
.eh_frame:000000000000702C                 db  18h
.eh_frame:000000000000702D                 db  47h ; G
.eh_frame:000000000000702E                 db  0Eh
.eh_frame:000000000000702F                 db  10h
.eh_frame:0000000000007030                 db  41h ; A
.eh_frame:0000000000007031                 db  0Eh
.eh_frame:0000000000007032                 db    8
.eh_frame:0000000000007033                 db    0
.eh_frame:0000000000007034                 db  18h
.eh_frame:0000000000007035                 db    0
.eh_frame:0000000000007036                 db    0
.eh_frame:0000000000007037                 db    0
.eh_frame:0000000000007038                 db 0A0h
.eh_frame:0000000000007039                 db    9
.eh_frame:000000000000703A                 db    0
.eh_frame:000000000000703B                 db    0
.eh_frame:000000000000703C                 db 0E4h
.eh_frame:000000000000703D                 db 0E0h
.eh_frame:000000000000703E                 db 0FFh
.eh_frame:000000000000703F                 db 0FFh
.eh_frame:0000000000007040                 db  13h
.eh_frame:0000000000007041                 db    0
.eh_frame:0000000000007042                 db    0
.eh_frame:0000000000007043                 db    0
.eh_frame:0000000000007044                 db    0
.eh_frame:0000000000007045                 db  41h ; A
.eh_frame:0000000000007046                 db  0Eh
.eh_frame:0000000000007047                 db  10h
.eh_frame:0000000000007048                 db  83h
.eh_frame:0000000000007049                 db    2
.eh_frame:000000000000704A                 db  50h ; P
.eh_frame:000000000000704B                 db  0Eh
.eh_frame:000000000000704C                 db    8
.eh_frame:000000000000704D                 db    0
.eh_frame:000000000000704E                 db    0
.eh_frame:000000000000704F                 db    0
.eh_frame:0000000000007050                 db  14h
.eh_frame:0000000000007051                 db    0
.eh_frame:0000000000007052                 db    0
.eh_frame:0000000000007053                 db    0
.eh_frame:0000000000007054                 db 0BCh
.eh_frame:0000000000007055                 db    9
.eh_frame:0000000000007056                 db    0
.eh_frame:0000000000007057                 db    0
.eh_frame:0000000000007058                 db 0E8h
.eh_frame:0000000000007059                 db 0E0h
.eh_frame:000000000000705A                 db 0FFh
.eh_frame:000000000000705B                 db 0FFh
.eh_frame:000000000000705C                 db  35h ; 5
.eh_frame:000000000000705D                 db    0
.eh_frame:000000000000705E                 db    0
.eh_frame:000000000000705F                 db    0
.eh_frame:0000000000007060                 db    0
.eh_frame:0000000000007061                 db  4Bh ; K
.eh_frame:0000000000007062                 db  0Eh
.eh_frame:0000000000007063                 db  10h
.eh_frame:0000000000007064                 db    0
.eh_frame:0000000000007065                 db    0
.eh_frame:0000000000007066                 db    0
.eh_frame:0000000000007067                 db    0
.eh_frame:0000000000007068                 db  3Ch ; <
.eh_frame:0000000000007069                 db    0
.eh_frame:000000000000706A                 db    0
.eh_frame:000000000000706B                 db    0
.eh_frame:000000000000706C                 db 0D4h
.eh_frame:000000000000706D                 db    9
.eh_frame:000000000000706E                 db    0
.eh_frame:000000000000706F                 db    0
.eh_frame:0000000000007070                 db  10h
.eh_frame:0000000000007071                 db 0E1h
.eh_frame:0000000000007072                 db 0FFh
.eh_frame:0000000000007073                 db 0FFh
.eh_frame:0000000000007074                 db  83h
.eh_frame:0000000000007075                 db    0
.eh_frame:0000000000007076                 db    0
.eh_frame:0000000000007077                 db    0
.eh_frame:0000000000007078                 db    0
.eh_frame:0000000000007079                 db  42h ; B
.eh_frame:000000000000707A                 db  0Eh
.eh_frame:000000000000707B                 db  10h
.eh_frame:000000000000707C                 db  8Dh
.eh_frame:000000000000707D                 db    2
.eh_frame:000000000000707E                 db  42h ; B
.eh_frame:000000000000707F                 db  0Eh
.eh_frame:0000000000007080                 db  18h
.eh_frame:0000000000007081                 db  8Ch
.eh_frame:0000000000007082                 db    3
.eh_frame:0000000000007083                 db  44h ; D
.eh_frame:0000000000007084                 db  0Eh
.eh_frame:0000000000007085                 db  20h
.eh_frame:0000000000007086                 db  86h
.eh_frame:0000000000007087                 db    4
.eh_frame:0000000000007088                 db  41h ; A
.eh_frame:0000000000007089                 db  0Eh
.eh_frame:000000000000708A                 db  28h ; (
.eh_frame:000000000000708B                 db  83h
.eh_frame:000000000000708C                 db    5
.eh_frame:000000000000708D                 db  4Ah ; J
.eh_frame:000000000000708E                 db  0Eh
.eh_frame:000000000000708F                 db  40h ; @
.eh_frame:0000000000007090                 db    2
.eh_frame:0000000000007091                 db  64h ; d
.eh_frame:0000000000007092                 db  0Ah
.eh_frame:0000000000007093                 db  0Eh
.eh_frame:0000000000007094                 db  28h ; (
.eh_frame:0000000000007095                 db  41h ; A
.eh_frame:0000000000007096                 db  0Eh
.eh_frame:0000000000007097                 db  20h
.eh_frame:0000000000007098                 db  41h ; A
.eh_frame:0000000000007099                 db  0Eh
.eh_frame:000000000000709A                 db  18h
.eh_frame:000000000000709B                 db  42h ; B
.eh_frame:000000000000709C                 db  0Eh
.eh_frame:000000000000709D                 db  10h
.eh_frame:000000000000709E                 db  42h ; B
.eh_frame:000000000000709F                 db  0Eh
.eh_frame:00000000000070A0                 db    8
.eh_frame:00000000000070A1                 db  41h ; A
.eh_frame:00000000000070A2                 db  0Bh
.eh_frame:00000000000070A3                 db    0
.eh_frame:00000000000070A4                 db    0
.eh_frame:00000000000070A5                 db    0
.eh_frame:00000000000070A6                 db    0
.eh_frame:00000000000070A7                 db    0
.eh_frame:00000000000070A8                 db  4Ch ; L
.eh_frame:00000000000070A9                 db    0
.eh_frame:00000000000070AA                 db    0
.eh_frame:00000000000070AB                 db    0
.eh_frame:00000000000070AC                 db  14h
.eh_frame:00000000000070AD                 db  0Ah
.eh_frame:00000000000070AE                 db    0
.eh_frame:00000000000070AF                 db    0
.eh_frame:00000000000070B0                 db  60h ; `
.eh_frame:00000000000070B1                 db 0E1h
.eh_frame:00000000000070B2                 db 0FFh
.eh_frame:00000000000070B3                 db 0FFh
.eh_frame:00000000000070B4                 db  7Dh ; }
.eh_frame:00000000000070B5                 db    0
.eh_frame:00000000000070B6                 db    0
.eh_frame:00000000000070B7                 db    0
.eh_frame:00000000000070B8                 db    0
.eh_frame:00000000000070B9                 db  42h ; B
.eh_frame:00000000000070BA                 db  0Eh
.eh_frame:00000000000070BB                 db  10h
.eh_frame:00000000000070BC                 db  8Ch
.eh_frame:00000000000070BD                 db    2
.eh_frame:00000000000070BE                 db  41h ; A
.eh_frame:00000000000070BF                 db  0Eh
.eh_frame:00000000000070C0                 db  18h
.eh_frame:00000000000070C1                 db  86h
.eh_frame:00000000000070C2                 db    3
.eh_frame:00000000000070C3                 db  44h ; D
.eh_frame:00000000000070C4                 db  0Eh
.eh_frame:00000000000070C5                 db  20h
.eh_frame:00000000000070C6                 db  83h
.eh_frame:00000000000070C7                 db    4
.eh_frame:00000000000070C8                 db  69h ; i
.eh_frame:00000000000070C9                 db  0Ah
.eh_frame:00000000000070CA                 db  0Eh
.eh_frame:00000000000070CB                 db  18h
.eh_frame:00000000000070CC                 db  41h ; A
.eh_frame:00000000000070CD                 db  0Eh
.eh_frame:00000000000070CE                 db  10h
.eh_frame:00000000000070CF                 db  42h ; B
.eh_frame:00000000000070D0                 db  0Eh
.eh_frame:00000000000070D1                 db    8
.eh_frame:00000000000070D2                 db  45h ; E
.eh_frame:00000000000070D3                 db  0Bh
.eh_frame:00000000000070D4                 db  55h ; U
.eh_frame:00000000000070D5                 db  0Ah
.eh_frame:00000000000070D6                 db  0Eh
.eh_frame:00000000000070D7                 db  18h
.eh_frame:00000000000070D8                 db  41h ; A
.eh_frame:00000000000070D9                 db  0Eh
.eh_frame:00000000000070DA                 db  10h
.eh_frame:00000000000070DB                 db  42h ; B
.eh_frame:00000000000070DC                 db  0Eh
.eh_frame:00000000000070DD                 db    8
.eh_frame:00000000000070DE                 db  48h ; H
.eh_frame:00000000000070DF                 db  0Bh
.eh_frame:00000000000070E0                 db  41h ; A
.eh_frame:00000000000070E1                 db  0Ah
.eh_frame:00000000000070E2                 db  0Eh
.eh_frame:00000000000070E3                 db  18h
.eh_frame:00000000000070E4                 db  46h ; F
.eh_frame:00000000000070E5                 db  0Eh
.eh_frame:00000000000070E6                 db  10h
.eh_frame:00000000000070E7                 db  42h ; B
.eh_frame:00000000000070E8                 db  0Eh
.eh_frame:00000000000070E9                 db    8
.eh_frame:00000000000070EA                 db  47h ; G
.eh_frame:00000000000070EB                 db  0Bh
.eh_frame:00000000000070EC                 db  49h ; I
.eh_frame:00000000000070ED                 db  0Eh
.eh_frame:00000000000070EE                 db  18h
.eh_frame:00000000000070EF                 db  41h ; A
.eh_frame:00000000000070F0                 db  0Eh
.eh_frame:00000000000070F1                 db  10h
.eh_frame:00000000000070F2                 db  42h ; B
.eh_frame:00000000000070F3                 db  0Eh
.eh_frame:00000000000070F4                 db    8
.eh_frame:00000000000070F5                 db    0
.eh_frame:00000000000070F6                 db    0
.eh_frame:00000000000070F7                 db    0
.eh_frame:00000000000070F8                 db  1Ch
.eh_frame:00000000000070F9                 db    0
.eh_frame:00000000000070FA                 db    0
.eh_frame:00000000000070FB                 db    0
.eh_frame:00000000000070FC                 db  64h ; d
.eh_frame:00000000000070FD                 db  0Ah
.eh_frame:00000000000070FE                 db    0
.eh_frame:00000000000070FF                 db    0
.eh_frame:0000000000007100                 db  90h
.eh_frame:0000000000007101                 db 0E1h
.eh_frame:0000000000007102                 db 0FFh
.eh_frame:0000000000007103                 db 0FFh
.eh_frame:0000000000007104                 db  60h ; `
.eh_frame:0000000000007105                 db    0
.eh_frame:0000000000007106                 db    0
.eh_frame:0000000000007107                 db    0
.eh_frame:0000000000007108                 db    0
.eh_frame:0000000000007109                 db  44h ; D
.eh_frame:000000000000710A                 db  0Eh
.eh_frame:000000000000710B                 db  10h
.eh_frame:000000000000710C                 db  75h ; u
.eh_frame:000000000000710D                 db  0Ah
.eh_frame:000000000000710E                 db  0Eh
.eh_frame:000000000000710F                 db    8
.eh_frame:0000000000007110                 db  47h ; G
.eh_frame:0000000000007111                 db  0Bh
.eh_frame:0000000000007112                 db  5Fh ; _
.eh_frame:0000000000007113                 db  0Eh
.eh_frame:0000000000007114                 db    8
.eh_frame:0000000000007115                 db    0
.eh_frame:0000000000007116                 db    0
.eh_frame:0000000000007117                 db    0
.eh_frame:0000000000007118                 db  1Ch
.eh_frame:0000000000007119                 db    0
.eh_frame:000000000000711A                 db    0
.eh_frame:000000000000711B                 db    0
.eh_frame:000000000000711C                 db  84h
.eh_frame:000000000000711D                 db  0Ah
.eh_frame:000000000000711E                 db    0
.eh_frame:000000000000711F                 db    0
.eh_frame:0000000000007120                 db 0D0h
.eh_frame:0000000000007121                 db 0E1h
.eh_frame:0000000000007122                 db 0FFh
.eh_frame:0000000000007123                 db 0FFh
.eh_frame:0000000000007124                 db  3Ch ; <
.eh_frame:0000000000007125                 db    0
.eh_frame:0000000000007126                 db    0
.eh_frame:0000000000007127                 db    0
.eh_frame:0000000000007128                 db    0
.eh_frame:0000000000007129                 db  44h ; D
.eh_frame:000000000000712A                 db  0Eh
.eh_frame:000000000000712B                 db  10h
.eh_frame:000000000000712C                 db  61h ; a
.eh_frame:000000000000712D                 db  0Ah
.eh_frame:000000000000712E                 db  0Eh
.eh_frame:000000000000712F                 db    8
.eh_frame:0000000000007130                 db  4Bh ; K
.eh_frame:0000000000007131                 db  0Bh
.eh_frame:0000000000007132                 db  4Bh ; K
.eh_frame:0000000000007133                 db  0Eh
.eh_frame:0000000000007134                 db    8
.eh_frame:0000000000007135                 db    0
.eh_frame:0000000000007136                 db    0
.eh_frame:0000000000007137                 db    0
.eh_frame:0000000000007138                 db  34h ; 4
.eh_frame:0000000000007139                 db    0
.eh_frame:000000000000713A                 db    0
.eh_frame:000000000000713B                 db    0
.eh_frame:000000000000713C                 db 0A4h
.eh_frame:000000000000713D                 db  0Ah
.eh_frame:000000000000713E                 db    0
.eh_frame:000000000000713F                 db    0
.eh_frame:0000000000007140                 db 0F0h
.eh_frame:0000000000007141                 db 0E1h
.eh_frame:0000000000007142                 db 0FFh
.eh_frame:0000000000007143                 db 0FFh
.eh_frame:0000000000007144                 db  7Bh ; {
.eh_frame:0000000000007145                 db    0
.eh_frame:0000000000007146                 db    0
.eh_frame:0000000000007147                 db    0
.eh_frame:0000000000007148                 db    0
.eh_frame:0000000000007149                 db  42h ; B
.eh_frame:000000000000714A                 db  0Eh
.eh_frame:000000000000714B                 db  10h
.eh_frame:000000000000714C                 db  8Ch
.eh_frame:000000000000714D                 db    2
.eh_frame:000000000000714E                 db  41h ; A
.eh_frame:000000000000714F                 db  0Eh
.eh_frame:0000000000007150                 db  18h
.eh_frame:0000000000007151                 db  86h
.eh_frame:0000000000007152                 db    3
.eh_frame:0000000000007153                 db  41h ; A
.eh_frame:0000000000007154                 db  0Eh
.eh_frame:0000000000007155                 db  20h
.eh_frame:0000000000007156                 db  83h
.eh_frame:0000000000007157                 db    4
.eh_frame:0000000000007158                 db  7Dh ; }
.eh_frame:0000000000007159                 db  0Ah
.eh_frame:000000000000715A                 db  0Eh
.eh_frame:000000000000715B                 db  18h
.eh_frame:000000000000715C                 db  41h ; A
.eh_frame:000000000000715D                 db  0Eh
.eh_frame:000000000000715E                 db  10h
.eh_frame:000000000000715F                 db  42h ; B
.eh_frame:0000000000007160                 db  0Eh
.eh_frame:0000000000007161                 db    8
.eh_frame:0000000000007162                 db  44h ; D
.eh_frame:0000000000007163                 db  0Bh
.eh_frame:0000000000007164                 db  60h ; `
.eh_frame:0000000000007165                 db  0Ah
.eh_frame:0000000000007166                 db  0Eh
.eh_frame:0000000000007167                 db  18h
.eh_frame:0000000000007168                 db  41h ; A
.eh_frame:0000000000007169                 db  0Eh
.eh_frame:000000000000716A                 db  10h
.eh_frame:000000000000716B                 db  42h ; B
.eh_frame:000000000000716C                 db  0Eh
.eh_frame:000000000000716D                 db    8
.eh_frame:000000000000716E                 db  45h ; E
.eh_frame:000000000000716F                 db  0Bh
.eh_frame:0000000000007170                 db  1Ch
.eh_frame:0000000000007171                 db    0
.eh_frame:0000000000007172                 db    0
.eh_frame:0000000000007173                 db    0
.eh_frame:0000000000007174                 db 0DCh
.eh_frame:0000000000007175                 db  0Ah
.eh_frame:0000000000007176                 db    0
.eh_frame:0000000000007177                 db    0
.eh_frame:0000000000007178                 db  38h ; 8
.eh_frame:0000000000007179                 db 0E2h
.eh_frame:000000000000717A                 db 0FFh
.eh_frame:000000000000717B                 db 0FFh
.eh_frame:000000000000717C                 db  40h ; @
.eh_frame:000000000000717D                 db    0
.eh_frame:000000000000717E                 db    0
.eh_frame:000000000000717F                 db    0
.eh_frame:0000000000007180                 db    0
.eh_frame:0000000000007181                 db  44h ; D
.eh_frame:0000000000007182                 db  0Eh
.eh_frame:0000000000007183                 db  10h
.eh_frame:0000000000007184                 db  83h
.eh_frame:0000000000007185                 db    2
.eh_frame:0000000000007186                 db  5Ah ; Z
.eh_frame:0000000000007187                 db  0Ah
.eh_frame:0000000000007188                 db  0Eh
.eh_frame:0000000000007189                 db    8
.eh_frame:000000000000718A                 db  4Ah ; J
.eh_frame:000000000000718B                 db  0Bh
.eh_frame:000000000000718C                 db  53h ; S
.eh_frame:000000000000718D                 db  0Eh
.eh_frame:000000000000718E                 db    8
.eh_frame:000000000000718F                 db    0
.eh_frame:0000000000007190                 db  2Ch ; ,
.eh_frame:0000000000007191                 db    0
.eh_frame:0000000000007192                 db    0
.eh_frame:0000000000007193                 db    0
.eh_frame:0000000000007194                 db 0FCh
.eh_frame:0000000000007195                 db  0Ah
.eh_frame:0000000000007196                 db    0
.eh_frame:0000000000007197                 db    0
.eh_frame:0000000000007198                 db  58h ; X
.eh_frame:0000000000007199                 db 0E2h
.eh_frame:000000000000719A                 db 0FFh
.eh_frame:000000000000719B                 db 0FFh
.eh_frame:000000000000719C                 db  57h ; W
.eh_frame:000000000000719D                 db    0
.eh_frame:000000000000719E                 db    0
.eh_frame:000000000000719F                 db    0
.eh_frame:00000000000071A0                 db    0
.eh_frame:00000000000071A1                 db  63h ; c
.eh_frame:00000000000071A2                 db  0Eh
.eh_frame:00000000000071A3                 db  10h
.eh_frame:00000000000071A4                 db  8Ch
.eh_frame:00000000000071A5                 db    2
.eh_frame:00000000000071A6                 db  41h ; A
.eh_frame:00000000000071A7                 db  0Eh
.eh_frame:00000000000071A8                 db  18h
.eh_frame:00000000000071A9                 db  86h
.eh_frame:00000000000071AA                 db    3
.eh_frame:00000000000071AB                 db  44h ; D
.eh_frame:00000000000071AC                 db  0Eh
.eh_frame:00000000000071AD                 db  20h
.eh_frame:00000000000071AE                 db  83h
.eh_frame:00000000000071AF                 db    4
.eh_frame:00000000000071B0                 db  6Bh ; k
.eh_frame:00000000000071B1                 db  0Eh
.eh_frame:00000000000071B2                 db  18h
.eh_frame:00000000000071B3                 db  41h ; A
.eh_frame:00000000000071B4                 db  0Eh
.eh_frame:00000000000071B5                 db  10h
.eh_frame:00000000000071B6                 db  42h ; B
.eh_frame:00000000000071B7                 db  0Eh
.eh_frame:00000000000071B8                 db    8
.eh_frame:00000000000071B9                 db    0
.eh_frame:00000000000071BA                 db    0
.eh_frame:00000000000071BB                 db    0
.eh_frame:00000000000071BC                 db    0
.eh_frame:00000000000071BD                 db    0
.eh_frame:00000000000071BE                 db    0
.eh_frame:00000000000071BF                 db    0
.eh_frame:00000000000071C0                 db  44h ; D
.eh_frame:00000000000071C1                 db    0
.eh_frame:00000000000071C2                 db    0
.eh_frame:00000000000071C3                 db    0
.eh_frame:00000000000071C4                 db  2Ch ; ,
.eh_frame:00000000000071C5                 db  0Bh
.eh_frame:00000000000071C6                 db    0
.eh_frame:00000000000071C7                 db    0
.eh_frame:00000000000071C8                 db  88h
.eh_frame:00000000000071C9                 db 0E2h
.eh_frame:00000000000071CA                 db 0FFh
.eh_frame:00000000000071CB                 db 0FFh
.eh_frame:00000000000071CC                 db  65h ; e
.eh_frame:00000000000071CD                 db    0
.eh_frame:00000000000071CE                 db    0
.eh_frame:00000000000071CF                 db    0
.eh_frame:00000000000071D0                 db    0
.eh_frame:00000000000071D1                 db  42h ; B
.eh_frame:00000000000071D2                 db  0Eh
.eh_frame:00000000000071D3                 db  10h
.eh_frame:00000000000071D4                 db  8Fh
.eh_frame:00000000000071D5                 db    2
.eh_frame:00000000000071D6                 db  42h ; B
.eh_frame:00000000000071D7                 db  0Eh
.eh_frame:00000000000071D8                 db  18h
.eh_frame:00000000000071D9                 db  8Eh
.eh_frame:00000000000071DA                 db    3
.eh_frame:00000000000071DB                 db  45h ; E
.eh_frame:00000000000071DC                 db  0Eh
.eh_frame:00000000000071DD                 db  20h
.eh_frame:00000000000071DE                 db  8Dh
.eh_frame:00000000000071DF                 db    4
.eh_frame:00000000000071E0                 db  42h ; B
.eh_frame:00000000000071E1                 db  0Eh
.eh_frame:00000000000071E2                 db  28h ; (
.eh_frame:00000000000071E3                 db  8Ch
.eh_frame:00000000000071E4                 db    5
.eh_frame:00000000000071E5                 db  48h ; H
.eh_frame:00000000000071E6                 db  0Eh
.eh_frame:00000000000071E7                 db  30h ; 0
.eh_frame:00000000000071E8                 db  86h
.eh_frame:00000000000071E9                 db    6
.eh_frame:00000000000071EA                 db  48h ; H
.eh_frame:00000000000071EB                 db  0Eh
.eh_frame:00000000000071EC                 db  38h ; 8
.eh_frame:00000000000071ED                 db  83h
.eh_frame:00000000000071EE                 db    7
.eh_frame:00000000000071EF                 db  4Dh ; M
.eh_frame:00000000000071F0                 db  0Eh
.eh_frame:00000000000071F1                 db  40h ; @
.eh_frame:00000000000071F2                 db  72h ; r
.eh_frame:00000000000071F3                 db  0Eh
.eh_frame:00000000000071F4                 db  38h ; 8
.eh_frame:00000000000071F5                 db  41h ; A
.eh_frame:00000000000071F6                 db  0Eh
.eh_frame:00000000000071F7                 db  30h ; 0
.eh_frame:00000000000071F8                 db  41h ; A
.eh_frame:00000000000071F9                 db  0Eh
.eh_frame:00000000000071FA                 db  28h ; (
.eh_frame:00000000000071FB                 db  42h ; B
.eh_frame:00000000000071FC                 db  0Eh
.eh_frame:00000000000071FD                 db  20h
.eh_frame:00000000000071FE                 db  42h ; B
.eh_frame:00000000000071FF                 db  0Eh
.eh_frame:0000000000007200                 db  18h
.eh_frame:0000000000007201                 db  42h ; B
.eh_frame:0000000000007202                 db  0Eh
.eh_frame:0000000000007203                 db  10h
.eh_frame:0000000000007204                 db  42h ; B
.eh_frame:0000000000007205                 db  0Eh
.eh_frame:0000000000007206                 db    8
.eh_frame:0000000000007207                 db    0
.eh_frame:0000000000007208                 db  14h
.eh_frame:0000000000007209                 db    0
.eh_frame:000000000000720A                 db    0
.eh_frame:000000000000720B                 db    0
.eh_frame:000000000000720C                 db  74h ; t
.eh_frame:000000000000720D                 db  0Bh
.eh_frame:000000000000720E                 db    0
.eh_frame:000000000000720F                 db    0
.eh_frame:0000000000007210                 db 0B0h
.eh_frame:0000000000007211                 db 0E2h
.eh_frame:0000000000007212                 db 0FFh
.eh_frame:0000000000007213                 db 0FFh
.eh_frame:0000000000007214                 db    2
.eh_frame:0000000000007215                 db    0
.eh_frame:0000000000007216                 db    0
.eh_frame:0000000000007217                 db    0
.eh_frame:0000000000007218                 db    0
.eh_frame:0000000000007219                 db    0
.eh_frame:000000000000721A                 db    0
.eh_frame:000000000000721B                 db    0
.eh_frame:000000000000721C                 db    0
.eh_frame:000000000000721D                 db    0
.eh_frame:000000000000721E                 db    0
.eh_frame:000000000000721F                 db    0
.eh_frame:0000000000007220                 db  10h
.eh_frame:0000000000007221                 db    0
.eh_frame:0000000000007222                 db    0
.eh_frame:0000000000007223                 db    0
.eh_frame:0000000000007224                 db  8Ch
.eh_frame:0000000000007225                 db  0Bh
.eh_frame:0000000000007226                 db    0
.eh_frame:0000000000007227                 db    0
.eh_frame:0000000000007228                 db 0A8h
.eh_frame:0000000000007229                 db 0E2h
.eh_frame:000000000000722A                 db 0FFh
.eh_frame:000000000000722B                 db 0FFh
.eh_frame:000000000000722C                 db  0Eh
.eh_frame:000000000000722D                 db    0
.eh_frame:000000000000722E                 db    0
.eh_frame:000000000000722F                 db    0
.eh_frame:0000000000007230                 db    0
.eh_frame:0000000000007231                 db    0
.eh_frame:0000000000007232                 db    0
.eh_frame:0000000000007233                 db    0
.eh_frame:0000000000007234 __FRAME_END__   db    0
.eh_frame:0000000000007235                 db    0
.eh_frame:0000000000007236                 db    0
.eh_frame:0000000000007237                 db    0
.eh_frame:0000000000007237 _eh_frame       ends
.eh_frame:0000000000007237
.init_array:0000000000207A90 ; ELF Initialization Function Table
.init_array:0000000000207A90 ; ===========================================================================
.init_array:0000000000207A90
.init_array:0000000000207A90 ; Segment type: Pure data
.init_array:0000000000207A90 ; Segment permissions: Read/Write
.init_array:0000000000207A90 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207A90                 assume cs:_init_array
.init_array:0000000000207A90                 ;org 207A90h
.init_array:0000000000207A90 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207A90                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207A90                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207A90 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207A90
.fini_array:0000000000207A98 ; ELF Termination Function Table
.fini_array:0000000000207A98 ; ===========================================================================
.fini_array:0000000000207A98
.fini_array:0000000000207A98 ; Segment type: Pure data
.fini_array:0000000000207A98 ; Segment permissions: Read/Write
.fini_array:0000000000207A98 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207A98                 assume cs:_fini_array
.fini_array:0000000000207A98                 ;org 207A98h
.fini_array:0000000000207A98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207A98                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207A98 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207A98
.data.rel.ro:0000000000207AA0 ; ===========================================================================
.data.rel.ro:0000000000207AA0
.data.rel.ro:0000000000207AA0 ; Segment type: Pure data
.data.rel.ro:0000000000207AA0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207AA0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207AA0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207AA0                 ;org 207AA0h
.data.rel.ro:0000000000207AA0 ; struct option long_options_7050
.data.rel.ro:0000000000207AA0 long_options_7050 dq offset aNumberNonblank; name
.data.rel.ro:0000000000207AA0                                         ; DATA XREF: main+A9↑o
.data.rel.ro:0000000000207AA0                 dd 0                    ; has_arg ; "number-nonblank"
.data.rel.ro:0000000000207AA0                 db 4 dup(0)
.data.rel.ro:0000000000207AA0                 dq 0                    ; flag
.data.rel.ro:0000000000207AA0                 dd 62h                  ; val
.data.rel.ro:0000000000207AA0                 db 4 dup(0)
.data.rel.ro:0000000000207AC0                 dq offset aNumber       ; "number"
.data.rel.ro:0000000000207AC8                 db    0
.data.rel.ro:0000000000207AC9                 db    0
.data.rel.ro:0000000000207ACA                 db    0
.data.rel.ro:0000000000207ACB                 db    0
.data.rel.ro:0000000000207ACC                 db    0
.data.rel.ro:0000000000207ACD                 db    0
.data.rel.ro:0000000000207ACE                 db    0
.data.rel.ro:0000000000207ACF                 db    0
.data.rel.ro:0000000000207AD0                 db    0
.data.rel.ro:0000000000207AD1                 db    0
.data.rel.ro:0000000000207AD2                 db    0
.data.rel.ro:0000000000207AD3                 db    0
.data.rel.ro:0000000000207AD4                 db    0
.data.rel.ro:0000000000207AD5                 db    0
.data.rel.ro:0000000000207AD6                 db    0
.data.rel.ro:0000000000207AD7                 db    0
.data.rel.ro:0000000000207AD8                 db  6Eh ; n
.data.rel.ro:0000000000207AD9                 db    0
.data.rel.ro:0000000000207ADA                 db    0
.data.rel.ro:0000000000207ADB                 db    0
.data.rel.ro:0000000000207ADC                 db    0
.data.rel.ro:0000000000207ADD                 db    0
.data.rel.ro:0000000000207ADE                 db    0
.data.rel.ro:0000000000207ADF                 db    0
.data.rel.ro:0000000000207AE0                 dq offset aSqueezeBlank ; "squeeze-blank"
.data.rel.ro:0000000000207AE8                 db    0
.data.rel.ro:0000000000207AE9                 db    0
.data.rel.ro:0000000000207AEA                 db    0
.data.rel.ro:0000000000207AEB                 db    0
.data.rel.ro:0000000000207AEC                 db    0
.data.rel.ro:0000000000207AED                 db    0
.data.rel.ro:0000000000207AEE                 db    0
.data.rel.ro:0000000000207AEF                 db    0
.data.rel.ro:0000000000207AF0                 db    0
.data.rel.ro:0000000000207AF1                 db    0
.data.rel.ro:0000000000207AF2                 db    0
.data.rel.ro:0000000000207AF3                 db    0
.data.rel.ro:0000000000207AF4                 db    0
.data.rel.ro:0000000000207AF5                 db    0
.data.rel.ro:0000000000207AF6                 db    0
.data.rel.ro:0000000000207AF7                 db    0
.data.rel.ro:0000000000207AF8                 db  73h ; s
.data.rel.ro:0000000000207AF9                 db    0
.data.rel.ro:0000000000207AFA                 db    0
.data.rel.ro:0000000000207AFB                 db    0
.data.rel.ro:0000000000207AFC                 db    0
.data.rel.ro:0000000000207AFD                 db    0
.data.rel.ro:0000000000207AFE                 db    0
.data.rel.ro:0000000000207AFF                 db    0
.data.rel.ro:0000000000207B00                 dq offset aShowNonprintin ; "show-nonprinting"
.data.rel.ro:0000000000207B08                 db    0
.data.rel.ro:0000000000207B09                 db    0
.data.rel.ro:0000000000207B0A                 db    0
.data.rel.ro:0000000000207B0B                 db    0
.data.rel.ro:0000000000207B0C                 db    0
.data.rel.ro:0000000000207B0D                 db    0
.data.rel.ro:0000000000207B0E                 db    0
.data.rel.ro:0000000000207B0F                 db    0
.data.rel.ro:0000000000207B10                 db    0
.data.rel.ro:0000000000207B11                 db    0
.data.rel.ro:0000000000207B12                 db    0
.data.rel.ro:0000000000207B13                 db    0
.data.rel.ro:0000000000207B14                 db    0
.data.rel.ro:0000000000207B15                 db    0
.data.rel.ro:0000000000207B16                 db    0
.data.rel.ro:0000000000207B17                 db    0
.data.rel.ro:0000000000207B18                 db  76h ; v
.data.rel.ro:0000000000207B19                 db    0
.data.rel.ro:0000000000207B1A                 db    0
.data.rel.ro:0000000000207B1B                 db    0
.data.rel.ro:0000000000207B1C                 db    0
.data.rel.ro:0000000000207B1D                 db    0
.data.rel.ro:0000000000207B1E                 db    0
.data.rel.ro:0000000000207B1F                 db    0
.data.rel.ro:0000000000207B20                 dq offset aShowEnds     ; "show-ends"
.data.rel.ro:0000000000207B28                 db    0
.data.rel.ro:0000000000207B29                 db    0
.data.rel.ro:0000000000207B2A                 db    0
.data.rel.ro:0000000000207B2B                 db    0
.data.rel.ro:0000000000207B2C                 db    0
.data.rel.ro:0000000000207B2D                 db    0
.data.rel.ro:0000000000207B2E                 db    0
.data.rel.ro:0000000000207B2F                 db    0
.data.rel.ro:0000000000207B30                 db    0
.data.rel.ro:0000000000207B31                 db    0
.data.rel.ro:0000000000207B32                 db    0
.data.rel.ro:0000000000207B33                 db    0
.data.rel.ro:0000000000207B34                 db    0
.data.rel.ro:0000000000207B35                 db    0
.data.rel.ro:0000000000207B36                 db    0
.data.rel.ro:0000000000207B37                 db    0
.data.rel.ro:0000000000207B38                 db  45h ; E
.data.rel.ro:0000000000207B39                 db    0
.data.rel.ro:0000000000207B3A                 db    0
.data.rel.ro:0000000000207B3B                 db    0
.data.rel.ro:0000000000207B3C                 db    0
.data.rel.ro:0000000000207B3D                 db    0
.data.rel.ro:0000000000207B3E                 db    0
.data.rel.ro:0000000000207B3F                 db    0
.data.rel.ro:0000000000207B40                 dq offset aShowTabs     ; "show-tabs"
.data.rel.ro:0000000000207B48                 db    0
.data.rel.ro:0000000000207B49                 db    0
.data.rel.ro:0000000000207B4A                 db    0
.data.rel.ro:0000000000207B4B                 db    0
.data.rel.ro:0000000000207B4C                 db    0
.data.rel.ro:0000000000207B4D                 db    0
.data.rel.ro:0000000000207B4E                 db    0
.data.rel.ro:0000000000207B4F                 db    0
.data.rel.ro:0000000000207B50                 db    0
.data.rel.ro:0000000000207B51                 db    0
.data.rel.ro:0000000000207B52                 db    0
.data.rel.ro:0000000000207B53                 db    0
.data.rel.ro:0000000000207B54                 db    0
.data.rel.ro:0000000000207B55                 db    0
.data.rel.ro:0000000000207B56                 db    0
.data.rel.ro:0000000000207B57                 db    0
.data.rel.ro:0000000000207B58                 db  54h ; T
.data.rel.ro:0000000000207B59                 db    0
.data.rel.ro:0000000000207B5A                 db    0
.data.rel.ro:0000000000207B5B                 db    0
.data.rel.ro:0000000000207B5C                 db    0
.data.rel.ro:0000000000207B5D                 db    0
.data.rel.ro:0000000000207B5E                 db    0
.data.rel.ro:0000000000207B5F                 db    0
.data.rel.ro:0000000000207B60                 dq offset aShowAll      ; "show-all"
.data.rel.ro:0000000000207B68                 db    0
.data.rel.ro:0000000000207B69                 db    0
.data.rel.ro:0000000000207B6A                 db    0
.data.rel.ro:0000000000207B6B                 db    0
.data.rel.ro:0000000000207B6C                 db    0
.data.rel.ro:0000000000207B6D                 db    0
.data.rel.ro:0000000000207B6E                 db    0
.data.rel.ro:0000000000207B6F                 db    0
.data.rel.ro:0000000000207B70                 db    0
.data.rel.ro:0000000000207B71                 db    0
.data.rel.ro:0000000000207B72                 db    0
.data.rel.ro:0000000000207B73                 db    0
.data.rel.ro:0000000000207B74                 db    0
.data.rel.ro:0000000000207B75                 db    0
.data.rel.ro:0000000000207B76                 db    0
.data.rel.ro:0000000000207B77                 db    0
.data.rel.ro:0000000000207B78                 db  41h ; A
.data.rel.ro:0000000000207B79                 db    0
.data.rel.ro:0000000000207B7A                 db    0
.data.rel.ro:0000000000207B7B                 db    0
.data.rel.ro:0000000000207B7C                 db    0
.data.rel.ro:0000000000207B7D                 db    0
.data.rel.ro:0000000000207B7E                 db    0
.data.rel.ro:0000000000207B7F                 db    0
.data.rel.ro:0000000000207B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207B88                 db    0
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  7Eh ; ~
.data.rel.ro:0000000000207B99                 db 0FFh
.data.rel.ro:0000000000207B9A                 db 0FFh
.data.rel.ro:0000000000207B9B                 db 0FFh
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Dh ; }
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 db    0
.data.rel.ro:0000000000207BC1                 db    0
.data.rel.ro:0000000000207BC2                 db    0
.data.rel.ro:0000000000207BC3                 db    0
.data.rel.ro:0000000000207BC4                 db    0
.data.rel.ro:0000000000207BC5                 db    0
.data.rel.ro:0000000000207BC6                 db    0
.data.rel.ro:0000000000207BC7                 db    0
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db    0
.data.rel.ro:0000000000207BD9                 db    0
.data.rel.ro:0000000000207BDA                 db    0
.data.rel.ro:0000000000207BDB                 db    0
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 public quoting_style_args
.data.rel.ro:0000000000207BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C30                 db    0
.data.rel.ro:0000000000207C31                 db    0
.data.rel.ro:0000000000207C32                 db    0
.data.rel.ro:0000000000207C33                 db    0
.data.rel.ro:0000000000207C34                 db    0
.data.rel.ro:0000000000207C35                 db    0
.data.rel.ro:0000000000207C36                 db    0
.data.rel.ro:0000000000207C37                 db    0
.data.rel.ro:0000000000207C37 _data_rel_ro    ends
.data.rel.ro:0000000000207C37
LOAD:0000000000207C38 ; ELF Dynamic Information
LOAD:0000000000207C38 ; ===========================================================================
LOAD:0000000000207C38
LOAD:0000000000207C38 ; Segment type: Pure data
LOAD:0000000000207C38 ; Segment permissions: Read/Write
LOAD:0000000000207C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C38                 assume cs:LOAD
LOAD:0000000000207C38                 ;org 207C38h
LOAD:0000000000207C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C48                 Elf64_Dyn <0Ch, 1450h>  ; DT_INIT
LOAD:0000000000207C58                 Elf64_Dyn <0Dh, 54E0h>  ; DT_FINI
LOAD:0000000000207C68                 Elf64_Dyn <19h, 207A90h> ; DT_INIT_ARRAY
LOAD:0000000000207C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207C88                 Elf64_Dyn <1Ah, 207A98h> ; DT_FINI_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CB8                 Elf64_Dyn <5, 8A8h>     ; DT_STRTAB
LOAD:0000000000207CC8                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000207CD8                 Elf64_Dyn <0Ah, 2BAh>   ; DT_STRSZ
LOAD:0000000000207CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D08                 Elf64_Dyn <3, 207E28h>  ; DT_PLTGOT
LOAD:0000000000207D18                 Elf64_Dyn <2, 498h>     ; DT_PLTRELSZ
LOAD:0000000000207D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D38                 Elf64_Dyn <17h, 0FB8h>  ; DT_JMPREL
LOAD:0000000000207D48                 Elf64_Dyn <7, 0C40h>    ; DT_RELA
LOAD:0000000000207D58                 Elf64_Dyn <8, 378h>     ; DT_RELASZ
LOAD:0000000000207D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207D98                 Elf64_Dyn <6FFFFFFEh, 0BE0h> ; DT_VERNEED
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFF0h, 0B62h> ; DT_VERSYM
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFF9h, 1Bh> ; DT_RELACOUNT
LOAD:0000000000207DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207DE8                 db    0
LOAD:0000000000207DE9                 db    0
LOAD:0000000000207DEA                 db    0
LOAD:0000000000207DEB                 db    0
LOAD:0000000000207DEC                 db    0
LOAD:0000000000207DED                 db    0
LOAD:0000000000207DEE                 db    0
LOAD:0000000000207DEF                 db    0
LOAD:0000000000207DF0                 db    0
LOAD:0000000000207DF1                 db    0
LOAD:0000000000207DF2                 db    0
LOAD:0000000000207DF3                 db    0
LOAD:0000000000207DF4                 db    0
LOAD:0000000000207DF5                 db    0
LOAD:0000000000207DF6                 db    0
LOAD:0000000000207DF7                 db    0
LOAD:0000000000207DF8                 db    0
LOAD:0000000000207DF9                 db    0
LOAD:0000000000207DFA                 db    0
LOAD:0000000000207DFB                 db    0
LOAD:0000000000207DFC                 db    0
LOAD:0000000000207DFD                 db    0
LOAD:0000000000207DFE                 db    0
LOAD:0000000000207DFF                 db    0
LOAD:0000000000207E00                 db    0
LOAD:0000000000207E01                 db    0
LOAD:0000000000207E02                 db    0
LOAD:0000000000207E03                 db    0
LOAD:0000000000207E04                 db    0
LOAD:0000000000207E05                 db    0
LOAD:0000000000207E06                 db    0
LOAD:0000000000207E07                 db    0
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E27 LOAD            ends
LOAD:0000000000207E27
.got:0000000000207E28 ; ===========================================================================
.got:0000000000207E28
.got:0000000000207E28 ; Segment type: Pure data
.got:0000000000207E28 ; Segment permissions: Read/Write
.got:0000000000207E28 _got            segment qword public 'DATA' use64
.got:0000000000207E28                 assume cs:_got
.got:0000000000207E28                 ;org 207E28h
.got:0000000000207E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E30 qword_207E30    dq 0                    ; DATA XREF: sub_1470↑r
.got:0000000000207E38 qword_207E38    dq 0                    ; DATA XREF: sub_1470+6↑r
.got:0000000000207E40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E50 __errno_location_ptr dq offset __errno_location
.got:0000000000207E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E70 write_ptr       dq offset write         ; DATA XREF: _write↑r
.got:0000000000207E78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207E90 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:0000000000207E98 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EA0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EA0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EA8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EB0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EB8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EC0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EC8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207ED0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207ED8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207EE0 ioctl_ptr       dq offset ioctl         ; DATA XREF: _ioctl↑r
.got:0000000000207EE8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000207EF0 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000207EF0                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000207EF8 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:0000000000207F00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F08 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F08                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F18 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F20 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F28 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F30 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F38 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F40 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000207F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F50 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F58 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F68 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000207F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F78 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000207F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F90 getpagesize_ptr dq offset getpagesize   ; DATA XREF: _getpagesize↑r
.got:0000000000207F98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207FA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FD0                                         ; DATA XREF: start+24↑r
.got:0000000000207FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FE8 _got            ends
.got:0000000000207FE8
LOAD:0000000000207FF0 ; ===========================================================================
LOAD:0000000000207FF0
LOAD:0000000000207FF0 ; Segment type: Pure data
LOAD:0000000000207FF0 ; Segment permissions: Read/Write
LOAD:0000000000207FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FF0                 assume cs:LOAD
LOAD:0000000000207FF0                 ;org 207FF0h
LOAD:0000000000207FF0                 align 20h
LOAD:0000000000207FF0 LOAD            ends
LOAD:0000000000207FF0
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010 line_buf        db '                 0',9,0
.data:0000000000208010                                         ; DATA XREF: next_line_num:loc_2520↑o
.data:0000000000208010                                         ; next_line_num:loc_2558↑w ...
.data:0000000000208024                 align 8
.data:0000000000208028 line_num_start  dq offset line_buf+11h  ; DATA XREF: next_line_num↑r
.data:0000000000208028                                         ; next_line_num+44↑w
.data:0000000000208028                                         ; "0\t"
.data:0000000000208030 ; char *line_num_print
.data:0000000000208030 line_num_print  dq offset line_buf+0Ch  ; DATA XREF: main+4AD↑r
.data:0000000000208030                                         ; main+674↑r ...
.data:0000000000208030                                         ; "     0\t"
.data:0000000000208038                 public Version
.data:0000000000208038 Version         dq offset a831          ; DATA XREF: main+166↑r
.data:0000000000208038                                         ; "8.31"
.data:0000000000208040                 public exit_failure
.data:0000000000208040 ; int exit_failure
.data:0000000000208040 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_29F2↑r
.data:0000000000208040                                         ; xalloc_die+17↑r
.data:0000000000208044                 align 20h
.data:0000000000208060                 public quote_quoting_options
.data:0000000000208060 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208060                                         ; quote_mem↑o ...
.data:0000000000208061                 db    0
.data:0000000000208062                 db    0
.data:0000000000208063                 db    0
.data:0000000000208064                 db    0
.data:0000000000208065                 db    0
.data:0000000000208066                 db    0
.data:0000000000208067                 db    0
.data:0000000000208068                 db    0
.data:0000000000208069                 db    0
.data:000000000020806A                 db    0
.data:000000000020806B                 db    0
.data:000000000020806C                 db    0
.data:000000000020806D                 db    0
.data:000000000020806E                 db    0
.data:000000000020806F                 db    0
.data:0000000000208070                 db    0
.data:0000000000208071                 db    0
.data:0000000000208072                 db    0
.data:0000000000208073                 db    0
.data:0000000000208074                 db    0
.data:0000000000208075                 db    0
.data:0000000000208076                 db    0
.data:0000000000208077                 db    0
.data:0000000000208078                 db    0
.data:0000000000208079                 db    0
.data:000000000020807A                 db    0
.data:000000000020807B                 db    0
.data:000000000020807C                 db    0
.data:000000000020807D                 db    0
.data:000000000020807E                 db    0
.data:000000000020807F                 db    0
.data:0000000000208080                 db    0
.data:0000000000208081                 db    0
.data:0000000000208082                 db    0
.data:0000000000208083                 db    0
.data:0000000000208084                 db    0
.data:0000000000208085                 db    0
.data:0000000000208086                 db    0
.data:0000000000208087                 db    0
.data:0000000000208088                 db    0
.data:0000000000208089                 db    0
.data:000000000020808A                 db    0
.data:000000000020808B                 db    0
.data:000000000020808C                 db    0
.data:000000000020808D                 db    0
.data:000000000020808E                 db    0
.data:000000000020808F                 db    0
.data:0000000000208090                 db    0
.data:0000000000208091                 db    0
.data:0000000000208092                 db    0
.data:0000000000208093                 db    0
.data:0000000000208094                 db    0
.data:0000000000208095                 db    0
.data:0000000000208096                 db    0
.data:0000000000208097                 db    0
.data:0000000000208098 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208098                                         ; quotearg_n_options:loc_3F2D↑r ...
.data:000000000020809C                 align 20h
.data:00000000002080A0 ; void *slotvec
.data:00000000002080A0 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:00000000002080A0                                         ; quotearg_n_options+76↑w ...
.data:00000000002080A8                 align 10h
.data:00000000002080B0 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:00000000002080B0                                         ; quotearg_n_options+187↑r ...
.data:00000000002080B8 off_2080B8      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:00000000002080B8 _data           ends
.data:00000000002080B8
.bss:00000000002080C0 ; ===========================================================================
.bss:00000000002080C0
.bss:00000000002080C0 ; Segment type: Uninitialized
.bss:00000000002080C0 ; Segment permissions: Read/Write
.bss:00000000002080C0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002080C0                 assume cs:_bss
.bss:00000000002080C0                 ;org 2080C0h
.bss:00000000002080C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002080C0                 public __bss_start ; weak
.bss:00000000002080C0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000818↑o
.bss:00000000002080C0                                         ; LOAD:0000000000000860↑o ...
.bss:00000000002080C0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002080C0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002080C0                                         ; _edata
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8                 public stdout@@GLIBC_2_2_5
.bss:00000000002080C8 ; FILE *stdout
.bss:00000000002080C8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000800↑o
.bss:00000000002080C8                                         ; main+15F↑r ...
.bss:00000000002080C8                                         ; Alternative name is 'stdout'
.bss:00000000002080C8                                         ; Copy of shared data
.bss:00000000002080D0                 public optind@@GLIBC_2_2_5
.bss:00000000002080D0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000890↑o
.bss:00000000002080D0                                         ; main+1F3↑r
.bss:00000000002080D0                                         ; Alternative name is 'optind'
.bss:00000000002080D0                                         ; Copy of shared data
.bss:00000000002080D4                 align 8
.bss:00000000002080D8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080D8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080D8                                         ; DATA XREF: LOAD:0000000000000830↑o
.bss:00000000002080D8                                         ; LOAD:0000000000000848↑o ...
.bss:00000000002080D8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080D8                                         ; Copy of shared data
.bss:00000000002080E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080E0 ; FILE *stderr
.bss:00000000002080E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000878↑o
.bss:00000000002080E0                                         ; usage+3D↑r ...
.bss:00000000002080E0                                         ; Alternative name is 'stderr'
.bss:00000000002080E0                                         ; Copy of shared data
.bss:00000000002080E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080E9                 align 10h
.bss:00000000002080F0 newlines2       dd ?                    ; DATA XREF: main+397↑r
.bss:00000000002080F0                                         ; main+882↑w ...
.bss:00000000002080F4 ; int input_desc
.bss:00000000002080F4 input_desc      dd ?                    ; DATA XREF: main+2BC↑w
.bss:00000000002080F4                                         ; main:loc_1C1A↑r ...
.bss:00000000002080F8 infile          dq ?                    ; DATA XREF: main+278↑w
.bss:00000000002080F8                                         ; main+293↑w ...
.bss:0000000000208100 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000208100                                         ; close_stdout+1B↑r
.bss:0000000000208101                 align 8
.bss:0000000000208108 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000208108                                         ; close_stdout+56↑r
.bss:0000000000208110                 public program_name
.bss:0000000000208110 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000208110                                         ; usage+15B↑r ...
.bss:0000000000208118                 align 20h
.bss:0000000000208120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208120                                         ; quotearg_free+46↑o ...
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200                 db    ? ;
.bss:0000000000208201                 db    ? ;
.bss:0000000000208202                 db    ? ;
.bss:0000000000208203                 db    ? ;
.bss:0000000000208204                 db    ? ;
.bss:0000000000208205                 db    ? ;
.bss:0000000000208206                 db    ? ;
.bss:0000000000208207                 db    ? ;
.bss:0000000000208208                 db    ? ;
.bss:0000000000208209                 db    ? ;
.bss:000000000020820A                 db    ? ;
.bss:000000000020820B                 db    ? ;
.bss:000000000020820C                 db    ? ;
.bss:000000000020820D                 db    ? ;
.bss:000000000020820E                 db    ? ;
.bss:000000000020820F                 db    ? ;
.bss:0000000000208210                 db    ? ;
.bss:0000000000208211                 db    ? ;
.bss:0000000000208212                 db    ? ;
.bss:0000000000208213                 db    ? ;
.bss:0000000000208214                 db    ? ;
.bss:0000000000208215                 db    ? ;
.bss:0000000000208216                 db    ? ;
.bss:0000000000208217                 db    ? ;
.bss:0000000000208218                 db    ? ;
.bss:0000000000208219                 db    ? ;
.bss:000000000020821A                 db    ? ;
.bss:000000000020821B                 db    ? ;
.bss:000000000020821C                 db    ? ;
.bss:000000000020821D                 db    ? ;
.bss:000000000020821E                 db    ? ;
.bss:000000000020821F                 db    ? ;
.bss:0000000000208220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208220                                         ; get_quoting_style↑o ...
.bss:0000000000208230 xmmword_208230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208230                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208240 xmmword_208240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208240                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208250 qword_208250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208250                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208250 _bss            ends
.bss:0000000000208250
.prgend:0000000000208258 ; ===========================================================================
.prgend:0000000000208258
.prgend:0000000000208258 ; Segment type: Zero-length
.prgend:0000000000208258 _prgend         segment byte public '' use64
.prgend:0000000000208258 _end            label byte
.prgend:0000000000208258 _prgend         ends
.prgend:0000000000208258
extern:0000000000208260 ; ===========================================================================
extern:0000000000208260
extern:0000000000208260 ; Segment type: Externs
extern:0000000000208260 ; extern
extern:0000000000208260 ; void free(void *ptr)
extern:0000000000208260                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208260                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208268 ; void __noreturn abort(void)
extern:0000000000208268                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208268                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208270 ; int *_errno_location(void)
extern:0000000000208270                 extrn __errno_location:near
extern:0000000000208270                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208270                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208278 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208278                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208278                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208280 ; void __noreturn exit(int status)
extern:0000000000208280                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208280                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208288 ; size_t _fpending(FILE *fp)
extern:0000000000208288                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208288                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208290 ; ssize_t write(int fd, const void *buf, size_t n)
extern:0000000000208290                 extrn write:near        ; CODE XREF: _write↑j
extern:0000000000208290                                         ; DATA XREF: .got:write_ptr↑o
extern:0000000000208298 ; char *textdomain(const char *domainname)
extern:0000000000208298                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208298                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002082A0 ; int fclose(FILE *stream)
extern:00000000002082A0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002082A0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002082A8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002082A8                 extrn bindtextdomain:near
extern:00000000002082A8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002082A8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002082B0 ; char *stpcpy(char *dest, const char *src)
extern:00000000002082B0                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:00000000002082B0                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:00000000002082B8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002082B8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002082B8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002082C0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002082C0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002082C0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002082C0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002082C8 ; size_t strlen(const char *s)
extern:00000000002082C8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002082C8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082D0                 extrn __stack_chk_fail:near
extern:00000000002082D0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082D0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082D8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082D8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082D8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082E0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082E0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082E0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082E8 ; char *strrchr(const char *s, int c)
extern:00000000002082E8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082E8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002082F0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002082F0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002082F0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002082F8 ; void *memset(void *s, int c, size_t n)
extern:00000000002082F8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002082F8                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000208300 ; int ioctl(int fd, unsigned __int64 request, ...)
extern:0000000000208300                 extrn ioctl:near        ; CODE XREF: _ioctl↑j
extern:0000000000208300                                         ; DATA XREF: .got:ioctl_ptr↑o
extern:0000000000208308 ; int close(int fd)
extern:0000000000208308                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000208308                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000208310 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000208310                 extrn posix_fadvise:near
extern:0000000000208310                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000208310                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000208318 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:0000000000208318                 extrn read:near         ; CODE XREF: _read↑j
extern:0000000000208318                                         ; DATA XREF: .got:read_ptr↑o
extern:0000000000208320 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000208320                 extrn __libc_start_main:near
extern:0000000000208320                                         ; CODE XREF: start+24↑p
extern:0000000000208320                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000208328 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000208328                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000208328                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208330 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208330                 extrn fputs_unlocked:near
extern:0000000000208330                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208330                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208338 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208338                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208338                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208340 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208340                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208340                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208348 ; int fileno(FILE *stream)
extern:0000000000208348                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208348                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208350 ; void *malloc(size_t size)
extern:0000000000208350                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208350                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208358 ; int fflush(FILE *stream)
extern:0000000000208358                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208358                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208360 ; char *nl_langinfo(nl_item item)
extern:0000000000208360                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208360                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208368 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:0000000000208368                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:0000000000208368                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:0000000000208370 ; int _freading(FILE *fp)
extern:0000000000208370                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208370                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208378 ; void *realloc(void *ptr, size_t size)
extern:0000000000208378                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208378                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208380 ; char *setlocale(int category, const char *locale)
extern:0000000000208380                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208380                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208388                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208388                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208390 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000208390                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000208390                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000208398 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208398                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208398                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002083A0 ; int open(const char *file, int oflag, ...)
extern:00000000002083A0                 extrn open:near         ; CODE XREF: _open↑j
extern:00000000002083A0                                         ; DATA XREF: .got:open_ptr↑o
extern:00000000002083A8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002083A8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002083A8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002083B0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002083B0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002083B0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002083B8 ; int getpagesize(void)
extern:00000000002083B8                 extrn getpagesize:near  ; CODE XREF: _getpagesize↑j
extern:00000000002083B8                                         ; DATA XREF: .got:getpagesize_ptr↑o
extern:00000000002083C0 ; void __noreturn exit(int status)
extern:00000000002083C0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002083C0                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002083C8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002083C8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002083C8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002083D0                 extrn __fprintf_chk:near
extern:00000000002083D0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002083D0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002083D8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002083D8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002083D8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083E0 ; int iswprint(wint_t wc)
extern:00000000002083E0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083E0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083E8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083E8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083E8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083E8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002083F0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002083F0                 extrn __ctype_b_loc:near
extern:00000000002083F0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002083F0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002083F8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002083F8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000208400                 extrn __gmon_start__:near ; weak
extern:0000000000208400                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000208400                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000208408                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000208408                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000208408
extern:0000000000208408
extern:0000000000208408                 end start
