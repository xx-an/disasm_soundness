LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 8CD81342298B0B10476C829293668066175CFE5EBB1E8515F8E191A524F80919
LOAD:0000000000000000 ; Input MD5    : 1C18BE3A8B94F53A0A3D2B4D528F5EDC
LOAD:0000000000000000 ; Input CRC32  : B77B304E
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/expand
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'expand.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'expand-common.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrndup.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 276D0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7328h                ; Size in file image
LOAD:00000000000000D8                 dq 7328h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B50h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B50h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 550h                 ; Size in file image
LOAD:0000000000000110                 dq 750h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C58h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 63F0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 63F0h                ; Physical address
LOAD:00000000000001B0                 dq 2A4h                 ; Size in file image
LOAD:00000000000001B8                 dq 2A4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B50h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B50h              ; Physical address
LOAD:0000000000000220                 dq 4B0h                 ; Size in file image
LOAD:0000000000000228                 dq 4B0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 8Ch, 0E8h, 39h, 98h, 5Ah, 21h, 60h, 48h, 44h, 2Dh, 46h ; Desc
LOAD:0000000000000284                 db 1, 78h, 0E1h, 0A7h, 2Fh, 14h, 0F4h, 0DFh, 23h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 35h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 35h, 36h, 3Ch
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUflow - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_8B0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_8B0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_8B0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_8B0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_8B0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_8B0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aClearerrUnlock - offset byte_8B0, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8B0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFclose - offset byte_8B0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_8B0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_8B0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8B0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_8B0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_8B0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_8B0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_8B0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aOverflow - offset byte_8B0, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_8B0, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aAssertFail - offset byte_8B0, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_8B0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrspn - offset byte_8B0, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aPosixFadvise - offset byte_8B0, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStrndup - offset byte_8B0, 12h, 0, 0, \ ; "strndup"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLibcStartMain - offset byte_8B0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcmp - offset byte_8B0, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFputsUnlocked - offset byte_8B0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCalloc - offset byte_8B0, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGmonStart - offset byte_8B0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcpy - offset byte_8B0, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFileno - offset byte_8B0, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMalloc - offset byte_8B0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFflush - offset byte_8B0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aNlLanginfo - offset byte_8B0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFreading - offset byte_8B0, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aRealloc - offset byte_8B0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aSetlocale - offset byte_8B0, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aPrintfChk - offset byte_8B0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aError - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006B8                            0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFseeko - offset byte_8B0, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFopen - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000006E8                            0>
LOAD:0000000000000700                 Elf64_Sym <offset aCxaAtexit - offset byte_8B0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aExit+1 - offset byte_8B0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFwrite - offset byte_8B0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFprintfChk - offset byte_8B0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aItmRegistertmc - offset byte_8B0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aMbsinit - offset byte_8B0, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aIswprint - offset byte_8B0, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aCxaFinalize - offset byte_8B0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCtypeBLoc - offset byte_8B0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aStdout - offset byte_8B0, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007D8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aProgname - offset byte_8B0, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000007F0                            offset __bss_start, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aStdin - offset byte_8B0, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000808                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aProgramInvocat - offset byte_8B0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000820                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aPrognameFull - offset byte_8B0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000838                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8B0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000850                            offset __bss_start, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aStderr - offset byte_8B0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000868                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aOptind - offset byte_8B0, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000880                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000898                 Elf64_Sym <offset aOptarg - offset byte_8B0, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000898                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0 ; ELF String Table
LOAD:00000000000008B0 byte_8B0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008B0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008B1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:00000000000008BB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000008C2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008CF aClearerrUnlock db 'clearerr_unlocked',0
LOAD:00000000000008CF                                         ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000008E1 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008EB aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000008F3 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:00000000000008F9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000901 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000908 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000910 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:000000000000091A aError          db 'error',0            ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000920 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000931 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:000000000000093A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000942 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000948 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000808↑o
LOAD:000000000000094E aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:000000000000094E                                         ; LOAD:0000000000000718↑o
LOAD:0000000000000954 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:000000000000095B aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000095B                                         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000973 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000981 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000981                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000998 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009A6 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009AD aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000009B4 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009BB aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009CC aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:00000000000009D3 aStrndup        db 'strndup',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000009DB aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009E9 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:00000000000009F0 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009F6 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:00000000000009FD aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A04 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A0B aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A13 aUflow          db '__uflow',0          ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A1B aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A27 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A35 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000A3C aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A47 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000A4E aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A5A aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A61 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000A68 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A73 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A73                                         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000A91 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000AA0 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000AA0                                         ; LOAD:00000000000003D0↑o
LOAD:0000000000000AAF aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AAF                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000AC1 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000AC8 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000AD3 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000AE2 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AE7 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000AF2 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B02 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000B0F aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C18↓o
LOAD:0000000000000B19 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C28↓o
LOAD:0000000000000B25 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C38↓o
LOAD:0000000000000B30 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C48↓o
LOAD:0000000000000B3A aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C58↓o
LOAD:0000000000000B46 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B46                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B62 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B71 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B71                                         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000B8B                 align 4
LOAD:0000000000000B8C ; ELF GNU Symbol Version Table
LOAD:0000000000000B8C                 dw 0
LOAD:0000000000000B8E                 dw 2                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B9A                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BAE                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 2                    ; strndup@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BCC                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BCE                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BDE                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BEC                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BEE                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BF6                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C06                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C08 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C08                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8B0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C18                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8B0, \ ; "GLIBC_2.3"
LOAD:0000000000000C18                                10h>
LOAD:0000000000000C28                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8B0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C28                                10h>
LOAD:0000000000000C38                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8B0, \ ; "GLIBC_2.14"
LOAD:0000000000000C38                                10h>
LOAD:0000000000000C48                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8B0, \ ; "GLIBC_2.4"
LOAD:0000000000000C48                                10h>
LOAD:0000000000000C58                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8B0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C68 ; ELF RELA Relocation Table
LOAD:0000000000000C68                 Elf64_Rela <207B50h, 8, 1BF0h> ; R_X86_64_RELATIVE +1BF0h
LOAD:0000000000000C80                 Elf64_Rela <207B58h, 8, 1BB0h> ; R_X86_64_RELATIVE +1BB0h
LOAD:0000000000000C98                 Elf64_Rela <207B60h, 8, 54F9h> ; R_X86_64_RELATIVE +54F9h
LOAD:0000000000000CB0                 Elf64_Rela <207B80h, 8, 54FEh> ; R_X86_64_RELATIVE +54FEh
LOAD:0000000000000CC8                 Elf64_Rela <207BA0h, 8, 5506h> ; R_X86_64_RELATIVE +5506h
LOAD:0000000000000CE0                 Elf64_Rela <207BC0h, 8, 550Bh> ; R_X86_64_RELATIVE +550Bh
LOAD:0000000000000CF8                 Elf64_Rela <207C00h, 8, 5BB1h> ; R_X86_64_RELATIVE +5BB1h
LOAD:0000000000000D10                 Elf64_Rela <207C08h, 8, 5BB9h> ; R_X86_64_RELATIVE +5BB9h
LOAD:0000000000000D28                 Elf64_Rela <207C10h, 8, 5BBFh> ; R_X86_64_RELATIVE +5BBFh
LOAD:0000000000000D40                 Elf64_Rela <207C18h, 8, 5BCCh> ; R_X86_64_RELATIVE +5BCCh
LOAD:0000000000000D58                 Elf64_Rela <207C20h, 8, 5BD9h> ; R_X86_64_RELATIVE +5BD9h
LOAD:0000000000000D70                 Elf64_Rela <207C28h, 8, 5BEDh> ; R_X86_64_RELATIVE +5BEDh
LOAD:0000000000000D88                 Elf64_Rela <207C30h, 8, 5BEFh> ; R_X86_64_RELATIVE +5BEFh
LOAD:0000000000000DA0                 Elf64_Rela <207C38h, 8, 5BD2h> ; R_X86_64_RELATIVE +5BD2h
LOAD:0000000000000DB8                 Elf64_Rela <207C40h, 8, 54BFh> ; R_X86_64_RELATIVE +54BFh
LOAD:0000000000000DD0                 Elf64_Rela <207C48h, 8, 5BF7h> ; R_X86_64_RELATIVE +5BF7h
LOAD:0000000000000DE8                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000E00                 Elf64_Rela <208010h, 8, 5B9Ah> ; R_X86_64_RELATIVE +5B9Ah
LOAD:0000000000000E18                 Elf64_Rela <208020h, 8, 5B4Ah> ; R_X86_64_RELATIVE +5B4Ah
LOAD:0000000000000E30                 Elf64_Rela <208080h, 8, 208090h> ; R_X86_64_RELATIVE +208090h
LOAD:0000000000000E48                 Elf64_Rela <208098h, 8, 208160h> ; R_X86_64_RELATIVE +208160h
LOAD:0000000000000E60                 Elf64_Rela <207FD8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E78                 Elf64_Rela <207FE0h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E90                 Elf64_Rela <207FE8h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000EA8                 Elf64_Rela <207FF0h, 3000000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000EC0                 Elf64_Rela <207FF8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000ED8                 Elf64_Rela <2080A0h, 3600000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000EF0                 Elf64_Rela <2080A8h, 3500000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F08                 Elf64_Rela <2080B0h, 3700000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000000F20                 Elf64_Rela <2080B8h, 3C00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F38                 Elf64_Rela <2080C0h, 3D00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000F50                 Elf64_Rela <2080C8h, 3900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F68                 Elf64_Rela <2080E0h, 3B00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F80 ; ELF JMPREL Relocation Table
LOAD:0000000000000F80                 Elf64_Rela <207E60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000000F98                 Elf64_Rela <207E68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000FB0                 Elf64_Rela <207E70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000FC8                 Elf64_Rela <207E78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000FE0                 Elf64_Rela <207E80h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000FF8                 Elf64_Rela <207E88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001010                 Elf64_Rela <207E90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001028                 Elf64_Rela <207E98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:0000000000001040                 Elf64_Rela <207EA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001058                 Elf64_Rela <207EA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001070                 Elf64_Rela <207EB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001088                 Elf64_Rela <207EB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000010A0                 Elf64_Rela <207EC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000010B8                 Elf64_Rela <207EC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000010D0                 Elf64_Rela <207ED0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000010E8                 Elf64_Rela <207ED8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001100                 Elf64_Rela <207EE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001118                 Elf64_Rela <207EE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001130                 Elf64_Rela <207EF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001148                 Elf64_Rela <207EF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001160                 Elf64_Rela <207F00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001178                 Elf64_Rela <207F08h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001190                 Elf64_Rela <207F10h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:00000000000011A8                 Elf64_Rela <207F18h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000011C0                 Elf64_Rela <207F20h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strndup
LOAD:00000000000011D8                 Elf64_Rela <207F28h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000011F0                 Elf64_Rela <207F30h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001208                 Elf64_Rela <207F38h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001220                 Elf64_Rela <207F40h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001238                 Elf64_Rela <207F48h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001250                 Elf64_Rela <207F50h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001268                 Elf64_Rela <207F58h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001280                 Elf64_Rela <207F60h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001298                 Elf64_Rela <207F68h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000012B0                 Elf64_Rela <207F70h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000012C8                 Elf64_Rela <207F78h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000012E0                 Elf64_Rela <207F80h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000012F8                 Elf64_Rela <207F88h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001310                 Elf64_Rela <207F90h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001328                 Elf64_Rela <207F98h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001340                 Elf64_Rela <207FA0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001358                 Elf64_Rela <207FA8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001370                 Elf64_Rela <207FB0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001388                 Elf64_Rela <207FB8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000013A0                 Elf64_Rela <207FC0h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000013B8                 Elf64_Rela <207FC8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000013D0                 Elf64_Rela <207FD0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000013D0 LOAD            ends
LOAD:00000000000013D0
.init:00000000000013E8 ; ===========================================================================
.init:00000000000013E8
.init:00000000000013E8 ; Segment type: Pure code
.init:00000000000013E8 ; Segment permissions: Read/Execute
.init:00000000000013E8 _init           segment dword public 'CODE' use64
.init:00000000000013E8                 assume cs:_init
.init:00000000000013E8                 ;org 13E8h
.init:00000000000013E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000013E8
.init:00000000000013E8 ; =============== S U B R O U T I N E =======================================
.init:00000000000013E8
.init:00000000000013E8
.init:00000000000013E8                 public _init_proc
.init:00000000000013E8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000013E8                 sub     rsp, 8          ; _init
.init:00000000000013EC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000013F3                 test    rax, rax
.init:00000000000013F6                 jz      short loc_13FA
.init:00000000000013F8                 call    rax ; __gmon_start__
.init:00000000000013FA
.init:00000000000013FA loc_13FA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000013FA                 add     rsp, 8
.init:00000000000013FE                 retn
.init:00000000000013FE _init_proc      endp
.init:00000000000013FE
.init:00000000000013FE _init           ends
.init:00000000000013FE
LOAD:00000000000013FF ; ===========================================================================
LOAD:00000000000013FF
LOAD:00000000000013FF ; Segment type: Pure code
LOAD:00000000000013FF ; Segment permissions: Read/Execute
LOAD:00000000000013FF LOAD            segment byte public 'CODE' use64
LOAD:00000000000013FF                 assume cs:LOAD
LOAD:00000000000013FF                 ;org 13FFh
LOAD:00000000000013FF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000013FF                 align 20h
LOAD:00000000000013FF LOAD            ends
LOAD:00000000000013FF
.plt:0000000000001400 ; ===========================================================================
.plt:0000000000001400
.plt:0000000000001400 ; Segment type: Pure code
.plt:0000000000001400 ; Segment permissions: Read/Execute
.plt:0000000000001400 _plt            segment para public 'CODE' use64
.plt:0000000000001400                 assume cs:_plt
.plt:0000000000001400                 ;org 1400h
.plt:0000000000001400                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400
.plt:0000000000001400 sub_1400        proc near               ; CODE XREF: .plt:000000000000141B↓j
.plt:0000000000001400                                         ; .plt:000000000000142B↓j ...
.plt:0000000000001400 ; __unwind {
.plt:0000000000001400                 push    cs:qword_207E50
.plt:0000000000001406                 jmp     cs:qword_207E58
.plt:0000000000001406 sub_1400        endp
.plt:0000000000001406
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:000000000000140C                 align 10h
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int __uflow(_IO_FILE *)
.plt:0000000000001410 ___uflow        proc near               ; CODE XREF: main+244↓p
.plt:0000000000001410                 jmp     cs:__uflow_ptr
.plt:0000000000001410 ___uflow        endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    0
.plt:000000000000141B                 jmp     sub_1400
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; void free(void *ptr)
.plt:0000000000001420 _free           proc near               ; CODE XREF: parse_tab_stops+249↓p
.plt:0000000000001420                                         ; quotearg_n_options+115↓p ...
.plt:0000000000001420                 jmp     cs:free_ptr
.plt:0000000000001420 _free           endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    1
.plt:000000000000142B                 jmp     sub_1400
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: noreturn thunk
.plt:0000000000001430
.plt:0000000000001430 ; void __noreturn abort(void)
.plt:0000000000001430 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001430                                         ; quotearg_buffer_restyled:def_2CB1↓p ...
.plt:0000000000001430                 jmp     cs:abort_ptr
.plt:0000000000001430 _abort          endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    2
.plt:000000000000143B                 jmp     sub_1400
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; int *__errno_location(void)
.plt:0000000000001440 ___errno_location proc near             ; CODE XREF: main+2B8↓p
.plt:0000000000001440                                         ; main+359↓p ...
.plt:0000000000001440                 jmp     cs:__errno_location_ptr
.plt:0000000000001440 ___errno_location endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    3
.plt:000000000000144B                 jmp     sub_1400
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001450 _strncmp        proc near               ; CODE XREF: usage+27C↓p
.plt:0000000000001450                                         ; usage+33D↓p
.plt:0000000000001450                 jmp     cs:strncmp_ptr
.plt:0000000000001450 _strncmp        endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    4
.plt:000000000000145B                 jmp     sub_1400
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: noreturn thunk
.plt:0000000000001460
.plt:0000000000001460 ; void __noreturn _exit(int status)
.plt:0000000000001460 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001460                 jmp     cs:_exit_ptr
.plt:0000000000001460 __exit          endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    5
.plt:000000000000146B                 jmp     sub_1400
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; size_t __fpending(FILE *fp)
.plt:0000000000001470 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001470                 jmp     cs:__fpending_ptr
.plt:0000000000001470 ___fpending     endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    6
.plt:000000000000147B                 jmp     sub_1400
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; void clearerr_unlocked(FILE *stream)
.plt:0000000000001480 _clearerr_unlocked proc near            ; CODE XREF: next_file+4A↓p
.plt:0000000000001480                 jmp     cs:clearerr_unlocked_ptr
.plt:0000000000001480 _clearerr_unlocked endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    7
.plt:000000000000148B                 jmp     sub_1400
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; char *textdomain(const char *domainname)
.plt:0000000000001490 _textdomain     proc near               ; CODE XREF: main+5B↓p
.plt:0000000000001490                 jmp     cs:textdomain_ptr
.plt:0000000000001490 _textdomain     endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    8
.plt:000000000000149B                 jmp     sub_1400
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int fclose(FILE *stream)
.plt:00000000000014A0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000014A0                                         ; rpl_fclose+6B↓j
.plt:00000000000014A0                 jmp     cs:fclose_ptr
.plt:00000000000014A0 _fclose         endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    9
.plt:00000000000014AB                 jmp     sub_1400
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000014B0 _bindtextdomain proc near               ; CODE XREF: main+4F↓p
.plt:00000000000014B0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000014B0 _bindtextdomain endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0Ah
.plt:00000000000014BB                 jmp     sub_1400
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000014C0 _dcgettext      proc near               ; CODE XREF: main+2B0↓p
.plt:00000000000014C0                                         ; main+351↓p ...
.plt:00000000000014C0                 jmp     cs:dcgettext_ptr
.plt:00000000000014C0 _dcgettext      endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    0Bh
.plt:00000000000014CB                 jmp     sub_1400
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000014D0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000014D0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000014D0 ___ctype_get_mb_cur_max endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    0Ch
.plt:00000000000014DB                 jmp     sub_1400
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; size_t strlen(const char *s)
.plt:00000000000014E0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000014E0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000014E0                 jmp     cs:strlen_ptr
.plt:00000000000014E0 _strlen         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    0Dh
.plt:00000000000014EB                 jmp     sub_1400
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: noreturn thunk
.plt:00000000000014F0
.plt:00000000000014F0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1A97↓p
.plt:00000000000014F0                                         ; quotearg_buffer_restyled:loc_3E13↓p ...
.plt:00000000000014F0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000014F0 ___stack_chk_fail endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    0Eh
.plt:00000000000014FB                 jmp     sub_1400
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001500 _getopt_long    proc near               ; CODE XREF: main+89↓p
.plt:0000000000001500                 jmp     cs:getopt_long_ptr
.plt:0000000000001500 _getopt_long    endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    0Fh
.plt:000000000000150B                 jmp     sub_1400
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001510 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001510                 jmp     cs:mbrtowc_ptr
.plt:0000000000001510 _mbrtowc        endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    10h
.plt:000000000000151B                 jmp     sub_1400
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001520 ___overflow     proc near               ; CODE XREF: main+295↓p
.plt:0000000000001520                                         ; main+33A↓p
.plt:0000000000001520                 jmp     cs:__overflow_ptr
.plt:0000000000001520 ___overflow     endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    11h
.plt:000000000000152B                 jmp     sub_1400
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; char *strrchr(const char *s, int c)
.plt:0000000000001530 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001530                 jmp     cs:strrchr_ptr
.plt:0000000000001530 _strrchr        endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    12h
.plt:000000000000153B                 jmp     sub_1400
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001540 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001540                                         ; rpl_fseeko+3B↓p
.plt:0000000000001540                 jmp     cs:lseek_ptr
.plt:0000000000001540 _lseek          endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    13h
.plt:000000000000154B                 jmp     sub_1400
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: noreturn thunk
.plt:0000000000001550
.plt:0000000000001550 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001550 ___assert_fail  proc near               ; CODE XREF: next_file+1FC↓p
.plt:0000000000001550                 jmp     cs:__assert_fail_ptr
.plt:0000000000001550 ___assert_fail  endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    14h
.plt:000000000000155B                 jmp     sub_1400
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001560 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001560                                         ; xzalloc+12↓j
.plt:0000000000001560                 jmp     cs:memset_ptr
.plt:0000000000001560 _memset         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    15h
.plt:000000000000156B                 jmp     sub_1400
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000001570 _strspn         proc near               ; CODE XREF: parse_tab_stops+1F9↓p
.plt:0000000000001570                 jmp     cs:strspn_ptr
.plt:0000000000001570 _strspn         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    16h
.plt:000000000000157B                 jmp     sub_1400
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001580 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001580                                         ; fadvise+16↓j
.plt:0000000000001580                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001580 _posix_fadvise  endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    17h
.plt:000000000000158B                 jmp     sub_1400
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; char *strndup(const char *string, size_t n)
.plt:0000000000001590 _strndup        proc near               ; CODE XREF: xstrndup+4↓p
.plt:0000000000001590                 jmp     cs:strndup_ptr
.plt:0000000000001590 _strndup        endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    18h
.plt:000000000000159B                 jmp     sub_1400
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000015A0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000015A0                 jmp     cs:memcmp_ptr
.plt:00000000000015A0 _memcmp         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    19h
.plt:00000000000015AB                 jmp     sub_1400
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000015B0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000015B0                                         ; usage+C2↓p ...
.plt:00000000000015B0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000015B0 _fputs_unlocked endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    1Ah
.plt:00000000000015BB                 jmp     sub_1400
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000015C0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000015C0                 jmp     cs:calloc_ptr
.plt:00000000000015C0 _calloc         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    1Bh
.plt:00000000000015CB                 jmp     sub_1400
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000015D0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000015D0                 jmp     cs:memcpy_ptr
.plt:00000000000015D0 _memcpy         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    1Ch
.plt:00000000000015DB                 jmp     sub_1400
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int fileno(FILE *stream)
.plt:00000000000015E0 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:00000000000015E0                                         ; rpl_fclose+7↓p ...
.plt:00000000000015E0                 jmp     cs:fileno_ptr
.plt:00000000000015E0 _fileno         endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    1Dh
.plt:00000000000015EB                 jmp     sub_1400
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; void *malloc(size_t size)
.plt:00000000000015F0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000015F0                 jmp     cs:malloc_ptr
.plt:00000000000015F0 _malloc         endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    1Eh
.plt:00000000000015FB                 jmp     sub_1400
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int fflush(FILE *stream)
.plt:0000000000001600 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001600                                         ; rpl_fflush+3B↓j
.plt:0000000000001600                 jmp     cs:fflush_ptr
.plt:0000000000001600 _fflush         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    1Fh
.plt:000000000000160B                 jmp     sub_1400
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; char *nl_langinfo(nl_item item)
.plt:0000000000001610 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001610                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001610 _nl_langinfo    endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    20h ; ' '
.plt:000000000000161B                 jmp     sub_1400
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; int __freading(FILE *fp)
.plt:0000000000001620 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001620                                         ; rpl_fflush+9↓p
.plt:0000000000001620                 jmp     cs:__freading_ptr
.plt:0000000000001620 ___freading     endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    21h ; '!'
.plt:000000000000162B                 jmp     sub_1400
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001630 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001630                 jmp     cs:realloc_ptr
.plt:0000000000001630 _realloc        endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    22h ; '"'
.plt:000000000000163B                 jmp     sub_1400
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; char *setlocale(int category, const char *locale)
.plt:0000000000001640 _setlocale      proc near               ; CODE XREF: main+3C↓p
.plt:0000000000001640                                         ; usage+263↓p ...
.plt:0000000000001640                 jmp     cs:setlocale_ptr
.plt:0000000000001640 _setlocale      endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    23h ; '#'
.plt:000000000000164B                 jmp     sub_1400
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001650                                         ; usage+257↓p ...
.plt:0000000000001650                 jmp     cs:__printf_chk_ptr
.plt:0000000000001650 ___printf_chk   endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    24h ; '$'
.plt:000000000000165B                 jmp     sub_1400
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001660 _error          proc near               ; CODE XREF: main+2C9↓p
.plt:0000000000001660                                         ; main+36A↓p ...
.plt:0000000000001660                 jmp     cs:error_ptr
.plt:0000000000001660 _error          endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    25h ; '%'
.plt:000000000000166B                 jmp     sub_1400
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001670 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_515A↓j
.plt:0000000000001670                 jmp     cs:fseeko_ptr
.plt:0000000000001670 _fseeko         endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    26h ; '&'
.plt:000000000000167B                 jmp     sub_1400
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001680 _fopen          proc near               ; CODE XREF: next_file+101↓p
.plt:0000000000001680                 jmp     cs:fopen_ptr
.plt:0000000000001680 _fopen          endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    27h ; '''
.plt:000000000000168B                 jmp     sub_1400
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001690 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001690                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001690 ___cxa_atexit   endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    28h ; '('
.plt:000000000000169B                 jmp     sub_1400
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: noreturn thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; void __noreturn exit(int status)
.plt:00000000000016A0 _exit           proc near               ; CODE XREF: main+DB↓p
.plt:00000000000016A0                                         ; usage+58↓p ...
.plt:00000000000016A0                 jmp     cs:exit_ptr
.plt:00000000000016A0 _exit           endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    29h ; ')'
.plt:00000000000016AB                 jmp     sub_1400
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000016B0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000016B0                 jmp     cs:fwrite_ptr
.plt:00000000000016B0 _fwrite         endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    2Ah ; '*'
.plt:00000000000016BB                 jmp     sub_1400
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000016C0                                         ; version_etc_arn+37↓p ...
.plt:00000000000016C0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000016C0 ___fprintf_chk  endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    2Bh ; '+'
.plt:00000000000016CB                 jmp     sub_1400
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000016D0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000016D0                 jmp     cs:mbsinit_ptr
.plt:00000000000016D0 _mbsinit        endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    2Ch ; ','
.plt:00000000000016DB                 jmp     sub_1400
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; int iswprint(wint_t wc)
.plt:00000000000016E0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000016E0                 jmp     cs:iswprint_ptr
.plt:00000000000016E0 _iswprint       endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    2Dh ; '-'
.plt:00000000000016EB                 jmp     sub_1400
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000016F0 ___ctype_b_loc  proc near               ; CODE XREF: main:loc_18B7↓p
.plt:00000000000016F0                                         ; parse_tab_stops:loc_21A0↓p ...
.plt:00000000000016F0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000016F0 ___ctype_b_loc  endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    2Eh ; '.'
.plt:00000000000016FB                 jmp     sub_1400
.plt:00000000000016FB ; } // starts at 1400
.plt:00000000000016FB _plt            ends
.plt:00000000000016FB
.plt.got:0000000000001700 ; ===========================================================================
.plt.got:0000000000001700
.plt.got:0000000000001700 ; Segment type: Pure code
.plt.got:0000000000001700 ; Segment permissions: Read/Execute
.plt.got:0000000000001700 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001700                 assume cs:_plt_got
.plt.got:0000000000001700                 ;org 1700h
.plt.got:0000000000001700                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001700
.plt.got:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001700
.plt.got:0000000000001700 ; Attributes: thunk
.plt.got:0000000000001700
.plt.got:0000000000001700 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001700 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001700 ; __unwind {
.plt.got:0000000000001700                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001700 __cxa_finalize  endp
.plt.got:0000000000001700
.plt.got:0000000000001700 ; ---------------------------------------------------------------------------
.plt.got:0000000000001706                 align 8
.plt.got:0000000000001706 ; } // starts at 1700
.plt.got:0000000000001706 _plt_got        ends
.plt.got:0000000000001706
LOAD:0000000000001708 ; ===========================================================================
LOAD:0000000000001708
LOAD:0000000000001708 ; Segment type: Pure code
LOAD:0000000000001708 ; Segment permissions: Read/Execute
LOAD:0000000000001708 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001708                 assume cs:LOAD
LOAD:0000000000001708                 ;org 1708h
LOAD:0000000000001708                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001708                 align 10h
LOAD:0000000000001708 LOAD            ends
LOAD:0000000000001708
.text:0000000000001710 ; ===========================================================================
.text:0000000000001710
.text:0000000000001710 ; Segment type: Pure code
.text:0000000000001710 ; Segment permissions: Read/Execute
.text:0000000000001710 _text           segment para public 'CODE' use64
.text:0000000000001710                 assume cs:_text
.text:0000000000001710                 ;org 1710h
.text:0000000000001710                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001710
.text:0000000000001710 ; =============== S U B R O U T I N E =======================================
.text:0000000000001710
.text:0000000000001710
.text:0000000000001710 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001710                 public main
.text:0000000000001710 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001710
.text:0000000000001710 var_51          = byte ptr -51h
.text:0000000000001710 var_50          = qword ptr -50h
.text:0000000000001710 var_42          = byte ptr -42h
.text:0000000000001710 var_41          = byte ptr -41h
.text:0000000000001710 var_40          = qword ptr -40h
.text:0000000000001710
.text:0000000000001710 ; __unwind {
.text:0000000000001710                 push    r15
.text:0000000000001712                 push    r14
.text:0000000000001714                 push    r13
.text:0000000000001716                 push    r12
.text:0000000000001718                 push    rbp
.text:0000000000001719                 push    rbx
.text:000000000000171A                 mov     ebp, edi
.text:000000000000171C                 mov     rbx, rsi
.text:000000000000171F                 sub     rsp, 28h
.text:0000000000001723                 mov     rdi, [rsi]
.text:0000000000001726                 mov     rax, fs:28h
.text:000000000000172F                 mov     [rsp+58h+var_40], rax
.text:0000000000001734                 xor     eax, eax
.text:0000000000001736                 lea     r12, [rsp+58h+var_42]
.text:000000000000173B                 call    set_program_name
.text:0000000000001740                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001747                 mov     edi, 6          ; category
.text:000000000000174C                 call    _setlocale
.text:0000000000001751                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001758                 lea     rdi, domainname ; "coreutils"
.text:000000000000175F                 call    _bindtextdomain
.text:0000000000001764                 lea     rdi, domainname ; "coreutils"
.text:000000000000176B                 call    _textdomain
.text:0000000000001770                 lea     rdi, close_stdout
.text:0000000000001777                 call    atexit
.text:000000000000177C                 mov     cs:convert_entire_line, 1
.text:0000000000001783
.text:0000000000001783 loc_1783:                               ; CODE XREF: main+FA↓j
.text:0000000000001783                                         ; main+115↓j ...
.text:0000000000001783                 lea     rcx, longopts   ; longopts
.text:000000000000178A                 lea     rdx, shortopts  ; "it:0::1::2::3::4::5::6::7::8::9::"
.text:0000000000001791                 xor     r8d, r8d        ; longind
.text:0000000000001794                 mov     rsi, rbx        ; argv
.text:0000000000001797                 mov     edi, ebp        ; argc
.text:0000000000001799                 call    _getopt_long
.text:000000000000179E                 cmp     eax, 0FFFFFFFFh
.text:00000000000017A1                 jz      loc_1852
.text:00000000000017A7                 cmp     eax, 39h ; '9'
.text:00000000000017AA                 jg      short loc_17F0
.text:00000000000017AC                 cmp     eax, 30h ; '0'
.text:00000000000017AF                 jge     short loc_1810
.text:00000000000017B1                 cmp     eax, 0FFFFFF7Dh
.text:00000000000017B6                 jnz     loc_1A7F
.text:00000000000017BC                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000017C3                 mov     rcx, cs:Version
.text:00000000000017CA                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:00000000000017D1                 lea     rdx, unk_5481
.text:00000000000017D8                 lea     rsi, aExpand    ; "expand"
.text:00000000000017DF                 xor     r9d, r9d
.text:00000000000017E2                 xor     eax, eax
.text:00000000000017E4                 call    version_etc
.text:00000000000017E9                 xor     edi, edi        ; status
.text:00000000000017EB                 call    _exit
.text:00000000000017F0 ; ---------------------------------------------------------------------------
.text:00000000000017F0
.text:00000000000017F0 loc_17F0:                               ; CODE XREF: main+9A↑j
.text:00000000000017F0                 cmp     eax, 69h ; 'i'
.text:00000000000017F3                 jz      short loc_1830
.text:00000000000017F5                 cmp     eax, 74h ; 't'
.text:00000000000017F8                 jnz     loc_1A8D
.text:00000000000017FE                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001805                 call    parse_tab_stops
.text:000000000000180A                 jmp     loc_1783
.text:000000000000180A ; ---------------------------------------------------------------------------
.text:000000000000180F                 align 10h
.text:0000000000001810
.text:0000000000001810 loc_1810:                               ; CODE XREF: main+9F↑j
.text:0000000000001810                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001817                 test    rdi, rdi
.text:000000000000181A                 jz      short loc_183C
.text:000000000000181C                 sub     rdi, 1
.text:0000000000001820                 call    parse_tab_stops
.text:0000000000001825                 jmp     loc_1783
.text:0000000000001825 ; ---------------------------------------------------------------------------
.text:000000000000182A                 align 10h
.text:0000000000001830
.text:0000000000001830 loc_1830:                               ; CODE XREF: main+E3↑j
.text:0000000000001830                 mov     cs:convert_entire_line, 0
.text:0000000000001837                 jmp     loc_1783
.text:000000000000183C ; ---------------------------------------------------------------------------
.text:000000000000183C
.text:000000000000183C loc_183C:                               ; CODE XREF: main+10A↑j
.text:000000000000183C                 mov     rdi, r12
.text:000000000000183F                 mov     [rsp+58h+var_42], al
.text:0000000000001843                 mov     [rsp+58h+var_41], 0
.text:0000000000001848                 call    parse_tab_stops
.text:000000000000184D                 jmp     loc_1783
.text:0000000000001852 ; ---------------------------------------------------------------------------
.text:0000000000001852
.text:0000000000001852 loc_1852:                               ; CODE XREF: main+91↑j
.text:0000000000001852                 call    finalize_tab_stops
.text:0000000000001857                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000185E                 xor     edi, edi
.text:0000000000001860                 cmp     eax, ebp
.text:0000000000001862                 jge     short loc_1868
.text:0000000000001864                 lea     rdi, [rbx+rax*8]
.text:0000000000001868
.text:0000000000001868 loc_1868:                               ; CODE XREF: main+152↑j
.text:0000000000001868                 call    set_file_list
.text:000000000000186D                 xor     edi, edi        ; stream
.text:000000000000186F                 call    next_file
.text:0000000000001874                 test    rax, rax
.text:0000000000001877                 mov     rbp, rax
.text:000000000000187A                 jz      loc_1974
.text:0000000000001880                 lea     r13, [rsp+58h+var_51]
.text:0000000000001885                 lea     r12, [rsp+58h+var_50]
.text:000000000000188A
.text:000000000000188A loc_188A:                               ; CODE XREF: main+1E5↓j
.text:000000000000188A                 mov     [rsp+58h+var_50], 0
.text:0000000000001893                 xor     r14d, r14d
.text:0000000000001896                 mov     r15d, 1
.text:000000000000189C                 jmp     short loc_18F7
.text:000000000000189C ; ---------------------------------------------------------------------------
.text:000000000000189E                 align 20h
.text:00000000000018A0
.text:00000000000018A0 loc_18A0:                               ; CODE XREF: main+20D↓j
.text:00000000000018A0                 add     r14, 1
.text:00000000000018A4                 jz      loc_1A9C
.text:00000000000018AA                 movzx   r15d, cs:convert_entire_line
.text:00000000000018B2                 test    r15b, r15b
.text:00000000000018B5                 jnz     short loc_18CB
.text:00000000000018B7
.text:00000000000018B7 loc_18B7:                               ; CODE XREF: main+23C↓j
.text:00000000000018B7                 call    ___ctype_b_loc
.text:00000000000018BC                 mov     rcx, [rax]
.text:00000000000018BF                 movsxd  rdx, ebx
.text:00000000000018C2                 movzx   r15d, word ptr [rcx+rdx*2]
.text:00000000000018C7                 and     r15d, 1
.text:00000000000018CB
.text:00000000000018CB loc_18CB:                               ; CODE XREF: main+1A5↑j
.text:00000000000018CB                 test    ebx, ebx
.text:00000000000018CD                 js      loc_1974
.text:00000000000018D3
.text:00000000000018D3 loc_18D3:                               ; CODE XREF: main+1FF↓j
.text:00000000000018D3                                         ; main+23A↓j
.text:00000000000018D3                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000018DA                 mov     rax, [rdi+28h]
.text:00000000000018DE                 cmp     rax, [rdi+30h]
.text:00000000000018E2                 jnb     loc_19A2
.text:00000000000018E8                 lea     rdx, [rax+1]
.text:00000000000018EC                 mov     [rdi+28h], rdx
.text:00000000000018F0                 mov     [rax], bl
.text:00000000000018F2
.text:00000000000018F2 loc_18F2:                               ; CODE XREF: main+29C↓j
.text:00000000000018F2                 cmp     ebx, 0Ah
.text:00000000000018F5                 jz      short loc_188A
.text:00000000000018F7
.text:00000000000018F7 loc_18F7:                               ; CODE XREF: main+18C↑j
.text:00000000000018F7                                         ; main+25D↓j
.text:00000000000018F7                 mov     rax, [rbp+8]
.text:00000000000018FB                 cmp     rax, [rbp+10h]
.text:00000000000018FF                 jnb     short loc_1951
.text:0000000000001901                 lea     rdx, [rax+1]
.text:0000000000001905                 mov     [rbp+8], rdx
.text:0000000000001909                 movzx   ebx, byte ptr [rax]
.text:000000000000190C
.text:000000000000190C loc_190C:                               ; CODE XREF: main+24D↓j
.text:000000000000190C                 test    r15b, r15b
.text:000000000000190F                 jz      short loc_18D3
.text:0000000000001911                 cmp     ebx, 9
.text:0000000000001914                 jz      loc_19DE
.text:000000000000191A
.text:000000000000191A loc_191A:                               ; CODE XREF: main+262↓j
.text:000000000000191A                 cmp     ebx, 8
.text:000000000000191D                 jnz     short loc_18A0
.text:000000000000191F                 xor     eax, eax
.text:0000000000001921                 test    r14, r14
.text:0000000000001924                 setnz   al
.text:0000000000001927                 xor     edx, edx
.text:0000000000001929                 sub     r14, rax
.text:000000000000192C                 mov     rax, [rsp+58h+var_50]
.text:0000000000001931                 test    rax, rax
.text:0000000000001934                 setnz   dl
.text:0000000000001937                 sub     rax, rdx
.text:000000000000193A                 mov     [rsp+58h+var_50], rax
.text:000000000000193F
.text:000000000000193F loc_193F:                               ; CODE XREF: main+2FC↓j
.text:000000000000193F                 movzx   r15d, cs:convert_entire_line
.text:0000000000001947                 test    r15b, r15b
.text:000000000000194A                 jnz     short loc_18D3
.text:000000000000194C                 jmp     loc_18B7
.text:0000000000001951 ; ---------------------------------------------------------------------------
.text:0000000000001951
.text:0000000000001951 loc_1951:                               ; CODE XREF: main+1EF↑j
.text:0000000000001951                 mov     rdi, rbp        ; _IO_FILE *
.text:0000000000001954                 call    ___uflow
.text:0000000000001959                 test    eax, eax
.text:000000000000195B                 mov     ebx, eax
.text:000000000000195D                 jns     short loc_190C
.text:000000000000195F                 mov     rdi, rbp        ; stream
.text:0000000000001962                 call    next_file
.text:0000000000001967                 test    rax, rax
.text:000000000000196A                 mov     rbp, rax
.text:000000000000196D                 jnz     short loc_18F7
.text:000000000000196F                 test    r15b, r15b
.text:0000000000001972                 jnz     short loc_191A
.text:0000000000001974
.text:0000000000001974 loc_1974:                               ; CODE XREF: main+16A↑j
.text:0000000000001974                                         ; main+1BD↑j
.text:0000000000001974                 call    cleanup_file_list_stdin
.text:0000000000001979                 mov     rcx, [rsp+58h+var_40]
.text:000000000000197E                 xor     rcx, fs:28h
.text:0000000000001987                 mov     eax, cs:exit_status
.text:000000000000198D                 jnz     loc_1A97
.text:0000000000001993                 add     rsp, 28h
.text:0000000000001997                 pop     rbx
.text:0000000000001998                 pop     rbp
.text:0000000000001999                 pop     r12
.text:000000000000199B                 pop     r13
.text:000000000000199D                 pop     r14
.text:000000000000199F                 pop     r15
.text:00000000000019A1                 retn
.text:00000000000019A2 ; ---------------------------------------------------------------------------
.text:00000000000019A2
.text:00000000000019A2 loc_19A2:                               ; CODE XREF: main+1D2↑j
.text:00000000000019A2                 movzx   esi, bl         ; int
.text:00000000000019A5                 call    ___overflow
.text:00000000000019AA                 test    eax, eax
.text:00000000000019AC                 jns     loc_18F2
.text:00000000000019B2                 lea     rsi, msgid      ; "write error"
.text:00000000000019B9                 mov     edx, 5          ; category
.text:00000000000019BE                 xor     edi, edi        ; domainname
.text:00000000000019C0                 call    _dcgettext
.text:00000000000019C5                 mov     rbx, rax
.text:00000000000019C8                 call    ___errno_location
.text:00000000000019CD                 mov     esi, [rax]      ; errnum
.text:00000000000019CF                 mov     rdx, rbx        ; format
.text:00000000000019D2                 mov     edi, 1          ; status
.text:00000000000019D7                 xor     eax, eax
.text:00000000000019D9                 call    _error
.text:00000000000019DE
.text:00000000000019DE loc_19DE:                               ; CODE XREF: main+204↑j
.text:00000000000019DE                 mov     rdx, r13
.text:00000000000019E1                 mov     rsi, r12
.text:00000000000019E4                 mov     rdi, r14
.text:00000000000019E7                 call    get_next_tab_column
.text:00000000000019EC                 cmp     [rsp+58h+var_51], 0
.text:00000000000019F1                 mov     rbx, rax
.text:00000000000019F4                 jz      short loc_1A11
.text:00000000000019F6                 lea     rax, [r14+1]
.text:00000000000019FA                 add     r14, 1
.text:00000000000019FE                 jz      loc_1AC0
.text:0000000000001A04                 mov     r14, rax
.text:0000000000001A07
.text:0000000000001A07 loc_1A07:                               ; CODE XREF: main+322↓j
.text:0000000000001A07                 mov     ebx, 20h ; ' '
.text:0000000000001A0C                 jmp     loc_193F
.text:0000000000001A11 ; ---------------------------------------------------------------------------
.text:0000000000001A11
.text:0000000000001A11 loc_1A11:                               ; CODE XREF: main+2E4↑j
.text:0000000000001A11                 cmp     r14, rax
.text:0000000000001A14                 jbe     short loc_1A2B
.text:0000000000001A16                 jmp     loc_1AC0
.text:0000000000001A16 ; ---------------------------------------------------------------------------
.text:0000000000001A1B                 align 20h
.text:0000000000001A20
.text:0000000000001A20 loc_1A20:                               ; CODE XREF: main+333↓j
.text:0000000000001A20                 lea     rdx, [rax+1]
.text:0000000000001A24                 mov     [rdi+28h], rdx
.text:0000000000001A28                 mov     byte ptr [rax], 20h ; ' '
.text:0000000000001A2B
.text:0000000000001A2B loc_1A2B:                               ; CODE XREF: main+304↑j
.text:0000000000001A2B                                         ; main+341↓j
.text:0000000000001A2B                 add     r14, 1
.text:0000000000001A2F                 cmp     rbx, r14
.text:0000000000001A32                 jbe     short loc_1A07
.text:0000000000001A34                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001A3B                 mov     rax, [rdi+28h]
.text:0000000000001A3F                 cmp     rax, [rdi+30h]
.text:0000000000001A43                 jb      short loc_1A20
.text:0000000000001A45                 mov     esi, 20h ; ' '  ; int
.text:0000000000001A4A                 call    ___overflow
.text:0000000000001A4F                 test    eax, eax
.text:0000000000001A51                 jns     short loc_1A2B
.text:0000000000001A53                 lea     rsi, msgid      ; "write error"
.text:0000000000001A5A                 mov     edx, 5          ; category
.text:0000000000001A5F                 xor     edi, edi        ; domainname
.text:0000000000001A61                 call    _dcgettext
.text:0000000000001A66                 mov     rbx, rax
.text:0000000000001A69                 call    ___errno_location
.text:0000000000001A6E                 mov     esi, [rax]      ; errnum
.text:0000000000001A70                 mov     rdx, rbx        ; format
.text:0000000000001A73                 mov     edi, 1          ; status
.text:0000000000001A78                 xor     eax, eax
.text:0000000000001A7A                 call    _error
.text:0000000000001A7F
.text:0000000000001A7F loc_1A7F:                               ; CODE XREF: main+A6↑j
.text:0000000000001A7F                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001A84                 jnz     short loc_1A8D
.text:0000000000001A86                 xor     edi, edi        ; status
.text:0000000000001A88                 call    usage
.text:0000000000001A8D ; ---------------------------------------------------------------------------
.text:0000000000001A8D
.text:0000000000001A8D loc_1A8D:                               ; CODE XREF: main+E8↑j
.text:0000000000001A8D                                         ; main+374↑j
.text:0000000000001A8D                 mov     edi, 1          ; status
.text:0000000000001A92                 call    usage
.text:0000000000001A97 ; ---------------------------------------------------------------------------
.text:0000000000001A97
.text:0000000000001A97 loc_1A97:                               ; CODE XREF: main+27D↑j
.text:0000000000001A97                 call    ___stack_chk_fail
.text:0000000000001A9C ; ---------------------------------------------------------------------------
.text:0000000000001A9C
.text:0000000000001A9C loc_1A9C:                               ; CODE XREF: main+194↑j
.text:0000000000001A9C                 lea     rsi, aInputLineIsToo ; "input line is too long"
.text:0000000000001AA3                 mov     edx, 5          ; category
.text:0000000000001AA8                 xor     edi, edi        ; domainname
.text:0000000000001AAA                 call    _dcgettext
.text:0000000000001AAF                 xor     esi, esi        ; errnum
.text:0000000000001AB1                 mov     rdx, rax        ; format
.text:0000000000001AB4                 mov     edi, 1          ; status
.text:0000000000001AB9                 xor     eax, eax
.text:0000000000001ABB                 call    _error
.text:0000000000001AC0
.text:0000000000001AC0 loc_1AC0:                               ; CODE XREF: main+2EE↑j
.text:0000000000001AC0                                         ; main+306↑j
.text:0000000000001AC0                 lea     rsi, aInputLineIsToo ; "input line is too long"
.text:0000000000001AC7                 mov     edx, 5          ; category
.text:0000000000001ACC                 xor     edi, edi        ; domainname
.text:0000000000001ACE                 call    _dcgettext
.text:0000000000001AD3                 xor     esi, esi        ; errnum
.text:0000000000001AD5                 mov     rdx, rax        ; format
.text:0000000000001AD8                 mov     edi, 1          ; status
.text:0000000000001ADD                 xor     eax, eax
.text:0000000000001ADF                 call    _error
.text:0000000000001ADF ; } // starts at 1710
.text:0000000000001AE4                 db      2Eh
.text:0000000000001AE4                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001AEE                 xchg    ax, ax
.text:0000000000001AEE main            endp ; sp-analysis failed
.text:0000000000001AEE
.text:0000000000001AF0
.text:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AF0
.text:0000000000001AF0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001AF0
.text:0000000000001AF0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001AF0                 public start
.text:0000000000001AF0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001AF0 ; __unwind {
.text:0000000000001AF0                 xor     ebp, ebp
.text:0000000000001AF2                 mov     r9, rdx         ; rtld_fini
.text:0000000000001AF5                 pop     rsi             ; argc
.text:0000000000001AF6                 mov     rdx, rsp        ; ubp_av
.text:0000000000001AF9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001AFD                 push    rax
.text:0000000000001AFE                 push    rsp             ; stack_end
.text:0000000000001AFF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001B06                 lea     rcx, __libc_csu_init ; init
.text:0000000000001B0D                 lea     rdi, main       ; main
.text:0000000000001B14                 call    cs:__libc_start_main_ptr
.text:0000000000001B1A                 hlt
.text:0000000000001B1A ; } // starts at 1AF0
.text:0000000000001B1A start           endp
.text:0000000000001B1A
.text:0000000000001B1A ; ---------------------------------------------------------------------------
.text:0000000000001B1B                 align 20h
.text:0000000000001B20
.text:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B20
.text:0000000000001B20 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001B20
.text:0000000000001B20 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1BD3↓p
.text:0000000000001B20                 lea     rdi, __bss_start
.text:0000000000001B27                 push    rbp
.text:0000000000001B28                 lea     rax, __bss_start
.text:0000000000001B2F                 cmp     rax, rdi
.text:0000000000001B32                 mov     rbp, rsp
.text:0000000000001B35                 jz      short loc_1B50
.text:0000000000001B37                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001B3E                 test    rax, rax
.text:0000000000001B41                 jz      short loc_1B50
.text:0000000000001B43                 pop     rbp
.text:0000000000001B44                 jmp     rax
.text:0000000000001B44 ; ---------------------------------------------------------------------------
.text:0000000000001B46                 align 10h
.text:0000000000001B50
.text:0000000000001B50 loc_1B50:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001B50                                         ; deregister_tm_clones+21↑j
.text:0000000000001B50                 pop     rbp
.text:0000000000001B51                 retn
.text:0000000000001B51 deregister_tm_clones endp
.text:0000000000001B51
.text:0000000000001B51 ; ---------------------------------------------------------------------------
.text:0000000000001B52                 align 20h
.text:0000000000001B60
.text:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B60
.text:0000000000001B60 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001B60
.text:0000000000001B60 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001B60                 lea     rdi, __bss_start
.text:0000000000001B67                 lea     rsi, __bss_start
.text:0000000000001B6E                 push    rbp
.text:0000000000001B6F                 sub     rsi, rdi
.text:0000000000001B72                 mov     rbp, rsp
.text:0000000000001B75                 sar     rsi, 3
.text:0000000000001B79                 mov     rax, rsi
.text:0000000000001B7C                 shr     rax, 3Fh
.text:0000000000001B80                 add     rsi, rax
.text:0000000000001B83                 sar     rsi, 1
.text:0000000000001B86                 jz      short loc_1BA0
.text:0000000000001B88                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001B8F                 test    rax, rax
.text:0000000000001B92                 jz      short loc_1BA0
.text:0000000000001B94                 pop     rbp
.text:0000000000001B95                 jmp     rax
.text:0000000000001B95 ; ---------------------------------------------------------------------------
.text:0000000000001B97                 align 20h
.text:0000000000001BA0
.text:0000000000001BA0 loc_1BA0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001BA0                                         ; register_tm_clones+32↑j
.text:0000000000001BA0                 pop     rbp
.text:0000000000001BA1                 retn
.text:0000000000001BA1 register_tm_clones endp
.text:0000000000001BA1
.text:0000000000001BA1 ; ---------------------------------------------------------------------------
.text:0000000000001BA2                 align 10h
.text:0000000000001BB0
.text:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BB0
.text:0000000000001BB0 ; Attributes: info_from_lumina
.text:0000000000001BB0
.text:0000000000001BB0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001BB0                 cmp     cs:completed_7697, 0
.text:0000000000001BB7                 jnz     short locret_1BE8
.text:0000000000001BB9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001BC1                 push    rbp
.text:0000000000001BC2                 mov     rbp, rsp
.text:0000000000001BC5                 jz      short loc_1BD3
.text:0000000000001BC7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001BCE                 call    __cxa_finalize
.text:0000000000001BD3
.text:0000000000001BD3 loc_1BD3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001BD3                 call    deregister_tm_clones
.text:0000000000001BD8                 mov     cs:completed_7697, 1
.text:0000000000001BDF                 pop     rbp
.text:0000000000001BE0                 retn
.text:0000000000001BE0 ; ---------------------------------------------------------------------------
.text:0000000000001BE1                 align 8
.text:0000000000001BE8
.text:0000000000001BE8 locret_1BE8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001BE8                 rep retn
.text:0000000000001BE8 __do_global_dtors_aux endp
.text:0000000000001BE8
.text:0000000000001BE8 ; ---------------------------------------------------------------------------
.text:0000000000001BEA                 align 10h
.text:0000000000001BF0
.text:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BF0
.text:0000000000001BF0 ; Attributes: bp-based frame
.text:0000000000001BF0
.text:0000000000001BF0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001BF0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001BF0                 push    rbp
.text:0000000000001BF1                 mov     rbp, rsp
.text:0000000000001BF4                 pop     rbp
.text:0000000000001BF5                 jmp     register_tm_clones
.text:0000000000001BF5 frame_dummy     endp
.text:0000000000001BF5
.text:0000000000001BF5 ; ---------------------------------------------------------------------------
.text:0000000000001BFA                 align 20h
.text:0000000000001C00
.text:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C00
.text:0000000000001C00 ; Attributes: noreturn
.text:0000000000001C00
.text:0000000000001C00 ; void __fastcall __noreturn usage(int status)
.text:0000000000001C00                 public usage
.text:0000000000001C00 usage           proc near               ; CODE XREF: main+378↑p
.text:0000000000001C00                                         ; main+382↑p
.text:0000000000001C00
.text:0000000000001C00 var_A8          = qword ptr -0A8h
.text:0000000000001C00 var_A0          = qword ptr -0A0h
.text:0000000000001C00 var_98          = qword ptr -98h
.text:0000000000001C00 var_90          = qword ptr -90h
.text:0000000000001C00 var_88          = qword ptr -88h
.text:0000000000001C00 var_80          = qword ptr -80h
.text:0000000000001C00 var_78          = qword ptr -78h
.text:0000000000001C00 var_70          = qword ptr -70h
.text:0000000000001C00 var_68          = qword ptr -68h
.text:0000000000001C00 var_60          = qword ptr -60h
.text:0000000000001C00 var_58          = qword ptr -58h
.text:0000000000001C00 var_50          = qword ptr -50h
.text:0000000000001C00 var_48          = qword ptr -48h
.text:0000000000001C00 var_40          = qword ptr -40h
.text:0000000000001C00 var_30          = qword ptr -30h
.text:0000000000001C00
.text:0000000000001C00 ; __unwind {
.text:0000000000001C00                 push    r13
.text:0000000000001C02                 push    r12
.text:0000000000001C04                 mov     edx, 5          ; category
.text:0000000000001C09                 push    rbp
.text:0000000000001C0A                 push    rbx
.text:0000000000001C0B                 mov     ebp, edi
.text:0000000000001C0D                 sub     rsp, 88h
.text:0000000000001C14                 mov     rbx, cs:program_name
.text:0000000000001C1B                 mov     rax, fs:28h
.text:0000000000001C24                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001C29                 xor     eax, eax
.text:0000000000001C2B                 test    edi, edi
.text:0000000000001C2D                 jz      short loc_1C5D
.text:0000000000001C2F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001C36                 xor     edi, edi        ; domainname
.text:0000000000001C38                 call    _dcgettext
.text:0000000000001C3D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001C44                 mov     rdx, rax
.text:0000000000001C47                 mov     rcx, rbx
.text:0000000000001C4A                 mov     esi, 1
.text:0000000000001C4F                 xor     eax, eax
.text:0000000000001C51                 call    ___fprintf_chk
.text:0000000000001C56
.text:0000000000001C56 loc_1C56:                               ; CODE XREF: usage+2F6↓j
.text:0000000000001C56                 mov     edi, ebp        ; status
.text:0000000000001C58                 call    _exit
.text:0000000000001C5D ; ---------------------------------------------------------------------------
.text:0000000000001C5D
.text:0000000000001C5D loc_1C5D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001C5D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000001C64                 xor     edi, edi        ; domainname
.text:0000000000001C66                 call    _dcgettext
.text:0000000000001C6B                 mov     rdx, rbx
.text:0000000000001C6E                 mov     rsi, rax
.text:0000000000001C71                 mov     edi, 1
.text:0000000000001C76                 xor     eax, eax
.text:0000000000001C78                 call    ___printf_chk
.text:0000000000001C7D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C84                 lea     rsi, aConvertTabsInE ; "Convert tabs in each FILE to spaces, wr"...
.text:0000000000001C8B                 mov     edx, 5          ; category
.text:0000000000001C90                 xor     edi, edi        ; domainname
.text:0000000000001C92                 call    _dcgettext
.text:0000000000001C97                 mov     rsi, rbx        ; stream
.text:0000000000001C9A                 mov     rdi, rax        ; s
.text:0000000000001C9D                 call    _fputs_unlocked
.text:0000000000001CA2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001CA9                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000001CB0                 mov     edx, 5          ; category
.text:0000000000001CB5                 xor     edi, edi        ; domainname
.text:0000000000001CB7                 call    _dcgettext
.text:0000000000001CBC                 mov     rsi, rbx        ; stream
.text:0000000000001CBF                 mov     rdi, rax        ; s
.text:0000000000001CC2                 call    _fputs_unlocked
.text:0000000000001CC7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001CCE                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000001CD5                 mov     edx, 5          ; category
.text:0000000000001CDA                 xor     edi, edi        ; domainname
.text:0000000000001CDC                 call    _dcgettext
.text:0000000000001CE1                 mov     rsi, rbx        ; stream
.text:0000000000001CE4                 mov     rdi, rax        ; s
.text:0000000000001CE7                 call    _fputs_unlocked
.text:0000000000001CEC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001CF3                 lea     rsi, aIInitialDoNotC ; "  -i, --initial    do not convert tabs "...
.text:0000000000001CFA                 mov     edx, 5          ; category
.text:0000000000001CFF                 xor     edi, edi        ; domainname
.text:0000000000001D01                 call    _dcgettext
.text:0000000000001D06                 mov     rsi, rbx        ; stream
.text:0000000000001D09                 mov     rdi, rax        ; s
.text:0000000000001D0C                 call    _fputs_unlocked
.text:0000000000001D11                 call    emit_tab_list_info
.text:0000000000001D16                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D1D                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001D24                 mov     edx, 5          ; category
.text:0000000000001D29                 xor     edi, edi        ; domainname
.text:0000000000001D2B                 call    _dcgettext
.text:0000000000001D30                 mov     rsi, rbx        ; stream
.text:0000000000001D33                 mov     rdi, rax        ; s
.text:0000000000001D36                 call    _fputs_unlocked
.text:0000000000001D3B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D42                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001D49                 mov     edx, 5          ; category
.text:0000000000001D4E                 xor     edi, edi        ; domainname
.text:0000000000001D50                 call    _dcgettext
.text:0000000000001D55                 mov     rsi, rbx        ; stream
.text:0000000000001D58                 mov     rdi, rax        ; s
.text:0000000000001D5B                 lea     rbx, aExpand    ; "expand"
.text:0000000000001D62                 call    _fputs_unlocked
.text:0000000000001D67                 lea     rax, asc_540B   ; "["
.text:0000000000001D6E                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001D75                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001D7E                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001D87                 mov     rdx, rsp
.text:0000000000001D8A                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001D8E                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001D95                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001D9A                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001DA1                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001DA6                 lea     rax, domainname ; "coreutils"
.text:0000000000001DAD                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001DB2                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001DB9                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001DBE                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001DC5                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001DCA                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001DCF                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001DD6                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001DDB                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001DE2                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001DE7                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001DEC                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001DF1                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001DF6                 db      2Eh
.text:0000000000001DF6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001E00
.text:0000000000001E00 loc_1E00:                               ; CODE XREF: usage+21D↓j
.text:0000000000001E00                 add     rdx, 10h
.text:0000000000001E04                 mov     rdi, [rdx]
.text:0000000000001E07                 test    rdi, rdi
.text:0000000000001E0A                 jz      short loc_1E1F
.text:0000000000001E0C                 mov     ecx, 7
.text:0000000000001E11                 mov     rsi, rbx
.text:0000000000001E14                 repe cmpsb
.text:0000000000001E16                 setnbe  al
.text:0000000000001E19                 sbb     al, 0
.text:0000000000001E1B                 test    al, al
.text:0000000000001E1D                 jnz     short loc_1E00
.text:0000000000001E1F
.text:0000000000001E1F loc_1E1F:                               ; CODE XREF: usage+20A↑j
.text:0000000000001E1F                 mov     r12, [rdx+8]
.text:0000000000001E23                 xor     edi, edi        ; domainname
.text:0000000000001E25                 mov     edx, 5          ; category
.text:0000000000001E2A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001E31                 test    r12, r12
.text:0000000000001E34                 jz      loc_1EFB
.text:0000000000001E3A                 call    _dcgettext
.text:0000000000001E3F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001E46                 lea     rdx, unk_5481
.text:0000000000001E4D                 mov     rsi, rax
.text:0000000000001E50                 mov     edi, 1
.text:0000000000001E55                 xor     eax, eax
.text:0000000000001E57                 call    ___printf_chk
.text:0000000000001E5C                 xor     esi, esi        ; locale
.text:0000000000001E5E                 mov     edi, 5          ; category
.text:0000000000001E63                 call    _setlocale
.text:0000000000001E68                 test    rax, rax
.text:0000000000001E6B                 jz      short loc_1E89
.text:0000000000001E6D                 lea     rsi, s2         ; "en_"
.text:0000000000001E74                 mov     edx, 3          ; n
.text:0000000000001E79                 mov     rdi, rax        ; s1
.text:0000000000001E7C                 call    _strncmp
.text:0000000000001E81                 test    eax, eax
.text:0000000000001E83                 jnz     loc_1F90
.text:0000000000001E89
.text:0000000000001E89 loc_1E89:                               ; CODE XREF: usage+26B↑j
.text:0000000000001E89                                         ; usage+3B5↓j
.text:0000000000001E89                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001E90                 xor     edi, edi        ; domainname
.text:0000000000001E92                 mov     edx, 5          ; category
.text:0000000000001E97                 call    _dcgettext
.text:0000000000001E9C                 lea     rcx, aExpand    ; "expand"
.text:0000000000001EA3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001EAA                 mov     rsi, rax
.text:0000000000001EAD                 mov     edi, 1
.text:0000000000001EB2                 xor     eax, eax
.text:0000000000001EB4                 call    ___printf_chk
.text:0000000000001EB9                 cmp     r12, rbx
.text:0000000000001EBC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001EC3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001ECA                 cmovz   rbx, rcx
.text:0000000000001ECE
.text:0000000000001ECE loc_1ECE:                               ; CODE XREF: usage+384↓j
.text:0000000000001ECE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001ED5                 xor     edi, edi        ; domainname
.text:0000000000001ED7                 mov     edx, 5          ; category
.text:0000000000001EDC                 call    _dcgettext
.text:0000000000001EE1                 mov     rcx, rbx
.text:0000000000001EE4                 mov     rsi, rax
.text:0000000000001EE7                 mov     rdx, r12
.text:0000000000001EEA                 mov     edi, 1
.text:0000000000001EEF                 xor     eax, eax
.text:0000000000001EF1                 call    ___printf_chk
.text:0000000000001EF6                 jmp     loc_1C56
.text:0000000000001EFB ; ---------------------------------------------------------------------------
.text:0000000000001EFB
.text:0000000000001EFB loc_1EFB:                               ; CODE XREF: usage+234↑j
.text:0000000000001EFB                 call    _dcgettext
.text:0000000000001F00                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001F07                 lea     rdx, unk_5481
.text:0000000000001F0E                 mov     rsi, rax
.text:0000000000001F11                 mov     edi, 1
.text:0000000000001F16                 xor     eax, eax
.text:0000000000001F18                 call    ___printf_chk
.text:0000000000001F1D                 xor     esi, esi        ; locale
.text:0000000000001F1F                 mov     edi, 5          ; category
.text:0000000000001F24                 call    _setlocale
.text:0000000000001F29                 test    rax, rax
.text:0000000000001F2C                 jz      short loc_1F46
.text:0000000000001F2E                 lea     rsi, s2         ; "en_"
.text:0000000000001F35                 mov     edx, 3          ; n
.text:0000000000001F3A                 mov     rdi, rax        ; s1
.text:0000000000001F3D                 call    _strncmp
.text:0000000000001F42                 test    eax, eax
.text:0000000000001F44                 jnz     short loc_1F89
.text:0000000000001F46
.text:0000000000001F46 loc_1F46:                               ; CODE XREF: usage+32C↑j
.text:0000000000001F46                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001F4D                 mov     edx, 5          ; category
.text:0000000000001F52                 xor     edi, edi        ; domainname
.text:0000000000001F54                 lea     r12, aExpand    ; "expand"
.text:0000000000001F5B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001F62                 call    _dcgettext
.text:0000000000001F67                 lea     rcx, aExpand    ; "expand"
.text:0000000000001F6E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001F75                 mov     rsi, rax
.text:0000000000001F78                 mov     edi, 1
.text:0000000000001F7D                 xor     eax, eax
.text:0000000000001F7F                 call    ___printf_chk
.text:0000000000001F84                 jmp     loc_1ECE
.text:0000000000001F89 ; ---------------------------------------------------------------------------
.text:0000000000001F89
.text:0000000000001F89 loc_1F89:                               ; CODE XREF: usage+344↑j
.text:0000000000001F89                 lea     r12, aExpand    ; "expand"
.text:0000000000001F90
.text:0000000000001F90 loc_1F90:                               ; CODE XREF: usage+283↑j
.text:0000000000001F90                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F97                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001F9E                 xor     edi, edi        ; domainname
.text:0000000000001FA0                 mov     edx, 5          ; category
.text:0000000000001FA5                 call    _dcgettext
.text:0000000000001FAA                 mov     rsi, r13        ; stream
.text:0000000000001FAD                 mov     rdi, rax        ; s
.text:0000000000001FB0                 call    _fputs_unlocked
.text:0000000000001FB5                 jmp     loc_1E89
.text:0000000000001FB5 ; } // starts at 1C00
.text:0000000000001FB5 usage           endp
.text:0000000000001FB5
.text:0000000000001FB5 ; ---------------------------------------------------------------------------
.text:0000000000001FBA                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FC0
.text:0000000000001FC0
.text:0000000000001FC0 set_extend_size proc near               ; CODE XREF: parse_tab_stops:loc_22F8↓p
.text:0000000000001FC0                                         ; parse_tab_stops:loc_2465↓p
.text:0000000000001FC0 ; __unwind {
.text:0000000000001FC0                 cmp     cs:extend_size, 0
.text:0000000000001FC8                 push    rbx
.text:0000000000001FC9                 mov     eax, 1
.text:0000000000001FCE                 mov     rbx, rdi
.text:0000000000001FD1                 jz      short loc_1FF6
.text:0000000000001FD3                 lea     rsi, aSpecifierOnlyA ; "'/' specifier only allowed with the las"...
.text:0000000000001FDA                 mov     edx, 5          ; category
.text:0000000000001FDF                 xor     edi, edi        ; domainname
.text:0000000000001FE1                 call    _dcgettext
.text:0000000000001FE6                 xor     esi, esi        ; errnum
.text:0000000000001FE8                 mov     rdx, rax        ; format
.text:0000000000001FEB                 xor     edi, edi        ; status
.text:0000000000001FED                 xor     eax, eax
.text:0000000000001FEF                 call    _error
.text:0000000000001FF4                 xor     eax, eax
.text:0000000000001FF6
.text:0000000000001FF6 loc_1FF6:                               ; CODE XREF: set_extend_size+11↑j
.text:0000000000001FF6                 mov     cs:extend_size, rbx
.text:0000000000001FFD                 pop     rbx
.text:0000000000001FFE                 retn
.text:0000000000001FFE ; } // starts at 1FC0
.text:0000000000001FFE set_extend_size endp
.text:0000000000001FFE
.text:0000000000001FFE ; ---------------------------------------------------------------------------
.text:0000000000001FFF                 align 20h
.text:0000000000002000
.text:0000000000002000 ; =============== S U B R O U T I N E =======================================
.text:0000000000002000
.text:0000000000002000
.text:0000000000002000 set_increment_size proc near            ; CODE XREF: parse_tab_stops+C2↓p
.text:0000000000002000                                         ; parse_tab_stops+10D↓p
.text:0000000000002000 ; __unwind {
.text:0000000000002000                 cmp     cs:increment_size, 0
.text:0000000000002008                 push    rbx
.text:0000000000002009                 mov     eax, 1
.text:000000000000200E                 mov     rbx, rdi
.text:0000000000002011                 jz      short loc_2036
.text:0000000000002013                 lea     rsi, aSpecifierOnlyA_0 ; "'+' specifier only allowed with the las"...
.text:000000000000201A                 mov     edx, 5          ; category
.text:000000000000201F                 xor     edi, edi        ; domainname
.text:0000000000002021                 call    _dcgettext
.text:0000000000002026                 xor     esi, esi        ; errnum
.text:0000000000002028                 mov     rdx, rax        ; format
.text:000000000000202B                 xor     edi, edi        ; status
.text:000000000000202D                 xor     eax, eax
.text:000000000000202F                 call    _error
.text:0000000000002034                 xor     eax, eax
.text:0000000000002036
.text:0000000000002036 loc_2036:                               ; CODE XREF: set_increment_size+11↑j
.text:0000000000002036                 mov     cs:increment_size, rbx
.text:000000000000203D                 pop     rbx
.text:000000000000203E                 retn
.text:000000000000203E ; } // starts at 2000
.text:000000000000203E set_increment_size endp
.text:000000000000203E
.text:000000000000203E ; ---------------------------------------------------------------------------
.text:000000000000203F                 align 20h
.text:0000000000002040
.text:0000000000002040 ; =============== S U B R O U T I N E =======================================
.text:0000000000002040
.text:0000000000002040
.text:0000000000002040                 public add_tab_stop
.text:0000000000002040 add_tab_stop    proc near               ; CODE XREF: parse_tab_stops:loc_22C0↓p
.text:0000000000002040                                         ; parse_tab_stops+300↓j
.text:0000000000002040 ; __unwind {
.text:0000000000002040                 push    rbp
.text:0000000000002041                 push    rbx
.text:0000000000002042                 mov     rbx, rdi
.text:0000000000002045                 sub     rsp, 8
.text:0000000000002049                 mov     rax, cs:first_free_tab
.text:0000000000002050                 mov     rdi, cs:tab_list
.text:0000000000002057                 mov     rsi, cs:n_tabs_allocated
.text:000000000000205E                 test    rax, rax
.text:0000000000002061                 jz      short loc_2098
.text:0000000000002063                 lea     rdx, ds:0[rax*8]
.text:000000000000206B                 mov     rcx, [rdi+rdx-8]
.text:0000000000002070                 cmp     rcx, rbx
.text:0000000000002073                 jbe     loc_2142
.text:0000000000002079                 cmp     rax, rsi
.text:000000000000207C                 jz      short loc_20D0
.text:000000000000207E                 add     rax, 1
.text:0000000000002082                 mov     [rdi+rdx], rbx
.text:0000000000002086                 mov     cs:first_free_tab, rax
.text:000000000000208D                 add     rsp, 8
.text:0000000000002091                 pop     rbx
.text:0000000000002092                 pop     rbp
.text:0000000000002093                 retn
.text:0000000000002093 ; ---------------------------------------------------------------------------
.text:0000000000002094                 align 8
.text:0000000000002098
.text:0000000000002098 loc_2098:                               ; CODE XREF: add_tab_stop+21↑j
.text:0000000000002098                 mov     rbp, rbx
.text:000000000000209B
.text:000000000000209B loc_209B:                               ; CODE XREF: add_tab_stop+108↓j
.text:000000000000209B                 cmp     rax, rsi
.text:000000000000209E                 jz      short loc_20D2
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: add_tab_stop+D2↓j
.text:00000000000020A0                 mov     [rdi+rax*8], rbx
.text:00000000000020A4                 cmp     cs:max_column_width, rbp
.text:00000000000020AB                 lea     rdx, [rax+1]
.text:00000000000020AF                 mov     cs:first_free_tab, rdx
.text:00000000000020B6                 jnb     short loc_20BF
.text:00000000000020B8                 mov     cs:max_column_width, rbp
.text:00000000000020BF
.text:00000000000020BF loc_20BF:                               ; CODE XREF: add_tab_stop+76↑j
.text:00000000000020BF                 add     rsp, 8
.text:00000000000020C3                 pop     rbx
.text:00000000000020C4                 pop     rbp
.text:00000000000020C5                 retn
.text:00000000000020C5 ; ---------------------------------------------------------------------------
.text:00000000000020C6                 align 10h
.text:00000000000020D0
.text:00000000000020D0 loc_20D0:                               ; CODE XREF: add_tab_stop+3C↑j
.text:00000000000020D0                 xor     ebp, ebp
.text:00000000000020D2
.text:00000000000020D2 loc_20D2:                               ; CODE XREF: add_tab_stop+5E↑j
.text:00000000000020D2                 test    rdi, rdi
.text:00000000000020D5                 jz      short loc_2118
.text:00000000000020D7                 mov     rax, 0AAAAAAAAAAAAAA9h
.text:00000000000020E1                 cmp     rsi, rax
.text:00000000000020E4                 ja      short loc_213D
.text:00000000000020E6                 mov     rax, rsi
.text:00000000000020E9                 shr     rax, 1
.text:00000000000020EC                 lea     rsi, [rsi+rax+1]
.text:00000000000020F1
.text:00000000000020F1 loc_20F1:                               ; CODE XREF: add_tab_stop+FB↓j
.text:00000000000020F1                 mov     cs:n_tabs_allocated, rsi
.text:00000000000020F8                 shl     rsi, 3
.text:00000000000020FC                 call    xrealloc
.text:0000000000002101                 mov     rdi, rax
.text:0000000000002104                 mov     cs:tab_list, rax
.text:000000000000210B                 mov     rax, cs:first_free_tab
.text:0000000000002112                 jmp     short loc_20A0
.text:0000000000002112 ; ---------------------------------------------------------------------------
.text:0000000000002114                 align 8
.text:0000000000002118
.text:0000000000002118 loc_2118:                               ; CODE XREF: add_tab_stop+95↑j
.text:0000000000002118                 test    rsi, rsi
.text:000000000000211B                 mov     eax, 10h
.text:0000000000002120                 mov     edx, 8
.text:0000000000002125                 cmovz   rsi, rax
.text:0000000000002129                 mov     rax, rdx
.text:000000000000212C                 xor     ecx, ecx
.text:000000000000212E                 mul     rsi
.text:0000000000002131                 jo      short loc_214D
.text:0000000000002133
.text:0000000000002133 loc_2133:                               ; CODE XREF: add_tab_stop+112↓j
.text:0000000000002133                 test    rax, rax
.text:0000000000002136                 js      short loc_213D
.text:0000000000002138                 test    rcx, rcx
.text:000000000000213B                 jz      short loc_20F1
.text:000000000000213D
.text:000000000000213D loc_213D:                               ; CODE XREF: add_tab_stop+A4↑j
.text:000000000000213D                                         ; add_tab_stop+F6↑j
.text:000000000000213D                 call    xalloc_die
.text:0000000000002142 ; ---------------------------------------------------------------------------
.text:0000000000002142
.text:0000000000002142 loc_2142:                               ; CODE XREF: add_tab_stop+33↑j
.text:0000000000002142                 mov     rbp, rbx
.text:0000000000002145                 sub     rbp, rcx
.text:0000000000002148                 jmp     loc_209B
.text:000000000000214D ; ---------------------------------------------------------------------------
.text:000000000000214D
.text:000000000000214D loc_214D:                               ; CODE XREF: add_tab_stop+F1↑j
.text:000000000000214D                 mov     ecx, 1
.text:0000000000002152                 jmp     short loc_2133
.text:0000000000002152 ; } // starts at 2040
.text:0000000000002152 add_tab_stop    endp
.text:0000000000002152
.text:0000000000002152 ; ---------------------------------------------------------------------------
.text:0000000000002154                 align 20h
.text:0000000000002160
.text:0000000000002160 ; =============== S U B R O U T I N E =======================================
.text:0000000000002160
.text:0000000000002160
.text:0000000000002160                 public parse_tab_stops
.text:0000000000002160 parse_tab_stops proc near               ; CODE XREF: main+F5↑p
.text:0000000000002160                                         ; main+110↑p ...
.text:0000000000002160
.text:0000000000002160 s               = qword ptr -48h
.text:0000000000002160 var_40          = qword ptr -40h
.text:0000000000002160
.text:0000000000002160 ; __unwind {
.text:0000000000002160                 push    r15
.text:0000000000002162                 push    r14
.text:0000000000002164                 push    r13
.text:0000000000002166                 push    r12
.text:0000000000002168                 push    rbp
.text:0000000000002169                 push    rbx
.text:000000000000216A                 sub     rsp, 18h
.text:000000000000216E                 movzx   r15d, byte ptr [rdi]
.text:0000000000002172                 test    r15b, r15b
.text:0000000000002175                 jz      loc_2281
.text:000000000000217B                 mov     rbx, rdi
.text:000000000000217E                 xor     r14d, r14d
.text:0000000000002181                 mov     byte ptr [rsp+48h+var_40], 1
.text:0000000000002186                 mov     [rsp+48h+s], 0
.text:000000000000218E                 xor     r13d, r13d
.text:0000000000002191                 xor     r12d, r12d
.text:0000000000002194                 xor     ebp, ebp
.text:0000000000002196                 jmp     short loc_21FE
.text:0000000000002196 ; ---------------------------------------------------------------------------
.text:0000000000002198                 align 20h
.text:00000000000021A0
.text:00000000000021A0 loc_21A0:                               ; CODE XREF: parse_tab_stops+A2↓j
.text:00000000000021A0                 call    ___ctype_b_loc
.text:00000000000021A5                 mov     rsi, [rax]
.text:00000000000021A8                 movzx   ecx, r15b
.text:00000000000021AC                 test    byte ptr [rsi+rcx*2], 1
.text:00000000000021B0                 jnz     short loc_2204
.text:00000000000021B2                 cmp     r15b, 2Fh ; '/'
.text:00000000000021B6                 jz      loc_22D8
.text:00000000000021BC                 cmp     r15b, 2Bh ; '+'
.text:00000000000021C0                 jz      loc_2318
.text:00000000000021C6                 movsx   edx, r15b
.text:00000000000021CA                 sub     edx, 30h ; '0'
.text:00000000000021CD                 cmp     edx, 9
.text:00000000000021D0                 ja      loc_2480
.text:00000000000021D6                 test    bpl, bpl
.text:00000000000021D9                 jnz     loc_2338
.text:00000000000021DF                 movsxd  r14, edx
.text:00000000000021E2                 mov     rax, rbx
.text:00000000000021E5                 mov     [rsp+48h+s], rbx
.text:00000000000021E9                 mov     ebp, 1
.text:00000000000021EE                 xchg    ax, ax
.text:00000000000021F0
.text:00000000000021F0 loc_21F0:                               ; CODE XREF: parse_tab_stops+153↓j
.text:00000000000021F0                                         ; parse_tab_stops+16D↓j ...
.text:00000000000021F0                 movzx   r15d, byte ptr [rax+1]
.text:00000000000021F5                 lea     rbx, [rax+1]
.text:00000000000021F9                 test    r15b, r15b
.text:00000000000021FC                 jz      short loc_2248
.text:00000000000021FE
.text:00000000000021FE loc_21FE:                               ; CODE XREF: parse_tab_stops+36↑j
.text:00000000000021FE                                         ; parse_tab_stops+E3↓j
.text:00000000000021FE                 cmp     r15b, 2Ch ; ','
.text:0000000000002202                 jnz     short loc_21A0
.text:0000000000002204
.text:0000000000002204 loc_2204:                               ; CODE XREF: parse_tab_stops+50↑j
.text:0000000000002204                 test    bpl, bpl
.text:0000000000002207                 jz      loc_22B0
.text:000000000000220D                 test    r12b, r12b
.text:0000000000002210                 mov     rdi, r14
.text:0000000000002213                 jnz     loc_22F8
.text:0000000000002219                 test    r13b, r13b
.text:000000000000221C                 jz      loc_22C0
.text:0000000000002222                 call    set_increment_size
.text:0000000000002227                 test    al, al
.text:0000000000002229                 mov     r13d, eax
.text:000000000000222C                 jz      loc_24AF
.text:0000000000002232                 mov     rax, rbx
.text:0000000000002235                 xor     ebp, ebp
.text:0000000000002237                 movzx   r15d, byte ptr [rax+1]
.text:000000000000223C                 lea     rbx, [rax+1]
.text:0000000000002240                 test    r15b, r15b
.text:0000000000002243                 jnz     short loc_21FE
.text:0000000000002245                 nop     dword ptr [rax]
.text:0000000000002248
.text:0000000000002248 loc_2248:                               ; CODE XREF: parse_tab_stops+9C↑j
.text:0000000000002248                 test    bpl, bpl
.text:000000000000224B                 jz      short loc_2276
.text:000000000000224D                 cmp     byte ptr [rsp+48h+var_40], 0
.text:0000000000002252                 jz      loc_24AF
.text:0000000000002258                 test    r12b, r12b
.text:000000000000225B                 mov     rdi, r14
.text:000000000000225E                 jnz     loc_2465
.text:0000000000002264                 test    r13b, r13b
.text:0000000000002267                 jz      loc_2452
.text:000000000000226D                 call    set_increment_size
.text:0000000000002272                 mov     byte ptr [rsp+48h+var_40], al
.text:0000000000002276
.text:0000000000002276 loc_2276:                               ; CODE XREF: parse_tab_stops+EB↑j
.text:0000000000002276                 cmp     byte ptr [rsp+48h+var_40], 0
.text:000000000000227B                 jz      loc_24AF
.text:0000000000002281
.text:0000000000002281 loc_2281:                               ; CODE XREF: parse_tab_stops+15↑j
.text:0000000000002281                                         ; parse_tab_stops+313↓j
.text:0000000000002281                 add     rsp, 18h
.text:0000000000002285                 pop     rbx
.text:0000000000002286                 pop     rbp
.text:0000000000002287                 pop     r12
.text:0000000000002289                 pop     r13
.text:000000000000228B                 pop     r14
.text:000000000000228D                 pop     r15
.text:000000000000228F                 retn
.text:0000000000002290 ; ---------------------------------------------------------------------------
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: parse_tab_stops+1E5↓j
.text:0000000000002290                 lea     rax, [r14+r14*4]
.text:0000000000002294                 movsxd  rdx, edx
.text:0000000000002297                 lea     rax, [rdx+rax*2]
.text:000000000000229B                 cmp     rax, r14
.text:000000000000229E                 jb      loc_234B
.text:00000000000022A4                 mov     r14, rax
.text:00000000000022A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000022B0
.text:00000000000022B0 loc_22B0:                               ; CODE XREF: parse_tab_stops+A7↑j
.text:00000000000022B0                 mov     rax, rbx
.text:00000000000022B3                 jmp     loc_21F0
.text:00000000000022B3 ; ---------------------------------------------------------------------------
.text:00000000000022B8                 align 20h
.text:00000000000022C0
.text:00000000000022C0 loc_22C0:                               ; CODE XREF: parse_tab_stops+BC↑j
.text:00000000000022C0                 call    add_tab_stop
.text:00000000000022C5                 mov     r12d, r13d
.text:00000000000022C8                 xor     ebp, ebp
.text:00000000000022CA                 mov     rax, rbx
.text:00000000000022CD                 jmp     loc_21F0
.text:00000000000022CD ; ---------------------------------------------------------------------------
.text:00000000000022D2                 align 8
.text:00000000000022D8
.text:00000000000022D8 loc_22D8:                               ; CODE XREF: parse_tab_stops+56↑j
.text:00000000000022D8                 test    bpl, bpl
.text:00000000000022DB                 jnz     loc_23C8
.text:00000000000022E1                 xor     r13d, r13d
.text:00000000000022E4                 mov     rax, rbx
.text:00000000000022E7                 mov     r12d, 1
.text:00000000000022ED                 jmp     loc_21F0
.text:00000000000022ED ; ---------------------------------------------------------------------------
.text:00000000000022F2                 align 8
.text:00000000000022F8
.text:00000000000022F8 loc_22F8:                               ; CODE XREF: parse_tab_stops+B3↑j
.text:00000000000022F8                 call    set_extend_size
.text:00000000000022FD                 test    al, al
.text:00000000000022FF                 mov     r12d, eax
.text:0000000000002302                 jz      loc_24AF
.text:0000000000002308                 mov     rax, rbx
.text:000000000000230B                 xor     ebp, ebp
.text:000000000000230D                 jmp     loc_21F0
.text:000000000000230D ; ---------------------------------------------------------------------------
.text:0000000000002312                 align 8
.text:0000000000002318
.text:0000000000002318 loc_2318:                               ; CODE XREF: parse_tab_stops+60↑j
.text:0000000000002318                 test    bpl, bpl
.text:000000000000231B                 jnz     loc_2410
.text:0000000000002321                 xor     r12d, r12d
.text:0000000000002324                 mov     rax, rbx
.text:0000000000002327                 mov     r13d, 1
.text:000000000000232D                 jmp     loc_21F0
.text:000000000000232D ; ---------------------------------------------------------------------------
.text:0000000000002332                 align 8
.text:0000000000002338
.text:0000000000002338 loc_2338:                               ; CODE XREF: parse_tab_stops+79↑j
.text:0000000000002338                 mov     rax, 1999999999999999h
.text:0000000000002342                 cmp     r14, rax
.text:0000000000002345                 jbe     loc_2290
.text:000000000000234B
.text:000000000000234B loc_234B:                               ; CODE XREF: parse_tab_stops+13E↑j
.text:000000000000234B                 mov     r15, [rsp+48h+s]
.text:000000000000234F                 lea     rsi, accept     ; "0123456789"
.text:0000000000002356                 mov     rdi, r15        ; s
.text:0000000000002359                 call    _strspn
.text:000000000000235E                 mov     rdi, r15
.text:0000000000002361                 mov     rsi, rax
.text:0000000000002364                 mov     rbx, rax
.text:0000000000002367                 mov     [rsp+48h+s], r15
.text:000000000000236B                 call    xstrndup
.text:0000000000002370                 mov     rdi, rax
.text:0000000000002373                 mov     r15, rax
.text:0000000000002376                 call    quote
.text:000000000000237B                 lea     rsi, aTabStopIsTooLa ; "tab stop is too large %s"
.text:0000000000002382                 mov     edx, 5          ; category
.text:0000000000002387                 xor     edi, edi        ; domainname
.text:0000000000002389                 mov     [rsp+48h+var_40], rax
.text:000000000000238E                 call    _dcgettext
.text:0000000000002393                 mov     rcx, [rsp+48h+var_40]
.text:0000000000002398                 mov     rdx, rax        ; format
.text:000000000000239B                 xor     esi, esi        ; errnum
.text:000000000000239D                 xor     eax, eax
.text:000000000000239F                 xor     edi, edi        ; status
.text:00000000000023A1                 call    _error
.text:00000000000023A6                 mov     rdi, r15        ; ptr
.text:00000000000023A9                 call    _free
.text:00000000000023AE                 mov     rax, [rsp+48h+s]
.text:00000000000023B2                 mov     byte ptr [rsp+48h+var_40], 0
.text:00000000000023B7                 lea     rax, [rax+rbx-1]
.text:00000000000023BC                 jmp     loc_21F0
.text:00000000000023BC ; ---------------------------------------------------------------------------
.text:00000000000023C1                 align 8
.text:00000000000023C8
.text:00000000000023C8 loc_23C8:                               ; CODE XREF: parse_tab_stops+17B↑j
.text:00000000000023C8                 mov     rdi, rbx
.text:00000000000023CB                 xor     r13d, r13d
.text:00000000000023CE                 call    quote
.text:00000000000023D3                 lea     rsi, aSpecifierNotAt ; "'/' specifier not at start of number: %"...
.text:00000000000023DA                 mov     r12, rax
.text:00000000000023DD                 mov     edx, 5          ; category
.text:00000000000023E2                 xor     edi, edi        ; domainname
.text:00000000000023E4                 call    _dcgettext
.text:00000000000023E9                 mov     rcx, r12
.text:00000000000023EC                 mov     rdx, rax        ; format
.text:00000000000023EF                 xor     esi, esi        ; errnum
.text:00000000000023F1                 xor     eax, eax
.text:00000000000023F3                 xor     edi, edi        ; status
.text:00000000000023F5                 mov     r12d, ebp
.text:00000000000023F8                 call    _error
.text:00000000000023FD                 mov     rax, rbx
.text:0000000000002400                 mov     byte ptr [rsp+48h+var_40], 0
.text:0000000000002405                 jmp     loc_21F0
.text:0000000000002405 ; ---------------------------------------------------------------------------
.text:000000000000240A                 align 10h
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: parse_tab_stops+1BB↑j
.text:0000000000002410                 mov     rdi, rbx
.text:0000000000002413                 mov     r13d, ebp
.text:0000000000002416                 call    quote
.text:000000000000241B                 lea     rsi, aSpecifierNotAt_0 ; "'+' specifier not at start of number: %"...
.text:0000000000002422                 mov     r12, rax
.text:0000000000002425                 mov     edx, 5          ; category
.text:000000000000242A                 xor     edi, edi        ; domainname
.text:000000000000242C                 call    _dcgettext
.text:0000000000002431                 mov     rcx, r12
.text:0000000000002434                 mov     rdx, rax        ; format
.text:0000000000002437                 xor     esi, esi        ; errnum
.text:0000000000002439                 xor     eax, eax
.text:000000000000243B                 xor     edi, edi        ; status
.text:000000000000243D                 xor     r12d, r12d
.text:0000000000002440                 call    _error
.text:0000000000002445                 mov     rax, rbx
.text:0000000000002448                 mov     byte ptr [rsp+48h+var_40], 0
.text:000000000000244D                 jmp     loc_21F0
.text:0000000000002452 ; ---------------------------------------------------------------------------
.text:0000000000002452
.text:0000000000002452 loc_2452:                               ; CODE XREF: parse_tab_stops+107↑j
.text:0000000000002452                 add     rsp, 18h
.text:0000000000002456                 pop     rbx
.text:0000000000002457                 pop     rbp
.text:0000000000002458                 pop     r12
.text:000000000000245A                 pop     r13
.text:000000000000245C                 pop     r14
.text:000000000000245E                 pop     r15
.text:0000000000002460                 jmp     add_tab_stop
.text:0000000000002465 ; ---------------------------------------------------------------------------
.text:0000000000002465
.text:0000000000002465 loc_2465:                               ; CODE XREF: parse_tab_stops+FE↑j
.text:0000000000002465                 call    set_extend_size
.text:000000000000246A                 mov     byte ptr [rsp+48h+var_40], al
.text:000000000000246E                 cmp     byte ptr [rsp+48h+var_40], 0
.text:0000000000002473                 jnz     loc_2281
.text:0000000000002479                 jmp     short loc_24AF
.text:0000000000002479 ; ---------------------------------------------------------------------------
.text:000000000000247B                 align 20h
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: parse_tab_stops+70↑j
.text:0000000000002480                 mov     rdi, rbx
.text:0000000000002483                 call    quote
.text:0000000000002488                 lea     rsi, aTabSizeContain ; "tab size contains invalid character(s):"...
.text:000000000000248F                 mov     rbx, rax
.text:0000000000002492                 mov     edx, 5          ; category
.text:0000000000002497                 xor     edi, edi        ; domainname
.text:0000000000002499                 call    _dcgettext
.text:000000000000249E                 mov     rcx, rbx
.text:00000000000024A1                 mov     rdx, rax        ; format
.text:00000000000024A4                 xor     esi, esi        ; errnum
.text:00000000000024A6                 xor     edi, edi        ; status
.text:00000000000024A8                 xor     eax, eax
.text:00000000000024AA                 call    _error
.text:00000000000024AF
.text:00000000000024AF loc_24AF:                               ; CODE XREF: parse_tab_stops+CC↑j
.text:00000000000024AF                                         ; parse_tab_stops+F2↑j ...
.text:00000000000024AF                 mov     edi, 1          ; status
.text:00000000000024B4                 call    _exit
.text:00000000000024B4 ; } // starts at 2160
.text:00000000000024B4 parse_tab_stops endp
.text:00000000000024B4
.text:00000000000024B4 ; ---------------------------------------------------------------------------
.text:00000000000024B9                 align 20h
.text:00000000000024C0
.text:00000000000024C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024C0
.text:00000000000024C0
.text:00000000000024C0                 public finalize_tab_stops
.text:00000000000024C0 finalize_tab_stops proc near            ; CODE XREF: main:loc_1852↑p
.text:00000000000024C0 ; __unwind {
.text:00000000000024C0                 sub     rsp, 8
.text:00000000000024C4                 mov     rsi, cs:first_free_tab
.text:00000000000024CB                 mov     rdi, cs:tab_list
.text:00000000000024D2                 test    rsi, rsi
.text:00000000000024D5                 jz      short loc_2554
.text:00000000000024D7                 mov     r8, [rdi]
.text:00000000000024DA                 test    r8, r8
.text:00000000000024DD                 mov     rcx, r8
.text:00000000000024E0                 jz      loc_2590
.text:00000000000024E6                 xor     eax, eax
.text:00000000000024E8                 jmp     short loc_2509
.text:00000000000024E8 ; ---------------------------------------------------------------------------
.text:00000000000024EA                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: finalize_tab_stops+50↓j
.text:00000000000024F0                 mov     rdx, [rdi+rax*8]
.text:00000000000024F4                 test    rdx, rdx
.text:00000000000024F7                 jz      loc_2590
.text:00000000000024FD                 cmp     rcx, rdx
.text:0000000000002500                 jnb     loc_25B4
.text:0000000000002506                 mov     rcx, rdx
.text:0000000000002509
.text:0000000000002509 loc_2509:                               ; CODE XREF: finalize_tab_stops+28↑j
.text:0000000000002509                 add     rax, 1
.text:000000000000250D                 cmp     rsi, rax
.text:0000000000002510                 jnz     short loc_24F0
.text:0000000000002512                 mov     rax, cs:increment_size
.text:0000000000002519                 test    rax, rax
.text:000000000000251C                 jz      short loc_252C
.text:000000000000251E                 cmp     cs:extend_size, 0
.text:0000000000002526                 jnz     loc_25D8
.text:000000000000252C
.text:000000000000252C loc_252C:                               ; CODE XREF: finalize_tab_stops+5C↑j
.text:000000000000252C                 cmp     rsi, 1
.text:0000000000002530                 jz      short loc_2542
.text:0000000000002532
.text:0000000000002532 loc_2532:                               ; CODE XREF: finalize_tab_stops+89↓j
.text:0000000000002532                 mov     cs:tab_size, 0
.text:000000000000253D
.text:000000000000253D loc_253D:                               ; CODE XREF: finalize_tab_stops+92↓j
.text:000000000000253D                 add     rsp, 8
.text:0000000000002541                 retn
.text:0000000000002542 ; ---------------------------------------------------------------------------
.text:0000000000002542
.text:0000000000002542 loc_2542:                               ; CODE XREF: finalize_tab_stops+70↑j
.text:0000000000002542                 or      rax, cs:extend_size
.text:0000000000002549                 jnz     short loc_2532
.text:000000000000254B                 mov     cs:tab_size, r8
.text:0000000000002552                 jmp     short loc_253D
.text:0000000000002554 ; ---------------------------------------------------------------------------
.text:0000000000002554
.text:0000000000002554 loc_2554:                               ; CODE XREF: finalize_tab_stops+15↑j
.text:0000000000002554                 mov     rdx, cs:increment_size
.text:000000000000255B                 mov     rax, cs:extend_size
.text:0000000000002562                 test    rdx, rdx
.text:0000000000002565                 jz      short loc_2582
.text:0000000000002567                 test    rax, rax
.text:000000000000256A                 jnz     short loc_25D8
.text:000000000000256C                 mov     rax, rdx
.text:000000000000256F
.text:000000000000256F loc_256F:                               ; CODE XREF: finalize_tab_stops+CE↓j
.text:000000000000256F                 mov     cs:max_column_width, rax
.text:0000000000002576                 mov     cs:tab_size, rax
.text:000000000000257D                 add     rsp, 8
.text:0000000000002581                 retn
.text:0000000000002582 ; ---------------------------------------------------------------------------
.text:0000000000002582
.text:0000000000002582 loc_2582:                               ; CODE XREF: finalize_tab_stops+A5↑j
.text:0000000000002582                 test    rax, rax
.text:0000000000002585                 mov     edx, 8
.text:000000000000258A                 cmovz   rax, rdx
.text:000000000000258E                 jmp     short loc_256F
.text:0000000000002590 ; ---------------------------------------------------------------------------
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: finalize_tab_stops+20↑j
.text:0000000000002590                                         ; finalize_tab_stops+37↑j
.text:0000000000002590                 lea     rsi, aTabSizeCannotB ; "tab size cannot be 0"
.text:0000000000002597                 mov     edx, 5          ; category
.text:000000000000259C                 xor     edi, edi        ; domainname
.text:000000000000259E                 call    _dcgettext
.text:00000000000025A3                 xor     esi, esi        ; errnum
.text:00000000000025A5                 mov     rdx, rax        ; format
.text:00000000000025A8                 mov     edi, 1          ; status
.text:00000000000025AD                 xor     eax, eax
.text:00000000000025AF                 call    _error
.text:00000000000025B4
.text:00000000000025B4 loc_25B4:                               ; CODE XREF: finalize_tab_stops+40↑j
.text:00000000000025B4                 lea     rsi, aTabSizesMustBe ; "tab sizes must be ascending"
.text:00000000000025BB                 mov     edx, 5          ; category
.text:00000000000025C0                 xor     edi, edi        ; domainname
.text:00000000000025C2                 call    _dcgettext
.text:00000000000025C7                 xor     esi, esi        ; errnum
.text:00000000000025C9                 mov     rdx, rax        ; format
.text:00000000000025CC                 mov     edi, 1          ; status
.text:00000000000025D1                 xor     eax, eax
.text:00000000000025D3                 call    _error
.text:00000000000025D8
.text:00000000000025D8 loc_25D8:                               ; CODE XREF: finalize_tab_stops+66↑j
.text:00000000000025D8                                         ; finalize_tab_stops+AA↑j
.text:00000000000025D8                 lea     rsi, aSpecifierIsMut ; "'/' specifier is mutually exclusive wit"...
.text:00000000000025DF                 mov     edx, 5          ; category
.text:00000000000025E4                 xor     edi, edi        ; domainname
.text:00000000000025E6                 call    _dcgettext
.text:00000000000025EB                 xor     esi, esi        ; errnum
.text:00000000000025ED                 mov     rdx, rax        ; format
.text:00000000000025F0                 mov     edi, 1          ; status
.text:00000000000025F5                 xor     eax, eax
.text:00000000000025F7                 call    _error
.text:00000000000025F7 ; } // starts at 24C0
.text:00000000000025FC                 nop     dword ptr [rax+00h]
.text:00000000000025FC finalize_tab_stops endp ; sp-analysis failed
.text:00000000000025FC
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600
.text:0000000000002600                 public get_next_tab_column
.text:0000000000002600 get_next_tab_column proc near           ; CODE XREF: main+2D7↑p
.text:0000000000002600 ; __unwind {
.text:0000000000002600                 mov     rcx, cs:tab_size
.text:0000000000002607                 mov     byte ptr [rdx], 0
.text:000000000000260A                 test    rcx, rcx
.text:000000000000260D                 jnz     short loc_2670
.text:000000000000260F                 mov     rcx, [rsi]
.text:0000000000002612                 mov     rax, cs:first_free_tab
.text:0000000000002619                 cmp     rax, rcx
.text:000000000000261C                 jbe     short loc_264E
.text:000000000000261E                 mov     r9, cs:tab_list
.text:0000000000002625                 mov     r8, [r9+rcx*8]
.text:0000000000002629                 cmp     rdi, r8
.text:000000000000262C                 jb      short loc_267F
.text:000000000000262E                 add     rcx, 1
.text:0000000000002632                 jmp     short loc_2646
.text:0000000000002632 ; ---------------------------------------------------------------------------
.text:0000000000002634                 align 8
.text:0000000000002638
.text:0000000000002638 loc_2638:                               ; CODE XREF: get_next_tab_column+4C↓j
.text:0000000000002638                 add     rcx, 1
.text:000000000000263C                 mov     r8, [r9+rcx*8-8]
.text:0000000000002641                 cmp     rdi, r8
.text:0000000000002644                 jb      short loc_267F
.text:0000000000002646
.text:0000000000002646 loc_2646:                               ; CODE XREF: get_next_tab_column+32↑j
.text:0000000000002646                 cmp     rax, rcx
.text:0000000000002649                 mov     [rsi], rcx
.text:000000000000264C                 jnz     short loc_2638
.text:000000000000264E
.text:000000000000264E loc_264E:                               ; CODE XREF: get_next_tab_column+1C↑j
.text:000000000000264E                 mov     rcx, cs:extend_size
.text:0000000000002655                 test    rcx, rcx
.text:0000000000002658                 jnz     short loc_2670
.text:000000000000265A                 mov     r8, cs:increment_size
.text:0000000000002661                 test    r8, r8
.text:0000000000002664                 jnz     short loc_2688
.text:0000000000002666                 mov     byte ptr [rdx], 1
.text:0000000000002669                 jmp     short loc_267F
.text:0000000000002669 ; ---------------------------------------------------------------------------
.text:000000000000266B                 align 10h
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: get_next_tab_column+D↑j
.text:0000000000002670                                         ; get_next_tab_column+58↑j
.text:0000000000002670                 mov     rax, rdi
.text:0000000000002673                 xor     edx, edx
.text:0000000000002675                 lea     r8, [rcx+rdi]
.text:0000000000002679                 div     rcx
.text:000000000000267C                 sub     r8, rdx
.text:000000000000267F
.text:000000000000267F loc_267F:                               ; CODE XREF: get_next_tab_column+2C↑j
.text:000000000000267F                                         ; get_next_tab_column+44↑j ...
.text:000000000000267F                 mov     rax, r8
.text:0000000000002682                 retn
.text:0000000000002682 ; ---------------------------------------------------------------------------
.text:0000000000002683                 align 8
.text:0000000000002688
.text:0000000000002688 loc_2688:                               ; CODE XREF: get_next_tab_column+64↑j
.text:0000000000002688                 mov     rdx, cs:tab_list
.text:000000000000268F                 lea     rcx, [r8+rdi]
.text:0000000000002693                 sub     rdi, [rdx+rax*8-8]
.text:0000000000002698                 xor     edx, edx
.text:000000000000269A                 mov     rax, rdi
.text:000000000000269D                 div     r8
.text:00000000000026A0                 sub     rcx, rdx
.text:00000000000026A3                 mov     r8, rcx
.text:00000000000026A6                 jmp     short loc_267F
.text:00000000000026A6 ; } // starts at 2600
.text:00000000000026A6 get_next_tab_column endp
.text:00000000000026A6
.text:00000000000026A6 ; ---------------------------------------------------------------------------
.text:00000000000026A8                 align 10h
.text:00000000000026B0
.text:00000000000026B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026B0
.text:00000000000026B0
.text:00000000000026B0                 public set_file_list
.text:00000000000026B0 set_file_list   proc near               ; CODE XREF: main:loc_1868↑p
.text:00000000000026B0 ; __unwind {
.text:00000000000026B0                 lea     rax, stdin_argv
.text:00000000000026B7                 test    rdi, rdi
.text:00000000000026BA                 mov     cs:have_read_stdin, 0
.text:00000000000026C1                 cmovz   rdi, rax
.text:00000000000026C5                 mov     cs:file_list, rdi
.text:00000000000026CC                 retn
.text:00000000000026CC ; } // starts at 26B0
.text:00000000000026CC set_file_list   endp
.text:00000000000026CC
.text:00000000000026CC ; ---------------------------------------------------------------------------
.text:00000000000026CD                 align 10h
.text:00000000000026D0
.text:00000000000026D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026D0
.text:00000000000026D0
.text:00000000000026D0 ; __int64 __fastcall next_file(FILE *stream)
.text:00000000000026D0                 public next_file
.text:00000000000026D0 next_file       proc near               ; CODE XREF: main+15F↑p
.text:00000000000026D0                                         ; main+252↑p
.text:00000000000026D0
.text:00000000000026D0 var_20          = qword ptr -20h
.text:00000000000026D0
.text:00000000000026D0 ; __unwind {
.text:00000000000026D0                 push    r12
.text:00000000000026D2                 push    rbp
.text:00000000000026D3                 push    rbx
.text:00000000000026D4                 sub     rsp, 10h
.text:00000000000026D8                 test    rdi, rdi
.text:00000000000026DB                 jz      short loc_271F
.text:00000000000026DD                 mov     rsi, cs:prev_file_6959
.text:00000000000026E4                 test    rsi, rsi
.text:00000000000026E7                 jz      loc_28B2
.text:00000000000026ED                 test    byte ptr [rdi], 20h
.text:00000000000026F0                 mov     rbp, rdi
.text:00000000000026F3                 jnz     loc_2870
.text:00000000000026F9
.text:00000000000026F9 loc_26F9:                               ; CODE XREF: next_file+1DD↓j
.text:00000000000026F9                 lea     rbx, aLt+2      ; "-"
.text:0000000000002700                 mov     ecx, 2
.text:0000000000002705                 mov     rdi, rbx
.text:0000000000002708                 repe cmpsb
.text:000000000000270A                 mov     rdi, rbp        ; stream
.text:000000000000270D                 setnbe  al
.text:0000000000002710                 sbb     al, 0
.text:0000000000002712                 test    al, al
.text:0000000000002714                 jnz     loc_2820
.text:000000000000271A                 call    _clearerr_unlocked
.text:000000000000271F
.text:000000000000271F loc_271F:                               ; CODE XREF: next_file+B↑j
.text:000000000000271F                                         ; next_file+157↓j ...
.text:000000000000271F                 mov     rax, cs:file_list
.text:0000000000002726                 lea     rdx, [rax+8]
.text:000000000000272A                 mov     cs:file_list, rdx
.text:0000000000002731                 mov     rdx, [rax]
.text:0000000000002734                 test    rdx, rdx
.text:0000000000002737                 jz      loc_2810
.text:000000000000273D                 lea     rbx, aLt+2      ; "-"
.text:0000000000002744                 lea     rbp, msgid+0Ah  ; "r"
.text:000000000000274B                 jmp     short loc_27B0
.text:000000000000274B ; ---------------------------------------------------------------------------
.text:000000000000274D                 align 10h
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: next_file+F4↓j
.text:0000000000002750                 mov     rax, cs:stdin@@GLIBC_2_2_5
.text:0000000000002757                 mov     cs:have_read_stdin, 1
.text:000000000000275E                 test    rax, rax
.text:0000000000002761                 jnz     short loc_27E0
.text:0000000000002763
.text:0000000000002763 loc_2763:                               ; CODE XREF: next_file+10E↓j
.text:0000000000002763                 xor     edi, edi
.text:0000000000002765                 mov     esi, 3
.text:000000000000276A                 call    quotearg_n_style_colon
.text:000000000000276F                 mov     r12, rax
.text:0000000000002772                 call    ___errno_location
.text:0000000000002777                 mov     esi, [rax]      ; errnum
.text:0000000000002779                 lea     rdx, format     ; format
.text:0000000000002780                 xor     eax, eax
.text:0000000000002782                 xor     edi, edi        ; status
.text:0000000000002784                 mov     rcx, r12
.text:0000000000002787                 call    _error
.text:000000000000278C                 mov     rax, cs:file_list
.text:0000000000002793                 mov     cs:exit_status, 1
.text:000000000000279D                 lea     rdx, [rax+8]
.text:00000000000027A1                 mov     cs:file_list, rdx
.text:00000000000027A8                 mov     rdx, [rax]
.text:00000000000027AB                 test    rdx, rdx
.text:00000000000027AE                 jz      short loc_2810
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: next_file+7B↑j
.text:00000000000027B0                 mov     ecx, 2
.text:00000000000027B5                 mov     rsi, rdx
.text:00000000000027B8                 mov     rdi, rbx
.text:00000000000027BB                 repe cmpsb
.text:00000000000027BD                 setnbe  al
.text:00000000000027C0                 sbb     al, 0
.text:00000000000027C2                 test    al, al
.text:00000000000027C4                 jz      short loc_2750
.text:00000000000027C6                 mov     rdi, rdx        ; filename
.text:00000000000027C9                 mov     rsi, rbp        ; modes
.text:00000000000027CC                 mov     [rsp+28h+var_20], rdx
.text:00000000000027D1                 call    _fopen
.text:00000000000027D6                 test    rax, rax
.text:00000000000027D9                 mov     rdx, [rsp+28h+var_20]
.text:00000000000027DE                 jz      short loc_2763
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: next_file+91↑j
.text:00000000000027E0                 mov     rdi, rax
.text:00000000000027E3                 mov     esi, 2
.text:00000000000027E8                 mov     [rsp+28h+var_20], rax
.text:00000000000027ED                 mov     cs:prev_file_6959, rdx
.text:00000000000027F4                 call    fadvise
.text:00000000000027F9                 mov     rax, [rsp+28h+var_20]
.text:00000000000027FE                 add     rsp, 10h
.text:0000000000002802                 pop     rbx
.text:0000000000002803                 pop     rbp
.text:0000000000002804                 pop     r12
.text:0000000000002806                 retn
.text:0000000000002806 ; ---------------------------------------------------------------------------
.text:0000000000002807                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: next_file+67↑j
.text:0000000000002810                                         ; next_file+DE↑j
.text:0000000000002810                 add     rsp, 10h
.text:0000000000002814                 xor     eax, eax
.text:0000000000002816                 pop     rbx
.text:0000000000002817                 pop     rbp
.text:0000000000002818                 pop     r12
.text:000000000000281A                 retn
.text:000000000000281A ; ---------------------------------------------------------------------------
.text:000000000000281B                 align 20h
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: next_file+44↑j
.text:0000000000002820                 call    rpl_fclose
.text:0000000000002825                 test    eax, eax
.text:0000000000002827                 jz      loc_271F
.text:000000000000282D                 mov     rdx, cs:prev_file_6959
.text:0000000000002834                 mov     esi, 3
.text:0000000000002839                 xor     edi, edi
.text:000000000000283B                 call    quotearg_n_style_colon
.text:0000000000002840                 mov     rbx, rax
.text:0000000000002843                 call    ___errno_location
.text:0000000000002848                 mov     esi, [rax]      ; errnum
.text:000000000000284A                 lea     rdx, format     ; format
.text:0000000000002851                 mov     rcx, rbx
.text:0000000000002854                 xor     edi, edi        ; status
.text:0000000000002856                 xor     eax, eax
.text:0000000000002858                 call    _error
.text:000000000000285D                 mov     cs:exit_status, 1
.text:0000000000002867                 jmp     loc_271F
.text:0000000000002867 ; ---------------------------------------------------------------------------
.text:000000000000286C                 align 10h
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: next_file+23↑j
.text:0000000000002870                 mov     rdx, rsi
.text:0000000000002873                 xor     edi, edi
.text:0000000000002875                 mov     esi, 3
.text:000000000000287A                 call    quotearg_n_style_colon
.text:000000000000287F                 mov     rbx, rax
.text:0000000000002882                 call    ___errno_location
.text:0000000000002887                 mov     esi, [rax]      ; errnum
.text:0000000000002889                 lea     rdx, format     ; format
.text:0000000000002890                 mov     rcx, rbx
.text:0000000000002893                 xor     edi, edi        ; status
.text:0000000000002895                 xor     eax, eax
.text:0000000000002897                 call    _error
.text:000000000000289C                 mov     cs:exit_status, 1
.text:00000000000028A6                 mov     rsi, cs:prev_file_6959
.text:00000000000028AD                 jmp     loc_26F9
.text:00000000000028B2 ; ---------------------------------------------------------------------------
.text:00000000000028B2
.text:00000000000028B2 loc_28B2:                               ; CODE XREF: next_file+17↑j
.text:00000000000028B2                 lea     rcx, __PRETTY_FUNCTION___6961 ; "next_file"
.text:00000000000028B9                 lea     rsi, file       ; "../coreutils-8.31/src/expand-common.c"
.text:00000000000028C0                 lea     rdi, assertion  ; "prev_file"
.text:00000000000028C7                 mov     edx, 155h       ; line
.text:00000000000028CC                 call    ___assert_fail
.text:00000000000028CC ; } // starts at 26D0
.text:00000000000028CC next_file       endp
.text:00000000000028CC
.text:00000000000028CC ; ---------------------------------------------------------------------------
.text:00000000000028D1                 align 20h
.text:00000000000028E0
.text:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028E0
.text:00000000000028E0
.text:00000000000028E0                 public cleanup_file_list_stdin
.text:00000000000028E0 cleanup_file_list_stdin proc near       ; CODE XREF: main:loc_1974↑p
.text:00000000000028E0 ; __unwind {
.text:00000000000028E0                 cmp     cs:have_read_stdin, 0
.text:00000000000028E7                 jnz     short loc_28F0
.text:00000000000028E9                 rep retn
.text:00000000000028E9 ; ---------------------------------------------------------------------------
.text:00000000000028EB                 align 10h
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: cleanup_file_list_stdin+7↑j
.text:00000000000028F0                 sub     rsp, 8
.text:00000000000028F4                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:00000000000028FB                 call    rpl_fclose
.text:0000000000002900                 test    eax, eax
.text:0000000000002902                 jnz     short loc_2909
.text:0000000000002904                 add     rsp, 8
.text:0000000000002908                 retn
.text:0000000000002909 ; ---------------------------------------------------------------------------
.text:0000000000002909
.text:0000000000002909 loc_2909:                               ; CODE XREF: cleanup_file_list_stdin+22↑j
.text:0000000000002909                 call    ___errno_location
.text:000000000000290E                 mov     esi, [rax]      ; errnum
.text:0000000000002910                 lea     rdx, aLt+2      ; format
.text:0000000000002917                 mov     edi, 1          ; status
.text:000000000000291C                 xor     eax, eax
.text:000000000000291E                 call    _error
.text:000000000000291E ; } // starts at 28E0
.text:0000000000002923                 nop     dword ptr [rax]
.text:0000000000002926                 db      2Eh
.text:0000000000002926                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002926 cleanup_file_list_stdin endp ; sp-analysis failed
.text:0000000000002926
.text:0000000000002930
.text:0000000000002930 ; =============== S U B R O U T I N E =======================================
.text:0000000000002930
.text:0000000000002930
.text:0000000000002930                 public emit_tab_list_info
.text:0000000000002930 emit_tab_list_info proc near            ; CODE XREF: usage+111↑p
.text:0000000000002930 ; __unwind {
.text:0000000000002930                 push    rbx
.text:0000000000002931                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002938                 lea     rsi, aTTabsListUseCo ; "  -t, --tabs=LIST  use comma separated "...
.text:000000000000293F                 mov     edx, 5          ; category
.text:0000000000002944                 xor     edi, edi        ; domainname
.text:0000000000002946                 call    _dcgettext
.text:000000000000294B                 mov     rsi, rbx        ; stream
.text:000000000000294E                 mov     rdi, rax        ; s
.text:0000000000002951                 call    _fputs_unlocked
.text:0000000000002956                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000295D                 lea     rsi, aTheLastSpecifi ; "                     The last specified"...
.text:0000000000002964                 xor     edi, edi        ; domainname
.text:0000000000002966                 mov     edx, 5          ; category
.text:000000000000296B                 call    _dcgettext
.text:0000000000002970                 mov     rsi, rbx        ; stream
.text:0000000000002973                 mov     rdi, rax        ; s
.text:0000000000002976                 pop     rbx
.text:0000000000002977                 jmp     _fputs_unlocked
.text:0000000000002977 ; } // starts at 2930
.text:0000000000002977 emit_tab_list_info endp
.text:0000000000002977
.text:0000000000002977 ; ---------------------------------------------------------------------------
.text:000000000000297C                 align 20h
.text:0000000000002980
.text:0000000000002980 ; =============== S U B R O U T I N E =======================================
.text:0000000000002980
.text:0000000000002980
.text:0000000000002980                 public close_stdout_set_file_name
.text:0000000000002980 close_stdout_set_file_name proc near
.text:0000000000002980 ; __unwind {
.text:0000000000002980                 mov     cs:file_name, rdi
.text:0000000000002987                 retn
.text:0000000000002987 ; } // starts at 2980
.text:0000000000002987 close_stdout_set_file_name endp
.text:0000000000002987
.text:0000000000002987 ; ---------------------------------------------------------------------------
.text:0000000000002988                 align 10h
.text:0000000000002990
.text:0000000000002990 ; =============== S U B R O U T I N E =======================================
.text:0000000000002990
.text:0000000000002990
.text:0000000000002990                 public close_stdout_set_ignore_EPIPE
.text:0000000000002990 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002990 ; __unwind {
.text:0000000000002990                 mov     cs:ignore_EPIPE, dil
.text:0000000000002997                 retn
.text:0000000000002997 ; } // starts at 2990
.text:0000000000002997 close_stdout_set_ignore_EPIPE endp
.text:0000000000002997
.text:0000000000002997 ; ---------------------------------------------------------------------------
.text:0000000000002998                 align 20h
.text:00000000000029A0
.text:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029A0
.text:00000000000029A0 ; Attributes: info_from_lumina
.text:00000000000029A0
.text:00000000000029A0 ; void __cdecl close_stdout()
.text:00000000000029A0                 public close_stdout
.text:00000000000029A0 close_stdout    proc near               ; DATA XREF: main+60↑o
.text:00000000000029A0 ; __unwind {
.text:00000000000029A0                 push    rbp
.text:00000000000029A1                 push    rbx
.text:00000000000029A2                 sub     rsp, 8
.text:00000000000029A6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000029AD                 call    close_stream
.text:00000000000029B2                 test    eax, eax
.text:00000000000029B4                 jz      short loc_29CC
.text:00000000000029B6                 call    ___errno_location
.text:00000000000029BB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000029C2                 mov     rbx, rax
.text:00000000000029C5                 jz      short loc_29E3
.text:00000000000029C7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000029CA                 jnz     short loc_29E3
.text:00000000000029CC
.text:00000000000029CC loc_29CC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000029CC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000029D3                 call    close_stream
.text:00000000000029D8                 test    eax, eax
.text:00000000000029DA                 jnz     short loc_2A22
.text:00000000000029DC                 add     rsp, 8
.text:00000000000029E0                 pop     rbx
.text:00000000000029E1                 pop     rbp
.text:00000000000029E2                 retn
.text:00000000000029E3 ; ---------------------------------------------------------------------------
.text:00000000000029E3
.text:00000000000029E3 loc_29E3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000029E3                                         ; close_stdout+2A↑j
.text:00000000000029E3                 lea     rsi, msgid      ; "write error"
.text:00000000000029EA                 xor     edi, edi        ; domainname
.text:00000000000029EC                 mov     edx, 5          ; category
.text:00000000000029F1                 call    _dcgettext
.text:00000000000029F6                 mov     rdi, cs:file_name
.text:00000000000029FD                 mov     rbp, rax
.text:0000000000002A00                 test    rdi, rdi
.text:0000000000002A03                 jz      short loc_2A2D
.text:0000000000002A05                 call    quotearg_colon
.text:0000000000002A0A                 mov     esi, [rbx]      ; errnum
.text:0000000000002A0C                 lea     rdx, aS         ; "%s: "
.text:0000000000002A13                 mov     rcx, rax
.text:0000000000002A16                 mov     r8, rbp
.text:0000000000002A19                 xor     edi, edi        ; status
.text:0000000000002A1B                 xor     eax, eax
.text:0000000000002A1D                 call    _error
.text:0000000000002A22
.text:0000000000002A22 loc_2A22:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002A22                                         ; close_stdout+A2↓j
.text:0000000000002A22                 mov     edi, cs:exit_failure ; status
.text:0000000000002A28                 call    __exit
.text:0000000000002A2D ; ---------------------------------------------------------------------------
.text:0000000000002A2D
.text:0000000000002A2D loc_2A2D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002A2D                 mov     esi, [rbx]      ; errnum
.text:0000000000002A2F                 lea     rdx, format     ; format
.text:0000000000002A36                 mov     rcx, rax
.text:0000000000002A39                 xor     edi, edi        ; status
.text:0000000000002A3B                 xor     eax, eax
.text:0000000000002A3D                 call    _error
.text:0000000000002A42                 jmp     short loc_2A22
.text:0000000000002A42 ; } // starts at 29A0
.text:0000000000002A42 close_stdout    endp
.text:0000000000002A42
.text:0000000000002A42 ; ---------------------------------------------------------------------------
.text:0000000000002A44                 align 10h
.text:0000000000002A50
.text:0000000000002A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A50
.text:0000000000002A50
.text:0000000000002A50 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002A50                 public fdadvise
.text:0000000000002A50 fdadvise        proc near
.text:0000000000002A50 ; __unwind {
.text:0000000000002A50                 jmp     _posix_fadvise
.text:0000000000002A50 ; } // starts at 2A50
.text:0000000000002A50 fdadvise        endp
.text:0000000000002A50
.text:0000000000002A50 ; ---------------------------------------------------------------------------
.text:0000000000002A55                 align 20h
.text:0000000000002A60
.text:0000000000002A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A60
.text:0000000000002A60
.text:0000000000002A60                 public fadvise
.text:0000000000002A60 fadvise         proc near               ; CODE XREF: next_file+124↑p
.text:0000000000002A60 ; __unwind {
.text:0000000000002A60                 test    rdi, rdi
.text:0000000000002A63                 jz      short locret_2A80
.text:0000000000002A65                 push    rbx
.text:0000000000002A66                 mov     ebx, esi
.text:0000000000002A68                 call    _fileno
.text:0000000000002A6D                 mov     ecx, ebx        ; advise
.text:0000000000002A6F                 xor     edx, edx        ; len
.text:0000000000002A71                 xor     esi, esi        ; offset
.text:0000000000002A73                 pop     rbx
.text:0000000000002A74                 mov     edi, eax        ; fd
.text:0000000000002A76                 jmp     _posix_fadvise
.text:0000000000002A76 ; ---------------------------------------------------------------------------
.text:0000000000002A7B                 align 20h
.text:0000000000002A80
.text:0000000000002A80 locret_2A80:                            ; CODE XREF: fadvise+3↑j
.text:0000000000002A80                 rep retn
.text:0000000000002A80 ; } // starts at 2A60
.text:0000000000002A80 fadvise         endp
.text:0000000000002A80
.text:0000000000002A80 ; ---------------------------------------------------------------------------
.text:0000000000002A82                 align 10h
.text:0000000000002A90
.text:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A90
.text:0000000000002A90
.text:0000000000002A90                 public set_program_name
.text:0000000000002A90 set_program_name proc near              ; CODE XREF: main+2B↑p
.text:0000000000002A90 ; __unwind {
.text:0000000000002A90                 test    rdi, rdi
.text:0000000000002A93                 push    rbx
.text:0000000000002A94                 jz      short loc_2B0D
.text:0000000000002A96                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002A9B                 mov     rbx, rdi
.text:0000000000002A9E                 call    _strrchr
.text:0000000000002AA3                 test    rax, rax
.text:0000000000002AA6                 jz      short loc_2AFD
.text:0000000000002AA8                 lea     r8, [rax+1]
.text:0000000000002AAC                 mov     rdx, r8
.text:0000000000002AAF                 sub     rdx, rbx
.text:0000000000002AB2                 cmp     rdx, 6
.text:0000000000002AB6                 jle     short loc_2AFD
.text:0000000000002AB8                 lea     rsi, [rax-6]
.text:0000000000002ABC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002AC3                 mov     ecx, 7
.text:0000000000002AC8                 repe cmpsb
.text:0000000000002ACA                 setnbe  dl
.text:0000000000002ACD                 sbb     dl, 0
.text:0000000000002AD0                 test    dl, dl
.text:0000000000002AD2                 jnz     short loc_2AFD
.text:0000000000002AD4                 lea     rdi, aLt        ; "lt-"
.text:0000000000002ADB                 mov     ecx, 3
.text:0000000000002AE0                 mov     rsi, r8
.text:0000000000002AE3                 mov     rbx, r8
.text:0000000000002AE6                 repe cmpsb
.text:0000000000002AE8                 setnbe  dl
.text:0000000000002AEB                 sbb     dl, 0
.text:0000000000002AEE                 test    dl, dl
.text:0000000000002AF0                 jnz     short loc_2AFD
.text:0000000000002AF2                 lea     rbx, [rax+4]
.text:0000000000002AF6                 mov     cs:__bss_start, rbx
.text:0000000000002AFD
.text:0000000000002AFD loc_2AFD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002AFD                                         ; set_program_name+26↑j ...
.text:0000000000002AFD                 mov     cs:program_name, rbx
.text:0000000000002B04                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002B0B                 pop     rbx
.text:0000000000002B0C                 retn
.text:0000000000002B0D ; ---------------------------------------------------------------------------
.text:0000000000002B0D
.text:0000000000002B0D loc_2B0D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002B0D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002B14                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002B1B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002B20                 mov     esi, 1          ; size
.text:0000000000002B25                 call    _fwrite
.text:0000000000002B2A                 call    _abort
.text:0000000000002B2A ; } // starts at 2A90
.text:0000000000002B2A set_program_name endp
.text:0000000000002B2A
.text:0000000000002B2A ; ---------------------------------------------------------------------------
.text:0000000000002B2F                 align 10h
.text:0000000000002B30
.text:0000000000002B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B30
.text:0000000000002B30 ; Attributes: info_from_lumina
.text:0000000000002B30
.text:0000000000002B30 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002B30 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002B30                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002B30 ; __unwind {
.text:0000000000002B30                 push    rbp
.text:0000000000002B31                 push    rbx
.text:0000000000002B32                 mov     rbp, rdi
.text:0000000000002B35                 mov     ebx, esi
.text:0000000000002B37                 sub     rsp, 8
.text:0000000000002B3B                 call    locale_charset
.text:0000000000002B40                 movzx   edx, byte ptr [rax]
.text:0000000000002B43                 and     edx, 0FFFFFFDFh
.text:0000000000002B46                 cmp     dl, 55h ; 'U'
.text:0000000000002B49                 jz      short loc_2BC0
.text:0000000000002B4B                 cmp     dl, 47h ; 'G'
.text:0000000000002B4E                 jz      short loc_2B70
.text:0000000000002B50
.text:0000000000002B50 loc_2B50:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002B50                                         ; gettext_quote+50↓j ...
.text:0000000000002B50                 lea     rax, unk_5BAB
.text:0000000000002B57                 lea     rdx, asc_5BAD   ; "'"
.text:0000000000002B5E                 cmp     ebx, 9
.text:0000000000002B61                 cmovnz  rax, rdx
.text:0000000000002B65                 add     rsp, 8
.text:0000000000002B69                 pop     rbx
.text:0000000000002B6A                 pop     rbp
.text:0000000000002B6B                 retn
.text:0000000000002B6B ; ---------------------------------------------------------------------------
.text:0000000000002B6C                 align 10h
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002B70                 movzx   edx, byte ptr [rax+1]
.text:0000000000002B74                 and     edx, 0FFFFFFDFh
.text:0000000000002B77                 cmp     dl, 42h ; 'B'
.text:0000000000002B7A                 jnz     short loc_2B50
.text:0000000000002B7C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002B80                 jnz     short loc_2B50
.text:0000000000002B82                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002B86                 jnz     short loc_2B50
.text:0000000000002B88                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002B8C                 jnz     short loc_2B50
.text:0000000000002B8E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002B92                 jnz     short loc_2B50
.text:0000000000002B94                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002B98                 jnz     short loc_2B50
.text:0000000000002B9A                 cmp     byte ptr [rax+7], 0
.text:0000000000002B9E                 jnz     short loc_2B50
.text:0000000000002BA0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002BA4                 lea     rax, unk_5BA4
.text:0000000000002BAB                 lea     rdx, unk_5BA8
.text:0000000000002BB2                 cmovnz  rax, rdx
.text:0000000000002BB6                 add     rsp, 8
.text:0000000000002BBA                 pop     rbx
.text:0000000000002BBB                 pop     rbp
.text:0000000000002BBC                 retn
.text:0000000000002BBC ; ---------------------------------------------------------------------------
.text:0000000000002BBD                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002BC0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002BC4                 and     edx, 0FFFFFFDFh
.text:0000000000002BC7                 cmp     dl, 54h ; 'T'
.text:0000000000002BCA                 jnz     short loc_2B50
.text:0000000000002BCC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002BD0                 and     edx, 0FFFFFFDFh
.text:0000000000002BD3                 cmp     dl, 46h ; 'F'
.text:0000000000002BD6                 jnz     loc_2B50
.text:0000000000002BDC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002BE0                 jnz     loc_2B50
.text:0000000000002BE6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002BEA                 jnz     loc_2B50
.text:0000000000002BF0                 cmp     byte ptr [rax+5], 0
.text:0000000000002BF4                 jnz     loc_2B50
.text:0000000000002BFA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002BFE                 lea     rax, unk_5B9C
.text:0000000000002C05                 lea     rdx, unk_5BA0
.text:0000000000002C0C                 cmovnz  rax, rdx
.text:0000000000002C10                 add     rsp, 8
.text:0000000000002C14                 pop     rbx
.text:0000000000002C15                 pop     rbp
.text:0000000000002C16                 retn
.text:0000000000002C16 ; } // starts at 2B30
.text:0000000000002C16 gettext_quote   endp
.text:0000000000002C16
.text:0000000000002C16 ; ---------------------------------------------------------------------------
.text:0000000000002C17                 align 20h
.text:0000000000002C20
.text:0000000000002C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C20
.text:0000000000002C20 ; Attributes: info_from_lumina
.text:0000000000002C20
.text:0000000000002C20 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002C20 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002C20                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002C20
.text:0000000000002C20 var_E0          = dword ptr -0E0h
.text:0000000000002C20 var_DB          = byte ptr -0DBh
.text:0000000000002C20 var_DA          = byte ptr -0DAh
.text:0000000000002C20 var_D9          = byte ptr -0D9h
.text:0000000000002C20 s               = qword ptr -0D8h
.text:0000000000002C20 n               = qword ptr -0D0h
.text:0000000000002C20 var_C8          = qword ptr -0C8h
.text:0000000000002C20 ps              = qword ptr -0C0h
.text:0000000000002C20 var_B8          = qword ptr -0B8h
.text:0000000000002C20 var_B0          = qword ptr -0B0h
.text:0000000000002C20 var_A8          = qword ptr -0A8h
.text:0000000000002C20 s2              = qword ptr -0A0h
.text:0000000000002C20 var_98          = qword ptr -98h
.text:0000000000002C20 var_90          = qword ptr -90h
.text:0000000000002C20 var_88          = qword ptr -88h
.text:0000000000002C20 var_80          = qword ptr -80h
.text:0000000000002C20 var_78          = qword ptr -78h
.text:0000000000002C20 var_70          = dword ptr -70h
.text:0000000000002C20 var_6C          = byte ptr -6Ch
.text:0000000000002C20 var_6B          = byte ptr -6Bh
.text:0000000000002C20 var_6A          = byte ptr -6Ah
.text:0000000000002C20 var_69          = byte ptr -69h
.text:0000000000002C20 var_68          = qword ptr -68h
.text:0000000000002C20 var_60          = qword ptr -60h
.text:0000000000002C20 wc              = dword ptr -4Ch
.text:0000000000002C20 var_48          = qword ptr -48h
.text:0000000000002C20 var_40          = qword ptr -40h
.text:0000000000002C20 arg_0           = qword ptr  8
.text:0000000000002C20 arg_8           = qword ptr  10h
.text:0000000000002C20 arg_10          = qword ptr  18h
.text:0000000000002C20
.text:0000000000002C20 ; __unwind {
.text:0000000000002C20                 push    r15
.text:0000000000002C22                 push    r14
.text:0000000000002C24                 mov     r15d, r8d
.text:0000000000002C27                 push    r13
.text:0000000000002C29                 push    r12
.text:0000000000002C2B                 mov     r14, rdi
.text:0000000000002C2E                 push    rbp
.text:0000000000002C2F                 push    rbx
.text:0000000000002C30                 mov     ebx, r9d
.text:0000000000002C33                 mov     r13, rsi
.text:0000000000002C36                 mov     rbp, rcx
.text:0000000000002C39                 and     ebx, 2
.text:0000000000002C3C                 sub     rsp, 0B8h
.text:0000000000002C43                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002C4B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002C50                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002C55                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002C5A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002C5F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002C67                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002C6C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002C74                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002C79                 mov     rax, fs:28h
.text:0000000000002C82                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002C8A                 xor     eax, eax
.text:0000000000002C8C                 call    ___ctype_get_mb_cur_max
.text:0000000000002C91                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002C95                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002C9A                 ja      def_2CB1        ; jumptable 00000000000121F1 default case
.text:0000000000002CA0                 lea     rcx, jpt_2CB1
.text:0000000000002CA7                 mov     edx, r15d
.text:0000000000002CAA                 movsxd  rax, ds:(jpt_2CB1 - 5C00h)[rcx+rdx*4]
.text:0000000000002CAE                 add     rax, rcx
.text:0000000000002CB1                 jmp     rax             ; switch jump
.text:0000000000002CB3 ; ---------------------------------------------------------------------------
.text:0000000000002CB3
.text:0000000000002CB3 loc_2CB3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CB3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002CB3                                         ; DATA XREF: ...
.text:0000000000002CB3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002CB8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CBD                 xor     r12d, r12d
.text:0000000000002CC0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CC9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002CCE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002CD3
.text:0000000000002CD3 loc_2CD3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002CD3                 lea     rax, asc_5BAD   ; "'"
.text:0000000000002CDA                 mov     [rsp+0E8h+n], 1
.text:0000000000002CE3                 xor     r15d, r15d
.text:0000000000002CE6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002CEE                 mov     [rsp+0E8h+s2], rax
.text:0000000000002CF3
.text:0000000000002CF3 loc_2CF3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002CF3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002CF3                 xor     r11d, r11d
.text:0000000000002CF6                 mov     rax, rbp
.text:0000000000002CF9                 mov     r8d, r12d
.text:0000000000002CFC                 mov     rbp, r11
.text:0000000000002CFF                 mov     r11, rax
.text:0000000000002D02                 nop     word ptr [rax+rax+00h]
.text:0000000000002D08
.text:0000000000002D08 loc_2D08:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002D08                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002D08                 cmp     r11, rbp
.text:0000000000002D0B                 setnz   r12b
.text:0000000000002D0F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D13                 jnz     short loc_2D22
.text:0000000000002D15                 mov     rax, [rsp+0E8h+s]
.text:0000000000002D1A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002D1E                 setnz   r12b
.text:0000000000002D22
.text:0000000000002D22 loc_2D22:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002D22                 test    r12b, r12b
.text:0000000000002D25                 jz      loc_3380
.text:0000000000002D2B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D30                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002D35                 lea     r9, [rdi+rbp]
.text:0000000000002D39                 setnz   al
.text:0000000000002D3C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002D40                 mov     r10d, eax
.text:0000000000002D43                 jz      loc_2DF0
.text:0000000000002D49                 mov     rax, [rsp+0E8h+n]
.text:0000000000002D4E                 test    rax, rax
.text:0000000000002D51                 jz      loc_3180
.text:0000000000002D57                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D5B                 lea     rbx, [rbp+rax+0]
.text:0000000000002D60                 jnz     short loc_2D90
.text:0000000000002D62                 cmp     rax, 1
.text:0000000000002D66                 jbe     short loc_2D90
.text:0000000000002D68                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002D6D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002D72                 mov     [rsp+0E8h+ps], r9
.text:0000000000002D77                 call    _strlen
.text:0000000000002D7C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002D82                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002D88                 mov     r11, rax
.text:0000000000002D8B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002D90
.text:0000000000002D90 loc_2D90:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002D90                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002D90                 cmp     rbx, r11
.text:0000000000002D93                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002D98                 ja      loc_3350
.text:0000000000002D9E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002DA3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002DA8                 mov     rdi, r9         ; s1
.text:0000000000002DAB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002DB0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002DB5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002DBA                 call    _memcmp
.text:0000000000002DBF                 test    eax, eax
.text:0000000000002DC1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002DC6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002DCC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002DD1                 jnz     loc_3350
.text:0000000000002DD7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DDC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002DE2                 jnz     loc_3D65
.text:0000000000002DE8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002DF0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002DF0                 movzx   ebx, byte ptr [r9]
.text:0000000000002DF4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002DF7                 ja      def_2E0E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002DFD                 lea     rcx, jpt_2E0E
.text:0000000000002E04                 movzx   edx, bl
.text:0000000000002E07                 movsxd  rax, ds:(jpt_2E0E - 5C2Ch)[rcx+rdx*4]
.text:0000000000002E0B                 add     rax, rcx
.text:0000000000002E0E                 jmp     rax             ; switch jump
.text:0000000000002E10 ; ---------------------------------------------------------------------------
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002E10                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:0000000000002E10                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002E13
.text:0000000000002E13 loc_2E13:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E13                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000002E13                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002E17                 setnz   al
.text:0000000000002E1A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E1E                 jnz     short loc_2E2C
.text:0000000000002E20                 mov     rax, [rsp+0E8h+s]
.text:0000000000002E25                 cmp     byte ptr [rax+1], 0
.text:0000000000002E29                 setnz   al
.text:0000000000002E2C
.text:0000000000002E2C loc_2E2C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002E2C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E31                 setz    dl
.text:0000000000002E34                 test    al, al
.text:0000000000002E36                 jz      loc_3088
.text:0000000000002E3C
.text:0000000000002E3C loc_2E3C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002E3C                 xor     r12d, r12d
.text:0000000000002E3F                 xor     eax, eax
.text:0000000000002E41                 nop     dword ptr [rax+00000000h]
.text:0000000000002E48
.text:0000000000002E48 loc_2E48:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002E48                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002E48                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002E4D                 jnz     loc_2F62
.text:0000000000002E53                 test    dl, dl
.text:0000000000002E55                 jnz     loc_2F62
.text:0000000000002E5B
.text:0000000000002E5B loc_2E5B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002E5B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002E60                 test    rsi, rsi
.text:0000000000002E63                 jz      short loc_2E79
.text:0000000000002E65                 mov     edx, ebx
.text:0000000000002E67                 shr     dl, 5
.text:0000000000002E6A                 movzx   edx, dl
.text:0000000000002E6D                 mov     edx, [rsi+rdx*4]
.text:0000000000002E70                 bt      edx, ebx
.text:0000000000002E73                 jb      loc_2FC3
.text:0000000000002E79
.text:0000000000002E79 loc_2E79:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002E79                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002E79                 test    r10b, r10b
.text:0000000000002E7C                 jnz     loc_2FC3
.text:0000000000002E82                 xor     eax, 1
.text:0000000000002E85                 add     rbp, 1
.text:0000000000002E89                 and     eax, r8d
.text:0000000000002E8C
.text:0000000000002E8C loc_2E8C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002E8C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002E8C                 test    al, al
.text:0000000000002E8E                 jz      short loc_2EB0
.text:0000000000002E90                 cmp     r13, r15
.text:0000000000002E93                 jbe     short loc_2E9A
.text:0000000000002E95                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E9A
.text:0000000000002E9A loc_2E9A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002E9A                 lea     rax, [r15+1]
.text:0000000000002E9E                 cmp     r13, rax
.text:0000000000002EA1                 jbe     short loc_2EA9
.text:0000000000002EA3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002EA9
.text:0000000000002EA9 loc_2EA9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002EA9                 add     r15, 2
.text:0000000000002EAD                 xor     r8d, r8d
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002EB0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002EB0                 cmp     r15, r13
.text:0000000000002EB3                 jnb     short loc_2EB9
.text:0000000000002EB5                 mov     [r14+r15], bl
.text:0000000000002EB9
.text:0000000000002EB9 loc_2EB9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002EB9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002EBE                 add     r15, 1
.text:0000000000002EC2                 mov     eax, 0
.text:0000000000002EC7                 test    r12b, r12b
.text:0000000000002ECA                 cmovz   edi, eax
.text:0000000000002ECD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002ED2                 jmp     loc_2D08
.text:0000000000002ED2 ; ---------------------------------------------------------------------------
.text:0000000000002ED7                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002EE0                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:0000000000002EE0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002EE3
.text:0000000000002EE3 loc_2EE3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EE3                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000002EE3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002EE7                 cmp     eax, 2
.text:0000000000002EEA                 jz      loc_34A8
.text:0000000000002EF0                 cmp     eax, 5
.text:0000000000002EF3                 jz      loc_3468
.text:0000000000002EF9                 cmp     eax, 2
.text:0000000000002EFC                 mov     ebx, 3Fh ; '?'
.text:0000000000002F01                 setz    dl
.text:0000000000002F04                 xor     r12d, r12d
.text:0000000000002F07                 xor     eax, eax
.text:0000000000002F09                 jmp     loc_2E48
.text:0000000000002F09 ; ---------------------------------------------------------------------------
.text:0000000000002F0E                 align 10h
.text:0000000000002F10
.text:0000000000002F10 loc_2F10:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002F10                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:0000000000002F10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002F13
.text:0000000000002F13 loc_2F13:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F13                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000002F13                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002F18                 jz      loc_3420
.text:0000000000002F1E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002F23                 xor     edx, edx
.text:0000000000002F25                 xor     eax, eax
.text:0000000000002F27                 mov     ebx, 27h ; '''
.text:0000000000002F2C                 jmp     loc_2E48
.text:0000000000002F2C ; ---------------------------------------------------------------------------
.text:0000000000002F31                 align 8
.text:0000000000002F38
.text:0000000000002F38 loc_2F38:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F38                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000002F38                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002F3D                 mov     ebx, 74h ; 't'
.text:0000000000002F42
.text:0000000000002F42 loc_2F42:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002F42                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002F42                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F47                 setz    al
.text:0000000000002F4A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002F4E                 jnz     loc_309E
.text:0000000000002F54
.text:0000000000002F54 loc_2F54:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002F54                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002F54                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002F59                 jnz     short loc_2FC0
.text:0000000000002F5B
.text:0000000000002F5B loc_2F5B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002F5B                 mov     ebx, edx
.text:0000000000002F5D                 xor     r12d, r12d
.text:0000000000002F60                 xor     eax, eax
.text:0000000000002F62
.text:0000000000002F62 loc_2F62:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002F62                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002F62                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F67                 jnz     loc_2E5B
.text:0000000000002F6D                 jmp     loc_2E79
.text:0000000000002F6D ; ---------------------------------------------------------------------------
.text:0000000000002F72                 align 8
.text:0000000000002F78
.text:0000000000002F78 loc_2F78:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F78                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000002F78                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002F7D                 mov     ebx, 62h ; 'b'
.text:0000000000002F82                 jmp     short loc_2F54
.text:0000000000002F82 ; ---------------------------------------------------------------------------
.text:0000000000002F84                 align 8
.text:0000000000002F88
.text:0000000000002F88 loc_2F88:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F88                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000002F88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002F8D                 jz      loc_3360
.text:0000000000002F93                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002F98                 jz      loc_31B0
.text:0000000000002F9E
.text:0000000000002F9E loc_2F9E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002F9E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FA3                 jz      loc_31B0
.text:0000000000002FA9                 cmp     [rsp+0E8h+n], 0
.text:0000000000002FAF                 jnz     loc_336B
.text:0000000000002FB5                 mov     ebx, 5Ch ; '\'
.text:0000000000002FBA                 nop     word ptr [rax+rax+00h]
.text:0000000000002FC0
.text:0000000000002FC0 loc_2FC0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002FC0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002FC0                 xor     r12d, r12d
.text:0000000000002FC3
.text:0000000000002FC3 loc_2FC3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002FC3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002FC3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FC8                 setz    dl
.text:0000000000002FCB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FD0                 mov     eax, edx
.text:0000000000002FD2                 jnz     loc_3828
.text:0000000000002FD8                 mov     eax, r8d
.text:0000000000002FDB                 xor     eax, 1
.text:0000000000002FDE                 and     al, dl
.text:0000000000002FE0                 jz      short loc_3011
.text:0000000000002FE2                 cmp     r13, r15
.text:0000000000002FE5                 jbe     short loc_2FEC
.text:0000000000002FE7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002FEC
.text:0000000000002FEC loc_2FEC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002FEC                 lea     rdx, [r15+1]
.text:0000000000002FF0                 cmp     r13, rdx
.text:0000000000002FF3                 jbe     short loc_2FFB
.text:0000000000002FF5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002FFB
.text:0000000000002FFB loc_2FFB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002FFB                 lea     rdx, [r15+2]
.text:0000000000002FFF                 cmp     r13, rdx
.text:0000000000003002                 jbe     short loc_300A
.text:0000000000003004                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000300A
.text:000000000000300A loc_300A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000300A                 add     r15, 3
.text:000000000000300E                 mov     r8d, eax
.text:0000000000003011
.text:0000000000003011 loc_3011:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003011                 cmp     r13, r15
.text:0000000000003014                 jbe     short loc_301B
.text:0000000000003016                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000301B
.text:000000000000301B loc_301B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000301B                 add     r15, 1
.text:000000000000301F                 add     rbp, 1
.text:0000000000003023                 jmp     loc_2EB0
.text:0000000000003023 ; ---------------------------------------------------------------------------
.text:0000000000003028                 align 10h
.text:0000000000003030
.text:0000000000003030 loc_3030:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003030                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000003030                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003035                 jnz     loc_3203
.text:000000000000303B                 xor     edx, edx
.text:000000000000303D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003042                 jz      loc_2F5B
.text:0000000000003048                 add     rbp, 1
.text:000000000000304C                 jmp     loc_2D08
.text:000000000000304C ; ---------------------------------------------------------------------------
.text:0000000000003051                 align 8
.text:0000000000003058
.text:0000000000003058 loc_3058:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003058                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000003058                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000305D                 setz    dl
.text:0000000000003060                 xor     eax, eax
.text:0000000000003062                 jmp     loc_2E48
.text:0000000000003062 ; ---------------------------------------------------------------------------
.text:0000000000003067                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003070                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000003070                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003075                 mov     ebx, 61h ; 'a'
.text:000000000000307A                 jmp     loc_2F54
.text:000000000000307A ; ---------------------------------------------------------------------------
.text:000000000000307F                 align 20h
.text:0000000000003080
.text:0000000000003080 loc_3080:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003080                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000003080                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003085                 setz    dl
.text:0000000000003088
.text:0000000000003088 loc_3088:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003088                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003088                 test    rbp, rbp
.text:000000000000308B                 jnz     loc_2E3C
.text:0000000000003091
.text:0000000000003091 loc_3091:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003091                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003091                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003096                 and     al, dl
.text:0000000000003098                 jz      loc_2E48
.text:000000000000309E
.text:000000000000309E loc_309E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000309E                 mov     rbp, r11
.text:00000000000030A1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000030A9                 jmp     loc_37A9
.text:00000000000030A9 ; ---------------------------------------------------------------------------
.text:00000000000030AE                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030B0                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:00000000000030B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000030B5                 setz    dl
.text:00000000000030B8                 xor     r12d, r12d
.text:00000000000030BB                 jmp     short loc_3091
.text:00000000000030BB ; ---------------------------------------------------------------------------
.text:00000000000030BD                 align 20h
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030C0                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:00000000000030C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000030C5                 mov     ebx, 20h ; ' '
.text:00000000000030CA                 setz    dl
.text:00000000000030CD                 jmp     short loc_3091
.text:00000000000030CD ; ---------------------------------------------------------------------------
.text:00000000000030CF                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030D0                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:00000000000030D0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000030D5                 mov     ebx, 72h ; 'r'
.text:00000000000030DA                 jmp     loc_2F42
.text:00000000000030DA ; ---------------------------------------------------------------------------
.text:00000000000030DF                 align 20h
.text:00000000000030E0
.text:00000000000030E0 loc_30E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030E0                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:00000000000030E0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000030E5                 mov     ebx, 66h ; 'f'
.text:00000000000030EA                 jmp     loc_2F54
.text:00000000000030EA ; ---------------------------------------------------------------------------
.text:00000000000030EF                 align 10h
.text:00000000000030F0
.text:00000000000030F0 loc_30F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030F0                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:00000000000030F0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000030F5                 mov     ebx, 76h ; 'v'
.text:00000000000030FA                 jmp     loc_2F54
.text:00000000000030FA ; ---------------------------------------------------------------------------
.text:00000000000030FF                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003100                                         ; DATA XREF: .rodata:jpt_2E0E↓o
.text:0000000000003100                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003105                 mov     ebx, 6Eh ; 'n'
.text:000000000000310A                 jmp     loc_2F42
.text:000000000000310A ; ---------------------------------------------------------------------------
.text:000000000000310F                 align 10h
.text:0000000000003110
.text:0000000000003110 def_319A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003110                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003110                                         ; DATA XREF: ...
.text:0000000000003110                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003113                 nop     dword ptr [rax+rax+00h]
.text:0000000000003118
.text:0000000000003118 def_2E0E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003118                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003118                                         ; DATA XREF: ...
.text:0000000000003118                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000311E                 jnz     loc_34C8
.text:0000000000003124                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003129                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000312E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003133                 call    ___ctype_b_loc
.text:0000000000003138                 mov     rcx, [rax]
.text:000000000000313B                 movzx   edx, bl
.text:000000000000313E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003144                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000314A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000314F                 mov     edi, 1
.text:0000000000003154                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003158                 and     ax, 4000h
.text:000000000000315C                 setnz   r12b
.text:0000000000003160                 setz    al
.text:0000000000003163                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003167
.text:0000000000003167 loc_3167:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003167                 test    al, al
.text:0000000000003169                 jnz     loc_3B01
.text:000000000000316F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003174                 setz    dl
.text:0000000000003177                 jmp     loc_2E48
.text:0000000000003177 ; ---------------------------------------------------------------------------
.text:000000000000317C                 align 20h
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003180                 movzx   ebx, byte ptr [r9]
.text:0000000000003184                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003187                 ja      short def_319A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003189                 lea     rcx, jpt_319A
.text:0000000000003190                 movzx   edx, bl
.text:0000000000003193                 movsxd  rax, ds:(jpt_319A - 5E28h)[rcx+rdx*4]
.text:0000000000003197                 add     rax, rcx
.text:000000000000319A                 jmp     rax             ; switch jump
.text:000000000000319A ; ---------------------------------------------------------------------------
.text:000000000000319C                 align 20h
.text:00000000000031A0
.text:00000000000031A0 loc_31A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031A0                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000031A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000031A3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000031A8                 jnz     loc_2F9E
.text:00000000000031AE                 xchg    ax, ax
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000031B0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000031B0                 mov     edx, 5Ch ; '\'
.text:00000000000031B5                 mov     ebx, 5Ch ; '\'
.text:00000000000031BA                 jmp     loc_2F54
.text:00000000000031BA ; ---------------------------------------------------------------------------
.text:00000000000031BF                 align 20h
.text:00000000000031C0
.text:00000000000031C0 loc_31C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031C0                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000031C0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000031C5                 xor     r10d, r10d
.text:00000000000031C8                 mov     ebx, 66h ; 'f'
.text:00000000000031CD                 jmp     loc_2F54
.text:00000000000031CD ; ---------------------------------------------------------------------------
.text:00000000000031D2                 align 8
.text:00000000000031D8
.text:00000000000031D8 loc_31D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031D8                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000031D8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000031DD                 xor     r10d, r10d
.text:00000000000031E0                 mov     ebx, 6Eh ; 'n'
.text:00000000000031E5                 jmp     loc_2F42
.text:00000000000031E5 ; ---------------------------------------------------------------------------
.text:00000000000031EA                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031F0                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000031F0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000031F5                 jmp     loc_2FC0
.text:00000000000031F5 ; ---------------------------------------------------------------------------
.text:00000000000031FA                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003200                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:0000000000003200                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003203
.text:0000000000003203 loc_3203:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003203                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003208                 setz    dl
.text:000000000000320B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003210                 jnz     loc_3DAA
.text:0000000000003216                 mov     eax, r8d
.text:0000000000003219                 mov     rcx, r15
.text:000000000000321C                 xor     eax, 1
.text:000000000000321F                 and     al, dl
.text:0000000000003221                 jz      short loc_3250
.text:0000000000003223                 cmp     r13, r15
.text:0000000000003226                 jbe     short loc_322D
.text:0000000000003228                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000322D
.text:000000000000322D loc_322D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000322D                 lea     rcx, [r15+1]
.text:0000000000003231                 cmp     r13, rcx
.text:0000000000003234                 jbe     short loc_323C
.text:0000000000003236                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000323C
.text:000000000000323C loc_323C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000323C                 lea     rcx, [r15+2]
.text:0000000000003240                 cmp     r13, rcx
.text:0000000000003243                 ja      loc_3879
.text:0000000000003249
.text:0000000000003249 loc_3249:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003249                 lea     rcx, [r15+3]
.text:000000000000324D                 mov     r8d, eax
.text:0000000000003250
.text:0000000000003250 loc_3250:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003250                 cmp     r13, rcx
.text:0000000000003253                 jbe     short loc_325A
.text:0000000000003255                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000325A
.text:000000000000325A loc_325A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000325A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000325F                 lea     r15, [rcx+1]
.text:0000000000003263                 jz      loc_3869
.text:0000000000003269                 lea     rax, [rbp+1]
.text:000000000000326D                 cmp     rax, r11
.text:0000000000003270                 jnb     short loc_328B
.text:0000000000003272                 mov     rax, [rsp+0E8h+s]
.text:0000000000003277                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000327C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003280                 sub     eax, 30h ; '0'
.text:0000000000003283                 cmp     al, 9
.text:0000000000003285                 jbe     loc_3AB9
.text:000000000000328B
.text:000000000000328B loc_328B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000328B                 mov     eax, r12d
.text:000000000000328E                 mov     ebx, 30h ; '0'
.text:0000000000003293                 xor     r12d, r12d
.text:0000000000003296                 jmp     loc_2E48
.text:0000000000003296 ; ---------------------------------------------------------------------------
.text:000000000000329B                 align 20h
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032A0                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000032A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000032A5                 mov     r12d, r10d
.text:00000000000032A8                 setz    dl
.text:00000000000032AB                 xor     r10d, r10d
.text:00000000000032AE                 xor     eax, eax
.text:00000000000032B0                 jmp     loc_2E48
.text:00000000000032B0 ; ---------------------------------------------------------------------------
.text:00000000000032B5                 align 8
.text:00000000000032B8
.text:00000000000032B8 loc_32B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032B8                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000032B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000032BD                 setz    dl
.text:00000000000032C0                 xor     r10d, r10d
.text:00000000000032C3                 jmp     loc_3088
.text:00000000000032C3 ; ---------------------------------------------------------------------------
.text:00000000000032C8                 align 10h
.text:00000000000032D0
.text:00000000000032D0 loc_32D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032D0                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000032D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000032D5                 setz    dl
.text:00000000000032D8                 xor     r10d, r10d
.text:00000000000032DB                 xor     r12d, r12d
.text:00000000000032DE                 jmp     loc_3091
.text:00000000000032DE ; ---------------------------------------------------------------------------
.text:00000000000032E3                 align 8
.text:00000000000032E8
.text:00000000000032E8 loc_32E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032E8                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000032E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000032ED                 mov     r12d, r10d
.text:00000000000032F0                 mov     ebx, 20h ; ' '
.text:00000000000032F5                 setz    dl
.text:00000000000032F8                 xor     r10d, r10d
.text:00000000000032FB                 jmp     loc_3091
.text:0000000000003300 ; ---------------------------------------------------------------------------
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003300                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:0000000000003300                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003305                 xor     r10d, r10d
.text:0000000000003308                 mov     ebx, 72h ; 'r'
.text:000000000000330D                 jmp     loc_2F42
.text:000000000000330D ; ---------------------------------------------------------------------------
.text:0000000000003312                 align 8
.text:0000000000003318
.text:0000000000003318 loc_3318:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003318                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:0000000000003318                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000331D                 jmp     loc_2FC0
.text:000000000000331D ; ---------------------------------------------------------------------------
.text:0000000000003322                 align 8
.text:0000000000003328
.text:0000000000003328 loc_3328:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003328                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:0000000000003328                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000332D                 xor     r10d, r10d
.text:0000000000003330                 mov     ebx, 74h ; 't'
.text:0000000000003335                 jmp     loc_2F42
.text:0000000000003335 ; ---------------------------------------------------------------------------
.text:000000000000333A                 align 20h
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003340                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:0000000000003340                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003345                 jmp     loc_2FC0
.text:0000000000003345 ; ---------------------------------------------------------------------------
.text:000000000000334A                 align 10h
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003350                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003350                 xor     r10d, r10d
.text:0000000000003353                 jmp     loc_2DF0
.text:0000000000003353 ; ---------------------------------------------------------------------------
.text:0000000000003358                 align 20h
.text:0000000000003360
.text:0000000000003360 loc_3360:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003360                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003365                 jnz     loc_3CD0
.text:000000000000336B
.text:000000000000336B loc_336B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000336B                 add     rbp, 1
.text:000000000000336F                 mov     eax, r8d
.text:0000000000003372                 xor     r12d, r12d
.text:0000000000003375                 mov     ebx, 5Ch ; '\'
.text:000000000000337A                 jmp     loc_2E8C
.text:000000000000337A ; ---------------------------------------------------------------------------
.text:000000000000337F                 align 20h
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003380                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003385                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000338A                 mov     r12d, r8d
.text:000000000000338D                 mov     rbp, r11
.text:0000000000003390                 setz    dl
.text:0000000000003393                 mov     eax, ebx
.text:0000000000003395                 test    r15, r15
.text:0000000000003398                 setz    cl
.text:000000000000339B                 and     eax, edx
.text:000000000000339D                 and     al, cl
.text:000000000000339F                 jnz     loc_3E06
.text:00000000000033A5                 mov     eax, ebx
.text:00000000000033A7                 xor     eax, 1
.text:00000000000033AA                 and     dl, al
.text:00000000000033AC                 jz      loc_3D1C
.text:00000000000033B2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000033B7                 jz      loc_3D1A
.text:00000000000033BD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000033C2                 jnz     loc_3DBD
.text:00000000000033C8                 test    r13, r13
.text:00000000000033CB                 setz    al
.text:00000000000033CE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000033D4                 setnz   dl
.text:00000000000033D7                 and     al, dl
.text:00000000000033D9                 jz      loc_3DFC
.text:00000000000033DF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000033E4
.text:00000000000033E4 loc_33E4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000033E4                 lea     rbx, asc_5BAD   ; "'"
.text:00000000000033EB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000033EF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033F7                 mov     r15d, 1
.text:00000000000033FD                 mov     [rsp+0E8h+n], 1
.text:0000000000003406                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000340B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003410                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003414                 jmp     loc_2CF3
.text:0000000000003414 ; ---------------------------------------------------------------------------
.text:0000000000003419                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003420                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003425                 jnz     loc_3CD0
.text:000000000000342B                 test    r13, r13
.text:000000000000342E                 jz      loc_3830
.text:0000000000003434                 xor     edx, edx
.text:0000000000003436                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000343C                 jnz     loc_3830
.text:0000000000003442
.text:0000000000003442 loc_3442:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003442                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003442                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003447                 add     r15, 3
.text:000000000000344B                 xor     eax, eax
.text:000000000000344D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003452                 xor     r8d, r8d
.text:0000000000003455                 mov     r13, rdx
.text:0000000000003458                 mov     ebx, 27h ; '''
.text:000000000000345D                 jmp     loc_2E79
.text:000000000000345D ; ---------------------------------------------------------------------------
.text:0000000000003462                 align 8
.text:0000000000003468
.text:0000000000003468 loc_3468:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003468                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000346D                 jz      short loc_3490
.text:000000000000346F                 lea     rcx, [rbp+2]
.text:0000000000003473                 cmp     rcx, r11
.text:0000000000003476                 jnb     short loc_3490
.text:0000000000003478                 mov     rax, [rsp+0E8h+s]
.text:000000000000347D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003482                 jz      loc_3C12
.text:0000000000003488                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003490
.text:0000000000003490 loc_3490:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003490                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003490                 xor     edx, edx
.text:0000000000003492                 xor     r12d, r12d
.text:0000000000003495                 xor     eax, eax
.text:0000000000003497                 mov     ebx, 3Fh ; '?'
.text:000000000000349C                 jmp     loc_2E48
.text:000000000000349C ; ---------------------------------------------------------------------------
.text:00000000000034A1                 align 8
.text:00000000000034A8
.text:00000000000034A8 loc_34A8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000034A8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034AD                 jnz     loc_3CD0
.text:00000000000034B3                 xor     r12d, r12d
.text:00000000000034B6                 xor     eax, eax
.text:00000000000034B8                 mov     ebx, 3Fh ; '?'
.text:00000000000034BD                 jmp     loc_2E79
.text:00000000000034BD ; ---------------------------------------------------------------------------
.text:00000000000034C2                 align 8
.text:00000000000034C8
.text:00000000000034C8 loc_34C8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000034C8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000034D0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000034D4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000034E0                 mov     [rsp+0E8h+ps], rax
.text:00000000000034E5                 jnz     short loc_3514
.text:00000000000034E7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000034EC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000034F1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000034F6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000034FB                 call    _strlen
.text:0000000000003500                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003506                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000350C                 mov     r11, rax
.text:000000000000350F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003514
.text:0000000000003514 loc_3514:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003514                 lea     rax, [rsp+0E8h+wc]
.text:000000000000351C                 xor     ecx, ecx
.text:000000000000351E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003522                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003527                 mov     rbx, rcx
.text:000000000000352A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003532                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003537                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000353C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003544                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003549                 mov     [rsp+0E8h+var_78], r13
.text:000000000000354E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003553
.text:0000000000003553 loc_3553:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003553                 mov     rax, [rsp+0E8h+s]
.text:0000000000003558                 lea     r14, [rbp+rbx+0]
.text:000000000000355D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003562                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003567                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000356C                 lea     r13, [rax+r14]
.text:0000000000003570                 sub     rdx, r14
.text:0000000000003573                 mov     rsi, r13
.text:0000000000003576                 call    rpl_mbrtowc
.text:000000000000357B                 test    rax, rax
.text:000000000000357E                 mov     r15, rax
.text:0000000000003581                 jz      short loc_35D1
.text:0000000000003583                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003587                 jz      loc_3BA5
.text:000000000000358D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003591                 jz      loc_3B31
.text:0000000000003597                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000359C                 setz    al
.text:000000000000359F                 and     al, [rsp+0E8h+var_D9]
.text:00000000000035A3                 jnz     loc_3740
.text:00000000000035A9
.text:00000000000035A9 loc_35A9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000035A9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000035A9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000035B0                 call    _iswprint
.text:00000000000035B5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000035BA                 test    eax, eax
.text:00000000000035BC                 mov     eax, 0
.text:00000000000035C1                 cmovz   r12d, eax
.text:00000000000035C5                 add     rbx, r15
.text:00000000000035C8                 call    _mbsinit
.text:00000000000035CD                 test    eax, eax
.text:00000000000035CF                 jz      short loc_3553
.text:00000000000035D1
.text:00000000000035D1 loc_35D1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000035D1                 mov     edx, r12d
.text:00000000000035D4                 mov     rdi, rbx
.text:00000000000035D7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000035DD                 xor     edx, 1
.text:00000000000035E0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000035E5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000035EB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000035EF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000035F7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000035FC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003601                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003606
.text:0000000000003606 loc_3606:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003606                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003606                 cmp     rdi, 1
.text:000000000000360A                 jbe     loc_3C0B
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003610                 mov     rcx, rdi
.text:0000000000003613                 xor     esi, esi
.text:0000000000003615                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000361B                 add     rcx, rbp
.text:000000000000361E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003623                 jmp     loc_36DE
.text:0000000000003623 ; ---------------------------------------------------------------------------
.text:0000000000003628                 align 10h
.text:0000000000003630
.text:0000000000003630 loc_3630:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003630                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003635                 setz    al
.text:0000000000003638                 test    r9b, r9b
.text:000000000000363B                 jnz     loc_3AF0
.text:0000000000003641                 mov     esi, r8d
.text:0000000000003644                 xor     esi, 1
.text:0000000000003647                 and     al, sil
.text:000000000000364A                 jz      short loc_367B
.text:000000000000364C                 cmp     r13, r15
.text:000000000000364F                 jbe     short loc_3656
.text:0000000000003651                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003656
.text:0000000000003656 loc_3656:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003656                 lea     rsi, [r15+1]
.text:000000000000365A                 cmp     r13, rsi
.text:000000000000365D                 jbe     short loc_3665
.text:000000000000365F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003665
.text:0000000000003665 loc_3665:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003665                 lea     rsi, [r15+2]
.text:0000000000003669                 cmp     r13, rsi
.text:000000000000366C                 jbe     short loc_3674
.text:000000000000366E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003674
.text:0000000000003674 loc_3674:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003674                 add     r15, 3
.text:0000000000003678                 mov     r8d, eax
.text:000000000000367B
.text:000000000000367B loc_367B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000367B                 cmp     r13, r15
.text:000000000000367E                 jbe     short loc_3685
.text:0000000000003680                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003685
.text:0000000000003685 loc_3685:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003685                 lea     rax, [r15+1]
.text:0000000000003689                 cmp     r13, rax
.text:000000000000368C                 jbe     short loc_369B
.text:000000000000368E                 mov     eax, ebx
.text:0000000000003690                 shr     al, 6
.text:0000000000003693                 add     eax, 30h ; '0'
.text:0000000000003696                 mov     [r14+r15+1], al
.text:000000000000369B
.text:000000000000369B loc_369B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000369B                 lea     rax, [r15+2]
.text:000000000000369F                 cmp     r13, rax
.text:00000000000036A2                 jbe     short loc_36B4
.text:00000000000036A4                 mov     eax, ebx
.text:00000000000036A6                 shr     al, 3
.text:00000000000036A9                 and     eax, 7
.text:00000000000036AC                 add     eax, 30h ; '0'
.text:00000000000036AF                 mov     [r14+r15+2], al
.text:00000000000036B4
.text:00000000000036B4 loc_36B4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000036B4                 and     ebx, 7
.text:00000000000036B7                 add     rbp, 1
.text:00000000000036BB                 add     r15, 3
.text:00000000000036BF                 add     ebx, 30h ; '0'
.text:00000000000036C2                 cmp     rbp, rcx
.text:00000000000036C5                 jnb     loc_2EB0
.text:00000000000036CB                 mov     esi, edx
.text:00000000000036CD
.text:00000000000036CD loc_36CD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000036CD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000036CD                 cmp     r13, r15
.text:00000000000036D0                 jbe     short loc_36D6
.text:00000000000036D2                 mov     [r14+r15], bl
.text:00000000000036D6
.text:00000000000036D6 loc_36D6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000036D6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000036DA                 add     r15, 1
.text:00000000000036DE
.text:00000000000036DE loc_36DE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000036DE                 test    dl, dl
.text:00000000000036E0                 jnz     loc_3630
.text:00000000000036E6                 mov     eax, esi
.text:00000000000036E8                 xor     eax, 1
.text:00000000000036EB                 and     eax, r8d
.text:00000000000036EE                 test    r10b, r10b
.text:00000000000036F1                 jz      short loc_3701
.text:00000000000036F3                 cmp     r13, r15
.text:00000000000036F6                 jbe     short loc_36FD
.text:00000000000036F8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000036FD
.text:00000000000036FD loc_36FD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000036FD                 add     r15, 1
.text:0000000000003701
.text:0000000000003701 loc_3701:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003701                 add     rbp, 1
.text:0000000000003705                 cmp     rbp, rcx
.text:0000000000003708                 jnb     loc_2E8C
.text:000000000000370E                 test    al, al
.text:0000000000003710                 jz      loc_3B0E
.text:0000000000003716                 cmp     r13, r15
.text:0000000000003719                 jbe     short loc_3720
.text:000000000000371B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003720                 lea     rax, [r15+1]
.text:0000000000003724                 cmp     r13, rax
.text:0000000000003727                 jbe     short loc_372F
.text:0000000000003729                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000372F
.text:000000000000372F loc_372F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000372F                 add     r15, 2
.text:0000000000003733                 xor     r10d, r10d
.text:0000000000003736                 xor     r8d, r8d
.text:0000000000003739                 jmp     short loc_36CD
.text:0000000000003739 ; ---------------------------------------------------------------------------
.text:000000000000373B                 align 20h
.text:0000000000003740
.text:0000000000003740 loc_3740:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003740                 cmp     r15, 1
.text:0000000000003744                 jz      loc_35A9
.text:000000000000374A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000374F                 lea     rcx, [rdi+r15]
.text:0000000000003753                 lea     rdx, [rdi+r14+1]
.text:0000000000003758                 lea     r8, [rcx+r14]
.text:000000000000375C                 jmp     short loc_376D
.text:000000000000375C ; ---------------------------------------------------------------------------
.text:000000000000375E                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003760                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003760                 add     rdx, 1
.text:0000000000003764                 cmp     r8, rdx
.text:0000000000003767                 jz      loc_35A9
.text:000000000000376D
.text:000000000000376D loc_376D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000376D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003770                 sub     ecx, 5Bh ; '['
.text:0000000000003773                 cmp     cl, 21h ; '!'
.text:0000000000003776                 ja      short loc_3760
.text:0000000000003778                 mov     esi, 1
.text:000000000000377D                 shl     rsi, cl
.text:0000000000003780                 mov     rcx, rsi
.text:0000000000003783                 mov     rsi, 20000002Bh
.text:000000000000378D                 test    rcx, rsi
.text:0000000000003790                 jz      short loc_3760
.text:0000000000003792                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003797                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000379C                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000037A1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000037A9
.text:00000000000037A9 loc_37A9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000037A9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000037A9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000037AE                 jz      short loc_37C0
.text:00000000000037B0                 test    al, al
.text:00000000000037B2                 mov     eax, 4
.text:00000000000037B7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000037BC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000037C0
.text:00000000000037C0 loc_37C0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000037C0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000037C0                 sub     rsp, 8
.text:00000000000037C4                 mov     rcx, rbp
.text:00000000000037C7                 mov     rsi, r13
.text:00000000000037CA                 push    [rsp+0F0h+var_88]
.text:00000000000037CE                 push    [rsp+0F8h+var_80]
.text:00000000000037D2                 mov     rdi, r14
.text:00000000000037D5                 push    0
.text:00000000000037D7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000037DF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000037E4                 mov     rdx, [rsp+108h+s]
.text:00000000000037E9                 and     r9d, 0FFFFFFFDh
.text:00000000000037ED                 call    quotearg_buffer_restyled
.text:00000000000037F2                 add     rsp, 20h
.text:00000000000037F6                 mov     r15, rax
.text:00000000000037F9
.text:00000000000037F9 loc_37F9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000037F9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000037F9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003801                 xor     rbx, fs:28h
.text:000000000000380A                 mov     rax, r15
.text:000000000000380D                 jnz     loc_3E13
.text:0000000000003813                 add     rsp, 0B8h
.text:000000000000381A                 pop     rbx
.text:000000000000381B                 pop     rbp
.text:000000000000381C                 pop     r12
.text:000000000000381E                 pop     r13
.text:0000000000003820                 pop     r14
.text:0000000000003822                 pop     r15
.text:0000000000003824                 retn
.text:0000000000003824 ; ---------------------------------------------------------------------------
.text:0000000000003825                 align 8
.text:0000000000003828
.text:0000000000003828 loc_3828:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003828                 mov     rbp, r11
.text:000000000000382B                 jmp     loc_37A9
.text:0000000000003830 ; ---------------------------------------------------------------------------
.text:0000000000003830
.text:0000000000003830 loc_3830:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003830                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003830                 cmp     r13, r15
.text:0000000000003833                 jbe     short loc_383A
.text:0000000000003835                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000383A
.text:000000000000383A loc_383A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000383A                 lea     rax, [r15+1]
.text:000000000000383E                 cmp     r13, rax
.text:0000000000003841                 jbe     short loc_3849
.text:0000000000003843                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003849
.text:0000000000003849 loc_3849:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003849                 lea     rax, [r15+2]
.text:000000000000384D                 cmp     r13, rax
.text:0000000000003850                 jbe     loc_3E42
.text:0000000000003856                 mov     rdx, r13
.text:0000000000003859                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000385F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003864                 jmp     loc_3442
.text:0000000000003869 ; ---------------------------------------------------------------------------
.text:0000000000003869
.text:0000000000003869 loc_3869:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003869                 mov     eax, r12d
.text:000000000000386C                 mov     ebx, 30h ; '0'
.text:0000000000003871                 xor     r12d, r12d
.text:0000000000003874                 jmp     loc_2E79
.text:0000000000003879 ; ---------------------------------------------------------------------------
.text:0000000000003879
.text:0000000000003879 loc_3879:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003879                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000387F                 jmp     loc_3249
.text:0000000000003884 ; ---------------------------------------------------------------------------
.text:0000000000003884
.text:0000000000003884 loc_3884:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003884                                         ; DATA XREF: .rodata:jpt_2CB1↓o
.text:0000000000003884                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003886                 jnz     loc_2CB3        ; jumptable 00000000000121F1 case 1
.text:000000000000388C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003891
.text:0000000000003891 loc_3891:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003891                 test    r13, r13
.text:0000000000003894                 jnz     loc_3E2A
.text:000000000000389A                 lea     rax, asc_5BAD   ; "'"
.text:00000000000038A1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038AA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038B4                 xor     r12d, r12d
.text:00000000000038B7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000038BC                 mov     [rsp+0E8h+n], 1
.text:00000000000038C5                 mov     [rsp+0E8h+s2], rax
.text:00000000000038CA                 mov     r15d, 1
.text:00000000000038D0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000038D8                 jmp     loc_2CF3
.text:00000000000038D8 ; ---------------------------------------------------------------------------
.text:00000000000038DD                 align 20h
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000038E0                                         ; DATA XREF: .rodata:jpt_2CB1↓o
.text:00000000000038E0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000038E2                 jnz     loc_3CDD
.text:00000000000038E8                 test    r13, r13
.text:00000000000038EB                 jz      loc_3B16
.text:00000000000038F1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000038F5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038FA                 xor     r12d, r12d
.text:00000000000038FD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003902                 mov     [rsp+0E8h+var_98], 0
.text:000000000000390B
.text:000000000000390B loc_390B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000390B                 lea     rax, unk_5BAB
.text:0000000000003912                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003917                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000391C                 mov     [rsp+0E8h+n], 1
.text:0000000000003925                 mov     r15d, 1
.text:000000000000392B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003930                 jmp     loc_2CF3
.text:0000000000003935 ; ---------------------------------------------------------------------------
.text:0000000000003935
.text:0000000000003935 loc_3935:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003935                                         ; DATA XREF: .rodata:jpt_2CB1↓o
.text:0000000000003935                 lea     rax, unk_5BAB   ; jumptable 00000000000121F1 case 6
.text:000000000000393C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003941                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003946                 xor     r12d, r12d
.text:0000000000003949                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003952                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003957                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000395C                 mov     [rsp+0E8h+n], 1
.text:0000000000003965                 xor     r15d, r15d
.text:0000000000003968                 mov     [rsp+0E8h+s2], rax
.text:000000000000396D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003975                 jmp     loc_2CF3
.text:000000000000397A ; ---------------------------------------------------------------------------
.text:000000000000397A
.text:000000000000397A loc_397A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000397A                                         ; DATA XREF: .rodata:jpt_2CB1↓o
.text:000000000000397A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000397F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003984                 xor     r12d, r12d
.text:0000000000003987                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003990                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003995                 xor     r15d, r15d
.text:0000000000003998                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000399D                 mov     [rsp+0E8h+n], 0
.text:00000000000039A6                 mov     [rsp+0E8h+s2], 0
.text:00000000000039AF                 jmp     loc_2CF3
.text:00000000000039B4 ; ---------------------------------------------------------------------------
.text:00000000000039B4
.text:00000000000039B4 loc_39B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000039B4                                         ; DATA XREF: .rodata:jpt_2CB1↓o
.text:00000000000039B4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000039B9                 jz      short loc_3A11
.text:00000000000039BB                 lea     rsi, asc_5BAF   ; "`"
.text:00000000000039C2                 xor     edi, edi        ; domainname
.text:00000000000039C4                 mov     edx, 5          ; category
.text:00000000000039C9                 call    _dcgettext
.text:00000000000039CE                 mov     rcx, rax
.text:00000000000039D1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000039D6                 lea     rax, asc_5BAF   ; "`"
.text:00000000000039DD                 cmp     rcx, rax
.text:00000000000039E0                 jz      loc_3D7E
.text:00000000000039E6
.text:00000000000039E6 loc_39E6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000039E6                 lea     rsi, asc_5BAD   ; "'"
.text:00000000000039ED                 xor     edi, edi        ; domainname
.text:00000000000039EF                 mov     edx, 5          ; category
.text:00000000000039F4                 call    _dcgettext
.text:00000000000039F9                 mov     rcx, rax
.text:00000000000039FC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003A01                 lea     rax, asc_5BAD   ; "'"
.text:0000000000003A08                 cmp     rcx, rax
.text:0000000000003A0B                 jz      loc_3D94
.text:0000000000003A11
.text:0000000000003A11 loc_3A11:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003A11                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003A11                 xor     r15d, r15d
.text:0000000000003A14                 test    ebx, ebx
.text:0000000000003A16                 jz      loc_3BDD
.text:0000000000003A1C
.text:0000000000003A1C loc_3A1C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003A1C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003A1C                 test    ebx, ebx
.text:0000000000003A1E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003A23                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003A28                 xor     r12d, r12d
.text:0000000000003A2B                 mov     rdi, rbx        ; s
.text:0000000000003A2E                 call    _strlen
.text:0000000000003A33                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003A38                 mov     [rsp+0E8h+n], rax
.text:0000000000003A3D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A42                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A47                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A50                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003A55                 jmp     loc_2CF3
.text:0000000000003A5A ; ---------------------------------------------------------------------------
.text:0000000000003A5A
.text:0000000000003A5A loc_3A5A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A5A                                         ; DATA XREF: .rodata:jpt_2CB1↓o
.text:0000000000003A5A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003A5F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A64                 xor     r12d, r12d
.text:0000000000003A67                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A70                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003A75                 xor     r15d, r15d
.text:0000000000003A78                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003A7D                 mov     [rsp+0E8h+n], 0
.text:0000000000003A86                 mov     [rsp+0E8h+s2], 0
.text:0000000000003A8F                 jmp     loc_2CF3
.text:0000000000003A94 ; ---------------------------------------------------------------------------
.text:0000000000003A94
.text:0000000000003A94 loc_3A94:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A94                                         ; DATA XREF: .rodata:jpt_2CB1↓o
.text:0000000000003A94                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003A99                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A9E                 xor     r12d, r12d
.text:0000000000003AA1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AAA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003AAF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003AB4                 jmp     loc_2CD3
.text:0000000000003AB9 ; ---------------------------------------------------------------------------
.text:0000000000003AB9
.text:0000000000003AB9 loc_3AB9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003AB9                 cmp     r13, r15
.text:0000000000003ABC                 jbe     short loc_3AC3
.text:0000000000003ABE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003AC3
.text:0000000000003AC3 loc_3AC3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003AC3                 lea     rax, [rcx+2]
.text:0000000000003AC7                 cmp     r13, rax
.text:0000000000003ACA                 jbe     short loc_3AD2
.text:0000000000003ACC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003AD2
.text:0000000000003AD2 loc_3AD2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003AD2                 mov     eax, r12d
.text:0000000000003AD5                 lea     r15, [rcx+3]
.text:0000000000003AD9                 xor     r12d, r12d
.text:0000000000003ADC                 mov     ebx, 30h ; '0'
.text:0000000000003AE1                 jmp     loc_2E48
.text:0000000000003AE1 ; ---------------------------------------------------------------------------
.text:0000000000003AE6                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003AF0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003AF5                 mov     rbp, r11
.text:0000000000003AF8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003AFC                 jmp     loc_37A9
.text:0000000000003B01 ; ---------------------------------------------------------------------------
.text:0000000000003B01
.text:0000000000003B01 loc_3B01:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003B01                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003B06                 xor     r12d, r12d
.text:0000000000003B09                 jmp     loc_3610
.text:0000000000003B0E ; ---------------------------------------------------------------------------
.text:0000000000003B0E
.text:0000000000003B0E loc_3B0E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003B0E                 xor     r10d, r10d
.text:0000000000003B11                 jmp     loc_36CD
.text:0000000000003B16 ; ---------------------------------------------------------------------------
.text:0000000000003B16
.text:0000000000003B16 loc_3B16:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003B16                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B1F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B24                 xor     r12d, r12d
.text:0000000000003B27                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B2C                 jmp     loc_390B
.text:0000000000003B31 ; ---------------------------------------------------------------------------
.text:0000000000003B31
.text:0000000000003B31 loc_3B31:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003B31                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003B36                 mov     rsi, r14
.text:0000000000003B39                 mov     rcx, r13
.text:0000000000003B3C                 mov     rax, rbx
.text:0000000000003B3F                 mov     rdi, rbx
.text:0000000000003B42                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003B48                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003B4D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003B55                 cmp     rsi, r11
.text:0000000000003B58                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003B5E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003B66                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003B6B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003B70                 jnb     short loc_3B98
.text:0000000000003B72                 cmp     byte ptr [rcx], 0
.text:0000000000003B75                 jnz     short loc_3B87
.text:0000000000003B77                 jmp     short loc_3B98
.text:0000000000003B77 ; ---------------------------------------------------------------------------
.text:0000000000003B79                 align 20h
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003B80                 cmp     byte ptr [r9+rax], 0
.text:0000000000003B85                 jz      short loc_3B95
.text:0000000000003B87
.text:0000000000003B87 loc_3B87:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003B87                 add     rax, 1
.text:0000000000003B8B                 lea     rdx, [rbp+rax+0]
.text:0000000000003B90                 cmp     r11, rdx
.text:0000000000003B93                 ja      short loc_3B80
.text:0000000000003B95
.text:0000000000003B95 loc_3B95:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003B95                 mov     rdi, rax
.text:0000000000003B98
.text:0000000000003B98 loc_3B98:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003B98                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003B98                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003B9D                 xor     r12d, r12d
.text:0000000000003BA0                 jmp     loc_3606
.text:0000000000003BA5 ; ---------------------------------------------------------------------------
.text:0000000000003BA5
.text:0000000000003BA5 loc_3BA5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003BA5                 mov     rdi, rbx
.text:0000000000003BA8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003BAE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003BB3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003BB9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003BC1                 xor     r12d, r12d
.text:0000000000003BC4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003BC9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003BCE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003BD3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003BD8                 jmp     loc_3606
.text:0000000000003BDD ; ---------------------------------------------------------------------------
.text:0000000000003BDD
.text:0000000000003BDD loc_3BDD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003BDD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003BE2                 movzx   eax, byte ptr [rdx]
.text:0000000000003BE5                 test    al, al
.text:0000000000003BE7                 jz      loc_3A1C
.text:0000000000003BED                 nop     dword ptr [rax]
.text:0000000000003BF0
.text:0000000000003BF0 loc_3BF0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003BF0                 cmp     r13, r15
.text:0000000000003BF3                 jbe     short loc_3BF9
.text:0000000000003BF5                 mov     [r14+r15], al
.text:0000000000003BF9
.text:0000000000003BF9 loc_3BF9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003BF9                 add     r15, 1
.text:0000000000003BFD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003C02                 test    al, al
.text:0000000000003C04                 jnz     short loc_3BF0
.text:0000000000003C06                 jmp     loc_3A1C
.text:0000000000003C0B ; ---------------------------------------------------------------------------
.text:0000000000003C0B
.text:0000000000003C0B loc_3C0B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003C0B                 mov     eax, edx
.text:0000000000003C0D                 jmp     loc_3167
.text:0000000000003C12 ; ---------------------------------------------------------------------------
.text:0000000000003C12
.text:0000000000003C12 loc_3C12:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003C12                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003C16                 cmp     bl, 3Eh ; '>'
.text:0000000000003C19                 ja      loc_3490
.text:0000000000003C1F                 mov     rax, 7000A38200000000h
.text:0000000000003C29                 bt      rax, rbx
.text:0000000000003C2D                 jnb     loc_3490
.text:0000000000003C33                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C38                 jnz     loc_3E22
.text:0000000000003C3E                 cmp     r13, r15
.text:0000000000003C41                 jbe     short loc_3C48
.text:0000000000003C43                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003C48
.text:0000000000003C48 loc_3C48:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003C48                 lea     rax, [r15+1]
.text:0000000000003C4C                 cmp     r13, rax
.text:0000000000003C4F                 jbe     short loc_3C57
.text:0000000000003C51                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003C57
.text:0000000000003C57 loc_3C57:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003C57                 lea     rax, [r15+2]
.text:0000000000003C5B                 cmp     r13, rax
.text:0000000000003C5E                 jbe     short loc_3C66
.text:0000000000003C60                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003C66
.text:0000000000003C66 loc_3C66:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003C66                 lea     rax, [r15+3]
.text:0000000000003C6A                 cmp     r13, rax
.text:0000000000003C6D                 jbe     short loc_3C75
.text:0000000000003C6F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003C75
.text:0000000000003C75 loc_3C75:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003C75                 add     r15, 4
.text:0000000000003C79                 xor     edx, edx
.text:0000000000003C7B                 xor     r12d, r12d
.text:0000000000003C7E                 xor     eax, eax
.text:0000000000003C80                 mov     rbp, rcx
.text:0000000000003C83                 jmp     loc_2E48
.text:0000000000003C88 ; ---------------------------------------------------------------------------
.text:0000000000003C88
.text:0000000000003C88 loc_3C88:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C88                                         ; DATA XREF: .rodata:jpt_2CB1↓o
.text:0000000000003C88                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003C8A                 jz      loc_3E18
.text:0000000000003C90                 lea     rax, asc_5BAD   ; "'"
.text:0000000000003C97                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C9C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CA1                 xor     r12d, r12d
.text:0000000000003CA4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CAD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003CB2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003CB7                 mov     [rsp+0E8h+n], 1
.text:0000000000003CC0                 xor     r15d, r15d
.text:0000000000003CC3                 mov     [rsp+0E8h+s2], rax
.text:0000000000003CC8                 jmp     loc_2CF3
.text:0000000000003CC8 ; ---------------------------------------------------------------------------
.text:0000000000003CCD                 align 10h
.text:0000000000003CD0
.text:0000000000003CD0 loc_3CD0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003CD0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003CD0                 mov     rbp, r11
.text:0000000000003CD3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003CD8                 jmp     loc_37A9
.text:0000000000003CDD ; ---------------------------------------------------------------------------
.text:0000000000003CDD
.text:0000000000003CDD loc_3CDD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003CDD                 lea     rax, unk_5BAB
.text:0000000000003CE4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003CE9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CEE                 xor     r12d, r12d
.text:0000000000003CF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CFA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003CFF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003D04                 mov     [rsp+0E8h+n], 1
.text:0000000000003D0D                 xor     r15d, r15d
.text:0000000000003D10                 mov     [rsp+0E8h+s2], rax
.text:0000000000003D15                 jmp     loc_2CF3
.text:0000000000003D1A ; ---------------------------------------------------------------------------
.text:0000000000003D1A
.text:0000000000003D1A loc_3D1A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003D1A                 mov     eax, edx
.text:0000000000003D1C
.text:0000000000003D1C loc_3D1C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003D1C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003D1C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003D21                 test    rbx, rbx
.text:0000000000003D24                 jz      short loc_3D52
.text:0000000000003D26                 test    al, al
.text:0000000000003D28                 jz      short loc_3D52
.text:0000000000003D2A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003D2D                 mov     rax, rbx
.text:0000000000003D30                 test    cl, cl
.text:0000000000003D32                 jz      short loc_3D52
.text:0000000000003D34                 mov     rdx, r15
.text:0000000000003D37                 sub     rax, r15
.text:0000000000003D3A
.text:0000000000003D3A loc_3D3A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003D3A                 cmp     r13, rdx
.text:0000000000003D3D                 jbe     short loc_3D43
.text:0000000000003D3F                 mov     [r14+rdx], cl
.text:0000000000003D43
.text:0000000000003D43 loc_3D43:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003D43                 add     rdx, 1
.text:0000000000003D47                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003D4B                 test    cl, cl
.text:0000000000003D4D                 jnz     short loc_3D3A
.text:0000000000003D4F                 mov     r15, rdx
.text:0000000000003D52
.text:0000000000003D52 loc_3D52:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003D52                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003D52                 cmp     r13, r15
.text:0000000000003D55                 jbe     loc_37F9
.text:0000000000003D5B                 mov     byte ptr [r14+r15], 0
.text:0000000000003D60                 jmp     loc_37F9
.text:0000000000003D65 ; ---------------------------------------------------------------------------
.text:0000000000003D65
.text:0000000000003D65 loc_3D65:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003D65                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D6A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003D6F                 mov     rbp, r11
.text:0000000000003D72                 setz    al
.text:0000000000003D75                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003D79                 jmp     loc_37A9
.text:0000000000003D7E ; ---------------------------------------------------------------------------
.text:0000000000003D7E
.text:0000000000003D7E loc_3D7E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003D7E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003D82                 mov     rdi, rcx
.text:0000000000003D85                 call    gettext_quote
.text:0000000000003D8A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003D8F                 jmp     loc_39E6
.text:0000000000003D94 ; ---------------------------------------------------------------------------
.text:0000000000003D94
.text:0000000000003D94 loc_3D94:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003D94                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003D98                 mov     rdi, rcx
.text:0000000000003D9B                 call    gettext_quote
.text:0000000000003DA0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003DA5                 jmp     loc_3A11
.text:0000000000003DAA ; ---------------------------------------------------------------------------
.text:0000000000003DAA
.text:0000000000003DAA loc_3DAA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003DAA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003DAF                 mov     rbp, r11
.text:0000000000003DB2                 mov     eax, edx
.text:0000000000003DB4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003DB8                 jmp     loc_37A9
.text:0000000000003DBD ; ---------------------------------------------------------------------------
.text:0000000000003DBD
.text:0000000000003DBD loc_3DBD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003DBD                 sub     rsp, 8
.text:0000000000003DC1                 mov     r8d, 5
.text:0000000000003DC7                 mov     rcx, r11
.text:0000000000003DCA                 push    [rsp+0F0h+var_88]
.text:0000000000003DCE                 push    [rsp+0F8h+var_80]
.text:0000000000003DD2                 mov     rdi, r14
.text:0000000000003DD5                 push    [rsp+100h+var_C8]
.text:0000000000003DD9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003DE1                 mov     rdx, [rsp+108h+s]
.text:0000000000003DE6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003DEB                 call    quotearg_buffer_restyled
.text:0000000000003DF0                 add     rsp, 20h
.text:0000000000003DF4                 mov     r15, rax
.text:0000000000003DF7                 jmp     loc_37F9
.text:0000000000003DFC ; ---------------------------------------------------------------------------
.text:0000000000003DFC
.text:0000000000003DFC loc_3DFC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003DFC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003E01                 jmp     loc_3D1C
.text:0000000000003E06 ; ---------------------------------------------------------------------------
.text:0000000000003E06
.text:0000000000003E06 loc_3E06:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003E06                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E0E                 jmp     loc_37A9
.text:0000000000003E13 ; ---------------------------------------------------------------------------
.text:0000000000003E13
.text:0000000000003E13 loc_3E13:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003E13                 call    ___stack_chk_fail
.text:0000000000003E18 ; ---------------------------------------------------------------------------
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003E18                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003E1D                 jmp     loc_3891
.text:0000000000003E22 ; ---------------------------------------------------------------------------
.text:0000000000003E22
.text:0000000000003E22 loc_3E22:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003E22                 mov     rbp, r11
.text:0000000000003E25                 jmp     loc_37C0
.text:0000000000003E2A ; ---------------------------------------------------------------------------
.text:0000000000003E2A
.text:0000000000003E2A loc_3E2A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003E2A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E2F                 xor     eax, eax
.text:0000000000003E31                 xor     r12d, r12d
.text:0000000000003E34                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E3D                 jmp     loc_33E4
.text:0000000000003E42 ; ---------------------------------------------------------------------------
.text:0000000000003E42
.text:0000000000003E42 loc_3E42:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003E42                 mov     rdx, r13
.text:0000000000003E45                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003E4A                 jmp     loc_3442
.text:0000000000003E4F ; ---------------------------------------------------------------------------
.text:0000000000003E4F
.text:0000000000003E4F def_2CB1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003E4F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003E4F ; } // starts at 2C20
.text:0000000000003E4F quotearg_buffer_restyled endp
.text:0000000000003E4F
.text:0000000000003E4F ; ---------------------------------------------------------------------------
.text:0000000000003E54                 align 20h
.text:0000000000003E60
.text:0000000000003E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E60
.text:0000000000003E60
.text:0000000000003E60 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003E60                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003E60
.text:0000000000003E60 var_50          = qword ptr -50h
.text:0000000000003E60 var_48          = qword ptr -48h
.text:0000000000003E60 var_40          = dword ptr -40h
.text:0000000000003E60 var_3C          = dword ptr -3Ch
.text:0000000000003E60
.text:0000000000003E60 ; __unwind {
.text:0000000000003E60                 push    r15
.text:0000000000003E62                 push    r14
.text:0000000000003E64                 movsxd  r15, edi
.text:0000000000003E67                 push    r13
.text:0000000000003E69                 push    r12
.text:0000000000003E6B                 mov     r14, rdx
.text:0000000000003E6E                 push    rbp
.text:0000000000003E6F                 push    rbx
.text:0000000000003E70                 mov     rbp, rcx
.text:0000000000003E73                 sub     rsp, 28h
.text:0000000000003E77                 mov     [rsp+58h+var_50], rsi
.text:0000000000003E7C                 call    ___errno_location
.text:0000000000003E81                 mov     r13, rax
.text:0000000000003E84                 mov     eax, [rax]
.text:0000000000003E86                 test    r15d, r15d
.text:0000000000003E89                 mov     rbx, cs:slotvec
.text:0000000000003E90                 mov     [rsp+58h+var_40], eax
.text:0000000000003E94                 js      loc_4001
.text:0000000000003E9A                 cmp     cs:nslots, r15d
.text:0000000000003EA1                 jg      short loc_3F05
.text:0000000000003EA3                 cmp     r15d, 7FFFFFFFh
.text:0000000000003EAA                 jz      loc_4006
.text:0000000000003EB0                 lea     r12d, [r15+1]
.text:0000000000003EB4                 lea     rax, slotvec0
.text:0000000000003EBB                 movsxd  rsi, r12d
.text:0000000000003EBE                 shl     rsi, 4
.text:0000000000003EC2                 cmp     rbx, rax
.text:0000000000003EC5                 jz      loc_3FE0
.text:0000000000003ECB                 mov     rdi, rbx
.text:0000000000003ECE                 call    xrealloc
.text:0000000000003ED3                 mov     rbx, rax
.text:0000000000003ED6                 mov     cs:slotvec, rax
.text:0000000000003EDD
.text:0000000000003EDD loc_3EDD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003EDD                 movsxd  rdi, cs:nslots
.text:0000000000003EE4                 mov     edx, r12d
.text:0000000000003EE7                 xor     esi, esi        ; c
.text:0000000000003EE9                 sub     edx, edi
.text:0000000000003EEB                 shl     rdi, 4
.text:0000000000003EEF                 movsxd  rdx, edx
.text:0000000000003EF2                 add     rdi, rbx        ; s
.text:0000000000003EF5                 shl     rdx, 4          ; n
.text:0000000000003EF9                 call    _memset
.text:0000000000003EFE                 mov     cs:nslots, r12d
.text:0000000000003F05
.text:0000000000003F05 loc_3F05:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003F05                 mov     eax, [rbp+4]
.text:0000000000003F08                 shl     r15, 4
.text:0000000000003F0C                 sub     rsp, 8
.text:0000000000003F10                 add     rbx, r15
.text:0000000000003F13                 lea     r15, [rbp+8]
.text:0000000000003F17                 mov     r8d, [rbp+0]
.text:0000000000003F1B                 mov     r11, [rbx]
.text:0000000000003F1E                 mov     r12, [rbx+8]
.text:0000000000003F22                 mov     rcx, r14
.text:0000000000003F25                 or      eax, 1
.text:0000000000003F28                 mov     [rsp+60h+var_3C], eax
.text:0000000000003F2C                 push    qword ptr [rbp+30h]
.text:0000000000003F2F                 mov     r9d, eax
.text:0000000000003F32                 push    qword ptr [rbp+28h]
.text:0000000000003F35                 push    r15
.text:0000000000003F37                 mov     rsi, r11
.text:0000000000003F3A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003F3F                 mov     rdi, r12
.text:0000000000003F42                 mov     [rsp+78h+var_48], r11
.text:0000000000003F47                 call    quotearg_buffer_restyled
.text:0000000000003F4C                 add     rsp, 20h
.text:0000000000003F50                 mov     r11, [rsp+58h+var_48]
.text:0000000000003F55                 cmp     r11, rax
.text:0000000000003F58                 ja      short loc_3FC1
.text:0000000000003F5A                 lea     rsi, [rax+1]
.text:0000000000003F5E                 lea     rax, slot0
.text:0000000000003F65                 cmp     r12, rax
.text:0000000000003F68                 mov     [rbx], rsi
.text:0000000000003F6B                 jz      short loc_3F7F
.text:0000000000003F6D                 mov     rdi, r12        ; ptr
.text:0000000000003F70                 mov     [rsp+58h+var_48], rsi
.text:0000000000003F75                 call    _free
.text:0000000000003F7A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003F7F
.text:0000000000003F7F loc_3F7F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003F7F                 mov     rdi, rsi
.text:0000000000003F82                 mov     [rsp+58h+var_48], rsi
.text:0000000000003F87                 call    xmalloc
.text:0000000000003F8C                 sub     rsp, 8
.text:0000000000003F90                 mov     [rbx+8], rax
.text:0000000000003F94                 mov     r8d, [rbp+0]
.text:0000000000003F98                 push    qword ptr [rbp+30h]
.text:0000000000003F9B                 push    qword ptr [rbp+28h]
.text:0000000000003F9E                 mov     rcx, r14
.text:0000000000003FA1                 push    r15
.text:0000000000003FA3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003FA8                 mov     rdi, rax
.text:0000000000003FAB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003FB0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003FB5                 mov     r12, rax
.text:0000000000003FB8                 call    quotearg_buffer_restyled
.text:0000000000003FBD                 add     rsp, 20h
.text:0000000000003FC1
.text:0000000000003FC1 loc_3FC1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003FC1                 mov     eax, [rsp+58h+var_40]
.text:0000000000003FC5                 mov     [r13+0], eax
.text:0000000000003FC9                 add     rsp, 28h
.text:0000000000003FCD                 mov     rax, r12
.text:0000000000003FD0                 pop     rbx
.text:0000000000003FD1                 pop     rbp
.text:0000000000003FD2                 pop     r12
.text:0000000000003FD4                 pop     r13
.text:0000000000003FD6                 pop     r14
.text:0000000000003FD8                 pop     r15
.text:0000000000003FDA                 retn
.text:0000000000003FDA ; ---------------------------------------------------------------------------
.text:0000000000003FDB                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 loc_3FE0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003FE0                 xor     edi, edi
.text:0000000000003FE2                 call    xrealloc
.text:0000000000003FE7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003FEF                 mov     rbx, rax
.text:0000000000003FF2                 mov     cs:slotvec, rax
.text:0000000000003FF9                 movups  xmmword ptr [rax], xmm0
.text:0000000000003FFC                 jmp     loc_3EDD
.text:0000000000004001 ; ---------------------------------------------------------------------------
.text:0000000000004001
.text:0000000000004001 loc_4001:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004001                 call    _abort
.text:0000000000004006 ; ---------------------------------------------------------------------------
.text:0000000000004006
.text:0000000000004006 loc_4006:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004006                 call    xalloc_die
.text:0000000000004006 ; } // starts at 3E60
.text:0000000000004006 quotearg_n_options endp
.text:0000000000004006
.text:0000000000004006 ; ---------------------------------------------------------------------------
.text:000000000000400B                 align 10h
.text:0000000000004010
.text:0000000000004010 ; =============== S U B R O U T I N E =======================================
.text:0000000000004010
.text:0000000000004010 ; Attributes: info_from_lumina
.text:0000000000004010
.text:0000000000004010 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004010                 public clone_quoting_options
.text:0000000000004010 clone_quoting_options proc near
.text:0000000000004010 ; __unwind {
.text:0000000000004010                 push    r12
.text:0000000000004012                 push    rbp
.text:0000000000004013                 push    rbx
.text:0000000000004014                 mov     rbx, rdi
.text:0000000000004017                 call    ___errno_location
.text:000000000000401C                 mov     r12d, [rax]
.text:000000000000401F                 mov     rbp, rax
.text:0000000000004022                 lea     rax, default_quoting_options
.text:0000000000004029                 test    rbx, rbx
.text:000000000000402C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004031                 cmovz   rbx, rax
.text:0000000000004035                 mov     rdi, rbx        ; src
.text:0000000000004038                 call    xmemdup
.text:000000000000403D                 mov     [rbp+0], r12d
.text:0000000000004041                 pop     rbx
.text:0000000000004042                 pop     rbp
.text:0000000000004043                 pop     r12
.text:0000000000004045                 retn
.text:0000000000004045 ; } // starts at 4010
.text:0000000000004045 clone_quoting_options endp
.text:0000000000004045
.text:0000000000004045 ; ---------------------------------------------------------------------------
.text:0000000000004046                 align 10h
.text:0000000000004050
.text:0000000000004050 ; =============== S U B R O U T I N E =======================================
.text:0000000000004050
.text:0000000000004050
.text:0000000000004050                 public get_quoting_style
.text:0000000000004050 get_quoting_style proc near
.text:0000000000004050 ; __unwind {
.text:0000000000004050                 lea     rax, default_quoting_options
.text:0000000000004057                 test    rdi, rdi
.text:000000000000405A                 cmovz   rdi, rax
.text:000000000000405E                 mov     eax, [rdi]
.text:0000000000004060                 retn
.text:0000000000004060 ; } // starts at 4050
.text:0000000000004060 get_quoting_style endp
.text:0000000000004060
.text:0000000000004060 ; ---------------------------------------------------------------------------
.text:0000000000004061                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070
.text:0000000000004070                 public set_quoting_style
.text:0000000000004070 set_quoting_style proc near
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 lea     rax, default_quoting_options
.text:0000000000004077                 test    rdi, rdi
.text:000000000000407A                 cmovz   rdi, rax
.text:000000000000407E                 mov     [rdi], esi
.text:0000000000004080                 retn
.text:0000000000004080 ; } // starts at 4070
.text:0000000000004080 set_quoting_style endp
.text:0000000000004080
.text:0000000000004080 ; ---------------------------------------------------------------------------
.text:0000000000004081                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090 ; Attributes: info_from_lumina
.text:0000000000004090
.text:0000000000004090 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004090                 public set_char_quoting
.text:0000000000004090 set_char_quoting proc near
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 lea     rax, default_quoting_options
.text:0000000000004097                 test    rdi, rdi
.text:000000000000409A                 mov     ecx, esi
.text:000000000000409C                 cmovz   rdi, rax
.text:00000000000040A0                 mov     eax, esi
.text:00000000000040A2                 and     ecx, 1Fh
.text:00000000000040A5                 shr     al, 5
.text:00000000000040A8                 movzx   eax, al
.text:00000000000040AB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000040B0                 mov     esi, [rdi]
.text:00000000000040B2                 mov     eax, esi
.text:00000000000040B4                 shr     eax, cl
.text:00000000000040B6                 xor     edx, eax
.text:00000000000040B8                 and     eax, 1
.text:00000000000040BB                 and     edx, 1
.text:00000000000040BE                 shl     edx, cl
.text:00000000000040C0                 xor     edx, esi
.text:00000000000040C2                 mov     [rdi], edx
.text:00000000000040C4                 retn
.text:00000000000040C4 ; } // starts at 4090
.text:00000000000040C4 set_char_quoting endp
.text:00000000000040C4
.text:00000000000040C4 ; ---------------------------------------------------------------------------
.text:00000000000040C5                 align 10h
.text:00000000000040D0
.text:00000000000040D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040D0
.text:00000000000040D0
.text:00000000000040D0                 public set_quoting_flags
.text:00000000000040D0 set_quoting_flags proc near
.text:00000000000040D0 ; __unwind {
.text:00000000000040D0                 lea     rax, default_quoting_options
.text:00000000000040D7                 test    rdi, rdi
.text:00000000000040DA                 cmovz   rdi, rax
.text:00000000000040DE                 mov     eax, [rdi+4]
.text:00000000000040E1                 mov     [rdi+4], esi
.text:00000000000040E4                 retn
.text:00000000000040E4 ; } // starts at 40D0
.text:00000000000040E4 set_quoting_flags endp
.text:00000000000040E4
.text:00000000000040E4 ; ---------------------------------------------------------------------------
.text:00000000000040E5                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0 ; Attributes: info_from_lumina
.text:00000000000040F0
.text:00000000000040F0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000040F0                 public set_custom_quoting
.text:00000000000040F0 set_custom_quoting proc near
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 lea     rax, default_quoting_options
.text:00000000000040F7                 test    rdi, rdi
.text:00000000000040FA                 cmovz   rdi, rax
.text:00000000000040FE                 test    rsi, rsi
.text:0000000000004101                 mov     dword ptr [rdi], 0Ah
.text:0000000000004107                 jz      short loc_4117
.text:0000000000004109                 test    rdx, rdx
.text:000000000000410C                 jz      short loc_4117
.text:000000000000410E                 mov     [rdi+28h], rsi
.text:0000000000004112                 mov     [rdi+30h], rdx
.text:0000000000004116                 retn
.text:0000000000004117 ; ---------------------------------------------------------------------------
.text:0000000000004117
.text:0000000000004117 loc_4117:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004117                                         ; set_custom_quoting+1C↑j
.text:0000000000004117                 sub     rsp, 8
.text:000000000000411B                 call    _abort
.text:000000000000411B ; } // starts at 40F0
.text:000000000000411B set_custom_quoting endp
.text:000000000000411B
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120 ; Attributes: info_from_lumina
.text:0000000000004120
.text:0000000000004120 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004120                 public quotearg_buffer
.text:0000000000004120 quotearg_buffer proc near
.text:0000000000004120
.text:0000000000004120 var_40          = qword ptr -40h
.text:0000000000004120
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 push    r15
.text:0000000000004122                 push    r14
.text:0000000000004124                 lea     rax, default_quoting_options
.text:000000000000412B                 push    r13
.text:000000000000412D                 push    r12
.text:000000000000412F                 mov     r13, rdi
.text:0000000000004132                 push    rbp
.text:0000000000004133                 push    rbx
.text:0000000000004134                 mov     rbx, r8
.text:0000000000004137                 mov     r14, rsi
.text:000000000000413A                 mov     r15, rdx
.text:000000000000413D                 sub     rsp, 18h
.text:0000000000004141                 test    r8, r8
.text:0000000000004144                 cmovz   rbx, rax
.text:0000000000004148                 mov     [rsp+48h+var_40], rcx
.text:000000000000414D                 call    ___errno_location
.text:0000000000004152                 mov     r12d, [rax]
.text:0000000000004155                 mov     rbp, rax
.text:0000000000004158                 lea     rax, [rbx+8]
.text:000000000000415C                 sub     rsp, 8
.text:0000000000004160                 mov     r9d, [rbx+4]
.text:0000000000004164                 push    qword ptr [rbx+30h]
.text:0000000000004167                 mov     r8d, [rbx]
.text:000000000000416A                 push    qword ptr [rbx+28h]
.text:000000000000416D                 mov     rdx, r15
.text:0000000000004170                 push    rax
.text:0000000000004171                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004176                 mov     rsi, r14
.text:0000000000004179                 mov     rdi, r13
.text:000000000000417C                 call    quotearg_buffer_restyled
.text:0000000000004181                 mov     [rbp+0], r12d
.text:0000000000004185                 add     rsp, 38h
.text:0000000000004189                 pop     rbx
.text:000000000000418A                 pop     rbp
.text:000000000000418B                 pop     r12
.text:000000000000418D                 pop     r13
.text:000000000000418F                 pop     r14
.text:0000000000004191                 pop     r15
.text:0000000000004193                 retn
.text:0000000000004193 ; } // starts at 4120
.text:0000000000004193 quotearg_buffer endp
.text:0000000000004193
.text:0000000000004193 ; ---------------------------------------------------------------------------
.text:0000000000004194                 align 20h
.text:00000000000041A0
.text:00000000000041A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041A0
.text:00000000000041A0 ; Attributes: info_from_lumina
.text:00000000000041A0
.text:00000000000041A0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000041A0                 public quotearg_alloc_mem
.text:00000000000041A0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000041A0
.text:00000000000041A0 var_5C          = dword ptr -5Ch
.text:00000000000041A0 var_58          = qword ptr -58h
.text:00000000000041A0 var_50          = qword ptr -50h
.text:00000000000041A0 var_48          = qword ptr -48h
.text:00000000000041A0 var_40          = qword ptr -40h
.text:00000000000041A0
.text:00000000000041A0 ; __unwind {
.text:00000000000041A0                 push    r15
.text:00000000000041A2                 push    r14
.text:00000000000041A4                 lea     rax, default_quoting_options
.text:00000000000041AB                 push    r13
.text:00000000000041AD                 push    r12
.text:00000000000041AF                 mov     r12, rdx
.text:00000000000041B2                 push    rbp
.text:00000000000041B3                 push    rbx
.text:00000000000041B4                 mov     rbx, rcx
.text:00000000000041B7                 mov     r14, rdi
.text:00000000000041BA                 mov     r15, rsi
.text:00000000000041BD                 sub     rsp, 38h
.text:00000000000041C1                 test    rcx, rcx
.text:00000000000041C4                 cmovz   rbx, rax
.text:00000000000041C8                 xor     ebp, ebp
.text:00000000000041CA                 call    ___errno_location
.text:00000000000041CF                 test    r12, r12
.text:00000000000041D2                 mov     r13, rax
.text:00000000000041D5                 mov     eax, [rax]
.text:00000000000041D7                 setz    bpl
.text:00000000000041DB                 or      ebp, [rbx+4]
.text:00000000000041DE                 lea     r10, [rbx+8]
.text:00000000000041E2                 sub     rsp, 8
.text:00000000000041E6                 mov     r8d, [rbx]
.text:00000000000041E9                 mov     rcx, r15
.text:00000000000041EC                 mov     [rsp+70h+var_5C], eax
.text:00000000000041F0                 push    qword ptr [rbx+30h]
.text:00000000000041F3                 mov     rdx, r14
.text:00000000000041F6                 push    qword ptr [rbx+28h]
.text:00000000000041F9                 push    r10
.text:00000000000041FB                 xor     esi, esi
.text:00000000000041FD                 mov     r9d, ebp
.text:0000000000004200                 xor     edi, edi
.text:0000000000004202                 mov     [rsp+88h+var_48], r10
.text:0000000000004207                 call    quotearg_buffer_restyled
.text:000000000000420C                 lea     rsi, [rax+1]
.text:0000000000004210                 mov     [rsp+88h+var_40], rax
.text:0000000000004215                 add     rsp, 20h
.text:0000000000004219                 mov     rdi, rsi
.text:000000000000421C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004221                 call    xmalloc
.text:0000000000004226                 mov     [rsp+68h+var_58], rax
.text:000000000000422B                 sub     rsp, 8
.text:000000000000422F                 push    qword ptr [rbx+30h]
.text:0000000000004232                 push    qword ptr [rbx+28h]
.text:0000000000004235                 mov     r10, [rsp+80h+var_48]
.text:000000000000423A                 mov     r9d, ebp
.text:000000000000423D                 mov     r8d, [rbx]
.text:0000000000004240                 mov     rcx, r15
.text:0000000000004243                 mov     rdx, r14
.text:0000000000004246                 mov     rdi, rax
.text:0000000000004249                 push    r10
.text:000000000000424B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004250                 call    quotearg_buffer_restyled
.text:0000000000004255                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004259                 add     rsp, 20h
.text:000000000000425D                 test    r12, r12
.text:0000000000004260                 mov     [r13+0], eax
.text:0000000000004264                 jz      short loc_426F
.text:0000000000004266                 mov     r11, [rsp+68h+var_40]
.text:000000000000426B                 mov     [r12], r11
.text:000000000000426F
.text:000000000000426F loc_426F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000426F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004274                 add     rsp, 38h
.text:0000000000004278                 pop     rbx
.text:0000000000004279                 pop     rbp
.text:000000000000427A                 pop     r12
.text:000000000000427C                 pop     r13
.text:000000000000427E                 pop     r14
.text:0000000000004280                 pop     r15
.text:0000000000004282                 retn
.text:0000000000004282 ; } // starts at 41A0
.text:0000000000004282 quotearg_alloc_mem endp
.text:0000000000004282
.text:0000000000004282 ; ---------------------------------------------------------------------------
.text:0000000000004283                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290
.text:0000000000004290                 public quotearg_alloc
.text:0000000000004290 quotearg_alloc  proc near
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 mov     rcx, rdx
.text:0000000000004293                 xor     edx, edx
.text:0000000000004295                 jmp     quotearg_alloc_mem
.text:0000000000004295 ; } // starts at 4290
.text:0000000000004295 quotearg_alloc  endp
.text:0000000000004295
.text:0000000000004295 ; ---------------------------------------------------------------------------
.text:000000000000429A                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0 ; Attributes: info_from_lumina
.text:00000000000042A0
.text:00000000000042A0 ; void __cdecl quotearg_free()
.text:00000000000042A0                 public quotearg_free
.text:00000000000042A0 quotearg_free   proc near
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 mov     eax, cs:nslots
.text:00000000000042A6                 push    r12
.text:00000000000042A8                 mov     r12, cs:slotvec
.text:00000000000042AF                 push    rbp
.text:00000000000042B0                 push    rbx
.text:00000000000042B1                 cmp     eax, 1
.text:00000000000042B4                 jle     short loc_42E1
.text:00000000000042B6                 sub     eax, 2
.text:00000000000042B9                 lea     rbx, [r12+18h]
.text:00000000000042BE                 shl     rax, 4
.text:00000000000042C2                 lea     rbp, [r12+rax+28h]
.text:00000000000042C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000042D0
.text:00000000000042D0 loc_42D0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000042D0                 mov     rdi, [rbx]      ; ptr
.text:00000000000042D3                 add     rbx, 10h
.text:00000000000042D7                 call    _free
.text:00000000000042DC                 cmp     rbx, rbp
.text:00000000000042DF                 jnz     short loc_42D0
.text:00000000000042E1
.text:00000000000042E1 loc_42E1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000042E1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000042E6                 lea     rbx, slot0
.text:00000000000042ED                 cmp     rdi, rbx
.text:00000000000042F0                 jz      short loc_4309
.text:00000000000042F2                 call    _free
.text:00000000000042F7                 mov     cs:slotvec0, 100h
.text:0000000000004302                 mov     cs:off_208098, rbx
.text:0000000000004309
.text:0000000000004309 loc_4309:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004309                 lea     rbx, slotvec0
.text:0000000000004310                 cmp     r12, rbx
.text:0000000000004313                 jz      short loc_4324
.text:0000000000004315                 mov     rdi, r12        ; ptr
.text:0000000000004318                 call    _free
.text:000000000000431D                 mov     cs:slotvec, rbx
.text:0000000000004324
.text:0000000000004324 loc_4324:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004324                 pop     rbx
.text:0000000000004325                 mov     cs:nslots, 1
.text:000000000000432F                 pop     rbp
.text:0000000000004330                 pop     r12
.text:0000000000004332                 retn
.text:0000000000004332 ; } // starts at 42A0
.text:0000000000004332 quotearg_free   endp
.text:0000000000004332
.text:0000000000004332 ; ---------------------------------------------------------------------------
.text:0000000000004333                 align 20h
.text:0000000000004340
.text:0000000000004340 ; =============== S U B R O U T I N E =======================================
.text:0000000000004340
.text:0000000000004340
.text:0000000000004340                 public quotearg_n
.text:0000000000004340 quotearg_n      proc near
.text:0000000000004340 ; __unwind {
.text:0000000000004340                 lea     rcx, default_quoting_options
.text:0000000000004347                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000434E                 jmp     quotearg_n_options
.text:000000000000434E ; } // starts at 4340
.text:000000000000434E quotearg_n      endp
.text:000000000000434E
.text:000000000000434E ; ---------------------------------------------------------------------------
.text:0000000000004353                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360                 public quotearg_n_mem
.text:0000000000004360 quotearg_n_mem  proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 lea     rcx, default_quoting_options
.text:0000000000004367                 jmp     quotearg_n_options
.text:0000000000004367 ; } // starts at 4360
.text:0000000000004367 quotearg_n_mem  endp
.text:0000000000004367
.text:0000000000004367 ; ---------------------------------------------------------------------------
.text:000000000000436C                 align 10h
.text:0000000000004370
.text:0000000000004370 ; =============== S U B R O U T I N E =======================================
.text:0000000000004370
.text:0000000000004370
.text:0000000000004370                 public quotearg
.text:0000000000004370 quotearg        proc near
.text:0000000000004370 ; __unwind {
.text:0000000000004370                 lea     rcx, default_quoting_options
.text:0000000000004377                 mov     rsi, rdi
.text:000000000000437A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004381                 xor     edi, edi
.text:0000000000004383                 jmp     quotearg_n_options
.text:0000000000004383 ; } // starts at 4370
.text:0000000000004383 quotearg        endp
.text:0000000000004383
.text:0000000000004383 ; ---------------------------------------------------------------------------
.text:0000000000004388                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public quotearg_mem
.text:0000000000004390 quotearg_mem    proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 lea     rcx, default_quoting_options
.text:0000000000004397                 mov     rdx, rsi
.text:000000000000439A                 mov     rsi, rdi
.text:000000000000439D                 xor     edi, edi
.text:000000000000439F                 jmp     quotearg_n_options
.text:000000000000439F ; } // starts at 4390
.text:000000000000439F quotearg_mem    endp
.text:000000000000439F
.text:000000000000439F ; ---------------------------------------------------------------------------
.text:00000000000043A4                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0 ; Attributes: info_from_lumina
.text:00000000000043B0
.text:00000000000043B0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000043B0                 public quotearg_n_style
.text:00000000000043B0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000043B0
.text:00000000000043B0 var_48          = dword ptr -48h
.text:00000000000043B0 var_44          = qword ptr -44h
.text:00000000000043B0 var_3C          = qword ptr -3Ch
.text:00000000000043B0 var_34          = qword ptr -34h
.text:00000000000043B0 var_2C          = qword ptr -2Ch
.text:00000000000043B0 var_24          = qword ptr -24h
.text:00000000000043B0 var_1C          = qword ptr -1Ch
.text:00000000000043B0 var_14          = dword ptr -14h
.text:00000000000043B0 var_10          = qword ptr -10h
.text:00000000000043B0
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 sub     rsp, 48h
.text:00000000000043B4                 mov     rax, rdx
.text:00000000000043B7                 mov     rdx, fs:28h
.text:00000000000043C0                 mov     [rsp+48h+var_10], rdx
.text:00000000000043C5                 xor     edx, edx
.text:00000000000043C7                 cmp     esi, 0Ah
.text:00000000000043CA                 jz      short loc_4434
.text:00000000000043CC                 mov     [rsp+48h+var_48], esi
.text:00000000000043CF                 mov     rcx, rsp
.text:00000000000043D2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043D9                 mov     rsi, rax
.text:00000000000043DC                 mov     [rsp+48h+var_44], 0
.text:00000000000043E5                 mov     [rsp+48h+var_3C], 0
.text:00000000000043EE                 mov     [rsp+48h+var_34], 0
.text:00000000000043F7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004400                 mov     [rsp+48h+var_24], 0
.text:0000000000004409                 mov     [rsp+48h+var_1C], 0
.text:0000000000004412                 mov     [rsp+48h+var_14], 0
.text:000000000000441A                 call    quotearg_n_options
.text:000000000000441F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004424                 xor     rcx, fs:28h
.text:000000000000442D                 jnz     short loc_4439
.text:000000000000442F                 add     rsp, 48h
.text:0000000000004433                 retn
.text:0000000000004434 ; ---------------------------------------------------------------------------
.text:0000000000004434
.text:0000000000004434 loc_4434:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004434                 call    _abort
.text:0000000000004439 ; ---------------------------------------------------------------------------
.text:0000000000004439
.text:0000000000004439 loc_4439:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004439                 call    ___stack_chk_fail
.text:0000000000004439 ; } // starts at 43B0
.text:0000000000004439 quotearg_n_style endp
.text:0000000000004439
.text:0000000000004439 ; ---------------------------------------------------------------------------
.text:000000000000443E                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440 ; Attributes: info_from_lumina
.text:0000000000004440
.text:0000000000004440 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004440                 public quotearg_n_style_mem
.text:0000000000004440 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004440
.text:0000000000004440 var_48          = dword ptr -48h
.text:0000000000004440 var_44          = qword ptr -44h
.text:0000000000004440 var_3C          = qword ptr -3Ch
.text:0000000000004440 var_34          = qword ptr -34h
.text:0000000000004440 var_2C          = qword ptr -2Ch
.text:0000000000004440 var_24          = qword ptr -24h
.text:0000000000004440 var_1C          = qword ptr -1Ch
.text:0000000000004440 var_14          = dword ptr -14h
.text:0000000000004440 var_10          = qword ptr -10h
.text:0000000000004440
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 sub     rsp, 48h
.text:0000000000004444                 mov     rax, rdx
.text:0000000000004447                 mov     rdx, rcx
.text:000000000000444A                 mov     rcx, fs:28h
.text:0000000000004453                 mov     [rsp+48h+var_10], rcx
.text:0000000000004458                 xor     ecx, ecx
.text:000000000000445A                 cmp     esi, 0Ah
.text:000000000000445D                 jz      short loc_44C0
.text:000000000000445F                 mov     [rsp+48h+var_48], esi
.text:0000000000004462                 mov     rcx, rsp
.text:0000000000004465                 mov     rsi, rax
.text:0000000000004468                 mov     [rsp+48h+var_44], 0
.text:0000000000004471                 mov     [rsp+48h+var_3C], 0
.text:000000000000447A                 mov     [rsp+48h+var_34], 0
.text:0000000000004483                 mov     [rsp+48h+var_2C], 0
.text:000000000000448C                 mov     [rsp+48h+var_24], 0
.text:0000000000004495                 mov     [rsp+48h+var_1C], 0
.text:000000000000449E                 mov     [rsp+48h+var_14], 0
.text:00000000000044A6                 call    quotearg_n_options
.text:00000000000044AB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000044B0                 xor     rdx, fs:28h
.text:00000000000044B9                 jnz     short loc_44C5
.text:00000000000044BB                 add     rsp, 48h
.text:00000000000044BF                 retn
.text:00000000000044C0 ; ---------------------------------------------------------------------------
.text:00000000000044C0
.text:00000000000044C0 loc_44C0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000044C0                 call    _abort
.text:00000000000044C5 ; ---------------------------------------------------------------------------
.text:00000000000044C5
.text:00000000000044C5 loc_44C5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000044C5                 call    ___stack_chk_fail
.text:00000000000044C5 ; } // starts at 4440
.text:00000000000044C5 quotearg_n_style_mem endp
.text:00000000000044C5
.text:00000000000044C5 ; ---------------------------------------------------------------------------
.text:00000000000044CA                 align 10h
.text:00000000000044D0
.text:00000000000044D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044D0
.text:00000000000044D0
.text:00000000000044D0                 public quotearg_style
.text:00000000000044D0 quotearg_style  proc near
.text:00000000000044D0 ; __unwind {
.text:00000000000044D0                 mov     rdx, rsi
.text:00000000000044D3                 mov     esi, edi
.text:00000000000044D5                 xor     edi, edi
.text:00000000000044D7                 jmp     quotearg_n_style
.text:00000000000044D7 ; } // starts at 44D0
.text:00000000000044D7 quotearg_style  endp
.text:00000000000044D7
.text:00000000000044D7 ; ---------------------------------------------------------------------------
.text:00000000000044DC                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0
.text:00000000000044E0                 public quotearg_style_mem
.text:00000000000044E0 quotearg_style_mem proc near
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 mov     rcx, rdx
.text:00000000000044E3                 mov     rdx, rsi
.text:00000000000044E6                 mov     esi, edi
.text:00000000000044E8                 xor     edi, edi
.text:00000000000044EA                 jmp     quotearg_n_style_mem
.text:00000000000044EA ; } // starts at 44E0
.text:00000000000044EA quotearg_style_mem endp
.text:00000000000044EA
.text:00000000000044EA ; ---------------------------------------------------------------------------
.text:00000000000044EF                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0 ; Attributes: info_from_lumina
.text:00000000000044F0
.text:00000000000044F0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000044F0                 public quotearg_char_mem
.text:00000000000044F0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000044F0                                         ; quotearg_colon+C↓j ...
.text:00000000000044F0
.text:00000000000044F0 var_48          = xmmword ptr -48h
.text:00000000000044F0 var_38          = xmmword ptr -38h
.text:00000000000044F0 var_28          = xmmword ptr -28h
.text:00000000000044F0 var_18          = qword ptr -18h
.text:00000000000044F0 var_10          = qword ptr -10h
.text:00000000000044F0
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 sub     rsp, 48h
.text:00000000000044F4                 mov     ecx, edx
.text:00000000000044F6                 mov     rax, fs:28h
.text:00000000000044FF                 mov     [rsp+48h+var_10], rax
.text:0000000000004504                 xor     eax, eax
.text:0000000000004506                 mov     rax, cs:qword_208290
.text:000000000000450D                 mov     r8, rsp
.text:0000000000004510                 and     ecx, 1Fh
.text:0000000000004513                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000451B                 mov     [rsp+48h+var_18], rax
.text:0000000000004520                 mov     eax, edx
.text:0000000000004522                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004526                 shr     al, 5
.text:0000000000004529                 movzx   eax, al
.text:000000000000452C                 lea     r9, [r8+rax*4+8]
.text:0000000000004531                 movdqa  xmm0, cs:xmmword_208270
.text:0000000000004539                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000453E                 movdqa  xmm0, cs:xmmword_208280
.text:0000000000004546                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000454B                 mov     edx, [r9]
.text:000000000000454E                 mov     eax, edx
.text:0000000000004550                 shr     eax, cl
.text:0000000000004552                 not     eax
.text:0000000000004554                 and     eax, 1
.text:0000000000004557                 shl     eax, cl
.text:0000000000004559                 mov     rcx, r8
.text:000000000000455C                 xor     eax, edx
.text:000000000000455E                 mov     rdx, rsi
.text:0000000000004561                 mov     rsi, rdi
.text:0000000000004564                 mov     [r9], eax
.text:0000000000004567                 xor     edi, edi
.text:0000000000004569                 call    quotearg_n_options
.text:000000000000456E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004573                 xor     rsi, fs:28h
.text:000000000000457C                 jnz     short loc_4583
.text:000000000000457E                 add     rsp, 48h
.text:0000000000004582                 retn
.text:0000000000004583 ; ---------------------------------------------------------------------------
.text:0000000000004583
.text:0000000000004583 loc_4583:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004583                 call    ___stack_chk_fail
.text:0000000000004583 ; } // starts at 44F0
.text:0000000000004583 quotearg_char_mem endp
.text:0000000000004583
.text:0000000000004583 ; ---------------------------------------------------------------------------
.text:0000000000004588                 align 10h
.text:0000000000004590
.text:0000000000004590 ; =============== S U B R O U T I N E =======================================
.text:0000000000004590
.text:0000000000004590
.text:0000000000004590                 public quotearg_char
.text:0000000000004590 quotearg_char   proc near
.text:0000000000004590 ; __unwind {
.text:0000000000004590                 movsx   edx, sil
.text:0000000000004594                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000459B                 jmp     quotearg_char_mem
.text:000000000000459B ; } // starts at 4590
.text:000000000000459B quotearg_char   endp
.text:000000000000459B
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0
.text:00000000000045A0                 public quotearg_colon
.text:00000000000045A0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 mov     edx, 3Ah ; ':'
.text:00000000000045A5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000045AC                 jmp     quotearg_char_mem
.text:00000000000045AC ; } // starts at 45A0
.text:00000000000045AC quotearg_colon  endp
.text:00000000000045AC
.text:00000000000045AC ; ---------------------------------------------------------------------------
.text:00000000000045B1                 align 20h
.text:00000000000045C0
.text:00000000000045C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045C0
.text:00000000000045C0
.text:00000000000045C0                 public quotearg_colon_mem
.text:00000000000045C0 quotearg_colon_mem proc near
.text:00000000000045C0 ; __unwind {
.text:00000000000045C0                 mov     edx, 3Ah ; ':'
.text:00000000000045C5                 jmp     quotearg_char_mem
.text:00000000000045C5 ; } // starts at 45C0
.text:00000000000045C5 quotearg_colon_mem endp
.text:00000000000045C5
.text:00000000000045C5 ; ---------------------------------------------------------------------------
.text:00000000000045CA                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0 ; Attributes: info_from_lumina
.text:00000000000045D0
.text:00000000000045D0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000045D0                 public quotearg_n_style_colon
.text:00000000000045D0 quotearg_n_style_colon proc near        ; CODE XREF: next_file+9A↑p
.text:00000000000045D0                                         ; next_file+16B↑p ...
.text:00000000000045D0
.text:00000000000045D0 var_48          = dword ptr -48h
.text:00000000000045D0 var_44          = qword ptr -44h
.text:00000000000045D0 var_3C          = qword ptr -3Ch
.text:00000000000045D0 var_34          = qword ptr -34h
.text:00000000000045D0 var_2C          = qword ptr -2Ch
.text:00000000000045D0 var_24          = qword ptr -24h
.text:00000000000045D0 var_1C          = qword ptr -1Ch
.text:00000000000045D0 var_14          = dword ptr -14h
.text:00000000000045D0 var_10          = qword ptr -10h
.text:00000000000045D0
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 sub     rsp, 48h
.text:00000000000045D4                 mov     rax, rdx
.text:00000000000045D7                 mov     rdx, fs:28h
.text:00000000000045E0                 mov     [rsp+48h+var_10], rdx
.text:00000000000045E5                 xor     edx, edx
.text:00000000000045E7                 cmp     esi, 0Ah
.text:00000000000045EA                 jz      short loc_4654
.text:00000000000045EC                 mov     [rsp+48h+var_48], esi
.text:00000000000045EF                 mov     rcx, rsp
.text:00000000000045F2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000045F9                 mov     rsi, rax
.text:00000000000045FC                 mov     [rsp+48h+var_44], 0
.text:0000000000004605                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000460E                 mov     [rsp+48h+var_34], 0
.text:0000000000004617                 mov     [rsp+48h+var_2C], 0
.text:0000000000004620                 mov     [rsp+48h+var_24], 0
.text:0000000000004629                 mov     [rsp+48h+var_1C], 0
.text:0000000000004632                 mov     [rsp+48h+var_14], 0
.text:000000000000463A                 call    quotearg_n_options
.text:000000000000463F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004644                 xor     rcx, fs:28h
.text:000000000000464D                 jnz     short loc_4659
.text:000000000000464F                 add     rsp, 48h
.text:0000000000004653                 retn
.text:0000000000004654 ; ---------------------------------------------------------------------------
.text:0000000000004654
.text:0000000000004654 loc_4654:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004654                 call    _abort
.text:0000000000004659 ; ---------------------------------------------------------------------------
.text:0000000000004659
.text:0000000000004659 loc_4659:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004659                 call    ___stack_chk_fail
.text:0000000000004659 ; } // starts at 45D0
.text:0000000000004659 quotearg_n_style_colon endp
.text:0000000000004659
.text:0000000000004659 ; ---------------------------------------------------------------------------
.text:000000000000465E                 align 20h
.text:0000000000004660
.text:0000000000004660 ; =============== S U B R O U T I N E =======================================
.text:0000000000004660
.text:0000000000004660 ; Attributes: info_from_lumina
.text:0000000000004660
.text:0000000000004660 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004660                 public quotearg_n_custom_mem
.text:0000000000004660 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004660                                         ; quotearg_custom+12↓j ...
.text:0000000000004660
.text:0000000000004660 var_48          = xmmword ptr -48h
.text:0000000000004660 var_38          = xmmword ptr -38h
.text:0000000000004660 var_28          = xmmword ptr -28h
.text:0000000000004660 var_18          = qword ptr -18h
.text:0000000000004660 var_10          = qword ptr -10h
.text:0000000000004660
.text:0000000000004660 ; __unwind {
.text:0000000000004660                 sub     rsp, 48h
.text:0000000000004664                 mov     r9, rcx
.text:0000000000004667                 mov     rcx, cs:qword_208290
.text:000000000000466E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004676                 mov     rax, fs:28h
.text:000000000000467F                 mov     [rsp+48h+var_10], rax
.text:0000000000004684                 xor     eax, eax
.text:0000000000004686                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000468A                 test    rsi, rsi
.text:000000000000468D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004692                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004699                 movdqa  xmm0, cs:xmmword_208270
.text:00000000000046A1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000046A6                 movdqa  xmm0, cs:xmmword_208280
.text:00000000000046AE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000046B3                 jz      short loc_46E7
.text:00000000000046B5                 test    rdx, rdx
.text:00000000000046B8                 jz      short loc_46E7
.text:00000000000046BA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000046BF                 mov     [rsp+48h+var_18], rdx
.text:00000000000046C4                 mov     rcx, rsp
.text:00000000000046C7                 mov     rdx, r8
.text:00000000000046CA                 mov     rsi, r9
.text:00000000000046CD                 call    quotearg_n_options
.text:00000000000046D2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000046D7                 xor     rdi, fs:28h
.text:00000000000046E0                 jnz     short loc_46EC
.text:00000000000046E2                 add     rsp, 48h
.text:00000000000046E6                 retn
.text:00000000000046E7 ; ---------------------------------------------------------------------------
.text:00000000000046E7
.text:00000000000046E7 loc_46E7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000046E7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000046E7                 call    _abort
.text:00000000000046EC ; ---------------------------------------------------------------------------
.text:00000000000046EC
.text:00000000000046EC loc_46EC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000046EC                 call    ___stack_chk_fail
.text:00000000000046EC ; } // starts at 4660
.text:00000000000046EC quotearg_n_custom_mem endp
.text:00000000000046EC
.text:00000000000046EC ; ---------------------------------------------------------------------------
.text:00000000000046F1                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700
.text:0000000000004700                 public quotearg_n_custom
.text:0000000000004700 quotearg_n_custom proc near
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004707                 jmp     quotearg_n_custom_mem
.text:0000000000004707 ; } // starts at 4700
.text:0000000000004707 quotearg_n_custom endp
.text:0000000000004707
.text:0000000000004707 ; ---------------------------------------------------------------------------
.text:000000000000470C                 align 10h
.text:0000000000004710
.text:0000000000004710 ; =============== S U B R O U T I N E =======================================
.text:0000000000004710
.text:0000000000004710
.text:0000000000004710                 public quotearg_custom
.text:0000000000004710 quotearg_custom proc near
.text:0000000000004710 ; __unwind {
.text:0000000000004710                 mov     rcx, rdx
.text:0000000000004713                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000471A                 mov     rdx, rsi
.text:000000000000471D                 mov     rsi, rdi
.text:0000000000004720                 xor     edi, edi
.text:0000000000004722                 jmp     quotearg_n_custom_mem
.text:0000000000004722 ; } // starts at 4710
.text:0000000000004722 quotearg_custom endp
.text:0000000000004722
.text:0000000000004722 ; ---------------------------------------------------------------------------
.text:0000000000004727                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730
.text:0000000000004730                 public quotearg_custom_mem
.text:0000000000004730 quotearg_custom_mem proc near
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 mov     r8, rcx
.text:0000000000004733                 mov     rcx, rdx
.text:0000000000004736                 mov     rdx, rsi
.text:0000000000004739                 mov     rsi, rdi
.text:000000000000473C                 xor     edi, edi
.text:000000000000473E                 jmp     quotearg_n_custom_mem
.text:000000000000473E ; } // starts at 4730
.text:000000000000473E quotearg_custom_mem endp
.text:000000000000473E
.text:000000000000473E ; ---------------------------------------------------------------------------
.text:0000000000004743                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750
.text:0000000000004750                 public quote_n_mem
.text:0000000000004750 quote_n_mem     proc near
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 lea     rcx, quote_quoting_options
.text:0000000000004757                 jmp     quotearg_n_options
.text:0000000000004757 ; } // starts at 4750
.text:0000000000004757 quote_n_mem     endp
.text:0000000000004757
.text:0000000000004757 ; ---------------------------------------------------------------------------
.text:000000000000475C                 align 20h
.text:0000000000004760
.text:0000000000004760 ; =============== S U B R O U T I N E =======================================
.text:0000000000004760
.text:0000000000004760
.text:0000000000004760                 public quote_mem
.text:0000000000004760 quote_mem       proc near
.text:0000000000004760 ; __unwind {
.text:0000000000004760                 lea     rcx, quote_quoting_options
.text:0000000000004767                 mov     rdx, rsi
.text:000000000000476A                 mov     rsi, rdi
.text:000000000000476D                 xor     edi, edi
.text:000000000000476F                 jmp     quotearg_n_options
.text:000000000000476F ; } // starts at 4760
.text:000000000000476F quote_mem       endp
.text:000000000000476F
.text:000000000000476F ; ---------------------------------------------------------------------------
.text:0000000000004774                 align 20h
.text:0000000000004780
.text:0000000000004780 ; =============== S U B R O U T I N E =======================================
.text:0000000000004780
.text:0000000000004780
.text:0000000000004780                 public quote_n
.text:0000000000004780 quote_n         proc near
.text:0000000000004780 ; __unwind {
.text:0000000000004780                 lea     rcx, quote_quoting_options
.text:0000000000004787                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000478E                 jmp     quotearg_n_options
.text:000000000000478E ; } // starts at 4780
.text:000000000000478E quote_n         endp
.text:000000000000478E
.text:000000000000478E ; ---------------------------------------------------------------------------
.text:0000000000004793                 align 20h
.text:00000000000047A0
.text:00000000000047A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047A0
.text:00000000000047A0
.text:00000000000047A0                 public quote
.text:00000000000047A0 quote           proc near               ; CODE XREF: parse_tab_stops+216↑p
.text:00000000000047A0                                         ; parse_tab_stops+26E↑p ...
.text:00000000000047A0 ; __unwind {
.text:00000000000047A0                 lea     rcx, quote_quoting_options
.text:00000000000047A7                 mov     rsi, rdi
.text:00000000000047AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000047B1                 xor     edi, edi
.text:00000000000047B3                 jmp     quotearg_n_options
.text:00000000000047B3 ; } // starts at 47A0
.text:00000000000047B3 quote           endp
.text:00000000000047B3
.text:00000000000047B3 ; ---------------------------------------------------------------------------
.text:00000000000047B8                 align 20h
.text:00000000000047C0
.text:00000000000047C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047C0
.text:00000000000047C0
.text:00000000000047C0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000047C0                 public version_etc_arn
.text:00000000000047C0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4BFB↓j
.text:00000000000047C0                                         ; version_etc_va:loc_4C4B↓p ...
.text:00000000000047C0
.text:00000000000047C0 var_58          = qword ptr -58h
.text:00000000000047C0 var_50          = qword ptr -50h
.text:00000000000047C0 var_48          = qword ptr -48h
.text:00000000000047C0 var_40          = qword ptr -40h
.text:00000000000047C0
.text:00000000000047C0 ; __unwind {
.text:00000000000047C0                 push    r15
.text:00000000000047C2                 push    r14
.text:00000000000047C4                 push    r13
.text:00000000000047C6                 push    r12
.text:00000000000047C8                 mov     r12, r9
.text:00000000000047CB                 push    rbp
.text:00000000000047CC                 push    rbx
.text:00000000000047CD                 mov     rbp, rdi
.text:00000000000047D0                 mov     rbx, r8
.text:00000000000047D3                 sub     rsp, 28h
.text:00000000000047D7                 test    rsi, rsi
.text:00000000000047DA                 jz      loc_48F8
.text:00000000000047E0                 mov     r8, rdx
.text:00000000000047E3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000047EA                 mov     r9, rcx
.text:00000000000047ED                 xor     eax, eax
.text:00000000000047EF                 mov     rcx, rsi
.text:00000000000047F2                 mov     esi, 1
.text:00000000000047F7                 call    ___fprintf_chk
.text:00000000000047FC
.text:00000000000047FC loc_47FC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000047FC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004803                 xor     edi, edi        ; domainname
.text:0000000000004805                 mov     edx, 5          ; category
.text:000000000000480A                 call    _dcgettext
.text:000000000000480F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004816                 mov     rcx, rax
.text:0000000000004819                 mov     r8d, 7E3h
.text:000000000000481F                 mov     esi, 1
.text:0000000000004824                 mov     rdi, rbp
.text:0000000000004827                 xor     eax, eax
.text:0000000000004829                 call    ___fprintf_chk
.text:000000000000482E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004835                 xor     edi, edi        ; domainname
.text:0000000000004837                 mov     edx, 5          ; category
.text:000000000000483C                 call    _dcgettext
.text:0000000000004841                 mov     rsi, rbp        ; stream
.text:0000000000004844                 mov     rdi, rax        ; s
.text:0000000000004847                 call    _fputs_unlocked
.text:000000000000484C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004850                 ja      def_4864        ; jumptable 0000000000004864 default case
.text:0000000000004856                 lea     rdx, jpt_4864
.text:000000000000485D                 movsxd  rax, ds:(jpt_4864 - 6368h)[rdx+r12*4]
.text:0000000000004861                 add     rax, rdx
.text:0000000000004864                 jmp     rax             ; switch jump
.text:0000000000004864 ; ---------------------------------------------------------------------------
.text:0000000000004866                 align 10h
.text:0000000000004870
.text:0000000000004870 loc_4870:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004870                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:0000000000004870                 mov     r9, [rbx+38h]   ; jumptable 0000000000004864 case 8
.text:0000000000004874                 mov     rax, [rbx+10h]
.text:0000000000004878                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000487F                 mov     r8, [rbx+8]
.text:0000000000004883                 mov     edx, 5          ; category
.text:0000000000004888                 xor     edi, edi        ; domainname
.text:000000000000488A                 mov     r13, [rbx+30h]
.text:000000000000488E                 mov     r12, [rbx+28h]
.text:0000000000004892                 mov     [rsp+58h+var_48], r9
.text:0000000000004897                 mov     r15, [rbx+20h]
.text:000000000000489B                 mov     r14, [rbx+18h]
.text:000000000000489F                 mov     [rsp+58h+var_58], rax
.text:00000000000048A3                 mov     [rsp+58h+var_50], r8
.text:00000000000048A8                 mov     rbx, [rbx]
.text:00000000000048AB                 call    _dcgettext
.text:00000000000048B0                 sub     rsp, 8
.text:00000000000048B4
.text:00000000000048B4 loc_48B4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000048B4                 mov     r9, [rsp+60h+var_48]
.text:00000000000048B9                 mov     rdx, rax
.text:00000000000048BC                 mov     rcx, rbx
.text:00000000000048BF                 mov     esi, 1
.text:00000000000048C4                 mov     rdi, rbp
.text:00000000000048C7                 xor     eax, eax
.text:00000000000048C9                 push    r9
.text:00000000000048CB                 push    r13
.text:00000000000048CD                 push    r12
.text:00000000000048CF                 push    r15
.text:00000000000048D1                 push    r14
.text:00000000000048D3                 mov     r9, [rsp+88h+var_58]
.text:00000000000048D8                 mov     r8, [rsp+88h+var_50]
.text:00000000000048DD                 call    ___fprintf_chk
.text:00000000000048E2                 add     rsp, 30h
.text:00000000000048E6
.text:00000000000048E6 loc_48E6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000048E6                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:00000000000048E6                 add     rsp, 28h        ; jumptable 0000000000004864 case 0
.text:00000000000048EA                 pop     rbx
.text:00000000000048EB                 pop     rbp
.text:00000000000048EC                 pop     r12
.text:00000000000048EE                 pop     r13
.text:00000000000048F0                 pop     r14
.text:00000000000048F2                 pop     r15
.text:00000000000048F4                 retn
.text:00000000000048F4 ; ---------------------------------------------------------------------------
.text:00000000000048F5                 align 8
.text:00000000000048F8
.text:00000000000048F8 loc_48F8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000048F8                 mov     r8, rcx
.text:00000000000048FB                 mov     rcx, rdx
.text:00000000000048FE                 lea     rdx, aSS        ; "%s %s\n"
.text:0000000000004905                 mov     esi, 1
.text:000000000000490A                 xor     eax, eax
.text:000000000000490C                 call    ___fprintf_chk
.text:0000000000004911                 jmp     loc_47FC
.text:0000000000004911 ; ---------------------------------------------------------------------------
.text:0000000000004916                 align 20h
.text:0000000000004920
.text:0000000000004920 loc_4920:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004920                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:0000000000004920                 mov     r10, [rbx+40h]  ; jumptable 0000000000004864 case 9
.text:0000000000004924                 mov     r9, [rbx+38h]
.text:0000000000004928                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000492F                 mov     rax, [rbx+10h]
.text:0000000000004933                 mov     r8, [rbx+8]
.text:0000000000004937                 mov     edx, 5          ; category
.text:000000000000493C                 mov     r13, [rbx+30h]
.text:0000000000004940                 mov     r12, [rbx+28h]
.text:0000000000004944                 mov     r15, [rbx+20h]
.text:0000000000004948                 mov     r14, [rbx+18h]
.text:000000000000494C                 mov     rbx, [rbx]
.text:000000000000494F                 mov     [rsp+58h+var_40], r10
.text:0000000000004954                 mov     [rsp+58h+var_48], r9
.text:0000000000004959                 mov     [rsp+58h+var_58], rax
.text:000000000000495D                 mov     [rsp+58h+var_50], r8
.text:0000000000004962
.text:0000000000004962 loc_4962:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004962                 xor     edi, edi        ; domainname
.text:0000000000004964                 call    _dcgettext
.text:0000000000004969                 mov     r10, [rsp+58h+var_40]
.text:000000000000496E                 push    r10
.text:0000000000004970                 jmp     loc_48B4
.text:0000000000004970 ; ---------------------------------------------------------------------------
.text:0000000000004975                 align 8
.text:0000000000004978
.text:0000000000004978 loc_4978:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004978                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:0000000000004978                 mov     rbx, [rbx]      ; jumptable 0000000000004864 case 1
.text:000000000000497B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004982                 mov     edx, 5          ; category
.text:0000000000004987                 xor     edi, edi        ; domainname
.text:0000000000004989                 call    _dcgettext
.text:000000000000498E                 add     rsp, 28h
.text:0000000000004992                 mov     rcx, rbx
.text:0000000000004995                 mov     rdi, rbp
.text:0000000000004998                 pop     rbx
.text:0000000000004999                 pop     rbp
.text:000000000000499A                 pop     r12
.text:000000000000499C                 pop     r13
.text:000000000000499E                 pop     r14
.text:00000000000049A0                 pop     r15
.text:00000000000049A2                 mov     rdx, rax
.text:00000000000049A5                 mov     esi, 1
.text:00000000000049AA                 xor     eax, eax
.text:00000000000049AC                 jmp     ___fprintf_chk
.text:00000000000049AC ; ---------------------------------------------------------------------------
.text:00000000000049B1                 align 8
.text:00000000000049B8
.text:00000000000049B8 loc_49B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000049B8                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:00000000000049B8                 mov     r12, [rbx+8]    ; jumptable 0000000000004864 case 2
.text:00000000000049BC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000049C3                 mov     rbx, [rbx]
.text:00000000000049C6                 mov     edx, 5          ; category
.text:00000000000049CB                 xor     edi, edi        ; domainname
.text:00000000000049CD                 call    _dcgettext
.text:00000000000049D2                 add     rsp, 28h
.text:00000000000049D6                 mov     r8, r12
.text:00000000000049D9                 mov     rcx, rbx
.text:00000000000049DC                 mov     rdi, rbp
.text:00000000000049DF                 mov     rdx, rax
.text:00000000000049E2                 mov     esi, 1
.text:00000000000049E7                 pop     rbx
.text:00000000000049E8                 pop     rbp
.text:00000000000049E9                 pop     r12
.text:00000000000049EB                 pop     r13
.text:00000000000049ED                 pop     r14
.text:00000000000049EF                 pop     r15
.text:00000000000049F1                 xor     eax, eax
.text:00000000000049F3                 jmp     ___fprintf_chk
.text:00000000000049F3 ; ---------------------------------------------------------------------------
.text:00000000000049F8                 align 20h
.text:0000000000004A00
.text:0000000000004A00 loc_4A00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004A00                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:0000000000004A00                 mov     r13, [rbx+10h]  ; jumptable 0000000000004864 case 3
.text:0000000000004A04                 mov     r12, [rbx+8]
.text:0000000000004A08                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004A0F                 mov     rbx, [rbx]
.text:0000000000004A12                 mov     edx, 5          ; category
.text:0000000000004A17                 xor     edi, edi        ; domainname
.text:0000000000004A19                 call    _dcgettext
.text:0000000000004A1E                 add     rsp, 28h
.text:0000000000004A22                 mov     r9, r13
.text:0000000000004A25                 mov     r8, r12
.text:0000000000004A28                 mov     rcx, rbx
.text:0000000000004A2B                 mov     rdi, rbp
.text:0000000000004A2E                 mov     rdx, rax
.text:0000000000004A31                 pop     rbx
.text:0000000000004A32                 pop     rbp
.text:0000000000004A33                 pop     r12
.text:0000000000004A35                 pop     r13
.text:0000000000004A37                 pop     r14
.text:0000000000004A39                 pop     r15
.text:0000000000004A3B                 mov     esi, 1
.text:0000000000004A40                 xor     eax, eax
.text:0000000000004A42                 jmp     ___fprintf_chk
.text:0000000000004A42 ; ---------------------------------------------------------------------------
.text:0000000000004A47                 align 10h
.text:0000000000004A50
.text:0000000000004A50 loc_4A50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004A50                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:0000000000004A50                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004864 case 4
.text:0000000000004A57                 mov     edx, 5          ; category
.text:0000000000004A5C                 xor     edi, edi        ; domainname
.text:0000000000004A5E                 mov     r14, [rbx+18h]
.text:0000000000004A62                 mov     r13, [rbx+10h]
.text:0000000000004A66                 mov     r12, [rbx+8]
.text:0000000000004A6A                 mov     rbx, [rbx]
.text:0000000000004A6D                 call    _dcgettext
.text:0000000000004A72                 sub     rsp, 8
.text:0000000000004A76
.text:0000000000004A76 loc_4A76:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004A76                 push    r14
.text:0000000000004A78                 mov     rdx, rax
.text:0000000000004A7B                 mov     r9, r13
.text:0000000000004A7E                 mov     r8, r12
.text:0000000000004A81                 mov     rcx, rbx
.text:0000000000004A84                 mov     rdi, rbp
.text:0000000000004A87                 mov     esi, 1
.text:0000000000004A8C                 xor     eax, eax
.text:0000000000004A8E                 call    ___fprintf_chk
.text:0000000000004A93                 pop     rax
.text:0000000000004A94                 pop     rdx
.text:0000000000004A95                 add     rsp, 28h
.text:0000000000004A99                 pop     rbx
.text:0000000000004A9A                 pop     rbp
.text:0000000000004A9B                 pop     r12
.text:0000000000004A9D                 pop     r13
.text:0000000000004A9F                 pop     r14
.text:0000000000004AA1                 pop     r15
.text:0000000000004AA3                 retn
.text:0000000000004AA3 ; ---------------------------------------------------------------------------
.text:0000000000004AA4                 align 8
.text:0000000000004AA8
.text:0000000000004AA8 loc_4AA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004AA8                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:0000000000004AA8                 mov     r15, [rbx+20h]  ; jumptable 0000000000004864 case 5
.text:0000000000004AAC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004AB3                 mov     edx, 5          ; category
.text:0000000000004AB8                 xor     edi, edi        ; domainname
.text:0000000000004ABA                 mov     r14, [rbx+18h]
.text:0000000000004ABE                 mov     r13, [rbx+10h]
.text:0000000000004AC2                 mov     r12, [rbx+8]
.text:0000000000004AC6                 mov     rbx, [rbx]
.text:0000000000004AC9                 call    _dcgettext
.text:0000000000004ACE                 push    r15
.text:0000000000004AD0                 jmp     short loc_4A76
.text:0000000000004AD0 ; ---------------------------------------------------------------------------
.text:0000000000004AD2                 align 8
.text:0000000000004AD8
.text:0000000000004AD8 loc_4AD8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004AD8                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:0000000000004AD8                 mov     r8, [rbx+8]     ; jumptable 0000000000004864 case 6
.text:0000000000004ADC                 mov     r12, [rbx+28h]
.text:0000000000004AE0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004AE7                 mov     r15, [rbx+20h]
.text:0000000000004AEB                 mov     r14, [rbx+18h]
.text:0000000000004AEF                 mov     edx, 5          ; category
.text:0000000000004AF4                 mov     r13, [rbx+10h]
.text:0000000000004AF8                 xor     edi, edi        ; domainname
.text:0000000000004AFA                 mov     rbx, [rbx]
.text:0000000000004AFD                 mov     [rsp+58h+var_58], r8
.text:0000000000004B01                 call    _dcgettext
.text:0000000000004B06                 sub     rsp, 8
.text:0000000000004B0A                 mov     r9, r13
.text:0000000000004B0D                 push    r12
.text:0000000000004B0F                 push    r15
.text:0000000000004B11                 push    r14
.text:0000000000004B13
.text:0000000000004B13 loc_4B13:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004B13                 mov     r8, [rsp+78h+var_58]
.text:0000000000004B18                 mov     rcx, rbx
.text:0000000000004B1B                 mov     rdx, rax
.text:0000000000004B1E                 mov     rdi, rbp
.text:0000000000004B21                 mov     esi, 1
.text:0000000000004B26                 xor     eax, eax
.text:0000000000004B28                 call    ___fprintf_chk
.text:0000000000004B2D                 add     rsp, 20h
.text:0000000000004B31                 add     rsp, 28h
.text:0000000000004B35                 pop     rbx
.text:0000000000004B36                 pop     rbp
.text:0000000000004B37                 pop     r12
.text:0000000000004B39                 pop     r13
.text:0000000000004B3B                 pop     r14
.text:0000000000004B3D                 pop     r15
.text:0000000000004B3F                 retn
.text:0000000000004B40 ; ---------------------------------------------------------------------------
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B40                                         ; DATA XREF: .rodata:jpt_4864↓o
.text:0000000000004B40                 mov     r9, [rbx+10h]   ; jumptable 0000000000004864 case 7
.text:0000000000004B44                 mov     r13, [rbx+30h]
.text:0000000000004B48                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004B4F                 mov     r12, [rbx+28h]
.text:0000000000004B53                 mov     r15, [rbx+20h]
.text:0000000000004B57                 mov     edx, 5          ; category
.text:0000000000004B5C                 mov     r14, [rbx+18h]
.text:0000000000004B60                 mov     r8, [rbx+8]
.text:0000000000004B64                 xor     edi, edi        ; domainname
.text:0000000000004B66                 mov     [rsp+58h+var_50], r9
.text:0000000000004B6B                 mov     rbx, [rbx]
.text:0000000000004B6E                 mov     [rsp+58h+var_58], r8
.text:0000000000004B72                 call    _dcgettext
.text:0000000000004B77                 push    r13
.text:0000000000004B79                 push    r12
.text:0000000000004B7B                 push    r15
.text:0000000000004B7D                 push    r14
.text:0000000000004B7F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004B84                 jmp     short loc_4B13
.text:0000000000004B84 ; ---------------------------------------------------------------------------
.text:0000000000004B86                 align 10h
.text:0000000000004B90
.text:0000000000004B90 def_4864:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004B90                 mov     r10, [rbx+40h]  ; jumptable 0000000000004864 default case
.text:0000000000004B94                 mov     r9, [rbx+38h]
.text:0000000000004B98                 mov     edx, 5
.text:0000000000004B9D                 mov     rax, [rbx+10h]
.text:0000000000004BA1                 mov     r8, [rbx+8]
.text:0000000000004BA5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004BAC                 mov     r13, [rbx+30h]
.text:0000000000004BB0                 mov     r12, [rbx+28h]
.text:0000000000004BB4                 mov     r15, [rbx+20h]
.text:0000000000004BB8                 mov     r14, [rbx+18h]
.text:0000000000004BBC                 mov     [rsp+58h+var_40], r10
.text:0000000000004BC1                 mov     [rsp+58h+var_48], r9
.text:0000000000004BC6                 mov     [rsp+58h+var_58], rax
.text:0000000000004BCA                 mov     [rsp+58h+var_50], r8
.text:0000000000004BCF                 mov     rbx, [rbx]
.text:0000000000004BD2                 jmp     loc_4962
.text:0000000000004BD2 ; } // starts at 47C0
.text:0000000000004BD2 version_etc_arn endp
.text:0000000000004BD2
.text:0000000000004BD2 ; ---------------------------------------------------------------------------
.text:0000000000004BD7                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BE0
.text:0000000000004BE0 ; Attributes: info_from_lumina
.text:0000000000004BE0
.text:0000000000004BE0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004BE0                 public version_etc_ar
.text:0000000000004BE0 version_etc_ar  proc near
.text:0000000000004BE0 ; __unwind {
.text:0000000000004BE0                 xor     r9d, r9d
.text:0000000000004BE3                 cmp     qword ptr [r8], 0
.text:0000000000004BE7                 jz      short loc_4BFB
.text:0000000000004BE9                 nop     dword ptr [rax+00000000h]
.text:0000000000004BF0
.text:0000000000004BF0 loc_4BF0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004BF0                 add     r9, 1
.text:0000000000004BF4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004BF9                 jnz     short loc_4BF0
.text:0000000000004BFB
.text:0000000000004BFB loc_4BFB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004BFB                 jmp     version_etc_arn
.text:0000000000004BFB ; } // starts at 4BE0
.text:0000000000004BFB version_etc_ar  endp
.text:0000000000004BFB
.text:0000000000004C00
.text:0000000000004C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C00
.text:0000000000004C00 ; Attributes: info_from_lumina
.text:0000000000004C00
.text:0000000000004C00 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004C00                 public version_etc_va
.text:0000000000004C00 version_etc_va  proc near
.text:0000000000004C00
.text:0000000000004C00 authtab         = qword ptr -68h
.text:0000000000004C00 var_10          = qword ptr -10h
.text:0000000000004C00
.text:0000000000004C00 ; __unwind {
.text:0000000000004C00                 sub     rsp, 68h
.text:0000000000004C04                 mov     r10, r8
.text:0000000000004C07                 xor     r9d, r9d
.text:0000000000004C0A                 mov     rax, fs:28h
.text:0000000000004C13                 mov     [rsp+68h+var_10], rax
.text:0000000000004C18                 xor     eax, eax
.text:0000000000004C1A                 mov     r8, rsp
.text:0000000000004C1D                 nop     dword ptr [rax]
.text:0000000000004C20
.text:0000000000004C20 loc_4C20:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004C20                 mov     eax, [r10]
.text:0000000000004C23                 cmp     eax, 2Fh ; '/'
.text:0000000000004C26                 ja      short loc_4C6A
.text:0000000000004C28                 mov     r11d, eax
.text:0000000000004C2B                 add     r11, [r10+10h]
.text:0000000000004C2F                 add     eax, 8
.text:0000000000004C32                 mov     [r10], eax
.text:0000000000004C35
.text:0000000000004C35 loc_4C35:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004C35                 mov     rax, [r11]
.text:0000000000004C38                 test    rax, rax
.text:0000000000004C3B                 mov     [r8+r9*8], rax
.text:0000000000004C3F                 jz      short loc_4C4B
.text:0000000000004C41                 add     r9, 1
.text:0000000000004C45                 cmp     r9, 0Ah
.text:0000000000004C49                 jnz     short loc_4C20
.text:0000000000004C4B
.text:0000000000004C4B loc_4C4B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004C4B                 call    version_etc_arn
.text:0000000000004C50                 mov     rax, [rsp+68h+var_10]
.text:0000000000004C55                 xor     rax, fs:28h
.text:0000000000004C5E                 jnz     short loc_4C65
.text:0000000000004C60                 add     rsp, 68h
.text:0000000000004C64                 retn
.text:0000000000004C65 ; ---------------------------------------------------------------------------
.text:0000000000004C65
.text:0000000000004C65 loc_4C65:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004C65                 call    ___stack_chk_fail
.text:0000000000004C6A ; ---------------------------------------------------------------------------
.text:0000000000004C6A
.text:0000000000004C6A loc_4C6A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004C6A                 mov     r11, [r10+8]
.text:0000000000004C6E                 lea     rax, [r11+8]
.text:0000000000004C72                 mov     [r10+8], rax
.text:0000000000004C76                 jmp     short loc_4C35
.text:0000000000004C76 ; } // starts at 4C00
.text:0000000000004C76 version_etc_va  endp
.text:0000000000004C76
.text:0000000000004C76 ; ---------------------------------------------------------------------------
.text:0000000000004C78                 align 20h
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80 ; Attributes: info_from_lumina
.text:0000000000004C80
.text:0000000000004C80 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004C80                 public version_etc
.text:0000000000004C80 version_etc     proc near               ; CODE XREF: main+D4↑p
.text:0000000000004C80
.text:0000000000004C80 var_C0          = dword ptr -0C0h
.text:0000000000004C80 var_B8          = qword ptr -0B8h
.text:0000000000004C80 var_B0          = qword ptr -0B0h
.text:0000000000004C80 var_A8          = byte ptr -0A8h
.text:0000000000004C80 var_50          = qword ptr -50h
.text:0000000000004C80 var_48          = byte ptr -48h
.text:0000000000004C80 var_28          = qword ptr -28h
.text:0000000000004C80 var_20          = qword ptr -20h
.text:0000000000004C80 arg_0           = byte ptr  8
.text:0000000000004C80
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 push    rbp
.text:0000000000004C81                 push    rbx
.text:0000000000004C82                 mov     r10d, 20h ; ' '
.text:0000000000004C88                 xor     r11d, r11d
.text:0000000000004C8B                 sub     rsp, 0B8h
.text:0000000000004C92                 mov     rax, fs:28h
.text:0000000000004C9B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004CA0                 xor     eax, eax
.text:0000000000004CA2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004CAA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004CB2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004CBA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004CBF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004CC7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004CCF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004CD4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004CDC                 xor     r9d, r9d
.text:0000000000004CDF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004CE4                 mov     rbp, rax
.text:0000000000004CE7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004CF0
.text:0000000000004CF0 loc_4CF0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004CF0                 cmp     r10d, 2Fh ; '/'
.text:0000000000004CF4                 ja      short loc_4D4C
.text:0000000000004CF6                 mov     eax, r10d
.text:0000000000004CF9                 mov     r11d, 1
.text:0000000000004CFF                 add     r10d, 8
.text:0000000000004D03                 add     rax, rbp
.text:0000000000004D06
.text:0000000000004D06 loc_4D06:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004D06                 mov     rax, [rax]
.text:0000000000004D09                 test    rax, rax
.text:0000000000004D0C                 mov     [r8+r9*8], rax
.text:0000000000004D10                 jz      short loc_4D1C
.text:0000000000004D12                 add     r9, 1
.text:0000000000004D16                 cmp     r9, 0Ah
.text:0000000000004D1A                 jnz     short loc_4CF0
.text:0000000000004D1C
.text:0000000000004D1C loc_4D1C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000004D1C                 test    r11b, r11b
.text:0000000000004D1F                 jnz     short loc_4D45
.text:0000000000004D21
.text:0000000000004D21 loc_4D21:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004D21                 call    version_etc_arn
.text:0000000000004D26                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000004D2B                 xor     rax, fs:28h
.text:0000000000004D34                 jnz     short loc_4D40
.text:0000000000004D36                 add     rsp, 0B8h
.text:0000000000004D3D                 pop     rbx
.text:0000000000004D3E                 pop     rbp
.text:0000000000004D3F                 retn
.text:0000000000004D40 ; ---------------------------------------------------------------------------
.text:0000000000004D40
.text:0000000000004D40 loc_4D40:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004D40                 call    ___stack_chk_fail
.text:0000000000004D45 ; ---------------------------------------------------------------------------
.text:0000000000004D45
.text:0000000000004D45 loc_4D45:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004D45                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000004D4A                 jmp     short loc_4D21
.text:0000000000004D4C ; ---------------------------------------------------------------------------
.text:0000000000004D4C
.text:0000000000004D4C loc_4D4C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000004D4C                 mov     rax, rbx
.text:0000000000004D4F                 add     rbx, 8
.text:0000000000004D53                 jmp     short loc_4D06
.text:0000000000004D53 ; } // starts at 4C80
.text:0000000000004D53 version_etc     endp
.text:0000000000004D53
.text:0000000000004D53 ; ---------------------------------------------------------------------------
.text:0000000000004D55                 align 20h
.text:0000000000004D60
.text:0000000000004D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D60
.text:0000000000004D60 ; Attributes: info_from_lumina
.text:0000000000004D60
.text:0000000000004D60 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004D60                 public emit_bug_reporting_address
.text:0000000000004D60 emit_bug_reporting_address proc near
.text:0000000000004D60 ; __unwind {
.text:0000000000004D60                 push    rbx
.text:0000000000004D61                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004D68                 mov     edx, 5          ; category
.text:0000000000004D6D                 xor     edi, edi        ; domainname
.text:0000000000004D6F                 call    _dcgettext
.text:0000000000004D74                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004D7B                 mov     rsi, rax
.text:0000000000004D7E                 mov     edi, 1
.text:0000000000004D83                 xor     eax, eax
.text:0000000000004D85                 call    ___printf_chk
.text:0000000000004D8A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004D91                 mov     edx, 5          ; category
.text:0000000000004D96                 xor     edi, edi        ; domainname
.text:0000000000004D98                 call    _dcgettext
.text:0000000000004D9D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004DA4                 lea     rdx, unk_5481
.text:0000000000004DAB                 mov     rsi, rax
.text:0000000000004DAE                 mov     edi, 1
.text:0000000000004DB3                 xor     eax, eax
.text:0000000000004DB5                 call    ___printf_chk
.text:0000000000004DBA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004DC1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004DC8                 xor     edi, edi        ; domainname
.text:0000000000004DCA                 mov     edx, 5          ; category
.text:0000000000004DCF                 call    _dcgettext
.text:0000000000004DD4                 mov     rsi, rbx        ; stream
.text:0000000000004DD7                 mov     rdi, rax        ; s
.text:0000000000004DDA                 pop     rbx
.text:0000000000004DDB                 jmp     _fputs_unlocked
.text:0000000000004DDB ; } // starts at 4D60
.text:0000000000004DDB emit_bug_reporting_address endp
.text:0000000000004DDB
.text:0000000000004DE0
.text:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DE0
.text:0000000000004DE0
.text:0000000000004DE0                 public xmalloc
.text:0000000000004DE0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004DE0                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004DE0 ; __unwind {
.text:0000000000004DE0                 push    rbx
.text:0000000000004DE1                 mov     rbx, rdi
.text:0000000000004DE4                 call    _malloc
.text:0000000000004DE9                 test    rax, rax
.text:0000000000004DEC                 jnz     short loc_4DF3
.text:0000000000004DEE                 test    rbx, rbx
.text:0000000000004DF1                 jnz     short loc_4DF5
.text:0000000000004DF3
.text:0000000000004DF3 loc_4DF3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004DF3                 pop     rbx
.text:0000000000004DF4                 retn
.text:0000000000004DF5 ; ---------------------------------------------------------------------------
.text:0000000000004DF5
.text:0000000000004DF5 loc_4DF5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004DF5                 call    xalloc_die
.text:0000000000004DF5 ; } // starts at 4DE0
.text:0000000000004DF5 xmalloc         endp
.text:0000000000004DF5
.text:0000000000004DF5 ; ---------------------------------------------------------------------------
.text:0000000000004DFA                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00 ; Attributes: info_from_lumina
.text:0000000000004E00
.text:0000000000004E00 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004E00                 public xnmalloc
.text:0000000000004E00 xnmalloc        proc near
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 mov     rax, rdi
.text:0000000000004E03                 mul     rsi
.text:0000000000004E06                 mov     rdi, rax
.text:0000000000004E09                 seto    al
.text:0000000000004E0C                 test    rdi, rdi
.text:0000000000004E0F                 js      short loc_4E1B
.text:0000000000004E11                 movzx   eax, al
.text:0000000000004E14                 test    rax, rax
.text:0000000000004E17                 jnz     short loc_4E1B
.text:0000000000004E19                 jmp     short xmalloc
.text:0000000000004E1B ; ---------------------------------------------------------------------------
.text:0000000000004E1B
.text:0000000000004E1B loc_4E1B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004E1B                                         ; xnmalloc+17↑j
.text:0000000000004E1B                 sub     rsp, 8
.text:0000000000004E1F                 call    xalloc_die
.text:0000000000004E1F ; } // starts at 4E00
.text:0000000000004E1F xnmalloc        endp
.text:0000000000004E1F
.text:0000000000004E1F ; ---------------------------------------------------------------------------
.text:0000000000004E24                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30
.text:0000000000004E30                 public xcharalloc
.text:0000000000004E30 xcharalloc      proc near
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 jmp     short xmalloc
.text:0000000000004E30 ; } // starts at 4E30
.text:0000000000004E30 xcharalloc      endp
.text:0000000000004E30
.text:0000000000004E30 ; ---------------------------------------------------------------------------
.text:0000000000004E32                 align 20h
.text:0000000000004E40
.text:0000000000004E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E40
.text:0000000000004E40 ; Attributes: info_from_lumina
.text:0000000000004E40
.text:0000000000004E40 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004E40                 public xrealloc
.text:0000000000004E40 xrealloc        proc near               ; CODE XREF: add_tab_stop+BC↑p
.text:0000000000004E40                                         ; quotearg_n_options+6E↑p ...
.text:0000000000004E40 ; __unwind {
.text:0000000000004E40                 test    rsi, rsi
.text:0000000000004E43                 push    rbx
.text:0000000000004E44                 mov     rbx, rsi
.text:0000000000004E47                 jnz     short loc_4E4E
.text:0000000000004E49                 test    rdi, rdi
.text:0000000000004E4C                 jnz     short loc_4E68
.text:0000000000004E4E
.text:0000000000004E4E loc_4E4E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004E4E                 mov     rsi, rbx        ; size
.text:0000000000004E51                 call    _realloc
.text:0000000000004E56                 test    rax, rax
.text:0000000000004E59                 jnz     short loc_4E60
.text:0000000000004E5B                 test    rbx, rbx
.text:0000000000004E5E                 jnz     short loc_4E71
.text:0000000000004E60
.text:0000000000004E60 loc_4E60:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004E60                 pop     rbx
.text:0000000000004E61                 retn
.text:0000000000004E61 ; ---------------------------------------------------------------------------
.text:0000000000004E62                 align 8
.text:0000000000004E68
.text:0000000000004E68 loc_4E68:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004E68                 call    _free
.text:0000000000004E6D                 xor     eax, eax
.text:0000000000004E6F                 pop     rbx
.text:0000000000004E70                 retn
.text:0000000000004E71 ; ---------------------------------------------------------------------------
.text:0000000000004E71
.text:0000000000004E71 loc_4E71:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004E71                 call    xalloc_die
.text:0000000000004E71 ; } // starts at 4E40
.text:0000000000004E71 xrealloc        endp
.text:0000000000004E71
.text:0000000000004E71 ; ---------------------------------------------------------------------------
.text:0000000000004E76                 align 20h
.text:0000000000004E80
.text:0000000000004E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E80
.text:0000000000004E80 ; Attributes: info_from_lumina
.text:0000000000004E80
.text:0000000000004E80 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004E80                 public xnrealloc
.text:0000000000004E80 xnrealloc       proc near
.text:0000000000004E80 ; __unwind {
.text:0000000000004E80                 mov     rax, rsi
.text:0000000000004E83                 mul     rdx
.text:0000000000004E86                 mov     rsi, rax
.text:0000000000004E89                 seto    al
.text:0000000000004E8C                 test    rsi, rsi
.text:0000000000004E8F                 js      short loc_4E9B
.text:0000000000004E91                 movzx   eax, al
.text:0000000000004E94                 test    rax, rax
.text:0000000000004E97                 jnz     short loc_4E9B
.text:0000000000004E99                 jmp     short xrealloc
.text:0000000000004E9B ; ---------------------------------------------------------------------------
.text:0000000000004E9B
.text:0000000000004E9B loc_4E9B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004E9B                                         ; xnrealloc+17↑j
.text:0000000000004E9B                 sub     rsp, 8
.text:0000000000004E9F                 call    xalloc_die
.text:0000000000004E9F ; } // starts at 4E80
.text:0000000000004E9F xnrealloc       endp
.text:0000000000004E9F
.text:0000000000004E9F ; ---------------------------------------------------------------------------
.text:0000000000004EA4                 align 10h
.text:0000000000004EB0
.text:0000000000004EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EB0
.text:0000000000004EB0 ; Attributes: info_from_lumina
.text:0000000000004EB0
.text:0000000000004EB0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004EB0                 public x2nrealloc
.text:0000000000004EB0 x2nrealloc      proc near
.text:0000000000004EB0 ; __unwind {
.text:0000000000004EB0                 test    rdi, rdi
.text:0000000000004EB3                 mov     r9, rdx
.text:0000000000004EB6                 mov     rcx, [rsi]
.text:0000000000004EB9                 jz      short loc_4EF0
.text:0000000000004EBB                 xor     edx, edx
.text:0000000000004EBD                 mov     rax, 5555555555555554h
.text:0000000000004EC7                 div     r9
.text:0000000000004ECA                 cmp     rax, rcx
.text:0000000000004ECD                 jbe     short loc_4F0B
.text:0000000000004ECF                 mov     rax, rcx
.text:0000000000004ED2                 shr     rax, 1
.text:0000000000004ED5                 lea     rcx, [rax+rcx+1]
.text:0000000000004EDA
.text:0000000000004EDA loc_4EDA:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000004EDA                 mov     [rsi], rcx
.text:0000000000004EDD                 imul    rcx, r9
.text:0000000000004EE1                 mov     rsi, rcx
.text:0000000000004EE4                 jmp     xrealloc
.text:0000000000004EE4 ; ---------------------------------------------------------------------------
.text:0000000000004EE9                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 loc_4EF0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004EF0                 test    rcx, rcx
.text:0000000000004EF3                 jz      short loc_4F18
.text:0000000000004EF5
.text:0000000000004EF5 loc_4EF5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004EF5                 mov     rax, rcx
.text:0000000000004EF8                 mul     r9
.text:0000000000004EFB                 seto    dl
.text:0000000000004EFE                 test    rax, rax
.text:0000000000004F01                 movzx   edx, dl
.text:0000000000004F04                 js      short loc_4F0B
.text:0000000000004F06                 test    rdx, rdx
.text:0000000000004F09                 jz      short loc_4EDA
.text:0000000000004F0B
.text:0000000000004F0B loc_4F0B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000004F0B                                         ; x2nrealloc+54↑j
.text:0000000000004F0B                 sub     rsp, 8
.text:0000000000004F0F                 call    xalloc_die
.text:0000000000004F0F ; ---------------------------------------------------------------------------
.text:0000000000004F14                 align 8
.text:0000000000004F18
.text:0000000000004F18 loc_4F18:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004F18                 xor     edx, edx
.text:0000000000004F1A                 mov     eax, 80h
.text:0000000000004F1F                 xor     r8d, r8d
.text:0000000000004F22                 div     r9
.text:0000000000004F25                 test    rax, rax
.text:0000000000004F28                 setz    r8b
.text:0000000000004F2C                 lea     rcx, [r8+rax]
.text:0000000000004F30                 jmp     short loc_4EF5
.text:0000000000004F30 ; } // starts at 4EB0
.text:0000000000004F30 x2nrealloc      endp
.text:0000000000004F30
.text:0000000000004F30 ; ---------------------------------------------------------------------------
.text:0000000000004F32                 align 20h
.text:0000000000004F40
.text:0000000000004F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F40
.text:0000000000004F40 ; Attributes: info_from_lumina
.text:0000000000004F40
.text:0000000000004F40 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004F40                 public x2realloc
.text:0000000000004F40 x2realloc       proc near
.text:0000000000004F40 ; __unwind {
.text:0000000000004F40                 test    rdi, rdi
.text:0000000000004F43                 mov     rax, [rsi]
.text:0000000000004F46                 jz      short loc_4F70
.text:0000000000004F48                 mov     rdx, 5555555555555553h
.text:0000000000004F52                 cmp     rax, rdx
.text:0000000000004F55                 ja      short loc_4F81
.text:0000000000004F57                 mov     rdx, rax
.text:0000000000004F5A                 shr     rdx, 1
.text:0000000000004F5D                 lea     rax, [rdx+rax+1]
.text:0000000000004F62
.text:0000000000004F62 loc_4F62:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004F62                 mov     [rsi], rax
.text:0000000000004F65                 mov     rsi, rax
.text:0000000000004F68                 jmp     xrealloc
.text:0000000000004F68 ; ---------------------------------------------------------------------------
.text:0000000000004F6D                 align 10h
.text:0000000000004F70
.text:0000000000004F70 loc_4F70:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004F70                 test    rax, rax
.text:0000000000004F73                 mov     edx, 80h
.text:0000000000004F78                 cmovz   rax, rdx
.text:0000000000004F7C                 test    rax, rax
.text:0000000000004F7F                 jns     short loc_4F62
.text:0000000000004F81
.text:0000000000004F81 loc_4F81:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004F81                 sub     rsp, 8
.text:0000000000004F85                 call    xalloc_die
.text:0000000000004F85 ; } // starts at 4F40
.text:0000000000004F85 x2realloc       endp
.text:0000000000004F85
.text:0000000000004F85 ; ---------------------------------------------------------------------------
.text:0000000000004F8A                 align 10h
.text:0000000000004F90
.text:0000000000004F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F90
.text:0000000000004F90
.text:0000000000004F90 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004F90                 public xzalloc
.text:0000000000004F90 xzalloc         proc near
.text:0000000000004F90 ; __unwind {
.text:0000000000004F90                 push    rbx
.text:0000000000004F91                 mov     rbx, rdi
.text:0000000000004F94                 call    xmalloc
.text:0000000000004F99                 mov     rdx, rbx        ; n
.text:0000000000004F9C                 xor     esi, esi        ; c
.text:0000000000004F9E                 mov     rdi, rax        ; s
.text:0000000000004FA1                 pop     rbx
.text:0000000000004FA2                 jmp     _memset
.text:0000000000004FA2 ; } // starts at 4F90
.text:0000000000004FA2 xzalloc         endp
.text:0000000000004FA2
.text:0000000000004FA2 ; ---------------------------------------------------------------------------
.text:0000000000004FA7                 align 10h
.text:0000000000004FB0
.text:0000000000004FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FB0
.text:0000000000004FB0 ; Attributes: info_from_lumina
.text:0000000000004FB0
.text:0000000000004FB0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004FB0                 public xcalloc
.text:0000000000004FB0 xcalloc         proc near
.text:0000000000004FB0 ; __unwind {
.text:0000000000004FB0                 mov     rax, rdi
.text:0000000000004FB3                 sub     rsp, 8
.text:0000000000004FB7                 mul     rsi
.text:0000000000004FBA                 seto    dl
.text:0000000000004FBD                 test    rax, rax
.text:0000000000004FC0                 js      short loc_4FD9
.text:0000000000004FC2                 movzx   edx, dl
.text:0000000000004FC5                 test    rdx, rdx
.text:0000000000004FC8                 jnz     short loc_4FD9
.text:0000000000004FCA                 call    _calloc
.text:0000000000004FCF                 test    rax, rax
.text:0000000000004FD2                 jz      short loc_4FD9
.text:0000000000004FD4                 add     rsp, 8
.text:0000000000004FD8                 retn
.text:0000000000004FD9 ; ---------------------------------------------------------------------------
.text:0000000000004FD9
.text:0000000000004FD9 loc_4FD9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004FD9                                         ; xcalloc+18↑j ...
.text:0000000000004FD9                 call    xalloc_die
.text:0000000000004FD9 ; } // starts at 4FB0
.text:0000000000004FD9 xcalloc         endp
.text:0000000000004FD9
.text:0000000000004FD9 ; ---------------------------------------------------------------------------
.text:0000000000004FDE                 align 20h
.text:0000000000004FE0
.text:0000000000004FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FE0
.text:0000000000004FE0 ; Attributes: info_from_lumina
.text:0000000000004FE0
.text:0000000000004FE0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004FE0                 public xmemdup
.text:0000000000004FE0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004FE0                                         ; xstrdup+11↓j
.text:0000000000004FE0 ; __unwind {
.text:0000000000004FE0                 push    rbp
.text:0000000000004FE1                 push    rbx
.text:0000000000004FE2                 mov     rbp, rdi
.text:0000000000004FE5                 mov     rdi, rsi
.text:0000000000004FE8                 mov     rbx, rsi
.text:0000000000004FEB                 sub     rsp, 8
.text:0000000000004FEF                 call    xmalloc
.text:0000000000004FF4                 add     rsp, 8
.text:0000000000004FF8                 mov     rdx, rbx        ; n
.text:0000000000004FFB                 mov     rsi, rbp        ; src
.text:0000000000004FFE                 pop     rbx
.text:0000000000004FFF                 pop     rbp
.text:0000000000005000                 mov     rdi, rax        ; dest
.text:0000000000005003                 jmp     _memcpy
.text:0000000000005003 ; } // starts at 4FE0
.text:0000000000005003 xmemdup         endp
.text:0000000000005003
.text:0000000000005003 ; ---------------------------------------------------------------------------
.text:0000000000005008                 align 10h
.text:0000000000005010
.text:0000000000005010 ; =============== S U B R O U T I N E =======================================
.text:0000000000005010
.text:0000000000005010
.text:0000000000005010 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005010                 public xstrdup
.text:0000000000005010 xstrdup         proc near
.text:0000000000005010 ; __unwind {
.text:0000000000005010                 push    rbx
.text:0000000000005011                 mov     rbx, rdi
.text:0000000000005014                 call    _strlen
.text:0000000000005019                 mov     rdi, rbx        ; src
.text:000000000000501C                 lea     rsi, [rax+1]    ; n
.text:0000000000005020                 pop     rbx
.text:0000000000005021                 jmp     short xmemdup
.text:0000000000005021 ; } // starts at 5010
.text:0000000000005021 xstrdup         endp
.text:0000000000005021
.text:0000000000005021 ; ---------------------------------------------------------------------------
.text:0000000000005023                 align 10h
.text:0000000000005030
.text:0000000000005030 ; =============== S U B R O U T I N E =======================================
.text:0000000000005030
.text:0000000000005030 ; Attributes: noreturn info_from_lumina
.text:0000000000005030
.text:0000000000005030 ; void __cdecl xalloc_die()
.text:0000000000005030                 public xalloc_die
.text:0000000000005030 xalloc_die      proc near               ; CODE XREF: add_tab_stop:loc_213D↑p
.text:0000000000005030                                         ; quotearg_n_options:loc_4006↑p ...
.text:0000000000005030 ; __unwind {
.text:0000000000005030                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005037                 sub     rsp, 8
.text:000000000000503B                 mov     edx, 5          ; category
.text:0000000000005040                 xor     edi, edi        ; domainname
.text:0000000000005042                 call    _dcgettext
.text:0000000000005047                 mov     edi, cs:exit_failure ; status
.text:000000000000504D                 lea     rdx, format     ; format
.text:0000000000005054                 mov     rcx, rax
.text:0000000000005057                 xor     esi, esi        ; errnum
.text:0000000000005059                 xor     eax, eax
.text:000000000000505B                 call    _error
.text:0000000000005060                 call    _abort
.text:0000000000005060 ; } // starts at 5030
.text:0000000000005060 xalloc_die      endp
.text:0000000000005060
.text:0000000000005060 ; ---------------------------------------------------------------------------
.text:0000000000005065                 align 10h
.text:0000000000005070
.text:0000000000005070 ; =============== S U B R O U T I N E =======================================
.text:0000000000005070
.text:0000000000005070
.text:0000000000005070                 public xstrndup
.text:0000000000005070 xstrndup        proc near               ; CODE XREF: parse_tab_stops+20B↑p
.text:0000000000005070 ; __unwind {
.text:0000000000005070                 sub     rsp, 8
.text:0000000000005074                 call    _strndup
.text:0000000000005079                 test    rax, rax
.text:000000000000507C                 jz      short loc_5083
.text:000000000000507E                 add     rsp, 8
.text:0000000000005082                 retn
.text:0000000000005083 ; ---------------------------------------------------------------------------
.text:0000000000005083
.text:0000000000005083 loc_5083:                               ; CODE XREF: xstrndup+C↑j
.text:0000000000005083                 call    xalloc_die
.text:0000000000005083 ; } // starts at 5070
.text:0000000000005083 xstrndup        endp
.text:0000000000005083
.text:0000000000005083 ; ---------------------------------------------------------------------------
.text:0000000000005088                 align 10h
.text:0000000000005090
.text:0000000000005090 ; =============== S U B R O U T I N E =======================================
.text:0000000000005090
.text:0000000000005090 ; Attributes: info_from_lumina
.text:0000000000005090
.text:0000000000005090 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005090                 public rpl_fclose
.text:0000000000005090 rpl_fclose      proc near               ; CODE XREF: next_file:loc_2820↑p
.text:0000000000005090                                         ; cleanup_file_list_stdin+1B↑p ...
.text:0000000000005090 ; __unwind {
.text:0000000000005090                 push    r12
.text:0000000000005092                 push    rbp
.text:0000000000005093                 push    rbx
.text:0000000000005094                 mov     rbx, rdi
.text:0000000000005097                 call    _fileno
.text:000000000000509C                 test    eax, eax
.text:000000000000509E                 mov     rdi, rbx        ; fp
.text:00000000000050A1                 js      short loc_50F7
.text:00000000000050A3                 call    ___freading
.text:00000000000050A8                 test    eax, eax
.text:00000000000050AA                 jnz     short loc_50D8
.text:00000000000050AC
.text:00000000000050AC loc_50AC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000050AC                 mov     rdi, rbx        ; stream
.text:00000000000050AF                 call    rpl_fflush
.text:00000000000050B4                 test    eax, eax
.text:00000000000050B6                 jz      short loc_50F4
.text:00000000000050B8                 call    ___errno_location
.text:00000000000050BD                 mov     r12d, [rax]
.text:00000000000050C0                 mov     rdi, rbx        ; stream
.text:00000000000050C3                 mov     rbp, rax
.text:00000000000050C6                 call    _fclose
.text:00000000000050CB                 test    r12d, r12d
.text:00000000000050CE                 jnz     short loc_5100
.text:00000000000050D0
.text:00000000000050D0 loc_50D0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000050D0                 pop     rbx
.text:00000000000050D1                 pop     rbp
.text:00000000000050D2                 pop     r12
.text:00000000000050D4                 retn
.text:00000000000050D4 ; ---------------------------------------------------------------------------
.text:00000000000050D5                 align 8
.text:00000000000050D8
.text:00000000000050D8 loc_50D8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000050D8                 mov     rdi, rbx        ; stream
.text:00000000000050DB                 call    _fileno
.text:00000000000050E0                 xor     esi, esi        ; offset
.text:00000000000050E2                 mov     edx, 1          ; whence
.text:00000000000050E7                 mov     edi, eax        ; fd
.text:00000000000050E9                 call    _lseek
.text:00000000000050EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000050F2                 jnz     short loc_50AC
.text:00000000000050F4
.text:00000000000050F4 loc_50F4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000050F4                 mov     rdi, rbx        ; stream
.text:00000000000050F7
.text:00000000000050F7 loc_50F7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000050F7                 pop     rbx
.text:00000000000050F8                 pop     rbp
.text:00000000000050F9                 pop     r12
.text:00000000000050FB                 jmp     _fclose
.text:0000000000005100 ; ---------------------------------------------------------------------------
.text:0000000000005100
.text:0000000000005100 loc_5100:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005100                 mov     [rbp+0], r12d
.text:0000000000005104                 mov     eax, 0FFFFFFFFh
.text:0000000000005109                 jmp     short loc_50D0
.text:0000000000005109 ; } // starts at 5090
.text:0000000000005109 rpl_fclose      endp
.text:0000000000005109
.text:0000000000005109 ; ---------------------------------------------------------------------------
.text:000000000000510B                 align 10h
.text:0000000000005110
.text:0000000000005110 ; =============== S U B R O U T I N E =======================================
.text:0000000000005110
.text:0000000000005110 ; Attributes: info_from_lumina
.text:0000000000005110
.text:0000000000005110 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005110                 public rpl_fflush
.text:0000000000005110 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005110 ; __unwind {
.text:0000000000005110                 test    rdi, rdi
.text:0000000000005113                 push    rbx
.text:0000000000005114                 mov     rbx, rdi
.text:0000000000005117                 jz      short loc_512A
.text:0000000000005119                 call    ___freading
.text:000000000000511E                 test    eax, eax
.text:0000000000005120                 jz      short loc_512A
.text:0000000000005122                 test    dword ptr [rbx], 100h
.text:0000000000005128                 jnz     short loc_5138
.text:000000000000512A
.text:000000000000512A loc_512A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000512A                                         ; rpl_fflush+10↑j
.text:000000000000512A                 mov     rdi, rbx        ; stream
.text:000000000000512D                 pop     rbx
.text:000000000000512E                 jmp     _fflush
.text:000000000000512E ; ---------------------------------------------------------------------------
.text:0000000000005133                 align 8
.text:0000000000005138
.text:0000000000005138 loc_5138:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005138                 mov     rdi, rbx
.text:000000000000513B                 mov     edx, 1
.text:0000000000005140                 xor     esi, esi
.text:0000000000005142                 call    rpl_fseeko
.text:0000000000005147                 mov     rdi, rbx        ; stream
.text:000000000000514A                 pop     rbx
.text:000000000000514B                 jmp     _fflush
.text:000000000000514B ; } // starts at 5110
.text:000000000000514B rpl_fflush      endp
.text:000000000000514B
.text:0000000000005150
.text:0000000000005150 ; =============== S U B R O U T I N E =======================================
.text:0000000000005150
.text:0000000000005150 ; Attributes: info_from_lumina
.text:0000000000005150
.text:0000000000005150 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005150                 public rpl_fseeko
.text:0000000000005150 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005150 ; __unwind {
.text:0000000000005150                 mov     rax, [rdi+8]
.text:0000000000005154                 cmp     [rdi+10h], rax
.text:0000000000005158                 jz      short loc_5160
.text:000000000000515A
.text:000000000000515A loc_515A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000515A                                         ; rpl_fseeko+1F↓j
.text:000000000000515A                 jmp     _fseeko
.text:000000000000515A ; ---------------------------------------------------------------------------
.text:000000000000515F                 align 20h
.text:0000000000005160
.text:0000000000005160 loc_5160:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005160                 mov     rax, [rdi+20h]
.text:0000000000005164                 cmp     [rdi+28h], rax
.text:0000000000005168                 jnz     short loc_515A
.text:000000000000516A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000516F                 jnz     short loc_515A
.text:0000000000005171                 push    r12
.text:0000000000005173                 push    rbp
.text:0000000000005174                 mov     r12d, edx
.text:0000000000005177                 push    rbx
.text:0000000000005178                 mov     rbp, rsi
.text:000000000000517B                 mov     rbx, rdi
.text:000000000000517E                 call    _fileno
.text:0000000000005183                 mov     edx, r12d       ; whence
.text:0000000000005186                 mov     rsi, rbp        ; offset
.text:0000000000005189                 mov     edi, eax        ; fd
.text:000000000000518B                 call    _lseek
.text:0000000000005190                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005194                 jz      short loc_51A2
.text:0000000000005196                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005199                 mov     [rbx+90h], rax
.text:00000000000051A0                 xor     eax, eax
.text:00000000000051A2
.text:00000000000051A2 loc_51A2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000051A2                 pop     rbx
.text:00000000000051A3                 pop     rbp
.text:00000000000051A4                 pop     r12
.text:00000000000051A6                 retn
.text:00000000000051A6 ; } // starts at 5150
.text:00000000000051A6 rpl_fseeko      endp
.text:00000000000051A6
.text:00000000000051A6 ; ---------------------------------------------------------------------------
.text:00000000000051A7                 align 10h
.text:00000000000051B0
.text:00000000000051B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051B0
.text:00000000000051B0 ; Attributes: info_from_lumina
.text:00000000000051B0
.text:00000000000051B0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000051B0                 public rpl_mbrtowc
.text:00000000000051B0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000051B0
.text:00000000000051B0 pwc             = dword ptr -34h
.text:00000000000051B0 var_30          = qword ptr -30h
.text:00000000000051B0
.text:00000000000051B0 ; __unwind {
.text:00000000000051B0                 push    r13
.text:00000000000051B2                 push    r12
.text:00000000000051B4                 mov     r13, rsi
.text:00000000000051B7                 push    rbp
.text:00000000000051B8                 push    rbx
.text:00000000000051B9                 mov     rbx, rdi
.text:00000000000051BC                 mov     r12, rdx
.text:00000000000051BF                 sub     rsp, 18h
.text:00000000000051C3                 mov     rax, fs:28h
.text:00000000000051CC                 mov     [rsp+38h+var_30], rax
.text:00000000000051D1                 xor     eax, eax
.text:00000000000051D3                 lea     rax, [rsp+38h+pwc]
.text:00000000000051D8                 test    rdi, rdi
.text:00000000000051DB                 cmovz   rbx, rax
.text:00000000000051DF                 mov     rdi, rbx        ; pwc
.text:00000000000051E2                 call    _mbrtowc
.text:00000000000051E7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000051EB                 mov     rbp, rax
.text:00000000000051EE                 jbe     short loc_5210
.text:00000000000051F0                 test    r12, r12
.text:00000000000051F3                 jz      short loc_5210
.text:00000000000051F5                 xor     edi, edi
.text:00000000000051F7                 call    hard_locale
.text:00000000000051FC                 test    al, al
.text:00000000000051FE                 jnz     short loc_5210
.text:0000000000005200                 movzx   eax, byte ptr [r13+0]
.text:0000000000005205                 mov     ebp, 1
.text:000000000000520A                 mov     [rbx], eax
.text:000000000000520C                 nop     dword ptr [rax+00h]
.text:0000000000005210
.text:0000000000005210 loc_5210:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005210                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005210                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005215                 xor     rdx, fs:28h
.text:000000000000521E                 mov     rax, rbp
.text:0000000000005221                 jnz     short loc_522E
.text:0000000000005223                 add     rsp, 18h
.text:0000000000005227                 pop     rbx
.text:0000000000005228                 pop     rbp
.text:0000000000005229                 pop     r12
.text:000000000000522B                 pop     r13
.text:000000000000522D                 retn
.text:000000000000522E ; ---------------------------------------------------------------------------
.text:000000000000522E
.text:000000000000522E loc_522E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000522E                 call    ___stack_chk_fail
.text:000000000000522E ; } // starts at 51B0
.text:000000000000522E rpl_mbrtowc     endp
.text:000000000000522E
.text:000000000000522E ; ---------------------------------------------------------------------------
.text:0000000000005233                 align 20h
.text:0000000000005240
.text:0000000000005240 ; =============== S U B R O U T I N E =======================================
.text:0000000000005240
.text:0000000000005240 ; Attributes: info_from_lumina
.text:0000000000005240
.text:0000000000005240 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005240                 public close_stream
.text:0000000000005240 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005240                                         ; close_stdout+33↑p
.text:0000000000005240 ; __unwind {
.text:0000000000005240                 push    r12
.text:0000000000005242                 push    rbp
.text:0000000000005243                 mov     rbp, rdi
.text:0000000000005246                 push    rbx
.text:0000000000005247                 call    ___fpending
.text:000000000000524C                 mov     ebx, [rbp+0]
.text:000000000000524F                 mov     rdi, rbp        ; stream
.text:0000000000005252                 mov     r12, rax
.text:0000000000005255                 call    rpl_fclose
.text:000000000000525A                 and     ebx, 20h
.text:000000000000525D                 test    ebx, ebx
.text:000000000000525F                 jnz     short loc_5278
.text:0000000000005261                 test    eax, eax
.text:0000000000005263                 jz      short loc_526F
.text:0000000000005265                 test    r12, r12
.text:0000000000005268                 mov     eax, 0FFFFFFFFh
.text:000000000000526D                 jz      short loc_52A8
.text:000000000000526F
.text:000000000000526F loc_526F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000526F                 pop     rbx
.text:0000000000005270                 pop     rbp
.text:0000000000005271                 pop     r12
.text:0000000000005273                 retn
.text:0000000000005273 ; ---------------------------------------------------------------------------
.text:0000000000005274                 align 8
.text:0000000000005278
.text:0000000000005278 loc_5278:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005278                 test    eax, eax
.text:000000000000527A                 jnz     short loc_5298
.text:000000000000527C                 call    ___errno_location
.text:0000000000005281                 mov     dword ptr [rax], 0
.text:0000000000005287                 mov     eax, 0FFFFFFFFh
.text:000000000000528C                 pop     rbx
.text:000000000000528D                 pop     rbp
.text:000000000000528E                 pop     r12
.text:0000000000005290                 retn
.text:0000000000005290 ; ---------------------------------------------------------------------------
.text:0000000000005291                 align 8
.text:0000000000005298
.text:0000000000005298 loc_5298:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005298                 pop     rbx
.text:0000000000005299                 mov     eax, 0FFFFFFFFh
.text:000000000000529E                 pop     rbp
.text:000000000000529F                 pop     r12
.text:00000000000052A1                 retn
.text:00000000000052A1 ; ---------------------------------------------------------------------------
.text:00000000000052A2                 align 8
.text:00000000000052A8
.text:00000000000052A8 loc_52A8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000052A8                 call    ___errno_location
.text:00000000000052AD                 cmp     dword ptr [rax], 9
.text:00000000000052B0                 pop     rbx
.text:00000000000052B1                 pop     rbp
.text:00000000000052B2                 pop     r12
.text:00000000000052B4                 setnz   al
.text:00000000000052B7                 movzx   eax, al
.text:00000000000052BA                 neg     eax
.text:00000000000052BC                 retn
.text:00000000000052BC ; } // starts at 5240
.text:00000000000052BC close_stream    endp
.text:00000000000052BC
.text:00000000000052BC ; ---------------------------------------------------------------------------
.text:00000000000052BD                 align 20h
.text:00000000000052C0
.text:00000000000052C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052C0
.text:00000000000052C0
.text:00000000000052C0                 public hard_locale
.text:00000000000052C0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000052C0 ; __unwind {
.text:00000000000052C0                 sub     rsp, 8
.text:00000000000052C4                 xor     esi, esi        ; locale
.text:00000000000052C6                 call    _setlocale
.text:00000000000052CB                 mov     rdx, rax
.text:00000000000052CE                 mov     eax, 1
.text:00000000000052D3                 test    rdx, rdx
.text:00000000000052D6                 jz      short loc_52F5
.text:00000000000052D8                 lea     rdi, aC         ; "C"
.text:00000000000052DF                 mov     ecx, 2
.text:00000000000052E4                 mov     rsi, rdx
.text:00000000000052E7                 repe cmpsb
.text:00000000000052E9                 setnbe  cl
.text:00000000000052EC                 sbb     cl, 0
.text:00000000000052EF                 xor     eax, eax
.text:00000000000052F1                 test    cl, cl
.text:00000000000052F3                 jnz     short loc_5300
.text:00000000000052F5
.text:00000000000052F5 loc_52F5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000052F5                 add     rsp, 8
.text:00000000000052F9                 retn
.text:00000000000052F9 ; ---------------------------------------------------------------------------
.text:00000000000052FA                 align 20h
.text:0000000000005300
.text:0000000000005300 loc_5300:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005300                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005307                 mov     ecx, 6
.text:000000000000530C                 mov     rsi, rdx
.text:000000000000530F                 repe cmpsb
.text:0000000000005311                 setnbe  al
.text:0000000000005314                 sbb     al, 0
.text:0000000000005316                 test    al, al
.text:0000000000005318                 setnz   al
.text:000000000000531B                 add     rsp, 8
.text:000000000000531F                 retn
.text:000000000000531F ; } // starts at 52C0
.text:000000000000531F hard_locale     endp
.text:000000000000531F
.text:0000000000005320
.text:0000000000005320 ; =============== S U B R O U T I N E =======================================
.text:0000000000005320
.text:0000000000005320
.text:0000000000005320                 public locale_charset
.text:0000000000005320 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005320 ; __unwind {
.text:0000000000005320                 sub     rsp, 8
.text:0000000000005324                 mov     edi, 0Eh        ; item
.text:0000000000005329                 call    _nl_langinfo
.text:000000000000532E                 test    rax, rax
.text:0000000000005331                 jz      short loc_5350
.text:0000000000005333                 cmp     byte ptr [rax], 0
.text:0000000000005336                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000533D                 cmovz   rax, rdx
.text:0000000000005341                 add     rsp, 8
.text:0000000000005345                 retn
.text:0000000000005345 ; ---------------------------------------------------------------------------
.text:0000000000005346                 align 10h
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005350                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005357                 add     rsp, 8
.text:000000000000535B                 retn
.text:000000000000535B ; } // starts at 5320
.text:000000000000535B locale_charset  endp
.text:000000000000535B
.text:000000000000535B ; ---------------------------------------------------------------------------
.text:000000000000535C                 align 20h
.text:0000000000005360
.text:0000000000005360 ; =============== S U B R O U T I N E =======================================
.text:0000000000005360
.text:0000000000005360 ; Attributes: info_from_lumina
.text:0000000000005360
.text:0000000000005360 ; void _libc_csu_init(void)
.text:0000000000005360                 public __libc_csu_init
.text:0000000000005360 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005360 ; __unwind {
.text:0000000000005360                 push    r15
.text:0000000000005362                 push    r14
.text:0000000000005364                 mov     r15, rdx
.text:0000000000005367                 push    r13
.text:0000000000005369                 push    r12
.text:000000000000536B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005372                 push    rbp
.text:0000000000005373                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000537A                 push    rbx
.text:000000000000537B                 mov     r13d, edi
.text:000000000000537E                 mov     r14, rsi
.text:0000000000005381                 sub     rbp, r12
.text:0000000000005384                 sub     rsp, 8
.text:0000000000005388                 sar     rbp, 3
.text:000000000000538C                 call    _init_proc
.text:0000000000005391                 test    rbp, rbp
.text:0000000000005394                 jz      short loc_53B6
.text:0000000000005396                 xor     ebx, ebx
.text:0000000000005398                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000053A0                 mov     rdx, r15
.text:00000000000053A3                 mov     rsi, r14
.text:00000000000053A6                 mov     edi, r13d
.text:00000000000053A9                 call    ds:(__frame_dummy_init_array_entry - 207B50h)[r12+rbx*8]
.text:00000000000053AD                 add     rbx, 1
.text:00000000000053B1                 cmp     rbp, rbx
.text:00000000000053B4                 jnz     short loc_53A0
.text:00000000000053B6
.text:00000000000053B6 loc_53B6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000053B6                 add     rsp, 8
.text:00000000000053BA                 pop     rbx
.text:00000000000053BB                 pop     rbp
.text:00000000000053BC                 pop     r12
.text:00000000000053BE                 pop     r13
.text:00000000000053C0                 pop     r14
.text:00000000000053C2                 pop     r15
.text:00000000000053C4                 retn
.text:00000000000053C4 ; } // starts at 5360
.text:00000000000053C4 __libc_csu_init endp
.text:00000000000053C4
.text:00000000000053C4 ; ---------------------------------------------------------------------------
.text:00000000000053C5                 align 10h
.text:00000000000053D0
.text:00000000000053D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053D0
.text:00000000000053D0
.text:00000000000053D0 ; void _libc_csu_fini(void)
.text:00000000000053D0                 public __libc_csu_fini
.text:00000000000053D0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000053D0 ; __unwind {
.text:00000000000053D0                 rep retn
.text:00000000000053D0 ; } // starts at 53D0
.text:00000000000053D0 __libc_csu_fini endp
.text:00000000000053D0
.text:00000000000053D0 ; ---------------------------------------------------------------------------
.text:00000000000053D2                 align 20h
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0
.text:00000000000053E0 atexit          proc near               ; CODE XREF: main+67↑p
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000053E7                 xor     esi, esi        ; obj
.text:00000000000053E9                 jmp     ___cxa_atexit
.text:00000000000053E9 ; } // starts at 53E0
.text:00000000000053E9 atexit          endp
.text:00000000000053E9
.text:00000000000053E9 _text           ends
.text:00000000000053E9
LOAD:00000000000053EE ; ===========================================================================
LOAD:00000000000053EE
LOAD:00000000000053EE ; Segment type: Pure code
LOAD:00000000000053EE ; Segment permissions: Read/Execute
LOAD:00000000000053EE LOAD            segment byte public 'CODE' use64
LOAD:00000000000053EE                 assume cs:LOAD
LOAD:00000000000053EE                 ;org 53EEh
LOAD:00000000000053EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000053EE                 align 10h
LOAD:00000000000053EE LOAD            ends
LOAD:00000000000053EE
.fini:00000000000053F0 ; ===========================================================================
.fini:00000000000053F0
.fini:00000000000053F0 ; Segment type: Pure code
.fini:00000000000053F0 ; Segment permissions: Read/Execute
.fini:00000000000053F0 _fini           segment dword public 'CODE' use64
.fini:00000000000053F0                 assume cs:_fini
.fini:00000000000053F0                 ;org 53F0h
.fini:00000000000053F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000053F0
.fini:00000000000053F0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000053F0
.fini:00000000000053F0
.fini:00000000000053F0                 public _term_proc
.fini:00000000000053F0 _term_proc      proc near
.fini:00000000000053F0                 sub     rsp, 8          ; _fini
.fini:00000000000053F4                 add     rsp, 8
.fini:00000000000053F8                 retn
.fini:00000000000053F8 _term_proc      endp
.fini:00000000000053F8
.fini:00000000000053F8 _fini           ends
.fini:00000000000053F8
LOAD:00000000000053F9 ; ===========================================================================
LOAD:00000000000053F9
LOAD:00000000000053F9 ; Segment type: Pure code
LOAD:00000000000053F9 ; Segment permissions: Read/Execute
LOAD:00000000000053F9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000053F9                 assume cs:LOAD
LOAD:00000000000053F9                 ;org 53F9h
LOAD:00000000000053F9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000053F9                 align 20h
LOAD:00000000000053F9 LOAD            ends
LOAD:00000000000053F9
.rodata:0000000000005400 ; ===========================================================================
.rodata:0000000000005400
.rodata:0000000000005400 ; Segment type: Pure data
.rodata:0000000000005400 ; Segment permissions: Read
.rodata:0000000000005400 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005400                 assume cs:_rodata
.rodata:0000000000005400                 ;org 5400h
.rodata:0000000000005400                 public _IO_stdin_used
.rodata:0000000000005400 _IO_stdin_used  db    1
.rodata:0000000000005401                 db    0
.rodata:0000000000005402                 db    2
.rodata:0000000000005403                 db    0
.rodata:0000000000005404 aExpand         db 'expand',0           ; DATA XREF: main+C8↑o
.rodata:0000000000005404                                         ; usage+15B↑o ...
.rodata:000000000000540B asc_540B        db '[',0                ; DATA XREF: usage+167↑o
.rodata:000000000000540D aTestInvocation db 'test invocation',0  ; DATA XREF: usage+18E↑o
.rodata:000000000000541D aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000541D                                         ; DATA XREF: usage+1BE↑o
.rodata:000000000000541D                                         ; usage+2BC↑o ...
.rodata:0000000000005433 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1CF↑o
.rodata:000000000000543D aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1DB↑o
.rodata:000000000000544C aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+16E↑o
.rodata:0000000000005456 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+19A↑o
.rodata:0000000000005460 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1B2↑o
.rodata:000000000000546A ; const char aSOnlineHelpS[]
.rodata:000000000000546A aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+22A↑o
.rodata:000000000000546A                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000005481 unk_5481        db  47h ; G             ; DATA XREF: main+C1↑o
.rodata:0000000000005481                                         ; usage+246↑o ...
.rodata:0000000000005482                 db  4Eh ; N
.rodata:0000000000005483                 db  55h ; U
.rodata:0000000000005484                 db  20h
.rodata:0000000000005485 ; const char domainname[]
.rodata:0000000000005485 domainname      db 'coreutils',0        ; DATA XREF: main+48↑o
.rodata:0000000000005485                                         ; main+54↑o ...
.rodata:000000000000548F ; const char s2[]
.rodata:000000000000548F s2              db 'en_',0              ; DATA XREF: usage+26D↑o
.rodata:000000000000548F                                         ; usage+32E↑o
.rodata:0000000000005493 ; const char aFullDocumentat[]
.rodata:0000000000005493 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005493                                         ; DATA XREF: usage:loc_1E89↑o
.rodata:0000000000005493                                         ; usage:loc_1F46↑o
.rodata:00000000000054AE ; const char dirname[]
.rodata:00000000000054AE dirname         db '/usr/local/share/locale',0
.rodata:00000000000054AE                                         ; DATA XREF: main+41↑o
.rodata:00000000000054C6 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+BA↑o
.rodata:00000000000054D6 ; const char aInputLineIsToo[]
.rodata:00000000000054D6 aInputLineIsToo db 'input line is too long',0
.rodata:00000000000054D6                                         ; DATA XREF: main:loc_1A9C↑o
.rodata:00000000000054D6                                         ; main:loc_1AC0↑o
.rodata:00000000000054ED ; const char msgid[]
.rodata:00000000000054ED msgid           db 'write error',0      ; DATA XREF: main+2A2↑o
.rodata:00000000000054ED                                         ; main+343↑o ...
.rodata:00000000000054F9 aTabs           db 'tabs',0             ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000054FE aInitial        db 'initial',0          ; DATA XREF: .data.rel.ro:0000000000207B80↓o
.rodata:0000000000005506 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:000000000000550B aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BC0↓o
.rodata:0000000000005513                 align 8
.rodata:0000000000005518 ; const char aTrySHelpForMor[]
.rodata:0000000000005518 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005518                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000553F                 align 20h
.rodata:0000000000005540 ; const char aUsageSOptionFi[]
.rodata:0000000000005540 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:0000000000005540                                         ; DATA XREF: usage:loc_1C5D↑o
.rodata:0000000000005561                 align 8
.rodata:0000000000005568 ; const char aConvertTabsInE[]
.rodata:0000000000005568 aConvertTabsInE db 'Convert tabs in each FILE to spaces, writing to standard output.',0Ah
.rodata:0000000000005568                                         ; DATA XREF: usage+84↑o
.rodata:0000000000005568                 db 0
.rodata:00000000000055AA                 align 10h
.rodata:00000000000055B0 ; const char aWithNoFileOrWh[]
.rodata:00000000000055B0 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:00000000000055B0                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:00000000000055E8 ; const char aMandatoryArgum[]
.rodata:00000000000055E8 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:00000000000055E8                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:00000000000055E8                 db 'ns too.',0Ah,0
.rodata:0000000000005633                 align 8
.rodata:0000000000005638 ; const char aIInitialDoNotC[]
.rodata:0000000000005638 aIInitialDoNotC db '  -i, --initial    do not convert tabs after non blanks',0Ah
.rodata:0000000000005638                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000005638                 db '  -t, --tabs=N     have tabs N characters apart, not 8',0Ah,0
.rodata:00000000000056A8 ; const char aHelpDisplayThi[]
.rodata:00000000000056A8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000056A8                                         ; DATA XREF: usage+11D↑o
.rodata:00000000000056D5                 align 8
.rodata:00000000000056D8 ; const char aVersionOutputV[]
.rodata:00000000000056D8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000056D8                                         ; DATA XREF: usage+142↑o
.rodata:000000000000570E                 align 10h
.rodata:0000000000005710 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005710                                         ; DATA XREF: usage+23F↑o
.rodata:0000000000005710                                         ; usage+2A3↑o ...
.rodata:0000000000005738 ; const char aReportAnyTrans[]
.rodata:0000000000005738 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005738                                         ; DATA XREF: usage+397↑o
.rodata:0000000000005738                 db 'am/>',0Ah,0
.rodata:000000000000577F                 align 20h
.rodata:0000000000005780 ; const char aOrAvailableLoc[]
.rodata:0000000000005780 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005780                                         ; DATA XREF: usage:loc_1ECE↑o
.rodata:00000000000057B3                 align 20h
.rodata:00000000000057C0 ; const char shortopts[]
.rodata:00000000000057C0 shortopts       db 'it:0::1::2::3::4::5::6::7::8::9::',0
.rodata:00000000000057C0                                         ; DATA XREF: main+7A↑o
.rodata:00000000000057E2                 align 8
.rodata:00000000000057E8 ; const char aSpecifierOnlyA[]
.rodata:00000000000057E8 aSpecifierOnlyA db 27h,'/',27h,' specifier only allowed with the last value',0
.rodata:00000000000057E8                                         ; DATA XREF: set_extend_size+13↑o
.rodata:0000000000005817                 align 8
.rodata:0000000000005818 ; const char aSpecifierOnlyA_0[]
.rodata:0000000000005818 aSpecifierOnlyA_0 db 27h,'+',27h,' specifier only allowed with the last value',0
.rodata:0000000000005818                                         ; DATA XREF: set_increment_size+13↑o
.rodata:0000000000005847                 align 8
.rodata:0000000000005848 ; const char aSpecifierNotAt[]
.rodata:0000000000005848 aSpecifierNotAt db 27h,'/',27h,' specifier not at start of number: %s',0
.rodata:0000000000005848                                         ; DATA XREF: parse_tab_stops+273↑o
.rodata:0000000000005871                 align 8
.rodata:0000000000005878 ; const char aSpecifierNotAt_0[]
.rodata:0000000000005878 aSpecifierNotAt_0 db 27h,'+',27h,' specifier not at start of number: %s',0
.rodata:0000000000005878                                         ; DATA XREF: parse_tab_stops+2BB↑o
.rodata:00000000000058A1                 align 8
.rodata:00000000000058A8 ; const char aTabSizeContain[]
.rodata:00000000000058A8 aTabSizeContain db 'tab size contains invalid character(s): %s',0
.rodata:00000000000058A8                                         ; DATA XREF: parse_tab_stops+328↑o
.rodata:00000000000058D3                 align 8
.rodata:00000000000058D8 ; const char aSpecifierIsMut[]
.rodata:00000000000058D8 aSpecifierIsMut db 27h,'/',27h,' specifier is mutually exclusive with ',27h,'+',27h,0
.rodata:00000000000058D8                                         ; DATA XREF: finalize_tab_stops:loc_25D8↑o
.rodata:0000000000005905                 align 8
.rodata:0000000000005908 ; const char file[]
.rodata:0000000000005908 file            db '../coreutils-8.31/src/expand-common.c',0
.rodata:0000000000005908                                         ; DATA XREF: next_file+1E9↑o
.rodata:000000000000592E                 align 10h
.rodata:0000000000005930 ; const char aTTabsListUseCo[]
.rodata:0000000000005930 aTTabsListUseCo db '  -t, --tabs=LIST  use comma separated list of tab positions',0Ah
.rodata:0000000000005930                                         ; DATA XREF: emit_tab_list_info+8↑o
.rodata:0000000000005930                 db 0
.rodata:000000000000596E                 align 10h
.rodata:0000000000005970 ; const char aTheLastSpecifi[]
.rodata:0000000000005970 aTheLastSpecifi db '                     The last specified position can be prefixed '
.rodata:0000000000005970                                         ; DATA XREF: emit_tab_list_info+2D↑o
.rodata:0000000000005970                 db 'with ',27h,'/',27h,0Ah
.rodata:0000000000005970                 db '                     to specify a tab size to use after the last',0Ah
.rodata:0000000000005970                 db '                     explicitly specified tab stop.  Also a prefi'
.rodata:0000000000005970                 db 'x of ',27h,'+',27h,0Ah
.rodata:0000000000005970                 db '                     can be used to align remaining tab stops rel'
.rodata:0000000000005970                 db 'ative to',0Ah
.rodata:0000000000005970                 db '                     the last specified tab stop instead of the f'
.rodata:0000000000005970                 db 'irst column',0Ah,0
.rodata:0000000000005ADD ; const char accept[]
.rodata:0000000000005ADD accept          db '0123456789',0       ; DATA XREF: parse_tab_stops+1EF↑o
.rodata:0000000000005AE8 ; const char aTabStopIsTooLa[]
.rodata:0000000000005AE8 aTabStopIsTooLa db 'tab stop is too large %s',0
.rodata:0000000000005AE8                                         ; DATA XREF: parse_tab_stops+21B↑o
.rodata:0000000000005B01 ; const char aTabSizeCannotB[]
.rodata:0000000000005B01 aTabSizeCannotB db 'tab size cannot be 0',0
.rodata:0000000000005B01                                         ; DATA XREF: finalize_tab_stops:loc_2590↑o
.rodata:0000000000005B16 ; const char aTabSizesMustBe[]
.rodata:0000000000005B16 aTabSizesMustBe db 'tab sizes must be ascending',0
.rodata:0000000000005B16                                         ; DATA XREF: finalize_tab_stops:loc_25B4↑o
.rodata:0000000000005B32 ; const char assertion[]
.rodata:0000000000005B32 assertion       db 'prev_file',0        ; DATA XREF: next_file+1F0↑o
.rodata:0000000000005B3C                 align 20h
.rodata:0000000000005B40 ; const char _PRETTY_FUNCTION___6961[]
.rodata:0000000000005B40 __PRETTY_FUNCTION___6961 db 'next_file',0
.rodata:0000000000005B40                                         ; DATA XREF: next_file:loc_28B2↑o
.rodata:0000000000005B4A a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005B4F ; const char aS[4]
.rodata:0000000000005B4F aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005B53 ; const char format[]
.rodata:0000000000005B53 format          dd offset unk_7325      ; DATA XREF: next_file+A9↑o
.rodata:0000000000005B53                                         ; next_file+17A↑o ...
.rodata:0000000000005B57                 align 8
.rodata:0000000000005B58 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005B58                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005B90 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005B98 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000005B98                                         ; next_file:loc_26F9↑o ...
.rodata:0000000000005B9C unk_5B9C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000005B9D                 db  80h
.rodata:0000000000005B9E                 db  98h
.rodata:0000000000005B9F                 db    0
.rodata:0000000000005BA0 unk_5BA0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005BA1                 db  80h
.rodata:0000000000005BA2                 db  99h
.rodata:0000000000005BA3                 db    0
.rodata:0000000000005BA4 unk_5BA4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005BA5                 db    7
.rodata:0000000000005BA6                 db  65h ; e
.rodata:0000000000005BA7                 db    0
.rodata:0000000000005BA8 unk_5BA8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005BA9                 db 0AFh
.rodata:0000000000005BAA                 db    0
.rodata:0000000000005BAB unk_5BAB        db  22h ; "             ; DATA XREF: gettext_quote:loc_2B50↑o
.rodata:0000000000005BAB                                         ; quotearg_buffer_restyled:loc_390B↑o ...
.rodata:0000000000005BAC                 db    0
.rodata:0000000000005BAD ; const char asc_5BAD[2]
.rodata:0000000000005BAD asc_5BAD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000005BAD                                         ; quotearg_buffer_restyled:loc_2CD3↑o ...
.rodata:0000000000005BAF ; const char asc_5BAF[2]
.rodata:0000000000005BAF asc_5BAF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000005BAF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005BB1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005BB9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:0000000000005BBF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:0000000000005BCC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005BCC                                         ; .data.rel.ro:0000000000207C38↓o
.rodata:0000000000005BD9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005BD9                                         ; DATA XREF: .data.rel.ro:0000000000207C20↓o
.rodata:0000000000005BED aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:0000000000005BEF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C30↓o
.rodata:0000000000005BF7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C48↓o
.rodata:0000000000005BFF                 align 20h
.rodata:0000000000005C00 jpt_2CB1        dd offset loc_3A5A - 5C00h
.rodata:0000000000005C00                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005C00                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005C00                 dd offset loc_2CB3 - 5C00h ; jump table for switch statement
.rodata:0000000000005C00                 dd offset loc_3C88 - 5C00h
.rodata:0000000000005C00                 dd offset loc_3A94 - 5C00h
.rodata:0000000000005C00                 dd offset loc_3884 - 5C00h
.rodata:0000000000005C00                 dd offset loc_38E0 - 5C00h
.rodata:0000000000005C00                 dd offset loc_3935 - 5C00h
.rodata:0000000000005C00                 dd offset loc_397A - 5C00h
.rodata:0000000000005C00                 dd offset loc_39B4 - 5C00h
.rodata:0000000000005C00                 dd offset loc_39B4 - 5C00h
.rodata:0000000000005C00                 dd offset loc_39B4 - 5C00h
.rodata:0000000000005C2C jpt_2E0E        dd offset loc_3030 - 5C2Ch, offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch
.rodata:0000000000005C2C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000005C2C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000005C2C                 dd offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch ; jump table for switch statement
.rodata:0000000000005C2C                 dd offset def_2E0E - 5C2Ch, offset loc_3070 - 5C2Ch, offset loc_2F78 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_2F38 - 5C2Ch, offset loc_3100 - 5C2Ch, offset loc_30F0 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30E0 - 5C2Ch, offset loc_30D0 - 5C2Ch, offset def_2E0E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch
.rodata:0000000000005C2C                 dd offset def_2E0E - 5C2Ch, offset def_2E0E - 5C2Ch, offset loc_30C0 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30B0 - 5C2Ch, offset loc_30B0 - 5C2Ch, offset loc_3080 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30B0 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_30B0 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_2F13 - 5C2Ch, offset loc_30B0 - 5C2Ch, offset loc_30B0 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30B0 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_30B0 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30B0 - 5C2Ch, offset loc_30B0 - 5C2Ch, offset loc_30B0 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_2EE3 - 5C2Ch, offset def_2E0E - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_30B0 - 5C2Ch, offset loc_2F88 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_30B0 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_30B0 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch, offset loc_3058 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_2E13 - 5C2Ch, offset loc_30B0 - 5C2Ch, offset loc_2E13 - 5C2Ch
.rodata:0000000000005C2C                 dd offset loc_3080 - 5C2Ch
.rodata:0000000000005E28 jpt_319A        dd offset loc_3200 - 5E28h, offset def_319A - 5E28h, offset def_319A - 5E28h
.rodata:0000000000005E28                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005E28                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005E28                 dd offset def_319A - 5E28h, offset def_319A - 5E28h, offset def_319A - 5E28h ; jump table for switch statement
.rodata:0000000000005E28                 dd offset def_319A - 5E28h, offset loc_31F0 - 5E28h, offset loc_3340 - 5E28h
.rodata:0000000000005E28                 dd offset loc_3328 - 5E28h, offset loc_31D8 - 5E28h, offset loc_3318 - 5E28h
.rodata:0000000000005E28                 dd offset loc_31C0 - 5E28h, offset loc_3300 - 5E28h, offset def_319A - 5E28h
.rodata:0000000000005E28                 dd offset def_319A - 5E28h, offset def_319A - 5E28h, offset def_319A - 5E28h
.rodata:0000000000005E28                 dd offset def_319A - 5E28h, offset def_319A - 5E28h, offset def_319A - 5E28h
.rodata:0000000000005E28                 dd offset def_319A - 5E28h, offset def_319A - 5E28h, offset def_319A - 5E28h
.rodata:0000000000005E28                 dd offset def_319A - 5E28h, offset def_319A - 5E28h, offset def_319A - 5E28h
.rodata:0000000000005E28                 dd offset def_319A - 5E28h, offset def_319A - 5E28h, offset def_319A - 5E28h
.rodata:0000000000005E28                 dd offset def_319A - 5E28h, offset def_319A - 5E28h, offset loc_32E8 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32D0 - 5E28h, offset loc_32D0 - 5E28h, offset loc_32B8 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32D0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32D0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_2F10 - 5E28h, offset loc_32D0 - 5E28h, offset loc_32D0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32D0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32D0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32D0 - 5E28h, offset loc_32D0 - 5E28h, offset loc_32D0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_2EE0 - 5E28h, offset def_319A - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32D0 - 5E28h, offset loc_31A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32D0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32D0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h, offset loc_32A0 - 5E28h
.rodata:0000000000005E28                 dd offset loc_2E10 - 5E28h, offset loc_32D0 - 5E28h, offset loc_2E10 - 5E28h
.rodata:0000000000005E28                 dd offset loc_32B8 - 5E28h
.rodata:0000000000006024                 align 20h
.rodata:0000000000006040                 public quoting_style_vals
.rodata:0000000000006040 quoting_style_vals db    0
.rodata:0000000000006041                 db    0
.rodata:0000000000006042                 db    0
.rodata:0000000000006043                 db    0
.rodata:0000000000006044                 db    1
.rodata:0000000000006045                 db    0
.rodata:0000000000006046                 db    0
.rodata:0000000000006047                 db    0
.rodata:0000000000006048                 db    2
.rodata:0000000000006049                 db    0
.rodata:000000000000604A                 db    0
.rodata:000000000000604B                 db    0
.rodata:000000000000604C                 db    3
.rodata:000000000000604D                 db    0
.rodata:000000000000604E                 db    0
.rodata:000000000000604F                 db    0
.rodata:0000000000006050                 db    4
.rodata:0000000000006051                 db    0
.rodata:0000000000006052                 db    0
.rodata:0000000000006053                 db    0
.rodata:0000000000006054                 db    5
.rodata:0000000000006055                 db    0
.rodata:0000000000006056                 db    0
.rodata:0000000000006057                 db    0
.rodata:0000000000006058                 db    6
.rodata:0000000000006059                 db    0
.rodata:000000000000605A                 db    0
.rodata:000000000000605B                 db    0
.rodata:000000000000605C                 db    7
.rodata:000000000000605D                 db    0
.rodata:000000000000605E                 db    0
.rodata:000000000000605F                 db    0
.rodata:0000000000006060                 db    8
.rodata:0000000000006061                 db    0
.rodata:0000000000006062                 db    0
.rodata:0000000000006063                 db    0
.rodata:0000000000006064                 db    9
.rodata:0000000000006065                 db    0
.rodata:0000000000006066                 db    0
.rodata:0000000000006067                 db    0
.rodata:0000000000006068 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006074 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000607B ; const char aC_0[]
.rodata:000000000000607B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_47FC↑o
.rodata:000000000000607F ; const char aWrittenByS[]
.rodata:000000000000607F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000607F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000608F ; const char aWrittenBySAndS[]
.rodata:000000000000608F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000608F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000060A6 ; const char aWrittenBySSAnd[]
.rodata:00000000000060A6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000060A6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000060C2 ; const char aReportBugsToS[]
.rodata:00000000000060C2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000060C2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000060D7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000060D7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000060ED ; const char aSHomePageS[]
.rodata:00000000000060ED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000060ED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006101                 align 8
.rodata:0000000000006108 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006108 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006108                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006108                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006108                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006108                 db '.',0Ah
.rodata:0000000000006108                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006108                 db 0Ah,0
.rodata:00000000000061D4                 align 8
.rodata:00000000000061D8 ; const char aWrittenBySSSAn[]
.rodata:00000000000061D8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000061D8                                         ; DATA XREF: version_etc_arn:loc_4A50↑o
.rodata:00000000000061D8                 db 'and %s.',0Ah,0
.rodata:00000000000061F8 ; const char aWrittenBySSSSA[]
.rodata:00000000000061F8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000061F8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000061F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000621C                 align 20h
.rodata:0000000000006220 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006220 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006220                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006220                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006248 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006248 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006248                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006248                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006274                 align 8
.rodata:0000000000006278 ; const char aWrittenBySSSSS[]
.rodata:0000000000006278 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006278                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006278                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006278                 db 'and %s.',0Ah,0
.rodata:00000000000062A8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000062A8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000062A8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000062A8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000062A8                 db '%s, and %s.',0Ah,0
.rodata:00000000000062DC                 align 20h
.rodata:00000000000062E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000062E0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000062E0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000062E0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000631C                 align 20h
.rodata:0000000000006320 ; const char aGeneralHelpUsi[]
.rodata:0000000000006320 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006320                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006320                 db 0
.rodata:0000000000006361                 align 8
.rodata:0000000000006368 jpt_4864        dd offset loc_48E6 - 6368h
.rodata:0000000000006368                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006368                                         ; version_etc_arn+9D↑r
.rodata:0000000000006368                 dd offset loc_4978 - 6368h ; jump table for switch statement
.rodata:0000000000006368                 dd offset loc_49B8 - 6368h
.rodata:0000000000006368                 dd offset loc_4A00 - 6368h
.rodata:0000000000006368                 dd offset loc_4A50 - 6368h
.rodata:0000000000006368                 dd offset loc_4AA8 - 6368h
.rodata:0000000000006368                 dd offset loc_4AD8 - 6368h
.rodata:0000000000006368                 dd offset loc_4B40 - 6368h
.rodata:0000000000006368                 dd offset loc_4870 - 6368h
.rodata:0000000000006368                 dd offset loc_4920 - 6368h
.rodata:0000000000006390                 align 20h
.rodata:00000000000063A0                 public version_etc_copyright
.rodata:00000000000063A0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000063A0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000063CF ; const char aMemoryExhauste[]
.rodata:00000000000063CF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000063E0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000063E2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5300↑o
.rodata:00000000000063E8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000063E8                                         ; locale_charset:loc_5350↑o
.rodata:00000000000063E8 _rodata         ends
.rodata:00000000000063E8
LOAD:00000000000063EE ; ===========================================================================
LOAD:00000000000063EE
LOAD:00000000000063EE ; Segment type: Pure code
LOAD:00000000000063EE ; Segment permissions: Read/Execute
LOAD:00000000000063EE LOAD            segment byte public 'CODE' use64
LOAD:00000000000063EE                 assume cs:LOAD
LOAD:00000000000063EE                 ;org 63EEh
LOAD:00000000000063EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000063EE                 align 10h
LOAD:00000000000063EE LOAD            ends
LOAD:00000000000063EE
.eh_frame_hdr:00000000000063F0 ; ===========================================================================
.eh_frame_hdr:00000000000063F0
.eh_frame_hdr:00000000000063F0 ; Segment type: Pure data
.eh_frame_hdr:00000000000063F0 ; Segment permissions: Read
.eh_frame_hdr:00000000000063F0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000063F0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000063F0                 ;org 63F0h
.eh_frame_hdr:00000000000063F0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000063F1                 db  1Bh
.eh_frame_hdr:00000000000063F2                 db    3
.eh_frame_hdr:00000000000063F3                 db  3Bh ; ;
.eh_frame_hdr:00000000000063F4                 db 0A4h
.eh_frame_hdr:00000000000063F5                 db    2
.eh_frame_hdr:00000000000063F6                 db    0
.eh_frame_hdr:00000000000063F7                 db    0
.eh_frame_hdr:00000000000063F8                 db  53h ; S
.eh_frame_hdr:00000000000063F9                 db    0
.eh_frame_hdr:00000000000063FA                 db    0
.eh_frame_hdr:00000000000063FB                 db    0
.eh_frame_hdr:00000000000063FC                 db  10h
.eh_frame_hdr:00000000000063FD                 db 0B0h
.eh_frame_hdr:00000000000063FE                 db 0FFh
.eh_frame_hdr:00000000000063FF                 db 0FFh
.eh_frame_hdr:0000000000006400                 db 0F0h
.eh_frame_hdr:0000000000006401                 db    2
.eh_frame_hdr:0000000000006402                 db    0
.eh_frame_hdr:0000000000006403                 db    0
.eh_frame_hdr:0000000000006404                 db  10h
.eh_frame_hdr:0000000000006405                 db 0B3h
.eh_frame_hdr:0000000000006406                 db 0FFh
.eh_frame_hdr:0000000000006407                 db 0FFh
.eh_frame_hdr:0000000000006408                 db  18h
.eh_frame_hdr:0000000000006409                 db    3
.eh_frame_hdr:000000000000640A                 db    0
.eh_frame_hdr:000000000000640B                 db    0
.eh_frame_hdr:000000000000640C                 db  20h
.eh_frame_hdr:000000000000640D                 db 0B3h
.eh_frame_hdr:000000000000640E                 db 0FFh
.eh_frame_hdr:000000000000640F                 db 0FFh
.eh_frame_hdr:0000000000006410                 db  5Ch ; \
.eh_frame_hdr:0000000000006411                 db    3
.eh_frame_hdr:0000000000006412                 db    0
.eh_frame_hdr:0000000000006413                 db    0
.eh_frame_hdr:0000000000006414                 db    0
.eh_frame_hdr:0000000000006415                 db 0B7h
.eh_frame_hdr:0000000000006416                 db 0FFh
.eh_frame_hdr:0000000000006417                 db 0FFh
.eh_frame_hdr:0000000000006418                 db 0C0h
.eh_frame_hdr:0000000000006419                 db    2
.eh_frame_hdr:000000000000641A                 db    0
.eh_frame_hdr:000000000000641B                 db    0
.eh_frame_hdr:000000000000641C                 db  10h
.eh_frame_hdr:000000000000641D                 db 0B8h
.eh_frame_hdr:000000000000641E                 db 0FFh
.eh_frame_hdr:000000000000641F                 db 0FFh
.eh_frame_hdr:0000000000006420                 db  30h ; 0
.eh_frame_hdr:0000000000006421                 db    3
.eh_frame_hdr:0000000000006422                 db    0
.eh_frame_hdr:0000000000006423                 db    0
.eh_frame_hdr:0000000000006424                 db 0D0h
.eh_frame_hdr:0000000000006425                 db 0BBh
.eh_frame_hdr:0000000000006426                 db 0FFh
.eh_frame_hdr:0000000000006427                 db 0FFh
.eh_frame_hdr:0000000000006428                 db 0A8h
.eh_frame_hdr:0000000000006429                 db    3
.eh_frame_hdr:000000000000642A                 db    0
.eh_frame_hdr:000000000000642B                 db    0
.eh_frame_hdr:000000000000642C                 db  10h
.eh_frame_hdr:000000000000642D                 db 0BCh
.eh_frame_hdr:000000000000642E                 db 0FFh
.eh_frame_hdr:000000000000642F                 db 0FFh
.eh_frame_hdr:0000000000006430                 db 0C4h
.eh_frame_hdr:0000000000006431                 db    3
.eh_frame_hdr:0000000000006432                 db    0
.eh_frame_hdr:0000000000006433                 db    0
.eh_frame_hdr:0000000000006434                 db  50h ; P
.eh_frame_hdr:0000000000006435                 db 0BCh
.eh_frame_hdr:0000000000006436                 db 0FFh
.eh_frame_hdr:0000000000006437                 db 0FFh
.eh_frame_hdr:0000000000006438                 db 0E0h
.eh_frame_hdr:0000000000006439                 db    3
.eh_frame_hdr:000000000000643A                 db    0
.eh_frame_hdr:000000000000643B                 db    0
.eh_frame_hdr:000000000000643C                 db  70h ; p
.eh_frame_hdr:000000000000643D                 db 0BDh
.eh_frame_hdr:000000000000643E                 db 0FFh
.eh_frame_hdr:000000000000643F                 db 0FFh
.eh_frame_hdr:0000000000006440                 db  18h
.eh_frame_hdr:0000000000006441                 db    4
.eh_frame_hdr:0000000000006442                 db    0
.eh_frame_hdr:0000000000006443                 db    0
.eh_frame_hdr:0000000000006444                 db 0D0h
.eh_frame_hdr:0000000000006445                 db 0C0h
.eh_frame_hdr:0000000000006446                 db 0FFh
.eh_frame_hdr:0000000000006447                 db 0FFh
.eh_frame_hdr:0000000000006448                 db  80h
.eh_frame_hdr:0000000000006449                 db    4
.eh_frame_hdr:000000000000644A                 db    0
.eh_frame_hdr:000000000000644B                 db    0
.eh_frame_hdr:000000000000644C                 db  10h
.eh_frame_hdr:000000000000644D                 db 0C2h
.eh_frame_hdr:000000000000644E                 db 0FFh
.eh_frame_hdr:000000000000644F                 db 0FFh
.eh_frame_hdr:0000000000006450                 db 0A4h
.eh_frame_hdr:0000000000006451                 db    4
.eh_frame_hdr:0000000000006452                 db    0
.eh_frame_hdr:0000000000006453                 db    0
.eh_frame_hdr:0000000000006454                 db 0C0h
.eh_frame_hdr:0000000000006455                 db 0C2h
.eh_frame_hdr:0000000000006456                 db 0FFh
.eh_frame_hdr:0000000000006457                 db 0FFh
.eh_frame_hdr:0000000000006458                 db 0B8h
.eh_frame_hdr:0000000000006459                 db    4
.eh_frame_hdr:000000000000645A                 db    0
.eh_frame_hdr:000000000000645B                 db    0
.eh_frame_hdr:000000000000645C                 db 0E0h
.eh_frame_hdr:000000000000645D                 db 0C2h
.eh_frame_hdr:000000000000645E                 db 0FFh
.eh_frame_hdr:000000000000645F                 db 0FFh
.eh_frame_hdr:0000000000006460                 db 0CCh
.eh_frame_hdr:0000000000006461                 db    4
.eh_frame_hdr:0000000000006462                 db    0
.eh_frame_hdr:0000000000006463                 db    0
.eh_frame_hdr:0000000000006464                 db 0F0h
.eh_frame_hdr:0000000000006465                 db 0C4h
.eh_frame_hdr:0000000000006466                 db 0FFh
.eh_frame_hdr:0000000000006467                 db 0FFh
.eh_frame_hdr:0000000000006468                 db  10h
.eh_frame_hdr:0000000000006469                 db    5
.eh_frame_hdr:000000000000646A                 db    0
.eh_frame_hdr:000000000000646B                 db    0
.eh_frame_hdr:000000000000646C                 db  40h ; @
.eh_frame_hdr:000000000000646D                 db 0C5h
.eh_frame_hdr:000000000000646E                 db 0FFh
.eh_frame_hdr:000000000000646F                 db 0FFh
.eh_frame_hdr:0000000000006470                 db  2Ch ; ,
.eh_frame_hdr:0000000000006471                 db    5
.eh_frame_hdr:0000000000006472                 db    0
.eh_frame_hdr:0000000000006473                 db    0
.eh_frame_hdr:0000000000006474                 db  90h
.eh_frame_hdr:0000000000006475                 db 0C5h
.eh_frame_hdr:0000000000006476                 db 0FFh
.eh_frame_hdr:0000000000006477                 db 0FFh
.eh_frame_hdr:0000000000006478                 db  48h ; H
.eh_frame_hdr:0000000000006479                 db    5
.eh_frame_hdr:000000000000647A                 db    0
.eh_frame_hdr:000000000000647B                 db    0
.eh_frame_hdr:000000000000647C                 db 0A0h
.eh_frame_hdr:000000000000647D                 db 0C5h
.eh_frame_hdr:000000000000647E                 db 0FFh
.eh_frame_hdr:000000000000647F                 db 0FFh
.eh_frame_hdr:0000000000006480                 db  5Ch ; \
.eh_frame_hdr:0000000000006481                 db    5
.eh_frame_hdr:0000000000006482                 db    0
.eh_frame_hdr:0000000000006483                 db    0
.eh_frame_hdr:0000000000006484                 db 0B0h
.eh_frame_hdr:0000000000006485                 db 0C5h
.eh_frame_hdr:0000000000006486                 db 0FFh
.eh_frame_hdr:0000000000006487                 db 0FFh
.eh_frame_hdr:0000000000006488                 db  70h ; p
.eh_frame_hdr:0000000000006489                 db    5
.eh_frame_hdr:000000000000648A                 db    0
.eh_frame_hdr:000000000000648B                 db    0
.eh_frame_hdr:000000000000648C                 db  60h ; `
.eh_frame_hdr:000000000000648D                 db 0C6h
.eh_frame_hdr:000000000000648E                 db 0FFh
.eh_frame_hdr:000000000000648F                 db 0FFh
.eh_frame_hdr:0000000000006490                 db 0A0h
.eh_frame_hdr:0000000000006491                 db    5
.eh_frame_hdr:0000000000006492                 db    0
.eh_frame_hdr:0000000000006493                 db    0
.eh_frame_hdr:0000000000006494                 db  70h ; p
.eh_frame_hdr:0000000000006495                 db 0C6h
.eh_frame_hdr:0000000000006496                 db 0FFh
.eh_frame_hdr:0000000000006497                 db 0FFh
.eh_frame_hdr:0000000000006498                 db 0B4h
.eh_frame_hdr:0000000000006499                 db    5
.eh_frame_hdr:000000000000649A                 db    0
.eh_frame_hdr:000000000000649B                 db    0
.eh_frame_hdr:000000000000649C                 db 0A0h
.eh_frame_hdr:000000000000649D                 db 0C6h
.eh_frame_hdr:000000000000649E                 db 0FFh
.eh_frame_hdr:000000000000649F                 db 0FFh
.eh_frame_hdr:00000000000064A0                 db 0D0h
.eh_frame_hdr:00000000000064A1                 db    5
.eh_frame_hdr:00000000000064A2                 db    0
.eh_frame_hdr:00000000000064A3                 db    0
.eh_frame_hdr:00000000000064A4                 db  40h ; @
.eh_frame_hdr:00000000000064A5                 db 0C7h
.eh_frame_hdr:00000000000064A6                 db 0FFh
.eh_frame_hdr:00000000000064A7                 db 0FFh
.eh_frame_hdr:00000000000064A8                 db 0F0h
.eh_frame_hdr:00000000000064A9                 db    5
.eh_frame_hdr:00000000000064AA                 db    0
.eh_frame_hdr:00000000000064AB                 db    0
.eh_frame_hdr:00000000000064AC                 db  30h ; 0
.eh_frame_hdr:00000000000064AD                 db 0C8h
.eh_frame_hdr:00000000000064AE                 db 0FFh
.eh_frame_hdr:00000000000064AF                 db 0FFh
.eh_frame_hdr:00000000000064B0                 db  34h ; 4
.eh_frame_hdr:00000000000064B1                 db    6
.eh_frame_hdr:00000000000064B2                 db    0
.eh_frame_hdr:00000000000064B3                 db    0
.eh_frame_hdr:00000000000064B4                 db  70h ; p
.eh_frame_hdr:00000000000064B5                 db 0DAh
.eh_frame_hdr:00000000000064B6                 db 0FFh
.eh_frame_hdr:00000000000064B7                 db 0FFh
.eh_frame_hdr:00000000000064B8                 db 0ACh
.eh_frame_hdr:00000000000064B9                 db    6
.eh_frame_hdr:00000000000064BA                 db    0
.eh_frame_hdr:00000000000064BB                 db    0
.eh_frame_hdr:00000000000064BC                 db  20h
.eh_frame_hdr:00000000000064BD                 db 0DCh
.eh_frame_hdr:00000000000064BE                 db 0FFh
.eh_frame_hdr:00000000000064BF                 db 0FFh
.eh_frame_hdr:00000000000064C0                 db  18h
.eh_frame_hdr:00000000000064C1                 db    7
.eh_frame_hdr:00000000000064C2                 db    0
.eh_frame_hdr:00000000000064C3                 db    0
.eh_frame_hdr:00000000000064C4                 db  60h ; `
.eh_frame_hdr:00000000000064C5                 db 0DCh
.eh_frame_hdr:00000000000064C6                 db 0FFh
.eh_frame_hdr:00000000000064C7                 db 0FFh
.eh_frame_hdr:00000000000064C8                 db  44h ; D
.eh_frame_hdr:00000000000064C9                 db    7
.eh_frame_hdr:00000000000064CA                 db    0
.eh_frame_hdr:00000000000064CB                 db    0
.eh_frame_hdr:00000000000064CC                 db  80h
.eh_frame_hdr:00000000000064CD                 db 0DCh
.eh_frame_hdr:00000000000064CE                 db 0FFh
.eh_frame_hdr:00000000000064CF                 db 0FFh
.eh_frame_hdr:00000000000064D0                 db  58h ; X
.eh_frame_hdr:00000000000064D1                 db    7
.eh_frame_hdr:00000000000064D2                 db    0
.eh_frame_hdr:00000000000064D3                 db    0
.eh_frame_hdr:00000000000064D4                 db 0A0h
.eh_frame_hdr:00000000000064D5                 db 0DCh
.eh_frame_hdr:00000000000064D6                 db 0FFh
.eh_frame_hdr:00000000000064D7                 db 0FFh
.eh_frame_hdr:00000000000064D8                 db  6Ch ; l
.eh_frame_hdr:00000000000064D9                 db    7
.eh_frame_hdr:00000000000064DA                 db    0
.eh_frame_hdr:00000000000064DB                 db    0
.eh_frame_hdr:00000000000064DC                 db 0E0h
.eh_frame_hdr:00000000000064DD                 db 0DCh
.eh_frame_hdr:00000000000064DE                 db 0FFh
.eh_frame_hdr:00000000000064DF                 db 0FFh
.eh_frame_hdr:00000000000064E0                 db  80h
.eh_frame_hdr:00000000000064E1                 db    7
.eh_frame_hdr:00000000000064E2                 db    0
.eh_frame_hdr:00000000000064E3                 db    0
.eh_frame_hdr:00000000000064E4                 db    0
.eh_frame_hdr:00000000000064E5                 db 0DDh
.eh_frame_hdr:00000000000064E6                 db 0FFh
.eh_frame_hdr:00000000000064E7                 db 0FFh
.eh_frame_hdr:00000000000064E8                 db  94h
.eh_frame_hdr:00000000000064E9                 db    7
.eh_frame_hdr:00000000000064EA                 db    0
.eh_frame_hdr:00000000000064EB                 db    0
.eh_frame_hdr:00000000000064EC                 db  30h ; 0
.eh_frame_hdr:00000000000064ED                 db 0DDh
.eh_frame_hdr:00000000000064EE                 db 0FFh
.eh_frame_hdr:00000000000064EF                 db 0FFh
.eh_frame_hdr:00000000000064F0                 db 0A8h
.eh_frame_hdr:00000000000064F1                 db    7
.eh_frame_hdr:00000000000064F2                 db    0
.eh_frame_hdr:00000000000064F3                 db    0
.eh_frame_hdr:00000000000064F4                 db 0B0h
.eh_frame_hdr:00000000000064F5                 db 0DDh
.eh_frame_hdr:00000000000064F6                 db 0FFh
.eh_frame_hdr:00000000000064F7                 db 0FFh
.eh_frame_hdr:00000000000064F8                 db 0FCh
.eh_frame_hdr:00000000000064F9                 db    7
.eh_frame_hdr:00000000000064FA                 db    0
.eh_frame_hdr:00000000000064FB                 db    0
.eh_frame_hdr:00000000000064FC                 db 0A0h
.eh_frame_hdr:00000000000064FD                 db 0DEh
.eh_frame_hdr:00000000000064FE                 db 0FFh
.eh_frame_hdr:00000000000064FF                 db 0FFh
.eh_frame_hdr:0000000000006500                 db  68h ; h
.eh_frame_hdr:0000000000006501                 db    8
.eh_frame_hdr:0000000000006502                 db    0
.eh_frame_hdr:0000000000006503                 db    0
.eh_frame_hdr:0000000000006504                 db 0B0h
.eh_frame_hdr:0000000000006505                 db 0DEh
.eh_frame_hdr:0000000000006506                 db 0FFh
.eh_frame_hdr:0000000000006507                 db 0FFh
.eh_frame_hdr:0000000000006508                 db  7Ch ; |
.eh_frame_hdr:0000000000006509                 db    8
.eh_frame_hdr:000000000000650A                 db    0
.eh_frame_hdr:000000000000650B                 db    0
.eh_frame_hdr:000000000000650C                 db  50h ; P
.eh_frame_hdr:000000000000650D                 db 0DFh
.eh_frame_hdr:000000000000650E                 db 0FFh
.eh_frame_hdr:000000000000650F                 db 0FFh
.eh_frame_hdr:0000000000006510                 db 0A8h
.eh_frame_hdr:0000000000006511                 db    8
.eh_frame_hdr:0000000000006512                 db    0
.eh_frame_hdr:0000000000006513                 db    0
.eh_frame_hdr:0000000000006514                 db  70h ; p
.eh_frame_hdr:0000000000006515                 db 0DFh
.eh_frame_hdr:0000000000006516                 db 0FFh
.eh_frame_hdr:0000000000006517                 db 0FFh
.eh_frame_hdr:0000000000006518                 db 0BCh
.eh_frame_hdr:0000000000006519                 db    8
.eh_frame_hdr:000000000000651A                 db    0
.eh_frame_hdr:000000000000651B                 db    0
.eh_frame_hdr:000000000000651C                 db  80h
.eh_frame_hdr:000000000000651D                 db 0DFh
.eh_frame_hdr:000000000000651E                 db 0FFh
.eh_frame_hdr:000000000000651F                 db 0FFh
.eh_frame_hdr:0000000000006520                 db 0D0h
.eh_frame_hdr:0000000000006521                 db    8
.eh_frame_hdr:0000000000006522                 db    0
.eh_frame_hdr:0000000000006523                 db    0
.eh_frame_hdr:0000000000006524                 db 0A0h
.eh_frame_hdr:0000000000006525                 db 0DFh
.eh_frame_hdr:0000000000006526                 db 0FFh
.eh_frame_hdr:0000000000006527                 db 0FFh
.eh_frame_hdr:0000000000006528                 db 0E4h
.eh_frame_hdr:0000000000006529                 db    8
.eh_frame_hdr:000000000000652A                 db    0
.eh_frame_hdr:000000000000652B                 db    0
.eh_frame_hdr:000000000000652C                 db 0C0h
.eh_frame_hdr:000000000000652D                 db 0DFh
.eh_frame_hdr:000000000000652E                 db 0FFh
.eh_frame_hdr:000000000000652F                 db 0FFh
.eh_frame_hdr:0000000000006530                 db 0F8h
.eh_frame_hdr:0000000000006531                 db    8
.eh_frame_hdr:0000000000006532                 db    0
.eh_frame_hdr:0000000000006533                 db    0
.eh_frame_hdr:0000000000006534                 db  50h ; P
.eh_frame_hdr:0000000000006535                 db 0E0h
.eh_frame_hdr:0000000000006536                 db 0FFh
.eh_frame_hdr:0000000000006537                 db 0FFh
.eh_frame_hdr:0000000000006538                 db  14h
.eh_frame_hdr:0000000000006539                 db    9
.eh_frame_hdr:000000000000653A                 db    0
.eh_frame_hdr:000000000000653B                 db    0
.eh_frame_hdr:000000000000653C                 db 0E0h
.eh_frame_hdr:000000000000653D                 db 0E0h
.eh_frame_hdr:000000000000653E                 db 0FFh
.eh_frame_hdr:000000000000653F                 db 0FFh
.eh_frame_hdr:0000000000006540                 db  30h ; 0
.eh_frame_hdr:0000000000006541                 db    9
.eh_frame_hdr:0000000000006542                 db    0
.eh_frame_hdr:0000000000006543                 db    0
.eh_frame_hdr:0000000000006544                 db 0F0h
.eh_frame_hdr:0000000000006545                 db 0E0h
.eh_frame_hdr:0000000000006546                 db 0FFh
.eh_frame_hdr:0000000000006547                 db 0FFh
.eh_frame_hdr:0000000000006548                 db  44h ; D
.eh_frame_hdr:0000000000006549                 db    9
.eh_frame_hdr:000000000000654A                 db    0
.eh_frame_hdr:000000000000654B                 db    0
.eh_frame_hdr:000000000000654C                 db    0
.eh_frame_hdr:000000000000654D                 db 0E1h
.eh_frame_hdr:000000000000654E                 db 0FFh
.eh_frame_hdr:000000000000654F                 db 0FFh
.eh_frame_hdr:0000000000006550                 db  58h ; X
.eh_frame_hdr:0000000000006551                 db    9
.eh_frame_hdr:0000000000006552                 db    0
.eh_frame_hdr:0000000000006553                 db    0
.eh_frame_hdr:0000000000006554                 db 0A0h
.eh_frame_hdr:0000000000006555                 db 0E1h
.eh_frame_hdr:0000000000006556                 db 0FFh
.eh_frame_hdr:0000000000006557                 db 0FFh
.eh_frame_hdr:0000000000006558                 db  74h ; t
.eh_frame_hdr:0000000000006559                 db    9
.eh_frame_hdr:000000000000655A                 db    0
.eh_frame_hdr:000000000000655B                 db    0
.eh_frame_hdr:000000000000655C                 db 0B0h
.eh_frame_hdr:000000000000655D                 db 0E1h
.eh_frame_hdr:000000000000655E                 db 0FFh
.eh_frame_hdr:000000000000655F                 db 0FFh
.eh_frame_hdr:0000000000006560                 db  88h
.eh_frame_hdr:0000000000006561                 db    9
.eh_frame_hdr:0000000000006562                 db    0
.eh_frame_hdr:0000000000006563                 db    0
.eh_frame_hdr:0000000000006564                 db 0D0h
.eh_frame_hdr:0000000000006565                 db 0E1h
.eh_frame_hdr:0000000000006566                 db 0FFh
.eh_frame_hdr:0000000000006567                 db 0FFh
.eh_frame_hdr:0000000000006568                 db  9Ch
.eh_frame_hdr:0000000000006569                 db    9
.eh_frame_hdr:000000000000656A                 db    0
.eh_frame_hdr:000000000000656B                 db    0
.eh_frame_hdr:000000000000656C                 db 0E0h
.eh_frame_hdr:000000000000656D                 db 0E1h
.eh_frame_hdr:000000000000656E                 db 0FFh
.eh_frame_hdr:000000000000656F                 db 0FFh
.eh_frame_hdr:0000000000006570                 db 0B0h
.eh_frame_hdr:0000000000006571                 db    9
.eh_frame_hdr:0000000000006572                 db    0
.eh_frame_hdr:0000000000006573                 db    0
.eh_frame_hdr:0000000000006574                 db  70h ; p
.eh_frame_hdr:0000000000006575                 db 0E2h
.eh_frame_hdr:0000000000006576                 db 0FFh
.eh_frame_hdr:0000000000006577                 db 0FFh
.eh_frame_hdr:0000000000006578                 db 0CCh
.eh_frame_hdr:0000000000006579                 db    9
.eh_frame_hdr:000000000000657A                 db    0
.eh_frame_hdr:000000000000657B                 db    0
.eh_frame_hdr:000000000000657C                 db  10h
.eh_frame_hdr:000000000000657D                 db 0E3h
.eh_frame_hdr:000000000000657E                 db 0FFh
.eh_frame_hdr:000000000000657F                 db 0FFh
.eh_frame_hdr:0000000000006580                 db 0E8h
.eh_frame_hdr:0000000000006581                 db    9
.eh_frame_hdr:0000000000006582                 db    0
.eh_frame_hdr:0000000000006583                 db    0
.eh_frame_hdr:0000000000006584                 db  20h
.eh_frame_hdr:0000000000006585                 db 0E3h
.eh_frame_hdr:0000000000006586                 db 0FFh
.eh_frame_hdr:0000000000006587                 db 0FFh
.eh_frame_hdr:0000000000006588                 db 0FCh
.eh_frame_hdr:0000000000006589                 db    9
.eh_frame_hdr:000000000000658A                 db    0
.eh_frame_hdr:000000000000658B                 db    0
.eh_frame_hdr:000000000000658C                 db  40h ; @
.eh_frame_hdr:000000000000658D                 db 0E3h
.eh_frame_hdr:000000000000658E                 db 0FFh
.eh_frame_hdr:000000000000658F                 db 0FFh
.eh_frame_hdr:0000000000006590                 db  10h
.eh_frame_hdr:0000000000006591                 db  0Ah
.eh_frame_hdr:0000000000006592                 db    0
.eh_frame_hdr:0000000000006593                 db    0
.eh_frame_hdr:0000000000006594                 db  60h ; `
.eh_frame_hdr:0000000000006595                 db 0E3h
.eh_frame_hdr:0000000000006596                 db 0FFh
.eh_frame_hdr:0000000000006597                 db 0FFh
.eh_frame_hdr:0000000000006598                 db  24h ; $
.eh_frame_hdr:0000000000006599                 db  0Ah
.eh_frame_hdr:000000000000659A                 db    0
.eh_frame_hdr:000000000000659B                 db    0
.eh_frame_hdr:000000000000659C                 db  70h ; p
.eh_frame_hdr:000000000000659D                 db 0E3h
.eh_frame_hdr:000000000000659E                 db 0FFh
.eh_frame_hdr:000000000000659F                 db 0FFh
.eh_frame_hdr:00000000000065A0                 db  38h ; 8
.eh_frame_hdr:00000000000065A1                 db  0Ah
.eh_frame_hdr:00000000000065A2                 db    0
.eh_frame_hdr:00000000000065A3                 db    0
.eh_frame_hdr:00000000000065A4                 db  90h
.eh_frame_hdr:00000000000065A5                 db 0E3h
.eh_frame_hdr:00000000000065A6                 db 0FFh
.eh_frame_hdr:00000000000065A7                 db 0FFh
.eh_frame_hdr:00000000000065A8                 db  4Ch ; L
.eh_frame_hdr:00000000000065A9                 db  0Ah
.eh_frame_hdr:00000000000065AA                 db    0
.eh_frame_hdr:00000000000065AB                 db    0
.eh_frame_hdr:00000000000065AC                 db 0B0h
.eh_frame_hdr:00000000000065AD                 db 0E3h
.eh_frame_hdr:00000000000065AE                 db 0FFh
.eh_frame_hdr:00000000000065AF                 db 0FFh
.eh_frame_hdr:00000000000065B0                 db  60h ; `
.eh_frame_hdr:00000000000065B1                 db  0Ah
.eh_frame_hdr:00000000000065B2                 db    0
.eh_frame_hdr:00000000000065B3                 db    0
.eh_frame_hdr:00000000000065B4                 db 0D0h
.eh_frame_hdr:00000000000065B5                 db 0E3h
.eh_frame_hdr:00000000000065B6                 db 0FFh
.eh_frame_hdr:00000000000065B7                 db 0FFh
.eh_frame_hdr:00000000000065B8                 db  78h ; x
.eh_frame_hdr:00000000000065B9                 db  0Ah
.eh_frame_hdr:00000000000065BA                 db    0
.eh_frame_hdr:00000000000065BB                 db    0
.eh_frame_hdr:00000000000065BC                 db 0F0h
.eh_frame_hdr:00000000000065BD                 db 0E7h
.eh_frame_hdr:00000000000065BE                 db 0FFh
.eh_frame_hdr:00000000000065BF                 db 0FFh
.eh_frame_hdr:00000000000065C0                 db  8Ch
.eh_frame_hdr:00000000000065C1                 db  0Bh
.eh_frame_hdr:00000000000065C2                 db    0
.eh_frame_hdr:00000000000065C3                 db    0
.eh_frame_hdr:00000000000065C4                 db  10h
.eh_frame_hdr:00000000000065C5                 db 0E8h
.eh_frame_hdr:00000000000065C6                 db 0FFh
.eh_frame_hdr:00000000000065C7                 db 0FFh
.eh_frame_hdr:00000000000065C8                 db 0A0h
.eh_frame_hdr:00000000000065C9                 db  0Bh
.eh_frame_hdr:00000000000065CA                 db    0
.eh_frame_hdr:00000000000065CB                 db    0
.eh_frame_hdr:00000000000065CC                 db  90h
.eh_frame_hdr:00000000000065CD                 db 0E8h
.eh_frame_hdr:00000000000065CE                 db 0FFh
.eh_frame_hdr:00000000000065CF                 db 0FFh
.eh_frame_hdr:00000000000065D0                 db 0BCh
.eh_frame_hdr:00000000000065D1                 db  0Bh
.eh_frame_hdr:00000000000065D2                 db    0
.eh_frame_hdr:00000000000065D3                 db    0
.eh_frame_hdr:00000000000065D4                 db  70h ; p
.eh_frame_hdr:00000000000065D5                 db 0E9h
.eh_frame_hdr:00000000000065D6                 db 0FFh
.eh_frame_hdr:00000000000065D7                 db 0FFh
.eh_frame_hdr:00000000000065D8                 db 0E8h
.eh_frame_hdr:00000000000065D9                 db  0Bh
.eh_frame_hdr:00000000000065DA                 db    0
.eh_frame_hdr:00000000000065DB                 db    0
.eh_frame_hdr:00000000000065DC                 db 0F0h
.eh_frame_hdr:00000000000065DD                 db 0E9h
.eh_frame_hdr:00000000000065DE                 db 0FFh
.eh_frame_hdr:00000000000065DF                 db 0FFh
.eh_frame_hdr:00000000000065E0                 db    8
.eh_frame_hdr:00000000000065E1                 db  0Ch
.eh_frame_hdr:00000000000065E2                 db    0
.eh_frame_hdr:00000000000065E3                 db    0
.eh_frame_hdr:00000000000065E4                 db  10h
.eh_frame_hdr:00000000000065E5                 db 0EAh
.eh_frame_hdr:00000000000065E6                 db 0FFh
.eh_frame_hdr:00000000000065E7                 db 0FFh
.eh_frame_hdr:00000000000065E8                 db  24h ; $
.eh_frame_hdr:00000000000065E9                 db  0Ch
.eh_frame_hdr:00000000000065EA                 db    0
.eh_frame_hdr:00000000000065EB                 db    0
.eh_frame_hdr:00000000000065EC                 db  40h ; @
.eh_frame_hdr:00000000000065ED                 db 0EAh
.eh_frame_hdr:00000000000065EE                 db 0FFh
.eh_frame_hdr:00000000000065EF                 db 0FFh
.eh_frame_hdr:00000000000065F0                 db  38h ; 8
.eh_frame_hdr:00000000000065F1                 db  0Ch
.eh_frame_hdr:00000000000065F2                 db    0
.eh_frame_hdr:00000000000065F3                 db    0
.eh_frame_hdr:00000000000065F4                 db  50h ; P
.eh_frame_hdr:00000000000065F5                 db 0EAh
.eh_frame_hdr:00000000000065F6                 db 0FFh
.eh_frame_hdr:00000000000065F7                 db 0FFh
.eh_frame_hdr:00000000000065F8                 db  4Ch ; L
.eh_frame_hdr:00000000000065F9                 db  0Ch
.eh_frame_hdr:00000000000065FA                 db    0
.eh_frame_hdr:00000000000065FB                 db    0
.eh_frame_hdr:00000000000065FC                 db  90h
.eh_frame_hdr:00000000000065FD                 db 0EAh
.eh_frame_hdr:00000000000065FE                 db 0FFh
.eh_frame_hdr:00000000000065FF                 db 0FFh
.eh_frame_hdr:0000000000006600                 db  70h ; p
.eh_frame_hdr:0000000000006601                 db  0Ch
.eh_frame_hdr:0000000000006602                 db    0
.eh_frame_hdr:0000000000006603                 db    0
.eh_frame_hdr:0000000000006604                 db 0C0h
.eh_frame_hdr:0000000000006605                 db 0EAh
.eh_frame_hdr:0000000000006606                 db 0FFh
.eh_frame_hdr:0000000000006607                 db 0FFh
.eh_frame_hdr:0000000000006608                 db  84h
.eh_frame_hdr:0000000000006609                 db  0Ch
.eh_frame_hdr:000000000000660A                 db    0
.eh_frame_hdr:000000000000660B                 db    0
.eh_frame_hdr:000000000000660C                 db  50h ; P
.eh_frame_hdr:000000000000660D                 db 0EBh
.eh_frame_hdr:000000000000660E                 db 0FFh
.eh_frame_hdr:000000000000660F                 db 0FFh
.eh_frame_hdr:0000000000006610                 db  9Ch
.eh_frame_hdr:0000000000006611                 db  0Ch
.eh_frame_hdr:0000000000006612                 db    0
.eh_frame_hdr:0000000000006613                 db    0
.eh_frame_hdr:0000000000006614                 db 0A0h
.eh_frame_hdr:0000000000006615                 db 0EBh
.eh_frame_hdr:0000000000006616                 db 0FFh
.eh_frame_hdr:0000000000006617                 db 0FFh
.eh_frame_hdr:0000000000006618                 db 0B4h
.eh_frame_hdr:0000000000006619                 db  0Ch
.eh_frame_hdr:000000000000661A                 db    0
.eh_frame_hdr:000000000000661B                 db    0
.eh_frame_hdr:000000000000661C                 db 0C0h
.eh_frame_hdr:000000000000661D                 db 0EBh
.eh_frame_hdr:000000000000661E                 db 0FFh
.eh_frame_hdr:000000000000661F                 db 0FFh
.eh_frame_hdr:0000000000006620                 db 0D0h
.eh_frame_hdr:0000000000006621                 db  0Ch
.eh_frame_hdr:0000000000006622                 db    0
.eh_frame_hdr:0000000000006623                 db    0
.eh_frame_hdr:0000000000006624                 db 0F0h
.eh_frame_hdr:0000000000006625                 db 0EBh
.eh_frame_hdr:0000000000006626                 db 0FFh
.eh_frame_hdr:0000000000006627                 db 0FFh
.eh_frame_hdr:0000000000006628                 db 0ECh
.eh_frame_hdr:0000000000006629                 db  0Ch
.eh_frame_hdr:000000000000662A                 db    0
.eh_frame_hdr:000000000000662B                 db    0
.eh_frame_hdr:000000000000662C                 db  20h
.eh_frame_hdr:000000000000662D                 db 0ECh
.eh_frame_hdr:000000000000662E                 db 0FFh
.eh_frame_hdr:000000000000662F                 db 0FFh
.eh_frame_hdr:0000000000006630                 db  14h
.eh_frame_hdr:0000000000006631                 db  0Dh
.eh_frame_hdr:0000000000006632                 db    0
.eh_frame_hdr:0000000000006633                 db    0
.eh_frame_hdr:0000000000006634                 db  40h ; @
.eh_frame_hdr:0000000000006635                 db 0ECh
.eh_frame_hdr:0000000000006636                 db 0FFh
.eh_frame_hdr:0000000000006637                 db 0FFh
.eh_frame_hdr:0000000000006638                 db  30h ; 0
.eh_frame_hdr:0000000000006639                 db  0Dh
.eh_frame_hdr:000000000000663A                 db    0
.eh_frame_hdr:000000000000663B                 db    0
.eh_frame_hdr:000000000000663C                 db  80h
.eh_frame_hdr:000000000000663D                 db 0ECh
.eh_frame_hdr:000000000000663E                 db 0FFh
.eh_frame_hdr:000000000000663F                 db 0FFh
.eh_frame_hdr:0000000000006640                 db  48h ; H
.eh_frame_hdr:0000000000006641                 db  0Dh
.eh_frame_hdr:0000000000006642                 db    0
.eh_frame_hdr:0000000000006643                 db    0
.eh_frame_hdr:0000000000006644                 db 0A0h
.eh_frame_hdr:0000000000006645                 db 0ECh
.eh_frame_hdr:0000000000006646                 db 0FFh
.eh_frame_hdr:0000000000006647                 db 0FFh
.eh_frame_hdr:0000000000006648                 db  68h ; h
.eh_frame_hdr:0000000000006649                 db  0Dh
.eh_frame_hdr:000000000000664A                 db    0
.eh_frame_hdr:000000000000664B                 db    0
.eh_frame_hdr:000000000000664C                 db  20h
.eh_frame_hdr:000000000000664D                 db 0EDh
.eh_frame_hdr:000000000000664E                 db 0FFh
.eh_frame_hdr:000000000000664F                 db 0FFh
.eh_frame_hdr:0000000000006650                 db 0A0h
.eh_frame_hdr:0000000000006651                 db  0Dh
.eh_frame_hdr:0000000000006652                 db    0
.eh_frame_hdr:0000000000006653                 db    0
.eh_frame_hdr:0000000000006654                 db  60h ; `
.eh_frame_hdr:0000000000006655                 db 0EDh
.eh_frame_hdr:0000000000006656                 db 0FFh
.eh_frame_hdr:0000000000006657                 db 0FFh
.eh_frame_hdr:0000000000006658                 db 0C0h
.eh_frame_hdr:0000000000006659                 db  0Dh
.eh_frame_hdr:000000000000665A                 db    0
.eh_frame_hdr:000000000000665B                 db    0
.eh_frame_hdr:000000000000665C                 db 0C0h
.eh_frame_hdr:000000000000665D                 db 0EDh
.eh_frame_hdr:000000000000665E                 db 0FFh
.eh_frame_hdr:000000000000665F                 db 0FFh
.eh_frame_hdr:0000000000006660                 db 0F0h
.eh_frame_hdr:0000000000006661                 db  0Dh
.eh_frame_hdr:0000000000006662                 db    0
.eh_frame_hdr:0000000000006663                 db    0
.eh_frame_hdr:0000000000006664                 db  50h ; P
.eh_frame_hdr:0000000000006665                 db 0EEh
.eh_frame_hdr:0000000000006666                 db 0FFh
.eh_frame_hdr:0000000000006667                 db 0FFh
.eh_frame_hdr:0000000000006668                 db  30h ; 0
.eh_frame_hdr:0000000000006669                 db  0Eh
.eh_frame_hdr:000000000000666A                 db    0
.eh_frame_hdr:000000000000666B                 db    0
.eh_frame_hdr:000000000000666C                 db 0D0h
.eh_frame_hdr:000000000000666D                 db 0EEh
.eh_frame_hdr:000000000000666E                 db 0FFh
.eh_frame_hdr:000000000000666F                 db 0FFh
.eh_frame_hdr:0000000000006670                 db  80h
.eh_frame_hdr:0000000000006671                 db  0Eh
.eh_frame_hdr:0000000000006672                 db    0
.eh_frame_hdr:0000000000006673                 db    0
.eh_frame_hdr:0000000000006674                 db  30h ; 0
.eh_frame_hdr:0000000000006675                 db 0EFh
.eh_frame_hdr:0000000000006676                 db 0FFh
.eh_frame_hdr:0000000000006677                 db 0FFh
.eh_frame_hdr:0000000000006678                 db 0A0h
.eh_frame_hdr:0000000000006679                 db  0Eh
.eh_frame_hdr:000000000000667A                 db    0
.eh_frame_hdr:000000000000667B                 db    0
.eh_frame_hdr:000000000000667C                 db  70h ; p
.eh_frame_hdr:000000000000667D                 db 0EFh
.eh_frame_hdr:000000000000667E                 db 0FFh
.eh_frame_hdr:000000000000667F                 db 0FFh
.eh_frame_hdr:0000000000006680                 db 0C0h
.eh_frame_hdr:0000000000006681                 db  0Eh
.eh_frame_hdr:0000000000006682                 db    0
.eh_frame_hdr:0000000000006683                 db    0
.eh_frame_hdr:0000000000006684                 db 0E0h
.eh_frame_hdr:0000000000006685                 db 0EFh
.eh_frame_hdr:0000000000006686                 db 0FFh
.eh_frame_hdr:0000000000006687                 db 0FFh
.eh_frame_hdr:0000000000006688                 db    8
.eh_frame_hdr:0000000000006689                 db  0Fh
.eh_frame_hdr:000000000000668A                 db    0
.eh_frame_hdr:000000000000668B                 db    0
.eh_frame_hdr:000000000000668C                 db 0F0h
.eh_frame_hdr:000000000000668D                 db 0EFh
.eh_frame_hdr:000000000000668E                 db 0FFh
.eh_frame_hdr:000000000000668F                 db 0FFh
.eh_frame_hdr:0000000000006690                 db  20h
.eh_frame_hdr:0000000000006691                 db  0Fh
.eh_frame_hdr:0000000000006692                 db    0
.eh_frame_hdr:0000000000006693                 db    0
.eh_frame_hdr:0000000000006693 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006693
LOAD:0000000000006694 ; ===========================================================================
LOAD:0000000000006694
LOAD:0000000000006694 ; Segment type: Pure code
LOAD:0000000000006694 ; Segment permissions: Read/Execute
LOAD:0000000000006694 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006694                 assume cs:LOAD
LOAD:0000000000006694                 ;org 6694h
LOAD:0000000000006694                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006694                 align 8
LOAD:0000000000006694 LOAD            ends
LOAD:0000000000006694
.eh_frame:0000000000006698 ; ===========================================================================
.eh_frame:0000000000006698
.eh_frame:0000000000006698 ; Segment type: Pure data
.eh_frame:0000000000006698 ; Segment permissions: Read
.eh_frame:0000000000006698 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006698                 assume cs:_eh_frame
.eh_frame:0000000000006698                 ;org 6698h
.eh_frame:0000000000006698                 db  14h
.eh_frame:0000000000006699                 db    0
.eh_frame:000000000000669A                 db    0
.eh_frame:000000000000669B                 db    0
.eh_frame:000000000000669C                 db    0
.eh_frame:000000000000669D                 db    0
.eh_frame:000000000000669E                 db    0
.eh_frame:000000000000669F                 db    0
.eh_frame:00000000000066A0                 db    1
.eh_frame:00000000000066A1                 db  7Ah ; z
.eh_frame:00000000000066A2                 db  52h ; R
.eh_frame:00000000000066A3                 db    0
.eh_frame:00000000000066A4                 db    1
.eh_frame:00000000000066A5                 db  78h ; x
.eh_frame:00000000000066A6                 db  10h
.eh_frame:00000000000066A7                 db    1
.eh_frame:00000000000066A8                 db  1Bh
.eh_frame:00000000000066A9                 db  0Ch
.eh_frame:00000000000066AA                 db    7
.eh_frame:00000000000066AB                 db    8
.eh_frame:00000000000066AC                 db  90h
.eh_frame:00000000000066AD                 db    1
.eh_frame:00000000000066AE                 db    7
.eh_frame:00000000000066AF                 db  10h
.eh_frame:00000000000066B0                 db  14h
.eh_frame:00000000000066B1                 db    0
.eh_frame:00000000000066B2                 db    0
.eh_frame:00000000000066B3                 db    0
.eh_frame:00000000000066B4                 db  1Ch
.eh_frame:00000000000066B5                 db    0
.eh_frame:00000000000066B6                 db    0
.eh_frame:00000000000066B7                 db    0
.eh_frame:00000000000066B8                 db  38h ; 8
.eh_frame:00000000000066B9                 db 0B4h
.eh_frame:00000000000066BA                 db 0FFh
.eh_frame:00000000000066BB                 db 0FFh
.eh_frame:00000000000066BC                 db  2Bh ; +
.eh_frame:00000000000066BD                 db    0
.eh_frame:00000000000066BE                 db    0
.eh_frame:00000000000066BF                 db    0
.eh_frame:00000000000066C0                 db    0
.eh_frame:00000000000066C1                 db    0
.eh_frame:00000000000066C2                 db    0
.eh_frame:00000000000066C3                 db    0
.eh_frame:00000000000066C4                 db    0
.eh_frame:00000000000066C5                 db    0
.eh_frame:00000000000066C6                 db    0
.eh_frame:00000000000066C7                 db    0
.eh_frame:00000000000066C8                 db  14h
.eh_frame:00000000000066C9                 db    0
.eh_frame:00000000000066CA                 db    0
.eh_frame:00000000000066CB                 db    0
.eh_frame:00000000000066CC                 db    0
.eh_frame:00000000000066CD                 db    0
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db    1
.eh_frame:00000000000066D1                 db  7Ah ; z
.eh_frame:00000000000066D2                 db  52h ; R
.eh_frame:00000000000066D3                 db    0
.eh_frame:00000000000066D4                 db    1
.eh_frame:00000000000066D5                 db  78h ; x
.eh_frame:00000000000066D6                 db  10h
.eh_frame:00000000000066D7                 db    1
.eh_frame:00000000000066D8                 db  1Bh
.eh_frame:00000000000066D9                 db  0Ch
.eh_frame:00000000000066DA                 db    7
.eh_frame:00000000000066DB                 db    8
.eh_frame:00000000000066DC                 db  90h
.eh_frame:00000000000066DD                 db    1
.eh_frame:00000000000066DE                 db    0
.eh_frame:00000000000066DF                 db    0
.eh_frame:00000000000066E0                 db  24h ; $
.eh_frame:00000000000066E1                 db    0
.eh_frame:00000000000066E2                 db    0
.eh_frame:00000000000066E3                 db    0
.eh_frame:00000000000066E4                 db  1Ch
.eh_frame:00000000000066E5                 db    0
.eh_frame:00000000000066E6                 db    0
.eh_frame:00000000000066E7                 db    0
.eh_frame:00000000000066E8                 db  18h
.eh_frame:00000000000066E9                 db 0ADh
.eh_frame:00000000000066EA                 db 0FFh
.eh_frame:00000000000066EB                 db 0FFh
.eh_frame:00000000000066EC                 db    0
.eh_frame:00000000000066ED                 db    3
.eh_frame:00000000000066EE                 db    0
.eh_frame:00000000000066EF                 db    0
.eh_frame:00000000000066F0                 db    0
.eh_frame:00000000000066F1                 db  0Eh
.eh_frame:00000000000066F2                 db  10h
.eh_frame:00000000000066F3                 db  46h ; F
.eh_frame:00000000000066F4                 db  0Eh
.eh_frame:00000000000066F5                 db  18h
.eh_frame:00000000000066F6                 db  4Ah ; J
.eh_frame:00000000000066F7                 db  0Fh
.eh_frame:00000000000066F8                 db  0Bh
.eh_frame:00000000000066F9                 db  77h ; w
.eh_frame:00000000000066FA                 db    8
.eh_frame:00000000000066FB                 db  80h
.eh_frame:00000000000066FC                 db    0
.eh_frame:00000000000066FD                 db  3Fh ; ?
.eh_frame:00000000000066FE                 db  1Ah
.eh_frame:00000000000066FF                 db  3Bh ; ;
.eh_frame:0000000000006700                 db  2Ah ; *
.eh_frame:0000000000006701                 db  33h ; 3
.eh_frame:0000000000006702                 db  24h ; $
.eh_frame:0000000000006703                 db  22h ; "
.eh_frame:0000000000006704                 db    0
.eh_frame:0000000000006705                 db    0
.eh_frame:0000000000006706                 db    0
.eh_frame:0000000000006707                 db    0
.eh_frame:0000000000006708                 db  14h
.eh_frame:0000000000006709                 db    0
.eh_frame:000000000000670A                 db    0
.eh_frame:000000000000670B                 db    0
.eh_frame:000000000000670C                 db  44h ; D
.eh_frame:000000000000670D                 db    0
.eh_frame:000000000000670E                 db    0
.eh_frame:000000000000670F                 db    0
.eh_frame:0000000000006710                 db 0F0h
.eh_frame:0000000000006711                 db 0AFh
.eh_frame:0000000000006712                 db 0FFh
.eh_frame:0000000000006713                 db 0FFh
.eh_frame:0000000000006714                 db    8
.eh_frame:0000000000006715                 db    0
.eh_frame:0000000000006716                 db    0
.eh_frame:0000000000006717                 db    0
.eh_frame:0000000000006718                 db    0
.eh_frame:0000000000006719                 db    0
.eh_frame:000000000000671A                 db    0
.eh_frame:000000000000671B                 db    0
.eh_frame:000000000000671C                 db    0
.eh_frame:000000000000671D                 db    0
.eh_frame:000000000000671E                 db    0
.eh_frame:000000000000671F                 db    0
.eh_frame:0000000000006720                 db  28h ; (
.eh_frame:0000000000006721                 db    0
.eh_frame:0000000000006722                 db    0
.eh_frame:0000000000006723                 db    0
.eh_frame:0000000000006724                 db  5Ch ; \
.eh_frame:0000000000006725                 db    0
.eh_frame:0000000000006726                 db    0
.eh_frame:0000000000006727                 db    0
.eh_frame:0000000000006728                 db 0D8h
.eh_frame:0000000000006729                 db 0B4h
.eh_frame:000000000000672A                 db 0FFh
.eh_frame:000000000000672B                 db 0FFh
.eh_frame:000000000000672C                 db 0BAh
.eh_frame:000000000000672D                 db    3
.eh_frame:000000000000672E                 db    0
.eh_frame:000000000000672F                 db    0
.eh_frame:0000000000006730                 db    0
.eh_frame:0000000000006731                 db  42h ; B
.eh_frame:0000000000006732                 db  0Eh
.eh_frame:0000000000006733                 db  10h
.eh_frame:0000000000006734                 db  8Dh
.eh_frame:0000000000006735                 db    2
.eh_frame:0000000000006736                 db  42h ; B
.eh_frame:0000000000006737                 db  0Eh
.eh_frame:0000000000006738                 db  18h
.eh_frame:0000000000006739                 db  8Ch
.eh_frame:000000000000673A                 db    3
.eh_frame:000000000000673B                 db  46h ; F
.eh_frame:000000000000673C                 db  0Eh
.eh_frame:000000000000673D                 db  20h
.eh_frame:000000000000673E                 db  86h
.eh_frame:000000000000673F                 db    4
.eh_frame:0000000000006740                 db  41h ; A
.eh_frame:0000000000006741                 db  0Eh
.eh_frame:0000000000006742                 db  28h ; (
.eh_frame:0000000000006743                 db  83h
.eh_frame:0000000000006744                 db    5
.eh_frame:0000000000006745                 db  49h ; I
.eh_frame:0000000000006746                 db  0Eh
.eh_frame:0000000000006747                 db 0B0h
.eh_frame:0000000000006748                 db    1
.eh_frame:0000000000006749                 db    0
.eh_frame:000000000000674A                 db    0
.eh_frame:000000000000674B                 db    0
.eh_frame:000000000000674C                 db  48h ; H
.eh_frame:000000000000674D                 db    0
.eh_frame:000000000000674E                 db    0
.eh_frame:000000000000674F                 db    0
.eh_frame:0000000000006750                 db  88h
.eh_frame:0000000000006751                 db    0
.eh_frame:0000000000006752                 db    0
.eh_frame:0000000000006753                 db    0
.eh_frame:0000000000006754                 db 0BCh
.eh_frame:0000000000006755                 db 0AFh
.eh_frame:0000000000006756                 db 0FFh
.eh_frame:0000000000006757                 db 0FFh
.eh_frame:0000000000006758                 db 0D4h
.eh_frame:0000000000006759                 db    3
.eh_frame:000000000000675A                 db    0
.eh_frame:000000000000675B                 db    0
.eh_frame:000000000000675C                 db    0
.eh_frame:000000000000675D                 db  42h ; B
.eh_frame:000000000000675E                 db  0Eh
.eh_frame:000000000000675F                 db  10h
.eh_frame:0000000000006760                 db  8Fh
.eh_frame:0000000000006761                 db    2
.eh_frame:0000000000006762                 db  42h ; B
.eh_frame:0000000000006763                 db  0Eh
.eh_frame:0000000000006764                 db  18h
.eh_frame:0000000000006765                 db  8Eh
.eh_frame:0000000000006766                 db    3
.eh_frame:0000000000006767                 db  42h ; B
.eh_frame:0000000000006768                 db  0Eh
.eh_frame:0000000000006769                 db  20h
.eh_frame:000000000000676A                 db  8Dh
.eh_frame:000000000000676B                 db    4
.eh_frame:000000000000676C                 db  42h ; B
.eh_frame:000000000000676D                 db  0Eh
.eh_frame:000000000000676E                 db  28h ; (
.eh_frame:000000000000676F                 db  8Ch
.eh_frame:0000000000006770                 db    5
.eh_frame:0000000000006771                 db  41h ; A
.eh_frame:0000000000006772                 db  0Eh
.eh_frame:0000000000006773                 db  30h ; 0
.eh_frame:0000000000006774                 db  86h
.eh_frame:0000000000006775                 db    6
.eh_frame:0000000000006776                 db  41h ; A
.eh_frame:0000000000006777                 db  0Eh
.eh_frame:0000000000006778                 db  38h ; 8
.eh_frame:0000000000006779                 db  83h
.eh_frame:000000000000677A                 db    7
.eh_frame:000000000000677B                 db  49h ; I
.eh_frame:000000000000677C                 db  0Eh
.eh_frame:000000000000677D                 db  60h ; `
.eh_frame:000000000000677E                 db    3
.eh_frame:000000000000677F                 db  74h ; t
.eh_frame:0000000000006780                 db    2
.eh_frame:0000000000006781                 db  0Ah
.eh_frame:0000000000006782                 db  0Eh
.eh_frame:0000000000006783                 db  38h ; 8
.eh_frame:0000000000006784                 db  41h ; A
.eh_frame:0000000000006785                 db  0Eh
.eh_frame:0000000000006786                 db  30h ; 0
.eh_frame:0000000000006787                 db  41h ; A
.eh_frame:0000000000006788                 db  0Eh
.eh_frame:0000000000006789                 db  28h ; (
.eh_frame:000000000000678A                 db  42h ; B
.eh_frame:000000000000678B                 db  0Eh
.eh_frame:000000000000678C                 db  20h
.eh_frame:000000000000678D                 db  42h ; B
.eh_frame:000000000000678E                 db  0Eh
.eh_frame:000000000000678F                 db  18h
.eh_frame:0000000000006790                 db  42h ; B
.eh_frame:0000000000006791                 db  0Eh
.eh_frame:0000000000006792                 db  10h
.eh_frame:0000000000006793                 db  42h ; B
.eh_frame:0000000000006794                 db  0Eh
.eh_frame:0000000000006795                 db    8
.eh_frame:0000000000006796                 db  41h ; A
.eh_frame:0000000000006797                 db  0Bh
.eh_frame:0000000000006798                 db  18h
.eh_frame:0000000000006799                 db    0
.eh_frame:000000000000679A                 db    0
.eh_frame:000000000000679B                 db    0
.eh_frame:000000000000679C                 db 0D4h
.eh_frame:000000000000679D                 db    0
.eh_frame:000000000000679E                 db    0
.eh_frame:000000000000679F                 db    0
.eh_frame:00000000000067A0                 db  20h
.eh_frame:00000000000067A1                 db 0B8h
.eh_frame:00000000000067A2                 db 0FFh
.eh_frame:00000000000067A3                 db 0FFh
.eh_frame:00000000000067A4                 db  3Fh ; ?
.eh_frame:00000000000067A5                 db    0
.eh_frame:00000000000067A6                 db    0
.eh_frame:00000000000067A7                 db    0
.eh_frame:00000000000067A8                 db    0
.eh_frame:00000000000067A9                 db  49h ; I
.eh_frame:00000000000067AA                 db  0Eh
.eh_frame:00000000000067AB                 db  10h
.eh_frame:00000000000067AC                 db  83h
.eh_frame:00000000000067AD                 db    2
.eh_frame:00000000000067AE                 db  75h ; u
.eh_frame:00000000000067AF                 db  0Eh
.eh_frame:00000000000067B0                 db    8
.eh_frame:00000000000067B1                 db    0
.eh_frame:00000000000067B2                 db    0
.eh_frame:00000000000067B3                 db    0
.eh_frame:00000000000067B4                 db  18h
.eh_frame:00000000000067B5                 db    0
.eh_frame:00000000000067B6                 db    0
.eh_frame:00000000000067B7                 db    0
.eh_frame:00000000000067B8                 db 0F0h
.eh_frame:00000000000067B9                 db    0
.eh_frame:00000000000067BA                 db    0
.eh_frame:00000000000067BB                 db    0
.eh_frame:00000000000067BC                 db  44h ; D
.eh_frame:00000000000067BD                 db 0B8h
.eh_frame:00000000000067BE                 db 0FFh
.eh_frame:00000000000067BF                 db 0FFh
.eh_frame:00000000000067C0                 db  3Fh ; ?
.eh_frame:00000000000067C1                 db    0
.eh_frame:00000000000067C2                 db    0
.eh_frame:00000000000067C3                 db    0
.eh_frame:00000000000067C4                 db    0
.eh_frame:00000000000067C5                 db  49h ; I
.eh_frame:00000000000067C6                 db  0Eh
.eh_frame:00000000000067C7                 db  10h
.eh_frame:00000000000067C8                 db  83h
.eh_frame:00000000000067C9                 db    2
.eh_frame:00000000000067CA                 db  75h ; u
.eh_frame:00000000000067CB                 db  0Eh
.eh_frame:00000000000067CC                 db    8
.eh_frame:00000000000067CD                 db    0
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db  34h ; 4
.eh_frame:00000000000067D1                 db    0
.eh_frame:00000000000067D2                 db    0
.eh_frame:00000000000067D3                 db    0
.eh_frame:00000000000067D4                 db  0Ch
.eh_frame:00000000000067D5                 db    1
.eh_frame:00000000000067D6                 db    0
.eh_frame:00000000000067D7                 db    0
.eh_frame:00000000000067D8                 db  68h ; h
.eh_frame:00000000000067D9                 db 0B8h
.eh_frame:00000000000067DA                 db 0FFh
.eh_frame:00000000000067DB                 db 0FFh
.eh_frame:00000000000067DC                 db  14h
.eh_frame:00000000000067DD                 db    1
.eh_frame:00000000000067DE                 db    0
.eh_frame:00000000000067DF                 db    0
.eh_frame:00000000000067E0                 db    0
.eh_frame:00000000000067E1                 db  41h ; A
.eh_frame:00000000000067E2                 db  0Eh
.eh_frame:00000000000067E3                 db  10h
.eh_frame:00000000000067E4                 db  86h
.eh_frame:00000000000067E5                 db    2
.eh_frame:00000000000067E6                 db  41h ; A
.eh_frame:00000000000067E7                 db  0Eh
.eh_frame:00000000000067E8                 db  18h
.eh_frame:00000000000067E9                 db  83h
.eh_frame:00000000000067EA                 db    3
.eh_frame:00000000000067EB                 db  47h ; G
.eh_frame:00000000000067EC                 db  0Eh
.eh_frame:00000000000067ED                 db  20h
.eh_frame:00000000000067EE                 db    2
.eh_frame:00000000000067EF                 db  48h ; H
.eh_frame:00000000000067F0                 db  0Ah
.eh_frame:00000000000067F1                 db  0Eh
.eh_frame:00000000000067F2                 db  18h
.eh_frame:00000000000067F3                 db  41h ; A
.eh_frame:00000000000067F4                 db  0Eh
.eh_frame:00000000000067F5                 db  10h
.eh_frame:00000000000067F6                 db  41h ; A
.eh_frame:00000000000067F7                 db  0Eh
.eh_frame:00000000000067F8                 db    8
.eh_frame:00000000000067F9                 db  45h ; E
.eh_frame:00000000000067FA                 db  0Bh
.eh_frame:00000000000067FB                 db  6Bh ; k
.eh_frame:00000000000067FC                 db  0Ah
.eh_frame:00000000000067FD                 db  0Eh
.eh_frame:00000000000067FE                 db  18h
.eh_frame:00000000000067FF                 db  41h ; A
.eh_frame:0000000000006800                 db  0Eh
.eh_frame:0000000000006801                 db  10h
.eh_frame:0000000000006802                 db  41h ; A
.eh_frame:0000000000006803                 db  0Eh
.eh_frame:0000000000006804                 db    8
.eh_frame:0000000000006805                 db  4Bh ; K
.eh_frame:0000000000006806                 db  0Bh
.eh_frame:0000000000006807                 db    0
.eh_frame:0000000000006808                 db  64h ; d
.eh_frame:0000000000006809                 db    0
.eh_frame:000000000000680A                 db    0
.eh_frame:000000000000680B                 db    0
.eh_frame:000000000000680C                 db  44h ; D
.eh_frame:000000000000680D                 db    1
.eh_frame:000000000000680E                 db    0
.eh_frame:000000000000680F                 db    0
.eh_frame:0000000000006810                 db  50h ; P
.eh_frame:0000000000006811                 db 0B9h
.eh_frame:0000000000006812                 db 0FFh
.eh_frame:0000000000006813                 db 0FFh
.eh_frame:0000000000006814                 db  59h ; Y
.eh_frame:0000000000006815                 db    3
.eh_frame:0000000000006816                 db    0
.eh_frame:0000000000006817                 db    0
.eh_frame:0000000000006818                 db    0
.eh_frame:0000000000006819                 db  42h ; B
.eh_frame:000000000000681A                 db  0Eh
.eh_frame:000000000000681B                 db  10h
.eh_frame:000000000000681C                 db  8Fh
.eh_frame:000000000000681D                 db    2
.eh_frame:000000000000681E                 db  42h ; B
.eh_frame:000000000000681F                 db  0Eh
.eh_frame:0000000000006820                 db  18h
.eh_frame:0000000000006821                 db  8Eh
.eh_frame:0000000000006822                 db    3
.eh_frame:0000000000006823                 db  42h ; B
.eh_frame:0000000000006824                 db  0Eh
.eh_frame:0000000000006825                 db  20h
.eh_frame:0000000000006826                 db  8Dh
.eh_frame:0000000000006827                 db    4
.eh_frame:0000000000006828                 db  42h ; B
.eh_frame:0000000000006829                 db  0Eh
.eh_frame:000000000000682A                 db  28h ; (
.eh_frame:000000000000682B                 db  8Ch
.eh_frame:000000000000682C                 db    5
.eh_frame:000000000000682D                 db  41h ; A
.eh_frame:000000000000682E                 db  0Eh
.eh_frame:000000000000682F                 db  30h ; 0
.eh_frame:0000000000006830                 db  86h
.eh_frame:0000000000006831                 db    6
.eh_frame:0000000000006832                 db  41h ; A
.eh_frame:0000000000006833                 db  0Eh
.eh_frame:0000000000006834                 db  38h ; 8
.eh_frame:0000000000006835                 db  83h
.eh_frame:0000000000006836                 db    7
.eh_frame:0000000000006837                 db  44h ; D
.eh_frame:0000000000006838                 db  0Eh
.eh_frame:0000000000006839                 db  50h ; P
.eh_frame:000000000000683A                 db    3
.eh_frame:000000000000683B                 db  17h
.eh_frame:000000000000683C                 db    1
.eh_frame:000000000000683D                 db  0Ah
.eh_frame:000000000000683E                 db  0Eh
.eh_frame:000000000000683F                 db  38h ; 8
.eh_frame:0000000000006840                 db  41h ; A
.eh_frame:0000000000006841                 db  0Eh
.eh_frame:0000000000006842                 db  30h ; 0
.eh_frame:0000000000006843                 db  41h ; A
.eh_frame:0000000000006844                 db  0Eh
.eh_frame:0000000000006845                 db  28h ; (
.eh_frame:0000000000006846                 db  42h ; B
.eh_frame:0000000000006847                 db  0Eh
.eh_frame:0000000000006848                 db  20h
.eh_frame:0000000000006849                 db  42h ; B
.eh_frame:000000000000684A                 db  0Eh
.eh_frame:000000000000684B                 db  18h
.eh_frame:000000000000684C                 db  42h ; B
.eh_frame:000000000000684D                 db  0Eh
.eh_frame:000000000000684E                 db  10h
.eh_frame:000000000000684F                 db  42h ; B
.eh_frame:0000000000006850                 db  0Eh
.eh_frame:0000000000006851                 db    8
.eh_frame:0000000000006852                 db  41h ; A
.eh_frame:0000000000006853                 db  0Bh
.eh_frame:0000000000006854                 db    3
.eh_frame:0000000000006855                 db 0C6h
.eh_frame:0000000000006856                 db    1
.eh_frame:0000000000006857                 db  0Ah
.eh_frame:0000000000006858                 db  0Eh
.eh_frame:0000000000006859                 db  38h ; 8
.eh_frame:000000000000685A                 db  41h ; A
.eh_frame:000000000000685B                 db  0Eh
.eh_frame:000000000000685C                 db  30h ; 0
.eh_frame:000000000000685D                 db  41h ; A
.eh_frame:000000000000685E                 db  0Eh
.eh_frame:000000000000685F                 db  28h ; (
.eh_frame:0000000000006860                 db  42h ; B
.eh_frame:0000000000006861                 db  0Eh
.eh_frame:0000000000006862                 db  20h
.eh_frame:0000000000006863                 db  42h ; B
.eh_frame:0000000000006864                 db  0Eh
.eh_frame:0000000000006865                 db  18h
.eh_frame:0000000000006866                 db  42h ; B
.eh_frame:0000000000006867                 db  0Eh
.eh_frame:0000000000006868                 db  10h
.eh_frame:0000000000006869                 db  42h ; B
.eh_frame:000000000000686A                 db  0Eh
.eh_frame:000000000000686B                 db    8
.eh_frame:000000000000686C                 db  45h ; E
.eh_frame:000000000000686D                 db  0Bh
.eh_frame:000000000000686E                 db    0
.eh_frame:000000000000686F                 db    0
.eh_frame:0000000000006870                 db  20h
.eh_frame:0000000000006871                 db    0
.eh_frame:0000000000006872                 db    0
.eh_frame:0000000000006873                 db    0
.eh_frame:0000000000006874                 db 0ACh
.eh_frame:0000000000006875                 db    1
.eh_frame:0000000000006876                 db    0
.eh_frame:0000000000006877                 db    0
.eh_frame:0000000000006878                 db  48h ; H
.eh_frame:0000000000006879                 db 0BCh
.eh_frame:000000000000687A                 db 0FFh
.eh_frame:000000000000687B                 db 0FFh
.eh_frame:000000000000687C                 db  3Ch ; <
.eh_frame:000000000000687D                 db    1
.eh_frame:000000000000687E                 db    0
.eh_frame:000000000000687F                 db    0
.eh_frame:0000000000006880                 db    0
.eh_frame:0000000000006881                 db  44h ; D
.eh_frame:0000000000006882                 db  0Eh
.eh_frame:0000000000006883                 db  10h
.eh_frame:0000000000006884                 db    2
.eh_frame:0000000000006885                 db  7Dh ; }
.eh_frame:0000000000006886                 db  0Ah
.eh_frame:0000000000006887                 db  0Eh
.eh_frame:0000000000006888                 db    8
.eh_frame:0000000000006889                 db  41h ; A
.eh_frame:000000000000688A                 db  0Bh
.eh_frame:000000000000688B                 db  7Fh ; 
.eh_frame:000000000000688C                 db  0Ah
.eh_frame:000000000000688D                 db  0Eh
.eh_frame:000000000000688E                 db    8
.eh_frame:000000000000688F                 db  41h ; A
.eh_frame:0000000000006890                 db  0Bh
.eh_frame:0000000000006891                 db    0
.eh_frame:0000000000006892                 db    0
.eh_frame:0000000000006893                 db    0
.eh_frame:0000000000006894                 db  10h
.eh_frame:0000000000006895                 db    0
.eh_frame:0000000000006896                 db    0
.eh_frame:0000000000006897                 db    0
.eh_frame:0000000000006898                 db 0D0h
.eh_frame:0000000000006899                 db    1
.eh_frame:000000000000689A                 db    0
.eh_frame:000000000000689B                 db    0
.eh_frame:000000000000689C                 db  64h ; d
.eh_frame:000000000000689D                 db 0BDh
.eh_frame:000000000000689E                 db 0FFh
.eh_frame:000000000000689F                 db 0FFh
.eh_frame:00000000000068A0                 db 0A8h
.eh_frame:00000000000068A1                 db    0
.eh_frame:00000000000068A2                 db    0
.eh_frame:00000000000068A3                 db    0
.eh_frame:00000000000068A4                 db    0
.eh_frame:00000000000068A5                 db    0
.eh_frame:00000000000068A6                 db    0
.eh_frame:00000000000068A7                 db    0
.eh_frame:00000000000068A8                 db  10h
.eh_frame:00000000000068A9                 db    0
.eh_frame:00000000000068AA                 db    0
.eh_frame:00000000000068AB                 db    0
.eh_frame:00000000000068AC                 db 0E4h
.eh_frame:00000000000068AD                 db    1
.eh_frame:00000000000068AE                 db    0
.eh_frame:00000000000068AF                 db    0
.eh_frame:00000000000068B0                 db    0
.eh_frame:00000000000068B1                 db 0BEh
.eh_frame:00000000000068B2                 db 0FFh
.eh_frame:00000000000068B3                 db 0FFh
.eh_frame:00000000000068B4                 db  1Dh
.eh_frame:00000000000068B5                 db    0
.eh_frame:00000000000068B6                 db    0
.eh_frame:00000000000068B7                 db    0
.eh_frame:00000000000068B8                 db    0
.eh_frame:00000000000068B9                 db    0
.eh_frame:00000000000068BA                 db    0
.eh_frame:00000000000068BB                 db    0
.eh_frame:00000000000068BC                 db  40h ; @
.eh_frame:00000000000068BD                 db    0
.eh_frame:00000000000068BE                 db    0
.eh_frame:00000000000068BF                 db    0
.eh_frame:00000000000068C0                 db 0F8h
.eh_frame:00000000000068C1                 db    1
.eh_frame:00000000000068C2                 db    0
.eh_frame:00000000000068C3                 db    0
.eh_frame:00000000000068C4                 db  0Ch
.eh_frame:00000000000068C5                 db 0BEh
.eh_frame:00000000000068C6                 db 0FFh
.eh_frame:00000000000068C7                 db 0FFh
.eh_frame:00000000000068C8                 db    1
.eh_frame:00000000000068C9                 db    2
.eh_frame:00000000000068CA                 db    0
.eh_frame:00000000000068CB                 db    0
.eh_frame:00000000000068CC                 db    0
.eh_frame:00000000000068CD                 db  42h ; B
.eh_frame:00000000000068CE                 db  0Eh
.eh_frame:00000000000068CF                 db  10h
.eh_frame:00000000000068D0                 db  8Ch
.eh_frame:00000000000068D1                 db    2
.eh_frame:00000000000068D2                 db  41h ; A
.eh_frame:00000000000068D3                 db  0Eh
.eh_frame:00000000000068D4                 db  18h
.eh_frame:00000000000068D5                 db  86h
.eh_frame:00000000000068D6                 db    3
.eh_frame:00000000000068D7                 db  41h ; A
.eh_frame:00000000000068D8                 db  0Eh
.eh_frame:00000000000068D9                 db  20h
.eh_frame:00000000000068DA                 db  83h
.eh_frame:00000000000068DB                 db    4
.eh_frame:00000000000068DC                 db  44h ; D
.eh_frame:00000000000068DD                 db  0Eh
.eh_frame:00000000000068DE                 db  30h ; 0
.eh_frame:00000000000068DF                 db    3
.eh_frame:00000000000068E0                 db  2Ah ; *
.eh_frame:00000000000068E1                 db    1
.eh_frame:00000000000068E2                 db  0Ah
.eh_frame:00000000000068E3                 db  0Eh
.eh_frame:00000000000068E4                 db  20h
.eh_frame:00000000000068E5                 db  41h ; A
.eh_frame:00000000000068E6                 db  0Eh
.eh_frame:00000000000068E7                 db  18h
.eh_frame:00000000000068E8                 db  41h ; A
.eh_frame:00000000000068E9                 db  0Eh
.eh_frame:00000000000068EA                 db  10h
.eh_frame:00000000000068EB                 db  42h ; B
.eh_frame:00000000000068EC                 db  0Eh
.eh_frame:00000000000068ED                 db    8
.eh_frame:00000000000068EE                 db  4Ah ; J
.eh_frame:00000000000068EF                 db  0Bh
.eh_frame:00000000000068F0                 db  44h ; D
.eh_frame:00000000000068F1                 db  0Ah
.eh_frame:00000000000068F2                 db  0Eh
.eh_frame:00000000000068F3                 db  20h
.eh_frame:00000000000068F4                 db  43h ; C
.eh_frame:00000000000068F5                 db  0Eh
.eh_frame:00000000000068F6                 db  18h
.eh_frame:00000000000068F7                 db  41h ; A
.eh_frame:00000000000068F8                 db  0Eh
.eh_frame:00000000000068F9                 db  10h
.eh_frame:00000000000068FA                 db  42h ; B
.eh_frame:00000000000068FB                 db  0Eh
.eh_frame:00000000000068FC                 db    8
.eh_frame:00000000000068FD                 db  46h ; F
.eh_frame:00000000000068FE                 db  0Bh
.eh_frame:00000000000068FF                 db    0
.eh_frame:0000000000006900                 db  18h
.eh_frame:0000000000006901                 db    0
.eh_frame:0000000000006902                 db    0
.eh_frame:0000000000006903                 db    0
.eh_frame:0000000000006904                 db  3Ch ; <
.eh_frame:0000000000006905                 db    2
.eh_frame:0000000000006906                 db    0
.eh_frame:0000000000006907                 db    0
.eh_frame:0000000000006908                 db 0D8h
.eh_frame:0000000000006909                 db 0BFh
.eh_frame:000000000000690A                 db 0FFh
.eh_frame:000000000000690B                 db 0FFh
.eh_frame:000000000000690C                 db  43h ; C
.eh_frame:000000000000690D                 db    0
.eh_frame:000000000000690E                 db    0
.eh_frame:000000000000690F                 db    0
.eh_frame:0000000000006910                 db    0
.eh_frame:0000000000006911                 db  54h ; T
.eh_frame:0000000000006912                 db  0Eh
.eh_frame:0000000000006913                 db  10h
.eh_frame:0000000000006914                 db  54h ; T
.eh_frame:0000000000006915                 db  0Ah
.eh_frame:0000000000006916                 db  0Eh
.eh_frame:0000000000006917                 db    8
.eh_frame:0000000000006918                 db  41h ; A
.eh_frame:0000000000006919                 db  0Bh
.eh_frame:000000000000691A                 db    0
.eh_frame:000000000000691B                 db    0
.eh_frame:000000000000691C                 db  18h
.eh_frame:000000000000691D                 db    0
.eh_frame:000000000000691E                 db    0
.eh_frame:000000000000691F                 db    0
.eh_frame:0000000000006920                 db  58h ; X
.eh_frame:0000000000006921                 db    2
.eh_frame:0000000000006922                 db    0
.eh_frame:0000000000006923                 db    0
.eh_frame:0000000000006924                 db  0Ch
.eh_frame:0000000000006925                 db 0C0h
.eh_frame:0000000000006926                 db 0FFh
.eh_frame:0000000000006927                 db 0FFh
.eh_frame:0000000000006928                 db  4Ch ; L
.eh_frame:0000000000006929                 db    0
.eh_frame:000000000000692A                 db    0
.eh_frame:000000000000692B                 db    0
.eh_frame:000000000000692C                 db    0
.eh_frame:000000000000692D                 db  41h ; A
.eh_frame:000000000000692E                 db  0Eh
.eh_frame:000000000000692F                 db  10h
.eh_frame:0000000000006930                 db  83h
.eh_frame:0000000000006931                 db    2
.eh_frame:0000000000006932                 db    2
.eh_frame:0000000000006933                 db  46h ; F
.eh_frame:0000000000006934                 db  0Eh
.eh_frame:0000000000006935                 db    8
.eh_frame:0000000000006936                 db    0
.eh_frame:0000000000006937                 db    0
.eh_frame:0000000000006938                 db  10h
.eh_frame:0000000000006939                 db    0
.eh_frame:000000000000693A                 db    0
.eh_frame:000000000000693B                 db    0
.eh_frame:000000000000693C                 db  74h ; t
.eh_frame:000000000000693D                 db    2
.eh_frame:000000000000693E                 db    0
.eh_frame:000000000000693F                 db    0
.eh_frame:0000000000006940                 db  40h ; @
.eh_frame:0000000000006941                 db 0C0h
.eh_frame:0000000000006942                 db 0FFh
.eh_frame:0000000000006943                 db 0FFh
.eh_frame:0000000000006944                 db    8
.eh_frame:0000000000006945                 db    0
.eh_frame:0000000000006946                 db    0
.eh_frame:0000000000006947                 db    0
.eh_frame:0000000000006948                 db    0
.eh_frame:0000000000006949                 db    0
.eh_frame:000000000000694A                 db    0
.eh_frame:000000000000694B                 db    0
.eh_frame:000000000000694C                 db  10h
.eh_frame:000000000000694D                 db    0
.eh_frame:000000000000694E                 db    0
.eh_frame:000000000000694F                 db    0
.eh_frame:0000000000006950                 db  88h
.eh_frame:0000000000006951                 db    2
.eh_frame:0000000000006952                 db    0
.eh_frame:0000000000006953                 db    0
.eh_frame:0000000000006954                 db  3Ch ; <
.eh_frame:0000000000006955                 db 0C0h
.eh_frame:0000000000006956                 db 0FFh
.eh_frame:0000000000006957                 db 0FFh
.eh_frame:0000000000006958                 db    8
.eh_frame:0000000000006959                 db    0
.eh_frame:000000000000695A                 db    0
.eh_frame:000000000000695B                 db    0
.eh_frame:000000000000695C                 db    0
.eh_frame:000000000000695D                 db    0
.eh_frame:000000000000695E                 db    0
.eh_frame:000000000000695F                 db    0
.eh_frame:0000000000006960                 db  2Ch ; ,
.eh_frame:0000000000006961                 db    0
.eh_frame:0000000000006962                 db    0
.eh_frame:0000000000006963                 db    0
.eh_frame:0000000000006964                 db  9Ch
.eh_frame:0000000000006965                 db    2
.eh_frame:0000000000006966                 db    0
.eh_frame:0000000000006967                 db    0
.eh_frame:0000000000006968                 db  38h ; 8
.eh_frame:0000000000006969                 db 0C0h
.eh_frame:000000000000696A                 db 0FFh
.eh_frame:000000000000696B                 db 0FFh
.eh_frame:000000000000696C                 db 0A4h
.eh_frame:000000000000696D                 db    0
.eh_frame:000000000000696E                 db    0
.eh_frame:000000000000696F                 db    0
.eh_frame:0000000000006970                 db    0
.eh_frame:0000000000006971                 db  41h ; A
.eh_frame:0000000000006972                 db  0Eh
.eh_frame:0000000000006973                 db  10h
.eh_frame:0000000000006974                 db  86h
.eh_frame:0000000000006975                 db    2
.eh_frame:0000000000006976                 db  41h ; A
.eh_frame:0000000000006977                 db  0Eh
.eh_frame:0000000000006978                 db  18h
.eh_frame:0000000000006979                 db  83h
.eh_frame:000000000000697A                 db    3
.eh_frame:000000000000697B                 db  44h ; D
.eh_frame:000000000000697C                 db  0Eh
.eh_frame:000000000000697D                 db  20h
.eh_frame:000000000000697E                 db  7Ah ; z
.eh_frame:000000000000697F                 db  0Ah
.eh_frame:0000000000006980                 db  0Eh
.eh_frame:0000000000006981                 db  18h
.eh_frame:0000000000006982                 db  41h ; A
.eh_frame:0000000000006983                 db  0Eh
.eh_frame:0000000000006984                 db  10h
.eh_frame:0000000000006985                 db  41h ; A
.eh_frame:0000000000006986                 db  0Eh
.eh_frame:0000000000006987                 db    8
.eh_frame:0000000000006988                 db  41h ; A
.eh_frame:0000000000006989                 db  0Bh
.eh_frame:000000000000698A                 db    0
.eh_frame:000000000000698B                 db    0
.eh_frame:000000000000698C                 db    0
.eh_frame:000000000000698D                 db    0
.eh_frame:000000000000698E                 db    0
.eh_frame:000000000000698F                 db    0
.eh_frame:0000000000006990                 db  10h
.eh_frame:0000000000006991                 db    0
.eh_frame:0000000000006992                 db    0
.eh_frame:0000000000006993                 db    0
.eh_frame:0000000000006994                 db 0CCh
.eh_frame:0000000000006995                 db    2
.eh_frame:0000000000006996                 db    0
.eh_frame:0000000000006997                 db    0
.eh_frame:0000000000006998                 db 0B8h
.eh_frame:0000000000006999                 db 0C0h
.eh_frame:000000000000699A                 db 0FFh
.eh_frame:000000000000699B                 db 0FFh
.eh_frame:000000000000699C                 db    5
.eh_frame:000000000000699D                 db    0
.eh_frame:000000000000699E                 db    0
.eh_frame:000000000000699F                 db    0
.eh_frame:00000000000069A0                 db    0
.eh_frame:00000000000069A1                 db    0
.eh_frame:00000000000069A2                 db    0
.eh_frame:00000000000069A3                 db    0
.eh_frame:00000000000069A4                 db  18h
.eh_frame:00000000000069A5                 db    0
.eh_frame:00000000000069A6                 db    0
.eh_frame:00000000000069A7                 db    0
.eh_frame:00000000000069A8                 db 0E0h
.eh_frame:00000000000069A9                 db    2
.eh_frame:00000000000069AA                 db    0
.eh_frame:00000000000069AB                 db    0
.eh_frame:00000000000069AC                 db 0B4h
.eh_frame:00000000000069AD                 db 0C0h
.eh_frame:00000000000069AE                 db 0FFh
.eh_frame:00000000000069AF                 db 0FFh
.eh_frame:00000000000069B0                 db  22h ; "
.eh_frame:00000000000069B1                 db    0
.eh_frame:00000000000069B2                 db    0
.eh_frame:00000000000069B3                 db    0
.eh_frame:00000000000069B4                 db    0
.eh_frame:00000000000069B5                 db  46h ; F
.eh_frame:00000000000069B6                 db  0Eh
.eh_frame:00000000000069B7                 db  10h
.eh_frame:00000000000069B8                 db  83h
.eh_frame:00000000000069B9                 db    2
.eh_frame:00000000000069BA                 db  4Eh ; N
.eh_frame:00000000000069BB                 db 0C3h
.eh_frame:00000000000069BC                 db  0Eh
.eh_frame:00000000000069BD                 db    8
.eh_frame:00000000000069BE                 db    0
.eh_frame:00000000000069BF                 db    0
.eh_frame:00000000000069C0                 db  1Ch
.eh_frame:00000000000069C1                 db    0
.eh_frame:00000000000069C2                 db    0
.eh_frame:00000000000069C3                 db    0
.eh_frame:00000000000069C4                 db 0FCh
.eh_frame:00000000000069C5                 db    2
.eh_frame:00000000000069C6                 db    0
.eh_frame:00000000000069C7                 db    0
.eh_frame:00000000000069C8                 db 0C8h
.eh_frame:00000000000069C9                 db 0C0h
.eh_frame:00000000000069CA                 db 0FFh
.eh_frame:00000000000069CB                 db 0FFh
.eh_frame:00000000000069CC                 db  9Fh
.eh_frame:00000000000069CD                 db    0
.eh_frame:00000000000069CE                 db    0
.eh_frame:00000000000069CF                 db    0
.eh_frame:00000000000069D0                 db    0
.eh_frame:00000000000069D1                 db  44h ; D
.eh_frame:00000000000069D2                 db  0Eh
.eh_frame:00000000000069D3                 db  10h
.eh_frame:00000000000069D4                 db  83h
.eh_frame:00000000000069D5                 db    2
.eh_frame:00000000000069D6                 db    2
.eh_frame:00000000000069D7                 db  78h ; x
.eh_frame:00000000000069D8                 db  0Ah
.eh_frame:00000000000069D9                 db  0Eh
.eh_frame:00000000000069DA                 db    8
.eh_frame:00000000000069DB                 db  41h ; A
.eh_frame:00000000000069DC                 db  0Bh
.eh_frame:00000000000069DD                 db    0
.eh_frame:00000000000069DE                 db    0
.eh_frame:00000000000069DF                 db    0
.eh_frame:00000000000069E0                 db  40h ; @
.eh_frame:00000000000069E1                 db    0
.eh_frame:00000000000069E2                 db    0
.eh_frame:00000000000069E3                 db    0
.eh_frame:00000000000069E4                 db  1Ch
.eh_frame:00000000000069E5                 db    3
.eh_frame:00000000000069E6                 db    0
.eh_frame:00000000000069E7                 db    0
.eh_frame:00000000000069E8                 db  48h ; H
.eh_frame:00000000000069E9                 db 0C1h
.eh_frame:00000000000069EA                 db 0FFh
.eh_frame:00000000000069EB                 db 0FFh
.eh_frame:00000000000069EC                 db 0E7h
.eh_frame:00000000000069ED                 db    0
.eh_frame:00000000000069EE                 db    0
.eh_frame:00000000000069EF                 db    0
.eh_frame:00000000000069F0                 db    0
.eh_frame:00000000000069F1                 db  41h ; A
.eh_frame:00000000000069F2                 db  0Eh
.eh_frame:00000000000069F3                 db  10h
.eh_frame:00000000000069F4                 db  86h
.eh_frame:00000000000069F5                 db    2
.eh_frame:00000000000069F6                 db  41h ; A
.eh_frame:00000000000069F7                 db  0Eh
.eh_frame:00000000000069F8                 db  18h
.eh_frame:00000000000069F9                 db  83h
.eh_frame:00000000000069FA                 db    3
.eh_frame:00000000000069FB                 db  49h ; I
.eh_frame:00000000000069FC                 db  0Eh
.eh_frame:00000000000069FD                 db  20h
.eh_frame:00000000000069FE                 db  6Eh ; n
.eh_frame:00000000000069FF                 db  0Ah
.eh_frame:0000000000006A00                 db  0Eh
.eh_frame:0000000000006A01                 db  18h
.eh_frame:0000000000006A02                 db  41h ; A
.eh_frame:0000000000006A03                 db  0Eh
.eh_frame:0000000000006A04                 db  10h
.eh_frame:0000000000006A05                 db  41h ; A
.eh_frame:0000000000006A06                 db  0Eh
.eh_frame:0000000000006A07                 db    8
.eh_frame:0000000000006A08                 db  45h ; E
.eh_frame:0000000000006A09                 db  0Bh
.eh_frame:0000000000006A0A                 db    2
.eh_frame:0000000000006A0B                 db  4Ah ; J
.eh_frame:0000000000006A0C                 db  0Ah
.eh_frame:0000000000006A0D                 db  0Eh
.eh_frame:0000000000006A0E                 db  18h
.eh_frame:0000000000006A0F                 db  41h ; A
.eh_frame:0000000000006A10                 db  0Eh
.eh_frame:0000000000006A11                 db  10h
.eh_frame:0000000000006A12                 db  41h ; A
.eh_frame:0000000000006A13                 db  0Eh
.eh_frame:0000000000006A14                 db    8
.eh_frame:0000000000006A15                 db  44h ; D
.eh_frame:0000000000006A16                 db  0Bh
.eh_frame:0000000000006A17                 db    2
.eh_frame:0000000000006A18                 db  54h ; T
.eh_frame:0000000000006A19                 db  0Eh
.eh_frame:0000000000006A1A                 db  18h
.eh_frame:0000000000006A1B                 db  41h ; A
.eh_frame:0000000000006A1C                 db  0Eh
.eh_frame:0000000000006A1D                 db  10h
.eh_frame:0000000000006A1E                 db  41h ; A
.eh_frame:0000000000006A1F                 db  0Eh
.eh_frame:0000000000006A20                 db    8
.eh_frame:0000000000006A21                 db    0
.eh_frame:0000000000006A22                 db    0
.eh_frame:0000000000006A23                 db    0
.eh_frame:0000000000006A24                 db  74h ; t
.eh_frame:0000000000006A25                 db    0
.eh_frame:0000000000006A26                 db    0
.eh_frame:0000000000006A27                 db    0
.eh_frame:0000000000006A28                 db  60h ; `
.eh_frame:0000000000006A29                 db    3
.eh_frame:0000000000006A2A                 db    0
.eh_frame:0000000000006A2B                 db    0
.eh_frame:0000000000006A2C                 db 0F4h
.eh_frame:0000000000006A2D                 db 0C1h
.eh_frame:0000000000006A2E                 db 0FFh
.eh_frame:0000000000006A2F                 db 0FFh
.eh_frame:0000000000006A30                 db  34h ; 4
.eh_frame:0000000000006A31                 db  12h
.eh_frame:0000000000006A32                 db    0
.eh_frame:0000000000006A33                 db    0
.eh_frame:0000000000006A34                 db    0
.eh_frame:0000000000006A35                 db  42h ; B
.eh_frame:0000000000006A36                 db  0Eh
.eh_frame:0000000000006A37                 db  10h
.eh_frame:0000000000006A38                 db  8Fh
.eh_frame:0000000000006A39                 db    2
.eh_frame:0000000000006A3A                 db  42h ; B
.eh_frame:0000000000006A3B                 db  0Eh
.eh_frame:0000000000006A3C                 db  18h
.eh_frame:0000000000006A3D                 db  8Eh
.eh_frame:0000000000006A3E                 db    3
.eh_frame:0000000000006A3F                 db  45h ; E
.eh_frame:0000000000006A40                 db  0Eh
.eh_frame:0000000000006A41                 db  20h
.eh_frame:0000000000006A42                 db  8Dh
.eh_frame:0000000000006A43                 db    4
.eh_frame:0000000000006A44                 db  42h ; B
.eh_frame:0000000000006A45                 db  0Eh
.eh_frame:0000000000006A46                 db  28h ; (
.eh_frame:0000000000006A47                 db  8Ch
.eh_frame:0000000000006A48                 db    5
.eh_frame:0000000000006A49                 db  44h ; D
.eh_frame:0000000000006A4A                 db  0Eh
.eh_frame:0000000000006A4B                 db  30h ; 0
.eh_frame:0000000000006A4C                 db  86h
.eh_frame:0000000000006A4D                 db    6
.eh_frame:0000000000006A4E                 db  41h ; A
.eh_frame:0000000000006A4F                 db  0Eh
.eh_frame:0000000000006A50                 db  38h ; 8
.eh_frame:0000000000006A51                 db  83h
.eh_frame:0000000000006A52                 db    7
.eh_frame:0000000000006A53                 db  53h ; S
.eh_frame:0000000000006A54                 db  0Eh
.eh_frame:0000000000006A55                 db 0F0h
.eh_frame:0000000000006A56                 db    1
.eh_frame:0000000000006A57                 db    3
.eh_frame:0000000000006A58                 db  81h
.eh_frame:0000000000006A59                 db  0Bh
.eh_frame:0000000000006A5A                 db  0Eh
.eh_frame:0000000000006A5B                 db 0F8h
.eh_frame:0000000000006A5C                 db    1
.eh_frame:0000000000006A5D                 db  4Ah ; J
.eh_frame:0000000000006A5E                 db  0Eh
.eh_frame:0000000000006A5F                 db  80h
.eh_frame:0000000000006A60                 db    2
.eh_frame:0000000000006A61                 db  44h ; D
.eh_frame:0000000000006A62                 db  0Eh
.eh_frame:0000000000006A63                 db  88h
.eh_frame:0000000000006A64                 db    2
.eh_frame:0000000000006A65                 db  45h ; E
.eh_frame:0000000000006A66                 db  0Eh
.eh_frame:0000000000006A67                 db  90h
.eh_frame:0000000000006A68                 db    2
.eh_frame:0000000000006A69                 db  5Fh ; _
.eh_frame:0000000000006A6A                 db  0Eh
.eh_frame:0000000000006A6B                 db 0F0h
.eh_frame:0000000000006A6C                 db    1
.eh_frame:0000000000006A6D                 db  64h ; d
.eh_frame:0000000000006A6E                 db  0Ah
.eh_frame:0000000000006A6F                 db  0Eh
.eh_frame:0000000000006A70                 db  38h ; 8
.eh_frame:0000000000006A71                 db  41h ; A
.eh_frame:0000000000006A72                 db  0Eh
.eh_frame:0000000000006A73                 db  30h ; 0
.eh_frame:0000000000006A74                 db  41h ; A
.eh_frame:0000000000006A75                 db  0Eh
.eh_frame:0000000000006A76                 db  28h ; (
.eh_frame:0000000000006A77                 db  42h ; B
.eh_frame:0000000000006A78                 db  0Eh
.eh_frame:0000000000006A79                 db  20h
.eh_frame:0000000000006A7A                 db  42h ; B
.eh_frame:0000000000006A7B                 db  0Eh
.eh_frame:0000000000006A7C                 db  18h
.eh_frame:0000000000006A7D                 db  42h ; B
.eh_frame:0000000000006A7E                 db  0Eh
.eh_frame:0000000000006A7F                 db  10h
.eh_frame:0000000000006A80                 db  42h ; B
.eh_frame:0000000000006A81                 db  0Eh
.eh_frame:0000000000006A82                 db    8
.eh_frame:0000000000006A83                 db  44h ; D
.eh_frame:0000000000006A84                 db  0Bh
.eh_frame:0000000000006A85                 db    3
.eh_frame:0000000000006A86                 db  99h
.eh_frame:0000000000006A87                 db    5
.eh_frame:0000000000006A88                 db  0Eh
.eh_frame:0000000000006A89                 db 0F8h
.eh_frame:0000000000006A8A                 db    1
.eh_frame:0000000000006A8B                 db  4Dh ; M
.eh_frame:0000000000006A8C                 db  0Eh
.eh_frame:0000000000006A8D                 db  80h
.eh_frame:0000000000006A8E                 db    2
.eh_frame:0000000000006A8F                 db  44h ; D
.eh_frame:0000000000006A90                 db  0Eh
.eh_frame:0000000000006A91                 db  88h
.eh_frame:0000000000006A92                 db    2
.eh_frame:0000000000006A93                 db  47h ; G
.eh_frame:0000000000006A94                 db  0Eh
.eh_frame:0000000000006A95                 db  90h
.eh_frame:0000000000006A96                 db    2
.eh_frame:0000000000006A97                 db  5Bh ; [
.eh_frame:0000000000006A98                 db  0Eh
.eh_frame:0000000000006A99                 db 0F0h
.eh_frame:0000000000006A9A                 db    1
.eh_frame:0000000000006A9B                 db    0
.eh_frame:0000000000006A9C                 db  68h ; h
.eh_frame:0000000000006A9D                 db    0
.eh_frame:0000000000006A9E                 db    0
.eh_frame:0000000000006A9F                 db    0
.eh_frame:0000000000006AA0                 db 0D8h
.eh_frame:0000000000006AA1                 db    3
.eh_frame:0000000000006AA2                 db    0
.eh_frame:0000000000006AA3                 db    0
.eh_frame:0000000000006AA4                 db 0BCh
.eh_frame:0000000000006AA5                 db 0D3h
.eh_frame:0000000000006AA6                 db 0FFh
.eh_frame:0000000000006AA7                 db 0FFh
.eh_frame:0000000000006AA8                 db 0ABh
.eh_frame:0000000000006AA9                 db    1
.eh_frame:0000000000006AAA                 db    0
.eh_frame:0000000000006AAB                 db    0
.eh_frame:0000000000006AAC                 db    0
.eh_frame:0000000000006AAD                 db  42h ; B
.eh_frame:0000000000006AAE                 db  0Eh
.eh_frame:0000000000006AAF                 db  10h
.eh_frame:0000000000006AB0                 db  8Fh
.eh_frame:0000000000006AB1                 db    2
.eh_frame:0000000000006AB2                 db  42h ; B
.eh_frame:0000000000006AB3                 db  0Eh
.eh_frame:0000000000006AB4                 db  18h
.eh_frame:0000000000006AB5                 db  8Eh
.eh_frame:0000000000006AB6                 db    3
.eh_frame:0000000000006AB7                 db  45h ; E
.eh_frame:0000000000006AB8                 db  0Eh
.eh_frame:0000000000006AB9                 db  20h
.eh_frame:0000000000006ABA                 db  8Dh
.eh_frame:0000000000006ABB                 db    4
.eh_frame:0000000000006ABC                 db  42h ; B
.eh_frame:0000000000006ABD                 db  0Eh
.eh_frame:0000000000006ABE                 db  28h ; (
.eh_frame:0000000000006ABF                 db  8Ch
.eh_frame:0000000000006AC0                 db    5
.eh_frame:0000000000006AC1                 db  44h ; D
.eh_frame:0000000000006AC2                 db  0Eh
.eh_frame:0000000000006AC3                 db  30h ; 0
.eh_frame:0000000000006AC4                 db  86h
.eh_frame:0000000000006AC5                 db    6
.eh_frame:0000000000006AC6                 db  41h ; A
.eh_frame:0000000000006AC7                 db  0Eh
.eh_frame:0000000000006AC8                 db  38h ; 8
.eh_frame:0000000000006AC9                 db  83h
.eh_frame:0000000000006ACA                 db    7
.eh_frame:0000000000006ACB                 db  47h ; G
.eh_frame:0000000000006ACC                 db  0Eh
.eh_frame:0000000000006ACD                 db  60h ; `
.eh_frame:0000000000006ACE                 db    2
.eh_frame:0000000000006ACF                 db  99h
.eh_frame:0000000000006AD0                 db  0Eh
.eh_frame:0000000000006AD1                 db  68h ; h
.eh_frame:0000000000006AD2                 db  5Fh ; _
.eh_frame:0000000000006AD3                 db  0Eh
.eh_frame:0000000000006AD4                 db  70h ; p
.eh_frame:0000000000006AD5                 db  46h ; F
.eh_frame:0000000000006AD6                 db  0Eh
.eh_frame:0000000000006AD7                 db  78h ; x
.eh_frame:0000000000006AD8                 db  42h ; B
.eh_frame:0000000000006AD9                 db  0Eh
.eh_frame:0000000000006ADA                 db  80h
.eh_frame:0000000000006ADB                 db    1
.eh_frame:0000000000006ADC                 db  59h ; Y
.eh_frame:0000000000006ADD                 db  0Eh
.eh_frame:0000000000006ADE                 db  60h ; `
.eh_frame:0000000000006ADF                 db    2
.eh_frame:0000000000006AE0                 db  40h ; @
.eh_frame:0000000000006AE1                 db  0Eh
.eh_frame:0000000000006AE2                 db  68h ; h
.eh_frame:0000000000006AE3                 db  4Bh ; K
.eh_frame:0000000000006AE4                 db  0Eh
.eh_frame:0000000000006AE5                 db  70h ; p
.eh_frame:0000000000006AE6                 db  43h ; C
.eh_frame:0000000000006AE7                 db  0Eh
.eh_frame:0000000000006AE8                 db  78h ; x
.eh_frame:0000000000006AE9                 db  45h ; E
.eh_frame:0000000000006AEA                 db  0Eh
.eh_frame:0000000000006AEB                 db  80h
.eh_frame:0000000000006AEC                 db    1
.eh_frame:0000000000006AED                 db  5Eh ; ^
.eh_frame:0000000000006AEE                 db  0Eh
.eh_frame:0000000000006AEF                 db  60h ; `
.eh_frame:0000000000006AF0                 db  4Ch ; L
.eh_frame:0000000000006AF1                 db  0Ah
.eh_frame:0000000000006AF2                 db  0Eh
.eh_frame:0000000000006AF3                 db  38h ; 8
.eh_frame:0000000000006AF4                 db  44h ; D
.eh_frame:0000000000006AF5                 db  0Eh
.eh_frame:0000000000006AF6                 db  30h ; 0
.eh_frame:0000000000006AF7                 db  41h ; A
.eh_frame:0000000000006AF8                 db  0Eh
.eh_frame:0000000000006AF9                 db  28h ; (
.eh_frame:0000000000006AFA                 db  42h ; B
.eh_frame:0000000000006AFB                 db  0Eh
.eh_frame:0000000000006AFC                 db  20h
.eh_frame:0000000000006AFD                 db  42h ; B
.eh_frame:0000000000006AFE                 db  0Eh
.eh_frame:0000000000006AFF                 db  18h
.eh_frame:0000000000006B00                 db  42h ; B
.eh_frame:0000000000006B01                 db  0Eh
.eh_frame:0000000000006B02                 db  10h
.eh_frame:0000000000006B03                 db  42h ; B
.eh_frame:0000000000006B04                 db  0Eh
.eh_frame:0000000000006B05                 db    8
.eh_frame:0000000000006B06                 db  46h ; F
.eh_frame:0000000000006B07                 db  0Bh
.eh_frame:0000000000006B08                 db  28h ; (
.eh_frame:0000000000006B09                 db    0
.eh_frame:0000000000006B0A                 db    0
.eh_frame:0000000000006B0B                 db    0
.eh_frame:0000000000006B0C                 db  44h ; D
.eh_frame:0000000000006B0D                 db    4
.eh_frame:0000000000006B0E                 db    0
.eh_frame:0000000000006B0F                 db    0
.eh_frame:0000000000006B10                 db    0
.eh_frame:0000000000006B11                 db 0D5h
.eh_frame:0000000000006B12                 db 0FFh
.eh_frame:0000000000006B13                 db 0FFh
.eh_frame:0000000000006B14                 db  36h ; 6
.eh_frame:0000000000006B15                 db    0
.eh_frame:0000000000006B16                 db    0
.eh_frame:0000000000006B17                 db    0
.eh_frame:0000000000006B18                 db    0
.eh_frame:0000000000006B19                 db  42h ; B
.eh_frame:0000000000006B1A                 db  0Eh
.eh_frame:0000000000006B1B                 db  10h
.eh_frame:0000000000006B1C                 db  8Ch
.eh_frame:0000000000006B1D                 db    2
.eh_frame:0000000000006B1E                 db  41h ; A
.eh_frame:0000000000006B1F                 db  0Eh
.eh_frame:0000000000006B20                 db  18h
.eh_frame:0000000000006B21                 db  86h
.eh_frame:0000000000006B22                 db    3
.eh_frame:0000000000006B23                 db  41h ; A
.eh_frame:0000000000006B24                 db  0Eh
.eh_frame:0000000000006B25                 db  20h
.eh_frame:0000000000006B26                 db  83h
.eh_frame:0000000000006B27                 db    4
.eh_frame:0000000000006B28                 db  6Eh ; n
.eh_frame:0000000000006B29                 db  0Eh
.eh_frame:0000000000006B2A                 db  18h
.eh_frame:0000000000006B2B                 db  41h ; A
.eh_frame:0000000000006B2C                 db  0Eh
.eh_frame:0000000000006B2D                 db  10h
.eh_frame:0000000000006B2E                 db  42h ; B
.eh_frame:0000000000006B2F                 db  0Eh
.eh_frame:0000000000006B30                 db    8
.eh_frame:0000000000006B31                 db    0
.eh_frame:0000000000006B32                 db    0
.eh_frame:0000000000006B33                 db    0
.eh_frame:0000000000006B34                 db  10h
.eh_frame:0000000000006B35                 db    0
.eh_frame:0000000000006B36                 db    0
.eh_frame:0000000000006B37                 db    0
.eh_frame:0000000000006B38                 db  70h ; p
.eh_frame:0000000000006B39                 db    4
.eh_frame:0000000000006B3A                 db    0
.eh_frame:0000000000006B3B                 db    0
.eh_frame:0000000000006B3C                 db  14h
.eh_frame:0000000000006B3D                 db 0D5h
.eh_frame:0000000000006B3E                 db 0FFh
.eh_frame:0000000000006B3F                 db 0FFh
.eh_frame:0000000000006B40                 db  11h
.eh_frame:0000000000006B41                 db    0
.eh_frame:0000000000006B42                 db    0
.eh_frame:0000000000006B43                 db    0
.eh_frame:0000000000006B44                 db    0
.eh_frame:0000000000006B45                 db    0
.eh_frame:0000000000006B46                 db    0
.eh_frame:0000000000006B47                 db    0
.eh_frame:0000000000006B48                 db  10h
.eh_frame:0000000000006B49                 db    0
.eh_frame:0000000000006B4A                 db    0
.eh_frame:0000000000006B4B                 db    0
.eh_frame:0000000000006B4C                 db  84h
.eh_frame:0000000000006B4D                 db    4
.eh_frame:0000000000006B4E                 db    0
.eh_frame:0000000000006B4F                 db    0
.eh_frame:0000000000006B50                 db  20h
.eh_frame:0000000000006B51                 db 0D5h
.eh_frame:0000000000006B52                 db 0FFh
.eh_frame:0000000000006B53                 db 0FFh
.eh_frame:0000000000006B54                 db  11h
.eh_frame:0000000000006B55                 db    0
.eh_frame:0000000000006B56                 db    0
.eh_frame:0000000000006B57                 db    0
.eh_frame:0000000000006B58                 db    0
.eh_frame:0000000000006B59                 db    0
.eh_frame:0000000000006B5A                 db    0
.eh_frame:0000000000006B5B                 db    0
.eh_frame:0000000000006B5C                 db  10h
.eh_frame:0000000000006B5D                 db    0
.eh_frame:0000000000006B5E                 db    0
.eh_frame:0000000000006B5F                 db    0
.eh_frame:0000000000006B60                 db  98h
.eh_frame:0000000000006B61                 db    4
.eh_frame:0000000000006B62                 db    0
.eh_frame:0000000000006B63                 db    0
.eh_frame:0000000000006B64                 db  2Ch ; ,
.eh_frame:0000000000006B65                 db 0D5h
.eh_frame:0000000000006B66                 db 0FFh
.eh_frame:0000000000006B67                 db 0FFh
.eh_frame:0000000000006B68                 db  35h ; 5
.eh_frame:0000000000006B69                 db    0
.eh_frame:0000000000006B6A                 db    0
.eh_frame:0000000000006B6B                 db    0
.eh_frame:0000000000006B6C                 db    0
.eh_frame:0000000000006B6D                 db    0
.eh_frame:0000000000006B6E                 db    0
.eh_frame:0000000000006B6F                 db    0
.eh_frame:0000000000006B70                 db  10h
.eh_frame:0000000000006B71                 db    0
.eh_frame:0000000000006B72                 db    0
.eh_frame:0000000000006B73                 db    0
.eh_frame:0000000000006B74                 db 0ACh
.eh_frame:0000000000006B75                 db    4
.eh_frame:0000000000006B76                 db    0
.eh_frame:0000000000006B77                 db    0
.eh_frame:0000000000006B78                 db  58h ; X
.eh_frame:0000000000006B79                 db 0D5h
.eh_frame:0000000000006B7A                 db 0FFh
.eh_frame:0000000000006B7B                 db 0FFh
.eh_frame:0000000000006B7C                 db  15h
.eh_frame:0000000000006B7D                 db    0
.eh_frame:0000000000006B7E                 db    0
.eh_frame:0000000000006B7F                 db    0
.eh_frame:0000000000006B80                 db    0
.eh_frame:0000000000006B81                 db    0
.eh_frame:0000000000006B82                 db    0
.eh_frame:0000000000006B83                 db    0
.eh_frame:0000000000006B84                 db  10h
.eh_frame:0000000000006B85                 db    0
.eh_frame:0000000000006B86                 db    0
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B88                 db 0C0h
.eh_frame:0000000000006B89                 db    4
.eh_frame:0000000000006B8A                 db    0
.eh_frame:0000000000006B8B                 db    0
.eh_frame:0000000000006B8C                 db  64h ; d
.eh_frame:0000000000006B8D                 db 0D5h
.eh_frame:0000000000006B8E                 db 0FFh
.eh_frame:0000000000006B8F                 db 0FFh
.eh_frame:0000000000006B90                 db  30h ; 0
.eh_frame:0000000000006B91                 db    0
.eh_frame:0000000000006B92                 db    0
.eh_frame:0000000000006B93                 db    0
.eh_frame:0000000000006B94                 db    0
.eh_frame:0000000000006B95                 db  6Bh ; k
.eh_frame:0000000000006B96                 db  0Eh
.eh_frame:0000000000006B97                 db  10h
.eh_frame:0000000000006B98                 db  50h ; P
.eh_frame:0000000000006B99                 db    0
.eh_frame:0000000000006B9A                 db    0
.eh_frame:0000000000006B9B                 db    0
.eh_frame:0000000000006B9C                 db 0D4h
.eh_frame:0000000000006B9D                 db    4
.eh_frame:0000000000006B9E                 db    0
.eh_frame:0000000000006B9F                 db    0
.eh_frame:0000000000006BA0                 db  80h
.eh_frame:0000000000006BA1                 db 0D5h
.eh_frame:0000000000006BA2                 db 0FFh
.eh_frame:0000000000006BA3                 db 0FFh
.eh_frame:0000000000006BA4                 db  74h ; t
.eh_frame:0000000000006BA5                 db    0
.eh_frame:0000000000006BA6                 db    0
.eh_frame:0000000000006BA7                 db    0
.eh_frame:0000000000006BA8                 db    0
.eh_frame:0000000000006BA9                 db  42h ; B
.eh_frame:0000000000006BAA                 db  0Eh
.eh_frame:0000000000006BAB                 db  10h
.eh_frame:0000000000006BAC                 db  8Fh
.eh_frame:0000000000006BAD                 db    2
.eh_frame:0000000000006BAE                 db  42h ; B
.eh_frame:0000000000006BAF                 db  0Eh
.eh_frame:0000000000006BB0                 db  18h
.eh_frame:0000000000006BB1                 db  8Eh
.eh_frame:0000000000006BB2                 db    3
.eh_frame:0000000000006BB3                 db  49h ; I
.eh_frame:0000000000006BB4                 db  0Eh
.eh_frame:0000000000006BB5                 db  20h
.eh_frame:0000000000006BB6                 db  8Dh
.eh_frame:0000000000006BB7                 db    4
.eh_frame:0000000000006BB8                 db  42h ; B
.eh_frame:0000000000006BB9                 db  0Eh
.eh_frame:0000000000006BBA                 db  28h ; (
.eh_frame:0000000000006BBB                 db  8Ch
.eh_frame:0000000000006BBC                 db    5
.eh_frame:0000000000006BBD                 db  44h ; D
.eh_frame:0000000000006BBE                 db  0Eh
.eh_frame:0000000000006BBF                 db  30h ; 0
.eh_frame:0000000000006BC0                 db  86h
.eh_frame:0000000000006BC1                 db    6
.eh_frame:0000000000006BC2                 db  41h ; A
.eh_frame:0000000000006BC3                 db  0Eh
.eh_frame:0000000000006BC4                 db  38h ; 8
.eh_frame:0000000000006BC5                 db  83h
.eh_frame:0000000000006BC6                 db    7
.eh_frame:0000000000006BC7                 db  4Dh ; M
.eh_frame:0000000000006BC8                 db  0Eh
.eh_frame:0000000000006BC9                 db  50h ; P
.eh_frame:0000000000006BCA                 db  5Fh ; _
.eh_frame:0000000000006BCB                 db  0Eh
.eh_frame:0000000000006BCC                 db  58h ; X
.eh_frame:0000000000006BCD                 db  47h ; G
.eh_frame:0000000000006BCE                 db  0Eh
.eh_frame:0000000000006BCF                 db  60h ; `
.eh_frame:0000000000006BD0                 db  46h ; F
.eh_frame:0000000000006BD1                 db  0Eh
.eh_frame:0000000000006BD2                 db  68h ; h
.eh_frame:0000000000006BD3                 db  44h ; D
.eh_frame:0000000000006BD4                 db  0Eh
.eh_frame:0000000000006BD5                 db  70h ; p
.eh_frame:0000000000006BD6                 db  58h ; X
.eh_frame:0000000000006BD7                 db  0Eh
.eh_frame:0000000000006BD8                 db  38h ; 8
.eh_frame:0000000000006BD9                 db  41h ; A
.eh_frame:0000000000006BDA                 db  0Eh
.eh_frame:0000000000006BDB                 db  30h ; 0
.eh_frame:0000000000006BDC                 db  41h ; A
.eh_frame:0000000000006BDD                 db  0Eh
.eh_frame:0000000000006BDE                 db  28h ; (
.eh_frame:0000000000006BDF                 db  42h ; B
.eh_frame:0000000000006BE0                 db  0Eh
.eh_frame:0000000000006BE1                 db  20h
.eh_frame:0000000000006BE2                 db  42h ; B
.eh_frame:0000000000006BE3                 db  0Eh
.eh_frame:0000000000006BE4                 db  18h
.eh_frame:0000000000006BE5                 db  42h ; B
.eh_frame:0000000000006BE6                 db  0Eh
.eh_frame:0000000000006BE7                 db  10h
.eh_frame:0000000000006BE8                 db  42h ; B
.eh_frame:0000000000006BE9                 db  0Eh
.eh_frame:0000000000006BEA                 db    8
.eh_frame:0000000000006BEB                 db    0
.eh_frame:0000000000006BEC                 db  68h ; h
.eh_frame:0000000000006BED                 db    0
.eh_frame:0000000000006BEE                 db    0
.eh_frame:0000000000006BEF                 db    0
.eh_frame:0000000000006BF0                 db  28h ; (
.eh_frame:0000000000006BF1                 db    5
.eh_frame:0000000000006BF2                 db    0
.eh_frame:0000000000006BF3                 db    0
.eh_frame:0000000000006BF4                 db 0ACh
.eh_frame:0000000000006BF5                 db 0D5h
.eh_frame:0000000000006BF6                 db 0FFh
.eh_frame:0000000000006BF7                 db 0FFh
.eh_frame:0000000000006BF8                 db 0E3h
.eh_frame:0000000000006BF9                 db    0
.eh_frame:0000000000006BFA                 db    0
.eh_frame:0000000000006BFB                 db    0
.eh_frame:0000000000006BFC                 db    0
.eh_frame:0000000000006BFD                 db  42h ; B
.eh_frame:0000000000006BFE                 db  0Eh
.eh_frame:0000000000006BFF                 db  10h
.eh_frame:0000000000006C00                 db  8Fh
.eh_frame:0000000000006C01                 db    2
.eh_frame:0000000000006C02                 db  42h ; B
.eh_frame:0000000000006C03                 db  0Eh
.eh_frame:0000000000006C04                 db  18h
.eh_frame:0000000000006C05                 db  8Eh
.eh_frame:0000000000006C06                 db    3
.eh_frame:0000000000006C07                 db  49h ; I
.eh_frame:0000000000006C08                 db  0Eh
.eh_frame:0000000000006C09                 db  20h
.eh_frame:0000000000006C0A                 db  8Dh
.eh_frame:0000000000006C0B                 db    4
.eh_frame:0000000000006C0C                 db  42h ; B
.eh_frame:0000000000006C0D                 db  0Eh
.eh_frame:0000000000006C0E                 db  28h ; (
.eh_frame:0000000000006C0F                 db  8Ch
.eh_frame:0000000000006C10                 db    5
.eh_frame:0000000000006C11                 db  44h ; D
.eh_frame:0000000000006C12                 db  0Eh
.eh_frame:0000000000006C13                 db  30h ; 0
.eh_frame:0000000000006C14                 db  86h
.eh_frame:0000000000006C15                 db    6
.eh_frame:0000000000006C16                 db  41h ; A
.eh_frame:0000000000006C17                 db  0Eh
.eh_frame:0000000000006C18                 db  38h ; 8
.eh_frame:0000000000006C19                 db  83h
.eh_frame:0000000000006C1A                 db    7
.eh_frame:0000000000006C1B                 db  4Dh ; M
.eh_frame:0000000000006C1C                 db  0Eh
.eh_frame:0000000000006C1D                 db  70h ; p
.eh_frame:0000000000006C1E                 db  65h ; e
.eh_frame:0000000000006C1F                 db  0Eh
.eh_frame:0000000000006C20                 db  78h ; x
.eh_frame:0000000000006C21                 db  4Dh ; M
.eh_frame:0000000000006C22                 db  0Eh
.eh_frame:0000000000006C23                 db  80h
.eh_frame:0000000000006C24                 db    1
.eh_frame:0000000000006C25                 db  46h ; F
.eh_frame:0000000000006C26                 db  0Eh
.eh_frame:0000000000006C27                 db  88h
.eh_frame:0000000000006C28                 db    1
.eh_frame:0000000000006C29                 db  42h ; B
.eh_frame:0000000000006C2A                 db  0Eh
.eh_frame:0000000000006C2B                 db  90h
.eh_frame:0000000000006C2C                 db    1
.eh_frame:0000000000006C2D                 db  5Eh ; ^
.eh_frame:0000000000006C2E                 db  0Eh
.eh_frame:0000000000006C2F                 db  70h ; p
.eh_frame:0000000000006C30                 db  56h ; V
.eh_frame:0000000000006C31                 db  0Eh
.eh_frame:0000000000006C32                 db  78h ; x
.eh_frame:0000000000006C33                 db  43h ; C
.eh_frame:0000000000006C34                 db  0Eh
.eh_frame:0000000000006C35                 db  80h
.eh_frame:0000000000006C36                 db    1
.eh_frame:0000000000006C37                 db  43h ; C
.eh_frame:0000000000006C38                 db  0Eh
.eh_frame:0000000000006C39                 db  88h
.eh_frame:0000000000006C3A                 db    1
.eh_frame:0000000000006C3B                 db  56h ; V
.eh_frame:0000000000006C3C                 db  0Eh
.eh_frame:0000000000006C3D                 db  90h
.eh_frame:0000000000006C3E                 db    1
.eh_frame:0000000000006C3F                 db  52h ; R
.eh_frame:0000000000006C40                 db  0Eh
.eh_frame:0000000000006C41                 db  70h ; p
.eh_frame:0000000000006C42                 db  5Bh ; [
.eh_frame:0000000000006C43                 db  0Eh
.eh_frame:0000000000006C44                 db  38h ; 8
.eh_frame:0000000000006C45                 db  41h ; A
.eh_frame:0000000000006C46                 db  0Eh
.eh_frame:0000000000006C47                 db  30h ; 0
.eh_frame:0000000000006C48                 db  41h ; A
.eh_frame:0000000000006C49                 db  0Eh
.eh_frame:0000000000006C4A                 db  28h ; (
.eh_frame:0000000000006C4B                 db  42h ; B
.eh_frame:0000000000006C4C                 db  0Eh
.eh_frame:0000000000006C4D                 db  20h
.eh_frame:0000000000006C4E                 db  42h ; B
.eh_frame:0000000000006C4F                 db  0Eh
.eh_frame:0000000000006C50                 db  18h
.eh_frame:0000000000006C51                 db  42h ; B
.eh_frame:0000000000006C52                 db  0Eh
.eh_frame:0000000000006C53                 db  10h
.eh_frame:0000000000006C54                 db  42h ; B
.eh_frame:0000000000006C55                 db  0Eh
.eh_frame:0000000000006C56                 db    8
.eh_frame:0000000000006C57                 db    0
.eh_frame:0000000000006C58                 db  10h
.eh_frame:0000000000006C59                 db    0
.eh_frame:0000000000006C5A                 db    0
.eh_frame:0000000000006C5B                 db    0
.eh_frame:0000000000006C5C                 db  94h
.eh_frame:0000000000006C5D                 db    5
.eh_frame:0000000000006C5E                 db    0
.eh_frame:0000000000006C5F                 db    0
.eh_frame:0000000000006C60                 db  30h ; 0
.eh_frame:0000000000006C61                 db 0D6h
.eh_frame:0000000000006C62                 db 0FFh
.eh_frame:0000000000006C63                 db 0FFh
.eh_frame:0000000000006C64                 db  0Ah
.eh_frame:0000000000006C65                 db    0
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db    0
.eh_frame:0000000000006C69                 db    0
.eh_frame:0000000000006C6A                 db    0
.eh_frame:0000000000006C6B                 db    0
.eh_frame:0000000000006C6C                 db  28h ; (
.eh_frame:0000000000006C6D                 db    0
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db 0A8h
.eh_frame:0000000000006C71                 db    5
.eh_frame:0000000000006C72                 db    0
.eh_frame:0000000000006C73                 db    0
.eh_frame:0000000000006C74                 db  2Ch ; ,
.eh_frame:0000000000006C75                 db 0D6h
.eh_frame:0000000000006C76                 db 0FFh
.eh_frame:0000000000006C77                 db 0FFh
.eh_frame:0000000000006C78                 db  93h
.eh_frame:0000000000006C79                 db    0
.eh_frame:0000000000006C7A                 db    0
.eh_frame:0000000000006C7B                 db    0
.eh_frame:0000000000006C7C                 db    0
.eh_frame:0000000000006C7D                 db  48h ; H
.eh_frame:0000000000006C7E                 db  0Eh
.eh_frame:0000000000006C7F                 db  10h
.eh_frame:0000000000006C80                 db  8Ch
.eh_frame:0000000000006C81                 db    2
.eh_frame:0000000000006C82                 db  48h ; H
.eh_frame:0000000000006C83                 db  0Eh
.eh_frame:0000000000006C84                 db  18h
.eh_frame:0000000000006C85                 db  86h
.eh_frame:0000000000006C86                 db    3
.eh_frame:0000000000006C87                 db  41h ; A
.eh_frame:0000000000006C88                 db  0Eh
.eh_frame:0000000000006C89                 db  20h
.eh_frame:0000000000006C8A                 db  83h
.eh_frame:0000000000006C8B                 db    4
.eh_frame:0000000000006C8C                 db    2
.eh_frame:0000000000006C8D                 db  74h ; t
.eh_frame:0000000000006C8E                 db  0Eh
.eh_frame:0000000000006C8F                 db  18h
.eh_frame:0000000000006C90                 db  4Bh ; K
.eh_frame:0000000000006C91                 db  0Eh
.eh_frame:0000000000006C92                 db  10h
.eh_frame:0000000000006C93                 db  42h ; B
.eh_frame:0000000000006C94                 db  0Eh
.eh_frame:0000000000006C95                 db    8
.eh_frame:0000000000006C96                 db    0
.eh_frame:0000000000006C97                 db    0
.eh_frame:0000000000006C98                 db  10h
.eh_frame:0000000000006C99                 db    0
.eh_frame:0000000000006C9A                 db    0
.eh_frame:0000000000006C9B                 db    0
.eh_frame:0000000000006C9C                 db 0D4h
.eh_frame:0000000000006C9D                 db    5
.eh_frame:0000000000006C9E                 db    0
.eh_frame:0000000000006C9F                 db    0
.eh_frame:0000000000006CA0                 db 0A0h
.eh_frame:0000000000006CA1                 db 0D6h
.eh_frame:0000000000006CA2                 db 0FFh
.eh_frame:0000000000006CA3                 db 0FFh
.eh_frame:0000000000006CA4                 db  13h
.eh_frame:0000000000006CA5                 db    0
.eh_frame:0000000000006CA6                 db    0
.eh_frame:0000000000006CA7                 db    0
.eh_frame:0000000000006CA8                 db    0
.eh_frame:0000000000006CA9                 db    0
.eh_frame:0000000000006CAA                 db    0
.eh_frame:0000000000006CAB                 db    0
.eh_frame:0000000000006CAC                 db  10h
.eh_frame:0000000000006CAD                 db    0
.eh_frame:0000000000006CAE                 db    0
.eh_frame:0000000000006CAF                 db    0
.eh_frame:0000000000006CB0                 db 0E8h
.eh_frame:0000000000006CB1                 db    5
.eh_frame:0000000000006CB2                 db    0
.eh_frame:0000000000006CB3                 db    0
.eh_frame:0000000000006CB4                 db 0ACh
.eh_frame:0000000000006CB5                 db 0D6h
.eh_frame:0000000000006CB6                 db 0FFh
.eh_frame:0000000000006CB7                 db 0FFh
.eh_frame:0000000000006CB8                 db  0Ch
.eh_frame:0000000000006CB9                 db    0
.eh_frame:0000000000006CBA                 db    0
.eh_frame:0000000000006CBB                 db    0
.eh_frame:0000000000006CBC                 db    0
.eh_frame:0000000000006CBD                 db    0
.eh_frame:0000000000006CBE                 db    0
.eh_frame:0000000000006CBF                 db    0
.eh_frame:0000000000006CC0                 db  10h
.eh_frame:0000000000006CC1                 db    0
.eh_frame:0000000000006CC2                 db    0
.eh_frame:0000000000006CC3                 db    0
.eh_frame:0000000000006CC4                 db 0FCh
.eh_frame:0000000000006CC5                 db    5
.eh_frame:0000000000006CC6                 db    0
.eh_frame:0000000000006CC7                 db    0
.eh_frame:0000000000006CC8                 db 0A8h
.eh_frame:0000000000006CC9                 db 0D6h
.eh_frame:0000000000006CCA                 db 0FFh
.eh_frame:0000000000006CCB                 db 0FFh
.eh_frame:0000000000006CCC                 db  18h
.eh_frame:0000000000006CCD                 db    0
.eh_frame:0000000000006CCE                 db    0
.eh_frame:0000000000006CCF                 db    0
.eh_frame:0000000000006CD0                 db    0
.eh_frame:0000000000006CD1                 db    0
.eh_frame:0000000000006CD2                 db    0
.eh_frame:0000000000006CD3                 db    0
.eh_frame:0000000000006CD4                 db  10h
.eh_frame:0000000000006CD5                 db    0
.eh_frame:0000000000006CD6                 db    0
.eh_frame:0000000000006CD7                 db    0
.eh_frame:0000000000006CD8                 db  10h
.eh_frame:0000000000006CD9                 db    6
.eh_frame:0000000000006CDA                 db    0
.eh_frame:0000000000006CDB                 db    0
.eh_frame:0000000000006CDC                 db 0B4h
.eh_frame:0000000000006CDD                 db 0D6h
.eh_frame:0000000000006CDE                 db 0FFh
.eh_frame:0000000000006CDF                 db 0FFh
.eh_frame:0000000000006CE0                 db  14h
.eh_frame:0000000000006CE1                 db    0
.eh_frame:0000000000006CE2                 db    0
.eh_frame:0000000000006CE3                 db    0
.eh_frame:0000000000006CE4                 db    0
.eh_frame:0000000000006CE5                 db    0
.eh_frame:0000000000006CE6                 db    0
.eh_frame:0000000000006CE7                 db    0
.eh_frame:0000000000006CE8                 db  18h
.eh_frame:0000000000006CE9                 db    0
.eh_frame:0000000000006CEA                 db    0
.eh_frame:0000000000006CEB                 db    0
.eh_frame:0000000000006CEC                 db  24h ; $
.eh_frame:0000000000006CED                 db    6
.eh_frame:0000000000006CEE                 db    0
.eh_frame:0000000000006CEF                 db    0
.eh_frame:0000000000006CF0                 db 0C0h
.eh_frame:0000000000006CF1                 db 0D6h
.eh_frame:0000000000006CF2                 db 0FFh
.eh_frame:0000000000006CF3                 db 0FFh
.eh_frame:0000000000006CF4                 db  8Eh
.eh_frame:0000000000006CF5                 db    0
.eh_frame:0000000000006CF6                 db    0
.eh_frame:0000000000006CF7                 db    0
.eh_frame:0000000000006CF8                 db    0
.eh_frame:0000000000006CF9                 db  44h ; D
.eh_frame:0000000000006CFA                 db  0Eh
.eh_frame:0000000000006CFB                 db  50h ; P
.eh_frame:0000000000006CFC                 db    2
.eh_frame:0000000000006CFD                 db  7Fh ; 
.eh_frame:0000000000006CFE                 db  0Ah
.eh_frame:0000000000006CFF                 db  0Eh
.eh_frame:0000000000006D00                 db    8
.eh_frame:0000000000006D01                 db  41h ; A
.eh_frame:0000000000006D02                 db  0Bh
.eh_frame:0000000000006D03                 db    0
.eh_frame:0000000000006D04                 db  18h
.eh_frame:0000000000006D05                 db    0
.eh_frame:0000000000006D06                 db    0
.eh_frame:0000000000006D07                 db    0
.eh_frame:0000000000006D08                 db  40h ; @
.eh_frame:0000000000006D09                 db    6
.eh_frame:0000000000006D0A                 db    0
.eh_frame:0000000000006D0B                 db    0
.eh_frame:0000000000006D0C                 db  34h ; 4
.eh_frame:0000000000006D0D                 db 0D7h
.eh_frame:0000000000006D0E                 db 0FFh
.eh_frame:0000000000006D0F                 db 0FFh
.eh_frame:0000000000006D10                 db  8Ah
.eh_frame:0000000000006D11                 db    0
.eh_frame:0000000000006D12                 db    0
.eh_frame:0000000000006D13                 db    0
.eh_frame:0000000000006D14                 db    0
.eh_frame:0000000000006D15                 db  44h ; D
.eh_frame:0000000000006D16                 db  0Eh
.eh_frame:0000000000006D17                 db  50h ; P
.eh_frame:0000000000006D18                 db    2
.eh_frame:0000000000006D19                 db  7Bh ; {
.eh_frame:0000000000006D1A                 db  0Ah
.eh_frame:0000000000006D1B                 db  0Eh
.eh_frame:0000000000006D1C                 db    8
.eh_frame:0000000000006D1D                 db  41h ; A
.eh_frame:0000000000006D1E                 db  0Bh
.eh_frame:0000000000006D1F                 db    0
.eh_frame:0000000000006D20                 db  10h
.eh_frame:0000000000006D21                 db    0
.eh_frame:0000000000006D22                 db    0
.eh_frame:0000000000006D23                 db    0
.eh_frame:0000000000006D24                 db  5Ch ; \
.eh_frame:0000000000006D25                 db    6
.eh_frame:0000000000006D26                 db    0
.eh_frame:0000000000006D27                 db    0
.eh_frame:0000000000006D28                 db 0A8h
.eh_frame:0000000000006D29                 db 0D7h
.eh_frame:0000000000006D2A                 db 0FFh
.eh_frame:0000000000006D2B                 db 0FFh
.eh_frame:0000000000006D2C                 db  0Ch
.eh_frame:0000000000006D2D                 db    0
.eh_frame:0000000000006D2E                 db    0
.eh_frame:0000000000006D2F                 db    0
.eh_frame:0000000000006D30                 db    0
.eh_frame:0000000000006D31                 db    0
.eh_frame:0000000000006D32                 db    0
.eh_frame:0000000000006D33                 db    0
.eh_frame:0000000000006D34                 db  10h
.eh_frame:0000000000006D35                 db    0
.eh_frame:0000000000006D36                 db    0
.eh_frame:0000000000006D37                 db    0
.eh_frame:0000000000006D38                 db  70h ; p
.eh_frame:0000000000006D39                 db    6
.eh_frame:0000000000006D3A                 db    0
.eh_frame:0000000000006D3B                 db    0
.eh_frame:0000000000006D3C                 db 0A4h
.eh_frame:0000000000006D3D                 db 0D7h
.eh_frame:0000000000006D3E                 db 0FFh
.eh_frame:0000000000006D3F                 db 0FFh
.eh_frame:0000000000006D40                 db  0Fh
.eh_frame:0000000000006D41                 db    0
.eh_frame:0000000000006D42                 db    0
.eh_frame:0000000000006D43                 db    0
.eh_frame:0000000000006D44                 db    0
.eh_frame:0000000000006D45                 db    0
.eh_frame:0000000000006D46                 db    0
.eh_frame:0000000000006D47                 db    0
.eh_frame:0000000000006D48                 db  18h
.eh_frame:0000000000006D49                 db    0
.eh_frame:0000000000006D4A                 db    0
.eh_frame:0000000000006D4B                 db    0
.eh_frame:0000000000006D4C                 db  84h
.eh_frame:0000000000006D4D                 db    6
.eh_frame:0000000000006D4E                 db    0
.eh_frame:0000000000006D4F                 db    0
.eh_frame:0000000000006D50                 db 0A0h
.eh_frame:0000000000006D51                 db 0D7h
.eh_frame:0000000000006D52                 db 0FFh
.eh_frame:0000000000006D53                 db 0FFh
.eh_frame:0000000000006D54                 db  98h
.eh_frame:0000000000006D55                 db    0
.eh_frame:0000000000006D56                 db    0
.eh_frame:0000000000006D57                 db    0
.eh_frame:0000000000006D58                 db    0
.eh_frame:0000000000006D59                 db  44h ; D
.eh_frame:0000000000006D5A                 db  0Eh
.eh_frame:0000000000006D5B                 db  50h ; P
.eh_frame:0000000000006D5C                 db    2
.eh_frame:0000000000006D5D                 db  8Eh
.eh_frame:0000000000006D5E                 db  0Ah
.eh_frame:0000000000006D5F                 db  0Eh
.eh_frame:0000000000006D60                 db    8
.eh_frame:0000000000006D61                 db  41h ; A
.eh_frame:0000000000006D62                 db  0Bh
.eh_frame:0000000000006D63                 db    0
.eh_frame:0000000000006D64                 db  10h
.eh_frame:0000000000006D65                 db    0
.eh_frame:0000000000006D66                 db    0
.eh_frame:0000000000006D67                 db    0
.eh_frame:0000000000006D68                 db 0A0h
.eh_frame:0000000000006D69                 db    6
.eh_frame:0000000000006D6A                 db    0
.eh_frame:0000000000006D6B                 db    0
.eh_frame:0000000000006D6C                 db  24h ; $
.eh_frame:0000000000006D6D                 db 0D8h
.eh_frame:0000000000006D6E                 db 0FFh
.eh_frame:0000000000006D6F                 db 0FFh
.eh_frame:0000000000006D70                 db  10h
.eh_frame:0000000000006D71                 db    0
.eh_frame:0000000000006D72                 db    0
.eh_frame:0000000000006D73                 db    0
.eh_frame:0000000000006D74                 db    0
.eh_frame:0000000000006D75                 db    0
.eh_frame:0000000000006D76                 db    0
.eh_frame:0000000000006D77                 db    0
.eh_frame:0000000000006D78                 db  10h
.eh_frame:0000000000006D79                 db    0
.eh_frame:0000000000006D7A                 db    0
.eh_frame:0000000000006D7B                 db    0
.eh_frame:0000000000006D7C                 db 0B4h
.eh_frame:0000000000006D7D                 db    6
.eh_frame:0000000000006D7E                 db    0
.eh_frame:0000000000006D7F                 db    0
.eh_frame:0000000000006D80                 db  20h
.eh_frame:0000000000006D81                 db 0D8h
.eh_frame:0000000000006D82                 db 0FFh
.eh_frame:0000000000006D83                 db 0FFh
.eh_frame:0000000000006D84                 db  11h
.eh_frame:0000000000006D85                 db    0
.eh_frame:0000000000006D86                 db    0
.eh_frame:0000000000006D87                 db    0
.eh_frame:0000000000006D88                 db    0
.eh_frame:0000000000006D89                 db    0
.eh_frame:0000000000006D8A                 db    0
.eh_frame:0000000000006D8B                 db    0
.eh_frame:0000000000006D8C                 db  10h
.eh_frame:0000000000006D8D                 db    0
.eh_frame:0000000000006D8E                 db    0
.eh_frame:0000000000006D8F                 db    0
.eh_frame:0000000000006D90                 db 0C8h
.eh_frame:0000000000006D91                 db    6
.eh_frame:0000000000006D92                 db    0
.eh_frame:0000000000006D93                 db    0
.eh_frame:0000000000006D94                 db  2Ch ; ,
.eh_frame:0000000000006D95                 db 0D8h
.eh_frame:0000000000006D96                 db 0FFh
.eh_frame:0000000000006D97                 db 0FFh
.eh_frame:0000000000006D98                 db  0Ah
.eh_frame:0000000000006D99                 db    0
.eh_frame:0000000000006D9A                 db    0
.eh_frame:0000000000006D9B                 db    0
.eh_frame:0000000000006D9C                 db    0
.eh_frame:0000000000006D9D                 db    0
.eh_frame:0000000000006D9E                 db    0
.eh_frame:0000000000006D9F                 db    0
.eh_frame:0000000000006DA0                 db  18h
.eh_frame:0000000000006DA1                 db    0
.eh_frame:0000000000006DA2                 db    0
.eh_frame:0000000000006DA3                 db    0
.eh_frame:0000000000006DA4                 db 0DCh
.eh_frame:0000000000006DA5                 db    6
.eh_frame:0000000000006DA6                 db    0
.eh_frame:0000000000006DA7                 db    0
.eh_frame:0000000000006DA8                 db  28h ; (
.eh_frame:0000000000006DA9                 db 0D8h
.eh_frame:0000000000006DAA                 db 0FFh
.eh_frame:0000000000006DAB                 db 0FFh
.eh_frame:0000000000006DAC                 db  8Eh
.eh_frame:0000000000006DAD                 db    0
.eh_frame:0000000000006DAE                 db    0
.eh_frame:0000000000006DAF                 db    0
.eh_frame:0000000000006DB0                 db    0
.eh_frame:0000000000006DB1                 db  44h ; D
.eh_frame:0000000000006DB2                 db  0Eh
.eh_frame:0000000000006DB3                 db  50h ; P
.eh_frame:0000000000006DB4                 db    2
.eh_frame:0000000000006DB5                 db  7Fh ; 
.eh_frame:0000000000006DB6                 db  0Ah
.eh_frame:0000000000006DB7                 db  0Eh
.eh_frame:0000000000006DB8                 db    8
.eh_frame:0000000000006DB9                 db  41h ; A
.eh_frame:0000000000006DBA                 db  0Bh
.eh_frame:0000000000006DBB                 db    0
.eh_frame:0000000000006DBC                 db  18h
.eh_frame:0000000000006DBD                 db    0
.eh_frame:0000000000006DBE                 db    0
.eh_frame:0000000000006DBF                 db    0
.eh_frame:0000000000006DC0                 db 0F8h
.eh_frame:0000000000006DC1                 db    6
.eh_frame:0000000000006DC2                 db    0
.eh_frame:0000000000006DC3                 db    0
.eh_frame:0000000000006DC4                 db  9Ch
.eh_frame:0000000000006DC5                 db 0D8h
.eh_frame:0000000000006DC6                 db 0FFh
.eh_frame:0000000000006DC7                 db 0FFh
.eh_frame:0000000000006DC8                 db  91h
.eh_frame:0000000000006DC9                 db    0
.eh_frame:0000000000006DCA                 db    0
.eh_frame:0000000000006DCB                 db    0
.eh_frame:0000000000006DCC                 db    0
.eh_frame:0000000000006DCD                 db  44h ; D
.eh_frame:0000000000006DCE                 db  0Eh
.eh_frame:0000000000006DCF                 db  50h ; P
.eh_frame:0000000000006DD0                 db    2
.eh_frame:0000000000006DD1                 db  82h
.eh_frame:0000000000006DD2                 db  0Ah
.eh_frame:0000000000006DD3                 db  0Eh
.eh_frame:0000000000006DD4                 db    8
.eh_frame:0000000000006DD5                 db  41h ; A
.eh_frame:0000000000006DD6                 db  0Bh
.eh_frame:0000000000006DD7                 db    0
.eh_frame:0000000000006DD8                 db  10h
.eh_frame:0000000000006DD9                 db    0
.eh_frame:0000000000006DDA                 db    0
.eh_frame:0000000000006DDB                 db    0
.eh_frame:0000000000006DDC                 db  14h
.eh_frame:0000000000006DDD                 db    7
.eh_frame:0000000000006DDE                 db    0
.eh_frame:0000000000006DDF                 db    0
.eh_frame:0000000000006DE0                 db  20h
.eh_frame:0000000000006DE1                 db 0D9h
.eh_frame:0000000000006DE2                 db 0FFh
.eh_frame:0000000000006DE3                 db 0FFh
.eh_frame:0000000000006DE4                 db  0Ch
.eh_frame:0000000000006DE5                 db    0
.eh_frame:0000000000006DE6                 db    0
.eh_frame:0000000000006DE7                 db    0
.eh_frame:0000000000006DE8                 db    0
.eh_frame:0000000000006DE9                 db    0
.eh_frame:0000000000006DEA                 db    0
.eh_frame:0000000000006DEB                 db    0
.eh_frame:0000000000006DEC                 db  10h
.eh_frame:0000000000006DED                 db    0
.eh_frame:0000000000006DEE                 db    0
.eh_frame:0000000000006DEF                 db    0
.eh_frame:0000000000006DF0                 db  28h ; (
.eh_frame:0000000000006DF1                 db    7
.eh_frame:0000000000006DF2                 db    0
.eh_frame:0000000000006DF3                 db    0
.eh_frame:0000000000006DF4                 db  1Ch
.eh_frame:0000000000006DF5                 db 0D9h
.eh_frame:0000000000006DF6                 db 0FFh
.eh_frame:0000000000006DF7                 db 0FFh
.eh_frame:0000000000006DF8                 db  17h
.eh_frame:0000000000006DF9                 db    0
.eh_frame:0000000000006DFA                 db    0
.eh_frame:0000000000006DFB                 db    0
.eh_frame:0000000000006DFC                 db    0
.eh_frame:0000000000006DFD                 db    0
.eh_frame:0000000000006DFE                 db    0
.eh_frame:0000000000006DFF                 db    0
.eh_frame:0000000000006E00                 db  10h
.eh_frame:0000000000006E01                 db    0
.eh_frame:0000000000006E02                 db    0
.eh_frame:0000000000006E03                 db    0
.eh_frame:0000000000006E04                 db  3Ch ; <
.eh_frame:0000000000006E05                 db    7
.eh_frame:0000000000006E06                 db    0
.eh_frame:0000000000006E07                 db    0
.eh_frame:0000000000006E08                 db  28h ; (
.eh_frame:0000000000006E09                 db 0D9h
.eh_frame:0000000000006E0A                 db 0FFh
.eh_frame:0000000000006E0B                 db 0FFh
.eh_frame:0000000000006E0C                 db  13h
.eh_frame:0000000000006E0D                 db    0
.eh_frame:0000000000006E0E                 db    0
.eh_frame:0000000000006E0F                 db    0
.eh_frame:0000000000006E10                 db    0
.eh_frame:0000000000006E11                 db    0
.eh_frame:0000000000006E12                 db    0
.eh_frame:0000000000006E13                 db    0
.eh_frame:0000000000006E14                 db  10h
.eh_frame:0000000000006E15                 db    0
.eh_frame:0000000000006E16                 db    0
.eh_frame:0000000000006E17                 db    0
.eh_frame:0000000000006E18                 db  50h ; P
.eh_frame:0000000000006E19                 db    7
.eh_frame:0000000000006E1A                 db    0
.eh_frame:0000000000006E1B                 db    0
.eh_frame:0000000000006E1C                 db  34h ; 4
.eh_frame:0000000000006E1D                 db 0D9h
.eh_frame:0000000000006E1E                 db 0FFh
.eh_frame:0000000000006E1F                 db 0FFh
.eh_frame:0000000000006E20                 db  0Ch
.eh_frame:0000000000006E21                 db    0
.eh_frame:0000000000006E22                 db    0
.eh_frame:0000000000006E23                 db    0
.eh_frame:0000000000006E24                 db    0
.eh_frame:0000000000006E25                 db    0
.eh_frame:0000000000006E26                 db    0
.eh_frame:0000000000006E27                 db    0
.eh_frame:0000000000006E28                 db  10h
.eh_frame:0000000000006E29                 db    0
.eh_frame:0000000000006E2A                 db    0
.eh_frame:0000000000006E2B                 db    0
.eh_frame:0000000000006E2C                 db  64h ; d
.eh_frame:0000000000006E2D                 db    7
.eh_frame:0000000000006E2E                 db    0
.eh_frame:0000000000006E2F                 db    0
.eh_frame:0000000000006E30                 db  30h ; 0
.eh_frame:0000000000006E31                 db 0D9h
.eh_frame:0000000000006E32                 db 0FFh
.eh_frame:0000000000006E33                 db 0FFh
.eh_frame:0000000000006E34                 db  14h
.eh_frame:0000000000006E35                 db    0
.eh_frame:0000000000006E36                 db    0
.eh_frame:0000000000006E37                 db    0
.eh_frame:0000000000006E38                 db    0
.eh_frame:0000000000006E39                 db    0
.eh_frame:0000000000006E3A                 db    0
.eh_frame:0000000000006E3B                 db    0
.eh_frame:0000000000006E3C                 db  10h
.eh_frame:0000000000006E3D                 db    0
.eh_frame:0000000000006E3E                 db    0
.eh_frame:0000000000006E3F                 db    0
.eh_frame:0000000000006E40                 db  78h ; x
.eh_frame:0000000000006E41                 db    7
.eh_frame:0000000000006E42                 db    0
.eh_frame:0000000000006E43                 db    0
.eh_frame:0000000000006E44                 db  3Ch ; <
.eh_frame:0000000000006E45                 db 0D9h
.eh_frame:0000000000006E46                 db 0FFh
.eh_frame:0000000000006E47                 db 0FFh
.eh_frame:0000000000006E48                 db  13h
.eh_frame:0000000000006E49                 db    0
.eh_frame:0000000000006E4A                 db    0
.eh_frame:0000000000006E4B                 db    0
.eh_frame:0000000000006E4C                 db    0
.eh_frame:0000000000006E4D                 db    0
.eh_frame:0000000000006E4E                 db    0
.eh_frame:0000000000006E4F                 db    0
.eh_frame:0000000000006E50                 db  14h
.eh_frame:0000000000006E51                 db    0
.eh_frame:0000000000006E52                 db    0
.eh_frame:0000000000006E53                 db    0
.eh_frame:0000000000006E54                 db  8Ch
.eh_frame:0000000000006E55                 db    7
.eh_frame:0000000000006E56                 db    0
.eh_frame:0000000000006E57                 db    0
.eh_frame:0000000000006E58                 db  48h ; H
.eh_frame:0000000000006E59                 db 0D9h
.eh_frame:0000000000006E5A                 db 0FFh
.eh_frame:0000000000006E5B                 db 0FFh
.eh_frame:0000000000006E5C                 db  18h
.eh_frame:0000000000006E5D                 db    0
.eh_frame:0000000000006E5E                 db    0
.eh_frame:0000000000006E5F                 db    0
.eh_frame:0000000000006E60                 db    0
.eh_frame:0000000000006E61                 db    0
.eh_frame:0000000000006E62                 db    0
.eh_frame:0000000000006E63                 db    0
.eh_frame:0000000000006E64                 db    0
.eh_frame:0000000000006E65                 db    0
.eh_frame:0000000000006E66                 db    0
.eh_frame:0000000000006E67                 db    0
.eh_frame:0000000000006E68                 db  10h
.eh_frame:0000000000006E69                 db    1
.eh_frame:0000000000006E6A                 db    0
.eh_frame:0000000000006E6B                 db    0
.eh_frame:0000000000006E6C                 db 0A4h
.eh_frame:0000000000006E6D                 db    7
.eh_frame:0000000000006E6E                 db    0
.eh_frame:0000000000006E6F                 db    0
.eh_frame:0000000000006E70                 db  50h ; P
.eh_frame:0000000000006E71                 db 0D9h
.eh_frame:0000000000006E72                 db 0FFh
.eh_frame:0000000000006E73                 db 0FFh
.eh_frame:0000000000006E74                 db  17h
.eh_frame:0000000000006E75                 db    4
.eh_frame:0000000000006E76                 db    0
.eh_frame:0000000000006E77                 db    0
.eh_frame:0000000000006E78                 db    0
.eh_frame:0000000000006E79                 db  42h ; B
.eh_frame:0000000000006E7A                 db  0Eh
.eh_frame:0000000000006E7B                 db  10h
.eh_frame:0000000000006E7C                 db  8Fh
.eh_frame:0000000000006E7D                 db    2
.eh_frame:0000000000006E7E                 db  42h ; B
.eh_frame:0000000000006E7F                 db  0Eh
.eh_frame:0000000000006E80                 db  18h
.eh_frame:0000000000006E81                 db  8Eh
.eh_frame:0000000000006E82                 db    3
.eh_frame:0000000000006E83                 db  42h ; B
.eh_frame:0000000000006E84                 db  0Eh
.eh_frame:0000000000006E85                 db  20h
.eh_frame:0000000000006E86                 db  8Dh
.eh_frame:0000000000006E87                 db    4
.eh_frame:0000000000006E88                 db  42h ; B
.eh_frame:0000000000006E89                 db  0Eh
.eh_frame:0000000000006E8A                 db  28h ; (
.eh_frame:0000000000006E8B                 db  8Ch
.eh_frame:0000000000006E8C                 db    5
.eh_frame:0000000000006E8D                 db  44h ; D
.eh_frame:0000000000006E8E                 db  0Eh
.eh_frame:0000000000006E8F                 db  30h ; 0
.eh_frame:0000000000006E90                 db  86h
.eh_frame:0000000000006E91                 db    6
.eh_frame:0000000000006E92                 db  41h ; A
.eh_frame:0000000000006E93                 db  0Eh
.eh_frame:0000000000006E94                 db  38h ; 8
.eh_frame:0000000000006E95                 db  83h
.eh_frame:0000000000006E96                 db    7
.eh_frame:0000000000006E97                 db  4Ah ; J
.eh_frame:0000000000006E98                 db  0Eh
.eh_frame:0000000000006E99                 db  60h ; `
.eh_frame:0000000000006E9A                 db    2
.eh_frame:0000000000006E9B                 db 0DDh
.eh_frame:0000000000006E9C                 db  0Eh
.eh_frame:0000000000006E9D                 db  68h ; h
.eh_frame:0000000000006E9E                 db  57h ; W
.eh_frame:0000000000006E9F                 db  0Eh
.eh_frame:0000000000006EA0                 db  70h ; p
.eh_frame:0000000000006EA1                 db  42h ; B
.eh_frame:0000000000006EA2                 db  0Eh
.eh_frame:0000000000006EA3                 db  78h ; x
.eh_frame:0000000000006EA4                 db  42h ; B
.eh_frame:0000000000006EA5                 db  0Eh
.eh_frame:0000000000006EA6                 db  80h
.eh_frame:0000000000006EA7                 db    1
.eh_frame:0000000000006EA8                 db  42h ; B
.eh_frame:0000000000006EA9                 db  0Eh
.eh_frame:0000000000006EAA                 db  88h
.eh_frame:0000000000006EAB                 db    1
.eh_frame:0000000000006EAC                 db  42h ; B
.eh_frame:0000000000006EAD                 db  0Eh
.eh_frame:0000000000006EAE                 db  90h
.eh_frame:0000000000006EAF                 db    1
.eh_frame:0000000000006EB0                 db  53h ; S
.eh_frame:0000000000006EB1                 db  0Eh
.eh_frame:0000000000006EB2                 db  60h ; `
.eh_frame:0000000000006EB3                 db  44h ; D
.eh_frame:0000000000006EB4                 db  0Ah
.eh_frame:0000000000006EB5                 db  0Eh
.eh_frame:0000000000006EB6                 db  38h ; 8
.eh_frame:0000000000006EB7                 db  41h ; A
.eh_frame:0000000000006EB8                 db  0Eh
.eh_frame:0000000000006EB9                 db  30h ; 0
.eh_frame:0000000000006EBA                 db  41h ; A
.eh_frame:0000000000006EBB                 db  0Eh
.eh_frame:0000000000006EBC                 db  28h ; (
.eh_frame:0000000000006EBD                 db  42h ; B
.eh_frame:0000000000006EBE                 db  0Eh
.eh_frame:0000000000006EBF                 db  20h
.eh_frame:0000000000006EC0                 db  42h ; B
.eh_frame:0000000000006EC1                 db  0Eh
.eh_frame:0000000000006EC2                 db  18h
.eh_frame:0000000000006EC3                 db  42h ; B
.eh_frame:0000000000006EC4                 db  0Eh
.eh_frame:0000000000006EC5                 db  10h
.eh_frame:0000000000006EC6                 db  42h ; B
.eh_frame:0000000000006EC7                 db  0Eh
.eh_frame:0000000000006EC8                 db    8
.eh_frame:0000000000006EC9                 db  44h ; D
.eh_frame:0000000000006ECA                 db  0Bh
.eh_frame:0000000000006ECB                 db    2
.eh_frame:0000000000006ECC                 db  78h ; x
.eh_frame:0000000000006ECD                 db  0Ah
.eh_frame:0000000000006ECE                 db  0Eh
.eh_frame:0000000000006ECF                 db  68h ; h
.eh_frame:0000000000006ED0                 db  48h ; H
.eh_frame:0000000000006ED1                 db  0Bh
.eh_frame:0000000000006ED2                 db  5Ah ; Z
.eh_frame:0000000000006ED3                 db  0Ah
.eh_frame:0000000000006ED4                 db  0Eh
.eh_frame:0000000000006ED5                 db  38h ; 8
.eh_frame:0000000000006ED6                 db  47h ; G
.eh_frame:0000000000006ED7                 db  0Eh
.eh_frame:0000000000006ED8                 db  30h ; 0
.eh_frame:0000000000006ED9                 db  41h ; A
.eh_frame:0000000000006EDA                 db  0Eh
.eh_frame:0000000000006EDB                 db  28h ; (
.eh_frame:0000000000006EDC                 db  42h ; B
.eh_frame:0000000000006EDD                 db  0Eh
.eh_frame:0000000000006EDE                 db  20h
.eh_frame:0000000000006EDF                 db  42h ; B
.eh_frame:0000000000006EE0                 db  0Eh
.eh_frame:0000000000006EE1                 db  18h
.eh_frame:0000000000006EE2                 db  42h ; B
.eh_frame:0000000000006EE3                 db  0Eh
.eh_frame:0000000000006EE4                 db  10h
.eh_frame:0000000000006EE5                 db  42h ; B
.eh_frame:0000000000006EE6                 db  0Eh
.eh_frame:0000000000006EE7                 db    8
.eh_frame:0000000000006EE8                 db  56h ; V
.eh_frame:0000000000006EE9                 db  0Bh
.eh_frame:0000000000006EEA                 db  5Eh ; ^
.eh_frame:0000000000006EEB                 db  0Ah
.eh_frame:0000000000006EEC                 db  0Eh
.eh_frame:0000000000006EED                 db  38h ; 8
.eh_frame:0000000000006EEE                 db  52h ; R
.eh_frame:0000000000006EEF                 db  0Eh
.eh_frame:0000000000006EF0                 db  30h ; 0
.eh_frame:0000000000006EF1                 db  41h ; A
.eh_frame:0000000000006EF2                 db  0Eh
.eh_frame:0000000000006EF3                 db  28h ; (
.eh_frame:0000000000006EF4                 db  42h ; B
.eh_frame:0000000000006EF5                 db  0Eh
.eh_frame:0000000000006EF6                 db  20h
.eh_frame:0000000000006EF7                 db  42h ; B
.eh_frame:0000000000006EF8                 db  0Eh
.eh_frame:0000000000006EF9                 db  18h
.eh_frame:0000000000006EFA                 db  42h ; B
.eh_frame:0000000000006EFB                 db  0Eh
.eh_frame:0000000000006EFC                 db  10h
.eh_frame:0000000000006EFD                 db  42h ; B
.eh_frame:0000000000006EFE                 db  0Eh
.eh_frame:0000000000006EFF                 db    8
.eh_frame:0000000000006F00                 db  4Fh ; O
.eh_frame:0000000000006F01                 db  0Bh
.eh_frame:0000000000006F02                 db  62h ; b
.eh_frame:0000000000006F03                 db  0Ah
.eh_frame:0000000000006F04                 db  0Eh
.eh_frame:0000000000006F05                 db  38h ; 8
.eh_frame:0000000000006F06                 db  50h ; P
.eh_frame:0000000000006F07                 db  0Eh
.eh_frame:0000000000006F08                 db  30h ; 0
.eh_frame:0000000000006F09                 db  41h ; A
.eh_frame:0000000000006F0A                 db  0Eh
.eh_frame:0000000000006F0B                 db  28h ; (
.eh_frame:0000000000006F0C                 db  42h ; B
.eh_frame:0000000000006F0D                 db  0Eh
.eh_frame:0000000000006F0E                 db  20h
.eh_frame:0000000000006F0F                 db  42h ; B
.eh_frame:0000000000006F10                 db  0Eh
.eh_frame:0000000000006F11                 db  18h
.eh_frame:0000000000006F12                 db  42h ; B
.eh_frame:0000000000006F13                 db  0Eh
.eh_frame:0000000000006F14                 db  10h
.eh_frame:0000000000006F15                 db  42h ; B
.eh_frame:0000000000006F16                 db  0Eh
.eh_frame:0000000000006F17                 db    8
.eh_frame:0000000000006F18                 db  55h ; U
.eh_frame:0000000000006F19                 db  0Bh
.eh_frame:0000000000006F1A                 db  66h ; f
.eh_frame:0000000000006F1B                 db  0Eh
.eh_frame:0000000000006F1C                 db  68h ; h
.eh_frame:0000000000006F1D                 db  42h ; B
.eh_frame:0000000000006F1E                 db  0Eh
.eh_frame:0000000000006F1F                 db  70h ; p
.eh_frame:0000000000006F20                 db  5Ch ; \
.eh_frame:0000000000006F21                 db  0Eh
.eh_frame:0000000000006F22                 db  68h ; h
.eh_frame:0000000000006F23                 db  41h ; A
.eh_frame:0000000000006F24                 db  0Eh
.eh_frame:0000000000006F25                 db  60h ; `
.eh_frame:0000000000006F26                 db  44h ; D
.eh_frame:0000000000006F27                 db  0Ah
.eh_frame:0000000000006F28                 db  0Eh
.eh_frame:0000000000006F29                 db  38h ; 8
.eh_frame:0000000000006F2A                 db  41h ; A
.eh_frame:0000000000006F2B                 db  0Eh
.eh_frame:0000000000006F2C                 db  30h ; 0
.eh_frame:0000000000006F2D                 db  41h ; A
.eh_frame:0000000000006F2E                 db  0Eh
.eh_frame:0000000000006F2F                 db  28h ; (
.eh_frame:0000000000006F30                 db  42h ; B
.eh_frame:0000000000006F31                 db  0Eh
.eh_frame:0000000000006F32                 db  20h
.eh_frame:0000000000006F33                 db  42h ; B
.eh_frame:0000000000006F34                 db  0Eh
.eh_frame:0000000000006F35                 db  18h
.eh_frame:0000000000006F36                 db  42h ; B
.eh_frame:0000000000006F37                 db  0Eh
.eh_frame:0000000000006F38                 db  10h
.eh_frame:0000000000006F39                 db  42h ; B
.eh_frame:0000000000006F3A                 db  0Eh
.eh_frame:0000000000006F3B                 db    8
.eh_frame:0000000000006F3C                 db  45h ; E
.eh_frame:0000000000006F3D                 db  0Bh
.eh_frame:0000000000006F3E                 db  68h ; h
.eh_frame:0000000000006F3F                 db  0Ah
.eh_frame:0000000000006F40                 db  0Eh
.eh_frame:0000000000006F41                 db  68h ; h
.eh_frame:0000000000006F42                 db  48h ; H
.eh_frame:0000000000006F43                 db  0Bh
.eh_frame:0000000000006F44                 db  72h ; r
.eh_frame:0000000000006F45                 db  0Eh
.eh_frame:0000000000006F46                 db  68h ; h
.eh_frame:0000000000006F47                 db  45h ; E
.eh_frame:0000000000006F48                 db  0Eh
.eh_frame:0000000000006F49                 db  70h ; p
.eh_frame:0000000000006F4A                 db  42h ; B
.eh_frame:0000000000006F4B                 db  0Eh
.eh_frame:0000000000006F4C                 db  78h ; x
.eh_frame:0000000000006F4D                 db  42h ; B
.eh_frame:0000000000006F4E                 db  0Eh
.eh_frame:0000000000006F4F                 db  80h
.eh_frame:0000000000006F50                 db    1
.eh_frame:0000000000006F51                 db  5Eh ; ^
.eh_frame:0000000000006F52                 db  0Eh
.eh_frame:0000000000006F53                 db  60h ; `
.eh_frame:0000000000006F54                 db  44h ; D
.eh_frame:0000000000006F55                 db  0Ah
.eh_frame:0000000000006F56                 db  0Eh
.eh_frame:0000000000006F57                 db  38h ; 8
.eh_frame:0000000000006F58                 db  41h ; A
.eh_frame:0000000000006F59                 db  0Eh
.eh_frame:0000000000006F5A                 db  30h ; 0
.eh_frame:0000000000006F5B                 db  41h ; A
.eh_frame:0000000000006F5C                 db  0Eh
.eh_frame:0000000000006F5D                 db  28h ; (
.eh_frame:0000000000006F5E                 db  42h ; B
.eh_frame:0000000000006F5F                 db  0Eh
.eh_frame:0000000000006F60                 db  20h
.eh_frame:0000000000006F61                 db  42h ; B
.eh_frame:0000000000006F62                 db  0Eh
.eh_frame:0000000000006F63                 db  18h
.eh_frame:0000000000006F64                 db  42h ; B
.eh_frame:0000000000006F65                 db  0Eh
.eh_frame:0000000000006F66                 db  10h
.eh_frame:0000000000006F67                 db  42h ; B
.eh_frame:0000000000006F68                 db  0Eh
.eh_frame:0000000000006F69                 db    8
.eh_frame:0000000000006F6A                 db  41h ; A
.eh_frame:0000000000006F6B                 db  0Bh
.eh_frame:0000000000006F6C                 db  79h ; y
.eh_frame:0000000000006F6D                 db  0Ah
.eh_frame:0000000000006F6E                 db  0Eh
.eh_frame:0000000000006F6F                 db  68h ; h
.eh_frame:0000000000006F70                 db  42h ; B
.eh_frame:0000000000006F71                 db  0Eh
.eh_frame:0000000000006F72                 db  70h ; p
.eh_frame:0000000000006F73                 db  42h ; B
.eh_frame:0000000000006F74                 db  0Eh
.eh_frame:0000000000006F75                 db  78h ; x
.eh_frame:0000000000006F76                 db  42h ; B
.eh_frame:0000000000006F77                 db  0Eh
.eh_frame:0000000000006F78                 db  80h
.eh_frame:0000000000006F79                 db    1
.eh_frame:0000000000006F7A                 db  51h ; Q
.eh_frame:0000000000006F7B                 db  0Bh
.eh_frame:0000000000006F7C                 db  10h
.eh_frame:0000000000006F7D                 db    0
.eh_frame:0000000000006F7E                 db    0
.eh_frame:0000000000006F7F                 db    0
.eh_frame:0000000000006F80                 db 0B8h
.eh_frame:0000000000006F81                 db    8
.eh_frame:0000000000006F82                 db    0
.eh_frame:0000000000006F83                 db    0
.eh_frame:0000000000006F84                 db  5Ch ; \
.eh_frame:0000000000006F85                 db 0DCh
.eh_frame:0000000000006F86                 db 0FFh
.eh_frame:0000000000006F87                 db 0FFh
.eh_frame:0000000000006F88                 db  20h
.eh_frame:0000000000006F89                 db    0
.eh_frame:0000000000006F8A                 db    0
.eh_frame:0000000000006F8B                 db    0
.eh_frame:0000000000006F8C                 db    0
.eh_frame:0000000000006F8D                 db    0
.eh_frame:0000000000006F8E                 db    0
.eh_frame:0000000000006F8F                 db    0
.eh_frame:0000000000006F90                 db  18h
.eh_frame:0000000000006F91                 db    0
.eh_frame:0000000000006F92                 db    0
.eh_frame:0000000000006F93                 db    0
.eh_frame:0000000000006F94                 db 0CCh
.eh_frame:0000000000006F95                 db    8
.eh_frame:0000000000006F96                 db    0
.eh_frame:0000000000006F97                 db    0
.eh_frame:0000000000006F98                 db  68h ; h
.eh_frame:0000000000006F99                 db 0DCh
.eh_frame:0000000000006F9A                 db 0FFh
.eh_frame:0000000000006F9B                 db 0FFh
.eh_frame:0000000000006F9C                 db  78h ; x
.eh_frame:0000000000006F9D                 db    0
.eh_frame:0000000000006F9E                 db    0
.eh_frame:0000000000006F9F                 db    0
.eh_frame:0000000000006FA0                 db    0
.eh_frame:0000000000006FA1                 db  44h ; D
.eh_frame:0000000000006FA2                 db  0Eh
.eh_frame:0000000000006FA3                 db  70h ; p
.eh_frame:0000000000006FA4                 db    2
.eh_frame:0000000000006FA5                 db  60h ; `
.eh_frame:0000000000006FA6                 db  0Ah
.eh_frame:0000000000006FA7                 db  0Eh
.eh_frame:0000000000006FA8                 db    8
.eh_frame:0000000000006FA9                 db  41h ; A
.eh_frame:0000000000006FAA                 db  0Bh
.eh_frame:0000000000006FAB                 db    0
.eh_frame:0000000000006FAC                 db  28h ; (
.eh_frame:0000000000006FAD                 db    0
.eh_frame:0000000000006FAE                 db    0
.eh_frame:0000000000006FAF                 db    0
.eh_frame:0000000000006FB0                 db 0E8h
.eh_frame:0000000000006FB1                 db    8
.eh_frame:0000000000006FB2                 db    0
.eh_frame:0000000000006FB3                 db    0
.eh_frame:0000000000006FB4                 db 0CCh
.eh_frame:0000000000006FB5                 db 0DCh
.eh_frame:0000000000006FB6                 db 0FFh
.eh_frame:0000000000006FB7                 db 0FFh
.eh_frame:0000000000006FB8                 db 0D5h
.eh_frame:0000000000006FB9                 db    0
.eh_frame:0000000000006FBA                 db    0
.eh_frame:0000000000006FBB                 db    0
.eh_frame:0000000000006FBC                 db    0
.eh_frame:0000000000006FBD                 db  41h ; A
.eh_frame:0000000000006FBE                 db  0Eh
.eh_frame:0000000000006FBF                 db  10h
.eh_frame:0000000000006FC0                 db  86h
.eh_frame:0000000000006FC1                 db    2
.eh_frame:0000000000006FC2                 db  41h ; A
.eh_frame:0000000000006FC3                 db  0Eh
.eh_frame:0000000000006FC4                 db  18h
.eh_frame:0000000000006FC5                 db  83h
.eh_frame:0000000000006FC6                 db    3
.eh_frame:0000000000006FC7                 db  50h ; P
.eh_frame:0000000000006FC8                 db  0Eh
.eh_frame:0000000000006FC9                 db 0D0h
.eh_frame:0000000000006FCA                 db    1
.eh_frame:0000000000006FCB                 db    2
.eh_frame:0000000000006FCC                 db 0ABh
.eh_frame:0000000000006FCD                 db  0Ah
.eh_frame:0000000000006FCE                 db  0Eh
.eh_frame:0000000000006FCF                 db  18h
.eh_frame:0000000000006FD0                 db  41h ; A
.eh_frame:0000000000006FD1                 db  0Eh
.eh_frame:0000000000006FD2                 db  10h
.eh_frame:0000000000006FD3                 db  41h ; A
.eh_frame:0000000000006FD4                 db  0Eh
.eh_frame:0000000000006FD5                 db    8
.eh_frame:0000000000006FD6                 db  41h ; A
.eh_frame:0000000000006FD7                 db  0Bh
.eh_frame:0000000000006FD8                 db  1Ch
.eh_frame:0000000000006FD9                 db    0
.eh_frame:0000000000006FDA                 db    0
.eh_frame:0000000000006FDB                 db    0
.eh_frame:0000000000006FDC                 db  14h
.eh_frame:0000000000006FDD                 db    9
.eh_frame:0000000000006FDE                 db    0
.eh_frame:0000000000006FDF                 db    0
.eh_frame:0000000000006FE0                 db  80h
.eh_frame:0000000000006FE1                 db 0DDh
.eh_frame:0000000000006FE2                 db 0FFh
.eh_frame:0000000000006FE3                 db 0FFh
.eh_frame:0000000000006FE4                 db  80h
.eh_frame:0000000000006FE5                 db    0
.eh_frame:0000000000006FE6                 db    0
.eh_frame:0000000000006FE7                 db    0
.eh_frame:0000000000006FE8                 db    0
.eh_frame:0000000000006FE9                 db  41h ; A
.eh_frame:0000000000006FEA                 db  0Eh
.eh_frame:0000000000006FEB                 db  10h
.eh_frame:0000000000006FEC                 db  83h
.eh_frame:0000000000006FED                 db    2
.eh_frame:0000000000006FEE                 db    2
.eh_frame:0000000000006FEF                 db  7Ah ; z
.eh_frame:0000000000006FF0                 db  0Eh
.eh_frame:0000000000006FF1                 db    8
.eh_frame:0000000000006FF2                 db    0
.eh_frame:0000000000006FF3                 db    0
.eh_frame:0000000000006FF4                 db    0
.eh_frame:0000000000006FF5                 db    0
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db  18h
.eh_frame:0000000000006FF9                 db    0
.eh_frame:0000000000006FFA                 db    0
.eh_frame:0000000000006FFB                 db    0
.eh_frame:0000000000006FFC                 db  34h ; 4
.eh_frame:0000000000006FFD                 db    9
.eh_frame:0000000000006FFE                 db    0
.eh_frame:0000000000006FFF                 db    0
.eh_frame:0000000000007000                 db 0E0h
.eh_frame:0000000000007001                 db 0DDh
.eh_frame:0000000000007002                 db 0FFh
.eh_frame:0000000000007003                 db 0FFh
.eh_frame:0000000000007004                 db  1Ah
.eh_frame:0000000000007005                 db    0
.eh_frame:0000000000007006                 db    0
.eh_frame:0000000000007007                 db    0
.eh_frame:0000000000007008                 db    0
.eh_frame:0000000000007009                 db  41h ; A
.eh_frame:000000000000700A                 db  0Eh
.eh_frame:000000000000700B                 db  10h
.eh_frame:000000000000700C                 db  83h
.eh_frame:000000000000700D                 db    2
.eh_frame:000000000000700E                 db  53h ; S
.eh_frame:000000000000700F                 db  0Ah
.eh_frame:0000000000007010                 db  0Eh
.eh_frame:0000000000007011                 db    8
.eh_frame:0000000000007012                 db  41h ; A
.eh_frame:0000000000007013                 db  0Bh
.eh_frame:0000000000007014                 db  10h
.eh_frame:0000000000007015                 db    0
.eh_frame:0000000000007016                 db    0
.eh_frame:0000000000007017                 db    0
.eh_frame:0000000000007018                 db  50h ; P
.eh_frame:0000000000007019                 db    9
.eh_frame:000000000000701A                 db    0
.eh_frame:000000000000701B                 db    0
.eh_frame:000000000000701C                 db 0E4h
.eh_frame:000000000000701D                 db 0DDh
.eh_frame:000000000000701E                 db 0FFh
.eh_frame:000000000000701F                 db 0FFh
.eh_frame:0000000000007020                 db  24h ; $
.eh_frame:0000000000007021                 db    0
.eh_frame:0000000000007022                 db    0
.eh_frame:0000000000007023                 db    0
.eh_frame:0000000000007024                 db    0
.eh_frame:0000000000007025                 db  5Fh ; _
.eh_frame:0000000000007026                 db  0Eh
.eh_frame:0000000000007027                 db  10h
.eh_frame:0000000000007028                 db  10h
.eh_frame:0000000000007029                 db    0
.eh_frame:000000000000702A                 db    0
.eh_frame:000000000000702B                 db    0
.eh_frame:000000000000702C                 db  64h ; d
.eh_frame:000000000000702D                 db    9
.eh_frame:000000000000702E                 db    0
.eh_frame:000000000000702F                 db    0
.eh_frame:0000000000007030                 db    0
.eh_frame:0000000000007031                 db 0DEh
.eh_frame:0000000000007032                 db 0FFh
.eh_frame:0000000000007033                 db 0FFh
.eh_frame:0000000000007034                 db    2
.eh_frame:0000000000007035                 db    0
.eh_frame:0000000000007036                 db    0
.eh_frame:0000000000007037                 db    0
.eh_frame:0000000000007038                 db    0
.eh_frame:0000000000007039                 db    0
.eh_frame:000000000000703A                 db    0
.eh_frame:000000000000703B                 db    0
.eh_frame:000000000000703C                 db  20h
.eh_frame:000000000000703D                 db    0
.eh_frame:000000000000703E                 db    0
.eh_frame:000000000000703F                 db    0
.eh_frame:0000000000007040                 db  78h ; x
.eh_frame:0000000000007041                 db    9
.eh_frame:0000000000007042                 db    0
.eh_frame:0000000000007043                 db    0
.eh_frame:0000000000007044                 db 0FCh
.eh_frame:0000000000007045                 db 0DDh
.eh_frame:0000000000007046                 db 0FFh
.eh_frame:0000000000007047                 db 0FFh
.eh_frame:0000000000007048                 db  36h ; 6
.eh_frame:0000000000007049                 db    0
.eh_frame:000000000000704A                 db    0
.eh_frame:000000000000704B                 db    0
.eh_frame:000000000000704C                 db    0
.eh_frame:000000000000704D                 db  44h ; D
.eh_frame:000000000000704E                 db  0Eh
.eh_frame:000000000000704F                 db  10h
.eh_frame:0000000000007050                 db  83h
.eh_frame:0000000000007051                 db    2
.eh_frame:0000000000007052                 db  5Dh ; ]
.eh_frame:0000000000007053                 db  0Ah
.eh_frame:0000000000007054                 db  0Eh
.eh_frame:0000000000007055                 db    8
.eh_frame:0000000000007056                 db  47h ; G
.eh_frame:0000000000007057                 db  0Bh
.eh_frame:0000000000007058                 db  48h ; H
.eh_frame:0000000000007059                 db  0Ah
.eh_frame:000000000000705A                 db  0Eh
.eh_frame:000000000000705B                 db    8
.eh_frame:000000000000705C                 db  41h ; A
.eh_frame:000000000000705D                 db  0Bh
.eh_frame:000000000000705E                 db    0
.eh_frame:000000000000705F                 db    0
.eh_frame:0000000000007060                 db  10h
.eh_frame:0000000000007061                 db    0
.eh_frame:0000000000007062                 db    0
.eh_frame:0000000000007063                 db    0
.eh_frame:0000000000007064                 db  9Ch
.eh_frame:0000000000007065                 db    9
.eh_frame:0000000000007066                 db    0
.eh_frame:0000000000007067                 db    0
.eh_frame:0000000000007068                 db  18h
.eh_frame:0000000000007069                 db 0DEh
.eh_frame:000000000000706A                 db 0FFh
.eh_frame:000000000000706B                 db 0FFh
.eh_frame:000000000000706C                 db  24h ; $
.eh_frame:000000000000706D                 db    0
.eh_frame:000000000000706E                 db    0
.eh_frame:000000000000706F                 db    0
.eh_frame:0000000000007070                 db    0
.eh_frame:0000000000007071                 db  5Fh ; _
.eh_frame:0000000000007072                 db  0Eh
.eh_frame:0000000000007073                 db  10h
.eh_frame:0000000000007074                 db  14h
.eh_frame:0000000000007075                 db    0
.eh_frame:0000000000007076                 db    0
.eh_frame:0000000000007077                 db    0
.eh_frame:0000000000007078                 db 0B0h
.eh_frame:0000000000007079                 db    9
.eh_frame:000000000000707A                 db    0
.eh_frame:000000000000707B                 db    0
.eh_frame:000000000000707C                 db  34h ; 4
.eh_frame:000000000000707D                 db 0DEh
.eh_frame:000000000000707E                 db 0FFh
.eh_frame:000000000000707F                 db 0FFh
.eh_frame:0000000000007080                 db  82h
.eh_frame:0000000000007081                 db    0
.eh_frame:0000000000007082                 db    0
.eh_frame:0000000000007083                 db    0
.eh_frame:0000000000007084                 db    0
.eh_frame:0000000000007085                 db    2
.eh_frame:0000000000007086                 db  5Fh ; _
.eh_frame:0000000000007087                 db  0Eh
.eh_frame:0000000000007088                 db  10h
.eh_frame:0000000000007089                 db  49h ; I
.eh_frame:000000000000708A                 db  0Eh
.eh_frame:000000000000708B                 db    8
.eh_frame:000000000000708C                 db  14h
.eh_frame:000000000000708D                 db    0
.eh_frame:000000000000708E                 db    0
.eh_frame:000000000000708F                 db    0
.eh_frame:0000000000007090                 db 0C8h
.eh_frame:0000000000007091                 db    9
.eh_frame:0000000000007092                 db    0
.eh_frame:0000000000007093                 db    0
.eh_frame:0000000000007094                 db 0ACh
.eh_frame:0000000000007095                 db 0DEh
.eh_frame:0000000000007096                 db 0FFh
.eh_frame:0000000000007097                 db 0FFh
.eh_frame:0000000000007098                 db  4Ah ; J
.eh_frame:0000000000007099                 db    0
.eh_frame:000000000000709A                 db    0
.eh_frame:000000000000709B                 db    0
.eh_frame:000000000000709C                 db    0
.eh_frame:000000000000709D                 db    2
.eh_frame:000000000000709E                 db  45h ; E
.eh_frame:000000000000709F                 db  0Eh
.eh_frame:00000000000070A0                 db  10h
.eh_frame:00000000000070A1                 db    0
.eh_frame:00000000000070A2                 db    0
.eh_frame:00000000000070A3                 db    0
.eh_frame:00000000000070A4                 db  18h
.eh_frame:00000000000070A5                 db    0
.eh_frame:00000000000070A6                 db    0
.eh_frame:00000000000070A7                 db    0
.eh_frame:00000000000070A8                 db 0E0h
.eh_frame:00000000000070A9                 db    9
.eh_frame:00000000000070AA                 db    0
.eh_frame:00000000000070AB                 db    0
.eh_frame:00000000000070AC                 db 0E4h
.eh_frame:00000000000070AD                 db 0DEh
.eh_frame:00000000000070AE                 db 0FFh
.eh_frame:00000000000070AF                 db 0FFh
.eh_frame:00000000000070B0                 db  17h
.eh_frame:00000000000070B1                 db    0
.eh_frame:00000000000070B2                 db    0
.eh_frame:00000000000070B3                 db    0
.eh_frame:00000000000070B4                 db    0
.eh_frame:00000000000070B5                 db  41h ; A
.eh_frame:00000000000070B6                 db  0Eh
.eh_frame:00000000000070B7                 db  10h
.eh_frame:00000000000070B8                 db  83h
.eh_frame:00000000000070B9                 db    2
.eh_frame:00000000000070BA                 db  51h ; Q
.eh_frame:00000000000070BB                 db  0Eh
.eh_frame:00000000000070BC                 db    8
.eh_frame:00000000000070BD                 db    0
.eh_frame:00000000000070BE                 db    0
.eh_frame:00000000000070BF                 db    0
.eh_frame:00000000000070C0                 db  18h
.eh_frame:00000000000070C1                 db    0
.eh_frame:00000000000070C2                 db    0
.eh_frame:00000000000070C3                 db    0
.eh_frame:00000000000070C4                 db 0FCh
.eh_frame:00000000000070C5                 db    9
.eh_frame:00000000000070C6                 db    0
.eh_frame:00000000000070C7                 db    0
.eh_frame:00000000000070C8                 db 0E8h
.eh_frame:00000000000070C9                 db 0DEh
.eh_frame:00000000000070CA                 db 0FFh
.eh_frame:00000000000070CB                 db 0FFh
.eh_frame:00000000000070CC                 db  2Eh ; .
.eh_frame:00000000000070CD                 db    0
.eh_frame:00000000000070CE                 db    0
.eh_frame:00000000000070CF                 db    0
.eh_frame:00000000000070D0                 db    0
.eh_frame:00000000000070D1                 db  47h ; G
.eh_frame:00000000000070D2                 db  0Eh
.eh_frame:00000000000070D3                 db  10h
.eh_frame:00000000000070D4                 db  61h ; a
.eh_frame:00000000000070D5                 db  0Ah
.eh_frame:00000000000070D6                 db  0Eh
.eh_frame:00000000000070D7                 db    8
.eh_frame:00000000000070D8                 db  41h ; A
.eh_frame:00000000000070D9                 db  0Bh
.eh_frame:00000000000070DA                 db    0
.eh_frame:00000000000070DB                 db    0
.eh_frame:00000000000070DC                 db  24h ; $
.eh_frame:00000000000070DD                 db    0
.eh_frame:00000000000070DE                 db    0
.eh_frame:00000000000070DF                 db    0
.eh_frame:00000000000070E0                 db  18h
.eh_frame:00000000000070E1                 db  0Ah
.eh_frame:00000000000070E2                 db    0
.eh_frame:00000000000070E3                 db    0
.eh_frame:00000000000070E4                 db 0FCh
.eh_frame:00000000000070E5                 db 0DEh
.eh_frame:00000000000070E6                 db 0FFh
.eh_frame:00000000000070E7                 db 0FFh
.eh_frame:00000000000070E8                 db  28h ; (
.eh_frame:00000000000070E9                 db    0
.eh_frame:00000000000070EA                 db    0
.eh_frame:00000000000070EB                 db    0
.eh_frame:00000000000070EC                 db    0
.eh_frame:00000000000070ED                 db  41h ; A
.eh_frame:00000000000070EE                 db  0Eh
.eh_frame:00000000000070EF                 db  10h
.eh_frame:00000000000070F0                 db  86h
.eh_frame:00000000000070F1                 db    2
.eh_frame:00000000000070F2                 db  41h ; A
.eh_frame:00000000000070F3                 db  0Eh
.eh_frame:00000000000070F4                 db  18h
.eh_frame:00000000000070F5                 db  83h
.eh_frame:00000000000070F6                 db    3
.eh_frame:00000000000070F7                 db  4Dh ; M
.eh_frame:00000000000070F8                 db  0Eh
.eh_frame:00000000000070F9                 db  20h
.eh_frame:00000000000070FA                 db  49h ; I
.eh_frame:00000000000070FB                 db  0Eh
.eh_frame:00000000000070FC                 db  18h
.eh_frame:00000000000070FD                 db  47h ; G
.eh_frame:00000000000070FE                 db  0Eh
.eh_frame:00000000000070FF                 db  10h
.eh_frame:0000000000007100                 db  41h ; A
.eh_frame:0000000000007101                 db  0Eh
.eh_frame:0000000000007102                 db    8
.eh_frame:0000000000007103                 db    0
.eh_frame:0000000000007104                 db  18h
.eh_frame:0000000000007105                 db    0
.eh_frame:0000000000007106                 db    0
.eh_frame:0000000000007107                 db    0
.eh_frame:0000000000007108                 db  40h ; @
.eh_frame:0000000000007109                 db  0Ah
.eh_frame:000000000000710A                 db    0
.eh_frame:000000000000710B                 db    0
.eh_frame:000000000000710C                 db    4
.eh_frame:000000000000710D                 db 0DFh
.eh_frame:000000000000710E                 db 0FFh
.eh_frame:000000000000710F                 db 0FFh
.eh_frame:0000000000007110                 db  13h
.eh_frame:0000000000007111                 db    0
.eh_frame:0000000000007112                 db    0
.eh_frame:0000000000007113                 db    0
.eh_frame:0000000000007114                 db    0
.eh_frame:0000000000007115                 db  41h ; A
.eh_frame:0000000000007116                 db  0Eh
.eh_frame:0000000000007117                 db  10h
.eh_frame:0000000000007118                 db  83h
.eh_frame:0000000000007119                 db    2
.eh_frame:000000000000711A                 db  50h ; P
.eh_frame:000000000000711B                 db  0Eh
.eh_frame:000000000000711C                 db    8
.eh_frame:000000000000711D                 db    0
.eh_frame:000000000000711E                 db    0
.eh_frame:000000000000711F                 db    0
.eh_frame:0000000000007120                 db  14h
.eh_frame:0000000000007121                 db    0
.eh_frame:0000000000007122                 db    0
.eh_frame:0000000000007123                 db    0
.eh_frame:0000000000007124                 db  5Ch ; \
.eh_frame:0000000000007125                 db  0Ah
.eh_frame:0000000000007126                 db    0
.eh_frame:0000000000007127                 db    0
.eh_frame:0000000000007128                 db    8
.eh_frame:0000000000007129                 db 0DFh
.eh_frame:000000000000712A                 db 0FFh
.eh_frame:000000000000712B                 db 0FFh
.eh_frame:000000000000712C                 db  35h ; 5
.eh_frame:000000000000712D                 db    0
.eh_frame:000000000000712E                 db    0
.eh_frame:000000000000712F                 db    0
.eh_frame:0000000000007130                 db    0
.eh_frame:0000000000007131                 db  4Bh ; K
.eh_frame:0000000000007132                 db  0Eh
.eh_frame:0000000000007133                 db  10h
.eh_frame:0000000000007134                 db    0
.eh_frame:0000000000007135                 db    0
.eh_frame:0000000000007136                 db    0
.eh_frame:0000000000007137                 db    0
.eh_frame:0000000000007138                 db  1Ch
.eh_frame:0000000000007139                 db    0
.eh_frame:000000000000713A                 db    0
.eh_frame:000000000000713B                 db    0
.eh_frame:000000000000713C                 db  74h ; t
.eh_frame:000000000000713D                 db  0Ah
.eh_frame:000000000000713E                 db    0
.eh_frame:000000000000713F                 db    0
.eh_frame:0000000000007140                 db  30h ; 0
.eh_frame:0000000000007141                 db 0DFh
.eh_frame:0000000000007142                 db 0FFh
.eh_frame:0000000000007143                 db 0FFh
.eh_frame:0000000000007144                 db  18h
.eh_frame:0000000000007145                 db    0
.eh_frame:0000000000007146                 db    0
.eh_frame:0000000000007147                 db    0
.eh_frame:0000000000007148                 db    0
.eh_frame:0000000000007149                 db  44h ; D
.eh_frame:000000000000714A                 db  0Eh
.eh_frame:000000000000714B                 db  10h
.eh_frame:000000000000714C                 db  4Eh ; N
.eh_frame:000000000000714D                 db  0Ah
.eh_frame:000000000000714E                 db  0Eh
.eh_frame:000000000000714F                 db    8
.eh_frame:0000000000007150                 db  41h ; A
.eh_frame:0000000000007151                 db  0Bh
.eh_frame:0000000000007152                 db    0
.eh_frame:0000000000007153                 db    0
.eh_frame:0000000000007154                 db    0
.eh_frame:0000000000007155                 db    0
.eh_frame:0000000000007156                 db    0
.eh_frame:0000000000007157                 db    0
.eh_frame:0000000000007158                 db  34h ; 4
.eh_frame:0000000000007159                 db    0
.eh_frame:000000000000715A                 db    0
.eh_frame:000000000000715B                 db    0
.eh_frame:000000000000715C                 db  94h
.eh_frame:000000000000715D                 db  0Ah
.eh_frame:000000000000715E                 db    0
.eh_frame:000000000000715F                 db    0
.eh_frame:0000000000007160                 db  30h ; 0
.eh_frame:0000000000007161                 db 0DFh
.eh_frame:0000000000007162                 db 0FFh
.eh_frame:0000000000007163                 db 0FFh
.eh_frame:0000000000007164                 db  7Bh ; {
.eh_frame:0000000000007165                 db    0
.eh_frame:0000000000007166                 db    0
.eh_frame:0000000000007167                 db    0
.eh_frame:0000000000007168                 db    0
.eh_frame:0000000000007169                 db  42h ; B
.eh_frame:000000000000716A                 db  0Eh
.eh_frame:000000000000716B                 db  10h
.eh_frame:000000000000716C                 db  8Ch
.eh_frame:000000000000716D                 db    2
.eh_frame:000000000000716E                 db  41h ; A
.eh_frame:000000000000716F                 db  0Eh
.eh_frame:0000000000007170                 db  18h
.eh_frame:0000000000007171                 db  86h
.eh_frame:0000000000007172                 db    3
.eh_frame:0000000000007173                 db  41h ; A
.eh_frame:0000000000007174                 db  0Eh
.eh_frame:0000000000007175                 db  20h
.eh_frame:0000000000007176                 db  83h
.eh_frame:0000000000007177                 db    4
.eh_frame:0000000000007178                 db  7Dh ; }
.eh_frame:0000000000007179                 db  0Ah
.eh_frame:000000000000717A                 db  0Eh
.eh_frame:000000000000717B                 db  18h
.eh_frame:000000000000717C                 db  41h ; A
.eh_frame:000000000000717D                 db  0Eh
.eh_frame:000000000000717E                 db  10h
.eh_frame:000000000000717F                 db  42h ; B
.eh_frame:0000000000007180                 db  0Eh
.eh_frame:0000000000007181                 db    8
.eh_frame:0000000000007182                 db  44h ; D
.eh_frame:0000000000007183                 db  0Bh
.eh_frame:0000000000007184                 db  60h ; `
.eh_frame:0000000000007185                 db  0Ah
.eh_frame:0000000000007186                 db  0Eh
.eh_frame:0000000000007187                 db  18h
.eh_frame:0000000000007188                 db  41h ; A
.eh_frame:0000000000007189                 db  0Eh
.eh_frame:000000000000718A                 db  10h
.eh_frame:000000000000718B                 db  42h ; B
.eh_frame:000000000000718C                 db  0Eh
.eh_frame:000000000000718D                 db    8
.eh_frame:000000000000718E                 db  45h ; E
.eh_frame:000000000000718F                 db  0Bh
.eh_frame:0000000000007190                 db  1Ch
.eh_frame:0000000000007191                 db    0
.eh_frame:0000000000007192                 db    0
.eh_frame:0000000000007193                 db    0
.eh_frame:0000000000007194                 db 0CCh
.eh_frame:0000000000007195                 db  0Ah
.eh_frame:0000000000007196                 db    0
.eh_frame:0000000000007197                 db    0
.eh_frame:0000000000007198                 db  78h ; x
.eh_frame:0000000000007199                 db 0DFh
.eh_frame:000000000000719A                 db 0FFh
.eh_frame:000000000000719B                 db 0FFh
.eh_frame:000000000000719C                 db  40h ; @
.eh_frame:000000000000719D                 db    0
.eh_frame:000000000000719E                 db    0
.eh_frame:000000000000719F                 db    0
.eh_frame:00000000000071A0                 db    0
.eh_frame:00000000000071A1                 db  44h ; D
.eh_frame:00000000000071A2                 db  0Eh
.eh_frame:00000000000071A3                 db  10h
.eh_frame:00000000000071A4                 db  83h
.eh_frame:00000000000071A5                 db    2
.eh_frame:00000000000071A6                 db  5Ah ; Z
.eh_frame:00000000000071A7                 db  0Ah
.eh_frame:00000000000071A8                 db  0Eh
.eh_frame:00000000000071A9                 db    8
.eh_frame:00000000000071AA                 db  4Ah ; J
.eh_frame:00000000000071AB                 db  0Bh
.eh_frame:00000000000071AC                 db  53h ; S
.eh_frame:00000000000071AD                 db  0Eh
.eh_frame:00000000000071AE                 db    8
.eh_frame:00000000000071AF                 db    0
.eh_frame:00000000000071B0                 db  2Ch ; ,
.eh_frame:00000000000071B1                 db    0
.eh_frame:00000000000071B2                 db    0
.eh_frame:00000000000071B3                 db    0
.eh_frame:00000000000071B4                 db 0ECh
.eh_frame:00000000000071B5                 db  0Ah
.eh_frame:00000000000071B6                 db    0
.eh_frame:00000000000071B7                 db    0
.eh_frame:00000000000071B8                 db  98h
.eh_frame:00000000000071B9                 db 0DFh
.eh_frame:00000000000071BA                 db 0FFh
.eh_frame:00000000000071BB                 db 0FFh
.eh_frame:00000000000071BC                 db  57h ; W
.eh_frame:00000000000071BD                 db    0
.eh_frame:00000000000071BE                 db    0
.eh_frame:00000000000071BF                 db    0
.eh_frame:00000000000071C0                 db    0
.eh_frame:00000000000071C1                 db  63h ; c
.eh_frame:00000000000071C2                 db  0Eh
.eh_frame:00000000000071C3                 db  10h
.eh_frame:00000000000071C4                 db  8Ch
.eh_frame:00000000000071C5                 db    2
.eh_frame:00000000000071C6                 db  41h ; A
.eh_frame:00000000000071C7                 db  0Eh
.eh_frame:00000000000071C8                 db  18h
.eh_frame:00000000000071C9                 db  86h
.eh_frame:00000000000071CA                 db    3
.eh_frame:00000000000071CB                 db  44h ; D
.eh_frame:00000000000071CC                 db  0Eh
.eh_frame:00000000000071CD                 db  20h
.eh_frame:00000000000071CE                 db  83h
.eh_frame:00000000000071CF                 db    4
.eh_frame:00000000000071D0                 db  6Bh ; k
.eh_frame:00000000000071D1                 db  0Eh
.eh_frame:00000000000071D2                 db  18h
.eh_frame:00000000000071D3                 db  41h ; A
.eh_frame:00000000000071D4                 db  0Eh
.eh_frame:00000000000071D5                 db  10h
.eh_frame:00000000000071D6                 db  42h ; B
.eh_frame:00000000000071D7                 db  0Eh
.eh_frame:00000000000071D8                 db    8
.eh_frame:00000000000071D9                 db    0
.eh_frame:00000000000071DA                 db    0
.eh_frame:00000000000071DB                 db    0
.eh_frame:00000000000071DC                 db    0
.eh_frame:00000000000071DD                 db    0
.eh_frame:00000000000071DE                 db    0
.eh_frame:00000000000071DF                 db    0
.eh_frame:00000000000071E0                 db  3Ch ; <
.eh_frame:00000000000071E1                 db    0
.eh_frame:00000000000071E2                 db    0
.eh_frame:00000000000071E3                 db    0
.eh_frame:00000000000071E4                 db  1Ch
.eh_frame:00000000000071E5                 db  0Bh
.eh_frame:00000000000071E6                 db    0
.eh_frame:00000000000071E7                 db    0
.eh_frame:00000000000071E8                 db 0C8h
.eh_frame:00000000000071E9                 db 0DFh
.eh_frame:00000000000071EA                 db 0FFh
.eh_frame:00000000000071EB                 db 0FFh
.eh_frame:00000000000071EC                 db  83h
.eh_frame:00000000000071ED                 db    0
.eh_frame:00000000000071EE                 db    0
.eh_frame:00000000000071EF                 db    0
.eh_frame:00000000000071F0                 db    0
.eh_frame:00000000000071F1                 db  42h ; B
.eh_frame:00000000000071F2                 db  0Eh
.eh_frame:00000000000071F3                 db  10h
.eh_frame:00000000000071F4                 db  8Dh
.eh_frame:00000000000071F5                 db    2
.eh_frame:00000000000071F6                 db  42h ; B
.eh_frame:00000000000071F7                 db  0Eh
.eh_frame:00000000000071F8                 db  18h
.eh_frame:00000000000071F9                 db  8Ch
.eh_frame:00000000000071FA                 db    3
.eh_frame:00000000000071FB                 db  44h ; D
.eh_frame:00000000000071FC                 db  0Eh
.eh_frame:00000000000071FD                 db  20h
.eh_frame:00000000000071FE                 db  86h
.eh_frame:00000000000071FF                 db    4
.eh_frame:0000000000007200                 db  41h ; A
.eh_frame:0000000000007201                 db  0Eh
.eh_frame:0000000000007202                 db  28h ; (
.eh_frame:0000000000007203                 db  83h
.eh_frame:0000000000007204                 db    5
.eh_frame:0000000000007205                 db  4Ah ; J
.eh_frame:0000000000007206                 db  0Eh
.eh_frame:0000000000007207                 db  40h ; @
.eh_frame:0000000000007208                 db    2
.eh_frame:0000000000007209                 db  64h ; d
.eh_frame:000000000000720A                 db  0Ah
.eh_frame:000000000000720B                 db  0Eh
.eh_frame:000000000000720C                 db  28h ; (
.eh_frame:000000000000720D                 db  41h ; A
.eh_frame:000000000000720E                 db  0Eh
.eh_frame:000000000000720F                 db  20h
.eh_frame:0000000000007210                 db  41h ; A
.eh_frame:0000000000007211                 db  0Eh
.eh_frame:0000000000007212                 db  18h
.eh_frame:0000000000007213                 db  42h ; B
.eh_frame:0000000000007214                 db  0Eh
.eh_frame:0000000000007215                 db  10h
.eh_frame:0000000000007216                 db  42h ; B
.eh_frame:0000000000007217                 db  0Eh
.eh_frame:0000000000007218                 db    8
.eh_frame:0000000000007219                 db  41h ; A
.eh_frame:000000000000721A                 db  0Bh
.eh_frame:000000000000721B                 db    0
.eh_frame:000000000000721C                 db    0
.eh_frame:000000000000721D                 db    0
.eh_frame:000000000000721E                 db    0
.eh_frame:000000000000721F                 db    0
.eh_frame:0000000000007220                 db  4Ch ; L
.eh_frame:0000000000007221                 db    0
.eh_frame:0000000000007222                 db    0
.eh_frame:0000000000007223                 db    0
.eh_frame:0000000000007224                 db  5Ch ; \
.eh_frame:0000000000007225                 db  0Bh
.eh_frame:0000000000007226                 db    0
.eh_frame:0000000000007227                 db    0
.eh_frame:0000000000007228                 db  18h
.eh_frame:0000000000007229                 db 0E0h
.eh_frame:000000000000722A                 db 0FFh
.eh_frame:000000000000722B                 db 0FFh
.eh_frame:000000000000722C                 db  7Dh ; }
.eh_frame:000000000000722D                 db    0
.eh_frame:000000000000722E                 db    0
.eh_frame:000000000000722F                 db    0
.eh_frame:0000000000007230                 db    0
.eh_frame:0000000000007231                 db  42h ; B
.eh_frame:0000000000007232                 db  0Eh
.eh_frame:0000000000007233                 db  10h
.eh_frame:0000000000007234                 db  8Ch
.eh_frame:0000000000007235                 db    2
.eh_frame:0000000000007236                 db  41h ; A
.eh_frame:0000000000007237                 db  0Eh
.eh_frame:0000000000007238                 db  18h
.eh_frame:0000000000007239                 db  86h
.eh_frame:000000000000723A                 db    3
.eh_frame:000000000000723B                 db  44h ; D
.eh_frame:000000000000723C                 db  0Eh
.eh_frame:000000000000723D                 db  20h
.eh_frame:000000000000723E                 db  83h
.eh_frame:000000000000723F                 db    4
.eh_frame:0000000000007240                 db  69h ; i
.eh_frame:0000000000007241                 db  0Ah
.eh_frame:0000000000007242                 db  0Eh
.eh_frame:0000000000007243                 db  18h
.eh_frame:0000000000007244                 db  41h ; A
.eh_frame:0000000000007245                 db  0Eh
.eh_frame:0000000000007246                 db  10h
.eh_frame:0000000000007247                 db  42h ; B
.eh_frame:0000000000007248                 db  0Eh
.eh_frame:0000000000007249                 db    8
.eh_frame:000000000000724A                 db  45h ; E
.eh_frame:000000000000724B                 db  0Bh
.eh_frame:000000000000724C                 db  55h ; U
.eh_frame:000000000000724D                 db  0Ah
.eh_frame:000000000000724E                 db  0Eh
.eh_frame:000000000000724F                 db  18h
.eh_frame:0000000000007250                 db  41h ; A
.eh_frame:0000000000007251                 db  0Eh
.eh_frame:0000000000007252                 db  10h
.eh_frame:0000000000007253                 db  42h ; B
.eh_frame:0000000000007254                 db  0Eh
.eh_frame:0000000000007255                 db    8
.eh_frame:0000000000007256                 db  48h ; H
.eh_frame:0000000000007257                 db  0Bh
.eh_frame:0000000000007258                 db  41h ; A
.eh_frame:0000000000007259                 db  0Ah
.eh_frame:000000000000725A                 db  0Eh
.eh_frame:000000000000725B                 db  18h
.eh_frame:000000000000725C                 db  46h ; F
.eh_frame:000000000000725D                 db  0Eh
.eh_frame:000000000000725E                 db  10h
.eh_frame:000000000000725F                 db  42h ; B
.eh_frame:0000000000007260                 db  0Eh
.eh_frame:0000000000007261                 db    8
.eh_frame:0000000000007262                 db  47h ; G
.eh_frame:0000000000007263                 db  0Bh
.eh_frame:0000000000007264                 db  49h ; I
.eh_frame:0000000000007265                 db  0Eh
.eh_frame:0000000000007266                 db  18h
.eh_frame:0000000000007267                 db  41h ; A
.eh_frame:0000000000007268                 db  0Eh
.eh_frame:0000000000007269                 db  10h
.eh_frame:000000000000726A                 db  42h ; B
.eh_frame:000000000000726B                 db  0Eh
.eh_frame:000000000000726C                 db    8
.eh_frame:000000000000726D                 db    0
.eh_frame:000000000000726E                 db    0
.eh_frame:000000000000726F                 db    0
.eh_frame:0000000000007270                 db  1Ch
.eh_frame:0000000000007271                 db    0
.eh_frame:0000000000007272                 db    0
.eh_frame:0000000000007273                 db    0
.eh_frame:0000000000007274                 db 0ACh
.eh_frame:0000000000007275                 db  0Bh
.eh_frame:0000000000007276                 db    0
.eh_frame:0000000000007277                 db    0
.eh_frame:0000000000007278                 db  48h ; H
.eh_frame:0000000000007279                 db 0E0h
.eh_frame:000000000000727A                 db 0FFh
.eh_frame:000000000000727B                 db 0FFh
.eh_frame:000000000000727C                 db  60h ; `
.eh_frame:000000000000727D                 db    0
.eh_frame:000000000000727E                 db    0
.eh_frame:000000000000727F                 db    0
.eh_frame:0000000000007280                 db    0
.eh_frame:0000000000007281                 db  44h ; D
.eh_frame:0000000000007282                 db  0Eh
.eh_frame:0000000000007283                 db  10h
.eh_frame:0000000000007284                 db  75h ; u
.eh_frame:0000000000007285                 db  0Ah
.eh_frame:0000000000007286                 db  0Eh
.eh_frame:0000000000007287                 db    8
.eh_frame:0000000000007288                 db  47h ; G
.eh_frame:0000000000007289                 db  0Bh
.eh_frame:000000000000728A                 db  5Fh ; _
.eh_frame:000000000000728B                 db  0Eh
.eh_frame:000000000000728C                 db    8
.eh_frame:000000000000728D                 db    0
.eh_frame:000000000000728E                 db    0
.eh_frame:000000000000728F                 db    0
.eh_frame:0000000000007290                 db  1Ch
.eh_frame:0000000000007291                 db    0
.eh_frame:0000000000007292                 db    0
.eh_frame:0000000000007293                 db    0
.eh_frame:0000000000007294                 db 0CCh
.eh_frame:0000000000007295                 db  0Bh
.eh_frame:0000000000007296                 db    0
.eh_frame:0000000000007297                 db    0
.eh_frame:0000000000007298                 db  88h
.eh_frame:0000000000007299                 db 0E0h
.eh_frame:000000000000729A                 db 0FFh
.eh_frame:000000000000729B                 db 0FFh
.eh_frame:000000000000729C                 db  3Ch ; <
.eh_frame:000000000000729D                 db    0
.eh_frame:000000000000729E                 db    0
.eh_frame:000000000000729F                 db    0
.eh_frame:00000000000072A0                 db    0
.eh_frame:00000000000072A1                 db  44h ; D
.eh_frame:00000000000072A2                 db  0Eh
.eh_frame:00000000000072A3                 db  10h
.eh_frame:00000000000072A4                 db  61h ; a
.eh_frame:00000000000072A5                 db  0Ah
.eh_frame:00000000000072A6                 db  0Eh
.eh_frame:00000000000072A7                 db    8
.eh_frame:00000000000072A8                 db  4Bh ; K
.eh_frame:00000000000072A9                 db  0Bh
.eh_frame:00000000000072AA                 db  4Bh ; K
.eh_frame:00000000000072AB                 db  0Eh
.eh_frame:00000000000072AC                 db    8
.eh_frame:00000000000072AD                 db    0
.eh_frame:00000000000072AE                 db    0
.eh_frame:00000000000072AF                 db    0
.eh_frame:00000000000072B0                 db  44h ; D
.eh_frame:00000000000072B1                 db    0
.eh_frame:00000000000072B2                 db    0
.eh_frame:00000000000072B3                 db    0
.eh_frame:00000000000072B4                 db 0ECh
.eh_frame:00000000000072B5                 db  0Bh
.eh_frame:00000000000072B6                 db    0
.eh_frame:00000000000072B7                 db    0
.eh_frame:00000000000072B8                 db 0A8h
.eh_frame:00000000000072B9                 db 0E0h
.eh_frame:00000000000072BA                 db 0FFh
.eh_frame:00000000000072BB                 db 0FFh
.eh_frame:00000000000072BC                 db  65h ; e
.eh_frame:00000000000072BD                 db    0
.eh_frame:00000000000072BE                 db    0
.eh_frame:00000000000072BF                 db    0
.eh_frame:00000000000072C0                 db    0
.eh_frame:00000000000072C1                 db  42h ; B
.eh_frame:00000000000072C2                 db  0Eh
.eh_frame:00000000000072C3                 db  10h
.eh_frame:00000000000072C4                 db  8Fh
.eh_frame:00000000000072C5                 db    2
.eh_frame:00000000000072C6                 db  42h ; B
.eh_frame:00000000000072C7                 db  0Eh
.eh_frame:00000000000072C8                 db  18h
.eh_frame:00000000000072C9                 db  8Eh
.eh_frame:00000000000072CA                 db    3
.eh_frame:00000000000072CB                 db  45h ; E
.eh_frame:00000000000072CC                 db  0Eh
.eh_frame:00000000000072CD                 db  20h
.eh_frame:00000000000072CE                 db  8Dh
.eh_frame:00000000000072CF                 db    4
.eh_frame:00000000000072D0                 db  42h ; B
.eh_frame:00000000000072D1                 db  0Eh
.eh_frame:00000000000072D2                 db  28h ; (
.eh_frame:00000000000072D3                 db  8Ch
.eh_frame:00000000000072D4                 db    5
.eh_frame:00000000000072D5                 db  48h ; H
.eh_frame:00000000000072D6                 db  0Eh
.eh_frame:00000000000072D7                 db  30h ; 0
.eh_frame:00000000000072D8                 db  86h
.eh_frame:00000000000072D9                 db    6
.eh_frame:00000000000072DA                 db  48h ; H
.eh_frame:00000000000072DB                 db  0Eh
.eh_frame:00000000000072DC                 db  38h ; 8
.eh_frame:00000000000072DD                 db  83h
.eh_frame:00000000000072DE                 db    7
.eh_frame:00000000000072DF                 db  4Dh ; M
.eh_frame:00000000000072E0                 db  0Eh
.eh_frame:00000000000072E1                 db  40h ; @
.eh_frame:00000000000072E2                 db  72h ; r
.eh_frame:00000000000072E3                 db  0Eh
.eh_frame:00000000000072E4                 db  38h ; 8
.eh_frame:00000000000072E5                 db  41h ; A
.eh_frame:00000000000072E6                 db  0Eh
.eh_frame:00000000000072E7                 db  30h ; 0
.eh_frame:00000000000072E8                 db  41h ; A
.eh_frame:00000000000072E9                 db  0Eh
.eh_frame:00000000000072EA                 db  28h ; (
.eh_frame:00000000000072EB                 db  42h ; B
.eh_frame:00000000000072EC                 db  0Eh
.eh_frame:00000000000072ED                 db  20h
.eh_frame:00000000000072EE                 db  42h ; B
.eh_frame:00000000000072EF                 db  0Eh
.eh_frame:00000000000072F0                 db  18h
.eh_frame:00000000000072F1                 db  42h ; B
.eh_frame:00000000000072F2                 db  0Eh
.eh_frame:00000000000072F3                 db  10h
.eh_frame:00000000000072F4                 db  42h ; B
.eh_frame:00000000000072F5                 db  0Eh
.eh_frame:00000000000072F6                 db    8
.eh_frame:00000000000072F7                 db    0
.eh_frame:00000000000072F8                 db  14h
.eh_frame:00000000000072F9                 db    0
.eh_frame:00000000000072FA                 db    0
.eh_frame:00000000000072FB                 db    0
.eh_frame:00000000000072FC                 db  34h ; 4
.eh_frame:00000000000072FD                 db  0Ch
.eh_frame:00000000000072FE                 db    0
.eh_frame:00000000000072FF                 db    0
.eh_frame:0000000000007300                 db 0D0h
.eh_frame:0000000000007301                 db 0E0h
.eh_frame:0000000000007302                 db 0FFh
.eh_frame:0000000000007303                 db 0FFh
.eh_frame:0000000000007304                 db    2
.eh_frame:0000000000007305                 db    0
.eh_frame:0000000000007306                 db    0
.eh_frame:0000000000007307                 db    0
.eh_frame:0000000000007308                 db    0
.eh_frame:0000000000007309                 db    0
.eh_frame:000000000000730A                 db    0
.eh_frame:000000000000730B                 db    0
.eh_frame:000000000000730C                 db    0
.eh_frame:000000000000730D                 db    0
.eh_frame:000000000000730E                 db    0
.eh_frame:000000000000730F                 db    0
.eh_frame:0000000000007310                 db  10h
.eh_frame:0000000000007311                 db    0
.eh_frame:0000000000007312                 db    0
.eh_frame:0000000000007313                 db    0
.eh_frame:0000000000007314                 db  4Ch ; L
.eh_frame:0000000000007315                 db  0Ch
.eh_frame:0000000000007316                 db    0
.eh_frame:0000000000007317                 db    0
.eh_frame:0000000000007318                 db 0C8h
.eh_frame:0000000000007319                 db 0E0h
.eh_frame:000000000000731A                 db 0FFh
.eh_frame:000000000000731B                 db 0FFh
.eh_frame:000000000000731C                 db  0Eh
.eh_frame:000000000000731D                 db    0
.eh_frame:000000000000731E                 db    0
.eh_frame:000000000000731F                 db    0
.eh_frame:0000000000007320                 db    0
.eh_frame:0000000000007321                 db    0
.eh_frame:0000000000007322                 db    0
.eh_frame:0000000000007323                 db    0
.eh_frame:0000000000007324 __FRAME_END__   db    0
.eh_frame:0000000000007325 unk_7325        db    0                 ; DATA XREF: .rodata:format↑o
.eh_frame:0000000000007326                 db    0
.eh_frame:0000000000007327                 db    0
.eh_frame:0000000000007327 _eh_frame       ends
.eh_frame:0000000000007327
.init_array:0000000000207B50 ; ELF Initialization Function Table
.init_array:0000000000207B50 ; ===========================================================================
.init_array:0000000000207B50
.init_array:0000000000207B50 ; Segment type: Pure data
.init_array:0000000000207B50 ; Segment permissions: Read/Write
.init_array:0000000000207B50 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B50                 assume cs:_init_array
.init_array:0000000000207B50                 ;org 207B50h
.init_array:0000000000207B50 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B50                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B50                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B50 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B50
.fini_array:0000000000207B58 ; ELF Termination Function Table
.fini_array:0000000000207B58 ; ===========================================================================
.fini_array:0000000000207B58
.fini_array:0000000000207B58 ; Segment type: Pure data
.fini_array:0000000000207B58 ; Segment permissions: Read/Write
.fini_array:0000000000207B58 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B58                 assume cs:_fini_array
.fini_array:0000000000207B58                 ;org 207B58h
.fini_array:0000000000207B58 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B58                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B58 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B58
.data.rel.ro:0000000000207B60 ; ===========================================================================
.data.rel.ro:0000000000207B60
.data.rel.ro:0000000000207B60 ; Segment type: Pure data
.data.rel.ro:0000000000207B60 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B60 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B60                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B60                 ;org 207B60h
.data.rel.ro:0000000000207B60 ; struct option longopts
.data.rel.ro:0000000000207B60 longopts        dq offset aTabs         ; name
.data.rel.ro:0000000000207B60                                         ; DATA XREF: main:loc_1783↑o
.data.rel.ro:0000000000207B60                 dd 1                    ; has_arg ; "tabs"
.data.rel.ro:0000000000207B60                 db 4 dup(0)
.data.rel.ro:0000000000207B60                 dq 0                    ; flag
.data.rel.ro:0000000000207B60                 dd 74h                  ; val
.data.rel.ro:0000000000207B60                 db 4 dup(0)
.data.rel.ro:0000000000207B80                 dq offset aInitial      ; "initial"
.data.rel.ro:0000000000207B88                 db    0
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  69h ; i
.data.rel.ro:0000000000207B99                 db    0
.data.rel.ro:0000000000207B9A                 db    0
.data.rel.ro:0000000000207B9B                 db    0
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Eh ; ~
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db  7Dh ; }
.data.rel.ro:0000000000207BD9                 db 0FFh
.data.rel.ro:0000000000207BDA                 db 0FFh
.data.rel.ro:0000000000207BDB                 db 0FFh
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 db    0
.data.rel.ro:0000000000207BE1                 db    0
.data.rel.ro:0000000000207BE2                 db    0
.data.rel.ro:0000000000207BE3                 db    0
.data.rel.ro:0000000000207BE4                 db    0
.data.rel.ro:0000000000207BE5                 db    0
.data.rel.ro:0000000000207BE6                 db    0
.data.rel.ro:0000000000207BE7                 db    0
.data.rel.ro:0000000000207BE8                 db    0
.data.rel.ro:0000000000207BE9                 db    0
.data.rel.ro:0000000000207BEA                 db    0
.data.rel.ro:0000000000207BEB                 db    0
.data.rel.ro:0000000000207BEC                 db    0
.data.rel.ro:0000000000207BED                 db    0
.data.rel.ro:0000000000207BEE                 db    0
.data.rel.ro:0000000000207BEF                 db    0
.data.rel.ro:0000000000207BF0                 db    0
.data.rel.ro:0000000000207BF1                 db    0
.data.rel.ro:0000000000207BF2                 db    0
.data.rel.ro:0000000000207BF3                 db    0
.data.rel.ro:0000000000207BF4                 db    0
.data.rel.ro:0000000000207BF5                 db    0
.data.rel.ro:0000000000207BF6                 db    0
.data.rel.ro:0000000000207BF7                 db    0
.data.rel.ro:0000000000207BF8                 db    0
.data.rel.ro:0000000000207BF9                 db    0
.data.rel.ro:0000000000207BFA                 db    0
.data.rel.ro:0000000000207BFB                 db    0
.data.rel.ro:0000000000207BFC                 db    0
.data.rel.ro:0000000000207BFD                 db    0
.data.rel.ro:0000000000207BFE                 db    0
.data.rel.ro:0000000000207BFF                 db    0
.data.rel.ro:0000000000207C00                 public quoting_style_args
.data.rel.ro:0000000000207C00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207C08                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207C10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C28                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C48                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C50                 db    0
.data.rel.ro:0000000000207C51                 db    0
.data.rel.ro:0000000000207C52                 db    0
.data.rel.ro:0000000000207C53                 db    0
.data.rel.ro:0000000000207C54                 db    0
.data.rel.ro:0000000000207C55                 db    0
.data.rel.ro:0000000000207C56                 db    0
.data.rel.ro:0000000000207C57                 db    0
.data.rel.ro:0000000000207C57 _data_rel_ro    ends
.data.rel.ro:0000000000207C57
LOAD:0000000000207C58 ; ELF Dynamic Information
LOAD:0000000000207C58 ; ===========================================================================
LOAD:0000000000207C58
LOAD:0000000000207C58 ; Segment type: Pure data
LOAD:0000000000207C58 ; Segment permissions: Read/Write
LOAD:0000000000207C58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C58                 assume cs:LOAD
LOAD:0000000000207C58                 ;org 207C58h
LOAD:0000000000207C58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C68                 Elf64_Dyn <0Ch, 13E8h>  ; DT_INIT
LOAD:0000000000207C78                 Elf64_Dyn <0Dh, 53F0h>  ; DT_FINI
LOAD:0000000000207C88                 Elf64_Dyn <19h, 207B50h> ; DT_INIT_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <1Ah, 207B58h> ; DT_FINI_ARRAY
LOAD:0000000000207CB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CD8                 Elf64_Dyn <5, 8B0h>     ; DT_STRTAB
LOAD:0000000000207CE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CF8                 Elf64_Dyn <0Ah, 2DBh>   ; DT_STRSZ
LOAD:0000000000207D08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207D18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D28                 Elf64_Dyn <3, 207E48h>  ; DT_PLTGOT
LOAD:0000000000207D38                 Elf64_Dyn <2, 468h>     ; DT_PLTRELSZ
LOAD:0000000000207D48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D58                 Elf64_Dyn <17h, 0F80h>  ; DT_JMPREL
LOAD:0000000000207D68                 Elf64_Dyn <7, 0C68h>    ; DT_RELA
LOAD:0000000000207D78                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:0000000000207D88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFFEh, 0C08h> ; DT_VERNEED
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DD8                 Elf64_Dyn <6FFFFFF0h, 0B8Ch> ; DT_VERSYM
LOAD:0000000000207DE8                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:0000000000207DF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E28                 db    0
LOAD:0000000000207E29                 db    0
LOAD:0000000000207E2A                 db    0
LOAD:0000000000207E2B                 db    0
LOAD:0000000000207E2C                 db    0
LOAD:0000000000207E2D                 db    0
LOAD:0000000000207E2E                 db    0
LOAD:0000000000207E2F                 db    0
LOAD:0000000000207E30                 db    0
LOAD:0000000000207E31                 db    0
LOAD:0000000000207E32                 db    0
LOAD:0000000000207E33                 db    0
LOAD:0000000000207E34                 db    0
LOAD:0000000000207E35                 db    0
LOAD:0000000000207E36                 db    0
LOAD:0000000000207E37                 db    0
LOAD:0000000000207E38                 db    0
LOAD:0000000000207E39                 db    0
LOAD:0000000000207E3A                 db    0
LOAD:0000000000207E3B                 db    0
LOAD:0000000000207E3C                 db    0
LOAD:0000000000207E3D                 db    0
LOAD:0000000000207E3E                 db    0
LOAD:0000000000207E3F                 db    0
LOAD:0000000000207E40                 db    0
LOAD:0000000000207E41                 db    0
LOAD:0000000000207E42                 db    0
LOAD:0000000000207E43                 db    0
LOAD:0000000000207E44                 db    0
LOAD:0000000000207E45                 db    0
LOAD:0000000000207E46                 db    0
LOAD:0000000000207E47                 db    0
LOAD:0000000000207E47 LOAD            ends
LOAD:0000000000207E47
.got:0000000000207E48 ; ===========================================================================
.got:0000000000207E48
.got:0000000000207E48 ; Segment type: Pure data
.got:0000000000207E48 ; Segment permissions: Read/Write
.got:0000000000207E48 _got            segment qword public 'DATA' use64
.got:0000000000207E48                 assume cs:_got
.got:0000000000207E48                 ;org 207E48h
.got:0000000000207E48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E50 qword_207E50    dq 0                    ; DATA XREF: sub_1400↑r
.got:0000000000207E58 qword_207E58    dq 0                    ; DATA XREF: sub_1400+6↑r
.got:0000000000207E60 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000207E68 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E70 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E78 __errno_location_ptr dq offset __errno_location
.got:0000000000207E78                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E80 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E88 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E90 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E98 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:0000000000207E98                                         ; DATA XREF: _clearerr_unlocked↑r
.got:0000000000207EA0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207EA8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207EB0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207EB0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207EB8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EC0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EC0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EC8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207ED0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207ED0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207ED8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EE0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EE8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000207EF0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EF8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207F00 __assert_fail_ptr dq offset __assert_fail
.got:0000000000207F00                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000207F08 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207F10 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000207F18 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000207F18                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000207F20 strndup_ptr     dq offset strndup       ; DATA XREF: _strndup↑r
.got:0000000000207F28 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F30 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F30                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F38 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F40 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F48 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F50 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F58 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F60 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F68 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F70 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F78 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F80 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F88 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F90 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F98 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000207FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FE0                                         ; DATA XREF: start+24↑r
.got:0000000000207FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FF8 _got            ends
.got:0000000000207FF8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010 stdin_argv      dq offset aLt+2         ; DATA XREF: set_file_list↑o
.data:0000000000208010                                         ; "-"
.data:0000000000208018                 align 20h
.data:0000000000208020                 public Version
.data:0000000000208020 Version         dq offset a831          ; DATA XREF: main+B3↑r
.data:0000000000208020                                         ; "8.31"
.data:0000000000208028                 public exit_failure
.data:0000000000208028 ; int exit_failure
.data:0000000000208028 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2A22↑r
.data:0000000000208028                                         ; xalloc_die+17↑r
.data:000000000020802C                 align 20h
.data:0000000000208040                 public quote_quoting_options
.data:0000000000208040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208040                                         ; quote_mem↑o ...
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058                 db    0
.data:0000000000208059                 db    0
.data:000000000020805A                 db    0
.data:000000000020805B                 db    0
.data:000000000020805C                 db    0
.data:000000000020805D                 db    0
.data:000000000020805E                 db    0
.data:000000000020805F                 db    0
.data:0000000000208060                 db    0
.data:0000000000208061                 db    0
.data:0000000000208062                 db    0
.data:0000000000208063                 db    0
.data:0000000000208064                 db    0
.data:0000000000208065                 db    0
.data:0000000000208066                 db    0
.data:0000000000208067                 db    0
.data:0000000000208068                 db    0
.data:0000000000208069                 db    0
.data:000000000020806A                 db    0
.data:000000000020806B                 db    0
.data:000000000020806C                 db    0
.data:000000000020806D                 db    0
.data:000000000020806E                 db    0
.data:000000000020806F                 db    0
.data:0000000000208070                 db    0
.data:0000000000208071                 db    0
.data:0000000000208072                 db    0
.data:0000000000208073                 db    0
.data:0000000000208074                 db    0
.data:0000000000208075                 db    0
.data:0000000000208076                 db    0
.data:0000000000208077                 db    0
.data:0000000000208078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208078                                         ; quotearg_n_options:loc_3EDD↑r ...
.data:000000000020807C                 align 20h
.data:0000000000208080 ; void *slotvec
.data:0000000000208080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208080                                         ; quotearg_n_options+76↑w ...
.data:0000000000208088                 align 10h
.data:0000000000208090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208090                                         ; quotearg_n_options+187↑r ...
.data:0000000000208098 off_208098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208098 _data           ends
.data:0000000000208098
.bss:00000000002080A0 ; ===========================================================================
.bss:00000000002080A0
.bss:00000000002080A0 ; Segment type: Uninitialized
.bss:00000000002080A0 ; Segment permissions: Read/Write
.bss:00000000002080A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002080A0                 assume cs:_bss
.bss:00000000002080A0                 ;org 2080A0h
.bss:00000000002080A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002080A0                 public __bss_start ; weak
.bss:00000000002080A0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000007F0↑o
.bss:00000000002080A0                                         ; LOAD:0000000000000850↑o ...
.bss:00000000002080A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002080A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002080A0                                         ; _edata
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002080A8 ; _IO_FILE *stdout
.bss:00000000002080A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:00000000002080A8                                         ; main+AC↑r ...
.bss:00000000002080A8                                         ; Alternative name is 'stdout'
.bss:00000000002080A8                                         ; Copy of shared data
.bss:00000000002080B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002080B0 ; FILE *stdin
.bss:00000000002080B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000808↑o
.bss:00000000002080B0                                         ; next_file:loc_2750↑r ...
.bss:00000000002080B0                                         ; Alternative name is 'stdin'
.bss:00000000002080B0                                         ; Copy of shared data
.bss:00000000002080B8                 public optind@@GLIBC_2_2_5
.bss:00000000002080B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:00000000002080B8                                         ; main+147↑r
.bss:00000000002080B8                                         ; Alternative name is 'optind'
.bss:00000000002080B8                                         ; Copy of shared data
.bss:00000000002080BC                 align 20h
.bss:00000000002080C0                 public optarg@@GLIBC_2_2_5
.bss:00000000002080C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:00000000002080C0                                         ; main+EE↑r ...
.bss:00000000002080C0                                         ; Alternative name is 'optarg'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080C8                                         ; DATA XREF: LOAD:0000000000000820↑o
.bss:00000000002080C8                                         ; LOAD:0000000000000838↑o ...
.bss:00000000002080C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080C8                                         ; Copy of shared data
.bss:00000000002080D0                 align 20h
.bss:00000000002080E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080E0 ; FILE *stderr
.bss:00000000002080E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000868↑o
.bss:00000000002080E0                                         ; usage+3D↑r ...
.bss:00000000002080E0                                         ; Alternative name is 'stderr'
.bss:00000000002080E0                                         ; Copy of shared data
.bss:00000000002080E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080E9                 align 10h
.bss:00000000002080F0                 public exit_status
.bss:00000000002080F0 exit_status     dd ?                    ; DATA XREF: main+277↑r
.bss:00000000002080F0                                         ; next_file+C3↑w ...
.bss:00000000002080F4                 public convert_entire_line
.bss:00000000002080F4 convert_entire_line db ?                ; DATA XREF: main+6C↑w
.bss:00000000002080F4                                         ; main:loc_1830↑w ...
.bss:00000000002080F5                 align 8
.bss:00000000002080F8 prev_file_6959  dq ?                    ; DATA XREF: next_file+D↑r
.bss:00000000002080F8                                         ; next_file+11D↑w ...
.bss:0000000000208100 have_read_stdin db ?                    ; DATA XREF: set_file_list+A↑w
.bss:0000000000208100                                         ; next_file+87↑w ...
.bss:0000000000208101                 align 8
.bss:0000000000208108 file_list       dq ?                    ; DATA XREF: set_file_list+15↑w
.bss:0000000000208108                                         ; next_file:loc_271F↑r ...
.bss:0000000000208110 first_free_tab  dq ?                    ; DATA XREF: add_tab_stop+9↑r
.bss:0000000000208110                                         ; add_tab_stop+46↑w ...
.bss:0000000000208118 n_tabs_allocated dq ?                   ; DATA XREF: add_tab_stop+17↑r
.bss:0000000000208118                                         ; add_tab_stop:loc_20F1↑w
.bss:0000000000208120 tab_list        dq ?                    ; DATA XREF: add_tab_stop+10↑r
.bss:0000000000208120                                         ; add_tab_stop+C4↑w ...
.bss:0000000000208128 increment_size  dq ?                    ; DATA XREF: set_increment_size↑r
.bss:0000000000208128                                         ; set_increment_size:loc_2036↑w ...
.bss:0000000000208130 extend_size     dq ?                    ; DATA XREF: set_extend_size↑r
.bss:0000000000208130                                         ; set_extend_size:loc_1FF6↑w ...
.bss:0000000000208138 tab_size        dq ?                    ; DATA XREF: finalize_tab_stops:loc_2532↑w
.bss:0000000000208138                                         ; finalize_tab_stops+8B↑w ...
.bss:0000000000208140 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000208140                                         ; close_stdout+1B↑r
.bss:0000000000208141                 align 8
.bss:0000000000208148 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000208148                                         ; close_stdout+56↑r
.bss:0000000000208150                 public program_name
.bss:0000000000208150 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000208150                                         ; set_program_name:loc_2AFD↑w
.bss:0000000000208158                 align 20h
.bss:0000000000208160 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208160                                         ; quotearg_free+46↑o ...
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200                 db    ? ;
.bss:0000000000208201                 db    ? ;
.bss:0000000000208202                 db    ? ;
.bss:0000000000208203                 db    ? ;
.bss:0000000000208204                 db    ? ;
.bss:0000000000208205                 db    ? ;
.bss:0000000000208206                 db    ? ;
.bss:0000000000208207                 db    ? ;
.bss:0000000000208208                 db    ? ;
.bss:0000000000208209                 db    ? ;
.bss:000000000020820A                 db    ? ;
.bss:000000000020820B                 db    ? ;
.bss:000000000020820C                 db    ? ;
.bss:000000000020820D                 db    ? ;
.bss:000000000020820E                 db    ? ;
.bss:000000000020820F                 db    ? ;
.bss:0000000000208210                 db    ? ;
.bss:0000000000208211                 db    ? ;
.bss:0000000000208212                 db    ? ;
.bss:0000000000208213                 db    ? ;
.bss:0000000000208214                 db    ? ;
.bss:0000000000208215                 db    ? ;
.bss:0000000000208216                 db    ? ;
.bss:0000000000208217                 db    ? ;
.bss:0000000000208218                 db    ? ;
.bss:0000000000208219                 db    ? ;
.bss:000000000020821A                 db    ? ;
.bss:000000000020821B                 db    ? ;
.bss:000000000020821C                 db    ? ;
.bss:000000000020821D                 db    ? ;
.bss:000000000020821E                 db    ? ;
.bss:000000000020821F                 db    ? ;
.bss:0000000000208220                 db    ? ;
.bss:0000000000208221                 db    ? ;
.bss:0000000000208222                 db    ? ;
.bss:0000000000208223                 db    ? ;
.bss:0000000000208224                 db    ? ;
.bss:0000000000208225                 db    ? ;
.bss:0000000000208226                 db    ? ;
.bss:0000000000208227                 db    ? ;
.bss:0000000000208228                 db    ? ;
.bss:0000000000208229                 db    ? ;
.bss:000000000020822A                 db    ? ;
.bss:000000000020822B                 db    ? ;
.bss:000000000020822C                 db    ? ;
.bss:000000000020822D                 db    ? ;
.bss:000000000020822E                 db    ? ;
.bss:000000000020822F                 db    ? ;
.bss:0000000000208230                 db    ? ;
.bss:0000000000208231                 db    ? ;
.bss:0000000000208232                 db    ? ;
.bss:0000000000208233                 db    ? ;
.bss:0000000000208234                 db    ? ;
.bss:0000000000208235                 db    ? ;
.bss:0000000000208236                 db    ? ;
.bss:0000000000208237                 db    ? ;
.bss:0000000000208238                 db    ? ;
.bss:0000000000208239                 db    ? ;
.bss:000000000020823A                 db    ? ;
.bss:000000000020823B                 db    ? ;
.bss:000000000020823C                 db    ? ;
.bss:000000000020823D                 db    ? ;
.bss:000000000020823E                 db    ? ;
.bss:000000000020823F                 db    ? ;
.bss:0000000000208240                 db    ? ;
.bss:0000000000208241                 db    ? ;
.bss:0000000000208242                 db    ? ;
.bss:0000000000208243                 db    ? ;
.bss:0000000000208244                 db    ? ;
.bss:0000000000208245                 db    ? ;
.bss:0000000000208246                 db    ? ;
.bss:0000000000208247                 db    ? ;
.bss:0000000000208248                 db    ? ;
.bss:0000000000208249                 db    ? ;
.bss:000000000020824A                 db    ? ;
.bss:000000000020824B                 db    ? ;
.bss:000000000020824C                 db    ? ;
.bss:000000000020824D                 db    ? ;
.bss:000000000020824E                 db    ? ;
.bss:000000000020824F                 db    ? ;
.bss:0000000000208250                 db    ? ;
.bss:0000000000208251                 db    ? ;
.bss:0000000000208252                 db    ? ;
.bss:0000000000208253                 db    ? ;
.bss:0000000000208254                 db    ? ;
.bss:0000000000208255                 db    ? ;
.bss:0000000000208256                 db    ? ;
.bss:0000000000208257                 db    ? ;
.bss:0000000000208258                 db    ? ;
.bss:0000000000208259                 db    ? ;
.bss:000000000020825A                 db    ? ;
.bss:000000000020825B                 db    ? ;
.bss:000000000020825C                 db    ? ;
.bss:000000000020825D                 db    ? ;
.bss:000000000020825E                 db    ? ;
.bss:000000000020825F                 db    ? ;
.bss:0000000000208260 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208260                                         ; get_quoting_style↑o ...
.bss:0000000000208270 xmmword_208270  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208270                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208280 xmmword_208280  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208280                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208290 qword_208290    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208290                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208298                 public max_column_width
.bss:0000000000208298 max_column_width dq ?                   ; DATA XREF: add_tab_stop+64↑r
.bss:0000000000208298                                         ; add_tab_stop+78↑w ...
.bss:0000000000208298 _bss            ends
.bss:0000000000208298
.prgend:00000000002082A0 ; ===========================================================================
.prgend:00000000002082A0
.prgend:00000000002082A0 ; Segment type: Zero-length
.prgend:00000000002082A0 _prgend         segment byte public '' use64
.prgend:00000000002082A0 _end            label byte
.prgend:00000000002082A0 _prgend         ends
.prgend:00000000002082A0
extern:00000000002082A8 ; ===========================================================================
extern:00000000002082A8
extern:00000000002082A8 ; Segment type: Externs
extern:00000000002082A8 ; extern
extern:00000000002082A8 ; int _uflow(_IO_FILE *)
extern:00000000002082A8                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:00000000002082A8                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:00000000002082B0 ; void free(void *ptr)
extern:00000000002082B0                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002082B0                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002082B8 ; void __noreturn abort(void)
extern:00000000002082B8                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00000000002082B8                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002082C0 ; int *_errno_location(void)
extern:00000000002082C0                 extrn __errno_location:near
extern:00000000002082C0                                         ; CODE XREF: ___errno_location↑j
extern:00000000002082C0                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002082C8 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002082C8                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002082C8                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002082D0 ; void __noreturn exit(int status)
extern:00000000002082D0                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002082D0                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002082D8 ; size_t _fpending(FILE *fp)
extern:00000000002082D8                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002082D8                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002082E0 ; void clearerr_unlocked(FILE *stream)
extern:00000000002082E0                 extrn clearerr_unlocked:near
extern:00000000002082E0                                         ; CODE XREF: _clearerr_unlocked↑j
extern:00000000002082E0                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:00000000002082E8 ; char *textdomain(const char *domainname)
extern:00000000002082E8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002082E8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002082F0 ; int fclose(FILE *stream)
extern:00000000002082F0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002082F0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002082F8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002082F8                 extrn bindtextdomain:near
extern:00000000002082F8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002082F8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000208300 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000208300                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000208300                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000208308 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000208308                 extrn __ctype_get_mb_cur_max:near
extern:0000000000208308                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000208308                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000208310 ; size_t strlen(const char *s)
extern:0000000000208310                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000208310                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000208318                 extrn __stack_chk_fail:near
extern:0000000000208318                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000208318                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000208320 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000208320                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000208320                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000208328 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000208328                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000208328                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000208330 ; int _overflow(_IO_FILE *, int)
extern:0000000000208330                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000208330                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000208338 ; char *strrchr(const char *s, int c)
extern:0000000000208338                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000208338                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000208340 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000208340                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000208340                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000208348 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000208348                 extrn __assert_fail:near
extern:0000000000208348                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000208348                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000208350 ; void *memset(void *s, int c, size_t n)
extern:0000000000208350                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000208350                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000208358 ; size_t strspn(const char *s, const char *accept)
extern:0000000000208358                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:0000000000208358                                         ; DATA XREF: .got:strspn_ptr↑o
extern:0000000000208360 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000208360                 extrn posix_fadvise:near
extern:0000000000208360                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000208360                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000208368 ; char *strndup(const char *string, size_t n)
extern:0000000000208368                 extrn strndup:near      ; CODE XREF: _strndup↑j
extern:0000000000208368                                         ; DATA XREF: .got:strndup_ptr↑o
extern:0000000000208370 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000208370                 extrn __libc_start_main:near
extern:0000000000208370                                         ; CODE XREF: start+24↑p
extern:0000000000208370                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000208378 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000208378                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000208378                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208380 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208380                 extrn fputs_unlocked:near
extern:0000000000208380                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208380                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208388 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208388                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208388                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208390 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208390                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208390                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208398 ; int fileno(FILE *stream)
extern:0000000000208398                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208398                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002083A0 ; void *malloc(size_t size)
extern:00000000002083A0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002083A0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002083A8 ; int fflush(FILE *stream)
extern:00000000002083A8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002083A8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002083B0 ; char *nl_langinfo(nl_item item)
extern:00000000002083B0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002083B0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002083B8 ; int _freading(FILE *fp)
extern:00000000002083B8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002083B8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002083C0 ; void *realloc(void *ptr, size_t size)
extern:00000000002083C0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002083C0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:00000000002083C8 ; char *setlocale(int category, const char *locale)
extern:00000000002083C8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:00000000002083C8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002083D0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002083D0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002083D8 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002083D8                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002083D8                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002083E0 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002083E0                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002083E0                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002083E8 ; FILE *fopen(const char *filename, const char *modes)
extern:00000000002083E8                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:00000000002083E8                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002083F0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002083F0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002083F0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002083F8 ; void __noreturn exit(int status)
extern:00000000002083F8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002083F8                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000208400 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000208400                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000208400                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000208408                 extrn __fprintf_chk:near
extern:0000000000208408                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000208408                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000208410 ; int mbsinit(const mbstate_t *ps)
extern:0000000000208410                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000208410                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000208418 ; int iswprint(wint_t wc)
extern:0000000000208418                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000208418                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000208420 ; int __fastcall __cxa_finalize(void *)
extern:0000000000208420                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000208420                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000208420                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000208428 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000208428                 extrn __ctype_b_loc:near
extern:0000000000208428                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000208428                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000208430                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000208430                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000208438                 extrn __gmon_start__:near ; weak
extern:0000000000208438                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000208438                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000208440                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000208440                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000208440
extern:0000000000208440
extern:0000000000208440                 end start
